<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="program_file/output_data\Figure3-14-unix2.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="16:3">/*
 *
 * Copyright (c) 2005 Carnegie Mellon University.
 * All rights reserved.
 * Permission to use this software and its documentation for any purpose is hereby granted,
 * provided that the above copyright notice appear and that both that copyright notice and
 * this permission notice appear in supporting documentation, and that the name of CMU not
 * be used in advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.
 *
 * CMU DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL CMU BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
 * WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, RISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */</comment>

<cpp:include pos:start="18:1" pos:end="18:19">#<cpp:directive pos:start="18:2" pos:end="18:8">include</cpp:directive> <cpp:file pos:start="18:10" pos:end="18:19">&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="19:1" pos:end="19:18">#<cpp:directive pos:start="19:2" pos:end="19:8">include</cpp:directive> <cpp:file pos:start="19:10" pos:end="19:18">&lt;stdio.h&gt;</cpp:file></cpp:include>

<decl_stmt pos:start="21:1" pos:end="21:12"><decl pos:start="21:1" pos:end="21:11"><type pos:start="21:1" pos:end="21:7"><name pos:start="21:1" pos:end="21:7">jmp_buf</name></type> <name pos:start="21:9" pos:end="21:11">buf</name></decl>;</decl_stmt>
<function_decl pos:start="22:1" pos:end="22:14"><type pos:start="22:1" pos:end="22:4"><name pos:start="22:1" pos:end="22:4">void</name></type> <name pos:start="22:6" pos:end="22:6">g</name><parameter_list pos:start="22:7" pos:end="22:13">(<parameter pos:start="22:8" pos:end="22:12"><decl pos:start="22:8" pos:end="22:12"><type pos:start="22:8" pos:end="22:10"><name pos:start="22:8" pos:end="22:10">int</name></type> <name pos:start="22:12" pos:end="22:12">n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="23:1" pos:end="23:14"><type pos:start="23:1" pos:end="23:4"><name pos:start="23:1" pos:end="23:4">void</name></type> <name pos:start="23:6" pos:end="23:6">h</name><parameter_list pos:start="23:7" pos:end="23:13">(<parameter pos:start="23:8" pos:end="23:12"><decl pos:start="23:8" pos:end="23:12"><type pos:start="23:8" pos:end="23:10"><name pos:start="23:8" pos:end="23:10">int</name></type> <name pos:start="23:12" pos:end="23:12">n</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt pos:start="24:1" pos:end="24:10"><decl pos:start="24:1" pos:end="24:9"><type pos:start="24:1" pos:end="24:3"><name pos:start="24:1" pos:end="24:3">int</name></type> <name pos:start="24:5" pos:end="24:5">n</name> <init pos:start="24:7" pos:end="24:9">= <expr pos:start="24:9" pos:end="24:9"><literal type="number" pos:start="24:9" pos:end="24:9">6</literal></expr></init></decl>;</decl_stmt>

<function pos:start="26:1" pos:end="37:1"><type pos:start="26:1" pos:end="26:4"><name pos:start="26:1" pos:end="26:4">void</name></type> <name pos:start="26:6" pos:end="26:6">f</name><parameter_list pos:start="26:7" pos:end="26:12">(<parameter pos:start="26:8" pos:end="26:11"><decl pos:start="26:8" pos:end="26:11"><type pos:start="26:8" pos:end="26:11"><name pos:start="26:8" pos:end="26:11">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="27:1" pos:end="37:1">{<block_content pos:start="28:5" pos:end="36:2">
    <decl_stmt pos:start="28:5" pos:end="28:18"><decl pos:start="28:5" pos:end="28:17"><type pos:start="28:5" pos:end="28:7"><name pos:start="28:5" pos:end="28:7">int</name></type> <name pos:start="28:9" pos:end="28:17"><name pos:start="28:9" pos:end="28:13">array</name><index pos:start="28:14" pos:end="28:17">[<expr pos:start="28:15" pos:end="28:16"><literal type="number" pos:start="28:15" pos:end="28:16">10</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt pos:start="29:5" pos:end="29:23"><expr pos:start="29:5" pos:end="29:22"><call pos:start="29:5" pos:end="29:22"><name pos:start="29:5" pos:end="29:9">scanf</name><argument_list pos:start="29:10" pos:end="29:22">(<argument pos:start="29:11" pos:end="29:14"><expr pos:start="29:11" pos:end="29:14"><literal type="string" pos:start="29:11" pos:end="29:14">"%s"</literal></expr></argument>, <argument pos:start="29:17" pos:end="29:21"><expr pos:start="29:17" pos:end="29:21"><name pos:start="29:17" pos:end="29:21">array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="30:5" pos:end="30:16"><expr pos:start="30:5" pos:end="30:15"><call pos:start="30:5" pos:end="30:15"><name pos:start="30:5" pos:end="30:10">setjmp</name><argument_list pos:start="30:11" pos:end="30:15">(<argument pos:start="30:12" pos:end="30:14"><expr pos:start="30:12" pos:end="30:14"><name pos:start="30:12" pos:end="30:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block pos:start="31:5" pos:end="36:1">{<block_content pos:start="32:5" pos:end="35:2">
    <block pos:start="32:5" pos:end="35:1">{<block_content pos:start="33:5" pos:end="34:20">
    <expr_stmt pos:start="33:5" pos:end="33:8"><expr pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:5">n</name><operator pos:start="33:6" pos:end="33:6">=</operator><literal type="number" pos:start="33:7" pos:end="33:7">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="34:5" pos:end="34:20"><expr pos:start="34:5" pos:end="34:19"><call pos:start="34:5" pos:end="34:19"><name pos:start="34:5" pos:end="34:11">longjmp</name><argument_list pos:start="34:12" pos:end="34:19">(<argument pos:start="34:13" pos:end="34:15"><expr pos:start="34:13" pos:end="34:15"><name pos:start="34:13" pos:end="34:15">buf</name></expr></argument>, <argument pos:start="34:18" pos:end="34:18"><expr pos:start="34:18" pos:end="34:18"><literal type="number" pos:start="34:18" pos:end="34:18">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block><empty_stmt pos:start="35:2" pos:end="35:2">;</empty_stmt>
</block_content>}</block><empty_stmt pos:start="36:2" pos:end="36:2">;</empty_stmt>
</block_content>}</block></function>

<function pos:start="39:1" pos:end="45:1"><type pos:start="39:1" pos:end="39:4"><name pos:start="39:1" pos:end="39:4">void</name></type> <name pos:start="39:6" pos:end="39:6">g</name><parameter_list pos:start="39:7" pos:end="39:13">(<parameter pos:start="39:8" pos:end="39:12"><decl pos:start="39:8" pos:end="39:12"><type pos:start="39:8" pos:end="39:10"><name pos:start="39:8" pos:end="39:10">int</name></type> <name pos:start="39:12" pos:end="39:12">n</name></decl></parameter>)</parameter_list>
<block pos:start="40:1" pos:end="45:1">{<block_content pos:start="41:5" pos:end="44:2">
    <block pos:start="41:5" pos:end="44:1">{<block_content pos:start="42:5" pos:end="43:20">
    <expr_stmt pos:start="42:5" pos:end="42:8"><expr pos:start="42:5" pos:end="42:7"><name pos:start="42:5" pos:end="42:5">n</name><operator pos:start="42:6" pos:end="42:6">=</operator><literal type="number" pos:start="42:7" pos:end="42:7">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="43:5" pos:end="43:20"><expr pos:start="43:5" pos:end="43:19"><call pos:start="43:5" pos:end="43:19"><name pos:start="43:5" pos:end="43:11">longjmp</name><argument_list pos:start="43:12" pos:end="43:19">(<argument pos:start="43:13" pos:end="43:15"><expr pos:start="43:13" pos:end="43:15"><name pos:start="43:13" pos:end="43:15">buf</name></expr></argument>, <argument pos:start="43:18" pos:end="43:18"><expr pos:start="43:18" pos:end="43:18"><literal type="number" pos:start="43:18" pos:end="43:18">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block><empty_stmt pos:start="44:2" pos:end="44:2">;</empty_stmt>
</block_content>}</block></function>
<function pos:start="46:1" pos:end="50:1"><type pos:start="46:1" pos:end="46:4"><name pos:start="46:1" pos:end="46:4">void</name></type> <name pos:start="46:6" pos:end="46:6">h</name><parameter_list pos:start="46:7" pos:end="46:13">(<parameter pos:start="46:8" pos:end="46:12"><decl pos:start="46:8" pos:end="46:12"><type pos:start="46:8" pos:end="46:10"><name pos:start="46:8" pos:end="46:10">int</name></type> <name pos:start="46:12" pos:end="46:12">x</name></decl></parameter>)</parameter_list>
<block pos:start="47:1" pos:end="50:1">{<block_content pos:start="48:5" pos:end="49:20">
    <expr_stmt pos:start="48:5" pos:end="48:8"><expr pos:start="48:5" pos:end="48:7"><name pos:start="48:5" pos:end="48:5">x</name><operator pos:start="48:6" pos:end="48:6">=</operator><literal type="number" pos:start="48:7" pos:end="48:7">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="49:5" pos:end="49:20"><expr pos:start="49:5" pos:end="49:19"><call pos:start="49:5" pos:end="49:19"><name pos:start="49:5" pos:end="49:11">longjmp</name><argument_list pos:start="49:12" pos:end="49:19">(<argument pos:start="49:13" pos:end="49:15"><expr pos:start="49:13" pos:end="49:15"><name pos:start="49:13" pos:end="49:15">buf</name></expr></argument>, <argument pos:start="49:18" pos:end="49:18"><expr pos:start="49:18" pos:end="49:18"><literal type="number" pos:start="49:18" pos:end="49:18">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function pos:start="54:1" pos:end="68:1"><type pos:start="54:1" pos:end="54:3"><name pos:start="54:1" pos:end="54:3">int</name></type> <name pos:start="54:5" pos:end="54:8">main</name><parameter_list pos:start="54:9" pos:end="54:10">()</parameter_list>
<block pos:start="55:1" pos:end="68:1">{<block_content pos:start="56:5" pos:end="67:13">
    <block pos:start="56:5" pos:end="66:1">{<block_content pos:start="57:5" pos:end="65:2">
    <decl_stmt pos:start="57:5" pos:end="57:18"><decl pos:start="57:5" pos:end="57:17"><type pos:start="57:5" pos:end="57:7"><name pos:start="57:5" pos:end="57:7">int</name></type> <name pos:start="57:9" pos:end="57:17"><name pos:start="57:9" pos:end="57:13">array</name><index pos:start="57:14" pos:end="57:17">[<expr pos:start="57:15" pos:end="57:16"><literal type="number" pos:start="57:15" pos:end="57:16">10</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt pos:start="58:5" pos:end="58:23"><expr pos:start="58:5" pos:end="58:22"><call pos:start="58:5" pos:end="58:22"><name pos:start="58:5" pos:end="58:9">scanf</name><argument_list pos:start="58:10" pos:end="58:22">(<argument pos:start="58:11" pos:end="58:14"><expr pos:start="58:11" pos:end="58:14"><literal type="string" pos:start="58:11" pos:end="58:14">"%s"</literal></expr></argument>, <argument pos:start="58:17" pos:end="58:21"><expr pos:start="58:17" pos:end="58:21"><name pos:start="58:17" pos:end="58:21">array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="59:5" pos:end="59:16"><expr pos:start="59:5" pos:end="59:15"><call pos:start="59:5" pos:end="59:15"><name pos:start="59:5" pos:end="59:10">setjmp</name><argument_list pos:start="59:11" pos:end="59:15">(<argument pos:start="59:12" pos:end="59:14"><expr pos:start="59:12" pos:end="59:14"><name pos:start="59:12" pos:end="59:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block pos:start="60:5" pos:end="65:1">{<block_content pos:start="61:5" pos:end="64:2">
    <block pos:start="61:5" pos:end="64:1">{<block_content pos:start="62:5" pos:end="63:20">
    <expr_stmt pos:start="62:5" pos:end="62:8"><expr pos:start="62:5" pos:end="62:7"><name pos:start="62:5" pos:end="62:5">n</name><operator pos:start="62:6" pos:end="62:6">=</operator><literal type="number" pos:start="62:7" pos:end="62:7">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="63:5" pos:end="63:20"><expr pos:start="63:5" pos:end="63:19"><call pos:start="63:5" pos:end="63:19"><name pos:start="63:5" pos:end="63:11">longjmp</name><argument_list pos:start="63:12" pos:end="63:19">(<argument pos:start="63:13" pos:end="63:15"><expr pos:start="63:13" pos:end="63:15"><name pos:start="63:13" pos:end="63:15">buf</name></expr></argument>, <argument pos:start="63:18" pos:end="63:18"><expr pos:start="63:18" pos:end="63:18"><literal type="number" pos:start="63:18" pos:end="63:18">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block><empty_stmt pos:start="64:2" pos:end="64:2">;</empty_stmt>
</block_content>}</block><empty_stmt pos:start="65:2" pos:end="65:2">;</empty_stmt>
</block_content>}</block><empty_stmt pos:start="66:2" pos:end="66:2">;</empty_stmt>
    <return pos:start="67:5" pos:end="67:13">return <expr pos:start="67:12" pos:end="67:12"><literal type="number" pos:start="67:12" pos:end="67:12">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>