<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="program_file/pre_data\adler32.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="22:3">/*
 * Compute the Adler-32 checksum of a data stream.
 * This is a modified version based on adler32.c from the zlib library.
 *
 * Copyright (C) 1995 Mark Adler
 *
 * This software is provided 'as-is', without any express or implied
 * warranty.  In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */</comment>

<comment type="block" format="doxygen" pos:start="24:1" pos:end="31:3">/**
 * @file
 * Computes the Adler-32 checksum of a data stream
 *
 * This is a modified version based on adler32.c from the zlib library.
 * @author Mark Adler
 * @ingroup lavu_adler32
 */</comment>

<cpp:include pos:start="33:1" pos:end="33:19">#<cpp:directive pos:start="33:2" pos:end="33:8">include</cpp:directive> <cpp:file pos:start="33:10" pos:end="33:19">"config.h"</cpp:file></cpp:include>
<cpp:include pos:start="34:1" pos:end="34:20">#<cpp:directive pos:start="34:2" pos:end="34:8">include</cpp:directive> <cpp:file pos:start="34:10" pos:end="34:20">"adler32.h"</cpp:file></cpp:include>
<cpp:include pos:start="35:1" pos:end="35:19">#<cpp:directive pos:start="35:2" pos:end="35:8">include</cpp:directive> <cpp:file pos:start="35:10" pos:end="35:19">"common.h"</cpp:file></cpp:include>
<cpp:include pos:start="36:1" pos:end="36:25">#<cpp:directive pos:start="36:2" pos:end="36:8">include</cpp:directive> <cpp:file pos:start="36:10" pos:end="36:25">"intreadwrite.h"</cpp:file></cpp:include>

<cpp:define pos:start="38:1" pos:end="38:19">#<cpp:directive pos:start="38:2" pos:end="38:7">define</cpp:directive> <cpp:macro pos:start="38:9" pos:end="38:12"><name pos:start="38:9" pos:end="38:12">BASE</name></cpp:macro> <cpp:value pos:start="38:14" pos:end="38:19">65521L</cpp:value></cpp:define> <comment type="block" pos:start="38:21" pos:end="38:58">/* largest prime smaller than 65536 */</comment>

<cpp:define pos:start="40:1" pos:end="44:5">#<cpp:directive pos:start="40:2" pos:end="40:7">define</cpp:directive> <cpp:macro pos:start="40:9" pos:end="40:16"><name pos:start="40:9" pos:end="40:11">DO1</name><parameter_list pos:start="40:12" pos:end="40:16">(<parameter pos:start="40:13" pos:end="40:15"><type pos:start="40:13" pos:end="40:15"><name pos:start="40:13" pos:end="40:15">buf</name></type></parameter>)</parameter_list></cpp:macro>      \
    <cpp:value pos:start="41:5" pos:end="44:5">{                 \
        s1 += *buf++; \
        s2 += s1;     \
    }</cpp:value></cpp:define>
<cpp:define pos:start="45:1" pos:end="49:13">#<cpp:directive pos:start="45:2" pos:end="45:7">define</cpp:directive> <cpp:macro pos:start="45:9" pos:end="45:16"><name pos:start="45:9" pos:end="45:11">DO4</name><parameter_list pos:start="45:12" pos:end="45:16">(<parameter pos:start="45:13" pos:end="45:15"><type pos:start="45:13" pos:end="45:15"><name pos:start="45:13" pos:end="45:15">buf</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value pos:start="46:5" pos:end="49:13">DO1(buf);    \
    DO1(buf);    \
    DO1(buf);    \
    DO1(buf);</cpp:value></cpp:define>
<cpp:define pos:start="50:1" pos:end="54:13">#<cpp:directive pos:start="50:2" pos:end="50:7">define</cpp:directive> <cpp:macro pos:start="50:9" pos:end="50:17"><name pos:start="50:9" pos:end="50:12">DO16</name><parameter_list pos:start="50:13" pos:end="50:17">(<parameter pos:start="50:14" pos:end="50:16"><type pos:start="50:14" pos:end="50:16"><name pos:start="50:14" pos:end="50:16">buf</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value pos:start="51:5" pos:end="54:13">DO4(buf);     \
    DO4(buf);     \
    DO4(buf);     \
    DO4(buf);</cpp:value></cpp:define>

<function pos:start="56:1" pos:end="110:1"><type pos:start="56:1" pos:end="56:13"><name pos:start="56:1" pos:end="56:8">unsigned</name> <name pos:start="56:10" pos:end="56:13">long</name></type> <name pos:start="56:15" pos:end="56:31">av_adler32_update</name><parameter_list pos:start="56:32" pos:end="57:49">(<parameter pos:start="56:33" pos:end="56:51"><decl pos:start="56:33" pos:end="56:51"><type pos:start="56:33" pos:end="56:51"><name pos:start="56:33" pos:end="56:40">unsigned</name> <name pos:start="56:42" pos:end="56:45">long</name></type> <name pos:start="56:47" pos:end="56:51">adler</name></decl></parameter>, <parameter pos:start="56:54" pos:end="56:71"><decl pos:start="56:54" pos:end="56:71"><type pos:start="56:54" pos:end="56:71"><specifier pos:start="56:54" pos:end="56:58">const</specifier> <name pos:start="56:60" pos:end="56:66">uint8_t</name> <modifier pos:start="56:68" pos:end="56:68">*</modifier></type><name pos:start="56:69" pos:end="56:71">buf</name></decl></parameter>,
                                <parameter pos:start="57:33" pos:end="57:48"><decl pos:start="57:33" pos:end="57:48"><type pos:start="57:33" pos:end="57:48"><name pos:start="57:33" pos:end="57:40">unsigned</name> <name pos:start="57:42" pos:end="57:44">int</name></type> <name pos:start="57:46" pos:end="57:48">len</name></decl></parameter>)</parameter_list>
<block pos:start="58:1" pos:end="110:1">{<block_content pos:start="59:5" pos:end="109:27">
    <decl_stmt pos:start="59:5" pos:end="59:38"><decl pos:start="59:5" pos:end="59:37"><type pos:start="59:5" pos:end="59:17"><name pos:start="59:5" pos:end="59:12">unsigned</name> <name pos:start="59:14" pos:end="59:17">long</name></type> <name pos:start="59:19" pos:end="59:20">s1</name> <init pos:start="59:22" pos:end="59:37">= <expr pos:start="59:24" pos:end="59:37"><name pos:start="59:24" pos:end="59:28">adler</name> <operator pos:start="59:30" pos:end="59:30">&amp;</operator> <literal type="number" pos:start="59:32" pos:end="59:37">0xffff</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="60:5" pos:end="60:35"><decl pos:start="60:5" pos:end="60:34"><type pos:start="60:5" pos:end="60:17"><name pos:start="60:5" pos:end="60:12">unsigned</name> <name pos:start="60:14" pos:end="60:17">long</name></type> <name pos:start="60:19" pos:end="60:20">s2</name> <init pos:start="60:22" pos:end="60:34">= <expr pos:start="60:24" pos:end="60:34"><name pos:start="60:24" pos:end="60:28">adler</name> <operator pos:start="60:30" pos:end="60:31">&gt;&gt;</operator> <literal type="number" pos:start="60:33" pos:end="60:34">16</literal></expr></init></decl>;</decl_stmt>

    <while pos:start="62:5" pos:end="108:5">while <condition pos:start="62:11" pos:end="62:19">(<expr pos:start="62:12" pos:end="62:18"><name pos:start="62:12" pos:end="62:14">len</name> <operator pos:start="62:16" pos:end="62:16">&gt;</operator> <literal type="number" pos:start="62:18" pos:end="62:18">0</literal></expr>)</condition>
    <block pos:start="63:5" pos:end="108:5">{<block_content pos:start="65:9" pos:end="107:19">
<cpp:if pos:start="64:1" pos:end="64:59">#<cpp:directive pos:start="64:2" pos:end="64:3">if</cpp:directive> <expr pos:start="64:5" pos:end="64:59"><name pos:start="64:5" pos:end="64:19">HAVE_FAST_64BIT</name> <operator pos:start="64:21" pos:end="64:22">&amp;&amp;</operator> <name pos:start="64:24" pos:end="64:42">HAVE_FAST_UNALIGNED</name> <operator pos:start="64:44" pos:end="64:45">&amp;&amp;</operator> <operator pos:start="64:47" pos:end="64:47">!</operator><name pos:start="64:48" pos:end="64:59">CONFIG_SMALL</name></expr></cpp:if>
        <decl_stmt pos:start="65:9" pos:end="65:54"><decl pos:start="65:9" pos:end="65:53"><type pos:start="65:9" pos:end="65:16"><name pos:start="65:9" pos:end="65:16">unsigned</name></type> <name pos:start="65:18" pos:end="65:21">len2</name> <init pos:start="65:23" pos:end="65:53">= <expr pos:start="65:25" pos:end="65:53"><call pos:start="65:25" pos:end="65:53"><name pos:start="65:25" pos:end="65:29">FFMIN</name><argument_list pos:start="65:30" pos:end="65:53">(<argument pos:start="65:31" pos:end="65:44"><expr pos:start="65:31" pos:end="65:44"><operator pos:start="65:31" pos:end="65:31">(</operator><name pos:start="65:32" pos:end="65:34">len</name> <operator pos:start="65:36" pos:end="65:36">-</operator> <literal type="number" pos:start="65:38" pos:end="65:38">1</literal><operator pos:start="65:39" pos:end="65:39">)</operator> <operator pos:start="65:41" pos:end="65:41">&amp;</operator> <operator pos:start="65:43" pos:end="65:43">~</operator><literal type="number" pos:start="65:44" pos:end="65:44">7</literal></expr></argument>, <argument pos:start="65:47" pos:end="65:52"><expr pos:start="65:47" pos:end="65:52"><literal type="number" pos:start="65:47" pos:end="65:48">23</literal> <operator pos:start="65:50" pos:end="65:50">*</operator> <literal type="number" pos:start="65:52" pos:end="65:52">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="66:9" pos:end="98:0"><if pos:start="66:9" pos:end="98:0">if <condition pos:start="66:12" pos:end="66:17">(<expr pos:start="66:13" pos:end="66:16"><name pos:start="66:13" pos:end="66:16">len2</name></expr>)</condition>
        <block pos:start="67:9" pos:end="98:0">{<block_content pos:start="68:13" pos:end="96:0">
            <decl_stmt pos:start="68:13" pos:end="68:28"><decl pos:start="68:13" pos:end="68:27"><type pos:start="68:13" pos:end="68:20"><name pos:start="68:13" pos:end="68:20">uint64_t</name></type> <name pos:start="68:22" pos:end="68:23">a1</name> <init pos:start="68:25" pos:end="68:27">= <expr pos:start="68:27" pos:end="68:27"><literal type="number" pos:start="68:27" pos:end="68:27">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="69:13" pos:end="69:28"><decl pos:start="69:13" pos:end="69:27"><type pos:start="69:13" pos:end="69:20"><name pos:start="69:13" pos:end="69:20">uint64_t</name></type> <name pos:start="69:22" pos:end="69:23">a2</name> <init pos:start="69:25" pos:end="69:27">= <expr pos:start="69:27" pos:end="69:27"><literal type="number" pos:start="69:27" pos:end="69:27">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="70:13" pos:end="70:28"><decl pos:start="70:13" pos:end="70:27"><type pos:start="70:13" pos:end="70:20"><name pos:start="70:13" pos:end="70:20">uint64_t</name></type> <name pos:start="70:22" pos:end="70:23">b1</name> <init pos:start="70:25" pos:end="70:27">= <expr pos:start="70:27" pos:end="70:27"><literal type="number" pos:start="70:27" pos:end="70:27">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="71:13" pos:end="71:28"><decl pos:start="71:13" pos:end="71:27"><type pos:start="71:13" pos:end="71:20"><name pos:start="71:13" pos:end="71:20">uint64_t</name></type> <name pos:start="71:22" pos:end="71:23">b2</name> <init pos:start="71:25" pos:end="71:27">= <expr pos:start="71:27" pos:end="71:27"><literal type="number" pos:start="71:27" pos:end="71:27">0</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="72:13" pos:end="72:24"><expr pos:start="72:13" pos:end="72:23"><name pos:start="72:13" pos:end="72:15">len</name> <operator pos:start="72:17" pos:end="72:18">-=</operator> <name pos:start="72:20" pos:end="72:23">len2</name></expr>;</expr_stmt>
            <expr_stmt pos:start="73:13" pos:end="73:28"><expr pos:start="73:13" pos:end="73:27"><name pos:start="73:13" pos:end="73:14">s2</name> <operator pos:start="73:16" pos:end="73:17">+=</operator> <name pos:start="73:19" pos:end="73:20">s1</name> <operator pos:start="73:22" pos:end="73:22">*</operator> <name pos:start="73:24" pos:end="73:27">len2</name></expr>;</expr_stmt>
            <while pos:start="74:13" pos:end="83:13">while <condition pos:start="74:19" pos:end="74:29">(<expr pos:start="74:20" pos:end="74:28"><name pos:start="74:20" pos:end="74:23">len2</name> <operator pos:start="74:25" pos:end="74:26">&gt;=</operator> <literal type="number" pos:start="74:28" pos:end="74:28">8</literal></expr>)</condition>
            <block pos:start="75:13" pos:end="83:13">{<block_content pos:start="76:17" pos:end="82:25">
                <decl_stmt pos:start="76:17" pos:end="76:42"><decl pos:start="76:17" pos:end="76:41"><type pos:start="76:17" pos:end="76:24"><name pos:start="76:17" pos:end="76:24">uint64_t</name></type> <name pos:start="76:26" pos:end="76:26">v</name> <init pos:start="76:28" pos:end="76:41">= <expr pos:start="76:30" pos:end="76:41"><call pos:start="76:30" pos:end="76:41"><name pos:start="76:30" pos:end="76:36">AV_RN64</name><argument_list pos:start="76:37" pos:end="76:41">(<argument pos:start="76:38" pos:end="76:40"><expr pos:start="76:38" pos:end="76:40"><name pos:start="76:38" pos:end="76:40">buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt pos:start="77:17" pos:end="77:25"><expr pos:start="77:17" pos:end="77:24"><name pos:start="77:17" pos:end="77:18">a2</name> <operator pos:start="77:20" pos:end="77:21">+=</operator> <name pos:start="77:23" pos:end="77:24">a1</name></expr>;</expr_stmt>
                <expr_stmt pos:start="78:17" pos:end="78:25"><expr pos:start="78:17" pos:end="78:24"><name pos:start="78:17" pos:end="78:18">b2</name> <operator pos:start="78:20" pos:end="78:21">+=</operator> <name pos:start="78:23" pos:end="78:24">b1</name></expr>;</expr_stmt>
                <expr_stmt pos:start="79:17" pos:end="79:45"><expr pos:start="79:17" pos:end="79:44"><name pos:start="79:17" pos:end="79:18">a1</name> <operator pos:start="79:20" pos:end="79:21">+=</operator> <name pos:start="79:23" pos:end="79:23">v</name> <operator pos:start="79:25" pos:end="79:25">&amp;</operator> <literal type="number" pos:start="79:27" pos:end="79:44">0x00FF00FF00FF00FF</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="80:17" pos:end="80:52"><expr pos:start="80:17" pos:end="80:51"><name pos:start="80:17" pos:end="80:18">b1</name> <operator pos:start="80:20" pos:end="80:21">+=</operator> <operator pos:start="80:23" pos:end="80:23">(</operator><name pos:start="80:24" pos:end="80:24">v</name> <operator pos:start="80:26" pos:end="80:27">&gt;&gt;</operator> <literal type="number" pos:start="80:29" pos:end="80:29">8</literal><operator pos:start="80:30" pos:end="80:30">)</operator> <operator pos:start="80:32" pos:end="80:32">&amp;</operator> <literal type="number" pos:start="80:34" pos:end="80:51">0x00FF00FF00FF00FF</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="81:17" pos:end="81:26"><expr pos:start="81:17" pos:end="81:25"><name pos:start="81:17" pos:end="81:20">len2</name> <operator pos:start="81:22" pos:end="81:23">-=</operator> <literal type="number" pos:start="81:25" pos:end="81:25">8</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="82:17" pos:end="82:25"><expr pos:start="82:17" pos:end="82:24"><name pos:start="82:17" pos:end="82:19">buf</name> <operator pos:start="82:21" pos:end="82:22">+=</operator> <literal type="number" pos:start="82:24" pos:end="82:24">8</literal></expr>;</expr_stmt>
            </block_content>}</block></while>

            <comment type="line" pos:start="85:13" pos:end="85:79">// We combine the 8 interleaved adler32 checksums without overflows</comment>
            <comment type="line" pos:start="86:13" pos:end="86:79">// Decreasing the number of iterations would allow below code to be</comment>
            <comment type="line" pos:start="87:13" pos:end="87:80">// simplified but would likely be slower due to the fewer iterations</comment>
            <comment type="line" pos:start="88:13" pos:end="88:32">// of the inner loop</comment>
            <expr_stmt pos:start="89:13" pos:end="89:54"><expr pos:start="89:13" pos:end="89:53"><name pos:start="89:13" pos:end="89:14">s1</name> <operator pos:start="89:16" pos:end="89:17">+=</operator> <operator pos:start="89:19" pos:end="89:19">(</operator><operator pos:start="89:20" pos:end="89:20">(</operator><name pos:start="89:21" pos:end="89:22">a1</name> <operator pos:start="89:24" pos:end="89:24">+</operator> <name pos:start="89:26" pos:end="89:27">b1</name><operator pos:start="89:28" pos:end="89:28">)</operator> <operator pos:start="89:30" pos:end="89:30">*</operator> <literal type="number" pos:start="89:32" pos:end="89:46">0x1000100010001</literal><operator pos:start="89:47" pos:end="89:47">)</operator> <operator pos:start="89:49" pos:end="89:50">&gt;&gt;</operator> <literal type="number" pos:start="89:52" pos:end="89:53">48</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="90:13" pos:end="94:0"><expr pos:start="90:13" pos:end="92:124"><name pos:start="90:13" pos:end="90:14">s2</name> <operator pos:start="90:16" pos:end="90:17">+=</operator> <operator pos:start="90:19" pos:end="90:19">(</operator><operator pos:start="90:20" pos:end="90:20">(</operator><operator pos:start="90:21" pos:end="90:21">(</operator><operator pos:start="90:22" pos:end="90:22">(</operator><name pos:start="90:23" pos:end="90:24">a2</name> <operator pos:start="90:26" pos:end="90:26">&amp;</operator> <literal type="number" pos:start="90:28" pos:end="90:41">0xFFFF0000FFFF</literal><operator pos:start="90:42" pos:end="90:42">)</operator> <operator pos:start="90:44" pos:end="90:44">+</operator> <operator pos:start="90:46" pos:end="90:46">(</operator><name pos:start="90:47" pos:end="90:48">b2</name> <operator pos:start="90:50" pos:end="90:50">&amp;</operator> <literal type="number" pos:start="90:52" pos:end="90:65">0xFFFF0000FFFF</literal><operator pos:start="90:66" pos:end="90:66">)</operator> <operator pos:start="90:68" pos:end="90:68">+</operator> <operator pos:start="90:70" pos:end="90:70">(</operator><operator pos:start="90:71" pos:end="90:71">(</operator><name pos:start="90:72" pos:end="90:73">a2</name> <operator pos:start="90:75" pos:end="90:76">&gt;&gt;</operator> <literal type="number" pos:start="90:78" pos:end="90:79">16</literal><operator pos:start="90:80" pos:end="90:80">)</operator> <operator pos:start="90:82" pos:end="90:82">&amp;</operator> <literal type="number" pos:start="90:84" pos:end="90:97">0xFFFF0000FFFF</literal><operator pos:start="90:98" pos:end="90:98">)</operator> <operator pos:start="90:100" pos:end="90:100">+</operator> <operator pos:start="90:102" pos:end="90:102">(</operator><operator pos:start="90:103" pos:end="90:103">(</operator><name pos:start="90:104" pos:end="90:105">b2</name> <operator pos:start="90:107" pos:end="90:108">&gt;&gt;</operator> <literal type="number" pos:start="90:110" pos:end="90:111">16</literal><operator pos:start="90:112" pos:end="90:112">)</operator> <operator pos:start="90:114" pos:end="90:114">&amp;</operator> <literal type="number" pos:start="90:116" pos:end="90:129">0xFFFF0000FFFF</literal><operator pos:start="90:130" pos:end="90:130">)</operator><operator pos:start="90:131" pos:end="90:131">)</operator> <operator pos:start="90:133" pos:end="90:133">*</operator> <literal type="number" pos:start="90:135" pos:end="90:145">0x800000008</literal><operator pos:start="90:146" pos:end="90:146">)</operator> <operator pos:start="90:148" pos:end="90:149">&gt;&gt;</operator> <literal type="number" pos:start="90:151" pos:end="90:152">32</literal><operator pos:start="90:153" pos:end="92:0">)</operator>
<cpp:if pos:start="91:1" pos:end="91:18">#<cpp:directive pos:start="91:2" pos:end="91:3">if</cpp:directive> <expr pos:start="91:5" pos:end="91:18"><name pos:start="91:5" pos:end="91:18">HAVE_BIGENDIAN</name></expr></cpp:if>
                  <operator pos:start="92:19" pos:end="92:19">+</operator> <literal type="number" pos:start="92:21" pos:end="92:21">2</literal> <operator pos:start="92:23" pos:end="92:23">*</operator> <operator pos:start="92:25" pos:end="92:25">(</operator><operator pos:start="92:26" pos:end="92:26">(</operator><name pos:start="92:27" pos:end="92:28">b1</name> <operator pos:start="92:30" pos:end="92:30">*</operator> <literal type="number" pos:start="92:32" pos:end="92:46">0x1000200030004</literal><operator pos:start="92:47" pos:end="92:47">)</operator> <operator pos:start="92:49" pos:end="92:50">&gt;&gt;</operator> <literal type="number" pos:start="92:52" pos:end="92:53">48</literal><operator pos:start="92:54" pos:end="92:54">)</operator> <operator pos:start="92:56" pos:end="92:56">+</operator> <operator pos:start="92:58" pos:end="92:58">(</operator><operator pos:start="92:59" pos:end="92:59">(</operator><name pos:start="92:60" pos:end="92:61">a1</name> <operator pos:start="92:63" pos:end="92:63">*</operator> <literal type="number" pos:start="92:65" pos:end="92:79">0x1000100010001</literal><operator pos:start="92:80" pos:end="92:80">)</operator> <operator pos:start="92:82" pos:end="92:83">&gt;&gt;</operator> <literal type="number" pos:start="92:85" pos:end="92:86">48</literal><operator pos:start="92:87" pos:end="92:87">)</operator> <operator pos:start="92:89" pos:end="92:89">+</operator> <literal type="number" pos:start="92:91" pos:end="92:91">2</literal> <operator pos:start="92:93" pos:end="92:93">*</operator> <operator pos:start="92:95" pos:end="92:95">(</operator><operator pos:start="92:96" pos:end="92:96">(</operator><name pos:start="92:97" pos:end="92:98">a1</name> <operator pos:start="92:100" pos:end="92:100">*</operator> <literal type="number" pos:start="92:102" pos:end="92:116">0x0000100020003</literal><operator pos:start="92:117" pos:end="92:117">)</operator> <operator pos:start="92:119" pos:end="92:120">&gt;&gt;</operator> <literal type="number" pos:start="92:122" pos:end="92:123">48</literal><operator pos:start="92:124" pos:end="92:124">)</operator></expr>;</expr_stmt>
<cpp:else pos:start="93:1" pos:end="93:5">#<cpp:directive pos:start="93:2" pos:end="93:5">else</cpp:directive></cpp:else>
                  <expr_stmt pos:start="94:19" pos:end="96:0"><expr pos:start="94:19" pos:end="94:124"><operator pos:start="94:19" pos:end="94:19">+</operator> <literal type="number" pos:start="94:21" pos:end="94:21">2</literal> <operator pos:start="94:23" pos:end="94:23">*</operator> <operator pos:start="94:25" pos:end="94:25">(</operator><operator pos:start="94:26" pos:end="94:26">(</operator><name pos:start="94:27" pos:end="94:28">a1</name> <operator pos:start="94:30" pos:end="94:30">*</operator> <literal type="number" pos:start="94:32" pos:end="94:46">0x4000300020001</literal><operator pos:start="94:47" pos:end="94:47">)</operator> <operator pos:start="94:49" pos:end="94:50">&gt;&gt;</operator> <literal type="number" pos:start="94:52" pos:end="94:53">48</literal><operator pos:start="94:54" pos:end="94:54">)</operator> <operator pos:start="94:56" pos:end="94:56">+</operator> <operator pos:start="94:58" pos:end="94:58">(</operator><operator pos:start="94:59" pos:end="94:59">(</operator><name pos:start="94:60" pos:end="94:61">b1</name> <operator pos:start="94:63" pos:end="94:63">*</operator> <literal type="number" pos:start="94:65" pos:end="94:79">0x1000100010001</literal><operator pos:start="94:80" pos:end="94:80">)</operator> <operator pos:start="94:82" pos:end="94:83">&gt;&gt;</operator> <literal type="number" pos:start="94:85" pos:end="94:86">48</literal><operator pos:start="94:87" pos:end="94:87">)</operator> <operator pos:start="94:89" pos:end="94:89">+</operator> <literal type="number" pos:start="94:91" pos:end="94:91">2</literal> <operator pos:start="94:93" pos:end="94:93">*</operator> <operator pos:start="94:95" pos:end="94:95">(</operator><operator pos:start="94:96" pos:end="94:96">(</operator><name pos:start="94:97" pos:end="94:98">b1</name> <operator pos:start="94:100" pos:end="94:100">*</operator> <literal type="number" pos:start="94:102" pos:end="94:116">0x3000200010000</literal><operator pos:start="94:117" pos:end="94:117">)</operator> <operator pos:start="94:119" pos:end="94:120">&gt;&gt;</operator> <literal type="number" pos:start="94:122" pos:end="94:123">48</literal><operator pos:start="94:124" pos:end="94:124">)</operator></expr>;</expr_stmt>
<cpp:endif pos:start="95:1" pos:end="95:6">#<cpp:directive pos:start="95:2" pos:end="95:6">endif</cpp:directive></cpp:endif>
        </block_content>}</block></if></if_stmt>
<cpp:else pos:start="97:1" pos:end="97:5">#<cpp:directive pos:start="97:2" pos:end="97:5">else</cpp:directive></cpp:else>
        <while pos:start="98:9" pos:end="104:0">while <condition pos:start="98:15" pos:end="98:42">(<expr pos:start="98:16" pos:end="98:41"><name pos:start="98:16" pos:end="98:18">len</name> <operator pos:start="98:20" pos:end="98:20">&gt;</operator> <literal type="number" pos:start="98:22" pos:end="98:22">4</literal> <operator pos:start="98:24" pos:end="98:25">&amp;&amp;</operator> <name pos:start="98:27" pos:end="98:28">s2</name> <operator pos:start="98:30" pos:end="98:30">&lt;</operator> <operator pos:start="98:32" pos:end="98:32">(</operator><literal type="number" pos:start="98:33" pos:end="98:34">1U</literal> <operator pos:start="98:36" pos:end="98:37">&lt;&lt;</operator> <literal type="number" pos:start="98:39" pos:end="98:40">31</literal><operator pos:start="98:41" pos:end="98:41">)</operator></expr>)</condition>
        <block pos:start="99:9" pos:end="104:0">{<block_content pos:start="100:13" pos:end="101:21">
            <expr_stmt pos:start="100:13" pos:end="100:21"><expr pos:start="100:13" pos:end="100:20"><call pos:start="100:13" pos:end="100:20"><name pos:start="100:13" pos:end="100:15">DO4</name><argument_list pos:start="100:16" pos:end="100:20">(<argument pos:start="100:17" pos:end="100:19"><expr pos:start="100:17" pos:end="100:19"><name pos:start="100:17" pos:end="100:19">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="101:13" pos:end="101:21"><expr pos:start="101:13" pos:end="101:20"><name pos:start="101:13" pos:end="101:15">len</name> <operator pos:start="101:17" pos:end="101:18">-=</operator> <literal type="number" pos:start="101:20" pos:end="101:20">4</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
<cpp:endif pos:start="103:1" pos:end="103:6">#<cpp:directive pos:start="103:2" pos:end="103:6">endif</cpp:directive></cpp:endif>
        <expr_stmt pos:start="104:9" pos:end="104:17"><expr pos:start="104:9" pos:end="104:16"><call pos:start="104:9" pos:end="104:16"><name pos:start="104:9" pos:end="104:11">DO1</name><argument_list pos:start="104:12" pos:end="104:16">(<argument pos:start="104:13" pos:end="104:15"><expr pos:start="104:13" pos:end="104:15"><name pos:start="104:13" pos:end="104:15">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="105:9" pos:end="105:14"><expr pos:start="105:9" pos:end="105:13"><name pos:start="105:9" pos:end="105:11">len</name><operator pos:start="105:12" pos:end="105:13">--</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="106:9" pos:end="106:19"><expr pos:start="106:9" pos:end="106:18"><name pos:start="106:9" pos:end="106:10">s1</name> <operator pos:start="106:12" pos:end="106:13">%=</operator> <name pos:start="106:15" pos:end="106:18">BASE</name></expr>;</expr_stmt>
        <expr_stmt pos:start="107:9" pos:end="107:19"><expr pos:start="107:9" pos:end="107:18"><name pos:start="107:9" pos:end="107:10">s2</name> <operator pos:start="107:12" pos:end="107:13">%=</operator> <name pos:start="107:15" pos:end="107:18">BASE</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return pos:start="109:5" pos:end="109:27">return <expr pos:start="109:12" pos:end="109:26"><operator pos:start="109:12" pos:end="109:12">(</operator><name pos:start="109:13" pos:end="109:14">s2</name> <operator pos:start="109:16" pos:end="109:17">&lt;&lt;</operator> <literal type="number" pos:start="109:19" pos:end="109:20">16</literal><operator pos:start="109:21" pos:end="109:21">)</operator> <operator pos:start="109:23" pos:end="109:23">|</operator> <name pos:start="109:25" pos:end="109:26">s1</name></expr>;</return>
</block_content>}</block></function>
</unit>
