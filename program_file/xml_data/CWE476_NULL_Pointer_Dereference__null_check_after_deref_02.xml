<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="program_file/pre_data\1\test\104779-v1.1.0\src\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__null_check_after_deref_02.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="5:2">/* TEMPLATE GENERATED TESTCASE FILE
Filename: CWE476_NULL_Pointer_Dereference__null_check_after_deref_02.c
Label Definition File: CWE476_NULL_Pointer_Dereference.pointflaw.label.xml
Template File: point-flaw-02.tmpl.c
*/</comment>
<comment type="block" pos:start="6:1" pos:end="14:5">/*
 * @description
 * CWE: 476 NULL Pointer Dereference
 * Sinks: null_check_after_deref
 *    GoodSink: Do not check for NULL after the pointer has been dereferenced
 *    BadSink : Check for NULL after a pointer has already been dereferenced
 * Flow Variant: 02 Control flow: if(1) and if(0)
 *
 * */</comment>

<cpp:include pos:start="16:1" pos:end="16:25">#<cpp:directive pos:start="16:2" pos:end="16:8">include</cpp:directive> <cpp:file pos:start="16:10" pos:end="16:25">"std_testcase.h"</cpp:file></cpp:include>

<cpp:ifndef pos:start="18:1" pos:end="18:15">#<cpp:directive pos:start="18:2" pos:end="18:7">ifndef</cpp:directive> <name pos:start="18:9" pos:end="18:15">OMITBAD</name></cpp:ifndef>

<function pos:start="20:1" pos:end="42:0"><type pos:start="20:1" pos:end="20:4"><name pos:start="20:1" pos:end="20:4">void</name></type> <name pos:start="20:6" pos:end="20:67">CWE476_NULL_Pointer_Dereference__null_check_after_deref_02_bad</name><parameter_list pos:start="20:68" pos:end="20:69">()</parameter_list>
<block pos:start="21:1" pos:end="42:0">{<block_content pos:start="22:5" pos:end="36:5">
    <if_stmt pos:start="22:5" pos:end="36:5"><if pos:start="22:5" pos:end="36:5">if<condition pos:start="22:7" pos:end="22:9">(<expr pos:start="22:8" pos:end="22:8"><literal type="number" pos:start="22:8" pos:end="22:8">1</literal></expr>)</condition>
    <block pos:start="23:5" pos:end="36:5">{<block_content pos:start="24:9" pos:end="35:9">
        <block pos:start="24:9" pos:end="35:9">{<block_content pos:start="25:13" pos:end="34:38">
            <decl_stmt pos:start="25:13" pos:end="25:35"><decl pos:start="25:13" pos:end="25:34"><type pos:start="25:13" pos:end="25:17"><name pos:start="25:13" pos:end="25:15">int</name> <modifier pos:start="25:17" pos:end="25:17">*</modifier></type><name pos:start="25:18" pos:end="25:27">intPointer</name> <init pos:start="25:29" pos:end="25:34">= <expr pos:start="25:31" pos:end="25:34"><name pos:start="25:31" pos:end="25:34">NULL</name></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="26:13" pos:end="26:52"><expr pos:start="26:13" pos:end="26:51"><name pos:start="26:13" pos:end="26:22">intPointer</name> <operator pos:start="26:24" pos:end="26:24">=</operator> <operator pos:start="26:26" pos:end="26:26">(</operator><name pos:start="26:27" pos:end="26:29">int</name> <operator pos:start="26:31" pos:end="26:31">*</operator><operator pos:start="26:32" pos:end="26:32">)</operator><call pos:start="26:33" pos:end="26:51"><name pos:start="26:33" pos:end="26:38">malloc</name><argument_list pos:start="26:39" pos:end="26:51">(<argument pos:start="26:40" pos:end="26:50"><expr pos:start="26:40" pos:end="26:50"><sizeof pos:start="26:40" pos:end="26:50">sizeof<argument_list pos:start="26:46" pos:end="26:50">(<argument pos:start="26:47" pos:end="26:49"><expr pos:start="26:47" pos:end="26:49"><name pos:start="26:47" pos:end="26:49">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="27:13" pos:end="27:28"><expr pos:start="27:13" pos:end="27:27"><operator pos:start="27:13" pos:end="27:13">*</operator><name pos:start="27:14" pos:end="27:23">intPointer</name> <operator pos:start="27:25" pos:end="27:25">=</operator> <literal type="number" pos:start="27:27" pos:end="27:27">5</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="28:13" pos:end="28:38"><expr pos:start="28:13" pos:end="28:37"><call pos:start="28:13" pos:end="28:37"><name pos:start="28:13" pos:end="28:24">printIntLine</name><argument_list pos:start="28:25" pos:end="28:37">(<argument pos:start="28:26" pos:end="28:36"><expr pos:start="28:26" pos:end="28:36"><operator pos:start="28:26" pos:end="28:26">*</operator><name pos:start="28:27" pos:end="28:36">intPointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="29:13" pos:end="29:103">/* FLAW: Check for NULL after dereferencing the pointer. This NULL check is unnecessary. */</comment>
            <if_stmt pos:start="30:13" pos:end="33:13"><if pos:start="30:13" pos:end="33:13">if <condition pos:start="30:16" pos:end="30:35">(<expr pos:start="30:17" pos:end="30:34"><name pos:start="30:17" pos:end="30:26">intPointer</name> <operator pos:start="30:28" pos:end="30:29">!=</operator> <name pos:start="30:31" pos:end="30:34">NULL</name></expr>)</condition>
            <block pos:start="31:13" pos:end="33:13">{<block_content pos:start="32:17" pos:end="32:33">
                <expr_stmt pos:start="32:17" pos:end="32:33"><expr pos:start="32:17" pos:end="32:32"><operator pos:start="32:17" pos:end="32:17">*</operator><name pos:start="32:18" pos:end="32:27">intPointer</name> <operator pos:start="32:29" pos:end="32:29">=</operator> <literal type="number" pos:start="32:31" pos:end="32:32">10</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="34:13" pos:end="34:38"><expr pos:start="34:13" pos:end="34:37"><call pos:start="34:13" pos:end="34:37"><name pos:start="34:13" pos:end="34:24">printIntLine</name><argument_list pos:start="34:25" pos:end="34:37">(<argument pos:start="34:26" pos:end="34:36"><expr pos:start="34:26" pos:end="34:36"><operator pos:start="34:26" pos:end="34:26">*</operator><name pos:start="34:27" pos:end="34:36">intPointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif pos:start="39:1" pos:end="39:6">#<cpp:directive pos:start="39:2" pos:end="39:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="39:8" pos:end="39:20">/* OMITBAD */</comment>

<cpp:ifndef pos:start="41:1" pos:end="41:16">#<cpp:directive pos:start="41:2" pos:end="41:7">ifndef</cpp:directive> <name pos:start="41:9" pos:end="41:16">OMITGOOD</name></cpp:ifndef>

<comment type="block" pos:start="43:1" pos:end="43:41">/* good1() uses if(0) instead of if(1) */</comment>
<function pos:start="44:1" pos:end="63:1"><type pos:start="44:1" pos:end="44:11"><specifier pos:start="44:1" pos:end="44:6">static</specifier> <name pos:start="44:8" pos:end="44:11">void</name></type> <name pos:start="44:13" pos:end="44:17">good1</name><parameter_list pos:start="44:18" pos:end="44:19">()</parameter_list>
<block pos:start="45:1" pos:end="63:1">{<block_content pos:start="46:5" pos:end="62:5">
    <if_stmt pos:start="46:5" pos:end="62:5"><if pos:start="46:5" pos:end="50:5">if<condition pos:start="46:7" pos:end="46:9">(<expr pos:start="46:8" pos:end="46:8"><literal type="number" pos:start="46:8" pos:end="46:8">0</literal></expr>)</condition>
    <block pos:start="47:5" pos:end="50:5">{<block_content pos:start="49:9" pos:end="49:42">
        <comment type="block" pos:start="48:9" pos:end="48:74">/* INCIDENTAL: CWE 561 Dead Code, the code below will never run */</comment>
        <expr_stmt pos:start="49:9" pos:end="49:42"><expr pos:start="49:9" pos:end="49:41"><call pos:start="49:9" pos:end="49:41"><name pos:start="49:9" pos:end="49:17">printLine</name><argument_list pos:start="49:18" pos:end="49:41">(<argument pos:start="49:19" pos:end="49:40"><expr pos:start="49:19" pos:end="49:40"><literal type="string" pos:start="49:19" pos:end="49:40">"Benign, fixed string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else pos:start="51:5" pos:end="62:5">else
    <block pos:start="52:5" pos:end="62:5">{<block_content pos:start="53:9" pos:end="61:9">
        <block pos:start="53:9" pos:end="61:9">{<block_content pos:start="54:13" pos:end="60:38">
            <decl_stmt pos:start="54:13" pos:end="54:35"><decl pos:start="54:13" pos:end="54:34"><type pos:start="54:13" pos:end="54:17"><name pos:start="54:13" pos:end="54:15">int</name> <modifier pos:start="54:17" pos:end="54:17">*</modifier></type><name pos:start="54:18" pos:end="54:27">intPointer</name> <init pos:start="54:29" pos:end="54:34">= <expr pos:start="54:31" pos:end="54:34"><name pos:start="54:31" pos:end="54:34">NULL</name></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="55:13" pos:end="55:52"><expr pos:start="55:13" pos:end="55:51"><name pos:start="55:13" pos:end="55:22">intPointer</name> <operator pos:start="55:24" pos:end="55:24">=</operator> <operator pos:start="55:26" pos:end="55:26">(</operator><name pos:start="55:27" pos:end="55:29">int</name> <operator pos:start="55:31" pos:end="55:31">*</operator><operator pos:start="55:32" pos:end="55:32">)</operator><call pos:start="55:33" pos:end="55:51"><name pos:start="55:33" pos:end="55:38">malloc</name><argument_list pos:start="55:39" pos:end="55:51">(<argument pos:start="55:40" pos:end="55:50"><expr pos:start="55:40" pos:end="55:50"><sizeof pos:start="55:40" pos:end="55:50">sizeof<argument_list pos:start="55:46" pos:end="55:50">(<argument pos:start="55:47" pos:end="55:49"><expr pos:start="55:47" pos:end="55:49"><name pos:start="55:47" pos:end="55:49">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="56:13" pos:end="56:28"><expr pos:start="56:13" pos:end="56:27"><operator pos:start="56:13" pos:end="56:13">*</operator><name pos:start="56:14" pos:end="56:23">intPointer</name> <operator pos:start="56:25" pos:end="56:25">=</operator> <literal type="number" pos:start="56:27" pos:end="56:27">5</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="57:13" pos:end="57:38"><expr pos:start="57:13" pos:end="57:37"><call pos:start="57:13" pos:end="57:37"><name pos:start="57:13" pos:end="57:24">printIntLine</name><argument_list pos:start="57:25" pos:end="57:37">(<argument pos:start="57:26" pos:end="57:36"><expr pos:start="57:26" pos:end="57:36"><operator pos:start="57:26" pos:end="57:26">*</operator><name pos:start="57:27" pos:end="57:36">intPointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="58:13" pos:end="58:101">/* FIX: Don't check for NULL since we wouldn't reach this line if the pointer was NULL */</comment>
            <expr_stmt pos:start="59:13" pos:end="59:29"><expr pos:start="59:13" pos:end="59:28"><operator pos:start="59:13" pos:end="59:13">*</operator><name pos:start="59:14" pos:end="59:23">intPointer</name> <operator pos:start="59:25" pos:end="59:25">=</operator> <literal type="number" pos:start="59:27" pos:end="59:28">10</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="60:13" pos:end="60:38"><expr pos:start="60:13" pos:end="60:37"><call pos:start="60:13" pos:end="60:37"><name pos:start="60:13" pos:end="60:24">printIntLine</name><argument_list pos:start="60:25" pos:end="60:37">(<argument pos:start="60:26" pos:end="60:36"><expr pos:start="60:26" pos:end="60:36"><operator pos:start="60:26" pos:end="60:26">*</operator><name pos:start="60:27" pos:end="60:36">intPointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="65:1" pos:end="65:53">/* good2() reverses the bodies in the if statement */</comment>
<function pos:start="66:1" pos:end="80:1"><type pos:start="66:1" pos:end="66:11"><specifier pos:start="66:1" pos:end="66:6">static</specifier> <name pos:start="66:8" pos:end="66:11">void</name></type> <name pos:start="66:13" pos:end="66:17">good2</name><parameter_list pos:start="66:18" pos:end="66:19">()</parameter_list>
<block pos:start="67:1" pos:end="80:1">{<block_content pos:start="68:5" pos:end="79:5">
    <if_stmt pos:start="68:5" pos:end="79:5"><if pos:start="68:5" pos:end="79:5">if<condition pos:start="68:7" pos:end="68:9">(<expr pos:start="68:8" pos:end="68:8"><literal type="number" pos:start="68:8" pos:end="68:8">1</literal></expr>)</condition>
    <block pos:start="69:5" pos:end="79:5">{<block_content pos:start="70:9" pos:end="78:9">
        <block pos:start="70:9" pos:end="78:9">{<block_content pos:start="71:13" pos:end="77:38">
            <decl_stmt pos:start="71:13" pos:end="71:35"><decl pos:start="71:13" pos:end="71:34"><type pos:start="71:13" pos:end="71:17"><name pos:start="71:13" pos:end="71:15">int</name> <modifier pos:start="71:17" pos:end="71:17">*</modifier></type><name pos:start="71:18" pos:end="71:27">intPointer</name> <init pos:start="71:29" pos:end="71:34">= <expr pos:start="71:31" pos:end="71:34"><name pos:start="71:31" pos:end="71:34">NULL</name></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="72:13" pos:end="72:52"><expr pos:start="72:13" pos:end="72:51"><name pos:start="72:13" pos:end="72:22">intPointer</name> <operator pos:start="72:24" pos:end="72:24">=</operator> <operator pos:start="72:26" pos:end="72:26">(</operator><name pos:start="72:27" pos:end="72:29">int</name> <operator pos:start="72:31" pos:end="72:31">*</operator><operator pos:start="72:32" pos:end="72:32">)</operator><call pos:start="72:33" pos:end="72:51"><name pos:start="72:33" pos:end="72:38">malloc</name><argument_list pos:start="72:39" pos:end="72:51">(<argument pos:start="72:40" pos:end="72:50"><expr pos:start="72:40" pos:end="72:50"><sizeof pos:start="72:40" pos:end="72:50">sizeof<argument_list pos:start="72:46" pos:end="72:50">(<argument pos:start="72:47" pos:end="72:49"><expr pos:start="72:47" pos:end="72:49"><name pos:start="72:47" pos:end="72:49">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="73:13" pos:end="73:28"><expr pos:start="73:13" pos:end="73:27"><operator pos:start="73:13" pos:end="73:13">*</operator><name pos:start="73:14" pos:end="73:23">intPointer</name> <operator pos:start="73:25" pos:end="73:25">=</operator> <literal type="number" pos:start="73:27" pos:end="73:27">5</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="74:13" pos:end="74:38"><expr pos:start="74:13" pos:end="74:37"><call pos:start="74:13" pos:end="74:37"><name pos:start="74:13" pos:end="74:24">printIntLine</name><argument_list pos:start="74:25" pos:end="74:37">(<argument pos:start="74:26" pos:end="74:36"><expr pos:start="74:26" pos:end="74:36"><operator pos:start="74:26" pos:end="74:26">*</operator><name pos:start="74:27" pos:end="74:36">intPointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="75:13" pos:end="75:101">/* FIX: Don't check for NULL since we wouldn't reach this line if the pointer was NULL */</comment>
            <expr_stmt pos:start="76:13" pos:end="76:29"><expr pos:start="76:13" pos:end="76:28"><operator pos:start="76:13" pos:end="76:13">*</operator><name pos:start="76:14" pos:end="76:23">intPointer</name> <operator pos:start="76:25" pos:end="76:25">=</operator> <literal type="number" pos:start="76:27" pos:end="76:28">10</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="77:13" pos:end="77:38"><expr pos:start="77:13" pos:end="77:37"><call pos:start="77:13" pos:end="77:37"><name pos:start="77:13" pos:end="77:24">printIntLine</name><argument_list pos:start="77:25" pos:end="77:37">(<argument pos:start="77:26" pos:end="77:36"><expr pos:start="77:26" pos:end="77:36"><operator pos:start="77:26" pos:end="77:26">*</operator><name pos:start="77:27" pos:end="77:36">intPointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function pos:start="82:1" pos:end="96:0"><type pos:start="82:1" pos:end="82:4"><name pos:start="82:1" pos:end="82:4">void</name></type> <name pos:start="82:6" pos:end="82:68">CWE476_NULL_Pointer_Dereference__null_check_after_deref_02_good</name><parameter_list pos:start="82:69" pos:end="82:70">()</parameter_list>
<block pos:start="83:1" pos:end="96:0">{<block_content pos:start="84:5" pos:end="85:12">
    <expr_stmt pos:start="84:5" pos:end="84:12"><expr pos:start="84:5" pos:end="84:11"><call pos:start="84:5" pos:end="84:11"><name pos:start="84:5" pos:end="84:9">good1</name><argument_list pos:start="84:10" pos:end="84:11">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="85:5" pos:end="85:12"><expr pos:start="85:5" pos:end="85:11"><call pos:start="85:5" pos:end="85:11"><name pos:start="85:5" pos:end="85:9">good2</name><argument_list pos:start="85:10" pos:end="85:11">()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif pos:start="88:1" pos:end="88:6">#<cpp:directive pos:start="88:2" pos:end="88:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="88:8" pos:end="88:21">/* OMITGOOD */</comment>

<comment type="block" pos:start="90:1" pos:end="93:70">/* Below is the main(). It is only used when building this testcase on
   its own for testing or for building a binary to use in testing binary
   analysis tools. It is not used when compiling all the testcases as one
   application, which is how source code analysis tools are tested. */</comment>

<cpp:ifdef pos:start="95:1" pos:end="95:18">#<cpp:directive pos:start="95:2" pos:end="95:6">ifdef</cpp:directive> <name pos:start="95:8" pos:end="95:18">INCLUDEMAIN</name></cpp:ifdef>

<function pos:start="97:1" pos:end="115:0"><type pos:start="97:1" pos:end="97:3"><name pos:start="97:1" pos:end="97:3">int</name></type> <name pos:start="97:5" pos:end="97:8">main</name><parameter_list pos:start="97:9" pos:end="97:33">(<parameter pos:start="97:10" pos:end="97:17"><decl pos:start="97:10" pos:end="97:17"><type pos:start="97:10" pos:end="97:17"><name pos:start="97:10" pos:end="97:12">int</name></type> <name pos:start="97:14" pos:end="97:17">argc</name></decl></parameter>, <parameter pos:start="97:20" pos:end="97:32"><decl pos:start="97:20" pos:end="97:32"><type pos:start="97:20" pos:end="97:30"><name pos:start="97:20" pos:end="97:23">char</name> <modifier pos:start="97:25" pos:end="97:25">*</modifier></type> <name pos:start="97:27" pos:end="97:32"><name pos:start="97:27" pos:end="97:30">argv</name><index pos:start="97:31" pos:end="97:32">[]</index></name></decl></parameter>)</parameter_list>
<block pos:start="98:1" pos:end="115:0">{<block_content pos:start="100:5" pos:end="111:13">
    <comment type="block" pos:start="99:5" pos:end="99:25">/* seed randomness */</comment>
    <expr_stmt pos:start="100:5" pos:end="102:0"><expr pos:start="100:5" pos:end="100:33"><call pos:start="100:5" pos:end="100:33"><name pos:start="100:5" pos:end="100:9">srand</name><argument_list pos:start="100:10" pos:end="100:33">( <argument pos:start="100:12" pos:end="100:31"><expr pos:start="100:12" pos:end="100:31"><operator pos:start="100:12" pos:end="100:12">(</operator><name pos:start="100:13" pos:end="100:20">unsigned</name><operator pos:start="100:21" pos:end="100:21">)</operator><call pos:start="100:22" pos:end="100:31"><name pos:start="100:22" pos:end="100:25">time</name><argument_list pos:start="100:26" pos:end="100:31">(<argument pos:start="100:27" pos:end="100:30"><expr pos:start="100:27" pos:end="100:30"><name pos:start="100:27" pos:end="100:30">NULL</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef pos:start="101:1" pos:end="101:16">#<cpp:directive pos:start="101:2" pos:end="101:7">ifndef</cpp:directive> <name pos:start="101:9" pos:end="101:16">OMITGOOD</name></cpp:ifndef>
    <expr_stmt pos:start="102:5" pos:end="102:35"><expr pos:start="102:5" pos:end="102:34"><call pos:start="102:5" pos:end="102:34"><name pos:start="102:5" pos:end="102:13">printLine</name><argument_list pos:start="102:14" pos:end="102:34">(<argument pos:start="102:15" pos:end="102:33"><expr pos:start="102:15" pos:end="102:33"><literal type="string" pos:start="102:15" pos:end="102:33">"Calling good()..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="103:5" pos:end="103:70"><expr pos:start="103:5" pos:end="103:69"><call pos:start="103:5" pos:end="103:69"><name pos:start="103:5" pos:end="103:67">CWE476_NULL_Pointer_Dereference__null_check_after_deref_02_good</name><argument_list pos:start="103:68" pos:end="103:69">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="104:5" pos:end="107:0"><expr pos:start="104:5" pos:end="104:32"><call pos:start="104:5" pos:end="104:32"><name pos:start="104:5" pos:end="104:13">printLine</name><argument_list pos:start="104:14" pos:end="104:32">(<argument pos:start="104:15" pos:end="104:31"><expr pos:start="104:15" pos:end="104:31"><literal type="string" pos:start="104:15" pos:end="104:31">"Finished good()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="105:1" pos:end="105:6">#<cpp:directive pos:start="105:2" pos:end="105:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="105:8" pos:end="105:21">/* OMITGOOD */</comment>
<cpp:ifndef pos:start="106:1" pos:end="106:15">#<cpp:directive pos:start="106:2" pos:end="106:7">ifndef</cpp:directive> <name pos:start="106:9" pos:end="106:15">OMITBAD</name></cpp:ifndef>
    <expr_stmt pos:start="107:5" pos:end="107:34"><expr pos:start="107:5" pos:end="107:33"><call pos:start="107:5" pos:end="107:33"><name pos:start="107:5" pos:end="107:13">printLine</name><argument_list pos:start="107:14" pos:end="107:33">(<argument pos:start="107:15" pos:end="107:32"><expr pos:start="107:15" pos:end="107:32"><literal type="string" pos:start="107:15" pos:end="107:32">"Calling bad()..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="108:5" pos:end="108:69"><expr pos:start="108:5" pos:end="108:68"><call pos:start="108:5" pos:end="108:68"><name pos:start="108:5" pos:end="108:66">CWE476_NULL_Pointer_Dereference__null_check_after_deref_02_bad</name><argument_list pos:start="108:67" pos:end="108:68">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="109:5" pos:end="111:0"><expr pos:start="109:5" pos:end="109:31"><call pos:start="109:5" pos:end="109:31"><name pos:start="109:5" pos:end="109:13">printLine</name><argument_list pos:start="109:14" pos:end="109:31">(<argument pos:start="109:15" pos:end="109:30"><expr pos:start="109:15" pos:end="109:30"><literal type="string" pos:start="109:15" pos:end="109:30">"Finished bad()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="110:1" pos:end="110:6">#<cpp:directive pos:start="110:2" pos:end="110:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="110:8" pos:end="110:20">/* OMITBAD */</comment>
    <return pos:start="111:5" pos:end="111:13">return <expr pos:start="111:12" pos:end="111:12"><literal type="number" pos:start="111:12" pos:end="111:12">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif pos:start="114:1" pos:end="114:6">#<cpp:directive pos:start="114:2" pos:end="114:6">endif</cpp:directive></cpp:endif>
</unit>
