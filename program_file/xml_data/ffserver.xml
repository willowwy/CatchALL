<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="program_file/pre_data/FFmpeg/1/ffserver.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="19:3">/*
 * Copyright (c) 2000, 2001, 2002 Fabrice Bellard
 *
 * This file is part of FFmpeg.
 *
 * FFmpeg is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * FFmpeg is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with FFmpeg; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */</comment>

<comment type="block" format="doxygen" pos:start="21:1" pos:end="24:3">/**
 * @file
 * multiple format streaming server based on the FFmpeg libraries
 */</comment>

<cpp:include pos:start="26:1" pos:end="26:19">#<cpp:directive pos:start="26:2" pos:end="26:8">include</cpp:directive> <cpp:file pos:start="26:10" pos:end="26:19">"config.h"</cpp:file></cpp:include>
<cpp:if pos:start="27:1" pos:end="27:21">#<cpp:directive pos:start="27:2" pos:end="27:3">if</cpp:directive> <expr pos:start="27:5" pos:end="27:21"><operator pos:start="27:5" pos:end="27:5">!</operator><name pos:start="27:6" pos:end="27:21">HAVE_CLOSESOCKET</name></expr></cpp:if>
<cpp:define pos:start="28:1" pos:end="28:25">#<cpp:directive pos:start="28:2" pos:end="28:7">define</cpp:directive> <cpp:macro pos:start="28:9" pos:end="28:19"><name pos:start="28:9" pos:end="28:19">closesocket</name></cpp:macro> <cpp:value pos:start="28:21" pos:end="28:25">close</cpp:value></cpp:define>
<cpp:endif pos:start="29:1" pos:end="29:6">#<cpp:directive pos:start="29:2" pos:end="29:6">endif</cpp:directive></cpp:endif>
<cpp:include pos:start="30:1" pos:end="30:19">#<cpp:directive pos:start="30:2" pos:end="30:8">include</cpp:directive> <cpp:file pos:start="30:10" pos:end="30:19">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="31:1" pos:end="31:19">#<cpp:directive pos:start="31:2" pos:end="31:8">include</cpp:directive> <cpp:file pos:start="31:10" pos:end="31:19">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="32:1" pos:end="32:18">#<cpp:directive pos:start="32:2" pos:end="32:8">include</cpp:directive> <cpp:file pos:start="32:10" pos:end="32:18">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="33:1" pos:end="33:33">#<cpp:directive pos:start="33:2" pos:end="33:8">include</cpp:directive> <cpp:file pos:start="33:10" pos:end="33:33">"libavformat/avformat.h"</cpp:file></cpp:include>
<comment type="block" pos:start="34:1" pos:end="34:77">/* FIXME: those are internal headers, ffserver _really_ shouldn't use them */</comment>
<cpp:include pos:start="35:1" pos:end="35:33">#<cpp:directive pos:start="35:2" pos:end="35:8">include</cpp:directive> <cpp:file pos:start="35:10" pos:end="35:33">"libavformat/rtpproto.h"</cpp:file></cpp:include>
<cpp:include pos:start="36:1" pos:end="36:29">#<cpp:directive pos:start="36:2" pos:end="36:8">include</cpp:directive> <cpp:file pos:start="36:10" pos:end="36:29">"libavformat/rtsp.h"</cpp:file></cpp:include>
<cpp:include pos:start="37:1" pos:end="37:38">#<cpp:directive pos:start="37:2" pos:end="37:8">include</cpp:directive> <cpp:file pos:start="37:10" pos:end="37:38">"libavformat/avio_internal.h"</cpp:file></cpp:include>
<cpp:include pos:start="38:1" pos:end="38:33">#<cpp:directive pos:start="38:2" pos:end="38:8">include</cpp:directive> <cpp:file pos:start="38:10" pos:end="38:33">"libavformat/internal.h"</cpp:file></cpp:include>

<cpp:include pos:start="40:1" pos:end="40:31">#<cpp:directive pos:start="40:2" pos:end="40:8">include</cpp:directive> <cpp:file pos:start="40:10" pos:end="40:31">"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include pos:start="41:1" pos:end="41:31">#<cpp:directive pos:start="41:2" pos:end="41:8">include</cpp:directive> <cpp:file pos:start="41:10" pos:end="41:31">"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include pos:start="42:1" pos:end="42:26">#<cpp:directive pos:start="42:2" pos:end="42:8">include</cpp:directive> <cpp:file pos:start="42:10" pos:end="42:26">"libavutil/lfg.h"</cpp:file></cpp:include>
<cpp:include pos:start="43:1" pos:end="43:27">#<cpp:directive pos:start="43:2" pos:end="43:8">include</cpp:directive> <cpp:file pos:start="43:10" pos:end="43:27">"libavutil/dict.h"</cpp:file></cpp:include>
<cpp:include pos:start="44:1" pos:end="44:35">#<cpp:directive pos:start="44:2" pos:end="44:8">include</cpp:directive> <cpp:file pos:start="44:10" pos:end="44:35">"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include pos:start="45:1" pos:end="45:34">#<cpp:directive pos:start="45:2" pos:end="45:8">include</cpp:directive> <cpp:file pos:start="45:10" pos:end="45:34">"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include pos:start="46:1" pos:end="46:34">#<cpp:directive pos:start="46:2" pos:end="46:8">include</cpp:directive> <cpp:file pos:start="46:10" pos:end="46:34">"libavutil/random_seed.h"</cpp:file></cpp:include>
<cpp:include pos:start="47:1" pos:end="47:31">#<cpp:directive pos:start="47:2" pos:end="47:8">include</cpp:directive> <cpp:file pos:start="47:10" pos:end="47:31">"libavutil/rational.h"</cpp:file></cpp:include>
<cpp:include pos:start="48:1" pos:end="48:33">#<cpp:directive pos:start="48:2" pos:end="48:8">include</cpp:directive> <cpp:file pos:start="48:10" pos:end="48:33">"libavutil/parseutils.h"</cpp:file></cpp:include>
<cpp:include pos:start="49:1" pos:end="49:26">#<cpp:directive pos:start="49:2" pos:end="49:8">include</cpp:directive> <cpp:file pos:start="49:10" pos:end="49:26">"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include pos:start="50:1" pos:end="50:27">#<cpp:directive pos:start="50:2" pos:end="50:8">include</cpp:directive> <cpp:file pos:start="50:10" pos:end="50:27">"libavutil/time.h"</cpp:file></cpp:include>

<cpp:include pos:start="52:1" pos:end="52:19">#<cpp:directive pos:start="52:2" pos:end="52:8">include</cpp:directive> <cpp:file pos:start="52:10" pos:end="52:19">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:if pos:start="53:1" pos:end="53:17">#<cpp:directive pos:start="53:2" pos:end="53:3">if</cpp:directive> <expr pos:start="53:5" pos:end="53:17"><name pos:start="53:5" pos:end="53:17">HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include pos:start="54:1" pos:end="54:19">#<cpp:directive pos:start="54:2" pos:end="54:8">include</cpp:directive> <cpp:file pos:start="54:10" pos:end="54:19">&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:start="55:1" pos:end="55:6">#<cpp:directive pos:start="55:2" pos:end="55:6">endif</cpp:directive></cpp:endif>
<cpp:include pos:start="56:1" pos:end="56:18">#<cpp:directive pos:start="56:2" pos:end="56:8">include</cpp:directive> <cpp:file pos:start="56:10" pos:end="56:18">&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="57:1" pos:end="57:22">#<cpp:directive pos:start="57:2" pos:end="57:8">include</cpp:directive> <cpp:file pos:start="57:10" pos:end="57:22">&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:if pos:start="58:1" pos:end="58:15">#<cpp:directive pos:start="58:2" pos:end="58:3">if</cpp:directive> <expr pos:start="58:5" pos:end="58:15"><name pos:start="58:5" pos:end="58:15">HAVE_POLL_H</name></expr></cpp:if>
<cpp:include pos:start="59:1" pos:end="59:17">#<cpp:directive pos:start="59:2" pos:end="59:8">include</cpp:directive> <cpp:file pos:start="59:10" pos:end="59:17">&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:start="60:1" pos:end="60:6">#<cpp:directive pos:start="60:2" pos:end="60:6">endif</cpp:directive></cpp:endif>
<cpp:include pos:start="61:1" pos:end="61:18">#<cpp:directive pos:start="61:2" pos:end="61:8">include</cpp:directive> <cpp:file pos:start="61:10" pos:end="61:18">&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="62:1" pos:end="62:17">#<cpp:directive pos:start="62:2" pos:end="62:8">include</cpp:directive> <cpp:file pos:start="62:10" pos:end="62:17">&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="63:1" pos:end="63:21">#<cpp:directive pos:start="63:2" pos:end="63:8">include</cpp:directive> <cpp:file pos:start="63:10" pos:end="63:21">&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="64:1" pos:end="64:19">#<cpp:directive pos:start="64:2" pos:end="64:8">include</cpp:directive> <cpp:file pos:start="64:10" pos:end="64:19">&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:include pos:start="66:1" pos:end="66:21">#<cpp:directive pos:start="66:2" pos:end="66:8">include</cpp:directive> <cpp:file pos:start="66:10" pos:end="66:21">"cmdutils.h"</cpp:file></cpp:include>
<cpp:include pos:start="67:1" pos:end="67:28">#<cpp:directive pos:start="67:2" pos:end="67:8">include</cpp:directive> <cpp:file pos:start="67:10" pos:end="67:28">"ffserver_config.h"</cpp:file></cpp:include>

<cpp:define pos:start="69:1" pos:end="69:24">#<cpp:directive pos:start="69:2" pos:end="69:7">define</cpp:directive> <cpp:macro pos:start="69:9" pos:end="69:19"><name pos:start="69:9" pos:end="69:19">PATH_LENGTH</name></cpp:macro> <cpp:value pos:start="69:21" pos:end="69:24">1024</cpp:value></cpp:define>

<decl_stmt pos:start="71:1" pos:end="71:39"><decl pos:start="71:1" pos:end="71:38"><type pos:start="71:1" pos:end="71:10"><specifier pos:start="71:1" pos:end="71:5">const</specifier> <name pos:start="71:7" pos:end="71:10">char</name></type> <name pos:start="71:12" pos:end="71:25"><name pos:start="71:12" pos:end="71:23">program_name</name><index pos:start="71:24" pos:end="71:25">[]</index></name> <init pos:start="71:27" pos:end="71:38">= <expr pos:start="71:29" pos:end="71:38"><literal type="string" pos:start="71:29" pos:end="71:38">"ffserver"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="72:1" pos:end="72:36"><decl pos:start="72:1" pos:end="72:35"><type pos:start="72:1" pos:end="72:9"><specifier pos:start="72:1" pos:end="72:5">const</specifier> <name pos:start="72:7" pos:end="72:9">int</name></type> <name pos:start="72:11" pos:end="72:28">program_birth_year</name> <init pos:start="72:30" pos:end="72:35">= <expr pos:start="72:32" pos:end="72:35"><literal type="number" pos:start="72:32" pos:end="72:35">2000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt pos:start="74:1" pos:end="74:33"><decl pos:start="74:1" pos:end="74:32"><type pos:start="74:1" pos:end="74:22"><specifier pos:start="74:1" pos:end="74:6">static</specifier> <specifier pos:start="74:8" pos:end="74:12">const</specifier> <name pos:start="74:14" pos:end="74:22">OptionDef</name></type> <name pos:start="74:24" pos:end="74:32"><name pos:start="74:24" pos:end="74:30">options</name><index pos:start="74:31" pos:end="74:32">[]</index></name></decl>;</decl_stmt>

<enum pos:start="76:1" pos:end="89:2">enum <name pos:start="76:6" pos:end="76:14">HTTPState</name> <block pos:start="76:16" pos:end="89:1">{
    <decl pos:start="77:5" pos:end="77:26"><name pos:start="77:5" pos:end="77:26">HTTPSTATE_WAIT_REQUEST</name></decl>,
    <decl pos:start="78:5" pos:end="78:25"><name pos:start="78:5" pos:end="78:25">HTTPSTATE_SEND_HEADER</name></decl>,
    <decl pos:start="79:5" pos:end="79:30"><name pos:start="79:5" pos:end="79:30">HTTPSTATE_SEND_DATA_HEADER</name></decl>,
    <decl pos:start="80:5" pos:end="80:23"><name pos:start="80:5" pos:end="80:23">HTTPSTATE_SEND_DATA</name></decl>,          <comment type="block" pos:start="80:35" pos:end="80:63">/* sending TCP or UDP data */</comment>
    <decl pos:start="81:5" pos:end="81:31"><name pos:start="81:5" pos:end="81:31">HTTPSTATE_SEND_DATA_TRAILER</name></decl>,
    <decl pos:start="82:5" pos:end="82:26"><name pos:start="82:5" pos:end="82:26">HTTPSTATE_RECEIVE_DATA</name></decl>,
    <decl pos:start="83:5" pos:end="83:23"><name pos:start="83:5" pos:end="83:23">HTTPSTATE_WAIT_FEED</name></decl>,          <comment type="block" pos:start="83:35" pos:end="83:67">/* wait for data from the feed */</comment>
    <decl pos:start="84:5" pos:end="84:19"><name pos:start="84:5" pos:end="84:19">HTTPSTATE_READY</name></decl>,

    <decl pos:start="86:5" pos:end="86:26"><name pos:start="86:5" pos:end="86:26">RTSPSTATE_WAIT_REQUEST</name></decl>,
    <decl pos:start="87:5" pos:end="87:24"><name pos:start="87:5" pos:end="87:24">RTSPSTATE_SEND_REPLY</name></decl>,
    <decl pos:start="88:5" pos:end="88:25"><name pos:start="88:5" pos:end="88:25">RTSPSTATE_SEND_PACKET</name></decl>,
}</block>;</enum>

<decl_stmt pos:start="91:1" pos:end="114:0"><decl pos:start="91:1" pos:end="105:1"><type pos:start="91:1" pos:end="91:25"><specifier pos:start="91:1" pos:end="91:6">static</specifier> <specifier pos:start="91:8" pos:end="91:12">const</specifier> <name pos:start="91:14" pos:end="91:17">char</name> <modifier pos:start="91:19" pos:end="91:19">*</modifier> <specifier pos:start="91:21" pos:end="91:25">const</specifier></type> <name pos:start="91:27" pos:end="91:38"><name pos:start="91:27" pos:end="91:36">http_state</name><index pos:start="91:37" pos:end="91:38">[]</index></name> <init pos:start="91:40" pos:end="105:1">= <expr pos:start="91:42" pos:end="105:1"><block pos:start="91:42" pos:end="105:1">{
    <expr pos:start="92:5" pos:end="92:23"><literal type="string" pos:start="92:5" pos:end="92:23">"HTTP_WAIT_REQUEST"</literal></expr>,
    <expr pos:start="93:5" pos:end="93:22"><literal type="string" pos:start="93:5" pos:end="93:22">"HTTP_SEND_HEADER"</literal></expr>,

    <expr pos:start="95:5" pos:end="95:22"><literal type="string" pos:start="95:5" pos:end="95:22">"SEND_DATA_HEADER"</literal></expr>,
    <expr pos:start="96:5" pos:end="96:15"><literal type="string" pos:start="96:5" pos:end="96:15">"SEND_DATA"</literal></expr>,
    <expr pos:start="97:5" pos:end="97:23"><literal type="string" pos:start="97:5" pos:end="97:23">"SEND_DATA_TRAILER"</literal></expr>,
    <expr pos:start="98:5" pos:end="98:18"><literal type="string" pos:start="98:5" pos:end="98:18">"RECEIVE_DATA"</literal></expr>,
    <expr pos:start="99:5" pos:end="99:15"><literal type="string" pos:start="99:5" pos:end="99:15">"WAIT_FEED"</literal></expr>,
    <expr pos:start="100:5" pos:end="100:11"><literal type="string" pos:start="100:5" pos:end="100:11">"READY"</literal></expr>,

    <expr pos:start="102:5" pos:end="102:23"><literal type="string" pos:start="102:5" pos:end="102:23">"RTSP_WAIT_REQUEST"</literal></expr>,
    <expr pos:start="103:5" pos:end="103:21"><literal type="string" pos:start="103:5" pos:end="103:21">"RTSP_SEND_REPLY"</literal></expr>,
    <expr pos:start="104:5" pos:end="104:22"><literal type="string" pos:start="104:5" pos:end="104:22">"RTSP_SEND_PACKET"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define pos:start="107:1" pos:end="107:31">#<cpp:directive pos:start="107:2" pos:end="107:7">define</cpp:directive> <cpp:macro pos:start="107:9" pos:end="107:26"><name pos:start="107:9" pos:end="107:26">IOBUFFER_INIT_SIZE</name></cpp:macro> <cpp:value pos:start="107:28" pos:end="107:31">8192</cpp:value></cpp:define>

<comment type="block" pos:start="109:1" pos:end="109:24">/* timeouts are in ms */</comment>
<cpp:define pos:start="110:1" pos:end="110:40">#<cpp:directive pos:start="110:2" pos:end="110:7">define</cpp:directive> <cpp:macro pos:start="110:9" pos:end="110:28"><name pos:start="110:9" pos:end="110:28">HTTP_REQUEST_TIMEOUT</name></cpp:macro> <cpp:value pos:start="110:30" pos:end="110:40">(15 * 1000)</cpp:value></cpp:define>
<cpp:define pos:start="111:1" pos:end="111:47">#<cpp:directive pos:start="111:2" pos:end="111:7">define</cpp:directive> <cpp:macro pos:start="111:9" pos:end="111:28"><name pos:start="111:9" pos:end="111:28">RTSP_REQUEST_TIMEOUT</name></cpp:macro> <cpp:value pos:start="111:30" pos:end="111:47">(3600 * 24 * 1000)</cpp:value></cpp:define>

<cpp:define pos:start="113:1" pos:end="113:32">#<cpp:directive pos:start="113:2" pos:end="113:7">define</cpp:directive> <cpp:macro pos:start="113:9" pos:end="113:20"><name pos:start="113:9" pos:end="113:20">SYNC_TIMEOUT</name></cpp:macro> <cpp:value pos:start="113:22" pos:end="113:32">(10 * 1000)</cpp:value></cpp:define>

<typedef pos:start="115:1" pos:end="118:24">typedef <type pos:start="115:9" pos:end="118:1"><struct pos:start="115:9" pos:end="118:1">struct <name pos:start="115:16" pos:end="115:36">RTSPActionServerSetup</name> <block pos:start="115:38" pos:end="118:1">{
    <decl_stmt pos:start="116:5" pos:end="116:20"><decl pos:start="116:5" pos:end="116:19"><type pos:start="116:5" pos:end="116:12"><name pos:start="116:5" pos:end="116:12">uint32_t</name></type> <name pos:start="116:14" pos:end="116:19">ipaddr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="117:5" pos:end="117:31"><decl pos:start="117:5" pos:end="117:30"><type pos:start="117:5" pos:end="117:8"><name pos:start="117:5" pos:end="117:8">char</name></type> <name pos:start="117:10" pos:end="117:30"><name pos:start="117:10" pos:end="117:25">transport_option</name><index pos:start="117:26" pos:end="117:30">[<expr pos:start="117:27" pos:end="117:29"><literal type="number" pos:start="117:27" pos:end="117:29">512</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name pos:start="118:3" pos:end="118:23">RTSPActionServerSetup</name>;</typedef>

<typedef pos:start="120:1" pos:end="123:15">typedef <type pos:start="120:9" pos:end="123:1"><struct pos:start="120:9" pos:end="123:1">struct <block pos:start="120:16" pos:end="123:1">{
    <decl_stmt pos:start="121:5" pos:end="121:27"><decl pos:start="121:5" pos:end="121:18"><type pos:start="121:5" pos:end="121:11"><name pos:start="121:5" pos:end="121:11">int64_t</name></type> <name pos:start="121:13" pos:end="121:18">count1</name></decl>, <name pos:start="121:21" pos:end="121:26">count2</name>;</decl_stmt>
    <decl_stmt pos:start="122:5" pos:end="122:25"><decl pos:start="122:5" pos:end="122:17"><type pos:start="122:5" pos:end="122:11"><name pos:start="122:5" pos:end="122:11">int64_t</name></type> <name pos:start="122:13" pos:end="122:17">time1</name></decl>, <name pos:start="122:20" pos:end="122:24">time2</name>;</decl_stmt>
}</block></struct></type> <name pos:start="123:3" pos:end="123:14">DataRateData</name>;</typedef>

<comment type="block" pos:start="125:1" pos:end="125:44">/* context associated with one connection */</comment>
<typedef pos:start="126:1" pos:end="189:14">typedef <type pos:start="126:9" pos:end="189:1"><struct pos:start="126:9" pos:end="189:1">struct <name pos:start="126:16" pos:end="126:26">HTTPContext</name> <block pos:start="126:28" pos:end="189:1">{
    <decl_stmt pos:start="127:5" pos:end="127:25"><decl pos:start="127:5" pos:end="127:24"><type pos:start="127:5" pos:end="127:18"><name pos:start="127:5" pos:end="127:18"><name pos:start="127:5" pos:end="127:8">enum</name> <name pos:start="127:10" pos:end="127:18">HTTPState</name></name></type> <name pos:start="127:20" pos:end="127:24">state</name></decl>;</decl_stmt>
    <decl_stmt pos:start="128:5" pos:end="128:11"><decl pos:start="128:5" pos:end="128:10"><type pos:start="128:5" pos:end="128:7"><name pos:start="128:5" pos:end="128:7">int</name></type> <name pos:start="128:9" pos:end="128:10">fd</name></decl>;</decl_stmt> <comment type="block" pos:start="128:13" pos:end="128:40">/* socket file descriptor */</comment>
    <decl_stmt pos:start="129:5" pos:end="129:33"><decl pos:start="129:5" pos:end="129:32"><type pos:start="129:5" pos:end="129:22"><name pos:start="129:5" pos:end="129:22"><name pos:start="129:5" pos:end="129:10">struct</name> <name pos:start="129:12" pos:end="129:22">sockaddr_in</name></name></type> <name pos:start="129:24" pos:end="129:32">from_addr</name></decl>;</decl_stmt> <comment type="block" pos:start="129:35" pos:end="129:46">/* origin */</comment>
    <decl_stmt pos:start="130:5" pos:end="130:30"><decl pos:start="130:5" pos:end="130:29"><type pos:start="130:5" pos:end="130:19"><name pos:start="130:5" pos:end="130:17"><name pos:start="130:5" pos:end="130:10">struct</name> <name pos:start="130:12" pos:end="130:17">pollfd</name></name> <modifier pos:start="130:19" pos:end="130:19">*</modifier></type><name pos:start="130:20" pos:end="130:29">poll_entry</name></decl>;</decl_stmt> <comment type="block" pos:start="130:32" pos:end="130:54">/* used when polling */</comment>
    <decl_stmt pos:start="131:5" pos:end="131:20"><decl pos:start="131:5" pos:end="131:19"><type pos:start="131:5" pos:end="131:11"><name pos:start="131:5" pos:end="131:11">int64_t</name></type> <name pos:start="131:13" pos:end="131:19">timeout</name></decl>;</decl_stmt>
    <decl_stmt pos:start="132:5" pos:end="132:37"><decl pos:start="132:5" pos:end="132:23"><type pos:start="132:5" pos:end="132:13"><name pos:start="132:5" pos:end="132:11">uint8_t</name> <modifier pos:start="132:13" pos:end="132:13">*</modifier></type><name pos:start="132:14" pos:end="132:23">buffer_ptr</name></decl>, <modifier pos:start="132:26" pos:end="132:26">*</modifier><name pos:start="132:27" pos:end="132:36">buffer_end</name>;</decl_stmt>
    <decl_stmt pos:start="133:5" pos:end="133:19"><decl pos:start="133:5" pos:end="133:18"><type pos:start="133:5" pos:end="133:7"><name pos:start="133:5" pos:end="133:7">int</name></type> <name pos:start="133:9" pos:end="133:18">http_error</name></decl>;</decl_stmt>
    <decl_stmt pos:start="134:5" pos:end="134:13"><decl pos:start="134:5" pos:end="134:12"><type pos:start="134:5" pos:end="134:7"><name pos:start="134:5" pos:end="134:7">int</name></type> <name pos:start="134:9" pos:end="134:12">post</name></decl>;</decl_stmt>
    <decl_stmt pos:start="135:5" pos:end="135:25"><decl pos:start="135:5" pos:end="135:24"><type pos:start="135:5" pos:end="135:7"><name pos:start="135:5" pos:end="135:7">int</name></type> <name pos:start="135:9" pos:end="135:24">chunked_encoding</name></decl>;</decl_stmt>
    <decl_stmt pos:start="136:5" pos:end="136:19"><decl pos:start="136:5" pos:end="136:18"><type pos:start="136:5" pos:end="136:7"><name pos:start="136:5" pos:end="136:7">int</name></type> <name pos:start="136:9" pos:end="136:18">chunk_size</name></decl>;</decl_stmt>               <comment type="block" pos:start="136:35" pos:end="136:64">/* 0 if it needs to be read */</comment>
    <decl_stmt pos:start="137:5" pos:end="137:29"><decl pos:start="137:5" pos:end="137:28"><type pos:start="137:5" pos:end="137:24"><name pos:start="137:5" pos:end="137:22"><name pos:start="137:5" pos:end="137:10">struct</name> <name pos:start="137:12" pos:end="137:22">HTTPContext</name></name> <modifier pos:start="137:24" pos:end="137:24">*</modifier></type><name pos:start="137:25" pos:end="137:28">next</name></decl>;</decl_stmt>
    <decl_stmt pos:start="138:5" pos:end="138:22"><decl pos:start="138:5" pos:end="138:21"><type pos:start="138:5" pos:end="138:7"><name pos:start="138:5" pos:end="138:7">int</name></type> <name pos:start="138:9" pos:end="138:21">got_key_frame</name></decl>;</decl_stmt> <comment type="block" pos:start="138:24" pos:end="138:71">/* stream 0 =&gt; 1, stream 1 =&gt; 2, stream 2=&gt; 4 */</comment>
    <decl_stmt pos:start="139:5" pos:end="139:23"><decl pos:start="139:5" pos:end="139:22"><type pos:start="139:5" pos:end="139:11"><name pos:start="139:5" pos:end="139:11">int64_t</name></type> <name pos:start="139:13" pos:end="139:22">data_count</name></decl>;</decl_stmt>
    <comment type="block" pos:start="140:5" pos:end="140:20">/* feed input */</comment>
    <decl_stmt pos:start="141:5" pos:end="141:16"><decl pos:start="141:5" pos:end="141:15"><type pos:start="141:5" pos:end="141:7"><name pos:start="141:5" pos:end="141:7">int</name></type> <name pos:start="141:9" pos:end="141:15">feed_fd</name></decl>;</decl_stmt>
    <comment type="block" pos:start="142:5" pos:end="142:31">/* input format handling */</comment>
    <decl_stmt pos:start="143:5" pos:end="143:28"><decl pos:start="143:5" pos:end="143:27"><type pos:start="143:5" pos:end="143:21"><name pos:start="143:5" pos:end="143:19">AVFormatContext</name> <modifier pos:start="143:21" pos:end="143:21">*</modifier></type><name pos:start="143:22" pos:end="143:27">fmt_in</name></decl>;</decl_stmt>
    <decl_stmt pos:start="144:5" pos:end="144:23"><decl pos:start="144:5" pos:end="144:22"><type pos:start="144:5" pos:end="144:11"><name pos:start="144:5" pos:end="144:11">int64_t</name></type> <name pos:start="144:13" pos:end="144:22">start_time</name></decl>;</decl_stmt>            <comment type="block" pos:start="144:36" pos:end="144:82">/* In milliseconds - this wraps fairly often */</comment>
    <decl_stmt pos:start="145:5" pos:end="145:22"><decl pos:start="145:5" pos:end="145:21"><type pos:start="145:5" pos:end="145:11"><name pos:start="145:5" pos:end="145:11">int64_t</name></type> <name pos:start="145:13" pos:end="145:21">first_pts</name></decl>;</decl_stmt>            <comment type="block" pos:start="145:35" pos:end="145:57">/* initial pts value */</comment>
    <decl_stmt pos:start="146:5" pos:end="146:20"><decl pos:start="146:5" pos:end="146:19"><type pos:start="146:5" pos:end="146:11"><name pos:start="146:5" pos:end="146:11">int64_t</name></type> <name pos:start="146:13" pos:end="146:19">cur_pts</name></decl>;</decl_stmt>             <comment type="block" pos:start="146:34" pos:end="146:78">/* current pts value from the stream in us */</comment>
    <decl_stmt pos:start="147:5" pos:end="147:31"><decl pos:start="147:5" pos:end="147:30"><type pos:start="147:5" pos:end="147:11"><name pos:start="147:5" pos:end="147:11">int64_t</name></type> <name pos:start="147:13" pos:end="147:30">cur_frame_duration</name></decl>;</decl_stmt>  <comment type="block" pos:start="147:34" pos:end="147:74">/* duration of the current frame in us */</comment>
    <decl_stmt pos:start="148:5" pos:end="148:24"><decl pos:start="148:5" pos:end="148:23"><type pos:start="148:5" pos:end="148:7"><name pos:start="148:5" pos:end="148:7">int</name></type> <name pos:start="148:9" pos:end="148:23">cur_frame_bytes</name></decl>;</decl_stmt>       <comment type="block" pos:start="148:32" pos:end="150:43">/* output frame size, needed to compute
                                  the time at which we send each
                                  packet */</comment>
    <decl_stmt pos:start="151:5" pos:end="151:25"><decl pos:start="151:5" pos:end="151:24"><type pos:start="151:5" pos:end="151:7"><name pos:start="151:5" pos:end="151:7">int</name></type> <name pos:start="151:9" pos:end="151:24">pts_stream_index</name></decl>;</decl_stmt>        <comment type="block" pos:start="151:34" pos:end="151:74">/* stream we choose as clock reference */</comment>
    <decl_stmt pos:start="152:5" pos:end="152:22"><decl pos:start="152:5" pos:end="152:21"><type pos:start="152:5" pos:end="152:11"><name pos:start="152:5" pos:end="152:11">int64_t</name></type> <name pos:start="152:13" pos:end="152:21">cur_clock</name></decl>;</decl_stmt>           <comment type="block" pos:start="152:34" pos:end="152:74">/* current clock reference value in us */</comment>
    <comment type="block" pos:start="153:5" pos:end="153:32">/* output format handling */</comment>
    <decl_stmt pos:start="154:5" pos:end="154:34"><decl pos:start="154:5" pos:end="154:33"><type pos:start="154:5" pos:end="154:27"><name pos:start="154:5" pos:end="154:25"><name pos:start="154:5" pos:end="154:10">struct</name> <name pos:start="154:12" pos:end="154:25">FFServerStream</name></name> <modifier pos:start="154:27" pos:end="154:27">*</modifier></type><name pos:start="154:28" pos:end="154:33">stream</name></decl>;</decl_stmt>
    <comment type="block" pos:start="155:5" pos:end="155:30">/* -1 is invalid stream */</comment>
    <decl_stmt pos:start="156:5" pos:end="156:43"><decl pos:start="156:5" pos:end="156:42"><type pos:start="156:5" pos:end="156:7"><name pos:start="156:5" pos:end="156:7">int</name></type> <name pos:start="156:9" pos:end="156:42"><name pos:start="156:9" pos:end="156:20">feed_streams</name><index pos:start="156:21" pos:end="156:42">[<expr pos:start="156:22" pos:end="156:41"><name pos:start="156:22" pos:end="156:41">FFSERVER_MAX_STREAMS</name></expr>]</index></name></decl>;</decl_stmt> <comment type="block" pos:start="156:45" pos:end="156:78">/* index of streams in the feed */</comment>
    <decl_stmt pos:start="157:5" pos:end="157:50"><decl pos:start="157:5" pos:end="157:49"><type pos:start="157:5" pos:end="157:7"><name pos:start="157:5" pos:end="157:7">int</name></type> <name pos:start="157:9" pos:end="157:49"><name pos:start="157:9" pos:end="157:27">switch_feed_streams</name><index pos:start="157:28" pos:end="157:49">[<expr pos:start="157:29" pos:end="157:48"><name pos:start="157:29" pos:end="157:48">FFSERVER_MAX_STREAMS</name></expr>]</index></name></decl>;</decl_stmt> <comment type="block" pos:start="157:52" pos:end="157:85">/* index of streams in the feed */</comment>
    <decl_stmt pos:start="158:5" pos:end="158:23"><decl pos:start="158:5" pos:end="158:22"><type pos:start="158:5" pos:end="158:7"><name pos:start="158:5" pos:end="158:7">int</name></type> <name pos:start="158:9" pos:end="158:22">switch_pending</name></decl>;</decl_stmt>
    <decl_stmt pos:start="159:5" pos:end="159:30"><decl pos:start="159:5" pos:end="159:29"><type pos:start="159:5" pos:end="159:21"><name pos:start="159:5" pos:end="159:19">AVFormatContext</name> <modifier pos:start="159:21" pos:end="159:21">*</modifier></type><name pos:start="159:22" pos:end="159:29">pfmt_ctx</name></decl>;</decl_stmt> <comment type="block" pos:start="159:32" pos:end="159:76">/* instance of FFServerStream for one user */</comment>
    <decl_stmt pos:start="160:5" pos:end="160:25"><decl pos:start="160:5" pos:end="160:24"><type pos:start="160:5" pos:end="160:7"><name pos:start="160:5" pos:end="160:7">int</name></type> <name pos:start="160:9" pos:end="160:24">last_packet_sent</name></decl>;</decl_stmt> <comment type="block" pos:start="160:27" pos:end="160:65">/* true if last data packet was sent */</comment>
    <decl_stmt pos:start="161:5" pos:end="161:21"><decl pos:start="161:5" pos:end="161:20"><type pos:start="161:5" pos:end="161:7"><name pos:start="161:5" pos:end="161:7">int</name></type> <name pos:start="161:9" pos:end="161:20">suppress_log</name></decl>;</decl_stmt>
    <decl_stmt pos:start="162:5" pos:end="162:26"><decl pos:start="162:5" pos:end="162:25"><type pos:start="162:5" pos:end="162:16"><name pos:start="162:5" pos:end="162:16">DataRateData</name></type> <name pos:start="162:18" pos:end="162:25">datarate</name></decl>;</decl_stmt>
    <decl_stmt pos:start="163:5" pos:end="163:22"><decl pos:start="163:5" pos:end="163:21"><type pos:start="163:5" pos:end="163:7"><name pos:start="163:5" pos:end="163:7">int</name></type> <name pos:start="163:9" pos:end="163:21">wmp_client_id</name></decl>;</decl_stmt>
    <decl_stmt pos:start="164:5" pos:end="164:22"><decl pos:start="164:5" pos:end="164:21"><type pos:start="164:5" pos:end="164:8"><name pos:start="164:5" pos:end="164:8">char</name></type> <name pos:start="164:10" pos:end="164:21"><name pos:start="164:10" pos:end="164:17">protocol</name><index pos:start="164:18" pos:end="164:21">[<expr pos:start="164:19" pos:end="164:20"><literal type="number" pos:start="164:19" pos:end="164:20">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="165:5" pos:end="165:20"><decl pos:start="165:5" pos:end="165:19"><type pos:start="165:5" pos:end="165:8"><name pos:start="165:5" pos:end="165:8">char</name></type> <name pos:start="165:10" pos:end="165:19"><name pos:start="165:10" pos:end="165:15">method</name><index pos:start="165:16" pos:end="165:19">[<expr pos:start="165:17" pos:end="165:18"><literal type="number" pos:start="165:17" pos:end="165:18">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="166:5" pos:end="166:18"><decl pos:start="166:5" pos:end="166:17"><type pos:start="166:5" pos:end="166:8"><name pos:start="166:5" pos:end="166:8">char</name></type> <name pos:start="166:10" pos:end="166:17"><name pos:start="166:10" pos:end="166:12">url</name><index pos:start="166:13" pos:end="166:17">[<expr pos:start="166:14" pos:end="166:16"><literal type="number" pos:start="166:14" pos:end="166:16">128</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="167:5" pos:end="167:26"><decl pos:start="167:5" pos:end="167:25"><type pos:start="167:5" pos:end="167:8"><name pos:start="167:5" pos:end="167:8">char</name></type> <name pos:start="167:10" pos:end="167:25"><name pos:start="167:10" pos:end="167:18">clean_url</name><index pos:start="167:19" pos:end="167:25">[<expr pos:start="167:20" pos:end="167:24"><literal type="number" pos:start="167:20" pos:end="167:22">128</literal><operator pos:start="167:23" pos:end="167:23">*</operator><literal type="number" pos:start="167:24" pos:end="167:24">7</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="168:5" pos:end="168:20"><decl pos:start="168:5" pos:end="168:19"><type pos:start="168:5" pos:end="168:7"><name pos:start="168:5" pos:end="168:7">int</name></type> <name pos:start="168:9" pos:end="168:19">buffer_size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="169:5" pos:end="169:20"><decl pos:start="169:5" pos:end="169:19"><type pos:start="169:5" pos:end="169:13"><name pos:start="169:5" pos:end="169:11">uint8_t</name> <modifier pos:start="169:13" pos:end="169:13">*</modifier></type><name pos:start="169:14" pos:end="169:19">buffer</name></decl>;</decl_stmt>
    <decl_stmt pos:start="170:5" pos:end="170:22"><decl pos:start="170:5" pos:end="170:21"><type pos:start="170:5" pos:end="170:7"><name pos:start="170:5" pos:end="170:7">int</name></type> <name pos:start="170:9" pos:end="170:21">is_packetized</name></decl>;</decl_stmt> <comment type="block" pos:start="170:24" pos:end="170:62">/* if true, the stream is packetized */</comment>
    <decl_stmt pos:start="171:5" pos:end="171:28"><decl pos:start="171:5" pos:end="171:27"><type pos:start="171:5" pos:end="171:7"><name pos:start="171:5" pos:end="171:7">int</name></type> <name pos:start="171:9" pos:end="171:27">packet_stream_index</name></decl>;</decl_stmt> <comment type="block" pos:start="171:30" pos:end="171:77">/* current stream for output in state machine */</comment>

    <comment type="block" pos:start="173:5" pos:end="173:29">/* RTSP state specific */</comment>
    <decl_stmt pos:start="174:5" pos:end="174:23"><decl pos:start="174:5" pos:end="174:22"><type pos:start="174:5" pos:end="174:13"><name pos:start="174:5" pos:end="174:11">uint8_t</name> <modifier pos:start="174:13" pos:end="174:13">*</modifier></type><name pos:start="174:14" pos:end="174:22">pb_buffer</name></decl>;</decl_stmt> <comment type="block" pos:start="174:25" pos:end="174:59">/* XXX: use that in all the code */</comment>
    <decl_stmt pos:start="175:5" pos:end="175:20"><decl pos:start="175:5" pos:end="175:19"><type pos:start="175:5" pos:end="175:17"><name pos:start="175:5" pos:end="175:15">AVIOContext</name> <modifier pos:start="175:17" pos:end="175:17">*</modifier></type><name pos:start="175:18" pos:end="175:19">pb</name></decl>;</decl_stmt>
    <decl_stmt pos:start="176:5" pos:end="176:12"><decl pos:start="176:5" pos:end="176:11"><type pos:start="176:5" pos:end="176:7"><name pos:start="176:5" pos:end="176:7">int</name></type> <name pos:start="176:9" pos:end="176:11">seq</name></decl>;</decl_stmt> <comment type="block" pos:start="176:14" pos:end="176:39">/* RTSP sequence number */</comment>

    <comment type="block" pos:start="178:5" pos:end="178:28">/* RTP state specific */</comment>
    <decl_stmt pos:start="179:5" pos:end="179:41"><decl pos:start="179:5" pos:end="179:40"><type pos:start="179:5" pos:end="179:27"><name pos:start="179:5" pos:end="179:27"><name pos:start="179:5" pos:end="179:8">enum</name> <name pos:start="179:10" pos:end="179:27">RTSPLowerTransport</name></name></type> <name pos:start="179:29" pos:end="179:40">rtp_protocol</name></decl>;</decl_stmt>
    <decl_stmt pos:start="180:5" pos:end="180:24"><decl pos:start="180:5" pos:end="180:23"><type pos:start="180:5" pos:end="180:8"><name pos:start="180:5" pos:end="180:8">char</name></type> <name pos:start="180:10" pos:end="180:23"><name pos:start="180:10" pos:end="180:19">session_id</name><index pos:start="180:20" pos:end="180:23">[<expr pos:start="180:21" pos:end="180:22"><literal type="number" pos:start="180:21" pos:end="180:22">32</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block" pos:start="180:26" pos:end="180:41">/* session id */</comment>
    <decl_stmt pos:start="181:5" pos:end="181:51"><decl pos:start="181:5" pos:end="181:50"><type pos:start="181:5" pos:end="181:21"><name pos:start="181:5" pos:end="181:19">AVFormatContext</name> <modifier pos:start="181:21" pos:end="181:21">*</modifier></type><name pos:start="181:22" pos:end="181:50"><name pos:start="181:22" pos:end="181:28">rtp_ctx</name><index pos:start="181:29" pos:end="181:50">[<expr pos:start="181:30" pos:end="181:49"><name pos:start="181:30" pos:end="181:49">FFSERVER_MAX_STREAMS</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block" pos:start="183:5" pos:end="183:26">/* RTP/UDP specific */</comment>
    <decl_stmt pos:start="184:5" pos:end="184:50"><decl pos:start="184:5" pos:end="184:49"><type pos:start="184:5" pos:end="184:16"><name pos:start="184:5" pos:end="184:14">URLContext</name> <modifier pos:start="184:16" pos:end="184:16">*</modifier></type><name pos:start="184:17" pos:end="184:49"><name pos:start="184:17" pos:end="184:27">rtp_handles</name><index pos:start="184:28" pos:end="184:49">[<expr pos:start="184:29" pos:end="184:48"><name pos:start="184:29" pos:end="184:48">FFSERVER_MAX_STREAMS</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block" pos:start="186:5" pos:end="186:26">/* RTP/TCP specific */</comment>
    <decl_stmt pos:start="187:5" pos:end="187:31"><decl pos:start="187:5" pos:end="187:30"><type pos:start="187:5" pos:end="187:24"><name pos:start="187:5" pos:end="187:22"><name pos:start="187:5" pos:end="187:10">struct</name> <name pos:start="187:12" pos:end="187:22">HTTPContext</name></name> <modifier pos:start="187:24" pos:end="187:24">*</modifier></type><name pos:start="187:25" pos:end="187:30">rtsp_c</name></decl>;</decl_stmt>
    <decl_stmt pos:start="188:5" pos:end="188:67"><decl pos:start="188:5" pos:end="188:26"><type pos:start="188:5" pos:end="188:13"><name pos:start="188:5" pos:end="188:11">uint8_t</name> <modifier pos:start="188:13" pos:end="188:13">*</modifier></type><name pos:start="188:14" pos:end="188:26">packet_buffer</name></decl>, <modifier pos:start="188:29" pos:end="188:29">*</modifier><name pos:start="188:30" pos:end="188:46">packet_buffer_ptr</name>, <modifier pos:start="188:49" pos:end="188:49">*</modifier><name pos:start="188:50" pos:end="188:66">packet_buffer_end</name>;</decl_stmt>
}</block></struct></type> <name pos:start="189:3" pos:end="189:13">HTTPContext</name>;</typedef>

<decl_stmt pos:start="191:1" pos:end="191:35"><decl pos:start="191:1" pos:end="191:34"><type pos:start="191:1" pos:end="191:20"><specifier pos:start="191:1" pos:end="191:6">static</specifier> <name pos:start="191:8" pos:end="191:18">HTTPContext</name> <modifier pos:start="191:20" pos:end="191:20">*</modifier></type><name pos:start="191:21" pos:end="191:34">first_http_ctx</name></decl>;</decl_stmt>

<decl_stmt pos:start="193:1" pos:end="198:2"><decl pos:start="193:1" pos:end="198:1"><type pos:start="193:1" pos:end="193:21"><specifier pos:start="193:1" pos:end="193:6">static</specifier> <name pos:start="193:8" pos:end="193:21">FFServerConfig</name></type> <name pos:start="193:23" pos:end="193:28">config</name> <init pos:start="193:30" pos:end="198:1">= <expr pos:start="193:32" pos:end="198:1"><block pos:start="193:32" pos:end="198:1">{
    <expr pos:start="194:5" pos:end="194:35"><operator pos:start="194:5" pos:end="194:5">.</operator><name pos:start="194:6" pos:end="194:28">nb_max_http_connections</name> <operator pos:start="194:30" pos:end="194:30">=</operator> <literal type="number" pos:start="194:32" pos:end="194:35">2000</literal></expr>,
    <expr pos:start="195:5" pos:end="195:27"><operator pos:start="195:5" pos:end="195:5">.</operator><name pos:start="195:6" pos:end="195:23">nb_max_connections</name> <operator pos:start="195:25" pos:end="195:25">=</operator> <literal type="number" pos:start="195:27" pos:end="195:27">5</literal></expr>,
    <expr pos:start="196:5" pos:end="196:25"><operator pos:start="196:5" pos:end="196:5">.</operator><name pos:start="196:6" pos:end="196:18">max_bandwidth</name> <operator pos:start="196:20" pos:end="196:20">=</operator> <literal type="number" pos:start="196:22" pos:end="196:25">1000</literal></expr>,
    <expr pos:start="197:5" pos:end="197:21"><operator pos:start="197:5" pos:end="197:5">.</operator><name pos:start="197:6" pos:end="197:17">use_defaults</name> <operator pos:start="197:19" pos:end="197:19">=</operator> <literal type="number" pos:start="197:21" pos:end="197:21">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function_decl pos:start="200:1" pos:end="200:55"><type pos:start="200:1" pos:end="200:11"><specifier pos:start="200:1" pos:end="200:6">static</specifier> <name pos:start="200:8" pos:end="200:11">void</name></type> <name pos:start="200:13" pos:end="200:26">new_connection</name><parameter_list pos:start="200:27" pos:end="200:54">(<parameter pos:start="200:28" pos:end="200:40"><decl pos:start="200:28" pos:end="200:40"><type pos:start="200:28" pos:end="200:40"><name pos:start="200:28" pos:end="200:30">int</name></type> <name pos:start="200:32" pos:end="200:40">server_fd</name></decl></parameter>, <parameter pos:start="200:43" pos:end="200:53"><decl pos:start="200:43" pos:end="200:53"><type pos:start="200:43" pos:end="200:53"><name pos:start="200:43" pos:end="200:45">int</name></type> <name pos:start="200:47" pos:end="200:53">is_rtsp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="201:1" pos:end="201:45"><type pos:start="201:1" pos:end="201:11"><specifier pos:start="201:1" pos:end="201:6">static</specifier> <name pos:start="201:8" pos:end="201:11">void</name></type> <name pos:start="201:13" pos:end="201:28">close_connection</name><parameter_list pos:start="201:29" pos:end="201:44">(<parameter pos:start="201:30" pos:end="201:43"><decl pos:start="201:30" pos:end="201:43"><type pos:start="201:30" pos:end="201:42"><name pos:start="201:30" pos:end="201:40">HTTPContext</name> <modifier pos:start="201:42" pos:end="201:42">*</modifier></type><name pos:start="201:43" pos:end="201:43">c</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" pos:start="203:1" pos:end="203:19">/* HTTP handling */</comment>
<function_decl pos:start="204:1" pos:end="204:45"><type pos:start="204:1" pos:end="204:10"><specifier pos:start="204:1" pos:end="204:6">static</specifier> <name pos:start="204:8" pos:end="204:10">int</name></type> <name pos:start="204:12" pos:end="204:28">handle_connection</name><parameter_list pos:start="204:29" pos:end="204:44">(<parameter pos:start="204:30" pos:end="204:43"><decl pos:start="204:30" pos:end="204:43"><type pos:start="204:30" pos:end="204:42"><name pos:start="204:30" pos:end="204:40">HTTPContext</name> <modifier pos:start="204:42" pos:end="204:42">*</modifier></type><name pos:start="204:43" pos:end="204:43">c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="205:1" pos:end="205:80"><type pos:start="205:1" pos:end="205:18"><specifier pos:start="205:1" pos:end="205:6">static</specifier> <specifier pos:start="205:8" pos:end="205:13">inline</specifier> <name pos:start="205:15" pos:end="205:18">void</name></type> <name pos:start="205:20" pos:end="205:38">print_stream_params</name><parameter_list pos:start="205:39" pos:end="205:79">(<parameter pos:start="205:40" pos:end="205:54"><decl pos:start="205:40" pos:end="205:54"><type pos:start="205:40" pos:end="205:54"><name pos:start="205:40" pos:end="205:50">AVIOContext</name> <modifier pos:start="205:52" pos:end="205:52">*</modifier></type><name pos:start="205:53" pos:end="205:54">pb</name></decl></parameter>, <parameter pos:start="205:57" pos:end="205:78"><decl pos:start="205:57" pos:end="205:78"><type pos:start="205:57" pos:end="205:78"><name pos:start="205:57" pos:end="205:70">FFServerStream</name> <modifier pos:start="205:72" pos:end="205:72">*</modifier></type><name pos:start="205:73" pos:end="205:78">stream</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="206:1" pos:end="206:43"><type pos:start="206:1" pos:end="206:11"><specifier pos:start="206:1" pos:end="206:6">static</specifier> <name pos:start="206:8" pos:end="206:11">void</name></type> <name pos:start="206:13" pos:end="206:26">compute_status</name><parameter_list pos:start="206:27" pos:end="206:42">(<parameter pos:start="206:28" pos:end="206:41"><decl pos:start="206:28" pos:end="206:41"><type pos:start="206:28" pos:end="206:40"><name pos:start="206:28" pos:end="206:38">HTTPContext</name> <modifier pos:start="206:40" pos:end="206:40">*</modifier></type><name pos:start="206:41" pos:end="206:41">c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="207:1" pos:end="207:63"><type pos:start="207:1" pos:end="207:10"><specifier pos:start="207:1" pos:end="207:6">static</specifier> <name pos:start="207:8" pos:end="207:10">int</name></type> <name pos:start="207:12" pos:end="207:28">open_input_stream</name><parameter_list pos:start="207:29" pos:end="207:62">(<parameter pos:start="207:30" pos:end="207:43"><decl pos:start="207:30" pos:end="207:43"><type pos:start="207:30" pos:end="207:43"><name pos:start="207:30" pos:end="207:40">HTTPContext</name> <modifier pos:start="207:42" pos:end="207:42">*</modifier></type><name pos:start="207:43" pos:end="207:43">c</name></decl></parameter>, <parameter pos:start="207:46" pos:end="207:61"><decl pos:start="207:46" pos:end="207:61"><type pos:start="207:46" pos:end="207:61"><specifier pos:start="207:46" pos:end="207:50">const</specifier> <name pos:start="207:52" pos:end="207:55">char</name> <modifier pos:start="207:57" pos:end="207:57">*</modifier></type><name pos:start="207:58" pos:end="207:61">info</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="208:1" pos:end="208:46"><type pos:start="208:1" pos:end="208:10"><specifier pos:start="208:1" pos:end="208:6">static</specifier> <name pos:start="208:8" pos:end="208:10">int</name></type> <name pos:start="208:12" pos:end="208:29">http_parse_request</name><parameter_list pos:start="208:30" pos:end="208:45">(<parameter pos:start="208:31" pos:end="208:44"><decl pos:start="208:31" pos:end="208:44"><type pos:start="208:31" pos:end="208:43"><name pos:start="208:31" pos:end="208:41">HTTPContext</name> <modifier pos:start="208:43" pos:end="208:43">*</modifier></type><name pos:start="208:44" pos:end="208:44">c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="209:1" pos:end="209:42"><type pos:start="209:1" pos:end="209:10"><specifier pos:start="209:1" pos:end="209:6">static</specifier> <name pos:start="209:8" pos:end="209:10">int</name></type> <name pos:start="209:12" pos:end="209:25">http_send_data</name><parameter_list pos:start="209:26" pos:end="209:41">(<parameter pos:start="209:27" pos:end="209:40"><decl pos:start="209:27" pos:end="209:40"><type pos:start="209:27" pos:end="209:39"><name pos:start="209:27" pos:end="209:37">HTTPContext</name> <modifier pos:start="209:39" pos:end="209:39">*</modifier></type><name pos:start="209:40" pos:end="209:40">c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="210:1" pos:end="210:51"><type pos:start="210:1" pos:end="210:10"><specifier pos:start="210:1" pos:end="210:6">static</specifier> <name pos:start="210:8" pos:end="210:10">int</name></type> <name pos:start="210:12" pos:end="210:34">http_start_receive_data</name><parameter_list pos:start="210:35" pos:end="210:50">(<parameter pos:start="210:36" pos:end="210:49"><decl pos:start="210:36" pos:end="210:49"><type pos:start="210:36" pos:end="210:48"><name pos:start="210:36" pos:end="210:46">HTTPContext</name> <modifier pos:start="210:48" pos:end="210:48">*</modifier></type><name pos:start="210:49" pos:end="210:49">c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="211:1" pos:end="211:45"><type pos:start="211:1" pos:end="211:10"><specifier pos:start="211:1" pos:end="211:6">static</specifier> <name pos:start="211:8" pos:end="211:10">int</name></type> <name pos:start="211:12" pos:end="211:28">http_receive_data</name><parameter_list pos:start="211:29" pos:end="211:44">(<parameter pos:start="211:30" pos:end="211:43"><decl pos:start="211:30" pos:end="211:43"><type pos:start="211:30" pos:end="211:42"><name pos:start="211:30" pos:end="211:40">HTTPContext</name> <modifier pos:start="211:42" pos:end="211:42">*</modifier></type><name pos:start="211:43" pos:end="211:43">c</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" pos:start="213:1" pos:end="213:19">/* RTSP handling */</comment>
<function_decl pos:start="214:1" pos:end="214:46"><type pos:start="214:1" pos:end="214:10"><specifier pos:start="214:1" pos:end="214:6">static</specifier> <name pos:start="214:8" pos:end="214:10">int</name></type> <name pos:start="214:12" pos:end="214:29">rtsp_parse_request</name><parameter_list pos:start="214:30" pos:end="214:45">(<parameter pos:start="214:31" pos:end="214:44"><decl pos:start="214:31" pos:end="214:44"><type pos:start="214:31" pos:end="214:43"><name pos:start="214:31" pos:end="214:41">HTTPContext</name> <modifier pos:start="214:43" pos:end="214:43">*</modifier></type><name pos:start="214:44" pos:end="214:44">c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="215:1" pos:end="215:63"><type pos:start="215:1" pos:end="215:11"><specifier pos:start="215:1" pos:end="215:6">static</specifier> <name pos:start="215:8" pos:end="215:11">void</name></type> <name pos:start="215:13" pos:end="215:29">rtsp_cmd_describe</name><parameter_list pos:start="215:30" pos:end="215:62">(<parameter pos:start="215:31" pos:end="215:44"><decl pos:start="215:31" pos:end="215:44"><type pos:start="215:31" pos:end="215:44"><name pos:start="215:31" pos:end="215:41">HTTPContext</name> <modifier pos:start="215:43" pos:end="215:43">*</modifier></type><name pos:start="215:44" pos:end="215:44">c</name></decl></parameter>, <parameter pos:start="215:47" pos:end="215:61"><decl pos:start="215:47" pos:end="215:61"><type pos:start="215:47" pos:end="215:61"><specifier pos:start="215:47" pos:end="215:51">const</specifier> <name pos:start="215:53" pos:end="215:56">char</name> <modifier pos:start="215:58" pos:end="215:58">*</modifier></type><name pos:start="215:59" pos:end="215:61">url</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="216:1" pos:end="216:62"><type pos:start="216:1" pos:end="216:11"><specifier pos:start="216:1" pos:end="216:6">static</specifier> <name pos:start="216:8" pos:end="216:11">void</name></type> <name pos:start="216:13" pos:end="216:28">rtsp_cmd_options</name><parameter_list pos:start="216:29" pos:end="216:61">(<parameter pos:start="216:30" pos:end="216:43"><decl pos:start="216:30" pos:end="216:43"><type pos:start="216:30" pos:end="216:43"><name pos:start="216:30" pos:end="216:40">HTTPContext</name> <modifier pos:start="216:42" pos:end="216:42">*</modifier></type><name pos:start="216:43" pos:end="216:43">c</name></decl></parameter>, <parameter pos:start="216:46" pos:end="216:60"><decl pos:start="216:46" pos:end="216:60"><type pos:start="216:46" pos:end="216:60"><specifier pos:start="216:46" pos:end="216:50">const</specifier> <name pos:start="216:52" pos:end="216:55">char</name> <modifier pos:start="216:57" pos:end="216:57">*</modifier></type><name pos:start="216:58" pos:end="216:60">url</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="217:1" pos:end="218:49"><type pos:start="217:1" pos:end="217:11"><specifier pos:start="217:1" pos:end="217:6">static</specifier> <name pos:start="217:8" pos:end="217:11">void</name></type> <name pos:start="217:13" pos:end="217:26">rtsp_cmd_setup</name><parameter_list pos:start="217:27" pos:end="218:48">(<parameter pos:start="217:28" pos:end="217:41"><decl pos:start="217:28" pos:end="217:41"><type pos:start="217:28" pos:end="217:41"><name pos:start="217:28" pos:end="217:38">HTTPContext</name> <modifier pos:start="217:40" pos:end="217:40">*</modifier></type><name pos:start="217:41" pos:end="217:41">c</name></decl></parameter>, <parameter pos:start="217:44" pos:end="217:58"><decl pos:start="217:44" pos:end="217:58"><type pos:start="217:44" pos:end="217:58"><specifier pos:start="217:44" pos:end="217:48">const</specifier> <name pos:start="217:50" pos:end="217:53">char</name> <modifier pos:start="217:55" pos:end="217:55">*</modifier></type><name pos:start="217:56" pos:end="217:58">url</name></decl></parameter>,
                           <parameter pos:start="218:28" pos:end="218:47"><decl pos:start="218:28" pos:end="218:47"><type pos:start="218:28" pos:end="218:47"><name pos:start="218:28" pos:end="218:44">RTSPMessageHeader</name> <modifier pos:start="218:46" pos:end="218:46">*</modifier></type><name pos:start="218:47" pos:end="218:47">h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="219:1" pos:end="220:48"><type pos:start="219:1" pos:end="219:11"><specifier pos:start="219:1" pos:end="219:6">static</specifier> <name pos:start="219:8" pos:end="219:11">void</name></type> <name pos:start="219:13" pos:end="219:25">rtsp_cmd_play</name><parameter_list pos:start="219:26" pos:end="220:47">(<parameter pos:start="219:27" pos:end="219:40"><decl pos:start="219:27" pos:end="219:40"><type pos:start="219:27" pos:end="219:40"><name pos:start="219:27" pos:end="219:37">HTTPContext</name> <modifier pos:start="219:39" pos:end="219:39">*</modifier></type><name pos:start="219:40" pos:end="219:40">c</name></decl></parameter>, <parameter pos:start="219:43" pos:end="219:57"><decl pos:start="219:43" pos:end="219:57"><type pos:start="219:43" pos:end="219:57"><specifier pos:start="219:43" pos:end="219:47">const</specifier> <name pos:start="219:49" pos:end="219:52">char</name> <modifier pos:start="219:54" pos:end="219:54">*</modifier></type><name pos:start="219:55" pos:end="219:57">url</name></decl></parameter>,
                          <parameter pos:start="220:27" pos:end="220:46"><decl pos:start="220:27" pos:end="220:46"><type pos:start="220:27" pos:end="220:46"><name pos:start="220:27" pos:end="220:43">RTSPMessageHeader</name> <modifier pos:start="220:45" pos:end="220:45">*</modifier></type><name pos:start="220:46" pos:end="220:46">h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="221:1" pos:end="222:69"><type pos:start="221:1" pos:end="221:11"><specifier pos:start="221:1" pos:end="221:6">static</specifier> <name pos:start="221:8" pos:end="221:11">void</name></type> <name pos:start="221:13" pos:end="221:30">rtsp_cmd_interrupt</name><parameter_list pos:start="221:31" pos:end="222:68">(<parameter pos:start="221:32" pos:end="221:45"><decl pos:start="221:32" pos:end="221:45"><type pos:start="221:32" pos:end="221:45"><name pos:start="221:32" pos:end="221:42">HTTPContext</name> <modifier pos:start="221:44" pos:end="221:44">*</modifier></type><name pos:start="221:45" pos:end="221:45">c</name></decl></parameter>, <parameter pos:start="221:48" pos:end="221:62"><decl pos:start="221:48" pos:end="221:62"><type pos:start="221:48" pos:end="221:62"><specifier pos:start="221:48" pos:end="221:52">const</specifier> <name pos:start="221:54" pos:end="221:57">char</name> <modifier pos:start="221:59" pos:end="221:59">*</modifier></type><name pos:start="221:60" pos:end="221:62">url</name></decl></parameter>,
                               <parameter pos:start="222:32" pos:end="222:51"><decl pos:start="222:32" pos:end="222:51"><type pos:start="222:32" pos:end="222:51"><name pos:start="222:32" pos:end="222:48">RTSPMessageHeader</name> <modifier pos:start="222:50" pos:end="222:50">*</modifier></type><name pos:start="222:51" pos:end="222:51">h</name></decl></parameter>, <parameter pos:start="222:54" pos:end="222:67"><decl pos:start="222:54" pos:end="222:67"><type pos:start="222:54" pos:end="222:67"><name pos:start="222:54" pos:end="222:56">int</name></type> <name pos:start="222:58" pos:end="222:67">pause_only</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" pos:start="224:1" pos:end="224:18">/* SDP handling */</comment>
<function_decl pos:start="225:1" pos:end="226:57"><type pos:start="225:1" pos:end="225:10"><specifier pos:start="225:1" pos:end="225:6">static</specifier> <name pos:start="225:8" pos:end="225:10">int</name></type> <name pos:start="225:12" pos:end="225:34">prepare_sdp_description</name><parameter_list pos:start="225:35" pos:end="226:56">(<parameter pos:start="225:36" pos:end="225:57"><decl pos:start="225:36" pos:end="225:57"><type pos:start="225:36" pos:end="225:57"><name pos:start="225:36" pos:end="225:49">FFServerStream</name> <modifier pos:start="225:51" pos:end="225:51">*</modifier></type><name pos:start="225:52" pos:end="225:57">stream</name></decl></parameter>, <parameter pos:start="225:60" pos:end="225:76"><decl pos:start="225:60" pos:end="225:76"><type pos:start="225:60" pos:end="225:76"><name pos:start="225:60" pos:end="225:66">uint8_t</name> <modifier pos:start="225:68" pos:end="225:68">*</modifier><modifier pos:start="225:69" pos:end="225:69">*</modifier></type><name pos:start="225:70" pos:end="225:76">pbuffer</name></decl></parameter>,
                                   <parameter pos:start="226:36" pos:end="226:55"><decl pos:start="226:36" pos:end="226:55"><type pos:start="226:36" pos:end="226:55"><name pos:start="226:36" pos:end="226:49"><name pos:start="226:36" pos:end="226:41">struct</name> <name pos:start="226:43" pos:end="226:49">in_addr</name></name></type> <name pos:start="226:51" pos:end="226:55">my_ip</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" pos:start="228:1" pos:end="228:18">/* RTP handling */</comment>
<function_decl pos:start="229:1" pos:end="232:77"><type pos:start="229:1" pos:end="229:20"><specifier pos:start="229:1" pos:end="229:6">static</specifier> <name pos:start="229:8" pos:end="229:18">HTTPContext</name> <modifier pos:start="229:20" pos:end="229:20">*</modifier></type><name pos:start="229:21" pos:end="229:38">rtp_new_connection</name><parameter_list pos:start="229:39" pos:end="232:76">(<parameter pos:start="229:40" pos:end="229:68"><decl pos:start="229:40" pos:end="229:68"><type pos:start="229:40" pos:end="229:68"><name pos:start="229:40" pos:end="229:57"><name pos:start="229:40" pos:end="229:45">struct</name> <name pos:start="229:47" pos:end="229:57">sockaddr_in</name></name> <modifier pos:start="229:59" pos:end="229:59">*</modifier></type><name pos:start="229:60" pos:end="229:68">from_addr</name></decl></parameter>,
                                       <parameter pos:start="230:40" pos:end="230:61"><decl pos:start="230:40" pos:end="230:61"><type pos:start="230:40" pos:end="230:61"><name pos:start="230:40" pos:end="230:53">FFServerStream</name> <modifier pos:start="230:55" pos:end="230:55">*</modifier></type><name pos:start="230:56" pos:end="230:61">stream</name></decl></parameter>,
                                       <parameter pos:start="231:40" pos:end="231:61"><decl pos:start="231:40" pos:end="231:61"><type pos:start="231:40" pos:end="231:61"><specifier pos:start="231:40" pos:end="231:44">const</specifier> <name pos:start="231:46" pos:end="231:49">char</name> <modifier pos:start="231:51" pos:end="231:51">*</modifier></type><name pos:start="231:52" pos:end="231:61">session_id</name></decl></parameter>,
                                       <parameter pos:start="232:40" pos:end="232:75"><decl pos:start="232:40" pos:end="232:75"><type pos:start="232:40" pos:end="232:75"><name pos:start="232:40" pos:end="232:62"><name pos:start="232:40" pos:end="232:43">enum</name> <name pos:start="232:45" pos:end="232:62">RTSPLowerTransport</name></name></type> <name pos:start="232:64" pos:end="232:75">rtp_protocol</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="233:1" pos:end="235:50"><type pos:start="233:1" pos:end="233:10"><specifier pos:start="233:1" pos:end="233:6">static</specifier> <name pos:start="233:8" pos:end="233:10">int</name></type> <name pos:start="233:12" pos:end="233:28">rtp_new_av_stream</name><parameter_list pos:start="233:29" pos:end="235:49">(<parameter pos:start="233:30" pos:end="233:43"><decl pos:start="233:30" pos:end="233:43"><type pos:start="233:30" pos:end="233:43"><name pos:start="233:30" pos:end="233:40">HTTPContext</name> <modifier pos:start="233:42" pos:end="233:42">*</modifier></type><name pos:start="233:43" pos:end="233:43">c</name></decl></parameter>,
                             <parameter pos:start="234:30" pos:end="234:45"><decl pos:start="234:30" pos:end="234:45"><type pos:start="234:30" pos:end="234:45"><name pos:start="234:30" pos:end="234:32">int</name></type> <name pos:start="234:34" pos:end="234:45">stream_index</name></decl></parameter>, <parameter pos:start="234:48" pos:end="234:76"><decl pos:start="234:48" pos:end="234:76"><type pos:start="234:48" pos:end="234:76"><name pos:start="234:48" pos:end="234:65"><name pos:start="234:48" pos:end="234:53">struct</name> <name pos:start="234:55" pos:end="234:65">sockaddr_in</name></name> <modifier pos:start="234:67" pos:end="234:67">*</modifier></type><name pos:start="234:68" pos:end="234:76">dest_addr</name></decl></parameter>,
                             <parameter pos:start="235:30" pos:end="235:48"><decl pos:start="235:30" pos:end="235:48"><type pos:start="235:30" pos:end="235:48"><name pos:start="235:30" pos:end="235:40">HTTPContext</name> <modifier pos:start="235:42" pos:end="235:42">*</modifier></type><name pos:start="235:43" pos:end="235:48">rtsp_c</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block" pos:start="236:1" pos:end="236:11">/* utils */</comment>
<function_decl pos:start="237:1" pos:end="237:56"><type pos:start="237:1" pos:end="237:13"><specifier pos:start="237:1" pos:end="237:6">static</specifier> <name pos:start="237:8" pos:end="237:13">size_t</name></type> <name pos:start="237:15" pos:end="237:24">htmlencode</name> <parameter_list pos:start="237:26" pos:end="237:55">(<parameter pos:start="237:27" pos:end="237:41"><decl pos:start="237:27" pos:end="237:41"><type pos:start="237:27" pos:end="237:41"><specifier pos:start="237:27" pos:end="237:31">const</specifier> <name pos:start="237:33" pos:end="237:36">char</name> <modifier pos:start="237:38" pos:end="237:38">*</modifier></type><name pos:start="237:39" pos:end="237:41">src</name></decl></parameter>, <parameter pos:start="237:44" pos:end="237:54"><decl pos:start="237:44" pos:end="237:54"><type pos:start="237:44" pos:end="237:54"><name pos:start="237:44" pos:end="237:47">char</name> <modifier pos:start="237:49" pos:end="237:49">*</modifier><modifier pos:start="237:50" pos:end="237:50">*</modifier></type><name pos:start="237:51" pos:end="237:54">dest</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="238:1" pos:end="238:69"><type pos:start="238:1" pos:end="238:18"><specifier pos:start="238:1" pos:end="238:6">static</specifier> <specifier pos:start="238:8" pos:end="238:13">inline</specifier> <name pos:start="238:15" pos:end="238:18">void</name></type> <name pos:start="238:20" pos:end="238:33">cp_html_entity</name> <parameter_list pos:start="238:35" pos:end="238:68">(<parameter pos:start="238:36" pos:end="238:47"><decl pos:start="238:36" pos:end="238:47"><type pos:start="238:36" pos:end="238:47"><name pos:start="238:36" pos:end="238:39">char</name> <modifier pos:start="238:41" pos:end="238:41">*</modifier></type><name pos:start="238:42" pos:end="238:47">buffer</name></decl></parameter>, <parameter pos:start="238:50" pos:end="238:67"><decl pos:start="238:50" pos:end="238:67"><type pos:start="238:50" pos:end="238:67"><specifier pos:start="238:50" pos:end="238:54">const</specifier> <name pos:start="238:56" pos:end="238:59">char</name> <modifier pos:start="238:61" pos:end="238:61">*</modifier></type><name pos:start="238:62" pos:end="238:67">entity</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="239:1" pos:end="239:85"><type pos:start="239:1" pos:end="239:17"><specifier pos:start="239:1" pos:end="239:6">static</specifier> <specifier pos:start="239:8" pos:end="239:13">inline</specifier> <name pos:start="239:15" pos:end="239:17">int</name></type> <name pos:start="239:19" pos:end="239:35">check_codec_match</name><parameter_list pos:start="239:36" pos:end="239:84">(<parameter pos:start="239:37" pos:end="239:56"><decl pos:start="239:37" pos:end="239:56"><type pos:start="239:37" pos:end="239:56"><name pos:start="239:37" pos:end="239:51">LayeredAVStream</name> <modifier pos:start="239:53" pos:end="239:53">*</modifier></type><name pos:start="239:54" pos:end="239:56">ccf</name></decl></parameter>, <parameter pos:start="239:59" pos:end="239:71"><decl pos:start="239:59" pos:end="239:71"><type pos:start="239:59" pos:end="239:71"><name pos:start="239:59" pos:end="239:66">AVStream</name> <modifier pos:start="239:68" pos:end="239:68">*</modifier></type><name pos:start="239:69" pos:end="239:71">ccs</name></decl></parameter>, <parameter pos:start="239:74" pos:end="239:83"><decl pos:start="239:74" pos:end="239:83"><type pos:start="239:74" pos:end="239:83"><name pos:start="239:74" pos:end="239:76">int</name></type> <name pos:start="239:78" pos:end="239:83">stream</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt pos:start="241:1" pos:end="241:35"><decl pos:start="241:1" pos:end="241:34"><type pos:start="241:1" pos:end="241:19"><specifier pos:start="241:1" pos:end="241:6">static</specifier> <specifier pos:start="241:8" pos:end="241:12">const</specifier> <name pos:start="241:14" pos:end="241:17">char</name> <modifier pos:start="241:19" pos:end="241:19">*</modifier></type><name pos:start="241:20" pos:end="241:34">my_program_name</name></decl>;</decl_stmt>

<decl_stmt pos:start="243:1" pos:end="243:21"><decl pos:start="243:1" pos:end="243:20"><type pos:start="243:1" pos:end="243:10"><specifier pos:start="243:1" pos:end="243:6">static</specifier> <name pos:start="243:8" pos:end="243:10">int</name></type> <name pos:start="243:12" pos:end="243:20">no_launch</name></decl>;</decl_stmt>
<decl_stmt pos:start="244:1" pos:end="244:34"><decl pos:start="244:1" pos:end="244:33"><type pos:start="244:1" pos:end="244:10"><specifier pos:start="244:1" pos:end="244:6">static</specifier> <name pos:start="244:8" pos:end="244:10">int</name></type> <name pos:start="244:12" pos:end="244:33">need_to_start_children</name></decl>;</decl_stmt>

<comment type="block" pos:start="246:1" pos:end="246:53">/* maximum number of simultaneous HTTP connections */</comment>
<decl_stmt pos:start="247:1" pos:end="247:35"><decl pos:start="247:1" pos:end="247:34"><type pos:start="247:1" pos:end="247:19"><specifier pos:start="247:1" pos:end="247:6">static</specifier> <name pos:start="247:8" pos:end="247:15">unsigned</name> <name pos:start="247:17" pos:end="247:19">int</name></type> <name pos:start="247:21" pos:end="247:34">nb_connections</name></decl>;</decl_stmt>

<decl_stmt pos:start="249:1" pos:end="249:34"><decl pos:start="249:1" pos:end="249:33"><type pos:start="249:1" pos:end="249:15"><specifier pos:start="249:1" pos:end="249:6">static</specifier> <name pos:start="249:8" pos:end="249:15">uint64_t</name></type> <name pos:start="249:17" pos:end="249:33">current_bandwidth</name></decl>;</decl_stmt>

<comment type="block" pos:start="251:1" pos:end="251:62">/* Making this global saves on passing it around everywhere */</comment>
<decl_stmt pos:start="252:1" pos:end="252:24"><decl pos:start="252:1" pos:end="252:23"><type pos:start="252:1" pos:end="252:14"><specifier pos:start="252:1" pos:end="252:6">static</specifier> <name pos:start="252:8" pos:end="252:14">int64_t</name></type> <name pos:start="252:16" pos:end="252:23">cur_time</name></decl>;</decl_stmt>

<decl_stmt pos:start="254:1" pos:end="254:26"><decl pos:start="254:1" pos:end="254:25"><type pos:start="254:1" pos:end="254:12"><specifier pos:start="254:1" pos:end="254:6">static</specifier> <name pos:start="254:8" pos:end="254:12">AVLFG</name></type> <name pos:start="254:14" pos:end="254:25">random_state</name></decl>;</decl_stmt>

<decl_stmt pos:start="256:1" pos:end="256:28"><decl pos:start="256:1" pos:end="256:27"><type pos:start="256:1" pos:end="256:13"><specifier pos:start="256:1" pos:end="256:6">static</specifier> <name pos:start="256:8" pos:end="256:11">FILE</name> <modifier pos:start="256:13" pos:end="256:13">*</modifier></type><name pos:start="256:14" pos:end="256:20">logfile</name> <init pos:start="256:22" pos:end="256:27">= <expr pos:start="256:24" pos:end="256:27"><name pos:start="256:24" pos:end="256:27">NULL</name></expr></init></decl>;</decl_stmt>

<function pos:start="258:1" pos:end="271:1"><type pos:start="258:1" pos:end="258:11"><specifier pos:start="258:1" pos:end="258:6">static</specifier> <name pos:start="258:8" pos:end="258:11">void</name></type> <name pos:start="258:13" pos:end="258:26">unlayer_stream</name><parameter_list pos:start="258:27" pos:end="258:62">(<parameter pos:start="258:28" pos:end="258:39"><decl pos:start="258:28" pos:end="258:39"><type pos:start="258:28" pos:end="258:39"><name pos:start="258:28" pos:end="258:35">AVStream</name> <modifier pos:start="258:37" pos:end="258:37">*</modifier></type><name pos:start="258:38" pos:end="258:39">st</name></decl></parameter>, <parameter pos:start="258:42" pos:end="258:61"><decl pos:start="258:42" pos:end="258:61"><type pos:start="258:42" pos:end="258:61"><name pos:start="258:42" pos:end="258:56">LayeredAVStream</name> <modifier pos:start="258:58" pos:end="258:58">*</modifier></type><name pos:start="258:59" pos:end="258:61">lst</name></decl></parameter>)</parameter_list>
<block pos:start="259:1" pos:end="271:1">{<block_content pos:start="260:5" pos:end="270:43">
    <expr_stmt pos:start="260:5" pos:end="260:37"><expr pos:start="260:5" pos:end="260:36"><call pos:start="260:5" pos:end="260:36"><name pos:start="260:5" pos:end="260:24">avcodec_free_context</name><argument_list pos:start="260:25" pos:end="260:36">(<argument pos:start="260:26" pos:end="260:35"><expr pos:start="260:26" pos:end="260:35"><operator pos:start="260:26" pos:end="260:26">&amp;</operator><name pos:start="260:27" pos:end="260:35"><name pos:start="260:27" pos:end="260:28">st</name><operator pos:start="260:29" pos:end="260:30">-&gt;</operator><name pos:start="260:31" pos:end="260:35">codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="261:5" pos:end="263:0"><expr pos:start="261:5" pos:end="261:42"><call pos:start="261:5" pos:end="261:42"><name pos:start="261:5" pos:end="261:27">avcodec_parameters_free</name><argument_list pos:start="261:28" pos:end="261:42">(<argument pos:start="261:29" pos:end="261:41"><expr pos:start="261:29" pos:end="261:41"><operator pos:start="261:29" pos:end="261:29">&amp;</operator><name pos:start="261:30" pos:end="261:41"><name pos:start="261:30" pos:end="261:31">st</name><operator pos:start="261:32" pos:end="261:33">-&gt;</operator><name pos:start="261:34" pos:end="261:41">codecpar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define pos:start="262:1" pos:end="262:31">#<cpp:directive pos:start="262:2" pos:end="262:7">define</cpp:directive> <cpp:macro pos:start="262:9" pos:end="262:15"><name pos:start="262:9" pos:end="262:12">COPY</name><parameter_list pos:start="262:13" pos:end="262:15">(<parameter pos:start="262:14" pos:end="262:14"><type pos:start="262:14" pos:end="262:14"><name pos:start="262:14" pos:end="262:14">a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="262:17" pos:end="262:31">st-&gt;a = lst-&gt;a;</cpp:value></cpp:define>
    <macro pos:start="263:5" pos:end="263:15"><name pos:start="263:5" pos:end="263:8">COPY</name><argument_list pos:start="263:9" pos:end="263:15">(<argument pos:start="263:10" pos:end="263:14">index</argument>)</argument_list></macro>
    <macro pos:start="264:5" pos:end="264:12"><name pos:start="264:5" pos:end="264:8">COPY</name><argument_list pos:start="264:9" pos:end="264:12">(<argument pos:start="264:10" pos:end="264:11">id</argument>)</argument_list></macro>
    <macro pos:start="265:5" pos:end="265:15"><name pos:start="265:5" pos:end="265:8">COPY</name><argument_list pos:start="265:9" pos:end="265:15">(<argument pos:start="265:10" pos:end="265:14">codec</argument>)</argument_list></macro>
    <macro pos:start="266:5" pos:end="266:18"><name pos:start="266:5" pos:end="266:8">COPY</name><argument_list pos:start="266:9" pos:end="266:18">(<argument pos:start="266:10" pos:end="266:17">codecpar</argument>)</argument_list></macro>
    <macro pos:start="267:5" pos:end="267:19"><name pos:start="267:5" pos:end="267:8">COPY</name><argument_list pos:start="267:9" pos:end="267:19">(<argument pos:start="267:10" pos:end="267:18">time_base</argument>)</argument_list></macro>
    <macro pos:start="268:5" pos:end="268:23"><name pos:start="268:5" pos:end="268:8">COPY</name><argument_list pos:start="268:9" pos:end="268:23">(<argument pos:start="268:10" pos:end="268:22">pts_wrap_bits</argument>)</argument_list></macro>
    <macro pos:start="269:5" pos:end="269:29"><name pos:start="269:5" pos:end="269:8">COPY</name><argument_list pos:start="269:9" pos:end="269:29">(<argument pos:start="269:10" pos:end="269:28">sample_aspect_ratio</argument>)</argument_list></macro>
    <macro pos:start="270:5" pos:end="270:43"><name pos:start="270:5" pos:end="270:8">COPY</name><argument_list pos:start="270:9" pos:end="270:43">(<argument pos:start="270:10" pos:end="270:42">recommended_encoder_configuration</argument>)</argument_list></macro>
</block_content>}</block></function>

<function pos:start="273:1" pos:end="278:1"><type pos:start="273:1" pos:end="273:18"><specifier pos:start="273:1" pos:end="273:6">static</specifier> <specifier pos:start="273:8" pos:end="273:13">inline</specifier> <name pos:start="273:15" pos:end="273:18">void</name></type> <name pos:start="273:20" pos:end="273:33">cp_html_entity</name> <parameter_list pos:start="273:35" pos:end="273:68">(<parameter pos:start="273:36" pos:end="273:47"><decl pos:start="273:36" pos:end="273:47"><type pos:start="273:36" pos:end="273:47"><name pos:start="273:36" pos:end="273:39">char</name> <modifier pos:start="273:41" pos:end="273:41">*</modifier></type><name pos:start="273:42" pos:end="273:47">buffer</name></decl></parameter>, <parameter pos:start="273:50" pos:end="273:67"><decl pos:start="273:50" pos:end="273:67"><type pos:start="273:50" pos:end="273:67"><specifier pos:start="273:50" pos:end="273:54">const</specifier> <name pos:start="273:56" pos:end="273:59">char</name> <modifier pos:start="273:61" pos:end="273:61">*</modifier></type><name pos:start="273:62" pos:end="273:67">entity</name></decl></parameter>)</parameter_list> <block pos:start="273:70" pos:end="278:1">{<block_content pos:start="274:5" pos:end="277:30">
    <if_stmt pos:start="274:5" pos:end="275:15"><if pos:start="274:5" pos:end="275:15">if <condition pos:start="274:8" pos:end="274:27">(<expr pos:start="274:9" pos:end="274:26"><operator pos:start="274:9" pos:end="274:9">!</operator><name pos:start="274:10" pos:end="274:15">buffer</name> <operator pos:start="274:17" pos:end="274:18">||</operator> <operator pos:start="274:20" pos:end="274:20">!</operator><name pos:start="274:21" pos:end="274:26">entity</name></expr>)</condition><block type="pseudo" pos:start="275:9" pos:end="275:15"><block_content pos:start="275:9" pos:end="275:15">
        <return pos:start="275:9" pos:end="275:15">return;</return></block_content></block></if></if_stmt>
    <while pos:start="276:5" pos:end="277:30">while <condition pos:start="276:11" pos:end="276:19">(<expr pos:start="276:12" pos:end="276:18"><operator pos:start="276:12" pos:end="276:12">*</operator><name pos:start="276:13" pos:end="276:18">entity</name></expr>)</condition><block type="pseudo" pos:start="277:9" pos:end="277:30"><block_content pos:start="277:9" pos:end="277:30">
        <expr_stmt pos:start="277:9" pos:end="277:30"><expr pos:start="277:9" pos:end="277:29"><operator pos:start="277:9" pos:end="277:9">*</operator><name pos:start="277:10" pos:end="277:15">buffer</name><operator pos:start="277:16" pos:end="277:17">++</operator> <operator pos:start="277:19" pos:end="277:19">=</operator> <operator pos:start="277:21" pos:end="277:21">*</operator><name pos:start="277:22" pos:end="277:27">entity</name><operator pos:start="277:28" pos:end="277:29">++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="280:1" pos:end="286:3">/**
 * Substitutes known conflicting chars on a text string with
 * their corresponding HTML entities.
 *
 * Returns the number of bytes in the 'encoded' representation
 * not including the terminating NUL.
 */</comment>
<function pos:start="287:1" pos:end="346:1"><type pos:start="287:1" pos:end="287:13"><specifier pos:start="287:1" pos:end="287:6">static</specifier> <name pos:start="287:8" pos:end="287:13">size_t</name></type> <name pos:start="287:15" pos:end="287:24">htmlencode</name> <parameter_list pos:start="287:26" pos:end="287:55">(<parameter pos:start="287:27" pos:end="287:41"><decl pos:start="287:27" pos:end="287:41"><type pos:start="287:27" pos:end="287:41"><specifier pos:start="287:27" pos:end="287:31">const</specifier> <name pos:start="287:33" pos:end="287:36">char</name> <modifier pos:start="287:38" pos:end="287:38">*</modifier></type><name pos:start="287:39" pos:end="287:41">src</name></decl></parameter>, <parameter pos:start="287:44" pos:end="287:54"><decl pos:start="287:44" pos:end="287:54"><type pos:start="287:44" pos:end="287:54"><name pos:start="287:44" pos:end="287:47">char</name> <modifier pos:start="287:49" pos:end="287:49">*</modifier><modifier pos:start="287:50" pos:end="287:50">*</modifier></type><name pos:start="287:51" pos:end="287:54">dest</name></decl></parameter>)</parameter_list> <block pos:start="287:57" pos:end="346:1">{<block_content pos:start="288:5" pos:end="345:22">
    <decl_stmt pos:start="288:5" pos:end="288:30"><decl pos:start="288:5" pos:end="288:29"><type pos:start="288:5" pos:end="288:16"><specifier pos:start="288:5" pos:end="288:9">const</specifier> <name pos:start="288:11" pos:end="288:14">char</name> <modifier pos:start="288:16" pos:end="288:16">*</modifier></type><name pos:start="288:17" pos:end="288:19">amp</name> <init pos:start="288:21" pos:end="288:29">= <expr pos:start="288:23" pos:end="288:29"><literal type="string" pos:start="288:23" pos:end="288:29">"&amp;amp;"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="289:5" pos:end="289:29"><decl pos:start="289:5" pos:end="289:28"><type pos:start="289:5" pos:end="289:16"><specifier pos:start="289:5" pos:end="289:9">const</specifier> <name pos:start="289:11" pos:end="289:14">char</name> <modifier pos:start="289:16" pos:end="289:16">*</modifier></type><name pos:start="289:17" pos:end="289:18">lt</name>  <init pos:start="289:21" pos:end="289:28">= <expr pos:start="289:23" pos:end="289:28"><literal type="string" pos:start="289:23" pos:end="289:28">"&amp;lt;"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="290:5" pos:end="290:29"><decl pos:start="290:5" pos:end="290:28"><type pos:start="290:5" pos:end="290:16"><specifier pos:start="290:5" pos:end="290:9">const</specifier> <name pos:start="290:11" pos:end="290:14">char</name> <modifier pos:start="290:16" pos:end="290:16">*</modifier></type><name pos:start="290:17" pos:end="290:18">gt</name>  <init pos:start="290:21" pos:end="290:28">= <expr pos:start="290:23" pos:end="290:28"><literal type="string" pos:start="290:23" pos:end="290:28">"&amp;gt;"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="291:5" pos:end="291:22"><decl pos:start="291:5" pos:end="291:21"><type pos:start="291:5" pos:end="291:16"><specifier pos:start="291:5" pos:end="291:9">const</specifier> <name pos:start="291:11" pos:end="291:14">char</name> <modifier pos:start="291:16" pos:end="291:16">*</modifier></type><name pos:start="291:17" pos:end="291:21">start</name></decl>;</decl_stmt>
    <decl_stmt pos:start="292:5" pos:end="292:14"><decl pos:start="292:5" pos:end="292:13"><type pos:start="292:5" pos:end="292:10"><name pos:start="292:5" pos:end="292:8">char</name> <modifier pos:start="292:10" pos:end="292:10">*</modifier></type><name pos:start="292:11" pos:end="292:13">tmp</name></decl>;</decl_stmt>
    <decl_stmt pos:start="293:5" pos:end="293:26"><decl pos:start="293:5" pos:end="293:25"><type pos:start="293:5" pos:end="293:10"><name pos:start="293:5" pos:end="293:10">size_t</name></type> <name pos:start="293:12" pos:end="293:21">final_size</name> <init pos:start="293:23" pos:end="293:25">= <expr pos:start="293:25" pos:end="293:25"><literal type="number" pos:start="293:25" pos:end="293:25">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="295:5" pos:end="296:17"><if pos:start="295:5" pos:end="296:17">if <condition pos:start="295:8" pos:end="295:13">(<expr pos:start="295:9" pos:end="295:12"><operator pos:start="295:9" pos:end="295:9">!</operator><name pos:start="295:10" pos:end="295:12">src</name></expr>)</condition><block type="pseudo" pos:start="296:9" pos:end="296:17"><block_content pos:start="296:9" pos:end="296:17">
        <return pos:start="296:9" pos:end="296:17">return <expr pos:start="296:16" pos:end="296:16"><literal type="number" pos:start="296:16" pos:end="296:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="298:5" pos:end="298:16"><expr pos:start="298:5" pos:end="298:15"><name pos:start="298:5" pos:end="298:9">start</name> <operator pos:start="298:11" pos:end="298:11">=</operator> <name pos:start="298:13" pos:end="298:15">src</name></expr>;</expr_stmt>

    <comment type="block" pos:start="300:5" pos:end="300:34">/* Compute needed dest size */</comment>
    <while pos:start="301:5" pos:end="314:5">while <condition pos:start="301:11" pos:end="301:24">(<expr pos:start="301:12" pos:end="301:23"><operator pos:start="301:12" pos:end="301:12">*</operator><name pos:start="301:13" pos:end="301:15">src</name> <operator pos:start="301:17" pos:end="301:18">!=</operator> <literal type="char" pos:start="301:20" pos:end="301:23">'\0'</literal></expr>)</condition> <block pos:start="301:26" pos:end="314:5">{<block_content pos:start="302:9" pos:end="313:14">
        <switch pos:start="302:9" pos:end="312:9">switch<condition pos:start="302:15" pos:end="302:20">(<expr pos:start="302:16" pos:end="302:19"><operator pos:start="302:16" pos:end="302:16">*</operator><name pos:start="302:17" pos:end="302:19">src</name></expr>)</condition> <block pos:start="302:22" pos:end="312:9">{<block_content pos:start="303:13" pos:end="311:29">
            <case pos:start="303:13" pos:end="303:20">case <expr pos:start="303:18" pos:end="303:19"><literal type="number" pos:start="303:18" pos:end="303:19">38</literal></expr>:</case> <comment type="block" pos:start="303:22" pos:end="303:28">/* &amp; */</comment>
                <expr_stmt pos:start="304:17" pos:end="304:32"><expr pos:start="304:17" pos:end="304:31"><name pos:start="304:17" pos:end="304:26">final_size</name> <operator pos:start="304:28" pos:end="304:29">+=</operator> <literal type="number" pos:start="304:31" pos:end="304:31">5</literal></expr>;</expr_stmt>
                <break pos:start="305:17" pos:end="305:22">break;</break>
            <case pos:start="306:13" pos:end="306:20">case <expr pos:start="306:18" pos:end="306:19"><literal type="number" pos:start="306:18" pos:end="306:19">60</literal></expr>:</case> <comment type="block" pos:start="306:22" pos:end="306:28">/* &lt; */</comment>
            <case pos:start="307:13" pos:end="307:20">case <expr pos:start="307:18" pos:end="307:19"><literal type="number" pos:start="307:18" pos:end="307:19">62</literal></expr>:</case> <comment type="block" pos:start="307:22" pos:end="307:28">/* &gt; */</comment>
                <expr_stmt pos:start="308:17" pos:end="308:32"><expr pos:start="308:17" pos:end="308:31"><name pos:start="308:17" pos:end="308:26">final_size</name> <operator pos:start="308:28" pos:end="308:29">+=</operator> <literal type="number" pos:start="308:31" pos:end="308:31">4</literal></expr>;</expr_stmt>
                <break pos:start="309:17" pos:end="309:22">break;</break>
            <default pos:start="310:13" pos:end="310:20">default:</default>
                <expr_stmt pos:start="311:17" pos:end="311:29"><expr pos:start="311:17" pos:end="311:28"><name pos:start="311:17" pos:end="311:26">final_size</name><operator pos:start="311:27" pos:end="311:28">++</operator></expr>;</expr_stmt>
        </block_content>}</block></switch>
        <expr_stmt pos:start="313:9" pos:end="313:14"><expr pos:start="313:9" pos:end="313:13"><name pos:start="313:9" pos:end="313:11">src</name><operator pos:start="313:12" pos:end="313:13">++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt pos:start="316:5" pos:end="316:16"><expr pos:start="316:5" pos:end="316:15"><name pos:start="316:5" pos:end="316:7">src</name> <operator pos:start="316:9" pos:end="316:9">=</operator> <name pos:start="316:11" pos:end="316:15">start</name></expr>;</expr_stmt>
    <expr_stmt pos:start="317:5" pos:end="317:39"><expr pos:start="317:5" pos:end="317:38"><operator pos:start="317:5" pos:end="317:5">*</operator><name pos:start="317:6" pos:end="317:9">dest</name> <operator pos:start="317:11" pos:end="317:11">=</operator> <call pos:start="317:13" pos:end="317:38"><name pos:start="317:13" pos:end="317:22">av_mallocz</name><argument_list pos:start="317:23" pos:end="317:38">(<argument pos:start="317:24" pos:end="317:37"><expr pos:start="317:24" pos:end="317:37"><name pos:start="317:24" pos:end="317:33">final_size</name> <operator pos:start="317:35" pos:end="317:35">+</operator> <literal type="number" pos:start="317:37" pos:end="317:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="318:5" pos:end="319:17"><if pos:start="318:5" pos:end="319:17">if <condition pos:start="318:8" pos:end="318:15">(<expr pos:start="318:9" pos:end="318:14"><operator pos:start="318:9" pos:end="318:9">!</operator><operator pos:start="318:10" pos:end="318:10">*</operator><name pos:start="318:11" pos:end="318:14">dest</name></expr>)</condition><block type="pseudo" pos:start="319:9" pos:end="319:17"><block_content pos:start="319:9" pos:end="319:17">
        <return pos:start="319:9" pos:end="319:17">return <expr pos:start="319:16" pos:end="319:16"><literal type="number" pos:start="319:16" pos:end="319:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block" pos:start="321:5" pos:end="321:20">/* Build dest */</comment>
    <expr_stmt pos:start="322:5" pos:end="322:16"><expr pos:start="322:5" pos:end="322:15"><name pos:start="322:5" pos:end="322:7">tmp</name> <operator pos:start="322:9" pos:end="322:9">=</operator> <operator pos:start="322:11" pos:end="322:11">*</operator><name pos:start="322:12" pos:end="322:15">dest</name></expr>;</expr_stmt>
    <while pos:start="323:5" pos:end="342:5">while <condition pos:start="323:11" pos:end="323:24">(<expr pos:start="323:12" pos:end="323:23"><operator pos:start="323:12" pos:end="323:12">*</operator><name pos:start="323:13" pos:end="323:15">src</name> <operator pos:start="323:17" pos:end="323:18">!=</operator> <literal type="char" pos:start="323:20" pos:end="323:23">'\0'</literal></expr>)</condition> <block pos:start="323:26" pos:end="342:5">{<block_content pos:start="324:9" pos:end="341:14">
        <switch pos:start="324:9" pos:end="340:9">switch<condition pos:start="324:15" pos:end="324:20">(<expr pos:start="324:16" pos:end="324:19"><operator pos:start="324:16" pos:end="324:16">*</operator><name pos:start="324:17" pos:end="324:19">src</name></expr>)</condition> <block pos:start="324:22" pos:end="340:9">{<block_content pos:start="325:13" pos:end="339:25">
            <case pos:start="325:13" pos:end="325:20">case <expr pos:start="325:18" pos:end="325:19"><literal type="number" pos:start="325:18" pos:end="325:19">38</literal></expr>:</case> <comment type="block" pos:start="325:22" pos:end="325:28">/* &amp; */</comment>
                <expr_stmt pos:start="326:17" pos:end="326:42"><expr pos:start="326:17" pos:end="326:41"><call pos:start="326:17" pos:end="326:41"><name pos:start="326:17" pos:end="326:30">cp_html_entity</name> <argument_list pos:start="326:32" pos:end="326:41">(<argument pos:start="326:33" pos:end="326:35"><expr pos:start="326:33" pos:end="326:35"><name pos:start="326:33" pos:end="326:35">tmp</name></expr></argument>, <argument pos:start="326:38" pos:end="326:40"><expr pos:start="326:38" pos:end="326:40"><name pos:start="326:38" pos:end="326:40">amp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="327:17" pos:end="327:25"><expr pos:start="327:17" pos:end="327:24"><name pos:start="327:17" pos:end="327:19">tmp</name> <operator pos:start="327:21" pos:end="327:22">+=</operator> <literal type="number" pos:start="327:24" pos:end="327:24">5</literal></expr>;</expr_stmt>
                <break pos:start="328:17" pos:end="328:22">break;</break>
            <case pos:start="329:13" pos:end="329:20">case <expr pos:start="329:18" pos:end="329:19"><literal type="number" pos:start="329:18" pos:end="329:19">60</literal></expr>:</case> <comment type="block" pos:start="329:22" pos:end="329:28">/* &lt; */</comment>
                <expr_stmt pos:start="330:17" pos:end="330:41"><expr pos:start="330:17" pos:end="330:40"><call pos:start="330:17" pos:end="330:40"><name pos:start="330:17" pos:end="330:30">cp_html_entity</name> <argument_list pos:start="330:32" pos:end="330:40">(<argument pos:start="330:33" pos:end="330:35"><expr pos:start="330:33" pos:end="330:35"><name pos:start="330:33" pos:end="330:35">tmp</name></expr></argument>, <argument pos:start="330:38" pos:end="330:39"><expr pos:start="330:38" pos:end="330:39"><name pos:start="330:38" pos:end="330:39">lt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="331:17" pos:end="331:25"><expr pos:start="331:17" pos:end="331:24"><name pos:start="331:17" pos:end="331:19">tmp</name> <operator pos:start="331:21" pos:end="331:22">+=</operator> <literal type="number" pos:start="331:24" pos:end="331:24">4</literal></expr>;</expr_stmt>
                <break pos:start="332:17" pos:end="332:22">break;</break>
            <case pos:start="333:13" pos:end="333:20">case <expr pos:start="333:18" pos:end="333:19"><literal type="number" pos:start="333:18" pos:end="333:19">62</literal></expr>:</case> <comment type="block" pos:start="333:22" pos:end="333:28">/* &gt; */</comment>
                <expr_stmt pos:start="334:17" pos:end="334:41"><expr pos:start="334:17" pos:end="334:40"><call pos:start="334:17" pos:end="334:40"><name pos:start="334:17" pos:end="334:30">cp_html_entity</name> <argument_list pos:start="334:32" pos:end="334:40">(<argument pos:start="334:33" pos:end="334:35"><expr pos:start="334:33" pos:end="334:35"><name pos:start="334:33" pos:end="334:35">tmp</name></expr></argument>, <argument pos:start="334:38" pos:end="334:39"><expr pos:start="334:38" pos:end="334:39"><name pos:start="334:38" pos:end="334:39">gt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="335:17" pos:end="335:25"><expr pos:start="335:17" pos:end="335:24"><name pos:start="335:17" pos:end="335:19">tmp</name> <operator pos:start="335:21" pos:end="335:22">+=</operator> <literal type="number" pos:start="335:24" pos:end="335:24">4</literal></expr>;</expr_stmt>
                <break pos:start="336:17" pos:end="336:22">break;</break>
            <default pos:start="337:13" pos:end="337:20">default:</default>
                <expr_stmt pos:start="338:17" pos:end="338:28"><expr pos:start="338:17" pos:end="338:27"><operator pos:start="338:17" pos:end="338:17">*</operator><name pos:start="338:18" pos:end="338:20">tmp</name> <operator pos:start="338:22" pos:end="338:22">=</operator> <operator pos:start="338:24" pos:end="338:24">*</operator><name pos:start="338:25" pos:end="338:27">src</name></expr>;</expr_stmt>
                <expr_stmt pos:start="339:17" pos:end="339:25"><expr pos:start="339:17" pos:end="339:24"><name pos:start="339:17" pos:end="339:19">tmp</name> <operator pos:start="339:21" pos:end="339:22">+=</operator> <literal type="number" pos:start="339:24" pos:end="339:24">1</literal></expr>;</expr_stmt>
        </block_content>}</block></switch>
        <expr_stmt pos:start="341:9" pos:end="341:14"><expr pos:start="341:9" pos:end="341:13"><name pos:start="341:9" pos:end="341:11">src</name><operator pos:start="341:12" pos:end="341:13">++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt pos:start="343:5" pos:end="343:16"><expr pos:start="343:5" pos:end="343:15"><operator pos:start="343:5" pos:end="343:5">*</operator><name pos:start="343:6" pos:end="343:8">tmp</name> <operator pos:start="343:10" pos:end="343:10">=</operator> <literal type="char" pos:start="343:12" pos:end="343:15">'\0'</literal></expr>;</expr_stmt>

    <return pos:start="345:5" pos:end="345:22">return <expr pos:start="345:12" pos:end="345:21"><name pos:start="345:12" pos:end="345:21">final_size</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="348:1" pos:end="357:1"><type pos:start="348:1" pos:end="348:14"><specifier pos:start="348:1" pos:end="348:6">static</specifier> <name pos:start="348:8" pos:end="348:14">int64_t</name></type> <name pos:start="348:16" pos:end="348:35">ffm_read_write_index</name><parameter_list pos:start="348:36" pos:end="348:43">(<parameter pos:start="348:37" pos:end="348:42"><decl pos:start="348:37" pos:end="348:42"><type pos:start="348:37" pos:end="348:39"><name pos:start="348:37" pos:end="348:39">int</name></type> <name pos:start="348:41" pos:end="348:42">fd</name></decl></parameter>)</parameter_list>
<block pos:start="349:1" pos:end="357:1">{<block_content pos:start="350:5" pos:end="356:24">
    <decl_stmt pos:start="350:5" pos:end="350:19"><decl pos:start="350:5" pos:end="350:18"><type pos:start="350:5" pos:end="350:11"><name pos:start="350:5" pos:end="350:11">uint8_t</name></type> <name pos:start="350:13" pos:end="350:18"><name pos:start="350:13" pos:end="350:15">buf</name><index pos:start="350:16" pos:end="350:18">[<expr pos:start="350:17" pos:end="350:17"><literal type="number" pos:start="350:17" pos:end="350:17">8</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt pos:start="352:5" pos:end="353:28"><if pos:start="352:5" pos:end="353:28">if <condition pos:start="352:8" pos:end="352:35">(<expr pos:start="352:9" pos:end="352:34"><call pos:start="352:9" pos:end="352:30"><name pos:start="352:9" pos:end="352:13">lseek</name><argument_list pos:start="352:14" pos:end="352:30">(<argument pos:start="352:15" pos:end="352:16"><expr pos:start="352:15" pos:end="352:16"><name pos:start="352:15" pos:end="352:16">fd</name></expr></argument>, <argument pos:start="352:19" pos:end="352:19"><expr pos:start="352:19" pos:end="352:19"><literal type="number" pos:start="352:19" pos:end="352:19">8</literal></expr></argument>, <argument pos:start="352:22" pos:end="352:29"><expr pos:start="352:22" pos:end="352:29"><name pos:start="352:22" pos:end="352:29">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="352:32" pos:end="352:32">&lt;</operator> <literal type="number" pos:start="352:34" pos:end="352:34">0</literal></expr>)</condition><block type="pseudo" pos:start="353:9" pos:end="353:28"><block_content pos:start="353:9" pos:end="353:28">
        <return pos:start="353:9" pos:end="353:28">return <expr pos:start="353:16" pos:end="353:27"><call pos:start="353:16" pos:end="353:27"><name pos:start="353:16" pos:end="353:22">AVERROR</name><argument_list pos:start="353:23" pos:end="353:27">(<argument pos:start="353:24" pos:end="353:26"><expr pos:start="353:24" pos:end="353:26"><name pos:start="353:24" pos:end="353:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt pos:start="354:5" pos:end="355:28"><if pos:start="354:5" pos:end="355:28">if <condition pos:start="354:8" pos:end="354:30">(<expr pos:start="354:9" pos:end="354:29"><call pos:start="354:9" pos:end="354:24"><name pos:start="354:9" pos:end="354:12">read</name><argument_list pos:start="354:13" pos:end="354:24">(<argument pos:start="354:14" pos:end="354:15"><expr pos:start="354:14" pos:end="354:15"><name pos:start="354:14" pos:end="354:15">fd</name></expr></argument>, <argument pos:start="354:18" pos:end="354:20"><expr pos:start="354:18" pos:end="354:20"><name pos:start="354:18" pos:end="354:20">buf</name></expr></argument>, <argument pos:start="354:23" pos:end="354:23"><expr pos:start="354:23" pos:end="354:23"><literal type="number" pos:start="354:23" pos:end="354:23">8</literal></expr></argument>)</argument_list></call> <operator pos:start="354:26" pos:end="354:27">!=</operator> <literal type="number" pos:start="354:29" pos:end="354:29">8</literal></expr>)</condition><block type="pseudo" pos:start="355:9" pos:end="355:28"><block_content pos:start="355:9" pos:end="355:28">
        <return pos:start="355:9" pos:end="355:28">return <expr pos:start="355:16" pos:end="355:27"><call pos:start="355:16" pos:end="355:27"><name pos:start="355:16" pos:end="355:22">AVERROR</name><argument_list pos:start="355:23" pos:end="355:27">(<argument pos:start="355:24" pos:end="355:26"><expr pos:start="355:24" pos:end="355:26"><name pos:start="355:24" pos:end="355:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return pos:start="356:5" pos:end="356:24">return <expr pos:start="356:12" pos:end="356:23"><call pos:start="356:12" pos:end="356:23"><name pos:start="356:12" pos:end="356:18">AV_RB64</name><argument_list pos:start="356:19" pos:end="356:23">(<argument pos:start="356:20" pos:end="356:22"><expr pos:start="356:20" pos:end="356:22"><name pos:start="356:20" pos:end="356:22">buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function pos:start="359:1" pos:end="375:1"><type pos:start="359:1" pos:end="359:10"><specifier pos:start="359:1" pos:end="359:6">static</specifier> <name pos:start="359:8" pos:end="359:10">int</name></type> <name pos:start="359:12" pos:end="359:32">ffm_write_write_index</name><parameter_list pos:start="359:33" pos:end="359:53">(<parameter pos:start="359:34" pos:end="359:39"><decl pos:start="359:34" pos:end="359:39"><type pos:start="359:34" pos:end="359:39"><name pos:start="359:34" pos:end="359:36">int</name></type> <name pos:start="359:38" pos:end="359:39">fd</name></decl></parameter>, <parameter pos:start="359:42" pos:end="359:52"><decl pos:start="359:42" pos:end="359:52"><type pos:start="359:42" pos:end="359:52"><name pos:start="359:42" pos:end="359:48">int64_t</name></type> <name pos:start="359:50" pos:end="359:52">pos</name></decl></parameter>)</parameter_list>
<block pos:start="360:1" pos:end="375:1">{<block_content pos:start="361:5" pos:end="374:24">
    <decl_stmt pos:start="361:5" pos:end="361:19"><decl pos:start="361:5" pos:end="361:18"><type pos:start="361:5" pos:end="361:11"><name pos:start="361:5" pos:end="361:11">uint8_t</name></type> <name pos:start="361:13" pos:end="361:18"><name pos:start="361:13" pos:end="361:15">buf</name><index pos:start="361:16" pos:end="361:18">[<expr pos:start="361:17" pos:end="361:17"><literal type="number" pos:start="361:17" pos:end="361:17">8</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="362:5" pos:end="362:10"><decl pos:start="362:5" pos:end="362:9"><type pos:start="362:5" pos:end="362:7"><name pos:start="362:5" pos:end="362:7">int</name></type> <name pos:start="362:9" pos:end="362:9">i</name></decl>;</decl_stmt>

    <for pos:start="364:5" pos:end="365:46">for<control pos:start="364:8" pos:end="364:20">(<init pos:start="364:9" pos:end="364:12"><expr pos:start="364:9" pos:end="364:11"><name pos:start="364:9" pos:end="364:9">i</name><operator pos:start="364:10" pos:end="364:10">=</operator><literal type="number" pos:start="364:11" pos:end="364:11">0</literal></expr>;</init><condition pos:start="364:13" pos:end="364:16"><expr pos:start="364:13" pos:end="364:15"><name pos:start="364:13" pos:end="364:13">i</name><operator pos:start="364:14" pos:end="364:14">&lt;</operator><literal type="number" pos:start="364:15" pos:end="364:15">8</literal></expr>;</condition><incr pos:start="364:17" pos:end="364:19"><expr pos:start="364:17" pos:end="364:19"><name pos:start="364:17" pos:end="364:17">i</name><operator pos:start="364:18" pos:end="364:19">++</operator></expr></incr>)</control><block type="pseudo" pos:start="365:9" pos:end="365:46"><block_content pos:start="365:9" pos:end="365:46">
        <expr_stmt pos:start="365:9" pos:end="365:46"><expr pos:start="365:9" pos:end="365:45"><name pos:start="365:9" pos:end="365:14"><name pos:start="365:9" pos:end="365:11">buf</name><index pos:start="365:12" pos:end="365:14">[<expr pos:start="365:13" pos:end="365:13"><name pos:start="365:13" pos:end="365:13">i</name></expr>]</index></name> <operator pos:start="365:16" pos:end="365:16">=</operator> <operator pos:start="365:18" pos:end="365:18">(</operator><name pos:start="365:19" pos:end="365:21">pos</name> <operator pos:start="365:23" pos:end="365:24">&gt;&gt;</operator> <operator pos:start="365:26" pos:end="365:26">(</operator><literal type="number" pos:start="365:27" pos:end="365:30">56</literal> <operator pos:start="365:30" pos:end="365:30">-</operator> <name pos:start="365:32" pos:end="365:32">i</name> <operator pos:start="365:34" pos:end="365:34">*</operator> <literal type="number" pos:start="365:36" pos:end="365:36">8</literal><operator pos:start="365:37" pos:end="365:37">)</operator><operator pos:start="365:38" pos:end="365:38">)</operator> <operator pos:start="365:40" pos:end="365:40">&amp;</operator> <literal type="number" pos:start="365:42" pos:end="365:45">0xff</literal></expr>;</expr_stmt></block_content></block></for>
    <if_stmt pos:start="366:5" pos:end="367:22"><if pos:start="366:5" pos:end="367:22">if <condition pos:start="366:8" pos:end="366:35">(<expr pos:start="366:9" pos:end="366:34"><call pos:start="366:9" pos:end="366:30"><name pos:start="366:9" pos:end="366:13">lseek</name><argument_list pos:start="366:14" pos:end="366:30">(<argument pos:start="366:15" pos:end="366:16"><expr pos:start="366:15" pos:end="366:16"><name pos:start="366:15" pos:end="366:16">fd</name></expr></argument>, <argument pos:start="366:19" pos:end="366:19"><expr pos:start="366:19" pos:end="366:19"><literal type="number" pos:start="366:19" pos:end="366:19">8</literal></expr></argument>, <argument pos:start="366:22" pos:end="366:29"><expr pos:start="366:22" pos:end="366:29"><name pos:start="366:22" pos:end="366:29">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="366:32" pos:end="366:32">&lt;</operator> <literal type="number" pos:start="366:34" pos:end="366:34">0</literal></expr>)</condition><block type="pseudo" pos:start="367:9" pos:end="367:22"><block_content pos:start="367:9" pos:end="367:22">
        <goto pos:start="367:9" pos:end="367:22">goto <name pos:start="367:14" pos:end="367:21">bail_eio</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt pos:start="368:5" pos:end="369:22"><if pos:start="368:5" pos:end="369:22">if <condition pos:start="368:8" pos:end="368:31">(<expr pos:start="368:9" pos:end="368:30"><call pos:start="368:9" pos:end="368:25"><name pos:start="368:9" pos:end="368:13">write</name><argument_list pos:start="368:14" pos:end="368:25">(<argument pos:start="368:15" pos:end="368:16"><expr pos:start="368:15" pos:end="368:16"><name pos:start="368:15" pos:end="368:16">fd</name></expr></argument>, <argument pos:start="368:19" pos:end="368:21"><expr pos:start="368:19" pos:end="368:21"><name pos:start="368:19" pos:end="368:21">buf</name></expr></argument>, <argument pos:start="368:24" pos:end="368:24"><expr pos:start="368:24" pos:end="368:24"><literal type="number" pos:start="368:24" pos:end="368:24">8</literal></expr></argument>)</argument_list></call> <operator pos:start="368:27" pos:end="368:28">!=</operator> <literal type="number" pos:start="368:30" pos:end="368:30">8</literal></expr>)</condition><block type="pseudo" pos:start="369:9" pos:end="369:22"><block_content pos:start="369:9" pos:end="369:22">
        <goto pos:start="369:9" pos:end="369:22">goto <name pos:start="369:14" pos:end="369:21">bail_eio</name>;</goto></block_content></block></if></if_stmt>

    <return pos:start="371:5" pos:end="371:13">return <expr pos:start="371:12" pos:end="371:12"><literal type="number" pos:start="371:12" pos:end="371:12">8</literal></expr>;</return>

<label pos:start="373:1" pos:end="373:9"><name pos:start="373:1" pos:end="373:8">bail_eio</name>:</label>
    <return pos:start="374:5" pos:end="374:24">return <expr pos:start="374:12" pos:end="374:23"><call pos:start="374:12" pos:end="374:23"><name pos:start="374:12" pos:end="374:18">AVERROR</name><argument_list pos:start="374:19" pos:end="374:23">(<argument pos:start="374:20" pos:end="374:22"><expr pos:start="374:20" pos:end="374:22"><name pos:start="374:20" pos:end="374:22">EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function pos:start="377:1" pos:end="383:1"><type pos:start="377:1" pos:end="377:11"><specifier pos:start="377:1" pos:end="377:6">static</specifier> <name pos:start="377:8" pos:end="377:11">void</name></type> <name pos:start="377:13" pos:end="377:31">ffm_set_write_index</name><parameter_list pos:start="377:32" pos:end="378:50">(<parameter pos:start="377:33" pos:end="377:50"><decl pos:start="377:33" pos:end="377:50"><type pos:start="377:33" pos:end="377:50"><name pos:start="377:33" pos:end="377:47">AVFormatContext</name> <modifier pos:start="377:49" pos:end="377:49">*</modifier></type><name pos:start="377:50" pos:end="377:50">s</name></decl></parameter>, <parameter pos:start="377:53" pos:end="377:63"><decl pos:start="377:53" pos:end="377:63"><type pos:start="377:53" pos:end="377:63"><name pos:start="377:53" pos:end="377:59">int64_t</name></type> <name pos:start="377:61" pos:end="377:63">pos</name></decl></parameter>,
                                <parameter pos:start="378:33" pos:end="378:49"><decl pos:start="378:33" pos:end="378:49"><type pos:start="378:33" pos:end="378:49"><name pos:start="378:33" pos:end="378:39">int64_t</name></type> <name pos:start="378:41" pos:end="378:49">file_size</name></decl></parameter>)</parameter_list>
<block pos:start="379:1" pos:end="383:1">{<block_content pos:start="380:5" pos:end="382:74">
    <expr_stmt pos:start="380:5" pos:end="380:68"><expr pos:start="380:5" pos:end="380:67"><call pos:start="380:5" pos:end="380:67"><name pos:start="380:5" pos:end="380:18">av_opt_set_int</name><argument_list pos:start="380:19" pos:end="380:67">(<argument pos:start="380:20" pos:end="380:20"><expr pos:start="380:20" pos:end="380:20"><name pos:start="380:20" pos:end="380:20">s</name></expr></argument>, <argument pos:start="380:23" pos:end="380:39"><expr pos:start="380:23" pos:end="380:39"><literal type="string" pos:start="380:23" pos:end="380:39">"server_attached"</literal></expr></argument>, <argument pos:start="380:42" pos:end="380:42"><expr pos:start="380:42" pos:end="380:42"><literal type="number" pos:start="380:42" pos:end="380:42">1</literal></expr></argument>, <argument pos:start="380:45" pos:end="380:66"><expr pos:start="380:45" pos:end="380:66"><name pos:start="380:45" pos:end="380:66">AV_OPT_SEARCH_CHILDREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="381:5" pos:end="381:70"><expr pos:start="381:5" pos:end="381:69"><call pos:start="381:5" pos:end="381:69"><name pos:start="381:5" pos:end="381:18">av_opt_set_int</name><argument_list pos:start="381:19" pos:end="381:69">(<argument pos:start="381:20" pos:end="381:20"><expr pos:start="381:20" pos:end="381:20"><name pos:start="381:20" pos:end="381:20">s</name></expr></argument>, <argument pos:start="381:23" pos:end="381:39"><expr pos:start="381:23" pos:end="381:39"><literal type="string" pos:start="381:23" pos:end="381:39">"ffm_write_index"</literal></expr></argument>, <argument pos:start="381:42" pos:end="381:44"><expr pos:start="381:42" pos:end="381:44"><name pos:start="381:42" pos:end="381:44">pos</name></expr></argument>, <argument pos:start="381:47" pos:end="381:68"><expr pos:start="381:47" pos:end="381:68"><name pos:start="381:47" pos:end="381:68">AV_OPT_SEARCH_CHILDREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="382:5" pos:end="382:74"><expr pos:start="382:5" pos:end="382:73"><call pos:start="382:5" pos:end="382:73"><name pos:start="382:5" pos:end="382:18">av_opt_set_int</name><argument_list pos:start="382:19" pos:end="382:73">(<argument pos:start="382:20" pos:end="382:20"><expr pos:start="382:20" pos:end="382:20"><name pos:start="382:20" pos:end="382:20">s</name></expr></argument>, <argument pos:start="382:23" pos:end="382:37"><expr pos:start="382:23" pos:end="382:37"><literal type="string" pos:start="382:23" pos:end="382:37">"ffm_file_size"</literal></expr></argument>, <argument pos:start="382:40" pos:end="382:48"><expr pos:start="382:40" pos:end="382:48"><name pos:start="382:40" pos:end="382:48">file_size</name></expr></argument>, <argument pos:start="382:51" pos:end="382:72"><expr pos:start="382:51" pos:end="382:72"><name pos:start="382:51" pos:end="382:72">AV_OPT_SEARCH_CHILDREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="385:1" pos:end="401:1"><type pos:start="385:1" pos:end="385:13"><specifier pos:start="385:1" pos:end="385:6">static</specifier> <name pos:start="385:8" pos:end="385:11">char</name> <modifier pos:start="385:13" pos:end="385:13">*</modifier></type><name pos:start="385:14" pos:end="385:19">ctime1</name><parameter_list pos:start="385:20" pos:end="385:48">(<parameter pos:start="385:21" pos:end="385:30"><decl pos:start="385:21" pos:end="385:30"><type pos:start="385:21" pos:end="385:30"><name pos:start="385:21" pos:end="385:24">char</name> <modifier pos:start="385:26" pos:end="385:26">*</modifier></type><name pos:start="385:27" pos:end="385:30">buf2</name></decl></parameter>, <parameter pos:start="385:33" pos:end="385:47"><decl pos:start="385:33" pos:end="385:47"><type pos:start="385:33" pos:end="385:47"><name pos:start="385:33" pos:end="385:38">size_t</name></type> <name pos:start="385:40" pos:end="385:47">buf_size</name></decl></parameter>)</parameter_list>
<block pos:start="386:1" pos:end="401:1">{<block_content pos:start="387:5" pos:end="400:16">
    <decl_stmt pos:start="387:5" pos:end="387:14"><decl pos:start="387:5" pos:end="387:13"><type pos:start="387:5" pos:end="387:10"><name pos:start="387:5" pos:end="387:10">time_t</name></type> <name pos:start="387:12" pos:end="387:13">ti</name></decl>;</decl_stmt>
    <decl_stmt pos:start="388:5" pos:end="388:12"><decl pos:start="388:5" pos:end="388:11"><type pos:start="388:5" pos:end="388:10"><name pos:start="388:5" pos:end="388:8">char</name> <modifier pos:start="388:10" pos:end="388:10">*</modifier></type><name pos:start="388:11" pos:end="388:11">p</name></decl>;</decl_stmt>

    <expr_stmt pos:start="390:5" pos:end="390:20"><expr pos:start="390:5" pos:end="390:19"><name pos:start="390:5" pos:end="390:6">ti</name> <operator pos:start="390:8" pos:end="390:8">=</operator> <call pos:start="390:10" pos:end="390:19"><name pos:start="390:10" pos:end="390:13">time</name><argument_list pos:start="390:14" pos:end="390:19">(<argument pos:start="390:15" pos:end="390:18"><expr pos:start="390:15" pos:end="390:18"><name pos:start="390:15" pos:end="390:18">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="391:5" pos:end="391:19"><expr pos:start="391:5" pos:end="391:18"><name pos:start="391:5" pos:end="391:5">p</name> <operator pos:start="391:7" pos:end="391:7">=</operator> <call pos:start="391:9" pos:end="391:18"><name pos:start="391:9" pos:end="391:13">ctime</name><argument_list pos:start="391:14" pos:end="391:18">(<argument pos:start="391:15" pos:end="391:17"><expr pos:start="391:15" pos:end="391:17"><operator pos:start="391:15" pos:end="391:15">&amp;</operator><name pos:start="391:16" pos:end="391:17">ti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="392:5" pos:end="395:5"><if pos:start="392:5" pos:end="395:5">if <condition pos:start="392:8" pos:end="392:18">(<expr pos:start="392:9" pos:end="392:17"><operator pos:start="392:9" pos:end="392:9">!</operator><name pos:start="392:10" pos:end="392:10">p</name> <operator pos:start="392:12" pos:end="392:13">||</operator> <operator pos:start="392:15" pos:end="392:15">!</operator><operator pos:start="392:16" pos:end="392:16">*</operator><name pos:start="392:17" pos:end="392:17">p</name></expr>)</condition> <block pos:start="392:20" pos:end="395:5">{<block_content pos:start="393:9" pos:end="394:20">
        <expr_stmt pos:start="393:9" pos:end="393:21"><expr pos:start="393:9" pos:end="393:20"><operator pos:start="393:9" pos:end="393:9">*</operator><name pos:start="393:10" pos:end="393:13">buf2</name> <operator pos:start="393:15" pos:end="393:15">=</operator> <literal type="char" pos:start="393:17" pos:end="393:20">'\0'</literal></expr>;</expr_stmt>
        <return pos:start="394:9" pos:end="394:20">return <expr pos:start="394:16" pos:end="394:19"><name pos:start="394:16" pos:end="394:19">buf2</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="396:5" pos:end="396:34"><expr pos:start="396:5" pos:end="396:33"><call pos:start="396:5" pos:end="396:33"><name pos:start="396:5" pos:end="396:14">av_strlcpy</name><argument_list pos:start="396:15" pos:end="396:33">(<argument pos:start="396:16" pos:end="396:19"><expr pos:start="396:16" pos:end="396:19"><name pos:start="396:16" pos:end="396:19">buf2</name></expr></argument>, <argument pos:start="396:22" pos:end="396:22"><expr pos:start="396:22" pos:end="396:22"><name pos:start="396:22" pos:end="396:22">p</name></expr></argument>, <argument pos:start="396:25" pos:end="396:32"><expr pos:start="396:25" pos:end="396:32"><name pos:start="396:25" pos:end="396:32">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="397:5" pos:end="397:32"><expr pos:start="397:5" pos:end="397:31"><name pos:start="397:5" pos:end="397:5">p</name> <operator pos:start="397:7" pos:end="397:7">=</operator> <name pos:start="397:9" pos:end="397:12">buf2</name> <operator pos:start="397:14" pos:end="397:14">+</operator> <call pos:start="397:16" pos:end="397:27"><name pos:start="397:16" pos:end="397:21">strlen</name><argument_list pos:start="397:22" pos:end="397:27">(<argument pos:start="397:23" pos:end="397:26"><expr pos:start="397:23" pos:end="397:26"><name pos:start="397:23" pos:end="397:26">buf2</name></expr></argument>)</argument_list></call> <operator pos:start="397:29" pos:end="397:29">-</operator> <literal type="number" pos:start="397:31" pos:end="397:31">1</literal></expr>;</expr_stmt>
    <if_stmt pos:start="398:5" pos:end="399:18"><if pos:start="398:5" pos:end="399:18">if <condition pos:start="398:8" pos:end="398:19">(<expr pos:start="398:9" pos:end="398:18"><operator pos:start="398:9" pos:end="398:9">*</operator><name pos:start="398:10" pos:end="398:10">p</name> <operator pos:start="398:12" pos:end="398:13">==</operator> <literal type="char" pos:start="398:15" pos:end="398:18">'\n'</literal></expr>)</condition><block type="pseudo" pos:start="399:9" pos:end="399:18"><block_content pos:start="399:9" pos:end="399:18">
        <expr_stmt pos:start="399:9" pos:end="399:18"><expr pos:start="399:9" pos:end="399:17"><operator pos:start="399:9" pos:end="399:9">*</operator><name pos:start="399:10" pos:end="399:10">p</name> <operator pos:start="399:12" pos:end="399:12">=</operator> <literal type="char" pos:start="399:14" pos:end="399:17">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return pos:start="400:5" pos:end="400:16">return <expr pos:start="400:12" pos:end="400:15"><name pos:start="400:12" pos:end="400:15">buf2</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="403:1" pos:end="421:0"><type pos:start="403:1" pos:end="403:11"><specifier pos:start="403:1" pos:end="403:6">static</specifier> <name pos:start="403:8" pos:end="403:11">void</name></type> <name pos:start="403:13" pos:end="403:21">http_vlog</name><parameter_list pos:start="403:22" pos:end="403:53">(<parameter pos:start="403:23" pos:end="403:37"><decl pos:start="403:23" pos:end="403:37"><type pos:start="403:23" pos:end="403:37"><specifier pos:start="403:23" pos:end="403:27">const</specifier> <name pos:start="403:29" pos:end="403:32">char</name> <modifier pos:start="403:34" pos:end="403:34">*</modifier></type><name pos:start="403:35" pos:end="403:37">fmt</name></decl></parameter>, <parameter pos:start="403:40" pos:end="403:52"><decl pos:start="403:40" pos:end="403:52"><type pos:start="403:40" pos:end="403:52"><name pos:start="403:40" pos:end="403:46">va_list</name></type> <name pos:start="403:48" pos:end="403:52">vargs</name></decl></parameter>)</parameter_list>
<block pos:start="404:1" pos:end="421:0">{<block_content pos:start="405:5" pos:end="417:20">
    <decl_stmt pos:start="405:5" pos:end="405:32"><decl pos:start="405:5" pos:end="405:31"><type pos:start="405:5" pos:end="405:14"><specifier pos:start="405:5" pos:end="405:10">static</specifier> <name pos:start="405:12" pos:end="405:14">int</name></type> <name pos:start="405:16" pos:end="405:27">print_prefix</name> <init pos:start="405:29" pos:end="405:31">= <expr pos:start="405:31" pos:end="405:31"><literal type="number" pos:start="405:31" pos:end="405:31">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="406:5" pos:end="406:17"><decl pos:start="406:5" pos:end="406:16"><type pos:start="406:5" pos:end="406:8"><name pos:start="406:5" pos:end="406:8">char</name></type> <name pos:start="406:10" pos:end="406:16"><name pos:start="406:10" pos:end="406:12">buf</name><index pos:start="406:13" pos:end="406:16">[<expr pos:start="406:14" pos:end="406:15"><literal type="number" pos:start="406:14" pos:end="406:15">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt pos:start="408:5" pos:end="409:15"><if pos:start="408:5" pos:end="409:15">if <condition pos:start="408:8" pos:end="408:17">(<expr pos:start="408:9" pos:end="408:16"><operator pos:start="408:9" pos:end="408:9">!</operator><name pos:start="408:10" pos:end="408:16">logfile</name></expr>)</condition><block type="pseudo" pos:start="409:9" pos:end="409:15"><block_content pos:start="409:9" pos:end="409:15">
        <return pos:start="409:9" pos:end="409:15">return;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="411:5" pos:end="414:5"><if pos:start="411:5" pos:end="414:5">if <condition pos:start="411:8" pos:end="411:21">(<expr pos:start="411:9" pos:end="411:20"><name pos:start="411:9" pos:end="411:20">print_prefix</name></expr>)</condition> <block pos:start="411:23" pos:end="414:5">{<block_content pos:start="412:9" pos:end="413:37">
        <expr_stmt pos:start="412:9" pos:end="412:33"><expr pos:start="412:9" pos:end="412:32"><call pos:start="412:9" pos:end="412:32"><name pos:start="412:9" pos:end="412:14">ctime1</name><argument_list pos:start="412:15" pos:end="412:32">(<argument pos:start="412:16" pos:end="412:18"><expr pos:start="412:16" pos:end="412:18"><name pos:start="412:16" pos:end="412:18">buf</name></expr></argument>, <argument pos:start="412:21" pos:end="412:31"><expr pos:start="412:21" pos:end="412:31"><sizeof pos:start="412:21" pos:end="412:31">sizeof<argument_list pos:start="412:27" pos:end="412:31">(<argument pos:start="412:28" pos:end="412:30"><expr pos:start="412:28" pos:end="412:30"><name pos:start="412:28" pos:end="412:30">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="413:9" pos:end="413:37"><expr pos:start="413:9" pos:end="413:36"><call pos:start="413:9" pos:end="413:36"><name pos:start="413:9" pos:end="413:15">fprintf</name><argument_list pos:start="413:16" pos:end="413:36">(<argument pos:start="413:17" pos:end="413:23"><expr pos:start="413:17" pos:end="413:23"><name pos:start="413:17" pos:end="413:23">logfile</name></expr></argument>, <argument pos:start="413:26" pos:end="413:30"><expr pos:start="413:26" pos:end="413:30"><literal type="string" pos:start="413:26" pos:end="413:30">"%s "</literal></expr></argument>, <argument pos:start="413:33" pos:end="413:35"><expr pos:start="413:33" pos:end="413:35"><name pos:start="413:33" pos:end="413:35">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="415:5" pos:end="415:45"><expr pos:start="415:5" pos:end="415:44"><name pos:start="415:5" pos:end="415:16">print_prefix</name> <operator pos:start="415:18" pos:end="415:18">=</operator> <call pos:start="415:20" pos:end="415:36"><name pos:start="415:20" pos:end="415:25">strstr</name><argument_list pos:start="415:26" pos:end="415:36">(<argument pos:start="415:27" pos:end="415:29"><expr pos:start="415:27" pos:end="415:29"><name pos:start="415:27" pos:end="415:29">fmt</name></expr></argument>, <argument pos:start="415:32" pos:end="415:35"><expr pos:start="415:32" pos:end="415:35"><literal type="string" pos:start="415:32" pos:end="415:35">"\n"</literal></expr></argument>)</argument_list></call> <operator pos:start="415:38" pos:end="415:39">!=</operator> <name pos:start="415:41" pos:end="415:44">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="416:5" pos:end="416:34"><expr pos:start="416:5" pos:end="416:33"><call pos:start="416:5" pos:end="416:33"><name pos:start="416:5" pos:end="416:12">vfprintf</name><argument_list pos:start="416:13" pos:end="416:33">(<argument pos:start="416:14" pos:end="416:20"><expr pos:start="416:14" pos:end="416:20"><name pos:start="416:14" pos:end="416:20">logfile</name></expr></argument>, <argument pos:start="416:23" pos:end="416:25"><expr pos:start="416:23" pos:end="416:25"><name pos:start="416:23" pos:end="416:25">fmt</name></expr></argument>, <argument pos:start="416:28" pos:end="416:32"><expr pos:start="416:28" pos:end="416:32"><name pos:start="416:28" pos:end="416:32">vargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="417:5" pos:end="417:20"><expr pos:start="417:5" pos:end="417:19"><call pos:start="417:5" pos:end="417:19"><name pos:start="417:5" pos:end="417:10">fflush</name><argument_list pos:start="417:11" pos:end="417:19">(<argument pos:start="417:12" pos:end="417:18"><expr pos:start="417:12" pos:end="417:18"><name pos:start="417:12" pos:end="417:18">logfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef pos:start="420:1" pos:end="420:15">#<cpp:directive pos:start="420:2" pos:end="420:6">ifdef</cpp:directive> <name pos:start="420:8" pos:end="420:15">__GNUC__</name></cpp:ifdef>
<macro pos:start="421:1" pos:end="423:0"><name pos:start="421:1" pos:end="421:13">__attribute__</name> <argument_list pos:start="421:15" pos:end="423:0">(<argument pos:start="421:16" pos:end="421:38">(format (printf, <literal type="number" pos:start="421:33" pos:end="421:33">1</literal>, <literal type="number" pos:start="421:36" pos:end="421:36">2</literal>))</argument>)</argument_list></macro>
<cpp:endif pos:start="422:1" pos:end="422:6">#<cpp:directive pos:start="422:2" pos:end="422:6">endif</cpp:directive></cpp:endif>
<function pos:start="423:1" pos:end="429:1"><type pos:start="423:1" pos:end="423:11"><specifier pos:start="423:1" pos:end="423:6">static</specifier> <name pos:start="423:8" pos:end="423:11">void</name></type> <name pos:start="423:13" pos:end="423:20">http_log</name><parameter_list pos:start="423:21" pos:end="423:42">(<parameter pos:start="423:22" pos:end="423:36"><decl pos:start="423:22" pos:end="423:36"><type pos:start="423:22" pos:end="423:33"><specifier pos:start="423:22" pos:end="423:26">const</specifier> <name pos:start="423:28" pos:end="423:31">char</name> <modifier pos:start="423:33" pos:end="423:33">*</modifier></type><name pos:start="423:34" pos:end="423:36">fmt</name></decl></parameter>, <parameter pos:start="423:39" pos:end="423:41"><decl pos:start="423:39" pos:end="423:41"><type pos:start="423:39" pos:end="423:41"><modifier pos:start="423:39" pos:end="423:41">...</modifier></type></decl></parameter>)</parameter_list>
<block pos:start="424:1" pos:end="429:1">{<block_content pos:start="425:5" pos:end="428:18">
    <decl_stmt pos:start="425:5" pos:end="425:18"><decl pos:start="425:5" pos:end="425:17"><type pos:start="425:5" pos:end="425:11"><name pos:start="425:5" pos:end="425:11">va_list</name></type> <name pos:start="425:13" pos:end="425:17">vargs</name></decl>;</decl_stmt>
    <expr_stmt pos:start="426:5" pos:end="426:25"><expr pos:start="426:5" pos:end="426:24"><call pos:start="426:5" pos:end="426:24"><name pos:start="426:5" pos:end="426:12">va_start</name><argument_list pos:start="426:13" pos:end="426:24">(<argument pos:start="426:14" pos:end="426:18"><expr pos:start="426:14" pos:end="426:18"><name pos:start="426:14" pos:end="426:18">vargs</name></expr></argument>, <argument pos:start="426:21" pos:end="426:23"><expr pos:start="426:21" pos:end="426:23"><name pos:start="426:21" pos:end="426:23">fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="427:5" pos:end="427:26"><expr pos:start="427:5" pos:end="427:25"><call pos:start="427:5" pos:end="427:25"><name pos:start="427:5" pos:end="427:13">http_vlog</name><argument_list pos:start="427:14" pos:end="427:25">(<argument pos:start="427:15" pos:end="427:17"><expr pos:start="427:15" pos:end="427:17"><name pos:start="427:15" pos:end="427:17">fmt</name></expr></argument>, <argument pos:start="427:20" pos:end="427:24"><expr pos:start="427:20" pos:end="427:24"><name pos:start="427:20" pos:end="427:24">vargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="428:5" pos:end="428:18"><expr pos:start="428:5" pos:end="428:17"><call pos:start="428:5" pos:end="428:17"><name pos:start="428:5" pos:end="428:10">va_end</name><argument_list pos:start="428:11" pos:end="428:17">(<argument pos:start="428:12" pos:end="428:16"><expr pos:start="428:12" pos:end="428:16"><name pos:start="428:12" pos:end="428:16">vargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="431:1" pos:end="441:1"><type pos:start="431:1" pos:end="431:11"><specifier pos:start="431:1" pos:end="431:6">static</specifier> <name pos:start="431:8" pos:end="431:11">void</name></type> <name pos:start="431:13" pos:end="431:23">http_av_log</name><parameter_list pos:start="431:24" pos:end="431:77">(<parameter pos:start="431:25" pos:end="431:33"><decl pos:start="431:25" pos:end="431:33"><type pos:start="431:25" pos:end="431:33"><name pos:start="431:25" pos:end="431:28">void</name> <modifier pos:start="431:30" pos:end="431:30">*</modifier></type><name pos:start="431:31" pos:end="431:33">ptr</name></decl></parameter>, <parameter pos:start="431:36" pos:end="431:44"><decl pos:start="431:36" pos:end="431:44"><type pos:start="431:36" pos:end="431:44"><name pos:start="431:36" pos:end="431:38">int</name></type> <name pos:start="431:40" pos:end="431:44">level</name></decl></parameter>, <parameter pos:start="431:47" pos:end="431:61"><decl pos:start="431:47" pos:end="431:61"><type pos:start="431:47" pos:end="431:61"><specifier pos:start="431:47" pos:end="431:51">const</specifier> <name pos:start="431:53" pos:end="431:56">char</name> <modifier pos:start="431:58" pos:end="431:58">*</modifier></type><name pos:start="431:59" pos:end="431:61">fmt</name></decl></parameter>, <parameter pos:start="431:64" pos:end="431:76"><decl pos:start="431:64" pos:end="431:76"><type pos:start="431:64" pos:end="431:76"><name pos:start="431:64" pos:end="431:70">va_list</name></type> <name pos:start="431:72" pos:end="431:76">vargs</name></decl></parameter>)</parameter_list>
<block pos:start="432:1" pos:end="441:1">{<block_content pos:start="433:5" pos:end="440:26">
    <decl_stmt pos:start="433:5" pos:end="433:32"><decl pos:start="433:5" pos:end="433:31"><type pos:start="433:5" pos:end="433:14"><specifier pos:start="433:5" pos:end="433:10">static</specifier> <name pos:start="433:12" pos:end="433:14">int</name></type> <name pos:start="433:16" pos:end="433:27">print_prefix</name> <init pos:start="433:29" pos:end="433:31">= <expr pos:start="433:31" pos:end="433:31"><literal type="number" pos:start="433:31" pos:end="433:31">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="434:5" pos:end="434:48"><decl pos:start="434:5" pos:end="434:47"><type pos:start="434:5" pos:end="434:13"><name pos:start="434:5" pos:end="434:11">AVClass</name> <modifier pos:start="434:13" pos:end="434:13">*</modifier></type><name pos:start="434:14" pos:end="434:16">avc</name> <init pos:start="434:18" pos:end="434:47">= <expr pos:start="434:20" pos:end="434:47"><ternary pos:start="434:20" pos:end="434:47"><condition pos:start="434:20" pos:end="434:24"><expr pos:start="434:20" pos:end="434:22"><name pos:start="434:20" pos:end="434:22">ptr</name></expr> ?</condition><then pos:start="434:26" pos:end="434:40"> <expr pos:start="434:26" pos:end="434:40"><operator pos:start="434:26" pos:end="434:26">*</operator><operator pos:start="434:27" pos:end="434:27">(</operator><name pos:start="434:28" pos:end="434:34">AVClass</name><operator pos:start="434:35" pos:end="434:35">*</operator><operator pos:start="434:36" pos:end="434:36">*</operator><operator pos:start="434:37" pos:end="434:37">)</operator><name pos:start="434:38" pos:end="434:40">ptr</name></expr> </then><else pos:start="434:42" pos:end="434:47">: <expr pos:start="434:44" pos:end="434:47"><name pos:start="434:44" pos:end="434:47">NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="435:5" pos:end="436:15"><if pos:start="435:5" pos:end="436:15">if <condition pos:start="435:8" pos:end="435:35">(<expr pos:start="435:9" pos:end="435:34"><name pos:start="435:9" pos:end="435:13">level</name> <operator pos:start="435:15" pos:end="435:15">&gt;</operator> <call pos:start="435:17" pos:end="435:34"><name pos:start="435:17" pos:end="435:32">av_log_get_level</name><argument_list pos:start="435:33" pos:end="435:34">()</argument_list></call></expr>)</condition><block type="pseudo" pos:start="436:9" pos:end="436:15"><block_content pos:start="436:9" pos:end="436:15">
        <return pos:start="436:9" pos:end="436:15">return;</return></block_content></block></if></if_stmt>
    <if_stmt pos:start="437:5" pos:end="438:56"><if pos:start="437:5" pos:end="438:56">if <condition pos:start="437:8" pos:end="437:28">(<expr pos:start="437:9" pos:end="437:27"><name pos:start="437:9" pos:end="437:20">print_prefix</name> <operator pos:start="437:22" pos:end="437:23">&amp;&amp;</operator> <name pos:start="437:25" pos:end="437:27">avc</name></expr>)</condition><block type="pseudo" pos:start="438:9" pos:end="438:56"><block_content pos:start="438:9" pos:end="438:56">
        <expr_stmt pos:start="438:9" pos:end="438:56"><expr pos:start="438:9" pos:end="438:55"><call pos:start="438:9" pos:end="438:55"><name pos:start="438:9" pos:end="438:16">http_log</name><argument_list pos:start="438:17" pos:end="438:55">(<argument pos:start="438:18" pos:end="438:28"><expr pos:start="438:18" pos:end="438:28"><literal type="string" pos:start="438:18" pos:end="438:28">"[%s @ %p]"</literal></expr></argument>, <argument pos:start="438:31" pos:end="438:49"><expr pos:start="438:31" pos:end="438:49"><call pos:start="438:31" pos:end="438:49"><name pos:start="438:31" pos:end="438:44"><name pos:start="438:31" pos:end="438:33">avc</name><operator pos:start="438:34" pos:end="438:35">-&gt;</operator><name pos:start="438:36" pos:end="438:44">item_name</name></name><argument_list pos:start="438:45" pos:end="438:49">(<argument pos:start="438:46" pos:end="438:48"><expr pos:start="438:46" pos:end="438:48"><name pos:start="438:46" pos:end="438:48">ptr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="438:52" pos:end="438:54"><expr pos:start="438:52" pos:end="438:54"><name pos:start="438:52" pos:end="438:54">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="439:5" pos:end="439:45"><expr pos:start="439:5" pos:end="439:44"><name pos:start="439:5" pos:end="439:16">print_prefix</name> <operator pos:start="439:18" pos:end="439:18">=</operator> <call pos:start="439:20" pos:end="439:36"><name pos:start="439:20" pos:end="439:25">strstr</name><argument_list pos:start="439:26" pos:end="439:36">(<argument pos:start="439:27" pos:end="439:29"><expr pos:start="439:27" pos:end="439:29"><name pos:start="439:27" pos:end="439:29">fmt</name></expr></argument>, <argument pos:start="439:32" pos:end="439:35"><expr pos:start="439:32" pos:end="439:35"><literal type="string" pos:start="439:32" pos:end="439:35">"\n"</literal></expr></argument>)</argument_list></call> <operator pos:start="439:38" pos:end="439:39">!=</operator> <name pos:start="439:41" pos:end="439:44">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="440:5" pos:end="440:26"><expr pos:start="440:5" pos:end="440:25"><call pos:start="440:5" pos:end="440:25"><name pos:start="440:5" pos:end="440:13">http_vlog</name><argument_list pos:start="440:14" pos:end="440:25">(<argument pos:start="440:15" pos:end="440:17"><expr pos:start="440:15" pos:end="440:17"><name pos:start="440:15" pos:end="440:17">fmt</name></expr></argument>, <argument pos:start="440:20" pos:end="440:24"><expr pos:start="440:20" pos:end="440:24"><name pos:start="440:20" pos:end="440:24">vargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="443:1" pos:end="451:1"><type pos:start="443:1" pos:end="443:11"><specifier pos:start="443:1" pos:end="443:6">static</specifier> <name pos:start="443:8" pos:end="443:11">void</name></type> <name pos:start="443:13" pos:end="443:26">log_connection</name><parameter_list pos:start="443:27" pos:end="443:42">(<parameter pos:start="443:28" pos:end="443:41"><decl pos:start="443:28" pos:end="443:41"><type pos:start="443:28" pos:end="443:40"><name pos:start="443:28" pos:end="443:38">HTTPContext</name> <modifier pos:start="443:40" pos:end="443:40">*</modifier></type><name pos:start="443:41" pos:end="443:41">c</name></decl></parameter>)</parameter_list>
<block pos:start="444:1" pos:end="451:1">{<block_content pos:start="445:5" pos:end="450:80">
    <if_stmt pos:start="445:5" pos:end="446:15"><if pos:start="445:5" pos:end="446:15">if <condition pos:start="445:8" pos:end="445:24">(<expr pos:start="445:9" pos:end="445:23"><name pos:start="445:9" pos:end="445:23"><name pos:start="445:9" pos:end="445:9">c</name><operator pos:start="445:10" pos:end="445:11">-&gt;</operator><name pos:start="445:12" pos:end="445:23">suppress_log</name></name></expr>)</condition><block type="pseudo" pos:start="446:9" pos:end="446:15"><block_content pos:start="446:9" pos:end="446:15">
        <return pos:start="446:9" pos:end="446:15">return;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="448:5" pos:end="450:80"><expr pos:start="448:5" pos:end="450:79"><call pos:start="448:5" pos:end="450:79"><name pos:start="448:5" pos:end="448:12">http_log</name><argument_list pos:start="448:13" pos:end="450:79">(<argument pos:start="448:14" pos:end="448:51"><expr pos:start="448:14" pos:end="448:51"><literal type="string" pos:start="448:14" pos:end="448:41">"%s - - [%s] \"%s %s\" %d %"</literal><name pos:start="448:42" pos:end="448:47">PRId64</name><literal type="string" pos:start="448:48" pos:end="448:51">"\n"</literal></expr></argument>,
             <argument pos:start="449:14" pos:end="449:45"><expr pos:start="449:14" pos:end="449:45"><call pos:start="449:14" pos:end="449:45"><name pos:start="449:14" pos:end="449:22">inet_ntoa</name><argument_list pos:start="449:23" pos:end="449:45">(<argument pos:start="449:24" pos:end="449:44"><expr pos:start="449:24" pos:end="449:44"><name pos:start="449:24" pos:end="449:44"><name pos:start="449:24" pos:end="449:24">c</name><operator pos:start="449:25" pos:end="449:26">-&gt;</operator><name pos:start="449:27" pos:end="449:35">from_addr</name><operator pos:start="449:36" pos:end="449:36">.</operator><name pos:start="449:37" pos:end="449:44">sin_addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="449:48" pos:end="449:56"><expr pos:start="449:48" pos:end="449:56"><name pos:start="449:48" pos:end="449:56"><name pos:start="449:48" pos:end="449:48">c</name><operator pos:start="449:49" pos:end="449:50">-&gt;</operator><name pos:start="449:51" pos:end="449:56">method</name></name></expr></argument>, <argument pos:start="449:59" pos:end="449:64"><expr pos:start="449:59" pos:end="449:64"><name pos:start="449:59" pos:end="449:64"><name pos:start="449:59" pos:end="449:59">c</name><operator pos:start="449:60" pos:end="449:61">-&gt;</operator><name pos:start="449:62" pos:end="449:64">url</name></name></expr></argument>,
             <argument pos:start="450:14" pos:end="450:24"><expr pos:start="450:14" pos:end="450:24"><name pos:start="450:14" pos:end="450:24"><name pos:start="450:14" pos:end="450:14">c</name><operator pos:start="450:15" pos:end="450:16">-&gt;</operator><name pos:start="450:17" pos:end="450:24">protocol</name></name></expr></argument>, <argument pos:start="450:27" pos:end="450:63"><expr pos:start="450:27" pos:end="450:63"><operator pos:start="450:27" pos:end="450:27">(</operator><ternary pos:start="450:28" pos:end="450:62"><condition pos:start="450:28" pos:end="450:42"><expr pos:start="450:28" pos:end="450:40"><name pos:start="450:28" pos:end="450:40"><name pos:start="450:28" pos:end="450:28">c</name><operator pos:start="450:29" pos:end="450:30">-&gt;</operator><name pos:start="450:31" pos:end="450:40">http_error</name></name></expr> ?</condition><then pos:start="450:44" pos:end="450:56"> <expr pos:start="450:44" pos:end="450:56"><name pos:start="450:44" pos:end="450:56"><name pos:start="450:44" pos:end="450:44">c</name><operator pos:start="450:45" pos:end="450:46">-&gt;</operator><name pos:start="450:47" pos:end="450:56">http_error</name></name></expr> </then><else pos:start="450:58" pos:end="450:62">: <expr pos:start="450:60" pos:end="450:62"><literal type="number" pos:start="450:60" pos:end="450:62">200</literal></expr></else></ternary><operator pos:start="450:63" pos:end="450:63">)</operator></expr></argument>, <argument pos:start="450:66" pos:end="450:78"><expr pos:start="450:66" pos:end="450:78"><name pos:start="450:66" pos:end="450:78"><name pos:start="450:66" pos:end="450:66">c</name><operator pos:start="450:67" pos:end="450:68">-&gt;</operator><name pos:start="450:69" pos:end="450:78">data_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="453:1" pos:end="464:1"><type pos:start="453:1" pos:end="453:11"><specifier pos:start="453:1" pos:end="453:6">static</specifier> <name pos:start="453:8" pos:end="453:11">void</name></type> <name pos:start="453:13" pos:end="453:27">update_datarate</name><parameter_list pos:start="453:28" pos:end="453:61">(<parameter pos:start="453:29" pos:end="453:45"><decl pos:start="453:29" pos:end="453:45"><type pos:start="453:29" pos:end="453:45"><name pos:start="453:29" pos:end="453:40">DataRateData</name> <modifier pos:start="453:42" pos:end="453:42">*</modifier></type><name pos:start="453:43" pos:end="453:45">drd</name></decl></parameter>, <parameter pos:start="453:48" pos:end="453:60"><decl pos:start="453:48" pos:end="453:60"><type pos:start="453:48" pos:end="453:60"><name pos:start="453:48" pos:end="453:54">int64_t</name></type> <name pos:start="453:56" pos:end="453:60">count</name></decl></parameter>)</parameter_list>
<block pos:start="454:1" pos:end="464:1">{<block_content pos:start="455:5" pos:end="463:5">
    <if_stmt pos:start="455:5" pos:end="463:5"><if pos:start="455:5" pos:end="458:5">if <condition pos:start="455:8" pos:end="455:36">(<expr pos:start="455:9" pos:end="455:35"><operator pos:start="455:9" pos:end="455:9">!</operator><name pos:start="455:10" pos:end="455:19"><name pos:start="455:10" pos:end="455:12">drd</name><operator pos:start="455:13" pos:end="455:14">-&gt;</operator><name pos:start="455:15" pos:end="455:19">time1</name></name> <operator pos:start="455:21" pos:end="455:22">&amp;&amp;</operator> <operator pos:start="455:24" pos:end="455:24">!</operator><name pos:start="455:25" pos:end="455:35"><name pos:start="455:25" pos:end="455:27">drd</name><operator pos:start="455:28" pos:end="455:29">-&gt;</operator><name pos:start="455:30" pos:end="455:35">count1</name></name></expr>)</condition> <block pos:start="455:38" pos:end="458:5">{<block_content pos:start="456:9" pos:end="457:42">
        <expr_stmt pos:start="456:9" pos:end="456:43"><expr pos:start="456:9" pos:end="456:42"><name pos:start="456:9" pos:end="456:18"><name pos:start="456:9" pos:end="456:11">drd</name><operator pos:start="456:12" pos:end="456:13">-&gt;</operator><name pos:start="456:14" pos:end="456:18">time1</name></name> <operator pos:start="456:20" pos:end="456:20">=</operator> <name pos:start="456:22" pos:end="456:31"><name pos:start="456:22" pos:end="456:24">drd</name><operator pos:start="456:25" pos:end="456:26">-&gt;</operator><name pos:start="456:27" pos:end="456:31">time2</name></name> <operator pos:start="456:33" pos:end="456:33">=</operator> <name pos:start="456:35" pos:end="456:42">cur_time</name></expr>;</expr_stmt>
        <expr_stmt pos:start="457:9" pos:end="457:42"><expr pos:start="457:9" pos:end="457:41"><name pos:start="457:9" pos:end="457:19"><name pos:start="457:9" pos:end="457:11">drd</name><operator pos:start="457:12" pos:end="457:13">-&gt;</operator><name pos:start="457:14" pos:end="457:19">count1</name></name> <operator pos:start="457:21" pos:end="457:21">=</operator> <name pos:start="457:23" pos:end="457:33"><name pos:start="457:23" pos:end="457:25">drd</name><operator pos:start="457:26" pos:end="457:27">-&gt;</operator><name pos:start="457:28" pos:end="457:33">count2</name></name> <operator pos:start="457:35" pos:end="457:35">=</operator> <name pos:start="457:37" pos:end="457:41">count</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="458:7" pos:end="463:5">else if <condition pos:start="458:15" pos:end="458:44">(<expr pos:start="458:16" pos:end="458:43"><name pos:start="458:16" pos:end="458:23">cur_time</name> <operator pos:start="458:25" pos:end="458:25">-</operator> <name pos:start="458:27" pos:end="458:36"><name pos:start="458:27" pos:end="458:29">drd</name><operator pos:start="458:30" pos:end="458:31">-&gt;</operator><name pos:start="458:32" pos:end="458:36">time2</name></name> <operator pos:start="458:38" pos:end="458:38">&gt;</operator> <literal type="number" pos:start="458:40" pos:end="458:43">5000</literal></expr>)</condition> <block pos:start="458:46" pos:end="463:5">{<block_content pos:start="459:9" pos:end="462:28">
        <expr_stmt pos:start="459:9" pos:end="459:32"><expr pos:start="459:9" pos:end="459:31"><name pos:start="459:9" pos:end="459:18"><name pos:start="459:9" pos:end="459:11">drd</name><operator pos:start="459:12" pos:end="459:13">-&gt;</operator><name pos:start="459:14" pos:end="459:18">time1</name></name> <operator pos:start="459:20" pos:end="459:20">=</operator> <name pos:start="459:22" pos:end="459:31"><name pos:start="459:22" pos:end="459:24">drd</name><operator pos:start="459:25" pos:end="459:26">-&gt;</operator><name pos:start="459:27" pos:end="459:31">time2</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="460:9" pos:end="460:34"><expr pos:start="460:9" pos:end="460:33"><name pos:start="460:9" pos:end="460:19"><name pos:start="460:9" pos:end="460:11">drd</name><operator pos:start="460:12" pos:end="460:13">-&gt;</operator><name pos:start="460:14" pos:end="460:19">count1</name></name> <operator pos:start="460:21" pos:end="460:21">=</operator> <name pos:start="460:23" pos:end="460:33"><name pos:start="460:23" pos:end="460:25">drd</name><operator pos:start="460:26" pos:end="460:27">-&gt;</operator><name pos:start="460:28" pos:end="460:33">count2</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="461:9" pos:end="461:30"><expr pos:start="461:9" pos:end="461:29"><name pos:start="461:9" pos:end="461:18"><name pos:start="461:9" pos:end="461:11">drd</name><operator pos:start="461:12" pos:end="461:13">-&gt;</operator><name pos:start="461:14" pos:end="461:18">time2</name></name> <operator pos:start="461:20" pos:end="461:20">=</operator> <name pos:start="461:22" pos:end="461:29">cur_time</name></expr>;</expr_stmt>
        <expr_stmt pos:start="462:9" pos:end="462:28"><expr pos:start="462:9" pos:end="462:27"><name pos:start="462:9" pos:end="462:19"><name pos:start="462:9" pos:end="462:11">drd</name><operator pos:start="462:12" pos:end="462:13">-&gt;</operator><name pos:start="462:14" pos:end="462:19">count2</name></name> <operator pos:start="462:21" pos:end="462:21">=</operator> <name pos:start="462:23" pos:end="462:27">count</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="466:1" pos:end="466:25">/* In bytes per second */</comment>
<function pos:start="467:1" pos:end="473:1"><type pos:start="467:1" pos:end="467:10"><specifier pos:start="467:1" pos:end="467:6">static</specifier> <name pos:start="467:8" pos:end="467:10">int</name></type> <name pos:start="467:12" pos:end="467:27">compute_datarate</name><parameter_list pos:start="467:28" pos:end="467:61">(<parameter pos:start="467:29" pos:end="467:45"><decl pos:start="467:29" pos:end="467:45"><type pos:start="467:29" pos:end="467:45"><name pos:start="467:29" pos:end="467:40">DataRateData</name> <modifier pos:start="467:42" pos:end="467:42">*</modifier></type><name pos:start="467:43" pos:end="467:45">drd</name></decl></parameter>, <parameter pos:start="467:48" pos:end="467:60"><decl pos:start="467:48" pos:end="467:60"><type pos:start="467:48" pos:end="467:60"><name pos:start="467:48" pos:end="467:54">int64_t</name></type> <name pos:start="467:56" pos:end="467:60">count</name></decl></parameter>)</parameter_list>
<block pos:start="468:1" pos:end="473:1">{<block_content pos:start="469:5" pos:end="472:68">
    <if_stmt pos:start="469:5" pos:end="470:17"><if pos:start="469:5" pos:end="470:17">if <condition pos:start="469:8" pos:end="469:31">(<expr pos:start="469:9" pos:end="469:30"><name pos:start="469:9" pos:end="469:16">cur_time</name> <operator pos:start="469:18" pos:end="469:19">==</operator> <name pos:start="469:21" pos:end="469:30"><name pos:start="469:21" pos:end="469:23">drd</name><operator pos:start="469:24" pos:end="469:25">-&gt;</operator><name pos:start="469:26" pos:end="469:30">time1</name></name></expr>)</condition><block type="pseudo" pos:start="470:9" pos:end="470:17"><block_content pos:start="470:9" pos:end="470:17">
        <return pos:start="470:9" pos:end="470:17">return <expr pos:start="470:16" pos:end="470:16"><literal type="number" pos:start="470:16" pos:end="470:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <return pos:start="472:5" pos:end="472:68">return <expr pos:start="472:12" pos:end="472:67"><operator pos:start="472:12" pos:end="472:12">(</operator><operator pos:start="472:13" pos:end="472:13">(</operator><name pos:start="472:14" pos:end="472:18">count</name> <operator pos:start="472:20" pos:end="472:20">-</operator> <name pos:start="472:22" pos:end="472:32"><name pos:start="472:22" pos:end="472:24">drd</name><operator pos:start="472:25" pos:end="472:26">-&gt;</operator><name pos:start="472:27" pos:end="472:32">count1</name></name><operator pos:start="472:33" pos:end="472:33">)</operator> <operator pos:start="472:35" pos:end="472:35">*</operator> <literal type="number" pos:start="472:37" pos:end="472:40">1000</literal><operator pos:start="472:41" pos:end="472:41">)</operator> <operator pos:start="472:43" pos:end="472:43">/</operator> <operator pos:start="472:45" pos:end="472:45">(</operator><name pos:start="472:46" pos:end="472:53">cur_time</name> <operator pos:start="472:55" pos:end="472:55">-</operator> <name pos:start="472:57" pos:end="472:66"><name pos:start="472:57" pos:end="472:59">drd</name><operator pos:start="472:60" pos:end="472:61">-&gt;</operator><name pos:start="472:62" pos:end="472:66">time1</name></name><operator pos:start="472:67" pos:end="472:67">)</operator></expr>;</return>
</block_content>}</block></function>


<function pos:start="476:1" pos:end="557:1"><type pos:start="476:1" pos:end="476:11"><specifier pos:start="476:1" pos:end="476:6">static</specifier> <name pos:start="476:8" pos:end="476:11">void</name></type> <name pos:start="476:13" pos:end="476:26">start_children</name><parameter_list pos:start="476:27" pos:end="476:48">(<parameter pos:start="476:28" pos:end="476:47"><decl pos:start="476:28" pos:end="476:47"><type pos:start="476:28" pos:end="476:43"><name pos:start="476:28" pos:end="476:41">FFServerStream</name> <modifier pos:start="476:43" pos:end="476:43">*</modifier></type><name pos:start="476:44" pos:end="476:47">feed</name></decl></parameter>)</parameter_list>
<block pos:start="477:1" pos:end="557:1">{<block_content pos:start="478:5" pos:end="556:23">
    <decl_stmt pos:start="478:5" pos:end="478:19"><decl pos:start="478:5" pos:end="478:18"><type pos:start="478:5" pos:end="478:10"><name pos:start="478:5" pos:end="478:8">char</name> <modifier pos:start="478:10" pos:end="478:10">*</modifier></type><name pos:start="478:11" pos:end="478:18">pathname</name></decl>;</decl_stmt>
    <decl_stmt pos:start="479:5" pos:end="479:16"><decl pos:start="479:5" pos:end="479:15"><type pos:start="479:5" pos:end="479:10"><name pos:start="479:5" pos:end="479:8">char</name> <modifier pos:start="479:10" pos:end="479:10">*</modifier></type><name pos:start="479:11" pos:end="479:15">slash</name></decl>;</decl_stmt>
    <decl_stmt pos:start="480:5" pos:end="480:10"><decl pos:start="480:5" pos:end="480:9"><type pos:start="480:5" pos:end="480:7"><name pos:start="480:5" pos:end="480:7">int</name></type> <name pos:start="480:9" pos:end="480:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="481:5" pos:end="481:22"><decl pos:start="481:5" pos:end="481:21"><type pos:start="481:5" pos:end="481:10"><name pos:start="481:5" pos:end="481:10">size_t</name></type> <name pos:start="481:12" pos:end="481:21">cmd_length</name></decl>;</decl_stmt>

    <if_stmt pos:start="483:5" pos:end="484:15"><if pos:start="483:5" pos:end="484:15">if <condition pos:start="483:8" pos:end="483:18">(<expr pos:start="483:9" pos:end="483:17"><name pos:start="483:9" pos:end="483:17">no_launch</name></expr>)</condition><block type="pseudo" pos:start="484:9" pos:end="484:15"><block_content pos:start="484:9" pos:end="484:15">
        <return pos:start="484:9" pos:end="484:15">return;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="486:5" pos:end="486:41"><expr pos:start="486:5" pos:end="486:40"><name pos:start="486:5" pos:end="486:14">cmd_length</name> <operator pos:start="486:16" pos:end="486:16">=</operator> <call pos:start="486:18" pos:end="486:40"><name pos:start="486:18" pos:end="486:23">strlen</name><argument_list pos:start="486:24" pos:end="486:40">(<argument pos:start="486:25" pos:end="486:39"><expr pos:start="486:25" pos:end="486:39"><name pos:start="486:25" pos:end="486:39">my_program_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <comment type="block" format="doxygen" pos:start="488:4" pos:end="491:6">/**
    * FIXME: WIP Safeguard. Remove after clearing all harcoded
    * '1024' path lengths
    */</comment>
    <if_stmt pos:start="492:5" pos:end="496:5"><if pos:start="492:5" pos:end="496:5">if <condition pos:start="492:8" pos:end="492:37">(<expr pos:start="492:9" pos:end="492:36"><name pos:start="492:9" pos:end="492:18">cmd_length</name> <operator pos:start="492:20" pos:end="492:20">&gt;</operator> <name pos:start="492:22" pos:end="492:32">PATH_LENGTH</name> <operator pos:start="492:34" pos:end="492:34">-</operator> <literal type="number" pos:start="492:36" pos:end="492:36">1</literal></expr>)</condition> <block pos:start="492:39" pos:end="496:5">{<block_content pos:start="493:9" pos:end="495:15">
        <expr_stmt pos:start="493:9" pos:end="494:78"><expr pos:start="493:9" pos:end="494:77"><call pos:start="493:9" pos:end="494:77"><name pos:start="493:9" pos:end="493:16">http_log</name><argument_list pos:start="493:17" pos:end="494:77">(<argument pos:start="493:18" pos:end="494:46"><expr pos:start="493:18" pos:end="494:46"><literal type="string" pos:start="493:18" pos:end="493:72">"Could not start children. Command line: '%s' exceeds "</literal>
                    <literal type="string" pos:start="494:21" pos:end="494:46">"path length limit (%d)\n"</literal></expr></argument>, <argument pos:start="494:49" pos:end="494:63"><expr pos:start="494:49" pos:end="494:63"><name pos:start="494:49" pos:end="494:63">my_program_name</name></expr></argument>, <argument pos:start="494:66" pos:end="494:76"><expr pos:start="494:66" pos:end="494:76"><name pos:start="494:66" pos:end="494:76">PATH_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="495:9" pos:end="495:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="498:5" pos:end="498:43"><expr pos:start="498:5" pos:end="498:42"><name pos:start="498:5" pos:end="498:12">pathname</name> <operator pos:start="498:14" pos:end="498:14">=</operator> <call pos:start="498:16" pos:end="498:42"><name pos:start="498:16" pos:end="498:24">av_strdup</name> <argument_list pos:start="498:26" pos:end="498:42">(<argument pos:start="498:27" pos:end="498:41"><expr pos:start="498:27" pos:end="498:41"><name pos:start="498:27" pos:end="498:41">my_program_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="499:5" pos:end="502:5"><if pos:start="499:5" pos:end="502:5">if <condition pos:start="499:8" pos:end="499:18">(<expr pos:start="499:9" pos:end="499:17"><operator pos:start="499:9" pos:end="499:9">!</operator><name pos:start="499:10" pos:end="499:17">pathname</name></expr>)</condition> <block pos:start="499:20" pos:end="502:5">{<block_content pos:start="500:9" pos:end="501:15">
        <expr_stmt pos:start="500:9" pos:end="500:70"><expr pos:start="500:9" pos:end="500:69"><call pos:start="500:9" pos:end="500:69"><name pos:start="500:9" pos:end="500:16">http_log</name><argument_list pos:start="500:17" pos:end="500:69">(<argument pos:start="500:18" pos:end="500:68"><expr pos:start="500:18" pos:end="500:68"><literal type="string" pos:start="500:18" pos:end="500:68">"Could not allocate memory for children cmd line\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="501:9" pos:end="501:15">return;</return>
    </block_content>}</block></if></if_stmt>
   <comment type="block" pos:start="503:4" pos:end="504:43">/* replace "ffserver" with "ffmpeg" in the path of current
    * program. Ignore user provided path */</comment>

    <expr_stmt pos:start="506:5" pos:end="506:35"><expr pos:start="506:5" pos:end="506:34"><name pos:start="506:5" pos:end="506:9">slash</name> <operator pos:start="506:11" pos:end="506:11">=</operator> <call pos:start="506:13" pos:end="506:34"><name pos:start="506:13" pos:end="506:19">strrchr</name><argument_list pos:start="506:20" pos:end="506:34">(<argument pos:start="506:21" pos:end="506:28"><expr pos:start="506:21" pos:end="506:28"><name pos:start="506:21" pos:end="506:28">pathname</name></expr></argument>, <argument pos:start="506:31" pos:end="506:33"><expr pos:start="506:31" pos:end="506:33"><literal type="char" pos:start="506:31" pos:end="506:33">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="507:5" pos:end="510:16"><if pos:start="507:5" pos:end="508:25">if <condition pos:start="507:8" pos:end="507:15">(<expr pos:start="507:9" pos:end="507:14"><operator pos:start="507:9" pos:end="507:9">!</operator><name pos:start="507:10" pos:end="507:14">slash</name></expr>)</condition><block type="pseudo" pos:start="508:9" pos:end="508:25"><block_content pos:start="508:9" pos:end="508:25">
        <expr_stmt pos:start="508:9" pos:end="508:25"><expr pos:start="508:9" pos:end="508:24"><name pos:start="508:9" pos:end="508:13">slash</name> <operator pos:start="508:15" pos:end="508:15">=</operator> <name pos:start="508:17" pos:end="508:24">pathname</name></expr>;</expr_stmt></block_content></block></if>
    <else pos:start="509:5" pos:end="510:16">else<block type="pseudo" pos:start="510:9" pos:end="510:16"><block_content pos:start="510:9" pos:end="510:16">
        <expr_stmt pos:start="510:9" pos:end="510:16"><expr pos:start="510:9" pos:end="510:15"><name pos:start="510:9" pos:end="510:13">slash</name><operator pos:start="510:14" pos:end="510:15">++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt pos:start="511:5" pos:end="511:28"><expr pos:start="511:5" pos:end="511:27"><call pos:start="511:5" pos:end="511:27"><name pos:start="511:5" pos:end="511:10">strcpy</name><argument_list pos:start="511:11" pos:end="511:27">(<argument pos:start="511:12" pos:end="511:16"><expr pos:start="511:12" pos:end="511:16"><name pos:start="511:12" pos:end="511:16">slash</name></expr></argument>, <argument pos:start="511:19" pos:end="511:26"><expr pos:start="511:19" pos:end="511:26"><literal type="string" pos:start="511:19" pos:end="511:26">"ffmpeg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="513:5" pos:end="555:5">for <control pos:start="513:9" pos:end="513:35">(<init pos:start="513:10" pos:end="513:10">;</init> <condition pos:start="513:12" pos:end="513:16"><expr pos:start="513:12" pos:end="513:15"><name pos:start="513:12" pos:end="513:15">feed</name></expr>;</condition> <incr pos:start="513:18" pos:end="513:34"><expr pos:start="513:18" pos:end="513:34"><name pos:start="513:18" pos:end="513:21">feed</name> <operator pos:start="513:23" pos:end="513:23">=</operator> <name pos:start="513:25" pos:end="513:34"><name pos:start="513:25" pos:end="513:28">feed</name><operator pos:start="513:29" pos:end="513:30">-&gt;</operator><name pos:start="513:31" pos:end="513:34">next</name></name></expr></incr>)</control> <block pos:start="513:37" pos:end="555:5">{<block_content pos:start="515:9" pos:end="554:17">

        <if_stmt pos:start="515:9" pos:end="516:21"><if pos:start="515:9" pos:end="516:21">if <condition pos:start="515:12" pos:end="515:43">(<expr pos:start="515:13" pos:end="515:42"><operator pos:start="515:13" pos:end="515:13">!</operator><name pos:start="515:14" pos:end="515:29"><name pos:start="515:14" pos:end="515:17">feed</name><operator pos:start="515:18" pos:end="515:19">-&gt;</operator><name pos:start="515:20" pos:end="515:29">child_argv</name></name> <operator pos:start="515:31" pos:end="515:32">||</operator> <name pos:start="515:34" pos:end="515:42"><name pos:start="515:34" pos:end="515:37">feed</name><operator pos:start="515:38" pos:end="515:39">-&gt;</operator><name pos:start="515:40" pos:end="515:42">pid</name></name></expr>)</condition><block type="pseudo" pos:start="516:13" pos:end="516:21"><block_content pos:start="516:13" pos:end="516:21">
            <continue pos:start="516:13" pos:end="516:21">continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt pos:start="518:9" pos:end="518:34"><expr pos:start="518:9" pos:end="518:33"><name pos:start="518:9" pos:end="518:23"><name pos:start="518:9" pos:end="518:12">feed</name><operator pos:start="518:13" pos:end="518:14">-&gt;</operator><name pos:start="518:15" pos:end="518:23">pid_start</name></name> <operator pos:start="518:25" pos:end="518:25">=</operator> <call pos:start="518:27" pos:end="518:33"><name pos:start="518:27" pos:end="518:30">time</name><argument_list pos:start="518:31" pos:end="518:33">(<argument pos:start="518:32" pos:end="518:32"><expr pos:start="518:32" pos:end="518:32"><literal type="number" pos:start="518:32" pos:end="518:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="520:9" pos:end="520:27"><expr pos:start="520:9" pos:end="520:26"><name pos:start="520:9" pos:end="520:17"><name pos:start="520:9" pos:end="520:12">feed</name><operator pos:start="520:13" pos:end="520:14">-&gt;</operator><name pos:start="520:15" pos:end="520:17">pid</name></name> <operator pos:start="520:19" pos:end="520:19">=</operator> <call pos:start="520:21" pos:end="520:26"><name pos:start="520:21" pos:end="520:24">fork</name><argument_list pos:start="520:25" pos:end="520:26">()</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="521:9" pos:end="525:9"><if pos:start="521:9" pos:end="525:9">if <condition pos:start="521:12" pos:end="521:26">(<expr pos:start="521:13" pos:end="521:25"><name pos:start="521:13" pos:end="521:21"><name pos:start="521:13" pos:end="521:16">feed</name><operator pos:start="521:17" pos:end="521:18">-&gt;</operator><name pos:start="521:19" pos:end="521:21">pid</name></name> <operator pos:start="521:23" pos:end="521:23">&lt;</operator> <literal type="number" pos:start="521:25" pos:end="521:25">0</literal></expr>)</condition> <block pos:start="521:28" pos:end="525:9">{<block_content pos:start="522:13" pos:end="524:31">
            <expr_stmt pos:start="522:13" pos:end="522:73"><expr pos:start="522:13" pos:end="522:72"><call pos:start="522:13" pos:end="522:72"><name pos:start="522:13" pos:end="522:20">http_log</name><argument_list pos:start="522:21" pos:end="522:72">(<argument pos:start="522:22" pos:end="522:54"><expr pos:start="522:22" pos:end="522:54"><literal type="string" pos:start="522:22" pos:end="522:54">"Unable to create children: %s\n"</literal></expr></argument>, <argument pos:start="522:57" pos:end="522:71"><expr pos:start="522:57" pos:end="522:71"><call pos:start="522:57" pos:end="522:71"><name pos:start="522:57" pos:end="522:64">strerror</name><argument_list pos:start="522:65" pos:end="522:71">(<argument pos:start="522:66" pos:end="522:70"><expr pos:start="522:66" pos:end="522:70"><name pos:start="522:66" pos:end="522:70">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="523:13" pos:end="523:31"><expr pos:start="523:13" pos:end="523:30"><call pos:start="523:13" pos:end="523:30"><name pos:start="523:13" pos:end="523:19">av_free</name> <argument_list pos:start="523:21" pos:end="523:30">(<argument pos:start="523:22" pos:end="523:29"><expr pos:start="523:22" pos:end="523:29"><name pos:start="523:22" pos:end="523:29">pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="524:13" pos:end="524:31"><expr pos:start="524:13" pos:end="524:30"><call pos:start="524:13" pos:end="524:30"><name pos:start="524:13" pos:end="524:16">exit</name><argument_list pos:start="524:17" pos:end="524:30">(<argument pos:start="524:18" pos:end="524:29"><expr pos:start="524:18" pos:end="524:29"><name pos:start="524:18" pos:end="524:29">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="527:9" pos:end="528:21"><if pos:start="527:9" pos:end="528:21">if <condition pos:start="527:12" pos:end="527:22">(<expr pos:start="527:13" pos:end="527:21"><name pos:start="527:13" pos:end="527:21"><name pos:start="527:13" pos:end="527:16">feed</name><operator pos:start="527:17" pos:end="527:18">-&gt;</operator><name pos:start="527:19" pos:end="527:21">pid</name></name></expr>)</condition><block type="pseudo" pos:start="528:13" pos:end="528:21"><block_content pos:start="528:13" pos:end="528:21">
            <continue pos:start="528:13" pos:end="528:21">continue;</continue></block_content></block></if></if_stmt>

        <comment type="block" pos:start="530:9" pos:end="530:22">/* In child */</comment>

        <expr_stmt pos:start="532:9" pos:end="532:42"><expr pos:start="532:9" pos:end="532:41"><call pos:start="532:9" pos:end="532:41"><name pos:start="532:9" pos:end="532:16">http_log</name><argument_list pos:start="532:17" pos:end="532:41">(<argument pos:start="532:18" pos:end="532:40"><expr pos:start="532:18" pos:end="532:40"><literal type="string" pos:start="532:18" pos:end="532:40">"Launch command line: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="533:9" pos:end="533:34"><expr pos:start="533:9" pos:end="533:33"><call pos:start="533:9" pos:end="533:33"><name pos:start="533:9" pos:end="533:16">http_log</name><argument_list pos:start="533:17" pos:end="533:33">(<argument pos:start="533:18" pos:end="533:22"><expr pos:start="533:18" pos:end="533:22"><literal type="string" pos:start="533:18" pos:end="533:22">"%s "</literal></expr></argument>, <argument pos:start="533:25" pos:end="533:32"><expr pos:start="533:25" pos:end="533:32"><name pos:start="533:25" pos:end="533:32">pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="535:9" pos:end="536:49">for <control pos:start="535:13" pos:end="535:71">(<init pos:start="535:14" pos:end="535:19"><expr pos:start="535:14" pos:end="535:18"><name pos:start="535:14" pos:end="535:14">i</name> <operator pos:start="535:16" pos:end="535:16">=</operator> <literal type="number" pos:start="535:18" pos:end="535:18">1</literal></expr>;</init> <condition pos:start="535:21" pos:end="535:66"><expr pos:start="535:21" pos:end="535:65"><name pos:start="535:21" pos:end="535:39"><name pos:start="535:21" pos:end="535:24">feed</name><operator pos:start="535:25" pos:end="535:26">-&gt;</operator><name pos:start="535:27" pos:end="535:36">child_argv</name><index pos:start="535:37" pos:end="535:39">[<expr pos:start="535:38" pos:end="535:38"><name pos:start="535:38" pos:end="535:38">i</name></expr>]</index></name> <operator pos:start="535:41" pos:end="535:42">&amp;&amp;</operator> <name pos:start="535:44" pos:end="535:65"><name pos:start="535:44" pos:end="535:47">feed</name><operator pos:start="535:48" pos:end="535:49">-&gt;</operator><name pos:start="535:50" pos:end="535:59">child_argv</name><index pos:start="535:60" pos:end="535:62">[<expr pos:start="535:61" pos:end="535:61"><name pos:start="535:61" pos:end="535:61">i</name></expr>]</index><index pos:start="535:63" pos:end="535:65">[<expr pos:start="535:64" pos:end="535:64"><literal type="number" pos:start="535:64" pos:end="535:64">0</literal></expr>]</index></name></expr>;</condition> <incr pos:start="535:68" pos:end="535:70"><expr pos:start="535:68" pos:end="535:70"><name pos:start="535:68" pos:end="535:68">i</name><operator pos:start="535:69" pos:end="535:70">++</operator></expr></incr>)</control><block type="pseudo" pos:start="536:13" pos:end="536:49"><block_content pos:start="536:13" pos:end="536:49">
            <expr_stmt pos:start="536:13" pos:end="536:49"><expr pos:start="536:13" pos:end="536:48"><call pos:start="536:13" pos:end="536:48"><name pos:start="536:13" pos:end="536:20">http_log</name><argument_list pos:start="536:21" pos:end="536:48">(<argument pos:start="536:22" pos:end="536:26"><expr pos:start="536:22" pos:end="536:26"><literal type="string" pos:start="536:22" pos:end="536:26">"%s "</literal></expr></argument>, <argument pos:start="536:29" pos:end="536:47"><expr pos:start="536:29" pos:end="536:47"><name pos:start="536:29" pos:end="536:47"><name pos:start="536:29" pos:end="536:32">feed</name><operator pos:start="536:33" pos:end="536:34">-&gt;</operator><name pos:start="536:35" pos:end="536:44">child_argv</name><index pos:start="536:45" pos:end="536:47">[<expr pos:start="536:46" pos:end="536:46"><name pos:start="536:46" pos:end="536:46">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt pos:start="537:9" pos:end="537:23"><expr pos:start="537:9" pos:end="537:22"><call pos:start="537:9" pos:end="537:22"><name pos:start="537:9" pos:end="537:16">http_log</name><argument_list pos:start="537:17" pos:end="537:22">(<argument pos:start="537:18" pos:end="537:21"><expr pos:start="537:18" pos:end="537:21"><literal type="string" pos:start="537:18" pos:end="537:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="539:9" pos:end="540:21">for <control pos:start="539:13" pos:end="539:33">(<init pos:start="539:14" pos:end="539:19"><expr pos:start="539:14" pos:end="539:18"><name pos:start="539:14" pos:end="539:14">i</name> <operator pos:start="539:16" pos:end="539:16">=</operator> <literal type="number" pos:start="539:18" pos:end="539:18">3</literal></expr>;</init> <condition pos:start="539:21" pos:end="539:28"><expr pos:start="539:21" pos:end="539:27"><name pos:start="539:21" pos:end="539:21">i</name> <operator pos:start="539:23" pos:end="539:23">&lt;</operator> <literal type="number" pos:start="539:25" pos:end="539:27">256</literal></expr>;</condition> <incr pos:start="539:30" pos:end="539:32"><expr pos:start="539:30" pos:end="539:32"><name pos:start="539:30" pos:end="539:30">i</name><operator pos:start="539:31" pos:end="539:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="540:13" pos:end="540:21"><block_content pos:start="540:13" pos:end="540:21">
            <expr_stmt pos:start="540:13" pos:end="540:21"><expr pos:start="540:13" pos:end="540:20"><call pos:start="540:13" pos:end="540:20"><name pos:start="540:13" pos:end="540:17">close</name><argument_list pos:start="540:18" pos:end="540:20">(<argument pos:start="540:19" pos:end="540:19"><expr pos:start="540:19" pos:end="540:19"><name pos:start="540:19" pos:end="540:19">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <if_stmt pos:start="542:9" pos:end="549:9"><if pos:start="542:9" pos:end="549:9">if <condition pos:start="542:12" pos:end="542:26">(<expr pos:start="542:13" pos:end="542:25"><operator pos:start="542:13" pos:end="542:13">!</operator><name pos:start="542:14" pos:end="542:25"><name pos:start="542:14" pos:end="542:19">config</name><operator pos:start="542:20" pos:end="542:20">.</operator><name pos:start="542:21" pos:end="542:25">debug</name></name></expr>)</condition> <block pos:start="542:28" pos:end="549:9">{<block_content pos:start="543:13" pos:end="548:70">
            <if_stmt pos:start="543:13" pos:end="544:69"><if pos:start="543:13" pos:end="544:69">if <condition pos:start="543:16" pos:end="543:50">(<expr pos:start="543:17" pos:end="543:49"><operator pos:start="543:17" pos:end="543:17">!</operator><call pos:start="543:18" pos:end="543:49"><name pos:start="543:18" pos:end="543:24">freopen</name><argument_list pos:start="543:25" pos:end="543:49">(<argument pos:start="543:26" pos:end="543:36"><expr pos:start="543:26" pos:end="543:36"><literal type="string" pos:start="543:26" pos:end="543:36">"/dev/null"</literal></expr></argument>, <argument pos:start="543:39" pos:end="543:41"><expr pos:start="543:39" pos:end="543:41"><literal type="string" pos:start="543:39" pos:end="543:41">"r"</literal></expr></argument>, <argument pos:start="543:44" pos:end="543:48"><expr pos:start="543:44" pos:end="543:48"><name pos:start="543:44" pos:end="543:48">stdin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="544:17" pos:end="544:69"><block_content pos:start="544:17" pos:end="544:69">
                <expr_stmt pos:start="544:17" pos:end="544:69"><expr pos:start="544:17" pos:end="544:68"><call pos:start="544:17" pos:end="544:68"><name pos:start="544:17" pos:end="544:24">http_log</name><argument_list pos:start="544:25" pos:end="544:68">(<argument pos:start="544:26" pos:end="544:67"><expr pos:start="544:26" pos:end="544:67"><literal type="string" pos:start="544:26" pos:end="544:67">"failed to redirect STDIN to /dev/null\n;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt pos:start="545:13" pos:end="546:70"><if pos:start="545:13" pos:end="546:70">if <condition pos:start="545:16" pos:end="545:51">(<expr pos:start="545:17" pos:end="545:50"><operator pos:start="545:17" pos:end="545:17">!</operator><call pos:start="545:18" pos:end="545:50"><name pos:start="545:18" pos:end="545:24">freopen</name><argument_list pos:start="545:25" pos:end="545:50">(<argument pos:start="545:26" pos:end="545:36"><expr pos:start="545:26" pos:end="545:36"><literal type="string" pos:start="545:26" pos:end="545:36">"/dev/null"</literal></expr></argument>, <argument pos:start="545:39" pos:end="545:41"><expr pos:start="545:39" pos:end="545:41"><literal type="string" pos:start="545:39" pos:end="545:41">"w"</literal></expr></argument>, <argument pos:start="545:44" pos:end="545:49"><expr pos:start="545:44" pos:end="545:49"><name pos:start="545:44" pos:end="545:49">stdout</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="546:17" pos:end="546:70"><block_content pos:start="546:17" pos:end="546:70">
                <expr_stmt pos:start="546:17" pos:end="546:70"><expr pos:start="546:17" pos:end="546:69"><call pos:start="546:17" pos:end="546:69"><name pos:start="546:17" pos:end="546:24">http_log</name><argument_list pos:start="546:25" pos:end="546:69">(<argument pos:start="546:26" pos:end="546:68"><expr pos:start="546:26" pos:end="546:68"><literal type="string" pos:start="546:26" pos:end="546:68">"failed to redirect STDOUT to /dev/null\n;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt pos:start="547:13" pos:end="548:70"><if pos:start="547:13" pos:end="548:70">if <condition pos:start="547:16" pos:end="547:51">(<expr pos:start="547:17" pos:end="547:50"><operator pos:start="547:17" pos:end="547:17">!</operator><call pos:start="547:18" pos:end="547:50"><name pos:start="547:18" pos:end="547:24">freopen</name><argument_list pos:start="547:25" pos:end="547:50">(<argument pos:start="547:26" pos:end="547:36"><expr pos:start="547:26" pos:end="547:36"><literal type="string" pos:start="547:26" pos:end="547:36">"/dev/null"</literal></expr></argument>, <argument pos:start="547:39" pos:end="547:41"><expr pos:start="547:39" pos:end="547:41"><literal type="string" pos:start="547:39" pos:end="547:41">"w"</literal></expr></argument>, <argument pos:start="547:44" pos:end="547:49"><expr pos:start="547:44" pos:end="547:49"><name pos:start="547:44" pos:end="547:49">stderr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="548:17" pos:end="548:70"><block_content pos:start="548:17" pos:end="548:70">
                <expr_stmt pos:start="548:17" pos:end="548:70"><expr pos:start="548:17" pos:end="548:69"><call pos:start="548:17" pos:end="548:69"><name pos:start="548:17" pos:end="548:24">http_log</name><argument_list pos:start="548:25" pos:end="548:69">(<argument pos:start="548:26" pos:end="548:68"><expr pos:start="548:26" pos:end="548:68"><literal type="string" pos:start="548:26" pos:end="548:68">"failed to redirect STDERR to /dev/null\n;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="551:9" pos:end="551:33"><expr pos:start="551:9" pos:end="551:32"><call pos:start="551:9" pos:end="551:32"><name pos:start="551:9" pos:end="551:14">signal</name><argument_list pos:start="551:15" pos:end="551:32">(<argument pos:start="551:16" pos:end="551:22"><expr pos:start="551:16" pos:end="551:22"><name pos:start="551:16" pos:end="551:22">SIGPIPE</name></expr></argument>, <argument pos:start="551:25" pos:end="551:31"><expr pos:start="551:25" pos:end="551:31"><name pos:start="551:25" pos:end="551:31">SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="552:9" pos:end="552:43"><expr pos:start="552:9" pos:end="552:42"><call pos:start="552:9" pos:end="552:42"><name pos:start="552:9" pos:end="552:14">execvp</name><argument_list pos:start="552:15" pos:end="552:42">(<argument pos:start="552:16" pos:end="552:23"><expr pos:start="552:16" pos:end="552:23"><name pos:start="552:16" pos:end="552:23">pathname</name></expr></argument>, <argument pos:start="552:26" pos:end="552:41"><expr pos:start="552:26" pos:end="552:41"><name pos:start="552:26" pos:end="552:41"><name pos:start="552:26" pos:end="552:29">feed</name><operator pos:start="552:30" pos:end="552:31">-&gt;</operator><name pos:start="552:32" pos:end="552:41">child_argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="553:9" pos:end="553:27"><expr pos:start="553:9" pos:end="553:26"><call pos:start="553:9" pos:end="553:26"><name pos:start="553:9" pos:end="553:15">av_free</name> <argument_list pos:start="553:17" pos:end="553:26">(<argument pos:start="553:18" pos:end="553:25"><expr pos:start="553:18" pos:end="553:25"><name pos:start="553:18" pos:end="553:25">pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="554:9" pos:end="554:17"><expr pos:start="554:9" pos:end="554:16"><call pos:start="554:9" pos:end="554:16"><name pos:start="554:9" pos:end="554:13">_exit</name><argument_list pos:start="554:14" pos:end="554:16">(<argument pos:start="554:15" pos:end="554:15"><expr pos:start="554:15" pos:end="554:15"><literal type="number" pos:start="554:15" pos:end="554:15">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="556:5" pos:end="556:23"><expr pos:start="556:5" pos:end="556:22"><call pos:start="556:5" pos:end="556:22"><name pos:start="556:5" pos:end="556:11">av_free</name> <argument_list pos:start="556:13" pos:end="556:22">(<argument pos:start="556:14" pos:end="556:21"><expr pos:start="556:14" pos:end="556:21"><name pos:start="556:14" pos:end="556:21">pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="559:1" pos:end="559:29">/* open a listening socket */</comment>
<function pos:start="560:1" pos:end="596:1"><type pos:start="560:1" pos:end="560:10"><specifier pos:start="560:1" pos:end="560:6">static</specifier> <name pos:start="560:8" pos:end="560:10">int</name></type> <name pos:start="560:12" pos:end="560:29">socket_open_listen</name><parameter_list pos:start="560:30" pos:end="560:58">(<parameter pos:start="560:31" pos:end="560:57"><decl pos:start="560:31" pos:end="560:57"><type pos:start="560:31" pos:end="560:57"><name pos:start="560:31" pos:end="560:48"><name pos:start="560:31" pos:end="560:36">struct</name> <name pos:start="560:38" pos:end="560:48">sockaddr_in</name></name> <modifier pos:start="560:50" pos:end="560:50">*</modifier></type><name pos:start="560:51" pos:end="560:57">my_addr</name></decl></parameter>)</parameter_list>
<block pos:start="561:1" pos:end="596:1">{<block_content pos:start="562:5" pos:end="595:14">
    <decl_stmt pos:start="562:5" pos:end="562:23"><decl pos:start="562:5" pos:end="562:17"><type pos:start="562:5" pos:end="562:7"><name pos:start="562:5" pos:end="562:7">int</name></type> <name pos:start="562:9" pos:end="562:17">server_fd</name></decl>, <decl pos:start="562:20" pos:end="562:22"><type ref="prev" pos:start="562:5" pos:end="562:7"/><name pos:start="562:20" pos:end="562:22">tmp</name></decl>;</decl_stmt>

    <expr_stmt pos:start="564:5" pos:end="564:46"><expr pos:start="564:5" pos:end="564:45"><name pos:start="564:5" pos:end="564:13">server_fd</name> <operator pos:start="564:15" pos:end="564:15">=</operator> <call pos:start="564:17" pos:end="564:45"><name pos:start="564:17" pos:end="564:22">socket</name><argument_list pos:start="564:23" pos:end="564:45">(<argument pos:start="564:24" pos:end="564:30"><expr pos:start="564:24" pos:end="564:30"><name pos:start="564:24" pos:end="564:30">AF_INET</name></expr></argument>,<argument pos:start="564:32" pos:end="564:42"><expr pos:start="564:32" pos:end="564:42"><name pos:start="564:32" pos:end="564:42">SOCK_STREAM</name></expr></argument>,<argument pos:start="564:44" pos:end="564:44"><expr pos:start="564:44" pos:end="564:44"><literal type="number" pos:start="564:44" pos:end="564:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="565:5" pos:end="568:5"><if pos:start="565:5" pos:end="568:5">if <condition pos:start="565:8" pos:end="565:22">(<expr pos:start="565:9" pos:end="565:21"><name pos:start="565:9" pos:end="565:17">server_fd</name> <operator pos:start="565:19" pos:end="565:19">&lt;</operator> <literal type="number" pos:start="565:21" pos:end="565:21">0</literal></expr>)</condition> <block pos:start="565:24" pos:end="568:5">{<block_content pos:start="566:9" pos:end="567:18">
        <expr_stmt pos:start="566:9" pos:end="566:26"><expr pos:start="566:9" pos:end="566:25"><call pos:start="566:9" pos:end="566:25"><name pos:start="566:9" pos:end="566:14">perror</name> <argument_list pos:start="566:16" pos:end="566:25">(<argument pos:start="566:17" pos:end="566:24"><expr pos:start="566:17" pos:end="566:24"><literal type="string" pos:start="566:17" pos:end="566:24">"socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="567:9" pos:end="567:18">return <expr pos:start="567:16" pos:end="567:17"><operator pos:start="567:16" pos:end="567:16">-</operator><literal type="number" pos:start="567:17" pos:end="567:17">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="570:5" pos:end="570:12"><expr pos:start="570:5" pos:end="570:11"><name pos:start="570:5" pos:end="570:7">tmp</name> <operator pos:start="570:9" pos:end="570:9">=</operator> <literal type="number" pos:start="570:11" pos:end="570:11">1</literal></expr>;</expr_stmt>
    <if_stmt pos:start="571:5" pos:end="572:73"><if pos:start="571:5" pos:end="572:73">if <condition pos:start="571:8" pos:end="571:75">(<expr pos:start="571:9" pos:end="571:74"><call pos:start="571:9" pos:end="571:74"><name pos:start="571:9" pos:end="571:18">setsockopt</name><argument_list pos:start="571:19" pos:end="571:74">(<argument pos:start="571:20" pos:end="571:28"><expr pos:start="571:20" pos:end="571:28"><name pos:start="571:20" pos:end="571:28">server_fd</name></expr></argument>, <argument pos:start="571:31" pos:end="571:40"><expr pos:start="571:31" pos:end="571:40"><name pos:start="571:31" pos:end="571:40">SOL_SOCKET</name></expr></argument>, <argument pos:start="571:43" pos:end="571:54"><expr pos:start="571:43" pos:end="571:54"><name pos:start="571:43" pos:end="571:54">SO_REUSEADDR</name></expr></argument>, <argument pos:start="571:57" pos:end="571:60"><expr pos:start="571:57" pos:end="571:60"><operator pos:start="571:57" pos:end="571:57">&amp;</operator><name pos:start="571:58" pos:end="571:60">tmp</name></expr></argument>, <argument pos:start="571:63" pos:end="571:73"><expr pos:start="571:63" pos:end="571:73"><sizeof pos:start="571:63" pos:end="571:73">sizeof<argument_list pos:start="571:69" pos:end="571:73">(<argument pos:start="571:70" pos:end="571:72"><expr pos:start="571:70" pos:end="571:72"><name pos:start="571:70" pos:end="571:72">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="572:9" pos:end="572:73"><block_content pos:start="572:9" pos:end="572:73">
        <expr_stmt pos:start="572:9" pos:end="572:73"><expr pos:start="572:9" pos:end="572:72"><call pos:start="572:9" pos:end="572:72"><name pos:start="572:9" pos:end="572:14">av_log</name><argument_list pos:start="572:15" pos:end="572:72">(<argument pos:start="572:16" pos:end="572:19"><expr pos:start="572:16" pos:end="572:19"><name pos:start="572:16" pos:end="572:19">NULL</name></expr></argument>, <argument pos:start="572:22" pos:end="572:35"><expr pos:start="572:22" pos:end="572:35"><name pos:start="572:22" pos:end="572:35">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="572:38" pos:end="572:71"><expr pos:start="572:38" pos:end="572:71"><literal type="string" pos:start="572:38" pos:end="572:71">"setsockopt SO_REUSEADDR failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="574:5" pos:end="574:34"><expr pos:start="574:5" pos:end="574:33"><name pos:start="574:5" pos:end="574:23"><name pos:start="574:5" pos:end="574:11">my_addr</name><operator pos:start="574:12" pos:end="574:13">-&gt;</operator><name pos:start="574:14" pos:end="574:23">sin_family</name></name> <operator pos:start="574:25" pos:end="574:25">=</operator> <name pos:start="574:27" pos:end="574:33">AF_INET</name></expr>;</expr_stmt>
    <if_stmt pos:start="575:5" pos:end="581:5"><if pos:start="575:5" pos:end="581:5">if <condition pos:start="575:8" pos:end="575:77">(<expr pos:start="575:9" pos:end="575:76"><call pos:start="575:9" pos:end="575:72"><name pos:start="575:9" pos:end="575:12">bind</name> <argument_list pos:start="575:14" pos:end="575:72">(<argument pos:start="575:15" pos:end="575:23"><expr pos:start="575:15" pos:end="575:23"><name pos:start="575:15" pos:end="575:23">server_fd</name></expr></argument>, <argument pos:start="575:26" pos:end="575:52"><expr pos:start="575:26" pos:end="575:52"><operator pos:start="575:26" pos:end="575:26">(</operator>struct <name pos:start="575:34" pos:end="575:41">sockaddr</name> <operator pos:start="575:43" pos:end="575:43">*</operator><operator pos:start="575:44" pos:end="575:44">)</operator> <name pos:start="575:46" pos:end="575:52">my_addr</name></expr></argument>, <argument pos:start="575:55" pos:end="575:71"><expr pos:start="575:55" pos:end="575:71"><sizeof pos:start="575:55" pos:end="575:71">sizeof <argument_list pos:start="575:62" pos:end="575:71">(<argument pos:start="575:63" pos:end="575:70"><expr pos:start="575:63" pos:end="575:70"><operator pos:start="575:63" pos:end="575:63">*</operator><name pos:start="575:64" pos:end="575:70">my_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="575:74" pos:end="575:74">&lt;</operator> <literal type="number" pos:start="575:76" pos:end="575:76">0</literal></expr>)</condition> <block pos:start="575:79" pos:end="581:5">{<block_content pos:start="576:9" pos:end="580:18">
        <decl_stmt pos:start="576:9" pos:end="576:25"><decl pos:start="576:9" pos:end="576:24"><type pos:start="576:9" pos:end="576:12"><name pos:start="576:9" pos:end="576:12">char</name></type> <name pos:start="576:14" pos:end="576:24"><name pos:start="576:14" pos:end="576:20">bindmsg</name><index pos:start="576:21" pos:end="576:24">[<expr pos:start="576:22" pos:end="576:23"><literal type="number" pos:start="576:22" pos:end="576:23">32</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt pos:start="577:9" pos:end="578:43"><expr pos:start="577:9" pos:end="578:42"><call pos:start="577:9" pos:end="578:42"><name pos:start="577:9" pos:end="577:16">snprintf</name><argument_list pos:start="577:17" pos:end="578:42">(<argument pos:start="577:18" pos:end="577:24"><expr pos:start="577:18" pos:end="577:24"><name pos:start="577:18" pos:end="577:24">bindmsg</name></expr></argument>, <argument pos:start="577:27" pos:end="577:41"><expr pos:start="577:27" pos:end="577:41"><sizeof pos:start="577:27" pos:end="577:41">sizeof<argument_list pos:start="577:33" pos:end="577:41">(<argument pos:start="577:34" pos:end="577:40"><expr pos:start="577:34" pos:end="577:40"><name pos:start="577:34" pos:end="577:40">bindmsg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="577:44" pos:end="577:58"><expr pos:start="577:44" pos:end="577:58"><literal type="string" pos:start="577:44" pos:end="577:58">"bind(port %d)"</literal></expr></argument>,
                 <argument pos:start="578:18" pos:end="578:41"><expr pos:start="578:18" pos:end="578:41"><call pos:start="578:18" pos:end="578:41"><name pos:start="578:18" pos:end="578:22">ntohs</name><argument_list pos:start="578:23" pos:end="578:41">(<argument pos:start="578:24" pos:end="578:40"><expr pos:start="578:24" pos:end="578:40"><name pos:start="578:24" pos:end="578:40"><name pos:start="578:24" pos:end="578:30">my_addr</name><operator pos:start="578:31" pos:end="578:32">-&gt;</operator><name pos:start="578:33" pos:end="578:40">sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="579:9" pos:end="579:25"><expr pos:start="579:9" pos:end="579:24"><call pos:start="579:9" pos:end="579:24"><name pos:start="579:9" pos:end="579:14">perror</name> <argument_list pos:start="579:16" pos:end="579:24">(<argument pos:start="579:17" pos:end="579:23"><expr pos:start="579:17" pos:end="579:23"><name pos:start="579:17" pos:end="579:23">bindmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="580:9" pos:end="580:18">goto <name pos:start="580:14" pos:end="580:17">fail</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="583:5" pos:end="586:5"><if pos:start="583:5" pos:end="586:5">if <condition pos:start="583:8" pos:end="583:34">(<expr pos:start="583:9" pos:end="583:33"><call pos:start="583:9" pos:end="583:29"><name pos:start="583:9" pos:end="583:14">listen</name> <argument_list pos:start="583:16" pos:end="583:29">(<argument pos:start="583:17" pos:end="583:25"><expr pos:start="583:17" pos:end="583:25"><name pos:start="583:17" pos:end="583:25">server_fd</name></expr></argument>, <argument pos:start="583:28" pos:end="583:28"><expr pos:start="583:28" pos:end="583:28"><literal type="number" pos:start="583:28" pos:end="583:28">5</literal></expr></argument>)</argument_list></call> <operator pos:start="583:31" pos:end="583:31">&lt;</operator> <literal type="number" pos:start="583:33" pos:end="583:33">0</literal></expr>)</condition> <block pos:start="583:36" pos:end="586:5">{<block_content pos:start="584:9" pos:end="585:18">
        <expr_stmt pos:start="584:9" pos:end="584:26"><expr pos:start="584:9" pos:end="584:25"><call pos:start="584:9" pos:end="584:25"><name pos:start="584:9" pos:end="584:14">perror</name> <argument_list pos:start="584:16" pos:end="584:25">(<argument pos:start="584:17" pos:end="584:24"><expr pos:start="584:17" pos:end="584:24"><literal type="string" pos:start="584:17" pos:end="584:24">"listen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="585:9" pos:end="585:18">goto <name pos:start="585:14" pos:end="585:17">fail</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="588:5" pos:end="589:68"><if pos:start="588:5" pos:end="589:68">if <condition pos:start="588:8" pos:end="588:45">(<expr pos:start="588:9" pos:end="588:44"><call pos:start="588:9" pos:end="588:40"><name pos:start="588:9" pos:end="588:26">ff_socket_nonblock</name><argument_list pos:start="588:27" pos:end="588:40">(<argument pos:start="588:28" pos:end="588:36"><expr pos:start="588:28" pos:end="588:36"><name pos:start="588:28" pos:end="588:36">server_fd</name></expr></argument>, <argument pos:start="588:39" pos:end="588:39"><expr pos:start="588:39" pos:end="588:39"><literal type="number" pos:start="588:39" pos:end="588:39">1</literal></expr></argument>)</argument_list></call> <operator pos:start="588:42" pos:end="588:42">&lt;</operator> <literal type="number" pos:start="588:44" pos:end="588:44">0</literal></expr>)</condition><block type="pseudo" pos:start="589:9" pos:end="589:68"><block_content pos:start="589:9" pos:end="589:68">
        <expr_stmt pos:start="589:9" pos:end="589:68"><expr pos:start="589:9" pos:end="589:67"><call pos:start="589:9" pos:end="589:67"><name pos:start="589:9" pos:end="589:14">av_log</name><argument_list pos:start="589:15" pos:end="589:67">(<argument pos:start="589:16" pos:end="589:19"><expr pos:start="589:16" pos:end="589:19"><name pos:start="589:16" pos:end="589:19">NULL</name></expr></argument>, <argument pos:start="589:22" pos:end="589:35"><expr pos:start="589:22" pos:end="589:35"><name pos:start="589:22" pos:end="589:35">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="589:38" pos:end="589:66"><expr pos:start="589:38" pos:end="589:66"><literal type="string" pos:start="589:38" pos:end="589:66">"ff_socket_nonblock failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="591:5" pos:end="591:21">return <expr pos:start="591:12" pos:end="591:20"><name pos:start="591:12" pos:end="591:20">server_fd</name></expr>;</return>

<label pos:start="593:1" pos:end="593:5"><name pos:start="593:1" pos:end="593:4">fail</name>:</label>
    <expr_stmt pos:start="594:5" pos:end="594:27"><expr pos:start="594:5" pos:end="594:26"><call pos:start="594:5" pos:end="594:26"><name pos:start="594:5" pos:end="594:15">closesocket</name><argument_list pos:start="594:16" pos:end="594:26">(<argument pos:start="594:17" pos:end="594:25"><expr pos:start="594:17" pos:end="594:25"><name pos:start="594:17" pos:end="594:25">server_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="595:5" pos:end="595:14">return <expr pos:start="595:12" pos:end="595:13"><operator pos:start="595:12" pos:end="595:12">-</operator><literal type="number" pos:start="595:13" pos:end="595:13">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="598:1" pos:end="598:33">/* start all multicast streams */</comment>
<function pos:start="599:1" pos:end="656:1"><type pos:start="599:1" pos:end="599:11"><specifier pos:start="599:1" pos:end="599:6">static</specifier> <name pos:start="599:8" pos:end="599:11">void</name></type> <name pos:start="599:13" pos:end="599:27">start_multicast</name><parameter_list pos:start="599:28" pos:end="599:33">(<parameter pos:start="599:29" pos:end="599:32"><decl pos:start="599:29" pos:end="599:32"><type pos:start="599:29" pos:end="599:32"><name pos:start="599:29" pos:end="599:32">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="600:1" pos:end="656:1">{<block_content pos:start="601:5" pos:end="655:5">
    <decl_stmt pos:start="601:5" pos:end="601:27"><decl pos:start="601:5" pos:end="601:26"><type pos:start="601:5" pos:end="601:20"><name pos:start="601:5" pos:end="601:18">FFServerStream</name> <modifier pos:start="601:20" pos:end="601:20">*</modifier></type><name pos:start="601:21" pos:end="601:26">stream</name></decl>;</decl_stmt>
    <decl_stmt pos:start="602:5" pos:end="602:24"><decl pos:start="602:5" pos:end="602:23"><type pos:start="602:5" pos:end="602:8"><name pos:start="602:5" pos:end="602:8">char</name></type> <name pos:start="602:10" pos:end="602:23"><name pos:start="602:10" pos:end="602:19">session_id</name><index pos:start="602:20" pos:end="602:23">[<expr pos:start="602:21" pos:end="602:22"><literal type="number" pos:start="602:21" pos:end="602:22">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="603:5" pos:end="603:23"><decl pos:start="603:5" pos:end="603:22"><type pos:start="603:5" pos:end="603:17"><name pos:start="603:5" pos:end="603:15">HTTPContext</name> <modifier pos:start="603:17" pos:end="603:17">*</modifier></type><name pos:start="603:18" pos:end="603:22">rtp_c</name></decl>;</decl_stmt>
    <decl_stmt pos:start="604:5" pos:end="604:39"><decl pos:start="604:5" pos:end="604:38"><type pos:start="604:5" pos:end="604:22"><name pos:start="604:5" pos:end="604:22"><name pos:start="604:5" pos:end="604:10">struct</name> <name pos:start="604:12" pos:end="604:22">sockaddr_in</name></name></type> <name pos:start="604:24" pos:end="604:32">dest_addr</name> <init pos:start="604:34" pos:end="604:38">= <expr pos:start="604:36" pos:end="604:38"><block pos:start="604:36" pos:end="604:38">{<expr pos:start="604:37" pos:end="604:37"><literal type="number" pos:start="604:37" pos:end="604:37">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="605:5" pos:end="605:35"><decl pos:start="605:5" pos:end="605:20"><type pos:start="605:5" pos:end="605:7"><name pos:start="605:5" pos:end="605:7">int</name></type> <name pos:start="605:9" pos:end="605:20">default_port</name></decl>, <decl pos:start="605:23" pos:end="605:34"><type ref="prev" pos:start="605:5" pos:end="605:7"/><name pos:start="605:23" pos:end="605:34">stream_index</name></decl>;</decl_stmt>
    <decl_stmt pos:start="606:5" pos:end="606:34"><decl pos:start="606:5" pos:end="606:24"><type pos:start="606:5" pos:end="606:16"><name pos:start="606:5" pos:end="606:12">unsigned</name> <name pos:start="606:14" pos:end="606:16">int</name></type> <name pos:start="606:18" pos:end="606:24">random0</name></decl>, <decl pos:start="606:27" pos:end="606:33"><type ref="prev" pos:start="606:5" pos:end="606:16"/><name pos:start="606:27" pos:end="606:33">random1</name></decl>;</decl_stmt>

    <expr_stmt pos:start="608:5" pos:end="608:24"><expr pos:start="608:5" pos:end="608:23"><name pos:start="608:5" pos:end="608:16">default_port</name> <operator pos:start="608:18" pos:end="608:18">=</operator> <literal type="number" pos:start="608:20" pos:end="608:23">6000</literal></expr>;</expr_stmt>
    <for pos:start="609:5" pos:end="655:5">for<control pos:start="609:8" pos:end="609:68">(<init pos:start="609:9" pos:end="609:37"><expr pos:start="609:9" pos:end="609:36"><name pos:start="609:9" pos:end="609:14">stream</name> <operator pos:start="609:16" pos:end="609:16">=</operator> <name pos:start="609:18" pos:end="609:36"><name pos:start="609:18" pos:end="609:23">config</name><operator pos:start="609:24" pos:end="609:24">.</operator><name pos:start="609:25" pos:end="609:36">first_stream</name></name></expr>;</init> <condition pos:start="609:39" pos:end="609:45"><expr pos:start="609:39" pos:end="609:44"><name pos:start="609:39" pos:end="609:44">stream</name></expr>;</condition> <incr pos:start="609:47" pos:end="609:67"><expr pos:start="609:47" pos:end="609:67"><name pos:start="609:47" pos:end="609:52">stream</name> <operator pos:start="609:54" pos:end="609:54">=</operator> <name pos:start="609:56" pos:end="609:67"><name pos:start="609:56" pos:end="609:61">stream</name><operator pos:start="609:62" pos:end="609:63">-&gt;</operator><name pos:start="609:64" pos:end="609:67">next</name></name></expr></incr>)</control> <block pos:start="609:70" pos:end="655:5">{<block_content pos:start="611:9" pos:end="654:43">

        <if_stmt pos:start="611:9" pos:end="612:21"><if pos:start="611:9" pos:end="612:21">if <condition pos:start="611:12" pos:end="611:34">(<expr pos:start="611:13" pos:end="611:33"><operator pos:start="611:13" pos:end="611:13">!</operator><name pos:start="611:14" pos:end="611:33"><name pos:start="611:14" pos:end="611:19">stream</name><operator pos:start="611:20" pos:end="611:21">-&gt;</operator><name pos:start="611:22" pos:end="611:33">is_multicast</name></name></expr>)</condition><block type="pseudo" pos:start="612:13" pos:end="612:21"><block_content pos:start="612:13" pos:end="612:21">
            <continue pos:start="612:13" pos:end="612:21">continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt pos:start="614:9" pos:end="614:44"><expr pos:start="614:9" pos:end="614:43"><name pos:start="614:9" pos:end="614:15">random0</name> <operator pos:start="614:17" pos:end="614:17">=</operator> <call pos:start="614:19" pos:end="614:43"><name pos:start="614:19" pos:end="614:28">av_lfg_get</name><argument_list pos:start="614:29" pos:end="614:43">(<argument pos:start="614:30" pos:end="614:42"><expr pos:start="614:30" pos:end="614:42"><operator pos:start="614:30" pos:end="614:30">&amp;</operator><name pos:start="614:31" pos:end="614:42">random_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="615:9" pos:end="615:44"><expr pos:start="615:9" pos:end="615:43"><name pos:start="615:9" pos:end="615:15">random1</name> <operator pos:start="615:17" pos:end="615:17">=</operator> <call pos:start="615:19" pos:end="615:43"><name pos:start="615:19" pos:end="615:28">av_lfg_get</name><argument_list pos:start="615:29" pos:end="615:43">(<argument pos:start="615:30" pos:end="615:42"><expr pos:start="615:30" pos:end="615:42"><operator pos:start="615:30" pos:end="615:30">&amp;</operator><name pos:start="615:31" pos:end="615:42">random_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="617:9" pos:end="617:37">/* open the RTP connection */</comment>
        <expr_stmt pos:start="618:9" pos:end="618:79"><expr pos:start="618:9" pos:end="618:78"><call pos:start="618:9" pos:end="618:78"><name pos:start="618:9" pos:end="618:16">snprintf</name><argument_list pos:start="618:17" pos:end="618:78">(<argument pos:start="618:18" pos:end="618:27"><expr pos:start="618:18" pos:end="618:27"><name pos:start="618:18" pos:end="618:27">session_id</name></expr></argument>, <argument pos:start="618:30" pos:end="618:47"><expr pos:start="618:30" pos:end="618:47"><sizeof pos:start="618:30" pos:end="618:47">sizeof<argument_list pos:start="618:36" pos:end="618:47">(<argument pos:start="618:37" pos:end="618:46"><expr pos:start="618:37" pos:end="618:46"><name pos:start="618:37" pos:end="618:46">session_id</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="618:50" pos:end="618:59"><expr pos:start="618:50" pos:end="618:59"><literal type="string" pos:start="618:50" pos:end="618:59">"%08x%08x"</literal></expr></argument>, <argument pos:start="618:62" pos:end="618:68"><expr pos:start="618:62" pos:end="618:68"><name pos:start="618:62" pos:end="618:68">random0</name></expr></argument>, <argument pos:start="618:71" pos:end="618:77"><expr pos:start="618:71" pos:end="618:77"><name pos:start="618:71" pos:end="618:77">random1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="620:9" pos:end="620:41">/* choose a port if none given */</comment>
        <if_stmt pos:start="621:9" pos:end="624:9"><if pos:start="621:9" pos:end="624:9">if <condition pos:start="621:12" pos:end="621:40">(<expr pos:start="621:13" pos:end="621:39"><name pos:start="621:13" pos:end="621:34"><name pos:start="621:13" pos:end="621:18">stream</name><operator pos:start="621:19" pos:end="621:20">-&gt;</operator><name pos:start="621:21" pos:end="621:34">multicast_port</name></name> <operator pos:start="621:36" pos:end="621:37">==</operator> <literal type="number" pos:start="621:39" pos:end="621:39">0</literal></expr>)</condition> <block pos:start="621:42" pos:end="624:9">{<block_content pos:start="622:13" pos:end="623:32">
            <expr_stmt pos:start="622:13" pos:end="622:50"><expr pos:start="622:13" pos:end="622:49"><name pos:start="622:13" pos:end="622:34"><name pos:start="622:13" pos:end="622:18">stream</name><operator pos:start="622:19" pos:end="622:20">-&gt;</operator><name pos:start="622:21" pos:end="622:34">multicast_port</name></name> <operator pos:start="622:36" pos:end="622:36">=</operator> <name pos:start="622:38" pos:end="622:49">default_port</name></expr>;</expr_stmt>
            <expr_stmt pos:start="623:13" pos:end="623:32"><expr pos:start="623:13" pos:end="623:31"><name pos:start="623:13" pos:end="623:24">default_port</name> <operator pos:start="623:26" pos:end="623:27">+=</operator> <literal type="number" pos:start="623:29" pos:end="623:31">100</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="626:9" pos:end="626:39"><expr pos:start="626:9" pos:end="626:38"><name pos:start="626:9" pos:end="626:28"><name pos:start="626:9" pos:end="626:17">dest_addr</name><operator pos:start="626:18" pos:end="626:18">.</operator><name pos:start="626:19" pos:end="626:28">sin_family</name></name> <operator pos:start="626:30" pos:end="626:30">=</operator> <name pos:start="626:32" pos:end="626:38">AF_INET</name></expr>;</expr_stmt>
        <expr_stmt pos:start="627:9" pos:end="627:50"><expr pos:start="627:9" pos:end="627:49"><name pos:start="627:9" pos:end="627:26"><name pos:start="627:9" pos:end="627:17">dest_addr</name><operator pos:start="627:18" pos:end="627:18">.</operator><name pos:start="627:19" pos:end="627:26">sin_addr</name></name> <operator pos:start="627:28" pos:end="627:28">=</operator> <name pos:start="627:30" pos:end="627:49"><name pos:start="627:30" pos:end="627:35">stream</name><operator pos:start="627:36" pos:end="627:37">-&gt;</operator><name pos:start="627:38" pos:end="627:49">multicast_ip</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="628:9" pos:end="628:59"><expr pos:start="628:9" pos:end="628:58"><name pos:start="628:9" pos:end="628:26"><name pos:start="628:9" pos:end="628:17">dest_addr</name><operator pos:start="628:18" pos:end="628:18">.</operator><name pos:start="628:19" pos:end="628:26">sin_port</name></name> <operator pos:start="628:28" pos:end="628:28">=</operator> <call pos:start="628:30" pos:end="628:58"><name pos:start="628:30" pos:end="628:34">htons</name><argument_list pos:start="628:35" pos:end="628:58">(<argument pos:start="628:36" pos:end="628:57"><expr pos:start="628:36" pos:end="628:57"><name pos:start="628:36" pos:end="628:57"><name pos:start="628:36" pos:end="628:41">stream</name><operator pos:start="628:42" pos:end="628:43">-&gt;</operator><name pos:start="628:44" pos:end="628:57">multicast_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="630:9" pos:end="631:71"><expr pos:start="630:9" pos:end="631:70"><name pos:start="630:9" pos:end="630:13">rtp_c</name> <operator pos:start="630:15" pos:end="630:15">=</operator> <call pos:start="630:17" pos:end="631:70"><name pos:start="630:17" pos:end="630:34">rtp_new_connection</name><argument_list pos:start="630:35" pos:end="631:70">(<argument pos:start="630:36" pos:end="630:45"><expr pos:start="630:36" pos:end="630:45"><operator pos:start="630:36" pos:end="630:36">&amp;</operator><name pos:start="630:37" pos:end="630:45">dest_addr</name></expr></argument>, <argument pos:start="630:48" pos:end="630:53"><expr pos:start="630:48" pos:end="630:53"><name pos:start="630:48" pos:end="630:53">stream</name></expr></argument>, <argument pos:start="630:56" pos:end="630:65"><expr pos:start="630:56" pos:end="630:65"><name pos:start="630:56" pos:end="630:65">session_id</name></expr></argument>,
                                   <argument pos:start="631:36" pos:end="631:69"><expr pos:start="631:36" pos:end="631:69"><name pos:start="631:36" pos:end="631:69">RTSP_LOWER_TRANSPORT_UDP_MULTICAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="632:9" pos:end="633:21"><if pos:start="632:9" pos:end="633:21">if <condition pos:start="632:12" pos:end="632:19">(<expr pos:start="632:13" pos:end="632:18"><operator pos:start="632:13" pos:end="632:13">!</operator><name pos:start="632:14" pos:end="632:18">rtp_c</name></expr>)</condition><block type="pseudo" pos:start="633:13" pos:end="633:21"><block_content pos:start="633:13" pos:end="633:21">
            <continue pos:start="633:13" pos:end="633:21">continue;</continue></block_content></block></if></if_stmt>

        <if_stmt pos:start="635:9" pos:end="639:9"><if pos:start="635:9" pos:end="639:9">if <condition pos:start="635:12" pos:end="635:45">(<expr pos:start="635:13" pos:end="635:44"><call pos:start="635:13" pos:end="635:40"><name pos:start="635:13" pos:end="635:29">open_input_stream</name><argument_list pos:start="635:30" pos:end="635:40">(<argument pos:start="635:31" pos:end="635:35"><expr pos:start="635:31" pos:end="635:35"><name pos:start="635:31" pos:end="635:35">rtp_c</name></expr></argument>, <argument pos:start="635:38" pos:end="635:39"><expr pos:start="635:38" pos:end="635:39"><literal type="string" pos:start="635:38" pos:end="635:39">""</literal></expr></argument>)</argument_list></call> <operator pos:start="635:42" pos:end="635:42">&lt;</operator> <literal type="number" pos:start="635:44" pos:end="635:44">0</literal></expr>)</condition> <block pos:start="635:47" pos:end="639:9">{<block_content pos:start="636:13" pos:end="638:21">
            <expr_stmt pos:start="636:13" pos:end="637:39"><expr pos:start="636:13" pos:end="637:38"><call pos:start="636:13" pos:end="637:38"><name pos:start="636:13" pos:end="636:20">http_log</name><argument_list pos:start="636:21" pos:end="637:38">(<argument pos:start="636:22" pos:end="636:68"><expr pos:start="636:22" pos:end="636:68"><literal type="string" pos:start="636:22" pos:end="636:68">"Could not open input stream for stream '%s'\n"</literal></expr></argument>,
                     <argument pos:start="637:22" pos:end="637:37"><expr pos:start="637:22" pos:end="637:37"><name pos:start="637:22" pos:end="637:37"><name pos:start="637:22" pos:end="637:27">stream</name><operator pos:start="637:28" pos:end="637:29">-&gt;</operator><name pos:start="637:30" pos:end="637:37">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue pos:start="638:13" pos:end="638:21">continue;</continue>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="641:9" pos:end="641:34">/* open each RTP stream */</comment>
        <for pos:start="642:9" pos:end="652:9">for<control pos:start="642:12" pos:end="643:27">(<init pos:start="642:13" pos:end="642:29"><expr pos:start="642:13" pos:end="642:28"><name pos:start="642:13" pos:end="642:24">stream_index</name> <operator pos:start="642:26" pos:end="642:26">=</operator> <literal type="number" pos:start="642:28" pos:end="642:28">0</literal></expr>;</init> <condition pos:start="642:31" pos:end="642:64"><expr pos:start="642:31" pos:end="642:63"><name pos:start="642:31" pos:end="642:42">stream_index</name> <operator pos:start="642:44" pos:end="642:44">&lt;</operator> <name pos:start="642:46" pos:end="642:63"><name pos:start="642:46" pos:end="642:51">stream</name><operator pos:start="642:52" pos:end="642:53">-&gt;</operator><name pos:start="642:54" pos:end="642:63">nb_streams</name></name></expr>;</condition>
            <incr pos:start="643:13" pos:end="643:26"><expr pos:start="643:13" pos:end="643:26"><name pos:start="643:13" pos:end="643:24">stream_index</name><operator pos:start="643:25" pos:end="643:26">++</operator></expr></incr>)</control> <block pos:start="643:29" pos:end="652:9">{<block_content pos:start="644:13" pos:end="651:20">
            <expr_stmt pos:start="644:13" pos:end="645:57"><expr pos:start="644:13" pos:end="645:56"><name pos:start="644:13" pos:end="644:30"><name pos:start="644:13" pos:end="644:21">dest_addr</name><operator pos:start="644:22" pos:end="644:22">.</operator><name pos:start="644:23" pos:end="644:30">sin_port</name></name> <operator pos:start="644:32" pos:end="644:32">=</operator> <call pos:start="644:34" pos:end="645:56"><name pos:start="644:34" pos:end="644:38">htons</name><argument_list pos:start="644:39" pos:end="645:56">(<argument pos:start="644:40" pos:end="645:55"><expr pos:start="644:40" pos:end="645:55"><name pos:start="644:40" pos:end="644:61"><name pos:start="644:40" pos:end="644:45">stream</name><operator pos:start="644:46" pos:end="644:47">-&gt;</operator><name pos:start="644:48" pos:end="644:61">multicast_port</name></name> <operator pos:start="644:63" pos:end="644:63">+</operator>
                                       <literal type="number" pos:start="645:40" pos:end="645:40">2</literal> <operator pos:start="645:42" pos:end="645:42">*</operator> <name pos:start="645:44" pos:end="645:55">stream_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="646:13" pos:end="647:25"><if pos:start="646:13" pos:end="647:25">if <condition pos:start="646:16" pos:end="646:78">(<expr pos:start="646:17" pos:end="646:77"><call pos:start="646:17" pos:end="646:72"><name pos:start="646:17" pos:end="646:33">rtp_new_av_stream</name><argument_list pos:start="646:34" pos:end="646:72">(<argument pos:start="646:35" pos:end="646:39"><expr pos:start="646:35" pos:end="646:39"><name pos:start="646:35" pos:end="646:39">rtp_c</name></expr></argument>, <argument pos:start="646:42" pos:end="646:53"><expr pos:start="646:42" pos:end="646:53"><name pos:start="646:42" pos:end="646:53">stream_index</name></expr></argument>, <argument pos:start="646:56" pos:end="646:65"><expr pos:start="646:56" pos:end="646:65"><operator pos:start="646:56" pos:end="646:56">&amp;</operator><name pos:start="646:57" pos:end="646:65">dest_addr</name></expr></argument>, <argument pos:start="646:68" pos:end="646:71"><expr pos:start="646:68" pos:end="646:71"><name pos:start="646:68" pos:end="646:71">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="646:74" pos:end="646:75">&gt;=</operator> <literal type="number" pos:start="646:77" pos:end="646:77">0</literal></expr>)</condition><block type="pseudo" pos:start="647:17" pos:end="647:25"><block_content pos:start="647:17" pos:end="647:25">
                <continue pos:start="647:17" pos:end="647:25">continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt pos:start="649:13" pos:end="650:53"><expr pos:start="649:13" pos:end="650:52"><call pos:start="649:13" pos:end="650:52"><name pos:start="649:13" pos:end="649:20">http_log</name><argument_list pos:start="649:21" pos:end="650:52">(<argument pos:start="649:22" pos:end="649:70"><expr pos:start="649:22" pos:end="649:70"><literal type="string" pos:start="649:22" pos:end="649:70">"Could not open output stream '%s/streamid=%d'\n"</literal></expr></argument>,
                     <argument pos:start="650:22" pos:end="650:37"><expr pos:start="650:22" pos:end="650:37"><name pos:start="650:22" pos:end="650:37"><name pos:start="650:22" pos:end="650:27">stream</name><operator pos:start="650:28" pos:end="650:29">-&gt;</operator><name pos:start="650:30" pos:end="650:37">filename</name></name></expr></argument>, <argument pos:start="650:40" pos:end="650:51"><expr pos:start="650:40" pos:end="650:51"><name pos:start="650:40" pos:end="650:51">stream_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="651:13" pos:end="651:20"><expr pos:start="651:13" pos:end="651:19"><call pos:start="651:13" pos:end="651:19"><name pos:start="651:13" pos:end="651:16">exit</name><argument_list pos:start="651:17" pos:end="651:19">(<argument pos:start="651:18" pos:end="651:18"><expr pos:start="651:18" pos:end="651:18"><literal type="number" pos:start="651:18" pos:end="651:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt pos:start="654:9" pos:end="654:43"><expr pos:start="654:9" pos:end="654:42"><name pos:start="654:9" pos:end="654:20"><name pos:start="654:9" pos:end="654:13">rtp_c</name><operator pos:start="654:14" pos:end="654:15">-&gt;</operator><name pos:start="654:16" pos:end="654:20">state</name></name> <operator pos:start="654:22" pos:end="654:22">=</operator> <name pos:start="654:24" pos:end="654:42">HTTPSTATE_SEND_DATA</name></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block" pos:start="658:1" pos:end="658:34">/* main loop of the HTTP server */</comment>
<function pos:start="659:1" pos:end="806:1"><type pos:start="659:1" pos:end="659:10"><specifier pos:start="659:1" pos:end="659:6">static</specifier> <name pos:start="659:8" pos:end="659:10">int</name></type> <name pos:start="659:12" pos:end="659:22">http_server</name><parameter_list pos:start="659:23" pos:end="659:28">(<parameter pos:start="659:24" pos:end="659:27"><decl pos:start="659:24" pos:end="659:27"><type pos:start="659:24" pos:end="659:27"><name pos:start="659:24" pos:end="659:27">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="660:1" pos:end="806:1">{<block_content pos:start="661:5" pos:end="805:14">
    <decl_stmt pos:start="661:5" pos:end="661:42"><decl pos:start="661:5" pos:end="661:21"><type pos:start="661:5" pos:end="661:7"><name pos:start="661:5" pos:end="661:7">int</name></type> <name pos:start="661:9" pos:end="661:17">server_fd</name> <init pos:start="661:19" pos:end="661:21">= <expr pos:start="661:21" pos:end="661:21"><literal type="number" pos:start="661:21" pos:end="661:21">0</literal></expr></init></decl>, <decl pos:start="661:24" pos:end="661:41"><type ref="prev" pos:start="661:5" pos:end="661:7"/><name pos:start="661:24" pos:end="661:37">rtsp_server_fd</name> <init pos:start="661:39" pos:end="661:41">= <expr pos:start="661:41" pos:end="661:41"><literal type="number" pos:start="661:41" pos:end="661:41">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="662:5" pos:end="662:19"><decl pos:start="662:5" pos:end="662:11"><type pos:start="662:5" pos:end="662:7"><name pos:start="662:5" pos:end="662:7">int</name></type> <name pos:start="662:9" pos:end="662:11">ret</name></decl>, <decl pos:start="662:14" pos:end="662:18"><type ref="prev" pos:start="662:5" pos:end="662:7"/><name pos:start="662:14" pos:end="662:18">delay</name></decl>;</decl_stmt>
    <decl_stmt pos:start="663:5" pos:end="663:43"><decl pos:start="663:5" pos:end="663:29"><type pos:start="663:5" pos:end="663:19"><name pos:start="663:5" pos:end="663:17"><name pos:start="663:5" pos:end="663:10">struct</name> <name pos:start="663:12" pos:end="663:17">pollfd</name></name> <modifier pos:start="663:19" pos:end="663:19">*</modifier></type><name pos:start="663:20" pos:end="663:29">poll_table</name></decl>, <decl pos:start="663:32" pos:end="663:42"><type ref="prev" pos:start="663:5" pos:end="663:19"><modifier pos:start="663:32" pos:end="663:32">*</modifier></type><name pos:start="663:33" pos:end="663:42">poll_entry</name></decl>;</decl_stmt>
    <decl_stmt pos:start="664:5" pos:end="664:28"><decl pos:start="664:5" pos:end="664:18"><type pos:start="664:5" pos:end="664:17"><name pos:start="664:5" pos:end="664:15">HTTPContext</name> <modifier pos:start="664:17" pos:end="664:17">*</modifier></type><name pos:start="664:18" pos:end="664:18">c</name></decl>, <decl pos:start="664:21" pos:end="664:27"><type ref="prev" pos:start="664:5" pos:end="664:17"><modifier pos:start="664:21" pos:end="664:21">*</modifier></type><name pos:start="664:22" pos:end="664:27">c_next</name></decl>;</decl_stmt>

    <expr_stmt pos:start="666:5" pos:end="667:55"><expr pos:start="666:5" pos:end="667:54"><name pos:start="666:5" pos:end="666:14">poll_table</name> <operator pos:start="666:16" pos:end="666:16">=</operator> <call pos:start="666:18" pos:end="667:54"><name pos:start="666:18" pos:end="666:33">av_mallocz_array</name><argument_list pos:start="666:34" pos:end="667:54">(<argument pos:start="666:35" pos:end="666:68"><expr pos:start="666:35" pos:end="666:68"><name pos:start="666:35" pos:end="666:64"><name pos:start="666:35" pos:end="666:40">config</name><operator pos:start="666:41" pos:end="666:41">.</operator><name pos:start="666:42" pos:end="666:64">nb_max_http_connections</name></name> <operator pos:start="666:66" pos:end="666:66">+</operator> <literal type="number" pos:start="666:68" pos:end="666:68">2</literal></expr></argument>,
                                  <argument pos:start="667:35" pos:end="667:53"><expr pos:start="667:35" pos:end="667:53"><sizeof pos:start="667:35" pos:end="667:53">sizeof<argument_list pos:start="667:41" pos:end="667:53">(<argument pos:start="667:42" pos:end="667:52"><expr pos:start="667:42" pos:end="667:52"><operator pos:start="667:42" pos:end="667:42">*</operator><name pos:start="667:43" pos:end="667:52">poll_table</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="668:5" pos:end="672:5"><if pos:start="668:5" pos:end="672:5">if<condition pos:start="668:7" pos:end="668:19">(<expr pos:start="668:8" pos:end="668:18"><operator pos:start="668:8" pos:end="668:8">!</operator><name pos:start="668:9" pos:end="668:18">poll_table</name></expr>)</condition> <block pos:start="668:21" pos:end="672:5">{<block_content pos:start="669:9" pos:end="671:18">
        <expr_stmt pos:start="669:9" pos:end="670:67"><expr pos:start="669:9" pos:end="670:66"><call pos:start="669:9" pos:end="670:66"><name pos:start="669:9" pos:end="669:16">http_log</name><argument_list pos:start="669:17" pos:end="670:66">(<argument pos:start="669:18" pos:end="670:33"><expr pos:start="669:18" pos:end="670:33"><literal type="string" pos:start="669:18" pos:end="669:67">"Impossible to allocate a poll table handling %d "</literal>
                 <literal type="string" pos:start="670:18" pos:end="670:33">"connections.\n"</literal></expr></argument>, <argument pos:start="670:36" pos:end="670:65"><expr pos:start="670:36" pos:end="670:65"><name pos:start="670:36" pos:end="670:65"><name pos:start="670:36" pos:end="670:41">config</name><operator pos:start="670:42" pos:end="670:42">.</operator><name pos:start="670:43" pos:end="670:65">nb_max_http_connections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="671:9" pos:end="671:18">return <expr pos:start="671:16" pos:end="671:17"><operator pos:start="671:16" pos:end="671:16">-</operator><literal type="number" pos:start="671:17" pos:end="671:17">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="674:5" pos:end="678:5"><if pos:start="674:5" pos:end="678:5">if <condition pos:start="674:8" pos:end="674:34">(<expr pos:start="674:9" pos:end="674:33"><name pos:start="674:9" pos:end="674:33"><name pos:start="674:9" pos:end="674:14">config</name><operator pos:start="674:15" pos:end="674:15">.</operator><name pos:start="674:16" pos:end="674:24">http_addr</name><operator pos:start="674:25" pos:end="674:25">.</operator><name pos:start="674:26" pos:end="674:33">sin_port</name></name></expr>)</condition> <block pos:start="674:36" pos:end="678:5">{<block_content pos:start="675:9" pos:end="677:22">
        <expr_stmt pos:start="675:9" pos:end="675:58"><expr pos:start="675:9" pos:end="675:57"><name pos:start="675:9" pos:end="675:17">server_fd</name> <operator pos:start="675:19" pos:end="675:19">=</operator> <call pos:start="675:21" pos:end="675:57"><name pos:start="675:21" pos:end="675:38">socket_open_listen</name><argument_list pos:start="675:39" pos:end="675:57">(<argument pos:start="675:40" pos:end="675:56"><expr pos:start="675:40" pos:end="675:56"><operator pos:start="675:40" pos:end="675:40">&amp;</operator><name pos:start="675:41" pos:end="675:56"><name pos:start="675:41" pos:end="675:46">config</name><operator pos:start="675:47" pos:end="675:47">.</operator><name pos:start="675:48" pos:end="675:56">http_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="676:9" pos:end="677:22"><if pos:start="676:9" pos:end="677:22">if <condition pos:start="676:12" pos:end="676:26">(<expr pos:start="676:13" pos:end="676:25"><name pos:start="676:13" pos:end="676:21">server_fd</name> <operator pos:start="676:23" pos:end="676:23">&lt;</operator> <literal type="number" pos:start="676:25" pos:end="676:25">0</literal></expr>)</condition><block type="pseudo" pos:start="677:13" pos:end="677:22"><block_content pos:start="677:13" pos:end="677:22">
            <goto pos:start="677:13" pos:end="677:22">goto <name pos:start="677:18" pos:end="677:21">quit</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="680:5" pos:end="686:5"><if pos:start="680:5" pos:end="686:5">if <condition pos:start="680:8" pos:end="680:34">(<expr pos:start="680:9" pos:end="680:33"><name pos:start="680:9" pos:end="680:33"><name pos:start="680:9" pos:end="680:14">config</name><operator pos:start="680:15" pos:end="680:15">.</operator><name pos:start="680:16" pos:end="680:24">rtsp_addr</name><operator pos:start="680:25" pos:end="680:25">.</operator><name pos:start="680:26" pos:end="680:33">sin_port</name></name></expr>)</condition> <block pos:start="680:36" pos:end="686:5">{<block_content pos:start="681:9" pos:end="685:9">
        <expr_stmt pos:start="681:9" pos:end="681:63"><expr pos:start="681:9" pos:end="681:62"><name pos:start="681:9" pos:end="681:22">rtsp_server_fd</name> <operator pos:start="681:24" pos:end="681:24">=</operator> <call pos:start="681:26" pos:end="681:62"><name pos:start="681:26" pos:end="681:43">socket_open_listen</name><argument_list pos:start="681:44" pos:end="681:62">(<argument pos:start="681:45" pos:end="681:61"><expr pos:start="681:45" pos:end="681:61"><operator pos:start="681:45" pos:end="681:45">&amp;</operator><name pos:start="681:46" pos:end="681:61"><name pos:start="681:46" pos:end="681:51">config</name><operator pos:start="681:52" pos:end="681:52">.</operator><name pos:start="681:53" pos:end="681:61">rtsp_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="682:9" pos:end="685:9"><if pos:start="682:9" pos:end="685:9">if <condition pos:start="682:12" pos:end="682:31">(<expr pos:start="682:13" pos:end="682:30"><name pos:start="682:13" pos:end="682:26">rtsp_server_fd</name> <operator pos:start="682:28" pos:end="682:28">&lt;</operator> <literal type="number" pos:start="682:30" pos:end="682:30">0</literal></expr>)</condition> <block pos:start="682:33" pos:end="685:9">{<block_content pos:start="683:13" pos:end="684:22">
            <expr_stmt pos:start="683:13" pos:end="683:35"><expr pos:start="683:13" pos:end="683:34"><call pos:start="683:13" pos:end="683:34"><name pos:start="683:13" pos:end="683:23">closesocket</name><argument_list pos:start="683:24" pos:end="683:34">(<argument pos:start="683:25" pos:end="683:33"><expr pos:start="683:25" pos:end="683:33"><name pos:start="683:25" pos:end="683:33">server_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto pos:start="684:13" pos:end="684:22">goto <name pos:start="684:18" pos:end="684:21">quit</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="688:5" pos:end="691:5"><if pos:start="688:5" pos:end="691:5">if <condition pos:start="688:8" pos:end="688:38">(<expr pos:start="688:9" pos:end="688:37"><operator pos:start="688:9" pos:end="688:9">!</operator><name pos:start="688:10" pos:end="688:23">rtsp_server_fd</name> <operator pos:start="688:25" pos:end="688:26">&amp;&amp;</operator> <operator pos:start="688:28" pos:end="688:28">!</operator><name pos:start="688:29" pos:end="688:37">server_fd</name></expr>)</condition> <block pos:start="688:40" pos:end="691:5">{<block_content pos:start="689:9" pos:end="690:18">
        <expr_stmt pos:start="689:9" pos:end="689:46"><expr pos:start="689:9" pos:end="689:45"><call pos:start="689:9" pos:end="689:45"><name pos:start="689:9" pos:end="689:16">http_log</name><argument_list pos:start="689:17" pos:end="689:45">(<argument pos:start="689:18" pos:end="689:44"><expr pos:start="689:18" pos:end="689:44"><literal type="string" pos:start="689:18" pos:end="689:44">"HTTP and RTSP disabled.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="690:9" pos:end="690:18">goto <name pos:start="690:14" pos:end="690:17">quit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="693:5" pos:end="693:36"><expr pos:start="693:5" pos:end="693:35"><call pos:start="693:5" pos:end="693:35"><name pos:start="693:5" pos:end="693:12">http_log</name><argument_list pos:start="693:13" pos:end="693:35">(<argument pos:start="693:14" pos:end="693:34"><expr pos:start="693:14" pos:end="693:34"><literal type="string" pos:start="693:14" pos:end="693:34">"FFserver started.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="695:5" pos:end="695:38"><expr pos:start="695:5" pos:end="695:37"><call pos:start="695:5" pos:end="695:37"><name pos:start="695:5" pos:end="695:18">start_children</name><argument_list pos:start="695:19" pos:end="695:37">(<argument pos:start="695:20" pos:end="695:36"><expr pos:start="695:20" pos:end="695:36"><name pos:start="695:20" pos:end="695:36"><name pos:start="695:20" pos:end="695:25">config</name><operator pos:start="695:26" pos:end="695:26">.</operator><name pos:start="695:27" pos:end="695:36">first_feed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="697:5" pos:end="697:22"><expr pos:start="697:5" pos:end="697:21"><call pos:start="697:5" pos:end="697:21"><name pos:start="697:5" pos:end="697:19">start_multicast</name><argument_list pos:start="697:20" pos:end="697:21">()</argument_list></call></expr>;</expr_stmt>

    <for pos:start="699:5" pos:end="801:5">for<control pos:start="699:8" pos:end="699:11">(<init pos:start="699:9" pos:end="699:9">;</init><condition pos:start="699:10" pos:end="699:10">;</condition><incr/>)</control> <block pos:start="699:13" pos:end="801:5">{<block_content pos:start="700:9" pos:end="800:9">
        <expr_stmt pos:start="700:9" pos:end="700:32"><expr pos:start="700:9" pos:end="700:31"><name pos:start="700:9" pos:end="700:18">poll_entry</name> <operator pos:start="700:20" pos:end="700:20">=</operator> <name pos:start="700:22" pos:end="700:31">poll_table</name></expr>;</expr_stmt>
        <if_stmt pos:start="701:9" pos:end="705:9"><if pos:start="701:9" pos:end="705:9">if <condition pos:start="701:12" pos:end="701:22">(<expr pos:start="701:13" pos:end="701:21"><name pos:start="701:13" pos:end="701:21">server_fd</name></expr>)</condition> <block pos:start="701:24" pos:end="705:9">{<block_content pos:start="702:13" pos:end="704:25">
            <expr_stmt pos:start="702:13" pos:end="702:39"><expr pos:start="702:13" pos:end="702:38"><name pos:start="702:13" pos:end="702:26"><name pos:start="702:13" pos:end="702:22">poll_entry</name><operator pos:start="702:23" pos:end="702:24">-&gt;</operator><name pos:start="702:25" pos:end="702:26">fd</name></name> <operator pos:start="702:28" pos:end="702:28">=</operator> <name pos:start="702:30" pos:end="702:38">server_fd</name></expr>;</expr_stmt>
            <expr_stmt pos:start="703:13" pos:end="703:40"><expr pos:start="703:13" pos:end="703:39"><name pos:start="703:13" pos:end="703:30"><name pos:start="703:13" pos:end="703:22">poll_entry</name><operator pos:start="703:23" pos:end="703:24">-&gt;</operator><name pos:start="703:25" pos:end="703:30">events</name></name> <operator pos:start="703:32" pos:end="703:32">=</operator> <name pos:start="703:34" pos:end="703:39">POLLIN</name></expr>;</expr_stmt>
            <expr_stmt pos:start="704:13" pos:end="704:25"><expr pos:start="704:13" pos:end="704:24"><name pos:start="704:13" pos:end="704:22">poll_entry</name><operator pos:start="704:23" pos:end="704:24">++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="706:9" pos:end="710:9"><if pos:start="706:9" pos:end="710:9">if <condition pos:start="706:12" pos:end="706:27">(<expr pos:start="706:13" pos:end="706:26"><name pos:start="706:13" pos:end="706:26">rtsp_server_fd</name></expr>)</condition> <block pos:start="706:29" pos:end="710:9">{<block_content pos:start="707:13" pos:end="709:25">
            <expr_stmt pos:start="707:13" pos:end="707:44"><expr pos:start="707:13" pos:end="707:43"><name pos:start="707:13" pos:end="707:26"><name pos:start="707:13" pos:end="707:22">poll_entry</name><operator pos:start="707:23" pos:end="707:24">-&gt;</operator><name pos:start="707:25" pos:end="707:26">fd</name></name> <operator pos:start="707:28" pos:end="707:28">=</operator> <name pos:start="707:30" pos:end="707:43">rtsp_server_fd</name></expr>;</expr_stmt>
            <expr_stmt pos:start="708:13" pos:end="708:40"><expr pos:start="708:13" pos:end="708:39"><name pos:start="708:13" pos:end="708:30"><name pos:start="708:13" pos:end="708:22">poll_entry</name><operator pos:start="708:23" pos:end="708:24">-&gt;</operator><name pos:start="708:25" pos:end="708:30">events</name></name> <operator pos:start="708:32" pos:end="708:32">=</operator> <name pos:start="708:34" pos:end="708:39">POLLIN</name></expr>;</expr_stmt>
            <expr_stmt pos:start="709:13" pos:end="709:25"><expr pos:start="709:13" pos:end="709:24"><name pos:start="709:13" pos:end="709:22">poll_entry</name><operator pos:start="709:23" pos:end="709:24">++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="712:9" pos:end="712:49">/* wait for events on each HTTP handle */</comment>
        <expr_stmt pos:start="713:9" pos:end="713:27"><expr pos:start="713:9" pos:end="713:26"><name pos:start="713:9" pos:end="713:9">c</name> <operator pos:start="713:11" pos:end="713:11">=</operator> <name pos:start="713:13" pos:end="713:26">first_http_ctx</name></expr>;</expr_stmt>
        <expr_stmt pos:start="714:9" pos:end="714:21"><expr pos:start="714:9" pos:end="714:20"><name pos:start="714:9" pos:end="714:13">delay</name> <operator pos:start="714:15" pos:end="714:15">=</operator> <literal type="number" pos:start="714:17" pos:end="714:20">1000</literal></expr>;</expr_stmt>
        <while pos:start="715:9" pos:end="760:9">while <condition pos:start="715:15" pos:end="715:17">(<expr pos:start="715:16" pos:end="715:16"><name pos:start="715:16" pos:end="715:16">c</name></expr>)</condition> <block pos:start="715:19" pos:end="760:9">{<block_content pos:start="716:13" pos:end="759:24">
            <decl_stmt pos:start="716:13" pos:end="716:19"><decl pos:start="716:13" pos:end="716:18"><type pos:start="716:13" pos:end="716:15"><name pos:start="716:13" pos:end="716:15">int</name></type> <name pos:start="716:17" pos:end="716:18">fd</name></decl>;</decl_stmt>
            <expr_stmt pos:start="717:13" pos:end="717:23"><expr pos:start="717:13" pos:end="717:22"><name pos:start="717:13" pos:end="717:14">fd</name> <operator pos:start="717:16" pos:end="717:16">=</operator> <name pos:start="717:18" pos:end="717:22"><name pos:start="717:18" pos:end="717:18">c</name><operator pos:start="717:19" pos:end="717:20">-&gt;</operator><name pos:start="717:21" pos:end="717:22">fd</name></name></expr>;</expr_stmt>
            <switch pos:start="718:13" pos:end="758:13">switch<condition pos:start="718:19" pos:end="718:28">(<expr pos:start="718:20" pos:end="718:27"><name pos:start="718:20" pos:end="718:27"><name pos:start="718:20" pos:end="718:20">c</name><operator pos:start="718:21" pos:end="718:22">-&gt;</operator><name pos:start="718:23" pos:end="718:27">state</name></name></expr>)</condition> <block pos:start="718:30" pos:end="758:13">{<block_content pos:start="719:13" pos:end="757:22">
            <case pos:start="719:13" pos:end="719:39">case <expr pos:start="719:18" pos:end="719:38"><name pos:start="719:18" pos:end="719:38">HTTPSTATE_SEND_HEADER</name></expr>:</case>
            <case pos:start="720:13" pos:end="720:38">case <expr pos:start="720:18" pos:end="720:37"><name pos:start="720:18" pos:end="720:37">RTSPSTATE_SEND_REPLY</name></expr>:</case>
            <case pos:start="721:13" pos:end="721:39">case <expr pos:start="721:18" pos:end="721:38"><name pos:start="721:18" pos:end="721:38">RTSPSTATE_SEND_PACKET</name></expr>:</case>
                <expr_stmt pos:start="722:17" pos:end="722:43"><expr pos:start="722:17" pos:end="722:42"><name pos:start="722:17" pos:end="722:29"><name pos:start="722:17" pos:end="722:17">c</name><operator pos:start="722:18" pos:end="722:19">-&gt;</operator><name pos:start="722:20" pos:end="722:29">poll_entry</name></name> <operator pos:start="722:31" pos:end="722:31">=</operator> <name pos:start="722:33" pos:end="722:42">poll_entry</name></expr>;</expr_stmt>
                <expr_stmt pos:start="723:17" pos:end="723:36"><expr pos:start="723:17" pos:end="723:35"><name pos:start="723:17" pos:end="723:30"><name pos:start="723:17" pos:end="723:26">poll_entry</name><operator pos:start="723:27" pos:end="723:28">-&gt;</operator><name pos:start="723:29" pos:end="723:30">fd</name></name> <operator pos:start="723:32" pos:end="723:32">=</operator> <name pos:start="723:34" pos:end="723:35">fd</name></expr>;</expr_stmt>
                <expr_stmt pos:start="724:17" pos:end="724:45"><expr pos:start="724:17" pos:end="724:44"><name pos:start="724:17" pos:end="724:34"><name pos:start="724:17" pos:end="724:26">poll_entry</name><operator pos:start="724:27" pos:end="724:28">-&gt;</operator><name pos:start="724:29" pos:end="724:34">events</name></name> <operator pos:start="724:36" pos:end="724:36">=</operator> <name pos:start="724:38" pos:end="724:44">POLLOUT</name></expr>;</expr_stmt>
                <expr_stmt pos:start="725:17" pos:end="725:29"><expr pos:start="725:17" pos:end="725:28"><name pos:start="725:17" pos:end="725:26">poll_entry</name><operator pos:start="725:27" pos:end="725:28">++</operator></expr>;</expr_stmt>
                <break pos:start="726:17" pos:end="726:22">break;</break>
            <case pos:start="727:13" pos:end="727:44">case <expr pos:start="727:18" pos:end="727:43"><name pos:start="727:18" pos:end="727:43">HTTPSTATE_SEND_DATA_HEADER</name></expr>:</case>
            <case pos:start="728:13" pos:end="728:37">case <expr pos:start="728:18" pos:end="728:36"><name pos:start="728:18" pos:end="728:36">HTTPSTATE_SEND_DATA</name></expr>:</case>
            <case pos:start="729:13" pos:end="729:45">case <expr pos:start="729:18" pos:end="729:44"><name pos:start="729:18" pos:end="729:44">HTTPSTATE_SEND_DATA_TRAILER</name></expr>:</case>
                <if_stmt pos:start="730:17" pos:end="743:17"><if pos:start="730:17" pos:end="737:17">if <condition pos:start="730:20" pos:end="730:38">(<expr pos:start="730:21" pos:end="730:37"><operator pos:start="730:21" pos:end="730:21">!</operator><name pos:start="730:22" pos:end="730:37"><name pos:start="730:22" pos:end="730:22">c</name><operator pos:start="730:23" pos:end="730:24">-&gt;</operator><name pos:start="730:25" pos:end="730:37">is_packetized</name></name></expr>)</condition> <block pos:start="730:40" pos:end="737:17">{<block_content pos:start="733:21" pos:end="736:33">
                    <comment type="block" pos:start="731:21" pos:end="732:51">/* for TCP, we output as much as we can
                     * (may need to put a limit) */</comment>
                    <expr_stmt pos:start="733:21" pos:end="733:47"><expr pos:start="733:21" pos:end="733:46"><name pos:start="733:21" pos:end="733:33"><name pos:start="733:21" pos:end="733:21">c</name><operator pos:start="733:22" pos:end="733:23">-&gt;</operator><name pos:start="733:24" pos:end="733:33">poll_entry</name></name> <operator pos:start="733:35" pos:end="733:35">=</operator> <name pos:start="733:37" pos:end="733:46">poll_entry</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="734:21" pos:end="734:40"><expr pos:start="734:21" pos:end="734:39"><name pos:start="734:21" pos:end="734:34"><name pos:start="734:21" pos:end="734:30">poll_entry</name><operator pos:start="734:31" pos:end="734:32">-&gt;</operator><name pos:start="734:33" pos:end="734:34">fd</name></name> <operator pos:start="734:36" pos:end="734:36">=</operator> <name pos:start="734:38" pos:end="734:39">fd</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="735:21" pos:end="735:49"><expr pos:start="735:21" pos:end="735:48"><name pos:start="735:21" pos:end="735:38"><name pos:start="735:21" pos:end="735:30">poll_entry</name><operator pos:start="735:31" pos:end="735:32">-&gt;</operator><name pos:start="735:33" pos:end="735:38">events</name></name> <operator pos:start="735:40" pos:end="735:40">=</operator> <name pos:start="735:42" pos:end="735:48">POLLOUT</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="736:21" pos:end="736:33"><expr pos:start="736:21" pos:end="736:32"><name pos:start="736:21" pos:end="736:30">poll_entry</name><operator pos:start="736:31" pos:end="736:32">++</operator></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="737:19" pos:end="743:17">else <block pos:start="737:24" pos:end="743:17">{<block_content pos:start="741:21" pos:end="742:35">
                    <comment type="block" pos:start="738:21" pos:end="740:66">/* when ffserver is doing the timing, we work by
                     * looking at which packet needs to be sent every
                     * 10 ms (one tick wait XXX: 10 ms assumed) */</comment>
                    <if_stmt pos:start="741:21" pos:end="742:35"><if pos:start="741:21" pos:end="742:35">if <condition pos:start="741:24" pos:end="741:35">(<expr pos:start="741:25" pos:end="741:34"><name pos:start="741:25" pos:end="741:29">delay</name> <operator pos:start="741:31" pos:end="741:31">&gt;</operator> <literal type="number" pos:start="741:33" pos:end="741:34">10</literal></expr>)</condition><block type="pseudo" pos:start="742:25" pos:end="742:35"><block_content pos:start="742:25" pos:end="742:35">
                        <expr_stmt pos:start="742:25" pos:end="742:35"><expr pos:start="742:25" pos:end="742:34"><name pos:start="742:25" pos:end="742:29">delay</name> <operator pos:start="742:31" pos:end="742:31">=</operator> <literal type="number" pos:start="742:33" pos:end="742:34">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
                <break pos:start="744:17" pos:end="744:22">break;</break>
            <case pos:start="745:13" pos:end="745:40">case <expr pos:start="745:18" pos:end="745:39"><name pos:start="745:18" pos:end="745:39">HTTPSTATE_WAIT_REQUEST</name></expr>:</case>
            <case pos:start="746:13" pos:end="746:40">case <expr pos:start="746:18" pos:end="746:39"><name pos:start="746:18" pos:end="746:39">HTTPSTATE_RECEIVE_DATA</name></expr>:</case>
            <case pos:start="747:13" pos:end="747:37">case <expr pos:start="747:18" pos:end="747:36"><name pos:start="747:18" pos:end="747:36">HTTPSTATE_WAIT_FEED</name></expr>:</case>
            <case pos:start="748:13" pos:end="748:40">case <expr pos:start="748:18" pos:end="748:39"><name pos:start="748:18" pos:end="748:39">RTSPSTATE_WAIT_REQUEST</name></expr>:</case>
                <comment type="block" pos:start="749:17" pos:end="749:42">/* need to catch errors */</comment>
                <expr_stmt pos:start="750:17" pos:end="750:43"><expr pos:start="750:17" pos:end="750:42"><name pos:start="750:17" pos:end="750:29"><name pos:start="750:17" pos:end="750:17">c</name><operator pos:start="750:18" pos:end="750:19">-&gt;</operator><name pos:start="750:20" pos:end="750:29">poll_entry</name></name> <operator pos:start="750:31" pos:end="750:31">=</operator> <name pos:start="750:33" pos:end="750:42">poll_entry</name></expr>;</expr_stmt>
                <expr_stmt pos:start="751:17" pos:end="751:36"><expr pos:start="751:17" pos:end="751:35"><name pos:start="751:17" pos:end="751:30"><name pos:start="751:17" pos:end="751:26">poll_entry</name><operator pos:start="751:27" pos:end="751:28">-&gt;</operator><name pos:start="751:29" pos:end="751:30">fd</name></name> <operator pos:start="751:32" pos:end="751:32">=</operator> <name pos:start="751:34" pos:end="751:35">fd</name></expr>;</expr_stmt>
                <expr_stmt pos:start="752:17" pos:end="752:44"><expr pos:start="752:17" pos:end="752:43"><name pos:start="752:17" pos:end="752:34"><name pos:start="752:17" pos:end="752:26">poll_entry</name><operator pos:start="752:27" pos:end="752:28">-&gt;</operator><name pos:start="752:29" pos:end="752:34">events</name></name> <operator pos:start="752:36" pos:end="752:36">=</operator> <name pos:start="752:38" pos:end="752:43">POLLIN</name></expr>;</expr_stmt><comment type="block" pos:start="752:45" pos:end="752:70">/* Maybe this will work */</comment>
                <expr_stmt pos:start="753:17" pos:end="753:29"><expr pos:start="753:17" pos:end="753:28"><name pos:start="753:17" pos:end="753:26">poll_entry</name><operator pos:start="753:27" pos:end="753:28">++</operator></expr>;</expr_stmt>
                <break pos:start="754:17" pos:end="754:22">break;</break>
            <default pos:start="755:13" pos:end="755:20">default:</default>
                <expr_stmt pos:start="756:17" pos:end="756:37"><expr pos:start="756:17" pos:end="756:36"><name pos:start="756:17" pos:end="756:29"><name pos:start="756:17" pos:end="756:17">c</name><operator pos:start="756:18" pos:end="756:19">-&gt;</operator><name pos:start="756:20" pos:end="756:29">poll_entry</name></name> <operator pos:start="756:31" pos:end="756:31">=</operator> <name pos:start="756:33" pos:end="756:36">NULL</name></expr>;</expr_stmt>
                <break pos:start="757:17" pos:end="757:22">break;</break>
            </block_content>}</block></switch>
            <expr_stmt pos:start="759:13" pos:end="759:24"><expr pos:start="759:13" pos:end="759:23"><name pos:start="759:13" pos:end="759:13">c</name> <operator pos:start="759:15" pos:end="759:15">=</operator> <name pos:start="759:17" pos:end="759:23"><name pos:start="759:17" pos:end="759:17">c</name><operator pos:start="759:18" pos:end="759:19">-&gt;</operator><name pos:start="759:20" pos:end="759:23">next</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>

        <comment type="block" pos:start="762:9" pos:end="763:39">/* wait for an event on one connection. We poll at least every
         * second to handle timeouts */</comment>
        <do pos:start="764:9" pos:end="770:26">do <block pos:start="764:12" pos:end="770:9">{<block_content pos:start="765:13" pos:end="769:13">
            <expr_stmt pos:start="765:13" pos:end="765:67"><expr pos:start="765:13" pos:end="765:66"><name pos:start="765:13" pos:end="765:15">ret</name> <operator pos:start="765:17" pos:end="765:17">=</operator> <call pos:start="765:19" pos:end="765:66"><name pos:start="765:19" pos:end="765:22">poll</name><argument_list pos:start="765:23" pos:end="765:66">(<argument pos:start="765:24" pos:end="765:33"><expr pos:start="765:24" pos:end="765:33"><name pos:start="765:24" pos:end="765:33">poll_table</name></expr></argument>, <argument pos:start="765:36" pos:end="765:58"><expr pos:start="765:36" pos:end="765:58"><name pos:start="765:36" pos:end="765:45">poll_entry</name> <operator pos:start="765:47" pos:end="765:47">-</operator> <name pos:start="765:49" pos:end="765:58">poll_table</name></expr></argument>, <argument pos:start="765:61" pos:end="765:65"><expr pos:start="765:61" pos:end="765:65"><name pos:start="765:61" pos:end="765:65">delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="766:13" pos:end="769:13"><if pos:start="766:13" pos:end="769:13">if <condition pos:start="766:16" pos:end="767:48">(<expr pos:start="766:17" pos:end="767:47"><name pos:start="766:17" pos:end="766:19">ret</name> <operator pos:start="766:21" pos:end="766:21">&lt;</operator> <literal type="number" pos:start="766:23" pos:end="766:23">0</literal> <operator pos:start="766:25" pos:end="766:26">&amp;&amp;</operator> <call pos:start="766:28" pos:end="766:40"><name pos:start="766:28" pos:end="766:38">ff_neterrno</name><argument_list pos:start="766:39" pos:end="766:40">()</argument_list></call> <operator pos:start="766:42" pos:end="766:43">!=</operator> <call pos:start="766:45" pos:end="766:59"><name pos:start="766:45" pos:end="766:51">AVERROR</name><argument_list pos:start="766:52" pos:end="766:59">(<argument pos:start="766:53" pos:end="766:58"><expr pos:start="766:53" pos:end="766:58"><name pos:start="766:53" pos:end="766:58">EAGAIN</name></expr></argument>)</argument_list></call> <operator pos:start="766:61" pos:end="766:62">&amp;&amp;</operator>
                <call pos:start="767:17" pos:end="767:29"><name pos:start="767:17" pos:end="767:27">ff_neterrno</name><argument_list pos:start="767:28" pos:end="767:29">()</argument_list></call> <operator pos:start="767:31" pos:end="767:32">!=</operator> <call pos:start="767:34" pos:end="767:47"><name pos:start="767:34" pos:end="767:40">AVERROR</name><argument_list pos:start="767:41" pos:end="767:47">(<argument pos:start="767:42" pos:end="767:46"><expr pos:start="767:42" pos:end="767:46"><name pos:start="767:42" pos:end="767:46">EINTR</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="767:50" pos:end="769:13">{<block_content pos:start="768:17" pos:end="768:26">
                <goto pos:start="768:17" pos:end="768:26">goto <name pos:start="768:22" pos:end="768:25">quit</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block> while <condition pos:start="770:17" pos:end="770:25">(<expr pos:start="770:18" pos:end="770:24"><name pos:start="770:18" pos:end="770:20">ret</name> <operator pos:start="770:22" pos:end="770:22">&lt;</operator> <literal type="number" pos:start="770:24" pos:end="770:24">0</literal></expr>)</condition>;</do>

        <expr_stmt pos:start="772:9" pos:end="772:39"><expr pos:start="772:9" pos:end="772:38"><name pos:start="772:9" pos:end="772:16">cur_time</name> <operator pos:start="772:18" pos:end="772:18">=</operator> <call pos:start="772:20" pos:end="772:31"><name pos:start="772:20" pos:end="772:29">av_gettime</name><argument_list pos:start="772:30" pos:end="772:31">()</argument_list></call> <operator pos:start="772:33" pos:end="772:33">/</operator> <literal type="number" pos:start="772:35" pos:end="772:38">1000</literal></expr>;</expr_stmt>

        <if_stmt pos:start="774:9" pos:end="777:9"><if pos:start="774:9" pos:end="777:9">if <condition pos:start="774:12" pos:end="774:35">(<expr pos:start="774:13" pos:end="774:34"><name pos:start="774:13" pos:end="774:34">need_to_start_children</name></expr>)</condition> <block pos:start="774:37" pos:end="777:9">{<block_content pos:start="775:13" pos:end="776:46">
            <expr_stmt pos:start="775:13" pos:end="775:39"><expr pos:start="775:13" pos:end="775:38"><name pos:start="775:13" pos:end="775:34">need_to_start_children</name> <operator pos:start="775:36" pos:end="775:36">=</operator> <literal type="number" pos:start="775:38" pos:end="775:38">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="776:13" pos:end="776:46"><expr pos:start="776:13" pos:end="776:45"><call pos:start="776:13" pos:end="776:45"><name pos:start="776:13" pos:end="776:26">start_children</name><argument_list pos:start="776:27" pos:end="776:45">(<argument pos:start="776:28" pos:end="776:44"><expr pos:start="776:28" pos:end="776:44"><name pos:start="776:28" pos:end="776:44"><name pos:start="776:28" pos:end="776:33">config</name><operator pos:start="776:34" pos:end="776:34">.</operator><name pos:start="776:35" pos:end="776:44">first_feed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="779:9" pos:end="779:35">/* now handle the events */</comment>
        <for pos:start="780:9" pos:end="787:9">for<control pos:start="780:12" pos:end="780:46">(<init pos:start="780:13" pos:end="780:31"><expr pos:start="780:13" pos:end="780:30"><name pos:start="780:13" pos:end="780:13">c</name> <operator pos:start="780:15" pos:end="780:15">=</operator> <name pos:start="780:17" pos:end="780:30">first_http_ctx</name></expr>;</init> <condition pos:start="780:33" pos:end="780:34"><expr pos:start="780:33" pos:end="780:33"><name pos:start="780:33" pos:end="780:33">c</name></expr>;</condition> <incr pos:start="780:36" pos:end="780:45"><expr pos:start="780:36" pos:end="780:45"><name pos:start="780:36" pos:end="780:36">c</name> <operator pos:start="780:38" pos:end="780:38">=</operator> <name pos:start="780:40" pos:end="780:45">c_next</name></expr></incr>)</control> <block pos:start="780:48" pos:end="787:9">{<block_content pos:start="781:13" pos:end="786:13">
            <expr_stmt pos:start="781:13" pos:end="781:29"><expr pos:start="781:13" pos:end="781:28"><name pos:start="781:13" pos:end="781:18">c_next</name> <operator pos:start="781:20" pos:end="781:20">=</operator> <name pos:start="781:22" pos:end="781:28"><name pos:start="781:22" pos:end="781:22">c</name><operator pos:start="781:23" pos:end="781:24">-&gt;</operator><name pos:start="781:25" pos:end="781:28">next</name></name></expr>;</expr_stmt>
            <if_stmt pos:start="782:13" pos:end="786:13"><if pos:start="782:13" pos:end="786:13">if <condition pos:start="782:16" pos:end="782:41">(<expr pos:start="782:17" pos:end="782:40"><call pos:start="782:17" pos:end="782:36"><name pos:start="782:17" pos:end="782:33">handle_connection</name><argument_list pos:start="782:34" pos:end="782:36">(<argument pos:start="782:35" pos:end="782:35"><expr pos:start="782:35" pos:end="782:35"><name pos:start="782:35" pos:end="782:35">c</name></expr></argument>)</argument_list></call> <operator pos:start="782:38" pos:end="782:38">&lt;</operator> <literal type="number" pos:start="782:40" pos:end="782:40">0</literal></expr>)</condition> <block pos:start="782:43" pos:end="786:13">{<block_content pos:start="783:17" pos:end="785:36">
                <expr_stmt pos:start="783:17" pos:end="783:34"><expr pos:start="783:17" pos:end="783:33"><call pos:start="783:17" pos:end="783:33"><name pos:start="783:17" pos:end="783:30">log_connection</name><argument_list pos:start="783:31" pos:end="783:33">(<argument pos:start="783:32" pos:end="783:32"><expr pos:start="783:32" pos:end="783:32"><name pos:start="783:32" pos:end="783:32">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block" pos:start="784:17" pos:end="784:51">/* close and free the connection */</comment>
                <expr_stmt pos:start="785:17" pos:end="785:36"><expr pos:start="785:17" pos:end="785:35"><call pos:start="785:17" pos:end="785:35"><name pos:start="785:17" pos:end="785:32">close_connection</name><argument_list pos:start="785:33" pos:end="785:35">(<argument pos:start="785:34" pos:end="785:34"><expr pos:start="785:34" pos:end="785:34"><name pos:start="785:34" pos:end="785:34">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <expr_stmt pos:start="789:9" pos:end="789:32"><expr pos:start="789:9" pos:end="789:31"><name pos:start="789:9" pos:end="789:18">poll_entry</name> <operator pos:start="789:20" pos:end="789:20">=</operator> <name pos:start="789:22" pos:end="789:31">poll_table</name></expr>;</expr_stmt>
        <if_stmt pos:start="790:9" pos:end="795:9"><if pos:start="790:9" pos:end="795:9">if <condition pos:start="790:12" pos:end="790:22">(<expr pos:start="790:13" pos:end="790:21"><name pos:start="790:13" pos:end="790:21">server_fd</name></expr>)</condition> <block pos:start="790:24" pos:end="795:9">{<block_content pos:start="792:13" pos:end="794:25">
            <comment type="block" pos:start="791:13" pos:end="791:47">/* new HTTP connection request ? */</comment>
            <if_stmt pos:start="792:13" pos:end="793:45"><if pos:start="792:13" pos:end="793:45">if <condition pos:start="792:16" pos:end="792:45">(<expr pos:start="792:17" pos:end="792:44"><name pos:start="792:17" pos:end="792:35"><name pos:start="792:17" pos:end="792:26">poll_entry</name><operator pos:start="792:27" pos:end="792:28">-&gt;</operator><name pos:start="792:29" pos:end="792:35">revents</name></name> <operator pos:start="792:37" pos:end="792:37">&amp;</operator> <name pos:start="792:39" pos:end="792:44">POLLIN</name></expr>)</condition><block type="pseudo" pos:start="793:17" pos:end="793:45"><block_content pos:start="793:17" pos:end="793:45">
                <expr_stmt pos:start="793:17" pos:end="793:45"><expr pos:start="793:17" pos:end="793:44"><call pos:start="793:17" pos:end="793:44"><name pos:start="793:17" pos:end="793:30">new_connection</name><argument_list pos:start="793:31" pos:end="793:44">(<argument pos:start="793:32" pos:end="793:40"><expr pos:start="793:32" pos:end="793:40"><name pos:start="793:32" pos:end="793:40">server_fd</name></expr></argument>, <argument pos:start="793:43" pos:end="793:43"><expr pos:start="793:43" pos:end="793:43"><literal type="number" pos:start="793:43" pos:end="793:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="794:13" pos:end="794:25"><expr pos:start="794:13" pos:end="794:24"><name pos:start="794:13" pos:end="794:22">poll_entry</name><operator pos:start="794:23" pos:end="794:24">++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="796:9" pos:end="800:9"><if pos:start="796:9" pos:end="800:9">if <condition pos:start="796:12" pos:end="796:27">(<expr pos:start="796:13" pos:end="796:26"><name pos:start="796:13" pos:end="796:26">rtsp_server_fd</name></expr>)</condition> <block pos:start="796:29" pos:end="800:9">{<block_content pos:start="798:13" pos:end="799:50">
            <comment type="block" pos:start="797:13" pos:end="797:47">/* new RTSP connection request ? */</comment>
            <if_stmt pos:start="798:13" pos:end="799:50"><if pos:start="798:13" pos:end="799:50">if <condition pos:start="798:16" pos:end="798:45">(<expr pos:start="798:17" pos:end="798:44"><name pos:start="798:17" pos:end="798:35"><name pos:start="798:17" pos:end="798:26">poll_entry</name><operator pos:start="798:27" pos:end="798:28">-&gt;</operator><name pos:start="798:29" pos:end="798:35">revents</name></name> <operator pos:start="798:37" pos:end="798:37">&amp;</operator> <name pos:start="798:39" pos:end="798:44">POLLIN</name></expr>)</condition><block type="pseudo" pos:start="799:17" pos:end="799:50"><block_content pos:start="799:17" pos:end="799:50">
                <expr_stmt pos:start="799:17" pos:end="799:50"><expr pos:start="799:17" pos:end="799:49"><call pos:start="799:17" pos:end="799:49"><name pos:start="799:17" pos:end="799:30">new_connection</name><argument_list pos:start="799:31" pos:end="799:49">(<argument pos:start="799:32" pos:end="799:45"><expr pos:start="799:32" pos:end="799:45"><name pos:start="799:32" pos:end="799:45">rtsp_server_fd</name></expr></argument>, <argument pos:start="799:48" pos:end="799:48"><expr pos:start="799:48" pos:end="799:48"><literal type="number" pos:start="799:48" pos:end="799:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

<label pos:start="803:1" pos:end="803:5"><name pos:start="803:1" pos:end="803:4">quit</name>:</label>
    <expr_stmt pos:start="804:5" pos:end="804:24"><expr pos:start="804:5" pos:end="804:23"><call pos:start="804:5" pos:end="804:23"><name pos:start="804:5" pos:end="804:11">av_free</name><argument_list pos:start="804:12" pos:end="804:23">(<argument pos:start="804:13" pos:end="804:22"><expr pos:start="804:13" pos:end="804:22"><name pos:start="804:13" pos:end="804:22">poll_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="805:5" pos:end="805:14">return <expr pos:start="805:12" pos:end="805:13"><operator pos:start="805:12" pos:end="805:12">-</operator><literal type="number" pos:start="805:13" pos:end="805:13">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="808:1" pos:end="808:47">/* start waiting for a new HTTP/RTSP request */</comment>
<function pos:start="809:1" pos:end="817:1"><type pos:start="809:1" pos:end="809:11"><specifier pos:start="809:1" pos:end="809:6">static</specifier> <name pos:start="809:8" pos:end="809:11">void</name></type> <name pos:start="809:13" pos:end="809:30">start_wait_request</name><parameter_list pos:start="809:31" pos:end="809:59">(<parameter pos:start="809:32" pos:end="809:45"><decl pos:start="809:32" pos:end="809:45"><type pos:start="809:32" pos:end="809:45"><name pos:start="809:32" pos:end="809:42">HTTPContext</name> <modifier pos:start="809:44" pos:end="809:44">*</modifier></type><name pos:start="809:45" pos:end="809:45">c</name></decl></parameter>, <parameter pos:start="809:48" pos:end="809:58"><decl pos:start="809:48" pos:end="809:58"><type pos:start="809:48" pos:end="809:58"><name pos:start="809:48" pos:end="809:50">int</name></type> <name pos:start="809:52" pos:end="809:58">is_rtsp</name></decl></parameter>)</parameter_list>
<block pos:start="810:1" pos:end="817:1">{<block_content pos:start="811:5" pos:end="816:73">
    <expr_stmt pos:start="811:5" pos:end="811:30"><expr pos:start="811:5" pos:end="811:29"><name pos:start="811:5" pos:end="811:17"><name pos:start="811:5" pos:end="811:5">c</name><operator pos:start="811:6" pos:end="811:7">-&gt;</operator><name pos:start="811:8" pos:end="811:17">buffer_ptr</name></name> <operator pos:start="811:19" pos:end="811:19">=</operator> <name pos:start="811:21" pos:end="811:29"><name pos:start="811:21" pos:end="811:21">c</name><operator pos:start="811:22" pos:end="811:23">-&gt;</operator><name pos:start="811:24" pos:end="811:29">buffer</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="812:5" pos:end="812:51"><expr pos:start="812:5" pos:end="812:50"><name pos:start="812:5" pos:end="812:17"><name pos:start="812:5" pos:end="812:5">c</name><operator pos:start="812:6" pos:end="812:7">-&gt;</operator><name pos:start="812:8" pos:end="812:17">buffer_end</name></name> <operator pos:start="812:19" pos:end="812:19">=</operator> <name pos:start="812:21" pos:end="812:29"><name pos:start="812:21" pos:end="812:21">c</name><operator pos:start="812:22" pos:end="812:23">-&gt;</operator><name pos:start="812:24" pos:end="812:29">buffer</name></name> <operator pos:start="812:31" pos:end="812:31">+</operator> <name pos:start="812:33" pos:end="812:46"><name pos:start="812:33" pos:end="812:33">c</name><operator pos:start="812:34" pos:end="812:35">-&gt;</operator><name pos:start="812:36" pos:end="812:46">buffer_size</name></name> <operator pos:start="812:48" pos:end="812:48">-</operator> <literal type="number" pos:start="812:50" pos:end="812:50">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="812:53" pos:end="812:77">/* leave room for '\0' */</comment>

    <expr_stmt pos:start="814:5" pos:end="814:73"><expr pos:start="814:5" pos:end="814:72"><name pos:start="814:5" pos:end="814:12"><name pos:start="814:5" pos:end="814:5">c</name><operator pos:start="814:6" pos:end="814:7">-&gt;</operator><name pos:start="814:8" pos:end="814:12">state</name></name> <operator pos:start="814:14" pos:end="814:14">=</operator> <ternary pos:start="814:16" pos:end="814:72"><condition pos:start="814:16" pos:end="814:24"><expr pos:start="814:16" pos:end="814:22"><name pos:start="814:16" pos:end="814:22">is_rtsp</name></expr> ?</condition><then pos:start="814:26" pos:end="814:47"> <expr pos:start="814:26" pos:end="814:47"><name pos:start="814:26" pos:end="814:47">RTSPSTATE_WAIT_REQUEST</name></expr> </then><else pos:start="814:49" pos:end="814:72">: <expr pos:start="814:51" pos:end="814:72"><name pos:start="814:51" pos:end="814:72">HTTPSTATE_WAIT_REQUEST</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt pos:start="815:5" pos:end="816:73"><expr pos:start="815:5" pos:end="816:72"><name pos:start="815:5" pos:end="815:14"><name pos:start="815:5" pos:end="815:5">c</name><operator pos:start="815:6" pos:end="815:7">-&gt;</operator><name pos:start="815:8" pos:end="815:14">timeout</name></name> <operator pos:start="815:16" pos:end="815:16">=</operator> <name pos:start="815:18" pos:end="815:25">cur_time</name> <operator pos:start="815:27" pos:end="815:27">+</operator>
                 <operator pos:start="816:18" pos:end="816:18">(</operator><ternary pos:start="816:19" pos:end="816:71"><condition pos:start="816:19" pos:end="816:27"><expr pos:start="816:19" pos:end="816:25"><name pos:start="816:19" pos:end="816:25">is_rtsp</name></expr> ?</condition><then pos:start="816:29" pos:end="816:48"> <expr pos:start="816:29" pos:end="816:48"><name pos:start="816:29" pos:end="816:48">RTSP_REQUEST_TIMEOUT</name></expr> </then><else pos:start="816:50" pos:end="816:71">: <expr pos:start="816:52" pos:end="816:71"><name pos:start="816:52" pos:end="816:71">HTTP_REQUEST_TIMEOUT</name></expr></else></ternary><operator pos:start="816:72" pos:end="816:72">)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="819:1" pos:end="838:1"><type pos:start="819:1" pos:end="819:11"><specifier pos:start="819:1" pos:end="819:6">static</specifier> <name pos:start="819:8" pos:end="819:11">void</name></type> <name pos:start="819:13" pos:end="819:36">http_send_too_busy_reply</name><parameter_list pos:start="819:37" pos:end="819:44">(<parameter pos:start="819:38" pos:end="819:43"><decl pos:start="819:38" pos:end="819:43"><type pos:start="819:38" pos:end="819:40"><name pos:start="819:38" pos:end="819:40">int</name></type> <name pos:start="819:42" pos:end="819:43">fd</name></decl></parameter>)</parameter_list>
<block pos:start="820:1" pos:end="838:1">{<block_content pos:start="821:5" pos:end="837:65">
    <decl_stmt pos:start="821:5" pos:end="821:21"><decl pos:start="821:5" pos:end="821:20"><type pos:start="821:5" pos:end="821:8"><name pos:start="821:5" pos:end="821:8">char</name></type> <name pos:start="821:10" pos:end="821:20"><name pos:start="821:10" pos:end="821:15">buffer</name><index pos:start="821:16" pos:end="821:20">[<expr pos:start="821:17" pos:end="821:19"><literal type="number" pos:start="821:17" pos:end="821:19">400</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="822:5" pos:end="833:66"><decl pos:start="822:5" pos:end="833:65"><type pos:start="822:5" pos:end="822:7"><name pos:start="822:5" pos:end="822:7">int</name></type> <name pos:start="822:9" pos:end="822:11">len</name> <init pos:start="822:13" pos:end="833:65">= <expr pos:start="822:15" pos:end="833:65"><call pos:start="822:15" pos:end="833:65"><name pos:start="822:15" pos:end="822:22">snprintf</name><argument_list pos:start="822:23" pos:end="833:65">(<argument pos:start="822:24" pos:end="822:29"><expr pos:start="822:24" pos:end="822:29"><name pos:start="822:24" pos:end="822:29">buffer</name></expr></argument>, <argument pos:start="822:32" pos:end="822:45"><expr pos:start="822:32" pos:end="822:45"><sizeof pos:start="822:32" pos:end="822:45">sizeof<argument_list pos:start="822:38" pos:end="822:45">(<argument pos:start="822:39" pos:end="822:44"><expr pos:start="822:39" pos:end="822:44"><name pos:start="822:39" pos:end="822:44">buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                       <argument pos:start="823:24" pos:end="832:43"><expr pos:start="823:24" pos:end="832:43"><literal type="string" pos:start="823:24" pos:end="823:57">"HTTP/1.0 503 Server too busy\r\n"</literal>
                       <literal type="string" pos:start="824:24" pos:end="824:52">"Content-type: text/html\r\n"</literal>
                       <literal type="string" pos:start="825:24" pos:end="825:29">"\r\n"</literal>
                       <literal type="string" pos:start="826:24" pos:end="826:42">"&lt;!DOCTYPE html&gt;\n"</literal>
                       <literal type="string" pos:start="827:24" pos:end="827:77">"&lt;html&gt;&lt;head&gt;&lt;title&gt;Too busy&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\r\n"</literal>
                       <literal type="string" pos:start="828:24" pos:end="828:76">"&lt;p&gt;The server is too busy to serve your request at "</literal>
                       <literal type="string" pos:start="829:24" pos:end="829:43">"this time.&lt;/p&gt;\r\n"</literal>
                       <literal type="string" pos:start="830:24" pos:end="830:78">"&lt;p&gt;The number of current connections is %u, and this "</literal>
                       <literal type="string" pos:start="831:24" pos:end="831:57">"exceeds the limit of %u.&lt;/p&gt;\r\n"</literal>
                       <literal type="string" pos:start="832:24" pos:end="832:43">"&lt;/body&gt;&lt;/html&gt;\r\n"</literal></expr></argument>,
                       <argument pos:start="833:24" pos:end="833:37"><expr pos:start="833:24" pos:end="833:37"><name pos:start="833:24" pos:end="833:37">nb_connections</name></expr></argument>, <argument pos:start="833:40" pos:end="833:64"><expr pos:start="833:40" pos:end="833:64"><name pos:start="833:40" pos:end="833:64"><name pos:start="833:40" pos:end="833:45">config</name><operator pos:start="833:46" pos:end="833:46">.</operator><name pos:start="833:47" pos:end="833:64">nb_max_connections</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="834:5" pos:end="834:37"><expr pos:start="834:5" pos:end="834:36"><call pos:start="834:5" pos:end="834:36"><name pos:start="834:5" pos:end="834:14">av_assert0</name><argument_list pos:start="834:15" pos:end="834:36">(<argument pos:start="834:16" pos:end="834:35"><expr pos:start="834:16" pos:end="834:35"><name pos:start="834:16" pos:end="834:18">len</name> <operator pos:start="834:20" pos:end="834:20">&lt;</operator> <sizeof pos:start="834:22" pos:end="834:35">sizeof<argument_list pos:start="834:28" pos:end="834:35">(<argument pos:start="834:29" pos:end="834:34"><expr pos:start="834:29" pos:end="834:34"><name pos:start="834:29" pos:end="834:34">buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="835:5" pos:end="837:65"><if pos:start="835:5" pos:end="837:65">if <condition pos:start="835:8" pos:end="835:39">(<expr pos:start="835:9" pos:end="835:38"><call pos:start="835:9" pos:end="835:32"><name pos:start="835:9" pos:end="835:12">send</name><argument_list pos:start="835:13" pos:end="835:32">(<argument pos:start="835:14" pos:end="835:15"><expr pos:start="835:14" pos:end="835:15"><name pos:start="835:14" pos:end="835:15">fd</name></expr></argument>, <argument pos:start="835:18" pos:end="835:23"><expr pos:start="835:18" pos:end="835:23"><name pos:start="835:18" pos:end="835:23">buffer</name></expr></argument>, <argument pos:start="835:26" pos:end="835:28"><expr pos:start="835:26" pos:end="835:28"><name pos:start="835:26" pos:end="835:28">len</name></expr></argument>, <argument pos:start="835:31" pos:end="835:31"><expr pos:start="835:31" pos:end="835:31"><literal type="number" pos:start="835:31" pos:end="835:31">0</literal></expr></argument>)</argument_list></call> <operator pos:start="835:34" pos:end="835:34">&lt;</operator> <name pos:start="835:36" pos:end="835:38">len</name></expr>)</condition><block type="pseudo" pos:start="836:9" pos:end="837:65"><block_content pos:start="836:9" pos:end="837:65">
        <expr_stmt pos:start="836:9" pos:end="837:65"><expr pos:start="836:9" pos:end="837:64"><call pos:start="836:9" pos:end="837:64"><name pos:start="836:9" pos:end="836:14">av_log</name><argument_list pos:start="836:15" pos:end="837:64">(<argument pos:start="836:16" pos:end="836:19"><expr pos:start="836:16" pos:end="836:19"><name pos:start="836:16" pos:end="836:19">NULL</name></expr></argument>, <argument pos:start="836:22" pos:end="836:35"><expr pos:start="836:22" pos:end="836:35"><name pos:start="836:22" pos:end="836:35">AV_LOG_WARNING</name></expr></argument>,
               <argument pos:start="837:16" pos:end="837:63"><expr pos:start="837:16" pos:end="837:63"><literal type="string" pos:start="837:16" pos:end="837:63">"Could not send too-busy reply, send() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function pos:start="841:1" pos:end="890:1"><type pos:start="841:1" pos:end="841:11"><specifier pos:start="841:1" pos:end="841:6">static</specifier> <name pos:start="841:8" pos:end="841:11">void</name></type> <name pos:start="841:13" pos:end="841:26">new_connection</name><parameter_list pos:start="841:27" pos:end="841:54">(<parameter pos:start="841:28" pos:end="841:40"><decl pos:start="841:28" pos:end="841:40"><type pos:start="841:28" pos:end="841:40"><name pos:start="841:28" pos:end="841:30">int</name></type> <name pos:start="841:32" pos:end="841:40">server_fd</name></decl></parameter>, <parameter pos:start="841:43" pos:end="841:53"><decl pos:start="841:43" pos:end="841:53"><type pos:start="841:43" pos:end="841:53"><name pos:start="841:43" pos:end="841:45">int</name></type> <name pos:start="841:47" pos:end="841:53">is_rtsp</name></decl></parameter>)</parameter_list>
<block pos:start="842:1" pos:end="890:1">{<block_content pos:start="843:5" pos:end="889:20">
    <decl_stmt pos:start="843:5" pos:end="843:33"><decl pos:start="843:5" pos:end="843:32"><type pos:start="843:5" pos:end="843:22"><name pos:start="843:5" pos:end="843:22"><name pos:start="843:5" pos:end="843:10">struct</name> <name pos:start="843:12" pos:end="843:22">sockaddr_in</name></name></type> <name pos:start="843:24" pos:end="843:32">from_addr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="844:5" pos:end="844:18"><decl pos:start="844:5" pos:end="844:17"><type pos:start="844:5" pos:end="844:13"><name pos:start="844:5" pos:end="844:13">socklen_t</name></type> <name pos:start="844:15" pos:end="844:17">len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="845:5" pos:end="845:11"><decl pos:start="845:5" pos:end="845:10"><type pos:start="845:5" pos:end="845:7"><name pos:start="845:5" pos:end="845:7">int</name></type> <name pos:start="845:9" pos:end="845:10">fd</name></decl>;</decl_stmt>
    <decl_stmt pos:start="846:5" pos:end="846:26"><decl pos:start="846:5" pos:end="846:25"><type pos:start="846:5" pos:end="846:17"><name pos:start="846:5" pos:end="846:15">HTTPContext</name> <modifier pos:start="846:17" pos:end="846:17">*</modifier></type><name pos:start="846:18" pos:end="846:18">c</name> <init pos:start="846:20" pos:end="846:25">= <expr pos:start="846:22" pos:end="846:25"><name pos:start="846:22" pos:end="846:25">NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="848:5" pos:end="848:28"><expr pos:start="848:5" pos:end="848:27"><name pos:start="848:5" pos:end="848:7">len</name> <operator pos:start="848:9" pos:end="848:9">=</operator> <sizeof pos:start="848:11" pos:end="848:27">sizeof<argument_list pos:start="848:17" pos:end="848:27">(<argument pos:start="848:18" pos:end="848:26"><expr pos:start="848:18" pos:end="848:26"><name pos:start="848:18" pos:end="848:26">from_addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt pos:start="849:5" pos:end="850:22"><expr pos:start="849:5" pos:end="850:21"><name pos:start="849:5" pos:end="849:6">fd</name> <operator pos:start="849:8" pos:end="849:8">=</operator> <call pos:start="849:10" pos:end="850:21"><name pos:start="849:10" pos:end="849:15">accept</name><argument_list pos:start="849:16" pos:end="850:21">(<argument pos:start="849:17" pos:end="849:25"><expr pos:start="849:17" pos:end="849:25"><name pos:start="849:17" pos:end="849:25">server_fd</name></expr></argument>, <argument pos:start="849:28" pos:end="849:56"><expr pos:start="849:28" pos:end="849:56"><operator pos:start="849:28" pos:end="849:28">(</operator>struct <name pos:start="849:36" pos:end="849:43">sockaddr</name> <operator pos:start="849:45" pos:end="849:45">*</operator><operator pos:start="849:46" pos:end="849:46">)</operator><operator pos:start="849:47" pos:end="849:47">&amp;</operator><name pos:start="849:48" pos:end="849:56">from_addr</name></expr></argument>,
                <argument pos:start="850:17" pos:end="850:20"><expr pos:start="850:17" pos:end="850:20"><operator pos:start="850:17" pos:end="850:17">&amp;</operator><name pos:start="850:18" pos:end="850:20">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="851:5" pos:end="854:5"><if pos:start="851:5" pos:end="854:5">if <condition pos:start="851:8" pos:end="851:15">(<expr pos:start="851:9" pos:end="851:14"><name pos:start="851:9" pos:end="851:10">fd</name> <operator pos:start="851:12" pos:end="851:12">&lt;</operator> <literal type="number" pos:start="851:14" pos:end="851:14">0</literal></expr>)</condition> <block pos:start="851:17" pos:end="854:5">{<block_content pos:start="852:9" pos:end="853:15">
        <expr_stmt pos:start="852:9" pos:end="852:62"><expr pos:start="852:9" pos:end="852:61"><call pos:start="852:9" pos:end="852:61"><name pos:start="852:9" pos:end="852:16">http_log</name><argument_list pos:start="852:17" pos:end="852:61">(<argument pos:start="852:18" pos:end="852:43"><expr pos:start="852:18" pos:end="852:43"><literal type="string" pos:start="852:18" pos:end="852:43">"error during accept %s\n"</literal></expr></argument>, <argument pos:start="852:46" pos:end="852:60"><expr pos:start="852:46" pos:end="852:60"><call pos:start="852:46" pos:end="852:60"><name pos:start="852:46" pos:end="852:53">strerror</name><argument_list pos:start="852:54" pos:end="852:60">(<argument pos:start="852:55" pos:end="852:59"><expr pos:start="852:55" pos:end="852:59"><name pos:start="852:55" pos:end="852:59">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="853:9" pos:end="853:15">return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="855:5" pos:end="856:68"><if pos:start="855:5" pos:end="856:68">if <condition pos:start="855:8" pos:end="855:38">(<expr pos:start="855:9" pos:end="855:37"><call pos:start="855:9" pos:end="855:33"><name pos:start="855:9" pos:end="855:26">ff_socket_nonblock</name><argument_list pos:start="855:27" pos:end="855:33">(<argument pos:start="855:28" pos:end="855:29"><expr pos:start="855:28" pos:end="855:29"><name pos:start="855:28" pos:end="855:29">fd</name></expr></argument>, <argument pos:start="855:32" pos:end="855:32"><expr pos:start="855:32" pos:end="855:32"><literal type="number" pos:start="855:32" pos:end="855:32">1</literal></expr></argument>)</argument_list></call> <operator pos:start="855:35" pos:end="855:35">&lt;</operator> <literal type="number" pos:start="855:37" pos:end="855:37">0</literal></expr>)</condition><block type="pseudo" pos:start="856:9" pos:end="856:68"><block_content pos:start="856:9" pos:end="856:68">
        <expr_stmt pos:start="856:9" pos:end="856:68"><expr pos:start="856:9" pos:end="856:67"><call pos:start="856:9" pos:end="856:67"><name pos:start="856:9" pos:end="856:14">av_log</name><argument_list pos:start="856:15" pos:end="856:67">(<argument pos:start="856:16" pos:end="856:19"><expr pos:start="856:16" pos:end="856:19"><name pos:start="856:16" pos:end="856:19">NULL</name></expr></argument>, <argument pos:start="856:22" pos:end="856:35"><expr pos:start="856:22" pos:end="856:35"><name pos:start="856:22" pos:end="856:35">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="856:38" pos:end="856:66"><expr pos:start="856:38" pos:end="856:66"><literal type="string" pos:start="856:38" pos:end="856:66">"ff_socket_nonblock failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="858:5" pos:end="861:5"><if pos:start="858:5" pos:end="861:5">if <condition pos:start="858:8" pos:end="858:52">(<expr pos:start="858:9" pos:end="858:51"><name pos:start="858:9" pos:end="858:22">nb_connections</name> <operator pos:start="858:24" pos:end="858:25">&gt;=</operator> <name pos:start="858:27" pos:end="858:51"><name pos:start="858:27" pos:end="858:32">config</name><operator pos:start="858:33" pos:end="858:33">.</operator><name pos:start="858:34" pos:end="858:51">nb_max_connections</name></name></expr>)</condition> <block pos:start="858:54" pos:end="861:5">{<block_content pos:start="859:9" pos:end="860:18">
        <expr_stmt pos:start="859:9" pos:end="859:37"><expr pos:start="859:9" pos:end="859:36"><call pos:start="859:9" pos:end="859:36"><name pos:start="859:9" pos:end="859:32">http_send_too_busy_reply</name><argument_list pos:start="859:33" pos:end="859:36">(<argument pos:start="859:34" pos:end="859:35"><expr pos:start="859:34" pos:end="859:35"><name pos:start="859:34" pos:end="859:35">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="860:9" pos:end="860:18">goto <name pos:start="860:14" pos:end="860:17">fail</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="863:5" pos:end="863:30">/* add a new connection */</comment>
    <expr_stmt pos:start="864:5" pos:end="864:40"><expr pos:start="864:5" pos:end="864:39"><name pos:start="864:5" pos:end="864:5">c</name> <operator pos:start="864:7" pos:end="864:7">=</operator> <call pos:start="864:9" pos:end="864:39"><name pos:start="864:9" pos:end="864:18">av_mallocz</name><argument_list pos:start="864:19" pos:end="864:39">(<argument pos:start="864:20" pos:end="864:38"><expr pos:start="864:20" pos:end="864:38"><sizeof pos:start="864:20" pos:end="864:38">sizeof<argument_list pos:start="864:26" pos:end="864:38">(<argument pos:start="864:27" pos:end="864:37"><expr pos:start="864:27" pos:end="864:37"><name pos:start="864:27" pos:end="864:37">HTTPContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="865:5" pos:end="866:18"><if pos:start="865:5" pos:end="866:18">if <condition pos:start="865:8" pos:end="865:11">(<expr pos:start="865:9" pos:end="865:10"><operator pos:start="865:9" pos:end="865:9">!</operator><name pos:start="865:10" pos:end="865:10">c</name></expr>)</condition><block type="pseudo" pos:start="866:9" pos:end="866:18"><block_content pos:start="866:9" pos:end="866:18">
        <goto pos:start="866:9" pos:end="866:18">goto <name pos:start="866:14" pos:end="866:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt pos:start="868:5" pos:end="868:15"><expr pos:start="868:5" pos:end="868:14"><name pos:start="868:5" pos:end="868:9"><name pos:start="868:5" pos:end="868:5">c</name><operator pos:start="868:6" pos:end="868:7">-&gt;</operator><name pos:start="868:8" pos:end="868:9">fd</name></name> <operator pos:start="868:11" pos:end="868:11">=</operator> <name pos:start="868:13" pos:end="868:14">fd</name></expr>;</expr_stmt>
    <expr_stmt pos:start="869:5" pos:end="869:25"><expr pos:start="869:5" pos:end="869:24"><name pos:start="869:5" pos:end="869:17"><name pos:start="869:5" pos:end="869:5">c</name><operator pos:start="869:6" pos:end="869:7">-&gt;</operator><name pos:start="869:8" pos:end="869:17">poll_entry</name></name> <operator pos:start="869:19" pos:end="869:19">=</operator> <name pos:start="869:21" pos:end="869:24">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="870:5" pos:end="870:29"><expr pos:start="870:5" pos:end="870:28"><name pos:start="870:5" pos:end="870:16"><name pos:start="870:5" pos:end="870:5">c</name><operator pos:start="870:6" pos:end="870:7">-&gt;</operator><name pos:start="870:8" pos:end="870:16">from_addr</name></name> <operator pos:start="870:18" pos:end="870:18">=</operator> <name pos:start="870:20" pos:end="870:28">from_addr</name></expr>;</expr_stmt>
    <expr_stmt pos:start="871:5" pos:end="871:40"><expr pos:start="871:5" pos:end="871:39"><name pos:start="871:5" pos:end="871:18"><name pos:start="871:5" pos:end="871:5">c</name><operator pos:start="871:6" pos:end="871:7">-&gt;</operator><name pos:start="871:8" pos:end="871:18">buffer_size</name></name> <operator pos:start="871:20" pos:end="871:20">=</operator> <name pos:start="871:22" pos:end="871:39">IOBUFFER_INIT_SIZE</name></expr>;</expr_stmt>
    <expr_stmt pos:start="872:5" pos:end="872:42"><expr pos:start="872:5" pos:end="872:41"><name pos:start="872:5" pos:end="872:13"><name pos:start="872:5" pos:end="872:5">c</name><operator pos:start="872:6" pos:end="872:7">-&gt;</operator><name pos:start="872:8" pos:end="872:13">buffer</name></name> <operator pos:start="872:15" pos:end="872:15">=</operator> <call pos:start="872:17" pos:end="872:41"><name pos:start="872:17" pos:end="872:25">av_malloc</name><argument_list pos:start="872:26" pos:end="872:41">(<argument pos:start="872:27" pos:end="872:40"><expr pos:start="872:27" pos:end="872:40"><name pos:start="872:27" pos:end="872:40"><name pos:start="872:27" pos:end="872:27">c</name><operator pos:start="872:28" pos:end="872:29">-&gt;</operator><name pos:start="872:30" pos:end="872:40">buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="873:5" pos:end="874:18"><if pos:start="873:5" pos:end="874:18">if <condition pos:start="873:8" pos:end="873:19">(<expr pos:start="873:9" pos:end="873:18"><operator pos:start="873:9" pos:end="873:9">!</operator><name pos:start="873:10" pos:end="873:18"><name pos:start="873:10" pos:end="873:10">c</name><operator pos:start="873:11" pos:end="873:12">-&gt;</operator><name pos:start="873:13" pos:end="873:18">buffer</name></name></expr>)</condition><block type="pseudo" pos:start="874:9" pos:end="874:18"><block_content pos:start="874:9" pos:end="874:18">
        <goto pos:start="874:9" pos:end="874:18">goto <name pos:start="874:14" pos:end="874:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt pos:start="876:5" pos:end="876:29"><expr pos:start="876:5" pos:end="876:28"><name pos:start="876:5" pos:end="876:11"><name pos:start="876:5" pos:end="876:5">c</name><operator pos:start="876:6" pos:end="876:7">-&gt;</operator><name pos:start="876:8" pos:end="876:11">next</name></name> <operator pos:start="876:13" pos:end="876:13">=</operator> <name pos:start="876:15" pos:end="876:28">first_http_ctx</name></expr>;</expr_stmt>
    <expr_stmt pos:start="877:5" pos:end="877:23"><expr pos:start="877:5" pos:end="877:22"><name pos:start="877:5" pos:end="877:18">first_http_ctx</name> <operator pos:start="877:20" pos:end="877:20">=</operator> <name pos:start="877:22" pos:end="877:22">c</name></expr>;</expr_stmt>
    <expr_stmt pos:start="878:5" pos:end="878:21"><expr pos:start="878:5" pos:end="878:20"><name pos:start="878:5" pos:end="878:18">nb_connections</name><operator pos:start="878:19" pos:end="878:20">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="880:5" pos:end="880:35"><expr pos:start="880:5" pos:end="880:34"><call pos:start="880:5" pos:end="880:34"><name pos:start="880:5" pos:end="880:22">start_wait_request</name><argument_list pos:start="880:23" pos:end="880:34">(<argument pos:start="880:24" pos:end="880:24"><expr pos:start="880:24" pos:end="880:24"><name pos:start="880:24" pos:end="880:24">c</name></expr></argument>, <argument pos:start="880:27" pos:end="880:33"><expr pos:start="880:27" pos:end="880:33"><name pos:start="880:27" pos:end="880:33">is_rtsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="882:5" pos:end="882:11">return;</return>

 <label pos:start="884:2" pos:end="884:6"><name pos:start="884:2" pos:end="884:5">fail</name>:</label>
    <if_stmt pos:start="885:5" pos:end="888:5"><if pos:start="885:5" pos:end="888:5">if <condition pos:start="885:8" pos:end="885:10">(<expr pos:start="885:9" pos:end="885:9"><name pos:start="885:9" pos:end="885:9">c</name></expr>)</condition> <block pos:start="885:12" pos:end="888:5">{<block_content pos:start="886:9" pos:end="887:19">
        <expr_stmt pos:start="886:9" pos:end="886:29"><expr pos:start="886:9" pos:end="886:28"><call pos:start="886:9" pos:end="886:28"><name pos:start="886:9" pos:end="886:16">av_freep</name><argument_list pos:start="886:17" pos:end="886:28">(<argument pos:start="886:18" pos:end="886:27"><expr pos:start="886:18" pos:end="886:27"><operator pos:start="886:18" pos:end="886:18">&amp;</operator><name pos:start="886:19" pos:end="886:27"><name pos:start="886:19" pos:end="886:19">c</name><operator pos:start="886:20" pos:end="886:21">-&gt;</operator><name pos:start="886:22" pos:end="886:27">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="887:9" pos:end="887:19"><expr pos:start="887:9" pos:end="887:18"><call pos:start="887:9" pos:end="887:18"><name pos:start="887:9" pos:end="887:15">av_free</name><argument_list pos:start="887:16" pos:end="887:18">(<argument pos:start="887:17" pos:end="887:17"><expr pos:start="887:17" pos:end="887:17"><name pos:start="887:17" pos:end="887:17">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="889:5" pos:end="889:20"><expr pos:start="889:5" pos:end="889:19"><call pos:start="889:5" pos:end="889:19"><name pos:start="889:5" pos:end="889:15">closesocket</name><argument_list pos:start="889:16" pos:end="889:19">(<argument pos:start="889:17" pos:end="889:18"><expr pos:start="889:17" pos:end="889:18"><name pos:start="889:17" pos:end="889:18">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="892:1" pos:end="975:1"><type pos:start="892:1" pos:end="892:11"><specifier pos:start="892:1" pos:end="892:6">static</specifier> <name pos:start="892:8" pos:end="892:11">void</name></type> <name pos:start="892:13" pos:end="892:28">close_connection</name><parameter_list pos:start="892:29" pos:end="892:44">(<parameter pos:start="892:30" pos:end="892:43"><decl pos:start="892:30" pos:end="892:43"><type pos:start="892:30" pos:end="892:42"><name pos:start="892:30" pos:end="892:40">HTTPContext</name> <modifier pos:start="892:42" pos:end="892:42">*</modifier></type><name pos:start="892:43" pos:end="892:43">c</name></decl></parameter>)</parameter_list>
<block pos:start="893:1" pos:end="975:1">{<block_content pos:start="894:5" pos:end="974:21">
    <decl_stmt pos:start="894:5" pos:end="894:26"><decl pos:start="894:5" pos:end="894:20"><type pos:start="894:5" pos:end="894:18"><name pos:start="894:5" pos:end="894:15">HTTPContext</name> <modifier pos:start="894:17" pos:end="894:17">*</modifier><modifier pos:start="894:18" pos:end="894:18">*</modifier></type><name pos:start="894:19" pos:end="894:20">cp</name></decl>, <decl pos:start="894:23" pos:end="894:25"><type ref="prev" pos:start="894:5" pos:end="894:18"><modifier pos:start="894:23" pos:end="894:23">*</modifier></type><name pos:start="894:24" pos:end="894:25">c1</name></decl>;</decl_stmt>
    <decl_stmt pos:start="895:5" pos:end="895:22"><decl pos:start="895:5" pos:end="895:9"><type pos:start="895:5" pos:end="895:7"><name pos:start="895:5" pos:end="895:7">int</name></type> <name pos:start="895:9" pos:end="895:9">i</name></decl>, <decl pos:start="895:12" pos:end="895:21"><type ref="prev" pos:start="895:5" pos:end="895:7"/><name pos:start="895:12" pos:end="895:21">nb_streams</name></decl>;</decl_stmt>
    <decl_stmt pos:start="896:5" pos:end="896:25"><decl pos:start="896:5" pos:end="896:24"><type pos:start="896:5" pos:end="896:21"><name pos:start="896:5" pos:end="896:19">AVFormatContext</name> <modifier pos:start="896:21" pos:end="896:21">*</modifier></type><name pos:start="896:22" pos:end="896:24">ctx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="897:5" pos:end="897:17"><decl pos:start="897:5" pos:end="897:16"><type pos:start="897:5" pos:end="897:14"><name pos:start="897:5" pos:end="897:12">AVStream</name> <modifier pos:start="897:14" pos:end="897:14">*</modifier></type><name pos:start="897:15" pos:end="897:16">st</name></decl>;</decl_stmt>

    <comment type="block" pos:start="899:5" pos:end="899:37">/* remove connection from list */</comment>
    <expr_stmt pos:start="900:5" pos:end="900:25"><expr pos:start="900:5" pos:end="900:24"><name pos:start="900:5" pos:end="900:6">cp</name> <operator pos:start="900:8" pos:end="900:8">=</operator> <operator pos:start="900:10" pos:end="900:10">&amp;</operator><name pos:start="900:11" pos:end="900:24">first_http_ctx</name></expr>;</expr_stmt>
    <while pos:start="901:5" pos:end="907:5">while <condition pos:start="901:11" pos:end="901:15">(<expr pos:start="901:12" pos:end="901:14"><operator pos:start="901:12" pos:end="901:12">*</operator><name pos:start="901:13" pos:end="901:14">cp</name></expr>)</condition> <block pos:start="901:17" pos:end="907:5">{<block_content pos:start="902:9" pos:end="906:27">
        <expr_stmt pos:start="902:9" pos:end="902:17"><expr pos:start="902:9" pos:end="902:16"><name pos:start="902:9" pos:end="902:10">c1</name> <operator pos:start="902:12" pos:end="902:12">=</operator> <operator pos:start="902:14" pos:end="902:14">*</operator><name pos:start="902:15" pos:end="902:16">cp</name></expr>;</expr_stmt>
        <if_stmt pos:start="903:9" pos:end="906:27"><if pos:start="903:9" pos:end="904:26">if <condition pos:start="903:12" pos:end="903:20">(<expr pos:start="903:13" pos:end="903:19"><name pos:start="903:13" pos:end="903:14">c1</name> <operator pos:start="903:16" pos:end="903:17">==</operator> <name pos:start="903:19" pos:end="903:19">c</name></expr>)</condition><block type="pseudo" pos:start="904:13" pos:end="904:26"><block_content pos:start="904:13" pos:end="904:26">
            <expr_stmt pos:start="904:13" pos:end="904:26"><expr pos:start="904:13" pos:end="904:25"><operator pos:start="904:13" pos:end="904:13">*</operator><name pos:start="904:14" pos:end="904:15">cp</name> <operator pos:start="904:17" pos:end="904:17">=</operator> <name pos:start="904:19" pos:end="904:25"><name pos:start="904:19" pos:end="904:19">c</name><operator pos:start="904:20" pos:end="904:21">-&gt;</operator><name pos:start="904:22" pos:end="904:25">next</name></name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="905:9" pos:end="906:27">else<block type="pseudo" pos:start="906:13" pos:end="906:27"><block_content pos:start="906:13" pos:end="906:27">
            <expr_stmt pos:start="906:13" pos:end="906:27"><expr pos:start="906:13" pos:end="906:26"><name pos:start="906:13" pos:end="906:14">cp</name> <operator pos:start="906:16" pos:end="906:16">=</operator> <operator pos:start="906:18" pos:end="906:18">&amp;</operator><name pos:start="906:19" pos:end="906:26"><name pos:start="906:19" pos:end="906:20">c1</name><operator pos:start="906:21" pos:end="906:22">-&gt;</operator><name pos:start="906:23" pos:end="906:26">next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></while>

    <comment type="block" pos:start="909:5" pos:end="909:55">/* remove references, if any (XXX: do it faster) */</comment>
    <for pos:start="910:5" pos:end="913:5">for<control pos:start="910:8" pos:end="910:47">(<init pos:start="910:9" pos:end="910:28"><expr pos:start="910:9" pos:end="910:27"><name pos:start="910:9" pos:end="910:10">c1</name> <operator pos:start="910:12" pos:end="910:12">=</operator> <name pos:start="910:14" pos:end="910:27">first_http_ctx</name></expr>;</init> <condition pos:start="910:30" pos:end="910:32"><expr pos:start="910:30" pos:end="910:31"><name pos:start="910:30" pos:end="910:31">c1</name></expr>;</condition> <incr pos:start="910:34" pos:end="910:46"><expr pos:start="910:34" pos:end="910:46"><name pos:start="910:34" pos:end="910:35">c1</name> <operator pos:start="910:37" pos:end="910:37">=</operator> <name pos:start="910:39" pos:end="910:46"><name pos:start="910:39" pos:end="910:40">c1</name><operator pos:start="910:41" pos:end="910:42">-&gt;</operator><name pos:start="910:43" pos:end="910:46">next</name></name></expr></incr>)</control> <block pos:start="910:49" pos:end="913:5">{<block_content pos:start="911:9" pos:end="912:30">
        <if_stmt pos:start="911:9" pos:end="912:30"><if pos:start="911:9" pos:end="912:30">if <condition pos:start="911:12" pos:end="911:28">(<expr pos:start="911:13" pos:end="911:27"><name pos:start="911:13" pos:end="911:22"><name pos:start="911:13" pos:end="911:14">c1</name><operator pos:start="911:15" pos:end="911:16">-&gt;</operator><name pos:start="911:17" pos:end="911:22">rtsp_c</name></name> <operator pos:start="911:24" pos:end="911:25">==</operator> <name pos:start="911:27" pos:end="911:27">c</name></expr>)</condition><block type="pseudo" pos:start="912:13" pos:end="912:30"><block_content pos:start="912:13" pos:end="912:30">
            <expr_stmt pos:start="912:13" pos:end="912:30"><expr pos:start="912:13" pos:end="912:29"><name pos:start="912:13" pos:end="912:22"><name pos:start="912:13" pos:end="912:14">c1</name><operator pos:start="912:15" pos:end="912:16">-&gt;</operator><name pos:start="912:17" pos:end="912:22">rtsp_c</name></name> <operator pos:start="912:24" pos:end="912:24">=</operator> <name pos:start="912:26" pos:end="912:29">NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block" pos:start="915:5" pos:end="915:48">/* remove connection associated resources */</comment>
    <if_stmt pos:start="916:5" pos:end="917:27"><if pos:start="916:5" pos:end="917:27">if <condition pos:start="916:8" pos:end="916:19">(<expr pos:start="916:9" pos:end="916:18"><name pos:start="916:9" pos:end="916:13"><name pos:start="916:9" pos:end="916:9">c</name><operator pos:start="916:10" pos:end="916:11">-&gt;</operator><name pos:start="916:12" pos:end="916:13">fd</name></name> <operator pos:start="916:15" pos:end="916:16">&gt;=</operator> <literal type="number" pos:start="916:18" pos:end="916:18">0</literal></expr>)</condition><block type="pseudo" pos:start="917:9" pos:end="917:27"><block_content pos:start="917:9" pos:end="917:27">
        <expr_stmt pos:start="917:9" pos:end="917:27"><expr pos:start="917:9" pos:end="917:26"><call pos:start="917:9" pos:end="917:26"><name pos:start="917:9" pos:end="917:19">closesocket</name><argument_list pos:start="917:20" pos:end="917:26">(<argument pos:start="917:21" pos:end="917:25"><expr pos:start="917:21" pos:end="917:25"><name pos:start="917:21" pos:end="917:25"><name pos:start="917:21" pos:end="917:21">c</name><operator pos:start="917:22" pos:end="917:23">-&gt;</operator><name pos:start="917:24" pos:end="917:25">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="918:5" pos:end="926:5"><if pos:start="918:5" pos:end="926:5">if <condition pos:start="918:8" pos:end="918:18">(<expr pos:start="918:9" pos:end="918:17"><name pos:start="918:9" pos:end="918:17"><name pos:start="918:9" pos:end="918:9">c</name><operator pos:start="918:10" pos:end="918:11">-&gt;</operator><name pos:start="918:12" pos:end="918:17">fmt_in</name></name></expr>)</condition> <block pos:start="918:20" pos:end="926:5">{<block_content pos:start="920:9" pos:end="925:41">
        <comment type="block" pos:start="919:9" pos:end="919:37">/* close each frame parser */</comment>
        <for pos:start="920:9" pos:end="924:9">for<control pos:start="920:12" pos:end="920:44">(<init pos:start="920:13" pos:end="920:16"><expr pos:start="920:13" pos:end="920:15"><name pos:start="920:13" pos:end="920:13">i</name><operator pos:start="920:14" pos:end="920:14">=</operator><literal type="number" pos:start="920:15" pos:end="920:15">0</literal></expr>;</init><condition pos:start="920:17" pos:end="920:40"><expr pos:start="920:17" pos:end="920:39"><name pos:start="920:17" pos:end="920:17">i</name><operator pos:start="920:18" pos:end="920:18">&lt;</operator><name pos:start="920:19" pos:end="920:39"><name pos:start="920:19" pos:end="920:19">c</name><operator pos:start="920:20" pos:end="920:21">-&gt;</operator><name pos:start="920:22" pos:end="920:27">fmt_in</name><operator pos:start="920:28" pos:end="920:29">-&gt;</operator><name pos:start="920:30" pos:end="920:39">nb_streams</name></name></expr>;</condition><incr pos:start="920:41" pos:end="920:43"><expr pos:start="920:41" pos:end="920:43"><name pos:start="920:41" pos:end="920:41">i</name><operator pos:start="920:42" pos:end="920:43">++</operator></expr></incr>)</control> <block pos:start="920:46" pos:end="924:9">{<block_content pos:start="921:13" pos:end="923:41">
            <expr_stmt pos:start="921:13" pos:end="921:39"><expr pos:start="921:13" pos:end="921:38"><name pos:start="921:13" pos:end="921:14">st</name> <operator pos:start="921:16" pos:end="921:16">=</operator> <name pos:start="921:18" pos:end="921:38"><name pos:start="921:18" pos:end="921:18">c</name><operator pos:start="921:19" pos:end="921:20">-&gt;</operator><name pos:start="921:21" pos:end="921:26">fmt_in</name><operator pos:start="921:27" pos:end="921:28">-&gt;</operator><name pos:start="921:29" pos:end="921:35">streams</name><index pos:start="921:36" pos:end="921:38">[<expr pos:start="921:37" pos:end="921:37"><name pos:start="921:37" pos:end="921:37">i</name></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt pos:start="922:13" pos:end="923:41"><if pos:start="922:13" pos:end="923:41">if <condition pos:start="922:16" pos:end="922:33">(<expr pos:start="922:17" pos:end="922:32"><name pos:start="922:17" pos:end="922:32"><name pos:start="922:17" pos:end="922:18">st</name><operator pos:start="922:19" pos:end="922:20">-&gt;</operator><name pos:start="922:21" pos:end="922:25">codec</name><operator pos:start="922:26" pos:end="922:27">-&gt;</operator><name pos:start="922:28" pos:end="922:32">codec</name></name></expr>)</condition><block type="pseudo" pos:start="923:17" pos:end="923:41"><block_content pos:start="923:17" pos:end="923:41">
                <expr_stmt pos:start="923:17" pos:end="923:41"><expr pos:start="923:17" pos:end="923:40"><call pos:start="923:17" pos:end="923:40"><name pos:start="923:17" pos:end="923:29">avcodec_close</name><argument_list pos:start="923:30" pos:end="923:40">(<argument pos:start="923:31" pos:end="923:39"><expr pos:start="923:31" pos:end="923:39"><name pos:start="923:31" pos:end="923:39"><name pos:start="923:31" pos:end="923:32">st</name><operator pos:start="923:33" pos:end="923:34">-&gt;</operator><name pos:start="923:35" pos:end="923:39">codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt pos:start="925:9" pos:end="925:41"><expr pos:start="925:9" pos:end="925:40"><call pos:start="925:9" pos:end="925:40"><name pos:start="925:9" pos:end="925:28">avformat_close_input</name><argument_list pos:start="925:29" pos:end="925:40">(<argument pos:start="925:30" pos:end="925:39"><expr pos:start="925:30" pos:end="925:39"><operator pos:start="925:30" pos:end="925:30">&amp;</operator><name pos:start="925:31" pos:end="925:39"><name pos:start="925:31" pos:end="925:31">c</name><operator pos:start="925:32" pos:end="925:33">-&gt;</operator><name pos:start="925:34" pos:end="925:39">fmt_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="928:5" pos:end="928:40">/* free RTP output streams if any */</comment>
    <expr_stmt pos:start="929:5" pos:end="929:19"><expr pos:start="929:5" pos:end="929:18"><name pos:start="929:5" pos:end="929:14">nb_streams</name> <operator pos:start="929:16" pos:end="929:16">=</operator> <literal type="number" pos:start="929:18" pos:end="929:18">0</literal></expr>;</expr_stmt>
    <if_stmt pos:start="930:5" pos:end="931:43"><if pos:start="930:5" pos:end="931:43">if <condition pos:start="930:8" pos:end="930:18">(<expr pos:start="930:9" pos:end="930:17"><name pos:start="930:9" pos:end="930:17"><name pos:start="930:9" pos:end="930:9">c</name><operator pos:start="930:10" pos:end="930:11">-&gt;</operator><name pos:start="930:12" pos:end="930:17">stream</name></name></expr>)</condition><block type="pseudo" pos:start="931:9" pos:end="931:43"><block_content pos:start="931:9" pos:end="931:43">
        <expr_stmt pos:start="931:9" pos:end="931:43"><expr pos:start="931:9" pos:end="931:42"><name pos:start="931:9" pos:end="931:18">nb_streams</name> <operator pos:start="931:20" pos:end="931:20">=</operator> <name pos:start="931:22" pos:end="931:42"><name pos:start="931:22" pos:end="931:22">c</name><operator pos:start="931:23" pos:end="931:24">-&gt;</operator><name pos:start="931:25" pos:end="931:30">stream</name><operator pos:start="931:31" pos:end="931:32">-&gt;</operator><name pos:start="931:33" pos:end="931:42">nb_streams</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="933:5" pos:end="942:5">for<control pos:start="933:8" pos:end="933:29">(<init pos:start="933:9" pos:end="933:12"><expr pos:start="933:9" pos:end="933:11"><name pos:start="933:9" pos:end="933:9">i</name><operator pos:start="933:10" pos:end="933:10">=</operator><literal type="number" pos:start="933:11" pos:end="933:11">0</literal></expr>;</init><condition pos:start="933:13" pos:end="933:25"><expr pos:start="933:13" pos:end="933:24"><name pos:start="933:13" pos:end="933:13">i</name><operator pos:start="933:14" pos:end="933:14">&lt;</operator><name pos:start="933:15" pos:end="933:24">nb_streams</name></expr>;</condition><incr pos:start="933:26" pos:end="933:28"><expr pos:start="933:26" pos:end="933:28"><name pos:start="933:26" pos:end="933:26">i</name><operator pos:start="933:27" pos:end="933:28">++</operator></expr></incr>)</control> <block pos:start="933:31" pos:end="942:5">{<block_content pos:start="934:9" pos:end="941:39">
        <expr_stmt pos:start="934:9" pos:end="934:28"><expr pos:start="934:9" pos:end="934:27"><name pos:start="934:9" pos:end="934:11">ctx</name> <operator pos:start="934:13" pos:end="934:13">=</operator> <name pos:start="934:15" pos:end="934:27"><name pos:start="934:15" pos:end="934:15">c</name><operator pos:start="934:16" pos:end="934:17">-&gt;</operator><name pos:start="934:18" pos:end="934:24">rtp_ctx</name><index pos:start="934:25" pos:end="934:27">[<expr pos:start="934:26" pos:end="934:26"><name pos:start="934:26" pos:end="934:26">i</name></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt pos:start="935:9" pos:end="940:9"><if pos:start="935:9" pos:end="940:9">if <condition pos:start="935:12" pos:end="935:16">(<expr pos:start="935:13" pos:end="935:15"><name pos:start="935:13" pos:end="935:15">ctx</name></expr>)</condition> <block pos:start="935:18" pos:end="940:9">{<block_content pos:start="936:13" pos:end="939:27">
            <expr_stmt pos:start="936:13" pos:end="936:34"><expr pos:start="936:13" pos:end="936:33"><call pos:start="936:13" pos:end="936:33"><name pos:start="936:13" pos:end="936:28">av_write_trailer</name><argument_list pos:start="936:29" pos:end="936:33">(<argument pos:start="936:30" pos:end="936:32"><expr pos:start="936:30" pos:end="936:32"><name pos:start="936:30" pos:end="936:32">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="937:13" pos:end="937:41"><expr pos:start="937:13" pos:end="937:40"><call pos:start="937:13" pos:end="937:40"><name pos:start="937:13" pos:end="937:24">av_dict_free</name><argument_list pos:start="937:25" pos:end="937:40">(<argument pos:start="937:26" pos:end="937:39"><expr pos:start="937:26" pos:end="937:39"><operator pos:start="937:26" pos:end="937:26">&amp;</operator><name pos:start="937:27" pos:end="937:39"><name pos:start="937:27" pos:end="937:29">ctx</name><operator pos:start="937:30" pos:end="937:31">-&gt;</operator><name pos:start="937:32" pos:end="937:39">metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="938:13" pos:end="938:39"><expr pos:start="938:13" pos:end="938:38"><call pos:start="938:13" pos:end="938:38"><name pos:start="938:13" pos:end="938:20">av_freep</name><argument_list pos:start="938:21" pos:end="938:38">(<argument pos:start="938:22" pos:end="938:37"><expr pos:start="938:22" pos:end="938:37"><operator pos:start="938:22" pos:end="938:22">&amp;</operator><name pos:start="938:23" pos:end="938:37"><name pos:start="938:23" pos:end="938:25">ctx</name><operator pos:start="938:26" pos:end="938:27">-&gt;</operator><name pos:start="938:28" pos:end="938:34">streams</name><index pos:start="938:35" pos:end="938:37">[<expr pos:start="938:36" pos:end="938:36"><literal type="number" pos:start="938:36" pos:end="938:36">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="939:13" pos:end="939:27"><expr pos:start="939:13" pos:end="939:26"><call pos:start="939:13" pos:end="939:26"><name pos:start="939:13" pos:end="939:20">av_freep</name><argument_list pos:start="939:21" pos:end="939:26">(<argument pos:start="939:22" pos:end="939:25"><expr pos:start="939:22" pos:end="939:25"><operator pos:start="939:22" pos:end="939:22">&amp;</operator><name pos:start="939:23" pos:end="939:25">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="941:9" pos:end="941:39"><expr pos:start="941:9" pos:end="941:38"><call pos:start="941:9" pos:end="941:38"><name pos:start="941:9" pos:end="941:19">ffurl_close</name><argument_list pos:start="941:20" pos:end="941:38">(<argument pos:start="941:21" pos:end="941:37"><expr pos:start="941:21" pos:end="941:37"><name pos:start="941:21" pos:end="941:37"><name pos:start="941:21" pos:end="941:21">c</name><operator pos:start="941:22" pos:end="941:23">-&gt;</operator><name pos:start="941:24" pos:end="941:34">rtp_handles</name><index pos:start="941:35" pos:end="941:37">[<expr pos:start="941:36" pos:end="941:36"><name pos:start="941:36" pos:end="941:36">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt pos:start="944:5" pos:end="944:22"><expr pos:start="944:5" pos:end="944:21"><name pos:start="944:5" pos:end="944:7">ctx</name> <operator pos:start="944:9" pos:end="944:9">=</operator> <name pos:start="944:11" pos:end="944:21"><name pos:start="944:11" pos:end="944:11">c</name><operator pos:start="944:12" pos:end="944:13">-&gt;</operator><name pos:start="944:14" pos:end="944:21">pfmt_ctx</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="946:5" pos:end="959:9"><if pos:start="946:5" pos:end="959:9">if <condition pos:start="946:8" pos:end="946:12">(<expr pos:start="946:9" pos:end="946:11"><name pos:start="946:9" pos:end="946:11">ctx</name></expr>)</condition> <block pos:start="946:14" pos:end="959:9">{<block_content pos:start="947:9" pos:end="958:34">
        <if_stmt pos:start="947:9" pos:end="954:9"><if pos:start="947:9" pos:end="954:9">if <condition pos:start="947:12" pos:end="947:76">(<expr pos:start="947:13" pos:end="947:75"><operator pos:start="947:13" pos:end="947:13">!</operator><name pos:start="947:14" pos:end="947:32"><name pos:start="947:14" pos:end="947:14">c</name><operator pos:start="947:15" pos:end="947:16">-&gt;</operator><name pos:start="947:17" pos:end="947:32">last_packet_sent</name></name> <operator pos:start="947:34" pos:end="947:35">&amp;&amp;</operator> <name pos:start="947:37" pos:end="947:44"><name pos:start="947:37" pos:end="947:37">c</name><operator pos:start="947:38" pos:end="947:39">-&gt;</operator><name pos:start="947:40" pos:end="947:44">state</name></name> <operator pos:start="947:46" pos:end="947:47">==</operator> <name pos:start="947:49" pos:end="947:75">HTTPSTATE_SEND_DATA_TRAILER</name></expr>)</condition> <block pos:start="947:78" pos:end="954:9">{<block_content pos:start="949:13" pos:end="953:13">
            <comment type="block" pos:start="948:13" pos:end="948:32">/* prepare header */</comment>
            <if_stmt pos:start="949:13" pos:end="953:13"><if pos:start="949:13" pos:end="953:13">if <condition pos:start="949:16" pos:end="949:65">(<expr pos:start="949:17" pos:end="949:64"><name pos:start="949:17" pos:end="949:28"><name pos:start="949:17" pos:end="949:19">ctx</name><operator pos:start="949:20" pos:end="949:21">-&gt;</operator><name pos:start="949:22" pos:end="949:28">oformat</name></name> <operator pos:start="949:30" pos:end="949:31">&amp;&amp;</operator> <call pos:start="949:33" pos:end="949:59"><name pos:start="949:33" pos:end="949:49">avio_open_dyn_buf</name><argument_list pos:start="949:50" pos:end="949:59">(<argument pos:start="949:51" pos:end="949:58"><expr pos:start="949:51" pos:end="949:58"><operator pos:start="949:51" pos:end="949:51">&amp;</operator><name pos:start="949:52" pos:end="949:58"><name pos:start="949:52" pos:end="949:54">ctx</name><operator pos:start="949:55" pos:end="949:56">-&gt;</operator><name pos:start="949:57" pos:end="949:58">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="949:61" pos:end="949:62">&gt;=</operator> <literal type="number" pos:start="949:64" pos:end="949:64">0</literal></expr>)</condition> <block pos:start="949:67" pos:end="953:13">{<block_content pos:start="950:17" pos:end="952:59">
                <expr_stmt pos:start="950:17" pos:end="950:38"><expr pos:start="950:17" pos:end="950:37"><call pos:start="950:17" pos:end="950:37"><name pos:start="950:17" pos:end="950:32">av_write_trailer</name><argument_list pos:start="950:33" pos:end="950:37">(<argument pos:start="950:34" pos:end="950:36"><expr pos:start="950:34" pos:end="950:36"><name pos:start="950:34" pos:end="950:36">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="951:17" pos:end="951:40"><expr pos:start="951:17" pos:end="951:39"><call pos:start="951:17" pos:end="951:39"><name pos:start="951:17" pos:end="951:24">av_freep</name><argument_list pos:start="951:25" pos:end="951:39">(<argument pos:start="951:26" pos:end="951:38"><expr pos:start="951:26" pos:end="951:38"><operator pos:start="951:26" pos:end="951:26">&amp;</operator><name pos:start="951:27" pos:end="951:38"><name pos:start="951:27" pos:end="951:27">c</name><operator pos:start="951:28" pos:end="951:29">-&gt;</operator><name pos:start="951:30" pos:end="951:38">pb_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="952:17" pos:end="952:59"><expr pos:start="952:17" pos:end="952:58"><call pos:start="952:17" pos:end="952:58"><name pos:start="952:17" pos:end="952:34">avio_close_dyn_buf</name><argument_list pos:start="952:35" pos:end="952:58">(<argument pos:start="952:36" pos:end="952:42"><expr pos:start="952:36" pos:end="952:42"><name pos:start="952:36" pos:end="952:42"><name pos:start="952:36" pos:end="952:38">ctx</name><operator pos:start="952:39" pos:end="952:40">-&gt;</operator><name pos:start="952:41" pos:end="952:42">pb</name></name></expr></argument>, <argument pos:start="952:45" pos:end="952:57"><expr pos:start="952:45" pos:end="952:57"><operator pos:start="952:45" pos:end="952:45">&amp;</operator><name pos:start="952:46" pos:end="952:57"><name pos:start="952:46" pos:end="952:46">c</name><operator pos:start="952:47" pos:end="952:48">-&gt;</operator><name pos:start="952:49" pos:end="952:57">pb_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <for pos:start="955:9" pos:end="956:39">for<control pos:start="955:12" pos:end="955:40">(<init pos:start="955:13" pos:end="955:16"><expr pos:start="955:13" pos:end="955:15"><name pos:start="955:13" pos:end="955:13">i</name><operator pos:start="955:14" pos:end="955:14">=</operator><literal type="number" pos:start="955:15" pos:end="955:15">0</literal></expr>;</init> <condition pos:start="955:18" pos:end="955:35"><expr pos:start="955:18" pos:end="955:34"><name pos:start="955:18" pos:end="955:18">i</name><operator pos:start="955:19" pos:end="955:19">&lt;</operator><name pos:start="955:20" pos:end="955:34"><name pos:start="955:20" pos:end="955:22">ctx</name><operator pos:start="955:23" pos:end="955:24">-&gt;</operator><name pos:start="955:25" pos:end="955:34">nb_streams</name></name></expr>;</condition> <incr pos:start="955:37" pos:end="955:39"><expr pos:start="955:37" pos:end="955:39"><name pos:start="955:37" pos:end="955:37">i</name><operator pos:start="955:38" pos:end="955:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="956:13" pos:end="956:39"><block_content pos:start="956:13" pos:end="956:39">
            <expr_stmt pos:start="956:13" pos:end="956:39"><expr pos:start="956:13" pos:end="956:38"><call pos:start="956:13" pos:end="956:38"><name pos:start="956:13" pos:end="956:20">av_freep</name><argument_list pos:start="956:21" pos:end="956:38">(<argument pos:start="956:22" pos:end="956:37"><expr pos:start="956:22" pos:end="956:37"><operator pos:start="956:22" pos:end="956:22">&amp;</operator><name pos:start="956:23" pos:end="956:37"><name pos:start="956:23" pos:end="956:25">ctx</name><operator pos:start="956:26" pos:end="956:27">-&gt;</operator><name pos:start="956:28" pos:end="956:34">streams</name><index pos:start="956:35" pos:end="956:37">[<expr pos:start="956:36" pos:end="956:36"><name pos:start="956:36" pos:end="956:36">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt pos:start="957:9" pos:end="957:32"><expr pos:start="957:9" pos:end="957:31"><call pos:start="957:9" pos:end="957:31"><name pos:start="957:9" pos:end="957:16">av_freep</name><argument_list pos:start="957:17" pos:end="957:31">(<argument pos:start="957:18" pos:end="957:30"><expr pos:start="957:18" pos:end="957:30"><operator pos:start="957:18" pos:end="957:18">&amp;</operator><name pos:start="957:19" pos:end="957:30"><name pos:start="957:19" pos:end="957:21">ctx</name><operator pos:start="957:22" pos:end="957:23">-&gt;</operator><name pos:start="957:24" pos:end="957:30">streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="958:9" pos:end="958:34"><expr pos:start="958:9" pos:end="958:33"><call pos:start="958:9" pos:end="958:33"><name pos:start="958:9" pos:end="958:16">av_freep</name><argument_list pos:start="958:17" pos:end="958:33">(<argument pos:start="958:18" pos:end="958:32"><expr pos:start="958:18" pos:end="958:32"><operator pos:start="958:18" pos:end="958:18">&amp;</operator><name pos:start="958:19" pos:end="958:32"><name pos:start="958:19" pos:end="958:21">ctx</name><operator pos:start="958:22" pos:end="958:23">-&gt;</operator><name pos:start="958:24" pos:end="958:32">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="961:5" pos:end="962:50"><if pos:start="961:5" pos:end="962:50">if <condition pos:start="961:8" pos:end="961:76">(<expr pos:start="961:9" pos:end="961:75"><name pos:start="961:9" pos:end="961:17"><name pos:start="961:9" pos:end="961:9">c</name><operator pos:start="961:10" pos:end="961:11">-&gt;</operator><name pos:start="961:12" pos:end="961:17">stream</name></name> <operator pos:start="961:19" pos:end="961:20">&amp;&amp;</operator> <operator pos:start="961:22" pos:end="961:22">!</operator><name pos:start="961:23" pos:end="961:29"><name pos:start="961:23" pos:end="961:23">c</name><operator pos:start="961:24" pos:end="961:25">-&gt;</operator><name pos:start="961:26" pos:end="961:29">post</name></name> <operator pos:start="961:31" pos:end="961:32">&amp;&amp;</operator> <name pos:start="961:34" pos:end="961:55"><name pos:start="961:34" pos:end="961:34">c</name><operator pos:start="961:35" pos:end="961:36">-&gt;</operator><name pos:start="961:37" pos:end="961:42">stream</name><operator pos:start="961:43" pos:end="961:44">-&gt;</operator><name pos:start="961:45" pos:end="961:55">stream_type</name></name> <operator pos:start="961:57" pos:end="961:58">==</operator> <name pos:start="961:60" pos:end="961:75">STREAM_TYPE_LIVE</name></expr>)</condition><block type="pseudo" pos:start="962:9" pos:end="962:50"><block_content pos:start="962:9" pos:end="962:50">
        <expr_stmt pos:start="962:9" pos:end="962:50"><expr pos:start="962:9" pos:end="962:49"><name pos:start="962:9" pos:end="962:25">current_bandwidth</name> <operator pos:start="962:27" pos:end="962:28">-=</operator> <name pos:start="962:30" pos:end="962:49"><name pos:start="962:30" pos:end="962:30">c</name><operator pos:start="962:31" pos:end="962:32">-&gt;</operator><name pos:start="962:33" pos:end="962:38">stream</name><operator pos:start="962:39" pos:end="962:40">-&gt;</operator><name pos:start="962:41" pos:end="962:49">bandwidth</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="964:5" pos:end="964:66">/* signal that there is no feed if we are the feeder socket */</comment>
    <if_stmt pos:start="965:5" pos:end="968:5"><if pos:start="965:5" pos:end="968:5">if <condition pos:start="965:8" pos:end="965:56">(<expr pos:start="965:9" pos:end="965:55"><name pos:start="965:9" pos:end="965:16"><name pos:start="965:9" pos:end="965:9">c</name><operator pos:start="965:10" pos:end="965:11">-&gt;</operator><name pos:start="965:12" pos:end="965:16">state</name></name> <operator pos:start="965:18" pos:end="965:19">==</operator> <name pos:start="965:21" pos:end="965:42">HTTPSTATE_RECEIVE_DATA</name> <operator pos:start="965:44" pos:end="965:45">&amp;&amp;</operator> <name pos:start="965:47" pos:end="965:55"><name pos:start="965:47" pos:end="965:47">c</name><operator pos:start="965:48" pos:end="965:49">-&gt;</operator><name pos:start="965:50" pos:end="965:55">stream</name></name></expr>)</condition> <block pos:start="965:58" pos:end="968:5">{<block_content pos:start="966:9" pos:end="967:26">
        <expr_stmt pos:start="966:9" pos:end="966:35"><expr pos:start="966:9" pos:end="966:34"><name pos:start="966:9" pos:end="966:30"><name pos:start="966:9" pos:end="966:9">c</name><operator pos:start="966:10" pos:end="966:11">-&gt;</operator><name pos:start="966:12" pos:end="966:17">stream</name><operator pos:start="966:18" pos:end="966:19">-&gt;</operator><name pos:start="966:20" pos:end="966:30">feed_opened</name></name> <operator pos:start="966:32" pos:end="966:32">=</operator> <literal type="number" pos:start="966:34" pos:end="966:34">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="967:9" pos:end="967:26"><expr pos:start="967:9" pos:end="967:25"><call pos:start="967:9" pos:end="967:25"><name pos:start="967:9" pos:end="967:13">close</name><argument_list pos:start="967:14" pos:end="967:25">(<argument pos:start="967:15" pos:end="967:24"><expr pos:start="967:15" pos:end="967:24"><name pos:start="967:15" pos:end="967:24"><name pos:start="967:15" pos:end="967:15">c</name><operator pos:start="967:16" pos:end="967:17">-&gt;</operator><name pos:start="967:18" pos:end="967:24">feed_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="970:5" pos:end="970:28"><expr pos:start="970:5" pos:end="970:27"><call pos:start="970:5" pos:end="970:27"><name pos:start="970:5" pos:end="970:12">av_freep</name><argument_list pos:start="970:13" pos:end="970:27">(<argument pos:start="970:14" pos:end="970:26"><expr pos:start="970:14" pos:end="970:26"><operator pos:start="970:14" pos:end="970:14">&amp;</operator><name pos:start="970:15" pos:end="970:26"><name pos:start="970:15" pos:end="970:15">c</name><operator pos:start="970:16" pos:end="970:17">-&gt;</operator><name pos:start="970:18" pos:end="970:26">pb_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="971:5" pos:end="971:32"><expr pos:start="971:5" pos:end="971:31"><call pos:start="971:5" pos:end="971:31"><name pos:start="971:5" pos:end="971:12">av_freep</name><argument_list pos:start="971:13" pos:end="971:31">(<argument pos:start="971:14" pos:end="971:30"><expr pos:start="971:14" pos:end="971:30"><operator pos:start="971:14" pos:end="971:14">&amp;</operator><name pos:start="971:15" pos:end="971:30"><name pos:start="971:15" pos:end="971:15">c</name><operator pos:start="971:16" pos:end="971:17">-&gt;</operator><name pos:start="971:18" pos:end="971:30">packet_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="972:5" pos:end="972:25"><expr pos:start="972:5" pos:end="972:24"><call pos:start="972:5" pos:end="972:24"><name pos:start="972:5" pos:end="972:12">av_freep</name><argument_list pos:start="972:13" pos:end="972:24">(<argument pos:start="972:14" pos:end="972:23"><expr pos:start="972:14" pos:end="972:23"><operator pos:start="972:14" pos:end="972:14">&amp;</operator><name pos:start="972:15" pos:end="972:23"><name pos:start="972:15" pos:end="972:15">c</name><operator pos:start="972:16" pos:end="972:17">-&gt;</operator><name pos:start="972:18" pos:end="972:23">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="973:5" pos:end="973:15"><expr pos:start="973:5" pos:end="973:14"><call pos:start="973:5" pos:end="973:14"><name pos:start="973:5" pos:end="973:11">av_free</name><argument_list pos:start="973:12" pos:end="973:14">(<argument pos:start="973:13" pos:end="973:13"><expr pos:start="973:13" pos:end="973:13"><name pos:start="973:13" pos:end="973:13">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="974:5" pos:end="974:21"><expr pos:start="974:5" pos:end="974:20"><name pos:start="974:5" pos:end="974:18">nb_connections</name><operator pos:start="974:19" pos:end="974:20">--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="977:1" pos:end="1156:1"><type pos:start="977:1" pos:end="977:10"><specifier pos:start="977:1" pos:end="977:6">static</specifier> <name pos:start="977:8" pos:end="977:10">int</name></type> <name pos:start="977:12" pos:end="977:28">handle_connection</name><parameter_list pos:start="977:29" pos:end="977:44">(<parameter pos:start="977:30" pos:end="977:43"><decl pos:start="977:30" pos:end="977:43"><type pos:start="977:30" pos:end="977:42"><name pos:start="977:30" pos:end="977:40">HTTPContext</name> <modifier pos:start="977:42" pos:end="977:42">*</modifier></type><name pos:start="977:43" pos:end="977:43">c</name></decl></parameter>)</parameter_list>
<block pos:start="978:1" pos:end="1156:1">{<block_content pos:start="979:5" pos:end="1155:14">
    <decl_stmt pos:start="979:5" pos:end="979:17"><decl pos:start="979:5" pos:end="979:11"><type pos:start="979:5" pos:end="979:7"><name pos:start="979:5" pos:end="979:7">int</name></type> <name pos:start="979:9" pos:end="979:11">len</name></decl>, <decl pos:start="979:14" pos:end="979:16"><type ref="prev" pos:start="979:5" pos:end="979:7"/><name pos:start="979:14" pos:end="979:16">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="980:5" pos:end="980:17"><decl pos:start="980:5" pos:end="980:16"><type pos:start="980:5" pos:end="980:13"><name pos:start="980:5" pos:end="980:11">uint8_t</name> <modifier pos:start="980:13" pos:end="980:13">*</modifier></type><name pos:start="980:14" pos:end="980:16">ptr</name></decl>;</decl_stmt>

    <switch pos:start="982:5" pos:end="1150:5">switch<condition pos:start="982:11" pos:end="982:20">(<expr pos:start="982:12" pos:end="982:19"><name pos:start="982:12" pos:end="982:19"><name pos:start="982:12" pos:end="982:12">c</name><operator pos:start="982:13" pos:end="982:14">-&gt;</operator><name pos:start="982:15" pos:end="982:19">state</name></name></expr>)</condition> <block pos:start="982:22" pos:end="1150:5">{<block_content pos:start="983:5" pos:end="1149:18">
    <case pos:start="983:5" pos:end="983:32">case <expr pos:start="983:10" pos:end="983:31"><name pos:start="983:10" pos:end="983:31">HTTPSTATE_WAIT_REQUEST</name></expr>:</case>
    <case pos:start="984:5" pos:end="984:32">case <expr pos:start="984:10" pos:end="984:31"><name pos:start="984:10" pos:end="984:31">RTSPSTATE_WAIT_REQUEST</name></expr>:</case>
        <comment type="block" pos:start="985:9" pos:end="985:23">/* timeout ? */</comment>
        <if_stmt pos:start="986:9" pos:end="987:22"><if pos:start="986:9" pos:end="987:22">if <condition pos:start="986:12" pos:end="986:40">(<expr pos:start="986:13" pos:end="986:39"><operator pos:start="986:13" pos:end="986:13">(</operator><name pos:start="986:14" pos:end="986:23"><name pos:start="986:14" pos:end="986:14">c</name><operator pos:start="986:15" pos:end="986:16">-&gt;</operator><name pos:start="986:17" pos:end="986:23">timeout</name></name> <operator pos:start="986:25" pos:end="986:25">-</operator> <name pos:start="986:27" pos:end="986:34">cur_time</name><operator pos:start="986:35" pos:end="986:35">)</operator> <operator pos:start="986:37" pos:end="986:37">&lt;</operator> <literal type="number" pos:start="986:39" pos:end="986:39">0</literal></expr>)</condition><block type="pseudo" pos:start="987:13" pos:end="987:22"><block_content pos:start="987:13" pos:end="987:22">
            <return pos:start="987:13" pos:end="987:22">return <expr pos:start="987:20" pos:end="987:21"><operator pos:start="987:20" pos:end="987:20">-</operator><literal type="number" pos:start="987:21" pos:end="987:21">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt pos:start="988:9" pos:end="989:22"><if pos:start="988:9" pos:end="989:22">if <condition pos:start="988:12" pos:end="988:57">(<expr pos:start="988:13" pos:end="988:56"><name pos:start="988:13" pos:end="988:34"><name pos:start="988:13" pos:end="988:13">c</name><operator pos:start="988:14" pos:end="988:15">-&gt;</operator><name pos:start="988:16" pos:end="988:25">poll_entry</name><operator pos:start="988:26" pos:end="988:27">-&gt;</operator><name pos:start="988:28" pos:end="988:34">revents</name></name> <operator pos:start="988:36" pos:end="988:36">&amp;</operator> <operator pos:start="988:38" pos:end="988:38">(</operator><name pos:start="988:39" pos:end="988:45">POLLERR</name> <operator pos:start="988:47" pos:end="988:47">|</operator> <name pos:start="988:49" pos:end="988:55">POLLHUP</name><operator pos:start="988:56" pos:end="988:56">)</operator></expr>)</condition><block type="pseudo" pos:start="989:13" pos:end="989:22"><block_content pos:start="989:13" pos:end="989:22">
            <return pos:start="989:13" pos:end="989:22">return <expr pos:start="989:20" pos:end="989:21"><operator pos:start="989:20" pos:end="989:20">-</operator><literal type="number" pos:start="989:21" pos:end="989:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block" pos:start="991:9" pos:end="991:42">/* no need to read if no events */</comment>
        <if_stmt pos:start="992:9" pos:end="993:21"><if pos:start="992:9" pos:end="993:21">if <condition pos:start="992:12" pos:end="992:47">(<expr pos:start="992:13" pos:end="992:46"><operator pos:start="992:13" pos:end="992:13">!</operator><operator pos:start="992:14" pos:end="992:14">(</operator><name pos:start="992:15" pos:end="992:36"><name pos:start="992:15" pos:end="992:15">c</name><operator pos:start="992:16" pos:end="992:17">-&gt;</operator><name pos:start="992:18" pos:end="992:27">poll_entry</name><operator pos:start="992:28" pos:end="992:29">-&gt;</operator><name pos:start="992:30" pos:end="992:36">revents</name></name> <operator pos:start="992:38" pos:end="992:38">&amp;</operator> <name pos:start="992:40" pos:end="992:45">POLLIN</name><operator pos:start="992:46" pos:end="992:46">)</operator></expr>)</condition><block type="pseudo" pos:start="993:13" pos:end="993:21"><block_content pos:start="993:13" pos:end="993:21">
            <return pos:start="993:13" pos:end="993:21">return <expr pos:start="993:20" pos:end="993:20"><literal type="number" pos:start="993:20" pos:end="993:20">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <comment type="block" pos:start="994:9" pos:end="994:27">/* read the data */</comment>
    <label pos:start="995:5" pos:end="995:14"><name pos:start="995:5" pos:end="995:13">read_loop</name>:</label>
        <if_stmt pos:start="996:9" pos:end="997:22"><if pos:start="996:9" pos:end="997:22">if <condition pos:start="996:12" pos:end="996:54">(<expr pos:start="996:13" pos:end="996:53"><operator pos:start="996:13" pos:end="996:13">!</operator><operator pos:start="996:14" pos:end="996:14">(</operator><name pos:start="996:15" pos:end="996:17">len</name> <operator pos:start="996:19" pos:end="996:19">=</operator> <call pos:start="996:21" pos:end="996:52"><name pos:start="996:21" pos:end="996:24">recv</name><argument_list pos:start="996:25" pos:end="996:52">(<argument pos:start="996:26" pos:end="996:30"><expr pos:start="996:26" pos:end="996:30"><name pos:start="996:26" pos:end="996:30"><name pos:start="996:26" pos:end="996:26">c</name><operator pos:start="996:27" pos:end="996:28">-&gt;</operator><name pos:start="996:29" pos:end="996:30">fd</name></name></expr></argument>, <argument pos:start="996:33" pos:end="996:45"><expr pos:start="996:33" pos:end="996:45"><name pos:start="996:33" pos:end="996:45"><name pos:start="996:33" pos:end="996:33">c</name><operator pos:start="996:34" pos:end="996:35">-&gt;</operator><name pos:start="996:36" pos:end="996:45">buffer_ptr</name></name></expr></argument>, <argument pos:start="996:48" pos:end="996:48"><expr pos:start="996:48" pos:end="996:48"><literal type="number" pos:start="996:48" pos:end="996:48">1</literal></expr></argument>, <argument pos:start="996:51" pos:end="996:51"><expr pos:start="996:51" pos:end="996:51"><literal type="number" pos:start="996:51" pos:end="996:51">0</literal></expr></argument>)</argument_list></call><operator pos:start="996:53" pos:end="996:53">)</operator></expr>)</condition><block type="pseudo" pos:start="997:13" pos:end="997:22"><block_content pos:start="997:13" pos:end="997:22">
            <return pos:start="997:13" pos:end="997:22">return <expr pos:start="997:20" pos:end="997:21"><operator pos:start="997:20" pos:end="997:20">-</operator><literal type="number" pos:start="997:21" pos:end="997:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="999:9" pos:end="1004:9"><if pos:start="999:9" pos:end="1004:9">if <condition pos:start="999:12" pos:end="999:20">(<expr pos:start="999:13" pos:end="999:19"><name pos:start="999:13" pos:end="999:15">len</name> <operator pos:start="999:17" pos:end="999:17">&lt;</operator> <literal type="number" pos:start="999:19" pos:end="999:19">0</literal></expr>)</condition> <block pos:start="999:22" pos:end="1004:9">{<block_content pos:start="1000:13" pos:end="1003:18">
            <if_stmt pos:start="1000:13" pos:end="1002:26"><if pos:start="1000:13" pos:end="1002:26">if <condition pos:start="1000:16" pos:end="1001:48">(<expr pos:start="1000:17" pos:end="1001:47"><call pos:start="1000:17" pos:end="1000:29"><name pos:start="1000:17" pos:end="1000:27">ff_neterrno</name><argument_list pos:start="1000:28" pos:end="1000:29">()</argument_list></call> <operator pos:start="1000:31" pos:end="1000:32">!=</operator> <call pos:start="1000:34" pos:end="1000:48"><name pos:start="1000:34" pos:end="1000:40">AVERROR</name><argument_list pos:start="1000:41" pos:end="1000:48">(<argument pos:start="1000:42" pos:end="1000:47"><expr pos:start="1000:42" pos:end="1000:47"><name pos:start="1000:42" pos:end="1000:47">EAGAIN</name></expr></argument>)</argument_list></call> <operator pos:start="1000:50" pos:end="1000:51">&amp;&amp;</operator>
                <call pos:start="1001:17" pos:end="1001:29"><name pos:start="1001:17" pos:end="1001:27">ff_neterrno</name><argument_list pos:start="1001:28" pos:end="1001:29">()</argument_list></call> <operator pos:start="1001:31" pos:end="1001:32">!=</operator> <call pos:start="1001:34" pos:end="1001:47"><name pos:start="1001:34" pos:end="1001:40">AVERROR</name><argument_list pos:start="1001:41" pos:end="1001:47">(<argument pos:start="1001:42" pos:end="1001:46"><expr pos:start="1001:42" pos:end="1001:46"><name pos:start="1001:42" pos:end="1001:46">EINTR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1002:17" pos:end="1002:26"><block_content pos:start="1002:17" pos:end="1002:26">
                <return pos:start="1002:17" pos:end="1002:26">return <expr pos:start="1002:24" pos:end="1002:25"><operator pos:start="1002:24" pos:end="1002:24">-</operator><literal type="number" pos:start="1002:25" pos:end="1002:25">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <break pos:start="1003:13" pos:end="1003:18">break;</break>
        </block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="1005:9" pos:end="1005:40">/* search for end of request. */</comment>
        <expr_stmt pos:start="1006:9" pos:end="1006:29"><expr pos:start="1006:9" pos:end="1006:28"><name pos:start="1006:9" pos:end="1006:21"><name pos:start="1006:9" pos:end="1006:9">c</name><operator pos:start="1006:10" pos:end="1006:11">-&gt;</operator><name pos:start="1006:12" pos:end="1006:21">buffer_ptr</name></name> <operator pos:start="1006:23" pos:end="1006:24">+=</operator> <name pos:start="1006:26" pos:end="1006:28">len</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1007:9" pos:end="1007:28"><expr pos:start="1007:9" pos:end="1007:27"><name pos:start="1007:9" pos:end="1007:11">ptr</name> <operator pos:start="1007:13" pos:end="1007:13">=</operator> <name pos:start="1007:15" pos:end="1007:27"><name pos:start="1007:15" pos:end="1007:15">c</name><operator pos:start="1007:16" pos:end="1007:17">-&gt;</operator><name pos:start="1007:18" pos:end="1007:27">buffer_ptr</name></name></expr>;</expr_stmt>
        <if_stmt pos:start="1008:9" pos:end="1021:30"><if pos:start="1008:9" pos:end="1018:9">if <condition pos:start="1008:12" pos:end="1009:68">(<expr pos:start="1008:13" pos:end="1009:67"><operator pos:start="1008:13" pos:end="1008:13">(</operator><name pos:start="1008:14" pos:end="1008:16">ptr</name> <operator pos:start="1008:18" pos:end="1008:19">&gt;=</operator> <name pos:start="1008:21" pos:end="1008:29"><name pos:start="1008:21" pos:end="1008:21">c</name><operator pos:start="1008:22" pos:end="1008:23">-&gt;</operator><name pos:start="1008:24" pos:end="1008:29">buffer</name></name> <operator pos:start="1008:31" pos:end="1008:31">+</operator> <literal type="number" pos:start="1008:33" pos:end="1008:33">2</literal> <operator pos:start="1008:35" pos:end="1008:36">&amp;&amp;</operator> <operator pos:start="1008:38" pos:end="1008:38">!</operator><call pos:start="1008:39" pos:end="1008:62"><name pos:start="1008:39" pos:end="1008:44">memcmp</name><argument_list pos:start="1008:45" pos:end="1008:62">(<argument pos:start="1008:46" pos:end="1008:50"><expr pos:start="1008:46" pos:end="1008:50"><name pos:start="1008:46" pos:end="1008:48">ptr</name><operator pos:start="1008:49" pos:end="1008:49">-</operator><literal type="number" pos:start="1008:50" pos:end="1008:50">2</literal></expr></argument>, <argument pos:start="1008:53" pos:end="1008:58"><expr pos:start="1008:53" pos:end="1008:58"><literal type="string" pos:start="1008:53" pos:end="1008:58">"\n\n"</literal></expr></argument>, <argument pos:start="1008:61" pos:end="1008:61"><expr pos:start="1008:61" pos:end="1008:61"><literal type="number" pos:start="1008:61" pos:end="1008:61">2</literal></expr></argument>)</argument_list></call><operator pos:start="1008:63" pos:end="1008:63">)</operator> <operator pos:start="1008:65" pos:end="1008:66">||</operator>
            <operator pos:start="1009:13" pos:end="1009:13">(</operator><name pos:start="1009:14" pos:end="1009:16">ptr</name> <operator pos:start="1009:18" pos:end="1009:19">&gt;=</operator> <name pos:start="1009:21" pos:end="1009:29"><name pos:start="1009:21" pos:end="1009:21">c</name><operator pos:start="1009:22" pos:end="1009:23">-&gt;</operator><name pos:start="1009:24" pos:end="1009:29">buffer</name></name> <operator pos:start="1009:31" pos:end="1009:31">+</operator> <literal type="number" pos:start="1009:33" pos:end="1009:33">4</literal> <operator pos:start="1009:35" pos:end="1009:36">&amp;&amp;</operator> <operator pos:start="1009:38" pos:end="1009:38">!</operator><call pos:start="1009:39" pos:end="1009:66"><name pos:start="1009:39" pos:end="1009:44">memcmp</name><argument_list pos:start="1009:45" pos:end="1009:66">(<argument pos:start="1009:46" pos:end="1009:50"><expr pos:start="1009:46" pos:end="1009:50"><name pos:start="1009:46" pos:end="1009:48">ptr</name><operator pos:start="1009:49" pos:end="1009:49">-</operator><literal type="number" pos:start="1009:50" pos:end="1009:50">4</literal></expr></argument>, <argument pos:start="1009:53" pos:end="1009:62"><expr pos:start="1009:53" pos:end="1009:62"><literal type="string" pos:start="1009:53" pos:end="1009:62">"\r\n\r\n"</literal></expr></argument>, <argument pos:start="1009:65" pos:end="1009:65"><expr pos:start="1009:65" pos:end="1009:65"><literal type="number" pos:start="1009:65" pos:end="1009:65">4</literal></expr></argument>)</argument_list></call><operator pos:start="1009:67" pos:end="1009:67">)</operator></expr>)</condition> <block pos:start="1009:70" pos:end="1018:9">{<block_content pos:start="1011:13" pos:end="1017:26">
            <comment type="block" pos:start="1010:13" pos:end="1010:52">/* request found : parse it and reply */</comment>
            <if_stmt pos:start="1011:13" pos:end="1014:44"><if pos:start="1011:13" pos:end="1012:44">if <condition pos:start="1011:16" pos:end="1011:51">(<expr pos:start="1011:17" pos:end="1011:50"><name pos:start="1011:17" pos:end="1011:24"><name pos:start="1011:17" pos:end="1011:17">c</name><operator pos:start="1011:18" pos:end="1011:19">-&gt;</operator><name pos:start="1011:20" pos:end="1011:24">state</name></name> <operator pos:start="1011:26" pos:end="1011:27">==</operator> <name pos:start="1011:29" pos:end="1011:50">HTTPSTATE_WAIT_REQUEST</name></expr>)</condition><block type="pseudo" pos:start="1012:17" pos:end="1012:44"><block_content pos:start="1012:17" pos:end="1012:44">
                <expr_stmt pos:start="1012:17" pos:end="1012:44"><expr pos:start="1012:17" pos:end="1012:43"><name pos:start="1012:17" pos:end="1012:19">ret</name> <operator pos:start="1012:21" pos:end="1012:21">=</operator> <call pos:start="1012:23" pos:end="1012:43"><name pos:start="1012:23" pos:end="1012:40">http_parse_request</name><argument_list pos:start="1012:41" pos:end="1012:43">(<argument pos:start="1012:42" pos:end="1012:42"><expr pos:start="1012:42" pos:end="1012:42"><name pos:start="1012:42" pos:end="1012:42">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="1013:13" pos:end="1014:44">else<block type="pseudo" pos:start="1014:17" pos:end="1014:44"><block_content pos:start="1014:17" pos:end="1014:44">
                <expr_stmt pos:start="1014:17" pos:end="1014:44"><expr pos:start="1014:17" pos:end="1014:43"><name pos:start="1014:17" pos:end="1014:19">ret</name> <operator pos:start="1014:21" pos:end="1014:21">=</operator> <call pos:start="1014:23" pos:end="1014:43"><name pos:start="1014:23" pos:end="1014:40">rtsp_parse_request</name><argument_list pos:start="1014:41" pos:end="1014:43">(<argument pos:start="1014:42" pos:end="1014:42"><expr pos:start="1014:42" pos:end="1014:42"><name pos:start="1014:42" pos:end="1014:42">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="1016:13" pos:end="1017:26"><if pos:start="1016:13" pos:end="1017:26">if <condition pos:start="1016:16" pos:end="1016:24">(<expr pos:start="1016:17" pos:end="1016:23"><name pos:start="1016:17" pos:end="1016:19">ret</name> <operator pos:start="1016:21" pos:end="1016:21">&lt;</operator> <literal type="number" pos:start="1016:23" pos:end="1016:23">0</literal></expr>)</condition><block type="pseudo" pos:start="1017:17" pos:end="1017:26"><block_content pos:start="1017:17" pos:end="1017:26">
                <return pos:start="1017:17" pos:end="1017:26">return <expr pos:start="1017:24" pos:end="1017:25"><operator pos:start="1017:24" pos:end="1017:24">-</operator><literal type="number" pos:start="1017:25" pos:end="1017:25">1</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="1018:11" pos:end="1021:9">else if <condition pos:start="1018:19" pos:end="1018:40">(<expr pos:start="1018:20" pos:end="1018:39"><name pos:start="1018:20" pos:end="1018:22">ptr</name> <operator pos:start="1018:24" pos:end="1018:25">&gt;=</operator> <name pos:start="1018:27" pos:end="1018:39"><name pos:start="1018:27" pos:end="1018:27">c</name><operator pos:start="1018:28" pos:end="1018:29">-&gt;</operator><name pos:start="1018:30" pos:end="1018:39">buffer_end</name></name></expr>)</condition> <block pos:start="1018:42" pos:end="1021:9">{<block_content pos:start="1020:13" pos:end="1020:22">
            <comment type="block" pos:start="1019:13" pos:end="1019:54">/* request too long: cannot do anything */</comment>
            <return pos:start="1020:13" pos:end="1020:22">return <expr pos:start="1020:20" pos:end="1020:21"><operator pos:start="1020:20" pos:end="1020:20">-</operator><literal type="number" pos:start="1020:21" pos:end="1020:21">1</literal></expr>;</return>
        </block_content>}</block></if> <else pos:start="1021:11" pos:end="1021:30">else<block type="pseudo" pos:start="1021:16" pos:end="1021:30"><block_content pos:start="1021:16" pos:end="1021:30"> <goto pos:start="1021:16" pos:end="1021:30">goto <name pos:start="1021:21" pos:end="1021:29">read_loop</name>;</goto></block_content></block></else></if_stmt>

        <break pos:start="1023:9" pos:end="1023:14">break;</break>

    <case pos:start="1025:5" pos:end="1025:31">case <expr pos:start="1025:10" pos:end="1025:30"><name pos:start="1025:10" pos:end="1025:30">HTTPSTATE_SEND_HEADER</name></expr>:</case>
        <if_stmt pos:start="1026:9" pos:end="1027:22"><if pos:start="1026:9" pos:end="1027:22">if <condition pos:start="1026:12" pos:end="1026:57">(<expr pos:start="1026:13" pos:end="1026:56"><name pos:start="1026:13" pos:end="1026:34"><name pos:start="1026:13" pos:end="1026:13">c</name><operator pos:start="1026:14" pos:end="1026:15">-&gt;</operator><name pos:start="1026:16" pos:end="1026:25">poll_entry</name><operator pos:start="1026:26" pos:end="1026:27">-&gt;</operator><name pos:start="1026:28" pos:end="1026:34">revents</name></name> <operator pos:start="1026:36" pos:end="1026:36">&amp;</operator> <operator pos:start="1026:38" pos:end="1026:38">(</operator><name pos:start="1026:39" pos:end="1026:45">POLLERR</name> <operator pos:start="1026:47" pos:end="1026:47">|</operator> <name pos:start="1026:49" pos:end="1026:55">POLLHUP</name><operator pos:start="1026:56" pos:end="1026:56">)</operator></expr>)</condition><block type="pseudo" pos:start="1027:13" pos:end="1027:22"><block_content pos:start="1027:13" pos:end="1027:22">
            <return pos:start="1027:13" pos:end="1027:22">return <expr pos:start="1027:20" pos:end="1027:21"><operator pos:start="1027:20" pos:end="1027:20">-</operator><literal type="number" pos:start="1027:21" pos:end="1027:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block" pos:start="1029:9" pos:end="1029:43">/* no need to write if no events */</comment>
        <if_stmt pos:start="1030:9" pos:end="1031:21"><if pos:start="1030:9" pos:end="1031:21">if <condition pos:start="1030:12" pos:end="1030:48">(<expr pos:start="1030:13" pos:end="1030:47"><operator pos:start="1030:13" pos:end="1030:13">!</operator><operator pos:start="1030:14" pos:end="1030:14">(</operator><name pos:start="1030:15" pos:end="1030:36"><name pos:start="1030:15" pos:end="1030:15">c</name><operator pos:start="1030:16" pos:end="1030:17">-&gt;</operator><name pos:start="1030:18" pos:end="1030:27">poll_entry</name><operator pos:start="1030:28" pos:end="1030:29">-&gt;</operator><name pos:start="1030:30" pos:end="1030:36">revents</name></name> <operator pos:start="1030:38" pos:end="1030:38">&amp;</operator> <name pos:start="1030:40" pos:end="1030:46">POLLOUT</name><operator pos:start="1030:47" pos:end="1030:47">)</operator></expr>)</condition><block type="pseudo" pos:start="1031:13" pos:end="1031:21"><block_content pos:start="1031:13" pos:end="1031:21">
            <return pos:start="1031:13" pos:end="1031:21">return <expr pos:start="1031:20" pos:end="1031:20"><literal type="number" pos:start="1031:20" pos:end="1031:20">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1032:9" pos:end="1032:75"><expr pos:start="1032:9" pos:end="1032:74"><name pos:start="1032:9" pos:end="1032:11">len</name> <operator pos:start="1032:13" pos:end="1032:13">=</operator> <call pos:start="1032:15" pos:end="1032:74"><name pos:start="1032:15" pos:end="1032:18">send</name><argument_list pos:start="1032:19" pos:end="1032:74">(<argument pos:start="1032:20" pos:end="1032:24"><expr pos:start="1032:20" pos:end="1032:24"><name pos:start="1032:20" pos:end="1032:24"><name pos:start="1032:20" pos:end="1032:20">c</name><operator pos:start="1032:21" pos:end="1032:22">-&gt;</operator><name pos:start="1032:23" pos:end="1032:24">fd</name></name></expr></argument>, <argument pos:start="1032:27" pos:end="1032:39"><expr pos:start="1032:27" pos:end="1032:39"><name pos:start="1032:27" pos:end="1032:39"><name pos:start="1032:27" pos:end="1032:27">c</name><operator pos:start="1032:28" pos:end="1032:29">-&gt;</operator><name pos:start="1032:30" pos:end="1032:39">buffer_ptr</name></name></expr></argument>, <argument pos:start="1032:42" pos:end="1032:70"><expr pos:start="1032:42" pos:end="1032:70"><name pos:start="1032:42" pos:end="1032:54"><name pos:start="1032:42" pos:end="1032:42">c</name><operator pos:start="1032:43" pos:end="1032:44">-&gt;</operator><name pos:start="1032:45" pos:end="1032:54">buffer_end</name></name> <operator pos:start="1032:56" pos:end="1032:56">-</operator> <name pos:start="1032:58" pos:end="1032:70"><name pos:start="1032:58" pos:end="1032:58">c</name><operator pos:start="1032:59" pos:end="1032:60">-&gt;</operator><name pos:start="1032:61" pos:end="1032:70">buffer_ptr</name></name></expr></argument>, <argument pos:start="1032:73" pos:end="1032:73"><expr pos:start="1032:73" pos:end="1032:73"><literal type="number" pos:start="1032:73" pos:end="1032:73">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1033:9" pos:end="1039:9"><if pos:start="1033:9" pos:end="1039:9">if <condition pos:start="1033:12" pos:end="1033:20">(<expr pos:start="1033:13" pos:end="1033:19"><name pos:start="1033:13" pos:end="1033:15">len</name> <operator pos:start="1033:17" pos:end="1033:17">&lt;</operator> <literal type="number" pos:start="1033:19" pos:end="1033:19">0</literal></expr>)</condition> <block pos:start="1033:22" pos:end="1039:9">{<block_content pos:start="1034:13" pos:end="1038:18">
            <if_stmt pos:start="1034:13" pos:end="1037:13"><if pos:start="1034:13" pos:end="1037:13">if <condition pos:start="1034:16" pos:end="1035:48">(<expr pos:start="1034:17" pos:end="1035:47"><call pos:start="1034:17" pos:end="1034:29"><name pos:start="1034:17" pos:end="1034:27">ff_neterrno</name><argument_list pos:start="1034:28" pos:end="1034:29">()</argument_list></call> <operator pos:start="1034:31" pos:end="1034:32">!=</operator> <call pos:start="1034:34" pos:end="1034:48"><name pos:start="1034:34" pos:end="1034:40">AVERROR</name><argument_list pos:start="1034:41" pos:end="1034:48">(<argument pos:start="1034:42" pos:end="1034:47"><expr pos:start="1034:42" pos:end="1034:47"><name pos:start="1034:42" pos:end="1034:47">EAGAIN</name></expr></argument>)</argument_list></call> <operator pos:start="1034:50" pos:end="1034:51">&amp;&amp;</operator>
                <call pos:start="1035:17" pos:end="1035:29"><name pos:start="1035:17" pos:end="1035:27">ff_neterrno</name><argument_list pos:start="1035:28" pos:end="1035:29">()</argument_list></call> <operator pos:start="1035:31" pos:end="1035:32">!=</operator> <call pos:start="1035:34" pos:end="1035:47"><name pos:start="1035:34" pos:end="1035:40">AVERROR</name><argument_list pos:start="1035:41" pos:end="1035:47">(<argument pos:start="1035:42" pos:end="1035:46"><expr pos:start="1035:42" pos:end="1035:46"><name pos:start="1035:42" pos:end="1035:46">EINTR</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1035:50" pos:end="1037:13">{<block_content pos:start="1036:17" pos:end="1036:38">
                <goto pos:start="1036:17" pos:end="1036:38">goto <name pos:start="1036:22" pos:end="1036:37">close_connection</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <break pos:start="1038:13" pos:end="1038:18">break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="1040:9" pos:end="1040:29"><expr pos:start="1040:9" pos:end="1040:28"><name pos:start="1040:9" pos:end="1040:21"><name pos:start="1040:9" pos:end="1040:9">c</name><operator pos:start="1040:10" pos:end="1040:11">-&gt;</operator><name pos:start="1040:12" pos:end="1040:21">buffer_ptr</name></name> <operator pos:start="1040:23" pos:end="1040:24">+=</operator> <name pos:start="1040:26" pos:end="1040:28">len</name></expr>;</expr_stmt>
        <if_stmt pos:start="1041:9" pos:end="1042:43"><if pos:start="1041:9" pos:end="1042:43">if <condition pos:start="1041:12" pos:end="1041:22">(<expr pos:start="1041:13" pos:end="1041:21"><name pos:start="1041:13" pos:end="1041:21"><name pos:start="1041:13" pos:end="1041:13">c</name><operator pos:start="1041:14" pos:end="1041:15">-&gt;</operator><name pos:start="1041:16" pos:end="1041:21">stream</name></name></expr>)</condition><block type="pseudo" pos:start="1042:13" pos:end="1042:43"><block_content pos:start="1042:13" pos:end="1042:43">
            <expr_stmt pos:start="1042:13" pos:end="1042:43"><expr pos:start="1042:13" pos:end="1042:42"><name pos:start="1042:13" pos:end="1042:35"><name pos:start="1042:13" pos:end="1042:13">c</name><operator pos:start="1042:14" pos:end="1042:15">-&gt;</operator><name pos:start="1042:16" pos:end="1042:21">stream</name><operator pos:start="1042:22" pos:end="1042:23">-&gt;</operator><name pos:start="1042:24" pos:end="1042:35">bytes_served</name></name> <operator pos:start="1042:37" pos:end="1042:38">+=</operator> <name pos:start="1042:40" pos:end="1042:42">len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1043:9" pos:end="1043:29"><expr pos:start="1043:9" pos:end="1043:28"><name pos:start="1043:9" pos:end="1043:21"><name pos:start="1043:9" pos:end="1043:9">c</name><operator pos:start="1043:10" pos:end="1043:11">-&gt;</operator><name pos:start="1043:12" pos:end="1043:21">data_count</name></name> <operator pos:start="1043:23" pos:end="1043:24">+=</operator> <name pos:start="1043:26" pos:end="1043:28">len</name></expr>;</expr_stmt>
        <if_stmt pos:start="1044:9" pos:end="1053:9"><if pos:start="1044:9" pos:end="1053:9">if <condition pos:start="1044:12" pos:end="1044:43">(<expr pos:start="1044:13" pos:end="1044:42"><name pos:start="1044:13" pos:end="1044:25"><name pos:start="1044:13" pos:end="1044:13">c</name><operator pos:start="1044:14" pos:end="1044:15">-&gt;</operator><name pos:start="1044:16" pos:end="1044:25">buffer_ptr</name></name> <operator pos:start="1044:27" pos:end="1044:28">&gt;=</operator> <name pos:start="1044:30" pos:end="1044:42"><name pos:start="1044:30" pos:end="1044:30">c</name><operator pos:start="1044:31" pos:end="1044:32">-&gt;</operator><name pos:start="1044:33" pos:end="1044:42">buffer_end</name></name></expr>)</condition> <block pos:start="1044:45" pos:end="1053:9">{<block_content pos:start="1045:13" pos:end="1052:54">
            <expr_stmt pos:start="1045:13" pos:end="1045:36"><expr pos:start="1045:13" pos:end="1045:35"><call pos:start="1045:13" pos:end="1045:35"><name pos:start="1045:13" pos:end="1045:20">av_freep</name><argument_list pos:start="1045:21" pos:end="1045:35">(<argument pos:start="1045:22" pos:end="1045:34"><expr pos:start="1045:22" pos:end="1045:34"><operator pos:start="1045:22" pos:end="1045:22">&amp;</operator><name pos:start="1045:23" pos:end="1045:34"><name pos:start="1045:23" pos:end="1045:23">c</name><operator pos:start="1045:24" pos:end="1045:25">-&gt;</operator><name pos:start="1045:26" pos:end="1045:34">pb_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="1046:13" pos:end="1046:32">/* if error, exit */</comment>
            <if_stmt pos:start="1047:13" pos:end="1048:26"><if pos:start="1047:13" pos:end="1048:26">if <condition pos:start="1047:16" pos:end="1047:30">(<expr pos:start="1047:17" pos:end="1047:29"><name pos:start="1047:17" pos:end="1047:29"><name pos:start="1047:17" pos:end="1047:17">c</name><operator pos:start="1047:18" pos:end="1047:19">-&gt;</operator><name pos:start="1047:20" pos:end="1047:29">http_error</name></name></expr>)</condition><block type="pseudo" pos:start="1048:17" pos:end="1048:26"><block_content pos:start="1048:17" pos:end="1048:26">
                <return pos:start="1048:17" pos:end="1048:26">return <expr pos:start="1048:24" pos:end="1048:25"><operator pos:start="1048:24" pos:end="1048:24">-</operator><literal type="number" pos:start="1048:25" pos:end="1048:25">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <comment type="block" pos:start="1049:13" pos:end="1050:24">/* all the buffer was sent : synchronize to the incoming
             * stream */</comment>
            <expr_stmt pos:start="1051:13" pos:end="1051:50"><expr pos:start="1051:13" pos:end="1051:49"><name pos:start="1051:13" pos:end="1051:20"><name pos:start="1051:13" pos:end="1051:13">c</name><operator pos:start="1051:14" pos:end="1051:15">-&gt;</operator><name pos:start="1051:16" pos:end="1051:20">state</name></name> <operator pos:start="1051:22" pos:end="1051:22">=</operator> <name pos:start="1051:24" pos:end="1051:49">HTTPSTATE_SEND_DATA_HEADER</name></expr>;</expr_stmt>
            <expr_stmt pos:start="1052:13" pos:end="1052:54"><expr pos:start="1052:13" pos:end="1052:53"><name pos:start="1052:13" pos:end="1052:25"><name pos:start="1052:13" pos:end="1052:13">c</name><operator pos:start="1052:14" pos:end="1052:15">-&gt;</operator><name pos:start="1052:16" pos:end="1052:25">buffer_ptr</name></name> <operator pos:start="1052:27" pos:end="1052:27">=</operator> <name pos:start="1052:29" pos:end="1052:41"><name pos:start="1052:29" pos:end="1052:29">c</name><operator pos:start="1052:30" pos:end="1052:31">-&gt;</operator><name pos:start="1052:32" pos:end="1052:41">buffer_end</name></name> <operator pos:start="1052:43" pos:end="1052:43">=</operator> <name pos:start="1052:45" pos:end="1052:53"><name pos:start="1052:45" pos:end="1052:45">c</name><operator pos:start="1052:46" pos:end="1052:47">-&gt;</operator><name pos:start="1052:48" pos:end="1052:53">buffer</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break pos:start="1054:9" pos:end="1054:14">break;</break>

    <case pos:start="1056:5" pos:end="1056:29">case <expr pos:start="1056:10" pos:end="1056:28"><name pos:start="1056:10" pos:end="1056:28">HTTPSTATE_SEND_DATA</name></expr>:</case>
    <case pos:start="1057:5" pos:end="1057:36">case <expr pos:start="1057:10" pos:end="1057:35"><name pos:start="1057:10" pos:end="1057:35">HTTPSTATE_SEND_DATA_HEADER</name></expr>:</case>
    <case pos:start="1058:5" pos:end="1058:37">case <expr pos:start="1058:10" pos:end="1058:36"><name pos:start="1058:10" pos:end="1058:36">HTTPSTATE_SEND_DATA_TRAILER</name></expr>:</case>
        <comment type="block" pos:start="1059:9" pos:end="1061:63">/* for packetized output, we consider we can always write (the
         * input streams set the speed). It may be better to verify
         * that we do not rely too much on the kernel queues */</comment>
        <if_stmt pos:start="1062:9" pos:end="1069:9"><if pos:start="1062:9" pos:end="1069:9">if <condition pos:start="1062:12" pos:end="1062:30">(<expr pos:start="1062:13" pos:end="1062:29"><operator pos:start="1062:13" pos:end="1062:13">!</operator><name pos:start="1062:14" pos:end="1062:29"><name pos:start="1062:14" pos:end="1062:14">c</name><operator pos:start="1062:15" pos:end="1062:16">-&gt;</operator><name pos:start="1062:17" pos:end="1062:29">is_packetized</name></name></expr>)</condition> <block pos:start="1062:32" pos:end="1069:9">{<block_content pos:start="1063:13" pos:end="1068:25">
            <if_stmt pos:start="1063:13" pos:end="1064:26"><if pos:start="1063:13" pos:end="1064:26">if <condition pos:start="1063:16" pos:end="1063:61">(<expr pos:start="1063:17" pos:end="1063:60"><name pos:start="1063:17" pos:end="1063:38"><name pos:start="1063:17" pos:end="1063:17">c</name><operator pos:start="1063:18" pos:end="1063:19">-&gt;</operator><name pos:start="1063:20" pos:end="1063:29">poll_entry</name><operator pos:start="1063:30" pos:end="1063:31">-&gt;</operator><name pos:start="1063:32" pos:end="1063:38">revents</name></name> <operator pos:start="1063:40" pos:end="1063:40">&amp;</operator> <operator pos:start="1063:42" pos:end="1063:42">(</operator><name pos:start="1063:43" pos:end="1063:49">POLLERR</name> <operator pos:start="1063:51" pos:end="1063:51">|</operator> <name pos:start="1063:53" pos:end="1063:59">POLLHUP</name><operator pos:start="1063:60" pos:end="1063:60">)</operator></expr>)</condition><block type="pseudo" pos:start="1064:17" pos:end="1064:26"><block_content pos:start="1064:17" pos:end="1064:26">
                <return pos:start="1064:17" pos:end="1064:26">return <expr pos:start="1064:24" pos:end="1064:25"><operator pos:start="1064:24" pos:end="1064:24">-</operator><literal type="number" pos:start="1064:25" pos:end="1064:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <comment type="block" pos:start="1066:13" pos:end="1066:46">/* no need to read if no events */</comment>
            <if_stmt pos:start="1067:13" pos:end="1068:25"><if pos:start="1067:13" pos:end="1068:25">if <condition pos:start="1067:16" pos:end="1067:52">(<expr pos:start="1067:17" pos:end="1067:51"><operator pos:start="1067:17" pos:end="1067:17">!</operator><operator pos:start="1067:18" pos:end="1067:18">(</operator><name pos:start="1067:19" pos:end="1067:40"><name pos:start="1067:19" pos:end="1067:19">c</name><operator pos:start="1067:20" pos:end="1067:21">-&gt;</operator><name pos:start="1067:22" pos:end="1067:31">poll_entry</name><operator pos:start="1067:32" pos:end="1067:33">-&gt;</operator><name pos:start="1067:34" pos:end="1067:40">revents</name></name> <operator pos:start="1067:42" pos:end="1067:42">&amp;</operator> <name pos:start="1067:44" pos:end="1067:50">POLLOUT</name><operator pos:start="1067:51" pos:end="1067:51">)</operator></expr>)</condition><block type="pseudo" pos:start="1068:17" pos:end="1068:25"><block_content pos:start="1068:17" pos:end="1068:25">
                <return pos:start="1068:17" pos:end="1068:25">return <expr pos:start="1068:24" pos:end="1068:24"><literal type="number" pos:start="1068:24" pos:end="1068:24">0</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="1070:9" pos:end="1071:22"><if pos:start="1070:9" pos:end="1071:22">if <condition pos:start="1070:12" pos:end="1070:34">(<expr pos:start="1070:13" pos:end="1070:33"><call pos:start="1070:13" pos:end="1070:29"><name pos:start="1070:13" pos:end="1070:26">http_send_data</name><argument_list pos:start="1070:27" pos:end="1070:29">(<argument pos:start="1070:28" pos:end="1070:28"><expr pos:start="1070:28" pos:end="1070:28"><name pos:start="1070:28" pos:end="1070:28">c</name></expr></argument>)</argument_list></call> <operator pos:start="1070:31" pos:end="1070:31">&lt;</operator> <literal type="number" pos:start="1070:33" pos:end="1070:33">0</literal></expr>)</condition><block type="pseudo" pos:start="1071:13" pos:end="1071:22"><block_content pos:start="1071:13" pos:end="1071:22">
            <return pos:start="1071:13" pos:end="1071:22">return <expr pos:start="1071:20" pos:end="1071:21"><operator pos:start="1071:20" pos:end="1071:20">-</operator><literal type="number" pos:start="1071:21" pos:end="1071:21">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <comment type="block" pos:start="1072:9" pos:end="1072:46">/* close connection if trailer sent */</comment>
        <if_stmt pos:start="1073:9" pos:end="1074:22"><if pos:start="1073:9" pos:end="1074:22">if <condition pos:start="1073:12" pos:end="1073:52">(<expr pos:start="1073:13" pos:end="1073:51"><name pos:start="1073:13" pos:end="1073:20"><name pos:start="1073:13" pos:end="1073:13">c</name><operator pos:start="1073:14" pos:end="1073:15">-&gt;</operator><name pos:start="1073:16" pos:end="1073:20">state</name></name> <operator pos:start="1073:22" pos:end="1073:23">==</operator> <name pos:start="1073:25" pos:end="1073:51">HTTPSTATE_SEND_DATA_TRAILER</name></expr>)</condition><block type="pseudo" pos:start="1074:13" pos:end="1074:22"><block_content pos:start="1074:13" pos:end="1074:22">
            <return pos:start="1074:13" pos:end="1074:22">return <expr pos:start="1074:20" pos:end="1074:21"><operator pos:start="1074:20" pos:end="1074:20">-</operator><literal type="number" pos:start="1074:21" pos:end="1074:21">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <comment type="block" pos:start="1075:9" pos:end="1075:52">/* Check if it is a single jpeg frame 123 */</comment>
        <if_stmt pos:start="1076:9" pos:end="1078:9"><if pos:start="1076:9" pos:end="1078:9">if <condition pos:start="1076:12" pos:end="1076:100">(<expr pos:start="1076:13" pos:end="1076:99"><name pos:start="1076:13" pos:end="1076:35"><name pos:start="1076:13" pos:end="1076:13">c</name><operator pos:start="1076:14" pos:end="1076:15">-&gt;</operator><name pos:start="1076:16" pos:end="1076:21">stream</name><operator pos:start="1076:22" pos:end="1076:23">-&gt;</operator><name pos:start="1076:24" pos:end="1076:35">single_frame</name></name> <operator pos:start="1076:37" pos:end="1076:38">&amp;&amp;</operator> <name pos:start="1076:40" pos:end="1076:52"><name pos:start="1076:40" pos:end="1076:40">c</name><operator pos:start="1076:41" pos:end="1076:42">-&gt;</operator><name pos:start="1076:43" pos:end="1076:52">data_count</name></name> <operator pos:start="1076:54" pos:end="1076:54">&gt;</operator> <name pos:start="1076:56" pos:end="1076:73"><name pos:start="1076:56" pos:end="1076:56">c</name><operator pos:start="1076:57" pos:end="1076:58">-&gt;</operator><name pos:start="1076:59" pos:end="1076:73">cur_frame_bytes</name></name> <operator pos:start="1076:75" pos:end="1076:76">&amp;&amp;</operator> <name pos:start="1076:78" pos:end="1076:95"><name pos:start="1076:78" pos:end="1076:78">c</name><operator pos:start="1076:79" pos:end="1076:80">-&gt;</operator><name pos:start="1076:81" pos:end="1076:95">cur_frame_bytes</name></name> <operator pos:start="1076:97" pos:end="1076:97">&gt;</operator> <literal type="number" pos:start="1076:99" pos:end="1076:99">0</literal></expr>)</condition> <block pos:start="1076:102" pos:end="1078:9">{<block_content pos:start="1077:13" pos:end="1077:32">
            <expr_stmt pos:start="1077:13" pos:end="1077:32"><expr pos:start="1077:13" pos:end="1077:31"><call pos:start="1077:13" pos:end="1077:31"><name pos:start="1077:13" pos:end="1077:28">close_connection</name><argument_list pos:start="1077:29" pos:end="1077:31">(<argument pos:start="1077:30" pos:end="1077:30"><expr pos:start="1077:30" pos:end="1077:30"><name pos:start="1077:30" pos:end="1077:30">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break pos:start="1079:9" pos:end="1079:14">break;</break>
    <case pos:start="1080:5" pos:end="1080:32">case <expr pos:start="1080:10" pos:end="1080:31"><name pos:start="1080:10" pos:end="1080:31">HTTPSTATE_RECEIVE_DATA</name></expr>:</case>
        <comment type="block" pos:start="1081:9" pos:end="1081:42">/* no need to read if no events */</comment>
        <if_stmt pos:start="1082:9" pos:end="1083:22"><if pos:start="1082:9" pos:end="1083:22">if <condition pos:start="1082:12" pos:end="1082:57">(<expr pos:start="1082:13" pos:end="1082:56"><name pos:start="1082:13" pos:end="1082:34"><name pos:start="1082:13" pos:end="1082:13">c</name><operator pos:start="1082:14" pos:end="1082:15">-&gt;</operator><name pos:start="1082:16" pos:end="1082:25">poll_entry</name><operator pos:start="1082:26" pos:end="1082:27">-&gt;</operator><name pos:start="1082:28" pos:end="1082:34">revents</name></name> <operator pos:start="1082:36" pos:end="1082:36">&amp;</operator> <operator pos:start="1082:38" pos:end="1082:38">(</operator><name pos:start="1082:39" pos:end="1082:45">POLLERR</name> <operator pos:start="1082:47" pos:end="1082:47">|</operator> <name pos:start="1082:49" pos:end="1082:55">POLLHUP</name><operator pos:start="1082:56" pos:end="1082:56">)</operator></expr>)</condition><block type="pseudo" pos:start="1083:13" pos:end="1083:22"><block_content pos:start="1083:13" pos:end="1083:22">
            <return pos:start="1083:13" pos:end="1083:22">return <expr pos:start="1083:20" pos:end="1083:21"><operator pos:start="1083:20" pos:end="1083:20">-</operator><literal type="number" pos:start="1083:21" pos:end="1083:21">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt pos:start="1084:9" pos:end="1085:21"><if pos:start="1084:9" pos:end="1085:21">if <condition pos:start="1084:12" pos:end="1084:47">(<expr pos:start="1084:13" pos:end="1084:46"><operator pos:start="1084:13" pos:end="1084:13">!</operator><operator pos:start="1084:14" pos:end="1084:14">(</operator><name pos:start="1084:15" pos:end="1084:36"><name pos:start="1084:15" pos:end="1084:15">c</name><operator pos:start="1084:16" pos:end="1084:17">-&gt;</operator><name pos:start="1084:18" pos:end="1084:27">poll_entry</name><operator pos:start="1084:28" pos:end="1084:29">-&gt;</operator><name pos:start="1084:30" pos:end="1084:36">revents</name></name> <operator pos:start="1084:38" pos:end="1084:38">&amp;</operator> <name pos:start="1084:40" pos:end="1084:45">POLLIN</name><operator pos:start="1084:46" pos:end="1084:46">)</operator></expr>)</condition><block type="pseudo" pos:start="1085:13" pos:end="1085:21"><block_content pos:start="1085:13" pos:end="1085:21">
            <return pos:start="1085:13" pos:end="1085:21">return <expr pos:start="1085:20" pos:end="1085:20"><literal type="number" pos:start="1085:20" pos:end="1085:20">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt pos:start="1086:9" pos:end="1087:22"><if pos:start="1086:9" pos:end="1087:22">if <condition pos:start="1086:12" pos:end="1086:37">(<expr pos:start="1086:13" pos:end="1086:36"><call pos:start="1086:13" pos:end="1086:32"><name pos:start="1086:13" pos:end="1086:29">http_receive_data</name><argument_list pos:start="1086:30" pos:end="1086:32">(<argument pos:start="1086:31" pos:end="1086:31"><expr pos:start="1086:31" pos:end="1086:31"><name pos:start="1086:31" pos:end="1086:31">c</name></expr></argument>)</argument_list></call> <operator pos:start="1086:34" pos:end="1086:34">&lt;</operator> <literal type="number" pos:start="1086:36" pos:end="1086:36">0</literal></expr>)</condition><block type="pseudo" pos:start="1087:13" pos:end="1087:22"><block_content pos:start="1087:13" pos:end="1087:22">
            <return pos:start="1087:13" pos:end="1087:22">return <expr pos:start="1087:20" pos:end="1087:21"><operator pos:start="1087:20" pos:end="1087:20">-</operator><literal type="number" pos:start="1087:21" pos:end="1087:21">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <break pos:start="1088:9" pos:end="1088:14">break;</break>
    <case pos:start="1089:5" pos:end="1089:29">case <expr pos:start="1089:10" pos:end="1089:28"><name pos:start="1089:10" pos:end="1089:28">HTTPSTATE_WAIT_FEED</name></expr>:</case>
        <comment type="block" pos:start="1090:9" pos:end="1090:42">/* no need to read if no events */</comment>
        <if_stmt pos:start="1091:9" pos:end="1092:22"><if pos:start="1091:9" pos:end="1092:22">if <condition pos:start="1091:12" pos:end="1091:66">(<expr pos:start="1091:13" pos:end="1091:65"><name pos:start="1091:13" pos:end="1091:34"><name pos:start="1091:13" pos:end="1091:13">c</name><operator pos:start="1091:14" pos:end="1091:15">-&gt;</operator><name pos:start="1091:16" pos:end="1091:25">poll_entry</name><operator pos:start="1091:26" pos:end="1091:27">-&gt;</operator><name pos:start="1091:28" pos:end="1091:34">revents</name></name> <operator pos:start="1091:36" pos:end="1091:36">&amp;</operator> <operator pos:start="1091:38" pos:end="1091:38">(</operator><name pos:start="1091:39" pos:end="1091:44">POLLIN</name> <operator pos:start="1091:46" pos:end="1091:46">|</operator> <name pos:start="1091:48" pos:end="1091:54">POLLERR</name> <operator pos:start="1091:56" pos:end="1091:56">|</operator> <name pos:start="1091:58" pos:end="1091:64">POLLHUP</name><operator pos:start="1091:65" pos:end="1091:65">)</operator></expr>)</condition><block type="pseudo" pos:start="1092:13" pos:end="1092:22"><block_content pos:start="1092:13" pos:end="1092:22">
            <return pos:start="1092:13" pos:end="1092:22">return <expr pos:start="1092:20" pos:end="1092:21"><operator pos:start="1092:20" pos:end="1092:20">-</operator><literal type="number" pos:start="1092:21" pos:end="1092:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block" pos:start="1094:9" pos:end="1094:71">/* nothing to do, we'll be waken up by incoming feed packets */</comment>
        <break pos:start="1095:9" pos:end="1095:14">break;</break>

    <case pos:start="1097:5" pos:end="1097:30">case <expr pos:start="1097:10" pos:end="1097:29"><name pos:start="1097:10" pos:end="1097:29">RTSPSTATE_SEND_REPLY</name></expr>:</case>
        <if_stmt pos:start="1098:9" pos:end="1099:34"><if pos:start="1098:9" pos:end="1099:34">if <condition pos:start="1098:12" pos:end="1098:57">(<expr pos:start="1098:13" pos:end="1098:56"><name pos:start="1098:13" pos:end="1098:34"><name pos:start="1098:13" pos:end="1098:13">c</name><operator pos:start="1098:14" pos:end="1098:15">-&gt;</operator><name pos:start="1098:16" pos:end="1098:25">poll_entry</name><operator pos:start="1098:26" pos:end="1098:27">-&gt;</operator><name pos:start="1098:28" pos:end="1098:34">revents</name></name> <operator pos:start="1098:36" pos:end="1098:36">&amp;</operator> <operator pos:start="1098:38" pos:end="1098:38">(</operator><name pos:start="1098:39" pos:end="1098:45">POLLERR</name> <operator pos:start="1098:47" pos:end="1098:47">|</operator> <name pos:start="1098:49" pos:end="1098:55">POLLHUP</name><operator pos:start="1098:56" pos:end="1098:56">)</operator></expr>)</condition><block type="pseudo" pos:start="1099:13" pos:end="1099:34"><block_content pos:start="1099:13" pos:end="1099:34">
            <goto pos:start="1099:13" pos:end="1099:34">goto <name pos:start="1099:18" pos:end="1099:33">close_connection</name>;</goto></block_content></block></if></if_stmt>
        <comment type="block" pos:start="1100:9" pos:end="1100:43">/* no need to write if no events */</comment>
        <if_stmt pos:start="1101:9" pos:end="1102:21"><if pos:start="1101:9" pos:end="1102:21">if <condition pos:start="1101:12" pos:end="1101:48">(<expr pos:start="1101:13" pos:end="1101:47"><operator pos:start="1101:13" pos:end="1101:13">!</operator><operator pos:start="1101:14" pos:end="1101:14">(</operator><name pos:start="1101:15" pos:end="1101:36"><name pos:start="1101:15" pos:end="1101:15">c</name><operator pos:start="1101:16" pos:end="1101:17">-&gt;</operator><name pos:start="1101:18" pos:end="1101:27">poll_entry</name><operator pos:start="1101:28" pos:end="1101:29">-&gt;</operator><name pos:start="1101:30" pos:end="1101:36">revents</name></name> <operator pos:start="1101:38" pos:end="1101:38">&amp;</operator> <name pos:start="1101:40" pos:end="1101:46">POLLOUT</name><operator pos:start="1101:47" pos:end="1101:47">)</operator></expr>)</condition><block type="pseudo" pos:start="1102:13" pos:end="1102:21"><block_content pos:start="1102:13" pos:end="1102:21">
            <return pos:start="1102:13" pos:end="1102:21">return <expr pos:start="1102:20" pos:end="1102:20"><literal type="number" pos:start="1102:20" pos:end="1102:20">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1103:9" pos:end="1103:75"><expr pos:start="1103:9" pos:end="1103:74"><name pos:start="1103:9" pos:end="1103:11">len</name> <operator pos:start="1103:13" pos:end="1103:13">=</operator> <call pos:start="1103:15" pos:end="1103:74"><name pos:start="1103:15" pos:end="1103:18">send</name><argument_list pos:start="1103:19" pos:end="1103:74">(<argument pos:start="1103:20" pos:end="1103:24"><expr pos:start="1103:20" pos:end="1103:24"><name pos:start="1103:20" pos:end="1103:24"><name pos:start="1103:20" pos:end="1103:20">c</name><operator pos:start="1103:21" pos:end="1103:22">-&gt;</operator><name pos:start="1103:23" pos:end="1103:24">fd</name></name></expr></argument>, <argument pos:start="1103:27" pos:end="1103:39"><expr pos:start="1103:27" pos:end="1103:39"><name pos:start="1103:27" pos:end="1103:39"><name pos:start="1103:27" pos:end="1103:27">c</name><operator pos:start="1103:28" pos:end="1103:29">-&gt;</operator><name pos:start="1103:30" pos:end="1103:39">buffer_ptr</name></name></expr></argument>, <argument pos:start="1103:42" pos:end="1103:70"><expr pos:start="1103:42" pos:end="1103:70"><name pos:start="1103:42" pos:end="1103:54"><name pos:start="1103:42" pos:end="1103:42">c</name><operator pos:start="1103:43" pos:end="1103:44">-&gt;</operator><name pos:start="1103:45" pos:end="1103:54">buffer_end</name></name> <operator pos:start="1103:56" pos:end="1103:56">-</operator> <name pos:start="1103:58" pos:end="1103:70"><name pos:start="1103:58" pos:end="1103:58">c</name><operator pos:start="1103:59" pos:end="1103:60">-&gt;</operator><name pos:start="1103:61" pos:end="1103:70">buffer_ptr</name></name></expr></argument>, <argument pos:start="1103:73" pos:end="1103:73"><expr pos:start="1103:73" pos:end="1103:73"><literal type="number" pos:start="1103:73" pos:end="1103:73">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1104:9" pos:end="1110:9"><if pos:start="1104:9" pos:end="1110:9">if <condition pos:start="1104:12" pos:end="1104:20">(<expr pos:start="1104:13" pos:end="1104:19"><name pos:start="1104:13" pos:end="1104:15">len</name> <operator pos:start="1104:17" pos:end="1104:17">&lt;</operator> <literal type="number" pos:start="1104:19" pos:end="1104:19">0</literal></expr>)</condition> <block pos:start="1104:22" pos:end="1110:9">{<block_content pos:start="1105:13" pos:end="1109:18">
            <if_stmt pos:start="1105:13" pos:end="1108:13"><if pos:start="1105:13" pos:end="1108:13">if <condition pos:start="1105:16" pos:end="1106:48">(<expr pos:start="1105:17" pos:end="1106:47"><call pos:start="1105:17" pos:end="1105:29"><name pos:start="1105:17" pos:end="1105:27">ff_neterrno</name><argument_list pos:start="1105:28" pos:end="1105:29">()</argument_list></call> <operator pos:start="1105:31" pos:end="1105:32">!=</operator> <call pos:start="1105:34" pos:end="1105:48"><name pos:start="1105:34" pos:end="1105:40">AVERROR</name><argument_list pos:start="1105:41" pos:end="1105:48">(<argument pos:start="1105:42" pos:end="1105:47"><expr pos:start="1105:42" pos:end="1105:47"><name pos:start="1105:42" pos:end="1105:47">EAGAIN</name></expr></argument>)</argument_list></call> <operator pos:start="1105:50" pos:end="1105:51">&amp;&amp;</operator>
                <call pos:start="1106:17" pos:end="1106:29"><name pos:start="1106:17" pos:end="1106:27">ff_neterrno</name><argument_list pos:start="1106:28" pos:end="1106:29">()</argument_list></call> <operator pos:start="1106:31" pos:end="1106:32">!=</operator> <call pos:start="1106:34" pos:end="1106:47"><name pos:start="1106:34" pos:end="1106:40">AVERROR</name><argument_list pos:start="1106:41" pos:end="1106:47">(<argument pos:start="1106:42" pos:end="1106:46"><expr pos:start="1106:42" pos:end="1106:46"><name pos:start="1106:42" pos:end="1106:46">EINTR</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1106:50" pos:end="1108:13">{<block_content pos:start="1107:17" pos:end="1107:38">
                <goto pos:start="1107:17" pos:end="1107:38">goto <name pos:start="1107:22" pos:end="1107:37">close_connection</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <break pos:start="1109:13" pos:end="1109:18">break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="1111:9" pos:end="1111:29"><expr pos:start="1111:9" pos:end="1111:28"><name pos:start="1111:9" pos:end="1111:21"><name pos:start="1111:9" pos:end="1111:9">c</name><operator pos:start="1111:10" pos:end="1111:11">-&gt;</operator><name pos:start="1111:12" pos:end="1111:21">buffer_ptr</name></name> <operator pos:start="1111:23" pos:end="1111:24">+=</operator> <name pos:start="1111:26" pos:end="1111:28">len</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1112:9" pos:end="1112:29"><expr pos:start="1112:9" pos:end="1112:28"><name pos:start="1112:9" pos:end="1112:21"><name pos:start="1112:9" pos:end="1112:9">c</name><operator pos:start="1112:10" pos:end="1112:11">-&gt;</operator><name pos:start="1112:12" pos:end="1112:21">data_count</name></name> <operator pos:start="1112:23" pos:end="1112:24">+=</operator> <name pos:start="1112:26" pos:end="1112:28">len</name></expr>;</expr_stmt>
        <if_stmt pos:start="1113:9" pos:end="1117:9"><if pos:start="1113:9" pos:end="1117:9">if <condition pos:start="1113:12" pos:end="1113:43">(<expr pos:start="1113:13" pos:end="1113:42"><name pos:start="1113:13" pos:end="1113:25"><name pos:start="1113:13" pos:end="1113:13">c</name><operator pos:start="1113:14" pos:end="1113:15">-&gt;</operator><name pos:start="1113:16" pos:end="1113:25">buffer_ptr</name></name> <operator pos:start="1113:27" pos:end="1113:28">&gt;=</operator> <name pos:start="1113:30" pos:end="1113:42"><name pos:start="1113:30" pos:end="1113:30">c</name><operator pos:start="1113:31" pos:end="1113:32">-&gt;</operator><name pos:start="1113:33" pos:end="1113:42">buffer_end</name></name></expr>)</condition> <block pos:start="1113:45" pos:end="1117:9">{<block_content pos:start="1115:13" pos:end="1116:37">
            <comment type="block" pos:start="1114:13" pos:end="1114:66">/* all the buffer was sent : wait for a new request */</comment>
            <expr_stmt pos:start="1115:13" pos:end="1115:36"><expr pos:start="1115:13" pos:end="1115:35"><call pos:start="1115:13" pos:end="1115:35"><name pos:start="1115:13" pos:end="1115:20">av_freep</name><argument_list pos:start="1115:21" pos:end="1115:35">(<argument pos:start="1115:22" pos:end="1115:34"><expr pos:start="1115:22" pos:end="1115:34"><operator pos:start="1115:22" pos:end="1115:22">&amp;</operator><name pos:start="1115:23" pos:end="1115:34"><name pos:start="1115:23" pos:end="1115:23">c</name><operator pos:start="1115:24" pos:end="1115:25">-&gt;</operator><name pos:start="1115:26" pos:end="1115:34">pb_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1116:13" pos:end="1116:37"><expr pos:start="1116:13" pos:end="1116:36"><call pos:start="1116:13" pos:end="1116:36"><name pos:start="1116:13" pos:end="1116:30">start_wait_request</name><argument_list pos:start="1116:31" pos:end="1116:36">(<argument pos:start="1116:32" pos:end="1116:32"><expr pos:start="1116:32" pos:end="1116:32"><name pos:start="1116:32" pos:end="1116:32">c</name></expr></argument>, <argument pos:start="1116:35" pos:end="1116:35"><expr pos:start="1116:35" pos:end="1116:35"><literal type="number" pos:start="1116:35" pos:end="1116:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break pos:start="1118:9" pos:end="1118:14">break;</break>
    <case pos:start="1119:5" pos:end="1119:31">case <expr pos:start="1119:10" pos:end="1119:30"><name pos:start="1119:10" pos:end="1119:30">RTSPSTATE_SEND_PACKET</name></expr>:</case>
        <if_stmt pos:start="1120:9" pos:end="1123:9"><if pos:start="1120:9" pos:end="1123:9">if <condition pos:start="1120:12" pos:end="1120:57">(<expr pos:start="1120:13" pos:end="1120:56"><name pos:start="1120:13" pos:end="1120:34"><name pos:start="1120:13" pos:end="1120:13">c</name><operator pos:start="1120:14" pos:end="1120:15">-&gt;</operator><name pos:start="1120:16" pos:end="1120:25">poll_entry</name><operator pos:start="1120:26" pos:end="1120:27">-&gt;</operator><name pos:start="1120:28" pos:end="1120:34">revents</name></name> <operator pos:start="1120:36" pos:end="1120:36">&amp;</operator> <operator pos:start="1120:38" pos:end="1120:38">(</operator><name pos:start="1120:39" pos:end="1120:45">POLLERR</name> <operator pos:start="1120:47" pos:end="1120:47">|</operator> <name pos:start="1120:49" pos:end="1120:55">POLLHUP</name><operator pos:start="1120:56" pos:end="1120:56">)</operator></expr>)</condition> <block pos:start="1120:59" pos:end="1123:9">{<block_content pos:start="1121:13" pos:end="1122:22">
            <expr_stmt pos:start="1121:13" pos:end="1121:40"><expr pos:start="1121:13" pos:end="1121:39"><call pos:start="1121:13" pos:end="1121:39"><name pos:start="1121:13" pos:end="1121:20">av_freep</name><argument_list pos:start="1121:21" pos:end="1121:39">(<argument pos:start="1121:22" pos:end="1121:38"><expr pos:start="1121:22" pos:end="1121:38"><operator pos:start="1121:22" pos:end="1121:22">&amp;</operator><name pos:start="1121:23" pos:end="1121:38"><name pos:start="1121:23" pos:end="1121:23">c</name><operator pos:start="1121:24" pos:end="1121:25">-&gt;</operator><name pos:start="1121:26" pos:end="1121:38">packet_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1122:13" pos:end="1122:22">return <expr pos:start="1122:20" pos:end="1122:21"><operator pos:start="1122:20" pos:end="1122:20">-</operator><literal type="number" pos:start="1122:21" pos:end="1122:21">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="1124:9" pos:end="1124:43">/* no need to write if no events */</comment>
        <if_stmt pos:start="1125:9" pos:end="1126:21"><if pos:start="1125:9" pos:end="1126:21">if <condition pos:start="1125:12" pos:end="1125:48">(<expr pos:start="1125:13" pos:end="1125:47"><operator pos:start="1125:13" pos:end="1125:13">!</operator><operator pos:start="1125:14" pos:end="1125:14">(</operator><name pos:start="1125:15" pos:end="1125:36"><name pos:start="1125:15" pos:end="1125:15">c</name><operator pos:start="1125:16" pos:end="1125:17">-&gt;</operator><name pos:start="1125:18" pos:end="1125:27">poll_entry</name><operator pos:start="1125:28" pos:end="1125:29">-&gt;</operator><name pos:start="1125:30" pos:end="1125:36">revents</name></name> <operator pos:start="1125:38" pos:end="1125:38">&amp;</operator> <name pos:start="1125:40" pos:end="1125:46">POLLOUT</name><operator pos:start="1125:47" pos:end="1125:47">)</operator></expr>)</condition><block type="pseudo" pos:start="1126:13" pos:end="1126:21"><block_content pos:start="1126:13" pos:end="1126:21">
            <return pos:start="1126:13" pos:end="1126:21">return <expr pos:start="1126:20" pos:end="1126:20"><literal type="number" pos:start="1126:20" pos:end="1126:20">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1127:9" pos:end="1128:68"><expr pos:start="1127:9" pos:end="1128:67"><name pos:start="1127:9" pos:end="1127:11">len</name> <operator pos:start="1127:13" pos:end="1127:13">=</operator> <call pos:start="1127:15" pos:end="1128:67"><name pos:start="1127:15" pos:end="1127:18">send</name><argument_list pos:start="1127:19" pos:end="1128:67">(<argument pos:start="1127:20" pos:end="1127:24"><expr pos:start="1127:20" pos:end="1127:24"><name pos:start="1127:20" pos:end="1127:24"><name pos:start="1127:20" pos:end="1127:20">c</name><operator pos:start="1127:21" pos:end="1127:22">-&gt;</operator><name pos:start="1127:23" pos:end="1127:24">fd</name></name></expr></argument>, <argument pos:start="1127:27" pos:end="1127:46"><expr pos:start="1127:27" pos:end="1127:46"><name pos:start="1127:27" pos:end="1127:46"><name pos:start="1127:27" pos:end="1127:27">c</name><operator pos:start="1127:28" pos:end="1127:29">-&gt;</operator><name pos:start="1127:30" pos:end="1127:46">packet_buffer_ptr</name></name></expr></argument>,
                    <argument pos:start="1128:21" pos:end="1128:63"><expr pos:start="1128:21" pos:end="1128:63"><name pos:start="1128:21" pos:end="1128:40"><name pos:start="1128:21" pos:end="1128:21">c</name><operator pos:start="1128:22" pos:end="1128:23">-&gt;</operator><name pos:start="1128:24" pos:end="1128:40">packet_buffer_end</name></name> <operator pos:start="1128:42" pos:end="1128:42">-</operator> <name pos:start="1128:44" pos:end="1128:63"><name pos:start="1128:44" pos:end="1128:44">c</name><operator pos:start="1128:45" pos:end="1128:46">-&gt;</operator><name pos:start="1128:47" pos:end="1128:63">packet_buffer_ptr</name></name></expr></argument>, <argument pos:start="1128:66" pos:end="1128:66"><expr pos:start="1128:66" pos:end="1128:66"><literal type="number" pos:start="1128:66" pos:end="1128:66">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1129:9" pos:end="1137:9"><if pos:start="1129:9" pos:end="1137:9">if <condition pos:start="1129:12" pos:end="1129:20">(<expr pos:start="1129:13" pos:end="1129:19"><name pos:start="1129:13" pos:end="1129:15">len</name> <operator pos:start="1129:17" pos:end="1129:17">&lt;</operator> <literal type="number" pos:start="1129:19" pos:end="1129:19">0</literal></expr>)</condition> <block pos:start="1129:22" pos:end="1137:9">{<block_content pos:start="1130:13" pos:end="1136:18">
            <if_stmt pos:start="1130:13" pos:end="1135:13"><if pos:start="1130:13" pos:end="1135:13">if <condition pos:start="1130:16" pos:end="1131:48">(<expr pos:start="1130:17" pos:end="1131:47"><call pos:start="1130:17" pos:end="1130:29"><name pos:start="1130:17" pos:end="1130:27">ff_neterrno</name><argument_list pos:start="1130:28" pos:end="1130:29">()</argument_list></call> <operator pos:start="1130:31" pos:end="1130:32">!=</operator> <call pos:start="1130:34" pos:end="1130:48"><name pos:start="1130:34" pos:end="1130:40">AVERROR</name><argument_list pos:start="1130:41" pos:end="1130:48">(<argument pos:start="1130:42" pos:end="1130:47"><expr pos:start="1130:42" pos:end="1130:47"><name pos:start="1130:42" pos:end="1130:47">EAGAIN</name></expr></argument>)</argument_list></call> <operator pos:start="1130:50" pos:end="1130:51">&amp;&amp;</operator>
                <call pos:start="1131:17" pos:end="1131:29"><name pos:start="1131:17" pos:end="1131:27">ff_neterrno</name><argument_list pos:start="1131:28" pos:end="1131:29">()</argument_list></call> <operator pos:start="1131:31" pos:end="1131:32">!=</operator> <call pos:start="1131:34" pos:end="1131:47"><name pos:start="1131:34" pos:end="1131:40">AVERROR</name><argument_list pos:start="1131:41" pos:end="1131:47">(<argument pos:start="1131:42" pos:end="1131:46"><expr pos:start="1131:42" pos:end="1131:46"><name pos:start="1131:42" pos:end="1131:46">EINTR</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1131:50" pos:end="1135:13">{<block_content pos:start="1133:17" pos:end="1134:26">
                <comment type="block" pos:start="1132:17" pos:end="1132:46">/* error : close connection */</comment>
                <expr_stmt pos:start="1133:17" pos:end="1133:44"><expr pos:start="1133:17" pos:end="1133:43"><call pos:start="1133:17" pos:end="1133:43"><name pos:start="1133:17" pos:end="1133:24">av_freep</name><argument_list pos:start="1133:25" pos:end="1133:43">(<argument pos:start="1133:26" pos:end="1133:42"><expr pos:start="1133:26" pos:end="1133:42"><operator pos:start="1133:26" pos:end="1133:26">&amp;</operator><name pos:start="1133:27" pos:end="1133:42"><name pos:start="1133:27" pos:end="1133:27">c</name><operator pos:start="1133:28" pos:end="1133:29">-&gt;</operator><name pos:start="1133:30" pos:end="1133:42">packet_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="1134:17" pos:end="1134:26">return <expr pos:start="1134:24" pos:end="1134:25"><operator pos:start="1134:24" pos:end="1134:24">-</operator><literal type="number" pos:start="1134:25" pos:end="1134:25">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break pos:start="1136:13" pos:end="1136:18">break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="1138:9" pos:end="1138:36"><expr pos:start="1138:9" pos:end="1138:35"><name pos:start="1138:9" pos:end="1138:28"><name pos:start="1138:9" pos:end="1138:9">c</name><operator pos:start="1138:10" pos:end="1138:11">-&gt;</operator><name pos:start="1138:12" pos:end="1138:28">packet_buffer_ptr</name></name> <operator pos:start="1138:30" pos:end="1138:31">+=</operator> <name pos:start="1138:33" pos:end="1138:35">len</name></expr>;</expr_stmt>
        <if_stmt pos:start="1139:9" pos:end="1143:9"><if pos:start="1139:9" pos:end="1143:9">if <condition pos:start="1139:12" pos:end="1139:57">(<expr pos:start="1139:13" pos:end="1139:56"><name pos:start="1139:13" pos:end="1139:32"><name pos:start="1139:13" pos:end="1139:13">c</name><operator pos:start="1139:14" pos:end="1139:15">-&gt;</operator><name pos:start="1139:16" pos:end="1139:32">packet_buffer_ptr</name></name> <operator pos:start="1139:34" pos:end="1139:35">&gt;=</operator> <name pos:start="1139:37" pos:end="1139:56"><name pos:start="1139:37" pos:end="1139:37">c</name><operator pos:start="1139:38" pos:end="1139:39">-&gt;</operator><name pos:start="1139:40" pos:end="1139:56">packet_buffer_end</name></name></expr>)</condition> <block pos:start="1139:59" pos:end="1143:9">{<block_content pos:start="1141:13" pos:end="1142:46">
            <comment type="block" pos:start="1140:13" pos:end="1140:66">/* all the buffer was sent : wait for a new request */</comment>
            <expr_stmt pos:start="1141:13" pos:end="1141:40"><expr pos:start="1141:13" pos:end="1141:39"><call pos:start="1141:13" pos:end="1141:39"><name pos:start="1141:13" pos:end="1141:20">av_freep</name><argument_list pos:start="1141:21" pos:end="1141:39">(<argument pos:start="1141:22" pos:end="1141:38"><expr pos:start="1141:22" pos:end="1141:38"><operator pos:start="1141:22" pos:end="1141:22">&amp;</operator><name pos:start="1141:23" pos:end="1141:38"><name pos:start="1141:23" pos:end="1141:23">c</name><operator pos:start="1141:24" pos:end="1141:25">-&gt;</operator><name pos:start="1141:26" pos:end="1141:38">packet_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1142:13" pos:end="1142:46"><expr pos:start="1142:13" pos:end="1142:45"><name pos:start="1142:13" pos:end="1142:20"><name pos:start="1142:13" pos:end="1142:13">c</name><operator pos:start="1142:14" pos:end="1142:15">-&gt;</operator><name pos:start="1142:16" pos:end="1142:20">state</name></name> <operator pos:start="1142:22" pos:end="1142:22">=</operator> <name pos:start="1142:24" pos:end="1142:45">RTSPSTATE_WAIT_REQUEST</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break pos:start="1144:9" pos:end="1144:14">break;</break>
    <case pos:start="1145:5" pos:end="1145:25">case <expr pos:start="1145:10" pos:end="1145:24"><name pos:start="1145:10" pos:end="1145:24">HTTPSTATE_READY</name></expr>:</case>
        <comment type="block" pos:start="1146:9" pos:end="1146:27">/* nothing to do */</comment>
        <break pos:start="1147:9" pos:end="1147:14">break;</break>
    <default pos:start="1148:5" pos:end="1148:12">default:</default>
        <return pos:start="1149:9" pos:end="1149:18">return <expr pos:start="1149:16" pos:end="1149:17"><operator pos:start="1149:16" pos:end="1149:16">-</operator><literal type="number" pos:start="1149:17" pos:end="1149:17">1</literal></expr>;</return>
    </block_content>}</block></switch>
    <return pos:start="1151:5" pos:end="1151:13">return <expr pos:start="1151:12" pos:end="1151:12"><literal type="number" pos:start="1151:12" pos:end="1151:12">0</literal></expr>;</return>

<label pos:start="1153:1" pos:end="1153:17"><name pos:start="1153:1" pos:end="1153:16">close_connection</name>:</label>
    <expr_stmt pos:start="1154:5" pos:end="1154:28"><expr pos:start="1154:5" pos:end="1154:27"><call pos:start="1154:5" pos:end="1154:27"><name pos:start="1154:5" pos:end="1154:12">av_freep</name><argument_list pos:start="1154:13" pos:end="1154:27">(<argument pos:start="1154:14" pos:end="1154:26"><expr pos:start="1154:14" pos:end="1154:26"><operator pos:start="1154:14" pos:end="1154:14">&amp;</operator><name pos:start="1154:15" pos:end="1154:26"><name pos:start="1154:15" pos:end="1154:15">c</name><operator pos:start="1154:16" pos:end="1154:17">-&gt;</operator><name pos:start="1154:18" pos:end="1154:26">pb_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="1155:5" pos:end="1155:14">return <expr pos:start="1155:12" pos:end="1155:13"><operator pos:start="1155:12" pos:end="1155:12">-</operator><literal type="number" pos:start="1155:13" pos:end="1155:13">1</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="1158:1" pos:end="1203:1"><type pos:start="1158:1" pos:end="1158:10"><specifier pos:start="1158:1" pos:end="1158:6">static</specifier> <name pos:start="1158:8" pos:end="1158:10">int</name></type> <name pos:start="1158:12" pos:end="1158:24">extract_rates</name><parameter_list pos:start="1158:25" pos:end="1158:71">(<parameter pos:start="1158:26" pos:end="1158:36"><decl pos:start="1158:26" pos:end="1158:36"><type pos:start="1158:26" pos:end="1158:36"><name pos:start="1158:26" pos:end="1158:29">char</name> <modifier pos:start="1158:31" pos:end="1158:31">*</modifier></type><name pos:start="1158:32" pos:end="1158:36">rates</name></decl></parameter>, <parameter pos:start="1158:39" pos:end="1158:49"><decl pos:start="1158:39" pos:end="1158:49"><type pos:start="1158:39" pos:end="1158:49"><name pos:start="1158:39" pos:end="1158:41">int</name></type> <name pos:start="1158:43" pos:end="1158:49">ratelen</name></decl></parameter>, <parameter pos:start="1158:52" pos:end="1158:70"><decl pos:start="1158:52" pos:end="1158:70"><type pos:start="1158:52" pos:end="1158:70"><specifier pos:start="1158:52" pos:end="1158:56">const</specifier> <name pos:start="1158:58" pos:end="1158:61">char</name> <modifier pos:start="1158:63" pos:end="1158:63">*</modifier></type><name pos:start="1158:64" pos:end="1158:70">request</name></decl></parameter>)</parameter_list>
<block pos:start="1159:1" pos:end="1203:1">{<block_content pos:start="1160:5" pos:end="1202:13">
    <decl_stmt pos:start="1160:5" pos:end="1160:18"><decl pos:start="1160:5" pos:end="1160:17"><type pos:start="1160:5" pos:end="1160:16"><specifier pos:start="1160:5" pos:end="1160:9">const</specifier> <name pos:start="1160:11" pos:end="1160:14">char</name> <modifier pos:start="1160:16" pos:end="1160:16">*</modifier></type><name pos:start="1160:17" pos:end="1160:17">p</name></decl>;</decl_stmt>

    <for pos:start="1162:5" pos:end="1200:5">for <control pos:start="1162:9" pos:end="1162:55">(<init pos:start="1162:10" pos:end="1162:21"><expr pos:start="1162:10" pos:end="1162:20"><name pos:start="1162:10" pos:end="1162:10">p</name> <operator pos:start="1162:12" pos:end="1162:12">=</operator> <name pos:start="1162:14" pos:end="1162:20">request</name></expr>;</init> <condition pos:start="1162:23" pos:end="1162:53"><expr pos:start="1162:23" pos:end="1162:52"><operator pos:start="1162:23" pos:end="1162:23">*</operator><name pos:start="1162:24" pos:end="1162:24">p</name> <operator pos:start="1162:26" pos:end="1162:27">&amp;&amp;</operator> <operator pos:start="1162:29" pos:end="1162:29">*</operator><name pos:start="1162:30" pos:end="1162:30">p</name> <operator pos:start="1162:32" pos:end="1162:33">!=</operator> <literal type="char" pos:start="1162:35" pos:end="1162:38">'\r'</literal> <operator pos:start="1162:40" pos:end="1162:41">&amp;&amp;</operator> <operator pos:start="1162:43" pos:end="1162:43">*</operator><name pos:start="1162:44" pos:end="1162:44">p</name> <operator pos:start="1162:46" pos:end="1162:47">!=</operator> <literal type="char" pos:start="1162:49" pos:end="1162:52">'\n'</literal></expr>;</condition> <incr/>)</control> <block pos:start="1162:57" pos:end="1200:5">{<block_content pos:start="1163:9" pos:end="1199:12">
        <if_stmt pos:start="1163:9" pos:end="1194:9"><if pos:start="1163:9" pos:end="1194:9">if <condition pos:start="1163:12" pos:end="1163:49">(<expr pos:start="1163:13" pos:end="1163:48"><call pos:start="1163:13" pos:end="1163:43"><name pos:start="1163:13" pos:end="1163:26">av_strncasecmp</name><argument_list pos:start="1163:27" pos:end="1163:43">(<argument pos:start="1163:28" pos:end="1163:28"><expr pos:start="1163:28" pos:end="1163:28"><name pos:start="1163:28" pos:end="1163:28">p</name></expr></argument>, <argument pos:start="1163:31" pos:end="1163:39"><expr pos:start="1163:31" pos:end="1163:39"><literal type="string" pos:start="1163:31" pos:end="1163:39">"Pragma:"</literal></expr></argument>, <argument pos:start="1163:42" pos:end="1163:42"><expr pos:start="1163:42" pos:end="1163:42"><literal type="number" pos:start="1163:42" pos:end="1163:42">7</literal></expr></argument>)</argument_list></call> <operator pos:start="1163:45" pos:end="1163:46">==</operator> <literal type="number" pos:start="1163:48" pos:end="1163:48">0</literal></expr>)</condition> <block pos:start="1163:51" pos:end="1194:9">{<block_content pos:start="1164:13" pos:end="1193:13">
            <decl_stmt pos:start="1164:13" pos:end="1164:34"><decl pos:start="1164:13" pos:end="1164:33"><type pos:start="1164:13" pos:end="1164:24"><specifier pos:start="1164:13" pos:end="1164:17">const</specifier> <name pos:start="1164:19" pos:end="1164:22">char</name> <modifier pos:start="1164:24" pos:end="1164:24">*</modifier></type><name pos:start="1164:25" pos:end="1164:25">q</name> <init pos:start="1164:27" pos:end="1164:33">= <expr pos:start="1164:29" pos:end="1164:33"><name pos:start="1164:29" pos:end="1164:29">p</name> <operator pos:start="1164:31" pos:end="1164:31">+</operator> <literal type="number" pos:start="1164:33" pos:end="1164:33">7</literal></expr></init></decl>;</decl_stmt>

            <while pos:start="1166:13" pos:end="1167:20">while <condition pos:start="1166:19" pos:end="1166:54">(<expr pos:start="1166:20" pos:end="1166:53"><operator pos:start="1166:20" pos:end="1166:20">*</operator><name pos:start="1166:21" pos:end="1166:21">q</name> <operator pos:start="1166:23" pos:end="1166:24">&amp;&amp;</operator> <operator pos:start="1166:26" pos:end="1166:26">*</operator><name pos:start="1166:27" pos:end="1166:27">q</name> <operator pos:start="1166:29" pos:end="1166:30">!=</operator> <literal type="char" pos:start="1166:32" pos:end="1166:35">'\n'</literal> <operator pos:start="1166:37" pos:end="1166:38">&amp;&amp;</operator> <call pos:start="1166:40" pos:end="1166:53"><name pos:start="1166:40" pos:end="1166:49">av_isspace</name><argument_list pos:start="1166:50" pos:end="1166:53">(<argument pos:start="1166:51" pos:end="1166:52"><expr pos:start="1166:51" pos:end="1166:52"><operator pos:start="1166:51" pos:end="1166:51">*</operator><name pos:start="1166:52" pos:end="1166:52">q</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1167:17" pos:end="1167:20"><block_content pos:start="1167:17" pos:end="1167:20">
                <expr_stmt pos:start="1167:17" pos:end="1167:20"><expr pos:start="1167:17" pos:end="1167:19"><name pos:start="1167:17" pos:end="1167:17">q</name><operator pos:start="1167:18" pos:end="1167:19">++</operator></expr>;</expr_stmt></block_content></block></while>

            <if_stmt pos:start="1169:13" pos:end="1193:13"><if pos:start="1169:13" pos:end="1193:13">if <condition pos:start="1169:16" pos:end="1169:67">(<expr pos:start="1169:17" pos:end="1169:66"><call pos:start="1169:17" pos:end="1169:61"><name pos:start="1169:17" pos:end="1169:30">av_strncasecmp</name><argument_list pos:start="1169:31" pos:end="1169:61">(<argument pos:start="1169:32" pos:end="1169:32"><expr pos:start="1169:32" pos:end="1169:32"><name pos:start="1169:32" pos:end="1169:32">q</name></expr></argument>, <argument pos:start="1169:35" pos:end="1169:56"><expr pos:start="1169:35" pos:end="1169:56"><literal type="string" pos:start="1169:35" pos:end="1169:56">"stream-switch-entry="</literal></expr></argument>, <argument pos:start="1169:59" pos:end="1169:60"><expr pos:start="1169:59" pos:end="1169:60"><literal type="number" pos:start="1169:59" pos:end="1169:60">20</literal></expr></argument>)</argument_list></call> <operator pos:start="1169:63" pos:end="1169:64">==</operator> <literal type="number" pos:start="1169:66" pos:end="1169:66">0</literal></expr>)</condition> <block pos:start="1169:69" pos:end="1193:13">{<block_content pos:start="1170:17" pos:end="1192:25">
                <decl_stmt pos:start="1170:17" pos:end="1170:30"><decl pos:start="1170:17" pos:end="1170:29"><type pos:start="1170:17" pos:end="1170:19"><name pos:start="1170:17" pos:end="1170:19">int</name></type> <name pos:start="1170:21" pos:end="1170:29">stream_no</name></decl>;</decl_stmt>
                <decl_stmt pos:start="1171:17" pos:end="1171:28"><decl pos:start="1171:17" pos:end="1171:27"><type pos:start="1171:17" pos:end="1171:19"><name pos:start="1171:17" pos:end="1171:19">int</name></type> <name pos:start="1171:21" pos:end="1171:27">rate_no</name></decl>;</decl_stmt>

                <expr_stmt pos:start="1173:17" pos:end="1173:24"><expr pos:start="1173:17" pos:end="1173:23"><name pos:start="1173:17" pos:end="1173:17">q</name> <operator pos:start="1173:19" pos:end="1173:20">+=</operator> <literal type="number" pos:start="1173:22" pos:end="1173:23">20</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1175:17" pos:end="1175:45"><expr pos:start="1175:17" pos:end="1175:44"><call pos:start="1175:17" pos:end="1175:44"><name pos:start="1175:17" pos:end="1175:22">memset</name><argument_list pos:start="1175:23" pos:end="1175:44">(<argument pos:start="1175:24" pos:end="1175:28"><expr pos:start="1175:24" pos:end="1175:28"><name pos:start="1175:24" pos:end="1175:28">rates</name></expr></argument>, <argument pos:start="1175:31" pos:end="1175:34"><expr pos:start="1175:31" pos:end="1175:34"><literal type="number" pos:start="1175:31" pos:end="1175:34">0xff</literal></expr></argument>, <argument pos:start="1175:37" pos:end="1175:43"><expr pos:start="1175:37" pos:end="1175:43"><name pos:start="1175:37" pos:end="1175:43">ratelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <while pos:start="1177:17" pos:end="1190:17">while <condition pos:start="1177:23" pos:end="1177:25">(<expr pos:start="1177:24" pos:end="1177:24"><literal type="number" pos:start="1177:24" pos:end="1177:24">1</literal></expr>)</condition> <block pos:start="1177:27" pos:end="1190:17">{<block_content pos:start="1178:21" pos:end="1189:28">
                    <while pos:start="1178:21" pos:end="1179:28">while <condition pos:start="1178:27" pos:end="1178:57">(<expr pos:start="1178:28" pos:end="1178:56"><operator pos:start="1178:28" pos:end="1178:28">*</operator><name pos:start="1178:29" pos:end="1178:29">q</name> <operator pos:start="1178:31" pos:end="1178:32">&amp;&amp;</operator> <operator pos:start="1178:34" pos:end="1178:34">*</operator><name pos:start="1178:35" pos:end="1178:35">q</name> <operator pos:start="1178:37" pos:end="1178:38">!=</operator> <literal type="char" pos:start="1178:40" pos:end="1178:43">'\n'</literal> <operator pos:start="1178:45" pos:end="1178:46">&amp;&amp;</operator> <operator pos:start="1178:48" pos:end="1178:48">*</operator><name pos:start="1178:49" pos:end="1178:49">q</name> <operator pos:start="1178:51" pos:end="1178:52">!=</operator> <literal type="char" pos:start="1178:54" pos:end="1178:56">':'</literal></expr>)</condition><block type="pseudo" pos:start="1179:25" pos:end="1179:28"><block_content pos:start="1179:25" pos:end="1179:28">
                        <expr_stmt pos:start="1179:25" pos:end="1179:28"><expr pos:start="1179:25" pos:end="1179:27"><name pos:start="1179:25" pos:end="1179:25">q</name><operator pos:start="1179:26" pos:end="1179:27">++</operator></expr>;</expr_stmt></block_content></block></while>

                    <if_stmt pos:start="1181:21" pos:end="1182:30"><if pos:start="1181:21" pos:end="1182:30">if <condition pos:start="1181:24" pos:end="1181:71">(<expr pos:start="1181:25" pos:end="1181:70"><call pos:start="1181:25" pos:end="1181:65"><name pos:start="1181:25" pos:end="1181:30">sscanf</name><argument_list pos:start="1181:31" pos:end="1181:65">(<argument pos:start="1181:32" pos:end="1181:32"><expr pos:start="1181:32" pos:end="1181:32"><name pos:start="1181:32" pos:end="1181:32">q</name></expr></argument>, <argument pos:start="1181:35" pos:end="1181:42"><expr pos:start="1181:35" pos:end="1181:42"><literal type="string" pos:start="1181:35" pos:end="1181:42">":%d:%d"</literal></expr></argument>, <argument pos:start="1181:45" pos:end="1181:54"><expr pos:start="1181:45" pos:end="1181:54"><operator pos:start="1181:45" pos:end="1181:45">&amp;</operator><name pos:start="1181:46" pos:end="1181:54">stream_no</name></expr></argument>, <argument pos:start="1181:57" pos:end="1181:64"><expr pos:start="1181:57" pos:end="1181:64"><operator pos:start="1181:57" pos:end="1181:57">&amp;</operator><name pos:start="1181:58" pos:end="1181:64">rate_no</name></expr></argument>)</argument_list></call> <operator pos:start="1181:67" pos:end="1181:68">!=</operator> <literal type="number" pos:start="1181:70" pos:end="1181:70">2</literal></expr>)</condition><block type="pseudo" pos:start="1182:25" pos:end="1182:30"><block_content pos:start="1182:25" pos:end="1182:30">
                        <break pos:start="1182:25" pos:end="1182:30">break;</break></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="1184:21" pos:end="1184:32"><expr pos:start="1184:21" pos:end="1184:31"><name pos:start="1184:21" pos:end="1184:29">stream_no</name><operator pos:start="1184:30" pos:end="1184:31">--</operator></expr>;</expr_stmt>
                    <if_stmt pos:start="1185:21" pos:end="1186:51"><if pos:start="1185:21" pos:end="1186:51">if <condition pos:start="1185:24" pos:end="1185:62">(<expr pos:start="1185:25" pos:end="1185:61"><name pos:start="1185:25" pos:end="1185:33">stream_no</name> <operator pos:start="1185:35" pos:end="1185:35">&lt;</operator> <name pos:start="1185:37" pos:end="1185:43">ratelen</name> <operator pos:start="1185:45" pos:end="1185:46">&amp;&amp;</operator> <name pos:start="1185:48" pos:end="1185:56">stream_no</name> <operator pos:start="1185:58" pos:end="1185:59">&gt;=</operator> <literal type="number" pos:start="1185:61" pos:end="1185:61">0</literal></expr>)</condition><block type="pseudo" pos:start="1186:25" pos:end="1186:51"><block_content pos:start="1186:25" pos:end="1186:51">
                        <expr_stmt pos:start="1186:25" pos:end="1186:51"><expr pos:start="1186:25" pos:end="1186:50"><name pos:start="1186:25" pos:end="1186:40"><name pos:start="1186:25" pos:end="1186:29">rates</name><index pos:start="1186:30" pos:end="1186:40">[<expr pos:start="1186:31" pos:end="1186:39"><name pos:start="1186:31" pos:end="1186:39">stream_no</name></expr>]</index></name> <operator pos:start="1186:42" pos:end="1186:42">=</operator> <name pos:start="1186:44" pos:end="1186:50">rate_no</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <while pos:start="1188:21" pos:end="1189:28">while <condition pos:start="1188:27" pos:end="1188:63">(<expr pos:start="1188:28" pos:end="1188:62"><operator pos:start="1188:28" pos:end="1188:28">*</operator><name pos:start="1188:29" pos:end="1188:29">q</name> <operator pos:start="1188:31" pos:end="1188:32">&amp;&amp;</operator> <operator pos:start="1188:34" pos:end="1188:34">*</operator><name pos:start="1188:35" pos:end="1188:35">q</name> <operator pos:start="1188:37" pos:end="1188:38">!=</operator> <literal type="char" pos:start="1188:40" pos:end="1188:43">'\n'</literal> <operator pos:start="1188:45" pos:end="1188:46">&amp;&amp;</operator> <operator pos:start="1188:48" pos:end="1188:48">!</operator><call pos:start="1188:49" pos:end="1188:62"><name pos:start="1188:49" pos:end="1188:58">av_isspace</name><argument_list pos:start="1188:59" pos:end="1188:62">(<argument pos:start="1188:60" pos:end="1188:61"><expr pos:start="1188:60" pos:end="1188:61"><operator pos:start="1188:60" pos:end="1188:60">*</operator><name pos:start="1188:61" pos:end="1188:61">q</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1189:25" pos:end="1189:28"><block_content pos:start="1189:25" pos:end="1189:28">
                        <expr_stmt pos:start="1189:25" pos:end="1189:28"><expr pos:start="1189:25" pos:end="1189:27"><name pos:start="1189:25" pos:end="1189:25">q</name><operator pos:start="1189:26" pos:end="1189:27">++</operator></expr>;</expr_stmt></block_content></block></while>
                </block_content>}</block></while>

                <return pos:start="1192:17" pos:end="1192:25">return <expr pos:start="1192:24" pos:end="1192:24"><literal type="number" pos:start="1192:24" pos:end="1192:24">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="1195:9" pos:end="1195:28"><expr pos:start="1195:9" pos:end="1195:27"><name pos:start="1195:9" pos:end="1195:9">p</name> <operator pos:start="1195:11" pos:end="1195:11">=</operator> <call pos:start="1195:13" pos:end="1195:27"><name pos:start="1195:13" pos:end="1195:18">strchr</name><argument_list pos:start="1195:19" pos:end="1195:27">(<argument pos:start="1195:20" pos:end="1195:20"><expr pos:start="1195:20" pos:end="1195:20"><name pos:start="1195:20" pos:end="1195:20">p</name></expr></argument>, <argument pos:start="1195:23" pos:end="1195:26"><expr pos:start="1195:23" pos:end="1195:26"><literal type="char" pos:start="1195:23" pos:end="1195:26">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1196:9" pos:end="1197:18"><if pos:start="1196:9" pos:end="1197:18">if <condition pos:start="1196:12" pos:end="1196:15">(<expr pos:start="1196:13" pos:end="1196:14"><operator pos:start="1196:13" pos:end="1196:13">!</operator><name pos:start="1196:14" pos:end="1196:14">p</name></expr>)</condition><block type="pseudo" pos:start="1197:13" pos:end="1197:18"><block_content pos:start="1197:13" pos:end="1197:18">
            <break pos:start="1197:13" pos:end="1197:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1199:9" pos:end="1199:12"><expr pos:start="1199:9" pos:end="1199:11"><name pos:start="1199:9" pos:end="1199:9">p</name><operator pos:start="1199:10" pos:end="1199:11">++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return pos:start="1202:5" pos:end="1202:13">return <expr pos:start="1202:12" pos:end="1202:12"><literal type="number" pos:start="1202:12" pos:end="1202:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="1205:1" pos:end="1241:1"><type pos:start="1205:1" pos:end="1205:10"><specifier pos:start="1205:1" pos:end="1205:6">static</specifier> <name pos:start="1205:8" pos:end="1205:10">int</name></type> <name pos:start="1205:12" pos:end="1205:30">find_stream_in_feed</name><parameter_list pos:start="1205:31" pos:end="1206:44">(<parameter pos:start="1205:32" pos:end="1205:51"><decl pos:start="1205:32" pos:end="1205:51"><type pos:start="1205:32" pos:end="1205:51"><name pos:start="1205:32" pos:end="1205:45">FFServerStream</name> <modifier pos:start="1205:47" pos:end="1205:47">*</modifier></type><name pos:start="1205:48" pos:end="1205:51">feed</name></decl></parameter>, <parameter pos:start="1205:54" pos:end="1205:77"><decl pos:start="1205:54" pos:end="1205:77"><type pos:start="1205:54" pos:end="1205:77"><name pos:start="1205:54" pos:end="1205:70">AVCodecParameters</name> <modifier pos:start="1205:72" pos:end="1205:72">*</modifier></type><name pos:start="1205:73" pos:end="1205:77">codec</name></decl></parameter>,
                               <parameter pos:start="1206:32" pos:end="1206:43"><decl pos:start="1206:32" pos:end="1206:43"><type pos:start="1206:32" pos:end="1206:43"><name pos:start="1206:32" pos:end="1206:34">int</name></type> <name pos:start="1206:36" pos:end="1206:43">bit_rate</name></decl></parameter>)</parameter_list>
<block pos:start="1207:1" pos:end="1241:1">{<block_content pos:start="1208:5" pos:end="1240:16">
    <decl_stmt pos:start="1208:5" pos:end="1208:10"><decl pos:start="1208:5" pos:end="1208:9"><type pos:start="1208:5" pos:end="1208:7"><name pos:start="1208:5" pos:end="1208:7">int</name></type> <name pos:start="1208:9" pos:end="1208:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1209:5" pos:end="1209:33"><decl pos:start="1209:5" pos:end="1209:32"><type pos:start="1209:5" pos:end="1209:7"><name pos:start="1209:5" pos:end="1209:7">int</name></type> <name pos:start="1209:9" pos:end="1209:20">best_bitrate</name> <init pos:start="1209:22" pos:end="1209:32">= <expr pos:start="1209:24" pos:end="1209:32"><literal type="number" pos:start="1209:24" pos:end="1209:32">100000000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1210:5" pos:end="1210:18"><decl pos:start="1210:5" pos:end="1210:17"><type pos:start="1210:5" pos:end="1210:7"><name pos:start="1210:5" pos:end="1210:7">int</name></type> <name pos:start="1210:9" pos:end="1210:12">best</name> <init pos:start="1210:14" pos:end="1210:17">= <expr pos:start="1210:16" pos:end="1210:17"><operator pos:start="1210:16" pos:end="1210:16">-</operator><literal type="number" pos:start="1210:17" pos:end="1210:17">1</literal></expr></init></decl>;</decl_stmt>

    <for pos:start="1212:5" pos:end="1239:5">for <control pos:start="1212:9" pos:end="1212:42">(<init pos:start="1212:10" pos:end="1212:15"><expr pos:start="1212:10" pos:end="1212:14"><name pos:start="1212:10" pos:end="1212:10">i</name> <operator pos:start="1212:12" pos:end="1212:12">=</operator> <literal type="number" pos:start="1212:14" pos:end="1212:14">0</literal></expr>;</init> <condition pos:start="1212:17" pos:end="1212:37"><expr pos:start="1212:17" pos:end="1212:36"><name pos:start="1212:17" pos:end="1212:17">i</name> <operator pos:start="1212:19" pos:end="1212:19">&lt;</operator> <name pos:start="1212:21" pos:end="1212:36"><name pos:start="1212:21" pos:end="1212:24">feed</name><operator pos:start="1212:25" pos:end="1212:26">-&gt;</operator><name pos:start="1212:27" pos:end="1212:36">nb_streams</name></name></expr>;</condition> <incr pos:start="1212:39" pos:end="1212:41"><expr pos:start="1212:39" pos:end="1212:41"><name pos:start="1212:39" pos:end="1212:39">i</name><operator pos:start="1212:40" pos:end="1212:41">++</operator></expr></incr>)</control> <block pos:start="1212:44" pos:end="1239:5">{<block_content pos:start="1213:9" pos:end="1238:9">
        <decl_stmt pos:start="1213:9" pos:end="1213:67"><decl pos:start="1213:9" pos:end="1213:66"><type pos:start="1213:9" pos:end="1213:27"><name pos:start="1213:9" pos:end="1213:25">AVCodecParameters</name> <modifier pos:start="1213:27" pos:end="1213:27">*</modifier></type><name pos:start="1213:28" pos:end="1213:37">feed_codec</name> <init pos:start="1213:39" pos:end="1213:66">= <expr pos:start="1213:41" pos:end="1213:66"><name pos:start="1213:41" pos:end="1213:56"><name pos:start="1213:41" pos:end="1213:44">feed</name><operator pos:start="1213:45" pos:end="1213:46">-&gt;</operator><name pos:start="1213:47" pos:end="1213:53">streams</name><index pos:start="1213:54" pos:end="1213:56">[<expr pos:start="1213:55" pos:end="1213:55"><name pos:start="1213:55" pos:end="1213:55">i</name></expr>]</index></name><operator pos:start="1213:57" pos:end="1213:58">-&gt;</operator><name pos:start="1213:59" pos:end="1213:66">codecpar</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="1215:9" pos:end="1219:21"><if pos:start="1215:9" pos:end="1219:21">if <condition pos:start="1215:12" pos:end="1218:48">(<expr pos:start="1215:13" pos:end="1218:47"><name pos:start="1215:13" pos:end="1215:32"><name pos:start="1215:13" pos:end="1215:22">feed_codec</name><operator pos:start="1215:23" pos:end="1215:24">-&gt;</operator><name pos:start="1215:25" pos:end="1215:32">codec_id</name></name> <operator pos:start="1215:34" pos:end="1215:35">!=</operator> <name pos:start="1215:37" pos:end="1215:51"><name pos:start="1215:37" pos:end="1215:41">codec</name><operator pos:start="1215:42" pos:end="1215:43">-&gt;</operator><name pos:start="1215:44" pos:end="1215:51">codec_id</name></name> <operator pos:start="1215:53" pos:end="1215:54">||</operator>
            <name pos:start="1216:13" pos:end="1216:35"><name pos:start="1216:13" pos:end="1216:22">feed_codec</name><operator pos:start="1216:23" pos:end="1216:24">-&gt;</operator><name pos:start="1216:25" pos:end="1216:35">sample_rate</name></name> <operator pos:start="1216:37" pos:end="1216:38">!=</operator> <name pos:start="1216:40" pos:end="1216:57"><name pos:start="1216:40" pos:end="1216:44">codec</name><operator pos:start="1216:45" pos:end="1216:46">-&gt;</operator><name pos:start="1216:47" pos:end="1216:57">sample_rate</name></name> <operator pos:start="1216:59" pos:end="1216:60">||</operator>
            <name pos:start="1217:13" pos:end="1217:29"><name pos:start="1217:13" pos:end="1217:22">feed_codec</name><operator pos:start="1217:23" pos:end="1217:24">-&gt;</operator><name pos:start="1217:25" pos:end="1217:29">width</name></name> <operator pos:start="1217:31" pos:end="1217:32">!=</operator> <name pos:start="1217:34" pos:end="1217:45"><name pos:start="1217:34" pos:end="1217:38">codec</name><operator pos:start="1217:39" pos:end="1217:40">-&gt;</operator><name pos:start="1217:41" pos:end="1217:45">width</name></name> <operator pos:start="1217:47" pos:end="1217:48">||</operator>
            <name pos:start="1218:13" pos:end="1218:30"><name pos:start="1218:13" pos:end="1218:22">feed_codec</name><operator pos:start="1218:23" pos:end="1218:24">-&gt;</operator><name pos:start="1218:25" pos:end="1218:30">height</name></name> <operator pos:start="1218:32" pos:end="1218:33">!=</operator> <name pos:start="1218:35" pos:end="1218:47"><name pos:start="1218:35" pos:end="1218:39">codec</name><operator pos:start="1218:40" pos:end="1218:41">-&gt;</operator><name pos:start="1218:42" pos:end="1218:47">height</name></name></expr>)</condition><block type="pseudo" pos:start="1219:13" pos:end="1219:21"><block_content pos:start="1219:13" pos:end="1219:21">
            <continue pos:start="1219:13" pos:end="1219:21">continue;</continue></block_content></block></if></if_stmt>

        <comment type="block" pos:start="1221:9" pos:end="1221:30">/* Potential stream */</comment>

        <comment type="block" pos:start="1223:9" pos:end="1225:11">/* We want the fastest stream less than bit_rate, or the slowest
         * faster than bit_rate
         */</comment>

        <if_stmt pos:start="1227:9" pos:end="1234:9"><if pos:start="1227:9" pos:end="1234:9">if <condition pos:start="1227:12" pos:end="1227:45">(<expr pos:start="1227:13" pos:end="1227:44"><name pos:start="1227:13" pos:end="1227:32"><name pos:start="1227:13" pos:end="1227:22">feed_codec</name><operator pos:start="1227:23" pos:end="1227:24">-&gt;</operator><name pos:start="1227:25" pos:end="1227:32">bit_rate</name></name> <operator pos:start="1227:34" pos:end="1227:35">&lt;=</operator> <name pos:start="1227:37" pos:end="1227:44">bit_rate</name></expr>)</condition> <block pos:start="1227:47" pos:end="1234:9">{<block_content pos:start="1228:13" pos:end="1233:21">
            <if_stmt pos:start="1228:13" pos:end="1232:13"><if pos:start="1228:13" pos:end="1232:13">if <condition pos:start="1228:16" pos:end="1229:52">(<expr pos:start="1228:17" pos:end="1229:51"><name pos:start="1228:17" pos:end="1228:28">best_bitrate</name> <operator pos:start="1228:30" pos:end="1228:30">&gt;</operator> <name pos:start="1228:32" pos:end="1228:39">bit_rate</name> <operator pos:start="1228:41" pos:end="1228:42">||</operator>
                <name pos:start="1229:17" pos:end="1229:36"><name pos:start="1229:17" pos:end="1229:26">feed_codec</name><operator pos:start="1229:27" pos:end="1229:28">-&gt;</operator><name pos:start="1229:29" pos:end="1229:36">bit_rate</name></name> <operator pos:start="1229:38" pos:end="1229:38">&gt;</operator> <name pos:start="1229:40" pos:end="1229:51">best_bitrate</name></expr>)</condition> <block pos:start="1229:54" pos:end="1232:13">{<block_content pos:start="1230:17" pos:end="1231:25">
                <expr_stmt pos:start="1230:17" pos:end="1230:52"><expr pos:start="1230:17" pos:end="1230:51"><name pos:start="1230:17" pos:end="1230:28">best_bitrate</name> <operator pos:start="1230:30" pos:end="1230:30">=</operator> <name pos:start="1230:32" pos:end="1230:51"><name pos:start="1230:32" pos:end="1230:41">feed_codec</name><operator pos:start="1230:42" pos:end="1230:43">-&gt;</operator><name pos:start="1230:44" pos:end="1230:51">bit_rate</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="1231:17" pos:end="1231:25"><expr pos:start="1231:17" pos:end="1231:24"><name pos:start="1231:17" pos:end="1231:20">best</name> <operator pos:start="1231:22" pos:end="1231:22">=</operator> <name pos:start="1231:24" pos:end="1231:24">i</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <continue pos:start="1233:13" pos:end="1233:21">continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="1235:9" pos:end="1238:9"><if pos:start="1235:9" pos:end="1238:9">if <condition pos:start="1235:12" pos:end="1235:48">(<expr pos:start="1235:13" pos:end="1235:47"><name pos:start="1235:13" pos:end="1235:32"><name pos:start="1235:13" pos:end="1235:22">feed_codec</name><operator pos:start="1235:23" pos:end="1235:24">-&gt;</operator><name pos:start="1235:25" pos:end="1235:32">bit_rate</name></name> <operator pos:start="1235:34" pos:end="1235:34">&lt;</operator> <name pos:start="1235:36" pos:end="1235:47">best_bitrate</name></expr>)</condition> <block pos:start="1235:50" pos:end="1238:9">{<block_content pos:start="1236:13" pos:end="1237:21">
            <expr_stmt pos:start="1236:13" pos:end="1236:48"><expr pos:start="1236:13" pos:end="1236:47"><name pos:start="1236:13" pos:end="1236:24">best_bitrate</name> <operator pos:start="1236:26" pos:end="1236:26">=</operator> <name pos:start="1236:28" pos:end="1236:47"><name pos:start="1236:28" pos:end="1236:37">feed_codec</name><operator pos:start="1236:38" pos:end="1236:39">-&gt;</operator><name pos:start="1236:40" pos:end="1236:47">bit_rate</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="1237:13" pos:end="1237:21"><expr pos:start="1237:13" pos:end="1237:20"><name pos:start="1237:13" pos:end="1237:16">best</name> <operator pos:start="1237:18" pos:end="1237:18">=</operator> <name pos:start="1237:20" pos:end="1237:20">i</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return pos:start="1240:5" pos:end="1240:16">return <expr pos:start="1240:12" pos:end="1240:15"><name pos:start="1240:12" pos:end="1240:15">best</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="1243:1" pos:end="1281:1"><type pos:start="1243:1" pos:end="1243:10"><specifier pos:start="1243:1" pos:end="1243:6">static</specifier> <name pos:start="1243:8" pos:end="1243:10">int</name></type> <name pos:start="1243:12" pos:end="1243:32">modify_current_stream</name><parameter_list pos:start="1243:33" pos:end="1243:61">(<parameter pos:start="1243:34" pos:end="1243:47"><decl pos:start="1243:34" pos:end="1243:47"><type pos:start="1243:34" pos:end="1243:47"><name pos:start="1243:34" pos:end="1243:44">HTTPContext</name> <modifier pos:start="1243:46" pos:end="1243:46">*</modifier></type><name pos:start="1243:47" pos:end="1243:47">c</name></decl></parameter>, <parameter pos:start="1243:50" pos:end="1243:60"><decl pos:start="1243:50" pos:end="1243:60"><type pos:start="1243:50" pos:end="1243:60"><name pos:start="1243:50" pos:end="1243:53">char</name> <modifier pos:start="1243:55" pos:end="1243:55">*</modifier></type><name pos:start="1243:56" pos:end="1243:60">rates</name></decl></parameter>)</parameter_list>
<block pos:start="1244:1" pos:end="1281:1">{<block_content pos:start="1245:5" pos:end="1280:27">
    <decl_stmt pos:start="1245:5" pos:end="1245:10"><decl pos:start="1245:5" pos:end="1245:9"><type pos:start="1245:5" pos:end="1245:7"><name pos:start="1245:5" pos:end="1245:7">int</name></type> <name pos:start="1245:9" pos:end="1245:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1246:5" pos:end="1246:36"><decl pos:start="1246:5" pos:end="1246:35"><type pos:start="1246:5" pos:end="1246:20"><name pos:start="1246:5" pos:end="1246:18">FFServerStream</name> <modifier pos:start="1246:20" pos:end="1246:20">*</modifier></type><name pos:start="1246:21" pos:end="1246:23">req</name> <init pos:start="1246:25" pos:end="1246:35">= <expr pos:start="1246:27" pos:end="1246:35"><name pos:start="1246:27" pos:end="1246:35"><name pos:start="1246:27" pos:end="1246:27">c</name><operator pos:start="1246:28" pos:end="1246:29">-&gt;</operator><name pos:start="1246:30" pos:end="1246:35">stream</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1247:5" pos:end="1247:28"><decl pos:start="1247:5" pos:end="1247:27"><type pos:start="1247:5" pos:end="1247:7"><name pos:start="1247:5" pos:end="1247:7">int</name></type> <name pos:start="1247:9" pos:end="1247:23">action_required</name> <init pos:start="1247:25" pos:end="1247:27">= <expr pos:start="1247:27" pos:end="1247:27"><literal type="number" pos:start="1247:27" pos:end="1247:27">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="1249:5" pos:end="1249:39">/* Not much we can do for a feed */</comment>
    <if_stmt pos:start="1250:5" pos:end="1251:17"><if pos:start="1250:5" pos:end="1251:17">if <condition pos:start="1250:8" pos:end="1250:19">(<expr pos:start="1250:9" pos:end="1250:18"><operator pos:start="1250:9" pos:end="1250:9">!</operator><name pos:start="1250:10" pos:end="1250:18"><name pos:start="1250:10" pos:end="1250:12">req</name><operator pos:start="1250:13" pos:end="1250:14">-&gt;</operator><name pos:start="1250:15" pos:end="1250:18">feed</name></name></expr>)</condition><block type="pseudo" pos:start="1251:9" pos:end="1251:17"><block_content pos:start="1251:9" pos:end="1251:17">
        <return pos:start="1251:9" pos:end="1251:17">return <expr pos:start="1251:16" pos:end="1251:16"><literal type="number" pos:start="1251:16" pos:end="1251:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <for pos:start="1253:5" pos:end="1278:5">for <control pos:start="1253:9" pos:end="1253:41">(<init pos:start="1253:10" pos:end="1253:15"><expr pos:start="1253:10" pos:end="1253:14"><name pos:start="1253:10" pos:end="1253:10">i</name> <operator pos:start="1253:12" pos:end="1253:12">=</operator> <literal type="number" pos:start="1253:14" pos:end="1253:14">0</literal></expr>;</init> <condition pos:start="1253:17" pos:end="1253:36"><expr pos:start="1253:17" pos:end="1253:35"><name pos:start="1253:17" pos:end="1253:17">i</name> <operator pos:start="1253:19" pos:end="1253:19">&lt;</operator> <name pos:start="1253:21" pos:end="1253:35"><name pos:start="1253:21" pos:end="1253:23">req</name><operator pos:start="1253:24" pos:end="1253:25">-&gt;</operator><name pos:start="1253:26" pos:end="1253:35">nb_streams</name></name></expr>;</condition> <incr pos:start="1253:38" pos:end="1253:40"><expr pos:start="1253:38" pos:end="1253:40"><name pos:start="1253:38" pos:end="1253:38">i</name><operator pos:start="1253:39" pos:end="1253:40">++</operator></expr></incr>)</control> <block pos:start="1253:43" pos:end="1278:5">{<block_content pos:start="1254:9" pos:end="1277:9">
        <decl_stmt pos:start="1254:9" pos:end="1254:61"><decl pos:start="1254:9" pos:end="1254:60"><type pos:start="1254:9" pos:end="1254:27"><name pos:start="1254:9" pos:end="1254:25">AVCodecParameters</name> <modifier pos:start="1254:27" pos:end="1254:27">*</modifier></type><name pos:start="1254:28" pos:end="1254:32">codec</name> <init pos:start="1254:34" pos:end="1254:60">= <expr pos:start="1254:36" pos:end="1254:60"><name pos:start="1254:36" pos:end="1254:50"><name pos:start="1254:36" pos:end="1254:38">req</name><operator pos:start="1254:39" pos:end="1254:40">-&gt;</operator><name pos:start="1254:41" pos:end="1254:47">streams</name><index pos:start="1254:48" pos:end="1254:50">[<expr pos:start="1254:49" pos:end="1254:49"><name pos:start="1254:49" pos:end="1254:49">i</name></expr>]</index></name><operator pos:start="1254:51" pos:end="1254:52">-&gt;</operator><name pos:start="1254:53" pos:end="1254:60">codecpar</name></expr></init></decl>;</decl_stmt>

        <switch pos:start="1256:9" pos:end="1272:9">switch<condition pos:start="1256:15" pos:end="1256:24">(<expr pos:start="1256:16" pos:end="1256:23"><name pos:start="1256:16" pos:end="1256:23"><name pos:start="1256:16" pos:end="1256:20">rates</name><index pos:start="1256:21" pos:end="1256:23">[<expr pos:start="1256:22" pos:end="1256:22"><name pos:start="1256:22" pos:end="1256:22">i</name></expr>]</index></name></expr>)</condition> <block pos:start="1256:26" pos:end="1272:9">{<block_content pos:start="1257:13" pos:end="1271:22">
            <case pos:start="1257:13" pos:end="1257:19">case <expr pos:start="1257:18" pos:end="1257:18"><literal type="number" pos:start="1257:18" pos:end="1257:18">0</literal></expr>:</case>
                <expr_stmt pos:start="1258:17" pos:end="1258:65"><expr pos:start="1258:17" pos:end="1258:64"><name pos:start="1258:17" pos:end="1258:41"><name pos:start="1258:17" pos:end="1258:17">c</name><operator pos:start="1258:18" pos:end="1258:19">-&gt;</operator><name pos:start="1258:20" pos:end="1258:38">switch_feed_streams</name><index pos:start="1258:39" pos:end="1258:41">[<expr pos:start="1258:40" pos:end="1258:40"><name pos:start="1258:40" pos:end="1258:40">i</name></expr>]</index></name> <operator pos:start="1258:43" pos:end="1258:43">=</operator> <name pos:start="1258:45" pos:end="1258:64"><name pos:start="1258:45" pos:end="1258:47">req</name><operator pos:start="1258:48" pos:end="1258:49">-&gt;</operator><name pos:start="1258:50" pos:end="1258:61">feed_streams</name><index pos:start="1258:62" pos:end="1258:64">[<expr pos:start="1258:63" pos:end="1258:63"><name pos:start="1258:63" pos:end="1258:63">i</name></expr>]</index></name></expr>;</expr_stmt>
                <break pos:start="1259:17" pos:end="1259:22">break;</break>
            <case pos:start="1260:13" pos:end="1260:19">case <expr pos:start="1260:18" pos:end="1260:18"><literal type="number" pos:start="1260:18" pos:end="1260:18">1</literal></expr>:</case>
                <expr_stmt pos:start="1261:17" pos:end="1261:103"><expr pos:start="1261:17" pos:end="1261:102"><name pos:start="1261:17" pos:end="1261:41"><name pos:start="1261:17" pos:end="1261:17">c</name><operator pos:start="1261:18" pos:end="1261:19">-&gt;</operator><name pos:start="1261:20" pos:end="1261:38">switch_feed_streams</name><index pos:start="1261:39" pos:end="1261:41">[<expr pos:start="1261:40" pos:end="1261:40"><name pos:start="1261:40" pos:end="1261:40">i</name></expr>]</index></name> <operator pos:start="1261:43" pos:end="1261:43">=</operator> <call pos:start="1261:45" pos:end="1261:102"><name pos:start="1261:45" pos:end="1261:63">find_stream_in_feed</name><argument_list pos:start="1261:64" pos:end="1261:102">(<argument pos:start="1261:65" pos:end="1261:73"><expr pos:start="1261:65" pos:end="1261:73"><name pos:start="1261:65" pos:end="1261:73"><name pos:start="1261:65" pos:end="1261:67">req</name><operator pos:start="1261:68" pos:end="1261:69">-&gt;</operator><name pos:start="1261:70" pos:end="1261:73">feed</name></name></expr></argument>, <argument pos:start="1261:76" pos:end="1261:80"><expr pos:start="1261:76" pos:end="1261:80"><name pos:start="1261:76" pos:end="1261:80">codec</name></expr></argument>, <argument pos:start="1261:83" pos:end="1261:101"><expr pos:start="1261:83" pos:end="1261:101"><name pos:start="1261:83" pos:end="1261:97"><name pos:start="1261:83" pos:end="1261:87">codec</name><operator pos:start="1261:88" pos:end="1261:89">-&gt;</operator><name pos:start="1261:90" pos:end="1261:97">bit_rate</name></name> <operator pos:start="1261:99" pos:end="1261:99">/</operator> <literal type="number" pos:start="1261:101" pos:end="1261:101">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1262:17" pos:end="1262:22">break;</break>
            <case pos:start="1263:13" pos:end="1263:19">case <expr pos:start="1263:18" pos:end="1263:18"><literal type="number" pos:start="1263:18" pos:end="1263:18">2</literal></expr>:</case>
                <comment type="block" pos:start="1264:17" pos:end="1264:39">/* Wants off or slow */</comment>
                <expr_stmt pos:start="1265:17" pos:end="1267:0"><expr pos:start="1265:17" pos:end="1265:102"><name pos:start="1265:17" pos:end="1265:41"><name pos:start="1265:17" pos:end="1265:17">c</name><operator pos:start="1265:18" pos:end="1265:19">-&gt;</operator><name pos:start="1265:20" pos:end="1265:38">switch_feed_streams</name><index pos:start="1265:39" pos:end="1265:41">[<expr pos:start="1265:40" pos:end="1265:40"><name pos:start="1265:40" pos:end="1265:40">i</name></expr>]</index></name> <operator pos:start="1265:43" pos:end="1265:43">=</operator> <call pos:start="1265:45" pos:end="1265:102"><name pos:start="1265:45" pos:end="1265:63">find_stream_in_feed</name><argument_list pos:start="1265:64" pos:end="1265:102">(<argument pos:start="1265:65" pos:end="1265:73"><expr pos:start="1265:65" pos:end="1265:73"><name pos:start="1265:65" pos:end="1265:73"><name pos:start="1265:65" pos:end="1265:67">req</name><operator pos:start="1265:68" pos:end="1265:69">-&gt;</operator><name pos:start="1265:70" pos:end="1265:73">feed</name></name></expr></argument>, <argument pos:start="1265:76" pos:end="1265:80"><expr pos:start="1265:76" pos:end="1265:80"><name pos:start="1265:76" pos:end="1265:80">codec</name></expr></argument>, <argument pos:start="1265:83" pos:end="1265:101"><expr pos:start="1265:83" pos:end="1265:101"><name pos:start="1265:83" pos:end="1265:97"><name pos:start="1265:83" pos:end="1265:87">codec</name><operator pos:start="1265:88" pos:end="1265:89">-&gt;</operator><name pos:start="1265:90" pos:end="1265:97">bit_rate</name></name> <operator pos:start="1265:99" pos:end="1265:99">/</operator> <literal type="number" pos:start="1265:101" pos:end="1265:101">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="1266:1" pos:end="1266:16">#<cpp:directive pos:start="1266:2" pos:end="1266:6">ifdef</cpp:directive> <name pos:start="1266:8" pos:end="1266:16">WANTS_OFF</name></cpp:ifdef>
                <comment type="block" pos:start="1267:17" pos:end="1267:79">/* This doesn't work well when it turns off the only stream! */</comment>
                <expr_stmt pos:start="1268:17" pos:end="1268:47"><expr pos:start="1268:17" pos:end="1268:46"><name pos:start="1268:17" pos:end="1268:41"><name pos:start="1268:17" pos:end="1268:17">c</name><operator pos:start="1268:18" pos:end="1268:19">-&gt;</operator><name pos:start="1268:20" pos:end="1268:38">switch_feed_streams</name><index pos:start="1268:39" pos:end="1268:41">[<expr pos:start="1268:40" pos:end="1268:40"><name pos:start="1268:40" pos:end="1268:40">i</name></expr>]</index></name> <operator pos:start="1268:43" pos:end="1268:43">=</operator> <operator pos:start="1268:45" pos:end="1268:45">-</operator><literal type="number" pos:start="1268:46" pos:end="1268:46">2</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="1269:17" pos:end="1271:0"><expr pos:start="1269:17" pos:end="1269:39"><name pos:start="1269:17" pos:end="1269:34"><name pos:start="1269:17" pos:end="1269:17">c</name><operator pos:start="1269:18" pos:end="1269:19">-&gt;</operator><name pos:start="1269:20" pos:end="1269:31">feed_streams</name><index pos:start="1269:32" pos:end="1269:34">[<expr pos:start="1269:33" pos:end="1269:33"><name pos:start="1269:33" pos:end="1269:33">i</name></expr>]</index></name> <operator pos:start="1269:36" pos:end="1269:36">=</operator> <operator pos:start="1269:38" pos:end="1269:38">-</operator><literal type="number" pos:start="1269:39" pos:end="1269:39">2</literal></expr>;</expr_stmt>
<cpp:endif pos:start="1270:1" pos:end="1270:6">#<cpp:directive pos:start="1270:2" pos:end="1270:6">endif</cpp:directive></cpp:endif>
                <break pos:start="1271:17" pos:end="1271:22">break;</break>
        </block_content>}</block></switch>

        <if_stmt pos:start="1274:9" pos:end="1277:9"><if pos:start="1274:9" pos:end="1277:9">if <condition pos:start="1274:12" pos:end="1275:60">(<expr pos:start="1274:13" pos:end="1275:59"><name pos:start="1274:13" pos:end="1274:37"><name pos:start="1274:13" pos:end="1274:13">c</name><operator pos:start="1274:14" pos:end="1274:15">-&gt;</operator><name pos:start="1274:16" pos:end="1274:34">switch_feed_streams</name><index pos:start="1274:35" pos:end="1274:37">[<expr pos:start="1274:36" pos:end="1274:36"><name pos:start="1274:36" pos:end="1274:36">i</name></expr>]</index></name> <operator pos:start="1274:39" pos:end="1274:40">&gt;=</operator> <literal type="number" pos:start="1274:42" pos:end="1274:42">0</literal> <operator pos:start="1274:44" pos:end="1274:45">&amp;&amp;</operator>
            <name pos:start="1275:13" pos:end="1275:37"><name pos:start="1275:13" pos:end="1275:13">c</name><operator pos:start="1275:14" pos:end="1275:15">-&gt;</operator><name pos:start="1275:16" pos:end="1275:34">switch_feed_streams</name><index pos:start="1275:35" pos:end="1275:37">[<expr pos:start="1275:36" pos:end="1275:36"><name pos:start="1275:36" pos:end="1275:36">i</name></expr>]</index></name> <operator pos:start="1275:39" pos:end="1275:40">!=</operator> <name pos:start="1275:42" pos:end="1275:59"><name pos:start="1275:42" pos:end="1275:42">c</name><operator pos:start="1275:43" pos:end="1275:44">-&gt;</operator><name pos:start="1275:45" pos:end="1275:56">feed_streams</name><index pos:start="1275:57" pos:end="1275:59">[<expr pos:start="1275:58" pos:end="1275:58"><name pos:start="1275:58" pos:end="1275:58">i</name></expr>]</index></name></expr>)</condition> <block pos:start="1275:62" pos:end="1277:9">{<block_content pos:start="1276:13" pos:end="1276:32">
            <expr_stmt pos:start="1276:13" pos:end="1276:32"><expr pos:start="1276:13" pos:end="1276:31"><name pos:start="1276:13" pos:end="1276:27">action_required</name> <operator pos:start="1276:29" pos:end="1276:29">=</operator> <literal type="number" pos:start="1276:31" pos:end="1276:31">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return pos:start="1280:5" pos:end="1280:27">return <expr pos:start="1280:12" pos:end="1280:26"><name pos:start="1280:12" pos:end="1280:26">action_required</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="1283:1" pos:end="1301:1"><type pos:start="1283:1" pos:end="1283:11"><specifier pos:start="1283:1" pos:end="1283:6">static</specifier> <name pos:start="1283:8" pos:end="1283:11">void</name></type> <name pos:start="1283:13" pos:end="1283:20">get_word</name><parameter_list pos:start="1283:21" pos:end="1283:62">(<parameter pos:start="1283:22" pos:end="1283:30"><decl pos:start="1283:22" pos:end="1283:30"><type pos:start="1283:22" pos:end="1283:30"><name pos:start="1283:22" pos:end="1283:25">char</name> <modifier pos:start="1283:27" pos:end="1283:27">*</modifier></type><name pos:start="1283:28" pos:end="1283:30">buf</name></decl></parameter>, <parameter pos:start="1283:33" pos:end="1283:44"><decl pos:start="1283:33" pos:end="1283:44"><type pos:start="1283:33" pos:end="1283:44"><name pos:start="1283:33" pos:end="1283:35">int</name></type> <name pos:start="1283:37" pos:end="1283:44">buf_size</name></decl></parameter>, <parameter pos:start="1283:47" pos:end="1283:61"><decl pos:start="1283:47" pos:end="1283:61"><type pos:start="1283:47" pos:end="1283:61"><specifier pos:start="1283:47" pos:end="1283:51">const</specifier> <name pos:start="1283:53" pos:end="1283:56">char</name> <modifier pos:start="1283:58" pos:end="1283:58">*</modifier><modifier pos:start="1283:59" pos:end="1283:59">*</modifier></type><name pos:start="1283:60" pos:end="1283:61">pp</name></decl></parameter>)</parameter_list>
<block pos:start="1284:1" pos:end="1301:1">{<block_content pos:start="1285:5" pos:end="1300:12">
    <decl_stmt pos:start="1285:5" pos:end="1285:18"><decl pos:start="1285:5" pos:end="1285:17"><type pos:start="1285:5" pos:end="1285:16"><specifier pos:start="1285:5" pos:end="1285:9">const</specifier> <name pos:start="1285:11" pos:end="1285:14">char</name> <modifier pos:start="1285:16" pos:end="1285:16">*</modifier></type><name pos:start="1285:17" pos:end="1285:17">p</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1286:5" pos:end="1289:0"><decl pos:start="1286:5" pos:end="1286:11"><type pos:start="1286:5" pos:end="1286:10"><name pos:start="1286:5" pos:end="1286:8">char</name> <modifier pos:start="1286:10" pos:end="1286:10">*</modifier></type><name pos:start="1286:11" pos:end="1286:11">q</name></decl>;</decl_stmt>

<cpp:define pos:start="1288:1" pos:end="1288:29">#<cpp:directive pos:start="1288:2" pos:end="1288:7">define</cpp:directive> <cpp:macro pos:start="1288:9" pos:end="1288:19"><name pos:start="1288:9" pos:end="1288:19">SPACE_CHARS</name></cpp:macro> <cpp:value pos:start="1288:21" pos:end="1288:29">" \t\r\n"</cpp:value></cpp:define>

    <expr_stmt pos:start="1290:5" pos:end="1290:12"><expr pos:start="1290:5" pos:end="1290:11"><name pos:start="1290:5" pos:end="1290:5">p</name> <operator pos:start="1290:7" pos:end="1290:7">=</operator> <operator pos:start="1290:9" pos:end="1290:9">*</operator><name pos:start="1290:10" pos:end="1290:11">pp</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1291:5" pos:end="1291:32"><expr pos:start="1291:5" pos:end="1291:31"><name pos:start="1291:5" pos:end="1291:5">p</name> <operator pos:start="1291:7" pos:end="1291:8">+=</operator> <call pos:start="1291:10" pos:end="1291:31"><name pos:start="1291:10" pos:end="1291:15">strspn</name><argument_list pos:start="1291:16" pos:end="1291:31">(<argument pos:start="1291:17" pos:end="1291:17"><expr pos:start="1291:17" pos:end="1291:17"><name pos:start="1291:17" pos:end="1291:17">p</name></expr></argument>, <argument pos:start="1291:20" pos:end="1291:30"><expr pos:start="1291:20" pos:end="1291:30"><name pos:start="1291:20" pos:end="1291:30">SPACE_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1292:5" pos:end="1292:12"><expr pos:start="1292:5" pos:end="1292:11"><name pos:start="1292:5" pos:end="1292:5">q</name> <operator pos:start="1292:7" pos:end="1292:7">=</operator> <name pos:start="1292:9" pos:end="1292:11">buf</name></expr>;</expr_stmt>
    <while pos:start="1293:5" pos:end="1297:5">while <condition pos:start="1293:11" pos:end="1293:41">(<expr pos:start="1293:12" pos:end="1293:40"><operator pos:start="1293:12" pos:end="1293:12">!</operator><call pos:start="1293:13" pos:end="1293:26"><name pos:start="1293:13" pos:end="1293:22">av_isspace</name><argument_list pos:start="1293:23" pos:end="1293:26">(<argument pos:start="1293:24" pos:end="1293:25"><expr pos:start="1293:24" pos:end="1293:25"><operator pos:start="1293:24" pos:end="1293:24">*</operator><name pos:start="1293:25" pos:end="1293:25">p</name></expr></argument>)</argument_list></call> <operator pos:start="1293:28" pos:end="1293:29">&amp;&amp;</operator> <operator pos:start="1293:31" pos:end="1293:31">*</operator><name pos:start="1293:32" pos:end="1293:32">p</name> <operator pos:start="1293:34" pos:end="1293:35">!=</operator> <literal type="char" pos:start="1293:37" pos:end="1293:40">'\0'</literal></expr>)</condition> <block pos:start="1293:43" pos:end="1297:5">{<block_content pos:start="1294:9" pos:end="1296:12">
        <if_stmt pos:start="1294:9" pos:end="1295:22"><if pos:start="1294:9" pos:end="1295:22">if <condition pos:start="1294:12" pos:end="1294:37">(<expr pos:start="1294:13" pos:end="1294:36"><operator pos:start="1294:13" pos:end="1294:13">(</operator><name pos:start="1294:14" pos:end="1294:14">q</name> <operator pos:start="1294:16" pos:end="1294:16">-</operator> <name pos:start="1294:18" pos:end="1294:20">buf</name><operator pos:start="1294:21" pos:end="1294:21">)</operator> <operator pos:start="1294:23" pos:end="1294:23">&lt;</operator> <name pos:start="1294:25" pos:end="1294:32">buf_size</name> <operator pos:start="1294:34" pos:end="1294:34">-</operator> <literal type="number" pos:start="1294:36" pos:end="1294:36">1</literal></expr>)</condition><block type="pseudo" pos:start="1295:13" pos:end="1295:22"><block_content pos:start="1295:13" pos:end="1295:22">
            <expr_stmt pos:start="1295:13" pos:end="1295:22"><expr pos:start="1295:13" pos:end="1295:21"><operator pos:start="1295:13" pos:end="1295:13">*</operator><name pos:start="1295:14" pos:end="1295:14">q</name><operator pos:start="1295:15" pos:end="1295:16">++</operator> <operator pos:start="1295:18" pos:end="1295:18">=</operator> <operator pos:start="1295:20" pos:end="1295:20">*</operator><name pos:start="1295:21" pos:end="1295:21">p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1296:9" pos:end="1296:12"><expr pos:start="1296:9" pos:end="1296:11"><name pos:start="1296:9" pos:end="1296:9">p</name><operator pos:start="1296:10" pos:end="1296:11">++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt pos:start="1298:5" pos:end="1299:18"><if pos:start="1298:5" pos:end="1299:18">if <condition pos:start="1298:8" pos:end="1298:21">(<expr pos:start="1298:9" pos:end="1298:20"><name pos:start="1298:9" pos:end="1298:16">buf_size</name> <operator pos:start="1298:18" pos:end="1298:18">&gt;</operator> <literal type="number" pos:start="1298:20" pos:end="1298:20">0</literal></expr>)</condition><block type="pseudo" pos:start="1299:9" pos:end="1299:18"><block_content pos:start="1299:9" pos:end="1299:18">
        <expr_stmt pos:start="1299:9" pos:end="1299:18"><expr pos:start="1299:9" pos:end="1299:17"><operator pos:start="1299:9" pos:end="1299:9">*</operator><name pos:start="1299:10" pos:end="1299:10">q</name> <operator pos:start="1299:12" pos:end="1299:12">=</operator> <literal type="char" pos:start="1299:14" pos:end="1299:17">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="1300:5" pos:end="1300:12"><expr pos:start="1300:5" pos:end="1300:11"><operator pos:start="1300:5" pos:end="1300:5">*</operator><name pos:start="1300:6" pos:end="1300:7">pp</name> <operator pos:start="1300:9" pos:end="1300:9">=</operator> <name pos:start="1300:11" pos:end="1300:11">p</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="1303:1" pos:end="1341:1"><type pos:start="1303:1" pos:end="1303:28"><specifier pos:start="1303:1" pos:end="1303:6">static</specifier> <name pos:start="1303:8" pos:end="1303:27">FFServerIPAddressACL</name><modifier pos:start="1303:28" pos:end="1303:28">*</modifier></type> <name pos:start="1303:30" pos:end="1303:46">parse_dynamic_acl</name><parameter_list pos:start="1303:47" pos:end="1304:62">(<parameter pos:start="1303:48" pos:end="1303:69"><decl pos:start="1303:48" pos:end="1303:69"><type pos:start="1303:48" pos:end="1303:69"><name pos:start="1303:48" pos:end="1303:61">FFServerStream</name> <modifier pos:start="1303:63" pos:end="1303:63">*</modifier></type><name pos:start="1303:64" pos:end="1303:69">stream</name></decl></parameter>,
                                               <parameter pos:start="1304:48" pos:end="1304:61"><decl pos:start="1304:48" pos:end="1304:61"><type pos:start="1304:48" pos:end="1304:61"><name pos:start="1304:48" pos:end="1304:58">HTTPContext</name> <modifier pos:start="1304:60" pos:end="1304:60">*</modifier></type><name pos:start="1304:61" pos:end="1304:61">c</name></decl></parameter>)</parameter_list>
<block pos:start="1305:1" pos:end="1341:1">{<block_content pos:start="1306:5" pos:end="1340:15">
    <decl_stmt pos:start="1306:5" pos:end="1306:12"><decl pos:start="1306:5" pos:end="1306:11"><type pos:start="1306:5" pos:end="1306:9"><name pos:start="1306:5" pos:end="1306:8">FILE</name><modifier pos:start="1306:9" pos:end="1306:9">*</modifier></type> <name pos:start="1306:11" pos:end="1306:11">f</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1307:5" pos:end="1307:20"><decl pos:start="1307:5" pos:end="1307:19"><type pos:start="1307:5" pos:end="1307:8"><name pos:start="1307:5" pos:end="1307:8">char</name></type> <name pos:start="1307:10" pos:end="1307:19"><name pos:start="1307:10" pos:end="1307:13">line</name><index pos:start="1307:14" pos:end="1307:19">[<expr pos:start="1307:15" pos:end="1307:18"><literal type="number" pos:start="1307:15" pos:end="1307:18">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="1308:5" pos:end="1308:20"><decl pos:start="1308:5" pos:end="1308:19"><type pos:start="1308:5" pos:end="1308:8"><name pos:start="1308:5" pos:end="1308:8">char</name></type>  <name pos:start="1308:11" pos:end="1308:19"><name pos:start="1308:11" pos:end="1308:13">cmd</name><index pos:start="1308:14" pos:end="1308:19">[<expr pos:start="1308:15" pos:end="1308:18"><literal type="number" pos:start="1308:15" pos:end="1308:18">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="1309:5" pos:end="1309:37"><decl pos:start="1309:5" pos:end="1309:36"><type pos:start="1309:5" pos:end="1309:26"><name pos:start="1309:5" pos:end="1309:24">FFServerIPAddressACL</name> <modifier pos:start="1309:26" pos:end="1309:26">*</modifier></type><name pos:start="1309:27" pos:end="1309:29">acl</name> <init pos:start="1309:31" pos:end="1309:36">= <expr pos:start="1309:33" pos:end="1309:36"><name pos:start="1309:33" pos:end="1309:36">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1310:5" pos:end="1310:21"><decl pos:start="1310:5" pos:end="1310:20"><type pos:start="1310:5" pos:end="1310:7"><name pos:start="1310:5" pos:end="1310:7">int</name></type> <name pos:start="1310:9" pos:end="1310:16">line_num</name> <init pos:start="1310:18" pos:end="1310:20">= <expr pos:start="1310:20" pos:end="1310:20"><literal type="number" pos:start="1310:20" pos:end="1310:20">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1311:5" pos:end="1311:18"><decl pos:start="1311:5" pos:end="1311:17"><type pos:start="1311:5" pos:end="1311:16"><specifier pos:start="1311:5" pos:end="1311:9">const</specifier> <name pos:start="1311:11" pos:end="1311:14">char</name> <modifier pos:start="1311:16" pos:end="1311:16">*</modifier></type><name pos:start="1311:17" pos:end="1311:17">p</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1313:5" pos:end="1313:40"><expr pos:start="1313:5" pos:end="1313:39"><name pos:start="1313:5" pos:end="1313:5">f</name> <operator pos:start="1313:7" pos:end="1313:7">=</operator> <call pos:start="1313:9" pos:end="1313:39"><name pos:start="1313:9" pos:end="1313:13">fopen</name><argument_list pos:start="1313:14" pos:end="1313:39">(<argument pos:start="1313:15" pos:end="1313:33"><expr pos:start="1313:15" pos:end="1313:33"><name pos:start="1313:15" pos:end="1313:33"><name pos:start="1313:15" pos:end="1313:20">stream</name><operator pos:start="1313:21" pos:end="1313:22">-&gt;</operator><name pos:start="1313:23" pos:end="1313:33">dynamic_acl</name></name></expr></argument>, <argument pos:start="1313:36" pos:end="1313:38"><expr pos:start="1313:36" pos:end="1313:38"><literal type="string" pos:start="1313:36" pos:end="1313:38">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1314:5" pos:end="1317:5"><if pos:start="1314:5" pos:end="1317:5">if <condition pos:start="1314:8" pos:end="1314:11">(<expr pos:start="1314:9" pos:end="1314:10"><operator pos:start="1314:9" pos:end="1314:9">!</operator><name pos:start="1314:10" pos:end="1314:10">f</name></expr>)</condition> <block pos:start="1314:13" pos:end="1317:5">{<block_content pos:start="1315:9" pos:end="1316:20">
        <expr_stmt pos:start="1315:9" pos:end="1315:36"><expr pos:start="1315:9" pos:end="1315:35"><call pos:start="1315:9" pos:end="1315:35"><name pos:start="1315:9" pos:end="1315:14">perror</name><argument_list pos:start="1315:15" pos:end="1315:35">(<argument pos:start="1315:16" pos:end="1315:34"><expr pos:start="1315:16" pos:end="1315:34"><name pos:start="1315:16" pos:end="1315:34"><name pos:start="1315:16" pos:end="1315:21">stream</name><operator pos:start="1315:22" pos:end="1315:23">-&gt;</operator><name pos:start="1315:24" pos:end="1315:34">dynamic_acl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1316:9" pos:end="1316:20">return <expr pos:start="1316:16" pos:end="1316:19"><name pos:start="1316:16" pos:end="1316:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1319:5" pos:end="1319:51"><expr pos:start="1319:5" pos:end="1319:50"><name pos:start="1319:5" pos:end="1319:7">acl</name> <operator pos:start="1319:9" pos:end="1319:9">=</operator> <call pos:start="1319:11" pos:end="1319:50"><name pos:start="1319:11" pos:end="1319:20">av_mallocz</name><argument_list pos:start="1319:21" pos:end="1319:50">(<argument pos:start="1319:22" pos:end="1319:49"><expr pos:start="1319:22" pos:end="1319:49"><sizeof pos:start="1319:22" pos:end="1319:49">sizeof<argument_list pos:start="1319:28" pos:end="1319:49">(<argument pos:start="1319:29" pos:end="1319:48"><expr pos:start="1319:29" pos:end="1319:48"><name pos:start="1319:29" pos:end="1319:48">FFServerIPAddressACL</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1320:5" pos:end="1323:5"><if pos:start="1320:5" pos:end="1323:5">if <condition pos:start="1320:8" pos:end="1320:13">(<expr pos:start="1320:9" pos:end="1320:12"><operator pos:start="1320:9" pos:end="1320:9">!</operator><name pos:start="1320:10" pos:end="1320:12">acl</name></expr>)</condition> <block pos:start="1320:15" pos:end="1323:5">{<block_content pos:start="1321:9" pos:end="1322:20">
        <expr_stmt pos:start="1321:9" pos:end="1321:18"><expr pos:start="1321:9" pos:end="1321:17"><call pos:start="1321:9" pos:end="1321:17"><name pos:start="1321:9" pos:end="1321:14">fclose</name><argument_list pos:start="1321:15" pos:end="1321:17">(<argument pos:start="1321:16" pos:end="1321:16"><expr pos:start="1321:16" pos:end="1321:16"><name pos:start="1321:16" pos:end="1321:16">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1322:9" pos:end="1322:20">return <expr pos:start="1322:16" pos:end="1322:19"><name pos:start="1322:16" pos:end="1322:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1325:5" pos:end="1325:19">/* Build ACL */</comment>
    <while pos:start="1326:5" pos:end="1338:5">while <condition pos:start="1326:11" pos:end="1326:40">(<expr pos:start="1326:12" pos:end="1326:39"><call pos:start="1326:12" pos:end="1326:39"><name pos:start="1326:12" pos:end="1326:16">fgets</name><argument_list pos:start="1326:17" pos:end="1326:39">(<argument pos:start="1326:18" pos:end="1326:21"><expr pos:start="1326:18" pos:end="1326:21"><name pos:start="1326:18" pos:end="1326:21">line</name></expr></argument>, <argument pos:start="1326:24" pos:end="1326:35"><expr pos:start="1326:24" pos:end="1326:35"><sizeof pos:start="1326:24" pos:end="1326:35">sizeof<argument_list pos:start="1326:30" pos:end="1326:35">(<argument pos:start="1326:31" pos:end="1326:34"><expr pos:start="1326:31" pos:end="1326:34"><name pos:start="1326:31" pos:end="1326:34">line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1326:38" pos:end="1326:38"><expr pos:start="1326:38" pos:end="1326:38"><name pos:start="1326:38" pos:end="1326:38">f</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1326:42" pos:end="1338:5">{<block_content pos:start="1327:9" pos:end="1337:45">
        <expr_stmt pos:start="1327:9" pos:end="1327:19"><expr pos:start="1327:9" pos:end="1327:18"><name pos:start="1327:9" pos:end="1327:16">line_num</name><operator pos:start="1327:17" pos:end="1327:18">++</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="1328:9" pos:end="1328:17"><expr pos:start="1328:9" pos:end="1328:16"><name pos:start="1328:9" pos:end="1328:9">p</name> <operator pos:start="1328:11" pos:end="1328:11">=</operator> <name pos:start="1328:13" pos:end="1328:16">line</name></expr>;</expr_stmt>
        <while pos:start="1329:9" pos:end="1330:16">while <condition pos:start="1329:15" pos:end="1329:30">(<expr pos:start="1329:16" pos:end="1329:29"><call pos:start="1329:16" pos:end="1329:29"><name pos:start="1329:16" pos:end="1329:25">av_isspace</name><argument_list pos:start="1329:26" pos:end="1329:29">(<argument pos:start="1329:27" pos:end="1329:28"><expr pos:start="1329:27" pos:end="1329:28"><operator pos:start="1329:27" pos:end="1329:27">*</operator><name pos:start="1329:28" pos:end="1329:28">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1330:13" pos:end="1330:16"><block_content pos:start="1330:13" pos:end="1330:16">
            <expr_stmt pos:start="1330:13" pos:end="1330:16"><expr pos:start="1330:13" pos:end="1330:15"><name pos:start="1330:13" pos:end="1330:13">p</name><operator pos:start="1330:14" pos:end="1330:15">++</operator></expr>;</expr_stmt></block_content></block></while>
        <if_stmt pos:start="1331:9" pos:end="1332:21"><if pos:start="1331:9" pos:end="1332:21">if <condition pos:start="1331:12" pos:end="1331:36">(<expr pos:start="1331:13" pos:end="1331:35"><operator pos:start="1331:13" pos:end="1331:13">*</operator><name pos:start="1331:14" pos:end="1331:14">p</name> <operator pos:start="1331:16" pos:end="1331:17">==</operator> <literal type="char" pos:start="1331:19" pos:end="1331:22">'\0'</literal> <operator pos:start="1331:24" pos:end="1331:25">||</operator> <operator pos:start="1331:27" pos:end="1331:27">*</operator><name pos:start="1331:28" pos:end="1331:28">p</name> <operator pos:start="1331:30" pos:end="1331:31">==</operator> <literal type="char" pos:start="1331:33" pos:end="1331:35">'#'</literal></expr>)</condition><block type="pseudo" pos:start="1332:13" pos:end="1332:21"><block_content pos:start="1332:13" pos:end="1332:21">
            <continue pos:start="1332:13" pos:end="1332:21">continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1333:9" pos:end="1333:47"><expr pos:start="1333:9" pos:end="1333:46"><call pos:start="1333:9" pos:end="1333:46"><name pos:start="1333:9" pos:end="1333:24">ffserver_get_arg</name><argument_list pos:start="1333:25" pos:end="1333:46">(<argument pos:start="1333:26" pos:end="1333:28"><expr pos:start="1333:26" pos:end="1333:28"><name pos:start="1333:26" pos:end="1333:28">cmd</name></expr></argument>, <argument pos:start="1333:31" pos:end="1333:41"><expr pos:start="1333:31" pos:end="1333:41"><sizeof pos:start="1333:31" pos:end="1333:41">sizeof<argument_list pos:start="1333:37" pos:end="1333:41">(<argument pos:start="1333:38" pos:end="1333:40"><expr pos:start="1333:38" pos:end="1333:40"><name pos:start="1333:38" pos:end="1333:40">cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1333:44" pos:end="1333:45"><expr pos:start="1333:44" pos:end="1333:45"><operator pos:start="1333:44" pos:end="1333:44">&amp;</operator><name pos:start="1333:45" pos:end="1333:45">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1335:9" pos:end="1337:45"><if pos:start="1335:9" pos:end="1337:45">if <condition pos:start="1335:12" pos:end="1335:39">(<expr pos:start="1335:13" pos:end="1335:38"><operator pos:start="1335:13" pos:end="1335:13">!</operator><call pos:start="1335:14" pos:end="1335:38"><name pos:start="1335:14" pos:end="1335:26">av_strcasecmp</name><argument_list pos:start="1335:27" pos:end="1335:38">(<argument pos:start="1335:28" pos:end="1335:30"><expr pos:start="1335:28" pos:end="1335:30"><name pos:start="1335:28" pos:end="1335:30">cmd</name></expr></argument>, <argument pos:start="1335:33" pos:end="1335:37"><expr pos:start="1335:33" pos:end="1335:37"><literal type="string" pos:start="1335:33" pos:end="1335:37">"ACL"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1336:13" pos:end="1337:45"><block_content pos:start="1336:13" pos:end="1337:45">
            <expr_stmt pos:start="1336:13" pos:end="1337:45"><expr pos:start="1336:13" pos:end="1337:44"><call pos:start="1336:13" pos:end="1337:44"><name pos:start="1336:13" pos:end="1336:34">ffserver_parse_acl_row</name><argument_list pos:start="1336:35" pos:end="1337:44">(<argument pos:start="1336:36" pos:end="1336:39"><expr pos:start="1336:36" pos:end="1336:39"><name pos:start="1336:36" pos:end="1336:39">NULL</name></expr></argument>, <argument pos:start="1336:42" pos:end="1336:45"><expr pos:start="1336:42" pos:end="1336:45"><name pos:start="1336:42" pos:end="1336:45">NULL</name></expr></argument>, <argument pos:start="1336:48" pos:end="1336:50"><expr pos:start="1336:48" pos:end="1336:50"><name pos:start="1336:48" pos:end="1336:50">acl</name></expr></argument>, <argument pos:start="1336:53" pos:end="1336:53"><expr pos:start="1336:53" pos:end="1336:53"><name pos:start="1336:53" pos:end="1336:53">p</name></expr></argument>, <argument pos:start="1336:56" pos:end="1336:74"><expr pos:start="1336:56" pos:end="1336:74"><name pos:start="1336:56" pos:end="1336:74"><name pos:start="1336:56" pos:end="1336:61">stream</name><operator pos:start="1336:62" pos:end="1336:63">-&gt;</operator><name pos:start="1336:64" pos:end="1336:74">dynamic_acl</name></name></expr></argument>,
                                   <argument pos:start="1337:36" pos:end="1337:43"><expr pos:start="1337:36" pos:end="1337:43"><name pos:start="1337:36" pos:end="1337:43">line_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt pos:start="1339:5" pos:end="1339:14"><expr pos:start="1339:5" pos:end="1339:13"><call pos:start="1339:5" pos:end="1339:13"><name pos:start="1339:5" pos:end="1339:10">fclose</name><argument_list pos:start="1339:11" pos:end="1339:13">(<argument pos:start="1339:12" pos:end="1339:12"><expr pos:start="1339:12" pos:end="1339:12"><name pos:start="1339:12" pos:end="1339:12">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="1340:5" pos:end="1340:15">return <expr pos:start="1340:12" pos:end="1340:14"><name pos:start="1340:12" pos:end="1340:14">acl</name></expr>;</return>
</block_content>}</block></function>


<function pos:start="1344:1" pos:end="1354:1"><type pos:start="1344:1" pos:end="1344:11"><specifier pos:start="1344:1" pos:end="1344:6">static</specifier> <name pos:start="1344:8" pos:end="1344:11">void</name></type> <name pos:start="1344:13" pos:end="1344:25">free_acl_list</name><parameter_list pos:start="1344:26" pos:end="1344:55">(<parameter pos:start="1344:27" pos:end="1344:54"><decl pos:start="1344:27" pos:end="1344:54"><type pos:start="1344:27" pos:end="1344:48"><name pos:start="1344:27" pos:end="1344:46">FFServerIPAddressACL</name> <modifier pos:start="1344:48" pos:end="1344:48">*</modifier></type><name pos:start="1344:49" pos:end="1344:54">in_acl</name></decl></parameter>)</parameter_list>
<block pos:start="1345:1" pos:end="1354:1">{<block_content pos:start="1346:5" pos:end="1353:5">
    <decl_stmt pos:start="1346:5" pos:end="1346:39"><decl pos:start="1346:5" pos:end="1346:30"><type pos:start="1346:5" pos:end="1346:26"><name pos:start="1346:5" pos:end="1346:24">FFServerIPAddressACL</name> <modifier pos:start="1346:26" pos:end="1346:26">*</modifier></type><name pos:start="1346:27" pos:end="1346:30">pacl</name></decl>, <decl pos:start="1346:33" pos:end="1346:38"><type ref="prev" pos:start="1346:5" pos:end="1346:26"><modifier pos:start="1346:33" pos:end="1346:33">*</modifier></type><name pos:start="1346:34" pos:end="1346:38">pacl2</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1348:5" pos:end="1348:18"><expr pos:start="1348:5" pos:end="1348:17"><name pos:start="1348:5" pos:end="1348:8">pacl</name> <operator pos:start="1348:10" pos:end="1348:10">=</operator> <name pos:start="1348:12" pos:end="1348:17">in_acl</name></expr>;</expr_stmt>
    <while pos:start="1349:5" pos:end="1353:5">while<condition pos:start="1349:10" pos:end="1349:15">(<expr pos:start="1349:11" pos:end="1349:14"><name pos:start="1349:11" pos:end="1349:14">pacl</name></expr>)</condition> <block pos:start="1349:17" pos:end="1353:5">{<block_content pos:start="1350:9" pos:end="1352:24">
        <expr_stmt pos:start="1350:9" pos:end="1350:21"><expr pos:start="1350:9" pos:end="1350:20"><name pos:start="1350:9" pos:end="1350:13">pacl2</name> <operator pos:start="1350:15" pos:end="1350:15">=</operator> <name pos:start="1350:17" pos:end="1350:20">pacl</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1351:9" pos:end="1351:26"><expr pos:start="1351:9" pos:end="1351:25"><name pos:start="1351:9" pos:end="1351:12">pacl</name> <operator pos:start="1351:14" pos:end="1351:14">=</operator> <name pos:start="1351:16" pos:end="1351:25"><name pos:start="1351:16" pos:end="1351:19">pacl</name><operator pos:start="1351:20" pos:end="1351:21">-&gt;</operator><name pos:start="1351:22" pos:end="1351:25">next</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="1352:9" pos:end="1352:24"><expr pos:start="1352:9" pos:end="1352:23"><call pos:start="1352:9" pos:end="1352:23"><name pos:start="1352:9" pos:end="1352:16">av_freep</name><argument_list pos:start="1352:17" pos:end="1352:23">(<argument pos:start="1352:18" pos:end="1352:22"><expr pos:start="1352:18" pos:end="1352:22"><name pos:start="1352:18" pos:end="1352:22">pacl2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function pos:start="1356:1" pos:end="1371:1"><type pos:start="1356:1" pos:end="1356:10"><specifier pos:start="1356:1" pos:end="1356:6">static</specifier> <name pos:start="1356:8" pos:end="1356:10">int</name></type> <name pos:start="1356:12" pos:end="1356:28">validate_acl_list</name><parameter_list pos:start="1356:29" pos:end="1356:74">(<parameter pos:start="1356:30" pos:end="1356:57"><decl pos:start="1356:30" pos:end="1356:57"><type pos:start="1356:30" pos:end="1356:57"><name pos:start="1356:30" pos:end="1356:49">FFServerIPAddressACL</name> <modifier pos:start="1356:51" pos:end="1356:51">*</modifier></type><name pos:start="1356:52" pos:end="1356:57">in_acl</name></decl></parameter>, <parameter pos:start="1356:60" pos:end="1356:73"><decl pos:start="1356:60" pos:end="1356:73"><type pos:start="1356:60" pos:end="1356:73"><name pos:start="1356:60" pos:end="1356:70">HTTPContext</name> <modifier pos:start="1356:72" pos:end="1356:72">*</modifier></type><name pos:start="1356:73" pos:end="1356:73">c</name></decl></parameter>)</parameter_list>
<block pos:start="1357:1" pos:end="1371:1">{<block_content pos:start="1358:5" pos:end="1370:44">
    <decl_stmt pos:start="1358:5" pos:end="1358:55"><decl pos:start="1358:5" pos:end="1358:54"><type pos:start="1358:5" pos:end="1358:32"><name pos:start="1358:5" pos:end="1358:32"><name pos:start="1358:5" pos:end="1358:8">enum</name> <name pos:start="1358:10" pos:end="1358:32">FFServerIPAddressAction</name></name></type> <name pos:start="1358:34" pos:end="1358:44">last_action</name> <init pos:start="1358:46" pos:end="1358:54">= <expr pos:start="1358:48" pos:end="1358:54"><name pos:start="1358:48" pos:end="1358:54">IP_DENY</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1359:5" pos:end="1359:30"><decl pos:start="1359:5" pos:end="1359:29"><type pos:start="1359:5" pos:end="1359:26"><name pos:start="1359:5" pos:end="1359:24">FFServerIPAddressACL</name> <modifier pos:start="1359:26" pos:end="1359:26">*</modifier></type><name pos:start="1359:27" pos:end="1359:29">acl</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1360:5" pos:end="1360:49"><decl pos:start="1360:5" pos:end="1360:48"><type pos:start="1360:5" pos:end="1360:20"><name pos:start="1360:5" pos:end="1360:18"><name pos:start="1360:5" pos:end="1360:10">struct</name> <name pos:start="1360:12" pos:end="1360:18">in_addr</name></name> <modifier pos:start="1360:20" pos:end="1360:20">*</modifier></type><name pos:start="1360:21" pos:end="1360:23">src</name> <init pos:start="1360:25" pos:end="1360:48">= <expr pos:start="1360:27" pos:end="1360:48"><operator pos:start="1360:27" pos:end="1360:27">&amp;</operator><name pos:start="1360:28" pos:end="1360:48"><name pos:start="1360:28" pos:end="1360:28">c</name><operator pos:start="1360:29" pos:end="1360:30">-&gt;</operator><name pos:start="1360:31" pos:end="1360:39">from_addr</name><operator pos:start="1360:40" pos:end="1360:40">.</operator><name pos:start="1360:41" pos:end="1360:48">sin_addr</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1361:5" pos:end="1361:41"><decl pos:start="1361:5" pos:end="1361:40"><type pos:start="1361:5" pos:end="1361:17"><name pos:start="1361:5" pos:end="1361:12">unsigned</name> <name pos:start="1361:14" pos:end="1361:17">long</name></type> <name pos:start="1361:19" pos:end="1361:26">src_addr</name> <init pos:start="1361:28" pos:end="1361:40">= <expr pos:start="1361:30" pos:end="1361:40"><name pos:start="1361:30" pos:end="1361:40"><name pos:start="1361:30" pos:end="1361:32">src</name><operator pos:start="1361:33" pos:end="1361:34">-&gt;</operator><name pos:start="1361:35" pos:end="1361:40">s_addr</name></name></expr></init></decl>;</decl_stmt>

    <for pos:start="1363:5" pos:end="1367:5">for <control pos:start="1363:9" pos:end="1363:44">(<init pos:start="1363:10" pos:end="1363:22"><expr pos:start="1363:10" pos:end="1363:21"><name pos:start="1363:10" pos:end="1363:12">acl</name> <operator pos:start="1363:14" pos:end="1363:14">=</operator> <name pos:start="1363:16" pos:end="1363:21">in_acl</name></expr>;</init> <condition pos:start="1363:24" pos:end="1363:27"><expr pos:start="1363:24" pos:end="1363:26"><name pos:start="1363:24" pos:end="1363:26">acl</name></expr>;</condition> <incr pos:start="1363:29" pos:end="1363:43"><expr pos:start="1363:29" pos:end="1363:43"><name pos:start="1363:29" pos:end="1363:31">acl</name> <operator pos:start="1363:33" pos:end="1363:33">=</operator> <name pos:start="1363:35" pos:end="1363:43"><name pos:start="1363:35" pos:end="1363:37">acl</name><operator pos:start="1363:38" pos:end="1363:39">-&gt;</operator><name pos:start="1363:40" pos:end="1363:43">next</name></name></expr></incr>)</control> <block pos:start="1363:46" pos:end="1367:5">{<block_content pos:start="1364:9" pos:end="1366:34">
        <if_stmt pos:start="1364:9" pos:end="1365:53"><if pos:start="1364:9" pos:end="1365:53">if <condition pos:start="1364:12" pos:end="1364:74">(<expr pos:start="1364:13" pos:end="1364:73"><name pos:start="1364:13" pos:end="1364:20">src_addr</name> <operator pos:start="1364:22" pos:end="1364:23">&gt;=</operator> <name pos:start="1364:25" pos:end="1364:41"><name pos:start="1364:25" pos:end="1364:27">acl</name><operator pos:start="1364:28" pos:end="1364:29">-&gt;</operator><name pos:start="1364:30" pos:end="1364:34">first</name><operator pos:start="1364:35" pos:end="1364:35">.</operator><name pos:start="1364:36" pos:end="1364:41">s_addr</name></name> <operator pos:start="1364:43" pos:end="1364:44">&amp;&amp;</operator> <name pos:start="1364:46" pos:end="1364:53">src_addr</name> <operator pos:start="1364:55" pos:end="1364:56">&lt;=</operator> <name pos:start="1364:58" pos:end="1364:73"><name pos:start="1364:58" pos:end="1364:60">acl</name><operator pos:start="1364:61" pos:end="1364:62">-&gt;</operator><name pos:start="1364:63" pos:end="1364:66">last</name><operator pos:start="1364:67" pos:end="1364:67">.</operator><name pos:start="1364:68" pos:end="1364:73">s_addr</name></name></expr>)</condition><block type="pseudo" pos:start="1365:13" pos:end="1365:53"><block_content pos:start="1365:13" pos:end="1365:53">
            <return pos:start="1365:13" pos:end="1365:53">return <expr pos:start="1365:20" pos:end="1365:52"><ternary pos:start="1365:20" pos:end="1365:52"><condition pos:start="1365:20" pos:end="1365:46"><expr pos:start="1365:20" pos:end="1365:44"><operator pos:start="1365:20" pos:end="1365:20">(</operator><name pos:start="1365:21" pos:end="1365:31"><name pos:start="1365:21" pos:end="1365:23">acl</name><operator pos:start="1365:24" pos:end="1365:25">-&gt;</operator><name pos:start="1365:26" pos:end="1365:31">action</name></name> <operator pos:start="1365:33" pos:end="1365:34">==</operator> <name pos:start="1365:36" pos:end="1365:43">IP_ALLOW</name><operator pos:start="1365:44" pos:end="1365:44">)</operator></expr> ?</condition><then pos:start="1365:48" pos:end="1365:48"> <expr pos:start="1365:48" pos:end="1365:48"><literal type="number" pos:start="1365:48" pos:end="1365:48">1</literal></expr> </then><else pos:start="1365:50" pos:end="1365:52">: <expr pos:start="1365:52" pos:end="1365:52"><literal type="number" pos:start="1365:52" pos:end="1365:52">0</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1366:9" pos:end="1366:34"><expr pos:start="1366:9" pos:end="1366:33"><name pos:start="1366:9" pos:end="1366:19">last_action</name> <operator pos:start="1366:21" pos:end="1366:21">=</operator> <name pos:start="1366:23" pos:end="1366:33"><name pos:start="1366:23" pos:end="1366:25">acl</name><operator pos:start="1366:26" pos:end="1366:27">-&gt;</operator><name pos:start="1366:28" pos:end="1366:33">action</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block" pos:start="1369:5" pos:end="1369:56">/* Nothing matched, so return not the last action */</comment>
    <return pos:start="1370:5" pos:end="1370:44">return <expr pos:start="1370:12" pos:end="1370:43"><ternary pos:start="1370:12" pos:end="1370:43"><condition pos:start="1370:12" pos:end="1370:37"><expr pos:start="1370:12" pos:end="1370:35"><operator pos:start="1370:12" pos:end="1370:12">(</operator><name pos:start="1370:13" pos:end="1370:23">last_action</name> <operator pos:start="1370:25" pos:end="1370:26">==</operator> <name pos:start="1370:28" pos:end="1370:34">IP_DENY</name><operator pos:start="1370:35" pos:end="1370:35">)</operator></expr> ?</condition><then pos:start="1370:39" pos:end="1370:39"> <expr pos:start="1370:39" pos:end="1370:39"><literal type="number" pos:start="1370:39" pos:end="1370:39">1</literal></expr> </then><else pos:start="1370:41" pos:end="1370:43">: <expr pos:start="1370:43" pos:end="1370:43"><literal type="number" pos:start="1370:43" pos:end="1370:43">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function pos:start="1373:1" pos:end="1388:1"><type pos:start="1373:1" pos:end="1373:10"><specifier pos:start="1373:1" pos:end="1373:6">static</specifier> <name pos:start="1373:8" pos:end="1373:10">int</name></type> <name pos:start="1373:12" pos:end="1373:23">validate_acl</name><parameter_list pos:start="1373:24" pos:end="1373:63">(<parameter pos:start="1373:25" pos:end="1373:46"><decl pos:start="1373:25" pos:end="1373:46"><type pos:start="1373:25" pos:end="1373:46"><name pos:start="1373:25" pos:end="1373:38">FFServerStream</name> <modifier pos:start="1373:40" pos:end="1373:40">*</modifier></type><name pos:start="1373:41" pos:end="1373:46">stream</name></decl></parameter>, <parameter pos:start="1373:49" pos:end="1373:62"><decl pos:start="1373:49" pos:end="1373:62"><type pos:start="1373:49" pos:end="1373:62"><name pos:start="1373:49" pos:end="1373:59">HTTPContext</name> <modifier pos:start="1373:61" pos:end="1373:61">*</modifier></type><name pos:start="1373:62" pos:end="1373:62">c</name></decl></parameter>)</parameter_list>
<block pos:start="1374:1" pos:end="1388:1">{<block_content pos:start="1375:5" pos:end="1387:15">
    <decl_stmt pos:start="1375:5" pos:end="1375:16"><decl pos:start="1375:5" pos:end="1375:15"><type pos:start="1375:5" pos:end="1375:7"><name pos:start="1375:5" pos:end="1375:7">int</name></type> <name pos:start="1375:9" pos:end="1375:11">ret</name> <init pos:start="1375:13" pos:end="1375:15">= <expr pos:start="1375:15" pos:end="1375:15"><literal type="number" pos:start="1375:15" pos:end="1375:15">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1376:5" pos:end="1376:30"><decl pos:start="1376:5" pos:end="1376:29"><type pos:start="1376:5" pos:end="1376:26"><name pos:start="1376:5" pos:end="1376:24">FFServerIPAddressACL</name> <modifier pos:start="1376:26" pos:end="1376:26">*</modifier></type><name pos:start="1376:27" pos:end="1376:29">acl</name></decl>;</decl_stmt>

    <comment type="block" pos:start="1378:5" pos:end="1378:64">/* if stream-&gt;acl is null validate_acl_list will return 1 */</comment>
    <expr_stmt pos:start="1379:5" pos:end="1379:44"><expr pos:start="1379:5" pos:end="1379:43"><name pos:start="1379:5" pos:end="1379:7">ret</name> <operator pos:start="1379:9" pos:end="1379:9">=</operator> <call pos:start="1379:11" pos:end="1379:43"><name pos:start="1379:11" pos:end="1379:27">validate_acl_list</name><argument_list pos:start="1379:28" pos:end="1379:43">(<argument pos:start="1379:29" pos:end="1379:39"><expr pos:start="1379:29" pos:end="1379:39"><name pos:start="1379:29" pos:end="1379:39"><name pos:start="1379:29" pos:end="1379:34">stream</name><operator pos:start="1379:35" pos:end="1379:36">-&gt;</operator><name pos:start="1379:37" pos:end="1379:39">acl</name></name></expr></argument>, <argument pos:start="1379:42" pos:end="1379:42"><expr pos:start="1379:42" pos:end="1379:42"><name pos:start="1379:42" pos:end="1379:42">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1381:5" pos:end="1385:5"><if pos:start="1381:5" pos:end="1385:5">if <condition pos:start="1381:8" pos:end="1381:31">(<expr pos:start="1381:9" pos:end="1381:30"><name pos:start="1381:9" pos:end="1381:30"><name pos:start="1381:9" pos:end="1381:14">stream</name><operator pos:start="1381:15" pos:end="1381:16">-&gt;</operator><name pos:start="1381:17" pos:end="1381:27">dynamic_acl</name><index pos:start="1381:28" pos:end="1381:30">[<expr pos:start="1381:29" pos:end="1381:29"><literal type="number" pos:start="1381:29" pos:end="1381:29">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="1381:33" pos:end="1385:5">{<block_content pos:start="1382:9" pos:end="1384:27">
        <expr_stmt pos:start="1382:9" pos:end="1382:43"><expr pos:start="1382:9" pos:end="1382:42"><name pos:start="1382:9" pos:end="1382:11">acl</name> <operator pos:start="1382:13" pos:end="1382:13">=</operator> <call pos:start="1382:15" pos:end="1382:42"><name pos:start="1382:15" pos:end="1382:31">parse_dynamic_acl</name><argument_list pos:start="1382:32" pos:end="1382:42">(<argument pos:start="1382:33" pos:end="1382:38"><expr pos:start="1382:33" pos:end="1382:38"><name pos:start="1382:33" pos:end="1382:38">stream</name></expr></argument>, <argument pos:start="1382:41" pos:end="1382:41"><expr pos:start="1382:41" pos:end="1382:41"><name pos:start="1382:41" pos:end="1382:41">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1383:9" pos:end="1383:40"><expr pos:start="1383:9" pos:end="1383:39"><name pos:start="1383:9" pos:end="1383:11">ret</name> <operator pos:start="1383:13" pos:end="1383:13">=</operator> <call pos:start="1383:15" pos:end="1383:39"><name pos:start="1383:15" pos:end="1383:31">validate_acl_list</name><argument_list pos:start="1383:32" pos:end="1383:39">(<argument pos:start="1383:33" pos:end="1383:35"><expr pos:start="1383:33" pos:end="1383:35"><name pos:start="1383:33" pos:end="1383:35">acl</name></expr></argument>, <argument pos:start="1383:38" pos:end="1383:38"><expr pos:start="1383:38" pos:end="1383:38"><name pos:start="1383:38" pos:end="1383:38">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1384:9" pos:end="1384:27"><expr pos:start="1384:9" pos:end="1384:26"><call pos:start="1384:9" pos:end="1384:26"><name pos:start="1384:9" pos:end="1384:21">free_acl_list</name><argument_list pos:start="1384:22" pos:end="1384:26">(<argument pos:start="1384:23" pos:end="1384:25"><expr pos:start="1384:23" pos:end="1384:25"><name pos:start="1384:23" pos:end="1384:25">acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return pos:start="1387:5" pos:end="1387:15">return <expr pos:start="1387:12" pos:end="1387:14"><name pos:start="1387:12" pos:end="1387:14">ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="1390:1" pos:end="1393:3">/**
 * compute the real filename of a file by matching it without its
 * extensions to all the stream's filenames
 */</comment>
<function pos:start="1394:1" pos:end="1415:1"><type pos:start="1394:1" pos:end="1394:11"><specifier pos:start="1394:1" pos:end="1394:6">static</specifier> <name pos:start="1394:8" pos:end="1394:11">void</name></type> <name pos:start="1394:13" pos:end="1394:33">compute_real_filename</name><parameter_list pos:start="1394:34" pos:end="1394:63">(<parameter pos:start="1394:35" pos:end="1394:48"><decl pos:start="1394:35" pos:end="1394:48"><type pos:start="1394:35" pos:end="1394:48"><name pos:start="1394:35" pos:end="1394:38">char</name> <modifier pos:start="1394:40" pos:end="1394:40">*</modifier></type><name pos:start="1394:41" pos:end="1394:48">filename</name></decl></parameter>, <parameter pos:start="1394:51" pos:end="1394:62"><decl pos:start="1394:51" pos:end="1394:62"><type pos:start="1394:51" pos:end="1394:62"><name pos:start="1394:51" pos:end="1394:53">int</name></type> <name pos:start="1394:55" pos:end="1394:62">max_size</name></decl></parameter>)</parameter_list>
<block pos:start="1395:1" pos:end="1415:1">{<block_content pos:start="1396:5" pos:end="1414:5">
    <decl_stmt pos:start="1396:5" pos:end="1396:21"><decl pos:start="1396:5" pos:end="1396:20"><type pos:start="1396:5" pos:end="1396:8"><name pos:start="1396:5" pos:end="1396:8">char</name></type> <name pos:start="1396:10" pos:end="1396:20"><name pos:start="1396:10" pos:end="1396:14">file1</name><index pos:start="1396:15" pos:end="1396:20">[<expr pos:start="1396:16" pos:end="1396:19"><literal type="number" pos:start="1396:16" pos:end="1396:19">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="1397:5" pos:end="1397:21"><decl pos:start="1397:5" pos:end="1397:20"><type pos:start="1397:5" pos:end="1397:8"><name pos:start="1397:5" pos:end="1397:8">char</name></type> <name pos:start="1397:10" pos:end="1397:20"><name pos:start="1397:10" pos:end="1397:14">file2</name><index pos:start="1397:15" pos:end="1397:20">[<expr pos:start="1397:16" pos:end="1397:19"><literal type="number" pos:start="1397:16" pos:end="1397:19">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="1398:5" pos:end="1398:12"><decl pos:start="1398:5" pos:end="1398:11"><type pos:start="1398:5" pos:end="1398:10"><name pos:start="1398:5" pos:end="1398:8">char</name> <modifier pos:start="1398:10" pos:end="1398:10">*</modifier></type><name pos:start="1398:11" pos:end="1398:11">p</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1399:5" pos:end="1399:27"><decl pos:start="1399:5" pos:end="1399:26"><type pos:start="1399:5" pos:end="1399:20"><name pos:start="1399:5" pos:end="1399:18">FFServerStream</name> <modifier pos:start="1399:20" pos:end="1399:20">*</modifier></type><name pos:start="1399:21" pos:end="1399:26">stream</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1401:5" pos:end="1401:47"><expr pos:start="1401:5" pos:end="1401:46"><call pos:start="1401:5" pos:end="1401:46"><name pos:start="1401:5" pos:end="1401:14">av_strlcpy</name><argument_list pos:start="1401:15" pos:end="1401:46">(<argument pos:start="1401:16" pos:end="1401:20"><expr pos:start="1401:16" pos:end="1401:20"><name pos:start="1401:16" pos:end="1401:20">file1</name></expr></argument>, <argument pos:start="1401:23" pos:end="1401:30"><expr pos:start="1401:23" pos:end="1401:30"><name pos:start="1401:23" pos:end="1401:30">filename</name></expr></argument>, <argument pos:start="1401:33" pos:end="1401:45"><expr pos:start="1401:33" pos:end="1401:45"><sizeof pos:start="1401:33" pos:end="1401:45">sizeof<argument_list pos:start="1401:39" pos:end="1401:45">(<argument pos:start="1401:40" pos:end="1401:44"><expr pos:start="1401:40" pos:end="1401:44"><name pos:start="1401:40" pos:end="1401:44">file1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1402:5" pos:end="1402:28"><expr pos:start="1402:5" pos:end="1402:27"><name pos:start="1402:5" pos:end="1402:5">p</name> <operator pos:start="1402:7" pos:end="1402:7">=</operator> <call pos:start="1402:9" pos:end="1402:27"><name pos:start="1402:9" pos:end="1402:15">strrchr</name><argument_list pos:start="1402:16" pos:end="1402:27">(<argument pos:start="1402:17" pos:end="1402:21"><expr pos:start="1402:17" pos:end="1402:21"><name pos:start="1402:17" pos:end="1402:21">file1</name></expr></argument>, <argument pos:start="1402:24" pos:end="1402:26"><expr pos:start="1402:24" pos:end="1402:26"><literal type="char" pos:start="1402:24" pos:end="1402:26">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1403:5" pos:end="1404:18"><if pos:start="1403:5" pos:end="1404:18">if <condition pos:start="1403:8" pos:end="1403:10">(<expr pos:start="1403:9" pos:end="1403:9"><name pos:start="1403:9" pos:end="1403:9">p</name></expr>)</condition><block type="pseudo" pos:start="1404:9" pos:end="1404:18"><block_content pos:start="1404:9" pos:end="1404:18">
        <expr_stmt pos:start="1404:9" pos:end="1404:18"><expr pos:start="1404:9" pos:end="1404:17"><operator pos:start="1404:9" pos:end="1404:9">*</operator><name pos:start="1404:10" pos:end="1404:10">p</name> <operator pos:start="1404:12" pos:end="1404:12">=</operator> <literal type="char" pos:start="1404:14" pos:end="1404:17">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <for pos:start="1405:5" pos:end="1414:5">for<control pos:start="1405:8" pos:end="1405:68">(<init pos:start="1405:9" pos:end="1405:37"><expr pos:start="1405:9" pos:end="1405:36"><name pos:start="1405:9" pos:end="1405:14">stream</name> <operator pos:start="1405:16" pos:end="1405:16">=</operator> <name pos:start="1405:18" pos:end="1405:36"><name pos:start="1405:18" pos:end="1405:23">config</name><operator pos:start="1405:24" pos:end="1405:24">.</operator><name pos:start="1405:25" pos:end="1405:36">first_stream</name></name></expr>;</init> <condition pos:start="1405:39" pos:end="1405:45"><expr pos:start="1405:39" pos:end="1405:44"><name pos:start="1405:39" pos:end="1405:44">stream</name></expr>;</condition> <incr pos:start="1405:47" pos:end="1405:67"><expr pos:start="1405:47" pos:end="1405:67"><name pos:start="1405:47" pos:end="1405:52">stream</name> <operator pos:start="1405:54" pos:end="1405:54">=</operator> <name pos:start="1405:56" pos:end="1405:67"><name pos:start="1405:56" pos:end="1405:61">stream</name><operator pos:start="1405:62" pos:end="1405:63">-&gt;</operator><name pos:start="1405:64" pos:end="1405:67">next</name></name></expr></incr>)</control> <block pos:start="1405:70" pos:end="1414:5">{<block_content pos:start="1406:9" pos:end="1413:9">
        <expr_stmt pos:start="1406:9" pos:end="1406:59"><expr pos:start="1406:9" pos:end="1406:58"><call pos:start="1406:9" pos:end="1406:58"><name pos:start="1406:9" pos:end="1406:18">av_strlcpy</name><argument_list pos:start="1406:19" pos:end="1406:58">(<argument pos:start="1406:20" pos:end="1406:24"><expr pos:start="1406:20" pos:end="1406:24"><name pos:start="1406:20" pos:end="1406:24">file2</name></expr></argument>, <argument pos:start="1406:27" pos:end="1406:42"><expr pos:start="1406:27" pos:end="1406:42"><name pos:start="1406:27" pos:end="1406:42"><name pos:start="1406:27" pos:end="1406:32">stream</name><operator pos:start="1406:33" pos:end="1406:34">-&gt;</operator><name pos:start="1406:35" pos:end="1406:42">filename</name></name></expr></argument>, <argument pos:start="1406:45" pos:end="1406:57"><expr pos:start="1406:45" pos:end="1406:57"><sizeof pos:start="1406:45" pos:end="1406:57">sizeof<argument_list pos:start="1406:51" pos:end="1406:57">(<argument pos:start="1406:52" pos:end="1406:56"><expr pos:start="1406:52" pos:end="1406:56"><name pos:start="1406:52" pos:end="1406:56">file2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1407:9" pos:end="1407:32"><expr pos:start="1407:9" pos:end="1407:31"><name pos:start="1407:9" pos:end="1407:9">p</name> <operator pos:start="1407:11" pos:end="1407:11">=</operator> <call pos:start="1407:13" pos:end="1407:31"><name pos:start="1407:13" pos:end="1407:19">strrchr</name><argument_list pos:start="1407:20" pos:end="1407:31">(<argument pos:start="1407:21" pos:end="1407:25"><expr pos:start="1407:21" pos:end="1407:25"><name pos:start="1407:21" pos:end="1407:25">file2</name></expr></argument>, <argument pos:start="1407:28" pos:end="1407:30"><expr pos:start="1407:28" pos:end="1407:30"><literal type="char" pos:start="1407:28" pos:end="1407:30">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1408:9" pos:end="1409:22"><if pos:start="1408:9" pos:end="1409:22">if <condition pos:start="1408:12" pos:end="1408:14">(<expr pos:start="1408:13" pos:end="1408:13"><name pos:start="1408:13" pos:end="1408:13">p</name></expr>)</condition><block type="pseudo" pos:start="1409:13" pos:end="1409:22"><block_content pos:start="1409:13" pos:end="1409:22">
            <expr_stmt pos:start="1409:13" pos:end="1409:22"><expr pos:start="1409:13" pos:end="1409:21"><operator pos:start="1409:13" pos:end="1409:13">*</operator><name pos:start="1409:14" pos:end="1409:14">p</name> <operator pos:start="1409:16" pos:end="1409:16">=</operator> <literal type="char" pos:start="1409:18" pos:end="1409:21">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="1410:9" pos:end="1413:9"><if pos:start="1410:9" pos:end="1413:9">if <condition pos:start="1410:12" pos:end="1410:34">(<expr pos:start="1410:13" pos:end="1410:33"><operator pos:start="1410:13" pos:end="1410:13">!</operator><call pos:start="1410:14" pos:end="1410:33"><name pos:start="1410:14" pos:end="1410:19">strcmp</name><argument_list pos:start="1410:20" pos:end="1410:33">(<argument pos:start="1410:21" pos:end="1410:25"><expr pos:start="1410:21" pos:end="1410:25"><name pos:start="1410:21" pos:end="1410:25">file1</name></expr></argument>, <argument pos:start="1410:28" pos:end="1410:32"><expr pos:start="1410:28" pos:end="1410:32"><name pos:start="1410:28" pos:end="1410:32">file2</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1410:36" pos:end="1413:9">{<block_content pos:start="1411:13" pos:end="1412:18">
            <expr_stmt pos:start="1411:13" pos:end="1411:61"><expr pos:start="1411:13" pos:end="1411:60"><call pos:start="1411:13" pos:end="1411:60"><name pos:start="1411:13" pos:end="1411:22">av_strlcpy</name><argument_list pos:start="1411:23" pos:end="1411:60">(<argument pos:start="1411:24" pos:end="1411:31"><expr pos:start="1411:24" pos:end="1411:31"><name pos:start="1411:24" pos:end="1411:31">filename</name></expr></argument>, <argument pos:start="1411:34" pos:end="1411:49"><expr pos:start="1411:34" pos:end="1411:49"><name pos:start="1411:34" pos:end="1411:49"><name pos:start="1411:34" pos:end="1411:39">stream</name><operator pos:start="1411:40" pos:end="1411:41">-&gt;</operator><name pos:start="1411:42" pos:end="1411:49">filename</name></name></expr></argument>, <argument pos:start="1411:52" pos:end="1411:59"><expr pos:start="1411:52" pos:end="1411:59"><name pos:start="1411:52" pos:end="1411:59">max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="1412:13" pos:end="1412:18">break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<enum pos:start="1417:1" pos:end="1424:2">enum <name pos:start="1417:6" pos:end="1417:14">RedirType</name> <block pos:start="1417:16" pos:end="1424:1">{
    <decl pos:start="1418:5" pos:end="1418:14"><name pos:start="1418:5" pos:end="1418:14">REDIR_NONE</name></decl>,
    <decl pos:start="1419:5" pos:end="1419:13"><name pos:start="1419:5" pos:end="1419:13">REDIR_ASX</name></decl>,
    <decl pos:start="1420:5" pos:end="1420:13"><name pos:start="1420:5" pos:end="1420:13">REDIR_RAM</name></decl>,
    <decl pos:start="1421:5" pos:end="1421:13"><name pos:start="1421:5" pos:end="1421:13">REDIR_ASF</name></decl>,
    <decl pos:start="1422:5" pos:end="1422:14"><name pos:start="1422:5" pos:end="1422:14">REDIR_RTSP</name></decl>,
    <decl pos:start="1423:5" pos:end="1423:13"><name pos:start="1423:5" pos:end="1423:13">REDIR_SDP</name></decl>,
}</block>;</enum>

<comment type="block" pos:start="1426:1" pos:end="1426:43">/* parse HTTP request and prepare header */</comment>
<function pos:start="1427:1" pos:end="1866:1"><type pos:start="1427:1" pos:end="1427:10"><specifier pos:start="1427:1" pos:end="1427:6">static</specifier> <name pos:start="1427:8" pos:end="1427:10">int</name></type> <name pos:start="1427:12" pos:end="1427:29">http_parse_request</name><parameter_list pos:start="1427:30" pos:end="1427:45">(<parameter pos:start="1427:31" pos:end="1427:44"><decl pos:start="1427:31" pos:end="1427:44"><type pos:start="1427:31" pos:end="1427:43"><name pos:start="1427:31" pos:end="1427:41">HTTPContext</name> <modifier pos:start="1427:43" pos:end="1427:43">*</modifier></type><name pos:start="1427:44" pos:end="1427:44">c</name></decl></parameter>)</parameter_list>
<block pos:start="1428:1" pos:end="1866:1">{<block_content pos:start="1429:5" pos:end="1865:13">
    <decl_stmt pos:start="1429:5" pos:end="1429:18"><decl pos:start="1429:5" pos:end="1429:17"><type pos:start="1429:5" pos:end="1429:16"><specifier pos:start="1429:5" pos:end="1429:9">const</specifier> <name pos:start="1429:11" pos:end="1429:14">char</name> <modifier pos:start="1429:16" pos:end="1429:16">*</modifier></type><name pos:start="1429:17" pos:end="1429:17">p</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1430:5" pos:end="1430:13"><decl pos:start="1430:5" pos:end="1430:12"><type pos:start="1430:5" pos:end="1430:10"><name pos:start="1430:5" pos:end="1430:8">char</name> <modifier pos:start="1430:10" pos:end="1430:10">*</modifier></type><name pos:start="1430:11" pos:end="1430:12">p1</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1431:5" pos:end="1431:30"><decl pos:start="1431:5" pos:end="1431:29"><type pos:start="1431:5" pos:end="1431:18"><name pos:start="1431:5" pos:end="1431:18"><name pos:start="1431:5" pos:end="1431:8">enum</name> <name pos:start="1431:10" pos:end="1431:18">RedirType</name></name></type> <name pos:start="1431:20" pos:end="1431:29">redir_type</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1432:5" pos:end="1432:17"><decl pos:start="1432:5" pos:end="1432:16"><type pos:start="1432:5" pos:end="1432:8"><name pos:start="1432:5" pos:end="1432:8">char</name></type> <name pos:start="1432:10" pos:end="1432:16"><name pos:start="1432:10" pos:end="1432:12">cmd</name><index pos:start="1432:13" pos:end="1432:16">[<expr pos:start="1432:14" pos:end="1432:15"><literal type="number" pos:start="1432:14" pos:end="1432:15">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="1433:5" pos:end="1433:36"><decl pos:start="1433:5" pos:end="1433:19"><type pos:start="1433:5" pos:end="1433:8"><name pos:start="1433:5" pos:end="1433:8">char</name></type> <name pos:start="1433:10" pos:end="1433:19"><name pos:start="1433:10" pos:end="1433:13">info</name><index pos:start="1433:14" pos:end="1433:19">[<expr pos:start="1433:15" pos:end="1433:18"><literal type="number" pos:start="1433:15" pos:end="1433:18">1024</literal></expr>]</index></name></decl>, <decl pos:start="1433:22" pos:end="1433:35"><type ref="prev" pos:start="1433:5" pos:end="1433:8"/><name pos:start="1433:22" pos:end="1433:35"><name pos:start="1433:22" pos:end="1433:29">filename</name><index pos:start="1433:30" pos:end="1433:35">[<expr pos:start="1433:31" pos:end="1433:34"><literal type="number" pos:start="1433:31" pos:end="1433:34">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="1434:5" pos:end="1434:23"><decl pos:start="1434:5" pos:end="1434:18"><type pos:start="1434:5" pos:end="1434:8"><name pos:start="1434:5" pos:end="1434:8">char</name></type> <name pos:start="1434:10" pos:end="1434:18"><name pos:start="1434:10" pos:end="1434:12">url</name><index pos:start="1434:13" pos:end="1434:18">[<expr pos:start="1434:14" pos:end="1434:17"><literal type="number" pos:start="1434:14" pos:end="1434:17">1024</literal></expr>]</index></name></decl>, <decl pos:start="1434:21" pos:end="1434:22"><type ref="prev" pos:start="1434:5" pos:end="1434:8"><modifier pos:start="1434:21" pos:end="1434:21">*</modifier></type><name pos:start="1434:22" pos:end="1434:22">q</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1435:5" pos:end="1435:22"><decl pos:start="1435:5" pos:end="1435:21"><type pos:start="1435:5" pos:end="1435:8"><name pos:start="1435:5" pos:end="1435:8">char</name></type> <name pos:start="1435:10" pos:end="1435:21"><name pos:start="1435:10" pos:end="1435:17">protocol</name><index pos:start="1435:18" pos:end="1435:21">[<expr pos:start="1435:19" pos:end="1435:20"><literal type="number" pos:start="1435:19" pos:end="1435:20">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="1436:5" pos:end="1436:19"><decl pos:start="1436:5" pos:end="1436:18"><type pos:start="1436:5" pos:end="1436:8"><name pos:start="1436:5" pos:end="1436:8">char</name></type> <name pos:start="1436:10" pos:end="1436:18"><name pos:start="1436:10" pos:end="1436:12">msg</name><index pos:start="1436:13" pos:end="1436:18">[<expr pos:start="1436:14" pos:end="1436:17"><literal type="number" pos:start="1436:14" pos:end="1436:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="1437:5" pos:end="1437:29"><decl pos:start="1437:5" pos:end="1437:28"><type pos:start="1437:5" pos:end="1437:10"><name pos:start="1437:5" pos:end="1437:8">char</name> <modifier pos:start="1437:10" pos:end="1437:10">*</modifier></type><name pos:start="1437:11" pos:end="1437:21">encoded_msg</name> <init pos:start="1437:23" pos:end="1437:28">= <expr pos:start="1437:25" pos:end="1437:28"><name pos:start="1437:25" pos:end="1437:28">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1438:5" pos:end="1438:26"><decl pos:start="1438:5" pos:end="1438:25"><type pos:start="1438:5" pos:end="1438:16"><specifier pos:start="1438:5" pos:end="1438:9">const</specifier> <name pos:start="1438:11" pos:end="1438:14">char</name> <modifier pos:start="1438:16" pos:end="1438:16">*</modifier></type><name pos:start="1438:17" pos:end="1438:25">mime_type</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1439:5" pos:end="1439:27"><decl pos:start="1439:5" pos:end="1439:26"><type pos:start="1439:5" pos:end="1439:20"><name pos:start="1439:5" pos:end="1439:18">FFServerStream</name> <modifier pos:start="1439:20" pos:end="1439:20">*</modifier></type><name pos:start="1439:21" pos:end="1439:26">stream</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1440:5" pos:end="1440:10"><decl pos:start="1440:5" pos:end="1440:9"><type pos:start="1440:5" pos:end="1440:7"><name pos:start="1440:5" pos:end="1440:7">int</name></type> <name pos:start="1440:9" pos:end="1440:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1441:5" pos:end="1441:21"><decl pos:start="1441:5" pos:end="1441:20"><type pos:start="1441:5" pos:end="1441:8"><name pos:start="1441:5" pos:end="1441:8">char</name></type> <name pos:start="1441:10" pos:end="1441:20"><name pos:start="1441:10" pos:end="1441:16">ratebuf</name><index pos:start="1441:17" pos:end="1441:20">[<expr pos:start="1441:18" pos:end="1441:19"><literal type="number" pos:start="1441:18" pos:end="1441:19">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="1442:5" pos:end="1442:30"><decl pos:start="1442:5" pos:end="1442:29"><type pos:start="1442:5" pos:end="1442:16"><specifier pos:start="1442:5" pos:end="1442:9">const</specifier> <name pos:start="1442:11" pos:end="1442:14">char</name> <modifier pos:start="1442:16" pos:end="1442:16">*</modifier></type><name pos:start="1442:17" pos:end="1442:25">useragent</name> <init pos:start="1442:27" pos:end="1442:29">= <expr pos:start="1442:29" pos:end="1442:29"><literal type="number" pos:start="1442:29" pos:end="1442:29">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="1444:5" pos:end="1444:18"><expr pos:start="1444:5" pos:end="1444:17"><name pos:start="1444:5" pos:end="1444:5">p</name> <operator pos:start="1444:7" pos:end="1444:7">=</operator> <name pos:start="1444:9" pos:end="1444:17"><name pos:start="1444:9" pos:end="1444:9">c</name><operator pos:start="1444:10" pos:end="1444:11">-&gt;</operator><name pos:start="1444:12" pos:end="1444:17">buffer</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="1445:5" pos:end="1445:35"><expr pos:start="1445:5" pos:end="1445:34"><call pos:start="1445:5" pos:end="1445:34"><name pos:start="1445:5" pos:end="1445:12">get_word</name><argument_list pos:start="1445:13" pos:end="1445:34">(<argument pos:start="1445:14" pos:end="1445:16"><expr pos:start="1445:14" pos:end="1445:16"><name pos:start="1445:14" pos:end="1445:16">cmd</name></expr></argument>, <argument pos:start="1445:19" pos:end="1445:29"><expr pos:start="1445:19" pos:end="1445:29"><sizeof pos:start="1445:19" pos:end="1445:29">sizeof<argument_list pos:start="1445:25" pos:end="1445:29">(<argument pos:start="1445:26" pos:end="1445:28"><expr pos:start="1445:26" pos:end="1445:28"><name pos:start="1445:26" pos:end="1445:28">cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1445:32" pos:end="1445:33"><expr pos:start="1445:32" pos:end="1445:33"><operator pos:start="1445:32" pos:end="1445:32">&amp;</operator><name pos:start="1445:33" pos:end="1445:33">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1446:5" pos:end="1446:50"><expr pos:start="1446:5" pos:end="1446:49"><call pos:start="1446:5" pos:end="1446:49"><name pos:start="1446:5" pos:end="1446:14">av_strlcpy</name><argument_list pos:start="1446:15" pos:end="1446:49">(<argument pos:start="1446:16" pos:end="1446:24"><expr pos:start="1446:16" pos:end="1446:24"><name pos:start="1446:16" pos:end="1446:24"><name pos:start="1446:16" pos:end="1446:16">c</name><operator pos:start="1446:17" pos:end="1446:18">-&gt;</operator><name pos:start="1446:19" pos:end="1446:24">method</name></name></expr></argument>, <argument pos:start="1446:27" pos:end="1446:29"><expr pos:start="1446:27" pos:end="1446:29"><name pos:start="1446:27" pos:end="1446:29">cmd</name></expr></argument>, <argument pos:start="1446:32" pos:end="1446:48"><expr pos:start="1446:32" pos:end="1446:48"><sizeof pos:start="1446:32" pos:end="1446:48">sizeof<argument_list pos:start="1446:38" pos:end="1446:48">(<argument pos:start="1446:39" pos:end="1446:47"><expr pos:start="1446:39" pos:end="1446:47"><name pos:start="1446:39" pos:end="1446:47"><name pos:start="1446:39" pos:end="1446:39">c</name><operator pos:start="1446:40" pos:end="1446:41">-&gt;</operator><name pos:start="1446:42" pos:end="1446:47">method</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1448:5" pos:end="1453:18"><if pos:start="1448:5" pos:end="1449:20">if <condition pos:start="1448:8" pos:end="1448:28">(<expr pos:start="1448:9" pos:end="1448:27"><operator pos:start="1448:9" pos:end="1448:9">!</operator><call pos:start="1448:10" pos:end="1448:27"><name pos:start="1448:10" pos:end="1448:15">strcmp</name><argument_list pos:start="1448:16" pos:end="1448:27">(<argument pos:start="1448:17" pos:end="1448:19"><expr pos:start="1448:17" pos:end="1448:19"><name pos:start="1448:17" pos:end="1448:19">cmd</name></expr></argument>, <argument pos:start="1448:22" pos:end="1448:26"><expr pos:start="1448:22" pos:end="1448:26"><literal type="string" pos:start="1448:22" pos:end="1448:26">"GET"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1449:9" pos:end="1449:20"><block_content pos:start="1449:9" pos:end="1449:20">
        <expr_stmt pos:start="1449:9" pos:end="1449:20"><expr pos:start="1449:9" pos:end="1449:19"><name pos:start="1449:9" pos:end="1449:15"><name pos:start="1449:9" pos:end="1449:9">c</name><operator pos:start="1449:10" pos:end="1449:11">-&gt;</operator><name pos:start="1449:12" pos:end="1449:15">post</name></name> <operator pos:start="1449:17" pos:end="1449:17">=</operator> <literal type="number" pos:start="1449:19" pos:end="1449:19">0</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif" pos:start="1450:5" pos:end="1451:20">else if <condition pos:start="1450:13" pos:end="1450:34">(<expr pos:start="1450:14" pos:end="1450:33"><operator pos:start="1450:14" pos:end="1450:14">!</operator><call pos:start="1450:15" pos:end="1450:33"><name pos:start="1450:15" pos:end="1450:20">strcmp</name><argument_list pos:start="1450:21" pos:end="1450:33">(<argument pos:start="1450:22" pos:end="1450:24"><expr pos:start="1450:22" pos:end="1450:24"><name pos:start="1450:22" pos:end="1450:24">cmd</name></expr></argument>, <argument pos:start="1450:27" pos:end="1450:32"><expr pos:start="1450:27" pos:end="1450:32"><literal type="string" pos:start="1450:27" pos:end="1450:32">"POST"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1451:9" pos:end="1451:20"><block_content pos:start="1451:9" pos:end="1451:20">
        <expr_stmt pos:start="1451:9" pos:end="1451:20"><expr pos:start="1451:9" pos:end="1451:19"><name pos:start="1451:9" pos:end="1451:15"><name pos:start="1451:9" pos:end="1451:9">c</name><operator pos:start="1451:10" pos:end="1451:11">-&gt;</operator><name pos:start="1451:12" pos:end="1451:15">post</name></name> <operator pos:start="1451:17" pos:end="1451:17">=</operator> <literal type="number" pos:start="1451:19" pos:end="1451:19">1</literal></expr>;</expr_stmt></block_content></block></if>
    <else pos:start="1452:5" pos:end="1453:18">else<block type="pseudo" pos:start="1453:9" pos:end="1453:18"><block_content pos:start="1453:9" pos:end="1453:18">
        <return pos:start="1453:9" pos:end="1453:18">return <expr pos:start="1453:16" pos:end="1453:17"><operator pos:start="1453:16" pos:end="1453:16">-</operator><literal type="number" pos:start="1453:17" pos:end="1453:17">1</literal></expr>;</return></block_content></block></else></if_stmt>

    <expr_stmt pos:start="1455:5" pos:end="1455:35"><expr pos:start="1455:5" pos:end="1455:34"><call pos:start="1455:5" pos:end="1455:34"><name pos:start="1455:5" pos:end="1455:12">get_word</name><argument_list pos:start="1455:13" pos:end="1455:34">(<argument pos:start="1455:14" pos:end="1455:16"><expr pos:start="1455:14" pos:end="1455:16"><name pos:start="1455:14" pos:end="1455:16">url</name></expr></argument>, <argument pos:start="1455:19" pos:end="1455:29"><expr pos:start="1455:19" pos:end="1455:29"><sizeof pos:start="1455:19" pos:end="1455:29">sizeof<argument_list pos:start="1455:25" pos:end="1455:29">(<argument pos:start="1455:26" pos:end="1455:28"><expr pos:start="1455:26" pos:end="1455:28"><name pos:start="1455:26" pos:end="1455:28">url</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1455:32" pos:end="1455:33"><expr pos:start="1455:32" pos:end="1455:33"><operator pos:start="1455:32" pos:end="1455:32">&amp;</operator><name pos:start="1455:33" pos:end="1455:33">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1456:5" pos:end="1456:44"><expr pos:start="1456:5" pos:end="1456:43"><call pos:start="1456:5" pos:end="1456:43"><name pos:start="1456:5" pos:end="1456:14">av_strlcpy</name><argument_list pos:start="1456:15" pos:end="1456:43">(<argument pos:start="1456:16" pos:end="1456:21"><expr pos:start="1456:16" pos:end="1456:21"><name pos:start="1456:16" pos:end="1456:21"><name pos:start="1456:16" pos:end="1456:16">c</name><operator pos:start="1456:17" pos:end="1456:18">-&gt;</operator><name pos:start="1456:19" pos:end="1456:21">url</name></name></expr></argument>, <argument pos:start="1456:24" pos:end="1456:26"><expr pos:start="1456:24" pos:end="1456:26"><name pos:start="1456:24" pos:end="1456:26">url</name></expr></argument>, <argument pos:start="1456:29" pos:end="1456:42"><expr pos:start="1456:29" pos:end="1456:42"><sizeof pos:start="1456:29" pos:end="1456:42">sizeof<argument_list pos:start="1456:35" pos:end="1456:42">(<argument pos:start="1456:36" pos:end="1456:41"><expr pos:start="1456:36" pos:end="1456:41"><name pos:start="1456:36" pos:end="1456:41"><name pos:start="1456:36" pos:end="1456:36">c</name><operator pos:start="1456:37" pos:end="1456:38">-&gt;</operator><name pos:start="1456:39" pos:end="1456:41">url</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1458:5" pos:end="1458:60"><expr pos:start="1458:5" pos:end="1458:59"><call pos:start="1458:5" pos:end="1458:59"><name pos:start="1458:5" pos:end="1458:12">get_word</name><argument_list pos:start="1458:13" pos:end="1458:59">(<argument pos:start="1458:14" pos:end="1458:21"><expr pos:start="1458:14" pos:end="1458:21"><name pos:start="1458:14" pos:end="1458:21">protocol</name></expr></argument>, <argument pos:start="1458:24" pos:end="1458:39"><expr pos:start="1458:24" pos:end="1458:39"><sizeof pos:start="1458:24" pos:end="1458:39">sizeof<argument_list pos:start="1458:30" pos:end="1458:39">(<argument pos:start="1458:31" pos:end="1458:38"><expr pos:start="1458:31" pos:end="1458:38"><name pos:start="1458:31" pos:end="1458:38">protocol</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1458:42" pos:end="1458:58"><expr pos:start="1458:42" pos:end="1458:58"><operator pos:start="1458:42" pos:end="1458:42">(</operator><specifier pos:start="1458:43" pos:end="1458:47">const</specifier> <name pos:start="1458:49" pos:end="1458:52">char</name> <operator pos:start="1458:54" pos:end="1458:54">*</operator><operator pos:start="1458:55" pos:end="1458:55">*</operator><operator pos:start="1458:56" pos:end="1458:56">)</operator><operator pos:start="1458:57" pos:end="1458:57">&amp;</operator><name pos:start="1458:58" pos:end="1458:58">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1459:5" pos:end="1460:18"><if pos:start="1459:5" pos:end="1460:18">if <condition pos:start="1459:8" pos:end="1459:69">(<expr pos:start="1459:9" pos:end="1459:68"><call pos:start="1459:9" pos:end="1459:36"><name pos:start="1459:9" pos:end="1459:14">strcmp</name><argument_list pos:start="1459:15" pos:end="1459:36">(<argument pos:start="1459:16" pos:end="1459:23"><expr pos:start="1459:16" pos:end="1459:23"><name pos:start="1459:16" pos:end="1459:23">protocol</name></expr></argument>, <argument pos:start="1459:26" pos:end="1459:35"><expr pos:start="1459:26" pos:end="1459:35"><literal type="string" pos:start="1459:26" pos:end="1459:35">"HTTP/1.0"</literal></expr></argument>)</argument_list></call> <operator pos:start="1459:38" pos:end="1459:39">&amp;&amp;</operator> <call pos:start="1459:41" pos:end="1459:68"><name pos:start="1459:41" pos:end="1459:46">strcmp</name><argument_list pos:start="1459:47" pos:end="1459:68">(<argument pos:start="1459:48" pos:end="1459:55"><expr pos:start="1459:48" pos:end="1459:55"><name pos:start="1459:48" pos:end="1459:55">protocol</name></expr></argument>, <argument pos:start="1459:58" pos:end="1459:67"><expr pos:start="1459:58" pos:end="1459:67"><literal type="string" pos:start="1459:58" pos:end="1459:67">"HTTP/1.1"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1460:9" pos:end="1460:18"><block_content pos:start="1460:9" pos:end="1460:18">
        <return pos:start="1460:9" pos:end="1460:18">return <expr pos:start="1460:16" pos:end="1460:17"><operator pos:start="1460:16" pos:end="1460:16">-</operator><literal type="number" pos:start="1460:17" pos:end="1460:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="1462:5" pos:end="1462:59"><expr pos:start="1462:5" pos:end="1462:58"><call pos:start="1462:5" pos:end="1462:58"><name pos:start="1462:5" pos:end="1462:14">av_strlcpy</name><argument_list pos:start="1462:15" pos:end="1462:58">(<argument pos:start="1462:16" pos:end="1462:26"><expr pos:start="1462:16" pos:end="1462:26"><name pos:start="1462:16" pos:end="1462:26"><name pos:start="1462:16" pos:end="1462:16">c</name><operator pos:start="1462:17" pos:end="1462:18">-&gt;</operator><name pos:start="1462:19" pos:end="1462:26">protocol</name></name></expr></argument>, <argument pos:start="1462:29" pos:end="1462:36"><expr pos:start="1462:29" pos:end="1462:36"><name pos:start="1462:29" pos:end="1462:36">protocol</name></expr></argument>, <argument pos:start="1462:39" pos:end="1462:57"><expr pos:start="1462:39" pos:end="1462:57"><sizeof pos:start="1462:39" pos:end="1462:57">sizeof<argument_list pos:start="1462:45" pos:end="1462:57">(<argument pos:start="1462:46" pos:end="1462:56"><expr pos:start="1462:46" pos:end="1462:56"><name pos:start="1462:46" pos:end="1462:56"><name pos:start="1462:46" pos:end="1462:46">c</name><operator pos:start="1462:47" pos:end="1462:48">-&gt;</operator><name pos:start="1462:49" pos:end="1462:56">protocol</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1464:5" pos:end="1466:61"><if pos:start="1464:5" pos:end="1466:61">if <condition pos:start="1464:8" pos:end="1464:21">(<expr pos:start="1464:9" pos:end="1464:20"><name pos:start="1464:9" pos:end="1464:20"><name pos:start="1464:9" pos:end="1464:14">config</name><operator pos:start="1464:15" pos:end="1464:15">.</operator><name pos:start="1464:16" pos:end="1464:20">debug</name></name></expr>)</condition><block type="pseudo" pos:start="1465:9" pos:end="1466:61"><block_content pos:start="1465:9" pos:end="1466:61">
        <expr_stmt pos:start="1465:9" pos:end="1466:61"><expr pos:start="1465:9" pos:end="1466:60"><call pos:start="1465:9" pos:end="1466:60"><name pos:start="1465:9" pos:end="1465:16">http_log</name><argument_list pos:start="1465:17" pos:end="1466:60">(<argument pos:start="1465:18" pos:end="1465:49"><expr pos:start="1465:18" pos:end="1465:49"><literal type="string" pos:start="1465:18" pos:end="1465:49">"%s - - New connection: %s %s\n"</literal></expr></argument>,
                 <argument pos:start="1466:18" pos:end="1466:49"><expr pos:start="1466:18" pos:end="1466:49"><call pos:start="1466:18" pos:end="1466:49"><name pos:start="1466:18" pos:end="1466:26">inet_ntoa</name><argument_list pos:start="1466:27" pos:end="1466:49">(<argument pos:start="1466:28" pos:end="1466:48"><expr pos:start="1466:28" pos:end="1466:48"><name pos:start="1466:28" pos:end="1466:48"><name pos:start="1466:28" pos:end="1466:28">c</name><operator pos:start="1466:29" pos:end="1466:30">-&gt;</operator><name pos:start="1466:31" pos:end="1466:39">from_addr</name><operator pos:start="1466:40" pos:end="1466:40">.</operator><name pos:start="1466:41" pos:end="1466:48">sin_addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1466:52" pos:end="1466:54"><expr pos:start="1466:52" pos:end="1466:54"><name pos:start="1466:52" pos:end="1466:54">cmd</name></expr></argument>, <argument pos:start="1466:57" pos:end="1466:59"><expr pos:start="1466:57" pos:end="1466:59"><name pos:start="1466:57" pos:end="1466:59">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="1468:5" pos:end="1468:71">/* find the filename and the optional info string in the request */</comment>
    <expr_stmt pos:start="1469:5" pos:end="1469:26"><expr pos:start="1469:5" pos:end="1469:25"><name pos:start="1469:5" pos:end="1469:6">p1</name> <operator pos:start="1469:8" pos:end="1469:8">=</operator> <call pos:start="1469:10" pos:end="1469:25"><name pos:start="1469:10" pos:end="1469:15">strchr</name><argument_list pos:start="1469:16" pos:end="1469:25">(<argument pos:start="1469:17" pos:end="1469:19"><expr pos:start="1469:17" pos:end="1469:19"><name pos:start="1469:17" pos:end="1469:19">url</name></expr></argument>, <argument pos:start="1469:22" pos:end="1469:24"><expr pos:start="1469:22" pos:end="1469:24"><literal type="char" pos:start="1469:22" pos:end="1469:24">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1470:5" pos:end="1474:23"><if pos:start="1470:5" pos:end="1473:5">if <condition pos:start="1470:8" pos:end="1470:11">(<expr pos:start="1470:9" pos:end="1470:10"><name pos:start="1470:9" pos:end="1470:10">p1</name></expr>)</condition> <block pos:start="1470:13" pos:end="1473:5">{<block_content pos:start="1471:9" pos:end="1472:19">
        <expr_stmt pos:start="1471:9" pos:end="1471:43"><expr pos:start="1471:9" pos:end="1471:42"><call pos:start="1471:9" pos:end="1471:42"><name pos:start="1471:9" pos:end="1471:18">av_strlcpy</name><argument_list pos:start="1471:19" pos:end="1471:42">(<argument pos:start="1471:20" pos:end="1471:23"><expr pos:start="1471:20" pos:end="1471:23"><name pos:start="1471:20" pos:end="1471:23">info</name></expr></argument>, <argument pos:start="1471:26" pos:end="1471:27"><expr pos:start="1471:26" pos:end="1471:27"><name pos:start="1471:26" pos:end="1471:27">p1</name></expr></argument>, <argument pos:start="1471:30" pos:end="1471:41"><expr pos:start="1471:30" pos:end="1471:41"><sizeof pos:start="1471:30" pos:end="1471:41">sizeof<argument_list pos:start="1471:36" pos:end="1471:41">(<argument pos:start="1471:37" pos:end="1471:40"><expr pos:start="1471:37" pos:end="1471:40"><name pos:start="1471:37" pos:end="1471:40">info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1472:9" pos:end="1472:19"><expr pos:start="1472:9" pos:end="1472:18"><operator pos:start="1472:9" pos:end="1472:9">*</operator><name pos:start="1472:10" pos:end="1472:11">p1</name> <operator pos:start="1472:13" pos:end="1472:13">=</operator> <literal type="char" pos:start="1472:15" pos:end="1472:18">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="1473:7" pos:end="1474:23">else<block type="pseudo" pos:start="1474:9" pos:end="1474:23"><block_content pos:start="1474:9" pos:end="1474:23">
        <expr_stmt pos:start="1474:9" pos:end="1474:23"><expr pos:start="1474:9" pos:end="1474:22"><name pos:start="1474:9" pos:end="1474:15"><name pos:start="1474:9" pos:end="1474:12">info</name><index pos:start="1474:13" pos:end="1474:15">[<expr pos:start="1474:14" pos:end="1474:14"><literal type="number" pos:start="1474:14" pos:end="1474:14">0</literal></expr>]</index></name> <operator pos:start="1474:17" pos:end="1474:17">=</operator> <literal type="char" pos:start="1474:19" pos:end="1474:22">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="1476:5" pos:end="1476:76"><expr pos:start="1476:5" pos:end="1476:75"><call pos:start="1476:5" pos:end="1476:75"><name pos:start="1476:5" pos:end="1476:14">av_strlcpy</name><argument_list pos:start="1476:15" pos:end="1476:75">(<argument pos:start="1476:16" pos:end="1476:23"><expr pos:start="1476:16" pos:end="1476:23"><name pos:start="1476:16" pos:end="1476:23">filename</name></expr></argument>, <argument pos:start="1476:26" pos:end="1476:54"><expr pos:start="1476:26" pos:end="1476:54"><name pos:start="1476:26" pos:end="1476:28">url</name> <operator pos:start="1476:30" pos:end="1476:30">+</operator> <operator pos:start="1476:32" pos:end="1476:32">(</operator><ternary pos:start="1476:33" pos:end="1476:53"><condition pos:start="1476:33" pos:end="1476:47"><expr pos:start="1476:33" pos:end="1476:45"><operator pos:start="1476:33" pos:end="1476:33">(</operator><operator pos:start="1476:34" pos:end="1476:34">*</operator><name pos:start="1476:35" pos:end="1476:37">url</name> <operator pos:start="1476:39" pos:end="1476:40">==</operator> <literal type="char" pos:start="1476:42" pos:end="1476:44">'/'</literal><operator pos:start="1476:45" pos:end="1476:45">)</operator></expr> ?</condition><then pos:start="1476:49" pos:end="1476:49"> <expr pos:start="1476:49" pos:end="1476:49"><literal type="number" pos:start="1476:49" pos:end="1476:49">1</literal></expr> </then><else pos:start="1476:51" pos:end="1476:53">: <expr pos:start="1476:53" pos:end="1476:53"><literal type="number" pos:start="1476:53" pos:end="1476:53">0</literal></expr></else></ternary><operator pos:start="1476:54" pos:end="1476:54">)</operator></expr></argument>, <argument pos:start="1476:57" pos:end="1476:74"><expr pos:start="1476:57" pos:end="1476:74"><sizeof pos:start="1476:57" pos:end="1476:72">sizeof<argument_list pos:start="1476:63" pos:end="1476:72">(<argument pos:start="1476:64" pos:end="1476:71"><expr pos:start="1476:64" pos:end="1476:71"><name pos:start="1476:64" pos:end="1476:71">filename</name></expr></argument>)</argument_list></sizeof><operator pos:start="1476:73" pos:end="1476:73">-</operator><literal type="number" pos:start="1476:74" pos:end="1476:74">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="1478:5" pos:end="1490:5">for <control pos:start="1478:9" pos:end="1478:57">(<init pos:start="1478:10" pos:end="1478:23"><expr pos:start="1478:10" pos:end="1478:22"><name pos:start="1478:10" pos:end="1478:10">p</name> <operator pos:start="1478:12" pos:end="1478:12">=</operator> <name pos:start="1478:14" pos:end="1478:22"><name pos:start="1478:14" pos:end="1478:14">c</name><operator pos:start="1478:15" pos:end="1478:16">-&gt;</operator><name pos:start="1478:17" pos:end="1478:22">buffer</name></name></expr>;</init> <condition pos:start="1478:25" pos:end="1478:55"><expr pos:start="1478:25" pos:end="1478:54"><operator pos:start="1478:25" pos:end="1478:25">*</operator><name pos:start="1478:26" pos:end="1478:26">p</name> <operator pos:start="1478:28" pos:end="1478:29">&amp;&amp;</operator> <operator pos:start="1478:31" pos:end="1478:31">*</operator><name pos:start="1478:32" pos:end="1478:32">p</name> <operator pos:start="1478:34" pos:end="1478:35">!=</operator> <literal type="char" pos:start="1478:37" pos:end="1478:40">'\r'</literal> <operator pos:start="1478:42" pos:end="1478:43">&amp;&amp;</operator> <operator pos:start="1478:45" pos:end="1478:45">*</operator><name pos:start="1478:46" pos:end="1478:46">p</name> <operator pos:start="1478:48" pos:end="1478:49">!=</operator> <literal type="char" pos:start="1478:51" pos:end="1478:54">'\n'</literal></expr>;</condition> <incr/>)</control> <block pos:start="1478:59" pos:end="1490:5">{<block_content pos:start="1479:9" pos:end="1489:12">
        <if_stmt pos:start="1479:9" pos:end="1484:9"><if pos:start="1479:9" pos:end="1484:9">if <condition pos:start="1479:12" pos:end="1479:54">(<expr pos:start="1479:13" pos:end="1479:53"><call pos:start="1479:13" pos:end="1479:48"><name pos:start="1479:13" pos:end="1479:26">av_strncasecmp</name><argument_list pos:start="1479:27" pos:end="1479:48">(<argument pos:start="1479:28" pos:end="1479:28"><expr pos:start="1479:28" pos:end="1479:28"><name pos:start="1479:28" pos:end="1479:28">p</name></expr></argument>, <argument pos:start="1479:31" pos:end="1479:43"><expr pos:start="1479:31" pos:end="1479:43"><literal type="string" pos:start="1479:31" pos:end="1479:43">"User-Agent:"</literal></expr></argument>, <argument pos:start="1479:46" pos:end="1479:47"><expr pos:start="1479:46" pos:end="1479:47"><literal type="number" pos:start="1479:46" pos:end="1479:47">11</literal></expr></argument>)</argument_list></call> <operator pos:start="1479:50" pos:end="1479:51">==</operator> <literal type="number" pos:start="1479:53" pos:end="1479:53">0</literal></expr>)</condition> <block pos:start="1479:56" pos:end="1484:9">{<block_content pos:start="1480:13" pos:end="1483:18">
            <expr_stmt pos:start="1480:13" pos:end="1480:31"><expr pos:start="1480:13" pos:end="1480:30"><name pos:start="1480:13" pos:end="1480:21">useragent</name> <operator pos:start="1480:23" pos:end="1480:23">=</operator> <name pos:start="1480:25" pos:end="1480:25">p</name> <operator pos:start="1480:27" pos:end="1480:27">+</operator> <literal type="number" pos:start="1480:29" pos:end="1480:30">11</literal></expr>;</expr_stmt>
            <if_stmt pos:start="1481:13" pos:end="1482:28"><if pos:start="1481:13" pos:end="1482:28">if <condition pos:start="1481:16" pos:end="1481:75">(<expr pos:start="1481:17" pos:end="1481:74"><operator pos:start="1481:17" pos:end="1481:17">*</operator><name pos:start="1481:18" pos:end="1481:26">useragent</name> <operator pos:start="1481:28" pos:end="1481:29">&amp;&amp;</operator> <operator pos:start="1481:31" pos:end="1481:31">*</operator><name pos:start="1481:32" pos:end="1481:40">useragent</name> <operator pos:start="1481:42" pos:end="1481:43">!=</operator> <literal type="char" pos:start="1481:45" pos:end="1481:48">'\n'</literal> <operator pos:start="1481:50" pos:end="1481:51">&amp;&amp;</operator> <call pos:start="1481:53" pos:end="1481:74"><name pos:start="1481:53" pos:end="1481:62">av_isspace</name><argument_list pos:start="1481:63" pos:end="1481:74">(<argument pos:start="1481:64" pos:end="1481:73"><expr pos:start="1481:64" pos:end="1481:73"><operator pos:start="1481:64" pos:end="1481:64">*</operator><name pos:start="1481:65" pos:end="1481:73">useragent</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1482:17" pos:end="1482:28"><block_content pos:start="1482:17" pos:end="1482:28">
                <expr_stmt pos:start="1482:17" pos:end="1482:28"><expr pos:start="1482:17" pos:end="1482:27"><name pos:start="1482:17" pos:end="1482:25">useragent</name><operator pos:start="1482:26" pos:end="1482:27">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <break pos:start="1483:13" pos:end="1483:18">break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="1485:9" pos:end="1485:28"><expr pos:start="1485:9" pos:end="1485:27"><name pos:start="1485:9" pos:end="1485:9">p</name> <operator pos:start="1485:11" pos:end="1485:11">=</operator> <call pos:start="1485:13" pos:end="1485:27"><name pos:start="1485:13" pos:end="1485:18">strchr</name><argument_list pos:start="1485:19" pos:end="1485:27">(<argument pos:start="1485:20" pos:end="1485:20"><expr pos:start="1485:20" pos:end="1485:20"><name pos:start="1485:20" pos:end="1485:20">p</name></expr></argument>, <argument pos:start="1485:23" pos:end="1485:26"><expr pos:start="1485:23" pos:end="1485:26"><literal type="char" pos:start="1485:23" pos:end="1485:26">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1486:9" pos:end="1487:18"><if pos:start="1486:9" pos:end="1487:18">if <condition pos:start="1486:12" pos:end="1486:15">(<expr pos:start="1486:13" pos:end="1486:14"><operator pos:start="1486:13" pos:end="1486:13">!</operator><name pos:start="1486:14" pos:end="1486:14">p</name></expr>)</condition><block type="pseudo" pos:start="1487:13" pos:end="1487:18"><block_content pos:start="1487:13" pos:end="1487:18">
            <break pos:start="1487:13" pos:end="1487:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1489:9" pos:end="1489:12"><expr pos:start="1489:9" pos:end="1489:11"><name pos:start="1489:9" pos:end="1489:9">p</name><operator pos:start="1489:10" pos:end="1489:11">++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt pos:start="1492:5" pos:end="1492:28"><expr pos:start="1492:5" pos:end="1492:27"><name pos:start="1492:5" pos:end="1492:14">redir_type</name> <operator pos:start="1492:16" pos:end="1492:16">=</operator> <name pos:start="1492:18" pos:end="1492:27">REDIR_NONE</name></expr>;</expr_stmt>
    <if_stmt pos:start="1493:5" pos:end="1509:5"><if pos:start="1493:5" pos:end="1496:5">if <condition pos:start="1493:8" pos:end="1493:38">(<expr pos:start="1493:9" pos:end="1493:37"><call pos:start="1493:9" pos:end="1493:37"><name pos:start="1493:9" pos:end="1493:20">av_match_ext</name><argument_list pos:start="1493:21" pos:end="1493:37">(<argument pos:start="1493:22" pos:end="1493:29"><expr pos:start="1493:22" pos:end="1493:29"><name pos:start="1493:22" pos:end="1493:29">filename</name></expr></argument>, <argument pos:start="1493:32" pos:end="1493:36"><expr pos:start="1493:32" pos:end="1493:36"><literal type="string" pos:start="1493:32" pos:end="1493:36">"asx"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1493:40" pos:end="1496:5">{<block_content pos:start="1494:9" pos:end="1495:43">
        <expr_stmt pos:start="1494:9" pos:end="1494:31"><expr pos:start="1494:9" pos:end="1494:30"><name pos:start="1494:9" pos:end="1494:18">redir_type</name> <operator pos:start="1494:20" pos:end="1494:20">=</operator> <name pos:start="1494:22" pos:end="1494:30">REDIR_ASX</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1495:9" pos:end="1495:43"><expr pos:start="1495:9" pos:end="1495:42"><name pos:start="1495:9" pos:end="1495:36"><name pos:start="1495:9" pos:end="1495:16">filename</name><index pos:start="1495:17" pos:end="1495:36">[<expr pos:start="1495:18" pos:end="1495:35"><call pos:start="1495:18" pos:end="1495:33"><name pos:start="1495:18" pos:end="1495:23">strlen</name><argument_list pos:start="1495:24" pos:end="1495:33">(<argument pos:start="1495:25" pos:end="1495:32"><expr pos:start="1495:25" pos:end="1495:32"><name pos:start="1495:25" pos:end="1495:32">filename</name></expr></argument>)</argument_list></call><operator pos:start="1495:34" pos:end="1495:34">-</operator><literal type="number" pos:start="1495:35" pos:end="1495:35">1</literal></expr>]</index></name> <operator pos:start="1495:38" pos:end="1495:38">=</operator> <literal type="char" pos:start="1495:40" pos:end="1495:42">'f'</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="1496:7" pos:end="1500:5">else if <condition pos:start="1496:15" pos:end="1497:65">(<expr pos:start="1496:16" pos:end="1497:64"><call pos:start="1496:16" pos:end="1496:44"><name pos:start="1496:16" pos:end="1496:27">av_match_ext</name><argument_list pos:start="1496:28" pos:end="1496:44">(<argument pos:start="1496:29" pos:end="1496:36"><expr pos:start="1496:29" pos:end="1496:36"><name pos:start="1496:29" pos:end="1496:36">filename</name></expr></argument>, <argument pos:start="1496:39" pos:end="1496:43"><expr pos:start="1496:39" pos:end="1496:43"><literal type="string" pos:start="1496:39" pos:end="1496:43">"asf"</literal></expr></argument>)</argument_list></call> <operator pos:start="1496:46" pos:end="1496:47">&amp;&amp;</operator>
        <operator pos:start="1497:9" pos:end="1497:9">(</operator><operator pos:start="1497:10" pos:end="1497:10">!</operator><name pos:start="1497:11" pos:end="1497:19">useragent</name> <operator pos:start="1497:21" pos:end="1497:22">||</operator> <call pos:start="1497:24" pos:end="1497:63"><name pos:start="1497:24" pos:end="1497:37">av_strncasecmp</name><argument_list pos:start="1497:38" pos:end="1497:63">(<argument pos:start="1497:39" pos:end="1497:47"><expr pos:start="1497:39" pos:end="1497:47"><name pos:start="1497:39" pos:end="1497:47">useragent</name></expr></argument>, <argument pos:start="1497:50" pos:end="1497:59"><expr pos:start="1497:50" pos:end="1497:59"><literal type="string" pos:start="1497:50" pos:end="1497:59">"NSPlayer"</literal></expr></argument>, <argument pos:start="1497:62" pos:end="1497:62"><expr pos:start="1497:62" pos:end="1497:62"><literal type="number" pos:start="1497:62" pos:end="1497:62">8</literal></expr></argument>)</argument_list></call><operator pos:start="1497:64" pos:end="1497:64">)</operator></expr>)</condition> <block pos:start="1497:67" pos:end="1500:5">{<block_content pos:start="1499:9" pos:end="1499:31">
        <comment type="block" pos:start="1498:9" pos:end="1498:72">/* if this isn't WMP or lookalike, return the redirector file */</comment>
        <expr_stmt pos:start="1499:9" pos:end="1499:31"><expr pos:start="1499:9" pos:end="1499:30"><name pos:start="1499:9" pos:end="1499:18">redir_type</name> <operator pos:start="1499:20" pos:end="1499:20">=</operator> <name pos:start="1499:22" pos:end="1499:30">REDIR_ASF</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="1500:7" pos:end="1503:5">else if <condition pos:start="1500:15" pos:end="1500:49">(<expr pos:start="1500:16" pos:end="1500:48"><call pos:start="1500:16" pos:end="1500:48"><name pos:start="1500:16" pos:end="1500:27">av_match_ext</name><argument_list pos:start="1500:28" pos:end="1500:48">(<argument pos:start="1500:29" pos:end="1500:36"><expr pos:start="1500:29" pos:end="1500:36"><name pos:start="1500:29" pos:end="1500:36">filename</name></expr></argument>, <argument pos:start="1500:39" pos:end="1500:47"><expr pos:start="1500:39" pos:end="1500:47"><literal type="string" pos:start="1500:39" pos:end="1500:47">"rpm,ram"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1500:51" pos:end="1503:5">{<block_content pos:start="1501:9" pos:end="1502:51">
        <expr_stmt pos:start="1501:9" pos:end="1501:31"><expr pos:start="1501:9" pos:end="1501:30"><name pos:start="1501:9" pos:end="1501:18">redir_type</name> <operator pos:start="1501:20" pos:end="1501:20">=</operator> <name pos:start="1501:22" pos:end="1501:30">REDIR_RAM</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1502:9" pos:end="1502:51"><expr pos:start="1502:9" pos:end="1502:50"><call pos:start="1502:9" pos:end="1502:50"><name pos:start="1502:9" pos:end="1502:14">strcpy</name><argument_list pos:start="1502:15" pos:end="1502:50">(<argument pos:start="1502:16" pos:end="1502:44"><expr pos:start="1502:16" pos:end="1502:44"><name pos:start="1502:16" pos:end="1502:23">filename</name> <operator pos:start="1502:25" pos:end="1502:25">+</operator> <call pos:start="1502:27" pos:end="1502:42"><name pos:start="1502:27" pos:end="1502:32">strlen</name><argument_list pos:start="1502:33" pos:end="1502:42">(<argument pos:start="1502:34" pos:end="1502:41"><expr pos:start="1502:34" pos:end="1502:41"><name pos:start="1502:34" pos:end="1502:41">filename</name></expr></argument>)</argument_list></call><operator pos:start="1502:43" pos:end="1502:43">-</operator><literal type="number" pos:start="1502:44" pos:end="1502:44">2</literal></expr></argument>, <argument pos:start="1502:47" pos:end="1502:49"><expr pos:start="1502:47" pos:end="1502:49"><literal type="string" pos:start="1502:47" pos:end="1502:49">"m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="1503:7" pos:end="1506:5">else if <condition pos:start="1503:15" pos:end="1503:46">(<expr pos:start="1503:16" pos:end="1503:45"><call pos:start="1503:16" pos:end="1503:45"><name pos:start="1503:16" pos:end="1503:27">av_match_ext</name><argument_list pos:start="1503:28" pos:end="1503:45">(<argument pos:start="1503:29" pos:end="1503:36"><expr pos:start="1503:29" pos:end="1503:36"><name pos:start="1503:29" pos:end="1503:36">filename</name></expr></argument>, <argument pos:start="1503:39" pos:end="1503:44"><expr pos:start="1503:39" pos:end="1503:44"><literal type="string" pos:start="1503:39" pos:end="1503:44">"rtsp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1503:48" pos:end="1506:5">{<block_content pos:start="1504:9" pos:end="1505:62">
        <expr_stmt pos:start="1504:9" pos:end="1504:32"><expr pos:start="1504:9" pos:end="1504:31"><name pos:start="1504:9" pos:end="1504:18">redir_type</name> <operator pos:start="1504:20" pos:end="1504:20">=</operator> <name pos:start="1504:22" pos:end="1504:31">REDIR_RTSP</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1505:9" pos:end="1505:62"><expr pos:start="1505:9" pos:end="1505:61"><call pos:start="1505:9" pos:end="1505:61"><name pos:start="1505:9" pos:end="1505:29">compute_real_filename</name><argument_list pos:start="1505:30" pos:end="1505:61">(<argument pos:start="1505:31" pos:end="1505:38"><expr pos:start="1505:31" pos:end="1505:38"><name pos:start="1505:31" pos:end="1505:38">filename</name></expr></argument>, <argument pos:start="1505:41" pos:end="1505:60"><expr pos:start="1505:41" pos:end="1505:60"><sizeof pos:start="1505:41" pos:end="1505:56">sizeof<argument_list pos:start="1505:47" pos:end="1505:56">(<argument pos:start="1505:48" pos:end="1505:55"><expr pos:start="1505:48" pos:end="1505:55"><name pos:start="1505:48" pos:end="1505:55">filename</name></expr></argument>)</argument_list></sizeof> <operator pos:start="1505:58" pos:end="1505:58">-</operator> <literal type="number" pos:start="1505:60" pos:end="1505:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="1506:7" pos:end="1509:5">else if <condition pos:start="1506:15" pos:end="1506:45">(<expr pos:start="1506:16" pos:end="1506:44"><call pos:start="1506:16" pos:end="1506:44"><name pos:start="1506:16" pos:end="1506:27">av_match_ext</name><argument_list pos:start="1506:28" pos:end="1506:44">(<argument pos:start="1506:29" pos:end="1506:36"><expr pos:start="1506:29" pos:end="1506:36"><name pos:start="1506:29" pos:end="1506:36">filename</name></expr></argument>, <argument pos:start="1506:39" pos:end="1506:43"><expr pos:start="1506:39" pos:end="1506:43"><literal type="string" pos:start="1506:39" pos:end="1506:43">"sdp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1506:47" pos:end="1509:5">{<block_content pos:start="1507:9" pos:end="1508:62">
        <expr_stmt pos:start="1507:9" pos:end="1507:31"><expr pos:start="1507:9" pos:end="1507:30"><name pos:start="1507:9" pos:end="1507:18">redir_type</name> <operator pos:start="1507:20" pos:end="1507:20">=</operator> <name pos:start="1507:22" pos:end="1507:30">REDIR_SDP</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1508:9" pos:end="1508:62"><expr pos:start="1508:9" pos:end="1508:61"><call pos:start="1508:9" pos:end="1508:61"><name pos:start="1508:9" pos:end="1508:29">compute_real_filename</name><argument_list pos:start="1508:30" pos:end="1508:61">(<argument pos:start="1508:31" pos:end="1508:38"><expr pos:start="1508:31" pos:end="1508:38"><name pos:start="1508:31" pos:end="1508:38">filename</name></expr></argument>, <argument pos:start="1508:41" pos:end="1508:60"><expr pos:start="1508:41" pos:end="1508:60"><sizeof pos:start="1508:41" pos:end="1508:56">sizeof<argument_list pos:start="1508:47" pos:end="1508:56">(<argument pos:start="1508:48" pos:end="1508:55"><expr pos:start="1508:48" pos:end="1508:55"><name pos:start="1508:48" pos:end="1508:55">filename</name></expr></argument>)</argument_list></sizeof> <operator pos:start="1508:58" pos:end="1508:58">-</operator> <literal type="number" pos:start="1508:60" pos:end="1508:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1511:5" pos:end="1511:42">/* "redirect" request to index.html */</comment>
    <if_stmt pos:start="1512:5" pos:end="1513:65"><if pos:start="1512:5" pos:end="1513:65">if <condition pos:start="1512:8" pos:end="1512:26">(<expr pos:start="1512:9" pos:end="1512:25"><operator pos:start="1512:9" pos:end="1512:9">!</operator><call pos:start="1512:10" pos:end="1512:25"><name pos:start="1512:10" pos:end="1512:15">strlen</name><argument_list pos:start="1512:16" pos:end="1512:25">(<argument pos:start="1512:17" pos:end="1512:24"><expr pos:start="1512:17" pos:end="1512:24"><name pos:start="1512:17" pos:end="1512:24">filename</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1513:9" pos:end="1513:65"><block_content pos:start="1513:9" pos:end="1513:65">
        <expr_stmt pos:start="1513:9" pos:end="1513:65"><expr pos:start="1513:9" pos:end="1513:64"><call pos:start="1513:9" pos:end="1513:64"><name pos:start="1513:9" pos:end="1513:18">av_strlcpy</name><argument_list pos:start="1513:19" pos:end="1513:64">(<argument pos:start="1513:20" pos:end="1513:27"><expr pos:start="1513:20" pos:end="1513:27"><name pos:start="1513:20" pos:end="1513:27">filename</name></expr></argument>, <argument pos:start="1513:30" pos:end="1513:41"><expr pos:start="1513:30" pos:end="1513:41"><literal type="string" pos:start="1513:30" pos:end="1513:41">"index.html"</literal></expr></argument>, <argument pos:start="1513:44" pos:end="1513:63"><expr pos:start="1513:44" pos:end="1513:63"><sizeof pos:start="1513:44" pos:end="1513:59">sizeof<argument_list pos:start="1513:50" pos:end="1513:59">(<argument pos:start="1513:51" pos:end="1513:58"><expr pos:start="1513:51" pos:end="1513:58"><name pos:start="1513:51" pos:end="1513:58">filename</name></expr></argument>)</argument_list></sizeof> <operator pos:start="1513:61" pos:end="1513:61">-</operator> <literal type="number" pos:start="1513:63" pos:end="1513:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="1515:5" pos:end="1515:33"><expr pos:start="1515:5" pos:end="1515:32"><name pos:start="1515:5" pos:end="1515:10">stream</name> <operator pos:start="1515:12" pos:end="1515:12">=</operator> <name pos:start="1515:14" pos:end="1515:32"><name pos:start="1515:14" pos:end="1515:19">config</name><operator pos:start="1515:20" pos:end="1515:20">.</operator><name pos:start="1515:21" pos:end="1515:32">first_stream</name></name></expr>;</expr_stmt>
    <while pos:start="1516:5" pos:end="1520:5">while <condition pos:start="1516:11" pos:end="1516:18">(<expr pos:start="1516:12" pos:end="1516:17"><name pos:start="1516:12" pos:end="1516:17">stream</name></expr>)</condition> <block pos:start="1516:20" pos:end="1520:5">{<block_content pos:start="1517:9" pos:end="1519:30">
        <if_stmt pos:start="1517:9" pos:end="1518:18"><if pos:start="1517:9" pos:end="1518:18">if <condition pos:start="1517:12" pos:end="1517:75">(<expr pos:start="1517:13" pos:end="1517:74"><operator pos:start="1517:13" pos:end="1517:13">!</operator><call pos:start="1517:14" pos:end="1517:47"><name pos:start="1517:14" pos:end="1517:19">strcmp</name><argument_list pos:start="1517:20" pos:end="1517:47">(<argument pos:start="1517:21" pos:end="1517:36"><expr pos:start="1517:21" pos:end="1517:36"><name pos:start="1517:21" pos:end="1517:36"><name pos:start="1517:21" pos:end="1517:26">stream</name><operator pos:start="1517:27" pos:end="1517:28">-&gt;</operator><name pos:start="1517:29" pos:end="1517:36">filename</name></name></expr></argument>, <argument pos:start="1517:39" pos:end="1517:46"><expr pos:start="1517:39" pos:end="1517:46"><name pos:start="1517:39" pos:end="1517:46">filename</name></expr></argument>)</argument_list></call> <operator pos:start="1517:49" pos:end="1517:50">&amp;&amp;</operator> <call pos:start="1517:52" pos:end="1517:74"><name pos:start="1517:52" pos:end="1517:63">validate_acl</name><argument_list pos:start="1517:64" pos:end="1517:74">(<argument pos:start="1517:65" pos:end="1517:70"><expr pos:start="1517:65" pos:end="1517:70"><name pos:start="1517:65" pos:end="1517:70">stream</name></expr></argument>, <argument pos:start="1517:73" pos:end="1517:73"><expr pos:start="1517:73" pos:end="1517:73"><name pos:start="1517:73" pos:end="1517:73">c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1518:13" pos:end="1518:18"><block_content pos:start="1518:13" pos:end="1518:18">
            <break pos:start="1518:13" pos:end="1518:18">break;</break></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1519:9" pos:end="1519:30"><expr pos:start="1519:9" pos:end="1519:29"><name pos:start="1519:9" pos:end="1519:14">stream</name> <operator pos:start="1519:16" pos:end="1519:16">=</operator> <name pos:start="1519:18" pos:end="1519:29"><name pos:start="1519:18" pos:end="1519:23">stream</name><operator pos:start="1519:24" pos:end="1519:25">-&gt;</operator><name pos:start="1519:26" pos:end="1519:29">next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt pos:start="1521:5" pos:end="1525:5"><if pos:start="1521:5" pos:end="1525:5">if <condition pos:start="1521:8" pos:end="1521:16">(<expr pos:start="1521:9" pos:end="1521:15"><operator pos:start="1521:9" pos:end="1521:9">!</operator><name pos:start="1521:10" pos:end="1521:15">stream</name></expr>)</condition> <block pos:start="1521:18" pos:end="1525:5">{<block_content pos:start="1522:9" pos:end="1524:24">
        <expr_stmt pos:start="1522:9" pos:end="1522:63"><expr pos:start="1522:9" pos:end="1522:62"><call pos:start="1522:9" pos:end="1522:62"><name pos:start="1522:9" pos:end="1522:16">snprintf</name><argument_list pos:start="1522:17" pos:end="1522:62">(<argument pos:start="1522:18" pos:end="1522:20"><expr pos:start="1522:18" pos:end="1522:20"><name pos:start="1522:18" pos:end="1522:20">msg</name></expr></argument>, <argument pos:start="1522:23" pos:end="1522:33"><expr pos:start="1522:23" pos:end="1522:33"><sizeof pos:start="1522:23" pos:end="1522:33">sizeof<argument_list pos:start="1522:29" pos:end="1522:33">(<argument pos:start="1522:30" pos:end="1522:32"><expr pos:start="1522:30" pos:end="1522:32"><name pos:start="1522:30" pos:end="1522:32">msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1522:36" pos:end="1522:56"><expr pos:start="1522:36" pos:end="1522:56"><literal type="string" pos:start="1522:36" pos:end="1522:56">"File '%s' not found"</literal></expr></argument>, <argument pos:start="1522:59" pos:end="1522:61"><expr pos:start="1522:59" pos:end="1522:61"><name pos:start="1522:59" pos:end="1522:61">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1523:9" pos:end="1523:47"><expr pos:start="1523:9" pos:end="1523:46"><call pos:start="1523:9" pos:end="1523:46"><name pos:start="1523:9" pos:end="1523:16">http_log</name><argument_list pos:start="1523:17" pos:end="1523:46">(<argument pos:start="1523:18" pos:end="1523:40"><expr pos:start="1523:18" pos:end="1523:40"><literal type="string" pos:start="1523:18" pos:end="1523:40">"File '%s' not found\n"</literal></expr></argument>, <argument pos:start="1523:43" pos:end="1523:45"><expr pos:start="1523:43" pos:end="1523:45"><name pos:start="1523:43" pos:end="1523:45">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="1524:9" pos:end="1524:24">goto <name pos:start="1524:14" pos:end="1524:23">send_error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1527:5" pos:end="1527:23"><expr pos:start="1527:5" pos:end="1527:22"><name pos:start="1527:5" pos:end="1527:13"><name pos:start="1527:5" pos:end="1527:5">c</name><operator pos:start="1527:6" pos:end="1527:7">-&gt;</operator><name pos:start="1527:8" pos:end="1527:13">stream</name></name> <operator pos:start="1527:15" pos:end="1527:15">=</operator> <name pos:start="1527:17" pos:end="1527:22">stream</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1528:5" pos:end="1528:75"><expr pos:start="1528:5" pos:end="1528:74"><call pos:start="1528:5" pos:end="1528:74"><name pos:start="1528:5" pos:end="1528:10">memcpy</name><argument_list pos:start="1528:11" pos:end="1528:74">(<argument pos:start="1528:12" pos:end="1528:26"><expr pos:start="1528:12" pos:end="1528:26"><name pos:start="1528:12" pos:end="1528:26"><name pos:start="1528:12" pos:end="1528:12">c</name><operator pos:start="1528:13" pos:end="1528:14">-&gt;</operator><name pos:start="1528:15" pos:end="1528:26">feed_streams</name></name></expr></argument>, <argument pos:start="1528:29" pos:end="1528:48"><expr pos:start="1528:29" pos:end="1528:48"><name pos:start="1528:29" pos:end="1528:48"><name pos:start="1528:29" pos:end="1528:34">stream</name><operator pos:start="1528:35" pos:end="1528:36">-&gt;</operator><name pos:start="1528:37" pos:end="1528:48">feed_streams</name></name></expr></argument>, <argument pos:start="1528:51" pos:end="1528:73"><expr pos:start="1528:51" pos:end="1528:73"><sizeof pos:start="1528:51" pos:end="1528:73">sizeof<argument_list pos:start="1528:57" pos:end="1528:73">(<argument pos:start="1528:58" pos:end="1528:72"><expr pos:start="1528:58" pos:end="1528:72"><name pos:start="1528:58" pos:end="1528:72"><name pos:start="1528:58" pos:end="1528:58">c</name><operator pos:start="1528:59" pos:end="1528:60">-&gt;</operator><name pos:start="1528:61" pos:end="1528:72">feed_streams</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1529:5" pos:end="1529:71"><expr pos:start="1529:5" pos:end="1529:70"><call pos:start="1529:5" pos:end="1529:70"><name pos:start="1529:5" pos:end="1529:10">memset</name><argument_list pos:start="1529:11" pos:end="1529:70">(<argument pos:start="1529:12" pos:end="1529:33"><expr pos:start="1529:12" pos:end="1529:33"><name pos:start="1529:12" pos:end="1529:33"><name pos:start="1529:12" pos:end="1529:12">c</name><operator pos:start="1529:13" pos:end="1529:14">-&gt;</operator><name pos:start="1529:15" pos:end="1529:33">switch_feed_streams</name></name></expr></argument>, <argument pos:start="1529:36" pos:end="1529:37"><expr pos:start="1529:36" pos:end="1529:37"><operator pos:start="1529:36" pos:end="1529:36">-</operator><literal type="number" pos:start="1529:37" pos:end="1529:37">1</literal></expr></argument>, <argument pos:start="1529:40" pos:end="1529:69"><expr pos:start="1529:40" pos:end="1529:69"><sizeof pos:start="1529:40" pos:end="1529:69">sizeof<argument_list pos:start="1529:46" pos:end="1529:69">(<argument pos:start="1529:47" pos:end="1529:68"><expr pos:start="1529:47" pos:end="1529:68"><name pos:start="1529:47" pos:end="1529:68"><name pos:start="1529:47" pos:end="1529:47">c</name><operator pos:start="1529:48" pos:end="1529:49">-&gt;</operator><name pos:start="1529:50" pos:end="1529:68">switch_feed_streams</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1531:5" pos:end="1550:5"><if pos:start="1531:5" pos:end="1550:5">if <condition pos:start="1531:8" pos:end="1531:52">(<expr pos:start="1531:9" pos:end="1531:51"><name pos:start="1531:9" pos:end="1531:27"><name pos:start="1531:9" pos:end="1531:14">stream</name><operator pos:start="1531:15" pos:end="1531:16">-&gt;</operator><name pos:start="1531:17" pos:end="1531:27">stream_type</name></name> <operator pos:start="1531:29" pos:end="1531:30">==</operator> <name pos:start="1531:32" pos:end="1531:51">STREAM_TYPE_REDIRECT</name></expr>)</condition> <block pos:start="1531:54" pos:end="1550:5">{<block_content pos:start="1532:9" pos:end="1549:17">
        <expr_stmt pos:start="1532:9" pos:end="1532:28"><expr pos:start="1532:9" pos:end="1532:27"><name pos:start="1532:9" pos:end="1532:21"><name pos:start="1532:9" pos:end="1532:9">c</name><operator pos:start="1532:10" pos:end="1532:11">-&gt;</operator><name pos:start="1532:12" pos:end="1532:21">http_error</name></name> <operator pos:start="1532:23" pos:end="1532:23">=</operator> <literal type="number" pos:start="1532:25" pos:end="1532:27">301</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1533:9" pos:end="1533:22"><expr pos:start="1533:9" pos:end="1533:21"><name pos:start="1533:9" pos:end="1533:9">q</name> <operator pos:start="1533:11" pos:end="1533:11">=</operator> <name pos:start="1533:13" pos:end="1533:21"><name pos:start="1533:13" pos:end="1533:13">c</name><operator pos:start="1533:14" pos:end="1533:15">-&gt;</operator><name pos:start="1533:16" pos:end="1533:21">buffer</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="1534:9" pos:end="1543:63"><expr pos:start="1534:9" pos:end="1543:62"><call pos:start="1534:9" pos:end="1543:62"><name pos:start="1534:9" pos:end="1534:16">snprintf</name><argument_list pos:start="1534:17" pos:end="1543:62">(<argument pos:start="1534:18" pos:end="1534:18"><expr pos:start="1534:18" pos:end="1534:18"><name pos:start="1534:18" pos:end="1534:18">q</name></expr></argument>, <argument pos:start="1534:21" pos:end="1534:34"><expr pos:start="1534:21" pos:end="1534:34"><name pos:start="1534:21" pos:end="1534:34"><name pos:start="1534:21" pos:end="1534:21">c</name><operator pos:start="1534:22" pos:end="1534:23">-&gt;</operator><name pos:start="1534:24" pos:end="1534:34">buffer_size</name></name></expr></argument>,
                      <argument pos:start="1535:23" pos:end="1542:42"><expr pos:start="1535:23" pos:end="1542:42"><literal type="string" pos:start="1535:23" pos:end="1535:46">"HTTP/1.0 301 Moved\r\n"</literal>
                      <literal type="string" pos:start="1536:23" pos:end="1536:40">"Location: %s\r\n"</literal>
                      <literal type="string" pos:start="1537:23" pos:end="1537:51">"Content-type: text/html\r\n"</literal>
                      <literal type="string" pos:start="1538:23" pos:end="1538:28">"\r\n"</literal>
                      <literal type="string" pos:start="1539:23" pos:end="1539:41">"&lt;!DOCTYPE html&gt;\n"</literal>
                      <literal type="string" pos:start="1540:23" pos:end="1540:73">"&lt;html&gt;&lt;head&gt;&lt;title&gt;Moved&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\r\n"</literal>
                      <literal type="string" pos:start="1541:23" pos:end="1541:72">"You should be &lt;a href=\"%s\"&gt;redirected&lt;/a&gt;.\r\n"</literal>
                      <literal type="string" pos:start="1542:23" pos:end="1542:42">"&lt;/body&gt;&lt;/html&gt;\r\n"</literal></expr></argument>,
                 <argument pos:start="1543:18" pos:end="1543:38"><expr pos:start="1543:18" pos:end="1543:38"><name pos:start="1543:18" pos:end="1543:38"><name pos:start="1543:18" pos:end="1543:23">stream</name><operator pos:start="1543:24" pos:end="1543:25">-&gt;</operator><name pos:start="1543:26" pos:end="1543:38">feed_filename</name></name></expr></argument>, <argument pos:start="1543:41" pos:end="1543:61"><expr pos:start="1543:41" pos:end="1543:61"><name pos:start="1543:41" pos:end="1543:61"><name pos:start="1543:41" pos:end="1543:46">stream</name><operator pos:start="1543:47" pos:end="1543:48">-&gt;</operator><name pos:start="1543:49" pos:end="1543:61">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1544:9" pos:end="1544:23"><expr pos:start="1544:9" pos:end="1544:22"><name pos:start="1544:9" pos:end="1544:9">q</name> <operator pos:start="1544:11" pos:end="1544:12">+=</operator> <call pos:start="1544:14" pos:end="1544:22"><name pos:start="1544:14" pos:end="1544:19">strlen</name><argument_list pos:start="1544:20" pos:end="1544:22">(<argument pos:start="1544:21" pos:end="1544:21"><expr pos:start="1544:21" pos:end="1544:21"><name pos:start="1544:21" pos:end="1544:21">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="1545:9" pos:end="1545:35">/* prepare output buffer */</comment>
        <expr_stmt pos:start="1546:9" pos:end="1546:34"><expr pos:start="1546:9" pos:end="1546:33"><name pos:start="1546:9" pos:end="1546:21"><name pos:start="1546:9" pos:end="1546:9">c</name><operator pos:start="1546:10" pos:end="1546:11">-&gt;</operator><name pos:start="1546:12" pos:end="1546:21">buffer_ptr</name></name> <operator pos:start="1546:23" pos:end="1546:23">=</operator> <name pos:start="1546:25" pos:end="1546:33"><name pos:start="1546:25" pos:end="1546:25">c</name><operator pos:start="1546:26" pos:end="1546:27">-&gt;</operator><name pos:start="1546:28" pos:end="1546:33">buffer</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="1547:9" pos:end="1547:26"><expr pos:start="1547:9" pos:end="1547:25"><name pos:start="1547:9" pos:end="1547:21"><name pos:start="1547:9" pos:end="1547:9">c</name><operator pos:start="1547:10" pos:end="1547:11">-&gt;</operator><name pos:start="1547:12" pos:end="1547:21">buffer_end</name></name> <operator pos:start="1547:23" pos:end="1547:23">=</operator> <name pos:start="1547:25" pos:end="1547:25">q</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1548:9" pos:end="1548:41"><expr pos:start="1548:9" pos:end="1548:40"><name pos:start="1548:9" pos:end="1548:16"><name pos:start="1548:9" pos:end="1548:9">c</name><operator pos:start="1548:10" pos:end="1548:11">-&gt;</operator><name pos:start="1548:12" pos:end="1548:16">state</name></name> <operator pos:start="1548:18" pos:end="1548:18">=</operator> <name pos:start="1548:20" pos:end="1548:40">HTTPSTATE_SEND_HEADER</name></expr>;</expr_stmt>
        <return pos:start="1549:9" pos:end="1549:17">return <expr pos:start="1549:16" pos:end="1549:16"><literal type="number" pos:start="1549:16" pos:end="1549:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1552:5" pos:end="1552:50">/* If this is WMP, get the rate information */</comment>
    <if_stmt pos:start="1553:5" pos:end="1560:5"><if pos:start="1553:5" pos:end="1560:5">if <condition pos:start="1553:8" pos:end="1553:59">(<expr pos:start="1553:9" pos:end="1553:58"><call pos:start="1553:9" pos:end="1553:58"><name pos:start="1553:9" pos:end="1553:21">extract_rates</name><argument_list pos:start="1553:22" pos:end="1553:58">(<argument pos:start="1553:23" pos:end="1553:29"><expr pos:start="1553:23" pos:end="1553:29"><name pos:start="1553:23" pos:end="1553:29">ratebuf</name></expr></argument>, <argument pos:start="1553:32" pos:end="1553:46"><expr pos:start="1553:32" pos:end="1553:46"><sizeof pos:start="1553:32" pos:end="1553:46">sizeof<argument_list pos:start="1553:38" pos:end="1553:46">(<argument pos:start="1553:39" pos:end="1553:45"><expr pos:start="1553:39" pos:end="1553:45"><name pos:start="1553:39" pos:end="1553:45">ratebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1553:49" pos:end="1553:57"><expr pos:start="1553:49" pos:end="1553:57"><name pos:start="1553:49" pos:end="1553:57"><name pos:start="1553:49" pos:end="1553:49">c</name><operator pos:start="1553:50" pos:end="1553:51">-&gt;</operator><name pos:start="1553:52" pos:end="1553:57">buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1553:61" pos:end="1560:5">{<block_content pos:start="1554:9" pos:end="1559:9">
        <if_stmt pos:start="1554:9" pos:end="1559:9"><if pos:start="1554:9" pos:end="1559:9">if <condition pos:start="1554:12" pos:end="1554:46">(<expr pos:start="1554:13" pos:end="1554:45"><call pos:start="1554:13" pos:end="1554:45"><name pos:start="1554:13" pos:end="1554:33">modify_current_stream</name><argument_list pos:start="1554:34" pos:end="1554:45">(<argument pos:start="1554:35" pos:end="1554:35"><expr pos:start="1554:35" pos:end="1554:35"><name pos:start="1554:35" pos:end="1554:35">c</name></expr></argument>, <argument pos:start="1554:38" pos:end="1554:44"><expr pos:start="1554:38" pos:end="1554:44"><name pos:start="1554:38" pos:end="1554:44">ratebuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1554:48" pos:end="1559:9">{<block_content pos:start="1555:13" pos:end="1558:13">
            <for pos:start="1555:13" pos:end="1558:13">for <control pos:start="1555:17" pos:end="1555:65">(<init pos:start="1555:18" pos:end="1555:23"><expr pos:start="1555:18" pos:end="1555:22"><name pos:start="1555:18" pos:end="1555:18">i</name> <operator pos:start="1555:20" pos:end="1555:20">=</operator> <literal type="number" pos:start="1555:22" pos:end="1555:22">0</literal></expr>;</init> <condition pos:start="1555:25" pos:end="1555:60"><expr pos:start="1555:25" pos:end="1555:59"><name pos:start="1555:25" pos:end="1555:25">i</name> <operator pos:start="1555:27" pos:end="1555:27">&lt;</operator> <call pos:start="1555:29" pos:end="1555:59"><name pos:start="1555:29" pos:end="1555:42">FF_ARRAY_ELEMS</name><argument_list pos:start="1555:43" pos:end="1555:59">(<argument pos:start="1555:44" pos:end="1555:58"><expr pos:start="1555:44" pos:end="1555:58"><name pos:start="1555:44" pos:end="1555:58"><name pos:start="1555:44" pos:end="1555:44">c</name><operator pos:start="1555:45" pos:end="1555:46">-&gt;</operator><name pos:start="1555:47" pos:end="1555:58">feed_streams</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="1555:62" pos:end="1555:64"><expr pos:start="1555:62" pos:end="1555:64"><name pos:start="1555:62" pos:end="1555:62">i</name><operator pos:start="1555:63" pos:end="1555:64">++</operator></expr></incr>)</control> <block pos:start="1555:67" pos:end="1558:13">{<block_content pos:start="1556:17" pos:end="1557:51">
                <if_stmt pos:start="1556:17" pos:end="1557:51"><if pos:start="1556:17" pos:end="1557:51">if <condition pos:start="1556:20" pos:end="1556:51">(<expr pos:start="1556:21" pos:end="1556:50"><name pos:start="1556:21" pos:end="1556:45"><name pos:start="1556:21" pos:end="1556:21">c</name><operator pos:start="1556:22" pos:end="1556:23">-&gt;</operator><name pos:start="1556:24" pos:end="1556:42">switch_feed_streams</name><index pos:start="1556:43" pos:end="1556:45">[<expr pos:start="1556:44" pos:end="1556:44"><name pos:start="1556:44" pos:end="1556:44">i</name></expr>]</index></name> <operator pos:start="1556:47" pos:end="1556:48">&gt;=</operator> <literal type="number" pos:start="1556:50" pos:end="1556:50">0</literal></expr>)</condition><block type="pseudo" pos:start="1557:21" pos:end="1557:51"><block_content pos:start="1557:21" pos:end="1557:51">
                    <expr_stmt pos:start="1557:21" pos:end="1557:51"><expr pos:start="1557:21" pos:end="1557:50"><name pos:start="1557:21" pos:end="1557:45"><name pos:start="1557:21" pos:end="1557:21">c</name><operator pos:start="1557:22" pos:end="1557:23">-&gt;</operator><name pos:start="1557:24" pos:end="1557:42">switch_feed_streams</name><index pos:start="1557:43" pos:end="1557:45">[<expr pos:start="1557:44" pos:end="1557:44"><name pos:start="1557:44" pos:end="1557:44">i</name></expr>]</index></name> <operator pos:start="1557:47" pos:end="1557:47">=</operator> <operator pos:start="1557:49" pos:end="1557:49">-</operator><literal type="number" pos:start="1557:50" pos:end="1557:50">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="1562:5" pos:end="1563:47"><if pos:start="1562:5" pos:end="1563:47">if <condition pos:start="1562:8" pos:end="1562:64">(<expr pos:start="1562:9" pos:end="1562:63"><name pos:start="1562:9" pos:end="1562:15"><name pos:start="1562:9" pos:end="1562:9">c</name><operator pos:start="1562:10" pos:end="1562:11">-&gt;</operator><name pos:start="1562:12" pos:end="1562:15">post</name></name> <operator pos:start="1562:17" pos:end="1562:18">==</operator> <literal type="number" pos:start="1562:20" pos:end="1562:20">0</literal> <operator pos:start="1562:22" pos:end="1562:23">&amp;&amp;</operator> <name pos:start="1562:25" pos:end="1562:43"><name pos:start="1562:25" pos:end="1562:30">stream</name><operator pos:start="1562:31" pos:end="1562:32">-&gt;</operator><name pos:start="1562:33" pos:end="1562:43">stream_type</name></name> <operator pos:start="1562:45" pos:end="1562:46">==</operator> <name pos:start="1562:48" pos:end="1562:63">STREAM_TYPE_LIVE</name></expr>)</condition><block type="pseudo" pos:start="1563:9" pos:end="1563:47"><block_content pos:start="1563:9" pos:end="1563:47">
        <expr_stmt pos:start="1563:9" pos:end="1563:47"><expr pos:start="1563:9" pos:end="1563:46"><name pos:start="1563:9" pos:end="1563:25">current_bandwidth</name> <operator pos:start="1563:27" pos:end="1563:28">+=</operator> <name pos:start="1563:30" pos:end="1563:46"><name pos:start="1563:30" pos:end="1563:35">stream</name><operator pos:start="1563:36" pos:end="1563:37">-&gt;</operator><name pos:start="1563:38" pos:end="1563:46">bandwidth</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="1565:5" pos:end="1565:73">/* If already streaming this feed, do not let another feeder start */</comment>
    <if_stmt pos:start="1566:5" pos:end="1570:5"><if pos:start="1566:5" pos:end="1570:5">if <condition pos:start="1566:8" pos:end="1566:28">(<expr pos:start="1566:9" pos:end="1566:27"><name pos:start="1566:9" pos:end="1566:27"><name pos:start="1566:9" pos:end="1566:14">stream</name><operator pos:start="1566:15" pos:end="1566:16">-&gt;</operator><name pos:start="1566:17" pos:end="1566:27">feed_opened</name></name></expr>)</condition> <block pos:start="1566:30" pos:end="1570:5">{<block_content pos:start="1567:9" pos:end="1569:24">
        <expr_stmt pos:start="1567:9" pos:end="1567:75"><expr pos:start="1567:9" pos:end="1567:74"><call pos:start="1567:9" pos:end="1567:74"><name pos:start="1567:9" pos:end="1567:16">snprintf</name><argument_list pos:start="1567:17" pos:end="1567:74">(<argument pos:start="1567:18" pos:end="1567:20"><expr pos:start="1567:18" pos:end="1567:20"><name pos:start="1567:18" pos:end="1567:20">msg</name></expr></argument>, <argument pos:start="1567:23" pos:end="1567:33"><expr pos:start="1567:23" pos:end="1567:33"><sizeof pos:start="1567:23" pos:end="1567:33">sizeof<argument_list pos:start="1567:29" pos:end="1567:33">(<argument pos:start="1567:30" pos:end="1567:32"><expr pos:start="1567:30" pos:end="1567:32"><name pos:start="1567:30" pos:end="1567:32">msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1567:36" pos:end="1567:73"><expr pos:start="1567:36" pos:end="1567:73"><literal type="string" pos:start="1567:36" pos:end="1567:73">"This feed is already being received."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1568:9" pos:end="1568:78"><expr pos:start="1568:9" pos:end="1568:77"><call pos:start="1568:9" pos:end="1568:77"><name pos:start="1568:9" pos:end="1568:16">http_log</name><argument_list pos:start="1568:17" pos:end="1568:77">(<argument pos:start="1568:18" pos:end="1568:53"><expr pos:start="1568:18" pos:end="1568:53"><literal type="string" pos:start="1568:18" pos:end="1568:53">"Feed '%s' already being received\n"</literal></expr></argument>, <argument pos:start="1568:56" pos:end="1568:76"><expr pos:start="1568:56" pos:end="1568:76"><name pos:start="1568:56" pos:end="1568:76"><name pos:start="1568:56" pos:end="1568:61">stream</name><operator pos:start="1568:62" pos:end="1568:63">-&gt;</operator><name pos:start="1568:64" pos:end="1568:76">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="1569:9" pos:end="1569:24">goto <name pos:start="1569:14" pos:end="1569:23">send_error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="1572:5" pos:end="1594:5"><if pos:start="1572:5" pos:end="1594:5">if <condition pos:start="1572:8" pos:end="1572:65">(<expr pos:start="1572:9" pos:end="1572:64"><name pos:start="1572:9" pos:end="1572:15"><name pos:start="1572:9" pos:end="1572:9">c</name><operator pos:start="1572:10" pos:end="1572:11">-&gt;</operator><name pos:start="1572:12" pos:end="1572:15">post</name></name> <operator pos:start="1572:17" pos:end="1572:18">==</operator> <literal type="number" pos:start="1572:20" pos:end="1572:20">0</literal> <operator pos:start="1572:22" pos:end="1572:23">&amp;&amp;</operator> <name pos:start="1572:25" pos:end="1572:44"><name pos:start="1572:25" pos:end="1572:30">config</name><operator pos:start="1572:31" pos:end="1572:31">.</operator><name pos:start="1572:32" pos:end="1572:44">max_bandwidth</name></name> <operator pos:start="1572:46" pos:end="1572:46">&lt;</operator> <name pos:start="1572:48" pos:end="1572:64">current_bandwidth</name></expr>)</condition> <block pos:start="1572:67" pos:end="1594:5">{<block_content pos:start="1573:9" pos:end="1593:17">
        <expr_stmt pos:start="1573:9" pos:end="1573:28"><expr pos:start="1573:9" pos:end="1573:27"><name pos:start="1573:9" pos:end="1573:21"><name pos:start="1573:9" pos:end="1573:9">c</name><operator pos:start="1573:10" pos:end="1573:11">-&gt;</operator><name pos:start="1573:12" pos:end="1573:21">http_error</name></name> <operator pos:start="1573:23" pos:end="1573:23">=</operator> <literal type="number" pos:start="1573:25" pos:end="1573:27">503</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1574:9" pos:end="1574:22"><expr pos:start="1574:9" pos:end="1574:21"><name pos:start="1574:9" pos:end="1574:9">q</name> <operator pos:start="1574:11" pos:end="1574:11">=</operator> <name pos:start="1574:13" pos:end="1574:21"><name pos:start="1574:13" pos:end="1574:13">c</name><operator pos:start="1574:14" pos:end="1574:15">-&gt;</operator><name pos:start="1574:16" pos:end="1574:21">buffer</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="1575:9" pos:end="1587:58"><expr pos:start="1575:9" pos:end="1587:57"><call pos:start="1575:9" pos:end="1587:57"><name pos:start="1575:9" pos:end="1575:16">snprintf</name><argument_list pos:start="1575:17" pos:end="1587:57">(<argument pos:start="1575:18" pos:end="1575:18"><expr pos:start="1575:18" pos:end="1575:18"><name pos:start="1575:18" pos:end="1575:18">q</name></expr></argument>, <argument pos:start="1575:21" pos:end="1575:34"><expr pos:start="1575:21" pos:end="1575:34"><name pos:start="1575:21" pos:end="1575:34"><name pos:start="1575:21" pos:end="1575:21">c</name><operator pos:start="1575:22" pos:end="1575:23">-&gt;</operator><name pos:start="1575:24" pos:end="1575:34">buffer_size</name></name></expr></argument>,
                      <argument pos:start="1576:23" pos:end="1586:42"><expr pos:start="1576:23" pos:end="1586:42"><literal type="string" pos:start="1576:23" pos:end="1576:56">"HTTP/1.0 503 Server too busy\r\n"</literal>
                      <literal type="string" pos:start="1577:23" pos:end="1577:51">"Content-type: text/html\r\n"</literal>
                      <literal type="string" pos:start="1578:23" pos:end="1578:28">"\r\n"</literal>
                      <literal type="string" pos:start="1579:23" pos:end="1579:41">"&lt;!DOCTYPE html&gt;\n"</literal>
                      <literal type="string" pos:start="1580:23" pos:end="1580:76">"&lt;html&gt;&lt;head&gt;&lt;title&gt;Too busy&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\r\n"</literal>
                      <literal type="string" pos:start="1581:23" pos:end="1581:75">"&lt;p&gt;The server is too busy to serve your request at "</literal>
                      <literal type="string" pos:start="1582:23" pos:end="1582:42">"this time.&lt;/p&gt;\r\n"</literal>
                      <literal type="string" pos:start="1583:23" pos:end="1583:78">"&lt;p&gt;The bandwidth being served (including your stream) "</literal>
                      <literal type="string" pos:start="1584:23" pos:end="1584:28">"is %"</literal><name pos:start="1584:29" pos:end="1584:34">PRIu64</name><literal type="string" pos:start="1584:35" pos:end="1584:74">"kbit/s, and this exceeds the limit of "</literal>
                      <literal type="string" pos:start="1585:23" pos:end="1585:25">"%"</literal><name pos:start="1585:26" pos:end="1585:31">PRIu64</name><literal type="string" pos:start="1585:32" pos:end="1585:48">"kbit/s.&lt;/p&gt;\r\n"</literal>
                      <literal type="string" pos:start="1586:23" pos:end="1586:42">"&lt;/body&gt;&lt;/html&gt;\r\n"</literal></expr></argument>,
                 <argument pos:start="1587:18" pos:end="1587:34"><expr pos:start="1587:18" pos:end="1587:34"><name pos:start="1587:18" pos:end="1587:34">current_bandwidth</name></expr></argument>, <argument pos:start="1587:37" pos:end="1587:56"><expr pos:start="1587:37" pos:end="1587:56"><name pos:start="1587:37" pos:end="1587:56"><name pos:start="1587:37" pos:end="1587:42">config</name><operator pos:start="1587:43" pos:end="1587:43">.</operator><name pos:start="1587:44" pos:end="1587:56">max_bandwidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1588:9" pos:end="1588:23"><expr pos:start="1588:9" pos:end="1588:22"><name pos:start="1588:9" pos:end="1588:9">q</name> <operator pos:start="1588:11" pos:end="1588:12">+=</operator> <call pos:start="1588:14" pos:end="1588:22"><name pos:start="1588:14" pos:end="1588:19">strlen</name><argument_list pos:start="1588:20" pos:end="1588:22">(<argument pos:start="1588:21" pos:end="1588:21"><expr pos:start="1588:21" pos:end="1588:21"><name pos:start="1588:21" pos:end="1588:21">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="1589:9" pos:end="1589:35">/* prepare output buffer */</comment>
        <expr_stmt pos:start="1590:9" pos:end="1590:34"><expr pos:start="1590:9" pos:end="1590:33"><name pos:start="1590:9" pos:end="1590:21"><name pos:start="1590:9" pos:end="1590:9">c</name><operator pos:start="1590:10" pos:end="1590:11">-&gt;</operator><name pos:start="1590:12" pos:end="1590:21">buffer_ptr</name></name> <operator pos:start="1590:23" pos:end="1590:23">=</operator> <name pos:start="1590:25" pos:end="1590:33"><name pos:start="1590:25" pos:end="1590:25">c</name><operator pos:start="1590:26" pos:end="1590:27">-&gt;</operator><name pos:start="1590:28" pos:end="1590:33">buffer</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="1591:9" pos:end="1591:26"><expr pos:start="1591:9" pos:end="1591:25"><name pos:start="1591:9" pos:end="1591:21"><name pos:start="1591:9" pos:end="1591:9">c</name><operator pos:start="1591:10" pos:end="1591:11">-&gt;</operator><name pos:start="1591:12" pos:end="1591:21">buffer_end</name></name> <operator pos:start="1591:23" pos:end="1591:23">=</operator> <name pos:start="1591:25" pos:end="1591:25">q</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1592:9" pos:end="1592:41"><expr pos:start="1592:9" pos:end="1592:40"><name pos:start="1592:9" pos:end="1592:16"><name pos:start="1592:9" pos:end="1592:9">c</name><operator pos:start="1592:10" pos:end="1592:11">-&gt;</operator><name pos:start="1592:12" pos:end="1592:16">state</name></name> <operator pos:start="1592:18" pos:end="1592:18">=</operator> <name pos:start="1592:20" pos:end="1592:40">HTTPSTATE_SEND_HEADER</name></expr>;</expr_stmt>
        <return pos:start="1593:9" pos:end="1593:17">return <expr pos:start="1593:16" pos:end="1593:16"><literal type="number" pos:start="1593:16" pos:end="1593:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="1596:5" pos:end="1723:5"><if pos:start="1596:5" pos:end="1723:5">if <condition pos:start="1596:8" pos:end="1596:33">(<expr pos:start="1596:9" pos:end="1596:32"><name pos:start="1596:9" pos:end="1596:18">redir_type</name> <operator pos:start="1596:20" pos:end="1596:21">!=</operator> <name pos:start="1596:23" pos:end="1596:32">REDIR_NONE</name></expr>)</condition> <block pos:start="1596:35" pos:end="1723:5">{<block_content pos:start="1597:9" pos:end="1722:24">
        <decl_stmt pos:start="1597:9" pos:end="1597:33"><decl pos:start="1597:9" pos:end="1597:32"><type pos:start="1597:9" pos:end="1597:20"><specifier pos:start="1597:9" pos:end="1597:13">const</specifier> <name pos:start="1597:15" pos:end="1597:18">char</name> <modifier pos:start="1597:20" pos:end="1597:20">*</modifier></type><name pos:start="1597:21" pos:end="1597:28">hostinfo</name> <init pos:start="1597:30" pos:end="1597:32">= <expr pos:start="1597:32" pos:end="1597:32"><literal type="number" pos:start="1597:32" pos:end="1597:32">0</literal></expr></init></decl>;</decl_stmt>

        <for pos:start="1599:9" pos:end="1609:9">for <control pos:start="1599:13" pos:end="1599:61">(<init pos:start="1599:14" pos:end="1599:27"><expr pos:start="1599:14" pos:end="1599:26"><name pos:start="1599:14" pos:end="1599:14">p</name> <operator pos:start="1599:16" pos:end="1599:16">=</operator> <name pos:start="1599:18" pos:end="1599:26"><name pos:start="1599:18" pos:end="1599:18">c</name><operator pos:start="1599:19" pos:end="1599:20">-&gt;</operator><name pos:start="1599:21" pos:end="1599:26">buffer</name></name></expr>;</init> <condition pos:start="1599:29" pos:end="1599:59"><expr pos:start="1599:29" pos:end="1599:58"><operator pos:start="1599:29" pos:end="1599:29">*</operator><name pos:start="1599:30" pos:end="1599:30">p</name> <operator pos:start="1599:32" pos:end="1599:33">&amp;&amp;</operator> <operator pos:start="1599:35" pos:end="1599:35">*</operator><name pos:start="1599:36" pos:end="1599:36">p</name> <operator pos:start="1599:38" pos:end="1599:39">!=</operator> <literal type="char" pos:start="1599:41" pos:end="1599:44">'\r'</literal> <operator pos:start="1599:46" pos:end="1599:47">&amp;&amp;</operator> <operator pos:start="1599:49" pos:end="1599:49">*</operator><name pos:start="1599:50" pos:end="1599:50">p</name> <operator pos:start="1599:52" pos:end="1599:53">!=</operator> <literal type="char" pos:start="1599:55" pos:end="1599:58">'\n'</literal></expr>;</condition> <incr/>)</control> <block pos:start="1599:63" pos:end="1609:9">{<block_content pos:start="1600:13" pos:end="1608:16">
            <if_stmt pos:start="1600:13" pos:end="1603:13"><if pos:start="1600:13" pos:end="1603:13">if <condition pos:start="1600:16" pos:end="1600:51">(<expr pos:start="1600:17" pos:end="1600:50"><call pos:start="1600:17" pos:end="1600:45"><name pos:start="1600:17" pos:end="1600:30">av_strncasecmp</name><argument_list pos:start="1600:31" pos:end="1600:45">(<argument pos:start="1600:32" pos:end="1600:32"><expr pos:start="1600:32" pos:end="1600:32"><name pos:start="1600:32" pos:end="1600:32">p</name></expr></argument>, <argument pos:start="1600:35" pos:end="1600:41"><expr pos:start="1600:35" pos:end="1600:41"><literal type="string" pos:start="1600:35" pos:end="1600:41">"Host:"</literal></expr></argument>, <argument pos:start="1600:44" pos:end="1600:44"><expr pos:start="1600:44" pos:end="1600:44"><literal type="number" pos:start="1600:44" pos:end="1600:44">5</literal></expr></argument>)</argument_list></call> <operator pos:start="1600:47" pos:end="1600:48">==</operator> <literal type="number" pos:start="1600:50" pos:end="1600:50">0</literal></expr>)</condition> <block pos:start="1600:53" pos:end="1603:13">{<block_content pos:start="1601:17" pos:end="1602:22">
                <expr_stmt pos:start="1601:17" pos:end="1601:33"><expr pos:start="1601:17" pos:end="1601:32"><name pos:start="1601:17" pos:end="1601:24">hostinfo</name> <operator pos:start="1601:26" pos:end="1601:26">=</operator> <name pos:start="1601:28" pos:end="1601:28">p</name> <operator pos:start="1601:30" pos:end="1601:30">+</operator> <literal type="number" pos:start="1601:32" pos:end="1601:32">5</literal></expr>;</expr_stmt>
                <break pos:start="1602:17" pos:end="1602:22">break;</break>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="1604:13" pos:end="1604:32"><expr pos:start="1604:13" pos:end="1604:31"><name pos:start="1604:13" pos:end="1604:13">p</name> <operator pos:start="1604:15" pos:end="1604:15">=</operator> <call pos:start="1604:17" pos:end="1604:31"><name pos:start="1604:17" pos:end="1604:22">strchr</name><argument_list pos:start="1604:23" pos:end="1604:31">(<argument pos:start="1604:24" pos:end="1604:24"><expr pos:start="1604:24" pos:end="1604:24"><name pos:start="1604:24" pos:end="1604:24">p</name></expr></argument>, <argument pos:start="1604:27" pos:end="1604:30"><expr pos:start="1604:27" pos:end="1604:30"><literal type="char" pos:start="1604:27" pos:end="1604:30">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1605:13" pos:end="1606:22"><if pos:start="1605:13" pos:end="1606:22">if <condition pos:start="1605:16" pos:end="1605:19">(<expr pos:start="1605:17" pos:end="1605:18"><operator pos:start="1605:17" pos:end="1605:17">!</operator><name pos:start="1605:18" pos:end="1605:18">p</name></expr>)</condition><block type="pseudo" pos:start="1606:17" pos:end="1606:22"><block_content pos:start="1606:17" pos:end="1606:22">
                <break pos:start="1606:17" pos:end="1606:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1608:13" pos:end="1608:16"><expr pos:start="1608:13" pos:end="1608:15"><name pos:start="1608:13" pos:end="1608:13">p</name><operator pos:start="1608:14" pos:end="1608:15">++</operator></expr>;</expr_stmt>
        </block_content>}</block></for>

        <if_stmt pos:start="1611:9" pos:end="1719:9"><if pos:start="1611:9" pos:end="1719:9">if <condition pos:start="1611:12" pos:end="1611:21">(<expr pos:start="1611:13" pos:end="1611:20"><name pos:start="1611:13" pos:end="1611:20">hostinfo</name></expr>)</condition> <block pos:start="1611:23" pos:end="1719:9">{<block_content pos:start="1612:13" pos:end="1718:13">
            <decl_stmt pos:start="1612:13" pos:end="1612:22"><decl pos:start="1612:13" pos:end="1612:21"><type pos:start="1612:13" pos:end="1612:18"><name pos:start="1612:13" pos:end="1612:16">char</name> <modifier pos:start="1612:18" pos:end="1612:18">*</modifier></type><name pos:start="1612:19" pos:end="1612:21">eoh</name></decl>;</decl_stmt>
            <decl_stmt pos:start="1613:13" pos:end="1613:30"><decl pos:start="1613:13" pos:end="1613:29"><type pos:start="1613:13" pos:end="1613:16"><name pos:start="1613:13" pos:end="1613:16">char</name></type> <name pos:start="1613:18" pos:end="1613:29"><name pos:start="1613:18" pos:end="1613:24">hostbuf</name><index pos:start="1613:25" pos:end="1613:29">[<expr pos:start="1613:26" pos:end="1613:28"><literal type="number" pos:start="1613:26" pos:end="1613:28">260</literal></expr>]</index></name></decl>;</decl_stmt>

            <while pos:start="1615:13" pos:end="1616:27">while <condition pos:start="1615:19" pos:end="1615:41">(<expr pos:start="1615:20" pos:end="1615:40"><call pos:start="1615:20" pos:end="1615:40"><name pos:start="1615:20" pos:end="1615:29">av_isspace</name><argument_list pos:start="1615:30" pos:end="1615:40">(<argument pos:start="1615:31" pos:end="1615:39"><expr pos:start="1615:31" pos:end="1615:39"><operator pos:start="1615:31" pos:end="1615:31">*</operator><name pos:start="1615:32" pos:end="1615:39">hostinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1616:17" pos:end="1616:27"><block_content pos:start="1616:17" pos:end="1616:27">
                <expr_stmt pos:start="1616:17" pos:end="1616:27"><expr pos:start="1616:17" pos:end="1616:26"><name pos:start="1616:17" pos:end="1616:24">hostinfo</name><operator pos:start="1616:25" pos:end="1616:26">++</operator></expr>;</expr_stmt></block_content></block></while>

            <expr_stmt pos:start="1618:13" pos:end="1618:41"><expr pos:start="1618:13" pos:end="1618:40"><name pos:start="1618:13" pos:end="1618:15">eoh</name> <operator pos:start="1618:17" pos:end="1618:17">=</operator> <call pos:start="1618:19" pos:end="1618:40"><name pos:start="1618:19" pos:end="1618:24">strchr</name><argument_list pos:start="1618:25" pos:end="1618:40">(<argument pos:start="1618:26" pos:end="1618:33"><expr pos:start="1618:26" pos:end="1618:33"><name pos:start="1618:26" pos:end="1618:33">hostinfo</name></expr></argument>, <argument pos:start="1618:36" pos:end="1618:39"><expr pos:start="1618:36" pos:end="1618:39"><literal type="char" pos:start="1618:36" pos:end="1618:39">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1619:13" pos:end="1718:13"><if pos:start="1619:13" pos:end="1718:13">if <condition pos:start="1619:16" pos:end="1619:20">(<expr pos:start="1619:17" pos:end="1619:19"><name pos:start="1619:17" pos:end="1619:19">eoh</name></expr>)</condition> <block pos:start="1619:22" pos:end="1718:13">{<block_content pos:start="1620:17" pos:end="1717:17">
                <if_stmt pos:start="1620:17" pos:end="1621:26"><if pos:start="1620:17" pos:end="1621:26">if <condition pos:start="1620:20" pos:end="1620:36">(<expr pos:start="1620:21" pos:end="1620:35"><name pos:start="1620:21" pos:end="1620:27"><name pos:start="1620:21" pos:end="1620:23">eoh</name><index pos:start="1620:24" pos:end="1620:27">[<expr pos:start="1620:25" pos:end="1620:26"><operator pos:start="1620:25" pos:end="1620:25">-</operator><literal type="number" pos:start="1620:26" pos:end="1620:26">1</literal></expr>]</index></name> <operator pos:start="1620:29" pos:end="1620:30">==</operator> <literal type="char" pos:start="1620:32" pos:end="1620:35">'\r'</literal></expr>)</condition><block type="pseudo" pos:start="1621:21" pos:end="1621:26"><block_content pos:start="1621:21" pos:end="1621:26">
                    <expr_stmt pos:start="1621:21" pos:end="1621:26"><expr pos:start="1621:21" pos:end="1621:25"><name pos:start="1621:21" pos:end="1621:23">eoh</name><operator pos:start="1621:24" pos:end="1621:25">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="1623:17" pos:end="1717:17"><if pos:start="1623:17" pos:end="1717:17">if <condition pos:start="1623:20" pos:end="1623:57">(<expr pos:start="1623:21" pos:end="1623:56"><name pos:start="1623:21" pos:end="1623:23">eoh</name> <operator pos:start="1623:25" pos:end="1623:25">-</operator> <name pos:start="1623:27" pos:end="1623:34">hostinfo</name> <operator pos:start="1623:36" pos:end="1623:36">&lt;</operator> <sizeof pos:start="1623:38" pos:end="1623:52">sizeof<argument_list pos:start="1623:44" pos:end="1623:52">(<argument pos:start="1623:45" pos:end="1623:51"><expr pos:start="1623:45" pos:end="1623:51"><name pos:start="1623:45" pos:end="1623:51">hostbuf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="1623:54" pos:end="1623:54">-</operator> <literal type="number" pos:start="1623:56" pos:end="1623:56">1</literal></expr>)</condition> <block pos:start="1623:59" pos:end="1717:17">{<block_content pos:start="1624:21" pos:end="1716:29">
                    <expr_stmt pos:start="1624:21" pos:end="1624:62"><expr pos:start="1624:21" pos:end="1624:61"><call pos:start="1624:21" pos:end="1624:61"><name pos:start="1624:21" pos:end="1624:26">memcpy</name><argument_list pos:start="1624:27" pos:end="1624:61">(<argument pos:start="1624:28" pos:end="1624:34"><expr pos:start="1624:28" pos:end="1624:34"><name pos:start="1624:28" pos:end="1624:34">hostbuf</name></expr></argument>, <argument pos:start="1624:37" pos:end="1624:44"><expr pos:start="1624:37" pos:end="1624:44"><name pos:start="1624:37" pos:end="1624:44">hostinfo</name></expr></argument>, <argument pos:start="1624:47" pos:end="1624:60"><expr pos:start="1624:47" pos:end="1624:60"><name pos:start="1624:47" pos:end="1624:49">eoh</name> <operator pos:start="1624:51" pos:end="1624:51">-</operator> <name pos:start="1624:53" pos:end="1624:60">hostinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1625:21" pos:end="1625:48"><expr pos:start="1625:21" pos:end="1625:47"><name pos:start="1625:21" pos:end="1625:43"><name pos:start="1625:21" pos:end="1625:27">hostbuf</name><index pos:start="1625:28" pos:end="1625:43">[<expr pos:start="1625:29" pos:end="1625:42"><name pos:start="1625:29" pos:end="1625:31">eoh</name> <operator pos:start="1625:33" pos:end="1625:33">-</operator> <name pos:start="1625:35" pos:end="1625:42">hostinfo</name></expr>]</index></name> <operator pos:start="1625:45" pos:end="1625:45">=</operator> <literal type="number" pos:start="1625:47" pos:end="1625:47">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="1627:21" pos:end="1627:40"><expr pos:start="1627:21" pos:end="1627:39"><name pos:start="1627:21" pos:end="1627:33"><name pos:start="1627:21" pos:end="1627:21">c</name><operator pos:start="1627:22" pos:end="1627:23">-&gt;</operator><name pos:start="1627:24" pos:end="1627:33">http_error</name></name> <operator pos:start="1627:35" pos:end="1627:35">=</operator> <literal type="number" pos:start="1627:37" pos:end="1627:39">200</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="1628:21" pos:end="1628:34"><expr pos:start="1628:21" pos:end="1628:33"><name pos:start="1628:21" pos:end="1628:21">q</name> <operator pos:start="1628:23" pos:end="1628:23">=</operator> <name pos:start="1628:25" pos:end="1628:33"><name pos:start="1628:25" pos:end="1628:25">c</name><operator pos:start="1628:26" pos:end="1628:27">-&gt;</operator><name pos:start="1628:28" pos:end="1628:33">buffer</name></name></expr>;</expr_stmt>
                    <switch pos:start="1629:21" pos:end="1710:21">switch<condition pos:start="1629:27" pos:end="1629:38">(<expr pos:start="1629:28" pos:end="1629:37"><name pos:start="1629:28" pos:end="1629:37">redir_type</name></expr>)</condition> <block pos:start="1629:40" pos:end="1710:21">{<block_content pos:start="1630:21" pos:end="1709:30">
                    <case pos:start="1630:21" pos:end="1630:35">case <expr pos:start="1630:26" pos:end="1630:34"><name pos:start="1630:26" pos:end="1630:34">REDIR_ASX</name></expr>:</case>
                        <expr_stmt pos:start="1631:25" pos:end="1638:77"><expr pos:start="1631:25" pos:end="1638:76"><call pos:start="1631:25" pos:end="1638:76"><name pos:start="1631:25" pos:end="1631:32">snprintf</name><argument_list pos:start="1631:33" pos:end="1638:76">(<argument pos:start="1631:34" pos:end="1631:34"><expr pos:start="1631:34" pos:end="1631:34"><name pos:start="1631:34" pos:end="1631:34">q</name></expr></argument>, <argument pos:start="1631:37" pos:end="1631:50"><expr pos:start="1631:37" pos:end="1631:50"><name pos:start="1631:37" pos:end="1631:50"><name pos:start="1631:37" pos:end="1631:37">c</name><operator pos:start="1631:38" pos:end="1631:39">-&gt;</operator><name pos:start="1631:40" pos:end="1631:50">buffer_size</name></name></expr></argument>,
                                      <argument pos:start="1632:39" pos:end="1638:50"><expr pos:start="1632:39" pos:end="1638:50"><literal type="string" pos:start="1632:39" pos:end="1632:68">"HTTP/1.0 200 ASX Follows\r\n"</literal>
                                      <literal type="string" pos:start="1633:39" pos:end="1633:72">"Content-type: video/x-ms-asf\r\n"</literal>
                                      <literal type="string" pos:start="1634:39" pos:end="1634:44">"\r\n"</literal>
                                      <literal type="string" pos:start="1635:39" pos:end="1635:63">"&lt;ASX Version=\"3\"&gt;\r\n"</literal>
                                      <comment type="line" pos:start="1636:39" pos:end="1636:80">//"&lt;!-- Autogenerated by ffserver --&gt;\r\n"</comment>
                                      <literal type="string" pos:start="1637:39" pos:end="1637:89">"&lt;ENTRY&gt;&lt;REF HREF=\"http://%s/%s%s\"/&gt;&lt;/ENTRY&gt;\r\n"</literal>
                                      <literal type="string" pos:start="1638:39" pos:end="1638:50">"&lt;/ASX&gt;\r\n"</literal></expr></argument>, <argument pos:start="1638:53" pos:end="1638:59"><expr pos:start="1638:53" pos:end="1638:59"><name pos:start="1638:53" pos:end="1638:59">hostbuf</name></expr></argument>, <argument pos:start="1638:62" pos:end="1638:69"><expr pos:start="1638:62" pos:end="1638:69"><name pos:start="1638:62" pos:end="1638:69">filename</name></expr></argument>, <argument pos:start="1638:72" pos:end="1638:75"><expr pos:start="1638:72" pos:end="1638:75"><name pos:start="1638:72" pos:end="1638:75">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1639:25" pos:end="1639:39"><expr pos:start="1639:25" pos:end="1639:38"><name pos:start="1639:25" pos:end="1639:25">q</name> <operator pos:start="1639:27" pos:end="1639:28">+=</operator> <call pos:start="1639:30" pos:end="1639:38"><name pos:start="1639:30" pos:end="1639:35">strlen</name><argument_list pos:start="1639:36" pos:end="1639:38">(<argument pos:start="1639:37" pos:end="1639:37"><expr pos:start="1639:37" pos:end="1639:37"><name pos:start="1639:37" pos:end="1639:37">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1640:25" pos:end="1640:30">break;</break>
                    <case pos:start="1641:21" pos:end="1641:35">case <expr pos:start="1641:26" pos:end="1641:34"><name pos:start="1641:26" pos:end="1641:34">REDIR_RAM</name></expr>:</case>
                        <expr_stmt pos:start="1642:25" pos:end="1647:85"><expr pos:start="1642:25" pos:end="1647:84"><call pos:start="1642:25" pos:end="1647:84"><name pos:start="1642:25" pos:end="1642:32">snprintf</name><argument_list pos:start="1642:33" pos:end="1647:84">(<argument pos:start="1642:34" pos:end="1642:34"><expr pos:start="1642:34" pos:end="1642:34"><name pos:start="1642:34" pos:end="1642:34">q</name></expr></argument>, <argument pos:start="1642:37" pos:end="1642:50"><expr pos:start="1642:37" pos:end="1642:50"><name pos:start="1642:37" pos:end="1642:50"><name pos:start="1642:37" pos:end="1642:37">c</name><operator pos:start="1642:38" pos:end="1642:39">-&gt;</operator><name pos:start="1642:40" pos:end="1642:50">buffer_size</name></name></expr></argument>,
                                      <argument pos:start="1643:39" pos:end="1647:58"><expr pos:start="1643:39" pos:end="1647:58"><literal type="string" pos:start="1643:39" pos:end="1643:68">"HTTP/1.0 200 RAM Follows\r\n"</literal>
                                      <literal type="string" pos:start="1644:39" pos:end="1644:78">"Content-type: audio/x-pn-realaudio\r\n"</literal>
                                      <literal type="string" pos:start="1645:39" pos:end="1645:44">"\r\n"</literal>
                                      <literal type="string" pos:start="1646:39" pos:end="1646:71">"# Autogenerated by ffserver\r\n"</literal>
                                      <literal type="string" pos:start="1647:39" pos:end="1647:58">"http://%s/%s%s\r\n"</literal></expr></argument>, <argument pos:start="1647:61" pos:end="1647:67"><expr pos:start="1647:61" pos:end="1647:67"><name pos:start="1647:61" pos:end="1647:67">hostbuf</name></expr></argument>, <argument pos:start="1647:70" pos:end="1647:77"><expr pos:start="1647:70" pos:end="1647:77"><name pos:start="1647:70" pos:end="1647:77">filename</name></expr></argument>, <argument pos:start="1647:80" pos:end="1647:83"><expr pos:start="1647:80" pos:end="1647:83"><name pos:start="1647:80" pos:end="1647:83">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1648:25" pos:end="1648:39"><expr pos:start="1648:25" pos:end="1648:38"><name pos:start="1648:25" pos:end="1648:25">q</name> <operator pos:start="1648:27" pos:end="1648:28">+=</operator> <call pos:start="1648:30" pos:end="1648:38"><name pos:start="1648:30" pos:end="1648:35">strlen</name><argument_list pos:start="1648:36" pos:end="1648:38">(<argument pos:start="1648:37" pos:end="1648:37"><expr pos:start="1648:37" pos:end="1648:37"><name pos:start="1648:37" pos:end="1648:37">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1649:25" pos:end="1649:30">break;</break>
                    <case pos:start="1650:21" pos:end="1650:35">case <expr pos:start="1650:26" pos:end="1650:34"><name pos:start="1650:26" pos:end="1650:34">REDIR_ASF</name></expr>:</case>
                        <expr_stmt pos:start="1651:25" pos:end="1656:90"><expr pos:start="1651:25" pos:end="1656:89"><call pos:start="1651:25" pos:end="1656:89"><name pos:start="1651:25" pos:end="1651:32">snprintf</name><argument_list pos:start="1651:33" pos:end="1656:89">(<argument pos:start="1651:34" pos:end="1651:34"><expr pos:start="1651:34" pos:end="1651:34"><name pos:start="1651:34" pos:end="1651:34">q</name></expr></argument>, <argument pos:start="1651:37" pos:end="1651:50"><expr pos:start="1651:37" pos:end="1651:50"><name pos:start="1651:37" pos:end="1651:50"><name pos:start="1651:37" pos:end="1651:37">c</name><operator pos:start="1651:38" pos:end="1651:39">-&gt;</operator><name pos:start="1651:40" pos:end="1651:50">buffer_size</name></name></expr></argument>,
                                      <argument pos:start="1652:39" pos:end="1656:63"><expr pos:start="1652:39" pos:end="1656:63"><literal type="string" pos:start="1652:39" pos:end="1652:77">"HTTP/1.0 200 ASF Redirect follows\r\n"</literal>
                                      <literal type="string" pos:start="1653:39" pos:end="1653:72">"Content-type: video/x-ms-asf\r\n"</literal>
                                      <literal type="string" pos:start="1654:39" pos:end="1654:44">"\r\n"</literal>
                                      <literal type="string" pos:start="1655:39" pos:end="1655:55">"[Reference]\r\n"</literal>
                                      <literal type="string" pos:start="1656:39" pos:end="1656:63">"Ref1=http://%s/%s%s\r\n"</literal></expr></argument>, <argument pos:start="1656:66" pos:end="1656:72"><expr pos:start="1656:66" pos:end="1656:72"><name pos:start="1656:66" pos:end="1656:72">hostbuf</name></expr></argument>, <argument pos:start="1656:75" pos:end="1656:82"><expr pos:start="1656:75" pos:end="1656:82"><name pos:start="1656:75" pos:end="1656:82">filename</name></expr></argument>, <argument pos:start="1656:85" pos:end="1656:88"><expr pos:start="1656:85" pos:end="1656:88"><name pos:start="1656:85" pos:end="1656:88">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1657:25" pos:end="1657:39"><expr pos:start="1657:25" pos:end="1657:38"><name pos:start="1657:25" pos:end="1657:25">q</name> <operator pos:start="1657:27" pos:end="1657:28">+=</operator> <call pos:start="1657:30" pos:end="1657:38"><name pos:start="1657:30" pos:end="1657:35">strlen</name><argument_list pos:start="1657:36" pos:end="1657:38">(<argument pos:start="1657:37" pos:end="1657:37"><expr pos:start="1657:37" pos:end="1657:37"><name pos:start="1657:37" pos:end="1657:37">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1658:25" pos:end="1658:30">break;</break>
                    <case pos:start="1659:21" pos:end="1659:36">case <expr pos:start="1659:26" pos:end="1659:35"><name pos:start="1659:26" pos:end="1659:35">REDIR_RTSP</name></expr>:</case>
                        <block pos:start="1660:25" pos:end="1674:25">{<block_content pos:start="1661:29" pos:end="1673:43">
                            <decl_stmt pos:start="1661:29" pos:end="1661:51"><decl pos:start="1661:29" pos:end="1661:46"><type pos:start="1661:29" pos:end="1661:32"><name pos:start="1661:29" pos:end="1661:32">char</name></type> <name pos:start="1661:34" pos:end="1661:46"><name pos:start="1661:34" pos:end="1661:41">hostname</name><index pos:start="1661:42" pos:end="1661:46">[<expr pos:start="1661:43" pos:end="1661:45"><literal type="number" pos:start="1661:43" pos:end="1661:45">256</literal></expr>]</index></name></decl>, <decl pos:start="1661:49" pos:end="1661:50"><type ref="prev" pos:start="1661:29" pos:end="1661:32"><modifier pos:start="1661:49" pos:end="1661:49">*</modifier></type><name pos:start="1661:50" pos:end="1661:50">p</name></decl>;</decl_stmt>
                            <comment type="block" pos:start="1662:29" pos:end="1662:55">/* extract only hostname */</comment>
                            <expr_stmt pos:start="1663:29" pos:end="1663:76"><expr pos:start="1663:29" pos:end="1663:75"><call pos:start="1663:29" pos:end="1663:75"><name pos:start="1663:29" pos:end="1663:38">av_strlcpy</name><argument_list pos:start="1663:39" pos:end="1663:75">(<argument pos:start="1663:40" pos:end="1663:47"><expr pos:start="1663:40" pos:end="1663:47"><name pos:start="1663:40" pos:end="1663:47">hostname</name></expr></argument>, <argument pos:start="1663:50" pos:end="1663:56"><expr pos:start="1663:50" pos:end="1663:56"><name pos:start="1663:50" pos:end="1663:56">hostbuf</name></expr></argument>, <argument pos:start="1663:59" pos:end="1663:74"><expr pos:start="1663:59" pos:end="1663:74"><sizeof pos:start="1663:59" pos:end="1663:74">sizeof<argument_list pos:start="1663:65" pos:end="1663:74">(<argument pos:start="1663:66" pos:end="1663:73"><expr pos:start="1663:66" pos:end="1663:73"><name pos:start="1663:66" pos:end="1663:73">hostname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt pos:start="1664:29" pos:end="1664:55"><expr pos:start="1664:29" pos:end="1664:54"><name pos:start="1664:29" pos:end="1664:29">p</name> <operator pos:start="1664:31" pos:end="1664:31">=</operator> <call pos:start="1664:33" pos:end="1664:54"><name pos:start="1664:33" pos:end="1664:39">strrchr</name><argument_list pos:start="1664:40" pos:end="1664:54">(<argument pos:start="1664:41" pos:end="1664:48"><expr pos:start="1664:41" pos:end="1664:48"><name pos:start="1664:41" pos:end="1664:48">hostname</name></expr></argument>, <argument pos:start="1664:51" pos:end="1664:53"><expr pos:start="1664:51" pos:end="1664:53"><literal type="char" pos:start="1664:51" pos:end="1664:53">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if_stmt pos:start="1665:29" pos:end="1666:42"><if pos:start="1665:29" pos:end="1666:42">if <condition pos:start="1665:32" pos:end="1665:34">(<expr pos:start="1665:33" pos:end="1665:33"><name pos:start="1665:33" pos:end="1665:33">p</name></expr>)</condition><block type="pseudo" pos:start="1666:33" pos:end="1666:42"><block_content pos:start="1666:33" pos:end="1666:42">
                                <expr_stmt pos:start="1666:33" pos:end="1666:42"><expr pos:start="1666:33" pos:end="1666:41"><operator pos:start="1666:33" pos:end="1666:33">*</operator><name pos:start="1666:34" pos:end="1666:34">p</name> <operator pos:start="1666:36" pos:end="1666:36">=</operator> <literal type="char" pos:start="1666:38" pos:end="1666:41">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                            <expr_stmt pos:start="1667:29" pos:end="1672:119"><expr pos:start="1667:29" pos:end="1672:118"><call pos:start="1667:29" pos:end="1672:118"><name pos:start="1667:29" pos:end="1667:36">snprintf</name><argument_list pos:start="1667:37" pos:end="1672:118">(<argument pos:start="1667:38" pos:end="1667:38"><expr pos:start="1667:38" pos:end="1667:38"><name pos:start="1667:38" pos:end="1667:38">q</name></expr></argument>, <argument pos:start="1667:41" pos:end="1667:54"><expr pos:start="1667:41" pos:end="1667:54"><name pos:start="1667:41" pos:end="1667:54"><name pos:start="1667:41" pos:end="1667:41">c</name><operator pos:start="1667:42" pos:end="1667:43">-&gt;</operator><name pos:start="1667:44" pos:end="1667:54">buffer_size</name></name></expr></argument>,
                                          <argument pos:start="1668:43" pos:end="1672:63"><expr pos:start="1668:43" pos:end="1672:63"><literal type="string" pos:start="1668:43" pos:end="1668:82">"HTTP/1.0 200 RTSP Redirect follows\r\n"</literal>
                                          <comment type="block" pos:start="1669:43" pos:end="1669:74">/* XXX: incorrect MIME type ? */</comment>
                                          <literal type="string" pos:start="1670:43" pos:end="1670:80">"Content-type: application/x-rtsp\r\n"</literal>
                                          <literal type="string" pos:start="1671:43" pos:end="1671:48">"\r\n"</literal>
                                          <literal type="string" pos:start="1672:43" pos:end="1672:63">"rtsp://%s:%d/%s\r\n"</literal></expr></argument>, <argument pos:start="1672:66" pos:end="1672:73"><expr pos:start="1672:66" pos:end="1672:73"><name pos:start="1672:66" pos:end="1672:73">hostname</name></expr></argument>, <argument pos:start="1672:76" pos:end="1672:107"><expr pos:start="1672:76" pos:end="1672:107"><call pos:start="1672:76" pos:end="1672:107"><name pos:start="1672:76" pos:end="1672:80">ntohs</name><argument_list pos:start="1672:81" pos:end="1672:107">(<argument pos:start="1672:82" pos:end="1672:106"><expr pos:start="1672:82" pos:end="1672:106"><name pos:start="1672:82" pos:end="1672:106"><name pos:start="1672:82" pos:end="1672:87">config</name><operator pos:start="1672:88" pos:end="1672:88">.</operator><name pos:start="1672:89" pos:end="1672:97">rtsp_addr</name><operator pos:start="1672:98" pos:end="1672:98">.</operator><name pos:start="1672:99" pos:end="1672:106">sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1672:110" pos:end="1672:117"><expr pos:start="1672:110" pos:end="1672:117"><name pos:start="1672:110" pos:end="1672:117">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt pos:start="1673:29" pos:end="1673:43"><expr pos:start="1673:29" pos:end="1673:42"><name pos:start="1673:29" pos:end="1673:29">q</name> <operator pos:start="1673:31" pos:end="1673:32">+=</operator> <call pos:start="1673:34" pos:end="1673:42"><name pos:start="1673:34" pos:end="1673:39">strlen</name><argument_list pos:start="1673:40" pos:end="1673:42">(<argument pos:start="1673:41" pos:end="1673:41"><expr pos:start="1673:41" pos:end="1673:41"><name pos:start="1673:41" pos:end="1673:41">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block>
                        <break pos:start="1675:25" pos:end="1675:30">break;</break>
                    <case pos:start="1676:21" pos:end="1676:35">case <expr pos:start="1676:26" pos:end="1676:34"><name pos:start="1676:26" pos:end="1676:34">REDIR_SDP</name></expr>:</case>
                        <block pos:start="1677:25" pos:end="1705:25">{<block_content pos:start="1678:29" pos:end="1704:29">
                            <decl_stmt pos:start="1678:29" pos:end="1678:46"><decl pos:start="1678:29" pos:end="1678:45"><type pos:start="1678:29" pos:end="1678:37"><name pos:start="1678:29" pos:end="1678:35">uint8_t</name> <modifier pos:start="1678:37" pos:end="1678:37">*</modifier></type><name pos:start="1678:38" pos:end="1678:45">sdp_data</name></decl>;</decl_stmt>
                            <decl_stmt pos:start="1679:29" pos:end="1679:46"><decl pos:start="1679:29" pos:end="1679:45"><type pos:start="1679:29" pos:end="1679:31"><name pos:start="1679:29" pos:end="1679:31">int</name></type> <name pos:start="1679:33" pos:end="1679:45">sdp_data_size</name></decl>;</decl_stmt>
                            <decl_stmt pos:start="1680:29" pos:end="1680:42"><decl pos:start="1680:29" pos:end="1680:41"><type pos:start="1680:29" pos:end="1680:37"><name pos:start="1680:29" pos:end="1680:37">socklen_t</name></type> <name pos:start="1680:39" pos:end="1680:41">len</name></decl>;</decl_stmt>
                            <decl_stmt pos:start="1681:29" pos:end="1681:55"><decl pos:start="1681:29" pos:end="1681:54"><type pos:start="1681:29" pos:end="1681:46"><name pos:start="1681:29" pos:end="1681:46"><name pos:start="1681:29" pos:end="1681:34">struct</name> <name pos:start="1681:36" pos:end="1681:46">sockaddr_in</name></name></type> <name pos:start="1681:48" pos:end="1681:54">my_addr</name></decl>;</decl_stmt>

                            <expr_stmt pos:start="1683:29" pos:end="1686:50"><expr pos:start="1683:29" pos:end="1686:49"><call pos:start="1683:29" pos:end="1686:49"><name pos:start="1683:29" pos:end="1683:36">snprintf</name><argument_list pos:start="1683:37" pos:end="1686:49">(<argument pos:start="1683:38" pos:end="1683:38"><expr pos:start="1683:38" pos:end="1683:38"><name pos:start="1683:38" pos:end="1683:38">q</name></expr></argument>, <argument pos:start="1683:41" pos:end="1683:54"><expr pos:start="1683:41" pos:end="1683:54"><name pos:start="1683:41" pos:end="1683:54"><name pos:start="1683:41" pos:end="1683:41">c</name><operator pos:start="1683:42" pos:end="1683:43">-&gt;</operator><name pos:start="1683:44" pos:end="1683:54">buffer_size</name></name></expr></argument>,
                                          <argument pos:start="1684:43" pos:end="1686:48"><expr pos:start="1684:43" pos:end="1686:48"><literal type="string" pos:start="1684:43" pos:end="1684:63">"HTTP/1.0 200 OK\r\n"</literal>
                                          <literal type="string" pos:start="1685:43" pos:end="1685:77">"Content-type: application/sdp\r\n"</literal>
                                          <literal type="string" pos:start="1686:43" pos:end="1686:48">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt pos:start="1687:29" pos:end="1687:43"><expr pos:start="1687:29" pos:end="1687:42"><name pos:start="1687:29" pos:end="1687:29">q</name> <operator pos:start="1687:31" pos:end="1687:32">+=</operator> <call pos:start="1687:34" pos:end="1687:42"><name pos:start="1687:34" pos:end="1687:39">strlen</name><argument_list pos:start="1687:40" pos:end="1687:42">(<argument pos:start="1687:41" pos:end="1687:41"><expr pos:start="1687:41" pos:end="1687:41"><name pos:start="1687:41" pos:end="1687:41">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1689:29" pos:end="1689:50"><expr pos:start="1689:29" pos:end="1689:49"><name pos:start="1689:29" pos:end="1689:31">len</name> <operator pos:start="1689:33" pos:end="1689:33">=</operator> <sizeof pos:start="1689:35" pos:end="1689:49">sizeof<argument_list pos:start="1689:41" pos:end="1689:49">(<argument pos:start="1689:42" pos:end="1689:48"><expr pos:start="1689:42" pos:end="1689:48"><name pos:start="1689:42" pos:end="1689:48">my_addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

                            <comment type="block" pos:start="1691:29" pos:end="1691:60">/* XXX: Should probably fail? */</comment>
                            <if_stmt pos:start="1692:29" pos:end="1693:67"><if pos:start="1692:29" pos:end="1693:67">if <condition pos:start="1692:32" pos:end="1692:86">(<expr pos:start="1692:33" pos:end="1692:85"><call pos:start="1692:33" pos:end="1692:85"><name pos:start="1692:33" pos:end="1692:43">getsockname</name><argument_list pos:start="1692:44" pos:end="1692:85">(<argument pos:start="1692:45" pos:end="1692:49"><expr pos:start="1692:45" pos:end="1692:49"><name pos:start="1692:45" pos:end="1692:49"><name pos:start="1692:45" pos:end="1692:45">c</name><operator pos:start="1692:46" pos:end="1692:47">-&gt;</operator><name pos:start="1692:48" pos:end="1692:49">fd</name></name></expr></argument>, <argument pos:start="1692:52" pos:end="1692:78"><expr pos:start="1692:52" pos:end="1692:78"><operator pos:start="1692:52" pos:end="1692:52">(</operator>struct <name pos:start="1692:60" pos:end="1692:67">sockaddr</name> <operator pos:start="1692:69" pos:end="1692:69">*</operator><operator pos:start="1692:70" pos:end="1692:70">)</operator><operator pos:start="1692:71" pos:end="1692:71">&amp;</operator><name pos:start="1692:72" pos:end="1692:78">my_addr</name></expr></argument>, <argument pos:start="1692:81" pos:end="1692:84"><expr pos:start="1692:81" pos:end="1692:84"><operator pos:start="1692:81" pos:end="1692:81">&amp;</operator><name pos:start="1692:82" pos:end="1692:84">len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1693:33" pos:end="1693:67"><block_content pos:start="1693:33" pos:end="1693:67">
                                <expr_stmt pos:start="1693:33" pos:end="1693:67"><expr pos:start="1693:33" pos:end="1693:66"><call pos:start="1693:33" pos:end="1693:66"><name pos:start="1693:33" pos:end="1693:40">http_log</name><argument_list pos:start="1693:41" pos:end="1693:66">(<argument pos:start="1693:42" pos:end="1693:65"><expr pos:start="1693:42" pos:end="1693:65"><literal type="string" pos:start="1693:42" pos:end="1693:65">"getsockname() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <comment type="block" pos:start="1695:29" pos:end="1695:66">/* XXX: should use a dynamic buffer */</comment>
                            <expr_stmt pos:start="1696:29" pos:end="1698:86"><expr pos:start="1696:29" pos:end="1698:85"><name pos:start="1696:29" pos:end="1696:41">sdp_data_size</name> <operator pos:start="1696:43" pos:end="1696:43">=</operator> <call pos:start="1696:45" pos:end="1698:85"><name pos:start="1696:45" pos:end="1696:67">prepare_sdp_description</name><argument_list pos:start="1696:68" pos:end="1698:85">(<argument pos:start="1696:69" pos:end="1696:74"><expr pos:start="1696:69" pos:end="1696:74"><name pos:start="1696:69" pos:end="1696:74">stream</name></expr></argument>,
                                                                    <argument pos:start="1697:69" pos:end="1697:77"><expr pos:start="1697:69" pos:end="1697:77"><operator pos:start="1697:69" pos:end="1697:69">&amp;</operator><name pos:start="1697:70" pos:end="1697:77">sdp_data</name></expr></argument>,
                                                                    <argument pos:start="1698:69" pos:end="1698:84"><expr pos:start="1698:69" pos:end="1698:84"><name pos:start="1698:69" pos:end="1698:84"><name pos:start="1698:69" pos:end="1698:75">my_addr</name><operator pos:start="1698:76" pos:end="1698:76">.</operator><name pos:start="1698:77" pos:end="1698:84">sin_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if_stmt pos:start="1699:29" pos:end="1704:29"><if pos:start="1699:29" pos:end="1704:29">if <condition pos:start="1699:32" pos:end="1699:50">(<expr pos:start="1699:33" pos:end="1699:49"><name pos:start="1699:33" pos:end="1699:45">sdp_data_size</name> <operator pos:start="1699:47" pos:end="1699:47">&gt;</operator> <literal type="number" pos:start="1699:49" pos:end="1699:49">0</literal></expr>)</condition> <block pos:start="1699:52" pos:end="1704:29">{<block_content pos:start="1700:33" pos:end="1703:52">
                                <expr_stmt pos:start="1700:33" pos:end="1700:67"><expr pos:start="1700:33" pos:end="1700:66"><call pos:start="1700:33" pos:end="1700:66"><name pos:start="1700:33" pos:end="1700:38">memcpy</name><argument_list pos:start="1700:39" pos:end="1700:66">(<argument pos:start="1700:40" pos:end="1700:40"><expr pos:start="1700:40" pos:end="1700:40"><name pos:start="1700:40" pos:end="1700:40">q</name></expr></argument>, <argument pos:start="1700:43" pos:end="1700:50"><expr pos:start="1700:43" pos:end="1700:50"><name pos:start="1700:43" pos:end="1700:50">sdp_data</name></expr></argument>, <argument pos:start="1700:53" pos:end="1700:65"><expr pos:start="1700:53" pos:end="1700:65"><name pos:start="1700:53" pos:end="1700:65">sdp_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt pos:start="1701:33" pos:end="1701:51"><expr pos:start="1701:33" pos:end="1701:50"><name pos:start="1701:33" pos:end="1701:33">q</name> <operator pos:start="1701:35" pos:end="1701:36">+=</operator> <name pos:start="1701:38" pos:end="1701:50">sdp_data_size</name></expr>;</expr_stmt>
                                <expr_stmt pos:start="1702:33" pos:end="1702:42"><expr pos:start="1702:33" pos:end="1702:41"><operator pos:start="1702:33" pos:end="1702:33">*</operator><name pos:start="1702:34" pos:end="1702:34">q</name> <operator pos:start="1702:36" pos:end="1702:36">=</operator> <literal type="char" pos:start="1702:38" pos:end="1702:41">'\0'</literal></expr>;</expr_stmt>
                                <expr_stmt pos:start="1703:33" pos:end="1703:52"><expr pos:start="1703:33" pos:end="1703:51"><call pos:start="1703:33" pos:end="1703:51"><name pos:start="1703:33" pos:end="1703:40">av_freep</name><argument_list pos:start="1703:41" pos:end="1703:51">(<argument pos:start="1703:42" pos:end="1703:50"><expr pos:start="1703:42" pos:end="1703:50"><operator pos:start="1703:42" pos:end="1703:42">&amp;</operator><name pos:start="1703:43" pos:end="1703:50">sdp_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block>
                        <break pos:start="1706:25" pos:end="1706:30">break;</break>
                    <default pos:start="1707:21" pos:end="1707:28">default:</default>
                        <expr_stmt pos:start="1708:25" pos:end="1708:32"><expr pos:start="1708:25" pos:end="1708:31"><call pos:start="1708:25" pos:end="1708:31"><name pos:start="1708:25" pos:end="1708:29">abort</name><argument_list pos:start="1708:30" pos:end="1708:31">()</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1709:25" pos:end="1709:30">break;</break>
                    </block_content>}</block></switch>

                    <comment type="block" pos:start="1712:21" pos:end="1712:47">/* prepare output buffer */</comment>
                    <expr_stmt pos:start="1713:21" pos:end="1713:46"><expr pos:start="1713:21" pos:end="1713:45"><name pos:start="1713:21" pos:end="1713:33"><name pos:start="1713:21" pos:end="1713:21">c</name><operator pos:start="1713:22" pos:end="1713:23">-&gt;</operator><name pos:start="1713:24" pos:end="1713:33">buffer_ptr</name></name> <operator pos:start="1713:35" pos:end="1713:35">=</operator> <name pos:start="1713:37" pos:end="1713:45"><name pos:start="1713:37" pos:end="1713:37">c</name><operator pos:start="1713:38" pos:end="1713:39">-&gt;</operator><name pos:start="1713:40" pos:end="1713:45">buffer</name></name></expr>;</expr_stmt>
                    <expr_stmt pos:start="1714:21" pos:end="1714:38"><expr pos:start="1714:21" pos:end="1714:37"><name pos:start="1714:21" pos:end="1714:33"><name pos:start="1714:21" pos:end="1714:21">c</name><operator pos:start="1714:22" pos:end="1714:23">-&gt;</operator><name pos:start="1714:24" pos:end="1714:33">buffer_end</name></name> <operator pos:start="1714:35" pos:end="1714:35">=</operator> <name pos:start="1714:37" pos:end="1714:37">q</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="1715:21" pos:end="1715:53"><expr pos:start="1715:21" pos:end="1715:52"><name pos:start="1715:21" pos:end="1715:28"><name pos:start="1715:21" pos:end="1715:21">c</name><operator pos:start="1715:22" pos:end="1715:23">-&gt;</operator><name pos:start="1715:24" pos:end="1715:28">state</name></name> <operator pos:start="1715:30" pos:end="1715:30">=</operator> <name pos:start="1715:32" pos:end="1715:52">HTTPSTATE_SEND_HEADER</name></expr>;</expr_stmt>
                    <return pos:start="1716:21" pos:end="1716:29">return <expr pos:start="1716:28" pos:end="1716:28"><literal type="number" pos:start="1716:28" pos:end="1716:28">0</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="1721:9" pos:end="1721:63"><expr pos:start="1721:9" pos:end="1721:62"><call pos:start="1721:9" pos:end="1721:62"><name pos:start="1721:9" pos:end="1721:16">snprintf</name><argument_list pos:start="1721:17" pos:end="1721:62">(<argument pos:start="1721:18" pos:end="1721:20"><expr pos:start="1721:18" pos:end="1721:20"><name pos:start="1721:18" pos:end="1721:20">msg</name></expr></argument>, <argument pos:start="1721:23" pos:end="1721:33"><expr pos:start="1721:23" pos:end="1721:33"><sizeof pos:start="1721:23" pos:end="1721:33">sizeof<argument_list pos:start="1721:29" pos:end="1721:33">(<argument pos:start="1721:30" pos:end="1721:32"><expr pos:start="1721:30" pos:end="1721:32"><name pos:start="1721:30" pos:end="1721:32">msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1721:36" pos:end="1721:61"><expr pos:start="1721:36" pos:end="1721:61"><literal type="string" pos:start="1721:36" pos:end="1721:61">"ASX/RAM file not handled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="1722:9" pos:end="1722:24">goto <name pos:start="1722:14" pos:end="1722:23">send_error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1725:5" pos:end="1725:27"><expr pos:start="1725:5" pos:end="1725:26"><name pos:start="1725:5" pos:end="1725:24"><name pos:start="1725:5" pos:end="1725:10">stream</name><operator pos:start="1725:11" pos:end="1725:12">-&gt;</operator><name pos:start="1725:13" pos:end="1725:24">conns_served</name></name><operator pos:start="1725:25" pos:end="1725:26">++</operator></expr>;</expr_stmt>

    <comment type="block" pos:start="1727:5" pos:end="1727:50">/* XXX: add there authenticate and IP match */</comment>

    <if_stmt pos:start="1729:5" pos:end="1795:0"><if pos:start="1729:5" pos:end="1795:0">if <condition pos:start="1729:8" pos:end="1729:16">(<expr pos:start="1729:9" pos:end="1729:15"><name pos:start="1729:9" pos:end="1729:15"><name pos:start="1729:9" pos:end="1729:9">c</name><operator pos:start="1729:10" pos:end="1729:11">-&gt;</operator><name pos:start="1729:12" pos:end="1729:15">post</name></name></expr>)</condition> <block pos:start="1729:18" pos:end="1795:0">{<block_content pos:start="1731:9" pos:end="1791:17">
        <comment type="block" pos:start="1730:9" pos:end="1730:52">/* if post, it means a feed is being sent */</comment>
        <if_stmt pos:start="1731:9" pos:end="1784:9"><if pos:start="1731:9" pos:end="1784:9">if <condition pos:start="1731:12" pos:end="1731:29">(<expr pos:start="1731:13" pos:end="1731:28"><operator pos:start="1731:13" pos:end="1731:13">!</operator><name pos:start="1731:14" pos:end="1731:28"><name pos:start="1731:14" pos:end="1731:19">stream</name><operator pos:start="1731:20" pos:end="1731:21">-&gt;</operator><name pos:start="1731:22" pos:end="1731:28">is_feed</name></name></expr>)</condition> <block pos:start="1731:31" pos:end="1784:9">{<block_content pos:start="1734:13" pos:end="1783:28">
            <comment type="block" pos:start="1732:13" pos:end="1733:54">/* However it might be a status report from WMP! Let us log the
             * data as it might come handy one day. */</comment>
            <decl_stmt pos:start="1734:13" pos:end="1734:36"><decl pos:start="1734:13" pos:end="1734:35"><type pos:start="1734:13" pos:end="1734:24"><specifier pos:start="1734:13" pos:end="1734:17">const</specifier> <name pos:start="1734:19" pos:end="1734:22">char</name> <modifier pos:start="1734:24" pos:end="1734:24">*</modifier></type><name pos:start="1734:25" pos:end="1734:31">logline</name> <init pos:start="1734:33" pos:end="1734:35">= <expr pos:start="1734:35" pos:end="1734:35"><literal type="number" pos:start="1734:35" pos:end="1734:35">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="1735:13" pos:end="1735:30"><decl pos:start="1735:13" pos:end="1735:29"><type pos:start="1735:13" pos:end="1735:15"><name pos:start="1735:13" pos:end="1735:15">int</name></type> <name pos:start="1735:17" pos:end="1735:25">client_id</name> <init pos:start="1735:27" pos:end="1735:29">= <expr pos:start="1735:29" pos:end="1735:29"><literal type="number" pos:start="1735:29" pos:end="1735:29">0</literal></expr></init></decl>;</decl_stmt>

            <for pos:start="1737:13" pos:end="1749:13">for <control pos:start="1737:17" pos:end="1737:65">(<init pos:start="1737:18" pos:end="1737:31"><expr pos:start="1737:18" pos:end="1737:30"><name pos:start="1737:18" pos:end="1737:18">p</name> <operator pos:start="1737:20" pos:end="1737:20">=</operator> <name pos:start="1737:22" pos:end="1737:30"><name pos:start="1737:22" pos:end="1737:22">c</name><operator pos:start="1737:23" pos:end="1737:24">-&gt;</operator><name pos:start="1737:25" pos:end="1737:30">buffer</name></name></expr>;</init> <condition pos:start="1737:33" pos:end="1737:63"><expr pos:start="1737:33" pos:end="1737:62"><operator pos:start="1737:33" pos:end="1737:33">*</operator><name pos:start="1737:34" pos:end="1737:34">p</name> <operator pos:start="1737:36" pos:end="1737:37">&amp;&amp;</operator> <operator pos:start="1737:39" pos:end="1737:39">*</operator><name pos:start="1737:40" pos:end="1737:40">p</name> <operator pos:start="1737:42" pos:end="1737:43">!=</operator> <literal type="char" pos:start="1737:45" pos:end="1737:48">'\r'</literal> <operator pos:start="1737:50" pos:end="1737:51">&amp;&amp;</operator> <operator pos:start="1737:53" pos:end="1737:53">*</operator><name pos:start="1737:54" pos:end="1737:54">p</name> <operator pos:start="1737:56" pos:end="1737:57">!=</operator> <literal type="char" pos:start="1737:59" pos:end="1737:62">'\n'</literal></expr>;</condition> <incr/>)</control> <block pos:start="1737:67" pos:end="1749:13">{<block_content pos:start="1738:17" pos:end="1748:20">
                <if_stmt pos:start="1738:17" pos:end="1741:17"><if pos:start="1738:17" pos:end="1741:17">if <condition pos:start="1738:20" pos:end="1738:68">(<expr pos:start="1738:21" pos:end="1738:67"><call pos:start="1738:21" pos:end="1738:62"><name pos:start="1738:21" pos:end="1738:34">av_strncasecmp</name><argument_list pos:start="1738:35" pos:end="1738:62">(<argument pos:start="1738:36" pos:end="1738:36"><expr pos:start="1738:36" pos:end="1738:36"><name pos:start="1738:36" pos:end="1738:36">p</name></expr></argument>, <argument pos:start="1738:39" pos:end="1738:57"><expr pos:start="1738:39" pos:end="1738:57"><literal type="string" pos:start="1738:39" pos:end="1738:57">"Pragma: log-line="</literal></expr></argument>, <argument pos:start="1738:60" pos:end="1738:61"><expr pos:start="1738:60" pos:end="1738:61"><literal type="number" pos:start="1738:60" pos:end="1738:61">17</literal></expr></argument>)</argument_list></call> <operator pos:start="1738:64" pos:end="1738:65">==</operator> <literal type="number" pos:start="1738:67" pos:end="1738:67">0</literal></expr>)</condition> <block pos:start="1738:70" pos:end="1741:17">{<block_content pos:start="1739:21" pos:end="1740:26">
                    <expr_stmt pos:start="1739:21" pos:end="1739:32"><expr pos:start="1739:21" pos:end="1739:31"><name pos:start="1739:21" pos:end="1739:27">logline</name> <operator pos:start="1739:29" pos:end="1739:29">=</operator> <name pos:start="1739:31" pos:end="1739:31">p</name></expr>;</expr_stmt>
                    <break pos:start="1740:21" pos:end="1740:26">break;</break>
                </block_content>}</block></if></if_stmt>
                <if_stmt pos:start="1742:17" pos:end="1743:54"><if pos:start="1742:17" pos:end="1743:54">if <condition pos:start="1742:20" pos:end="1742:69">(<expr pos:start="1742:21" pos:end="1742:68"><call pos:start="1742:21" pos:end="1742:63"><name pos:start="1742:21" pos:end="1742:34">av_strncasecmp</name><argument_list pos:start="1742:35" pos:end="1742:63">(<argument pos:start="1742:36" pos:end="1742:36"><expr pos:start="1742:36" pos:end="1742:36"><name pos:start="1742:36" pos:end="1742:36">p</name></expr></argument>, <argument pos:start="1742:39" pos:end="1742:58"><expr pos:start="1742:39" pos:end="1742:58"><literal type="string" pos:start="1742:39" pos:end="1742:58">"Pragma: client-id="</literal></expr></argument>, <argument pos:start="1742:61" pos:end="1742:62"><expr pos:start="1742:61" pos:end="1742:62"><literal type="number" pos:start="1742:61" pos:end="1742:62">18</literal></expr></argument>)</argument_list></call> <operator pos:start="1742:65" pos:end="1742:66">==</operator> <literal type="number" pos:start="1742:68" pos:end="1742:68">0</literal></expr>)</condition><block type="pseudo" pos:start="1743:21" pos:end="1743:54"><block_content pos:start="1743:21" pos:end="1743:54">
                    <expr_stmt pos:start="1743:21" pos:end="1743:54"><expr pos:start="1743:21" pos:end="1743:53"><name pos:start="1743:21" pos:end="1743:29">client_id</name> <operator pos:start="1743:31" pos:end="1743:31">=</operator> <call pos:start="1743:33" pos:end="1743:53"><name pos:start="1743:33" pos:end="1743:38">strtol</name><argument_list pos:start="1743:39" pos:end="1743:53">(<argument pos:start="1743:40" pos:end="1743:45"><expr pos:start="1743:40" pos:end="1743:45"><name pos:start="1743:40" pos:end="1743:40">p</name> <operator pos:start="1743:42" pos:end="1743:42">+</operator> <literal type="number" pos:start="1743:44" pos:end="1743:45">18</literal></expr></argument>, <argument pos:start="1743:48" pos:end="1743:48"><expr pos:start="1743:48" pos:end="1743:48"><literal type="number" pos:start="1743:48" pos:end="1743:48">0</literal></expr></argument>, <argument pos:start="1743:51" pos:end="1743:52"><expr pos:start="1743:51" pos:end="1743:52"><literal type="number" pos:start="1743:51" pos:end="1743:52">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt pos:start="1744:17" pos:end="1744:36"><expr pos:start="1744:17" pos:end="1744:35"><name pos:start="1744:17" pos:end="1744:17">p</name> <operator pos:start="1744:19" pos:end="1744:19">=</operator> <call pos:start="1744:21" pos:end="1744:35"><name pos:start="1744:21" pos:end="1744:26">strchr</name><argument_list pos:start="1744:27" pos:end="1744:35">(<argument pos:start="1744:28" pos:end="1744:28"><expr pos:start="1744:28" pos:end="1744:28"><name pos:start="1744:28" pos:end="1744:28">p</name></expr></argument>, <argument pos:start="1744:31" pos:end="1744:34"><expr pos:start="1744:31" pos:end="1744:34"><literal type="char" pos:start="1744:31" pos:end="1744:34">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="1745:17" pos:end="1746:26"><if pos:start="1745:17" pos:end="1746:26">if <condition pos:start="1745:20" pos:end="1745:23">(<expr pos:start="1745:21" pos:end="1745:22"><operator pos:start="1745:21" pos:end="1745:21">!</operator><name pos:start="1745:22" pos:end="1745:22">p</name></expr>)</condition><block type="pseudo" pos:start="1746:21" pos:end="1746:26"><block_content pos:start="1746:21" pos:end="1746:26">
                    <break pos:start="1746:21" pos:end="1746:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1748:17" pos:end="1748:20"><expr pos:start="1748:17" pos:end="1748:19"><name pos:start="1748:17" pos:end="1748:17">p</name><operator pos:start="1748:18" pos:end="1748:19">++</operator></expr>;</expr_stmt>
            </block_content>}</block></for>

            <if_stmt pos:start="1751:13" pos:end="1765:0"><if pos:start="1751:13" pos:end="1765:0">if <condition pos:start="1751:16" pos:end="1751:24">(<expr pos:start="1751:17" pos:end="1751:23"><name pos:start="1751:17" pos:end="1751:23">logline</name></expr>)</condition> <block pos:start="1751:26" pos:end="1765:0">{<block_content pos:start="1752:17" pos:end="1761:17">
                <decl_stmt pos:start="1752:17" pos:end="1752:50"><decl pos:start="1752:17" pos:end="1752:49"><type pos:start="1752:17" pos:end="1752:22"><name pos:start="1752:17" pos:end="1752:20">char</name> <modifier pos:start="1752:22" pos:end="1752:22">*</modifier></type><name pos:start="1752:23" pos:end="1752:25">eol</name> <init pos:start="1752:27" pos:end="1752:49">= <expr pos:start="1752:29" pos:end="1752:49"><call pos:start="1752:29" pos:end="1752:49"><name pos:start="1752:29" pos:end="1752:34">strchr</name><argument_list pos:start="1752:35" pos:end="1752:49">(<argument pos:start="1752:36" pos:end="1752:42"><expr pos:start="1752:36" pos:end="1752:42"><name pos:start="1752:36" pos:end="1752:42">logline</name></expr></argument>, <argument pos:start="1752:45" pos:end="1752:48"><expr pos:start="1752:45" pos:end="1752:48"><literal type="char" pos:start="1752:45" pos:end="1752:48">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="1754:17" pos:end="1754:30"><expr pos:start="1754:17" pos:end="1754:29"><name pos:start="1754:17" pos:end="1754:23">logline</name> <operator pos:start="1754:25" pos:end="1754:26">+=</operator> <literal type="number" pos:start="1754:28" pos:end="1754:29">17</literal></expr>;</expr_stmt>

                <if_stmt pos:start="1756:17" pos:end="1761:17"><if pos:start="1756:17" pos:end="1761:17">if <condition pos:start="1756:20" pos:end="1756:24">(<expr pos:start="1756:21" pos:end="1756:23"><name pos:start="1756:21" pos:end="1756:23">eol</name></expr>)</condition> <block pos:start="1756:26" pos:end="1761:17">{<block_content pos:start="1757:21" pos:end="1760:40">
                    <if_stmt pos:start="1757:21" pos:end="1758:30"><if pos:start="1757:21" pos:end="1758:30">if <condition pos:start="1757:24" pos:end="1757:40">(<expr pos:start="1757:25" pos:end="1757:39"><name pos:start="1757:25" pos:end="1757:31"><name pos:start="1757:25" pos:end="1757:27">eol</name><index pos:start="1757:28" pos:end="1757:31">[<expr pos:start="1757:29" pos:end="1757:30"><operator pos:start="1757:29" pos:end="1757:29">-</operator><literal type="number" pos:start="1757:30" pos:end="1757:30">1</literal></expr>]</index></name> <operator pos:start="1757:33" pos:end="1757:34">==</operator> <literal type="char" pos:start="1757:36" pos:end="1757:39">'\r'</literal></expr>)</condition><block type="pseudo" pos:start="1758:25" pos:end="1758:30"><block_content pos:start="1758:25" pos:end="1758:30">
                        <expr_stmt pos:start="1758:25" pos:end="1758:30"><expr pos:start="1758:25" pos:end="1758:29"><name pos:start="1758:25" pos:end="1758:27">eol</name><operator pos:start="1758:28" pos:end="1758:29">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt pos:start="1759:21" pos:end="1759:71"><expr pos:start="1759:21" pos:end="1759:70"><call pos:start="1759:21" pos:end="1759:70"><name pos:start="1759:21" pos:end="1759:28">http_log</name><argument_list pos:start="1759:29" pos:end="1759:70">(<argument pos:start="1759:30" pos:end="1759:37"><expr pos:start="1759:30" pos:end="1759:37"><literal type="string" pos:start="1759:30" pos:end="1759:37">"%.*s\n"</literal></expr></argument>, <argument pos:start="1759:40" pos:end="1759:60"><expr pos:start="1759:40" pos:end="1759:60"><operator pos:start="1759:40" pos:end="1759:40">(</operator><name pos:start="1759:41" pos:end="1759:43">int</name><operator pos:start="1759:44" pos:end="1759:44">)</operator> <operator pos:start="1759:46" pos:end="1759:46">(</operator><name pos:start="1759:47" pos:end="1759:49">eol</name> <operator pos:start="1759:51" pos:end="1759:51">-</operator> <name pos:start="1759:53" pos:end="1759:59">logline</name><operator pos:start="1759:60" pos:end="1759:60">)</operator></expr></argument>, <argument pos:start="1759:63" pos:end="1759:69"><expr pos:start="1759:63" pos:end="1759:69"><name pos:start="1759:63" pos:end="1759:69">logline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1760:21" pos:end="1760:40"><expr pos:start="1760:21" pos:end="1760:39"><name pos:start="1760:21" pos:end="1760:35"><name pos:start="1760:21" pos:end="1760:21">c</name><operator pos:start="1760:22" pos:end="1760:23">-&gt;</operator><name pos:start="1760:24" pos:end="1760:35">suppress_log</name></name> <operator pos:start="1760:37" pos:end="1760:37">=</operator> <literal type="number" pos:start="1760:39" pos:end="1760:39">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="1764:1" pos:end="1764:12">#<cpp:directive pos:start="1764:2" pos:end="1764:6">ifdef</cpp:directive> <name pos:start="1764:8" pos:end="1764:12">DEBUG</name></cpp:ifdef>
            <expr_stmt pos:start="1765:13" pos:end="1767:0"><expr pos:start="1765:13" pos:end="1765:55"><call pos:start="1765:13" pos:end="1765:55"><name pos:start="1765:13" pos:end="1765:20">http_log</name><argument_list pos:start="1765:21" pos:end="1765:55">(<argument pos:start="1765:22" pos:end="1765:43"><expr pos:start="1765:22" pos:end="1765:43"><literal type="string" pos:start="1765:22" pos:end="1765:43">"\nGot request:\n%s\n"</literal></expr></argument>, <argument pos:start="1765:46" pos:end="1765:54"><expr pos:start="1765:46" pos:end="1765:54"><name pos:start="1765:46" pos:end="1765:54"><name pos:start="1765:46" pos:end="1765:46">c</name><operator pos:start="1765:47" pos:end="1765:48">-&gt;</operator><name pos:start="1765:49" pos:end="1765:54">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1766:1" pos:end="1766:6">#<cpp:directive pos:start="1766:2" pos:end="1766:6">endif</cpp:directive></cpp:endif>

            <if_stmt pos:start="1768:13" pos:end="1779:13"><if pos:start="1768:13" pos:end="1779:13">if <condition pos:start="1768:16" pos:end="1768:80">(<expr pos:start="1768:17" pos:end="1768:79"><name pos:start="1768:17" pos:end="1768:25">client_id</name> <operator pos:start="1768:27" pos:end="1768:28">&amp;&amp;</operator> <call pos:start="1768:30" pos:end="1768:79"><name pos:start="1768:30" pos:end="1768:42">extract_rates</name><argument_list pos:start="1768:43" pos:end="1768:79">(<argument pos:start="1768:44" pos:end="1768:50"><expr pos:start="1768:44" pos:end="1768:50"><name pos:start="1768:44" pos:end="1768:50">ratebuf</name></expr></argument>, <argument pos:start="1768:53" pos:end="1768:67"><expr pos:start="1768:53" pos:end="1768:67"><sizeof pos:start="1768:53" pos:end="1768:67">sizeof<argument_list pos:start="1768:59" pos:end="1768:67">(<argument pos:start="1768:60" pos:end="1768:66"><expr pos:start="1768:60" pos:end="1768:66"><name pos:start="1768:60" pos:end="1768:66">ratebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1768:70" pos:end="1768:78"><expr pos:start="1768:70" pos:end="1768:78"><name pos:start="1768:70" pos:end="1768:78"><name pos:start="1768:70" pos:end="1768:70">c</name><operator pos:start="1768:71" pos:end="1768:72">-&gt;</operator><name pos:start="1768:73" pos:end="1768:78">buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1768:82" pos:end="1779:13">{<block_content pos:start="1769:17" pos:end="1778:45">
                <decl_stmt pos:start="1769:17" pos:end="1769:34"><decl pos:start="1769:17" pos:end="1769:33"><type pos:start="1769:17" pos:end="1769:29"><name pos:start="1769:17" pos:end="1769:27">HTTPContext</name> <modifier pos:start="1769:29" pos:end="1769:29">*</modifier></type><name pos:start="1769:30" pos:end="1769:33">wmpc</name></decl>;</decl_stmt>

                <comment type="block" pos:start="1771:17" pos:end="1771:55">/* Now we have to find the client_id */</comment>
                <for pos:start="1772:17" pos:end="1775:17">for <control pos:start="1772:21" pos:end="1772:68">(<init pos:start="1772:22" pos:end="1772:43"><expr pos:start="1772:22" pos:end="1772:42"><name pos:start="1772:22" pos:end="1772:25">wmpc</name> <operator pos:start="1772:27" pos:end="1772:27">=</operator> <name pos:start="1772:29" pos:end="1772:42">first_http_ctx</name></expr>;</init> <condition pos:start="1772:45" pos:end="1772:49"><expr pos:start="1772:45" pos:end="1772:48"><name pos:start="1772:45" pos:end="1772:48">wmpc</name></expr>;</condition> <incr pos:start="1772:51" pos:end="1772:67"><expr pos:start="1772:51" pos:end="1772:67"><name pos:start="1772:51" pos:end="1772:54">wmpc</name> <operator pos:start="1772:56" pos:end="1772:56">=</operator> <name pos:start="1772:58" pos:end="1772:67"><name pos:start="1772:58" pos:end="1772:61">wmpc</name><operator pos:start="1772:62" pos:end="1772:63">-&gt;</operator><name pos:start="1772:64" pos:end="1772:67">next</name></name></expr></incr>)</control> <block pos:start="1772:70" pos:end="1775:17">{<block_content pos:start="1773:21" pos:end="1774:30">
                    <if_stmt pos:start="1773:21" pos:end="1774:30"><if pos:start="1773:21" pos:end="1774:30">if <condition pos:start="1773:24" pos:end="1773:57">(<expr pos:start="1773:25" pos:end="1773:56"><name pos:start="1773:25" pos:end="1773:43"><name pos:start="1773:25" pos:end="1773:28">wmpc</name><operator pos:start="1773:29" pos:end="1773:30">-&gt;</operator><name pos:start="1773:31" pos:end="1773:43">wmp_client_id</name></name> <operator pos:start="1773:45" pos:end="1773:46">==</operator> <name pos:start="1773:48" pos:end="1773:56">client_id</name></expr>)</condition><block type="pseudo" pos:start="1774:25" pos:end="1774:30"><block_content pos:start="1774:25" pos:end="1774:30">
                        <break pos:start="1774:25" pos:end="1774:30">break;</break></block_content></block></if></if_stmt>
                </block_content>}</block></for>

                <if_stmt pos:start="1777:17" pos:end="1778:45"><if pos:start="1777:17" pos:end="1778:45">if <condition pos:start="1777:20" pos:end="1777:65">(<expr pos:start="1777:21" pos:end="1777:64"><name pos:start="1777:21" pos:end="1777:24">wmpc</name> <operator pos:start="1777:26" pos:end="1777:27">&amp;&amp;</operator> <call pos:start="1777:29" pos:end="1777:64"><name pos:start="1777:29" pos:end="1777:49">modify_current_stream</name><argument_list pos:start="1777:50" pos:end="1777:64">(<argument pos:start="1777:51" pos:end="1777:54"><expr pos:start="1777:51" pos:end="1777:54"><name pos:start="1777:51" pos:end="1777:54">wmpc</name></expr></argument>, <argument pos:start="1777:57" pos:end="1777:63"><expr pos:start="1777:57" pos:end="1777:63"><name pos:start="1777:57" pos:end="1777:63">ratebuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1778:21" pos:end="1778:45"><block_content pos:start="1778:21" pos:end="1778:45">
                    <expr_stmt pos:start="1778:21" pos:end="1778:45"><expr pos:start="1778:21" pos:end="1778:44"><name pos:start="1778:21" pos:end="1778:40"><name pos:start="1778:21" pos:end="1778:24">wmpc</name><operator pos:start="1778:25" pos:end="1778:26">-&gt;</operator><name pos:start="1778:27" pos:end="1778:40">switch_pending</name></name> <operator pos:start="1778:42" pos:end="1778:42">=</operator> <literal type="number" pos:start="1778:44" pos:end="1778:44">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="1781:13" pos:end="1781:67"><expr pos:start="1781:13" pos:end="1781:66"><call pos:start="1781:13" pos:end="1781:66"><name pos:start="1781:13" pos:end="1781:20">snprintf</name><argument_list pos:start="1781:21" pos:end="1781:66">(<argument pos:start="1781:22" pos:end="1781:24"><expr pos:start="1781:22" pos:end="1781:24"><name pos:start="1781:22" pos:end="1781:24">msg</name></expr></argument>, <argument pos:start="1781:27" pos:end="1781:37"><expr pos:start="1781:27" pos:end="1781:37"><sizeof pos:start="1781:27" pos:end="1781:37">sizeof<argument_list pos:start="1781:33" pos:end="1781:37">(<argument pos:start="1781:34" pos:end="1781:36"><expr pos:start="1781:34" pos:end="1781:36"><name pos:start="1781:34" pos:end="1781:36">msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1781:40" pos:end="1781:65"><expr pos:start="1781:40" pos:end="1781:65"><literal type="string" pos:start="1781:40" pos:end="1781:65">"POST command not handled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1782:13" pos:end="1782:26"><expr pos:start="1782:13" pos:end="1782:25"><name pos:start="1782:13" pos:end="1782:21"><name pos:start="1782:13" pos:end="1782:13">c</name><operator pos:start="1782:14" pos:end="1782:15">-&gt;</operator><name pos:start="1782:16" pos:end="1782:21">stream</name></name> <operator pos:start="1782:23" pos:end="1782:23">=</operator> <literal type="number" pos:start="1782:25" pos:end="1782:25">0</literal></expr>;</expr_stmt>
            <goto pos:start="1783:13" pos:end="1783:28">goto <name pos:start="1783:18" pos:end="1783:27">send_error</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="1785:9" pos:end="1788:9"><if pos:start="1785:9" pos:end="1788:9">if <condition pos:start="1785:12" pos:end="1785:43">(<expr pos:start="1785:13" pos:end="1785:42"><call pos:start="1785:13" pos:end="1785:38"><name pos:start="1785:13" pos:end="1785:35">http_start_receive_data</name><argument_list pos:start="1785:36" pos:end="1785:38">(<argument pos:start="1785:37" pos:end="1785:37"><expr pos:start="1785:37" pos:end="1785:37"><name pos:start="1785:37" pos:end="1785:37">c</name></expr></argument>)</argument_list></call> <operator pos:start="1785:40" pos:end="1785:40">&lt;</operator> <literal type="number" pos:start="1785:42" pos:end="1785:42">0</literal></expr>)</condition> <block pos:start="1785:45" pos:end="1788:9">{<block_content pos:start="1786:13" pos:end="1787:28">
            <expr_stmt pos:start="1786:13" pos:end="1786:62"><expr pos:start="1786:13" pos:end="1786:61"><call pos:start="1786:13" pos:end="1786:61"><name pos:start="1786:13" pos:end="1786:20">snprintf</name><argument_list pos:start="1786:21" pos:end="1786:61">(<argument pos:start="1786:22" pos:end="1786:24"><expr pos:start="1786:22" pos:end="1786:24"><name pos:start="1786:22" pos:end="1786:24">msg</name></expr></argument>, <argument pos:start="1786:27" pos:end="1786:37"><expr pos:start="1786:27" pos:end="1786:37"><sizeof pos:start="1786:27" pos:end="1786:37">sizeof<argument_list pos:start="1786:33" pos:end="1786:37">(<argument pos:start="1786:34" pos:end="1786:36"><expr pos:start="1786:34" pos:end="1786:36"><name pos:start="1786:34" pos:end="1786:36">msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1786:40" pos:end="1786:60"><expr pos:start="1786:40" pos:end="1786:60"><literal type="string" pos:start="1786:40" pos:end="1786:60">"could not open feed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto pos:start="1787:13" pos:end="1787:28">goto <name pos:start="1787:18" pos:end="1787:27">send_error</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="1789:9" pos:end="1789:26"><expr pos:start="1789:9" pos:end="1789:25"><name pos:start="1789:9" pos:end="1789:21"><name pos:start="1789:9" pos:end="1789:9">c</name><operator pos:start="1789:10" pos:end="1789:11">-&gt;</operator><name pos:start="1789:12" pos:end="1789:21">http_error</name></name> <operator pos:start="1789:23" pos:end="1789:23">=</operator> <literal type="number" pos:start="1789:25" pos:end="1789:25">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1790:9" pos:end="1790:42"><expr pos:start="1790:9" pos:end="1790:41"><name pos:start="1790:9" pos:end="1790:16"><name pos:start="1790:9" pos:end="1790:9">c</name><operator pos:start="1790:10" pos:end="1790:11">-&gt;</operator><name pos:start="1790:12" pos:end="1790:16">state</name></name> <operator pos:start="1790:18" pos:end="1790:18">=</operator> <name pos:start="1790:20" pos:end="1790:41">HTTPSTATE_RECEIVE_DATA</name></expr>;</expr_stmt>
        <return pos:start="1791:9" pos:end="1791:17">return <expr pos:start="1791:16" pos:end="1791:16"><literal type="number" pos:start="1791:16" pos:end="1791:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="1794:1" pos:end="1794:12">#<cpp:directive pos:start="1794:2" pos:end="1794:6">ifdef</cpp:directive> <name pos:start="1794:8" pos:end="1794:12">DEBUG</name></cpp:ifdef>
    <if_stmt pos:start="1795:5" pos:end="1798:0"><if pos:start="1795:5" pos:end="1798:0">if <condition pos:start="1795:8" pos:end="1795:77">(<expr pos:start="1795:9" pos:end="1795:76"><call pos:start="1795:9" pos:end="1795:71"><name pos:start="1795:9" pos:end="1795:14">strcmp</name><argument_list pos:start="1795:15" pos:end="1795:71">(<argument pos:start="1795:16" pos:end="1795:62"><expr pos:start="1795:16" pos:end="1795:62"><name pos:start="1795:16" pos:end="1795:31"><name pos:start="1795:16" pos:end="1795:21">stream</name><operator pos:start="1795:22" pos:end="1795:23">-&gt;</operator><name pos:start="1795:24" pos:end="1795:31">filename</name></name> <operator pos:start="1795:33" pos:end="1795:33">+</operator> <call pos:start="1795:35" pos:end="1795:58"><name pos:start="1795:35" pos:end="1795:40">strlen</name><argument_list pos:start="1795:41" pos:end="1795:58">(<argument pos:start="1795:42" pos:end="1795:57"><expr pos:start="1795:42" pos:end="1795:57"><name pos:start="1795:42" pos:end="1795:57"><name pos:start="1795:42" pos:end="1795:47">stream</name><operator pos:start="1795:48" pos:end="1795:49">-&gt;</operator><name pos:start="1795:50" pos:end="1795:57">filename</name></name></expr></argument>)</argument_list></call> <operator pos:start="1795:60" pos:end="1795:60">-</operator> <literal type="number" pos:start="1795:62" pos:end="1795:62">4</literal></expr></argument>, <argument pos:start="1795:65" pos:end="1795:70"><expr pos:start="1795:65" pos:end="1795:70"><literal type="string" pos:start="1795:65" pos:end="1795:70">".asf"</literal></expr></argument>)</argument_list></call> <operator pos:start="1795:73" pos:end="1795:74">==</operator> <literal type="number" pos:start="1795:76" pos:end="1795:76">0</literal></expr>)</condition><block type="pseudo" pos:start="1796:9" pos:end="1798:0"><block_content pos:start="1796:9" pos:end="1798:0">
        <expr_stmt pos:start="1796:9" pos:end="1798:0"><expr pos:start="1796:9" pos:end="1796:51"><call pos:start="1796:9" pos:end="1796:51"><name pos:start="1796:9" pos:end="1796:16">http_log</name><argument_list pos:start="1796:17" pos:end="1796:51">(<argument pos:start="1796:18" pos:end="1796:39"><expr pos:start="1796:18" pos:end="1796:39"><literal type="string" pos:start="1796:18" pos:end="1796:39">"\nGot request:\n%s\n"</literal></expr></argument>, <argument pos:start="1796:42" pos:end="1796:50"><expr pos:start="1796:42" pos:end="1796:50"><name pos:start="1796:42" pos:end="1796:50"><name pos:start="1796:42" pos:end="1796:42">c</name><operator pos:start="1796:43" pos:end="1796:44">-&gt;</operator><name pos:start="1796:45" pos:end="1796:50">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif pos:start="1797:1" pos:end="1797:6">#<cpp:directive pos:start="1797:2" pos:end="1797:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="1799:5" pos:end="1800:25"><if pos:start="1799:5" pos:end="1800:25">if <condition pos:start="1799:8" pos:end="1799:53">(<expr pos:start="1799:9" pos:end="1799:52"><name pos:start="1799:9" pos:end="1799:30"><name pos:start="1799:9" pos:end="1799:9">c</name><operator pos:start="1799:10" pos:end="1799:11">-&gt;</operator><name pos:start="1799:12" pos:end="1799:17">stream</name><operator pos:start="1799:18" pos:end="1799:19">-&gt;</operator><name pos:start="1799:20" pos:end="1799:30">stream_type</name></name> <operator pos:start="1799:32" pos:end="1799:33">==</operator> <name pos:start="1799:35" pos:end="1799:52">STREAM_TYPE_STATUS</name></expr>)</condition><block type="pseudo" pos:start="1800:9" pos:end="1800:25"><block_content pos:start="1800:9" pos:end="1800:25">
        <goto pos:start="1800:9" pos:end="1800:25">goto <name pos:start="1800:14" pos:end="1800:24">send_status</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block" pos:start="1802:5" pos:end="1802:27">/* open input stream */</comment>
    <if_stmt pos:start="1803:5" pos:end="1806:5"><if pos:start="1803:5" pos:end="1806:5">if <condition pos:start="1803:8" pos:end="1803:39">(<expr pos:start="1803:9" pos:end="1803:38"><call pos:start="1803:9" pos:end="1803:34"><name pos:start="1803:9" pos:end="1803:25">open_input_stream</name><argument_list pos:start="1803:26" pos:end="1803:34">(<argument pos:start="1803:27" pos:end="1803:27"><expr pos:start="1803:27" pos:end="1803:27"><name pos:start="1803:27" pos:end="1803:27">c</name></expr></argument>, <argument pos:start="1803:30" pos:end="1803:33"><expr pos:start="1803:30" pos:end="1803:33"><name pos:start="1803:30" pos:end="1803:33">info</name></expr></argument>)</argument_list></call> <operator pos:start="1803:36" pos:end="1803:36">&lt;</operator> <literal type="number" pos:start="1803:38" pos:end="1803:38">0</literal></expr>)</condition> <block pos:start="1803:41" pos:end="1806:5">{<block_content pos:start="1804:9" pos:end="1805:24">
        <expr_stmt pos:start="1804:9" pos:end="1804:88"><expr pos:start="1804:9" pos:end="1804:87"><call pos:start="1804:9" pos:end="1804:87"><name pos:start="1804:9" pos:end="1804:16">snprintf</name><argument_list pos:start="1804:17" pos:end="1804:87">(<argument pos:start="1804:18" pos:end="1804:20"><expr pos:start="1804:18" pos:end="1804:20"><name pos:start="1804:18" pos:end="1804:20">msg</name></expr></argument>, <argument pos:start="1804:23" pos:end="1804:33"><expr pos:start="1804:23" pos:end="1804:33"><sizeof pos:start="1804:23" pos:end="1804:33">sizeof<argument_list pos:start="1804:29" pos:end="1804:33">(<argument pos:start="1804:30" pos:end="1804:32"><expr pos:start="1804:30" pos:end="1804:32"><name pos:start="1804:30" pos:end="1804:32">msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1804:36" pos:end="1804:81"><expr pos:start="1804:36" pos:end="1804:81"><literal type="string" pos:start="1804:36" pos:end="1804:81">"Input stream corresponding to '%s' not found"</literal></expr></argument>, <argument pos:start="1804:84" pos:end="1804:86"><expr pos:start="1804:84" pos:end="1804:86"><name pos:start="1804:84" pos:end="1804:86">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="1805:9" pos:end="1805:24">goto <name pos:start="1805:14" pos:end="1805:23">send_error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1808:5" pos:end="1808:29">/* prepare HTTP header */</comment>
    <expr_stmt pos:start="1809:5" pos:end="1809:21"><expr pos:start="1809:5" pos:end="1809:20"><name pos:start="1809:5" pos:end="1809:16"><name pos:start="1809:5" pos:end="1809:5">c</name><operator pos:start="1809:6" pos:end="1809:7">-&gt;</operator><name pos:start="1809:8" pos:end="1809:13">buffer</name><index pos:start="1809:14" pos:end="1809:16">[<expr pos:start="1809:15" pos:end="1809:15"><literal type="number" pos:start="1809:15" pos:end="1809:15">0</literal></expr>]</index></name> <operator pos:start="1809:18" pos:end="1809:18">=</operator> <literal type="number" pos:start="1809:20" pos:end="1809:20">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="1810:5" pos:end="1810:66"><expr pos:start="1810:5" pos:end="1810:65"><call pos:start="1810:5" pos:end="1810:65"><name pos:start="1810:5" pos:end="1810:15">av_strlcatf</name><argument_list pos:start="1810:16" pos:end="1810:65">(<argument pos:start="1810:17" pos:end="1810:25"><expr pos:start="1810:17" pos:end="1810:25"><name pos:start="1810:17" pos:end="1810:25"><name pos:start="1810:17" pos:end="1810:17">c</name><operator pos:start="1810:18" pos:end="1810:19">-&gt;</operator><name pos:start="1810:20" pos:end="1810:25">buffer</name></name></expr></argument>, <argument pos:start="1810:28" pos:end="1810:41"><expr pos:start="1810:28" pos:end="1810:41"><name pos:start="1810:28" pos:end="1810:41"><name pos:start="1810:28" pos:end="1810:28">c</name><operator pos:start="1810:29" pos:end="1810:30">-&gt;</operator><name pos:start="1810:31" pos:end="1810:41">buffer_size</name></name></expr></argument>, <argument pos:start="1810:44" pos:end="1810:64"><expr pos:start="1810:44" pos:end="1810:64"><literal type="string" pos:start="1810:44" pos:end="1810:64">"HTTP/1.0 200 OK\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1811:5" pos:end="1811:42"><expr pos:start="1811:5" pos:end="1811:41"><name pos:start="1811:5" pos:end="1811:13">mime_type</name> <operator pos:start="1811:15" pos:end="1811:15">=</operator> <name pos:start="1811:17" pos:end="1811:41"><name pos:start="1811:17" pos:end="1811:17">c</name><operator pos:start="1811:18" pos:end="1811:19">-&gt;</operator><name pos:start="1811:20" pos:end="1811:25">stream</name><operator pos:start="1811:26" pos:end="1811:27">-&gt;</operator><name pos:start="1811:28" pos:end="1811:30">fmt</name><operator pos:start="1811:31" pos:end="1811:32">-&gt;</operator><name pos:start="1811:33" pos:end="1811:41">mime_type</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="1812:5" pos:end="1813:49"><if pos:start="1812:5" pos:end="1813:49">if <condition pos:start="1812:8" pos:end="1812:19">(<expr pos:start="1812:9" pos:end="1812:18"><operator pos:start="1812:9" pos:end="1812:9">!</operator><name pos:start="1812:10" pos:end="1812:18">mime_type</name></expr>)</condition><block type="pseudo" pos:start="1813:9" pos:end="1813:49"><block_content pos:start="1813:9" pos:end="1813:49">
        <expr_stmt pos:start="1813:9" pos:end="1813:49"><expr pos:start="1813:9" pos:end="1813:48"><name pos:start="1813:9" pos:end="1813:17">mime_type</name> <operator pos:start="1813:19" pos:end="1813:19">=</operator> <literal type="string" pos:start="1813:21" pos:end="1813:48">"application/x-octet-stream"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="1814:5" pos:end="1814:67"><expr pos:start="1814:5" pos:end="1814:66"><call pos:start="1814:5" pos:end="1814:66"><name pos:start="1814:5" pos:end="1814:15">av_strlcatf</name><argument_list pos:start="1814:16" pos:end="1814:66">(<argument pos:start="1814:17" pos:end="1814:25"><expr pos:start="1814:17" pos:end="1814:25"><name pos:start="1814:17" pos:end="1814:25"><name pos:start="1814:17" pos:end="1814:17">c</name><operator pos:start="1814:18" pos:end="1814:19">-&gt;</operator><name pos:start="1814:20" pos:end="1814:25">buffer</name></name></expr></argument>, <argument pos:start="1814:28" pos:end="1814:41"><expr pos:start="1814:28" pos:end="1814:41"><name pos:start="1814:28" pos:end="1814:41"><name pos:start="1814:28" pos:end="1814:28">c</name><operator pos:start="1814:29" pos:end="1814:30">-&gt;</operator><name pos:start="1814:31" pos:end="1814:41">buffer_size</name></name></expr></argument>, <argument pos:start="1814:44" pos:end="1814:65"><expr pos:start="1814:44" pos:end="1814:65"><literal type="string" pos:start="1814:44" pos:end="1814:65">"Pragma: no-cache\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1816:5" pos:end="1816:40">/* for asf, we need extra headers */</comment>
    <if_stmt pos:start="1817:5" pos:end="1823:5"><if pos:start="1817:5" pos:end="1823:5">if <condition pos:start="1817:8" pos:end="1817:51">(<expr pos:start="1817:9" pos:end="1817:50"><operator pos:start="1817:9" pos:end="1817:9">!</operator><call pos:start="1817:10" pos:end="1817:50"><name pos:start="1817:10" pos:end="1817:15">strcmp</name><argument_list pos:start="1817:16" pos:end="1817:50">(<argument pos:start="1817:17" pos:end="1817:36"><expr pos:start="1817:17" pos:end="1817:36"><name pos:start="1817:17" pos:end="1817:36"><name pos:start="1817:17" pos:end="1817:17">c</name><operator pos:start="1817:18" pos:end="1817:19">-&gt;</operator><name pos:start="1817:20" pos:end="1817:25">stream</name><operator pos:start="1817:26" pos:end="1817:27">-&gt;</operator><name pos:start="1817:28" pos:end="1817:30">fmt</name><operator pos:start="1817:31" pos:end="1817:32">-&gt;</operator><name pos:start="1817:33" pos:end="1817:36">name</name></name></expr></argument>,<argument pos:start="1817:38" pos:end="1817:49"><expr pos:start="1817:38" pos:end="1817:49"><literal type="string" pos:start="1817:38" pos:end="1817:49">"asf_stream"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1817:53" pos:end="1823:5">{<block_content pos:start="1820:9" pos:end="1822:183">
        <comment type="block" pos:start="1818:9" pos:end="1818:42">/* Need to allocate a client id */</comment>

        <expr_stmt pos:start="1820:9" pos:end="1820:53"><expr pos:start="1820:9" pos:end="1820:52"><name pos:start="1820:9" pos:end="1820:24"><name pos:start="1820:9" pos:end="1820:9">c</name><operator pos:start="1820:10" pos:end="1820:11">-&gt;</operator><name pos:start="1820:12" pos:end="1820:24">wmp_client_id</name></name> <operator pos:start="1820:26" pos:end="1820:26">=</operator> <call pos:start="1820:28" pos:end="1820:52"><name pos:start="1820:28" pos:end="1820:37">av_lfg_get</name><argument_list pos:start="1820:38" pos:end="1820:52">(<argument pos:start="1820:39" pos:end="1820:51"><expr pos:start="1820:39" pos:end="1820:51"><operator pos:start="1820:39" pos:end="1820:39">&amp;</operator><name pos:start="1820:40" pos:end="1820:51">random_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1822:9" pos:end="1822:183"><expr pos:start="1822:9" pos:end="1822:182"><call pos:start="1822:9" pos:end="1822:182"><name pos:start="1822:9" pos:end="1822:19">av_strlcatf</name><argument_list pos:start="1822:20" pos:end="1822:182">(<argument pos:start="1822:21" pos:end="1822:29"><expr pos:start="1822:21" pos:end="1822:29"><name pos:start="1822:21" pos:end="1822:29"><name pos:start="1822:21" pos:end="1822:21">c</name><operator pos:start="1822:22" pos:end="1822:23">-&gt;</operator><name pos:start="1822:24" pos:end="1822:29">buffer</name></name></expr></argument>, <argument pos:start="1822:32" pos:end="1822:45"><expr pos:start="1822:32" pos:end="1822:45"><name pos:start="1822:32" pos:end="1822:45"><name pos:start="1822:32" pos:end="1822:32">c</name><operator pos:start="1822:33" pos:end="1822:34">-&gt;</operator><name pos:start="1822:35" pos:end="1822:45">buffer_size</name></name></expr></argument>, <argument pos:start="1822:48" pos:end="1822:163"><expr pos:start="1822:48" pos:end="1822:163"><literal type="string" pos:start="1822:48" pos:end="1822:163">"Server: Cougar 4.1.0.3923\r\nCache-Control: no-cache\r\nPragma: client-id=%d\r\nPragma: features=\"broadcast\"\r\n"</literal></expr></argument>, <argument pos:start="1822:166" pos:end="1822:181"><expr pos:start="1822:166" pos:end="1822:181"><name pos:start="1822:166" pos:end="1822:181"><name pos:start="1822:166" pos:end="1822:166">c</name><operator pos:start="1822:167" pos:end="1822:168">-&gt;</operator><name pos:start="1822:169" pos:end="1822:181">wmp_client_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1824:5" pos:end="1824:78"><expr pos:start="1824:5" pos:end="1824:77"><call pos:start="1824:5" pos:end="1824:77"><name pos:start="1824:5" pos:end="1824:15">av_strlcatf</name><argument_list pos:start="1824:16" pos:end="1824:77">(<argument pos:start="1824:17" pos:end="1824:25"><expr pos:start="1824:17" pos:end="1824:25"><name pos:start="1824:17" pos:end="1824:25"><name pos:start="1824:17" pos:end="1824:17">c</name><operator pos:start="1824:18" pos:end="1824:19">-&gt;</operator><name pos:start="1824:20" pos:end="1824:25">buffer</name></name></expr></argument>, <argument pos:start="1824:28" pos:end="1824:41"><expr pos:start="1824:28" pos:end="1824:41"><name pos:start="1824:28" pos:end="1824:41"><name pos:start="1824:28" pos:end="1824:28">c</name><operator pos:start="1824:29" pos:end="1824:30">-&gt;</operator><name pos:start="1824:31" pos:end="1824:41">buffer_size</name></name></expr></argument>, <argument pos:start="1824:44" pos:end="1824:65"><expr pos:start="1824:44" pos:end="1824:65"><literal type="string" pos:start="1824:44" pos:end="1824:65">"Content-Type: %s\r\n"</literal></expr></argument>, <argument pos:start="1824:68" pos:end="1824:76"><expr pos:start="1824:68" pos:end="1824:76"><name pos:start="1824:68" pos:end="1824:76">mime_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1825:5" pos:end="1825:51"><expr pos:start="1825:5" pos:end="1825:50"><call pos:start="1825:5" pos:end="1825:50"><name pos:start="1825:5" pos:end="1825:15">av_strlcatf</name><argument_list pos:start="1825:16" pos:end="1825:50">(<argument pos:start="1825:17" pos:end="1825:25"><expr pos:start="1825:17" pos:end="1825:25"><name pos:start="1825:17" pos:end="1825:25"><name pos:start="1825:17" pos:end="1825:17">c</name><operator pos:start="1825:18" pos:end="1825:19">-&gt;</operator><name pos:start="1825:20" pos:end="1825:25">buffer</name></name></expr></argument>, <argument pos:start="1825:28" pos:end="1825:41"><expr pos:start="1825:28" pos:end="1825:41"><name pos:start="1825:28" pos:end="1825:41"><name pos:start="1825:28" pos:end="1825:28">c</name><operator pos:start="1825:29" pos:end="1825:30">-&gt;</operator><name pos:start="1825:31" pos:end="1825:41">buffer_size</name></name></expr></argument>, <argument pos:start="1825:44" pos:end="1825:49"><expr pos:start="1825:44" pos:end="1825:49"><literal type="string" pos:start="1825:44" pos:end="1825:49">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1826:5" pos:end="1826:38"><expr pos:start="1826:5" pos:end="1826:37"><name pos:start="1826:5" pos:end="1826:5">q</name> <operator pos:start="1826:7" pos:end="1826:7">=</operator> <name pos:start="1826:9" pos:end="1826:17"><name pos:start="1826:9" pos:end="1826:9">c</name><operator pos:start="1826:10" pos:end="1826:11">-&gt;</operator><name pos:start="1826:12" pos:end="1826:17">buffer</name></name> <operator pos:start="1826:19" pos:end="1826:19">+</operator> <call pos:start="1826:21" pos:end="1826:37"><name pos:start="1826:21" pos:end="1826:26">strlen</name><argument_list pos:start="1826:27" pos:end="1826:37">(<argument pos:start="1826:28" pos:end="1826:36"><expr pos:start="1826:28" pos:end="1826:36"><name pos:start="1826:28" pos:end="1826:36"><name pos:start="1826:28" pos:end="1826:28">c</name><operator pos:start="1826:29" pos:end="1826:30">-&gt;</operator><name pos:start="1826:31" pos:end="1826:36">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1828:5" pos:end="1828:31">/* prepare output buffer */</comment>
    <expr_stmt pos:start="1829:5" pos:end="1829:22"><expr pos:start="1829:5" pos:end="1829:21"><name pos:start="1829:5" pos:end="1829:17"><name pos:start="1829:5" pos:end="1829:5">c</name><operator pos:start="1829:6" pos:end="1829:7">-&gt;</operator><name pos:start="1829:8" pos:end="1829:17">http_error</name></name> <operator pos:start="1829:19" pos:end="1829:19">=</operator> <literal type="number" pos:start="1829:21" pos:end="1829:21">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="1830:5" pos:end="1830:30"><expr pos:start="1830:5" pos:end="1830:29"><name pos:start="1830:5" pos:end="1830:17"><name pos:start="1830:5" pos:end="1830:5">c</name><operator pos:start="1830:6" pos:end="1830:7">-&gt;</operator><name pos:start="1830:8" pos:end="1830:17">buffer_ptr</name></name> <operator pos:start="1830:19" pos:end="1830:19">=</operator> <name pos:start="1830:21" pos:end="1830:29"><name pos:start="1830:21" pos:end="1830:21">c</name><operator pos:start="1830:22" pos:end="1830:23">-&gt;</operator><name pos:start="1830:24" pos:end="1830:29">buffer</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="1831:5" pos:end="1831:22"><expr pos:start="1831:5" pos:end="1831:21"><name pos:start="1831:5" pos:end="1831:17"><name pos:start="1831:5" pos:end="1831:5">c</name><operator pos:start="1831:6" pos:end="1831:7">-&gt;</operator><name pos:start="1831:8" pos:end="1831:17">buffer_end</name></name> <operator pos:start="1831:19" pos:end="1831:19">=</operator> <name pos:start="1831:21" pos:end="1831:21">q</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1832:5" pos:end="1832:37"><expr pos:start="1832:5" pos:end="1832:36"><name pos:start="1832:5" pos:end="1832:12"><name pos:start="1832:5" pos:end="1832:5">c</name><operator pos:start="1832:6" pos:end="1832:7">-&gt;</operator><name pos:start="1832:8" pos:end="1832:12">state</name></name> <operator pos:start="1832:14" pos:end="1832:14">=</operator> <name pos:start="1832:16" pos:end="1832:36">HTTPSTATE_SEND_HEADER</name></expr>;</expr_stmt>
    <return pos:start="1833:5" pos:end="1833:13">return <expr pos:start="1833:12" pos:end="1833:12"><literal type="number" pos:start="1833:12" pos:end="1833:12">0</literal></expr>;</return>
 <label pos:start="1834:2" pos:end="1834:12"><name pos:start="1834:2" pos:end="1834:11">send_error</name>:</label>
    <expr_stmt pos:start="1835:5" pos:end="1835:24"><expr pos:start="1835:5" pos:end="1835:23"><name pos:start="1835:5" pos:end="1835:17"><name pos:start="1835:5" pos:end="1835:5">c</name><operator pos:start="1835:6" pos:end="1835:7">-&gt;</operator><name pos:start="1835:8" pos:end="1835:17">http_error</name></name> <operator pos:start="1835:19" pos:end="1835:19">=</operator> <literal type="number" pos:start="1835:21" pos:end="1835:23">404</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="1836:5" pos:end="1836:18"><expr pos:start="1836:5" pos:end="1836:17"><name pos:start="1836:5" pos:end="1836:5">q</name> <operator pos:start="1836:7" pos:end="1836:7">=</operator> <name pos:start="1836:9" pos:end="1836:17"><name pos:start="1836:9" pos:end="1836:9">c</name><operator pos:start="1836:10" pos:end="1836:11">-&gt;</operator><name pos:start="1836:12" pos:end="1836:17">buffer</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="1837:5" pos:end="1839:5"><if pos:start="1837:5" pos:end="1839:5">if <condition pos:start="1837:8" pos:end="1837:39">(<expr pos:start="1837:9" pos:end="1837:38"><operator pos:start="1837:9" pos:end="1837:9">!</operator><call pos:start="1837:10" pos:end="1837:38"><name pos:start="1837:10" pos:end="1837:19">htmlencode</name><argument_list pos:start="1837:20" pos:end="1837:38">(<argument pos:start="1837:21" pos:end="1837:23"><expr pos:start="1837:21" pos:end="1837:23"><name pos:start="1837:21" pos:end="1837:23">msg</name></expr></argument>, <argument pos:start="1837:26" pos:end="1837:37"><expr pos:start="1837:26" pos:end="1837:37"><operator pos:start="1837:26" pos:end="1837:26">&amp;</operator><name pos:start="1837:27" pos:end="1837:37">encoded_msg</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1837:41" pos:end="1839:5">{<block_content pos:start="1838:9" pos:end="1838:66">
        <expr_stmt pos:start="1838:9" pos:end="1838:66"><expr pos:start="1838:9" pos:end="1838:65"><call pos:start="1838:9" pos:end="1838:65"><name pos:start="1838:9" pos:end="1838:16">http_log</name><argument_list pos:start="1838:17" pos:end="1838:65">(<argument pos:start="1838:18" pos:end="1838:59"><expr pos:start="1838:18" pos:end="1838:59"><literal type="string" pos:start="1838:18" pos:end="1838:59">"Could not encode filename '%s' as HTML\n"</literal></expr></argument>, <argument pos:start="1838:62" pos:end="1838:64"><expr pos:start="1838:62" pos:end="1838:64"><name pos:start="1838:62" pos:end="1838:64">msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1840:5" pos:end="1851:76"><expr pos:start="1840:5" pos:end="1851:75"><call pos:start="1840:5" pos:end="1851:75"><name pos:start="1840:5" pos:end="1840:12">snprintf</name><argument_list pos:start="1840:13" pos:end="1851:75">(<argument pos:start="1840:14" pos:end="1840:14"><expr pos:start="1840:14" pos:end="1840:14"><name pos:start="1840:14" pos:end="1840:14">q</name></expr></argument>, <argument pos:start="1840:17" pos:end="1840:30"><expr pos:start="1840:17" pos:end="1840:30"><name pos:start="1840:17" pos:end="1840:30"><name pos:start="1840:17" pos:end="1840:17">c</name><operator pos:start="1840:18" pos:end="1840:19">-&gt;</operator><name pos:start="1840:20" pos:end="1840:30">buffer_size</name></name></expr></argument>,
                  <argument pos:start="1841:19" pos:end="1851:29"><expr pos:start="1841:19" pos:end="1851:29"><literal type="string" pos:start="1841:19" pos:end="1841:46">"HTTP/1.0 404 Not Found\r\n"</literal>
                  <literal type="string" pos:start="1842:19" pos:end="1842:47">"Content-type: text/html\r\n"</literal>
                  <literal type="string" pos:start="1843:19" pos:end="1843:24">"\r\n"</literal>
                  <literal type="string" pos:start="1844:19" pos:end="1844:37">"&lt;!DOCTYPE html&gt;\n"</literal>
                  <literal type="string" pos:start="1845:19" pos:end="1845:28">"&lt;html&gt;\n"</literal>
                  <literal type="string" pos:start="1846:19" pos:end="1846:28">"&lt;head&gt;\n"</literal>
                  <literal type="string" pos:start="1847:19" pos:end="1847:46">"&lt;meta charset=\"UTF-8\"&gt;\n"</literal>
                  <literal type="string" pos:start="1848:19" pos:end="1848:50">"&lt;title&gt;404 Not Found&lt;/title&gt;\n"</literal>
                  <literal type="string" pos:start="1849:19" pos:end="1849:29">"&lt;/head&gt;\n"</literal>
                  <literal type="string" pos:start="1850:19" pos:end="1850:37">"&lt;body&gt;%s&lt;/body&gt;\n"</literal>
                  <literal type="string" pos:start="1851:19" pos:end="1851:29">"&lt;/html&gt;\n"</literal></expr></argument>, <argument pos:start="1851:32" pos:end="1851:74"><expr pos:start="1851:32" pos:end="1851:74"><ternary pos:start="1851:32" pos:end="1851:74"><condition pos:start="1851:32" pos:end="1851:43"><expr pos:start="1851:32" pos:end="1851:42"><name pos:start="1851:32" pos:end="1851:42">encoded_msg</name></expr>?</condition><then pos:start="1851:45" pos:end="1851:55"> <expr pos:start="1851:45" pos:end="1851:55"><name pos:start="1851:45" pos:end="1851:55">encoded_msg</name></expr> </then><else pos:start="1851:57" pos:end="1851:74">: <expr pos:start="1851:59" pos:end="1851:74"><literal type="string" pos:start="1851:59" pos:end="1851:74">"File not found"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1852:5" pos:end="1852:19"><expr pos:start="1852:5" pos:end="1852:18"><name pos:start="1852:5" pos:end="1852:5">q</name> <operator pos:start="1852:7" pos:end="1852:8">+=</operator> <call pos:start="1852:10" pos:end="1852:18"><name pos:start="1852:10" pos:end="1852:15">strlen</name><argument_list pos:start="1852:16" pos:end="1852:18">(<argument pos:start="1852:17" pos:end="1852:17"><expr pos:start="1852:17" pos:end="1852:17"><name pos:start="1852:17" pos:end="1852:17">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="1853:5" pos:end="1853:31">/* prepare output buffer */</comment>
    <expr_stmt pos:start="1854:5" pos:end="1854:30"><expr pos:start="1854:5" pos:end="1854:29"><name pos:start="1854:5" pos:end="1854:17"><name pos:start="1854:5" pos:end="1854:5">c</name><operator pos:start="1854:6" pos:end="1854:7">-&gt;</operator><name pos:start="1854:8" pos:end="1854:17">buffer_ptr</name></name> <operator pos:start="1854:19" pos:end="1854:19">=</operator> <name pos:start="1854:21" pos:end="1854:29"><name pos:start="1854:21" pos:end="1854:21">c</name><operator pos:start="1854:22" pos:end="1854:23">-&gt;</operator><name pos:start="1854:24" pos:end="1854:29">buffer</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="1855:5" pos:end="1855:22"><expr pos:start="1855:5" pos:end="1855:21"><name pos:start="1855:5" pos:end="1855:17"><name pos:start="1855:5" pos:end="1855:5">c</name><operator pos:start="1855:6" pos:end="1855:7">-&gt;</operator><name pos:start="1855:8" pos:end="1855:17">buffer_end</name></name> <operator pos:start="1855:19" pos:end="1855:19">=</operator> <name pos:start="1855:21" pos:end="1855:21">q</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1856:5" pos:end="1856:37"><expr pos:start="1856:5" pos:end="1856:36"><name pos:start="1856:5" pos:end="1856:12"><name pos:start="1856:5" pos:end="1856:5">c</name><operator pos:start="1856:6" pos:end="1856:7">-&gt;</operator><name pos:start="1856:8" pos:end="1856:12">state</name></name> <operator pos:start="1856:14" pos:end="1856:14">=</operator> <name pos:start="1856:16" pos:end="1856:36">HTTPSTATE_SEND_HEADER</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1857:5" pos:end="1857:27"><expr pos:start="1857:5" pos:end="1857:26"><call pos:start="1857:5" pos:end="1857:26"><name pos:start="1857:5" pos:end="1857:12">av_freep</name><argument_list pos:start="1857:13" pos:end="1857:26">(<argument pos:start="1857:14" pos:end="1857:25"><expr pos:start="1857:14" pos:end="1857:25"><operator pos:start="1857:14" pos:end="1857:14">&amp;</operator><name pos:start="1857:15" pos:end="1857:25">encoded_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="1858:5" pos:end="1858:13">return <expr pos:start="1858:12" pos:end="1858:12"><literal type="number" pos:start="1858:12" pos:end="1858:12">0</literal></expr>;</return>
 <label pos:start="1859:2" pos:end="1859:13"><name pos:start="1859:2" pos:end="1859:12">send_status</name>:</label>
    <expr_stmt pos:start="1860:5" pos:end="1860:22"><expr pos:start="1860:5" pos:end="1860:21"><call pos:start="1860:5" pos:end="1860:21"><name pos:start="1860:5" pos:end="1860:18">compute_status</name><argument_list pos:start="1860:19" pos:end="1860:21">(<argument pos:start="1860:20" pos:end="1860:20"><expr pos:start="1860:20" pos:end="1860:20"><name pos:start="1860:20" pos:end="1860:20">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="1861:5" pos:end="1862:38">/* horrible: we use this value to avoid
     * going to the send data state */</comment>
    <expr_stmt pos:start="1863:5" pos:end="1863:24"><expr pos:start="1863:5" pos:end="1863:23"><name pos:start="1863:5" pos:end="1863:17"><name pos:start="1863:5" pos:end="1863:5">c</name><operator pos:start="1863:6" pos:end="1863:7">-&gt;</operator><name pos:start="1863:8" pos:end="1863:17">http_error</name></name> <operator pos:start="1863:19" pos:end="1863:19">=</operator> <literal type="number" pos:start="1863:21" pos:end="1863:23">200</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="1864:5" pos:end="1864:37"><expr pos:start="1864:5" pos:end="1864:36"><name pos:start="1864:5" pos:end="1864:12"><name pos:start="1864:5" pos:end="1864:5">c</name><operator pos:start="1864:6" pos:end="1864:7">-&gt;</operator><name pos:start="1864:8" pos:end="1864:12">state</name></name> <operator pos:start="1864:14" pos:end="1864:14">=</operator> <name pos:start="1864:16" pos:end="1864:36">HTTPSTATE_SEND_HEADER</name></expr>;</expr_stmt>
    <return pos:start="1865:5" pos:end="1865:13">return <expr pos:start="1865:12" pos:end="1865:12"><literal type="number" pos:start="1865:12" pos:end="1865:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="1868:1" pos:end="1876:1"><type pos:start="1868:1" pos:end="1868:11"><specifier pos:start="1868:1" pos:end="1868:6">static</specifier> <name pos:start="1868:8" pos:end="1868:11">void</name></type> <name pos:start="1868:13" pos:end="1868:25">fmt_bytecount</name><parameter_list pos:start="1868:26" pos:end="1868:57">(<parameter pos:start="1868:27" pos:end="1868:41"><decl pos:start="1868:27" pos:end="1868:41"><type pos:start="1868:27" pos:end="1868:41"><name pos:start="1868:27" pos:end="1868:37">AVIOContext</name> <modifier pos:start="1868:39" pos:end="1868:39">*</modifier></type><name pos:start="1868:40" pos:end="1868:41">pb</name></decl></parameter>, <parameter pos:start="1868:44" pos:end="1868:56"><decl pos:start="1868:44" pos:end="1868:56"><type pos:start="1868:44" pos:end="1868:56"><name pos:start="1868:44" pos:end="1868:50">int64_t</name></type> <name pos:start="1868:52" pos:end="1868:56">count</name></decl></parameter>)</parameter_list>
<block pos:start="1869:1" pos:end="1876:1">{<block_content pos:start="1870:5" pos:end="1875:46">
    <decl_stmt pos:start="1870:5" pos:end="1870:42"><decl pos:start="1870:5" pos:end="1870:41"><type pos:start="1870:5" pos:end="1870:21"><specifier pos:start="1870:5" pos:end="1870:10">static</specifier> <specifier pos:start="1870:12" pos:end="1870:16">const</specifier> <name pos:start="1870:18" pos:end="1870:21">char</name></type> <name pos:start="1870:23" pos:end="1870:30"><name pos:start="1870:23" pos:end="1870:28">suffix</name><index pos:start="1870:29" pos:end="1870:30">[]</index></name> <init pos:start="1870:32" pos:end="1870:41">= <expr pos:start="1870:34" pos:end="1870:41"><literal type="string" pos:start="1870:34" pos:end="1870:41">" kMGTP"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1871:5" pos:end="1871:18"><decl pos:start="1871:5" pos:end="1871:17"><type pos:start="1871:5" pos:end="1871:16"><specifier pos:start="1871:5" pos:end="1871:9">const</specifier> <name pos:start="1871:11" pos:end="1871:14">char</name> <modifier pos:start="1871:16" pos:end="1871:16">*</modifier></type><name pos:start="1871:17" pos:end="1871:17">s</name></decl>;</decl_stmt>

    <for pos:start="1873:5" pos:end="1873:66">for <control pos:start="1873:9" pos:end="1873:65">(<init pos:start="1873:10" pos:end="1873:20"><expr pos:start="1873:10" pos:end="1873:19"><name pos:start="1873:10" pos:end="1873:10">s</name> <operator pos:start="1873:12" pos:end="1873:12">=</operator> <name pos:start="1873:14" pos:end="1873:19">suffix</name></expr>;</init> <condition pos:start="1873:22" pos:end="1873:45"><expr pos:start="1873:22" pos:end="1873:44"><name pos:start="1873:22" pos:end="1873:26">count</name> <operator pos:start="1873:28" pos:end="1873:29">&gt;=</operator> <literal type="number" pos:start="1873:31" pos:end="1873:36">100000</literal> <operator pos:start="1873:38" pos:end="1873:39">&amp;&amp;</operator> <name pos:start="1873:41" pos:end="1873:44"><name pos:start="1873:41" pos:end="1873:41">s</name><index pos:start="1873:42" pos:end="1873:44">[<expr pos:start="1873:43" pos:end="1873:43"><literal type="number" pos:start="1873:43" pos:end="1873:43">1</literal></expr>]</index></name></expr>;</condition> <incr pos:start="1873:47" pos:end="1873:64"><expr pos:start="1873:47" pos:end="1873:59"><name pos:start="1873:47" pos:end="1873:51">count</name> <operator pos:start="1873:53" pos:end="1873:54">/=</operator> <literal type="number" pos:start="1873:56" pos:end="1873:59">1000</literal></expr><operator pos:start="1873:60" pos:end="1873:60">,</operator> <expr pos:start="1873:62" pos:end="1873:64"><name pos:start="1873:62" pos:end="1873:62">s</name><operator pos:start="1873:63" pos:end="1873:64">++</operator></expr></incr>)</control><block type="pseudo" pos:start="1873:66" pos:end="1873:66"><block_content pos:start="1873:66" pos:end="1873:66"><empty_stmt pos:start="1873:66" pos:end="1873:66">;</empty_stmt></block_content></block></for>

    <expr_stmt pos:start="1875:5" pos:end="1875:46"><expr pos:start="1875:5" pos:end="1875:45"><call pos:start="1875:5" pos:end="1875:45"><name pos:start="1875:5" pos:end="1875:15">avio_printf</name><argument_list pos:start="1875:16" pos:end="1875:45">(<argument pos:start="1875:17" pos:end="1875:18"><expr pos:start="1875:17" pos:end="1875:18"><name pos:start="1875:17" pos:end="1875:18">pb</name></expr></argument>, <argument pos:start="1875:21" pos:end="1875:33"><expr pos:start="1875:21" pos:end="1875:33"><literal type="string" pos:start="1875:21" pos:end="1875:23">"%"</literal><name pos:start="1875:24" pos:end="1875:29">PRId64</name><literal type="string" pos:start="1875:30" pos:end="1875:33">"%c"</literal></expr></argument>, <argument pos:start="1875:36" pos:end="1875:40"><expr pos:start="1875:36" pos:end="1875:40"><name pos:start="1875:36" pos:end="1875:40">count</name></expr></argument>, <argument pos:start="1875:43" pos:end="1875:44"><expr pos:start="1875:43" pos:end="1875:44"><operator pos:start="1875:43" pos:end="1875:43">*</operator><name pos:start="1875:44" pos:end="1875:44">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="1878:1" pos:end="1922:1"><type pos:start="1878:1" pos:end="1878:18"><specifier pos:start="1878:1" pos:end="1878:6">static</specifier> <specifier pos:start="1878:8" pos:end="1878:13">inline</specifier> <name pos:start="1878:15" pos:end="1878:18">void</name></type> <name pos:start="1878:20" pos:end="1878:38">print_stream_params</name><parameter_list pos:start="1878:39" pos:end="1878:79">(<parameter pos:start="1878:40" pos:end="1878:54"><decl pos:start="1878:40" pos:end="1878:54"><type pos:start="1878:40" pos:end="1878:54"><name pos:start="1878:40" pos:end="1878:50">AVIOContext</name> <modifier pos:start="1878:52" pos:end="1878:52">*</modifier></type><name pos:start="1878:53" pos:end="1878:54">pb</name></decl></parameter>, <parameter pos:start="1878:57" pos:end="1878:78"><decl pos:start="1878:57" pos:end="1878:78"><type pos:start="1878:57" pos:end="1878:78"><name pos:start="1878:57" pos:end="1878:70">FFServerStream</name> <modifier pos:start="1878:72" pos:end="1878:72">*</modifier></type><name pos:start="1878:73" pos:end="1878:78">stream</name></decl></parameter>)</parameter_list>
<block pos:start="1879:1" pos:end="1922:1">{<block_content pos:start="1880:5" pos:end="1921:35">
    <decl_stmt pos:start="1880:5" pos:end="1880:21"><decl pos:start="1880:5" pos:end="1880:9"><type pos:start="1880:5" pos:end="1880:7"><name pos:start="1880:5" pos:end="1880:7">int</name></type> <name pos:start="1880:9" pos:end="1880:9">i</name></decl>, <decl pos:start="1880:12" pos:end="1880:20"><type ref="prev" pos:start="1880:5" pos:end="1880:7"/><name pos:start="1880:12" pos:end="1880:20">stream_no</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1881:5" pos:end="1881:33"><decl pos:start="1881:5" pos:end="1881:32"><type pos:start="1881:5" pos:end="1881:16"><specifier pos:start="1881:5" pos:end="1881:9">const</specifier> <name pos:start="1881:11" pos:end="1881:14">char</name> <modifier pos:start="1881:16" pos:end="1881:16">*</modifier></type><name pos:start="1881:17" pos:end="1881:20">type</name> <init pos:start="1881:22" pos:end="1881:32">= <expr pos:start="1881:24" pos:end="1881:32"><literal type="string" pos:start="1881:24" pos:end="1881:32">"unknown"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1882:5" pos:end="1882:24"><decl pos:start="1882:5" pos:end="1882:23"><type pos:start="1882:5" pos:end="1882:8"><name pos:start="1882:5" pos:end="1882:8">char</name></type> <name pos:start="1882:10" pos:end="1882:23"><name pos:start="1882:10" pos:end="1882:19">parameters</name><index pos:start="1882:20" pos:end="1882:23">[<expr pos:start="1882:21" pos:end="1882:22"><literal type="number" pos:start="1882:21" pos:end="1882:22">64</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="1883:5" pos:end="1883:24"><decl pos:start="1883:5" pos:end="1883:23"><type pos:start="1883:5" pos:end="1883:21"><name pos:start="1883:5" pos:end="1883:19">LayeredAVStream</name> <modifier pos:start="1883:21" pos:end="1883:21">*</modifier></type><name pos:start="1883:22" pos:end="1883:23">st</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1884:5" pos:end="1884:19"><decl pos:start="1884:5" pos:end="1884:18"><type pos:start="1884:5" pos:end="1884:13"><name pos:start="1884:5" pos:end="1884:11">AVCodec</name> <modifier pos:start="1884:13" pos:end="1884:13">*</modifier></type><name pos:start="1884:14" pos:end="1884:18">codec</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1886:5" pos:end="1886:35"><expr pos:start="1886:5" pos:end="1886:34"><name pos:start="1886:5" pos:end="1886:13">stream_no</name> <operator pos:start="1886:15" pos:end="1886:15">=</operator> <name pos:start="1886:17" pos:end="1886:34"><name pos:start="1886:17" pos:end="1886:22">stream</name><operator pos:start="1886:23" pos:end="1886:24">-&gt;</operator><name pos:start="1886:25" pos:end="1886:34">nb_streams</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="1888:5" pos:end="1890:36"><expr pos:start="1888:5" pos:end="1890:35"><call pos:start="1888:5" pos:end="1890:35"><name pos:start="1888:5" pos:end="1888:15">avio_printf</name><argument_list pos:start="1888:16" pos:end="1890:35">(<argument pos:start="1888:17" pos:end="1888:18"><expr pos:start="1888:17" pos:end="1888:18"><name pos:start="1888:17" pos:end="1888:18">pb</name></expr></argument>, <argument pos:start="1888:21" pos:end="1890:34"><expr pos:start="1888:21" pos:end="1890:34"><literal type="string" pos:start="1888:21" pos:end="1888:47">"&lt;table&gt;&lt;tr&gt;&lt;th&gt;Stream&lt;th&gt;"</literal>
                    <literal type="string" pos:start="1889:21" pos:end="1889:49">"type&lt;th&gt;kbit/s&lt;th&gt;codec&lt;th&gt;"</literal>
                    <literal type="string" pos:start="1890:21" pos:end="1890:34">"Parameters\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="1892:5" pos:end="1919:6">for <control pos:start="1892:9" pos:end="1892:35">(<init pos:start="1892:10" pos:end="1892:15"><expr pos:start="1892:10" pos:end="1892:14"><name pos:start="1892:10" pos:end="1892:10">i</name> <operator pos:start="1892:12" pos:end="1892:12">=</operator> <literal type="number" pos:start="1892:14" pos:end="1892:14">0</literal></expr>;</init> <condition pos:start="1892:17" pos:end="1892:30"><expr pos:start="1892:17" pos:end="1892:29"><name pos:start="1892:17" pos:end="1892:17">i</name> <operator pos:start="1892:19" pos:end="1892:19">&lt;</operator> <name pos:start="1892:21" pos:end="1892:29">stream_no</name></expr>;</condition> <incr pos:start="1892:32" pos:end="1892:34"><expr pos:start="1892:32" pos:end="1892:34"><name pos:start="1892:32" pos:end="1892:32">i</name><operator pos:start="1892:33" pos:end="1892:34">++</operator></expr></incr>)</control> <block pos:start="1892:37" pos:end="1919:6">{<block_content pos:start="1893:9" pos:end="1918:58">
        <expr_stmt pos:start="1893:9" pos:end="1893:32"><expr pos:start="1893:9" pos:end="1893:31"><name pos:start="1893:9" pos:end="1893:10">st</name> <operator pos:start="1893:12" pos:end="1893:12">=</operator> <name pos:start="1893:14" pos:end="1893:31"><name pos:start="1893:14" pos:end="1893:19">stream</name><operator pos:start="1893:20" pos:end="1893:21">-&gt;</operator><name pos:start="1893:22" pos:end="1893:28">streams</name><index pos:start="1893:29" pos:end="1893:31">[<expr pos:start="1893:30" pos:end="1893:30"><name pos:start="1893:30" pos:end="1893:30">i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="1894:9" pos:end="1894:61"><expr pos:start="1894:9" pos:end="1894:60"><name pos:start="1894:9" pos:end="1894:13">codec</name> <operator pos:start="1894:15" pos:end="1894:15">=</operator> <call pos:start="1894:17" pos:end="1894:60"><name pos:start="1894:17" pos:end="1894:36">avcodec_find_encoder</name><argument_list pos:start="1894:37" pos:end="1894:60">(<argument pos:start="1894:38" pos:end="1894:59"><expr pos:start="1894:38" pos:end="1894:59"><name pos:start="1894:38" pos:end="1894:59"><name pos:start="1894:38" pos:end="1894:39">st</name><operator pos:start="1894:40" pos:end="1894:41">-&gt;</operator><name pos:start="1894:42" pos:end="1894:49">codecpar</name><operator pos:start="1894:50" pos:end="1894:51">-&gt;</operator><name pos:start="1894:52" pos:end="1894:59">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1896:9" pos:end="1896:26"><expr pos:start="1896:9" pos:end="1896:25"><name pos:start="1896:9" pos:end="1896:21"><name pos:start="1896:9" pos:end="1896:18">parameters</name><index pos:start="1896:19" pos:end="1896:21">[<expr pos:start="1896:20" pos:end="1896:20"><literal type="number" pos:start="1896:20" pos:end="1896:20">0</literal></expr>]</index></name> <operator pos:start="1896:23" pos:end="1896:23">=</operator> <literal type="number" pos:start="1896:25" pos:end="1896:25">0</literal></expr>;</expr_stmt>

        <switch pos:start="1898:9" pos:end="1913:9">switch<condition pos:start="1898:15" pos:end="1898:40">(<expr pos:start="1898:16" pos:end="1898:39"><name pos:start="1898:16" pos:end="1898:39"><name pos:start="1898:16" pos:end="1898:17">st</name><operator pos:start="1898:18" pos:end="1898:19">-&gt;</operator><name pos:start="1898:20" pos:end="1898:27">codecpar</name><operator pos:start="1898:28" pos:end="1898:29">-&gt;</operator><name pos:start="1898:30" pos:end="1898:39">codec_type</name></name></expr>)</condition> <block pos:start="1898:42" pos:end="1913:9">{<block_content pos:start="1899:9" pos:end="1912:20">
        <case pos:start="1899:9" pos:end="1899:32">case <expr pos:start="1899:14" pos:end="1899:31"><name pos:start="1899:14" pos:end="1899:31">AVMEDIA_TYPE_AUDIO</name></expr>:</case>
            <expr_stmt pos:start="1900:13" pos:end="1900:27"><expr pos:start="1900:13" pos:end="1900:26"><name pos:start="1900:13" pos:end="1900:16">type</name> <operator pos:start="1900:18" pos:end="1900:18">=</operator> <literal type="string" pos:start="1900:20" pos:end="1900:26">"audio"</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="1901:13" pos:end="1902:72"><expr pos:start="1901:13" pos:end="1902:71"><call pos:start="1901:13" pos:end="1902:71"><name pos:start="1901:13" pos:end="1901:20">snprintf</name><argument_list pos:start="1901:21" pos:end="1902:71">(<argument pos:start="1901:22" pos:end="1901:31"><expr pos:start="1901:22" pos:end="1901:31"><name pos:start="1901:22" pos:end="1901:31">parameters</name></expr></argument>, <argument pos:start="1901:34" pos:end="1901:51"><expr pos:start="1901:34" pos:end="1901:51"><sizeof pos:start="1901:34" pos:end="1901:51">sizeof<argument_list pos:start="1901:40" pos:end="1901:51">(<argument pos:start="1901:41" pos:end="1901:50"><expr pos:start="1901:41" pos:end="1901:50"><name pos:start="1901:41" pos:end="1901:50">parameters</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1901:54" pos:end="1901:75"><expr pos:start="1901:54" pos:end="1901:75"><literal type="string" pos:start="1901:54" pos:end="1901:75">"%d channel(s), %d Hz"</literal></expr></argument>,
                     <argument pos:start="1902:22" pos:end="1902:43"><expr pos:start="1902:22" pos:end="1902:43"><name pos:start="1902:22" pos:end="1902:43"><name pos:start="1902:22" pos:end="1902:23">st</name><operator pos:start="1902:24" pos:end="1902:25">-&gt;</operator><name pos:start="1902:26" pos:end="1902:33">codecpar</name><operator pos:start="1902:34" pos:end="1902:35">-&gt;</operator><name pos:start="1902:36" pos:end="1902:43">channels</name></name></expr></argument>, <argument pos:start="1902:46" pos:end="1902:70"><expr pos:start="1902:46" pos:end="1902:70"><name pos:start="1902:46" pos:end="1902:70"><name pos:start="1902:46" pos:end="1902:47">st</name><operator pos:start="1902:48" pos:end="1902:49">-&gt;</operator><name pos:start="1902:50" pos:end="1902:57">codecpar</name><operator pos:start="1902:58" pos:end="1902:59">-&gt;</operator><name pos:start="1902:60" pos:end="1902:70">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="1903:13" pos:end="1903:18">break;</break>
        <case pos:start="1904:9" pos:end="1904:32">case <expr pos:start="1904:14" pos:end="1904:31"><name pos:start="1904:14" pos:end="1904:31">AVMEDIA_TYPE_VIDEO</name></expr>:</case>
            <expr_stmt pos:start="1905:13" pos:end="1905:27"><expr pos:start="1905:13" pos:end="1905:26"><name pos:start="1905:13" pos:end="1905:16">type</name> <operator pos:start="1905:18" pos:end="1905:18">=</operator> <literal type="string" pos:start="1905:20" pos:end="1905:26">"video"</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="1906:13" pos:end="1909:60"><expr pos:start="1906:13" pos:end="1909:59"><call pos:start="1906:13" pos:end="1909:59"><name pos:start="1906:13" pos:end="1906:20">snprintf</name><argument_list pos:start="1906:21" pos:end="1909:59">(<argument pos:start="1906:22" pos:end="1906:31"><expr pos:start="1906:22" pos:end="1906:31"><name pos:start="1906:22" pos:end="1906:31">parameters</name></expr></argument>, <argument pos:start="1906:34" pos:end="1906:51"><expr pos:start="1906:34" pos:end="1906:51"><sizeof pos:start="1906:34" pos:end="1906:51">sizeof<argument_list pos:start="1906:40" pos:end="1906:51">(<argument pos:start="1906:41" pos:end="1906:50"><expr pos:start="1906:41" pos:end="1906:50"><name pos:start="1906:41" pos:end="1906:50">parameters</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                     <argument pos:start="1907:22" pos:end="1907:45"><expr pos:start="1907:22" pos:end="1907:45"><literal type="string" pos:start="1907:22" pos:end="1907:45">"%dx%d, q=%d-%d, fps=%d"</literal></expr></argument>, <argument pos:start="1907:48" pos:end="1907:66"><expr pos:start="1907:48" pos:end="1907:66"><name pos:start="1907:48" pos:end="1907:66"><name pos:start="1907:48" pos:end="1907:49">st</name><operator pos:start="1907:50" pos:end="1907:51">-&gt;</operator><name pos:start="1907:52" pos:end="1907:59">codecpar</name><operator pos:start="1907:60" pos:end="1907:61">-&gt;</operator><name pos:start="1907:62" pos:end="1907:66">width</name></name></expr></argument>,
                     <argument pos:start="1908:22" pos:end="1908:41"><expr pos:start="1908:22" pos:end="1908:41"><name pos:start="1908:22" pos:end="1908:41"><name pos:start="1908:22" pos:end="1908:23">st</name><operator pos:start="1908:24" pos:end="1908:25">-&gt;</operator><name pos:start="1908:26" pos:end="1908:33">codecpar</name><operator pos:start="1908:34" pos:end="1908:35">-&gt;</operator><name pos:start="1908:36" pos:end="1908:41">height</name></name></expr></argument>, <argument pos:start="1908:44" pos:end="1908:58"><expr pos:start="1908:44" pos:end="1908:58"><name pos:start="1908:44" pos:end="1908:58"><name pos:start="1908:44" pos:end="1908:45">st</name><operator pos:start="1908:46" pos:end="1908:47">-&gt;</operator><name pos:start="1908:48" pos:end="1908:52">codec</name><operator pos:start="1908:53" pos:end="1908:54">-&gt;</operator><name pos:start="1908:55" pos:end="1908:58">qmin</name></name></expr></argument>, <argument pos:start="1908:61" pos:end="1908:75"><expr pos:start="1908:61" pos:end="1908:75"><name pos:start="1908:61" pos:end="1908:75"><name pos:start="1908:61" pos:end="1908:62">st</name><operator pos:start="1908:63" pos:end="1908:64">-&gt;</operator><name pos:start="1908:65" pos:end="1908:69">codec</name><operator pos:start="1908:70" pos:end="1908:71">-&gt;</operator><name pos:start="1908:72" pos:end="1908:75">qmax</name></name></expr></argument>,
                     <argument pos:start="1909:22" pos:end="1909:58"><expr pos:start="1909:22" pos:end="1909:58"><name pos:start="1909:22" pos:end="1909:38"><name pos:start="1909:22" pos:end="1909:23">st</name><operator pos:start="1909:24" pos:end="1909:25">-&gt;</operator><name pos:start="1909:26" pos:end="1909:34">time_base</name><operator pos:start="1909:35" pos:end="1909:35">.</operator><name pos:start="1909:36" pos:end="1909:38">den</name></name> <operator pos:start="1909:40" pos:end="1909:40">/</operator> <name pos:start="1909:42" pos:end="1909:58"><name pos:start="1909:42" pos:end="1909:43">st</name><operator pos:start="1909:44" pos:end="1909:45">-&gt;</operator><name pos:start="1909:46" pos:end="1909:54">time_base</name><operator pos:start="1909:55" pos:end="1909:55">.</operator><name pos:start="1909:56" pos:end="1909:58">num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="1910:13" pos:end="1910:18">break;</break>
        <default pos:start="1911:9" pos:end="1911:16">default:</default>
            <expr_stmt pos:start="1912:13" pos:end="1912:20"><expr pos:start="1912:13" pos:end="1912:19"><call pos:start="1912:13" pos:end="1912:19"><name pos:start="1912:13" pos:end="1912:17">abort</name><argument_list pos:start="1912:18" pos:end="1912:19">()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>

        <expr_stmt pos:start="1915:9" pos:end="1918:58"><expr pos:start="1915:9" pos:end="1918:57"><call pos:start="1915:9" pos:end="1918:57"><name pos:start="1915:9" pos:end="1915:19">avio_printf</name><argument_list pos:start="1915:20" pos:end="1918:57">(<argument pos:start="1915:21" pos:end="1915:22"><expr pos:start="1915:21" pos:end="1915:22"><name pos:start="1915:21" pos:end="1915:22">pb</name></expr></argument>, <argument pos:start="1915:25" pos:end="1916:40"><expr pos:start="1915:25" pos:end="1916:40"><literal type="string" pos:start="1915:25" pos:end="1915:47">"&lt;tr&gt;&lt;td&gt;%d&lt;td&gt;%s&lt;td&gt;%"</literal><name pos:start="1915:48" pos:end="1915:53">PRId64</name>
                        <literal type="string" pos:start="1916:25" pos:end="1916:40">"&lt;td&gt;%s&lt;td&gt;%s\n"</literal></expr></argument>,
                    <argument pos:start="1917:21" pos:end="1917:21"><expr pos:start="1917:21" pos:end="1917:21"><name pos:start="1917:21" pos:end="1917:21">i</name></expr></argument>, <argument pos:start="1917:24" pos:end="1917:27"><expr pos:start="1917:24" pos:end="1917:27"><name pos:start="1917:24" pos:end="1917:27">type</name></expr></argument>, <argument pos:start="1917:30" pos:end="1917:65"><expr pos:start="1917:30" pos:end="1917:65"><operator pos:start="1917:30" pos:end="1917:30">(</operator><name pos:start="1917:31" pos:end="1917:37">int64_t</name><operator pos:start="1917:38" pos:end="1917:38">)</operator><name pos:start="1917:39" pos:end="1917:60"><name pos:start="1917:39" pos:end="1917:40">st</name><operator pos:start="1917:41" pos:end="1917:42">-&gt;</operator><name pos:start="1917:43" pos:end="1917:50">codecpar</name><operator pos:start="1917:51" pos:end="1917:52">-&gt;</operator><name pos:start="1917:53" pos:end="1917:60">bit_rate</name></name><operator pos:start="1917:61" pos:end="1917:61">/</operator><literal type="number" pos:start="1917:62" pos:end="1917:65">1000</literal></expr></argument>,
                    <argument pos:start="1918:21" pos:end="1918:44"><expr pos:start="1918:21" pos:end="1918:44"><ternary pos:start="1918:21" pos:end="1918:44"><condition pos:start="1918:21" pos:end="1918:27"><expr pos:start="1918:21" pos:end="1918:25"><name pos:start="1918:21" pos:end="1918:25">codec</name></expr> ?</condition><then pos:start="1918:29" pos:end="1918:39"> <expr pos:start="1918:29" pos:end="1918:39"><name pos:start="1918:29" pos:end="1918:39"><name pos:start="1918:29" pos:end="1918:33">codec</name><operator pos:start="1918:34" pos:end="1918:35">-&gt;</operator><name pos:start="1918:36" pos:end="1918:39">name</name></name></expr> </then><else pos:start="1918:41" pos:end="1918:44">: <expr pos:start="1918:43" pos:end="1918:44"><literal type="string" pos:start="1918:43" pos:end="1918:44">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="1918:47" pos:end="1918:56"><expr pos:start="1918:47" pos:end="1918:56"><name pos:start="1918:47" pos:end="1918:56">parameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>

     <expr_stmt pos:start="1921:6" pos:end="1921:35"><expr pos:start="1921:6" pos:end="1921:34"><call pos:start="1921:6" pos:end="1921:34"><name pos:start="1921:6" pos:end="1921:16">avio_printf</name><argument_list pos:start="1921:17" pos:end="1921:34">(<argument pos:start="1921:18" pos:end="1921:19"><expr pos:start="1921:18" pos:end="1921:19"><name pos:start="1921:18" pos:end="1921:19">pb</name></expr></argument>, <argument pos:start="1921:22" pos:end="1921:33"><expr pos:start="1921:22" pos:end="1921:33"><literal type="string" pos:start="1921:22" pos:end="1921:33">"&lt;/table&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="1924:1" pos:end="1950:1"><type pos:start="1924:1" pos:end="1924:11"><specifier pos:start="1924:1" pos:end="1924:6">static</specifier> <name pos:start="1924:8" pos:end="1924:11">void</name></type> <name pos:start="1924:13" pos:end="1924:22">clean_html</name><parameter_list pos:start="1924:23" pos:end="1924:63">(<parameter pos:start="1924:24" pos:end="1924:34"><decl pos:start="1924:24" pos:end="1924:34"><type pos:start="1924:24" pos:end="1924:34"><name pos:start="1924:24" pos:end="1924:27">char</name> <modifier pos:start="1924:29" pos:end="1924:29">*</modifier></type><name pos:start="1924:30" pos:end="1924:34">clean</name></decl></parameter>, <parameter pos:start="1924:37" pos:end="1924:49"><decl pos:start="1924:37" pos:end="1924:49"><type pos:start="1924:37" pos:end="1924:49"><name pos:start="1924:37" pos:end="1924:39">int</name></type> <name pos:start="1924:41" pos:end="1924:49">clean_len</name></decl></parameter>, <parameter pos:start="1924:52" pos:end="1924:62"><decl pos:start="1924:52" pos:end="1924:62"><type pos:start="1924:52" pos:end="1924:62"><name pos:start="1924:52" pos:end="1924:55">char</name> <modifier pos:start="1924:57" pos:end="1924:57">*</modifier></type><name pos:start="1924:58" pos:end="1924:62">dirty</name></decl></parameter>)</parameter_list>
<block pos:start="1925:1" pos:end="1950:1">{<block_content pos:start="1926:5" pos:end="1949:17">
    <decl_stmt pos:start="1926:5" pos:end="1926:13"><decl pos:start="1926:5" pos:end="1926:9"><type pos:start="1926:5" pos:end="1926:7"><name pos:start="1926:5" pos:end="1926:7">int</name></type> <name pos:start="1926:9" pos:end="1926:9">i</name></decl>, <decl pos:start="1926:12" pos:end="1926:12"><type ref="prev" pos:start="1926:5" pos:end="1926:7"/><name pos:start="1926:12" pos:end="1926:12">o</name></decl>;</decl_stmt>

    <for pos:start="1928:5" pos:end="1948:5">for <control pos:start="1928:9" pos:end="1928:50">(<init pos:start="1928:10" pos:end="1928:19"><expr pos:start="1928:10" pos:end="1928:18"><name pos:start="1928:10" pos:end="1928:10">o</name> <operator pos:start="1928:12" pos:end="1928:12">=</operator> <name pos:start="1928:14" pos:end="1928:14">i</name> <operator pos:start="1928:16" pos:end="1928:16">=</operator> <literal type="number" pos:start="1928:18" pos:end="1928:18">0</literal></expr>;</init> <condition pos:start="1928:21" pos:end="1928:49"><expr pos:start="1928:21" pos:end="1928:48"><name pos:start="1928:21" pos:end="1928:21">o</name><operator pos:start="1928:22" pos:end="1928:22">+</operator><literal type="number" pos:start="1928:23" pos:end="1928:24">10</literal> <operator pos:start="1928:26" pos:end="1928:26">&lt;</operator> <name pos:start="1928:28" pos:end="1928:36">clean_len</name> <operator pos:start="1928:38" pos:end="1928:39">&amp;&amp;</operator> <name pos:start="1928:41" pos:end="1928:48"><name pos:start="1928:41" pos:end="1928:45">dirty</name><index pos:start="1928:46" pos:end="1928:48">[<expr pos:start="1928:47" pos:end="1928:47"><name pos:start="1928:47" pos:end="1928:47">i</name></expr>]</index></name></expr>;</condition><incr/>)</control> <block pos:start="1928:52" pos:end="1948:5">{<block_content pos:start="1929:9" pos:end="1947:9">
        <decl_stmt pos:start="1929:9" pos:end="1929:116"><decl pos:start="1929:9" pos:end="1929:115"><type pos:start="1929:9" pos:end="1929:11"><name pos:start="1929:9" pos:end="1929:11">int</name></type> <name pos:start="1929:13" pos:end="1929:15">len</name> <init pos:start="1929:17" pos:end="1929:115">= <expr pos:start="1929:19" pos:end="1929:115"><call pos:start="1929:19" pos:end="1929:115"><name pos:start="1929:19" pos:end="1929:24">strspn</name><argument_list pos:start="1929:25" pos:end="1929:115">(<argument pos:start="1929:26" pos:end="1929:32"><expr pos:start="1929:26" pos:end="1929:32"><name pos:start="1929:26" pos:end="1929:30">dirty</name><operator pos:start="1929:31" pos:end="1929:31">+</operator><name pos:start="1929:32" pos:end="1929:32">i</name></expr></argument>, <argument pos:start="1929:35" pos:end="1929:114"><expr pos:start="1929:35" pos:end="1929:114"><literal type="string" pos:start="1929:35" pos:end="1929:114">"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$-_.+!*(),?/ :;%"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="1930:9" pos:end="1947:9"><if pos:start="1930:9" pos:end="1936:9">if <condition pos:start="1930:12" pos:end="1930:16">(<expr pos:start="1930:13" pos:end="1930:15"><name pos:start="1930:13" pos:end="1930:15">len</name></expr>)</condition> <block pos:start="1930:18" pos:end="1936:9">{<block_content pos:start="1931:13" pos:end="1935:21">
            <if_stmt pos:start="1931:13" pos:end="1932:22"><if pos:start="1931:13" pos:end="1932:22">if <condition pos:start="1931:16" pos:end="1931:37">(<expr pos:start="1931:17" pos:end="1931:36"><name pos:start="1931:17" pos:end="1931:17">o</name> <operator pos:start="1931:19" pos:end="1931:19">+</operator> <name pos:start="1931:21" pos:end="1931:23">len</name> <operator pos:start="1931:25" pos:end="1931:26">&gt;=</operator> <name pos:start="1931:28" pos:end="1931:36">clean_len</name></expr>)</condition><block type="pseudo" pos:start="1932:17" pos:end="1932:22"><block_content pos:start="1932:17" pos:end="1932:22">
                <break pos:start="1932:17" pos:end="1932:22">break;</break></block_content></block></if></if_stmt>
            <expr_stmt pos:start="1933:13" pos:end="1933:46"><expr pos:start="1933:13" pos:end="1933:45"><call pos:start="1933:13" pos:end="1933:45"><name pos:start="1933:13" pos:end="1933:18">memcpy</name><argument_list pos:start="1933:19" pos:end="1933:45">(<argument pos:start="1933:20" pos:end="1933:28"><expr pos:start="1933:20" pos:end="1933:28"><name pos:start="1933:20" pos:end="1933:24">clean</name> <operator pos:start="1933:26" pos:end="1933:26">+</operator> <name pos:start="1933:28" pos:end="1933:28">o</name></expr></argument>, <argument pos:start="1933:31" pos:end="1933:39"><expr pos:start="1933:31" pos:end="1933:39"><name pos:start="1933:31" pos:end="1933:35">dirty</name> <operator pos:start="1933:37" pos:end="1933:37">+</operator> <name pos:start="1933:39" pos:end="1933:39">i</name></expr></argument>, <argument pos:start="1933:42" pos:end="1933:44"><expr pos:start="1933:42" pos:end="1933:44"><name pos:start="1933:42" pos:end="1933:44">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1934:13" pos:end="1934:21"><expr pos:start="1934:13" pos:end="1934:20"><name pos:start="1934:13" pos:end="1934:13">i</name> <operator pos:start="1934:15" pos:end="1934:16">+=</operator> <name pos:start="1934:18" pos:end="1934:20">len</name></expr>;</expr_stmt>
            <expr_stmt pos:start="1935:13" pos:end="1935:21"><expr pos:start="1935:13" pos:end="1935:20"><name pos:start="1935:13" pos:end="1935:13">o</name> <operator pos:start="1935:15" pos:end="1935:16">+=</operator> <name pos:start="1935:18" pos:end="1935:20">len</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="1936:11" pos:end="1947:9">else <block pos:start="1936:16" pos:end="1947:9">{<block_content pos:start="1937:13" pos:end="1946:33">
            <decl_stmt pos:start="1937:13" pos:end="1937:31"><decl pos:start="1937:13" pos:end="1937:30"><type pos:start="1937:13" pos:end="1937:15"><name pos:start="1937:13" pos:end="1937:15">int</name></type> <name pos:start="1937:17" pos:end="1937:17">c</name> <init pos:start="1937:19" pos:end="1937:30">= <expr pos:start="1937:21" pos:end="1937:30"><name pos:start="1937:21" pos:end="1937:30"><name pos:start="1937:21" pos:end="1937:25">dirty</name><index pos:start="1937:26" pos:end="1937:30">[<expr pos:start="1937:27" pos:end="1937:29"><name pos:start="1937:27" pos:end="1937:27">i</name><operator pos:start="1937:28" pos:end="1937:29">++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <switch pos:start="1938:13" pos:end="1945:13">switch <condition pos:start="1938:20" pos:end="1938:22">(<expr pos:start="1938:21" pos:end="1938:21"><name pos:start="1938:21" pos:end="1938:21">c</name></expr>)</condition> <block pos:start="1938:24" pos:end="1945:13">{<block_content pos:start="1939:13" pos:end="1944:76">
            <case pos:start="1939:13" pos:end="1939:22">case  <expr pos:start="1939:19" pos:end="1939:21"><literal type="char" pos:start="1939:19" pos:end="1939:21">'&amp;'</literal></expr>:</case> <expr_stmt pos:start="1939:24" pos:end="1939:69"><expr pos:start="1939:24" pos:end="1939:68"><call pos:start="1939:24" pos:end="1939:68"><name pos:start="1939:24" pos:end="1939:33">av_strlcat</name><argument_list pos:start="1939:34" pos:end="1939:68">(<argument pos:start="1939:35" pos:end="1939:41"><expr pos:start="1939:35" pos:end="1939:41"><name pos:start="1939:35" pos:end="1939:39">clean</name><operator pos:start="1939:40" pos:end="1939:40">+</operator><name pos:start="1939:41" pos:end="1939:41">o</name></expr></argument>, <argument pos:start="1939:44" pos:end="1939:50"><expr pos:start="1939:44" pos:end="1939:50"><literal type="string" pos:start="1939:44" pos:end="1939:50">"&amp;amp;"</literal></expr></argument>  , <argument pos:start="1939:55" pos:end="1939:67"><expr pos:start="1939:55" pos:end="1939:67"><name pos:start="1939:55" pos:end="1939:63">clean_len</name> <operator pos:start="1939:65" pos:end="1939:65">-</operator> <name pos:start="1939:67" pos:end="1939:67">o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="1939:71" pos:end="1939:76">break;</break>
            <case pos:start="1940:13" pos:end="1940:22">case  <expr pos:start="1940:19" pos:end="1940:21"><literal type="char" pos:start="1940:19" pos:end="1940:21">'&lt;'</literal></expr>:</case> <expr_stmt pos:start="1940:24" pos:end="1940:69"><expr pos:start="1940:24" pos:end="1940:68"><call pos:start="1940:24" pos:end="1940:68"><name pos:start="1940:24" pos:end="1940:33">av_strlcat</name><argument_list pos:start="1940:34" pos:end="1940:68">(<argument pos:start="1940:35" pos:end="1940:41"><expr pos:start="1940:35" pos:end="1940:41"><name pos:start="1940:35" pos:end="1940:39">clean</name><operator pos:start="1940:40" pos:end="1940:40">+</operator><name pos:start="1940:41" pos:end="1940:41">o</name></expr></argument>, <argument pos:start="1940:44" pos:end="1940:49"><expr pos:start="1940:44" pos:end="1940:49"><literal type="string" pos:start="1940:44" pos:end="1940:49">"&amp;lt;"</literal></expr></argument>   , <argument pos:start="1940:55" pos:end="1940:67"><expr pos:start="1940:55" pos:end="1940:67"><name pos:start="1940:55" pos:end="1940:63">clean_len</name> <operator pos:start="1940:65" pos:end="1940:65">-</operator> <name pos:start="1940:67" pos:end="1940:67">o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="1940:71" pos:end="1940:76">break;</break>
            <case pos:start="1941:13" pos:end="1941:22">case  <expr pos:start="1941:19" pos:end="1941:21"><literal type="char" pos:start="1941:19" pos:end="1941:21">'&gt;'</literal></expr>:</case> <expr_stmt pos:start="1941:24" pos:end="1941:69"><expr pos:start="1941:24" pos:end="1941:68"><call pos:start="1941:24" pos:end="1941:68"><name pos:start="1941:24" pos:end="1941:33">av_strlcat</name><argument_list pos:start="1941:34" pos:end="1941:68">(<argument pos:start="1941:35" pos:end="1941:41"><expr pos:start="1941:35" pos:end="1941:41"><name pos:start="1941:35" pos:end="1941:39">clean</name><operator pos:start="1941:40" pos:end="1941:40">+</operator><name pos:start="1941:41" pos:end="1941:41">o</name></expr></argument>, <argument pos:start="1941:44" pos:end="1941:49"><expr pos:start="1941:44" pos:end="1941:49"><literal type="string" pos:start="1941:44" pos:end="1941:49">"&amp;gt;"</literal></expr></argument>   , <argument pos:start="1941:55" pos:end="1941:67"><expr pos:start="1941:55" pos:end="1941:67"><name pos:start="1941:55" pos:end="1941:63">clean_len</name> <operator pos:start="1941:65" pos:end="1941:65">-</operator> <name pos:start="1941:67" pos:end="1941:67">o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="1941:71" pos:end="1941:76">break;</break>
            <case pos:start="1942:13" pos:end="1942:22">case <expr pos:start="1942:18" pos:end="1942:21"><literal type="char" pos:start="1942:18" pos:end="1942:21">'\''</literal></expr>:</case> <expr_stmt pos:start="1942:24" pos:end="1942:69"><expr pos:start="1942:24" pos:end="1942:68"><call pos:start="1942:24" pos:end="1942:68"><name pos:start="1942:24" pos:end="1942:33">av_strlcat</name><argument_list pos:start="1942:34" pos:end="1942:68">(<argument pos:start="1942:35" pos:end="1942:41"><expr pos:start="1942:35" pos:end="1942:41"><name pos:start="1942:35" pos:end="1942:39">clean</name><operator pos:start="1942:40" pos:end="1942:40">+</operator><name pos:start="1942:41" pos:end="1942:41">o</name></expr></argument>, <argument pos:start="1942:44" pos:end="1942:51"><expr pos:start="1942:44" pos:end="1942:51"><literal type="string" pos:start="1942:44" pos:end="1942:51">"&amp;apos;"</literal></expr></argument> , <argument pos:start="1942:55" pos:end="1942:67"><expr pos:start="1942:55" pos:end="1942:67"><name pos:start="1942:55" pos:end="1942:63">clean_len</name> <operator pos:start="1942:65" pos:end="1942:65">-</operator> <name pos:start="1942:67" pos:end="1942:67">o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="1942:71" pos:end="1942:76">break;</break>
            <case pos:start="1943:13" pos:end="1943:22">case <expr pos:start="1943:18" pos:end="1943:21"><literal type="char" pos:start="1943:18" pos:end="1943:21">'\"'</literal></expr>:</case> <expr_stmt pos:start="1943:24" pos:end="1943:69"><expr pos:start="1943:24" pos:end="1943:68"><call pos:start="1943:24" pos:end="1943:68"><name pos:start="1943:24" pos:end="1943:33">av_strlcat</name><argument_list pos:start="1943:34" pos:end="1943:68">(<argument pos:start="1943:35" pos:end="1943:41"><expr pos:start="1943:35" pos:end="1943:41"><name pos:start="1943:35" pos:end="1943:39">clean</name><operator pos:start="1943:40" pos:end="1943:40">+</operator><name pos:start="1943:41" pos:end="1943:41">o</name></expr></argument>, <argument pos:start="1943:44" pos:end="1943:51"><expr pos:start="1943:44" pos:end="1943:51"><literal type="string" pos:start="1943:44" pos:end="1943:51">"&amp;quot;"</literal></expr></argument> , <argument pos:start="1943:55" pos:end="1943:67"><expr pos:start="1943:55" pos:end="1943:67"><name pos:start="1943:55" pos:end="1943:63">clean_len</name> <operator pos:start="1943:65" pos:end="1943:65">-</operator> <name pos:start="1943:67" pos:end="1943:67">o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="1943:71" pos:end="1943:76">break;</break>
            <default pos:start="1944:13" pos:end="1944:20">default:</default>   <expr_stmt pos:start="1944:24" pos:end="1944:69"><expr pos:start="1944:24" pos:end="1944:68"><call pos:start="1944:24" pos:end="1944:68"><name pos:start="1944:24" pos:end="1944:33">av_strlcat</name><argument_list pos:start="1944:34" pos:end="1944:68">(<argument pos:start="1944:35" pos:end="1944:41"><expr pos:start="1944:35" pos:end="1944:41"><name pos:start="1944:35" pos:end="1944:39">clean</name><operator pos:start="1944:40" pos:end="1944:40">+</operator><name pos:start="1944:41" pos:end="1944:41">o</name></expr></argument>, <argument pos:start="1944:44" pos:end="1944:52"><expr pos:start="1944:44" pos:end="1944:52"><literal type="string" pos:start="1944:44" pos:end="1944:52">"&amp;#9785;"</literal></expr></argument>, <argument pos:start="1944:55" pos:end="1944:67"><expr pos:start="1944:55" pos:end="1944:67"><name pos:start="1944:55" pos:end="1944:63">clean_len</name> <operator pos:start="1944:65" pos:end="1944:65">-</operator> <name pos:start="1944:67" pos:end="1944:67">o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="1944:71" pos:end="1944:76">break;</break>
            </block_content>}</block></switch>
            <expr_stmt pos:start="1946:13" pos:end="1946:33"><expr pos:start="1946:13" pos:end="1946:32"><name pos:start="1946:13" pos:end="1946:13">o</name> <operator pos:start="1946:15" pos:end="1946:16">+=</operator> <call pos:start="1946:18" pos:end="1946:32"><name pos:start="1946:18" pos:end="1946:23">strlen</name><argument_list pos:start="1946:24" pos:end="1946:32">(<argument pos:start="1946:25" pos:end="1946:31"><expr pos:start="1946:25" pos:end="1946:31"><name pos:start="1946:25" pos:end="1946:29">clean</name><operator pos:start="1946:30" pos:end="1946:30">+</operator><name pos:start="1946:31" pos:end="1946:31">o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="1949:5" pos:end="1949:17"><expr pos:start="1949:5" pos:end="1949:16"><name pos:start="1949:5" pos:end="1949:12"><name pos:start="1949:5" pos:end="1949:9">clean</name><index pos:start="1949:10" pos:end="1949:12">[<expr pos:start="1949:11" pos:end="1949:11"><name pos:start="1949:11" pos:end="1949:11">o</name></expr>]</index></name> <operator pos:start="1949:14" pos:end="1949:14">=</operator> <literal type="number" pos:start="1949:16" pos:end="1949:16">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="1952:1" pos:end="2187:1"><type pos:start="1952:1" pos:end="1952:11"><specifier pos:start="1952:1" pos:end="1952:6">static</specifier> <name pos:start="1952:8" pos:end="1952:11">void</name></type> <name pos:start="1952:13" pos:end="1952:26">compute_status</name><parameter_list pos:start="1952:27" pos:end="1952:42">(<parameter pos:start="1952:28" pos:end="1952:41"><decl pos:start="1952:28" pos:end="1952:41"><type pos:start="1952:28" pos:end="1952:40"><name pos:start="1952:28" pos:end="1952:38">HTTPContext</name> <modifier pos:start="1952:40" pos:end="1952:40">*</modifier></type><name pos:start="1952:41" pos:end="1952:41">c</name></decl></parameter>)</parameter_list>
<block pos:start="1953:1" pos:end="2187:1">{<block_content pos:start="1954:5" pos:end="2186:39">
    <decl_stmt pos:start="1954:5" pos:end="1954:20"><decl pos:start="1954:5" pos:end="1954:19"><type pos:start="1954:5" pos:end="1954:17"><name pos:start="1954:5" pos:end="1954:15">HTTPContext</name> <modifier pos:start="1954:17" pos:end="1954:17">*</modifier></type><name pos:start="1954:18" pos:end="1954:19">c1</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1955:5" pos:end="1955:27"><decl pos:start="1955:5" pos:end="1955:26"><type pos:start="1955:5" pos:end="1955:20"><name pos:start="1955:5" pos:end="1955:18">FFServerStream</name> <modifier pos:start="1955:20" pos:end="1955:20">*</modifier></type><name pos:start="1955:21" pos:end="1955:26">stream</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1956:5" pos:end="1956:12"><decl pos:start="1956:5" pos:end="1956:11"><type pos:start="1956:5" pos:end="1956:10"><name pos:start="1956:5" pos:end="1956:8">char</name> <modifier pos:start="1956:10" pos:end="1956:10">*</modifier></type><name pos:start="1956:11" pos:end="1956:11">p</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1957:5" pos:end="1957:14"><decl pos:start="1957:5" pos:end="1957:13"><type pos:start="1957:5" pos:end="1957:10"><name pos:start="1957:5" pos:end="1957:10">time_t</name></type> <name pos:start="1957:12" pos:end="1957:13">ti</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1958:5" pos:end="1958:15"><decl pos:start="1958:5" pos:end="1958:9"><type pos:start="1958:5" pos:end="1958:7"><name pos:start="1958:5" pos:end="1958:7">int</name></type> <name pos:start="1958:9" pos:end="1958:9">i</name></decl>, <decl pos:start="1958:12" pos:end="1958:14"><type ref="prev" pos:start="1958:5" pos:end="1958:7"/><name pos:start="1958:12" pos:end="1958:14">len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1959:5" pos:end="1959:20"><decl pos:start="1959:5" pos:end="1959:19"><type pos:start="1959:5" pos:end="1959:17"><name pos:start="1959:5" pos:end="1959:15">AVIOContext</name> <modifier pos:start="1959:17" pos:end="1959:17">*</modifier></type><name pos:start="1959:18" pos:end="1959:19">pb</name></decl>;</decl_stmt>

    <if_stmt pos:start="1961:5" pos:end="1966:5"><if pos:start="1961:5" pos:end="1966:5">if <condition pos:start="1961:8" pos:end="1961:35">(<expr pos:start="1961:9" pos:end="1961:34"><call pos:start="1961:9" pos:end="1961:30"><name pos:start="1961:9" pos:end="1961:25">avio_open_dyn_buf</name><argument_list pos:start="1961:26" pos:end="1961:30">(<argument pos:start="1961:27" pos:end="1961:29"><expr pos:start="1961:27" pos:end="1961:29"><operator pos:start="1961:27" pos:end="1961:27">&amp;</operator><name pos:start="1961:28" pos:end="1961:29">pb</name></expr></argument>)</argument_list></call> <operator pos:start="1961:32" pos:end="1961:32">&lt;</operator> <literal type="number" pos:start="1961:34" pos:end="1961:34">0</literal></expr>)</condition> <block pos:start="1961:37" pos:end="1966:5">{<block_content pos:start="1963:9" pos:end="1965:15">
        <comment type="block" pos:start="1962:9" pos:end="1962:36">/* XXX: return an error ? */</comment>
        <expr_stmt pos:start="1963:9" pos:end="1963:34"><expr pos:start="1963:9" pos:end="1963:33"><name pos:start="1963:9" pos:end="1963:21"><name pos:start="1963:9" pos:end="1963:9">c</name><operator pos:start="1963:10" pos:end="1963:11">-&gt;</operator><name pos:start="1963:12" pos:end="1963:21">buffer_ptr</name></name> <operator pos:start="1963:23" pos:end="1963:23">=</operator> <name pos:start="1963:25" pos:end="1963:33"><name pos:start="1963:25" pos:end="1963:25">c</name><operator pos:start="1963:26" pos:end="1963:27">-&gt;</operator><name pos:start="1963:28" pos:end="1963:33">buffer</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="1964:9" pos:end="1964:34"><expr pos:start="1964:9" pos:end="1964:33"><name pos:start="1964:9" pos:end="1964:21"><name pos:start="1964:9" pos:end="1964:9">c</name><operator pos:start="1964:10" pos:end="1964:11">-&gt;</operator><name pos:start="1964:12" pos:end="1964:21">buffer_end</name></name> <operator pos:start="1964:23" pos:end="1964:23">=</operator> <name pos:start="1964:25" pos:end="1964:33"><name pos:start="1964:25" pos:end="1964:25">c</name><operator pos:start="1964:26" pos:end="1964:27">-&gt;</operator><name pos:start="1964:28" pos:end="1964:33">buffer</name></name></expr>;</expr_stmt>
        <return pos:start="1965:9" pos:end="1965:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1968:5" pos:end="1968:43"><expr pos:start="1968:5" pos:end="1968:42"><call pos:start="1968:5" pos:end="1968:42"><name pos:start="1968:5" pos:end="1968:15">avio_printf</name><argument_list pos:start="1968:16" pos:end="1968:42">(<argument pos:start="1968:17" pos:end="1968:18"><expr pos:start="1968:17" pos:end="1968:18"><name pos:start="1968:17" pos:end="1968:18">pb</name></expr></argument>, <argument pos:start="1968:21" pos:end="1968:41"><expr pos:start="1968:21" pos:end="1968:41"><literal type="string" pos:start="1968:21" pos:end="1968:41">"HTTP/1.0 200 OK\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1969:5" pos:end="1969:51"><expr pos:start="1969:5" pos:end="1969:50"><call pos:start="1969:5" pos:end="1969:50"><name pos:start="1969:5" pos:end="1969:15">avio_printf</name><argument_list pos:start="1969:16" pos:end="1969:50">(<argument pos:start="1969:17" pos:end="1969:18"><expr pos:start="1969:17" pos:end="1969:18"><name pos:start="1969:17" pos:end="1969:18">pb</name></expr></argument>, <argument pos:start="1969:21" pos:end="1969:49"><expr pos:start="1969:21" pos:end="1969:49"><literal type="string" pos:start="1969:21" pos:end="1969:49">"Content-type: text/html\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1970:5" pos:end="1970:44"><expr pos:start="1970:5" pos:end="1970:43"><call pos:start="1970:5" pos:end="1970:43"><name pos:start="1970:5" pos:end="1970:15">avio_printf</name><argument_list pos:start="1970:16" pos:end="1970:43">(<argument pos:start="1970:17" pos:end="1970:18"><expr pos:start="1970:17" pos:end="1970:18"><name pos:start="1970:17" pos:end="1970:18">pb</name></expr></argument>, <argument pos:start="1970:21" pos:end="1970:42"><expr pos:start="1970:21" pos:end="1970:42"><literal type="string" pos:start="1970:21" pos:end="1970:42">"Pragma: no-cache\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1971:5" pos:end="1971:28"><expr pos:start="1971:5" pos:end="1971:27"><call pos:start="1971:5" pos:end="1971:27"><name pos:start="1971:5" pos:end="1971:15">avio_printf</name><argument_list pos:start="1971:16" pos:end="1971:27">(<argument pos:start="1971:17" pos:end="1971:18"><expr pos:start="1971:17" pos:end="1971:18"><name pos:start="1971:17" pos:end="1971:18">pb</name></expr></argument>, <argument pos:start="1971:21" pos:end="1971:26"><expr pos:start="1971:21" pos:end="1971:26"><literal type="string" pos:start="1971:21" pos:end="1971:26">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1973:5" pos:end="1973:41"><expr pos:start="1973:5" pos:end="1973:40"><call pos:start="1973:5" pos:end="1973:40"><name pos:start="1973:5" pos:end="1973:15">avio_printf</name><argument_list pos:start="1973:16" pos:end="1973:40">(<argument pos:start="1973:17" pos:end="1973:18"><expr pos:start="1973:17" pos:end="1973:18"><name pos:start="1973:17" pos:end="1973:18">pb</name></expr></argument>, <argument pos:start="1973:21" pos:end="1973:39"><expr pos:start="1973:21" pos:end="1973:39"><literal type="string" pos:start="1973:21" pos:end="1973:39">"&lt;!DOCTYPE html&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1974:5" pos:end="1974:76"><expr pos:start="1974:5" pos:end="1974:75"><call pos:start="1974:5" pos:end="1974:75"><name pos:start="1974:5" pos:end="1974:15">avio_printf</name><argument_list pos:start="1974:16" pos:end="1974:75">(<argument pos:start="1974:17" pos:end="1974:18"><expr pos:start="1974:17" pos:end="1974:18"><name pos:start="1974:17" pos:end="1974:18">pb</name></expr></argument>, <argument pos:start="1974:21" pos:end="1974:60"><expr pos:start="1974:21" pos:end="1974:60"><literal type="string" pos:start="1974:21" pos:end="1974:60">"&lt;html&gt;&lt;head&gt;&lt;title&gt;%s Status&lt;/title&gt;\n"</literal></expr></argument>, <argument pos:start="1974:63" pos:end="1974:74"><expr pos:start="1974:63" pos:end="1974:74"><name pos:start="1974:63" pos:end="1974:74">program_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1975:5" pos:end="1977:46"><if pos:start="1975:5" pos:end="1977:46">if <condition pos:start="1975:8" pos:end="1975:36">(<expr pos:start="1975:9" pos:end="1975:35"><name pos:start="1975:9" pos:end="1975:35"><name pos:start="1975:9" pos:end="1975:9">c</name><operator pos:start="1975:10" pos:end="1975:11">-&gt;</operator><name pos:start="1975:12" pos:end="1975:17">stream</name><operator pos:start="1975:18" pos:end="1975:19">-&gt;</operator><name pos:start="1975:20" pos:end="1975:32">feed_filename</name><index pos:start="1975:33" pos:end="1975:35">[<expr pos:start="1975:34" pos:end="1975:34"><literal type="number" pos:start="1975:34" pos:end="1975:34">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="1976:9" pos:end="1977:46"><block_content pos:start="1976:9" pos:end="1977:46">
        <expr_stmt pos:start="1976:9" pos:end="1977:46"><expr pos:start="1976:9" pos:end="1977:45"><call pos:start="1976:9" pos:end="1977:45"><name pos:start="1976:9" pos:end="1976:19">avio_printf</name><argument_list pos:start="1976:20" pos:end="1977:45">(<argument pos:start="1976:21" pos:end="1976:22"><expr pos:start="1976:21" pos:end="1976:22"><name pos:start="1976:21" pos:end="1976:22">pb</name></expr></argument>, <argument pos:start="1976:25" pos:end="1976:68"><expr pos:start="1976:25" pos:end="1976:68"><literal type="string" pos:start="1976:25" pos:end="1976:68">"&lt;link rel=\"shortcut icon\" href=\"%s\"&gt;\n"</literal></expr></argument>,
                    <argument pos:start="1977:21" pos:end="1977:44"><expr pos:start="1977:21" pos:end="1977:44"><name pos:start="1977:21" pos:end="1977:44"><name pos:start="1977:21" pos:end="1977:21">c</name><operator pos:start="1977:22" pos:end="1977:23">-&gt;</operator><name pos:start="1977:24" pos:end="1977:29">stream</name><operator pos:start="1977:30" pos:end="1977:31">-&gt;</operator><name pos:start="1977:32" pos:end="1977:44">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="1978:5" pos:end="1978:39"><expr pos:start="1978:5" pos:end="1978:38"><call pos:start="1978:5" pos:end="1978:38"><name pos:start="1978:5" pos:end="1978:15">avio_printf</name><argument_list pos:start="1978:16" pos:end="1978:38">(<argument pos:start="1978:17" pos:end="1978:18"><expr pos:start="1978:17" pos:end="1978:18"><name pos:start="1978:17" pos:end="1978:18">pb</name></expr></argument>, <argument pos:start="1978:21" pos:end="1978:37"><expr pos:start="1978:21" pos:end="1978:37"><literal type="string" pos:start="1978:21" pos:end="1978:37">"&lt;/head&gt;\n&lt;body&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1979:5" pos:end="1979:58"><expr pos:start="1979:5" pos:end="1979:57"><call pos:start="1979:5" pos:end="1979:57"><name pos:start="1979:5" pos:end="1979:15">avio_printf</name><argument_list pos:start="1979:16" pos:end="1979:57">(<argument pos:start="1979:17" pos:end="1979:18"><expr pos:start="1979:17" pos:end="1979:18"><name pos:start="1979:17" pos:end="1979:18">pb</name></expr></argument>, <argument pos:start="1979:21" pos:end="1979:42"><expr pos:start="1979:21" pos:end="1979:42"><literal type="string" pos:start="1979:21" pos:end="1979:42">"&lt;h1&gt;%s Status&lt;/h1&gt;\n"</literal></expr></argument>, <argument pos:start="1979:45" pos:end="1979:56"><expr pos:start="1979:45" pos:end="1979:56"><name pos:start="1979:45" pos:end="1979:56">program_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="1980:5" pos:end="1980:23">/* format status */</comment>
    <expr_stmt pos:start="1981:5" pos:end="1981:52"><expr pos:start="1981:5" pos:end="1981:51"><call pos:start="1981:5" pos:end="1981:51"><name pos:start="1981:5" pos:end="1981:15">avio_printf</name><argument_list pos:start="1981:16" pos:end="1981:51">(<argument pos:start="1981:17" pos:end="1981:18"><expr pos:start="1981:17" pos:end="1981:18"><name pos:start="1981:17" pos:end="1981:18">pb</name></expr></argument>, <argument pos:start="1981:21" pos:end="1981:50"><expr pos:start="1981:21" pos:end="1981:50"><literal type="string" pos:start="1981:21" pos:end="1981:50">"&lt;h2&gt;Available Streams&lt;/h2&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1982:5" pos:end="1982:33"><expr pos:start="1982:5" pos:end="1982:32"><call pos:start="1982:5" pos:end="1982:32"><name pos:start="1982:5" pos:end="1982:15">avio_printf</name><argument_list pos:start="1982:16" pos:end="1982:32">(<argument pos:start="1982:17" pos:end="1982:18"><expr pos:start="1982:17" pos:end="1982:18"><name pos:start="1982:17" pos:end="1982:18">pb</name></expr></argument>, <argument pos:start="1982:21" pos:end="1982:31"><expr pos:start="1982:21" pos:end="1982:31"><literal type="string" pos:start="1982:21" pos:end="1982:31">"&lt;table&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1983:5" pos:end="1983:174"><expr pos:start="1983:5" pos:end="1983:173"><call pos:start="1983:5" pos:end="1983:173"><name pos:start="1983:5" pos:end="1983:15">avio_printf</name><argument_list pos:start="1983:16" pos:end="1983:173">(<argument pos:start="1983:17" pos:end="1983:18"><expr pos:start="1983:17" pos:end="1983:18"><name pos:start="1983:17" pos:end="1983:18">pb</name></expr></argument>, <argument pos:start="1983:21" pos:end="1983:172"><expr pos:start="1983:21" pos:end="1983:172"><literal type="string" pos:start="1983:21" pos:end="1983:172">"&lt;tr&gt;&lt;th&gt;Path&lt;th&gt;Served&lt;br&gt;Conns&lt;th&gt;&lt;br&gt;bytes&lt;th&gt;Format&lt;th&gt;Bit rate&lt;br&gt;kbit/s&lt;th&gt;Video&lt;br&gt;kbit/s&lt;th&gt;&lt;br&gt;Codec&lt;th&gt;Audio&lt;br&gt;kbit/s&lt;th&gt;&lt;br&gt;Codec&lt;th&gt;Feed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1984:5" pos:end="1984:33"><expr pos:start="1984:5" pos:end="1984:32"><name pos:start="1984:5" pos:end="1984:10">stream</name> <operator pos:start="1984:12" pos:end="1984:12">=</operator> <name pos:start="1984:14" pos:end="1984:32"><name pos:start="1984:14" pos:end="1984:19">config</name><operator pos:start="1984:20" pos:end="1984:20">.</operator><name pos:start="1984:21" pos:end="1984:32">first_stream</name></name></expr>;</expr_stmt>
    <while pos:start="1985:5" pos:end="2081:5">while <condition pos:start="1985:11" pos:end="1985:18">(<expr pos:start="1985:12" pos:end="1985:17"><name pos:start="1985:12" pos:end="1985:17">stream</name></expr>)</condition> <block pos:start="1985:20" pos:end="2081:5">{<block_content pos:start="1986:9" pos:end="2080:30">
        <decl_stmt pos:start="1986:9" pos:end="1986:29"><decl pos:start="1986:9" pos:end="1986:28"><type pos:start="1986:9" pos:end="1986:12"><name pos:start="1986:9" pos:end="1986:12">char</name></type> <name pos:start="1986:14" pos:end="1986:28"><name pos:start="1986:14" pos:end="1986:22">sfilename</name><index pos:start="1986:23" pos:end="1986:28">[<expr pos:start="1986:24" pos:end="1986:27"><literal type="number" pos:start="1986:24" pos:end="1986:27">1024</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="1987:9" pos:end="1987:19"><decl pos:start="1987:9" pos:end="1987:18"><type pos:start="1987:9" pos:end="1987:14"><name pos:start="1987:9" pos:end="1987:12">char</name> <modifier pos:start="1987:14" pos:end="1987:14">*</modifier></type><name pos:start="1987:15" pos:end="1987:18">eosf</name></decl>;</decl_stmt>

        <if_stmt pos:start="1989:9" pos:end="1992:9"><if pos:start="1989:9" pos:end="1992:9">if <condition pos:start="1989:12" pos:end="1989:35">(<expr pos:start="1989:13" pos:end="1989:34"><name pos:start="1989:13" pos:end="1989:24"><name pos:start="1989:13" pos:end="1989:18">stream</name><operator pos:start="1989:19" pos:end="1989:20">-&gt;</operator><name pos:start="1989:21" pos:end="1989:24">feed</name></name> <operator pos:start="1989:26" pos:end="1989:27">==</operator> <name pos:start="1989:29" pos:end="1989:34">stream</name></expr>)</condition> <block pos:start="1989:37" pos:end="1992:9">{<block_content pos:start="1990:13" pos:end="1991:21">
            <expr_stmt pos:start="1990:13" pos:end="1990:34"><expr pos:start="1990:13" pos:end="1990:33"><name pos:start="1990:13" pos:end="1990:18">stream</name> <operator pos:start="1990:20" pos:end="1990:20">=</operator> <name pos:start="1990:22" pos:end="1990:33"><name pos:start="1990:22" pos:end="1990:27">stream</name><operator pos:start="1990:28" pos:end="1990:29">-&gt;</operator><name pos:start="1990:30" pos:end="1990:33">next</name></name></expr>;</expr_stmt>
            <continue pos:start="1991:13" pos:end="1991:21">continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="1994:9" pos:end="1994:72"><expr pos:start="1994:9" pos:end="1994:71"><call pos:start="1994:9" pos:end="1994:71"><name pos:start="1994:9" pos:end="1994:18">av_strlcpy</name><argument_list pos:start="1994:19" pos:end="1994:71">(<argument pos:start="1994:20" pos:end="1994:28"><expr pos:start="1994:20" pos:end="1994:28"><name pos:start="1994:20" pos:end="1994:28">sfilename</name></expr></argument>, <argument pos:start="1994:31" pos:end="1994:46"><expr pos:start="1994:31" pos:end="1994:46"><name pos:start="1994:31" pos:end="1994:46"><name pos:start="1994:31" pos:end="1994:36">stream</name><operator pos:start="1994:37" pos:end="1994:38">-&gt;</operator><name pos:start="1994:39" pos:end="1994:46">filename</name></name></expr></argument>, <argument pos:start="1994:49" pos:end="1994:70"><expr pos:start="1994:49" pos:end="1994:70"><sizeof pos:start="1994:49" pos:end="1994:65">sizeof<argument_list pos:start="1994:55" pos:end="1994:65">(<argument pos:start="1994:56" pos:end="1994:64"><expr pos:start="1994:56" pos:end="1994:64"><name pos:start="1994:56" pos:end="1994:64">sfilename</name></expr></argument>)</argument_list></sizeof> <operator pos:start="1994:67" pos:end="1994:67">-</operator> <literal type="number" pos:start="1994:69" pos:end="1994:70">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1995:9" pos:end="1995:45"><expr pos:start="1995:9" pos:end="1995:44"><name pos:start="1995:9" pos:end="1995:12">eosf</name> <operator pos:start="1995:14" pos:end="1995:14">=</operator> <name pos:start="1995:16" pos:end="1995:24">sfilename</name> <operator pos:start="1995:26" pos:end="1995:26">+</operator> <call pos:start="1995:28" pos:end="1995:44"><name pos:start="1995:28" pos:end="1995:33">strlen</name><argument_list pos:start="1995:34" pos:end="1995:44">(<argument pos:start="1995:35" pos:end="1995:43"><expr pos:start="1995:35" pos:end="1995:43"><name pos:start="1995:35" pos:end="1995:43">sfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1996:9" pos:end="2013:9"><if pos:start="1996:9" pos:end="2013:9">if <condition pos:start="1996:12" pos:end="1996:34">(<expr pos:start="1996:13" pos:end="1996:33"><name pos:start="1996:13" pos:end="1996:16">eosf</name> <operator pos:start="1996:18" pos:end="1996:18">-</operator> <name pos:start="1996:20" pos:end="1996:28">sfilename</name> <operator pos:start="1996:30" pos:end="1996:31">&gt;=</operator> <literal type="number" pos:start="1996:33" pos:end="1996:33">4</literal></expr>)</condition> <block pos:start="1996:36" pos:end="2013:9">{<block_content pos:start="1997:13" pos:end="2012:13">
            <if_stmt pos:start="1997:13" pos:end="2012:13"><if pos:start="1997:13" pos:end="1998:41">if <condition pos:start="1997:16" pos:end="1997:46">(<expr pos:start="1997:17" pos:end="1997:45"><call pos:start="1997:17" pos:end="1997:40"><name pos:start="1997:17" pos:end="1997:22">strcmp</name><argument_list pos:start="1997:23" pos:end="1997:40">(<argument pos:start="1997:24" pos:end="1997:31"><expr pos:start="1997:24" pos:end="1997:31"><name pos:start="1997:24" pos:end="1997:27">eosf</name> <operator pos:start="1997:29" pos:end="1997:29">-</operator> <literal type="number" pos:start="1997:31" pos:end="1997:31">4</literal></expr></argument>, <argument pos:start="1997:34" pos:end="1997:39"><expr pos:start="1997:34" pos:end="1997:39"><literal type="string" pos:start="1997:34" pos:end="1997:39">".asf"</literal></expr></argument>)</argument_list></call> <operator pos:start="1997:42" pos:end="1997:43">==</operator> <literal type="number" pos:start="1997:45" pos:end="1997:45">0</literal></expr>)</condition><block type="pseudo" pos:start="1998:17" pos:end="1998:41"><block_content pos:start="1998:17" pos:end="1998:41">
                <expr_stmt pos:start="1998:17" pos:end="1998:41"><expr pos:start="1998:17" pos:end="1998:40"><call pos:start="1998:17" pos:end="1998:40"><name pos:start="1998:17" pos:end="1998:22">strcpy</name><argument_list pos:start="1998:23" pos:end="1998:40">(<argument pos:start="1998:24" pos:end="1998:31"><expr pos:start="1998:24" pos:end="1998:31"><name pos:start="1998:24" pos:end="1998:27">eosf</name> <operator pos:start="1998:29" pos:end="1998:29">-</operator> <literal type="number" pos:start="1998:31" pos:end="1998:31">4</literal></expr></argument>, <argument pos:start="1998:34" pos:end="1998:39"><expr pos:start="1998:34" pos:end="1998:39"><literal type="string" pos:start="1998:34" pos:end="1998:39">".asx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif" pos:start="1999:13" pos:end="2000:41">else if <condition pos:start="1999:21" pos:end="1999:50">(<expr pos:start="1999:22" pos:end="1999:49"><call pos:start="1999:22" pos:end="1999:44"><name pos:start="1999:22" pos:end="1999:27">strcmp</name><argument_list pos:start="1999:28" pos:end="1999:44">(<argument pos:start="1999:29" pos:end="1999:36"><expr pos:start="1999:29" pos:end="1999:36"><name pos:start="1999:29" pos:end="1999:32">eosf</name> <operator pos:start="1999:34" pos:end="1999:34">-</operator> <literal type="number" pos:start="1999:36" pos:end="1999:36">3</literal></expr></argument>, <argument pos:start="1999:39" pos:end="1999:43"><expr pos:start="1999:39" pos:end="1999:43"><literal type="string" pos:start="1999:39" pos:end="1999:43">".rm"</literal></expr></argument>)</argument_list></call> <operator pos:start="1999:46" pos:end="1999:47">==</operator> <literal type="number" pos:start="1999:49" pos:end="1999:49">0</literal></expr>)</condition><block type="pseudo" pos:start="2000:17" pos:end="2000:41"><block_content pos:start="2000:17" pos:end="2000:41">
                <expr_stmt pos:start="2000:17" pos:end="2000:41"><expr pos:start="2000:17" pos:end="2000:40"><call pos:start="2000:17" pos:end="2000:40"><name pos:start="2000:17" pos:end="2000:22">strcpy</name><argument_list pos:start="2000:23" pos:end="2000:40">(<argument pos:start="2000:24" pos:end="2000:31"><expr pos:start="2000:24" pos:end="2000:31"><name pos:start="2000:24" pos:end="2000:27">eosf</name> <operator pos:start="2000:29" pos:end="2000:29">-</operator> <literal type="number" pos:start="2000:31" pos:end="2000:31">3</literal></expr></argument>, <argument pos:start="2000:34" pos:end="2000:39"><expr pos:start="2000:34" pos:end="2000:39"><literal type="string" pos:start="2000:34" pos:end="2000:39">".ram"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif" pos:start="2001:13" pos:end="2012:13">else if <condition pos:start="2001:21" pos:end="2001:70">(<expr pos:start="2001:22" pos:end="2001:69"><name pos:start="2001:22" pos:end="2001:32"><name pos:start="2001:22" pos:end="2001:27">stream</name><operator pos:start="2001:28" pos:end="2001:29">-&gt;</operator><name pos:start="2001:30" pos:end="2001:32">fmt</name></name> <operator pos:start="2001:34" pos:end="2001:35">&amp;&amp;</operator> <operator pos:start="2001:37" pos:end="2001:37">!</operator><call pos:start="2001:38" pos:end="2001:69"><name pos:start="2001:38" pos:end="2001:43">strcmp</name><argument_list pos:start="2001:44" pos:end="2001:69">(<argument pos:start="2001:45" pos:end="2001:61"><expr pos:start="2001:45" pos:end="2001:61"><name pos:start="2001:45" pos:end="2001:61"><name pos:start="2001:45" pos:end="2001:50">stream</name><operator pos:start="2001:51" pos:end="2001:52">-&gt;</operator><name pos:start="2001:53" pos:end="2001:55">fmt</name><operator pos:start="2001:56" pos:end="2001:57">-&gt;</operator><name pos:start="2001:58" pos:end="2001:61">name</name></name></expr></argument>, <argument pos:start="2001:64" pos:end="2001:68"><expr pos:start="2001:64" pos:end="2001:68"><literal type="string" pos:start="2001:64" pos:end="2001:68">"rtp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2001:72" pos:end="2012:13">{<block_content pos:start="2005:17" pos:end="2011:42">
                <comment type="block" pos:start="2002:17" pos:end="2004:31">/* generate a sample RTSP director if
                 * unicast. Generate an SDP redirector if
                 * multicast */</comment>
                <expr_stmt pos:start="2005:17" pos:end="2005:47"><expr pos:start="2005:17" pos:end="2005:46"><name pos:start="2005:17" pos:end="2005:20">eosf</name> <operator pos:start="2005:22" pos:end="2005:22">=</operator> <call pos:start="2005:24" pos:end="2005:46"><name pos:start="2005:24" pos:end="2005:30">strrchr</name><argument_list pos:start="2005:31" pos:end="2005:46">(<argument pos:start="2005:32" pos:end="2005:40"><expr pos:start="2005:32" pos:end="2005:40"><name pos:start="2005:32" pos:end="2005:40">sfilename</name></expr></argument>, <argument pos:start="2005:43" pos:end="2005:45"><expr pos:start="2005:43" pos:end="2005:45"><literal type="char" pos:start="2005:43" pos:end="2005:45">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="2006:17" pos:end="2007:57"><if pos:start="2006:17" pos:end="2007:57">if <condition pos:start="2006:20" pos:end="2006:26">(<expr pos:start="2006:21" pos:end="2006:25"><operator pos:start="2006:21" pos:end="2006:21">!</operator><name pos:start="2006:22" pos:end="2006:25">eosf</name></expr>)</condition><block type="pseudo" pos:start="2007:21" pos:end="2007:57"><block_content pos:start="2007:21" pos:end="2007:57">
                    <expr_stmt pos:start="2007:21" pos:end="2007:57"><expr pos:start="2007:21" pos:end="2007:56"><name pos:start="2007:21" pos:end="2007:24">eosf</name> <operator pos:start="2007:26" pos:end="2007:26">=</operator> <name pos:start="2007:28" pos:end="2007:36">sfilename</name> <operator pos:start="2007:38" pos:end="2007:38">+</operator> <call pos:start="2007:40" pos:end="2007:56"><name pos:start="2007:40" pos:end="2007:45">strlen</name><argument_list pos:start="2007:46" pos:end="2007:56">(<argument pos:start="2007:47" pos:end="2007:55"><expr pos:start="2007:47" pos:end="2007:55"><name pos:start="2007:47" pos:end="2007:55">sfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt pos:start="2008:17" pos:end="2011:42"><if pos:start="2008:17" pos:end="2009:41">if <condition pos:start="2008:20" pos:end="2008:41">(<expr pos:start="2008:21" pos:end="2008:40"><name pos:start="2008:21" pos:end="2008:40"><name pos:start="2008:21" pos:end="2008:26">stream</name><operator pos:start="2008:27" pos:end="2008:28">-&gt;</operator><name pos:start="2008:29" pos:end="2008:40">is_multicast</name></name></expr>)</condition><block type="pseudo" pos:start="2009:21" pos:end="2009:41"><block_content pos:start="2009:21" pos:end="2009:41">
                    <expr_stmt pos:start="2009:21" pos:end="2009:41"><expr pos:start="2009:21" pos:end="2009:40"><call pos:start="2009:21" pos:end="2009:40"><name pos:start="2009:21" pos:end="2009:26">strcpy</name><argument_list pos:start="2009:27" pos:end="2009:40">(<argument pos:start="2009:28" pos:end="2009:31"><expr pos:start="2009:28" pos:end="2009:31"><name pos:start="2009:28" pos:end="2009:31">eosf</name></expr></argument>, <argument pos:start="2009:34" pos:end="2009:39"><expr pos:start="2009:34" pos:end="2009:39"><literal type="string" pos:start="2009:34" pos:end="2009:39">".sdp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else pos:start="2010:17" pos:end="2011:42">else<block type="pseudo" pos:start="2011:21" pos:end="2011:42"><block_content pos:start="2011:21" pos:end="2011:42">
                    <expr_stmt pos:start="2011:21" pos:end="2011:42"><expr pos:start="2011:21" pos:end="2011:41"><call pos:start="2011:21" pos:end="2011:41"><name pos:start="2011:21" pos:end="2011:26">strcpy</name><argument_list pos:start="2011:27" pos:end="2011:41">(<argument pos:start="2011:28" pos:end="2011:31"><expr pos:start="2011:28" pos:end="2011:31"><name pos:start="2011:28" pos:end="2011:31">eosf</name></expr></argument>, <argument pos:start="2011:34" pos:end="2011:40"><expr pos:start="2011:34" pos:end="2011:40"><literal type="string" pos:start="2011:34" pos:end="2011:40">".rtsp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2015:9" pos:end="2016:49"><expr pos:start="2015:9" pos:end="2016:48"><call pos:start="2015:9" pos:end="2016:48"><name pos:start="2015:9" pos:end="2015:19">avio_printf</name><argument_list pos:start="2015:20" pos:end="2016:48">(<argument pos:start="2015:21" pos:end="2015:22"><expr pos:start="2015:21" pos:end="2015:22"><name pos:start="2015:21" pos:end="2015:22">pb</name></expr></argument>, <argument pos:start="2015:25" pos:end="2015:57"><expr pos:start="2015:25" pos:end="2015:57"><literal type="string" pos:start="2015:25" pos:end="2015:57">"&lt;tr&gt;&lt;td&gt;&lt;a href=\"/%s\"&gt;%s&lt;/a&gt; "</literal></expr></argument>,
                    <argument pos:start="2016:21" pos:end="2016:29"><expr pos:start="2016:21" pos:end="2016:29"><name pos:start="2016:21" pos:end="2016:29">sfilename</name></expr></argument>, <argument pos:start="2016:32" pos:end="2016:47"><expr pos:start="2016:32" pos:end="2016:47"><name pos:start="2016:32" pos:end="2016:47"><name pos:start="2016:32" pos:end="2016:37">stream</name><operator pos:start="2016:38" pos:end="2016:39">-&gt;</operator><name pos:start="2016:40" pos:end="2016:47">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2017:9" pos:end="2018:42"><expr pos:start="2017:9" pos:end="2018:41"><call pos:start="2017:9" pos:end="2018:41"><name pos:start="2017:9" pos:end="2017:19">avio_printf</name><argument_list pos:start="2017:20" pos:end="2018:41">(<argument pos:start="2017:21" pos:end="2017:22"><expr pos:start="2017:21" pos:end="2017:22"><name pos:start="2017:21" pos:end="2017:22">pb</name></expr></argument>, <argument pos:start="2017:25" pos:end="2017:39"><expr pos:start="2017:25" pos:end="2017:39"><literal type="string" pos:start="2017:25" pos:end="2017:39">"&lt;td&gt; %d &lt;td&gt; "</literal></expr></argument>,
                    <argument pos:start="2018:21" pos:end="2018:40"><expr pos:start="2018:21" pos:end="2018:40"><name pos:start="2018:21" pos:end="2018:40"><name pos:start="2018:21" pos:end="2018:26">stream</name><operator pos:start="2018:27" pos:end="2018:28">-&gt;</operator><name pos:start="2018:29" pos:end="2018:40">conns_served</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line" pos:start="2019:9" pos:end="2019:103">// TODO: Investigate if we can make http bitexact so it always produces the same count of bytes</comment>
        <if_stmt pos:start="2020:9" pos:end="2021:52"><if pos:start="2020:9" pos:end="2021:52">if <condition pos:start="2020:12" pos:end="2020:29">(<expr pos:start="2020:13" pos:end="2020:28"><operator pos:start="2020:13" pos:end="2020:13">!</operator><name pos:start="2020:14" pos:end="2020:28"><name pos:start="2020:14" pos:end="2020:19">config</name><operator pos:start="2020:20" pos:end="2020:20">.</operator><name pos:start="2020:21" pos:end="2020:28">bitexact</name></name></expr>)</condition><block type="pseudo" pos:start="2021:13" pos:end="2021:52"><block_content pos:start="2021:13" pos:end="2021:52">
            <expr_stmt pos:start="2021:13" pos:end="2021:52"><expr pos:start="2021:13" pos:end="2021:51"><call pos:start="2021:13" pos:end="2021:51"><name pos:start="2021:13" pos:end="2021:25">fmt_bytecount</name><argument_list pos:start="2021:26" pos:end="2021:51">(<argument pos:start="2021:27" pos:end="2021:28"><expr pos:start="2021:27" pos:end="2021:28"><name pos:start="2021:27" pos:end="2021:28">pb</name></expr></argument>, <argument pos:start="2021:31" pos:end="2021:50"><expr pos:start="2021:31" pos:end="2021:50"><name pos:start="2021:31" pos:end="2021:50"><name pos:start="2021:31" pos:end="2021:36">stream</name><operator pos:start="2021:37" pos:end="2021:38">-&gt;</operator><name pos:start="2021:39" pos:end="2021:50">bytes_served</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <switch pos:start="2023:9" pos:end="2079:9">switch<condition pos:start="2023:15" pos:end="2023:35">(<expr pos:start="2023:16" pos:end="2023:34"><name pos:start="2023:16" pos:end="2023:34"><name pos:start="2023:16" pos:end="2023:21">stream</name><operator pos:start="2023:22" pos:end="2023:23">-&gt;</operator><name pos:start="2023:24" pos:end="2023:34">stream_type</name></name></expr>)</condition> <block pos:start="2023:37" pos:end="2079:9">{<block_content pos:start="2024:9" pos:end="2078:18">
        <case pos:start="2024:9" pos:end="2024:30">case <expr pos:start="2024:14" pos:end="2024:29"><name pos:start="2024:14" pos:end="2024:29">STREAM_TYPE_LIVE</name></expr>:</case> <block pos:start="2024:32" pos:end="2073:9">{<block_content pos:start="2025:13" pos:end="2072:34">
            <decl_stmt pos:start="2025:13" pos:end="2025:35"><decl pos:start="2025:13" pos:end="2025:34"><type pos:start="2025:13" pos:end="2025:15"><name pos:start="2025:13" pos:end="2025:15">int</name></type> <name pos:start="2025:17" pos:end="2025:30">audio_bit_rate</name> <init pos:start="2025:32" pos:end="2025:34">= <expr pos:start="2025:34" pos:end="2025:34"><literal type="number" pos:start="2025:34" pos:end="2025:34">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="2026:13" pos:end="2026:35"><decl pos:start="2026:13" pos:end="2026:34"><type pos:start="2026:13" pos:end="2026:15"><name pos:start="2026:13" pos:end="2026:15">int</name></type> <name pos:start="2026:17" pos:end="2026:30">video_bit_rate</name> <init pos:start="2026:32" pos:end="2026:34">= <expr pos:start="2026:34" pos:end="2026:34"><literal type="number" pos:start="2026:34" pos:end="2026:34">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="2027:13" pos:end="2027:46"><decl pos:start="2027:13" pos:end="2027:45"><type pos:start="2027:13" pos:end="2027:24"><specifier pos:start="2027:13" pos:end="2027:17">const</specifier> <name pos:start="2027:19" pos:end="2027:22">char</name> <modifier pos:start="2027:24" pos:end="2027:24">*</modifier></type><name pos:start="2027:25" pos:end="2027:40">audio_codec_name</name> <init pos:start="2027:42" pos:end="2027:45">= <expr pos:start="2027:44" pos:end="2027:45"><literal type="string" pos:start="2027:44" pos:end="2027:45">""</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="2028:13" pos:end="2028:46"><decl pos:start="2028:13" pos:end="2028:45"><type pos:start="2028:13" pos:end="2028:24"><specifier pos:start="2028:13" pos:end="2028:17">const</specifier> <name pos:start="2028:19" pos:end="2028:22">char</name> <modifier pos:start="2028:24" pos:end="2028:24">*</modifier></type><name pos:start="2028:25" pos:end="2028:40">video_codec_name</name> <init pos:start="2028:42" pos:end="2028:45">= <expr pos:start="2028:44" pos:end="2028:45"><literal type="string" pos:start="2028:44" pos:end="2028:45">""</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="2029:13" pos:end="2029:52"><decl pos:start="2029:13" pos:end="2029:51"><type pos:start="2029:13" pos:end="2029:24"><specifier pos:start="2029:13" pos:end="2029:17">const</specifier> <name pos:start="2029:19" pos:end="2029:22">char</name> <modifier pos:start="2029:24" pos:end="2029:24">*</modifier></type><name pos:start="2029:25" pos:end="2029:46">audio_codec_name_extra</name> <init pos:start="2029:48" pos:end="2029:51">= <expr pos:start="2029:50" pos:end="2029:51"><literal type="string" pos:start="2029:50" pos:end="2029:51">""</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="2030:13" pos:end="2030:52"><decl pos:start="2030:13" pos:end="2030:51"><type pos:start="2030:13" pos:end="2030:24"><specifier pos:start="2030:13" pos:end="2030:17">const</specifier> <name pos:start="2030:19" pos:end="2030:22">char</name> <modifier pos:start="2030:24" pos:end="2030:24">*</modifier></type><name pos:start="2030:25" pos:end="2030:46">video_codec_name_extra</name> <init pos:start="2030:48" pos:end="2030:51">= <expr pos:start="2030:50" pos:end="2030:51"><literal type="string" pos:start="2030:50" pos:end="2030:51">""</literal></expr></init></decl>;</decl_stmt>

            <for pos:start="2032:13" pos:end="2059:13">for<control pos:start="2032:16" pos:end="2032:45">(<init pos:start="2032:17" pos:end="2032:20"><expr pos:start="2032:17" pos:end="2032:19"><name pos:start="2032:17" pos:end="2032:17">i</name><operator pos:start="2032:18" pos:end="2032:18">=</operator><literal type="number" pos:start="2032:19" pos:end="2032:19">0</literal></expr>;</init><condition pos:start="2032:21" pos:end="2032:41"><expr pos:start="2032:21" pos:end="2032:40"><name pos:start="2032:21" pos:end="2032:21">i</name><operator pos:start="2032:22" pos:end="2032:22">&lt;</operator><name pos:start="2032:23" pos:end="2032:40"><name pos:start="2032:23" pos:end="2032:28">stream</name><operator pos:start="2032:29" pos:end="2032:30">-&gt;</operator><name pos:start="2032:31" pos:end="2032:40">nb_streams</name></name></expr>;</condition><incr pos:start="2032:42" pos:end="2032:44"><expr pos:start="2032:42" pos:end="2032:44"><name pos:start="2032:42" pos:end="2032:42">i</name><operator pos:start="2032:43" pos:end="2032:44">++</operator></expr></incr>)</control> <block pos:start="2032:47" pos:end="2059:13">{<block_content pos:start="2033:17" pos:end="2058:17">
                <decl_stmt pos:start="2033:17" pos:end="2033:57"><decl pos:start="2033:17" pos:end="2033:56"><type pos:start="2033:17" pos:end="2033:33"><name pos:start="2033:17" pos:end="2033:31">LayeredAVStream</name> <modifier pos:start="2033:33" pos:end="2033:33">*</modifier></type><name pos:start="2033:34" pos:end="2033:35">st</name> <init pos:start="2033:37" pos:end="2033:56">= <expr pos:start="2033:39" pos:end="2033:56"><name pos:start="2033:39" pos:end="2033:56"><name pos:start="2033:39" pos:end="2033:44">stream</name><operator pos:start="2033:45" pos:end="2033:46">-&gt;</operator><name pos:start="2033:47" pos:end="2033:53">streams</name><index pos:start="2033:54" pos:end="2033:56">[<expr pos:start="2033:55" pos:end="2033:55"><name pos:start="2033:55" pos:end="2033:55">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt pos:start="2034:17" pos:end="2034:78"><decl pos:start="2034:17" pos:end="2034:77"><type pos:start="2034:17" pos:end="2034:25"><name pos:start="2034:17" pos:end="2034:23">AVCodec</name> <modifier pos:start="2034:25" pos:end="2034:25">*</modifier></type><name pos:start="2034:26" pos:end="2034:30">codec</name> <init pos:start="2034:32" pos:end="2034:77">= <expr pos:start="2034:34" pos:end="2034:77"><call pos:start="2034:34" pos:end="2034:77"><name pos:start="2034:34" pos:end="2034:53">avcodec_find_encoder</name><argument_list pos:start="2034:54" pos:end="2034:77">(<argument pos:start="2034:55" pos:end="2034:76"><expr pos:start="2034:55" pos:end="2034:76"><name pos:start="2034:55" pos:end="2034:76"><name pos:start="2034:55" pos:end="2034:56">st</name><operator pos:start="2034:57" pos:end="2034:58">-&gt;</operator><name pos:start="2034:59" pos:end="2034:66">codecpar</name><operator pos:start="2034:67" pos:end="2034:68">-&gt;</operator><name pos:start="2034:69" pos:end="2034:76">codec_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <switch pos:start="2036:17" pos:end="2058:17">switch<condition pos:start="2036:23" pos:end="2036:48">(<expr pos:start="2036:24" pos:end="2036:47"><name pos:start="2036:24" pos:end="2036:47"><name pos:start="2036:24" pos:end="2036:25">st</name><operator pos:start="2036:26" pos:end="2036:27">-&gt;</operator><name pos:start="2036:28" pos:end="2036:35">codecpar</name><operator pos:start="2036:36" pos:end="2036:37">-&gt;</operator><name pos:start="2036:38" pos:end="2036:47">codec_type</name></name></expr>)</condition> <block pos:start="2036:50" pos:end="2058:17">{<block_content pos:start="2037:17" pos:end="2057:28">
                <case pos:start="2037:17" pos:end="2037:40">case <expr pos:start="2037:22" pos:end="2037:39"><name pos:start="2037:22" pos:end="2037:39">AVMEDIA_TYPE_AUDIO</name></expr>:</case>
                    <expr_stmt pos:start="2038:21" pos:end="2038:61"><expr pos:start="2038:21" pos:end="2038:60"><name pos:start="2038:21" pos:end="2038:34">audio_bit_rate</name> <operator pos:start="2038:36" pos:end="2038:37">+=</operator> <name pos:start="2038:39" pos:end="2038:60"><name pos:start="2038:39" pos:end="2038:40">st</name><operator pos:start="2038:41" pos:end="2038:42">-&gt;</operator><name pos:start="2038:43" pos:end="2038:50">codecpar</name><operator pos:start="2038:51" pos:end="2038:52">-&gt;</operator><name pos:start="2038:53" pos:end="2038:60">bit_rate</name></name></expr>;</expr_stmt>
                    <if_stmt pos:start="2039:21" pos:end="2043:21"><if pos:start="2039:21" pos:end="2043:21">if <condition pos:start="2039:24" pos:end="2039:30">(<expr pos:start="2039:25" pos:end="2039:29"><name pos:start="2039:25" pos:end="2039:29">codec</name></expr>)</condition> <block pos:start="2039:32" pos:end="2043:21">{<block_content pos:start="2040:25" pos:end="2042:55">
                        <if_stmt pos:start="2040:25" pos:end="2041:59"><if pos:start="2040:25" pos:end="2041:59">if <condition pos:start="2040:28" pos:end="2040:46">(<expr pos:start="2040:29" pos:end="2040:45"><operator pos:start="2040:29" pos:end="2040:29">*</operator><name pos:start="2040:30" pos:end="2040:45">audio_codec_name</name></expr>)</condition><block type="pseudo" pos:start="2041:29" pos:end="2041:59"><block_content pos:start="2041:29" pos:end="2041:59">
                            <expr_stmt pos:start="2041:29" pos:end="2041:59"><expr pos:start="2041:29" pos:end="2041:58"><name pos:start="2041:29" pos:end="2041:50">audio_codec_name_extra</name> <operator pos:start="2041:52" pos:end="2041:52">=</operator> <literal type="string" pos:start="2041:54" pos:end="2041:58">"..."</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                        <expr_stmt pos:start="2042:25" pos:end="2042:55"><expr pos:start="2042:25" pos:end="2042:54"><name pos:start="2042:25" pos:end="2042:40">audio_codec_name</name> <operator pos:start="2042:42" pos:end="2042:42">=</operator> <name pos:start="2042:44" pos:end="2042:54"><name pos:start="2042:44" pos:end="2042:48">codec</name><operator pos:start="2042:49" pos:end="2042:50">-&gt;</operator><name pos:start="2042:51" pos:end="2042:54">name</name></name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <break pos:start="2044:21" pos:end="2044:26">break;</break>
                <case pos:start="2045:17" pos:end="2045:40">case <expr pos:start="2045:22" pos:end="2045:39"><name pos:start="2045:22" pos:end="2045:39">AVMEDIA_TYPE_VIDEO</name></expr>:</case>
                    <expr_stmt pos:start="2046:21" pos:end="2046:61"><expr pos:start="2046:21" pos:end="2046:60"><name pos:start="2046:21" pos:end="2046:34">video_bit_rate</name> <operator pos:start="2046:36" pos:end="2046:37">+=</operator> <name pos:start="2046:39" pos:end="2046:60"><name pos:start="2046:39" pos:end="2046:40">st</name><operator pos:start="2046:41" pos:end="2046:42">-&gt;</operator><name pos:start="2046:43" pos:end="2046:50">codecpar</name><operator pos:start="2046:51" pos:end="2046:52">-&gt;</operator><name pos:start="2046:53" pos:end="2046:60">bit_rate</name></name></expr>;</expr_stmt>
                    <if_stmt pos:start="2047:21" pos:end="2051:21"><if pos:start="2047:21" pos:end="2051:21">if <condition pos:start="2047:24" pos:end="2047:30">(<expr pos:start="2047:25" pos:end="2047:29"><name pos:start="2047:25" pos:end="2047:29">codec</name></expr>)</condition> <block pos:start="2047:32" pos:end="2051:21">{<block_content pos:start="2048:25" pos:end="2050:55">
                        <if_stmt pos:start="2048:25" pos:end="2049:59"><if pos:start="2048:25" pos:end="2049:59">if <condition pos:start="2048:28" pos:end="2048:46">(<expr pos:start="2048:29" pos:end="2048:45"><operator pos:start="2048:29" pos:end="2048:29">*</operator><name pos:start="2048:30" pos:end="2048:45">video_codec_name</name></expr>)</condition><block type="pseudo" pos:start="2049:29" pos:end="2049:59"><block_content pos:start="2049:29" pos:end="2049:59">
                            <expr_stmt pos:start="2049:29" pos:end="2049:59"><expr pos:start="2049:29" pos:end="2049:58"><name pos:start="2049:29" pos:end="2049:50">video_codec_name_extra</name> <operator pos:start="2049:52" pos:end="2049:52">=</operator> <literal type="string" pos:start="2049:54" pos:end="2049:58">"..."</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                        <expr_stmt pos:start="2050:25" pos:end="2050:55"><expr pos:start="2050:25" pos:end="2050:54"><name pos:start="2050:25" pos:end="2050:40">video_codec_name</name> <operator pos:start="2050:42" pos:end="2050:42">=</operator> <name pos:start="2050:44" pos:end="2050:54"><name pos:start="2050:44" pos:end="2050:48">codec</name><operator pos:start="2050:49" pos:end="2050:50">-&gt;</operator><name pos:start="2050:51" pos:end="2050:54">name</name></name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <break pos:start="2052:21" pos:end="2052:26">break;</break>
                <case pos:start="2053:17" pos:end="2053:39">case <expr pos:start="2053:22" pos:end="2053:38"><name pos:start="2053:22" pos:end="2053:38">AVMEDIA_TYPE_DATA</name></expr>:</case>
                    <expr_stmt pos:start="2054:21" pos:end="2054:61"><expr pos:start="2054:21" pos:end="2054:60"><name pos:start="2054:21" pos:end="2054:34">video_bit_rate</name> <operator pos:start="2054:36" pos:end="2054:37">+=</operator> <name pos:start="2054:39" pos:end="2054:60"><name pos:start="2054:39" pos:end="2054:40">st</name><operator pos:start="2054:41" pos:end="2054:42">-&gt;</operator><name pos:start="2054:43" pos:end="2054:50">codecpar</name><operator pos:start="2054:51" pos:end="2054:52">-&gt;</operator><name pos:start="2054:53" pos:end="2054:60">bit_rate</name></name></expr>;</expr_stmt>
                    <break pos:start="2055:21" pos:end="2055:26">break;</break>
                <default pos:start="2056:17" pos:end="2056:24">default:</default>
                    <expr_stmt pos:start="2057:21" pos:end="2057:28"><expr pos:start="2057:21" pos:end="2057:27"><call pos:start="2057:21" pos:end="2057:27"><name pos:start="2057:21" pos:end="2057:25">abort</name><argument_list pos:start="2057:26" pos:end="2057:27">()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></switch>
            </block_content>}</block></for>

            <expr_stmt pos:start="2061:13" pos:end="2066:66"><expr pos:start="2061:13" pos:end="2066:65"><call pos:start="2061:13" pos:end="2066:65"><name pos:start="2061:13" pos:end="2061:23">avio_printf</name><argument_list pos:start="2061:24" pos:end="2066:65">(<argument pos:start="2061:25" pos:end="2061:26"><expr pos:start="2061:25" pos:end="2061:26"><name pos:start="2061:25" pos:end="2061:26">pb</name></expr></argument>, <argument pos:start="2061:29" pos:end="2062:43"><expr pos:start="2061:29" pos:end="2062:43"><literal type="string" pos:start="2061:29" pos:end="2061:70">"&lt;td&gt; %s &lt;td&gt; %d &lt;td&gt; %d &lt;td&gt; %s %s &lt;td&gt; "</literal>
                            <literal type="string" pos:start="2062:29" pos:end="2062:43">"%d &lt;td&gt; %s %s"</literal></expr></argument>,
                        <argument pos:start="2063:25" pos:end="2063:41"><expr pos:start="2063:25" pos:end="2063:41"><name pos:start="2063:25" pos:end="2063:41"><name pos:start="2063:25" pos:end="2063:30">stream</name><operator pos:start="2063:31" pos:end="2063:32">-&gt;</operator><name pos:start="2063:33" pos:end="2063:35">fmt</name><operator pos:start="2063:36" pos:end="2063:37">-&gt;</operator><name pos:start="2063:38" pos:end="2063:41">name</name></name></expr></argument>, <argument pos:start="2063:44" pos:end="2063:60"><expr pos:start="2063:44" pos:end="2063:60"><name pos:start="2063:44" pos:end="2063:60"><name pos:start="2063:44" pos:end="2063:49">stream</name><operator pos:start="2063:50" pos:end="2063:51">-&gt;</operator><name pos:start="2063:52" pos:end="2063:60">bandwidth</name></name></expr></argument>,
                        <argument pos:start="2064:25" pos:end="2064:45"><expr pos:start="2064:25" pos:end="2064:45"><name pos:start="2064:25" pos:end="2064:38">video_bit_rate</name> <operator pos:start="2064:40" pos:end="2064:40">/</operator> <literal type="number" pos:start="2064:42" pos:end="2064:45">1000</literal></expr></argument>, <argument pos:start="2064:48" pos:end="2064:63"><expr pos:start="2064:48" pos:end="2064:63"><name pos:start="2064:48" pos:end="2064:63">video_codec_name</name></expr></argument>,
                        <argument pos:start="2065:25" pos:end="2065:46"><expr pos:start="2065:25" pos:end="2065:46"><name pos:start="2065:25" pos:end="2065:46">video_codec_name_extra</name></expr></argument>, <argument pos:start="2065:49" pos:end="2065:69"><expr pos:start="2065:49" pos:end="2065:69"><name pos:start="2065:49" pos:end="2065:62">audio_bit_rate</name> <operator pos:start="2065:64" pos:end="2065:64">/</operator> <literal type="number" pos:start="2065:66" pos:end="2065:69">1000</literal></expr></argument>,
                        <argument pos:start="2066:25" pos:end="2066:40"><expr pos:start="2066:25" pos:end="2066:40"><name pos:start="2066:25" pos:end="2066:40">audio_codec_name</name></expr></argument>, <argument pos:start="2066:43" pos:end="2066:64"><expr pos:start="2066:43" pos:end="2066:64"><name pos:start="2066:43" pos:end="2066:64">audio_codec_name_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2068:13" pos:end="2071:65"><if pos:start="2068:13" pos:end="2069:66">if <condition pos:start="2068:16" pos:end="2068:29">(<expr pos:start="2068:17" pos:end="2068:28"><name pos:start="2068:17" pos:end="2068:28"><name pos:start="2068:17" pos:end="2068:22">stream</name><operator pos:start="2068:23" pos:end="2068:24">-&gt;</operator><name pos:start="2068:25" pos:end="2068:28">feed</name></name></expr>)</condition><block type="pseudo" pos:start="2069:17" pos:end="2069:66"><block_content pos:start="2069:17" pos:end="2069:66">
                <expr_stmt pos:start="2069:17" pos:end="2069:66"><expr pos:start="2069:17" pos:end="2069:65"><call pos:start="2069:17" pos:end="2069:65"><name pos:start="2069:17" pos:end="2069:27">avio_printf</name><argument_list pos:start="2069:28" pos:end="2069:65">(<argument pos:start="2069:29" pos:end="2069:30"><expr pos:start="2069:29" pos:end="2069:30"><name pos:start="2069:29" pos:end="2069:30">pb</name></expr></argument>, <argument pos:start="2069:33" pos:end="2069:40"><expr pos:start="2069:33" pos:end="2069:40"><literal type="string" pos:start="2069:33" pos:end="2069:40">"&lt;td&gt;%s"</literal></expr></argument>, <argument pos:start="2069:43" pos:end="2069:64"><expr pos:start="2069:43" pos:end="2069:64"><name pos:start="2069:43" pos:end="2069:64"><name pos:start="2069:43" pos:end="2069:48">stream</name><operator pos:start="2069:49" pos:end="2069:50">-&gt;</operator><name pos:start="2069:51" pos:end="2069:54">feed</name><operator pos:start="2069:55" pos:end="2069:56">-&gt;</operator><name pos:start="2069:57" pos:end="2069:64">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="2070:13" pos:end="2071:65">else<block type="pseudo" pos:start="2071:17" pos:end="2071:65"><block_content pos:start="2071:17" pos:end="2071:65">
                <expr_stmt pos:start="2071:17" pos:end="2071:65"><expr pos:start="2071:17" pos:end="2071:64"><call pos:start="2071:17" pos:end="2071:64"><name pos:start="2071:17" pos:end="2071:27">avio_printf</name><argument_list pos:start="2071:28" pos:end="2071:64">(<argument pos:start="2071:29" pos:end="2071:30"><expr pos:start="2071:29" pos:end="2071:30"><name pos:start="2071:29" pos:end="2071:30">pb</name></expr></argument>, <argument pos:start="2071:33" pos:end="2071:40"><expr pos:start="2071:33" pos:end="2071:40"><literal type="string" pos:start="2071:33" pos:end="2071:40">"&lt;td&gt;%s"</literal></expr></argument>, <argument pos:start="2071:43" pos:end="2071:63"><expr pos:start="2071:43" pos:end="2071:63"><name pos:start="2071:43" pos:end="2071:63"><name pos:start="2071:43" pos:end="2071:48">stream</name><operator pos:start="2071:49" pos:end="2071:50">-&gt;</operator><name pos:start="2071:51" pos:end="2071:63">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt pos:start="2072:13" pos:end="2072:34"><expr pos:start="2072:13" pos:end="2072:33"><call pos:start="2072:13" pos:end="2072:33"><name pos:start="2072:13" pos:end="2072:23">avio_printf</name><argument_list pos:start="2072:24" pos:end="2072:33">(<argument pos:start="2072:25" pos:end="2072:26"><expr pos:start="2072:25" pos:end="2072:26"><name pos:start="2072:25" pos:end="2072:26">pb</name></expr></argument>, <argument pos:start="2072:29" pos:end="2072:32"><expr pos:start="2072:29" pos:end="2072:32"><literal type="string" pos:start="2072:29" pos:end="2072:32">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
            <break pos:start="2074:13" pos:end="2074:18">break;</break>
        <default pos:start="2075:9" pos:end="2075:16">default:</default>
            <expr_stmt pos:start="2076:13" pos:end="2077:56"><expr pos:start="2076:13" pos:end="2077:55"><call pos:start="2076:13" pos:end="2077:55"><name pos:start="2076:13" pos:end="2076:23">avio_printf</name><argument_list pos:start="2076:24" pos:end="2077:55">(<argument pos:start="2076:25" pos:end="2076:26"><expr pos:start="2076:25" pos:end="2076:26"><name pos:start="2076:25" pos:end="2076:26">pb</name></expr></argument>, <argument pos:start="2076:29" pos:end="2077:54"><expr pos:start="2076:29" pos:end="2077:54"><literal type="string" pos:start="2076:29" pos:end="2076:44">"&lt;td&gt; - &lt;td&gt; - "</literal>
                            <literal type="string" pos:start="2077:29" pos:end="2077:54">"&lt;td&gt; - &lt;td&gt;&lt;td&gt; - &lt;td&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="2078:13" pos:end="2078:18">break;</break>
        </block_content>}</block></switch>
        <expr_stmt pos:start="2080:9" pos:end="2080:30"><expr pos:start="2080:9" pos:end="2080:29"><name pos:start="2080:9" pos:end="2080:14">stream</name> <operator pos:start="2080:16" pos:end="2080:16">=</operator> <name pos:start="2080:18" pos:end="2080:29"><name pos:start="2080:18" pos:end="2080:23">stream</name><operator pos:start="2080:24" pos:end="2080:25">-&gt;</operator><name pos:start="2080:26" pos:end="2080:29">next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt pos:start="2082:5" pos:end="2082:34"><expr pos:start="2082:5" pos:end="2082:33"><call pos:start="2082:5" pos:end="2082:33"><name pos:start="2082:5" pos:end="2082:15">avio_printf</name><argument_list pos:start="2082:16" pos:end="2082:33">(<argument pos:start="2082:17" pos:end="2082:18"><expr pos:start="2082:17" pos:end="2082:18"><name pos:start="2082:17" pos:end="2082:18">pb</name></expr></argument>, <argument pos:start="2082:21" pos:end="2082:32"><expr pos:start="2082:21" pos:end="2082:32"><literal type="string" pos:start="2082:21" pos:end="2082:32">"&lt;/table&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="2084:5" pos:end="2084:33"><expr pos:start="2084:5" pos:end="2084:32"><name pos:start="2084:5" pos:end="2084:10">stream</name> <operator pos:start="2084:12" pos:end="2084:12">=</operator> <name pos:start="2084:14" pos:end="2084:32"><name pos:start="2084:14" pos:end="2084:19">config</name><operator pos:start="2084:20" pos:end="2084:20">.</operator><name pos:start="2084:21" pos:end="2084:32">first_stream</name></name></expr>;</expr_stmt>
    <while pos:start="2085:5" pos:end="2126:5">while <condition pos:start="2085:11" pos:end="2085:18">(<expr pos:start="2085:12" pos:end="2085:17"><name pos:start="2085:12" pos:end="2085:17">stream</name></expr>)</condition> <block pos:start="2085:20" pos:end="2126:5">{<block_content pos:start="2087:9" pos:end="2125:30">

        <if_stmt pos:start="2087:9" pos:end="2090:9"><if pos:start="2087:9" pos:end="2090:9">if <condition pos:start="2087:12" pos:end="2087:35">(<expr pos:start="2087:13" pos:end="2087:34"><name pos:start="2087:13" pos:end="2087:24"><name pos:start="2087:13" pos:end="2087:18">stream</name><operator pos:start="2087:19" pos:end="2087:20">-&gt;</operator><name pos:start="2087:21" pos:end="2087:24">feed</name></name> <operator pos:start="2087:26" pos:end="2087:27">!=</operator> <name pos:start="2087:29" pos:end="2087:34">stream</name></expr>)</condition> <block pos:start="2087:37" pos:end="2090:9">{<block_content pos:start="2088:13" pos:end="2089:21">
            <expr_stmt pos:start="2088:13" pos:end="2088:34"><expr pos:start="2088:13" pos:end="2088:33"><name pos:start="2088:13" pos:end="2088:18">stream</name> <operator pos:start="2088:20" pos:end="2088:20">=</operator> <name pos:start="2088:22" pos:end="2088:33"><name pos:start="2088:22" pos:end="2088:27">stream</name><operator pos:start="2088:28" pos:end="2088:29">-&gt;</operator><name pos:start="2088:30" pos:end="2088:33">next</name></name></expr>;</expr_stmt>
            <continue pos:start="2089:13" pos:end="2089:21">continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2092:9" pos:end="2092:62"><expr pos:start="2092:9" pos:end="2092:61"><call pos:start="2092:9" pos:end="2092:61"><name pos:start="2092:9" pos:end="2092:19">avio_printf</name><argument_list pos:start="2092:20" pos:end="2092:61">(<argument pos:start="2092:21" pos:end="2092:22"><expr pos:start="2092:21" pos:end="2092:22"><name pos:start="2092:21" pos:end="2092:22">pb</name></expr></argument>, <argument pos:start="2092:25" pos:end="2092:42"><expr pos:start="2092:25" pos:end="2092:42"><literal type="string" pos:start="2092:25" pos:end="2092:42">"&lt;h2&gt;Feed %s&lt;/h2&gt;"</literal></expr></argument>, <argument pos:start="2092:45" pos:end="2092:60"><expr pos:start="2092:45" pos:end="2092:60"><name pos:start="2092:45" pos:end="2092:60"><name pos:start="2092:45" pos:end="2092:50">stream</name><operator pos:start="2092:51" pos:end="2092:52">-&gt;</operator><name pos:start="2092:53" pos:end="2092:60">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2093:9" pos:end="2122:9"><if pos:start="2093:9" pos:end="2122:9">if <condition pos:start="2093:12" pos:end="2093:24">(<expr pos:start="2093:13" pos:end="2093:23"><name pos:start="2093:13" pos:end="2093:23"><name pos:start="2093:13" pos:end="2093:18">stream</name><operator pos:start="2093:19" pos:end="2093:20">-&gt;</operator><name pos:start="2093:21" pos:end="2093:23">pid</name></name></expr>)</condition> <block pos:start="2093:26" pos:end="2122:9">{<block_content pos:start="2094:13" pos:end="2121:35">
            <expr_stmt pos:start="2094:13" pos:end="2097:0"><expr pos:start="2094:13" pos:end="2094:81"><call pos:start="2094:13" pos:end="2094:81"><name pos:start="2094:13" pos:end="2094:23">avio_printf</name><argument_list pos:start="2094:24" pos:end="2094:81">(<argument pos:start="2094:25" pos:end="2094:26"><expr pos:start="2094:25" pos:end="2094:26"><name pos:start="2094:25" pos:end="2094:26">pb</name></expr></argument>, <argument pos:start="2094:29" pos:end="2094:57"><expr pos:start="2094:29" pos:end="2094:57"><literal type="string" pos:start="2094:29" pos:end="2094:46">"Running as pid %"</literal><name pos:start="2094:47" pos:end="2094:52">PRId64</name><literal type="string" pos:start="2094:53" pos:end="2094:57">".\n"</literal></expr></argument>, <argument pos:start="2094:60" pos:end="2094:80"><expr pos:start="2094:60" pos:end="2094:80"><operator pos:start="2094:60" pos:end="2094:60">(</operator><name pos:start="2094:61" pos:end="2094:67">int64_t</name><operator pos:start="2094:68" pos:end="2094:68">)</operator> <name pos:start="2094:70" pos:end="2094:80"><name pos:start="2094:70" pos:end="2094:75">stream</name><operator pos:start="2094:76" pos:end="2094:77">-&gt;</operator><name pos:start="2094:78" pos:end="2094:80">pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="2096:1" pos:end="2096:18">#<cpp:directive pos:start="2096:2" pos:end="2096:3">if</cpp:directive> <expr pos:start="2096:5" pos:end="2096:18"><call pos:start="2096:5" pos:end="2096:18"><name pos:start="2096:5" pos:end="2096:11">defined</name><argument_list pos:start="2096:12" pos:end="2096:18">(<argument pos:start="2096:13" pos:end="2096:17"><expr pos:start="2096:13" pos:end="2096:17"><name pos:start="2096:13" pos:end="2096:17">linux</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <block pos:start="2097:13" pos:end="2120:0">{<block_content pos:start="2098:17" pos:end="2117:18">
                <decl_stmt pos:start="2098:17" pos:end="2098:31"><decl pos:start="2098:17" pos:end="2098:30"><type pos:start="2098:17" pos:end="2098:22"><name pos:start="2098:17" pos:end="2098:20">FILE</name> <modifier pos:start="2098:22" pos:end="2098:22">*</modifier></type><name pos:start="2098:23" pos:end="2098:30">pid_stat</name></decl>;</decl_stmt>
                <decl_stmt pos:start="2099:17" pos:end="2099:32"><decl pos:start="2099:17" pos:end="2099:31"><type pos:start="2099:17" pos:end="2099:20"><name pos:start="2099:17" pos:end="2099:20">char</name></type> <name pos:start="2099:22" pos:end="2099:31"><name pos:start="2099:22" pos:end="2099:27">ps_cmd</name><index pos:start="2099:28" pos:end="2099:31">[<expr pos:start="2099:29" pos:end="2099:30"><literal type="number" pos:start="2099:29" pos:end="2099:30">64</literal></expr>]</index></name></decl>;</decl_stmt>

                <comment type="block" pos:start="2101:17" pos:end="2101:61">/* This is somewhat linux specific I guess */</comment>
                <expr_stmt pos:start="2102:17" pos:end="2104:48"><expr pos:start="2102:17" pos:end="2104:47"><call pos:start="2102:17" pos:end="2104:47"><name pos:start="2102:17" pos:end="2102:24">snprintf</name><argument_list pos:start="2102:25" pos:end="2104:47">(<argument pos:start="2102:26" pos:end="2102:31"><expr pos:start="2102:26" pos:end="2102:31"><name pos:start="2102:26" pos:end="2102:31">ps_cmd</name></expr></argument>, <argument pos:start="2102:34" pos:end="2102:47"><expr pos:start="2102:34" pos:end="2102:47"><sizeof pos:start="2102:34" pos:end="2102:47">sizeof<argument_list pos:start="2102:40" pos:end="2102:47">(<argument pos:start="2102:41" pos:end="2102:46"><expr pos:start="2102:41" pos:end="2102:46"><name pos:start="2102:41" pos:end="2102:46">ps_cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                         <argument pos:start="2103:26" pos:end="2103:73"><expr pos:start="2103:26" pos:end="2103:73"><literal type="string" pos:start="2103:26" pos:end="2103:65">"ps -o \"%%cpu,cputime\" --no-headers %"</literal><name pos:start="2103:66" pos:end="2103:71">PRId64</name><literal type="string" pos:start="2103:72" pos:end="2103:73">""</literal></expr></argument>,
                         <argument pos:start="2104:26" pos:end="2104:46"><expr pos:start="2104:26" pos:end="2104:46"><operator pos:start="2104:26" pos:end="2104:26">(</operator><name pos:start="2104:27" pos:end="2104:33">int64_t</name><operator pos:start="2104:34" pos:end="2104:34">)</operator> <name pos:start="2104:36" pos:end="2104:46"><name pos:start="2104:36" pos:end="2104:41">stream</name><operator pos:start="2104:42" pos:end="2104:43">-&gt;</operator><name pos:start="2104:44" pos:end="2104:46">pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                 <expr_stmt pos:start="2106:18" pos:end="2106:47"><expr pos:start="2106:18" pos:end="2106:46"><name pos:start="2106:18" pos:end="2106:25">pid_stat</name> <operator pos:start="2106:27" pos:end="2106:27">=</operator> <call pos:start="2106:29" pos:end="2106:46"><name pos:start="2106:29" pos:end="2106:33">popen</name><argument_list pos:start="2106:34" pos:end="2106:46">(<argument pos:start="2106:35" pos:end="2106:40"><expr pos:start="2106:35" pos:end="2106:40"><name pos:start="2106:35" pos:end="2106:40">ps_cmd</name></expr></argument>, <argument pos:start="2106:43" pos:end="2106:45"><expr pos:start="2106:43" pos:end="2106:45"><literal type="string" pos:start="2106:43" pos:end="2106:45">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <if_stmt pos:start="2107:18" pos:end="2117:18"><if pos:start="2107:18" pos:end="2117:18">if <condition pos:start="2107:21" pos:end="2107:30">(<expr pos:start="2107:22" pos:end="2107:29"><name pos:start="2107:22" pos:end="2107:29">pid_stat</name></expr>)</condition> <block pos:start="2107:32" pos:end="2117:18">{<block_content pos:start="2108:22" pos:end="2116:38">
                     <decl_stmt pos:start="2108:22" pos:end="2108:38"><decl pos:start="2108:22" pos:end="2108:37"><type pos:start="2108:22" pos:end="2108:25"><name pos:start="2108:22" pos:end="2108:25">char</name></type> <name pos:start="2108:27" pos:end="2108:37"><name pos:start="2108:27" pos:end="2108:33">cpuperc</name><index pos:start="2108:34" pos:end="2108:37">[<expr pos:start="2108:35" pos:end="2108:36"><literal type="number" pos:start="2108:35" pos:end="2108:36">10</literal></expr>]</index></name></decl>;</decl_stmt>
                     <decl_stmt pos:start="2109:22" pos:end="2109:38"><decl pos:start="2109:22" pos:end="2109:37"><type pos:start="2109:22" pos:end="2109:25"><name pos:start="2109:22" pos:end="2109:25">char</name></type> <name pos:start="2109:27" pos:end="2109:37"><name pos:start="2109:27" pos:end="2109:33">cpuused</name><index pos:start="2109:34" pos:end="2109:37">[<expr pos:start="2109:35" pos:end="2109:36"><literal type="number" pos:start="2109:35" pos:end="2109:36">64</literal></expr>]</index></name></decl>;</decl_stmt>

                     <if_stmt pos:start="2111:22" pos:end="2115:22"><if pos:start="2111:22" pos:end="2115:22">if <condition pos:start="2111:25" pos:end="2111:77">(<expr pos:start="2111:26" pos:end="2111:76"><call pos:start="2111:26" pos:end="2111:71"><name pos:start="2111:26" pos:end="2111:31">fscanf</name><argument_list pos:start="2111:32" pos:end="2111:71">(<argument pos:start="2111:33" pos:end="2111:40"><expr pos:start="2111:33" pos:end="2111:40"><name pos:start="2111:33" pos:end="2111:40">pid_stat</name></expr></argument>, <argument pos:start="2111:43" pos:end="2111:52"><expr pos:start="2111:43" pos:end="2111:52"><literal type="string" pos:start="2111:43" pos:end="2111:52">"%9s %63s"</literal></expr></argument>, <argument pos:start="2111:55" pos:end="2111:61"><expr pos:start="2111:55" pos:end="2111:61"><name pos:start="2111:55" pos:end="2111:61">cpuperc</name></expr></argument>, <argument pos:start="2111:64" pos:end="2111:70"><expr pos:start="2111:64" pos:end="2111:70"><name pos:start="2111:64" pos:end="2111:70">cpuused</name></expr></argument>)</argument_list></call> <operator pos:start="2111:73" pos:end="2111:74">==</operator> <literal type="number" pos:start="2111:76" pos:end="2111:76">2</literal></expr>)</condition> <block pos:start="2111:79" pos:end="2115:22">{<block_content pos:start="2112:26" pos:end="2114:55">
                         <expr_stmt pos:start="2112:26" pos:end="2114:55"><expr pos:start="2112:26" pos:end="2114:54"><call pos:start="2112:26" pos:end="2114:54"><name pos:start="2112:26" pos:end="2112:36">avio_printf</name><argument_list pos:start="2112:37" pos:end="2114:54">(<argument pos:start="2112:38" pos:end="2112:39"><expr pos:start="2112:38" pos:end="2112:39"><name pos:start="2112:38" pos:end="2112:39">pb</name></expr></argument>, <argument pos:start="2112:42" pos:end="2113:64"><expr pos:start="2112:42" pos:end="2113:64"><literal type="string" pos:start="2112:42" pos:end="2112:76">"Currently using %s%% of the cpu. "</literal>
                                         <literal type="string" pos:start="2113:42" pos:end="2113:64">"Total time used %s.\n"</literal></expr></argument>,
                                     <argument pos:start="2114:38" pos:end="2114:44"><expr pos:start="2114:38" pos:end="2114:44"><name pos:start="2114:38" pos:end="2114:44">cpuperc</name></expr></argument>, <argument pos:start="2114:47" pos:end="2114:53"><expr pos:start="2114:47" pos:end="2114:53"><name pos:start="2114:47" pos:end="2114:53">cpuused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     </block_content>}</block></if></if_stmt>
                     <expr_stmt pos:start="2116:22" pos:end="2116:38"><expr pos:start="2116:22" pos:end="2116:37"><call pos:start="2116:22" pos:end="2116:37"><name pos:start="2116:22" pos:end="2116:27">fclose</name><argument_list pos:start="2116:28" pos:end="2116:37">(<argument pos:start="2116:29" pos:end="2116:36"><expr pos:start="2116:29" pos:end="2116:36"><name pos:start="2116:29" pos:end="2116:36">pid_stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></if></if_stmt>
            </block_content>}</block>
<cpp:endif pos:start="2119:1" pos:end="2119:6">#<cpp:directive pos:start="2119:2" pos:end="2119:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="2121:13" pos:end="2121:35"><expr pos:start="2121:13" pos:end="2121:34"><call pos:start="2121:13" pos:end="2121:34"><name pos:start="2121:13" pos:end="2121:23">avio_printf</name><argument_list pos:start="2121:24" pos:end="2121:34">(<argument pos:start="2121:25" pos:end="2121:26"><expr pos:start="2121:25" pos:end="2121:26"><name pos:start="2121:25" pos:end="2121:26">pb</name></expr></argument>, <argument pos:start="2121:29" pos:end="2121:33"><expr pos:start="2121:29" pos:end="2121:33"><literal type="string" pos:start="2121:29" pos:end="2121:33">"&lt;p&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2124:9" pos:end="2124:40"><expr pos:start="2124:9" pos:end="2124:39"><call pos:start="2124:9" pos:end="2124:39"><name pos:start="2124:9" pos:end="2124:27">print_stream_params</name><argument_list pos:start="2124:28" pos:end="2124:39">(<argument pos:start="2124:29" pos:end="2124:30"><expr pos:start="2124:29" pos:end="2124:30"><name pos:start="2124:29" pos:end="2124:30">pb</name></expr></argument>, <argument pos:start="2124:33" pos:end="2124:38"><expr pos:start="2124:33" pos:end="2124:38"><name pos:start="2124:33" pos:end="2124:38">stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2125:9" pos:end="2125:30"><expr pos:start="2125:9" pos:end="2125:29"><name pos:start="2125:9" pos:end="2125:14">stream</name> <operator pos:start="2125:16" pos:end="2125:16">=</operator> <name pos:start="2125:18" pos:end="2125:29"><name pos:start="2125:18" pos:end="2125:23">stream</name><operator pos:start="2125:24" pos:end="2125:25">-&gt;</operator><name pos:start="2125:26" pos:end="2125:29">next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block" pos:start="2128:5" pos:end="2128:27">/* connection status */</comment>
    <expr_stmt pos:start="2129:5" pos:end="2129:52"><expr pos:start="2129:5" pos:end="2129:51"><call pos:start="2129:5" pos:end="2129:51"><name pos:start="2129:5" pos:end="2129:15">avio_printf</name><argument_list pos:start="2129:16" pos:end="2129:51">(<argument pos:start="2129:17" pos:end="2129:18"><expr pos:start="2129:17" pos:end="2129:18"><name pos:start="2129:17" pos:end="2129:18">pb</name></expr></argument>, <argument pos:start="2129:21" pos:end="2129:50"><expr pos:start="2129:21" pos:end="2129:50"><literal type="string" pos:start="2129:21" pos:end="2129:50">"&lt;h2&gt;Connection Status&lt;/h2&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="2131:5" pos:end="2132:59"><expr pos:start="2131:5" pos:end="2132:58"><call pos:start="2131:5" pos:end="2132:58"><name pos:start="2131:5" pos:end="2131:15">avio_printf</name><argument_list pos:start="2131:16" pos:end="2132:58">(<argument pos:start="2131:17" pos:end="2131:18"><expr pos:start="2131:17" pos:end="2131:18"><name pos:start="2131:17" pos:end="2131:18">pb</name></expr></argument>, <argument pos:start="2131:21" pos:end="2131:58"><expr pos:start="2131:21" pos:end="2131:58"><literal type="string" pos:start="2131:21" pos:end="2131:58">"Number of connections: %d / %d&lt;br&gt;\n"</literal></expr></argument>,
                <argument pos:start="2132:17" pos:end="2132:30"><expr pos:start="2132:17" pos:end="2132:30"><name pos:start="2132:17" pos:end="2132:30">nb_connections</name></expr></argument>, <argument pos:start="2132:33" pos:end="2132:57"><expr pos:start="2132:33" pos:end="2132:57"><name pos:start="2132:33" pos:end="2132:57"><name pos:start="2132:33" pos:end="2132:38">config</name><operator pos:start="2132:39" pos:end="2132:39">.</operator><name pos:start="2132:40" pos:end="2132:57">nb_max_connections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="2134:5" pos:end="2135:57"><expr pos:start="2134:5" pos:end="2135:56"><call pos:start="2134:5" pos:end="2135:56"><name pos:start="2134:5" pos:end="2134:15">avio_printf</name><argument_list pos:start="2134:16" pos:end="2135:56">(<argument pos:start="2134:17" pos:end="2134:18"><expr pos:start="2134:17" pos:end="2134:18"><name pos:start="2134:17" pos:end="2134:18">pb</name></expr></argument>, <argument pos:start="2134:21" pos:end="2134:69"><expr pos:start="2134:21" pos:end="2134:69"><literal type="string" pos:start="2134:21" pos:end="2134:41">"Bandwidth in use: %"</literal><name pos:start="2134:42" pos:end="2134:47">PRIu64</name><literal type="string" pos:start="2134:48" pos:end="2134:54">"k / %"</literal><name pos:start="2134:55" pos:end="2134:60">PRIu64</name><literal type="string" pos:start="2134:61" pos:end="2134:69">"k&lt;br&gt;\n"</literal></expr></argument>,
                <argument pos:start="2135:17" pos:end="2135:33"><expr pos:start="2135:17" pos:end="2135:33"><name pos:start="2135:17" pos:end="2135:33">current_bandwidth</name></expr></argument>, <argument pos:start="2135:36" pos:end="2135:55"><expr pos:start="2135:36" pos:end="2135:55"><name pos:start="2135:36" pos:end="2135:55"><name pos:start="2135:36" pos:end="2135:41">config</name><operator pos:start="2135:42" pos:end="2135:42">.</operator><name pos:start="2135:43" pos:end="2135:55">max_bandwidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="2137:5" pos:end="2137:33"><expr pos:start="2137:5" pos:end="2137:32"><call pos:start="2137:5" pos:end="2137:32"><name pos:start="2137:5" pos:end="2137:15">avio_printf</name><argument_list pos:start="2137:16" pos:end="2137:32">(<argument pos:start="2137:17" pos:end="2137:18"><expr pos:start="2137:17" pos:end="2137:18"><name pos:start="2137:17" pos:end="2137:18">pb</name></expr></argument>, <argument pos:start="2137:21" pos:end="2137:31"><expr pos:start="2137:21" pos:end="2137:31"><literal type="string" pos:start="2137:21" pos:end="2137:31">"&lt;table&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2138:5" pos:end="2139:68"><expr pos:start="2138:5" pos:end="2139:67"><call pos:start="2138:5" pos:end="2139:67"><name pos:start="2138:5" pos:end="2138:15">avio_printf</name><argument_list pos:start="2138:16" pos:end="2139:67">(<argument pos:start="2138:17" pos:end="2138:18"><expr pos:start="2138:17" pos:end="2138:18"><name pos:start="2138:17" pos:end="2138:18">pb</name></expr></argument>, <argument pos:start="2138:21" pos:end="2139:66"><expr pos:start="2138:21" pos:end="2139:66"><literal type="string" pos:start="2138:21" pos:end="2138:81">"&lt;tr&gt;&lt;th&gt;#&lt;th&gt;File&lt;th&gt;IP&lt;th&gt;URL&lt;th&gt;Proto&lt;th&gt;State&lt;th&gt;Target "</literal>
                    <literal type="string" pos:start="2139:21" pos:end="2139:66">"bit/s&lt;th&gt;Actual bit/s&lt;th&gt;Bytes transferred\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2140:5" pos:end="2140:24"><expr pos:start="2140:5" pos:end="2140:23"><name pos:start="2140:5" pos:end="2140:6">c1</name> <operator pos:start="2140:8" pos:end="2140:8">=</operator> <name pos:start="2140:10" pos:end="2140:23">first_http_ctx</name></expr>;</expr_stmt>
    <expr_stmt pos:start="2141:5" pos:end="2141:10"><expr pos:start="2141:5" pos:end="2141:9"><name pos:start="2141:5" pos:end="2141:5">i</name> <operator pos:start="2141:7" pos:end="2141:7">=</operator> <literal type="number" pos:start="2141:9" pos:end="2141:9">0</literal></expr>;</expr_stmt>
    <while pos:start="2142:5" pos:end="2173:5">while <condition pos:start="2142:11" pos:end="2142:14">(<expr pos:start="2142:12" pos:end="2142:13"><name pos:start="2142:12" pos:end="2142:13">c1</name></expr>)</condition> <block pos:start="2142:16" pos:end="2173:5">{<block_content pos:start="2143:9" pos:end="2172:22">
        <decl_stmt pos:start="2143:9" pos:end="2143:20"><decl pos:start="2143:9" pos:end="2143:19"><type pos:start="2143:9" pos:end="2143:11"><name pos:start="2143:9" pos:end="2143:11">int</name></type> <name pos:start="2143:13" pos:end="2143:19">bitrate</name></decl>;</decl_stmt>
        <decl_stmt pos:start="2144:9" pos:end="2144:14"><decl pos:start="2144:9" pos:end="2144:13"><type pos:start="2144:9" pos:end="2144:11"><name pos:start="2144:9" pos:end="2144:11">int</name></type> <name pos:start="2144:13" pos:end="2144:13">j</name></decl>;</decl_stmt>

        <expr_stmt pos:start="2146:9" pos:end="2146:20"><expr pos:start="2146:9" pos:end="2146:19"><name pos:start="2146:9" pos:end="2146:15">bitrate</name> <operator pos:start="2146:17" pos:end="2146:17">=</operator> <literal type="number" pos:start="2146:19" pos:end="2146:19">0</literal></expr>;</expr_stmt>
        <if_stmt pos:start="2147:9" pos:end="2154:9"><if pos:start="2147:9" pos:end="2154:9">if <condition pos:start="2147:12" pos:end="2147:23">(<expr pos:start="2147:13" pos:end="2147:22"><name pos:start="2147:13" pos:end="2147:22"><name pos:start="2147:13" pos:end="2147:14">c1</name><operator pos:start="2147:15" pos:end="2147:16">-&gt;</operator><name pos:start="2147:17" pos:end="2147:22">stream</name></name></expr>)</condition> <block pos:start="2147:25" pos:end="2154:9">{<block_content pos:start="2148:13" pos:end="2153:13">
            <for pos:start="2148:13" pos:end="2153:13">for <control pos:start="2148:17" pos:end="2148:56">(<init pos:start="2148:18" pos:end="2148:23"><expr pos:start="2148:18" pos:end="2148:22"><name pos:start="2148:18" pos:end="2148:18">j</name> <operator pos:start="2148:20" pos:end="2148:20">=</operator> <literal type="number" pos:start="2148:22" pos:end="2148:22">0</literal></expr>;</init> <condition pos:start="2148:25" pos:end="2148:51"><expr pos:start="2148:25" pos:end="2148:50"><name pos:start="2148:25" pos:end="2148:25">j</name> <operator pos:start="2148:27" pos:end="2148:27">&lt;</operator> <name pos:start="2148:29" pos:end="2148:50"><name pos:start="2148:29" pos:end="2148:30">c1</name><operator pos:start="2148:31" pos:end="2148:32">-&gt;</operator><name pos:start="2148:33" pos:end="2148:38">stream</name><operator pos:start="2148:39" pos:end="2148:40">-&gt;</operator><name pos:start="2148:41" pos:end="2148:50">nb_streams</name></name></expr>;</condition> <incr pos:start="2148:53" pos:end="2148:55"><expr pos:start="2148:53" pos:end="2148:55"><name pos:start="2148:53" pos:end="2148:53">j</name><operator pos:start="2148:54" pos:end="2148:55">++</operator></expr></incr>)</control> <block pos:start="2148:58" pos:end="2153:13">{<block_content pos:start="2149:17" pos:end="2152:98">
                <if_stmt pos:start="2149:17" pos:end="2152:98"><if pos:start="2149:17" pos:end="2150:74">if <condition pos:start="2149:20" pos:end="2149:38">(<expr pos:start="2149:21" pos:end="2149:37"><operator pos:start="2149:21" pos:end="2149:21">!</operator><name pos:start="2149:22" pos:end="2149:37"><name pos:start="2149:22" pos:end="2149:23">c1</name><operator pos:start="2149:24" pos:end="2149:25">-&gt;</operator><name pos:start="2149:26" pos:end="2149:31">stream</name><operator pos:start="2149:32" pos:end="2149:33">-&gt;</operator><name pos:start="2149:34" pos:end="2149:37">feed</name></name></expr>)</condition><block type="pseudo" pos:start="2150:21" pos:end="2150:74"><block_content pos:start="2150:21" pos:end="2150:74">
                    <expr_stmt pos:start="2150:21" pos:end="2150:74"><expr pos:start="2150:21" pos:end="2150:73"><name pos:start="2150:21" pos:end="2150:27">bitrate</name> <operator pos:start="2150:29" pos:end="2150:30">+=</operator> <name pos:start="2150:32" pos:end="2150:53"><name pos:start="2150:32" pos:end="2150:33">c1</name><operator pos:start="2150:34" pos:end="2150:35">-&gt;</operator><name pos:start="2150:36" pos:end="2150:41">stream</name><operator pos:start="2150:42" pos:end="2150:43">-&gt;</operator><name pos:start="2150:44" pos:end="2150:50">streams</name><index pos:start="2150:51" pos:end="2150:53">[<expr pos:start="2150:52" pos:end="2150:52"><name pos:start="2150:52" pos:end="2150:52">j</name></expr>]</index></name><operator pos:start="2150:54" pos:end="2150:55">-&gt;</operator><name pos:start="2150:56" pos:end="2150:73"><name pos:start="2150:56" pos:end="2150:63">codecpar</name><operator pos:start="2150:64" pos:end="2150:65">-&gt;</operator><name pos:start="2150:66" pos:end="2150:73">bit_rate</name></name></expr>;</expr_stmt></block_content></block></if>
                <if type="elseif" pos:start="2151:17" pos:end="2152:98">else if <condition pos:start="2151:25" pos:end="2151:50">(<expr pos:start="2151:26" pos:end="2151:49"><name pos:start="2151:26" pos:end="2151:44"><name pos:start="2151:26" pos:end="2151:27">c1</name><operator pos:start="2151:28" pos:end="2151:29">-&gt;</operator><name pos:start="2151:30" pos:end="2151:41">feed_streams</name><index pos:start="2151:42" pos:end="2151:44">[<expr pos:start="2151:43" pos:end="2151:43"><name pos:start="2151:43" pos:end="2151:43">j</name></expr>]</index></name> <operator pos:start="2151:46" pos:end="2151:47">&gt;=</operator> <literal type="number" pos:start="2151:49" pos:end="2151:49">0</literal></expr>)</condition><block type="pseudo" pos:start="2152:21" pos:end="2152:98"><block_content pos:start="2152:21" pos:end="2152:98">
                    <expr_stmt pos:start="2152:21" pos:end="2152:98"><expr pos:start="2152:21" pos:end="2152:97"><name pos:start="2152:21" pos:end="2152:27">bitrate</name> <operator pos:start="2152:29" pos:end="2152:30">+=</operator> <name pos:start="2152:32" pos:end="2152:77"><name pos:start="2152:32" pos:end="2152:33">c1</name><operator pos:start="2152:34" pos:end="2152:35">-&gt;</operator><name pos:start="2152:36" pos:end="2152:41">stream</name><operator pos:start="2152:42" pos:end="2152:43">-&gt;</operator><name pos:start="2152:44" pos:end="2152:47">feed</name><operator pos:start="2152:48" pos:end="2152:49">-&gt;</operator><name pos:start="2152:50" pos:end="2152:56">streams</name><index pos:start="2152:57" pos:end="2152:77">[<expr pos:start="2152:58" pos:end="2152:76"><name pos:start="2152:58" pos:end="2152:76"><name pos:start="2152:58" pos:end="2152:59">c1</name><operator pos:start="2152:60" pos:end="2152:61">-&gt;</operator><name pos:start="2152:62" pos:end="2152:73">feed_streams</name><index pos:start="2152:74" pos:end="2152:76">[<expr pos:start="2152:75" pos:end="2152:75"><name pos:start="2152:75" pos:end="2152:75">j</name></expr>]</index></name></expr>]</index></name><operator pos:start="2152:78" pos:end="2152:79">-&gt;</operator><name pos:start="2152:80" pos:end="2152:97"><name pos:start="2152:80" pos:end="2152:87">codecpar</name><operator pos:start="2152:88" pos:end="2152:89">-&gt;</operator><name pos:start="2152:90" pos:end="2152:97">bit_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2156:9" pos:end="2156:12"><expr pos:start="2156:9" pos:end="2156:11"><name pos:start="2156:9" pos:end="2156:9">i</name><operator pos:start="2156:10" pos:end="2156:11">++</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="2157:9" pos:end="2157:46"><expr pos:start="2157:9" pos:end="2157:45"><name pos:start="2157:9" pos:end="2157:9">p</name> <operator pos:start="2157:11" pos:end="2157:11">=</operator> <call pos:start="2157:13" pos:end="2157:45"><name pos:start="2157:13" pos:end="2157:21">inet_ntoa</name><argument_list pos:start="2157:22" pos:end="2157:45">(<argument pos:start="2157:23" pos:end="2157:44"><expr pos:start="2157:23" pos:end="2157:44"><name pos:start="2157:23" pos:end="2157:44"><name pos:start="2157:23" pos:end="2157:24">c1</name><operator pos:start="2157:25" pos:end="2157:26">-&gt;</operator><name pos:start="2157:27" pos:end="2157:35">from_addr</name><operator pos:start="2157:36" pos:end="2157:36">.</operator><name pos:start="2157:37" pos:end="2157:44">sin_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2158:9" pos:end="2158:66"><expr pos:start="2158:9" pos:end="2158:65"><call pos:start="2158:9" pos:end="2158:65"><name pos:start="2158:9" pos:end="2158:18">clean_html</name><argument_list pos:start="2158:19" pos:end="2158:65">(<argument pos:start="2158:20" pos:end="2158:32"><expr pos:start="2158:20" pos:end="2158:32"><name pos:start="2158:20" pos:end="2158:32"><name pos:start="2158:20" pos:end="2158:21">c1</name><operator pos:start="2158:22" pos:end="2158:23">-&gt;</operator><name pos:start="2158:24" pos:end="2158:32">clean_url</name></name></expr></argument>, <argument pos:start="2158:35" pos:end="2158:55"><expr pos:start="2158:35" pos:end="2158:55"><sizeof pos:start="2158:35" pos:end="2158:55">sizeof<argument_list pos:start="2158:41" pos:end="2158:55">(<argument pos:start="2158:42" pos:end="2158:54"><expr pos:start="2158:42" pos:end="2158:54"><name pos:start="2158:42" pos:end="2158:54"><name pos:start="2158:42" pos:end="2158:43">c1</name><operator pos:start="2158:44" pos:end="2158:45">-&gt;</operator><name pos:start="2158:46" pos:end="2158:54">clean_url</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="2158:58" pos:end="2158:64"><expr pos:start="2158:58" pos:end="2158:64"><name pos:start="2158:58" pos:end="2158:64"><name pos:start="2158:58" pos:end="2158:59">c1</name><operator pos:start="2158:60" pos:end="2158:61">-&gt;</operator><name pos:start="2158:62" pos:end="2158:64">url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2159:9" pos:end="2165:57"><expr pos:start="2159:9" pos:end="2165:56"><call pos:start="2159:9" pos:end="2165:56"><name pos:start="2159:9" pos:end="2159:19">avio_printf</name><argument_list pos:start="2159:20" pos:end="2165:56">(<argument pos:start="2159:21" pos:end="2159:22"><expr pos:start="2159:21" pos:end="2159:22"><name pos:start="2159:21" pos:end="2159:22">pb</name></expr></argument>, <argument pos:start="2159:25" pos:end="2160:30"><expr pos:start="2159:25" pos:end="2160:30"><literal type="string" pos:start="2159:25" pos:end="2159:75">"&lt;tr&gt;&lt;td&gt;&lt;b&gt;%d&lt;/b&gt;&lt;td&gt;%s%s&lt;td&gt;%s&lt;td&gt;%s&lt;td&gt;%s&lt;td&gt;%s"</literal>
                        <literal type="string" pos:start="2160:25" pos:end="2160:30">"&lt;td&gt;"</literal></expr></argument>,
                    <argument pos:start="2161:21" pos:end="2161:21"><expr pos:start="2161:21" pos:end="2161:21"><name pos:start="2161:21" pos:end="2161:21">i</name></expr></argument>, <argument pos:start="2161:24" pos:end="2161:61"><expr pos:start="2161:24" pos:end="2161:61"><ternary pos:start="2161:24" pos:end="2161:61"><condition pos:start="2161:24" pos:end="2161:35"><expr pos:start="2161:24" pos:end="2161:33"><name pos:start="2161:24" pos:end="2161:33"><name pos:start="2161:24" pos:end="2161:25">c1</name><operator pos:start="2161:26" pos:end="2161:27">-&gt;</operator><name pos:start="2161:28" pos:end="2161:33">stream</name></name></expr> ?</condition><then pos:start="2161:37" pos:end="2161:56"> <expr pos:start="2161:37" pos:end="2161:56"><name pos:start="2161:37" pos:end="2161:56"><name pos:start="2161:37" pos:end="2161:38">c1</name><operator pos:start="2161:39" pos:end="2161:40">-&gt;</operator><name pos:start="2161:41" pos:end="2161:46">stream</name><operator pos:start="2161:47" pos:end="2161:48">-&gt;</operator><name pos:start="2161:49" pos:end="2161:56">filename</name></name></expr> </then><else pos:start="2161:58" pos:end="2161:61">: <expr pos:start="2161:60" pos:end="2161:61"><literal type="string" pos:start="2161:60" pos:end="2161:61">""</literal></expr></else></ternary></expr></argument>,
                    <argument pos:start="2162:21" pos:end="2162:72"><expr pos:start="2162:21" pos:end="2162:72"><ternary pos:start="2162:21" pos:end="2162:72"><condition pos:start="2162:21" pos:end="2162:57"><expr pos:start="2162:21" pos:end="2162:55"><name pos:start="2162:21" pos:end="2162:29"><name pos:start="2162:21" pos:end="2162:22">c1</name><operator pos:start="2162:23" pos:end="2162:24">-&gt;</operator><name pos:start="2162:25" pos:end="2162:29">state</name></name> <operator pos:start="2162:31" pos:end="2162:32">==</operator> <name pos:start="2162:34" pos:end="2162:55">HTTPSTATE_RECEIVE_DATA</name></expr> ?</condition><then pos:start="2162:59" pos:end="2162:67"> <expr pos:start="2162:59" pos:end="2162:67"><literal type="string" pos:start="2162:59" pos:end="2162:67">"(input)"</literal></expr> </then><else pos:start="2162:69" pos:end="2162:72">: <expr pos:start="2162:71" pos:end="2162:72"><literal type="string" pos:start="2162:71" pos:end="2162:72">""</literal></expr></else></ternary></expr></argument>,
                    <argument pos:start="2163:21" pos:end="2163:21"><expr pos:start="2163:21" pos:end="2163:21"><name pos:start="2163:21" pos:end="2163:21">p</name></expr></argument>,
                    <argument pos:start="2164:21" pos:end="2164:33"><expr pos:start="2164:21" pos:end="2164:33"><name pos:start="2164:21" pos:end="2164:33"><name pos:start="2164:21" pos:end="2164:22">c1</name><operator pos:start="2164:23" pos:end="2164:24">-&gt;</operator><name pos:start="2164:25" pos:end="2164:33">clean_url</name></name></expr></argument>,
                    <argument pos:start="2165:21" pos:end="2165:32"><expr pos:start="2165:21" pos:end="2165:32"><name pos:start="2165:21" pos:end="2165:32"><name pos:start="2165:21" pos:end="2165:22">c1</name><operator pos:start="2165:23" pos:end="2165:24">-&gt;</operator><name pos:start="2165:25" pos:end="2165:32">protocol</name></name></expr></argument>, <argument pos:start="2165:35" pos:end="2165:55"><expr pos:start="2165:35" pos:end="2165:55"><name pos:start="2165:35" pos:end="2165:55"><name pos:start="2165:35" pos:end="2165:44">http_state</name><index pos:start="2165:45" pos:end="2165:55">[<expr pos:start="2165:46" pos:end="2165:54"><name pos:start="2165:46" pos:end="2165:54"><name pos:start="2165:46" pos:end="2165:47">c1</name><operator pos:start="2165:48" pos:end="2165:49">-&gt;</operator><name pos:start="2165:50" pos:end="2165:54">state</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2166:9" pos:end="2166:35"><expr pos:start="2166:9" pos:end="2166:34"><call pos:start="2166:9" pos:end="2166:34"><name pos:start="2166:9" pos:end="2166:21">fmt_bytecount</name><argument_list pos:start="2166:22" pos:end="2166:34">(<argument pos:start="2166:23" pos:end="2166:24"><expr pos:start="2166:23" pos:end="2166:24"><name pos:start="2166:23" pos:end="2166:24">pb</name></expr></argument>, <argument pos:start="2166:27" pos:end="2166:33"><expr pos:start="2166:27" pos:end="2166:33"><name pos:start="2166:27" pos:end="2166:33">bitrate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2167:9" pos:end="2167:32"><expr pos:start="2167:9" pos:end="2167:31"><call pos:start="2167:9" pos:end="2167:31"><name pos:start="2167:9" pos:end="2167:19">avio_printf</name><argument_list pos:start="2167:20" pos:end="2167:31">(<argument pos:start="2167:21" pos:end="2167:22"><expr pos:start="2167:21" pos:end="2167:22"><name pos:start="2167:21" pos:end="2167:22">pb</name></expr></argument>, <argument pos:start="2167:25" pos:end="2167:30"><expr pos:start="2167:25" pos:end="2167:30"><literal type="string" pos:start="2167:25" pos:end="2167:30">"&lt;td&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2168:9" pos:end="2168:79"><expr pos:start="2168:9" pos:end="2168:78"><call pos:start="2168:9" pos:end="2168:78"><name pos:start="2168:9" pos:end="2168:21">fmt_bytecount</name><argument_list pos:start="2168:22" pos:end="2168:78">(<argument pos:start="2168:23" pos:end="2168:24"><expr pos:start="2168:23" pos:end="2168:24"><name pos:start="2168:23" pos:end="2168:24">pb</name></expr></argument>, <argument pos:start="2168:27" pos:end="2168:77"><expr pos:start="2168:27" pos:end="2168:77"><call pos:start="2168:27" pos:end="2168:73"><name pos:start="2168:27" pos:end="2168:42">compute_datarate</name><argument_list pos:start="2168:43" pos:end="2168:73">(<argument pos:start="2168:44" pos:end="2168:56"><expr pos:start="2168:44" pos:end="2168:56"><operator pos:start="2168:44" pos:end="2168:44">&amp;</operator><name pos:start="2168:45" pos:end="2168:56"><name pos:start="2168:45" pos:end="2168:46">c1</name><operator pos:start="2168:47" pos:end="2168:48">-&gt;</operator><name pos:start="2168:49" pos:end="2168:56">datarate</name></name></expr></argument>, <argument pos:start="2168:59" pos:end="2168:72"><expr pos:start="2168:59" pos:end="2168:72"><name pos:start="2168:59" pos:end="2168:72"><name pos:start="2168:59" pos:end="2168:60">c1</name><operator pos:start="2168:61" pos:end="2168:62">-&gt;</operator><name pos:start="2168:63" pos:end="2168:72">data_count</name></name></expr></argument>)</argument_list></call> <operator pos:start="2168:75" pos:end="2168:75">*</operator> <literal type="number" pos:start="2168:77" pos:end="2168:77">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2169:9" pos:end="2169:32"><expr pos:start="2169:9" pos:end="2169:31"><call pos:start="2169:9" pos:end="2169:31"><name pos:start="2169:9" pos:end="2169:19">avio_printf</name><argument_list pos:start="2169:20" pos:end="2169:31">(<argument pos:start="2169:21" pos:end="2169:22"><expr pos:start="2169:21" pos:end="2169:22"><name pos:start="2169:21" pos:end="2169:22">pb</name></expr></argument>, <argument pos:start="2169:25" pos:end="2169:30"><expr pos:start="2169:25" pos:end="2169:30"><literal type="string" pos:start="2169:25" pos:end="2169:30">"&lt;td&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2170:9" pos:end="2170:42"><expr pos:start="2170:9" pos:end="2170:41"><call pos:start="2170:9" pos:end="2170:41"><name pos:start="2170:9" pos:end="2170:21">fmt_bytecount</name><argument_list pos:start="2170:22" pos:end="2170:41">(<argument pos:start="2170:23" pos:end="2170:24"><expr pos:start="2170:23" pos:end="2170:24"><name pos:start="2170:23" pos:end="2170:24">pb</name></expr></argument>, <argument pos:start="2170:27" pos:end="2170:40"><expr pos:start="2170:27" pos:end="2170:40"><name pos:start="2170:27" pos:end="2170:40"><name pos:start="2170:27" pos:end="2170:28">c1</name><operator pos:start="2170:29" pos:end="2170:30">-&gt;</operator><name pos:start="2170:31" pos:end="2170:40">data_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2171:9" pos:end="2171:30"><expr pos:start="2171:9" pos:end="2171:29"><call pos:start="2171:9" pos:end="2171:29"><name pos:start="2171:9" pos:end="2171:19">avio_printf</name><argument_list pos:start="2171:20" pos:end="2171:29">(<argument pos:start="2171:21" pos:end="2171:22"><expr pos:start="2171:21" pos:end="2171:22"><name pos:start="2171:21" pos:end="2171:22">pb</name></expr></argument>, <argument pos:start="2171:25" pos:end="2171:28"><expr pos:start="2171:25" pos:end="2171:28"><literal type="string" pos:start="2171:25" pos:end="2171:28">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2172:9" pos:end="2172:22"><expr pos:start="2172:9" pos:end="2172:21"><name pos:start="2172:9" pos:end="2172:10">c1</name> <operator pos:start="2172:12" pos:end="2172:12">=</operator> <name pos:start="2172:14" pos:end="2172:21"><name pos:start="2172:14" pos:end="2172:15">c1</name><operator pos:start="2172:16" pos:end="2172:17">-&gt;</operator><name pos:start="2172:18" pos:end="2172:21">next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt pos:start="2174:5" pos:end="2174:34"><expr pos:start="2174:5" pos:end="2174:33"><call pos:start="2174:5" pos:end="2174:33"><name pos:start="2174:5" pos:end="2174:15">avio_printf</name><argument_list pos:start="2174:16" pos:end="2174:33">(<argument pos:start="2174:17" pos:end="2174:18"><expr pos:start="2174:17" pos:end="2174:18"><name pos:start="2174:17" pos:end="2174:18">pb</name></expr></argument>, <argument pos:start="2174:21" pos:end="2174:32"><expr pos:start="2174:21" pos:end="2174:32"><literal type="string" pos:start="2174:21" pos:end="2174:32">"&lt;/table&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="2176:5" pos:end="2181:5"><if pos:start="2176:5" pos:end="2181:5">if <condition pos:start="2176:8" pos:end="2176:25">(<expr pos:start="2176:9" pos:end="2176:24"><operator pos:start="2176:9" pos:end="2176:9">!</operator><name pos:start="2176:10" pos:end="2176:24"><name pos:start="2176:10" pos:end="2176:15">config</name><operator pos:start="2176:16" pos:end="2176:16">.</operator><name pos:start="2176:17" pos:end="2176:24">bitexact</name></name></expr>)</condition> <block pos:start="2176:27" pos:end="2181:5">{<block_content pos:start="2178:9" pos:end="2180:50">
        <comment type="block" pos:start="2177:9" pos:end="2177:18">/* date */</comment>
        <expr_stmt pos:start="2178:9" pos:end="2178:24"><expr pos:start="2178:9" pos:end="2178:23"><name pos:start="2178:9" pos:end="2178:10">ti</name> <operator pos:start="2178:12" pos:end="2178:12">=</operator> <call pos:start="2178:14" pos:end="2178:23"><name pos:start="2178:14" pos:end="2178:17">time</name><argument_list pos:start="2178:18" pos:end="2178:23">(<argument pos:start="2178:19" pos:end="2178:22"><expr pos:start="2178:19" pos:end="2178:22"><name pos:start="2178:19" pos:end="2178:22">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2179:9" pos:end="2179:23"><expr pos:start="2179:9" pos:end="2179:22"><name pos:start="2179:9" pos:end="2179:9">p</name> <operator pos:start="2179:11" pos:end="2179:11">=</operator> <call pos:start="2179:13" pos:end="2179:22"><name pos:start="2179:13" pos:end="2179:17">ctime</name><argument_list pos:start="2179:18" pos:end="2179:22">(<argument pos:start="2179:19" pos:end="2179:21"><expr pos:start="2179:19" pos:end="2179:21"><operator pos:start="2179:19" pos:end="2179:19">&amp;</operator><name pos:start="2179:20" pos:end="2179:21">ti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2180:9" pos:end="2180:50"><expr pos:start="2180:9" pos:end="2180:49"><call pos:start="2180:9" pos:end="2180:49"><name pos:start="2180:9" pos:end="2180:19">avio_printf</name><argument_list pos:start="2180:20" pos:end="2180:49">(<argument pos:start="2180:21" pos:end="2180:22"><expr pos:start="2180:21" pos:end="2180:22"><name pos:start="2180:21" pos:end="2180:22">pb</name></expr></argument>, <argument pos:start="2180:25" pos:end="2180:45"><expr pos:start="2180:25" pos:end="2180:45"><literal type="string" pos:start="2180:25" pos:end="2180:45">"&lt;hr&gt;Generated at %s"</literal></expr></argument>, <argument pos:start="2180:48" pos:end="2180:48"><expr pos:start="2180:48" pos:end="2180:48"><name pos:start="2180:48" pos:end="2180:48">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="2182:5" pos:end="2182:42"><expr pos:start="2182:5" pos:end="2182:41"><call pos:start="2182:5" pos:end="2182:41"><name pos:start="2182:5" pos:end="2182:15">avio_printf</name><argument_list pos:start="2182:16" pos:end="2182:41">(<argument pos:start="2182:17" pos:end="2182:18"><expr pos:start="2182:17" pos:end="2182:18"><name pos:start="2182:17" pos:end="2182:18">pb</name></expr></argument>, <argument pos:start="2182:21" pos:end="2182:40"><expr pos:start="2182:21" pos:end="2182:40"><literal type="string" pos:start="2182:21" pos:end="2182:40">"&lt;/body&gt;\n&lt;/html&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="2184:5" pos:end="2184:48"><expr pos:start="2184:5" pos:end="2184:47"><name pos:start="2184:5" pos:end="2184:7">len</name> <operator pos:start="2184:9" pos:end="2184:9">=</operator> <call pos:start="2184:11" pos:end="2184:47"><name pos:start="2184:11" pos:end="2184:28">avio_close_dyn_buf</name><argument_list pos:start="2184:29" pos:end="2184:47">(<argument pos:start="2184:30" pos:end="2184:31"><expr pos:start="2184:30" pos:end="2184:31"><name pos:start="2184:30" pos:end="2184:31">pb</name></expr></argument>, <argument pos:start="2184:34" pos:end="2184:46"><expr pos:start="2184:34" pos:end="2184:46"><operator pos:start="2184:34" pos:end="2184:34">&amp;</operator><name pos:start="2184:35" pos:end="2184:46"><name pos:start="2184:35" pos:end="2184:35">c</name><operator pos:start="2184:36" pos:end="2184:37">-&gt;</operator><name pos:start="2184:38" pos:end="2184:46">pb_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2185:5" pos:end="2185:33"><expr pos:start="2185:5" pos:end="2185:32"><name pos:start="2185:5" pos:end="2185:17"><name pos:start="2185:5" pos:end="2185:5">c</name><operator pos:start="2185:6" pos:end="2185:7">-&gt;</operator><name pos:start="2185:8" pos:end="2185:17">buffer_ptr</name></name> <operator pos:start="2185:19" pos:end="2185:19">=</operator> <name pos:start="2185:21" pos:end="2185:32"><name pos:start="2185:21" pos:end="2185:21">c</name><operator pos:start="2185:22" pos:end="2185:23">-&gt;</operator><name pos:start="2185:24" pos:end="2185:32">pb_buffer</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="2186:5" pos:end="2186:39"><expr pos:start="2186:5" pos:end="2186:38"><name pos:start="2186:5" pos:end="2186:17"><name pos:start="2186:5" pos:end="2186:5">c</name><operator pos:start="2186:6" pos:end="2186:7">-&gt;</operator><name pos:start="2186:8" pos:end="2186:17">buffer_end</name></name> <operator pos:start="2186:19" pos:end="2186:19">=</operator> <name pos:start="2186:21" pos:end="2186:32"><name pos:start="2186:21" pos:end="2186:21">c</name><operator pos:start="2186:22" pos:end="2186:23">-&gt;</operator><name pos:start="2186:24" pos:end="2186:32">pb_buffer</name></name> <operator pos:start="2186:34" pos:end="2186:34">+</operator> <name pos:start="2186:36" pos:end="2186:38">len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="2189:1" pos:end="2272:1"><type pos:start="2189:1" pos:end="2189:10"><specifier pos:start="2189:1" pos:end="2189:6">static</specifier> <name pos:start="2189:8" pos:end="2189:10">int</name></type> <name pos:start="2189:12" pos:end="2189:28">open_input_stream</name><parameter_list pos:start="2189:29" pos:end="2189:62">(<parameter pos:start="2189:30" pos:end="2189:43"><decl pos:start="2189:30" pos:end="2189:43"><type pos:start="2189:30" pos:end="2189:43"><name pos:start="2189:30" pos:end="2189:40">HTTPContext</name> <modifier pos:start="2189:42" pos:end="2189:42">*</modifier></type><name pos:start="2189:43" pos:end="2189:43">c</name></decl></parameter>, <parameter pos:start="2189:46" pos:end="2189:61"><decl pos:start="2189:46" pos:end="2189:61"><type pos:start="2189:46" pos:end="2189:61"><specifier pos:start="2189:46" pos:end="2189:50">const</specifier> <name pos:start="2189:52" pos:end="2189:55">char</name> <modifier pos:start="2189:57" pos:end="2189:57">*</modifier></type><name pos:start="2189:58" pos:end="2189:61">info</name></decl></parameter>)</parameter_list>
<block pos:start="2190:1" pos:end="2272:1">{<block_content pos:start="2191:5" pos:end="2271:13">
    <decl_stmt pos:start="2191:5" pos:end="2191:18"><decl pos:start="2191:5" pos:end="2191:17"><type pos:start="2191:5" pos:end="2191:8"><name pos:start="2191:5" pos:end="2191:8">char</name></type> <name pos:start="2191:10" pos:end="2191:17"><name pos:start="2191:10" pos:end="2191:12">buf</name><index pos:start="2191:13" pos:end="2191:17">[<expr pos:start="2191:14" pos:end="2191:16"><literal type="number" pos:start="2191:14" pos:end="2191:16">128</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="2192:5" pos:end="2192:30"><decl pos:start="2192:5" pos:end="2192:29"><type pos:start="2192:5" pos:end="2192:8"><name pos:start="2192:5" pos:end="2192:8">char</name></type> <name pos:start="2192:10" pos:end="2192:29"><name pos:start="2192:10" pos:end="2192:23">input_filename</name><index pos:start="2192:24" pos:end="2192:29">[<expr pos:start="2192:25" pos:end="2192:28"><literal type="number" pos:start="2192:25" pos:end="2192:28">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="2193:5" pos:end="2193:30"><decl pos:start="2193:5" pos:end="2193:29"><type pos:start="2193:5" pos:end="2193:21"><name pos:start="2193:5" pos:end="2193:19">AVFormatContext</name> <modifier pos:start="2193:21" pos:end="2193:21">*</modifier></type><name pos:start="2193:22" pos:end="2193:22">s</name> <init pos:start="2193:24" pos:end="2193:29">= <expr pos:start="2193:26" pos:end="2193:29"><name pos:start="2193:26" pos:end="2193:29">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2194:5" pos:end="2194:25"><decl pos:start="2194:5" pos:end="2194:16"><type pos:start="2194:5" pos:end="2194:7"><name pos:start="2194:5" pos:end="2194:7">int</name></type> <name pos:start="2194:9" pos:end="2194:16">buf_size</name></decl>, <decl pos:start="2194:19" pos:end="2194:19"><type ref="prev" pos:start="2194:5" pos:end="2194:7"/><name pos:start="2194:19" pos:end="2194:19">i</name></decl>, <decl pos:start="2194:22" pos:end="2194:24"><type ref="prev" pos:start="2194:5" pos:end="2194:7"/><name pos:start="2194:22" pos:end="2194:24">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2195:5" pos:end="2195:23"><decl pos:start="2195:5" pos:end="2195:22"><type pos:start="2195:5" pos:end="2195:11"><name pos:start="2195:5" pos:end="2195:11">int64_t</name></type> <name pos:start="2195:13" pos:end="2195:22">stream_pos</name></decl>;</decl_stmt>

    <comment type="block" pos:start="2197:5" pos:end="2197:24">/* find file name */</comment>
    <if_stmt pos:start="2198:5" pos:end="2223:5"><if pos:start="2198:5" pos:end="2212:5">if <condition pos:start="2198:8" pos:end="2198:24">(<expr pos:start="2198:9" pos:end="2198:23"><name pos:start="2198:9" pos:end="2198:23"><name pos:start="2198:9" pos:end="2198:9">c</name><operator pos:start="2198:10" pos:end="2198:11">-&gt;</operator><name pos:start="2198:12" pos:end="2198:17">stream</name><operator pos:start="2198:18" pos:end="2198:19">-&gt;</operator><name pos:start="2198:20" pos:end="2198:23">feed</name></name></expr>)</condition> <block pos:start="2198:26" pos:end="2212:5">{<block_content pos:start="2199:9" pos:end="2211:77">
        <expr_stmt pos:start="2199:9" pos:end="2199:63"><expr pos:start="2199:9" pos:end="2199:62"><call pos:start="2199:9" pos:end="2199:62"><name pos:start="2199:9" pos:end="2199:14">strcpy</name><argument_list pos:start="2199:15" pos:end="2199:62">(<argument pos:start="2199:16" pos:end="2199:29"><expr pos:start="2199:16" pos:end="2199:29"><name pos:start="2199:16" pos:end="2199:29">input_filename</name></expr></argument>, <argument pos:start="2199:32" pos:end="2199:61"><expr pos:start="2199:32" pos:end="2199:61"><name pos:start="2199:32" pos:end="2199:61"><name pos:start="2199:32" pos:end="2199:32">c</name><operator pos:start="2199:33" pos:end="2199:34">-&gt;</operator><name pos:start="2199:35" pos:end="2199:40">stream</name><operator pos:start="2199:41" pos:end="2199:42">-&gt;</operator><name pos:start="2199:43" pos:end="2199:46">feed</name><operator pos:start="2199:47" pos:end="2199:48">-&gt;</operator><name pos:start="2199:49" pos:end="2199:61">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2200:9" pos:end="2200:35"><expr pos:start="2200:9" pos:end="2200:34"><name pos:start="2200:9" pos:end="2200:16">buf_size</name> <operator pos:start="2200:18" pos:end="2200:18">=</operator> <name pos:start="2200:20" pos:end="2200:34">FFM_PACKET_SIZE</name></expr>;</expr_stmt>
        <comment type="block" pos:start="2201:9" pos:end="2201:46">/* compute position (absolute time) */</comment>
        <if_stmt pos:start="2202:9" pos:end="2211:77"><if pos:start="2202:9" pos:end="2207:9">if <condition pos:start="2202:12" pos:end="2202:61">(<expr pos:start="2202:13" pos:end="2202:60"><call pos:start="2202:13" pos:end="2202:60"><name pos:start="2202:13" pos:end="2202:28">av_find_info_tag</name><argument_list pos:start="2202:29" pos:end="2202:60">(<argument pos:start="2202:30" pos:end="2202:32"><expr pos:start="2202:30" pos:end="2202:32"><name pos:start="2202:30" pos:end="2202:32">buf</name></expr></argument>, <argument pos:start="2202:35" pos:end="2202:45"><expr pos:start="2202:35" pos:end="2202:45"><sizeof pos:start="2202:35" pos:end="2202:45">sizeof<argument_list pos:start="2202:41" pos:end="2202:45">(<argument pos:start="2202:42" pos:end="2202:44"><expr pos:start="2202:42" pos:end="2202:44"><name pos:start="2202:42" pos:end="2202:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="2202:48" pos:end="2202:53"><expr pos:start="2202:48" pos:end="2202:53"><literal type="string" pos:start="2202:48" pos:end="2202:53">"date"</literal></expr></argument>, <argument pos:start="2202:56" pos:end="2202:59"><expr pos:start="2202:56" pos:end="2202:59"><name pos:start="2202:56" pos:end="2202:59">info</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2202:63" pos:end="2207:9">{<block_content pos:start="2203:13" pos:end="2206:13">
            <if_stmt pos:start="2203:13" pos:end="2206:13"><if pos:start="2203:13" pos:end="2206:13">if <condition pos:start="2203:16" pos:end="2203:63">(<expr pos:start="2203:17" pos:end="2203:62"><operator pos:start="2203:17" pos:end="2203:17">(</operator><name pos:start="2203:18" pos:end="2203:20">ret</name> <operator pos:start="2203:22" pos:end="2203:22">=</operator> <call pos:start="2203:24" pos:end="2203:57"><name pos:start="2203:24" pos:end="2203:36">av_parse_time</name><argument_list pos:start="2203:37" pos:end="2203:57">(<argument pos:start="2203:38" pos:end="2203:48"><expr pos:start="2203:38" pos:end="2203:48"><operator pos:start="2203:38" pos:end="2203:38">&amp;</operator><name pos:start="2203:39" pos:end="2203:48">stream_pos</name></expr></argument>, <argument pos:start="2203:51" pos:end="2203:53"><expr pos:start="2203:51" pos:end="2203:53"><name pos:start="2203:51" pos:end="2203:53">buf</name></expr></argument>, <argument pos:start="2203:56" pos:end="2203:56"><expr pos:start="2203:56" pos:end="2203:56"><literal type="number" pos:start="2203:56" pos:end="2203:56">0</literal></expr></argument>)</argument_list></call><operator pos:start="2203:58" pos:end="2203:58">)</operator> <operator pos:start="2203:60" pos:end="2203:60">&lt;</operator> <literal type="number" pos:start="2203:62" pos:end="2203:62">0</literal></expr>)</condition> <block pos:start="2203:65" pos:end="2206:13">{<block_content pos:start="2204:17" pos:end="2205:27">
                <expr_stmt pos:start="2204:17" pos:end="2204:78"><expr pos:start="2204:17" pos:end="2204:77"><call pos:start="2204:17" pos:end="2204:77"><name pos:start="2204:17" pos:end="2204:24">http_log</name><argument_list pos:start="2204:25" pos:end="2204:77">(<argument pos:start="2204:26" pos:end="2204:71"><expr pos:start="2204:26" pos:end="2204:71"><literal type="string" pos:start="2204:26" pos:end="2204:71">"Invalid date specification '%s' for stream\n"</literal></expr></argument>, <argument pos:start="2204:74" pos:end="2204:76"><expr pos:start="2204:74" pos:end="2204:76"><name pos:start="2204:74" pos:end="2204:76">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="2205:17" pos:end="2205:27">return <expr pos:start="2205:24" pos:end="2205:26"><name pos:start="2205:24" pos:end="2205:26">ret</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="2207:11" pos:end="2210:9">else if <condition pos:start="2207:19" pos:end="2207:70">(<expr pos:start="2207:20" pos:end="2207:69"><call pos:start="2207:20" pos:end="2207:69"><name pos:start="2207:20" pos:end="2207:35">av_find_info_tag</name><argument_list pos:start="2207:36" pos:end="2207:69">(<argument pos:start="2207:37" pos:end="2207:39"><expr pos:start="2207:37" pos:end="2207:39"><name pos:start="2207:37" pos:end="2207:39">buf</name></expr></argument>, <argument pos:start="2207:42" pos:end="2207:52"><expr pos:start="2207:42" pos:end="2207:52"><sizeof pos:start="2207:42" pos:end="2207:52">sizeof<argument_list pos:start="2207:48" pos:end="2207:52">(<argument pos:start="2207:49" pos:end="2207:51"><expr pos:start="2207:49" pos:end="2207:51"><name pos:start="2207:49" pos:end="2207:51">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="2207:55" pos:end="2207:62"><expr pos:start="2207:55" pos:end="2207:62"><literal type="string" pos:start="2207:55" pos:end="2207:62">"buffer"</literal></expr></argument>, <argument pos:start="2207:65" pos:end="2207:68"><expr pos:start="2207:65" pos:end="2207:68"><name pos:start="2207:65" pos:end="2207:68">info</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2207:72" pos:end="2210:9">{<block_content pos:start="2208:13" pos:end="2209:69">
            <decl_stmt pos:start="2208:13" pos:end="2208:47"><decl pos:start="2208:13" pos:end="2208:46"><type pos:start="2208:13" pos:end="2208:15"><name pos:start="2208:13" pos:end="2208:15">int</name></type> <name pos:start="2208:17" pos:end="2208:25">prebuffer</name> <init pos:start="2208:27" pos:end="2208:46">= <expr pos:start="2208:29" pos:end="2208:46"><call pos:start="2208:29" pos:end="2208:46"><name pos:start="2208:29" pos:end="2208:34">strtol</name><argument_list pos:start="2208:35" pos:end="2208:46">(<argument pos:start="2208:36" pos:end="2208:38"><expr pos:start="2208:36" pos:end="2208:38"><name pos:start="2208:36" pos:end="2208:38">buf</name></expr></argument>, <argument pos:start="2208:41" pos:end="2208:41"><expr pos:start="2208:41" pos:end="2208:41"><literal type="number" pos:start="2208:41" pos:end="2208:41">0</literal></expr></argument>, <argument pos:start="2208:44" pos:end="2208:45"><expr pos:start="2208:44" pos:end="2208:45"><literal type="number" pos:start="2208:44" pos:end="2208:45">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="2209:13" pos:end="2209:69"><expr pos:start="2209:13" pos:end="2209:68"><name pos:start="2209:13" pos:end="2209:22">stream_pos</name> <operator pos:start="2209:24" pos:end="2209:24">=</operator> <call pos:start="2209:26" pos:end="2209:37"><name pos:start="2209:26" pos:end="2209:35">av_gettime</name><argument_list pos:start="2209:36" pos:end="2209:37">()</argument_list></call> <operator pos:start="2209:39" pos:end="2209:39">-</operator> <name pos:start="2209:41" pos:end="2209:49">prebuffer</name> <operator pos:start="2209:51" pos:end="2209:51">*</operator> <operator pos:start="2209:53" pos:end="2209:53">(</operator><name pos:start="2209:54" pos:end="2209:60">int64_t</name><operator pos:start="2209:61" pos:end="2209:61">)</operator><literal type="number" pos:start="2209:62" pos:end="2209:68">1000000</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="2210:11" pos:end="2211:77">else<block type="pseudo" pos:start="2211:13" pos:end="2211:77"><block_content pos:start="2211:13" pos:end="2211:77">
            <expr_stmt pos:start="2211:13" pos:end="2211:77"><expr pos:start="2211:13" pos:end="2211:76"><name pos:start="2211:13" pos:end="2211:22">stream_pos</name> <operator pos:start="2211:24" pos:end="2211:24">=</operator> <call pos:start="2211:26" pos:end="2211:37"><name pos:start="2211:26" pos:end="2211:35">av_gettime</name><argument_list pos:start="2211:36" pos:end="2211:37">()</argument_list></call> <operator pos:start="2211:39" pos:end="2211:39">-</operator> <name pos:start="2211:41" pos:end="2211:60"><name pos:start="2211:41" pos:end="2211:41">c</name><operator pos:start="2211:42" pos:end="2211:43">-&gt;</operator><name pos:start="2211:44" pos:end="2211:49">stream</name><operator pos:start="2211:50" pos:end="2211:51">-&gt;</operator><name pos:start="2211:52" pos:end="2211:60">prebuffer</name></name> <operator pos:start="2211:62" pos:end="2211:62">*</operator> <operator pos:start="2211:64" pos:end="2211:64">(</operator><name pos:start="2211:65" pos:end="2211:71">int64_t</name><operator pos:start="2211:72" pos:end="2211:72">)</operator><literal type="number" pos:start="2211:73" pos:end="2211:76">1000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if> <else pos:start="2212:7" pos:end="2223:5">else <block pos:start="2212:12" pos:end="2223:5">{<block_content pos:start="2213:9" pos:end="2222:27">
        <expr_stmt pos:start="2213:9" pos:end="2213:57"><expr pos:start="2213:9" pos:end="2213:56"><call pos:start="2213:9" pos:end="2213:56"><name pos:start="2213:9" pos:end="2213:14">strcpy</name><argument_list pos:start="2213:15" pos:end="2213:56">(<argument pos:start="2213:16" pos:end="2213:29"><expr pos:start="2213:16" pos:end="2213:29"><name pos:start="2213:16" pos:end="2213:29">input_filename</name></expr></argument>, <argument pos:start="2213:32" pos:end="2213:55"><expr pos:start="2213:32" pos:end="2213:55"><name pos:start="2213:32" pos:end="2213:55"><name pos:start="2213:32" pos:end="2213:32">c</name><operator pos:start="2213:33" pos:end="2213:34">-&gt;</operator><name pos:start="2213:35" pos:end="2213:40">stream</name><operator pos:start="2213:41" pos:end="2213:42">-&gt;</operator><name pos:start="2213:43" pos:end="2213:55">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2214:9" pos:end="2214:21"><expr pos:start="2214:9" pos:end="2214:20"><name pos:start="2214:9" pos:end="2214:16">buf_size</name> <operator pos:start="2214:18" pos:end="2214:18">=</operator> <literal type="number" pos:start="2214:20" pos:end="2214:20">0</literal></expr>;</expr_stmt>
        <comment type="block" pos:start="2215:9" pos:end="2215:46">/* compute position (relative time) */</comment>
        <if_stmt pos:start="2216:9" pos:end="2222:27"><if pos:start="2216:9" pos:end="2221:9">if <condition pos:start="2216:12" pos:end="2216:61">(<expr pos:start="2216:13" pos:end="2216:60"><call pos:start="2216:13" pos:end="2216:60"><name pos:start="2216:13" pos:end="2216:28">av_find_info_tag</name><argument_list pos:start="2216:29" pos:end="2216:60">(<argument pos:start="2216:30" pos:end="2216:32"><expr pos:start="2216:30" pos:end="2216:32"><name pos:start="2216:30" pos:end="2216:32">buf</name></expr></argument>, <argument pos:start="2216:35" pos:end="2216:45"><expr pos:start="2216:35" pos:end="2216:45"><sizeof pos:start="2216:35" pos:end="2216:45">sizeof<argument_list pos:start="2216:41" pos:end="2216:45">(<argument pos:start="2216:42" pos:end="2216:44"><expr pos:start="2216:42" pos:end="2216:44"><name pos:start="2216:42" pos:end="2216:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="2216:48" pos:end="2216:53"><expr pos:start="2216:48" pos:end="2216:53"><literal type="string" pos:start="2216:48" pos:end="2216:53">"date"</literal></expr></argument>, <argument pos:start="2216:56" pos:end="2216:59"><expr pos:start="2216:56" pos:end="2216:59"><name pos:start="2216:56" pos:end="2216:59">info</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2216:63" pos:end="2221:9">{<block_content pos:start="2217:13" pos:end="2220:13">
            <if_stmt pos:start="2217:13" pos:end="2220:13"><if pos:start="2217:13" pos:end="2220:13">if <condition pos:start="2217:16" pos:end="2217:63">(<expr pos:start="2217:17" pos:end="2217:62"><operator pos:start="2217:17" pos:end="2217:17">(</operator><name pos:start="2217:18" pos:end="2217:20">ret</name> <operator pos:start="2217:22" pos:end="2217:22">=</operator> <call pos:start="2217:24" pos:end="2217:57"><name pos:start="2217:24" pos:end="2217:36">av_parse_time</name><argument_list pos:start="2217:37" pos:end="2217:57">(<argument pos:start="2217:38" pos:end="2217:48"><expr pos:start="2217:38" pos:end="2217:48"><operator pos:start="2217:38" pos:end="2217:38">&amp;</operator><name pos:start="2217:39" pos:end="2217:48">stream_pos</name></expr></argument>, <argument pos:start="2217:51" pos:end="2217:53"><expr pos:start="2217:51" pos:end="2217:53"><name pos:start="2217:51" pos:end="2217:53">buf</name></expr></argument>, <argument pos:start="2217:56" pos:end="2217:56"><expr pos:start="2217:56" pos:end="2217:56"><literal type="number" pos:start="2217:56" pos:end="2217:56">1</literal></expr></argument>)</argument_list></call><operator pos:start="2217:58" pos:end="2217:58">)</operator> <operator pos:start="2217:60" pos:end="2217:60">&lt;</operator> <literal type="number" pos:start="2217:62" pos:end="2217:62">0</literal></expr>)</condition> <block pos:start="2217:65" pos:end="2220:13">{<block_content pos:start="2218:17" pos:end="2219:27">
                <expr_stmt pos:start="2218:17" pos:end="2218:78"><expr pos:start="2218:17" pos:end="2218:77"><call pos:start="2218:17" pos:end="2218:77"><name pos:start="2218:17" pos:end="2218:24">http_log</name><argument_list pos:start="2218:25" pos:end="2218:77">(<argument pos:start="2218:26" pos:end="2218:71"><expr pos:start="2218:26" pos:end="2218:71"><literal type="string" pos:start="2218:26" pos:end="2218:71">"Invalid date specification '%s' for stream\n"</literal></expr></argument>, <argument pos:start="2218:74" pos:end="2218:76"><expr pos:start="2218:74" pos:end="2218:76"><name pos:start="2218:74" pos:end="2218:76">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="2219:17" pos:end="2219:27">return <expr pos:start="2219:24" pos:end="2219:26"><name pos:start="2219:24" pos:end="2219:26">ret</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else pos:start="2221:11" pos:end="2222:27">else<block type="pseudo" pos:start="2222:13" pos:end="2222:27"><block_content pos:start="2222:13" pos:end="2222:27">
            <expr_stmt pos:start="2222:13" pos:end="2222:27"><expr pos:start="2222:13" pos:end="2222:26"><name pos:start="2222:13" pos:end="2222:22">stream_pos</name> <operator pos:start="2222:24" pos:end="2222:24">=</operator> <literal type="number" pos:start="2222:26" pos:end="2222:26">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt pos:start="2224:5" pos:end="2227:5"><if pos:start="2224:5" pos:end="2227:5">if <condition pos:start="2224:8" pos:end="2224:27">(<expr pos:start="2224:9" pos:end="2224:26"><operator pos:start="2224:9" pos:end="2224:9">!</operator><name pos:start="2224:10" pos:end="2224:26"><name pos:start="2224:10" pos:end="2224:23">input_filename</name><index pos:start="2224:24" pos:end="2224:26">[<expr pos:start="2224:25" pos:end="2224:25"><literal type="number" pos:start="2224:25" pos:end="2224:25">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="2224:29" pos:end="2227:5">{<block_content pos:start="2225:9" pos:end="2226:31">
        <expr_stmt pos:start="2225:9" pos:end="2225:59"><expr pos:start="2225:9" pos:end="2225:58"><call pos:start="2225:9" pos:end="2225:58"><name pos:start="2225:9" pos:end="2225:16">http_log</name><argument_list pos:start="2225:17" pos:end="2225:58">(<argument pos:start="2225:18" pos:end="2225:57"><expr pos:start="2225:18" pos:end="2225:57"><literal type="string" pos:start="2225:18" pos:end="2225:57">"No filename was specified for stream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2226:9" pos:end="2226:31">return <expr pos:start="2226:16" pos:end="2226:30"><call pos:start="2226:16" pos:end="2226:30"><name pos:start="2226:16" pos:end="2226:22">AVERROR</name><argument_list pos:start="2226:23" pos:end="2226:30">(<argument pos:start="2226:24" pos:end="2226:29"><expr pos:start="2226:24" pos:end="2226:29"><name pos:start="2226:24" pos:end="2226:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="2229:5" pos:end="2229:21">/* open stream */</comment>
    <expr_stmt pos:start="2230:5" pos:end="2231:51"><expr pos:start="2230:5" pos:end="2231:50"><name pos:start="2230:5" pos:end="2230:7">ret</name> <operator pos:start="2230:9" pos:end="2230:9">=</operator> <call pos:start="2230:11" pos:end="2231:50"><name pos:start="2230:11" pos:end="2230:29">avformat_open_input</name><argument_list pos:start="2230:30" pos:end="2231:50">(<argument pos:start="2230:31" pos:end="2230:32"><expr pos:start="2230:31" pos:end="2230:32"><operator pos:start="2230:31" pos:end="2230:31">&amp;</operator><name pos:start="2230:32" pos:end="2230:32">s</name></expr></argument>, <argument pos:start="2230:35" pos:end="2230:48"><expr pos:start="2230:35" pos:end="2230:48"><name pos:start="2230:35" pos:end="2230:48">input_filename</name></expr></argument>, <argument pos:start="2230:51" pos:end="2230:65"><expr pos:start="2230:51" pos:end="2230:65"><name pos:start="2230:51" pos:end="2230:65"><name pos:start="2230:51" pos:end="2230:51">c</name><operator pos:start="2230:52" pos:end="2230:53">-&gt;</operator><name pos:start="2230:54" pos:end="2230:59">stream</name><operator pos:start="2230:60" pos:end="2230:61">-&gt;</operator><name pos:start="2230:62" pos:end="2230:65">ifmt</name></name></expr></argument>,
                              <argument pos:start="2231:31" pos:end="2231:49"><expr pos:start="2231:31" pos:end="2231:49"><operator pos:start="2231:31" pos:end="2231:31">&amp;</operator><name pos:start="2231:32" pos:end="2231:49"><name pos:start="2231:32" pos:end="2231:32">c</name><operator pos:start="2231:33" pos:end="2231:34">-&gt;</operator><name pos:start="2231:35" pos:end="2231:40">stream</name><operator pos:start="2231:41" pos:end="2231:42">-&gt;</operator><name pos:start="2231:43" pos:end="2231:49">in_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="2232:5" pos:end="2236:5"><if pos:start="2232:5" pos:end="2236:5">if <condition pos:start="2232:8" pos:end="2232:16">(<expr pos:start="2232:9" pos:end="2232:15"><name pos:start="2232:9" pos:end="2232:11">ret</name> <operator pos:start="2232:13" pos:end="2232:13">&lt;</operator> <literal type="number" pos:start="2232:15" pos:end="2232:15">0</literal></expr>)</condition> <block pos:start="2232:18" pos:end="2236:5">{<block_content pos:start="2233:9" pos:end="2235:19">
        <expr_stmt pos:start="2233:9" pos:end="2234:50"><expr pos:start="2233:9" pos:end="2234:49"><call pos:start="2233:9" pos:end="2234:49"><name pos:start="2233:9" pos:end="2233:16">http_log</name><argument_list pos:start="2233:17" pos:end="2234:49">(<argument pos:start="2233:18" pos:end="2233:50"><expr pos:start="2233:18" pos:end="2233:50"><literal type="string" pos:start="2233:18" pos:end="2233:50">"Could not open input '%s': %s\n"</literal></expr></argument>,
                 <argument pos:start="2234:18" pos:end="2234:31"><expr pos:start="2234:18" pos:end="2234:31"><name pos:start="2234:18" pos:end="2234:31">input_filename</name></expr></argument>, <argument pos:start="2234:34" pos:end="2234:48"><expr pos:start="2234:34" pos:end="2234:48"><call pos:start="2234:34" pos:end="2234:48"><name pos:start="2234:34" pos:end="2234:43">av_err2str</name><argument_list pos:start="2234:44" pos:end="2234:48">(<argument pos:start="2234:45" pos:end="2234:47"><expr pos:start="2234:45" pos:end="2234:47"><name pos:start="2234:45" pos:end="2234:47">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2235:9" pos:end="2235:19">return <expr pos:start="2235:16" pos:end="2235:18"><name pos:start="2235:16" pos:end="2235:18">ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="2238:5" pos:end="2238:25">/* set buffer size */</comment>
    <if_stmt pos:start="2239:5" pos:end="2245:5"><if pos:start="2239:5" pos:end="2245:5">if <condition pos:start="2239:8" pos:end="2239:21">(<expr pos:start="2239:9" pos:end="2239:20"><name pos:start="2239:9" pos:end="2239:16">buf_size</name> <operator pos:start="2239:18" pos:end="2239:18">&gt;</operator> <literal type="number" pos:start="2239:20" pos:end="2239:20">0</literal></expr>)</condition> <block pos:start="2239:23" pos:end="2245:5">{<block_content pos:start="2240:9" pos:end="2244:9">
        <expr_stmt pos:start="2240:9" pos:end="2240:49"><expr pos:start="2240:9" pos:end="2240:48"><name pos:start="2240:9" pos:end="2240:11">ret</name> <operator pos:start="2240:13" pos:end="2240:13">=</operator> <call pos:start="2240:15" pos:end="2240:48"><name pos:start="2240:15" pos:end="2240:31">ffio_set_buf_size</name><argument_list pos:start="2240:32" pos:end="2240:48">(<argument pos:start="2240:33" pos:end="2240:37"><expr pos:start="2240:33" pos:end="2240:37"><name pos:start="2240:33" pos:end="2240:37"><name pos:start="2240:33" pos:end="2240:33">s</name><operator pos:start="2240:34" pos:end="2240:35">-&gt;</operator><name pos:start="2240:36" pos:end="2240:37">pb</name></name></expr></argument>, <argument pos:start="2240:40" pos:end="2240:47"><expr pos:start="2240:40" pos:end="2240:47"><name pos:start="2240:40" pos:end="2240:47">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2241:9" pos:end="2244:9"><if pos:start="2241:9" pos:end="2244:9">if <condition pos:start="2241:12" pos:end="2241:20">(<expr pos:start="2241:13" pos:end="2241:19"><name pos:start="2241:13" pos:end="2241:15">ret</name> <operator pos:start="2241:17" pos:end="2241:17">&lt;</operator> <literal type="number" pos:start="2241:19" pos:end="2241:19">0</literal></expr>)</condition> <block pos:start="2241:22" pos:end="2244:9">{<block_content pos:start="2242:13" pos:end="2243:23">
            <expr_stmt pos:start="2242:13" pos:end="2242:52"><expr pos:start="2242:13" pos:end="2242:51"><call pos:start="2242:13" pos:end="2242:51"><name pos:start="2242:13" pos:end="2242:20">http_log</name><argument_list pos:start="2242:21" pos:end="2242:51">(<argument pos:start="2242:22" pos:end="2242:50"><expr pos:start="2242:22" pos:end="2242:50"><literal type="string" pos:start="2242:22" pos:end="2242:50">"Failed to set buffer size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2243:13" pos:end="2243:23">return <expr pos:start="2243:20" pos:end="2243:22"><name pos:start="2243:20" pos:end="2243:22">ret</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="2247:5" pos:end="2247:34"><expr pos:start="2247:5" pos:end="2247:33"><name pos:start="2247:5" pos:end="2247:12"><name pos:start="2247:5" pos:end="2247:5">s</name><operator pos:start="2247:6" pos:end="2247:7">-&gt;</operator><name pos:start="2247:8" pos:end="2247:12">flags</name></name> <operator pos:start="2247:14" pos:end="2247:15">|=</operator> <name pos:start="2247:17" pos:end="2247:33">AVFMT_FLAG_GENPTS</name></expr>;</expr_stmt>
    <expr_stmt pos:start="2248:5" pos:end="2248:18"><expr pos:start="2248:5" pos:end="2248:17"><name pos:start="2248:5" pos:end="2248:13"><name pos:start="2248:5" pos:end="2248:5">c</name><operator pos:start="2248:6" pos:end="2248:7">-&gt;</operator><name pos:start="2248:8" pos:end="2248:13">fmt_in</name></name> <operator pos:start="2248:15" pos:end="2248:15">=</operator> <name pos:start="2248:17" pos:end="2248:17">s</name></expr>;</expr_stmt>
    <if_stmt pos:start="2249:5" pos:end="2254:5"><if pos:start="2249:5" pos:end="2254:5">if <condition pos:start="2249:8" pos:end="2250:63">(<expr pos:start="2249:9" pos:end="2250:62"><call pos:start="2249:9" pos:end="2249:39"><name pos:start="2249:9" pos:end="2249:14">strcmp</name><argument_list pos:start="2249:15" pos:end="2249:39">(<argument pos:start="2249:16" pos:end="2249:31"><expr pos:start="2249:16" pos:end="2249:31"><name pos:start="2249:16" pos:end="2249:31"><name pos:start="2249:16" pos:end="2249:16">s</name><operator pos:start="2249:17" pos:end="2249:18">-&gt;</operator><name pos:start="2249:19" pos:end="2249:25">iformat</name><operator pos:start="2249:26" pos:end="2249:27">-&gt;</operator><name pos:start="2249:28" pos:end="2249:31">name</name></name></expr></argument>, <argument pos:start="2249:34" pos:end="2249:38"><expr pos:start="2249:34" pos:end="2249:38"><literal type="string" pos:start="2249:34" pos:end="2249:38">"ffm"</literal></expr></argument>)</argument_list></call> <operator pos:start="2249:41" pos:end="2249:42">&amp;&amp;</operator>
        <operator pos:start="2250:9" pos:end="2250:9">(</operator><name pos:start="2250:10" pos:end="2250:12">ret</name> <operator pos:start="2250:14" pos:end="2250:14">=</operator> <call pos:start="2250:16" pos:end="2250:57"><name pos:start="2250:16" pos:end="2250:40">avformat_find_stream_info</name><argument_list pos:start="2250:41" pos:end="2250:57">(<argument pos:start="2250:42" pos:end="2250:50"><expr pos:start="2250:42" pos:end="2250:50"><name pos:start="2250:42" pos:end="2250:50"><name pos:start="2250:42" pos:end="2250:42">c</name><operator pos:start="2250:43" pos:end="2250:44">-&gt;</operator><name pos:start="2250:45" pos:end="2250:50">fmt_in</name></name></expr></argument>, <argument pos:start="2250:53" pos:end="2250:56"><expr pos:start="2250:53" pos:end="2250:56"><name pos:start="2250:53" pos:end="2250:56">NULL</name></expr></argument>)</argument_list></call><operator pos:start="2250:58" pos:end="2250:58">)</operator> <operator pos:start="2250:60" pos:end="2250:60">&lt;</operator> <literal type="number" pos:start="2250:62" pos:end="2250:62">0</literal></expr>)</condition> <block pos:start="2250:65" pos:end="2254:5">{<block_content pos:start="2251:9" pos:end="2253:19">
        <expr_stmt pos:start="2251:9" pos:end="2251:80"><expr pos:start="2251:9" pos:end="2251:79"><call pos:start="2251:9" pos:end="2251:79"><name pos:start="2251:9" pos:end="2251:16">http_log</name><argument_list pos:start="2251:17" pos:end="2251:79">(<argument pos:start="2251:18" pos:end="2251:62"><expr pos:start="2251:18" pos:end="2251:62"><literal type="string" pos:start="2251:18" pos:end="2251:62">"Could not find stream info for input '%s'\n"</literal></expr></argument>, <argument pos:start="2251:65" pos:end="2251:78"><expr pos:start="2251:65" pos:end="2251:78"><name pos:start="2251:65" pos:end="2251:78">input_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2252:9" pos:end="2252:33"><expr pos:start="2252:9" pos:end="2252:32"><call pos:start="2252:9" pos:end="2252:32"><name pos:start="2252:9" pos:end="2252:28">avformat_close_input</name><argument_list pos:start="2252:29" pos:end="2252:32">(<argument pos:start="2252:30" pos:end="2252:31"><expr pos:start="2252:30" pos:end="2252:31"><operator pos:start="2252:30" pos:end="2252:30">&amp;</operator><name pos:start="2252:31" pos:end="2252:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2253:9" pos:end="2253:19">return <expr pos:start="2253:16" pos:end="2253:18"><name pos:start="2253:16" pos:end="2253:18">ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="2256:5" pos:end="2257:37">/* choose stream as clock source (we favor the video stream if
     * present) for packet sending */</comment>
    <expr_stmt pos:start="2258:5" pos:end="2258:28"><expr pos:start="2258:5" pos:end="2258:27"><name pos:start="2258:5" pos:end="2258:23"><name pos:start="2258:5" pos:end="2258:5">c</name><operator pos:start="2258:6" pos:end="2258:7">-&gt;</operator><name pos:start="2258:8" pos:end="2258:23">pts_stream_index</name></name> <operator pos:start="2258:25" pos:end="2258:25">=</operator> <literal type="number" pos:start="2258:27" pos:end="2258:27">0</literal></expr>;</expr_stmt>
    <for pos:start="2259:5" pos:end="2264:5">for<control pos:start="2259:8" pos:end="2259:40">(<init pos:start="2259:9" pos:end="2259:12"><expr pos:start="2259:9" pos:end="2259:11"><name pos:start="2259:9" pos:end="2259:9">i</name><operator pos:start="2259:10" pos:end="2259:10">=</operator><literal type="number" pos:start="2259:11" pos:end="2259:11">0</literal></expr>;</init><condition pos:start="2259:13" pos:end="2259:36"><expr pos:start="2259:13" pos:end="2259:35"><name pos:start="2259:13" pos:end="2259:13">i</name><operator pos:start="2259:14" pos:end="2259:14">&lt;</operator><name pos:start="2259:15" pos:end="2259:35"><name pos:start="2259:15" pos:end="2259:15">c</name><operator pos:start="2259:16" pos:end="2259:17">-&gt;</operator><name pos:start="2259:18" pos:end="2259:23">stream</name><operator pos:start="2259:24" pos:end="2259:25">-&gt;</operator><name pos:start="2259:26" pos:end="2259:35">nb_streams</name></name></expr>;</condition><incr pos:start="2259:37" pos:end="2259:39"><expr pos:start="2259:37" pos:end="2259:39"><name pos:start="2259:37" pos:end="2259:37">i</name><operator pos:start="2259:38" pos:end="2259:39">++</operator></expr></incr>)</control> <block pos:start="2259:42" pos:end="2264:5">{<block_content pos:start="2260:9" pos:end="2263:9">
        <if_stmt pos:start="2260:9" pos:end="2263:9"><if pos:start="2260:9" pos:end="2263:9">if <condition pos:start="2260:12" pos:end="2261:75">(<expr pos:start="2260:13" pos:end="2261:74"><name pos:start="2260:13" pos:end="2260:31"><name pos:start="2260:13" pos:end="2260:13">c</name><operator pos:start="2260:14" pos:end="2260:15">-&gt;</operator><name pos:start="2260:16" pos:end="2260:31">pts_stream_index</name></name> <operator pos:start="2260:33" pos:end="2260:34">==</operator> <literal type="number" pos:start="2260:36" pos:end="2260:36">0</literal> <operator pos:start="2260:38" pos:end="2260:39">&amp;&amp;</operator>
            <name pos:start="2261:13" pos:end="2261:33"><name pos:start="2261:13" pos:end="2261:13">c</name><operator pos:start="2261:14" pos:end="2261:15">-&gt;</operator><name pos:start="2261:16" pos:end="2261:21">stream</name><operator pos:start="2261:22" pos:end="2261:23">-&gt;</operator><name pos:start="2261:24" pos:end="2261:30">streams</name><index pos:start="2261:31" pos:end="2261:33">[<expr pos:start="2261:32" pos:end="2261:32"><name pos:start="2261:32" pos:end="2261:32">i</name></expr>]</index></name><operator pos:start="2261:34" pos:end="2261:35">-&gt;</operator><name pos:start="2261:36" pos:end="2261:52"><name pos:start="2261:36" pos:end="2261:40">codec</name><operator pos:start="2261:41" pos:end="2261:42">-&gt;</operator><name pos:start="2261:43" pos:end="2261:52">codec_type</name></name> <operator pos:start="2261:54" pos:end="2261:55">==</operator> <name pos:start="2261:57" pos:end="2261:74">AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block pos:start="2261:77" pos:end="2263:9">{<block_content pos:start="2262:13" pos:end="2262:36">
            <expr_stmt pos:start="2262:13" pos:end="2262:36"><expr pos:start="2262:13" pos:end="2262:35"><name pos:start="2262:13" pos:end="2262:31"><name pos:start="2262:13" pos:end="2262:13">c</name><operator pos:start="2262:14" pos:end="2262:15">-&gt;</operator><name pos:start="2262:16" pos:end="2262:31">pts_stream_index</name></name> <operator pos:start="2262:33" pos:end="2262:33">=</operator> <name pos:start="2262:35" pos:end="2262:35">i</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt pos:start="2266:5" pos:end="2267:52"><if pos:start="2266:5" pos:end="2267:52">if <condition pos:start="2266:8" pos:end="2266:38">(<expr pos:start="2266:9" pos:end="2266:37"><name pos:start="2266:9" pos:end="2266:37"><name pos:start="2266:9" pos:end="2266:9">c</name><operator pos:start="2266:10" pos:end="2266:11">-&gt;</operator><name pos:start="2266:12" pos:end="2266:17">fmt_in</name><operator pos:start="2266:18" pos:end="2266:19">-&gt;</operator><name pos:start="2266:20" pos:end="2266:26">iformat</name><operator pos:start="2266:27" pos:end="2266:28">-&gt;</operator><name pos:start="2266:29" pos:end="2266:37">read_seek</name></name></expr>)</condition><block type="pseudo" pos:start="2267:9" pos:end="2267:52"><block_content pos:start="2267:9" pos:end="2267:52">
        <expr_stmt pos:start="2267:9" pos:end="2267:52"><expr pos:start="2267:9" pos:end="2267:51"><call pos:start="2267:9" pos:end="2267:51"><name pos:start="2267:9" pos:end="2267:21">av_seek_frame</name><argument_list pos:start="2267:22" pos:end="2267:51">(<argument pos:start="2267:23" pos:end="2267:31"><expr pos:start="2267:23" pos:end="2267:31"><name pos:start="2267:23" pos:end="2267:31"><name pos:start="2267:23" pos:end="2267:23">c</name><operator pos:start="2267:24" pos:end="2267:25">-&gt;</operator><name pos:start="2267:26" pos:end="2267:31">fmt_in</name></name></expr></argument>, <argument pos:start="2267:34" pos:end="2267:35"><expr pos:start="2267:34" pos:end="2267:35"><operator pos:start="2267:34" pos:end="2267:34">-</operator><literal type="number" pos:start="2267:35" pos:end="2267:35">1</literal></expr></argument>, <argument pos:start="2267:38" pos:end="2267:47"><expr pos:start="2267:38" pos:end="2267:47"><name pos:start="2267:38" pos:end="2267:47">stream_pos</name></expr></argument>, <argument pos:start="2267:50" pos:end="2267:50"><expr pos:start="2267:50" pos:end="2267:50"><literal type="number" pos:start="2267:50" pos:end="2267:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block" pos:start="2268:5" pos:end="2268:71">/* set the start time (needed for maxtime and RTP packet timing) */</comment>
    <expr_stmt pos:start="2269:5" pos:end="2269:29"><expr pos:start="2269:5" pos:end="2269:28"><name pos:start="2269:5" pos:end="2269:17"><name pos:start="2269:5" pos:end="2269:5">c</name><operator pos:start="2269:6" pos:end="2269:7">-&gt;</operator><name pos:start="2269:8" pos:end="2269:17">start_time</name></name> <operator pos:start="2269:19" pos:end="2269:19">=</operator> <name pos:start="2269:21" pos:end="2269:28">cur_time</name></expr>;</expr_stmt>
    <expr_stmt pos:start="2270:5" pos:end="2270:34"><expr pos:start="2270:5" pos:end="2270:33"><name pos:start="2270:5" pos:end="2270:16"><name pos:start="2270:5" pos:end="2270:5">c</name><operator pos:start="2270:6" pos:end="2270:7">-&gt;</operator><name pos:start="2270:8" pos:end="2270:16">first_pts</name></name> <operator pos:start="2270:18" pos:end="2270:18">=</operator> <name pos:start="2270:20" pos:end="2270:33">AV_NOPTS_VALUE</name></expr>;</expr_stmt>
    <return pos:start="2271:5" pos:end="2271:13">return <expr pos:start="2271:12" pos:end="2271:12"><literal type="number" pos:start="2271:12" pos:end="2271:12">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="2274:1" pos:end="2274:37">/* return the server clock (in us) */</comment>
<function pos:start="2275:1" pos:end="2279:1"><type pos:start="2275:1" pos:end="2275:14"><specifier pos:start="2275:1" pos:end="2275:6">static</specifier> <name pos:start="2275:8" pos:end="2275:14">int64_t</name></type> <name pos:start="2275:16" pos:end="2275:31">get_server_clock</name><parameter_list pos:start="2275:32" pos:end="2275:47">(<parameter pos:start="2275:33" pos:end="2275:46"><decl pos:start="2275:33" pos:end="2275:46"><type pos:start="2275:33" pos:end="2275:45"><name pos:start="2275:33" pos:end="2275:43">HTTPContext</name> <modifier pos:start="2275:45" pos:end="2275:45">*</modifier></type><name pos:start="2275:46" pos:end="2275:46">c</name></decl></parameter>)</parameter_list>
<block pos:start="2276:1" pos:end="2279:1">{<block_content pos:start="2278:5" pos:end="2278:45">
    <comment type="block" pos:start="2277:5" pos:end="2277:52">/* compute current pts value from system time */</comment>
    <return pos:start="2278:5" pos:end="2278:45">return <expr pos:start="2278:12" pos:end="2278:44"><operator pos:start="2278:12" pos:end="2278:12">(</operator><name pos:start="2278:13" pos:end="2278:20">cur_time</name> <operator pos:start="2278:22" pos:end="2278:22">-</operator> <name pos:start="2278:24" pos:end="2278:36"><name pos:start="2278:24" pos:end="2278:24">c</name><operator pos:start="2278:25" pos:end="2278:26">-&gt;</operator><name pos:start="2278:27" pos:end="2278:36">start_time</name></name><operator pos:start="2278:37" pos:end="2278:37">)</operator> <operator pos:start="2278:39" pos:end="2278:39">*</operator> <literal type="number" pos:start="2278:41" pos:end="2278:44">1000</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="2281:1" pos:end="2281:80">/* return the estimated time (in us) at which the current packet must be sent */</comment>
<function pos:start="2282:1" pos:end="2293:1"><type pos:start="2282:1" pos:end="2282:14"><specifier pos:start="2282:1" pos:end="2282:6">static</specifier> <name pos:start="2282:8" pos:end="2282:14">int64_t</name></type> <name pos:start="2282:16" pos:end="2282:36">get_packet_send_clock</name><parameter_list pos:start="2282:37" pos:end="2282:52">(<parameter pos:start="2282:38" pos:end="2282:51"><decl pos:start="2282:38" pos:end="2282:51"><type pos:start="2282:38" pos:end="2282:50"><name pos:start="2282:38" pos:end="2282:48">HTTPContext</name> <modifier pos:start="2282:50" pos:end="2282:50">*</modifier></type><name pos:start="2282:51" pos:end="2282:51">c</name></decl></parameter>)</parameter_list>
<block pos:start="2283:1" pos:end="2293:1">{<block_content pos:start="2284:5" pos:end="2292:75">
    <decl_stmt pos:start="2284:5" pos:end="2284:44"><decl pos:start="2284:5" pos:end="2284:18"><type pos:start="2284:5" pos:end="2284:7"><name pos:start="2284:5" pos:end="2284:7">int</name></type> <name pos:start="2284:9" pos:end="2284:18">bytes_left</name></decl>, <decl pos:start="2284:21" pos:end="2284:30"><type ref="prev" pos:start="2284:5" pos:end="2284:7"/><name pos:start="2284:21" pos:end="2284:30">bytes_sent</name></decl>, <decl pos:start="2284:33" pos:end="2284:43"><type ref="prev" pos:start="2284:5" pos:end="2284:7"/><name pos:start="2284:33" pos:end="2284:43">frame_bytes</name></decl>;</decl_stmt>

    <expr_stmt pos:start="2286:5" pos:end="2286:37"><expr pos:start="2286:5" pos:end="2286:36"><name pos:start="2286:5" pos:end="2286:15">frame_bytes</name> <operator pos:start="2286:17" pos:end="2286:17">=</operator> <name pos:start="2286:19" pos:end="2286:36"><name pos:start="2286:19" pos:end="2286:19">c</name><operator pos:start="2286:20" pos:end="2286:21">-&gt;</operator><name pos:start="2286:22" pos:end="2286:36">cur_frame_bytes</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="2287:5" pos:end="2288:26"><if pos:start="2287:5" pos:end="2288:26">if <condition pos:start="2287:8" pos:end="2287:25">(<expr pos:start="2287:9" pos:end="2287:24"><name pos:start="2287:9" pos:end="2287:19">frame_bytes</name> <operator pos:start="2287:21" pos:end="2287:22">&lt;=</operator> <literal type="number" pos:start="2287:24" pos:end="2287:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2288:9" pos:end="2288:26"><block_content pos:start="2288:9" pos:end="2288:26">
        <return pos:start="2288:9" pos:end="2288:26">return <expr pos:start="2288:16" pos:end="2288:25"><name pos:start="2288:16" pos:end="2288:25"><name pos:start="2288:16" pos:end="2288:16">c</name><operator pos:start="2288:17" pos:end="2288:18">-&gt;</operator><name pos:start="2288:19" pos:end="2288:25">cur_pts</name></name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="2290:5" pos:end="2290:47"><expr pos:start="2290:5" pos:end="2290:46"><name pos:start="2290:5" pos:end="2290:14">bytes_left</name> <operator pos:start="2290:16" pos:end="2290:16">=</operator> <name pos:start="2290:18" pos:end="2290:30"><name pos:start="2290:18" pos:end="2290:18">c</name><operator pos:start="2290:19" pos:end="2290:20">-&gt;</operator><name pos:start="2290:21" pos:end="2290:30">buffer_end</name></name> <operator pos:start="2290:32" pos:end="2290:32">-</operator> <name pos:start="2290:34" pos:end="2290:46"><name pos:start="2290:34" pos:end="2290:34">c</name><operator pos:start="2290:35" pos:end="2290:36">-&gt;</operator><name pos:start="2290:37" pos:end="2290:46">buffer_ptr</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="2291:5" pos:end="2291:42"><expr pos:start="2291:5" pos:end="2291:41"><name pos:start="2291:5" pos:end="2291:14">bytes_sent</name> <operator pos:start="2291:16" pos:end="2291:16">=</operator> <name pos:start="2291:18" pos:end="2291:28">frame_bytes</name> <operator pos:start="2291:30" pos:end="2291:30">-</operator> <name pos:start="2291:32" pos:end="2291:41">bytes_left</name></expr>;</expr_stmt>
    <return pos:start="2292:5" pos:end="2292:75">return <expr pos:start="2292:12" pos:end="2292:74"><name pos:start="2292:12" pos:end="2292:21"><name pos:start="2292:12" pos:end="2292:12">c</name><operator pos:start="2292:13" pos:end="2292:14">-&gt;</operator><name pos:start="2292:15" pos:end="2292:21">cur_pts</name></name> <operator pos:start="2292:23" pos:end="2292:23">+</operator> <operator pos:start="2292:25" pos:end="2292:25">(</operator><name pos:start="2292:26" pos:end="2292:46"><name pos:start="2292:26" pos:end="2292:26">c</name><operator pos:start="2292:27" pos:end="2292:28">-&gt;</operator><name pos:start="2292:29" pos:end="2292:46">cur_frame_duration</name></name> <operator pos:start="2292:48" pos:end="2292:48">*</operator> <name pos:start="2292:50" pos:end="2292:59">bytes_sent</name><operator pos:start="2292:60" pos:end="2292:60">)</operator> <operator pos:start="2292:62" pos:end="2292:62">/</operator> <name pos:start="2292:64" pos:end="2292:74">frame_bytes</name></expr>;</return>
</block_content>}</block></function>


<function pos:start="2296:1" pos:end="2530:1"><type pos:start="2296:1" pos:end="2296:10"><specifier pos:start="2296:1" pos:end="2296:6">static</specifier> <name pos:start="2296:8" pos:end="2296:10">int</name></type> <name pos:start="2296:12" pos:end="2296:28">http_prepare_data</name><parameter_list pos:start="2296:29" pos:end="2296:44">(<parameter pos:start="2296:30" pos:end="2296:43"><decl pos:start="2296:30" pos:end="2296:43"><type pos:start="2296:30" pos:end="2296:42"><name pos:start="2296:30" pos:end="2296:40">HTTPContext</name> <modifier pos:start="2296:42" pos:end="2296:42">*</modifier></type><name pos:start="2296:43" pos:end="2296:43">c</name></decl></parameter>)</parameter_list>
<block pos:start="2297:1" pos:end="2530:1">{<block_content pos:start="2298:5" pos:end="2529:13">
    <decl_stmt pos:start="2298:5" pos:end="2298:20"><decl pos:start="2298:5" pos:end="2298:9"><type pos:start="2298:5" pos:end="2298:7"><name pos:start="2298:5" pos:end="2298:7">int</name></type> <name pos:start="2298:9" pos:end="2298:9">i</name></decl>, <decl pos:start="2298:12" pos:end="2298:14"><type ref="prev" pos:start="2298:5" pos:end="2298:7"/><name pos:start="2298:12" pos:end="2298:14">len</name></decl>, <decl pos:start="2298:17" pos:end="2298:19"><type ref="prev" pos:start="2298:5" pos:end="2298:7"/><name pos:start="2298:17" pos:end="2298:19">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2299:5" pos:end="2299:25"><decl pos:start="2299:5" pos:end="2299:24"><type pos:start="2299:5" pos:end="2299:21"><name pos:start="2299:5" pos:end="2299:19">AVFormatContext</name> <modifier pos:start="2299:21" pos:end="2299:21">*</modifier></type><name pos:start="2299:22" pos:end="2299:24">ctx</name></decl>;</decl_stmt>

    <expr_stmt pos:start="2301:5" pos:end="2301:28"><expr pos:start="2301:5" pos:end="2301:27"><call pos:start="2301:5" pos:end="2301:27"><name pos:start="2301:5" pos:end="2301:12">av_freep</name><argument_list pos:start="2301:13" pos:end="2301:27">(<argument pos:start="2301:14" pos:end="2301:26"><expr pos:start="2301:14" pos:end="2301:26"><operator pos:start="2301:14" pos:end="2301:14">&amp;</operator><name pos:start="2301:15" pos:end="2301:26"><name pos:start="2301:15" pos:end="2301:15">c</name><operator pos:start="2301:16" pos:end="2301:17">-&gt;</operator><name pos:start="2301:18" pos:end="2301:26">pb_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch pos:start="2302:5" pos:end="2528:5">switch<condition pos:start="2302:11" pos:end="2302:20">(<expr pos:start="2302:12" pos:end="2302:19"><name pos:start="2302:12" pos:end="2302:19"><name pos:start="2302:12" pos:end="2302:12">c</name><operator pos:start="2302:13" pos:end="2302:14">-&gt;</operator><name pos:start="2302:15" pos:end="2302:19">state</name></name></expr>)</condition> <block pos:start="2302:22" pos:end="2528:5">{<block_content pos:start="2303:5" pos:end="2527:14">
    <case pos:start="2303:5" pos:end="2303:36">case <expr pos:start="2303:10" pos:end="2303:35"><name pos:start="2303:10" pos:end="2303:35">HTTPSTATE_SEND_DATA_HEADER</name></expr>:</case>
        <expr_stmt pos:start="2304:9" pos:end="2304:39"><expr pos:start="2304:9" pos:end="2304:38"><name pos:start="2304:9" pos:end="2304:11">ctx</name> <operator pos:start="2304:13" pos:end="2304:13">=</operator> <call pos:start="2304:15" pos:end="2304:38"><name pos:start="2304:15" pos:end="2304:36">avformat_alloc_context</name><argument_list pos:start="2304:37" pos:end="2304:38">()</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2305:9" pos:end="2306:35"><if pos:start="2305:9" pos:end="2306:35">if <condition pos:start="2305:12" pos:end="2305:17">(<expr pos:start="2305:13" pos:end="2305:16"><operator pos:start="2305:13" pos:end="2305:13">!</operator><name pos:start="2305:14" pos:end="2305:16">ctx</name></expr>)</condition><block type="pseudo" pos:start="2306:13" pos:end="2306:35"><block_content pos:start="2306:13" pos:end="2306:35">
            <return pos:start="2306:13" pos:end="2306:35">return <expr pos:start="2306:20" pos:end="2306:34"><call pos:start="2306:20" pos:end="2306:34"><name pos:start="2306:20" pos:end="2306:26">AVERROR</name><argument_list pos:start="2306:27" pos:end="2306:34">(<argument pos:start="2306:28" pos:end="2306:33"><expr pos:start="2306:28" pos:end="2306:33"><name pos:start="2306:28" pos:end="2306:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2307:9" pos:end="2307:26"><expr pos:start="2307:9" pos:end="2307:25"><name pos:start="2307:9" pos:end="2307:19"><name pos:start="2307:9" pos:end="2307:9">c</name><operator pos:start="2307:10" pos:end="2307:11">-&gt;</operator><name pos:start="2307:12" pos:end="2307:19">pfmt_ctx</name></name> <operator pos:start="2307:21" pos:end="2307:21">=</operator> <name pos:start="2307:23" pos:end="2307:25">ctx</name></expr>;</expr_stmt>
        <expr_stmt pos:start="2308:9" pos:end="2308:71"><expr pos:start="2308:9" pos:end="2308:70"><call pos:start="2308:9" pos:end="2308:70"><name pos:start="2308:9" pos:end="2308:20">av_dict_copy</name><argument_list pos:start="2308:21" pos:end="2308:70">(<argument pos:start="2308:22" pos:end="2308:45"><expr pos:start="2308:22" pos:end="2308:45"><operator pos:start="2308:22" pos:end="2308:22">&amp;</operator><operator pos:start="2308:23" pos:end="2308:23">(</operator><name pos:start="2308:24" pos:end="2308:44"><name pos:start="2308:24" pos:end="2308:24">c</name><operator pos:start="2308:25" pos:end="2308:26">-&gt;</operator><name pos:start="2308:27" pos:end="2308:34">pfmt_ctx</name><operator pos:start="2308:35" pos:end="2308:36">-&gt;</operator><name pos:start="2308:37" pos:end="2308:44">metadata</name></name><operator pos:start="2308:45" pos:end="2308:45">)</operator></expr></argument>, <argument pos:start="2308:48" pos:end="2308:66"><expr pos:start="2308:48" pos:end="2308:66"><name pos:start="2308:48" pos:end="2308:66"><name pos:start="2308:48" pos:end="2308:48">c</name><operator pos:start="2308:49" pos:end="2308:50">-&gt;</operator><name pos:start="2308:51" pos:end="2308:56">stream</name><operator pos:start="2308:57" pos:end="2308:58">-&gt;</operator><name pos:start="2308:59" pos:end="2308:66">metadata</name></name></expr></argument>, <argument pos:start="2308:69" pos:end="2308:69"><expr pos:start="2308:69" pos:end="2308:69"><literal type="number" pos:start="2308:69" pos:end="2308:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="2310:9" pos:end="2329:9">for<control pos:start="2310:12" pos:end="2310:44">(<init pos:start="2310:13" pos:end="2310:16"><expr pos:start="2310:13" pos:end="2310:15"><name pos:start="2310:13" pos:end="2310:13">i</name><operator pos:start="2310:14" pos:end="2310:14">=</operator><literal type="number" pos:start="2310:15" pos:end="2310:15">0</literal></expr>;</init><condition pos:start="2310:17" pos:end="2310:40"><expr pos:start="2310:17" pos:end="2310:39"><name pos:start="2310:17" pos:end="2310:17">i</name><operator pos:start="2310:18" pos:end="2310:18">&lt;</operator><name pos:start="2310:19" pos:end="2310:39"><name pos:start="2310:19" pos:end="2310:19">c</name><operator pos:start="2310:20" pos:end="2310:21">-&gt;</operator><name pos:start="2310:22" pos:end="2310:27">stream</name><operator pos:start="2310:28" pos:end="2310:29">-&gt;</operator><name pos:start="2310:30" pos:end="2310:39">nb_streams</name></name></expr>;</condition><incr pos:start="2310:41" pos:end="2310:43"><expr pos:start="2310:41" pos:end="2310:43"><name pos:start="2310:41" pos:end="2310:41">i</name><operator pos:start="2310:42" pos:end="2310:43">++</operator></expr></incr>)</control> <block pos:start="2310:46" pos:end="2329:9">{<block_content pos:start="2311:13" pos:end="2328:58">
            <decl_stmt pos:start="2311:13" pos:end="2311:33"><decl pos:start="2311:13" pos:end="2311:32"><type pos:start="2311:13" pos:end="2311:29"><name pos:start="2311:13" pos:end="2311:27">LayeredAVStream</name> <modifier pos:start="2311:29" pos:end="2311:29">*</modifier></type><name pos:start="2311:30" pos:end="2311:32">src</name></decl>;</decl_stmt>
            <decl_stmt pos:start="2312:13" pos:end="2312:66"><decl pos:start="2312:13" pos:end="2312:65"><type pos:start="2312:13" pos:end="2312:22"><name pos:start="2312:13" pos:end="2312:20">AVStream</name> <modifier pos:start="2312:22" pos:end="2312:22">*</modifier></type><name pos:start="2312:23" pos:end="2312:24">st</name> <init pos:start="2312:26" pos:end="2312:65">= <expr pos:start="2312:28" pos:end="2312:65"><call pos:start="2312:28" pos:end="2312:65"><name pos:start="2312:28" pos:end="2312:46">avformat_new_stream</name><argument_list pos:start="2312:47" pos:end="2312:65">(<argument pos:start="2312:48" pos:end="2312:58"><expr pos:start="2312:48" pos:end="2312:58"><name pos:start="2312:48" pos:end="2312:58"><name pos:start="2312:48" pos:end="2312:48">c</name><operator pos:start="2312:49" pos:end="2312:50">-&gt;</operator><name pos:start="2312:51" pos:end="2312:58">pfmt_ctx</name></name></expr></argument>, <argument pos:start="2312:61" pos:end="2312:64"><expr pos:start="2312:61" pos:end="2312:64"><name pos:start="2312:61" pos:end="2312:64">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="2313:13" pos:end="2314:39"><if pos:start="2313:13" pos:end="2314:39">if <condition pos:start="2313:16" pos:end="2313:20">(<expr pos:start="2313:17" pos:end="2313:19"><operator pos:start="2313:17" pos:end="2313:17">!</operator><name pos:start="2313:18" pos:end="2313:19">st</name></expr>)</condition><block type="pseudo" pos:start="2314:17" pos:end="2314:39"><block_content pos:start="2314:17" pos:end="2314:39">
                <return pos:start="2314:17" pos:end="2314:39">return <expr pos:start="2314:24" pos:end="2314:38"><call pos:start="2314:24" pos:end="2314:38"><name pos:start="2314:24" pos:end="2314:30">AVERROR</name><argument_list pos:start="2314:31" pos:end="2314:38">(<argument pos:start="2314:32" pos:end="2314:37"><expr pos:start="2314:32" pos:end="2314:37"><name pos:start="2314:32" pos:end="2314:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <comment type="block" pos:start="2316:13" pos:end="2317:24">/* if file or feed, then just take streams from FFServerStream
             * struct */</comment>
            <if_stmt pos:start="2318:13" pos:end="2322:75"><if pos:start="2318:13" pos:end="2320:44">if <condition pos:start="2318:16" pos:end="2319:45">(<expr pos:start="2318:17" pos:end="2319:44"><operator pos:start="2318:17" pos:end="2318:17">!</operator><name pos:start="2318:18" pos:end="2318:32"><name pos:start="2318:18" pos:end="2318:18">c</name><operator pos:start="2318:19" pos:end="2318:20">-&gt;</operator><name pos:start="2318:21" pos:end="2318:26">stream</name><operator pos:start="2318:27" pos:end="2318:28">-&gt;</operator><name pos:start="2318:29" pos:end="2318:32">feed</name></name> <operator pos:start="2318:34" pos:end="2318:35">||</operator>
                <name pos:start="2319:17" pos:end="2319:31"><name pos:start="2319:17" pos:end="2319:17">c</name><operator pos:start="2319:18" pos:end="2319:19">-&gt;</operator><name pos:start="2319:20" pos:end="2319:25">stream</name><operator pos:start="2319:26" pos:end="2319:27">-&gt;</operator><name pos:start="2319:28" pos:end="2319:31">feed</name></name> <operator pos:start="2319:33" pos:end="2319:34">==</operator> <name pos:start="2319:36" pos:end="2319:44"><name pos:start="2319:36" pos:end="2319:36">c</name><operator pos:start="2319:37" pos:end="2319:38">-&gt;</operator><name pos:start="2319:39" pos:end="2319:44">stream</name></name></expr>)</condition><block type="pseudo" pos:start="2320:17" pos:end="2320:44"><block_content pos:start="2320:17" pos:end="2320:44">
                <expr_stmt pos:start="2320:17" pos:end="2320:44"><expr pos:start="2320:17" pos:end="2320:43"><name pos:start="2320:17" pos:end="2320:19">src</name> <operator pos:start="2320:21" pos:end="2320:21">=</operator> <name pos:start="2320:23" pos:end="2320:43"><name pos:start="2320:23" pos:end="2320:23">c</name><operator pos:start="2320:24" pos:end="2320:25">-&gt;</operator><name pos:start="2320:26" pos:end="2320:31">stream</name><operator pos:start="2320:32" pos:end="2320:33">-&gt;</operator><name pos:start="2320:34" pos:end="2320:40">streams</name><index pos:start="2320:41" pos:end="2320:43">[<expr pos:start="2320:42" pos:end="2320:42"><name pos:start="2320:42" pos:end="2320:42">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="2321:13" pos:end="2322:75">else<block type="pseudo" pos:start="2322:17" pos:end="2322:75"><block_content pos:start="2322:17" pos:end="2322:75">
                <expr_stmt pos:start="2322:17" pos:end="2322:75"><expr pos:start="2322:17" pos:end="2322:74"><name pos:start="2322:17" pos:end="2322:19">src</name> <operator pos:start="2322:21" pos:end="2322:21">=</operator> <name pos:start="2322:23" pos:end="2322:74"><name pos:start="2322:23" pos:end="2322:23">c</name><operator pos:start="2322:24" pos:end="2322:25">-&gt;</operator><name pos:start="2322:26" pos:end="2322:31">stream</name><operator pos:start="2322:32" pos:end="2322:33">-&gt;</operator><name pos:start="2322:34" pos:end="2322:37">feed</name><operator pos:start="2322:38" pos:end="2322:39">-&gt;</operator><name pos:start="2322:40" pos:end="2322:46">streams</name><index pos:start="2322:47" pos:end="2322:74">[<expr pos:start="2322:48" pos:end="2322:73"><name pos:start="2322:48" pos:end="2322:73"><name pos:start="2322:48" pos:end="2322:48">c</name><operator pos:start="2322:49" pos:end="2322:50">-&gt;</operator><name pos:start="2322:51" pos:end="2322:56">stream</name><operator pos:start="2322:57" pos:end="2322:58">-&gt;</operator><name pos:start="2322:59" pos:end="2322:70">feed_streams</name><index pos:start="2322:71" pos:end="2322:73">[<expr pos:start="2322:72" pos:end="2322:72"><name pos:start="2322:72" pos:end="2322:72">i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="2324:13" pos:end="2324:57"><expr pos:start="2324:13" pos:end="2324:56"><call pos:start="2324:13" pos:end="2324:56"><name pos:start="2324:13" pos:end="2324:26">unlayer_stream</name><argument_list pos:start="2324:27" pos:end="2324:56">(<argument pos:start="2324:28" pos:end="2324:50"><expr pos:start="2324:28" pos:end="2324:50"><name pos:start="2324:28" pos:end="2324:50"><name pos:start="2324:28" pos:end="2324:28">c</name><operator pos:start="2324:29" pos:end="2324:30">-&gt;</operator><name pos:start="2324:31" pos:end="2324:38">pfmt_ctx</name><operator pos:start="2324:39" pos:end="2324:40">-&gt;</operator><name pos:start="2324:41" pos:end="2324:47">streams</name><index pos:start="2324:48" pos:end="2324:50">[<expr pos:start="2324:49" pos:end="2324:49"><name pos:start="2324:49" pos:end="2324:49">i</name></expr>]</index></name></expr></argument>, <argument pos:start="2324:53" pos:end="2324:55"><expr pos:start="2324:53" pos:end="2324:55"><name pos:start="2324:53" pos:end="2324:55">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="2324:59" pos:end="2324:114">//TODO we no longer copy st-&gt;internal, does this matter?</comment>
            <expr_stmt pos:start="2325:13" pos:end="2325:60"><expr pos:start="2325:13" pos:end="2325:59"><call pos:start="2325:13" pos:end="2325:59"><name pos:start="2325:13" pos:end="2325:22">av_assert0</name><argument_list pos:start="2325:23" pos:end="2325:59">(<argument pos:start="2325:24" pos:end="2325:58"><expr pos:start="2325:24" pos:end="2325:58"><operator pos:start="2325:24" pos:end="2325:24">!</operator><name pos:start="2325:25" pos:end="2325:47"><name pos:start="2325:25" pos:end="2325:25">c</name><operator pos:start="2325:26" pos:end="2325:27">-&gt;</operator><name pos:start="2325:28" pos:end="2325:35">pfmt_ctx</name><operator pos:start="2325:36" pos:end="2325:37">-&gt;</operator><name pos:start="2325:38" pos:end="2325:44">streams</name><index pos:start="2325:45" pos:end="2325:47">[<expr pos:start="2325:46" pos:end="2325:46"><name pos:start="2325:46" pos:end="2325:46">i</name></expr>]</index></name><operator pos:start="2325:48" pos:end="2325:49">-&gt;</operator><name pos:start="2325:50" pos:end="2325:58">priv_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2327:13" pos:end="2328:58"><if pos:start="2327:13" pos:end="2328:58">if <condition pos:start="2327:16" pos:end="2327:59">(<expr pos:start="2327:17" pos:end="2327:58"><name pos:start="2327:17" pos:end="2327:33"><name pos:start="2327:17" pos:end="2327:19">src</name><operator pos:start="2327:20" pos:end="2327:21">-&gt;</operator><name pos:start="2327:22" pos:end="2327:26">codec</name><operator pos:start="2327:27" pos:end="2327:28">-&gt;</operator><name pos:start="2327:29" pos:end="2327:33">flags</name></name> <operator pos:start="2327:35" pos:end="2327:35">&amp;</operator> <name pos:start="2327:37" pos:end="2327:58">AV_CODEC_FLAG_BITEXACT</name></expr>)</condition><block type="pseudo" pos:start="2328:17" pos:end="2328:58"><block_content pos:start="2328:17" pos:end="2328:58">
                <expr_stmt pos:start="2328:17" pos:end="2328:58"><expr pos:start="2328:17" pos:end="2328:57"><name pos:start="2328:17" pos:end="2328:34"><name pos:start="2328:17" pos:end="2328:17">c</name><operator pos:start="2328:18" pos:end="2328:19">-&gt;</operator><name pos:start="2328:20" pos:end="2328:27">pfmt_ctx</name><operator pos:start="2328:28" pos:end="2328:29">-&gt;</operator><name pos:start="2328:30" pos:end="2328:34">flags</name></name> <operator pos:start="2328:36" pos:end="2328:37">|=</operator> <name pos:start="2328:39" pos:end="2328:57">AVFMT_FLAG_BITEXACT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <comment type="block" pos:start="2330:9" pos:end="2330:42">/* set output format parameters */</comment>
        <expr_stmt pos:start="2331:9" pos:end="2331:46"><expr pos:start="2331:9" pos:end="2331:45"><name pos:start="2331:9" pos:end="2331:28"><name pos:start="2331:9" pos:end="2331:9">c</name><operator pos:start="2331:10" pos:end="2331:11">-&gt;</operator><name pos:start="2331:12" pos:end="2331:19">pfmt_ctx</name><operator pos:start="2331:20" pos:end="2331:21">-&gt;</operator><name pos:start="2331:22" pos:end="2331:28">oformat</name></name> <operator pos:start="2331:30" pos:end="2331:30">=</operator> <name pos:start="2331:32" pos:end="2331:45"><name pos:start="2331:32" pos:end="2331:32">c</name><operator pos:start="2331:33" pos:end="2331:34">-&gt;</operator><name pos:start="2331:35" pos:end="2331:40">stream</name><operator pos:start="2331:41" pos:end="2331:42">-&gt;</operator><name pos:start="2331:43" pos:end="2331:45">fmt</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="2332:9" pos:end="2332:69"><expr pos:start="2332:9" pos:end="2332:68"><call pos:start="2332:9" pos:end="2332:68"><name pos:start="2332:9" pos:end="2332:18">av_assert0</name><argument_list pos:start="2332:19" pos:end="2332:68">(<argument pos:start="2332:20" pos:end="2332:67"><expr pos:start="2332:20" pos:end="2332:67"><name pos:start="2332:20" pos:end="2332:42"><name pos:start="2332:20" pos:end="2332:20">c</name><operator pos:start="2332:21" pos:end="2332:22">-&gt;</operator><name pos:start="2332:23" pos:end="2332:30">pfmt_ctx</name><operator pos:start="2332:31" pos:end="2332:32">-&gt;</operator><name pos:start="2332:33" pos:end="2332:42">nb_streams</name></name> <operator pos:start="2332:44" pos:end="2332:45">==</operator> <name pos:start="2332:47" pos:end="2332:67"><name pos:start="2332:47" pos:end="2332:47">c</name><operator pos:start="2332:48" pos:end="2332:49">-&gt;</operator><name pos:start="2332:50" pos:end="2332:55">stream</name><operator pos:start="2332:56" pos:end="2332:57">-&gt;</operator><name pos:start="2332:58" pos:end="2332:67">nb_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2334:9" pos:end="2334:29"><expr pos:start="2334:9" pos:end="2334:28"><name pos:start="2334:9" pos:end="2334:24"><name pos:start="2334:9" pos:end="2334:9">c</name><operator pos:start="2334:10" pos:end="2334:11">-&gt;</operator><name pos:start="2334:12" pos:end="2334:24">got_key_frame</name></name> <operator pos:start="2334:26" pos:end="2334:26">=</operator> <literal type="number" pos:start="2334:28" pos:end="2334:28">0</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="2336:9" pos:end="2336:61">/* prepare header and save header data in a stream */</comment>
        <if_stmt pos:start="2337:9" pos:end="2340:9"><if pos:start="2337:9" pos:end="2340:9">if <condition pos:start="2337:12" pos:end="2337:52">(<expr pos:start="2337:13" pos:end="2337:51"><call pos:start="2337:13" pos:end="2337:47"><name pos:start="2337:13" pos:end="2337:29">avio_open_dyn_buf</name><argument_list pos:start="2337:30" pos:end="2337:47">(<argument pos:start="2337:31" pos:end="2337:46"><expr pos:start="2337:31" pos:end="2337:46"><operator pos:start="2337:31" pos:end="2337:31">&amp;</operator><name pos:start="2337:32" pos:end="2337:46"><name pos:start="2337:32" pos:end="2337:32">c</name><operator pos:start="2337:33" pos:end="2337:34">-&gt;</operator><name pos:start="2337:35" pos:end="2337:42">pfmt_ctx</name><operator pos:start="2337:43" pos:end="2337:44">-&gt;</operator><name pos:start="2337:45" pos:end="2337:46">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="2337:49" pos:end="2337:49">&lt;</operator> <literal type="number" pos:start="2337:51" pos:end="2337:51">0</literal></expr>)</condition> <block pos:start="2337:54" pos:end="2340:9">{<block_content pos:start="2339:13" pos:end="2339:22">
            <comment type="block" pos:start="2338:13" pos:end="2338:37">/* XXX: potential leak */</comment>
            <return pos:start="2339:13" pos:end="2339:22">return <expr pos:start="2339:20" pos:end="2339:21"><operator pos:start="2339:20" pos:end="2339:20">-</operator><literal type="number" pos:start="2339:21" pos:end="2339:21">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="2341:9" pos:end="2341:38"><expr pos:start="2341:9" pos:end="2341:37"><name pos:start="2341:9" pos:end="2341:33"><name pos:start="2341:9" pos:end="2341:9">c</name><operator pos:start="2341:10" pos:end="2341:11">-&gt;</operator><name pos:start="2341:12" pos:end="2341:19">pfmt_ctx</name><operator pos:start="2341:20" pos:end="2341:21">-&gt;</operator><name pos:start="2341:22" pos:end="2341:23">pb</name><operator pos:start="2341:24" pos:end="2341:25">-&gt;</operator><name pos:start="2341:26" pos:end="2341:33">seekable</name></name> <operator pos:start="2341:35" pos:end="2341:35">=</operator> <literal type="number" pos:start="2341:37" pos:end="2341:37">0</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="2343:9" pos:end="2347:11">/*
         * HACK to avoid MPEG-PS muxer to spit many underflow errors
         * Default value from FFmpeg
         * Try to set it using configuration option
         */</comment>
        <expr_stmt pos:start="2348:9" pos:end="2348:57"><expr pos:start="2348:9" pos:end="2348:56"><name pos:start="2348:9" pos:end="2348:30"><name pos:start="2348:9" pos:end="2348:9">c</name><operator pos:start="2348:10" pos:end="2348:11">-&gt;</operator><name pos:start="2348:12" pos:end="2348:19">pfmt_ctx</name><operator pos:start="2348:20" pos:end="2348:21">-&gt;</operator><name pos:start="2348:22" pos:end="2348:30">max_delay</name></name> <operator pos:start="2348:32" pos:end="2348:32">=</operator> <operator pos:start="2348:34" pos:end="2348:34">(</operator><name pos:start="2348:35" pos:end="2348:37">int</name><operator pos:start="2348:38" pos:end="2348:38">)</operator><operator pos:start="2348:39" pos:end="2348:39">(</operator><literal type="number" pos:start="2348:40" pos:end="2348:42">0.7</literal><operator pos:start="2348:43" pos:end="2348:43">*</operator><name pos:start="2348:44" pos:end="2348:55">AV_TIME_BASE</name><operator pos:start="2348:56" pos:end="2348:56">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="2350:9" pos:end="2354:9"><if pos:start="2350:9" pos:end="2354:9">if <condition pos:start="2350:12" pos:end="2350:65">(<expr pos:start="2350:13" pos:end="2350:64"><operator pos:start="2350:13" pos:end="2350:13">(</operator><name pos:start="2350:14" pos:end="2350:16">ret</name> <operator pos:start="2350:18" pos:end="2350:18">=</operator> <call pos:start="2350:20" pos:end="2350:59"><name pos:start="2350:20" pos:end="2350:40">avformat_write_header</name><argument_list pos:start="2350:41" pos:end="2350:59">(<argument pos:start="2350:42" pos:end="2350:52"><expr pos:start="2350:42" pos:end="2350:52"><name pos:start="2350:42" pos:end="2350:52"><name pos:start="2350:42" pos:end="2350:42">c</name><operator pos:start="2350:43" pos:end="2350:44">-&gt;</operator><name pos:start="2350:45" pos:end="2350:52">pfmt_ctx</name></name></expr></argument>, <argument pos:start="2350:55" pos:end="2350:58"><expr pos:start="2350:55" pos:end="2350:58"><name pos:start="2350:55" pos:end="2350:58">NULL</name></expr></argument>)</argument_list></call><operator pos:start="2350:60" pos:end="2350:60">)</operator> <operator pos:start="2350:62" pos:end="2350:62">&lt;</operator> <literal type="number" pos:start="2350:64" pos:end="2350:64">0</literal></expr>)</condition> <block pos:start="2350:67" pos:end="2354:9">{<block_content pos:start="2351:13" pos:end="2353:23">
            <expr_stmt pos:start="2351:13" pos:end="2352:59"><expr pos:start="2351:13" pos:end="2352:58"><call pos:start="2351:13" pos:end="2352:58"><name pos:start="2351:13" pos:end="2351:20">http_log</name><argument_list pos:start="2351:21" pos:end="2352:58">(<argument pos:start="2351:22" pos:end="2351:72"><expr pos:start="2351:22" pos:end="2351:72"><literal type="string" pos:start="2351:22" pos:end="2351:72">"Error writing output header for stream '%s': %s\n"</literal></expr></argument>,
                     <argument pos:start="2352:22" pos:end="2352:40"><expr pos:start="2352:22" pos:end="2352:40"><name pos:start="2352:22" pos:end="2352:40"><name pos:start="2352:22" pos:end="2352:22">c</name><operator pos:start="2352:23" pos:end="2352:24">-&gt;</operator><name pos:start="2352:25" pos:end="2352:30">stream</name><operator pos:start="2352:31" pos:end="2352:32">-&gt;</operator><name pos:start="2352:33" pos:end="2352:40">filename</name></name></expr></argument>, <argument pos:start="2352:43" pos:end="2352:57"><expr pos:start="2352:43" pos:end="2352:57"><call pos:start="2352:43" pos:end="2352:57"><name pos:start="2352:43" pos:end="2352:52">av_err2str</name><argument_list pos:start="2352:53" pos:end="2352:57">(<argument pos:start="2352:54" pos:end="2352:56"><expr pos:start="2352:54" pos:end="2352:56"><name pos:start="2352:54" pos:end="2352:56">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2353:13" pos:end="2353:23">return <expr pos:start="2353:20" pos:end="2353:22"><name pos:start="2353:20" pos:end="2353:22">ret</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="2355:9" pos:end="2355:45"><expr pos:start="2355:9" pos:end="2355:44"><call pos:start="2355:9" pos:end="2355:44"><name pos:start="2355:9" pos:end="2355:20">av_dict_free</name><argument_list pos:start="2355:21" pos:end="2355:44">(<argument pos:start="2355:22" pos:end="2355:43"><expr pos:start="2355:22" pos:end="2355:43"><operator pos:start="2355:22" pos:end="2355:22">&amp;</operator><name pos:start="2355:23" pos:end="2355:43"><name pos:start="2355:23" pos:end="2355:23">c</name><operator pos:start="2355:24" pos:end="2355:25">-&gt;</operator><name pos:start="2355:26" pos:end="2355:33">pfmt_ctx</name><operator pos:start="2355:34" pos:end="2355:35">-&gt;</operator><name pos:start="2355:36" pos:end="2355:43">metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2357:9" pos:end="2357:65"><expr pos:start="2357:9" pos:end="2357:64"><name pos:start="2357:9" pos:end="2357:11">len</name> <operator pos:start="2357:13" pos:end="2357:13">=</operator> <call pos:start="2357:15" pos:end="2357:64"><name pos:start="2357:15" pos:end="2357:32">avio_close_dyn_buf</name><argument_list pos:start="2357:33" pos:end="2357:64">(<argument pos:start="2357:34" pos:end="2357:48"><expr pos:start="2357:34" pos:end="2357:48"><name pos:start="2357:34" pos:end="2357:48"><name pos:start="2357:34" pos:end="2357:34">c</name><operator pos:start="2357:35" pos:end="2357:36">-&gt;</operator><name pos:start="2357:37" pos:end="2357:44">pfmt_ctx</name><operator pos:start="2357:45" pos:end="2357:46">-&gt;</operator><name pos:start="2357:47" pos:end="2357:48">pb</name></name></expr></argument>, <argument pos:start="2357:51" pos:end="2357:63"><expr pos:start="2357:51" pos:end="2357:63"><operator pos:start="2357:51" pos:end="2357:51">&amp;</operator><name pos:start="2357:52" pos:end="2357:63"><name pos:start="2357:52" pos:end="2357:52">c</name><operator pos:start="2357:53" pos:end="2357:54">-&gt;</operator><name pos:start="2357:55" pos:end="2357:63">pb_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2358:9" pos:end="2358:37"><expr pos:start="2358:9" pos:end="2358:36"><name pos:start="2358:9" pos:end="2358:21"><name pos:start="2358:9" pos:end="2358:9">c</name><operator pos:start="2358:10" pos:end="2358:11">-&gt;</operator><name pos:start="2358:12" pos:end="2358:21">buffer_ptr</name></name> <operator pos:start="2358:23" pos:end="2358:23">=</operator> <name pos:start="2358:25" pos:end="2358:36"><name pos:start="2358:25" pos:end="2358:25">c</name><operator pos:start="2358:26" pos:end="2358:27">-&gt;</operator><name pos:start="2358:28" pos:end="2358:36">pb_buffer</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="2359:9" pos:end="2359:43"><expr pos:start="2359:9" pos:end="2359:42"><name pos:start="2359:9" pos:end="2359:21"><name pos:start="2359:9" pos:end="2359:9">c</name><operator pos:start="2359:10" pos:end="2359:11">-&gt;</operator><name pos:start="2359:12" pos:end="2359:21">buffer_end</name></name> <operator pos:start="2359:23" pos:end="2359:23">=</operator> <name pos:start="2359:25" pos:end="2359:36"><name pos:start="2359:25" pos:end="2359:25">c</name><operator pos:start="2359:26" pos:end="2359:27">-&gt;</operator><name pos:start="2359:28" pos:end="2359:36">pb_buffer</name></name> <operator pos:start="2359:38" pos:end="2359:38">+</operator> <name pos:start="2359:40" pos:end="2359:42">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="2361:9" pos:end="2361:39"><expr pos:start="2361:9" pos:end="2361:38"><name pos:start="2361:9" pos:end="2361:16"><name pos:start="2361:9" pos:end="2361:9">c</name><operator pos:start="2361:10" pos:end="2361:11">-&gt;</operator><name pos:start="2361:12" pos:end="2361:16">state</name></name> <operator pos:start="2361:18" pos:end="2361:18">=</operator> <name pos:start="2361:20" pos:end="2361:38">HTTPSTATE_SEND_DATA</name></expr>;</expr_stmt>
        <expr_stmt pos:start="2362:9" pos:end="2362:32"><expr pos:start="2362:9" pos:end="2362:31"><name pos:start="2362:9" pos:end="2362:27"><name pos:start="2362:9" pos:end="2362:9">c</name><operator pos:start="2362:10" pos:end="2362:11">-&gt;</operator><name pos:start="2362:12" pos:end="2362:27">last_packet_sent</name></name> <operator pos:start="2362:29" pos:end="2362:29">=</operator> <literal type="number" pos:start="2362:31" pos:end="2362:31">0</literal></expr>;</expr_stmt>
        <break pos:start="2363:9" pos:end="2363:14">break;</break>
    <case pos:start="2364:5" pos:end="2364:29">case <expr pos:start="2364:10" pos:end="2364:28"><name pos:start="2364:10" pos:end="2364:28">HTTPSTATE_SEND_DATA</name></expr>:</case>
        <comment type="block" pos:start="2365:9" pos:end="2365:31">/* find a new packet */</comment>
        <comment type="block" pos:start="2366:9" pos:end="2366:49">/* read a packet from the input stream */</comment>
        <if_stmt pos:start="2367:9" pos:end="2370:60"><if pos:start="2367:9" pos:end="2370:60">if <condition pos:start="2367:12" pos:end="2367:28">(<expr pos:start="2367:13" pos:end="2367:27"><name pos:start="2367:13" pos:end="2367:27"><name pos:start="2367:13" pos:end="2367:13">c</name><operator pos:start="2367:14" pos:end="2367:15">-&gt;</operator><name pos:start="2367:16" pos:end="2367:21">stream</name><operator pos:start="2367:22" pos:end="2367:23">-&gt;</operator><name pos:start="2367:24" pos:end="2367:27">feed</name></name></expr>)</condition><block type="pseudo" pos:start="2368:13" pos:end="2370:60"><block_content pos:start="2368:13" pos:end="2370:60">
            <expr_stmt pos:start="2368:13" pos:end="2370:60"><expr pos:start="2368:13" pos:end="2370:59"><call pos:start="2368:13" pos:end="2370:59"><name pos:start="2368:13" pos:end="2368:31">ffm_set_write_index</name><argument_list pos:start="2368:32" pos:end="2370:59">(<argument pos:start="2368:33" pos:end="2368:41"><expr pos:start="2368:33" pos:end="2368:41"><name pos:start="2368:33" pos:end="2368:41"><name pos:start="2368:33" pos:end="2368:33">c</name><operator pos:start="2368:34" pos:end="2368:35">-&gt;</operator><name pos:start="2368:36" pos:end="2368:41">fmt_in</name></name></expr></argument>,
                                <argument pos:start="2369:33" pos:end="2369:65"><expr pos:start="2369:33" pos:end="2369:65"><name pos:start="2369:33" pos:end="2369:65"><name pos:start="2369:33" pos:end="2369:33">c</name><operator pos:start="2369:34" pos:end="2369:35">-&gt;</operator><name pos:start="2369:36" pos:end="2369:41">stream</name><operator pos:start="2369:42" pos:end="2369:43">-&gt;</operator><name pos:start="2369:44" pos:end="2369:47">feed</name><operator pos:start="2369:48" pos:end="2369:49">-&gt;</operator><name pos:start="2369:50" pos:end="2369:65">feed_write_index</name></name></expr></argument>,
                                <argument pos:start="2370:33" pos:end="2370:58"><expr pos:start="2370:33" pos:end="2370:58"><name pos:start="2370:33" pos:end="2370:58"><name pos:start="2370:33" pos:end="2370:33">c</name><operator pos:start="2370:34" pos:end="2370:35">-&gt;</operator><name pos:start="2370:36" pos:end="2370:41">stream</name><operator pos:start="2370:42" pos:end="2370:43">-&gt;</operator><name pos:start="2370:44" pos:end="2370:47">feed</name><operator pos:start="2370:48" pos:end="2370:49">-&gt;</operator><name pos:start="2370:50" pos:end="2370:58">feed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="2372:9" pos:end="2507:9"><if pos:start="2372:9" pos:end="2375:51">if <condition pos:start="2372:12" pos:end="2373:63">(<expr pos:start="2372:13" pos:end="2373:62"><name pos:start="2372:13" pos:end="2372:31"><name pos:start="2372:13" pos:end="2372:13">c</name><operator pos:start="2372:14" pos:end="2372:15">-&gt;</operator><name pos:start="2372:16" pos:end="2372:21">stream</name><operator pos:start="2372:22" pos:end="2372:23">-&gt;</operator><name pos:start="2372:24" pos:end="2372:31">max_time</name></name> <operator pos:start="2372:33" pos:end="2372:34">&amp;&amp;</operator>
            <name pos:start="2373:13" pos:end="2373:31"><name pos:start="2373:13" pos:end="2373:13">c</name><operator pos:start="2373:14" pos:end="2373:15">-&gt;</operator><name pos:start="2373:16" pos:end="2373:21">stream</name><operator pos:start="2373:22" pos:end="2373:23">-&gt;</operator><name pos:start="2373:24" pos:end="2373:31">max_time</name></name> <operator pos:start="2373:33" pos:end="2373:33">+</operator> <name pos:start="2373:35" pos:end="2373:47"><name pos:start="2373:35" pos:end="2373:35">c</name><operator pos:start="2373:36" pos:end="2373:37">-&gt;</operator><name pos:start="2373:38" pos:end="2373:47">start_time</name></name> <operator pos:start="2373:49" pos:end="2373:49">-</operator> <name pos:start="2373:51" pos:end="2373:58">cur_time</name> <operator pos:start="2373:60" pos:end="2373:60">&lt;</operator> <literal type="number" pos:start="2373:62" pos:end="2373:62">0</literal></expr>)</condition><block type="pseudo" pos:start="2375:13" pos:end="2375:51"><block_content pos:start="2375:13" pos:end="2375:51">
            <comment type="block" pos:start="2374:13" pos:end="2374:35">/* We have timed out */</comment>
            <expr_stmt pos:start="2375:13" pos:end="2375:51"><expr pos:start="2375:13" pos:end="2375:50"><name pos:start="2375:13" pos:end="2375:20"><name pos:start="2375:13" pos:end="2375:13">c</name><operator pos:start="2375:14" pos:end="2375:15">-&gt;</operator><name pos:start="2375:16" pos:end="2375:20">state</name></name> <operator pos:start="2375:22" pos:end="2375:22">=</operator> <name pos:start="2375:24" pos:end="2375:50">HTTPSTATE_SEND_DATA_TRAILER</name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="2376:9" pos:end="2507:9">else <block pos:start="2376:14" pos:end="2507:9">{<block_content pos:start="2377:13" pos:end="2506:13">
            <decl_stmt pos:start="2377:13" pos:end="2377:25"><decl pos:start="2377:13" pos:end="2377:24"><type pos:start="2377:13" pos:end="2377:20"><name pos:start="2377:13" pos:end="2377:20">AVPacket</name></type> <name pos:start="2377:22" pos:end="2377:24">pkt</name></decl>;</decl_stmt>
        <label pos:start="2378:9" pos:end="2378:13"><name pos:start="2378:9" pos:end="2378:12">redo</name>:</label>
            <expr_stmt pos:start="2379:13" pos:end="2379:49"><expr pos:start="2379:13" pos:end="2379:48"><name pos:start="2379:13" pos:end="2379:15">ret</name> <operator pos:start="2379:17" pos:end="2379:17">=</operator> <call pos:start="2379:19" pos:end="2379:48"><name pos:start="2379:19" pos:end="2379:31">av_read_frame</name><argument_list pos:start="2379:32" pos:end="2379:48">(<argument pos:start="2379:33" pos:end="2379:41"><expr pos:start="2379:33" pos:end="2379:41"><name pos:start="2379:33" pos:end="2379:41"><name pos:start="2379:33" pos:end="2379:33">c</name><operator pos:start="2379:34" pos:end="2379:35">-&gt;</operator><name pos:start="2379:36" pos:end="2379:41">fmt_in</name></name></expr></argument>, <argument pos:start="2379:44" pos:end="2379:47"><expr pos:start="2379:44" pos:end="2379:47"><operator pos:start="2379:44" pos:end="2379:44">&amp;</operator><name pos:start="2379:45" pos:end="2379:47">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2380:13" pos:end="2506:13"><if pos:start="2380:13" pos:end="2401:13">if <condition pos:start="2380:16" pos:end="2380:24">(<expr pos:start="2380:17" pos:end="2380:23"><name pos:start="2380:17" pos:end="2380:19">ret</name> <operator pos:start="2380:21" pos:end="2380:21">&lt;</operator> <literal type="number" pos:start="2380:23" pos:end="2380:23">0</literal></expr>)</condition> <block pos:start="2380:26" pos:end="2401:13">{<block_content pos:start="2381:17" pos:end="2400:17">
                <if_stmt pos:start="2381:17" pos:end="2386:17"><if pos:start="2381:17" pos:end="2386:17">if <condition pos:start="2381:20" pos:end="2381:36">(<expr pos:start="2381:21" pos:end="2381:35"><name pos:start="2381:21" pos:end="2381:35"><name pos:start="2381:21" pos:end="2381:21">c</name><operator pos:start="2381:22" pos:end="2381:23">-&gt;</operator><name pos:start="2381:24" pos:end="2381:29">stream</name><operator pos:start="2381:30" pos:end="2381:31">-&gt;</operator><name pos:start="2381:32" pos:end="2381:35">feed</name></name></expr>)</condition> <block pos:start="2381:38" pos:end="2386:17">{<block_content pos:start="2384:21" pos:end="2385:29">
                    <comment type="block" pos:start="2382:21" pos:end="2383:62">/* if coming from feed, it means we reached the end of the
                     * ffm file, so must wait for more data */</comment>
                    <expr_stmt pos:start="2384:21" pos:end="2384:51"><expr pos:start="2384:21" pos:end="2384:50"><name pos:start="2384:21" pos:end="2384:28"><name pos:start="2384:21" pos:end="2384:21">c</name><operator pos:start="2384:22" pos:end="2384:23">-&gt;</operator><name pos:start="2384:24" pos:end="2384:28">state</name></name> <operator pos:start="2384:30" pos:end="2384:30">=</operator> <name pos:start="2384:32" pos:end="2384:50">HTTPSTATE_WAIT_FEED</name></expr>;</expr_stmt>
                    <return pos:start="2385:21" pos:end="2385:29">return <expr pos:start="2385:28" pos:end="2385:28"><literal type="number" pos:start="2385:28" pos:end="2385:28">1</literal></expr>;</return> <comment type="block" pos:start="2385:31" pos:end="2385:49">/* state changed */</comment>
                </block_content>}</block></if></if_stmt>
                <if_stmt pos:start="2387:17" pos:end="2390:17"><if pos:start="2387:17" pos:end="2390:17">if <condition pos:start="2387:20" pos:end="2387:43">(<expr pos:start="2387:21" pos:end="2387:42"><name pos:start="2387:21" pos:end="2387:23">ret</name> <operator pos:start="2387:25" pos:end="2387:26">==</operator> <call pos:start="2387:28" pos:end="2387:42"><name pos:start="2387:28" pos:end="2387:34">AVERROR</name><argument_list pos:start="2387:35" pos:end="2387:42">(<argument pos:start="2387:36" pos:end="2387:41"><expr pos:start="2387:36" pos:end="2387:41"><name pos:start="2387:36" pos:end="2387:41">EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2387:45" pos:end="2390:17">{<block_content pos:start="2389:21" pos:end="2389:29">
                    <comment type="block" pos:start="2388:21" pos:end="2388:58">/* input not ready, come back later */</comment>
                    <return pos:start="2389:21" pos:end="2389:29">return <expr pos:start="2389:28" pos:end="2389:28"><literal type="number" pos:start="2389:28" pos:end="2389:28">0</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <if_stmt pos:start="2391:17" pos:end="2400:17"><if pos:start="2391:17" pos:end="2396:17">if <condition pos:start="2391:20" pos:end="2391:36">(<expr pos:start="2391:21" pos:end="2391:35"><name pos:start="2391:21" pos:end="2391:35"><name pos:start="2391:21" pos:end="2391:21">c</name><operator pos:start="2391:22" pos:end="2391:23">-&gt;</operator><name pos:start="2391:24" pos:end="2391:29">stream</name><operator pos:start="2391:30" pos:end="2391:31">-&gt;</operator><name pos:start="2391:32" pos:end="2391:35">loop</name></name></expr>)</condition> <block pos:start="2391:38" pos:end="2396:17">{<block_content pos:start="2392:21" pos:end="2395:30">
                    <expr_stmt pos:start="2392:21" pos:end="2392:53"><expr pos:start="2392:21" pos:end="2392:52"><call pos:start="2392:21" pos:end="2392:52"><name pos:start="2392:21" pos:end="2392:40">avformat_close_input</name><argument_list pos:start="2392:41" pos:end="2392:52">(<argument pos:start="2392:42" pos:end="2392:51"><expr pos:start="2392:42" pos:end="2392:51"><operator pos:start="2392:42" pos:end="2392:42">&amp;</operator><name pos:start="2392:43" pos:end="2392:51"><name pos:start="2392:43" pos:end="2392:43">c</name><operator pos:start="2392:44" pos:end="2392:45">-&gt;</operator><name pos:start="2392:46" pos:end="2392:51">fmt_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="2393:21" pos:end="2394:37"><if pos:start="2393:21" pos:end="2394:37">if <condition pos:start="2393:24" pos:end="2393:53">(<expr pos:start="2393:25" pos:end="2393:52"><call pos:start="2393:25" pos:end="2393:48"><name pos:start="2393:25" pos:end="2393:41">open_input_stream</name><argument_list pos:start="2393:42" pos:end="2393:48">(<argument pos:start="2393:43" pos:end="2393:43"><expr pos:start="2393:43" pos:end="2393:43"><name pos:start="2393:43" pos:end="2393:43">c</name></expr></argument>, <argument pos:start="2393:46" pos:end="2393:47"><expr pos:start="2393:46" pos:end="2393:47"><literal type="string" pos:start="2393:46" pos:end="2393:47">""</literal></expr></argument>)</argument_list></call> <operator pos:start="2393:50" pos:end="2393:50">&lt;</operator> <literal type="number" pos:start="2393:52" pos:end="2393:52">0</literal></expr>)</condition><block type="pseudo" pos:start="2394:25" pos:end="2394:37"><block_content pos:start="2394:25" pos:end="2394:37">
                        <goto pos:start="2394:25" pos:end="2394:37">goto <name pos:start="2394:30" pos:end="2394:36">no_loop</name>;</goto></block_content></block></if></if_stmt>
                    <goto pos:start="2395:21" pos:end="2395:30">goto <name pos:start="2395:26" pos:end="2395:29">redo</name>;</goto>
                </block_content>}</block></if> <else pos:start="2396:19" pos:end="2400:17">else <block pos:start="2396:24" pos:end="2400:17">{<block_content pos:start="2397:21" pos:end="2399:63">
                    <label pos:start="2397:21" pos:end="2397:28"><name pos:start="2397:21" pos:end="2397:27">no_loop</name>:</label>
                        <comment type="block" pos:start="2398:25" pos:end="2398:72">/* must send trailer now because EOF or error */</comment>
                        <expr_stmt pos:start="2399:25" pos:end="2399:63"><expr pos:start="2399:25" pos:end="2399:62"><name pos:start="2399:25" pos:end="2399:32"><name pos:start="2399:25" pos:end="2399:25">c</name><operator pos:start="2399:26" pos:end="2399:27">-&gt;</operator><name pos:start="2399:28" pos:end="2399:32">state</name></name> <operator pos:start="2399:34" pos:end="2399:34">=</operator> <name pos:start="2399:36" pos:end="2399:62">HTTPSTATE_SEND_DATA_TRAILER</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else pos:start="2401:15" pos:end="2506:13">else <block pos:start="2401:20" pos:end="2506:13">{<block_content pos:start="2402:17" pos:end="2505:38">
                <decl_stmt pos:start="2402:17" pos:end="2402:52"><decl pos:start="2402:17" pos:end="2402:51"><type pos:start="2402:17" pos:end="2402:19"><name pos:start="2402:17" pos:end="2402:19">int</name></type> <name pos:start="2402:21" pos:end="2402:32">source_index</name> <init pos:start="2402:34" pos:end="2402:51">= <expr pos:start="2402:36" pos:end="2402:51"><name pos:start="2402:36" pos:end="2402:51"><name pos:start="2402:36" pos:end="2402:38">pkt</name><operator pos:start="2402:39" pos:end="2402:39">.</operator><name pos:start="2402:40" pos:end="2402:51">stream_index</name></name></expr></init></decl>;</decl_stmt>
                <comment type="block" pos:start="2403:17" pos:end="2403:48">/* update first pts if needed */</comment>
                <if_stmt pos:start="2404:17" pos:end="2407:17"><if pos:start="2404:17" pos:end="2407:17">if <condition pos:start="2404:20" pos:end="2404:80">(<expr pos:start="2404:21" pos:end="2404:79"><name pos:start="2404:21" pos:end="2404:32"><name pos:start="2404:21" pos:end="2404:21">c</name><operator pos:start="2404:22" pos:end="2404:23">-&gt;</operator><name pos:start="2404:24" pos:end="2404:32">first_pts</name></name> <operator pos:start="2404:34" pos:end="2404:35">==</operator> <name pos:start="2404:37" pos:end="2404:50">AV_NOPTS_VALUE</name> <operator pos:start="2404:52" pos:end="2404:53">&amp;&amp;</operator> <name pos:start="2404:55" pos:end="2404:61"><name pos:start="2404:55" pos:end="2404:57">pkt</name><operator pos:start="2404:58" pos:end="2404:58">.</operator><name pos:start="2404:59" pos:end="2404:61">dts</name></name> <operator pos:start="2404:63" pos:end="2404:64">!=</operator> <name pos:start="2404:66" pos:end="2404:79">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="2404:82" pos:end="2407:17">{<block_content pos:start="2405:21" pos:end="2406:45">
                    <expr_stmt pos:start="2405:21" pos:end="2405:122"><expr pos:start="2405:21" pos:end="2405:121"><name pos:start="2405:21" pos:end="2405:32"><name pos:start="2405:21" pos:end="2405:21">c</name><operator pos:start="2405:22" pos:end="2405:23">-&gt;</operator><name pos:start="2405:24" pos:end="2405:32">first_pts</name></name> <operator pos:start="2405:34" pos:end="2405:34">=</operator> <call pos:start="2405:36" pos:end="2405:121"><name pos:start="2405:36" pos:end="2405:47">av_rescale_q</name><argument_list pos:start="2405:48" pos:end="2405:121">(<argument pos:start="2405:49" pos:end="2405:55"><expr pos:start="2405:49" pos:end="2405:55"><name pos:start="2405:49" pos:end="2405:55"><name pos:start="2405:49" pos:end="2405:51">pkt</name><operator pos:start="2405:52" pos:end="2405:52">.</operator><name pos:start="2405:53" pos:end="2405:55">dts</name></name></expr></argument>, <argument pos:start="2405:58" pos:end="2405:104"><expr pos:start="2405:58" pos:end="2405:104"><name pos:start="2405:58" pos:end="2405:93"><name pos:start="2405:58" pos:end="2405:58">c</name><operator pos:start="2405:59" pos:end="2405:60">-&gt;</operator><name pos:start="2405:61" pos:end="2405:66">fmt_in</name><operator pos:start="2405:67" pos:end="2405:68">-&gt;</operator><name pos:start="2405:69" pos:end="2405:75">streams</name><index pos:start="2405:76" pos:end="2405:93">[<expr pos:start="2405:77" pos:end="2405:92"><name pos:start="2405:77" pos:end="2405:92"><name pos:start="2405:77" pos:end="2405:79">pkt</name><operator pos:start="2405:80" pos:end="2405:80">.</operator><name pos:start="2405:81" pos:end="2405:92">stream_index</name></name></expr>]</index></name><operator pos:start="2405:94" pos:end="2405:95">-&gt;</operator><name pos:start="2405:96" pos:end="2405:104">time_base</name></expr></argument>, <argument pos:start="2405:107" pos:end="2405:120"><expr pos:start="2405:107" pos:end="2405:120"><name pos:start="2405:107" pos:end="2405:120">AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2406:21" pos:end="2406:45"><expr pos:start="2406:21" pos:end="2406:44"><name pos:start="2406:21" pos:end="2406:33"><name pos:start="2406:21" pos:end="2406:21">c</name><operator pos:start="2406:22" pos:end="2406:23">-&gt;</operator><name pos:start="2406:24" pos:end="2406:33">start_time</name></name> <operator pos:start="2406:35" pos:end="2406:35">=</operator> <name pos:start="2406:37" pos:end="2406:44">cur_time</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <comment type="block" pos:start="2408:17" pos:end="2408:55">/* send it to the appropriate stream */</comment>
                <if_stmt pos:start="2409:17" pos:end="2504:17"><if pos:start="2409:17" pos:end="2433:17">if <condition pos:start="2409:20" pos:end="2409:36">(<expr pos:start="2409:21" pos:end="2409:35"><name pos:start="2409:21" pos:end="2409:35"><name pos:start="2409:21" pos:end="2409:21">c</name><operator pos:start="2409:22" pos:end="2409:23">-&gt;</operator><name pos:start="2409:24" pos:end="2409:29">stream</name><operator pos:start="2409:30" pos:end="2409:31">-&gt;</operator><name pos:start="2409:32" pos:end="2409:35">feed</name></name></expr>)</condition> <block pos:start="2409:38" pos:end="2433:17">{<block_content pos:start="2411:21" pos:end="2432:21">
                    <comment type="block" pos:start="2410:21" pos:end="2410:72">/* if coming from a feed, select the right stream */</comment>
                    <if_stmt pos:start="2411:21" pos:end="2420:21"><if pos:start="2411:21" pos:end="2420:21">if <condition pos:start="2411:24" pos:end="2411:42">(<expr pos:start="2411:25" pos:end="2411:41"><name pos:start="2411:25" pos:end="2411:41"><name pos:start="2411:25" pos:end="2411:25">c</name><operator pos:start="2411:26" pos:end="2411:27">-&gt;</operator><name pos:start="2411:28" pos:end="2411:41">switch_pending</name></name></expr>)</condition> <block pos:start="2411:44" pos:end="2420:21">{<block_content pos:start="2412:25" pos:end="2419:25">
                        <expr_stmt pos:start="2412:25" pos:end="2412:46"><expr pos:start="2412:25" pos:end="2412:45"><name pos:start="2412:25" pos:end="2412:41"><name pos:start="2412:25" pos:end="2412:25">c</name><operator pos:start="2412:26" pos:end="2412:27">-&gt;</operator><name pos:start="2412:28" pos:end="2412:41">switch_pending</name></name> <operator pos:start="2412:43" pos:end="2412:43">=</operator> <literal type="number" pos:start="2412:45" pos:end="2412:45">0</literal></expr>;</expr_stmt>
                        <for pos:start="2413:25" pos:end="2419:25">for<control pos:start="2413:28" pos:end="2413:60">(<init pos:start="2413:29" pos:end="2413:32"><expr pos:start="2413:29" pos:end="2413:31"><name pos:start="2413:29" pos:end="2413:29">i</name><operator pos:start="2413:30" pos:end="2413:30">=</operator><literal type="number" pos:start="2413:31" pos:end="2413:31">0</literal></expr>;</init><condition pos:start="2413:33" pos:end="2413:56"><expr pos:start="2413:33" pos:end="2413:55"><name pos:start="2413:33" pos:end="2413:33">i</name><operator pos:start="2413:34" pos:end="2413:34">&lt;</operator><name pos:start="2413:35" pos:end="2413:55"><name pos:start="2413:35" pos:end="2413:35">c</name><operator pos:start="2413:36" pos:end="2413:37">-&gt;</operator><name pos:start="2413:38" pos:end="2413:43">stream</name><operator pos:start="2413:44" pos:end="2413:45">-&gt;</operator><name pos:start="2413:46" pos:end="2413:55">nb_streams</name></name></expr>;</condition><incr pos:start="2413:57" pos:end="2413:59"><expr pos:start="2413:57" pos:end="2413:59"><name pos:start="2413:57" pos:end="2413:57">i</name><operator pos:start="2413:58" pos:end="2413:59">++</operator></expr></incr>)</control> <block pos:start="2413:62" pos:end="2419:25">{<block_content pos:start="2414:29" pos:end="2418:54">
                            <if_stmt pos:start="2414:29" pos:end="2416:67"><if pos:start="2414:29" pos:end="2416:67">if <condition pos:start="2414:32" pos:end="2414:78">(<expr pos:start="2414:33" pos:end="2414:77"><name pos:start="2414:33" pos:end="2414:57"><name pos:start="2414:33" pos:end="2414:33">c</name><operator pos:start="2414:34" pos:end="2414:35">-&gt;</operator><name pos:start="2414:36" pos:end="2414:54">switch_feed_streams</name><index pos:start="2414:55" pos:end="2414:57">[<expr pos:start="2414:56" pos:end="2414:56"><name pos:start="2414:56" pos:end="2414:56">i</name></expr>]</index></name> <operator pos:start="2414:59" pos:end="2414:60">==</operator> <name pos:start="2414:62" pos:end="2414:77"><name pos:start="2414:62" pos:end="2414:64">pkt</name><operator pos:start="2414:65" pos:end="2414:65">.</operator><name pos:start="2414:66" pos:end="2414:77">stream_index</name></name></expr>)</condition><block type="pseudo" pos:start="2415:33" pos:end="2416:67"><block_content pos:start="2415:33" pos:end="2416:67">
                                <if_stmt pos:start="2415:33" pos:end="2416:67"><if pos:start="2415:33" pos:end="2416:67">if <condition pos:start="2415:36" pos:end="2415:64">(<expr pos:start="2415:37" pos:end="2415:63"><name pos:start="2415:37" pos:end="2415:45"><name pos:start="2415:37" pos:end="2415:39">pkt</name><operator pos:start="2415:40" pos:end="2415:40">.</operator><name pos:start="2415:41" pos:end="2415:45">flags</name></name> <operator pos:start="2415:47" pos:end="2415:47">&amp;</operator> <name pos:start="2415:49" pos:end="2415:63">AV_PKT_FLAG_KEY</name></expr>)</condition><block type="pseudo" pos:start="2416:37" pos:end="2416:67"><block_content pos:start="2416:37" pos:end="2416:67">
                                    <expr_stmt pos:start="2416:37" pos:end="2416:67"><expr pos:start="2416:37" pos:end="2416:66"><name pos:start="2416:37" pos:end="2416:61"><name pos:start="2416:37" pos:end="2416:37">c</name><operator pos:start="2416:38" pos:end="2416:39">-&gt;</operator><name pos:start="2416:40" pos:end="2416:58">switch_feed_streams</name><index pos:start="2416:59" pos:end="2416:61">[<expr pos:start="2416:60" pos:end="2416:60"><name pos:start="2416:60" pos:end="2416:60">i</name></expr>]</index></name> <operator pos:start="2416:63" pos:end="2416:63">=</operator> <operator pos:start="2416:65" pos:end="2416:65">-</operator><literal type="number" pos:start="2416:66" pos:end="2416:66">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
                            <if_stmt pos:start="2417:29" pos:end="2418:54"><if pos:start="2417:29" pos:end="2418:54">if <condition pos:start="2417:32" pos:end="2417:63">(<expr pos:start="2417:33" pos:end="2417:62"><name pos:start="2417:33" pos:end="2417:57"><name pos:start="2417:33" pos:end="2417:33">c</name><operator pos:start="2417:34" pos:end="2417:35">-&gt;</operator><name pos:start="2417:36" pos:end="2417:54">switch_feed_streams</name><index pos:start="2417:55" pos:end="2417:57">[<expr pos:start="2417:56" pos:end="2417:56"><name pos:start="2417:56" pos:end="2417:56">i</name></expr>]</index></name> <operator pos:start="2417:59" pos:end="2417:60">&gt;=</operator> <literal type="number" pos:start="2417:62" pos:end="2417:62">0</literal></expr>)</condition><block type="pseudo" pos:start="2418:33" pos:end="2418:54"><block_content pos:start="2418:33" pos:end="2418:54">
                                <expr_stmt pos:start="2418:33" pos:end="2418:54"><expr pos:start="2418:33" pos:end="2418:53"><name pos:start="2418:33" pos:end="2418:49"><name pos:start="2418:33" pos:end="2418:33">c</name><operator pos:start="2418:34" pos:end="2418:35">-&gt;</operator><name pos:start="2418:36" pos:end="2418:49">switch_pending</name></name> <operator pos:start="2418:51" pos:end="2418:51">=</operator> <literal type="number" pos:start="2418:53" pos:end="2418:53">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></if></if_stmt>
                    <for pos:start="2421:21" pos:end="2432:21">for<control pos:start="2421:24" pos:end="2421:56">(<init pos:start="2421:25" pos:end="2421:28"><expr pos:start="2421:25" pos:end="2421:27"><name pos:start="2421:25" pos:end="2421:25">i</name><operator pos:start="2421:26" pos:end="2421:26">=</operator><literal type="number" pos:start="2421:27" pos:end="2421:27">0</literal></expr>;</init><condition pos:start="2421:29" pos:end="2421:52"><expr pos:start="2421:29" pos:end="2421:51"><name pos:start="2421:29" pos:end="2421:29">i</name><operator pos:start="2421:30" pos:end="2421:30">&lt;</operator><name pos:start="2421:31" pos:end="2421:51"><name pos:start="2421:31" pos:end="2421:31">c</name><operator pos:start="2421:32" pos:end="2421:33">-&gt;</operator><name pos:start="2421:34" pos:end="2421:39">stream</name><operator pos:start="2421:40" pos:end="2421:41">-&gt;</operator><name pos:start="2421:42" pos:end="2421:51">nb_streams</name></name></expr>;</condition><incr pos:start="2421:53" pos:end="2421:55"><expr pos:start="2421:53" pos:end="2421:55"><name pos:start="2421:53" pos:end="2421:53">i</name><operator pos:start="2421:54" pos:end="2421:55">++</operator></expr></incr>)</control> <block pos:start="2421:58" pos:end="2432:21">{<block_content pos:start="2422:25" pos:end="2431:25">
                        <if_stmt pos:start="2422:25" pos:end="2431:25"><if pos:start="2422:25" pos:end="2431:25">if <condition pos:start="2422:28" pos:end="2422:75">(<expr pos:start="2422:29" pos:end="2422:74"><name pos:start="2422:29" pos:end="2422:54"><name pos:start="2422:29" pos:end="2422:29">c</name><operator pos:start="2422:30" pos:end="2422:31">-&gt;</operator><name pos:start="2422:32" pos:end="2422:37">stream</name><operator pos:start="2422:38" pos:end="2422:39">-&gt;</operator><name pos:start="2422:40" pos:end="2422:51">feed_streams</name><index pos:start="2422:52" pos:end="2422:54">[<expr pos:start="2422:53" pos:end="2422:53"><name pos:start="2422:53" pos:end="2422:53">i</name></expr>]</index></name> <operator pos:start="2422:56" pos:end="2422:57">==</operator> <name pos:start="2422:59" pos:end="2422:74"><name pos:start="2422:59" pos:end="2422:61">pkt</name><operator pos:start="2422:62" pos:end="2422:62">.</operator><name pos:start="2422:63" pos:end="2422:74">stream_index</name></name></expr>)</condition> <block pos:start="2422:77" pos:end="2431:25">{<block_content pos:start="2423:29" pos:end="2430:45">
                            <decl_stmt pos:start="2423:29" pos:end="2423:76"><decl pos:start="2423:29" pos:end="2423:75"><type pos:start="2423:29" pos:end="2423:38"><name pos:start="2423:29" pos:end="2423:36">AVStream</name> <modifier pos:start="2423:38" pos:end="2423:38">*</modifier></type><name pos:start="2423:39" pos:end="2423:40">st</name> <init pos:start="2423:42" pos:end="2423:75">= <expr pos:start="2423:44" pos:end="2423:75"><name pos:start="2423:44" pos:end="2423:75"><name pos:start="2423:44" pos:end="2423:44">c</name><operator pos:start="2423:45" pos:end="2423:46">-&gt;</operator><name pos:start="2423:47" pos:end="2423:52">fmt_in</name><operator pos:start="2423:53" pos:end="2423:54">-&gt;</operator><name pos:start="2423:55" pos:end="2423:61">streams</name><index pos:start="2423:62" pos:end="2423:75">[<expr pos:start="2423:63" pos:end="2423:74"><name pos:start="2423:63" pos:end="2423:74">source_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                            <expr_stmt pos:start="2424:29" pos:end="2424:49"><expr pos:start="2424:29" pos:end="2424:48"><name pos:start="2424:29" pos:end="2424:44"><name pos:start="2424:29" pos:end="2424:31">pkt</name><operator pos:start="2424:32" pos:end="2424:32">.</operator><name pos:start="2424:33" pos:end="2424:44">stream_index</name></name> <operator pos:start="2424:46" pos:end="2424:46">=</operator> <name pos:start="2424:48" pos:end="2424:48">i</name></expr>;</expr_stmt>
                            <if_stmt pos:start="2425:29" pos:end="2428:53"><if pos:start="2425:29" pos:end="2428:53">if <condition pos:start="2425:32" pos:end="2427:61">(<expr pos:start="2425:33" pos:end="2427:60"><name pos:start="2425:33" pos:end="2425:41"><name pos:start="2425:33" pos:end="2425:35">pkt</name><operator pos:start="2425:36" pos:end="2425:36">.</operator><name pos:start="2425:37" pos:end="2425:41">flags</name></name> <operator pos:start="2425:43" pos:end="2425:43">&amp;</operator> <name pos:start="2425:45" pos:end="2425:59">AV_PKT_FLAG_KEY</name> <operator pos:start="2425:61" pos:end="2425:62">&amp;&amp;</operator>
                                <operator pos:start="2426:33" pos:end="2426:33">(</operator><name pos:start="2426:34" pos:end="2426:57"><name pos:start="2426:34" pos:end="2426:35">st</name><operator pos:start="2426:36" pos:end="2426:37">-&gt;</operator><name pos:start="2426:38" pos:end="2426:45">codecpar</name><operator pos:start="2426:46" pos:end="2426:47">-&gt;</operator><name pos:start="2426:48" pos:end="2426:57">codec_type</name></name> <operator pos:start="2426:59" pos:end="2426:60">==</operator> <name pos:start="2426:62" pos:end="2426:79">AVMEDIA_TYPE_VIDEO</name> <operator pos:start="2426:81" pos:end="2426:82">||</operator>
                                 <name pos:start="2427:34" pos:end="2427:54"><name pos:start="2427:34" pos:end="2427:34">c</name><operator pos:start="2427:35" pos:end="2427:36">-&gt;</operator><name pos:start="2427:37" pos:end="2427:42">stream</name><operator pos:start="2427:43" pos:end="2427:44">-&gt;</operator><name pos:start="2427:45" pos:end="2427:54">nb_streams</name></name> <operator pos:start="2427:56" pos:end="2427:57">==</operator> <literal type="number" pos:start="2427:59" pos:end="2427:59">1</literal><operator pos:start="2427:60" pos:end="2427:60">)</operator></expr>)</condition><block type="pseudo" pos:start="2428:33" pos:end="2428:53"><block_content pos:start="2428:33" pos:end="2428:53">
                                <expr_stmt pos:start="2428:33" pos:end="2428:53"><expr pos:start="2428:33" pos:end="2428:52"><name pos:start="2428:33" pos:end="2428:48"><name pos:start="2428:33" pos:end="2428:33">c</name><operator pos:start="2428:34" pos:end="2428:35">-&gt;</operator><name pos:start="2428:36" pos:end="2428:48">got_key_frame</name></name> <operator pos:start="2428:50" pos:end="2428:50">=</operator> <literal type="number" pos:start="2428:52" pos:end="2428:52">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                            <if_stmt pos:start="2429:29" pos:end="2430:45"><if pos:start="2429:29" pos:end="2430:45">if <condition pos:start="2429:32" pos:end="2429:76">(<expr pos:start="2429:33" pos:end="2429:75"><operator pos:start="2429:33" pos:end="2429:33">!</operator><name pos:start="2429:34" pos:end="2429:55"><name pos:start="2429:34" pos:end="2429:34">c</name><operator pos:start="2429:35" pos:end="2429:36">-&gt;</operator><name pos:start="2429:37" pos:end="2429:42">stream</name><operator pos:start="2429:43" pos:end="2429:44">-&gt;</operator><name pos:start="2429:45" pos:end="2429:55">send_on_key</name></name> <operator pos:start="2429:57" pos:end="2429:58">||</operator> <name pos:start="2429:60" pos:end="2429:75"><name pos:start="2429:60" pos:end="2429:60">c</name><operator pos:start="2429:61" pos:end="2429:62">-&gt;</operator><name pos:start="2429:63" pos:end="2429:75">got_key_frame</name></name></expr>)</condition><block type="pseudo" pos:start="2430:33" pos:end="2430:45"><block_content pos:start="2430:33" pos:end="2430:45">
                                <goto pos:start="2430:33" pos:end="2430:45">goto <name pos:start="2430:38" pos:end="2430:44">send_it</name>;</goto></block_content></block></if></if_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if> <else pos:start="2433:19" pos:end="2504:17">else <block pos:start="2433:24" pos:end="2504:17">{<block_content pos:start="2434:21" pos:end="2503:21">
                    <decl_stmt pos:start="2434:21" pos:end="2434:40"><decl pos:start="2434:21" pos:end="2434:33"><type pos:start="2434:21" pos:end="2434:30"><name pos:start="2434:21" pos:end="2434:28">AVStream</name> <modifier pos:start="2434:30" pos:end="2434:30">*</modifier></type><name pos:start="2434:31" pos:end="2434:33">ist</name></decl>, <decl pos:start="2434:36" pos:end="2434:39"><type ref="prev" pos:start="2434:21" pos:end="2434:30"><modifier pos:start="2434:36" pos:end="2434:36">*</modifier></type><name pos:start="2434:37" pos:end="2434:39">ost</name></decl>;</decl_stmt>
                <label pos:start="2435:17" pos:end="2435:24"><name pos:start="2435:17" pos:end="2435:23">send_it</name>:</label>
                    <expr_stmt pos:start="2436:21" pos:end="2436:59"><expr pos:start="2436:21" pos:end="2436:58"><name pos:start="2436:21" pos:end="2436:23">ist</name> <operator pos:start="2436:25" pos:end="2436:25">=</operator> <name pos:start="2436:27" pos:end="2436:58"><name pos:start="2436:27" pos:end="2436:27">c</name><operator pos:start="2436:28" pos:end="2436:29">-&gt;</operator><name pos:start="2436:30" pos:end="2436:35">fmt_in</name><operator pos:start="2436:36" pos:end="2436:37">-&gt;</operator><name pos:start="2436:38" pos:end="2436:44">streams</name><index pos:start="2436:45" pos:end="2436:58">[<expr pos:start="2436:46" pos:end="2436:57"><name pos:start="2436:46" pos:end="2436:57">source_index</name></expr>]</index></name></expr>;</expr_stmt>
                    <comment type="block" pos:start="2437:21" pos:end="2439:58">/* specific handling for RTP: we use several
                     * output streams (one for each RTP connection).
                     * XXX: need more abstract handling */</comment>
                    <if_stmt pos:start="2440:21" pos:end="2459:21"><if pos:start="2440:21" pos:end="2456:21">if <condition pos:start="2440:24" pos:end="2440:41">(<expr pos:start="2440:25" pos:end="2440:40"><name pos:start="2440:25" pos:end="2440:40"><name pos:start="2440:25" pos:end="2440:25">c</name><operator pos:start="2440:26" pos:end="2440:27">-&gt;</operator><name pos:start="2440:28" pos:end="2440:40">is_packetized</name></name></expr>)</condition> <block pos:start="2440:43" pos:end="2456:21">{<block_content pos:start="2442:25" pos:end="2455:45">
                        <comment type="block" pos:start="2441:25" pos:end="2441:60">/* compute send time and duration */</comment>
                        <if_stmt pos:start="2442:25" pos:end="2445:25"><if pos:start="2442:25" pos:end="2445:25">if <condition pos:start="2442:28" pos:end="2442:54">(<expr pos:start="2442:29" pos:end="2442:53"><name pos:start="2442:29" pos:end="2442:35"><name pos:start="2442:29" pos:end="2442:31">pkt</name><operator pos:start="2442:32" pos:end="2442:32">.</operator><name pos:start="2442:33" pos:end="2442:35">dts</name></name> <operator pos:start="2442:37" pos:end="2442:38">!=</operator> <name pos:start="2442:40" pos:end="2442:53">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="2442:56" pos:end="2445:25">{<block_content pos:start="2443:29" pos:end="2444:55">
                            <expr_stmt pos:start="2443:29" pos:end="2443:95"><expr pos:start="2443:29" pos:end="2443:94"><name pos:start="2443:29" pos:end="2443:38"><name pos:start="2443:29" pos:end="2443:29">c</name><operator pos:start="2443:30" pos:end="2443:31">-&gt;</operator><name pos:start="2443:32" pos:end="2443:38">cur_pts</name></name> <operator pos:start="2443:40" pos:end="2443:40">=</operator> <call pos:start="2443:42" pos:end="2443:94"><name pos:start="2443:42" pos:end="2443:53">av_rescale_q</name><argument_list pos:start="2443:54" pos:end="2443:94">(<argument pos:start="2443:55" pos:end="2443:61"><expr pos:start="2443:55" pos:end="2443:61"><name pos:start="2443:55" pos:end="2443:61"><name pos:start="2443:55" pos:end="2443:57">pkt</name><operator pos:start="2443:58" pos:end="2443:58">.</operator><name pos:start="2443:59" pos:end="2443:61">dts</name></name></expr></argument>, <argument pos:start="2443:64" pos:end="2443:77"><expr pos:start="2443:64" pos:end="2443:77"><name pos:start="2443:64" pos:end="2443:77"><name pos:start="2443:64" pos:end="2443:66">ist</name><operator pos:start="2443:67" pos:end="2443:68">-&gt;</operator><name pos:start="2443:69" pos:end="2443:77">time_base</name></name></expr></argument>, <argument pos:start="2443:80" pos:end="2443:93"><expr pos:start="2443:80" pos:end="2443:93"><name pos:start="2443:80" pos:end="2443:93">AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt pos:start="2444:29" pos:end="2444:55"><expr pos:start="2444:29" pos:end="2444:54"><name pos:start="2444:29" pos:end="2444:38"><name pos:start="2444:29" pos:end="2444:29">c</name><operator pos:start="2444:30" pos:end="2444:31">-&gt;</operator><name pos:start="2444:32" pos:end="2444:38">cur_pts</name></name> <operator pos:start="2444:40" pos:end="2444:41">-=</operator> <name pos:start="2444:43" pos:end="2444:54"><name pos:start="2444:43" pos:end="2444:43">c</name><operator pos:start="2444:44" pos:end="2444:45">-&gt;</operator><name pos:start="2444:46" pos:end="2444:54">first_pts</name></name></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt pos:start="2446:25" pos:end="2446:107"><expr pos:start="2446:25" pos:end="2446:106"><name pos:start="2446:25" pos:end="2446:45"><name pos:start="2446:25" pos:end="2446:25">c</name><operator pos:start="2446:26" pos:end="2446:27">-&gt;</operator><name pos:start="2446:28" pos:end="2446:45">cur_frame_duration</name></name> <operator pos:start="2446:47" pos:end="2446:47">=</operator> <call pos:start="2446:49" pos:end="2446:106"><name pos:start="2446:49" pos:end="2446:60">av_rescale_q</name><argument_list pos:start="2446:61" pos:end="2446:106">(<argument pos:start="2446:62" pos:end="2446:73"><expr pos:start="2446:62" pos:end="2446:73"><name pos:start="2446:62" pos:end="2446:73"><name pos:start="2446:62" pos:end="2446:64">pkt</name><operator pos:start="2446:65" pos:end="2446:65">.</operator><name pos:start="2446:66" pos:end="2446:73">duration</name></name></expr></argument>, <argument pos:start="2446:76" pos:end="2446:89"><expr pos:start="2446:76" pos:end="2446:89"><name pos:start="2446:76" pos:end="2446:89"><name pos:start="2446:76" pos:end="2446:78">ist</name><operator pos:start="2446:79" pos:end="2446:80">-&gt;</operator><name pos:start="2446:81" pos:end="2446:89">time_base</name></name></expr></argument>, <argument pos:start="2446:92" pos:end="2446:105"><expr pos:start="2446:92" pos:end="2446:105"><name pos:start="2446:92" pos:end="2446:105">AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="block" pos:start="2447:25" pos:end="2447:46">/* find RTP context */</comment>
                        <expr_stmt pos:start="2448:25" pos:end="2448:66"><expr pos:start="2448:25" pos:end="2448:65"><name pos:start="2448:25" pos:end="2448:46"><name pos:start="2448:25" pos:end="2448:25">c</name><operator pos:start="2448:26" pos:end="2448:27">-&gt;</operator><name pos:start="2448:28" pos:end="2448:46">packet_stream_index</name></name> <operator pos:start="2448:48" pos:end="2448:48">=</operator> <name pos:start="2448:50" pos:end="2448:65"><name pos:start="2448:50" pos:end="2448:52">pkt</name><operator pos:start="2448:53" pos:end="2448:53">.</operator><name pos:start="2448:54" pos:end="2448:65">stream_index</name></name></expr>;</expr_stmt>
                        <expr_stmt pos:start="2449:25" pos:end="2449:65"><expr pos:start="2449:25" pos:end="2449:64"><name pos:start="2449:25" pos:end="2449:27">ctx</name> <operator pos:start="2449:29" pos:end="2449:29">=</operator> <name pos:start="2449:31" pos:end="2449:64"><name pos:start="2449:31" pos:end="2449:31">c</name><operator pos:start="2449:32" pos:end="2449:33">-&gt;</operator><name pos:start="2449:34" pos:end="2449:40">rtp_ctx</name><index pos:start="2449:41" pos:end="2449:64">[<expr pos:start="2449:42" pos:end="2449:63"><name pos:start="2449:42" pos:end="2449:63"><name pos:start="2449:42" pos:end="2449:42">c</name><operator pos:start="2449:43" pos:end="2449:44">-&gt;</operator><name pos:start="2449:45" pos:end="2449:63">packet_stream_index</name></name></expr>]</index></name></expr>;</expr_stmt>
                        <if_stmt pos:start="2450:25" pos:end="2453:25"><if pos:start="2450:25" pos:end="2453:25">if<condition pos:start="2450:27" pos:end="2450:32">(<expr pos:start="2450:28" pos:end="2450:31"><operator pos:start="2450:28" pos:end="2450:28">!</operator><name pos:start="2450:29" pos:end="2450:31">ctx</name></expr>)</condition> <block pos:start="2450:34" pos:end="2453:25">{<block_content pos:start="2451:29" pos:end="2452:34">
                            <expr_stmt pos:start="2451:29" pos:end="2451:50"><expr pos:start="2451:29" pos:end="2451:49"><call pos:start="2451:29" pos:end="2451:49"><name pos:start="2451:29" pos:end="2451:43">av_packet_unref</name><argument_list pos:start="2451:44" pos:end="2451:49">(<argument pos:start="2451:45" pos:end="2451:48"><expr pos:start="2451:45" pos:end="2451:48"><operator pos:start="2451:45" pos:end="2451:45">&amp;</operator><name pos:start="2451:46" pos:end="2451:48">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break pos:start="2452:29" pos:end="2452:34">break;</break>
                        </block_content>}</block></if></if_stmt>
                        <comment type="block" pos:start="2454:25" pos:end="2454:64">/* only one stream per RTP connection */</comment>
                        <expr_stmt pos:start="2455:25" pos:end="2455:45"><expr pos:start="2455:25" pos:end="2455:44"><name pos:start="2455:25" pos:end="2455:40"><name pos:start="2455:25" pos:end="2455:27">pkt</name><operator pos:start="2455:28" pos:end="2455:28">.</operator><name pos:start="2455:29" pos:end="2455:40">stream_index</name></name> <operator pos:start="2455:42" pos:end="2455:42">=</operator> <literal type="number" pos:start="2455:44" pos:end="2455:44">0</literal></expr>;</expr_stmt>
                    </block_content>}</block></if> <else pos:start="2456:23" pos:end="2459:21">else <block pos:start="2456:28" pos:end="2459:21">{<block_content pos:start="2457:25" pos:end="2457:42">
                        <expr_stmt pos:start="2457:25" pos:end="2457:42"><expr pos:start="2457:25" pos:end="2457:41"><name pos:start="2457:25" pos:end="2457:27">ctx</name> <operator pos:start="2457:29" pos:end="2457:29">=</operator> <name pos:start="2457:31" pos:end="2457:41"><name pos:start="2457:31" pos:end="2457:31">c</name><operator pos:start="2457:32" pos:end="2457:33">-&gt;</operator><name pos:start="2457:34" pos:end="2457:41">pfmt_ctx</name></name></expr>;</expr_stmt>
                        <comment type="block" pos:start="2458:25" pos:end="2458:40">/* Fudge here */</comment>
                    </block_content>}</block></else></if_stmt>

                    <if_stmt pos:start="2461:21" pos:end="2470:58"><if pos:start="2461:21" pos:end="2469:21">if <condition pos:start="2461:24" pos:end="2461:41">(<expr pos:start="2461:25" pos:end="2461:40"><name pos:start="2461:25" pos:end="2461:40"><name pos:start="2461:25" pos:end="2461:25">c</name><operator pos:start="2461:26" pos:end="2461:27">-&gt;</operator><name pos:start="2461:28" pos:end="2461:40">is_packetized</name></name></expr>)</condition> <block pos:start="2461:43" pos:end="2469:21">{<block_content pos:start="2462:25" pos:end="2468:72">
                        <decl_stmt pos:start="2462:25" pos:end="2462:44"><decl pos:start="2462:25" pos:end="2462:43"><type pos:start="2462:25" pos:end="2462:27"><name pos:start="2462:25" pos:end="2462:27">int</name></type> <name pos:start="2462:29" pos:end="2462:43">max_packet_size</name></decl>;</decl_stmt>
                        <if_stmt pos:start="2463:25" pos:end="2466:102"><if pos:start="2463:25" pos:end="2464:71">if <condition pos:start="2463:28" pos:end="2463:72">(<expr pos:start="2463:29" pos:end="2463:71"><name pos:start="2463:29" pos:end="2463:43"><name pos:start="2463:29" pos:end="2463:29">c</name><operator pos:start="2463:30" pos:end="2463:31">-&gt;</operator><name pos:start="2463:32" pos:end="2463:43">rtp_protocol</name></name> <operator pos:start="2463:45" pos:end="2463:46">==</operator> <name pos:start="2463:48" pos:end="2463:71">RTSP_LOWER_TRANSPORT_TCP</name></expr>)</condition><block type="pseudo" pos:start="2464:29" pos:end="2464:71"><block_content pos:start="2464:29" pos:end="2464:71">
                            <expr_stmt pos:start="2464:29" pos:end="2464:71"><expr pos:start="2464:29" pos:end="2464:70"><name pos:start="2464:29" pos:end="2464:43">max_packet_size</name> <operator pos:start="2464:45" pos:end="2464:45">=</operator> <name pos:start="2464:47" pos:end="2464:70">RTSP_TCP_MAX_PACKET_SIZE</name></expr>;</expr_stmt></block_content></block></if>
                        <else pos:start="2465:25" pos:end="2466:102">else<block type="pseudo" pos:start="2466:29" pos:end="2466:102"><block_content pos:start="2466:29" pos:end="2466:102">
                            <expr_stmt pos:start="2466:29" pos:end="2466:102"><expr pos:start="2466:29" pos:end="2466:101"><name pos:start="2466:29" pos:end="2466:43">max_packet_size</name> <operator pos:start="2466:45" pos:end="2466:45">=</operator> <name pos:start="2466:47" pos:end="2466:84"><name pos:start="2466:47" pos:end="2466:47">c</name><operator pos:start="2466:48" pos:end="2466:49">-&gt;</operator><name pos:start="2466:50" pos:end="2466:60">rtp_handles</name><index pos:start="2466:61" pos:end="2466:84">[<expr pos:start="2466:62" pos:end="2466:83"><name pos:start="2466:62" pos:end="2466:83"><name pos:start="2466:62" pos:end="2466:62">c</name><operator pos:start="2466:63" pos:end="2466:64">-&gt;</operator><name pos:start="2466:65" pos:end="2466:83">packet_stream_index</name></name></expr>]</index></name><operator pos:start="2466:85" pos:end="2466:86">-&gt;</operator><name pos:start="2466:87" pos:end="2466:101">max_packet_size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
                        <expr_stmt pos:start="2467:25" pos:end="2468:72"><expr pos:start="2467:25" pos:end="2468:71"><name pos:start="2467:25" pos:end="2467:27">ret</name> <operator pos:start="2467:29" pos:end="2467:29">=</operator> <call pos:start="2467:31" pos:end="2468:71"><name pos:start="2467:31" pos:end="2467:54">ffio_open_dyn_packet_buf</name><argument_list pos:start="2467:55" pos:end="2468:71">(<argument pos:start="2467:56" pos:end="2467:63"><expr pos:start="2467:56" pos:end="2467:63"><operator pos:start="2467:56" pos:end="2467:56">&amp;</operator><name pos:start="2467:57" pos:end="2467:63"><name pos:start="2467:57" pos:end="2467:59">ctx</name><operator pos:start="2467:60" pos:end="2467:61">-&gt;</operator><name pos:start="2467:62" pos:end="2467:63">pb</name></name></expr></argument>,
                                                       <argument pos:start="2468:56" pos:end="2468:70"><expr pos:start="2468:56" pos:end="2468:70"><name pos:start="2468:56" pos:end="2468:70">max_packet_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else pos:start="2469:23" pos:end="2470:58">else<block type="pseudo" pos:start="2470:25" pos:end="2470:58"><block_content pos:start="2470:25" pos:end="2470:58">
                        <expr_stmt pos:start="2470:25" pos:end="2470:58"><expr pos:start="2470:25" pos:end="2470:57"><name pos:start="2470:25" pos:end="2470:27">ret</name> <operator pos:start="2470:29" pos:end="2470:29">=</operator> <call pos:start="2470:31" pos:end="2470:57"><name pos:start="2470:31" pos:end="2470:47">avio_open_dyn_buf</name><argument_list pos:start="2470:48" pos:end="2470:57">(<argument pos:start="2470:49" pos:end="2470:56"><expr pos:start="2470:49" pos:end="2470:56"><operator pos:start="2470:49" pos:end="2470:49">&amp;</operator><name pos:start="2470:50" pos:end="2470:56"><name pos:start="2470:50" pos:end="2470:52">ctx</name><operator pos:start="2470:53" pos:end="2470:54">-&gt;</operator><name pos:start="2470:55" pos:end="2470:56">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <if_stmt pos:start="2472:21" pos:end="2475:21"><if pos:start="2472:21" pos:end="2475:21">if <condition pos:start="2472:24" pos:end="2472:32">(<expr pos:start="2472:25" pos:end="2472:31"><name pos:start="2472:25" pos:end="2472:27">ret</name> <operator pos:start="2472:29" pos:end="2472:29">&lt;</operator> <literal type="number" pos:start="2472:31" pos:end="2472:31">0</literal></expr>)</condition> <block pos:start="2472:34" pos:end="2475:21">{<block_content pos:start="2474:25" pos:end="2474:34">
                        <comment type="block" pos:start="2473:25" pos:end="2473:49">/* XXX: potential leak */</comment>
                        <return pos:start="2474:25" pos:end="2474:34">return <expr pos:start="2474:32" pos:end="2474:33"><operator pos:start="2474:32" pos:end="2474:32">-</operator><literal type="number" pos:start="2474:33" pos:end="2474:33">1</literal></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt pos:start="2476:21" pos:end="2476:57"><expr pos:start="2476:21" pos:end="2476:56"><name pos:start="2476:21" pos:end="2476:23">ost</name> <operator pos:start="2476:25" pos:end="2476:25">=</operator> <name pos:start="2476:27" pos:end="2476:56"><name pos:start="2476:27" pos:end="2476:29">ctx</name><operator pos:start="2476:30" pos:end="2476:31">-&gt;</operator><name pos:start="2476:32" pos:end="2476:38">streams</name><index pos:start="2476:39" pos:end="2476:56">[<expr pos:start="2476:40" pos:end="2476:55"><name pos:start="2476:40" pos:end="2476:55"><name pos:start="2476:40" pos:end="2476:42">pkt</name><operator pos:start="2476:43" pos:end="2476:43">.</operator><name pos:start="2476:44" pos:end="2476:55">stream_index</name></name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="2478:21" pos:end="2478:42"><expr pos:start="2478:21" pos:end="2478:41"><name pos:start="2478:21" pos:end="2478:37"><name pos:start="2478:21" pos:end="2478:23">ctx</name><operator pos:start="2478:24" pos:end="2478:25">-&gt;</operator><name pos:start="2478:26" pos:end="2478:27">pb</name><operator pos:start="2478:28" pos:end="2478:29">-&gt;</operator><name pos:start="2478:30" pos:end="2478:37">seekable</name></name> <operator pos:start="2478:39" pos:end="2478:39">=</operator> <literal type="number" pos:start="2478:41" pos:end="2478:41">0</literal></expr>;</expr_stmt>
                    <if_stmt pos:start="2479:21" pos:end="2481:63"><if pos:start="2479:21" pos:end="2481:63">if <condition pos:start="2479:24" pos:end="2479:50">(<expr pos:start="2479:25" pos:end="2479:49"><name pos:start="2479:25" pos:end="2479:31"><name pos:start="2479:25" pos:end="2479:27">pkt</name><operator pos:start="2479:28" pos:end="2479:28">.</operator><name pos:start="2479:29" pos:end="2479:31">dts</name></name> <operator pos:start="2479:33" pos:end="2479:34">!=</operator> <name pos:start="2479:36" pos:end="2479:49">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="2480:25" pos:end="2481:63"><block_content pos:start="2480:25" pos:end="2481:63">
                        <expr_stmt pos:start="2480:25" pos:end="2481:63"><expr pos:start="2480:25" pos:end="2481:62"><name pos:start="2480:25" pos:end="2480:31"><name pos:start="2480:25" pos:end="2480:27">pkt</name><operator pos:start="2480:28" pos:end="2480:28">.</operator><name pos:start="2480:29" pos:end="2480:31">dts</name></name> <operator pos:start="2480:33" pos:end="2480:33">=</operator> <call pos:start="2480:35" pos:end="2481:62"><name pos:start="2480:35" pos:end="2480:46">av_rescale_q</name><argument_list pos:start="2480:47" pos:end="2481:62">(<argument pos:start="2480:48" pos:end="2480:54"><expr pos:start="2480:48" pos:end="2480:54"><name pos:start="2480:48" pos:end="2480:54"><name pos:start="2480:48" pos:end="2480:50">pkt</name><operator pos:start="2480:51" pos:end="2480:51">.</operator><name pos:start="2480:52" pos:end="2480:54">dts</name></name></expr></argument>, <argument pos:start="2480:57" pos:end="2480:70"><expr pos:start="2480:57" pos:end="2480:70"><name pos:start="2480:57" pos:end="2480:70"><name pos:start="2480:57" pos:end="2480:59">ist</name><operator pos:start="2480:60" pos:end="2480:61">-&gt;</operator><name pos:start="2480:62" pos:end="2480:70">time_base</name></name></expr></argument>,
                                               <argument pos:start="2481:48" pos:end="2481:61"><expr pos:start="2481:48" pos:end="2481:61"><name pos:start="2481:48" pos:end="2481:61"><name pos:start="2481:48" pos:end="2481:50">ost</name><operator pos:start="2481:51" pos:end="2481:52">-&gt;</operator><name pos:start="2481:53" pos:end="2481:61">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <if_stmt pos:start="2482:21" pos:end="2484:63"><if pos:start="2482:21" pos:end="2484:63">if <condition pos:start="2482:24" pos:end="2482:50">(<expr pos:start="2482:25" pos:end="2482:49"><name pos:start="2482:25" pos:end="2482:31"><name pos:start="2482:25" pos:end="2482:27">pkt</name><operator pos:start="2482:28" pos:end="2482:28">.</operator><name pos:start="2482:29" pos:end="2482:31">pts</name></name> <operator pos:start="2482:33" pos:end="2482:34">!=</operator> <name pos:start="2482:36" pos:end="2482:49">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="2483:25" pos:end="2484:63"><block_content pos:start="2483:25" pos:end="2484:63">
                        <expr_stmt pos:start="2483:25" pos:end="2484:63"><expr pos:start="2483:25" pos:end="2484:62"><name pos:start="2483:25" pos:end="2483:31"><name pos:start="2483:25" pos:end="2483:27">pkt</name><operator pos:start="2483:28" pos:end="2483:28">.</operator><name pos:start="2483:29" pos:end="2483:31">pts</name></name> <operator pos:start="2483:33" pos:end="2483:33">=</operator> <call pos:start="2483:35" pos:end="2484:62"><name pos:start="2483:35" pos:end="2483:46">av_rescale_q</name><argument_list pos:start="2483:47" pos:end="2484:62">(<argument pos:start="2483:48" pos:end="2483:54"><expr pos:start="2483:48" pos:end="2483:54"><name pos:start="2483:48" pos:end="2483:54"><name pos:start="2483:48" pos:end="2483:50">pkt</name><operator pos:start="2483:51" pos:end="2483:51">.</operator><name pos:start="2483:52" pos:end="2483:54">pts</name></name></expr></argument>, <argument pos:start="2483:57" pos:end="2483:70"><expr pos:start="2483:57" pos:end="2483:70"><name pos:start="2483:57" pos:end="2483:70"><name pos:start="2483:57" pos:end="2483:59">ist</name><operator pos:start="2483:60" pos:end="2483:61">-&gt;</operator><name pos:start="2483:62" pos:end="2483:70">time_base</name></name></expr></argument>,
                                               <argument pos:start="2484:48" pos:end="2484:61"><expr pos:start="2484:48" pos:end="2484:61"><name pos:start="2484:48" pos:end="2484:61"><name pos:start="2484:48" pos:end="2484:50">ost</name><operator pos:start="2484:51" pos:end="2484:52">-&gt;</operator><name pos:start="2484:53" pos:end="2484:61">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt pos:start="2485:21" pos:end="2486:64"><expr pos:start="2485:21" pos:end="2486:63"><name pos:start="2485:21" pos:end="2485:32"><name pos:start="2485:21" pos:end="2485:23">pkt</name><operator pos:start="2485:24" pos:end="2485:24">.</operator><name pos:start="2485:25" pos:end="2485:32">duration</name></name> <operator pos:start="2485:34" pos:end="2485:34">=</operator> <call pos:start="2485:36" pos:end="2486:63"><name pos:start="2485:36" pos:end="2485:47">av_rescale_q</name><argument_list pos:start="2485:48" pos:end="2486:63">(<argument pos:start="2485:49" pos:end="2485:60"><expr pos:start="2485:49" pos:end="2485:60"><name pos:start="2485:49" pos:end="2485:60"><name pos:start="2485:49" pos:end="2485:51">pkt</name><operator pos:start="2485:52" pos:end="2485:52">.</operator><name pos:start="2485:53" pos:end="2485:60">duration</name></name></expr></argument>, <argument pos:start="2485:63" pos:end="2485:76"><expr pos:start="2485:63" pos:end="2485:76"><name pos:start="2485:63" pos:end="2485:76"><name pos:start="2485:63" pos:end="2485:65">ist</name><operator pos:start="2485:66" pos:end="2485:67">-&gt;</operator><name pos:start="2485:68" pos:end="2485:76">time_base</name></name></expr></argument>,
                                                <argument pos:start="2486:49" pos:end="2486:62"><expr pos:start="2486:49" pos:end="2486:62"><name pos:start="2486:49" pos:end="2486:62"><name pos:start="2486:49" pos:end="2486:51">ost</name><operator pos:start="2486:52" pos:end="2486:53">-&gt;</operator><name pos:start="2486:54" pos:end="2486:62">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="2487:21" pos:end="2491:21"><if pos:start="2487:21" pos:end="2491:21">if <condition pos:start="2487:24" pos:end="2487:62">(<expr pos:start="2487:25" pos:end="2487:61"><operator pos:start="2487:25" pos:end="2487:25">(</operator><name pos:start="2487:26" pos:end="2487:28">ret</name> <operator pos:start="2487:30" pos:end="2487:30">=</operator> <call pos:start="2487:32" pos:end="2487:56"><name pos:start="2487:32" pos:end="2487:45">av_write_frame</name><argument_list pos:start="2487:46" pos:end="2487:56">(<argument pos:start="2487:47" pos:end="2487:49"><expr pos:start="2487:47" pos:end="2487:49"><name pos:start="2487:47" pos:end="2487:49">ctx</name></expr></argument>, <argument pos:start="2487:52" pos:end="2487:55"><expr pos:start="2487:52" pos:end="2487:55"><operator pos:start="2487:52" pos:end="2487:52">&amp;</operator><name pos:start="2487:53" pos:end="2487:55">pkt</name></expr></argument>)</argument_list></call><operator pos:start="2487:57" pos:end="2487:57">)</operator> <operator pos:start="2487:59" pos:end="2487:59">&lt;</operator> <literal type="number" pos:start="2487:61" pos:end="2487:61">0</literal></expr>)</condition> <block pos:start="2487:64" pos:end="2491:21">{<block_content pos:start="2488:25" pos:end="2490:63">
                        <expr_stmt pos:start="2488:25" pos:end="2489:71"><expr pos:start="2488:25" pos:end="2489:70"><call pos:start="2488:25" pos:end="2489:70"><name pos:start="2488:25" pos:end="2488:32">http_log</name><argument_list pos:start="2488:33" pos:end="2489:70">(<argument pos:start="2488:34" pos:end="2488:86"><expr pos:start="2488:34" pos:end="2488:86"><literal type="string" pos:start="2488:34" pos:end="2488:86">"Error writing frame to output for stream '%s': %s\n"</literal></expr></argument>,
                                 <argument pos:start="2489:34" pos:end="2489:52"><expr pos:start="2489:34" pos:end="2489:52"><name pos:start="2489:34" pos:end="2489:52"><name pos:start="2489:34" pos:end="2489:34">c</name><operator pos:start="2489:35" pos:end="2489:36">-&gt;</operator><name pos:start="2489:37" pos:end="2489:42">stream</name><operator pos:start="2489:43" pos:end="2489:44">-&gt;</operator><name pos:start="2489:45" pos:end="2489:52">filename</name></name></expr></argument>, <argument pos:start="2489:55" pos:end="2489:69"><expr pos:start="2489:55" pos:end="2489:69"><call pos:start="2489:55" pos:end="2489:69"><name pos:start="2489:55" pos:end="2489:64">av_err2str</name><argument_list pos:start="2489:65" pos:end="2489:69">(<argument pos:start="2489:66" pos:end="2489:68"><expr pos:start="2489:66" pos:end="2489:68"><name pos:start="2489:66" pos:end="2489:68">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="2490:25" pos:end="2490:63"><expr pos:start="2490:25" pos:end="2490:62"><name pos:start="2490:25" pos:end="2490:32"><name pos:start="2490:25" pos:end="2490:25">c</name><operator pos:start="2490:26" pos:end="2490:27">-&gt;</operator><name pos:start="2490:28" pos:end="2490:32">state</name></name> <operator pos:start="2490:34" pos:end="2490:34">=</operator> <name pos:start="2490:36" pos:end="2490:62">HTTPSTATE_SEND_DATA_TRAILER</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="2493:21" pos:end="2493:44"><expr pos:start="2493:21" pos:end="2493:43"><call pos:start="2493:21" pos:end="2493:43"><name pos:start="2493:21" pos:end="2493:28">av_freep</name><argument_list pos:start="2493:29" pos:end="2493:43">(<argument pos:start="2493:30" pos:end="2493:42"><expr pos:start="2493:30" pos:end="2493:42"><operator pos:start="2493:30" pos:end="2493:30">&amp;</operator><name pos:start="2493:31" pos:end="2493:42"><name pos:start="2493:31" pos:end="2493:31">c</name><operator pos:start="2493:32" pos:end="2493:33">-&gt;</operator><name pos:start="2493:34" pos:end="2493:42">pb_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2494:21" pos:end="2494:69"><expr pos:start="2494:21" pos:end="2494:68"><name pos:start="2494:21" pos:end="2494:23">len</name> <operator pos:start="2494:25" pos:end="2494:25">=</operator> <call pos:start="2494:27" pos:end="2494:68"><name pos:start="2494:27" pos:end="2494:44">avio_close_dyn_buf</name><argument_list pos:start="2494:45" pos:end="2494:68">(<argument pos:start="2494:46" pos:end="2494:52"><expr pos:start="2494:46" pos:end="2494:52"><name pos:start="2494:46" pos:end="2494:52"><name pos:start="2494:46" pos:end="2494:48">ctx</name><operator pos:start="2494:49" pos:end="2494:50">-&gt;</operator><name pos:start="2494:51" pos:end="2494:52">pb</name></name></expr></argument>, <argument pos:start="2494:55" pos:end="2494:67"><expr pos:start="2494:55" pos:end="2494:67"><operator pos:start="2494:55" pos:end="2494:55">&amp;</operator><name pos:start="2494:56" pos:end="2494:67"><name pos:start="2494:56" pos:end="2494:56">c</name><operator pos:start="2494:57" pos:end="2494:58">-&gt;</operator><name pos:start="2494:59" pos:end="2494:67">pb_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2495:21" pos:end="2495:35"><expr pos:start="2495:21" pos:end="2495:34"><name pos:start="2495:21" pos:end="2495:27"><name pos:start="2495:21" pos:end="2495:23">ctx</name><operator pos:start="2495:24" pos:end="2495:25">-&gt;</operator><name pos:start="2495:26" pos:end="2495:27">pb</name></name> <operator pos:start="2495:29" pos:end="2495:29">=</operator> <name pos:start="2495:31" pos:end="2495:34">NULL</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="2496:21" pos:end="2496:45"><expr pos:start="2496:21" pos:end="2496:44"><name pos:start="2496:21" pos:end="2496:38"><name pos:start="2496:21" pos:end="2496:21">c</name><operator pos:start="2496:22" pos:end="2496:23">-&gt;</operator><name pos:start="2496:24" pos:end="2496:38">cur_frame_bytes</name></name> <operator pos:start="2496:40" pos:end="2496:40">=</operator> <name pos:start="2496:42" pos:end="2496:44">len</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="2497:21" pos:end="2497:49"><expr pos:start="2497:21" pos:end="2497:48"><name pos:start="2497:21" pos:end="2497:33"><name pos:start="2497:21" pos:end="2497:21">c</name><operator pos:start="2497:22" pos:end="2497:23">-&gt;</operator><name pos:start="2497:24" pos:end="2497:33">buffer_ptr</name></name> <operator pos:start="2497:35" pos:end="2497:35">=</operator> <name pos:start="2497:37" pos:end="2497:48"><name pos:start="2497:37" pos:end="2497:37">c</name><operator pos:start="2497:38" pos:end="2497:39">-&gt;</operator><name pos:start="2497:40" pos:end="2497:48">pb_buffer</name></name></expr>;</expr_stmt>
                    <expr_stmt pos:start="2498:21" pos:end="2498:55"><expr pos:start="2498:21" pos:end="2498:54"><name pos:start="2498:21" pos:end="2498:33"><name pos:start="2498:21" pos:end="2498:21">c</name><operator pos:start="2498:22" pos:end="2498:23">-&gt;</operator><name pos:start="2498:24" pos:end="2498:33">buffer_end</name></name> <operator pos:start="2498:35" pos:end="2498:35">=</operator> <name pos:start="2498:37" pos:end="2498:48"><name pos:start="2498:37" pos:end="2498:37">c</name><operator pos:start="2498:38" pos:end="2498:39">-&gt;</operator><name pos:start="2498:40" pos:end="2498:48">pb_buffer</name></name> <operator pos:start="2498:50" pos:end="2498:50">+</operator> <name pos:start="2498:52" pos:end="2498:54">len</name></expr>;</expr_stmt>

                    <if_stmt pos:start="2500:21" pos:end="2503:21"><if pos:start="2500:21" pos:end="2503:21">if <condition pos:start="2500:24" pos:end="2500:33">(<expr pos:start="2500:25" pos:end="2500:32"><name pos:start="2500:25" pos:end="2500:27">len</name> <operator pos:start="2500:29" pos:end="2500:30">==</operator> <literal type="number" pos:start="2500:32" pos:end="2500:32">0</literal></expr>)</condition> <block pos:start="2500:35" pos:end="2503:21">{<block_content pos:start="2501:25" pos:end="2502:34">
                        <expr_stmt pos:start="2501:25" pos:end="2501:46"><expr pos:start="2501:25" pos:end="2501:45"><call pos:start="2501:25" pos:end="2501:45"><name pos:start="2501:25" pos:end="2501:39">av_packet_unref</name><argument_list pos:start="2501:40" pos:end="2501:45">(<argument pos:start="2501:41" pos:end="2501:44"><expr pos:start="2501:41" pos:end="2501:44"><operator pos:start="2501:41" pos:end="2501:41">&amp;</operator><name pos:start="2501:42" pos:end="2501:44">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <goto pos:start="2502:25" pos:end="2502:34">goto <name pos:start="2502:30" pos:end="2502:33">redo</name>;</goto>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt pos:start="2505:17" pos:end="2505:38"><expr pos:start="2505:17" pos:end="2505:37"><call pos:start="2505:17" pos:end="2505:37"><name pos:start="2505:17" pos:end="2505:31">av_packet_unref</name><argument_list pos:start="2505:32" pos:end="2505:37">(<argument pos:start="2505:33" pos:end="2505:36"><expr pos:start="2505:33" pos:end="2505:36"><operator pos:start="2505:33" pos:end="2505:33">&amp;</operator><name pos:start="2505:34" pos:end="2505:36">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <break pos:start="2508:9" pos:end="2508:14">break;</break>
    <default pos:start="2509:5" pos:end="2509:12">default:</default>
    <case pos:start="2510:5" pos:end="2510:37">case <expr pos:start="2510:10" pos:end="2510:36"><name pos:start="2510:10" pos:end="2510:36">HTTPSTATE_SEND_DATA_TRAILER</name></expr>:</case>
        <comment type="block" pos:start="2511:9" pos:end="2511:32">/* last packet test ? */</comment>
        <if_stmt pos:start="2512:9" pos:end="2513:22"><if pos:start="2512:9" pos:end="2513:22">if <condition pos:start="2512:12" pos:end="2512:52">(<expr pos:start="2512:13" pos:end="2512:51"><name pos:start="2512:13" pos:end="2512:31"><name pos:start="2512:13" pos:end="2512:13">c</name><operator pos:start="2512:14" pos:end="2512:15">-&gt;</operator><name pos:start="2512:16" pos:end="2512:31">last_packet_sent</name></name> <operator pos:start="2512:33" pos:end="2512:34">||</operator> <name pos:start="2512:36" pos:end="2512:51"><name pos:start="2512:36" pos:end="2512:36">c</name><operator pos:start="2512:37" pos:end="2512:38">-&gt;</operator><name pos:start="2512:39" pos:end="2512:51">is_packetized</name></name></expr>)</condition><block type="pseudo" pos:start="2513:13" pos:end="2513:22"><block_content pos:start="2513:13" pos:end="2513:22">
            <return pos:start="2513:13" pos:end="2513:22">return <expr pos:start="2513:20" pos:end="2513:21"><operator pos:start="2513:20" pos:end="2513:20">-</operator><literal type="number" pos:start="2513:21" pos:end="2513:21">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2514:9" pos:end="2514:26"><expr pos:start="2514:9" pos:end="2514:25"><name pos:start="2514:9" pos:end="2514:11">ctx</name> <operator pos:start="2514:13" pos:end="2514:13">=</operator> <name pos:start="2514:15" pos:end="2514:25"><name pos:start="2514:15" pos:end="2514:15">c</name><operator pos:start="2514:16" pos:end="2514:17">-&gt;</operator><name pos:start="2514:18" pos:end="2514:25">pfmt_ctx</name></name></expr>;</expr_stmt>
        <comment type="block" pos:start="2515:9" pos:end="2515:28">/* prepare header */</comment>
        <if_stmt pos:start="2516:9" pos:end="2519:9"><if pos:start="2516:9" pos:end="2519:9">if <condition pos:start="2516:12" pos:end="2516:44">(<expr pos:start="2516:13" pos:end="2516:43"><call pos:start="2516:13" pos:end="2516:39"><name pos:start="2516:13" pos:end="2516:29">avio_open_dyn_buf</name><argument_list pos:start="2516:30" pos:end="2516:39">(<argument pos:start="2516:31" pos:end="2516:38"><expr pos:start="2516:31" pos:end="2516:38"><operator pos:start="2516:31" pos:end="2516:31">&amp;</operator><name pos:start="2516:32" pos:end="2516:38"><name pos:start="2516:32" pos:end="2516:34">ctx</name><operator pos:start="2516:35" pos:end="2516:36">-&gt;</operator><name pos:start="2516:37" pos:end="2516:38">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="2516:41" pos:end="2516:41">&lt;</operator> <literal type="number" pos:start="2516:43" pos:end="2516:43">0</literal></expr>)</condition> <block pos:start="2516:46" pos:end="2519:9">{<block_content pos:start="2518:13" pos:end="2518:22">
            <comment type="block" pos:start="2517:13" pos:end="2517:37">/* XXX: potential leak */</comment>
            <return pos:start="2518:13" pos:end="2518:22">return <expr pos:start="2518:20" pos:end="2518:21"><operator pos:start="2518:20" pos:end="2518:20">-</operator><literal type="number" pos:start="2518:21" pos:end="2518:21">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="2520:9" pos:end="2520:38"><expr pos:start="2520:9" pos:end="2520:37"><name pos:start="2520:9" pos:end="2520:33"><name pos:start="2520:9" pos:end="2520:9">c</name><operator pos:start="2520:10" pos:end="2520:11">-&gt;</operator><name pos:start="2520:12" pos:end="2520:19">pfmt_ctx</name><operator pos:start="2520:20" pos:end="2520:21">-&gt;</operator><name pos:start="2520:22" pos:end="2520:23">pb</name><operator pos:start="2520:24" pos:end="2520:25">-&gt;</operator><name pos:start="2520:26" pos:end="2520:33">seekable</name></name> <operator pos:start="2520:35" pos:end="2520:35">=</operator> <literal type="number" pos:start="2520:37" pos:end="2520:37">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="2521:9" pos:end="2521:30"><expr pos:start="2521:9" pos:end="2521:29"><call pos:start="2521:9" pos:end="2521:29"><name pos:start="2521:9" pos:end="2521:24">av_write_trailer</name><argument_list pos:start="2521:25" pos:end="2521:29">(<argument pos:start="2521:26" pos:end="2521:28"><expr pos:start="2521:26" pos:end="2521:28"><name pos:start="2521:26" pos:end="2521:28">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2522:9" pos:end="2522:57"><expr pos:start="2522:9" pos:end="2522:56"><name pos:start="2522:9" pos:end="2522:11">len</name> <operator pos:start="2522:13" pos:end="2522:13">=</operator> <call pos:start="2522:15" pos:end="2522:56"><name pos:start="2522:15" pos:end="2522:32">avio_close_dyn_buf</name><argument_list pos:start="2522:33" pos:end="2522:56">(<argument pos:start="2522:34" pos:end="2522:40"><expr pos:start="2522:34" pos:end="2522:40"><name pos:start="2522:34" pos:end="2522:40"><name pos:start="2522:34" pos:end="2522:36">ctx</name><operator pos:start="2522:37" pos:end="2522:38">-&gt;</operator><name pos:start="2522:39" pos:end="2522:40">pb</name></name></expr></argument>, <argument pos:start="2522:43" pos:end="2522:55"><expr pos:start="2522:43" pos:end="2522:55"><operator pos:start="2522:43" pos:end="2522:43">&amp;</operator><name pos:start="2522:44" pos:end="2522:55"><name pos:start="2522:44" pos:end="2522:44">c</name><operator pos:start="2522:45" pos:end="2522:46">-&gt;</operator><name pos:start="2522:47" pos:end="2522:55">pb_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2523:9" pos:end="2523:37"><expr pos:start="2523:9" pos:end="2523:36"><name pos:start="2523:9" pos:end="2523:21"><name pos:start="2523:9" pos:end="2523:9">c</name><operator pos:start="2523:10" pos:end="2523:11">-&gt;</operator><name pos:start="2523:12" pos:end="2523:21">buffer_ptr</name></name> <operator pos:start="2523:23" pos:end="2523:23">=</operator> <name pos:start="2523:25" pos:end="2523:36"><name pos:start="2523:25" pos:end="2523:25">c</name><operator pos:start="2523:26" pos:end="2523:27">-&gt;</operator><name pos:start="2523:28" pos:end="2523:36">pb_buffer</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="2524:9" pos:end="2524:43"><expr pos:start="2524:9" pos:end="2524:42"><name pos:start="2524:9" pos:end="2524:21"><name pos:start="2524:9" pos:end="2524:9">c</name><operator pos:start="2524:10" pos:end="2524:11">-&gt;</operator><name pos:start="2524:12" pos:end="2524:21">buffer_end</name></name> <operator pos:start="2524:23" pos:end="2524:23">=</operator> <name pos:start="2524:25" pos:end="2524:36"><name pos:start="2524:25" pos:end="2524:25">c</name><operator pos:start="2524:26" pos:end="2524:27">-&gt;</operator><name pos:start="2524:28" pos:end="2524:36">pb_buffer</name></name> <operator pos:start="2524:38" pos:end="2524:38">+</operator> <name pos:start="2524:40" pos:end="2524:42">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="2526:9" pos:end="2526:32"><expr pos:start="2526:9" pos:end="2526:31"><name pos:start="2526:9" pos:end="2526:27"><name pos:start="2526:9" pos:end="2526:9">c</name><operator pos:start="2526:10" pos:end="2526:11">-&gt;</operator><name pos:start="2526:12" pos:end="2526:27">last_packet_sent</name></name> <operator pos:start="2526:29" pos:end="2526:29">=</operator> <literal type="number" pos:start="2526:31" pos:end="2526:31">1</literal></expr>;</expr_stmt>
        <break pos:start="2527:9" pos:end="2527:14">break;</break>
    </block_content>}</block></switch>
    <return pos:start="2529:5" pos:end="2529:13">return <expr pos:start="2529:12" pos:end="2529:12"><literal type="number" pos:start="2529:12" pos:end="2529:12">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="2532:1" pos:end="2532:48">/* should convert the format at the same time */</comment>
<comment type="block" pos:start="2533:1" pos:end="2535:3">/* send data starting at c-&gt;buffer_ptr to the output connection
 * (either UDP or TCP)
 */</comment>
<function pos:start="2536:1" pos:end="2655:1"><type pos:start="2536:1" pos:end="2536:10"><specifier pos:start="2536:1" pos:end="2536:6">static</specifier> <name pos:start="2536:8" pos:end="2536:10">int</name></type> <name pos:start="2536:12" pos:end="2536:25">http_send_data</name><parameter_list pos:start="2536:26" pos:end="2536:41">(<parameter pos:start="2536:27" pos:end="2536:40"><decl pos:start="2536:27" pos:end="2536:40"><type pos:start="2536:27" pos:end="2536:39"><name pos:start="2536:27" pos:end="2536:37">HTTPContext</name> <modifier pos:start="2536:39" pos:end="2536:39">*</modifier></type><name pos:start="2536:40" pos:end="2536:40">c</name></decl></parameter>)</parameter_list>
<block pos:start="2537:1" pos:end="2655:1">{<block_content pos:start="2538:5" pos:end="2654:13">
    <decl_stmt pos:start="2538:5" pos:end="2538:17"><decl pos:start="2538:5" pos:end="2538:11"><type pos:start="2538:5" pos:end="2538:7"><name pos:start="2538:5" pos:end="2538:7">int</name></type> <name pos:start="2538:9" pos:end="2538:11">len</name></decl>, <decl pos:start="2538:14" pos:end="2538:16"><type ref="prev" pos:start="2538:5" pos:end="2538:7"/><name pos:start="2538:14" pos:end="2538:16">ret</name></decl>;</decl_stmt>

    <for pos:start="2540:5" pos:end="2653:5">for<control pos:start="2540:8" pos:end="2540:11">(<init pos:start="2540:9" pos:end="2540:9">;</init><condition pos:start="2540:10" pos:end="2540:10">;</condition><incr/>)</control> <block pos:start="2540:13" pos:end="2653:5">{<block_content pos:start="2541:9" pos:end="2652:9">
        <if_stmt pos:start="2541:9" pos:end="2652:9"><if pos:start="2541:9" pos:end="2548:9">if <condition pos:start="2541:12" pos:end="2541:43">(<expr pos:start="2541:13" pos:end="2541:42"><name pos:start="2541:13" pos:end="2541:25"><name pos:start="2541:13" pos:end="2541:13">c</name><operator pos:start="2541:14" pos:end="2541:15">-&gt;</operator><name pos:start="2541:16" pos:end="2541:25">buffer_ptr</name></name> <operator pos:start="2541:27" pos:end="2541:28">&gt;=</operator> <name pos:start="2541:30" pos:end="2541:42"><name pos:start="2541:30" pos:end="2541:30">c</name><operator pos:start="2541:31" pos:end="2541:32">-&gt;</operator><name pos:start="2541:33" pos:end="2541:42">buffer_end</name></name></expr>)</condition> <block pos:start="2541:45" pos:end="2548:9">{<block_content pos:start="2542:13" pos:end="2547:22">
            <expr_stmt pos:start="2542:13" pos:end="2542:39"><expr pos:start="2542:13" pos:end="2542:38"><name pos:start="2542:13" pos:end="2542:15">ret</name> <operator pos:start="2542:17" pos:end="2542:17">=</operator> <call pos:start="2542:19" pos:end="2542:38"><name pos:start="2542:19" pos:end="2542:35">http_prepare_data</name><argument_list pos:start="2542:36" pos:end="2542:38">(<argument pos:start="2542:37" pos:end="2542:37"><expr pos:start="2542:37" pos:end="2542:37"><name pos:start="2542:37" pos:end="2542:37">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2543:13" pos:end="2547:22"><if pos:start="2543:13" pos:end="2544:26">if <condition pos:start="2543:16" pos:end="2543:24">(<expr pos:start="2543:17" pos:end="2543:23"><name pos:start="2543:17" pos:end="2543:19">ret</name> <operator pos:start="2543:21" pos:end="2543:21">&lt;</operator> <literal type="number" pos:start="2543:23" pos:end="2543:23">0</literal></expr>)</condition><block type="pseudo" pos:start="2544:17" pos:end="2544:26"><block_content pos:start="2544:17" pos:end="2544:26">
                <return pos:start="2544:17" pos:end="2544:26">return <expr pos:start="2544:24" pos:end="2544:25"><operator pos:start="2544:24" pos:end="2544:24">-</operator><literal type="number" pos:start="2544:25" pos:end="2544:25">1</literal></expr>;</return></block_content></block></if>
            <if type="elseif" pos:start="2545:13" pos:end="2547:22">else if <condition pos:start="2545:21" pos:end="2545:25">(<expr pos:start="2545:22" pos:end="2545:24"><name pos:start="2545:22" pos:end="2545:24">ret</name></expr>)</condition><block type="pseudo" pos:start="2547:17" pos:end="2547:22"><block_content pos:start="2547:17" pos:end="2547:22">
                <comment type="block" pos:start="2546:17" pos:end="2546:44">/* state change requested */</comment>
                <break pos:start="2547:17" pos:end="2547:22">break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></if> <else pos:start="2548:11" pos:end="2652:9">else <block pos:start="2548:16" pos:end="2652:9">{<block_content pos:start="2549:13" pos:end="2651:13">
            <if_stmt pos:start="2549:13" pos:end="2651:13"><if pos:start="2549:13" pos:end="2632:13">if <condition pos:start="2549:16" pos:end="2549:33">(<expr pos:start="2549:17" pos:end="2549:32"><name pos:start="2549:17" pos:end="2549:32"><name pos:start="2549:17" pos:end="2549:17">c</name><operator pos:start="2549:18" pos:end="2549:19">-&gt;</operator><name pos:start="2549:20" pos:end="2549:32">is_packetized</name></name></expr>)</condition> <block pos:start="2549:35" pos:end="2632:13">{<block_content pos:start="2551:17" pos:end="2631:17">
                <comment type="block" pos:start="2550:17" pos:end="2550:37">/* RTP data output */</comment>
                <expr_stmt pos:start="2551:17" pos:end="2551:52"><expr pos:start="2551:17" pos:end="2551:51"><name pos:start="2551:17" pos:end="2551:19">len</name> <operator pos:start="2551:21" pos:end="2551:21">=</operator> <name pos:start="2551:23" pos:end="2551:35"><name pos:start="2551:23" pos:end="2551:23">c</name><operator pos:start="2551:24" pos:end="2551:25">-&gt;</operator><name pos:start="2551:26" pos:end="2551:35">buffer_end</name></name> <operator pos:start="2551:37" pos:end="2551:37">-</operator> <name pos:start="2551:39" pos:end="2551:51"><name pos:start="2551:39" pos:end="2551:39">c</name><operator pos:start="2551:40" pos:end="2551:41">-&gt;</operator><name pos:start="2551:42" pos:end="2551:51">buffer_ptr</name></name></expr>;</expr_stmt>
                <if_stmt pos:start="2552:17" pos:end="2557:17"><if pos:start="2552:17" pos:end="2557:17">if <condition pos:start="2552:20" pos:end="2552:28">(<expr pos:start="2552:21" pos:end="2552:27"><name pos:start="2552:21" pos:end="2552:23">len</name> <operator pos:start="2552:25" pos:end="2552:25">&lt;</operator> <literal type="number" pos:start="2552:27" pos:end="2552:27">4</literal></expr>)</condition> <block pos:start="2552:30" pos:end="2557:17">{<block_content pos:start="2554:17" pos:end="2556:29">
                    <comment type="block" pos:start="2553:21" pos:end="2553:57">/* fail safe - should never happen */</comment>
                <label pos:start="2554:17" pos:end="2554:22"><name pos:start="2554:17" pos:end="2554:21">fail1</name>:</label>
                    <expr_stmt pos:start="2555:21" pos:end="2555:50"><expr pos:start="2555:21" pos:end="2555:49"><name pos:start="2555:21" pos:end="2555:33"><name pos:start="2555:21" pos:end="2555:21">c</name><operator pos:start="2555:22" pos:end="2555:23">-&gt;</operator><name pos:start="2555:24" pos:end="2555:33">buffer_ptr</name></name> <operator pos:start="2555:35" pos:end="2555:35">=</operator> <name pos:start="2555:37" pos:end="2555:49"><name pos:start="2555:37" pos:end="2555:37">c</name><operator pos:start="2555:38" pos:end="2555:39">-&gt;</operator><name pos:start="2555:40" pos:end="2555:49">buffer_end</name></name></expr>;</expr_stmt>
                    <return pos:start="2556:21" pos:end="2556:29">return <expr pos:start="2556:28" pos:end="2556:28"><literal type="number" pos:start="2556:28" pos:end="2556:28">0</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt pos:start="2558:17" pos:end="2561:39"><expr pos:start="2558:17" pos:end="2561:38"><name pos:start="2558:17" pos:end="2558:19">len</name> <operator pos:start="2558:21" pos:end="2558:21">=</operator> <operator pos:start="2558:23" pos:end="2558:23">(</operator><name pos:start="2558:24" pos:end="2558:39"><name pos:start="2558:24" pos:end="2558:24">c</name><operator pos:start="2558:25" pos:end="2558:26">-&gt;</operator><name pos:start="2558:27" pos:end="2558:36">buffer_ptr</name><index pos:start="2558:37" pos:end="2558:39">[<expr pos:start="2558:38" pos:end="2558:38"><literal type="number" pos:start="2558:38" pos:end="2558:38">0</literal></expr>]</index></name> <operator pos:start="2558:41" pos:end="2558:42">&lt;&lt;</operator> <literal type="number" pos:start="2558:44" pos:end="2558:45">24</literal><operator pos:start="2558:46" pos:end="2558:46">)</operator> <operator pos:start="2558:48" pos:end="2558:48">|</operator>
                    <operator pos:start="2559:21" pos:end="2559:21">(</operator><name pos:start="2559:22" pos:end="2559:37"><name pos:start="2559:22" pos:end="2559:22">c</name><operator pos:start="2559:23" pos:end="2559:24">-&gt;</operator><name pos:start="2559:25" pos:end="2559:34">buffer_ptr</name><index pos:start="2559:35" pos:end="2559:37">[<expr pos:start="2559:36" pos:end="2559:36"><literal type="number" pos:start="2559:36" pos:end="2559:36">1</literal></expr>]</index></name> <operator pos:start="2559:39" pos:end="2559:40">&lt;&lt;</operator> <literal type="number" pos:start="2559:42" pos:end="2559:43">16</literal><operator pos:start="2559:44" pos:end="2559:44">)</operator> <operator pos:start="2559:46" pos:end="2559:46">|</operator>
                    <operator pos:start="2560:21" pos:end="2560:21">(</operator><name pos:start="2560:22" pos:end="2560:37"><name pos:start="2560:22" pos:end="2560:22">c</name><operator pos:start="2560:23" pos:end="2560:24">-&gt;</operator><name pos:start="2560:25" pos:end="2560:34">buffer_ptr</name><index pos:start="2560:35" pos:end="2560:37">[<expr pos:start="2560:36" pos:end="2560:36"><literal type="number" pos:start="2560:36" pos:end="2560:36">2</literal></expr>]</index></name> <operator pos:start="2560:39" pos:end="2560:40">&lt;&lt;</operator> <literal type="number" pos:start="2560:42" pos:end="2560:42">8</literal><operator pos:start="2560:43" pos:end="2560:43">)</operator> <operator pos:start="2560:45" pos:end="2560:45">|</operator>
                    <operator pos:start="2561:21" pos:end="2561:21">(</operator><name pos:start="2561:22" pos:end="2561:37"><name pos:start="2561:22" pos:end="2561:22">c</name><operator pos:start="2561:23" pos:end="2561:24">-&gt;</operator><name pos:start="2561:25" pos:end="2561:34">buffer_ptr</name><index pos:start="2561:35" pos:end="2561:37">[<expr pos:start="2561:36" pos:end="2561:36"><literal type="number" pos:start="2561:36" pos:end="2561:36">3</literal></expr>]</index></name><operator pos:start="2561:38" pos:end="2561:38">)</operator></expr>;</expr_stmt>
                <if_stmt pos:start="2562:17" pos:end="2563:31"><if pos:start="2562:17" pos:end="2563:31">if <condition pos:start="2562:20" pos:end="2562:58">(<expr pos:start="2562:21" pos:end="2562:57"><name pos:start="2562:21" pos:end="2562:23">len</name> <operator pos:start="2562:25" pos:end="2562:25">&gt;</operator> <operator pos:start="2562:27" pos:end="2562:27">(</operator><name pos:start="2562:28" pos:end="2562:40"><name pos:start="2562:28" pos:end="2562:28">c</name><operator pos:start="2562:29" pos:end="2562:30">-&gt;</operator><name pos:start="2562:31" pos:end="2562:40">buffer_end</name></name> <operator pos:start="2562:42" pos:end="2562:42">-</operator> <name pos:start="2562:44" pos:end="2562:56"><name pos:start="2562:44" pos:end="2562:44">c</name><operator pos:start="2562:45" pos:end="2562:46">-&gt;</operator><name pos:start="2562:47" pos:end="2562:56">buffer_ptr</name></name><operator pos:start="2562:57" pos:end="2562:57">)</operator></expr>)</condition><block type="pseudo" pos:start="2563:21" pos:end="2563:31"><block_content pos:start="2563:21" pos:end="2563:31">
                    <goto pos:start="2563:21" pos:end="2563:31">goto <name pos:start="2563:26" pos:end="2563:30">fail1</name>;</goto></block_content></block></if></if_stmt>
                <if_stmt pos:start="2564:17" pos:end="2567:17"><if pos:start="2564:17" pos:end="2567:17">if <condition pos:start="2564:20" pos:end="2564:73">(<expr pos:start="2564:21" pos:end="2564:72"><operator pos:start="2564:21" pos:end="2564:21">(</operator><call pos:start="2564:22" pos:end="2564:45"><name pos:start="2564:22" pos:end="2564:42">get_packet_send_clock</name><argument_list pos:start="2564:43" pos:end="2564:45">(<argument pos:start="2564:44" pos:end="2564:44"><expr pos:start="2564:44" pos:end="2564:44"><name pos:start="2564:44" pos:end="2564:44">c</name></expr></argument>)</argument_list></call> <operator pos:start="2564:47" pos:end="2564:47">-</operator> <call pos:start="2564:49" pos:end="2564:67"><name pos:start="2564:49" pos:end="2564:64">get_server_clock</name><argument_list pos:start="2564:65" pos:end="2564:67">(<argument pos:start="2564:66" pos:end="2564:66"><expr pos:start="2564:66" pos:end="2564:66"><name pos:start="2564:66" pos:end="2564:66">c</name></expr></argument>)</argument_list></call><operator pos:start="2564:68" pos:end="2564:68">)</operator> <operator pos:start="2564:70" pos:end="2564:70">&gt;</operator> <literal type="number" pos:start="2564:72" pos:end="2564:72">0</literal></expr>)</condition> <block pos:start="2564:75" pos:end="2567:17">{<block_content pos:start="2566:21" pos:end="2566:29">
                    <comment type="block" pos:start="2565:21" pos:end="2565:58">/* nothing to send yet: we can wait */</comment>
                    <return pos:start="2566:21" pos:end="2566:29">return <expr pos:start="2566:28" pos:end="2566:28"><literal type="number" pos:start="2566:28" pos:end="2566:28">0</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="2569:17" pos:end="2569:37"><expr pos:start="2569:17" pos:end="2569:36"><name pos:start="2569:17" pos:end="2569:29"><name pos:start="2569:17" pos:end="2569:17">c</name><operator pos:start="2569:18" pos:end="2569:19">-&gt;</operator><name pos:start="2569:20" pos:end="2569:29">data_count</name></name> <operator pos:start="2569:31" pos:end="2569:32">+=</operator> <name pos:start="2569:34" pos:end="2569:36">len</name></expr>;</expr_stmt>
                <expr_stmt pos:start="2570:17" pos:end="2570:61"><expr pos:start="2570:17" pos:end="2570:60"><call pos:start="2570:17" pos:end="2570:60"><name pos:start="2570:17" pos:end="2570:31">update_datarate</name><argument_list pos:start="2570:32" pos:end="2570:60">(<argument pos:start="2570:33" pos:end="2570:44"><expr pos:start="2570:33" pos:end="2570:44"><operator pos:start="2570:33" pos:end="2570:33">&amp;</operator><name pos:start="2570:34" pos:end="2570:44"><name pos:start="2570:34" pos:end="2570:34">c</name><operator pos:start="2570:35" pos:end="2570:36">-&gt;</operator><name pos:start="2570:37" pos:end="2570:44">datarate</name></name></expr></argument>, <argument pos:start="2570:47" pos:end="2570:59"><expr pos:start="2570:47" pos:end="2570:59"><name pos:start="2570:47" pos:end="2570:59"><name pos:start="2570:47" pos:end="2570:47">c</name><operator pos:start="2570:48" pos:end="2570:49">-&gt;</operator><name pos:start="2570:50" pos:end="2570:59">data_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="2571:17" pos:end="2572:51"><if pos:start="2571:17" pos:end="2572:51">if <condition pos:start="2571:20" pos:end="2571:30">(<expr pos:start="2571:21" pos:end="2571:29"><name pos:start="2571:21" pos:end="2571:29"><name pos:start="2571:21" pos:end="2571:21">c</name><operator pos:start="2571:22" pos:end="2571:23">-&gt;</operator><name pos:start="2571:24" pos:end="2571:29">stream</name></name></expr>)</condition><block type="pseudo" pos:start="2572:21" pos:end="2572:51"><block_content pos:start="2572:21" pos:end="2572:51">
                    <expr_stmt pos:start="2572:21" pos:end="2572:51"><expr pos:start="2572:21" pos:end="2572:50"><name pos:start="2572:21" pos:end="2572:43"><name pos:start="2572:21" pos:end="2572:21">c</name><operator pos:start="2572:22" pos:end="2572:23">-&gt;</operator><name pos:start="2572:24" pos:end="2572:29">stream</name><operator pos:start="2572:30" pos:end="2572:31">-&gt;</operator><name pos:start="2572:32" pos:end="2572:43">bytes_served</name></name> <operator pos:start="2572:45" pos:end="2572:46">+=</operator> <name pos:start="2572:48" pos:end="2572:50">len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="2574:17" pos:end="2631:17"><if pos:start="2574:17" pos:end="2623:17">if <condition pos:start="2574:20" pos:end="2574:64">(<expr pos:start="2574:21" pos:end="2574:63"><name pos:start="2574:21" pos:end="2574:35"><name pos:start="2574:21" pos:end="2574:21">c</name><operator pos:start="2574:22" pos:end="2574:23">-&gt;</operator><name pos:start="2574:24" pos:end="2574:35">rtp_protocol</name></name> <operator pos:start="2574:37" pos:end="2574:38">==</operator> <name pos:start="2574:40" pos:end="2574:63">RTSP_LOWER_TRANSPORT_TCP</name></expr>)</condition> <block pos:start="2574:66" pos:end="2623:17">{<block_content pos:start="2576:21" pos:end="2622:52">
                    <comment type="block" pos:start="2575:21" pos:end="2575:77">/* RTP packets are sent inside the RTSP TCP connection */</comment>
                    <decl_stmt pos:start="2576:21" pos:end="2576:36"><decl pos:start="2576:21" pos:end="2576:35"><type pos:start="2576:21" pos:end="2576:33"><name pos:start="2576:21" pos:end="2576:31">AVIOContext</name> <modifier pos:start="2576:33" pos:end="2576:33">*</modifier></type><name pos:start="2576:34" pos:end="2576:35">pb</name></decl>;</decl_stmt>
                    <decl_stmt pos:start="2577:21" pos:end="2577:48"><decl pos:start="2577:21" pos:end="2577:41"><type pos:start="2577:21" pos:end="2577:23"><name pos:start="2577:21" pos:end="2577:23">int</name></type> <name pos:start="2577:25" pos:end="2577:41">interleaved_index</name></decl>, <decl pos:start="2577:44" pos:end="2577:47"><type ref="prev" pos:start="2577:21" pos:end="2577:23"/><name pos:start="2577:44" pos:end="2577:47">size</name></decl>;</decl_stmt>
                    <decl_stmt pos:start="2578:21" pos:end="2578:38"><decl pos:start="2578:21" pos:end="2578:37"><type pos:start="2578:21" pos:end="2578:27"><name pos:start="2578:21" pos:end="2578:27">uint8_t</name></type> <name pos:start="2578:29" pos:end="2578:37"><name pos:start="2578:29" pos:end="2578:34">header</name><index pos:start="2578:35" pos:end="2578:37">[<expr pos:start="2578:36" pos:end="2578:36"><literal type="number" pos:start="2578:36" pos:end="2578:36">4</literal></expr>]</index></name></decl>;</decl_stmt>
                    <decl_stmt pos:start="2579:21" pos:end="2579:40"><decl pos:start="2579:21" pos:end="2579:39"><type pos:start="2579:21" pos:end="2579:33"><name pos:start="2579:21" pos:end="2579:31">HTTPContext</name> <modifier pos:start="2579:33" pos:end="2579:33">*</modifier></type><name pos:start="2579:34" pos:end="2579:39">rtsp_c</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="2581:21" pos:end="2581:39"><expr pos:start="2581:21" pos:end="2581:38"><name pos:start="2581:21" pos:end="2581:26">rtsp_c</name> <operator pos:start="2581:28" pos:end="2581:28">=</operator> <name pos:start="2581:30" pos:end="2581:38"><name pos:start="2581:30" pos:end="2581:30">c</name><operator pos:start="2581:31" pos:end="2581:32">-&gt;</operator><name pos:start="2581:33" pos:end="2581:38">rtsp_c</name></name></expr>;</expr_stmt>
                    <comment type="block" pos:start="2582:21" pos:end="2582:59">/* if no RTSP connection left, error */</comment>
                    <if_stmt pos:start="2583:21" pos:end="2584:34"><if pos:start="2583:21" pos:end="2584:34">if <condition pos:start="2583:24" pos:end="2583:32">(<expr pos:start="2583:25" pos:end="2583:31"><operator pos:start="2583:25" pos:end="2583:25">!</operator><name pos:start="2583:26" pos:end="2583:31">rtsp_c</name></expr>)</condition><block type="pseudo" pos:start="2584:25" pos:end="2584:34"><block_content pos:start="2584:25" pos:end="2584:34">
                        <return pos:start="2584:25" pos:end="2584:34">return <expr pos:start="2584:32" pos:end="2584:33"><operator pos:start="2584:32" pos:end="2584:32">-</operator><literal type="number" pos:start="2584:33" pos:end="2584:33">1</literal></expr>;</return></block_content></block></if></if_stmt>
                    <comment type="block" pos:start="2585:21" pos:end="2585:66">/* if already sending something, then wait. */</comment>
                    <if_stmt pos:start="2586:21" pos:end="2587:30"><if pos:start="2586:21" pos:end="2587:30">if <condition pos:start="2586:24" pos:end="2586:64">(<expr pos:start="2586:25" pos:end="2586:63"><name pos:start="2586:25" pos:end="2586:37"><name pos:start="2586:25" pos:end="2586:30">rtsp_c</name><operator pos:start="2586:31" pos:end="2586:32">-&gt;</operator><name pos:start="2586:33" pos:end="2586:37">state</name></name> <operator pos:start="2586:39" pos:end="2586:40">!=</operator> <name pos:start="2586:42" pos:end="2586:63">RTSPSTATE_WAIT_REQUEST</name></expr>)</condition><block type="pseudo" pos:start="2587:25" pos:end="2587:30"><block_content pos:start="2587:25" pos:end="2587:30">
                        <break pos:start="2587:25" pos:end="2587:30">break;</break></block_content></block></if></if_stmt>
                    <if_stmt pos:start="2588:21" pos:end="2589:35"><if pos:start="2588:21" pos:end="2589:35">if <condition pos:start="2588:24" pos:end="2588:51">(<expr pos:start="2588:25" pos:end="2588:50"><call pos:start="2588:25" pos:end="2588:46"><name pos:start="2588:25" pos:end="2588:41">avio_open_dyn_buf</name><argument_list pos:start="2588:42" pos:end="2588:46">(<argument pos:start="2588:43" pos:end="2588:45"><expr pos:start="2588:43" pos:end="2588:45"><operator pos:start="2588:43" pos:end="2588:43">&amp;</operator><name pos:start="2588:44" pos:end="2588:45">pb</name></expr></argument>)</argument_list></call> <operator pos:start="2588:48" pos:end="2588:48">&lt;</operator> <literal type="number" pos:start="2588:50" pos:end="2588:50">0</literal></expr>)</condition><block type="pseudo" pos:start="2589:25" pos:end="2589:35"><block_content pos:start="2589:25" pos:end="2589:35">
                        <goto pos:start="2589:25" pos:end="2589:35">goto <name pos:start="2589:30" pos:end="2589:34">fail1</name>;</goto></block_content></block></if></if_stmt>
                    <expr_stmt pos:start="2590:21" pos:end="2590:67"><expr pos:start="2590:21" pos:end="2590:66"><name pos:start="2590:21" pos:end="2590:37">interleaved_index</name> <operator pos:start="2590:39" pos:end="2590:39">=</operator> <name pos:start="2590:41" pos:end="2590:62"><name pos:start="2590:41" pos:end="2590:41">c</name><operator pos:start="2590:42" pos:end="2590:43">-&gt;</operator><name pos:start="2590:44" pos:end="2590:62">packet_stream_index</name></name> <operator pos:start="2590:64" pos:end="2590:64">*</operator> <literal type="number" pos:start="2590:66" pos:end="2590:66">2</literal></expr>;</expr_stmt>
                    <comment type="block" pos:start="2591:21" pos:end="2591:62">/* RTCP packets are sent at odd indexes */</comment>
                    <if_stmt pos:start="2592:21" pos:end="2593:44"><if pos:start="2592:21" pos:end="2593:44">if <condition pos:start="2592:24" pos:end="2592:48">(<expr pos:start="2592:25" pos:end="2592:47"><name pos:start="2592:25" pos:end="2592:40"><name pos:start="2592:25" pos:end="2592:25">c</name><operator pos:start="2592:26" pos:end="2592:27">-&gt;</operator><name pos:start="2592:28" pos:end="2592:37">buffer_ptr</name><index pos:start="2592:38" pos:end="2592:40">[<expr pos:start="2592:39" pos:end="2592:39"><literal type="number" pos:start="2592:39" pos:end="2592:39">1</literal></expr>]</index></name> <operator pos:start="2592:42" pos:end="2592:43">==</operator> <literal type="number" pos:start="2592:45" pos:end="2592:47">200</literal></expr>)</condition><block type="pseudo" pos:start="2593:25" pos:end="2593:44"><block_content pos:start="2593:25" pos:end="2593:44">
                        <expr_stmt pos:start="2593:25" pos:end="2593:44"><expr pos:start="2593:25" pos:end="2593:43"><name pos:start="2593:25" pos:end="2593:41">interleaved_index</name><operator pos:start="2593:42" pos:end="2593:43">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <comment type="block" pos:start="2594:21" pos:end="2594:47">/* write RTSP TCP header */</comment>
                    <expr_stmt pos:start="2595:21" pos:end="2595:36"><expr pos:start="2595:21" pos:end="2595:35"><name pos:start="2595:21" pos:end="2595:29"><name pos:start="2595:21" pos:end="2595:26">header</name><index pos:start="2595:27" pos:end="2595:29">[<expr pos:start="2595:28" pos:end="2595:28"><literal type="number" pos:start="2595:28" pos:end="2595:28">0</literal></expr>]</index></name> <operator pos:start="2595:31" pos:end="2595:31">=</operator> <literal type="char" pos:start="2595:33" pos:end="2595:35">'$'</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="2596:21" pos:end="2596:50"><expr pos:start="2596:21" pos:end="2596:49"><name pos:start="2596:21" pos:end="2596:29"><name pos:start="2596:21" pos:end="2596:26">header</name><index pos:start="2596:27" pos:end="2596:29">[<expr pos:start="2596:28" pos:end="2596:28"><literal type="number" pos:start="2596:28" pos:end="2596:28">1</literal></expr>]</index></name> <operator pos:start="2596:31" pos:end="2596:31">=</operator> <name pos:start="2596:33" pos:end="2596:49">interleaved_index</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="2597:21" pos:end="2597:41"><expr pos:start="2597:21" pos:end="2597:40"><name pos:start="2597:21" pos:end="2597:29"><name pos:start="2597:21" pos:end="2597:26">header</name><index pos:start="2597:27" pos:end="2597:29">[<expr pos:start="2597:28" pos:end="2597:28"><literal type="number" pos:start="2597:28" pos:end="2597:28">2</literal></expr>]</index></name> <operator pos:start="2597:31" pos:end="2597:31">=</operator> <name pos:start="2597:33" pos:end="2597:35">len</name> <operator pos:start="2597:37" pos:end="2597:38">&gt;&gt;</operator> <literal type="number" pos:start="2597:40" pos:end="2597:40">8</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="2598:21" pos:end="2598:36"><expr pos:start="2598:21" pos:end="2598:35"><name pos:start="2598:21" pos:end="2598:29"><name pos:start="2598:21" pos:end="2598:26">header</name><index pos:start="2598:27" pos:end="2598:29">[<expr pos:start="2598:28" pos:end="2598:28"><literal type="number" pos:start="2598:28" pos:end="2598:28">3</literal></expr>]</index></name> <operator pos:start="2598:31" pos:end="2598:31">=</operator> <name pos:start="2598:33" pos:end="2598:35">len</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="2599:21" pos:end="2599:46"><expr pos:start="2599:21" pos:end="2599:45"><call pos:start="2599:21" pos:end="2599:45"><name pos:start="2599:21" pos:end="2599:30">avio_write</name><argument_list pos:start="2599:31" pos:end="2599:45">(<argument pos:start="2599:32" pos:end="2599:33"><expr pos:start="2599:32" pos:end="2599:33"><name pos:start="2599:32" pos:end="2599:33">pb</name></expr></argument>, <argument pos:start="2599:36" pos:end="2599:41"><expr pos:start="2599:36" pos:end="2599:41"><name pos:start="2599:36" pos:end="2599:41">header</name></expr></argument>, <argument pos:start="2599:44" pos:end="2599:44"><expr pos:start="2599:44" pos:end="2599:44"><literal type="number" pos:start="2599:44" pos:end="2599:44">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="block" pos:start="2600:21" pos:end="2600:47">/* write RTP packet data */</comment>
                    <expr_stmt pos:start="2601:21" pos:end="2601:39"><expr pos:start="2601:21" pos:end="2601:38"><name pos:start="2601:21" pos:end="2601:33"><name pos:start="2601:21" pos:end="2601:21">c</name><operator pos:start="2601:22" pos:end="2601:23">-&gt;</operator><name pos:start="2601:24" pos:end="2601:33">buffer_ptr</name></name> <operator pos:start="2601:35" pos:end="2601:36">+=</operator> <literal type="number" pos:start="2601:38" pos:end="2601:38">4</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="2602:21" pos:end="2602:55"><expr pos:start="2602:21" pos:end="2602:54"><call pos:start="2602:21" pos:end="2602:54"><name pos:start="2602:21" pos:end="2602:30">avio_write</name><argument_list pos:start="2602:31" pos:end="2602:54">(<argument pos:start="2602:32" pos:end="2602:33"><expr pos:start="2602:32" pos:end="2602:33"><name pos:start="2602:32" pos:end="2602:33">pb</name></expr></argument>, <argument pos:start="2602:36" pos:end="2602:48"><expr pos:start="2602:36" pos:end="2602:48"><name pos:start="2602:36" pos:end="2602:48"><name pos:start="2602:36" pos:end="2602:36">c</name><operator pos:start="2602:37" pos:end="2602:38">-&gt;</operator><name pos:start="2602:39" pos:end="2602:48">buffer_ptr</name></name></expr></argument>, <argument pos:start="2602:51" pos:end="2602:53"><expr pos:start="2602:51" pos:end="2602:53"><name pos:start="2602:51" pos:end="2602:53">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2603:21" pos:end="2603:69"><expr pos:start="2603:21" pos:end="2603:68"><name pos:start="2603:21" pos:end="2603:24">size</name> <operator pos:start="2603:26" pos:end="2603:26">=</operator> <call pos:start="2603:28" pos:end="2603:68"><name pos:start="2603:28" pos:end="2603:45">avio_close_dyn_buf</name><argument_list pos:start="2603:46" pos:end="2603:68">(<argument pos:start="2603:47" pos:end="2603:48"><expr pos:start="2603:47" pos:end="2603:48"><name pos:start="2603:47" pos:end="2603:48">pb</name></expr></argument>, <argument pos:start="2603:51" pos:end="2603:67"><expr pos:start="2603:51" pos:end="2603:67"><operator pos:start="2603:51" pos:end="2603:51">&amp;</operator><name pos:start="2603:52" pos:end="2603:67"><name pos:start="2603:52" pos:end="2603:52">c</name><operator pos:start="2603:53" pos:end="2603:54">-&gt;</operator><name pos:start="2603:55" pos:end="2603:67">packet_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="block" pos:start="2604:21" pos:end="2604:58">/* prepare asynchronous TCP sending */</comment>
                    <expr_stmt pos:start="2605:21" pos:end="2605:65"><expr pos:start="2605:21" pos:end="2605:64"><name pos:start="2605:21" pos:end="2605:45"><name pos:start="2605:21" pos:end="2605:26">rtsp_c</name><operator pos:start="2605:27" pos:end="2605:28">-&gt;</operator><name pos:start="2605:29" pos:end="2605:45">packet_buffer_ptr</name></name> <operator pos:start="2605:47" pos:end="2605:47">=</operator> <name pos:start="2605:49" pos:end="2605:64"><name pos:start="2605:49" pos:end="2605:49">c</name><operator pos:start="2605:50" pos:end="2605:51">-&gt;</operator><name pos:start="2605:52" pos:end="2605:64">packet_buffer</name></name></expr>;</expr_stmt>
                    <expr_stmt pos:start="2606:21" pos:end="2606:72"><expr pos:start="2606:21" pos:end="2606:71"><name pos:start="2606:21" pos:end="2606:45"><name pos:start="2606:21" pos:end="2606:26">rtsp_c</name><operator pos:start="2606:27" pos:end="2606:28">-&gt;</operator><name pos:start="2606:29" pos:end="2606:45">packet_buffer_end</name></name> <operator pos:start="2606:47" pos:end="2606:47">=</operator> <name pos:start="2606:49" pos:end="2606:64"><name pos:start="2606:49" pos:end="2606:49">c</name><operator pos:start="2606:50" pos:end="2606:51">-&gt;</operator><name pos:start="2606:52" pos:end="2606:64">packet_buffer</name></name> <operator pos:start="2606:66" pos:end="2606:66">+</operator> <name pos:start="2606:68" pos:end="2606:71">size</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="2607:21" pos:end="2607:41"><expr pos:start="2607:21" pos:end="2607:40"><name pos:start="2607:21" pos:end="2607:33"><name pos:start="2607:21" pos:end="2607:21">c</name><operator pos:start="2607:22" pos:end="2607:23">-&gt;</operator><name pos:start="2607:24" pos:end="2607:33">buffer_ptr</name></name> <operator pos:start="2607:35" pos:end="2607:36">+=</operator> <name pos:start="2607:38" pos:end="2607:40">len</name></expr>;</expr_stmt>

                    <comment type="block" pos:start="2609:21" pos:end="2609:52">/* send everything we can NOW */</comment>
                    <expr_stmt pos:start="2610:21" pos:end="2611:89"><expr pos:start="2610:21" pos:end="2611:88"><name pos:start="2610:21" pos:end="2610:23">len</name> <operator pos:start="2610:25" pos:end="2610:25">=</operator> <call pos:start="2610:27" pos:end="2611:88"><name pos:start="2610:27" pos:end="2610:30">send</name><argument_list pos:start="2610:31" pos:end="2611:88">(<argument pos:start="2610:32" pos:end="2610:41"><expr pos:start="2610:32" pos:end="2610:41"><name pos:start="2610:32" pos:end="2610:41"><name pos:start="2610:32" pos:end="2610:37">rtsp_c</name><operator pos:start="2610:38" pos:end="2610:39">-&gt;</operator><name pos:start="2610:40" pos:end="2610:41">fd</name></name></expr></argument>, <argument pos:start="2610:44" pos:end="2610:68"><expr pos:start="2610:44" pos:end="2610:68"><name pos:start="2610:44" pos:end="2610:68"><name pos:start="2610:44" pos:end="2610:49">rtsp_c</name><operator pos:start="2610:50" pos:end="2610:51">-&gt;</operator><name pos:start="2610:52" pos:end="2610:68">packet_buffer_ptr</name></name></expr></argument>,
                               <argument pos:start="2611:32" pos:end="2611:84"><expr pos:start="2611:32" pos:end="2611:84"><name pos:start="2611:32" pos:end="2611:56"><name pos:start="2611:32" pos:end="2611:37">rtsp_c</name><operator pos:start="2611:38" pos:end="2611:39">-&gt;</operator><name pos:start="2611:40" pos:end="2611:56">packet_buffer_end</name></name> <operator pos:start="2611:58" pos:end="2611:58">-</operator> <name pos:start="2611:60" pos:end="2611:84"><name pos:start="2611:60" pos:end="2611:65">rtsp_c</name><operator pos:start="2611:66" pos:end="2611:67">-&gt;</operator><name pos:start="2611:68" pos:end="2611:84">packet_buffer_ptr</name></name></expr></argument>, <argument pos:start="2611:87" pos:end="2611:87"><expr pos:start="2611:87" pos:end="2611:87"><literal type="number" pos:start="2611:87" pos:end="2611:87">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="2612:21" pos:end="2613:57"><if pos:start="2612:21" pos:end="2613:57">if <condition pos:start="2612:24" pos:end="2612:32">(<expr pos:start="2612:25" pos:end="2612:31"><name pos:start="2612:25" pos:end="2612:27">len</name> <operator pos:start="2612:29" pos:end="2612:29">&gt;</operator> <literal type="number" pos:start="2612:31" pos:end="2612:31">0</literal></expr>)</condition><block type="pseudo" pos:start="2613:25" pos:end="2613:57"><block_content pos:start="2613:25" pos:end="2613:57">
                        <expr_stmt pos:start="2613:25" pos:end="2613:57"><expr pos:start="2613:25" pos:end="2613:56"><name pos:start="2613:25" pos:end="2613:49"><name pos:start="2613:25" pos:end="2613:30">rtsp_c</name><operator pos:start="2613:31" pos:end="2613:32">-&gt;</operator><name pos:start="2613:33" pos:end="2613:49">packet_buffer_ptr</name></name> <operator pos:start="2613:51" pos:end="2613:52">+=</operator> <name pos:start="2613:54" pos:end="2613:56">len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <if_stmt pos:start="2614:21" pos:end="2622:52"><if pos:start="2614:21" pos:end="2620:21">if <condition pos:start="2614:24" pos:end="2614:78">(<expr pos:start="2614:25" pos:end="2614:77"><name pos:start="2614:25" pos:end="2614:49"><name pos:start="2614:25" pos:end="2614:30">rtsp_c</name><operator pos:start="2614:31" pos:end="2614:32">-&gt;</operator><name pos:start="2614:33" pos:end="2614:49">packet_buffer_ptr</name></name> <operator pos:start="2614:51" pos:end="2614:51">&lt;</operator> <name pos:start="2614:53" pos:end="2614:77"><name pos:start="2614:53" pos:end="2614:58">rtsp_c</name><operator pos:start="2614:59" pos:end="2614:60">-&gt;</operator><name pos:start="2614:61" pos:end="2614:77">packet_buffer_end</name></name></expr>)</condition> <block pos:start="2614:80" pos:end="2620:21">{<block_content pos:start="2618:25" pos:end="2619:30">
                        <comment type="block" pos:start="2615:25" pos:end="2617:60">/* if we could not send all the data, we will
                         * send it later, so a new state is needed to
                         * "lock" the RTSP TCP connection */</comment>
                        <expr_stmt pos:start="2618:25" pos:end="2618:62"><expr pos:start="2618:25" pos:end="2618:61"><name pos:start="2618:25" pos:end="2618:37"><name pos:start="2618:25" pos:end="2618:30">rtsp_c</name><operator pos:start="2618:31" pos:end="2618:32">-&gt;</operator><name pos:start="2618:33" pos:end="2618:37">state</name></name> <operator pos:start="2618:39" pos:end="2618:39">=</operator> <name pos:start="2618:41" pos:end="2618:61">RTSPSTATE_SEND_PACKET</name></expr>;</expr_stmt>
                        <break pos:start="2619:25" pos:end="2619:30">break;</break>
                    </block_content>}</block></if> <else pos:start="2620:23" pos:end="2622:52">else<block type="pseudo" pos:start="2622:25" pos:end="2622:52"><block_content pos:start="2622:25" pos:end="2622:52">
                        <comment type="block" pos:start="2621:25" pos:end="2621:52">/* all data has been sent */</comment>
                        <expr_stmt pos:start="2622:25" pos:end="2622:52"><expr pos:start="2622:25" pos:end="2622:51"><call pos:start="2622:25" pos:end="2622:51"><name pos:start="2622:25" pos:end="2622:32">av_freep</name><argument_list pos:start="2622:33" pos:end="2622:51">(<argument pos:start="2622:34" pos:end="2622:50"><expr pos:start="2622:34" pos:end="2622:50"><operator pos:start="2622:34" pos:end="2622:34">&amp;</operator><name pos:start="2622:35" pos:end="2622:50"><name pos:start="2622:35" pos:end="2622:35">c</name><operator pos:start="2622:36" pos:end="2622:37">-&gt;</operator><name pos:start="2622:38" pos:end="2622:50">packet_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
                </block_content>}</block></if> <else pos:start="2623:19" pos:end="2631:17">else <block pos:start="2623:24" pos:end="2631:17">{<block_content pos:start="2625:21" pos:end="2628:41">
                    <comment type="block" pos:start="2624:21" pos:end="2624:57">/* send RTP packet directly in UDP */</comment>
                    <expr_stmt pos:start="2625:21" pos:end="2625:39"><expr pos:start="2625:21" pos:end="2625:38"><name pos:start="2625:21" pos:end="2625:33"><name pos:start="2625:21" pos:end="2625:21">c</name><operator pos:start="2625:22" pos:end="2625:23">-&gt;</operator><name pos:start="2625:24" pos:end="2625:33">buffer_ptr</name></name> <operator pos:start="2625:35" pos:end="2625:36">+=</operator> <literal type="number" pos:start="2625:38" pos:end="2625:38">4</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="2626:21" pos:end="2627:52"><expr pos:start="2626:21" pos:end="2627:51"><call pos:start="2626:21" pos:end="2627:51"><name pos:start="2626:21" pos:end="2626:31">ffurl_write</name><argument_list pos:start="2626:32" pos:end="2627:51">(<argument pos:start="2626:33" pos:end="2626:70"><expr pos:start="2626:33" pos:end="2626:70"><name pos:start="2626:33" pos:end="2626:70"><name pos:start="2626:33" pos:end="2626:33">c</name><operator pos:start="2626:34" pos:end="2626:35">-&gt;</operator><name pos:start="2626:36" pos:end="2626:46">rtp_handles</name><index pos:start="2626:47" pos:end="2626:70">[<expr pos:start="2626:48" pos:end="2626:69"><name pos:start="2626:48" pos:end="2626:69"><name pos:start="2626:48" pos:end="2626:48">c</name><operator pos:start="2626:49" pos:end="2626:50">-&gt;</operator><name pos:start="2626:51" pos:end="2626:69">packet_stream_index</name></name></expr>]</index></name></expr></argument>,
                                <argument pos:start="2627:33" pos:end="2627:45"><expr pos:start="2627:33" pos:end="2627:45"><name pos:start="2627:33" pos:end="2627:45"><name pos:start="2627:33" pos:end="2627:33">c</name><operator pos:start="2627:34" pos:end="2627:35">-&gt;</operator><name pos:start="2627:36" pos:end="2627:45">buffer_ptr</name></name></expr></argument>, <argument pos:start="2627:48" pos:end="2627:50"><expr pos:start="2627:48" pos:end="2627:50"><name pos:start="2627:48" pos:end="2627:50">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2628:21" pos:end="2628:41"><expr pos:start="2628:21" pos:end="2628:40"><name pos:start="2628:21" pos:end="2628:33"><name pos:start="2628:21" pos:end="2628:21">c</name><operator pos:start="2628:22" pos:end="2628:23">-&gt;</operator><name pos:start="2628:24" pos:end="2628:33">buffer_ptr</name></name> <operator pos:start="2628:35" pos:end="2628:36">+=</operator> <name pos:start="2628:38" pos:end="2628:40">len</name></expr>;</expr_stmt>
                    <comment type="block" pos:start="2629:21" pos:end="2630:40">/* here we continue as we can send several packets
                     * per 10 ms slot */</comment>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else pos:start="2632:15" pos:end="2651:13">else <block pos:start="2632:20" pos:end="2651:13">{<block_content pos:start="2634:17" pos:end="2650:22">
                <comment type="block" pos:start="2633:17" pos:end="2633:37">/* TCP data output */</comment>
                <expr_stmt pos:start="2634:17" pos:end="2635:61"><expr pos:start="2634:17" pos:end="2635:60"><name pos:start="2634:17" pos:end="2634:19">len</name> <operator pos:start="2634:21" pos:end="2634:21">=</operator> <call pos:start="2634:23" pos:end="2635:60"><name pos:start="2634:23" pos:end="2634:26">send</name><argument_list pos:start="2634:27" pos:end="2635:60">(<argument pos:start="2634:28" pos:end="2634:32"><expr pos:start="2634:28" pos:end="2634:32"><name pos:start="2634:28" pos:end="2634:32"><name pos:start="2634:28" pos:end="2634:28">c</name><operator pos:start="2634:29" pos:end="2634:30">-&gt;</operator><name pos:start="2634:31" pos:end="2634:32">fd</name></name></expr></argument>, <argument pos:start="2634:35" pos:end="2634:47"><expr pos:start="2634:35" pos:end="2634:47"><name pos:start="2634:35" pos:end="2634:47"><name pos:start="2634:35" pos:end="2634:35">c</name><operator pos:start="2634:36" pos:end="2634:37">-&gt;</operator><name pos:start="2634:38" pos:end="2634:47">buffer_ptr</name></name></expr></argument>,
                           <argument pos:start="2635:28" pos:end="2635:56"><expr pos:start="2635:28" pos:end="2635:56"><name pos:start="2635:28" pos:end="2635:40"><name pos:start="2635:28" pos:end="2635:28">c</name><operator pos:start="2635:29" pos:end="2635:30">-&gt;</operator><name pos:start="2635:31" pos:end="2635:40">buffer_end</name></name> <operator pos:start="2635:42" pos:end="2635:42">-</operator> <name pos:start="2635:44" pos:end="2635:56"><name pos:start="2635:44" pos:end="2635:44">c</name><operator pos:start="2635:45" pos:end="2635:46">-&gt;</operator><name pos:start="2635:47" pos:end="2635:56">buffer_ptr</name></name></expr></argument>, <argument pos:start="2635:59" pos:end="2635:59"><expr pos:start="2635:59" pos:end="2635:59"><literal type="number" pos:start="2635:59" pos:end="2635:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="2636:17" pos:end="2643:17"><if pos:start="2636:17" pos:end="2643:17">if <condition pos:start="2636:20" pos:end="2636:28">(<expr pos:start="2636:21" pos:end="2636:27"><name pos:start="2636:21" pos:end="2636:23">len</name> <operator pos:start="2636:25" pos:end="2636:25">&lt;</operator> <literal type="number" pos:start="2636:27" pos:end="2636:27">0</literal></expr>)</condition> <block pos:start="2636:30" pos:end="2643:17">{<block_content pos:start="2637:21" pos:end="2642:33">
                    <if_stmt pos:start="2637:21" pos:end="2642:33"><if pos:start="2637:21" pos:end="2640:34">if <condition pos:start="2637:24" pos:end="2638:56">(<expr pos:start="2637:25" pos:end="2638:55"><call pos:start="2637:25" pos:end="2637:37"><name pos:start="2637:25" pos:end="2637:35">ff_neterrno</name><argument_list pos:start="2637:36" pos:end="2637:37">()</argument_list></call> <operator pos:start="2637:39" pos:end="2637:40">!=</operator> <call pos:start="2637:42" pos:end="2637:56"><name pos:start="2637:42" pos:end="2637:48">AVERROR</name><argument_list pos:start="2637:49" pos:end="2637:56">(<argument pos:start="2637:50" pos:end="2637:55"><expr pos:start="2637:50" pos:end="2637:55"><name pos:start="2637:50" pos:end="2637:55">EAGAIN</name></expr></argument>)</argument_list></call> <operator pos:start="2637:58" pos:end="2637:59">&amp;&amp;</operator>
                        <call pos:start="2638:25" pos:end="2638:37"><name pos:start="2638:25" pos:end="2638:35">ff_neterrno</name><argument_list pos:start="2638:36" pos:end="2638:37">()</argument_list></call> <operator pos:start="2638:39" pos:end="2638:40">!=</operator> <call pos:start="2638:42" pos:end="2638:55"><name pos:start="2638:42" pos:end="2638:48">AVERROR</name><argument_list pos:start="2638:49" pos:end="2638:55">(<argument pos:start="2638:50" pos:end="2638:54"><expr pos:start="2638:50" pos:end="2638:54"><name pos:start="2638:50" pos:end="2638:54">EINTR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2640:25" pos:end="2640:34"><block_content pos:start="2640:25" pos:end="2640:34">
                        <comment type="block" pos:start="2639:25" pos:end="2639:54">/* error : close connection */</comment>
                        <return pos:start="2640:25" pos:end="2640:34">return <expr pos:start="2640:32" pos:end="2640:33"><operator pos:start="2640:32" pos:end="2640:32">-</operator><literal type="number" pos:start="2640:33" pos:end="2640:33">1</literal></expr>;</return></block_content></block></if>
                    <else pos:start="2641:21" pos:end="2642:33">else<block type="pseudo" pos:start="2642:25" pos:end="2642:33"><block_content pos:start="2642:25" pos:end="2642:33">
                        <return pos:start="2642:25" pos:end="2642:33">return <expr pos:start="2642:32" pos:end="2642:32"><literal type="number" pos:start="2642:32" pos:end="2642:32">0</literal></expr>;</return></block_content></block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt pos:start="2644:17" pos:end="2644:37"><expr pos:start="2644:17" pos:end="2644:36"><name pos:start="2644:17" pos:end="2644:29"><name pos:start="2644:17" pos:end="2644:17">c</name><operator pos:start="2644:18" pos:end="2644:19">-&gt;</operator><name pos:start="2644:20" pos:end="2644:29">buffer_ptr</name></name> <operator pos:start="2644:31" pos:end="2644:32">+=</operator> <name pos:start="2644:34" pos:end="2644:36">len</name></expr>;</expr_stmt>

                <expr_stmt pos:start="2646:17" pos:end="2646:37"><expr pos:start="2646:17" pos:end="2646:36"><name pos:start="2646:17" pos:end="2646:29"><name pos:start="2646:17" pos:end="2646:17">c</name><operator pos:start="2646:18" pos:end="2646:19">-&gt;</operator><name pos:start="2646:20" pos:end="2646:29">data_count</name></name> <operator pos:start="2646:31" pos:end="2646:32">+=</operator> <name pos:start="2646:34" pos:end="2646:36">len</name></expr>;</expr_stmt>
                <expr_stmt pos:start="2647:17" pos:end="2647:61"><expr pos:start="2647:17" pos:end="2647:60"><call pos:start="2647:17" pos:end="2647:60"><name pos:start="2647:17" pos:end="2647:31">update_datarate</name><argument_list pos:start="2647:32" pos:end="2647:60">(<argument pos:start="2647:33" pos:end="2647:44"><expr pos:start="2647:33" pos:end="2647:44"><operator pos:start="2647:33" pos:end="2647:33">&amp;</operator><name pos:start="2647:34" pos:end="2647:44"><name pos:start="2647:34" pos:end="2647:34">c</name><operator pos:start="2647:35" pos:end="2647:36">-&gt;</operator><name pos:start="2647:37" pos:end="2647:44">datarate</name></name></expr></argument>, <argument pos:start="2647:47" pos:end="2647:59"><expr pos:start="2647:47" pos:end="2647:59"><name pos:start="2647:47" pos:end="2647:59"><name pos:start="2647:47" pos:end="2647:47">c</name><operator pos:start="2647:48" pos:end="2647:49">-&gt;</operator><name pos:start="2647:50" pos:end="2647:59">data_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="2648:17" pos:end="2649:51"><if pos:start="2648:17" pos:end="2649:51">if <condition pos:start="2648:20" pos:end="2648:30">(<expr pos:start="2648:21" pos:end="2648:29"><name pos:start="2648:21" pos:end="2648:29"><name pos:start="2648:21" pos:end="2648:21">c</name><operator pos:start="2648:22" pos:end="2648:23">-&gt;</operator><name pos:start="2648:24" pos:end="2648:29">stream</name></name></expr>)</condition><block type="pseudo" pos:start="2649:21" pos:end="2649:51"><block_content pos:start="2649:21" pos:end="2649:51">
                    <expr_stmt pos:start="2649:21" pos:end="2649:51"><expr pos:start="2649:21" pos:end="2649:50"><name pos:start="2649:21" pos:end="2649:43"><name pos:start="2649:21" pos:end="2649:21">c</name><operator pos:start="2649:22" pos:end="2649:23">-&gt;</operator><name pos:start="2649:24" pos:end="2649:29">stream</name><operator pos:start="2649:30" pos:end="2649:31">-&gt;</operator><name pos:start="2649:32" pos:end="2649:43">bytes_served</name></name> <operator pos:start="2649:45" pos:end="2649:46">+=</operator> <name pos:start="2649:48" pos:end="2649:50">len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <break pos:start="2650:17" pos:end="2650:22">break;</break>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for> <comment type="block" pos:start="2653:7" pos:end="2653:19">/* for(;;) */</comment>
    <return pos:start="2654:5" pos:end="2654:13">return <expr pos:start="2654:12" pos:end="2654:12"><literal type="number" pos:start="2654:12" pos:end="2654:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="2657:1" pos:end="2717:1"><type pos:start="2657:1" pos:end="2657:10"><specifier pos:start="2657:1" pos:end="2657:6">static</specifier> <name pos:start="2657:8" pos:end="2657:10">int</name></type> <name pos:start="2657:12" pos:end="2657:34">http_start_receive_data</name><parameter_list pos:start="2657:35" pos:end="2657:50">(<parameter pos:start="2657:36" pos:end="2657:49"><decl pos:start="2657:36" pos:end="2657:49"><type pos:start="2657:36" pos:end="2657:48"><name pos:start="2657:36" pos:end="2657:46">HTTPContext</name> <modifier pos:start="2657:48" pos:end="2657:48">*</modifier></type><name pos:start="2657:49" pos:end="2657:49">c</name></decl></parameter>)</parameter_list>
<block pos:start="2658:1" pos:end="2717:1">{<block_content pos:start="2659:5" pos:end="2716:13">
    <decl_stmt pos:start="2659:5" pos:end="2659:11"><decl pos:start="2659:5" pos:end="2659:10"><type pos:start="2659:5" pos:end="2659:7"><name pos:start="2659:5" pos:end="2659:7">int</name></type> <name pos:start="2659:9" pos:end="2659:10">fd</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2660:5" pos:end="2660:12"><decl pos:start="2660:5" pos:end="2660:11"><type pos:start="2660:5" pos:end="2660:7"><name pos:start="2660:5" pos:end="2660:7">int</name></type> <name pos:start="2660:9" pos:end="2660:11">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2661:5" pos:end="2661:18"><decl pos:start="2661:5" pos:end="2661:17"><type pos:start="2661:5" pos:end="2661:11"><name pos:start="2661:5" pos:end="2661:11">int64_t</name></type> <name pos:start="2661:13" pos:end="2661:17">ret64</name></decl>;</decl_stmt>

    <if_stmt pos:start="2663:5" pos:end="2667:5"><if pos:start="2663:5" pos:end="2667:5">if <condition pos:start="2663:8" pos:end="2663:31">(<expr pos:start="2663:9" pos:end="2663:30"><name pos:start="2663:9" pos:end="2663:30"><name pos:start="2663:9" pos:end="2663:9">c</name><operator pos:start="2663:10" pos:end="2663:11">-&gt;</operator><name pos:start="2663:12" pos:end="2663:17">stream</name><operator pos:start="2663:18" pos:end="2663:19">-&gt;</operator><name pos:start="2663:20" pos:end="2663:30">feed_opened</name></name></expr>)</condition> <block pos:start="2663:33" pos:end="2667:5">{<block_content pos:start="2664:9" pos:end="2666:31">
        <expr_stmt pos:start="2664:9" pos:end="2665:43"><expr pos:start="2664:9" pos:end="2665:42"><call pos:start="2664:9" pos:end="2665:42"><name pos:start="2664:9" pos:end="2664:16">http_log</name><argument_list pos:start="2664:17" pos:end="2665:42">(<argument pos:start="2664:18" pos:end="2664:52"><expr pos:start="2664:18" pos:end="2664:52"><literal type="string" pos:start="2664:18" pos:end="2664:52">"Stream feed '%s' was not opened\n"</literal></expr></argument>,
                 <argument pos:start="2665:18" pos:end="2665:41"><expr pos:start="2665:18" pos:end="2665:41"><name pos:start="2665:18" pos:end="2665:41"><name pos:start="2665:18" pos:end="2665:18">c</name><operator pos:start="2665:19" pos:end="2665:20">-&gt;</operator><name pos:start="2665:21" pos:end="2665:26">stream</name><operator pos:start="2665:27" pos:end="2665:28">-&gt;</operator><name pos:start="2665:29" pos:end="2665:41">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2666:9" pos:end="2666:31">return <expr pos:start="2666:16" pos:end="2666:30"><call pos:start="2666:16" pos:end="2666:30"><name pos:start="2666:16" pos:end="2666:22">AVERROR</name><argument_list pos:start="2666:23" pos:end="2666:30">(<argument pos:start="2666:24" pos:end="2666:29"><expr pos:start="2666:24" pos:end="2666:29"><name pos:start="2666:24" pos:end="2666:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="2669:5" pos:end="2669:42">/* Don't permit writing to this one */</comment>
    <if_stmt pos:start="2670:5" pos:end="2674:5"><if pos:start="2670:5" pos:end="2674:5">if <condition pos:start="2670:8" pos:end="2670:28">(<expr pos:start="2670:9" pos:end="2670:27"><name pos:start="2670:9" pos:end="2670:27"><name pos:start="2670:9" pos:end="2670:9">c</name><operator pos:start="2670:10" pos:end="2670:11">-&gt;</operator><name pos:start="2670:12" pos:end="2670:17">stream</name><operator pos:start="2670:18" pos:end="2670:19">-&gt;</operator><name pos:start="2670:20" pos:end="2670:27">readonly</name></name></expr>)</condition> <block pos:start="2670:30" pos:end="2674:5">{<block_content pos:start="2671:9" pos:end="2673:31">
        <expr_stmt pos:start="2671:9" pos:end="2672:43"><expr pos:start="2671:9" pos:end="2672:42"><call pos:start="2671:9" pos:end="2672:42"><name pos:start="2671:9" pos:end="2671:16">http_log</name><argument_list pos:start="2671:17" pos:end="2672:42">(<argument pos:start="2671:18" pos:end="2671:56"><expr pos:start="2671:18" pos:end="2671:56"><literal type="string" pos:start="2671:18" pos:end="2671:56">"Cannot write to read-only file '%s'\n"</literal></expr></argument>,
                 <argument pos:start="2672:18" pos:end="2672:41"><expr pos:start="2672:18" pos:end="2672:41"><name pos:start="2672:18" pos:end="2672:41"><name pos:start="2672:18" pos:end="2672:18">c</name><operator pos:start="2672:19" pos:end="2672:20">-&gt;</operator><name pos:start="2672:21" pos:end="2672:26">stream</name><operator pos:start="2672:27" pos:end="2672:28">-&gt;</operator><name pos:start="2672:29" pos:end="2672:41">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2673:9" pos:end="2673:31">return <expr pos:start="2673:16" pos:end="2673:30"><call pos:start="2673:16" pos:end="2673:30"><name pos:start="2673:16" pos:end="2673:22">AVERROR</name><argument_list pos:start="2673:23" pos:end="2673:30">(<argument pos:start="2673:24" pos:end="2673:29"><expr pos:start="2673:24" pos:end="2673:29"><name pos:start="2673:24" pos:end="2673:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="2676:5" pos:end="2676:19">/* open feed */</comment>
    <expr_stmt pos:start="2677:5" pos:end="2677:48"><expr pos:start="2677:5" pos:end="2677:47"><name pos:start="2677:5" pos:end="2677:6">fd</name> <operator pos:start="2677:8" pos:end="2677:8">=</operator> <call pos:start="2677:10" pos:end="2677:47"><name pos:start="2677:10" pos:end="2677:13">open</name><argument_list pos:start="2677:14" pos:end="2677:47">(<argument pos:start="2677:15" pos:end="2677:38"><expr pos:start="2677:15" pos:end="2677:38"><name pos:start="2677:15" pos:end="2677:38"><name pos:start="2677:15" pos:end="2677:15">c</name><operator pos:start="2677:16" pos:end="2677:17">-&gt;</operator><name pos:start="2677:18" pos:end="2677:23">stream</name><operator pos:start="2677:24" pos:end="2677:25">-&gt;</operator><name pos:start="2677:26" pos:end="2677:38">feed_filename</name></name></expr></argument>, <argument pos:start="2677:41" pos:end="2677:46"><expr pos:start="2677:41" pos:end="2677:46"><name pos:start="2677:41" pos:end="2677:46">O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="2678:5" pos:end="2683:5"><if pos:start="2678:5" pos:end="2683:5">if <condition pos:start="2678:8" pos:end="2678:15">(<expr pos:start="2678:9" pos:end="2678:14"><name pos:start="2678:9" pos:end="2678:10">fd</name> <operator pos:start="2678:12" pos:end="2678:12">&lt;</operator> <literal type="number" pos:start="2678:14" pos:end="2678:14">0</literal></expr>)</condition> <block pos:start="2678:17" pos:end="2683:5">{<block_content pos:start="2679:9" pos:end="2682:19">
        <expr_stmt pos:start="2679:9" pos:end="2679:29"><expr pos:start="2679:9" pos:end="2679:28"><name pos:start="2679:9" pos:end="2679:11">ret</name> <operator pos:start="2679:13" pos:end="2679:13">=</operator> <call pos:start="2679:15" pos:end="2679:28"><name pos:start="2679:15" pos:end="2679:21">AVERROR</name><argument_list pos:start="2679:22" pos:end="2679:28">(<argument pos:start="2679:23" pos:end="2679:27"><expr pos:start="2679:23" pos:end="2679:27"><name pos:start="2679:23" pos:end="2679:27">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2680:9" pos:end="2681:60"><expr pos:start="2680:9" pos:end="2681:59"><call pos:start="2680:9" pos:end="2681:59"><name pos:start="2680:9" pos:end="2680:16">http_log</name><argument_list pos:start="2680:17" pos:end="2681:59">(<argument pos:start="2680:18" pos:end="2680:54"><expr pos:start="2680:18" pos:end="2680:54"><literal type="string" pos:start="2680:18" pos:end="2680:54">"Could not open feed file '%s': %s\n"</literal></expr></argument>,
                 <argument pos:start="2681:18" pos:end="2681:41"><expr pos:start="2681:18" pos:end="2681:41"><name pos:start="2681:18" pos:end="2681:41"><name pos:start="2681:18" pos:end="2681:18">c</name><operator pos:start="2681:19" pos:end="2681:20">-&gt;</operator><name pos:start="2681:21" pos:end="2681:26">stream</name><operator pos:start="2681:27" pos:end="2681:28">-&gt;</operator><name pos:start="2681:29" pos:end="2681:41">feed_filename</name></name></expr></argument>, <argument pos:start="2681:44" pos:end="2681:58"><expr pos:start="2681:44" pos:end="2681:58"><call pos:start="2681:44" pos:end="2681:58"><name pos:start="2681:44" pos:end="2681:51">strerror</name><argument_list pos:start="2681:52" pos:end="2681:58">(<argument pos:start="2681:53" pos:end="2681:57"><expr pos:start="2681:53" pos:end="2681:57"><name pos:start="2681:53" pos:end="2681:57">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2682:9" pos:end="2682:19">return <expr pos:start="2682:16" pos:end="2682:18"><name pos:start="2682:16" pos:end="2682:18">ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="2684:5" pos:end="2684:20"><expr pos:start="2684:5" pos:end="2684:19"><name pos:start="2684:5" pos:end="2684:14"><name pos:start="2684:5" pos:end="2684:5">c</name><operator pos:start="2684:6" pos:end="2684:7">-&gt;</operator><name pos:start="2684:8" pos:end="2684:14">feed_fd</name></name> <operator pos:start="2684:16" pos:end="2684:16">=</operator> <name pos:start="2684:18" pos:end="2684:19">fd</name></expr>;</expr_stmt>

    <if_stmt pos:start="2686:5" pos:end="2704:5"><if pos:start="2686:5" pos:end="2696:5">if <condition pos:start="2686:8" pos:end="2686:28">(<expr pos:start="2686:9" pos:end="2686:27"><name pos:start="2686:9" pos:end="2686:27"><name pos:start="2686:9" pos:end="2686:9">c</name><operator pos:start="2686:10" pos:end="2686:11">-&gt;</operator><name pos:start="2686:12" pos:end="2686:17">stream</name><operator pos:start="2686:18" pos:end="2686:19">-&gt;</operator><name pos:start="2686:20" pos:end="2686:27">truncate</name></name></expr>)</condition> <block pos:start="2686:30" pos:end="2696:5">{<block_content pos:start="2688:9" pos:end="2695:9">
        <comment type="block" pos:start="2687:9" pos:end="2687:32">/* truncate feed file */</comment>
        <expr_stmt pos:start="2688:9" pos:end="2688:59"><expr pos:start="2688:9" pos:end="2688:58"><call pos:start="2688:9" pos:end="2688:58"><name pos:start="2688:9" pos:end="2688:29">ffm_write_write_index</name><argument_list pos:start="2688:30" pos:end="2688:58">(<argument pos:start="2688:31" pos:end="2688:40"><expr pos:start="2688:31" pos:end="2688:40"><name pos:start="2688:31" pos:end="2688:40"><name pos:start="2688:31" pos:end="2688:31">c</name><operator pos:start="2688:32" pos:end="2688:33">-&gt;</operator><name pos:start="2688:34" pos:end="2688:40">feed_fd</name></name></expr></argument>, <argument pos:start="2688:43" pos:end="2688:57"><expr pos:start="2688:43" pos:end="2688:57"><name pos:start="2688:43" pos:end="2688:57">FFM_PACKET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2689:9" pos:end="2689:74"><expr pos:start="2689:9" pos:end="2689:73"><call pos:start="2689:9" pos:end="2689:73"><name pos:start="2689:9" pos:end="2689:16">http_log</name><argument_list pos:start="2689:17" pos:end="2689:73">(<argument pos:start="2689:18" pos:end="2689:46"><expr pos:start="2689:18" pos:end="2689:46"><literal type="string" pos:start="2689:18" pos:end="2689:46">"Truncating feed file '%s'\n"</literal></expr></argument>, <argument pos:start="2689:49" pos:end="2689:72"><expr pos:start="2689:49" pos:end="2689:72"><name pos:start="2689:49" pos:end="2689:72"><name pos:start="2689:49" pos:end="2689:49">c</name><operator pos:start="2689:50" pos:end="2689:51">-&gt;</operator><name pos:start="2689:52" pos:end="2689:57">stream</name><operator pos:start="2689:58" pos:end="2689:59">-&gt;</operator><name pos:start="2689:60" pos:end="2689:72">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2690:9" pos:end="2695:9"><if pos:start="2690:9" pos:end="2695:9">if <condition pos:start="2690:12" pos:end="2690:55">(<expr pos:start="2690:13" pos:end="2690:54"><call pos:start="2690:13" pos:end="2690:50"><name pos:start="2690:13" pos:end="2690:21">ftruncate</name><argument_list pos:start="2690:22" pos:end="2690:50">(<argument pos:start="2690:23" pos:end="2690:32"><expr pos:start="2690:23" pos:end="2690:32"><name pos:start="2690:23" pos:end="2690:32"><name pos:start="2690:23" pos:end="2690:23">c</name><operator pos:start="2690:24" pos:end="2690:25">-&gt;</operator><name pos:start="2690:26" pos:end="2690:32">feed_fd</name></name></expr></argument>, <argument pos:start="2690:35" pos:end="2690:49"><expr pos:start="2690:35" pos:end="2690:49"><name pos:start="2690:35" pos:end="2690:49">FFM_PACKET_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="2690:52" pos:end="2690:52">&lt;</operator> <literal type="number" pos:start="2690:54" pos:end="2690:54">0</literal></expr>)</condition> <block pos:start="2690:57" pos:end="2695:9">{<block_content pos:start="2691:13" pos:end="2694:23">
            <expr_stmt pos:start="2691:13" pos:end="2691:33"><expr pos:start="2691:13" pos:end="2691:32"><name pos:start="2691:13" pos:end="2691:15">ret</name> <operator pos:start="2691:17" pos:end="2691:17">=</operator> <call pos:start="2691:19" pos:end="2691:32"><name pos:start="2691:19" pos:end="2691:25">AVERROR</name><argument_list pos:start="2691:26" pos:end="2691:32">(<argument pos:start="2691:27" pos:end="2691:31"><expr pos:start="2691:27" pos:end="2691:31"><name pos:start="2691:27" pos:end="2691:31">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2692:13" pos:end="2693:64"><expr pos:start="2692:13" pos:end="2693:63"><call pos:start="2692:13" pos:end="2693:63"><name pos:start="2692:13" pos:end="2692:20">http_log</name><argument_list pos:start="2692:21" pos:end="2693:63">(<argument pos:start="2692:22" pos:end="2692:60"><expr pos:start="2692:22" pos:end="2692:60"><literal type="string" pos:start="2692:22" pos:end="2692:60">"Error truncating feed file '%s': %s\n"</literal></expr></argument>,
                     <argument pos:start="2693:22" pos:end="2693:45"><expr pos:start="2693:22" pos:end="2693:45"><name pos:start="2693:22" pos:end="2693:45"><name pos:start="2693:22" pos:end="2693:22">c</name><operator pos:start="2693:23" pos:end="2693:24">-&gt;</operator><name pos:start="2693:25" pos:end="2693:30">stream</name><operator pos:start="2693:31" pos:end="2693:32">-&gt;</operator><name pos:start="2693:33" pos:end="2693:45">feed_filename</name></name></expr></argument>, <argument pos:start="2693:48" pos:end="2693:62"><expr pos:start="2693:48" pos:end="2693:62"><call pos:start="2693:48" pos:end="2693:62"><name pos:start="2693:48" pos:end="2693:55">strerror</name><argument_list pos:start="2693:56" pos:end="2693:62">(<argument pos:start="2693:57" pos:end="2693:61"><expr pos:start="2693:57" pos:end="2693:61"><name pos:start="2693:57" pos:end="2693:61">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2694:13" pos:end="2694:23">return <expr pos:start="2694:20" pos:end="2694:22"><name pos:start="2694:20" pos:end="2694:22">ret</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else pos:start="2696:7" pos:end="2704:5">else <block pos:start="2696:12" pos:end="2704:5">{<block_content pos:start="2697:9" pos:end="2703:44">
        <expr_stmt pos:start="2697:9" pos:end="2697:41"><expr pos:start="2697:9" pos:end="2697:40"><name pos:start="2697:9" pos:end="2697:13">ret64</name> <operator pos:start="2697:15" pos:end="2697:15">=</operator> <call pos:start="2697:17" pos:end="2697:40"><name pos:start="2697:17" pos:end="2697:36">ffm_read_write_index</name><argument_list pos:start="2697:37" pos:end="2697:40">(<argument pos:start="2697:38" pos:end="2697:39"><expr pos:start="2697:38" pos:end="2697:39"><name pos:start="2697:38" pos:end="2697:39">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2698:9" pos:end="2702:9"><if pos:start="2698:9" pos:end="2702:9">if <condition pos:start="2698:12" pos:end="2698:22">(<expr pos:start="2698:13" pos:end="2698:21"><name pos:start="2698:13" pos:end="2698:17">ret64</name> <operator pos:start="2698:19" pos:end="2698:19">&lt;</operator> <literal type="number" pos:start="2698:21" pos:end="2698:21">0</literal></expr>)</condition> <block pos:start="2698:24" pos:end="2702:9">{<block_content pos:start="2699:13" pos:end="2701:25">
            <expr_stmt pos:start="2699:13" pos:end="2700:64"><expr pos:start="2699:13" pos:end="2700:63"><call pos:start="2699:13" pos:end="2700:63"><name pos:start="2699:13" pos:end="2699:20">http_log</name><argument_list pos:start="2699:21" pos:end="2700:63">(<argument pos:start="2699:22" pos:end="2699:74"><expr pos:start="2699:22" pos:end="2699:74"><literal type="string" pos:start="2699:22" pos:end="2699:74">"Error reading write index from feed file '%s': %s\n"</literal></expr></argument>,
                     <argument pos:start="2700:22" pos:end="2700:45"><expr pos:start="2700:22" pos:end="2700:45"><name pos:start="2700:22" pos:end="2700:45"><name pos:start="2700:22" pos:end="2700:22">c</name><operator pos:start="2700:23" pos:end="2700:24">-&gt;</operator><name pos:start="2700:25" pos:end="2700:30">stream</name><operator pos:start="2700:31" pos:end="2700:32">-&gt;</operator><name pos:start="2700:33" pos:end="2700:45">feed_filename</name></name></expr></argument>, <argument pos:start="2700:48" pos:end="2700:62"><expr pos:start="2700:48" pos:end="2700:62"><call pos:start="2700:48" pos:end="2700:62"><name pos:start="2700:48" pos:end="2700:55">strerror</name><argument_list pos:start="2700:56" pos:end="2700:62">(<argument pos:start="2700:57" pos:end="2700:61"><expr pos:start="2700:57" pos:end="2700:61"><name pos:start="2700:57" pos:end="2700:61">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2701:13" pos:end="2701:25">return <expr pos:start="2701:20" pos:end="2701:24"><name pos:start="2701:20" pos:end="2701:24">ret64</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="2703:9" pos:end="2703:44"><expr pos:start="2703:9" pos:end="2703:43"><name pos:start="2703:9" pos:end="2703:35"><name pos:start="2703:9" pos:end="2703:9">c</name><operator pos:start="2703:10" pos:end="2703:11">-&gt;</operator><name pos:start="2703:12" pos:end="2703:17">stream</name><operator pos:start="2703:18" pos:end="2703:19">-&gt;</operator><name pos:start="2703:20" pos:end="2703:35">feed_write_index</name></name> <operator pos:start="2703:37" pos:end="2703:37">=</operator> <name pos:start="2703:39" pos:end="2703:43">ret64</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="2706:5" pos:end="2707:57"><expr pos:start="2706:5" pos:end="2707:56"><name pos:start="2706:5" pos:end="2706:31"><name pos:start="2706:5" pos:end="2706:5">c</name><operator pos:start="2706:6" pos:end="2706:7">-&gt;</operator><name pos:start="2706:8" pos:end="2706:13">stream</name><operator pos:start="2706:14" pos:end="2706:15">-&gt;</operator><name pos:start="2706:16" pos:end="2706:31">feed_write_index</name></name> <operator pos:start="2706:33" pos:end="2706:33">=</operator> <call pos:start="2706:35" pos:end="2707:56"><name pos:start="2706:35" pos:end="2706:39">FFMAX</name><argument_list pos:start="2706:40" pos:end="2707:56">(<argument pos:start="2706:41" pos:end="2706:64"><expr pos:start="2706:41" pos:end="2706:64"><call pos:start="2706:41" pos:end="2706:64"><name pos:start="2706:41" pos:end="2706:60">ffm_read_write_index</name><argument_list pos:start="2706:61" pos:end="2706:64">(<argument pos:start="2706:62" pos:end="2706:63"><expr pos:start="2706:62" pos:end="2706:63"><name pos:start="2706:62" pos:end="2706:63">fd</name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument pos:start="2707:41" pos:end="2707:55"><expr pos:start="2707:41" pos:end="2707:55"><name pos:start="2707:41" pos:end="2707:55">FFM_PACKET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2708:5" pos:end="2708:50"><expr pos:start="2708:5" pos:end="2708:49"><name pos:start="2708:5" pos:end="2708:24"><name pos:start="2708:5" pos:end="2708:5">c</name><operator pos:start="2708:6" pos:end="2708:7">-&gt;</operator><name pos:start="2708:8" pos:end="2708:13">stream</name><operator pos:start="2708:14" pos:end="2708:15">-&gt;</operator><name pos:start="2708:16" pos:end="2708:24">feed_size</name></name> <operator pos:start="2708:26" pos:end="2708:26">=</operator> <call pos:start="2708:28" pos:end="2708:49"><name pos:start="2708:28" pos:end="2708:32">lseek</name><argument_list pos:start="2708:33" pos:end="2708:49">(<argument pos:start="2708:34" pos:end="2708:35"><expr pos:start="2708:34" pos:end="2708:35"><name pos:start="2708:34" pos:end="2708:35">fd</name></expr></argument>, <argument pos:start="2708:38" pos:end="2708:38"><expr pos:start="2708:38" pos:end="2708:38"><literal type="number" pos:start="2708:38" pos:end="2708:38">0</literal></expr></argument>, <argument pos:start="2708:41" pos:end="2708:48"><expr pos:start="2708:41" pos:end="2708:48"><name pos:start="2708:41" pos:end="2708:48">SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2709:5" pos:end="2709:27"><expr pos:start="2709:5" pos:end="2709:26"><call pos:start="2709:5" pos:end="2709:26"><name pos:start="2709:5" pos:end="2709:9">lseek</name><argument_list pos:start="2709:10" pos:end="2709:26">(<argument pos:start="2709:11" pos:end="2709:12"><expr pos:start="2709:11" pos:end="2709:12"><name pos:start="2709:11" pos:end="2709:12">fd</name></expr></argument>, <argument pos:start="2709:15" pos:end="2709:15"><expr pos:start="2709:15" pos:end="2709:15"><literal type="number" pos:start="2709:15" pos:end="2709:15">0</literal></expr></argument>, <argument pos:start="2709:18" pos:end="2709:25"><expr pos:start="2709:18" pos:end="2709:25"><name pos:start="2709:18" pos:end="2709:25">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="2711:5" pos:end="2711:27">/* init buffer input */</comment>
    <expr_stmt pos:start="2712:5" pos:end="2712:30"><expr pos:start="2712:5" pos:end="2712:29"><name pos:start="2712:5" pos:end="2712:17"><name pos:start="2712:5" pos:end="2712:5">c</name><operator pos:start="2712:6" pos:end="2712:7">-&gt;</operator><name pos:start="2712:8" pos:end="2712:17">buffer_ptr</name></name> <operator pos:start="2712:19" pos:end="2712:19">=</operator> <name pos:start="2712:21" pos:end="2712:29"><name pos:start="2712:21" pos:end="2712:21">c</name><operator pos:start="2712:22" pos:end="2712:23">-&gt;</operator><name pos:start="2712:24" pos:end="2712:29">buffer</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="2713:5" pos:end="2713:48"><expr pos:start="2713:5" pos:end="2713:47"><name pos:start="2713:5" pos:end="2713:17"><name pos:start="2713:5" pos:end="2713:5">c</name><operator pos:start="2713:6" pos:end="2713:7">-&gt;</operator><name pos:start="2713:8" pos:end="2713:17">buffer_end</name></name> <operator pos:start="2713:19" pos:end="2713:19">=</operator> <name pos:start="2713:21" pos:end="2713:29"><name pos:start="2713:21" pos:end="2713:21">c</name><operator pos:start="2713:22" pos:end="2713:23">-&gt;</operator><name pos:start="2713:24" pos:end="2713:29">buffer</name></name> <operator pos:start="2713:31" pos:end="2713:31">+</operator> <name pos:start="2713:33" pos:end="2713:47">FFM_PACKET_SIZE</name></expr>;</expr_stmt>
    <expr_stmt pos:start="2714:5" pos:end="2714:31"><expr pos:start="2714:5" pos:end="2714:30"><name pos:start="2714:5" pos:end="2714:26"><name pos:start="2714:5" pos:end="2714:5">c</name><operator pos:start="2714:6" pos:end="2714:7">-&gt;</operator><name pos:start="2714:8" pos:end="2714:13">stream</name><operator pos:start="2714:14" pos:end="2714:15">-&gt;</operator><name pos:start="2714:16" pos:end="2714:26">feed_opened</name></name> <operator pos:start="2714:28" pos:end="2714:28">=</operator> <literal type="number" pos:start="2714:30" pos:end="2714:30">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="2715:5" pos:end="2715:80"><expr pos:start="2715:5" pos:end="2715:79"><name pos:start="2715:5" pos:end="2715:23"><name pos:start="2715:5" pos:end="2715:5">c</name><operator pos:start="2715:6" pos:end="2715:7">-&gt;</operator><name pos:start="2715:8" pos:end="2715:23">chunked_encoding</name></name> <operator pos:start="2715:25" pos:end="2715:25">=</operator> <operator pos:start="2715:27" pos:end="2715:27">!</operator><operator pos:start="2715:28" pos:end="2715:28">!</operator><call pos:start="2715:29" pos:end="2715:79"><name pos:start="2715:29" pos:end="2715:38">av_stristr</name><argument_list pos:start="2715:39" pos:end="2715:79">(<argument pos:start="2715:40" pos:end="2715:48"><expr pos:start="2715:40" pos:end="2715:48"><name pos:start="2715:40" pos:end="2715:48"><name pos:start="2715:40" pos:end="2715:40">c</name><operator pos:start="2715:41" pos:end="2715:42">-&gt;</operator><name pos:start="2715:43" pos:end="2715:48">buffer</name></name></expr></argument>, <argument pos:start="2715:51" pos:end="2715:78"><expr pos:start="2715:51" pos:end="2715:78"><literal type="string" pos:start="2715:51" pos:end="2715:78">"Transfer-Encoding: chunked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="2716:5" pos:end="2716:13">return <expr pos:start="2716:12" pos:end="2716:12"><literal type="number" pos:start="2716:12" pos:end="2716:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="2719:1" pos:end="2881:1"><type pos:start="2719:1" pos:end="2719:10"><specifier pos:start="2719:1" pos:end="2719:6">static</specifier> <name pos:start="2719:8" pos:end="2719:10">int</name></type> <name pos:start="2719:12" pos:end="2719:28">http_receive_data</name><parameter_list pos:start="2719:29" pos:end="2719:44">(<parameter pos:start="2719:30" pos:end="2719:43"><decl pos:start="2719:30" pos:end="2719:43"><type pos:start="2719:30" pos:end="2719:42"><name pos:start="2719:30" pos:end="2719:40">HTTPContext</name> <modifier pos:start="2719:42" pos:end="2719:42">*</modifier></type><name pos:start="2719:43" pos:end="2719:43">c</name></decl></parameter>)</parameter_list>
<block pos:start="2720:1" pos:end="2881:1">{<block_content pos:start="2721:5" pos:end="2880:14">
    <decl_stmt pos:start="2721:5" pos:end="2721:20"><decl pos:start="2721:5" pos:end="2721:19"><type pos:start="2721:5" pos:end="2721:17"><name pos:start="2721:5" pos:end="2721:15">HTTPContext</name> <modifier pos:start="2721:17" pos:end="2721:17">*</modifier></type><name pos:start="2721:18" pos:end="2721:19">c1</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2722:5" pos:end="2722:26"><decl pos:start="2722:5" pos:end="2722:11"><type pos:start="2722:5" pos:end="2722:7"><name pos:start="2722:5" pos:end="2722:7">int</name></type> <name pos:start="2722:9" pos:end="2722:11">len</name></decl>, <decl pos:start="2722:14" pos:end="2722:25"><type ref="prev" pos:start="2722:5" pos:end="2722:7"/><name pos:start="2722:14" pos:end="2722:21">loop_run</name> <init pos:start="2722:23" pos:end="2722:25">= <expr pos:start="2722:25" pos:end="2722:25"><literal type="number" pos:start="2722:25" pos:end="2722:25">0</literal></expr></init></decl>;</decl_stmt>

    <while pos:start="2724:5" pos:end="2752:5">while <condition pos:start="2724:11" pos:end="2725:41">(<expr pos:start="2724:12" pos:end="2725:40"><name pos:start="2724:12" pos:end="2724:30"><name pos:start="2724:12" pos:end="2724:12">c</name><operator pos:start="2724:13" pos:end="2724:14">-&gt;</operator><name pos:start="2724:15" pos:end="2724:30">chunked_encoding</name></name> <operator pos:start="2724:32" pos:end="2724:33">&amp;&amp;</operator> <operator pos:start="2724:35" pos:end="2724:35">!</operator><name pos:start="2724:36" pos:end="2724:48"><name pos:start="2724:36" pos:end="2724:36">c</name><operator pos:start="2724:37" pos:end="2724:38">-&gt;</operator><name pos:start="2724:39" pos:end="2724:48">chunk_size</name></name> <operator pos:start="2724:50" pos:end="2724:51">&amp;&amp;</operator>
           <name pos:start="2725:12" pos:end="2725:24"><name pos:start="2725:12" pos:end="2725:12">c</name><operator pos:start="2725:13" pos:end="2725:14">-&gt;</operator><name pos:start="2725:15" pos:end="2725:24">buffer_end</name></name> <operator pos:start="2725:26" pos:end="2725:26">&gt;</operator> <name pos:start="2725:28" pos:end="2725:40"><name pos:start="2725:28" pos:end="2725:28">c</name><operator pos:start="2725:29" pos:end="2725:30">-&gt;</operator><name pos:start="2725:31" pos:end="2725:40">buffer_ptr</name></name></expr>)</condition> <block pos:start="2725:43" pos:end="2752:5">{<block_content pos:start="2727:9" pos:end="2751:28">
        <comment type="block" pos:start="2726:9" pos:end="2726:43">/* read chunk header, if present */</comment>
        <expr_stmt pos:start="2727:9" pos:end="2727:47"><expr pos:start="2727:9" pos:end="2727:46"><name pos:start="2727:9" pos:end="2727:11">len</name> <operator pos:start="2727:13" pos:end="2727:13">=</operator> <call pos:start="2727:15" pos:end="2727:46"><name pos:start="2727:15" pos:end="2727:18">recv</name><argument_list pos:start="2727:19" pos:end="2727:46">(<argument pos:start="2727:20" pos:end="2727:24"><expr pos:start="2727:20" pos:end="2727:24"><name pos:start="2727:20" pos:end="2727:24"><name pos:start="2727:20" pos:end="2727:20">c</name><operator pos:start="2727:21" pos:end="2727:22">-&gt;</operator><name pos:start="2727:23" pos:end="2727:24">fd</name></name></expr></argument>, <argument pos:start="2727:27" pos:end="2727:39"><expr pos:start="2727:27" pos:end="2727:39"><name pos:start="2727:27" pos:end="2727:39"><name pos:start="2727:27" pos:end="2727:27">c</name><operator pos:start="2727:28" pos:end="2727:29">-&gt;</operator><name pos:start="2727:30" pos:end="2727:39">buffer_ptr</name></name></expr></argument>, <argument pos:start="2727:42" pos:end="2727:42"><expr pos:start="2727:42" pos:end="2727:42"><literal type="number" pos:start="2727:42" pos:end="2727:42">1</literal></expr></argument>, <argument pos:start="2727:45" pos:end="2727:45"><expr pos:start="2727:45" pos:end="2727:45"><literal type="number" pos:start="2727:45" pos:end="2727:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2729:9" pos:end="2751:28"><if pos:start="2729:9" pos:end="2735:9">if <condition pos:start="2729:12" pos:end="2729:20">(<expr pos:start="2729:13" pos:end="2729:19"><name pos:start="2729:13" pos:end="2729:15">len</name> <operator pos:start="2729:17" pos:end="2729:17">&lt;</operator> <literal type="number" pos:start="2729:19" pos:end="2729:19">0</literal></expr>)</condition> <block pos:start="2729:22" pos:end="2735:9">{<block_content pos:start="2730:13" pos:end="2734:21">
            <if_stmt pos:start="2730:13" pos:end="2733:26"><if pos:start="2730:13" pos:end="2733:26">if <condition pos:start="2730:16" pos:end="2731:48">(<expr pos:start="2730:17" pos:end="2731:47"><call pos:start="2730:17" pos:end="2730:29"><name pos:start="2730:17" pos:end="2730:27">ff_neterrno</name><argument_list pos:start="2730:28" pos:end="2730:29">()</argument_list></call> <operator pos:start="2730:31" pos:end="2730:32">!=</operator> <call pos:start="2730:34" pos:end="2730:48"><name pos:start="2730:34" pos:end="2730:40">AVERROR</name><argument_list pos:start="2730:41" pos:end="2730:48">(<argument pos:start="2730:42" pos:end="2730:47"><expr pos:start="2730:42" pos:end="2730:47"><name pos:start="2730:42" pos:end="2730:47">EAGAIN</name></expr></argument>)</argument_list></call> <operator pos:start="2730:50" pos:end="2730:51">&amp;&amp;</operator>
                <call pos:start="2731:17" pos:end="2731:29"><name pos:start="2731:17" pos:end="2731:27">ff_neterrno</name><argument_list pos:start="2731:28" pos:end="2731:29">()</argument_list></call> <operator pos:start="2731:31" pos:end="2731:32">!=</operator> <call pos:start="2731:34" pos:end="2731:47"><name pos:start="2731:34" pos:end="2731:40">AVERROR</name><argument_list pos:start="2731:41" pos:end="2731:47">(<argument pos:start="2731:42" pos:end="2731:46"><expr pos:start="2731:42" pos:end="2731:46"><name pos:start="2731:42" pos:end="2731:46">EINTR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2733:17" pos:end="2733:26"><block_content pos:start="2733:17" pos:end="2733:26">
                <comment type="block" pos:start="2732:17" pos:end="2732:46">/* error : close connection */</comment>
                <goto pos:start="2733:17" pos:end="2733:26">goto <name pos:start="2733:22" pos:end="2733:25">fail</name>;</goto></block_content></block></if></if_stmt>
            <return pos:start="2734:13" pos:end="2734:21">return <expr pos:start="2734:20" pos:end="2734:20"><literal type="number" pos:start="2734:20" pos:end="2734:20">0</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif" pos:start="2735:11" pos:end="2738:9">else if <condition pos:start="2735:19" pos:end="2735:28">(<expr pos:start="2735:20" pos:end="2735:27"><name pos:start="2735:20" pos:end="2735:22">len</name> <operator pos:start="2735:24" pos:end="2735:25">==</operator> <literal type="number" pos:start="2735:27" pos:end="2735:27">0</literal></expr>)</condition> <block pos:start="2735:30" pos:end="2738:9">{<block_content pos:start="2737:13" pos:end="2737:22">
            <comment type="block" pos:start="2736:13" pos:end="2736:46">/* end of connection : close it */</comment>
            <goto pos:start="2737:13" pos:end="2737:22">goto <name pos:start="2737:18" pos:end="2737:21">fail</name>;</goto>
        </block_content>}</block></if> <if type="elseif" pos:start="2738:11" pos:end="2747:9">else if <condition pos:start="2738:19" pos:end="2739:57">(<expr pos:start="2738:20" pos:end="2739:56"><name pos:start="2738:20" pos:end="2738:32"><name pos:start="2738:20" pos:end="2738:20">c</name><operator pos:start="2738:21" pos:end="2738:22">-&gt;</operator><name pos:start="2738:23" pos:end="2738:32">buffer_ptr</name></name> <operator pos:start="2738:34" pos:end="2738:34">-</operator> <name pos:start="2738:36" pos:end="2738:44"><name pos:start="2738:36" pos:end="2738:36">c</name><operator pos:start="2738:37" pos:end="2738:38">-&gt;</operator><name pos:start="2738:39" pos:end="2738:44">buffer</name></name> <operator pos:start="2738:46" pos:end="2738:47">&gt;=</operator> <literal type="number" pos:start="2738:49" pos:end="2738:49">2</literal> <operator pos:start="2738:51" pos:end="2738:52">&amp;&amp;</operator>
                   <operator pos:start="2739:20" pos:end="2739:20">!</operator><call pos:start="2739:21" pos:end="2739:56"><name pos:start="2739:21" pos:end="2739:26">memcmp</name><argument_list pos:start="2739:27" pos:end="2739:56">(<argument pos:start="2739:28" pos:end="2739:44"><expr pos:start="2739:28" pos:end="2739:44"><name pos:start="2739:28" pos:end="2739:40"><name pos:start="2739:28" pos:end="2739:28">c</name><operator pos:start="2739:29" pos:end="2739:30">-&gt;</operator><name pos:start="2739:31" pos:end="2739:40">buffer_ptr</name></name> <operator pos:start="2739:42" pos:end="2739:42">-</operator> <literal type="number" pos:start="2739:44" pos:end="2739:44">1</literal></expr></argument>, <argument pos:start="2739:47" pos:end="2739:52"><expr pos:start="2739:47" pos:end="2739:52"><literal type="string" pos:start="2739:47" pos:end="2739:52">"\r\n"</literal></expr></argument>, <argument pos:start="2739:55" pos:end="2739:55"><expr pos:start="2739:55" pos:end="2739:55"><literal type="number" pos:start="2739:55" pos:end="2739:55">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2739:59" pos:end="2747:9">{<block_content pos:start="2740:13" pos:end="2746:18">
            <expr_stmt pos:start="2740:13" pos:end="2740:53"><expr pos:start="2740:13" pos:end="2740:52"><name pos:start="2740:13" pos:end="2740:25"><name pos:start="2740:13" pos:end="2740:13">c</name><operator pos:start="2740:14" pos:end="2740:15">-&gt;</operator><name pos:start="2740:16" pos:end="2740:25">chunk_size</name></name> <operator pos:start="2740:27" pos:end="2740:27">=</operator> <call pos:start="2740:29" pos:end="2740:52"><name pos:start="2740:29" pos:end="2740:34">strtol</name><argument_list pos:start="2740:35" pos:end="2740:52">(<argument pos:start="2740:36" pos:end="2740:44"><expr pos:start="2740:36" pos:end="2740:44"><name pos:start="2740:36" pos:end="2740:44"><name pos:start="2740:36" pos:end="2740:36">c</name><operator pos:start="2740:37" pos:end="2740:38">-&gt;</operator><name pos:start="2740:39" pos:end="2740:44">buffer</name></name></expr></argument>, <argument pos:start="2740:47" pos:end="2740:47"><expr pos:start="2740:47" pos:end="2740:47"><literal type="number" pos:start="2740:47" pos:end="2740:47">0</literal></expr></argument>, <argument pos:start="2740:50" pos:end="2740:51"><expr pos:start="2740:50" pos:end="2740:51"><literal type="number" pos:start="2740:50" pos:end="2740:51">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2741:13" pos:end="2744:13"><if pos:start="2741:13" pos:end="2744:13">if <condition pos:start="2741:16" pos:end="2741:35">(<expr pos:start="2741:17" pos:end="2741:34"><name pos:start="2741:17" pos:end="2741:29"><name pos:start="2741:17" pos:end="2741:17">c</name><operator pos:start="2741:18" pos:end="2741:19">-&gt;</operator><name pos:start="2741:20" pos:end="2741:29">chunk_size</name></name> <operator pos:start="2741:31" pos:end="2741:32">&lt;=</operator> <literal type="number" pos:start="2741:34" pos:end="2741:34">0</literal></expr>)</condition> <block pos:start="2741:37" pos:end="2744:13">{<block_content pos:start="2742:17" pos:end="2743:26"> <comment type="line" pos:start="2741:39" pos:end="2741:76">// end of stream or invalid chunk size</comment>
                <expr_stmt pos:start="2742:17" pos:end="2742:34"><expr pos:start="2742:17" pos:end="2742:33"><name pos:start="2742:17" pos:end="2742:29"><name pos:start="2742:17" pos:end="2742:17">c</name><operator pos:start="2742:18" pos:end="2742:19">-&gt;</operator><name pos:start="2742:20" pos:end="2742:29">chunk_size</name></name> <operator pos:start="2742:31" pos:end="2742:31">=</operator> <literal type="number" pos:start="2742:33" pos:end="2742:33">0</literal></expr>;</expr_stmt>
                <goto pos:start="2743:17" pos:end="2743:26">goto <name pos:start="2743:22" pos:end="2743:25">fail</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="2745:13" pos:end="2745:38"><expr pos:start="2745:13" pos:end="2745:37"><name pos:start="2745:13" pos:end="2745:25"><name pos:start="2745:13" pos:end="2745:13">c</name><operator pos:start="2745:14" pos:end="2745:15">-&gt;</operator><name pos:start="2745:16" pos:end="2745:25">buffer_ptr</name></name> <operator pos:start="2745:27" pos:end="2745:27">=</operator> <name pos:start="2745:29" pos:end="2745:37"><name pos:start="2745:29" pos:end="2745:29">c</name><operator pos:start="2745:30" pos:end="2745:31">-&gt;</operator><name pos:start="2745:32" pos:end="2745:37">buffer</name></name></expr>;</expr_stmt>
            <break pos:start="2746:13" pos:end="2746:18">break;</break>
        </block_content>}</block></if> <if type="elseif" pos:start="2747:11" pos:end="2749:22">else if <condition pos:start="2747:19" pos:end="2747:35">(<expr pos:start="2747:20" pos:end="2747:34"><operator pos:start="2747:20" pos:end="2747:21">++</operator><name pos:start="2747:22" pos:end="2747:29">loop_run</name> <operator pos:start="2747:31" pos:end="2747:31">&gt;</operator> <literal type="number" pos:start="2747:33" pos:end="2747:34">10</literal></expr>)</condition><block type="pseudo" pos:start="2749:13" pos:end="2749:22"><block_content pos:start="2749:13" pos:end="2749:22">
            <comment type="block" pos:start="2748:13" pos:end="2748:40">/* no chunk header, abort */</comment>
            <goto pos:start="2749:13" pos:end="2749:22">goto <name pos:start="2749:18" pos:end="2749:21">fail</name>;</goto></block_content></block></if>
        <else pos:start="2750:9" pos:end="2751:28">else<block type="pseudo" pos:start="2751:13" pos:end="2751:28"><block_content pos:start="2751:13" pos:end="2751:28">
            <expr_stmt pos:start="2751:13" pos:end="2751:28"><expr pos:start="2751:13" pos:end="2751:27"><name pos:start="2751:13" pos:end="2751:25"><name pos:start="2751:13" pos:end="2751:13">c</name><operator pos:start="2751:14" pos:end="2751:15">-&gt;</operator><name pos:start="2751:16" pos:end="2751:25">buffer_ptr</name></name><operator pos:start="2751:26" pos:end="2751:27">++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></while>

    <if_stmt pos:start="2754:5" pos:end="2772:5"><if pos:start="2754:5" pos:end="2772:5">if <condition pos:start="2754:8" pos:end="2754:38">(<expr pos:start="2754:9" pos:end="2754:37"><name pos:start="2754:9" pos:end="2754:21"><name pos:start="2754:9" pos:end="2754:9">c</name><operator pos:start="2754:10" pos:end="2754:11">-&gt;</operator><name pos:start="2754:12" pos:end="2754:21">buffer_end</name></name> <operator pos:start="2754:23" pos:end="2754:23">&gt;</operator> <name pos:start="2754:25" pos:end="2754:37"><name pos:start="2754:25" pos:end="2754:25">c</name><operator pos:start="2754:26" pos:end="2754:27">-&gt;</operator><name pos:start="2754:28" pos:end="2754:37">buffer_ptr</name></name></expr>)</condition> <block pos:start="2754:40" pos:end="2772:5">{<block_content pos:start="2755:9" pos:end="2771:9">
        <expr_stmt pos:start="2755:9" pos:end="2756:75"><expr pos:start="2755:9" pos:end="2756:74"><name pos:start="2755:9" pos:end="2755:11">len</name> <operator pos:start="2755:13" pos:end="2755:13">=</operator> <call pos:start="2755:15" pos:end="2756:74"><name pos:start="2755:15" pos:end="2755:18">recv</name><argument_list pos:start="2755:19" pos:end="2756:74">(<argument pos:start="2755:20" pos:end="2755:24"><expr pos:start="2755:20" pos:end="2755:24"><name pos:start="2755:20" pos:end="2755:24"><name pos:start="2755:20" pos:end="2755:20">c</name><operator pos:start="2755:21" pos:end="2755:22">-&gt;</operator><name pos:start="2755:23" pos:end="2755:24">fd</name></name></expr></argument>, <argument pos:start="2755:27" pos:end="2755:39"><expr pos:start="2755:27" pos:end="2755:39"><name pos:start="2755:27" pos:end="2755:39"><name pos:start="2755:27" pos:end="2755:27">c</name><operator pos:start="2755:28" pos:end="2755:29">-&gt;</operator><name pos:start="2755:30" pos:end="2755:39">buffer_ptr</name></name></expr></argument>,
                   <argument pos:start="2756:20" pos:end="2756:70"><expr pos:start="2756:20" pos:end="2756:70"><call pos:start="2756:20" pos:end="2756:70"><name pos:start="2756:20" pos:end="2756:24">FFMIN</name><argument_list pos:start="2756:25" pos:end="2756:70">(<argument pos:start="2756:26" pos:end="2756:38"><expr pos:start="2756:26" pos:end="2756:38"><name pos:start="2756:26" pos:end="2756:38"><name pos:start="2756:26" pos:end="2756:26">c</name><operator pos:start="2756:27" pos:end="2756:28">-&gt;</operator><name pos:start="2756:29" pos:end="2756:38">chunk_size</name></name></expr></argument>, <argument pos:start="2756:41" pos:end="2756:69"><expr pos:start="2756:41" pos:end="2756:69"><name pos:start="2756:41" pos:end="2756:53"><name pos:start="2756:41" pos:end="2756:41">c</name><operator pos:start="2756:42" pos:end="2756:43">-&gt;</operator><name pos:start="2756:44" pos:end="2756:53">buffer_end</name></name> <operator pos:start="2756:55" pos:end="2756:55">-</operator> <name pos:start="2756:57" pos:end="2756:69"><name pos:start="2756:57" pos:end="2756:57">c</name><operator pos:start="2756:58" pos:end="2756:59">-&gt;</operator><name pos:start="2756:60" pos:end="2756:69">buffer_ptr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2756:73" pos:end="2756:73"><expr pos:start="2756:73" pos:end="2756:73"><literal type="number" pos:start="2756:73" pos:end="2756:73">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2757:9" pos:end="2771:9"><if pos:start="2757:9" pos:end="2762:9">if <condition pos:start="2757:12" pos:end="2757:20">(<expr pos:start="2757:13" pos:end="2757:19"><name pos:start="2757:13" pos:end="2757:15">len</name> <operator pos:start="2757:17" pos:end="2757:17">&lt;</operator> <literal type="number" pos:start="2757:19" pos:end="2757:19">0</literal></expr>)</condition> <block pos:start="2757:22" pos:end="2762:9">{<block_content pos:start="2758:13" pos:end="2761:26">
            <if_stmt pos:start="2758:13" pos:end="2761:26"><if pos:start="2758:13" pos:end="2761:26">if <condition pos:start="2758:16" pos:end="2759:48">(<expr pos:start="2758:17" pos:end="2759:47"><call pos:start="2758:17" pos:end="2758:29"><name pos:start="2758:17" pos:end="2758:27">ff_neterrno</name><argument_list pos:start="2758:28" pos:end="2758:29">()</argument_list></call> <operator pos:start="2758:31" pos:end="2758:32">!=</operator> <call pos:start="2758:34" pos:end="2758:48"><name pos:start="2758:34" pos:end="2758:40">AVERROR</name><argument_list pos:start="2758:41" pos:end="2758:48">(<argument pos:start="2758:42" pos:end="2758:47"><expr pos:start="2758:42" pos:end="2758:47"><name pos:start="2758:42" pos:end="2758:47">EAGAIN</name></expr></argument>)</argument_list></call> <operator pos:start="2758:50" pos:end="2758:51">&amp;&amp;</operator>
                <call pos:start="2759:17" pos:end="2759:29"><name pos:start="2759:17" pos:end="2759:27">ff_neterrno</name><argument_list pos:start="2759:28" pos:end="2759:29">()</argument_list></call> <operator pos:start="2759:31" pos:end="2759:32">!=</operator> <call pos:start="2759:34" pos:end="2759:47"><name pos:start="2759:34" pos:end="2759:40">AVERROR</name><argument_list pos:start="2759:41" pos:end="2759:47">(<argument pos:start="2759:42" pos:end="2759:46"><expr pos:start="2759:42" pos:end="2759:46"><name pos:start="2759:42" pos:end="2759:46">EINTR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2761:17" pos:end="2761:26"><block_content pos:start="2761:17" pos:end="2761:26">
                <comment type="block" pos:start="2760:17" pos:end="2760:46">/* error : close connection */</comment>
                <goto pos:start="2761:17" pos:end="2761:26">goto <name pos:start="2761:22" pos:end="2761:25">fail</name>;</goto></block_content></block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="2762:11" pos:end="2764:22">else if <condition pos:start="2762:19" pos:end="2762:28">(<expr pos:start="2762:20" pos:end="2762:27"><name pos:start="2762:20" pos:end="2762:22">len</name> <operator pos:start="2762:24" pos:end="2762:25">==</operator> <literal type="number" pos:start="2762:27" pos:end="2762:27">0</literal></expr>)</condition><block type="pseudo" pos:start="2764:13" pos:end="2764:22"><block_content pos:start="2764:13" pos:end="2764:22">
            <comment type="block" pos:start="2763:13" pos:end="2763:46">/* end of connection : close it */</comment>
            <goto pos:start="2764:13" pos:end="2764:22">goto <name pos:start="2764:18" pos:end="2764:21">fail</name>;</goto></block_content></block></if>
        <else pos:start="2765:9" pos:end="2771:9">else <block pos:start="2765:14" pos:end="2771:9">{<block_content pos:start="2766:13" pos:end="2770:57">
            <expr_stmt pos:start="2766:13" pos:end="2766:45"><expr pos:start="2766:13" pos:end="2766:44"><call pos:start="2766:13" pos:end="2766:44"><name pos:start="2766:13" pos:end="2766:22">av_assert0</name><argument_list pos:start="2766:23" pos:end="2766:44">(<argument pos:start="2766:24" pos:end="2766:43"><expr pos:start="2766:24" pos:end="2766:43"><name pos:start="2766:24" pos:end="2766:26">len</name> <operator pos:start="2766:28" pos:end="2766:29">&lt;=</operator> <name pos:start="2766:31" pos:end="2766:43"><name pos:start="2766:31" pos:end="2766:31">c</name><operator pos:start="2766:32" pos:end="2766:33">-&gt;</operator><name pos:start="2766:34" pos:end="2766:43">chunk_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2767:13" pos:end="2767:33"><expr pos:start="2767:13" pos:end="2767:32"><name pos:start="2767:13" pos:end="2767:25"><name pos:start="2767:13" pos:end="2767:13">c</name><operator pos:start="2767:14" pos:end="2767:15">-&gt;</operator><name pos:start="2767:16" pos:end="2767:25">chunk_size</name></name> <operator pos:start="2767:27" pos:end="2767:28">-=</operator> <name pos:start="2767:30" pos:end="2767:32">len</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2768:13" pos:end="2768:33"><expr pos:start="2768:13" pos:end="2768:32"><name pos:start="2768:13" pos:end="2768:25"><name pos:start="2768:13" pos:end="2768:13">c</name><operator pos:start="2768:14" pos:end="2768:15">-&gt;</operator><name pos:start="2768:16" pos:end="2768:25">buffer_ptr</name></name> <operator pos:start="2768:27" pos:end="2768:28">+=</operator> <name pos:start="2768:30" pos:end="2768:32">len</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2769:13" pos:end="2769:33"><expr pos:start="2769:13" pos:end="2769:32"><name pos:start="2769:13" pos:end="2769:25"><name pos:start="2769:13" pos:end="2769:13">c</name><operator pos:start="2769:14" pos:end="2769:15">-&gt;</operator><name pos:start="2769:16" pos:end="2769:25">data_count</name></name> <operator pos:start="2769:27" pos:end="2769:28">+=</operator> <name pos:start="2769:30" pos:end="2769:32">len</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2770:13" pos:end="2770:57"><expr pos:start="2770:13" pos:end="2770:56"><call pos:start="2770:13" pos:end="2770:56"><name pos:start="2770:13" pos:end="2770:27">update_datarate</name><argument_list pos:start="2770:28" pos:end="2770:56">(<argument pos:start="2770:29" pos:end="2770:40"><expr pos:start="2770:29" pos:end="2770:40"><operator pos:start="2770:29" pos:end="2770:29">&amp;</operator><name pos:start="2770:30" pos:end="2770:40"><name pos:start="2770:30" pos:end="2770:30">c</name><operator pos:start="2770:31" pos:end="2770:32">-&gt;</operator><name pos:start="2770:33" pos:end="2770:40">datarate</name></name></expr></argument>, <argument pos:start="2770:43" pos:end="2770:55"><expr pos:start="2770:43" pos:end="2770:55"><name pos:start="2770:43" pos:end="2770:55"><name pos:start="2770:43" pos:end="2770:43">c</name><operator pos:start="2770:44" pos:end="2770:45">-&gt;</operator><name pos:start="2770:46" pos:end="2770:55">data_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="2774:5" pos:end="2780:5"><if pos:start="2774:5" pos:end="2780:5">if <condition pos:start="2774:8" pos:end="2774:74">(<expr pos:start="2774:9" pos:end="2774:73"><name pos:start="2774:9" pos:end="2774:21"><name pos:start="2774:9" pos:end="2774:9">c</name><operator pos:start="2774:10" pos:end="2774:11">-&gt;</operator><name pos:start="2774:12" pos:end="2774:21">buffer_ptr</name></name> <operator pos:start="2774:23" pos:end="2774:23">-</operator> <name pos:start="2774:25" pos:end="2774:33"><name pos:start="2774:25" pos:end="2774:25">c</name><operator pos:start="2774:26" pos:end="2774:27">-&gt;</operator><name pos:start="2774:28" pos:end="2774:33">buffer</name></name> <operator pos:start="2774:35" pos:end="2774:36">&gt;=</operator> <literal type="number" pos:start="2774:38" pos:end="2774:38">2</literal> <operator pos:start="2774:40" pos:end="2774:41">&amp;&amp;</operator> <name pos:start="2774:43" pos:end="2774:55"><name pos:start="2774:43" pos:end="2774:43">c</name><operator pos:start="2774:44" pos:end="2774:45">-&gt;</operator><name pos:start="2774:46" pos:end="2774:55">data_count</name></name> <operator pos:start="2774:57" pos:end="2774:57">&gt;</operator> <name pos:start="2774:59" pos:end="2774:73">FFM_PACKET_SIZE</name></expr>)</condition> <block pos:start="2774:76" pos:end="2780:5">{<block_content pos:start="2775:9" pos:end="2779:9">
        <if_stmt pos:start="2775:9" pos:end="2779:9"><if pos:start="2775:9" pos:end="2779:9">if <condition pos:start="2775:12" pos:end="2776:32">(<expr pos:start="2775:13" pos:end="2776:31"><name pos:start="2775:13" pos:end="2775:24"><name pos:start="2775:13" pos:end="2775:13">c</name><operator pos:start="2775:14" pos:end="2775:15">-&gt;</operator><name pos:start="2775:16" pos:end="2775:21">buffer</name><index pos:start="2775:22" pos:end="2775:24">[<expr pos:start="2775:23" pos:end="2775:23"><literal type="number" pos:start="2775:23" pos:end="2775:23">0</literal></expr>]</index></name> <operator pos:start="2775:26" pos:end="2775:27">!=</operator> <literal type="char" pos:start="2775:29" pos:end="2775:31">'f'</literal> <operator pos:start="2775:33" pos:end="2775:34">||</operator>
            <name pos:start="2776:13" pos:end="2776:24"><name pos:start="2776:13" pos:end="2776:13">c</name><operator pos:start="2776:14" pos:end="2776:15">-&gt;</operator><name pos:start="2776:16" pos:end="2776:21">buffer</name><index pos:start="2776:22" pos:end="2776:24">[<expr pos:start="2776:23" pos:end="2776:23"><literal type="number" pos:start="2776:23" pos:end="2776:23">1</literal></expr>]</index></name> <operator pos:start="2776:26" pos:end="2776:27">!=</operator> <literal type="char" pos:start="2776:29" pos:end="2776:31">'m'</literal></expr>)</condition> <block pos:start="2776:34" pos:end="2779:9">{<block_content pos:start="2777:13" pos:end="2778:22">
            <expr_stmt pos:start="2777:13" pos:end="2777:81"><expr pos:start="2777:13" pos:end="2777:80"><call pos:start="2777:13" pos:end="2777:80"><name pos:start="2777:13" pos:end="2777:20">http_log</name><argument_list pos:start="2777:21" pos:end="2777:80">(<argument pos:start="2777:22" pos:end="2777:79"><expr pos:start="2777:22" pos:end="2777:79"><literal type="string" pos:start="2777:22" pos:end="2777:79">"Feed stream has become desynchronized -- disconnecting\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto pos:start="2778:13" pos:end="2778:22">goto <name pos:start="2778:18" pos:end="2778:21">fail</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="2782:5" pos:end="2868:5"><if pos:start="2782:5" pos:end="2868:5">if <condition pos:start="2782:8" pos:end="2782:39">(<expr pos:start="2782:9" pos:end="2782:38"><name pos:start="2782:9" pos:end="2782:21"><name pos:start="2782:9" pos:end="2782:9">c</name><operator pos:start="2782:10" pos:end="2782:11">-&gt;</operator><name pos:start="2782:12" pos:end="2782:21">buffer_ptr</name></name> <operator pos:start="2782:23" pos:end="2782:24">&gt;=</operator> <name pos:start="2782:26" pos:end="2782:38"><name pos:start="2782:26" pos:end="2782:26">c</name><operator pos:start="2782:27" pos:end="2782:28">-&gt;</operator><name pos:start="2782:29" pos:end="2782:38">buffer_end</name></name></expr>)</condition> <block pos:start="2782:41" pos:end="2868:5">{<block_content pos:start="2783:9" pos:end="2867:34">
        <decl_stmt pos:start="2783:9" pos:end="2783:41"><decl pos:start="2783:9" pos:end="2783:40"><type pos:start="2783:9" pos:end="2783:24"><name pos:start="2783:9" pos:end="2783:22">FFServerStream</name> <modifier pos:start="2783:24" pos:end="2783:24">*</modifier></type><name pos:start="2783:25" pos:end="2783:28">feed</name> <init pos:start="2783:30" pos:end="2783:40">= <expr pos:start="2783:32" pos:end="2783:40"><name pos:start="2783:32" pos:end="2783:40"><name pos:start="2783:32" pos:end="2783:32">c</name><operator pos:start="2783:33" pos:end="2783:34">-&gt;</operator><name pos:start="2783:35" pos:end="2783:40">stream</name></name></expr></init></decl>;</decl_stmt>
        <comment type="block" pos:start="2784:9" pos:end="2785:23">/* a packet has been received : write it in the store, except
         * if header */</comment>
        <if_stmt pos:start="2786:9" pos:end="2866:9"><if pos:start="2786:9" pos:end="2820:9">if <condition pos:start="2786:12" pos:end="2786:44">(<expr pos:start="2786:13" pos:end="2786:43"><name pos:start="2786:13" pos:end="2786:25"><name pos:start="2786:13" pos:end="2786:13">c</name><operator pos:start="2786:14" pos:end="2786:15">-&gt;</operator><name pos:start="2786:16" pos:end="2786:25">data_count</name></name> <operator pos:start="2786:27" pos:end="2786:27">&gt;</operator> <name pos:start="2786:29" pos:end="2786:43">FFM_PACKET_SIZE</name></expr>)</condition> <block pos:start="2786:46" pos:end="2820:9">{<block_content pos:start="2789:13" pos:end="2819:13">
            <comment type="block" pos:start="2787:13" pos:end="2788:44">/* XXX: use llseek or url_seek
             * XXX: Should probably fail? */</comment>
            <if_stmt pos:start="2789:13" pos:end="2790:79"><if pos:start="2789:13" pos:end="2790:79">if <condition pos:start="2789:16" pos:end="2789:74">(<expr pos:start="2789:17" pos:end="2789:73"><call pos:start="2789:17" pos:end="2789:67"><name pos:start="2789:17" pos:end="2789:21">lseek</name><argument_list pos:start="2789:22" pos:end="2789:67">(<argument pos:start="2789:23" pos:end="2789:32"><expr pos:start="2789:23" pos:end="2789:32"><name pos:start="2789:23" pos:end="2789:32"><name pos:start="2789:23" pos:end="2789:23">c</name><operator pos:start="2789:24" pos:end="2789:25">-&gt;</operator><name pos:start="2789:26" pos:end="2789:32">feed_fd</name></name></expr></argument>, <argument pos:start="2789:35" pos:end="2789:56"><expr pos:start="2789:35" pos:end="2789:56"><name pos:start="2789:35" pos:end="2789:56"><name pos:start="2789:35" pos:end="2789:38">feed</name><operator pos:start="2789:39" pos:end="2789:40">-&gt;</operator><name pos:start="2789:41" pos:end="2789:56">feed_write_index</name></name></expr></argument>, <argument pos:start="2789:59" pos:end="2789:66"><expr pos:start="2789:59" pos:end="2789:66"><name pos:start="2789:59" pos:end="2789:66">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="2789:69" pos:end="2789:70">==</operator> <operator pos:start="2789:72" pos:end="2789:72">-</operator><literal type="number" pos:start="2789:73" pos:end="2789:73">1</literal></expr>)</condition><block type="pseudo" pos:start="2790:17" pos:end="2790:79"><block_content pos:start="2790:17" pos:end="2790:79">
                <expr_stmt pos:start="2790:17" pos:end="2790:79"><expr pos:start="2790:17" pos:end="2790:78"><call pos:start="2790:17" pos:end="2790:78"><name pos:start="2790:17" pos:end="2790:24">http_log</name><argument_list pos:start="2790:25" pos:end="2790:78">(<argument pos:start="2790:26" pos:end="2790:53"><expr pos:start="2790:26" pos:end="2790:53"><literal type="string" pos:start="2790:26" pos:end="2790:36">"Seek to %"</literal><name pos:start="2790:37" pos:end="2790:42">PRId64</name><literal type="string" pos:start="2790:43" pos:end="2790:53">" failed\n"</literal></expr></argument>, <argument pos:start="2790:56" pos:end="2790:77"><expr pos:start="2790:56" pos:end="2790:77"><name pos:start="2790:56" pos:end="2790:77"><name pos:start="2790:56" pos:end="2790:59">feed</name><operator pos:start="2790:60" pos:end="2790:61">-&gt;</operator><name pos:start="2790:62" pos:end="2790:77">feed_write_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="2792:13" pos:end="2795:13"><if pos:start="2792:13" pos:end="2795:13">if <condition pos:start="2792:16" pos:end="2792:66">(<expr pos:start="2792:17" pos:end="2792:65"><call pos:start="2792:17" pos:end="2792:61"><name pos:start="2792:17" pos:end="2792:21">write</name><argument_list pos:start="2792:22" pos:end="2792:61">(<argument pos:start="2792:23" pos:end="2792:32"><expr pos:start="2792:23" pos:end="2792:32"><name pos:start="2792:23" pos:end="2792:32"><name pos:start="2792:23" pos:end="2792:23">c</name><operator pos:start="2792:24" pos:end="2792:25">-&gt;</operator><name pos:start="2792:26" pos:end="2792:32">feed_fd</name></name></expr></argument>, <argument pos:start="2792:35" pos:end="2792:43"><expr pos:start="2792:35" pos:end="2792:43"><name pos:start="2792:35" pos:end="2792:43"><name pos:start="2792:35" pos:end="2792:35">c</name><operator pos:start="2792:36" pos:end="2792:37">-&gt;</operator><name pos:start="2792:38" pos:end="2792:43">buffer</name></name></expr></argument>, <argument pos:start="2792:46" pos:end="2792:60"><expr pos:start="2792:46" pos:end="2792:60"><name pos:start="2792:46" pos:end="2792:60">FFM_PACKET_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="2792:63" pos:end="2792:63">&lt;</operator> <literal type="number" pos:start="2792:65" pos:end="2792:65">0</literal></expr>)</condition> <block pos:start="2792:68" pos:end="2795:13">{<block_content pos:start="2793:17" pos:end="2794:26">
                <expr_stmt pos:start="2793:17" pos:end="2793:78"><expr pos:start="2793:17" pos:end="2793:77"><call pos:start="2793:17" pos:end="2793:77"><name pos:start="2793:17" pos:end="2793:24">http_log</name><argument_list pos:start="2793:25" pos:end="2793:77">(<argument pos:start="2793:26" pos:end="2793:59"><expr pos:start="2793:26" pos:end="2793:59"><literal type="string" pos:start="2793:26" pos:end="2793:59">"Error writing to feed file: %s\n"</literal></expr></argument>, <argument pos:start="2793:62" pos:end="2793:76"><expr pos:start="2793:62" pos:end="2793:76"><call pos:start="2793:62" pos:end="2793:76"><name pos:start="2793:62" pos:end="2793:69">strerror</name><argument_list pos:start="2793:70" pos:end="2793:76">(<argument pos:start="2793:71" pos:end="2793:75"><expr pos:start="2793:71" pos:end="2793:75"><name pos:start="2793:71" pos:end="2793:75">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="2794:17" pos:end="2794:26">goto <name pos:start="2794:22" pos:end="2794:25">fail</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="2797:13" pos:end="2797:54"><expr pos:start="2797:13" pos:end="2797:53"><name pos:start="2797:13" pos:end="2797:34"><name pos:start="2797:13" pos:end="2797:16">feed</name><operator pos:start="2797:17" pos:end="2797:18">-&gt;</operator><name pos:start="2797:19" pos:end="2797:34">feed_write_index</name></name> <operator pos:start="2797:36" pos:end="2797:37">+=</operator> <name pos:start="2797:39" pos:end="2797:53">FFM_PACKET_SIZE</name></expr>;</expr_stmt>
            <comment type="block" pos:start="2798:13" pos:end="2798:34">/* update file size */</comment>
            <if_stmt pos:start="2799:13" pos:end="2800:57"><if pos:start="2799:13" pos:end="2800:57">if <condition pos:start="2799:16" pos:end="2799:62">(<expr pos:start="2799:17" pos:end="2799:61"><name pos:start="2799:17" pos:end="2799:38"><name pos:start="2799:17" pos:end="2799:20">feed</name><operator pos:start="2799:21" pos:end="2799:22">-&gt;</operator><name pos:start="2799:23" pos:end="2799:38">feed_write_index</name></name> <operator pos:start="2799:40" pos:end="2799:40">&gt;</operator> <name pos:start="2799:42" pos:end="2799:61"><name pos:start="2799:42" pos:end="2799:42">c</name><operator pos:start="2799:43" pos:end="2799:44">-&gt;</operator><name pos:start="2799:45" pos:end="2799:50">stream</name><operator pos:start="2799:51" pos:end="2799:52">-&gt;</operator><name pos:start="2799:53" pos:end="2799:61">feed_size</name></name></expr>)</condition><block type="pseudo" pos:start="2800:17" pos:end="2800:57"><block_content pos:start="2800:17" pos:end="2800:57">
                <expr_stmt pos:start="2800:17" pos:end="2800:57"><expr pos:start="2800:17" pos:end="2800:56"><name pos:start="2800:17" pos:end="2800:31"><name pos:start="2800:17" pos:end="2800:20">feed</name><operator pos:start="2800:21" pos:end="2800:22">-&gt;</operator><name pos:start="2800:23" pos:end="2800:31">feed_size</name></name> <operator pos:start="2800:33" pos:end="2800:33">=</operator> <name pos:start="2800:35" pos:end="2800:56"><name pos:start="2800:35" pos:end="2800:38">feed</name><operator pos:start="2800:39" pos:end="2800:40">-&gt;</operator><name pos:start="2800:41" pos:end="2800:56">feed_write_index</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="block" pos:start="2802:13" pos:end="2802:61">/* handle wrap around if max file size reached */</comment>
            <if_stmt pos:start="2803:13" pos:end="2805:57"><if pos:start="2803:13" pos:end="2805:57">if <condition pos:start="2803:16" pos:end="2804:67">(<expr pos:start="2803:17" pos:end="2804:66"><name pos:start="2803:17" pos:end="2803:40"><name pos:start="2803:17" pos:end="2803:17">c</name><operator pos:start="2803:18" pos:end="2803:19">-&gt;</operator><name pos:start="2803:20" pos:end="2803:25">stream</name><operator pos:start="2803:26" pos:end="2803:27">-&gt;</operator><name pos:start="2803:28" pos:end="2803:40">feed_max_size</name></name> <operator pos:start="2803:42" pos:end="2803:43">&amp;&amp;</operator>
                <name pos:start="2804:17" pos:end="2804:38"><name pos:start="2804:17" pos:end="2804:20">feed</name><operator pos:start="2804:21" pos:end="2804:22">-&gt;</operator><name pos:start="2804:23" pos:end="2804:38">feed_write_index</name></name> <operator pos:start="2804:40" pos:end="2804:41">&gt;=</operator> <name pos:start="2804:43" pos:end="2804:66"><name pos:start="2804:43" pos:end="2804:43">c</name><operator pos:start="2804:44" pos:end="2804:45">-&gt;</operator><name pos:start="2804:46" pos:end="2804:51">stream</name><operator pos:start="2804:52" pos:end="2804:53">-&gt;</operator><name pos:start="2804:54" pos:end="2804:66">feed_max_size</name></name></expr>)</condition><block type="pseudo" pos:start="2805:17" pos:end="2805:57"><block_content pos:start="2805:17" pos:end="2805:57">
                <expr_stmt pos:start="2805:17" pos:end="2805:57"><expr pos:start="2805:17" pos:end="2805:56"><name pos:start="2805:17" pos:end="2805:38"><name pos:start="2805:17" pos:end="2805:20">feed</name><operator pos:start="2805:21" pos:end="2805:22">-&gt;</operator><name pos:start="2805:23" pos:end="2805:38">feed_write_index</name></name> <operator pos:start="2805:40" pos:end="2805:40">=</operator> <name pos:start="2805:42" pos:end="2805:56">FFM_PACKET_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="block" pos:start="2807:13" pos:end="2807:29">/* write index */</comment>
            <if_stmt pos:start="2808:13" pos:end="2812:13"><if pos:start="2808:13" pos:end="2812:13">if <condition pos:start="2808:16" pos:end="2808:78">(<expr pos:start="2808:17" pos:end="2808:77"><call pos:start="2808:17" pos:end="2808:73"><name pos:start="2808:17" pos:end="2808:37">ffm_write_write_index</name><argument_list pos:start="2808:38" pos:end="2808:73">(<argument pos:start="2808:39" pos:end="2808:48"><expr pos:start="2808:39" pos:end="2808:48"><name pos:start="2808:39" pos:end="2808:48"><name pos:start="2808:39" pos:end="2808:39">c</name><operator pos:start="2808:40" pos:end="2808:41">-&gt;</operator><name pos:start="2808:42" pos:end="2808:48">feed_fd</name></name></expr></argument>, <argument pos:start="2808:51" pos:end="2808:72"><expr pos:start="2808:51" pos:end="2808:72"><name pos:start="2808:51" pos:end="2808:72"><name pos:start="2808:51" pos:end="2808:54">feed</name><operator pos:start="2808:55" pos:end="2808:56">-&gt;</operator><name pos:start="2808:57" pos:end="2808:72">feed_write_index</name></name></expr></argument>)</argument_list></call> <operator pos:start="2808:75" pos:end="2808:75">&lt;</operator> <literal type="number" pos:start="2808:77" pos:end="2808:77">0</literal></expr>)</condition> <block pos:start="2808:80" pos:end="2812:13">{<block_content pos:start="2809:17" pos:end="2811:26">
                <expr_stmt pos:start="2809:17" pos:end="2810:42"><expr pos:start="2809:17" pos:end="2810:41"><call pos:start="2809:17" pos:end="2810:41"><name pos:start="2809:17" pos:end="2809:24">http_log</name><argument_list pos:start="2809:25" pos:end="2810:41">(<argument pos:start="2809:26" pos:end="2809:65"><expr pos:start="2809:26" pos:end="2809:65"><literal type="string" pos:start="2809:26" pos:end="2809:65">"Error writing index to feed file: %s\n"</literal></expr></argument>,
                         <argument pos:start="2810:26" pos:end="2810:40"><expr pos:start="2810:26" pos:end="2810:40"><call pos:start="2810:26" pos:end="2810:40"><name pos:start="2810:26" pos:end="2810:33">strerror</name><argument_list pos:start="2810:34" pos:end="2810:40">(<argument pos:start="2810:35" pos:end="2810:39"><expr pos:start="2810:35" pos:end="2810:39"><name pos:start="2810:35" pos:end="2810:39">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="2811:17" pos:end="2811:26">goto <name pos:start="2811:22" pos:end="2811:25">fail</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="2814:13" pos:end="2814:49">/* wake up any waiting connections */</comment>
            <for pos:start="2815:13" pos:end="2819:13">for<control pos:start="2815:16" pos:end="2815:55">(<init pos:start="2815:17" pos:end="2815:36"><expr pos:start="2815:17" pos:end="2815:35"><name pos:start="2815:17" pos:end="2815:18">c1</name> <operator pos:start="2815:20" pos:end="2815:20">=</operator> <name pos:start="2815:22" pos:end="2815:35">first_http_ctx</name></expr>;</init> <condition pos:start="2815:38" pos:end="2815:40"><expr pos:start="2815:38" pos:end="2815:39"><name pos:start="2815:38" pos:end="2815:39">c1</name></expr>;</condition> <incr pos:start="2815:42" pos:end="2815:54"><expr pos:start="2815:42" pos:end="2815:54"><name pos:start="2815:42" pos:end="2815:43">c1</name> <operator pos:start="2815:45" pos:end="2815:45">=</operator> <name pos:start="2815:47" pos:end="2815:54"><name pos:start="2815:47" pos:end="2815:48">c1</name><operator pos:start="2815:49" pos:end="2815:50">-&gt;</operator><name pos:start="2815:51" pos:end="2815:54">next</name></name></expr></incr>)</control> <block pos:start="2815:57" pos:end="2819:13">{<block_content pos:start="2816:17" pos:end="2818:52">
                <if_stmt pos:start="2816:17" pos:end="2818:52"><if pos:start="2816:17" pos:end="2818:52">if <condition pos:start="2816:20" pos:end="2817:56">(<expr pos:start="2816:21" pos:end="2817:55"><name pos:start="2816:21" pos:end="2816:29"><name pos:start="2816:21" pos:end="2816:22">c1</name><operator pos:start="2816:23" pos:end="2816:24">-&gt;</operator><name pos:start="2816:25" pos:end="2816:29">state</name></name> <operator pos:start="2816:31" pos:end="2816:32">==</operator> <name pos:start="2816:34" pos:end="2816:52">HTTPSTATE_WAIT_FEED</name> <operator pos:start="2816:54" pos:end="2816:55">&amp;&amp;</operator>
                    <name pos:start="2817:21" pos:end="2817:36"><name pos:start="2817:21" pos:end="2817:22">c1</name><operator pos:start="2817:23" pos:end="2817:24">-&gt;</operator><name pos:start="2817:25" pos:end="2817:30">stream</name><operator pos:start="2817:31" pos:end="2817:32">-&gt;</operator><name pos:start="2817:33" pos:end="2817:36">feed</name></name> <operator pos:start="2817:38" pos:end="2817:39">==</operator> <name pos:start="2817:41" pos:end="2817:55"><name pos:start="2817:41" pos:end="2817:41">c</name><operator pos:start="2817:42" pos:end="2817:43">-&gt;</operator><name pos:start="2817:44" pos:end="2817:49">stream</name><operator pos:start="2817:50" pos:end="2817:51">-&gt;</operator><name pos:start="2817:52" pos:end="2817:55">feed</name></name></expr>)</condition><block type="pseudo" pos:start="2818:21" pos:end="2818:52"><block_content pos:start="2818:21" pos:end="2818:52">
                    <expr_stmt pos:start="2818:21" pos:end="2818:52"><expr pos:start="2818:21" pos:end="2818:51"><name pos:start="2818:21" pos:end="2818:29"><name pos:start="2818:21" pos:end="2818:22">c1</name><operator pos:start="2818:23" pos:end="2818:24">-&gt;</operator><name pos:start="2818:25" pos:end="2818:29">state</name></name> <operator pos:start="2818:31" pos:end="2818:31">=</operator> <name pos:start="2818:33" pos:end="2818:51">HTTPSTATE_SEND_DATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if> <else pos:start="2820:11" pos:end="2866:9">else <block pos:start="2820:16" pos:end="2866:9">{<block_content pos:start="2822:13" pos:end="2865:26">
            <comment type="block" pos:start="2821:13" pos:end="2821:73">/* We have a header in our hands that contains useful data */</comment>
            <decl_stmt pos:start="2822:13" pos:end="2822:58"><decl pos:start="2822:13" pos:end="2822:57"><type pos:start="2822:13" pos:end="2822:29"><name pos:start="2822:13" pos:end="2822:27">AVFormatContext</name> <modifier pos:start="2822:29" pos:end="2822:29">*</modifier></type><name pos:start="2822:30" pos:end="2822:30">s</name> <init pos:start="2822:32" pos:end="2822:57">= <expr pos:start="2822:34" pos:end="2822:57"><call pos:start="2822:34" pos:end="2822:57"><name pos:start="2822:34" pos:end="2822:55">avformat_alloc_context</name><argument_list pos:start="2822:56" pos:end="2822:57">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="2823:13" pos:end="2823:28"><decl pos:start="2823:13" pos:end="2823:27"><type pos:start="2823:13" pos:end="2823:25"><name pos:start="2823:13" pos:end="2823:23">AVIOContext</name> <modifier pos:start="2823:25" pos:end="2823:25">*</modifier></type><name pos:start="2823:26" pos:end="2823:27">pb</name></decl>;</decl_stmt>
            <decl_stmt pos:start="2824:13" pos:end="2824:34"><decl pos:start="2824:13" pos:end="2824:33"><type pos:start="2824:13" pos:end="2824:27"><name pos:start="2824:13" pos:end="2824:25">AVInputFormat</name> <modifier pos:start="2824:27" pos:end="2824:27">*</modifier></type><name pos:start="2824:28" pos:end="2824:33">fmt_in</name></decl>;</decl_stmt>
            <decl_stmt pos:start="2825:13" pos:end="2825:18"><decl pos:start="2825:13" pos:end="2825:17"><type pos:start="2825:13" pos:end="2825:15"><name pos:start="2825:13" pos:end="2825:15">int</name></type> <name pos:start="2825:17" pos:end="2825:17">i</name></decl>;</decl_stmt>

            <if_stmt pos:start="2827:13" pos:end="2828:26"><if pos:start="2827:13" pos:end="2828:26">if <condition pos:start="2827:16" pos:end="2827:19">(<expr pos:start="2827:17" pos:end="2827:18"><operator pos:start="2827:17" pos:end="2827:17">!</operator><name pos:start="2827:18" pos:end="2827:18">s</name></expr>)</condition><block type="pseudo" pos:start="2828:17" pos:end="2828:26"><block_content pos:start="2828:17" pos:end="2828:26">
                <goto pos:start="2828:17" pos:end="2828:26">goto <name pos:start="2828:22" pos:end="2828:25">fail</name>;</goto></block_content></block></if></if_stmt>

            <comment type="block" pos:start="2830:13" pos:end="2830:80">/* use feed output format name to find corresponding input format */</comment>
            <expr_stmt pos:start="2831:13" pos:end="2831:59"><expr pos:start="2831:13" pos:end="2831:58"><name pos:start="2831:13" pos:end="2831:18">fmt_in</name> <operator pos:start="2831:20" pos:end="2831:20">=</operator> <call pos:start="2831:22" pos:end="2831:58"><name pos:start="2831:22" pos:end="2831:41">av_find_input_format</name><argument_list pos:start="2831:42" pos:end="2831:58">(<argument pos:start="2831:43" pos:end="2831:57"><expr pos:start="2831:43" pos:end="2831:57"><name pos:start="2831:43" pos:end="2831:57"><name pos:start="2831:43" pos:end="2831:46">feed</name><operator pos:start="2831:47" pos:end="2831:48">-&gt;</operator><name pos:start="2831:49" pos:end="2831:51">fmt</name><operator pos:start="2831:52" pos:end="2831:53">-&gt;</operator><name pos:start="2831:54" pos:end="2831:57">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2832:13" pos:end="2833:26"><if pos:start="2832:13" pos:end="2833:26">if <condition pos:start="2832:16" pos:end="2832:24">(<expr pos:start="2832:17" pos:end="2832:23"><operator pos:start="2832:17" pos:end="2832:17">!</operator><name pos:start="2832:18" pos:end="2832:23">fmt_in</name></expr>)</condition><block type="pseudo" pos:start="2833:17" pos:end="2833:26"><block_content pos:start="2833:17" pos:end="2833:26">
                <goto pos:start="2833:17" pos:end="2833:26">goto <name pos:start="2833:22" pos:end="2833:25">fail</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2835:13" pos:end="2836:63"><expr pos:start="2835:13" pos:end="2836:62"><name pos:start="2835:13" pos:end="2835:14">pb</name> <operator pos:start="2835:16" pos:end="2835:16">=</operator> <call pos:start="2835:18" pos:end="2836:62"><name pos:start="2835:18" pos:end="2835:35">avio_alloc_context</name><argument_list pos:start="2835:36" pos:end="2836:62">(<argument pos:start="2835:37" pos:end="2835:45"><expr pos:start="2835:37" pos:end="2835:45"><name pos:start="2835:37" pos:end="2835:45"><name pos:start="2835:37" pos:end="2835:37">c</name><operator pos:start="2835:38" pos:end="2835:39">-&gt;</operator><name pos:start="2835:40" pos:end="2835:45">buffer</name></name></expr></argument>, <argument pos:start="2835:48" pos:end="2835:72"><expr pos:start="2835:48" pos:end="2835:72"><name pos:start="2835:48" pos:end="2835:60"><name pos:start="2835:48" pos:end="2835:48">c</name><operator pos:start="2835:49" pos:end="2835:50">-&gt;</operator><name pos:start="2835:51" pos:end="2835:60">buffer_end</name></name> <operator pos:start="2835:62" pos:end="2835:62">-</operator> <name pos:start="2835:64" pos:end="2835:72"><name pos:start="2835:64" pos:end="2835:64">c</name><operator pos:start="2835:65" pos:end="2835:66">-&gt;</operator><name pos:start="2835:67" pos:end="2835:72">buffer</name></name></expr></argument>,
                                    <argument pos:start="2836:37" pos:end="2836:37"><expr pos:start="2836:37" pos:end="2836:37"><literal type="number" pos:start="2836:37" pos:end="2836:37">0</literal></expr></argument>, <argument pos:start="2836:40" pos:end="2836:43"><expr pos:start="2836:40" pos:end="2836:43"><name pos:start="2836:40" pos:end="2836:43">NULL</name></expr></argument>, <argument pos:start="2836:46" pos:end="2836:49"><expr pos:start="2836:46" pos:end="2836:49"><name pos:start="2836:46" pos:end="2836:49">NULL</name></expr></argument>, <argument pos:start="2836:52" pos:end="2836:55"><expr pos:start="2836:52" pos:end="2836:55"><name pos:start="2836:52" pos:end="2836:55">NULL</name></expr></argument>, <argument pos:start="2836:58" pos:end="2836:61"><expr pos:start="2836:58" pos:end="2836:61"><name pos:start="2836:58" pos:end="2836:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2837:13" pos:end="2838:26"><if pos:start="2837:13" pos:end="2838:26">if <condition pos:start="2837:16" pos:end="2837:20">(<expr pos:start="2837:17" pos:end="2837:19"><operator pos:start="2837:17" pos:end="2837:17">!</operator><name pos:start="2837:18" pos:end="2837:19">pb</name></expr>)</condition><block type="pseudo" pos:start="2838:17" pos:end="2838:26"><block_content pos:start="2838:17" pos:end="2838:26">
                <goto pos:start="2838:17" pos:end="2838:26">goto <name pos:start="2838:22" pos:end="2838:25">fail</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2840:13" pos:end="2840:29"><expr pos:start="2840:13" pos:end="2840:28"><name pos:start="2840:13" pos:end="2840:24"><name pos:start="2840:13" pos:end="2840:14">pb</name><operator pos:start="2840:15" pos:end="2840:16">-&gt;</operator><name pos:start="2840:17" pos:end="2840:24">seekable</name></name> <operator pos:start="2840:26" pos:end="2840:26">=</operator> <literal type="number" pos:start="2840:28" pos:end="2840:28">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="2842:13" pos:end="2842:23"><expr pos:start="2842:13" pos:end="2842:22"><name pos:start="2842:13" pos:end="2842:17"><name pos:start="2842:13" pos:end="2842:13">s</name><operator pos:start="2842:14" pos:end="2842:15">-&gt;</operator><name pos:start="2842:16" pos:end="2842:17">pb</name></name> <operator pos:start="2842:19" pos:end="2842:19">=</operator> <name pos:start="2842:21" pos:end="2842:22">pb</name></expr>;</expr_stmt>
            <if_stmt pos:start="2843:13" pos:end="2846:13"><if pos:start="2843:13" pos:end="2846:13">if <condition pos:start="2843:16" pos:end="2843:84">(<expr pos:start="2843:17" pos:end="2843:83"><call pos:start="2843:17" pos:end="2843:79"><name pos:start="2843:17" pos:end="2843:35">avformat_open_input</name><argument_list pos:start="2843:36" pos:end="2843:79">(<argument pos:start="2843:37" pos:end="2843:38"><expr pos:start="2843:37" pos:end="2843:38"><operator pos:start="2843:37" pos:end="2843:37">&amp;</operator><name pos:start="2843:38" pos:end="2843:38">s</name></expr></argument>, <argument pos:start="2843:41" pos:end="2843:64"><expr pos:start="2843:41" pos:end="2843:64"><name pos:start="2843:41" pos:end="2843:64"><name pos:start="2843:41" pos:end="2843:41">c</name><operator pos:start="2843:42" pos:end="2843:43">-&gt;</operator><name pos:start="2843:44" pos:end="2843:49">stream</name><operator pos:start="2843:50" pos:end="2843:51">-&gt;</operator><name pos:start="2843:52" pos:end="2843:64">feed_filename</name></name></expr></argument>, <argument pos:start="2843:67" pos:end="2843:72"><expr pos:start="2843:67" pos:end="2843:72"><name pos:start="2843:67" pos:end="2843:72">fmt_in</name></expr></argument>, <argument pos:start="2843:75" pos:end="2843:78"><expr pos:start="2843:75" pos:end="2843:78"><name pos:start="2843:75" pos:end="2843:78">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="2843:81" pos:end="2843:81">&lt;</operator> <literal type="number" pos:start="2843:83" pos:end="2843:83">0</literal></expr>)</condition> <block pos:start="2843:86" pos:end="2846:13">{<block_content pos:start="2844:17" pos:end="2845:26">
                <expr_stmt pos:start="2844:17" pos:end="2844:30"><expr pos:start="2844:17" pos:end="2844:29"><call pos:start="2844:17" pos:end="2844:29"><name pos:start="2844:17" pos:end="2844:24">av_freep</name><argument_list pos:start="2844:25" pos:end="2844:29">(<argument pos:start="2844:26" pos:end="2844:28"><expr pos:start="2844:26" pos:end="2844:28"><operator pos:start="2844:26" pos:end="2844:26">&amp;</operator><name pos:start="2844:27" pos:end="2844:28">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="2845:17" pos:end="2845:26">goto <name pos:start="2845:22" pos:end="2845:25">fail</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="2848:13" pos:end="2848:48">/* Now we have the actual streams */</comment>
            <if_stmt pos:start="2849:13" pos:end="2855:13"><if pos:start="2849:13" pos:end="2855:13">if <condition pos:start="2849:16" pos:end="2849:50">(<expr pos:start="2849:17" pos:end="2849:49"><name pos:start="2849:17" pos:end="2849:29"><name pos:start="2849:17" pos:end="2849:17">s</name><operator pos:start="2849:18" pos:end="2849:19">-&gt;</operator><name pos:start="2849:20" pos:end="2849:29">nb_streams</name></name> <operator pos:start="2849:31" pos:end="2849:32">!=</operator> <name pos:start="2849:34" pos:end="2849:49"><name pos:start="2849:34" pos:end="2849:37">feed</name><operator pos:start="2849:38" pos:end="2849:39">-&gt;</operator><name pos:start="2849:40" pos:end="2849:49">nb_streams</name></name></expr>)</condition> <block pos:start="2849:52" pos:end="2855:13">{<block_content pos:start="2850:17" pos:end="2854:26">
                <expr_stmt pos:start="2850:17" pos:end="2850:41"><expr pos:start="2850:17" pos:end="2850:40"><call pos:start="2850:17" pos:end="2850:40"><name pos:start="2850:17" pos:end="2850:36">avformat_close_input</name><argument_list pos:start="2850:37" pos:end="2850:40">(<argument pos:start="2850:38" pos:end="2850:39"><expr pos:start="2850:38" pos:end="2850:39"><operator pos:start="2850:38" pos:end="2850:38">&amp;</operator><name pos:start="2850:39" pos:end="2850:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2851:17" pos:end="2851:30"><expr pos:start="2851:17" pos:end="2851:29"><call pos:start="2851:17" pos:end="2851:29"><name pos:start="2851:17" pos:end="2851:24">av_freep</name><argument_list pos:start="2851:25" pos:end="2851:29">(<argument pos:start="2851:26" pos:end="2851:28"><expr pos:start="2851:26" pos:end="2851:28"><operator pos:start="2851:26" pos:end="2851:26">&amp;</operator><name pos:start="2851:27" pos:end="2851:28">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2852:17" pos:end="2853:51"><expr pos:start="2852:17" pos:end="2853:50"><call pos:start="2852:17" pos:end="2853:50"><name pos:start="2852:17" pos:end="2852:24">http_log</name><argument_list pos:start="2852:25" pos:end="2853:50">(<argument pos:start="2852:26" pos:end="2852:83"><expr pos:start="2852:26" pos:end="2852:83"><literal type="string" pos:start="2852:26" pos:end="2852:83">"Feed '%s' stream number does not match registered feed\n"</literal></expr></argument>,
                         <argument pos:start="2853:26" pos:end="2853:49"><expr pos:start="2853:26" pos:end="2853:49"><name pos:start="2853:26" pos:end="2853:49"><name pos:start="2853:26" pos:end="2853:26">c</name><operator pos:start="2853:27" pos:end="2853:28">-&gt;</operator><name pos:start="2853:29" pos:end="2853:34">stream</name><operator pos:start="2853:35" pos:end="2853:36">-&gt;</operator><name pos:start="2853:37" pos:end="2853:49">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="2854:17" pos:end="2854:26">goto <name pos:start="2854:22" pos:end="2854:25">fail</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <for pos:start="2857:13" pos:end="2862:13">for <control pos:start="2857:17" pos:end="2857:47">(<init pos:start="2857:18" pos:end="2857:23"><expr pos:start="2857:18" pos:end="2857:22"><name pos:start="2857:18" pos:end="2857:18">i</name> <operator pos:start="2857:20" pos:end="2857:20">=</operator> <literal type="number" pos:start="2857:22" pos:end="2857:22">0</literal></expr>;</init> <condition pos:start="2857:25" pos:end="2857:42"><expr pos:start="2857:25" pos:end="2857:41"><name pos:start="2857:25" pos:end="2857:25">i</name> <operator pos:start="2857:27" pos:end="2857:27">&lt;</operator> <name pos:start="2857:29" pos:end="2857:41"><name pos:start="2857:29" pos:end="2857:29">s</name><operator pos:start="2857:30" pos:end="2857:31">-&gt;</operator><name pos:start="2857:32" pos:end="2857:41">nb_streams</name></name></expr>;</condition> <incr pos:start="2857:44" pos:end="2857:46"><expr pos:start="2857:44" pos:end="2857:46"><name pos:start="2857:44" pos:end="2857:44">i</name><operator pos:start="2857:45" pos:end="2857:46">++</operator></expr></incr>)</control> <block pos:start="2857:49" pos:end="2862:13">{<block_content pos:start="2858:17" pos:end="2861:75">
                <decl_stmt pos:start="2858:17" pos:end="2858:56"><decl pos:start="2858:17" pos:end="2858:55"><type pos:start="2858:17" pos:end="2858:33"><name pos:start="2858:17" pos:end="2858:31">LayeredAVStream</name> <modifier pos:start="2858:33" pos:end="2858:33">*</modifier></type><name pos:start="2858:34" pos:end="2858:36">fst</name> <init pos:start="2858:38" pos:end="2858:55">= <expr pos:start="2858:40" pos:end="2858:55"><name pos:start="2858:40" pos:end="2858:55"><name pos:start="2858:40" pos:end="2858:43">feed</name><operator pos:start="2858:44" pos:end="2858:45">-&gt;</operator><name pos:start="2858:46" pos:end="2858:52">streams</name><index pos:start="2858:53" pos:end="2858:55">[<expr pos:start="2858:54" pos:end="2858:54"><name pos:start="2858:54" pos:end="2858:54">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt pos:start="2859:17" pos:end="2859:45"><decl pos:start="2859:17" pos:end="2859:44"><type pos:start="2859:17" pos:end="2859:26"><name pos:start="2859:17" pos:end="2859:24">AVStream</name> <modifier pos:start="2859:26" pos:end="2859:26">*</modifier></type><name pos:start="2859:27" pos:end="2859:28">st</name> <init pos:start="2859:30" pos:end="2859:44">= <expr pos:start="2859:32" pos:end="2859:44"><name pos:start="2859:32" pos:end="2859:44"><name pos:start="2859:32" pos:end="2859:32">s</name><operator pos:start="2859:33" pos:end="2859:34">-&gt;</operator><name pos:start="2859:35" pos:end="2859:41">streams</name><index pos:start="2859:42" pos:end="2859:44">[<expr pos:start="2859:43" pos:end="2859:43"><name pos:start="2859:43" pos:end="2859:43">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt pos:start="2860:17" pos:end="2860:72"><expr pos:start="2860:17" pos:end="2860:71"><call pos:start="2860:17" pos:end="2860:71"><name pos:start="2860:17" pos:end="2860:45">avcodec_parameters_to_context</name><argument_list pos:start="2860:46" pos:end="2860:71">(<argument pos:start="2860:47" pos:end="2860:56"><expr pos:start="2860:47" pos:end="2860:56"><name pos:start="2860:47" pos:end="2860:56"><name pos:start="2860:47" pos:end="2860:49">fst</name><operator pos:start="2860:50" pos:end="2860:51">-&gt;</operator><name pos:start="2860:52" pos:end="2860:56">codec</name></name></expr></argument>, <argument pos:start="2860:59" pos:end="2860:70"><expr pos:start="2860:59" pos:end="2860:70"><name pos:start="2860:59" pos:end="2860:70"><name pos:start="2860:59" pos:end="2860:60">st</name><operator pos:start="2860:61" pos:end="2860:62">-&gt;</operator><name pos:start="2860:63" pos:end="2860:70">codecpar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2861:17" pos:end="2861:75"><expr pos:start="2861:17" pos:end="2861:74"><call pos:start="2861:17" pos:end="2861:74"><name pos:start="2861:17" pos:end="2861:47">avcodec_parameters_from_context</name><argument_list pos:start="2861:48" pos:end="2861:74">(<argument pos:start="2861:49" pos:end="2861:61"><expr pos:start="2861:49" pos:end="2861:61"><name pos:start="2861:49" pos:end="2861:61"><name pos:start="2861:49" pos:end="2861:51">fst</name><operator pos:start="2861:52" pos:end="2861:53">-&gt;</operator><name pos:start="2861:54" pos:end="2861:61">codecpar</name></name></expr></argument>, <argument pos:start="2861:64" pos:end="2861:73"><expr pos:start="2861:64" pos:end="2861:73"><name pos:start="2861:64" pos:end="2861:73"><name pos:start="2861:64" pos:end="2861:66">fst</name><operator pos:start="2861:67" pos:end="2861:68">-&gt;</operator><name pos:start="2861:69" pos:end="2861:73">codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <expr_stmt pos:start="2864:13" pos:end="2864:37"><expr pos:start="2864:13" pos:end="2864:36"><call pos:start="2864:13" pos:end="2864:36"><name pos:start="2864:13" pos:end="2864:32">avformat_close_input</name><argument_list pos:start="2864:33" pos:end="2864:36">(<argument pos:start="2864:34" pos:end="2864:35"><expr pos:start="2864:34" pos:end="2864:35"><operator pos:start="2864:34" pos:end="2864:34">&amp;</operator><name pos:start="2864:35" pos:end="2864:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2865:13" pos:end="2865:26"><expr pos:start="2865:13" pos:end="2865:25"><call pos:start="2865:13" pos:end="2865:25"><name pos:start="2865:13" pos:end="2865:20">av_freep</name><argument_list pos:start="2865:21" pos:end="2865:25">(<argument pos:start="2865:22" pos:end="2865:24"><expr pos:start="2865:22" pos:end="2865:24"><operator pos:start="2865:22" pos:end="2865:22">&amp;</operator><name pos:start="2865:23" pos:end="2865:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt pos:start="2867:9" pos:end="2867:34"><expr pos:start="2867:9" pos:end="2867:33"><name pos:start="2867:9" pos:end="2867:21"><name pos:start="2867:9" pos:end="2867:9">c</name><operator pos:start="2867:10" pos:end="2867:11">-&gt;</operator><name pos:start="2867:12" pos:end="2867:21">buffer_ptr</name></name> <operator pos:start="2867:23" pos:end="2867:23">=</operator> <name pos:start="2867:25" pos:end="2867:33"><name pos:start="2867:25" pos:end="2867:25">c</name><operator pos:start="2867:26" pos:end="2867:27">-&gt;</operator><name pos:start="2867:28" pos:end="2867:33">buffer</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return pos:start="2870:5" pos:end="2870:13">return <expr pos:start="2870:12" pos:end="2870:12"><literal type="number" pos:start="2870:12" pos:end="2870:12">0</literal></expr>;</return>
 <label pos:start="2871:2" pos:end="2871:6"><name pos:start="2871:2" pos:end="2871:5">fail</name>:</label>
    <expr_stmt pos:start="2872:5" pos:end="2872:31"><expr pos:start="2872:5" pos:end="2872:30"><name pos:start="2872:5" pos:end="2872:26"><name pos:start="2872:5" pos:end="2872:5">c</name><operator pos:start="2872:6" pos:end="2872:7">-&gt;</operator><name pos:start="2872:8" pos:end="2872:13">stream</name><operator pos:start="2872:14" pos:end="2872:15">-&gt;</operator><name pos:start="2872:16" pos:end="2872:26">feed_opened</name></name> <operator pos:start="2872:28" pos:end="2872:28">=</operator> <literal type="number" pos:start="2872:30" pos:end="2872:30">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="2873:5" pos:end="2873:22"><expr pos:start="2873:5" pos:end="2873:21"><call pos:start="2873:5" pos:end="2873:21"><name pos:start="2873:5" pos:end="2873:9">close</name><argument_list pos:start="2873:10" pos:end="2873:21">(<argument pos:start="2873:11" pos:end="2873:20"><expr pos:start="2873:11" pos:end="2873:20"><name pos:start="2873:11" pos:end="2873:20"><name pos:start="2873:11" pos:end="2873:11">c</name><operator pos:start="2873:12" pos:end="2873:13">-&gt;</operator><name pos:start="2873:14" pos:end="2873:20">feed_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="2874:5" pos:end="2874:66">/* wake up any waiting connections to stop waiting for feed */</comment>
    <for pos:start="2875:5" pos:end="2879:5">for<control pos:start="2875:8" pos:end="2875:47">(<init pos:start="2875:9" pos:end="2875:28"><expr pos:start="2875:9" pos:end="2875:27"><name pos:start="2875:9" pos:end="2875:10">c1</name> <operator pos:start="2875:12" pos:end="2875:12">=</operator> <name pos:start="2875:14" pos:end="2875:27">first_http_ctx</name></expr>;</init> <condition pos:start="2875:30" pos:end="2875:32"><expr pos:start="2875:30" pos:end="2875:31"><name pos:start="2875:30" pos:end="2875:31">c1</name></expr>;</condition> <incr pos:start="2875:34" pos:end="2875:46"><expr pos:start="2875:34" pos:end="2875:46"><name pos:start="2875:34" pos:end="2875:35">c1</name> <operator pos:start="2875:37" pos:end="2875:37">=</operator> <name pos:start="2875:39" pos:end="2875:46"><name pos:start="2875:39" pos:end="2875:40">c1</name><operator pos:start="2875:41" pos:end="2875:42">-&gt;</operator><name pos:start="2875:43" pos:end="2875:46">next</name></name></expr></incr>)</control> <block pos:start="2875:49" pos:end="2879:5">{<block_content pos:start="2876:9" pos:end="2878:52">
        <if_stmt pos:start="2876:9" pos:end="2878:52"><if pos:start="2876:9" pos:end="2878:52">if <condition pos:start="2876:12" pos:end="2877:48">(<expr pos:start="2876:13" pos:end="2877:47"><name pos:start="2876:13" pos:end="2876:21"><name pos:start="2876:13" pos:end="2876:14">c1</name><operator pos:start="2876:15" pos:end="2876:16">-&gt;</operator><name pos:start="2876:17" pos:end="2876:21">state</name></name> <operator pos:start="2876:23" pos:end="2876:24">==</operator> <name pos:start="2876:26" pos:end="2876:44">HTTPSTATE_WAIT_FEED</name> <operator pos:start="2876:46" pos:end="2876:47">&amp;&amp;</operator>
            <name pos:start="2877:13" pos:end="2877:28"><name pos:start="2877:13" pos:end="2877:14">c1</name><operator pos:start="2877:15" pos:end="2877:16">-&gt;</operator><name pos:start="2877:17" pos:end="2877:22">stream</name><operator pos:start="2877:23" pos:end="2877:24">-&gt;</operator><name pos:start="2877:25" pos:end="2877:28">feed</name></name> <operator pos:start="2877:30" pos:end="2877:31">==</operator> <name pos:start="2877:33" pos:end="2877:47"><name pos:start="2877:33" pos:end="2877:33">c</name><operator pos:start="2877:34" pos:end="2877:35">-&gt;</operator><name pos:start="2877:36" pos:end="2877:41">stream</name><operator pos:start="2877:42" pos:end="2877:43">-&gt;</operator><name pos:start="2877:44" pos:end="2877:47">feed</name></name></expr>)</condition><block type="pseudo" pos:start="2878:13" pos:end="2878:52"><block_content pos:start="2878:13" pos:end="2878:52">
            <expr_stmt pos:start="2878:13" pos:end="2878:52"><expr pos:start="2878:13" pos:end="2878:51"><name pos:start="2878:13" pos:end="2878:21"><name pos:start="2878:13" pos:end="2878:14">c1</name><operator pos:start="2878:15" pos:end="2878:16">-&gt;</operator><name pos:start="2878:17" pos:end="2878:21">state</name></name> <operator pos:start="2878:23" pos:end="2878:23">=</operator> <name pos:start="2878:25" pos:end="2878:51">HTTPSTATE_SEND_DATA_TRAILER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return pos:start="2880:5" pos:end="2880:14">return <expr pos:start="2880:12" pos:end="2880:13"><operator pos:start="2880:12" pos:end="2880:12">-</operator><literal type="number" pos:start="2880:13" pos:end="2880:13">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="2883:1" pos:end="2883:70">/********************************************************************/</comment>
<comment type="block" pos:start="2884:1" pos:end="2884:19">/* RTSP handling */</comment>

<function pos:start="2886:1" pos:end="2905:1"><type pos:start="2886:1" pos:end="2886:11"><specifier pos:start="2886:1" pos:end="2886:6">static</specifier> <name pos:start="2886:8" pos:end="2886:11">void</name></type> <name pos:start="2886:13" pos:end="2886:29">rtsp_reply_header</name><parameter_list pos:start="2886:30" pos:end="2886:79">(<parameter pos:start="2886:31" pos:end="2886:44"><decl pos:start="2886:31" pos:end="2886:44"><type pos:start="2886:31" pos:end="2886:44"><name pos:start="2886:31" pos:end="2886:41">HTTPContext</name> <modifier pos:start="2886:43" pos:end="2886:43">*</modifier></type><name pos:start="2886:44" pos:end="2886:44">c</name></decl></parameter>, <parameter pos:start="2886:47" pos:end="2886:78"><decl pos:start="2886:47" pos:end="2886:78"><type pos:start="2886:47" pos:end="2886:78"><name pos:start="2886:47" pos:end="2886:65"><name pos:start="2886:47" pos:end="2886:50">enum</name> <name pos:start="2886:52" pos:end="2886:65">RTSPStatusCode</name></name></type> <name pos:start="2886:67" pos:end="2886:78">error_number</name></decl></parameter>)</parameter_list>
<block pos:start="2887:1" pos:end="2905:1">{<block_content pos:start="2888:5" pos:end="2904:49">
    <decl_stmt pos:start="2888:5" pos:end="2888:20"><decl pos:start="2888:5" pos:end="2888:19"><type pos:start="2888:5" pos:end="2888:16"><specifier pos:start="2888:5" pos:end="2888:9">const</specifier> <name pos:start="2888:11" pos:end="2888:14">char</name> <modifier pos:start="2888:16" pos:end="2888:16">*</modifier></type><name pos:start="2888:17" pos:end="2888:19">str</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2889:5" pos:end="2889:14"><decl pos:start="2889:5" pos:end="2889:13"><type pos:start="2889:5" pos:end="2889:10"><name pos:start="2889:5" pos:end="2889:10">time_t</name></type> <name pos:start="2889:12" pos:end="2889:13">ti</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2890:5" pos:end="2890:18"><decl pos:start="2890:5" pos:end="2890:17"><type pos:start="2890:5" pos:end="2890:15"><name pos:start="2890:5" pos:end="2890:13"><name pos:start="2890:5" pos:end="2890:10">struct</name> <name pos:start="2890:12" pos:end="2890:13">tm</name></name> <modifier pos:start="2890:15" pos:end="2890:15">*</modifier></type><name pos:start="2890:16" pos:end="2890:17">tm</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2891:5" pos:end="2891:18"><decl pos:start="2891:5" pos:end="2891:17"><type pos:start="2891:5" pos:end="2891:8"><name pos:start="2891:5" pos:end="2891:8">char</name></type> <name pos:start="2891:10" pos:end="2891:17"><name pos:start="2891:10" pos:end="2891:13">buf2</name><index pos:start="2891:14" pos:end="2891:17">[<expr pos:start="2891:15" pos:end="2891:16"><literal type="number" pos:start="2891:15" pos:end="2891:16">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt pos:start="2893:5" pos:end="2893:48"><expr pos:start="2893:5" pos:end="2893:47"><name pos:start="2893:5" pos:end="2893:7">str</name> <operator pos:start="2893:9" pos:end="2893:9">=</operator> <call pos:start="2893:11" pos:end="2893:47"><name pos:start="2893:11" pos:end="2893:33">RTSP_STATUS_CODE2STRING</name><argument_list pos:start="2893:34" pos:end="2893:47">(<argument pos:start="2893:35" pos:end="2893:46"><expr pos:start="2893:35" pos:end="2893:46"><name pos:start="2893:35" pos:end="2893:46">error_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="2894:5" pos:end="2895:30"><if pos:start="2894:5" pos:end="2895:30">if <condition pos:start="2894:8" pos:end="2894:13">(<expr pos:start="2894:9" pos:end="2894:12"><operator pos:start="2894:9" pos:end="2894:9">!</operator><name pos:start="2894:10" pos:end="2894:12">str</name></expr>)</condition><block type="pseudo" pos:start="2895:9" pos:end="2895:30"><block_content pos:start="2895:9" pos:end="2895:30">
        <expr_stmt pos:start="2895:9" pos:end="2895:30"><expr pos:start="2895:9" pos:end="2895:29"><name pos:start="2895:9" pos:end="2895:11">str</name> <operator pos:start="2895:13" pos:end="2895:13">=</operator> <literal type="string" pos:start="2895:15" pos:end="2895:29">"Unknown Error"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="2897:5" pos:end="2897:64"><expr pos:start="2897:5" pos:end="2897:63"><call pos:start="2897:5" pos:end="2897:63"><name pos:start="2897:5" pos:end="2897:15">avio_printf</name><argument_list pos:start="2897:16" pos:end="2897:63">(<argument pos:start="2897:17" pos:end="2897:21"><expr pos:start="2897:17" pos:end="2897:21"><name pos:start="2897:17" pos:end="2897:21"><name pos:start="2897:17" pos:end="2897:17">c</name><operator pos:start="2897:18" pos:end="2897:19">-&gt;</operator><name pos:start="2897:20" pos:end="2897:21">pb</name></name></expr></argument>, <argument pos:start="2897:24" pos:end="2897:43"><expr pos:start="2897:24" pos:end="2897:43"><literal type="string" pos:start="2897:24" pos:end="2897:43">"RTSP/1.0 %d %s\r\n"</literal></expr></argument>, <argument pos:start="2897:46" pos:end="2897:57"><expr pos:start="2897:46" pos:end="2897:57"><name pos:start="2897:46" pos:end="2897:57">error_number</name></expr></argument>, <argument pos:start="2897:60" pos:end="2897:62"><expr pos:start="2897:60" pos:end="2897:62"><name pos:start="2897:60" pos:end="2897:62">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2898:5" pos:end="2898:47"><expr pos:start="2898:5" pos:end="2898:46"><call pos:start="2898:5" pos:end="2898:46"><name pos:start="2898:5" pos:end="2898:15">avio_printf</name><argument_list pos:start="2898:16" pos:end="2898:46">(<argument pos:start="2898:17" pos:end="2898:21"><expr pos:start="2898:17" pos:end="2898:21"><name pos:start="2898:17" pos:end="2898:21"><name pos:start="2898:17" pos:end="2898:17">c</name><operator pos:start="2898:18" pos:end="2898:19">-&gt;</operator><name pos:start="2898:20" pos:end="2898:21">pb</name></name></expr></argument>, <argument pos:start="2898:24" pos:end="2898:37"><expr pos:start="2898:24" pos:end="2898:37"><literal type="string" pos:start="2898:24" pos:end="2898:37">"CSeq: %d\r\n"</literal></expr></argument>, <argument pos:start="2898:40" pos:end="2898:45"><expr pos:start="2898:40" pos:end="2898:45"><name pos:start="2898:40" pos:end="2898:45"><name pos:start="2898:40" pos:end="2898:40">c</name><operator pos:start="2898:41" pos:end="2898:42">-&gt;</operator><name pos:start="2898:43" pos:end="2898:45">seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="2900:5" pos:end="2900:25">/* output GMT time */</comment>
    <expr_stmt pos:start="2901:5" pos:end="2901:20"><expr pos:start="2901:5" pos:end="2901:19"><name pos:start="2901:5" pos:end="2901:6">ti</name> <operator pos:start="2901:8" pos:end="2901:8">=</operator> <call pos:start="2901:10" pos:end="2901:19"><name pos:start="2901:10" pos:end="2901:13">time</name><argument_list pos:start="2901:14" pos:end="2901:19">(<argument pos:start="2901:15" pos:end="2901:18"><expr pos:start="2901:15" pos:end="2901:18"><name pos:start="2901:15" pos:end="2901:18">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2902:5" pos:end="2902:21"><expr pos:start="2902:5" pos:end="2902:20"><name pos:start="2902:5" pos:end="2902:6">tm</name> <operator pos:start="2902:8" pos:end="2902:8">=</operator> <call pos:start="2902:10" pos:end="2902:20"><name pos:start="2902:10" pos:end="2902:15">gmtime</name><argument_list pos:start="2902:16" pos:end="2902:20">(<argument pos:start="2902:17" pos:end="2902:19"><expr pos:start="2902:17" pos:end="2902:19"><operator pos:start="2902:17" pos:end="2902:17">&amp;</operator><name pos:start="2902:18" pos:end="2902:19">ti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2903:5" pos:end="2903:62"><expr pos:start="2903:5" pos:end="2903:61"><call pos:start="2903:5" pos:end="2903:61"><name pos:start="2903:5" pos:end="2903:12">strftime</name><argument_list pos:start="2903:13" pos:end="2903:61">(<argument pos:start="2903:14" pos:end="2903:17"><expr pos:start="2903:14" pos:end="2903:17"><name pos:start="2903:14" pos:end="2903:17">buf2</name></expr></argument>, <argument pos:start="2903:20" pos:end="2903:31"><expr pos:start="2903:20" pos:end="2903:31"><sizeof pos:start="2903:20" pos:end="2903:31">sizeof<argument_list pos:start="2903:26" pos:end="2903:31">(<argument pos:start="2903:27" pos:end="2903:30"><expr pos:start="2903:27" pos:end="2903:30"><name pos:start="2903:27" pos:end="2903:30">buf2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="2903:34" pos:end="2903:56"><expr pos:start="2903:34" pos:end="2903:56"><literal type="string" pos:start="2903:34" pos:end="2903:56">"%a, %d %b %Y %H:%M:%S"</literal></expr></argument>, <argument pos:start="2903:59" pos:end="2903:60"><expr pos:start="2903:59" pos:end="2903:60"><name pos:start="2903:59" pos:end="2903:60">tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2904:5" pos:end="2904:49"><expr pos:start="2904:5" pos:end="2904:48"><call pos:start="2904:5" pos:end="2904:48"><name pos:start="2904:5" pos:end="2904:15">avio_printf</name><argument_list pos:start="2904:16" pos:end="2904:48">(<argument pos:start="2904:17" pos:end="2904:21"><expr pos:start="2904:17" pos:end="2904:21"><name pos:start="2904:17" pos:end="2904:21"><name pos:start="2904:17" pos:end="2904:17">c</name><operator pos:start="2904:18" pos:end="2904:19">-&gt;</operator><name pos:start="2904:20" pos:end="2904:21">pb</name></name></expr></argument>, <argument pos:start="2904:24" pos:end="2904:41"><expr pos:start="2904:24" pos:end="2904:41"><literal type="string" pos:start="2904:24" pos:end="2904:41">"Date: %s GMT\r\n"</literal></expr></argument>, <argument pos:start="2904:44" pos:end="2904:47"><expr pos:start="2904:44" pos:end="2904:47"><name pos:start="2904:44" pos:end="2904:47">buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="2907:1" pos:end="2911:1"><type pos:start="2907:1" pos:end="2907:11"><specifier pos:start="2907:1" pos:end="2907:6">static</specifier> <name pos:start="2907:8" pos:end="2907:11">void</name></type> <name pos:start="2907:13" pos:end="2907:28">rtsp_reply_error</name><parameter_list pos:start="2907:29" pos:end="2907:78">(<parameter pos:start="2907:30" pos:end="2907:43"><decl pos:start="2907:30" pos:end="2907:43"><type pos:start="2907:30" pos:end="2907:43"><name pos:start="2907:30" pos:end="2907:40">HTTPContext</name> <modifier pos:start="2907:42" pos:end="2907:42">*</modifier></type><name pos:start="2907:43" pos:end="2907:43">c</name></decl></parameter>, <parameter pos:start="2907:46" pos:end="2907:77"><decl pos:start="2907:46" pos:end="2907:77"><type pos:start="2907:46" pos:end="2907:77"><name pos:start="2907:46" pos:end="2907:64"><name pos:start="2907:46" pos:end="2907:49">enum</name> <name pos:start="2907:51" pos:end="2907:64">RTSPStatusCode</name></name></type> <name pos:start="2907:66" pos:end="2907:77">error_number</name></decl></parameter>)</parameter_list>
<block pos:start="2908:1" pos:end="2911:1">{<block_content pos:start="2909:5" pos:end="2910:31">
    <expr_stmt pos:start="2909:5" pos:end="2909:39"><expr pos:start="2909:5" pos:end="2909:38"><call pos:start="2909:5" pos:end="2909:38"><name pos:start="2909:5" pos:end="2909:21">rtsp_reply_header</name><argument_list pos:start="2909:22" pos:end="2909:38">(<argument pos:start="2909:23" pos:end="2909:23"><expr pos:start="2909:23" pos:end="2909:23"><name pos:start="2909:23" pos:end="2909:23">c</name></expr></argument>, <argument pos:start="2909:26" pos:end="2909:37"><expr pos:start="2909:26" pos:end="2909:37"><name pos:start="2909:26" pos:end="2909:37">error_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2910:5" pos:end="2910:31"><expr pos:start="2910:5" pos:end="2910:30"><call pos:start="2910:5" pos:end="2910:30"><name pos:start="2910:5" pos:end="2910:15">avio_printf</name><argument_list pos:start="2910:16" pos:end="2910:30">(<argument pos:start="2910:17" pos:end="2910:21"><expr pos:start="2910:17" pos:end="2910:21"><name pos:start="2910:17" pos:end="2910:21"><name pos:start="2910:17" pos:end="2910:17">c</name><operator pos:start="2910:18" pos:end="2910:19">-&gt;</operator><name pos:start="2910:20" pos:end="2910:21">pb</name></name></expr></argument>, <argument pos:start="2910:24" pos:end="2910:29"><expr pos:start="2910:24" pos:end="2910:29"><literal type="string" pos:start="2910:24" pos:end="2910:29">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="2913:1" pos:end="3000:1"><type pos:start="2913:1" pos:end="2913:10"><specifier pos:start="2913:1" pos:end="2913:6">static</specifier> <name pos:start="2913:8" pos:end="2913:10">int</name></type> <name pos:start="2913:12" pos:end="2913:29">rtsp_parse_request</name><parameter_list pos:start="2913:30" pos:end="2913:45">(<parameter pos:start="2913:31" pos:end="2913:44"><decl pos:start="2913:31" pos:end="2913:44"><type pos:start="2913:31" pos:end="2913:43"><name pos:start="2913:31" pos:end="2913:41">HTTPContext</name> <modifier pos:start="2913:43" pos:end="2913:43">*</modifier></type><name pos:start="2913:44" pos:end="2913:44">c</name></decl></parameter>)</parameter_list>
<block pos:start="2914:1" pos:end="3000:1">{<block_content pos:start="2915:5" pos:end="2999:13">
    <decl_stmt pos:start="2915:5" pos:end="2915:28"><decl pos:start="2915:5" pos:end="2915:17"><type pos:start="2915:5" pos:end="2915:16"><specifier pos:start="2915:5" pos:end="2915:9">const</specifier> <name pos:start="2915:11" pos:end="2915:14">char</name> <modifier pos:start="2915:16" pos:end="2915:16">*</modifier></type><name pos:start="2915:17" pos:end="2915:17">p</name></decl>, <decl pos:start="2915:20" pos:end="2915:22"><type ref="prev" pos:start="2915:5" pos:end="2915:16"><modifier pos:start="2915:20" pos:end="2915:20">*</modifier></type><name pos:start="2915:21" pos:end="2915:22">p1</name></decl>, <decl pos:start="2915:25" pos:end="2915:27"><type ref="prev" pos:start="2915:5" pos:end="2915:16"><modifier pos:start="2915:25" pos:end="2915:25">*</modifier></type><name pos:start="2915:26" pos:end="2915:27">p2</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2916:5" pos:end="2916:17"><decl pos:start="2916:5" pos:end="2916:16"><type pos:start="2916:5" pos:end="2916:8"><name pos:start="2916:5" pos:end="2916:8">char</name></type> <name pos:start="2916:10" pos:end="2916:16"><name pos:start="2916:10" pos:end="2916:12">cmd</name><index pos:start="2916:13" pos:end="2916:16">[<expr pos:start="2916:14" pos:end="2916:15"><literal type="number" pos:start="2916:14" pos:end="2916:15">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="2917:5" pos:end="2917:19"><decl pos:start="2917:5" pos:end="2917:18"><type pos:start="2917:5" pos:end="2917:8"><name pos:start="2917:5" pos:end="2917:8">char</name></type> <name pos:start="2917:10" pos:end="2917:18"><name pos:start="2917:10" pos:end="2917:12">url</name><index pos:start="2917:13" pos:end="2917:18">[<expr pos:start="2917:14" pos:end="2917:17"><literal type="number" pos:start="2917:14" pos:end="2917:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="2918:5" pos:end="2918:22"><decl pos:start="2918:5" pos:end="2918:21"><type pos:start="2918:5" pos:end="2918:8"><name pos:start="2918:5" pos:end="2918:8">char</name></type> <name pos:start="2918:10" pos:end="2918:21"><name pos:start="2918:10" pos:end="2918:17">protocol</name><index pos:start="2918:18" pos:end="2918:21">[<expr pos:start="2918:19" pos:end="2918:20"><literal type="number" pos:start="2918:19" pos:end="2918:20">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="2919:5" pos:end="2919:20"><decl pos:start="2919:5" pos:end="2919:19"><type pos:start="2919:5" pos:end="2919:8"><name pos:start="2919:5" pos:end="2919:8">char</name></type> <name pos:start="2919:10" pos:end="2919:19"><name pos:start="2919:10" pos:end="2919:13">line</name><index pos:start="2919:14" pos:end="2919:19">[<expr pos:start="2919:15" pos:end="2919:18"><literal type="number" pos:start="2919:15" pos:end="2919:18">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="2920:5" pos:end="2920:12"><decl pos:start="2920:5" pos:end="2920:11"><type pos:start="2920:5" pos:end="2920:7"><name pos:start="2920:5" pos:end="2920:7">int</name></type> <name pos:start="2920:9" pos:end="2920:11">len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2921:5" pos:end="2921:58"><decl pos:start="2921:5" pos:end="2921:37"><type pos:start="2921:5" pos:end="2921:21"><name pos:start="2921:5" pos:end="2921:21">RTSPMessageHeader</name></type> <name pos:start="2921:23" pos:end="2921:29">header1</name> <init pos:start="2921:31" pos:end="2921:37">= <expr pos:start="2921:33" pos:end="2921:37"><block pos:start="2921:33" pos:end="2921:37">{ <expr pos:start="2921:35" pos:end="2921:35"><literal type="number" pos:start="2921:35" pos:end="2921:35">0</literal></expr> }</block></expr></init></decl>, <decl pos:start="2921:40" pos:end="2921:57"><type ref="prev" pos:start="2921:5" pos:end="2921:21"><modifier pos:start="2921:40" pos:end="2921:40">*</modifier></type><name pos:start="2921:41" pos:end="2921:46">header</name> <init pos:start="2921:48" pos:end="2921:57">= <expr pos:start="2921:50" pos:end="2921:57"><operator pos:start="2921:50" pos:end="2921:50">&amp;</operator><name pos:start="2921:51" pos:end="2921:57">header1</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="2923:5" pos:end="2923:28"><expr pos:start="2923:5" pos:end="2923:27"><name pos:start="2923:5" pos:end="2923:20"><name pos:start="2923:5" pos:end="2923:5">c</name><operator pos:start="2923:6" pos:end="2923:7">-&gt;</operator><name pos:start="2923:8" pos:end="2923:17">buffer_ptr</name><index pos:start="2923:18" pos:end="2923:20">[<expr pos:start="2923:19" pos:end="2923:19"><literal type="number" pos:start="2923:19" pos:end="2923:19">0</literal></expr>]</index></name> <operator pos:start="2923:22" pos:end="2923:22">=</operator> <literal type="char" pos:start="2923:24" pos:end="2923:27">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="2924:5" pos:end="2924:18"><expr pos:start="2924:5" pos:end="2924:17"><name pos:start="2924:5" pos:end="2924:5">p</name> <operator pos:start="2924:7" pos:end="2924:7">=</operator> <name pos:start="2924:9" pos:end="2924:17"><name pos:start="2924:9" pos:end="2924:9">c</name><operator pos:start="2924:10" pos:end="2924:11">-&gt;</operator><name pos:start="2924:12" pos:end="2924:17">buffer</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="2926:5" pos:end="2926:35"><expr pos:start="2926:5" pos:end="2926:34"><call pos:start="2926:5" pos:end="2926:34"><name pos:start="2926:5" pos:end="2926:12">get_word</name><argument_list pos:start="2926:13" pos:end="2926:34">(<argument pos:start="2926:14" pos:end="2926:16"><expr pos:start="2926:14" pos:end="2926:16"><name pos:start="2926:14" pos:end="2926:16">cmd</name></expr></argument>, <argument pos:start="2926:19" pos:end="2926:29"><expr pos:start="2926:19" pos:end="2926:29"><sizeof pos:start="2926:19" pos:end="2926:29">sizeof<argument_list pos:start="2926:25" pos:end="2926:29">(<argument pos:start="2926:26" pos:end="2926:28"><expr pos:start="2926:26" pos:end="2926:28"><name pos:start="2926:26" pos:end="2926:28">cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="2926:32" pos:end="2926:33"><expr pos:start="2926:32" pos:end="2926:33"><operator pos:start="2926:32" pos:end="2926:32">&amp;</operator><name pos:start="2926:33" pos:end="2926:33">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2927:5" pos:end="2927:35"><expr pos:start="2927:5" pos:end="2927:34"><call pos:start="2927:5" pos:end="2927:34"><name pos:start="2927:5" pos:end="2927:12">get_word</name><argument_list pos:start="2927:13" pos:end="2927:34">(<argument pos:start="2927:14" pos:end="2927:16"><expr pos:start="2927:14" pos:end="2927:16"><name pos:start="2927:14" pos:end="2927:16">url</name></expr></argument>, <argument pos:start="2927:19" pos:end="2927:29"><expr pos:start="2927:19" pos:end="2927:29"><sizeof pos:start="2927:19" pos:end="2927:29">sizeof<argument_list pos:start="2927:25" pos:end="2927:29">(<argument pos:start="2927:26" pos:end="2927:28"><expr pos:start="2927:26" pos:end="2927:28"><name pos:start="2927:26" pos:end="2927:28">url</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="2927:32" pos:end="2927:33"><expr pos:start="2927:32" pos:end="2927:33"><operator pos:start="2927:32" pos:end="2927:32">&amp;</operator><name pos:start="2927:33" pos:end="2927:33">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2928:5" pos:end="2928:45"><expr pos:start="2928:5" pos:end="2928:44"><call pos:start="2928:5" pos:end="2928:44"><name pos:start="2928:5" pos:end="2928:12">get_word</name><argument_list pos:start="2928:13" pos:end="2928:44">(<argument pos:start="2928:14" pos:end="2928:21"><expr pos:start="2928:14" pos:end="2928:21"><name pos:start="2928:14" pos:end="2928:21">protocol</name></expr></argument>, <argument pos:start="2928:24" pos:end="2928:39"><expr pos:start="2928:24" pos:end="2928:39"><sizeof pos:start="2928:24" pos:end="2928:39">sizeof<argument_list pos:start="2928:30" pos:end="2928:39">(<argument pos:start="2928:31" pos:end="2928:38"><expr pos:start="2928:31" pos:end="2928:38"><name pos:start="2928:31" pos:end="2928:38">protocol</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="2928:42" pos:end="2928:43"><expr pos:start="2928:42" pos:end="2928:43"><operator pos:start="2928:42" pos:end="2928:42">&amp;</operator><name pos:start="2928:43" pos:end="2928:43">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="2930:5" pos:end="2930:50"><expr pos:start="2930:5" pos:end="2930:49"><call pos:start="2930:5" pos:end="2930:49"><name pos:start="2930:5" pos:end="2930:14">av_strlcpy</name><argument_list pos:start="2930:15" pos:end="2930:49">(<argument pos:start="2930:16" pos:end="2930:24"><expr pos:start="2930:16" pos:end="2930:24"><name pos:start="2930:16" pos:end="2930:24"><name pos:start="2930:16" pos:end="2930:16">c</name><operator pos:start="2930:17" pos:end="2930:18">-&gt;</operator><name pos:start="2930:19" pos:end="2930:24">method</name></name></expr></argument>, <argument pos:start="2930:27" pos:end="2930:29"><expr pos:start="2930:27" pos:end="2930:29"><name pos:start="2930:27" pos:end="2930:29">cmd</name></expr></argument>, <argument pos:start="2930:32" pos:end="2930:48"><expr pos:start="2930:32" pos:end="2930:48"><sizeof pos:start="2930:32" pos:end="2930:48">sizeof<argument_list pos:start="2930:38" pos:end="2930:48">(<argument pos:start="2930:39" pos:end="2930:47"><expr pos:start="2930:39" pos:end="2930:47"><name pos:start="2930:39" pos:end="2930:47"><name pos:start="2930:39" pos:end="2930:39">c</name><operator pos:start="2930:40" pos:end="2930:41">-&gt;</operator><name pos:start="2930:42" pos:end="2930:47">method</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2931:5" pos:end="2931:44"><expr pos:start="2931:5" pos:end="2931:43"><call pos:start="2931:5" pos:end="2931:43"><name pos:start="2931:5" pos:end="2931:14">av_strlcpy</name><argument_list pos:start="2931:15" pos:end="2931:43">(<argument pos:start="2931:16" pos:end="2931:21"><expr pos:start="2931:16" pos:end="2931:21"><name pos:start="2931:16" pos:end="2931:21"><name pos:start="2931:16" pos:end="2931:16">c</name><operator pos:start="2931:17" pos:end="2931:18">-&gt;</operator><name pos:start="2931:19" pos:end="2931:21">url</name></name></expr></argument>, <argument pos:start="2931:24" pos:end="2931:26"><expr pos:start="2931:24" pos:end="2931:26"><name pos:start="2931:24" pos:end="2931:26">url</name></expr></argument>, <argument pos:start="2931:29" pos:end="2931:42"><expr pos:start="2931:29" pos:end="2931:42"><sizeof pos:start="2931:29" pos:end="2931:42">sizeof<argument_list pos:start="2931:35" pos:end="2931:42">(<argument pos:start="2931:36" pos:end="2931:41"><expr pos:start="2931:36" pos:end="2931:41"><name pos:start="2931:36" pos:end="2931:41"><name pos:start="2931:36" pos:end="2931:36">c</name><operator pos:start="2931:37" pos:end="2931:38">-&gt;</operator><name pos:start="2931:39" pos:end="2931:41">url</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2932:5" pos:end="2932:59"><expr pos:start="2932:5" pos:end="2932:58"><call pos:start="2932:5" pos:end="2932:58"><name pos:start="2932:5" pos:end="2932:14">av_strlcpy</name><argument_list pos:start="2932:15" pos:end="2932:58">(<argument pos:start="2932:16" pos:end="2932:26"><expr pos:start="2932:16" pos:end="2932:26"><name pos:start="2932:16" pos:end="2932:26"><name pos:start="2932:16" pos:end="2932:16">c</name><operator pos:start="2932:17" pos:end="2932:18">-&gt;</operator><name pos:start="2932:19" pos:end="2932:26">protocol</name></name></expr></argument>, <argument pos:start="2932:29" pos:end="2932:36"><expr pos:start="2932:29" pos:end="2932:36"><name pos:start="2932:29" pos:end="2932:36">protocol</name></expr></argument>, <argument pos:start="2932:39" pos:end="2932:57"><expr pos:start="2932:39" pos:end="2932:57"><sizeof pos:start="2932:39" pos:end="2932:57">sizeof<argument_list pos:start="2932:45" pos:end="2932:57">(<argument pos:start="2932:46" pos:end="2932:56"><expr pos:start="2932:46" pos:end="2932:56"><name pos:start="2932:46" pos:end="2932:56"><name pos:start="2932:46" pos:end="2932:46">c</name><operator pos:start="2932:47" pos:end="2932:48">-&gt;</operator><name pos:start="2932:49" pos:end="2932:56">protocol</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="2934:5" pos:end="2938:5"><if pos:start="2934:5" pos:end="2938:5">if <condition pos:start="2934:8" pos:end="2934:38">(<expr pos:start="2934:9" pos:end="2934:37"><call pos:start="2934:9" pos:end="2934:33"><name pos:start="2934:9" pos:end="2934:25">avio_open_dyn_buf</name><argument_list pos:start="2934:26" pos:end="2934:33">(<argument pos:start="2934:27" pos:end="2934:32"><expr pos:start="2934:27" pos:end="2934:32"><operator pos:start="2934:27" pos:end="2934:27">&amp;</operator><name pos:start="2934:28" pos:end="2934:32"><name pos:start="2934:28" pos:end="2934:28">c</name><operator pos:start="2934:29" pos:end="2934:30">-&gt;</operator><name pos:start="2934:31" pos:end="2934:32">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="2934:35" pos:end="2934:35">&lt;</operator> <literal type="number" pos:start="2934:37" pos:end="2934:37">0</literal></expr>)</condition> <block pos:start="2934:40" pos:end="2938:5">{<block_content pos:start="2936:9" pos:end="2937:18">
        <comment type="block" pos:start="2935:9" pos:end="2935:33">/* XXX: cannot do more */</comment>
        <expr_stmt pos:start="2936:9" pos:end="2936:21"><expr pos:start="2936:9" pos:end="2936:20"><name pos:start="2936:9" pos:end="2936:13"><name pos:start="2936:9" pos:end="2936:9">c</name><operator pos:start="2936:10" pos:end="2936:11">-&gt;</operator><name pos:start="2936:12" pos:end="2936:13">pb</name></name> <operator pos:start="2936:15" pos:end="2936:15">=</operator> <name pos:start="2936:17" pos:end="2936:20">NULL</name></expr>;</expr_stmt> <comment type="block" pos:start="2936:23" pos:end="2936:34">/* safety */</comment>
        <return pos:start="2937:9" pos:end="2937:18">return <expr pos:start="2937:16" pos:end="2937:17"><operator pos:start="2937:16" pos:end="2937:16">-</operator><literal type="number" pos:start="2937:17" pos:end="2937:17">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="2940:5" pos:end="2940:28">/* check version name */</comment>
    <if_stmt pos:start="2941:5" pos:end="2944:5"><if pos:start="2941:5" pos:end="2944:5">if <condition pos:start="2941:8" pos:end="2941:37">(<expr pos:start="2941:9" pos:end="2941:36"><call pos:start="2941:9" pos:end="2941:36"><name pos:start="2941:9" pos:end="2941:14">strcmp</name><argument_list pos:start="2941:15" pos:end="2941:36">(<argument pos:start="2941:16" pos:end="2941:23"><expr pos:start="2941:16" pos:end="2941:23"><name pos:start="2941:16" pos:end="2941:23">protocol</name></expr></argument>, <argument pos:start="2941:26" pos:end="2941:35"><expr pos:start="2941:26" pos:end="2941:35"><literal type="string" pos:start="2941:26" pos:end="2941:35">"RTSP/1.0"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2941:39" pos:end="2944:5">{<block_content pos:start="2942:9" pos:end="2943:21">
        <expr_stmt pos:start="2942:9" pos:end="2942:49"><expr pos:start="2942:9" pos:end="2942:48"><call pos:start="2942:9" pos:end="2942:48"><name pos:start="2942:9" pos:end="2942:24">rtsp_reply_error</name><argument_list pos:start="2942:25" pos:end="2942:48">(<argument pos:start="2942:26" pos:end="2942:26"><expr pos:start="2942:26" pos:end="2942:26"><name pos:start="2942:26" pos:end="2942:26">c</name></expr></argument>, <argument pos:start="2942:29" pos:end="2942:47"><expr pos:start="2942:29" pos:end="2942:47"><name pos:start="2942:29" pos:end="2942:47">RTSP_STATUS_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="2943:9" pos:end="2943:21">goto <name pos:start="2943:14" pos:end="2943:20">the_end</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="2946:5" pos:end="2946:32">/* parse each header line */</comment>
    <comment type="block" pos:start="2947:5" pos:end="2947:27">/* skip to next line */</comment>
    <while pos:start="2948:5" pos:end="2949:12">while <condition pos:start="2948:11" pos:end="2948:36">(<expr pos:start="2948:12" pos:end="2948:35"><operator pos:start="2948:12" pos:end="2948:12">*</operator><name pos:start="2948:13" pos:end="2948:13">p</name> <operator pos:start="2948:15" pos:end="2948:16">!=</operator> <literal type="char" pos:start="2948:18" pos:end="2948:21">'\n'</literal> <operator pos:start="2948:23" pos:end="2948:24">&amp;&amp;</operator> <operator pos:start="2948:26" pos:end="2948:26">*</operator><name pos:start="2948:27" pos:end="2948:27">p</name> <operator pos:start="2948:29" pos:end="2948:30">!=</operator> <literal type="char" pos:start="2948:32" pos:end="2948:35">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="2949:9" pos:end="2949:12"><block_content pos:start="2949:9" pos:end="2949:12">
        <expr_stmt pos:start="2949:9" pos:end="2949:12"><expr pos:start="2949:9" pos:end="2949:11"><name pos:start="2949:9" pos:end="2949:9">p</name><operator pos:start="2949:10" pos:end="2949:11">++</operator></expr>;</expr_stmt></block_content></block></while>
    <if_stmt pos:start="2950:5" pos:end="2951:12"><if pos:start="2950:5" pos:end="2951:12">if <condition pos:start="2950:8" pos:end="2950:19">(<expr pos:start="2950:9" pos:end="2950:18"><operator pos:start="2950:9" pos:end="2950:9">*</operator><name pos:start="2950:10" pos:end="2950:10">p</name> <operator pos:start="2950:12" pos:end="2950:13">==</operator> <literal type="char" pos:start="2950:15" pos:end="2950:18">'\n'</literal></expr>)</condition><block type="pseudo" pos:start="2951:9" pos:end="2951:12"><block_content pos:start="2951:9" pos:end="2951:12">
        <expr_stmt pos:start="2951:9" pos:end="2951:12"><expr pos:start="2951:9" pos:end="2951:11"><name pos:start="2951:9" pos:end="2951:9">p</name><operator pos:start="2951:10" pos:end="2951:11">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <while pos:start="2952:5" pos:end="2969:5">while <condition pos:start="2952:11" pos:end="2952:22">(<expr pos:start="2952:12" pos:end="2952:21"><operator pos:start="2952:12" pos:end="2952:12">*</operator><name pos:start="2952:13" pos:end="2952:13">p</name> <operator pos:start="2952:15" pos:end="2952:16">!=</operator> <literal type="char" pos:start="2952:18" pos:end="2952:21">'\0'</literal></expr>)</condition> <block pos:start="2952:24" pos:end="2969:5">{<block_content pos:start="2953:9" pos:end="2968:19">
        <expr_stmt pos:start="2953:9" pos:end="2953:56"><expr pos:start="2953:9" pos:end="2953:55"><name pos:start="2953:9" pos:end="2953:10">p1</name> <operator pos:start="2953:12" pos:end="2953:12">=</operator> <call pos:start="2953:14" pos:end="2953:55"><name pos:start="2953:14" pos:end="2953:19">memchr</name><argument_list pos:start="2953:20" pos:end="2953:55">(<argument pos:start="2953:21" pos:end="2953:21"><expr pos:start="2953:21" pos:end="2953:21"><name pos:start="2953:21" pos:end="2953:21">p</name></expr></argument>, <argument pos:start="2953:24" pos:end="2953:27"><expr pos:start="2953:24" pos:end="2953:27"><literal type="char" pos:start="2953:24" pos:end="2953:27">'\n'</literal></expr></argument>, <argument pos:start="2953:30" pos:end="2953:54"><expr pos:start="2953:30" pos:end="2953:54"><operator pos:start="2953:30" pos:end="2953:30">(</operator><name pos:start="2953:31" pos:end="2953:34">char</name> <operator pos:start="2953:36" pos:end="2953:36">*</operator><operator pos:start="2953:37" pos:end="2953:37">)</operator><name pos:start="2953:38" pos:end="2953:50"><name pos:start="2953:38" pos:end="2953:38">c</name><operator pos:start="2953:39" pos:end="2953:40">-&gt;</operator><name pos:start="2953:41" pos:end="2953:50">buffer_ptr</name></name> <operator pos:start="2953:52" pos:end="2953:52">-</operator> <name pos:start="2953:54" pos:end="2953:54">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2954:9" pos:end="2955:18"><if pos:start="2954:9" pos:end="2955:18">if <condition pos:start="2954:12" pos:end="2954:16">(<expr pos:start="2954:13" pos:end="2954:15"><operator pos:start="2954:13" pos:end="2954:13">!</operator><name pos:start="2954:14" pos:end="2954:15">p1</name></expr>)</condition><block type="pseudo" pos:start="2955:13" pos:end="2955:18"><block_content pos:start="2955:13" pos:end="2955:18">
            <break pos:start="2955:13" pos:end="2955:18">break;</break></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2956:9" pos:end="2956:16"><expr pos:start="2956:9" pos:end="2956:15"><name pos:start="2956:9" pos:end="2956:10">p2</name> <operator pos:start="2956:12" pos:end="2956:12">=</operator> <name pos:start="2956:14" pos:end="2956:15">p1</name></expr>;</expr_stmt>
        <if_stmt pos:start="2957:9" pos:end="2958:17"><if pos:start="2957:9" pos:end="2958:17">if <condition pos:start="2957:12" pos:end="2957:37">(<expr pos:start="2957:13" pos:end="2957:36"><name pos:start="2957:13" pos:end="2957:14">p2</name> <operator pos:start="2957:16" pos:end="2957:16">&gt;</operator> <name pos:start="2957:18" pos:end="2957:18">p</name> <operator pos:start="2957:20" pos:end="2957:21">&amp;&amp;</operator> <name pos:start="2957:23" pos:end="2957:28"><name pos:start="2957:23" pos:end="2957:24">p2</name><index pos:start="2957:25" pos:end="2957:28">[<expr pos:start="2957:26" pos:end="2957:27"><operator pos:start="2957:26" pos:end="2957:26">-</operator><literal type="number" pos:start="2957:27" pos:end="2957:27">1</literal></expr>]</index></name> <operator pos:start="2957:30" pos:end="2957:31">==</operator> <literal type="char" pos:start="2957:33" pos:end="2957:36">'\r'</literal></expr>)</condition><block type="pseudo" pos:start="2958:13" pos:end="2958:17"><block_content pos:start="2958:13" pos:end="2958:17">
            <expr_stmt pos:start="2958:13" pos:end="2958:17"><expr pos:start="2958:13" pos:end="2958:16"><name pos:start="2958:13" pos:end="2958:14">p2</name><operator pos:start="2958:15" pos:end="2958:16">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="block" pos:start="2959:9" pos:end="2959:29">/* skip empty line */</comment>
        <if_stmt pos:start="2960:9" pos:end="2961:18"><if pos:start="2960:9" pos:end="2961:18">if <condition pos:start="2960:12" pos:end="2960:20">(<expr pos:start="2960:13" pos:end="2960:19"><name pos:start="2960:13" pos:end="2960:14">p2</name> <operator pos:start="2960:16" pos:end="2960:17">==</operator> <name pos:start="2960:19" pos:end="2960:19">p</name></expr>)</condition><block type="pseudo" pos:start="2961:13" pos:end="2961:18"><block_content pos:start="2961:13" pos:end="2961:18">
            <break pos:start="2961:13" pos:end="2961:18">break;</break></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2962:9" pos:end="2962:21"><expr pos:start="2962:9" pos:end="2962:20"><name pos:start="2962:9" pos:end="2962:11">len</name> <operator pos:start="2962:13" pos:end="2962:13">=</operator> <name pos:start="2962:15" pos:end="2962:16">p2</name> <operator pos:start="2962:18" pos:end="2962:18">-</operator> <name pos:start="2962:20" pos:end="2962:20">p</name></expr>;</expr_stmt>
        <if_stmt pos:start="2963:9" pos:end="2964:35"><if pos:start="2963:9" pos:end="2964:35">if <condition pos:start="2963:12" pos:end="2963:35">(<expr pos:start="2963:13" pos:end="2963:34"><name pos:start="2963:13" pos:end="2963:15">len</name> <operator pos:start="2963:17" pos:end="2963:17">&gt;</operator> <sizeof pos:start="2963:19" pos:end="2963:30">sizeof<argument_list pos:start="2963:25" pos:end="2963:30">(<argument pos:start="2963:26" pos:end="2963:29"><expr pos:start="2963:26" pos:end="2963:29"><name pos:start="2963:26" pos:end="2963:29">line</name></expr></argument>)</argument_list></sizeof> <operator pos:start="2963:32" pos:end="2963:32">-</operator> <literal type="number" pos:start="2963:34" pos:end="2963:34">1</literal></expr>)</condition><block type="pseudo" pos:start="2964:13" pos:end="2964:35"><block_content pos:start="2964:13" pos:end="2964:35">
            <expr_stmt pos:start="2964:13" pos:end="2964:35"><expr pos:start="2964:13" pos:end="2964:34"><name pos:start="2964:13" pos:end="2964:15">len</name> <operator pos:start="2964:17" pos:end="2964:17">=</operator> <sizeof pos:start="2964:19" pos:end="2964:30">sizeof<argument_list pos:start="2964:25" pos:end="2964:30">(<argument pos:start="2964:26" pos:end="2964:29"><expr pos:start="2964:26" pos:end="2964:29"><name pos:start="2964:26" pos:end="2964:29">line</name></expr></argument>)</argument_list></sizeof> <operator pos:start="2964:32" pos:end="2964:32">-</operator> <literal type="number" pos:start="2964:34" pos:end="2964:34">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2965:9" pos:end="2965:29"><expr pos:start="2965:9" pos:end="2965:28"><call pos:start="2965:9" pos:end="2965:28"><name pos:start="2965:9" pos:end="2965:14">memcpy</name><argument_list pos:start="2965:15" pos:end="2965:28">(<argument pos:start="2965:16" pos:end="2965:19"><expr pos:start="2965:16" pos:end="2965:19"><name pos:start="2965:16" pos:end="2965:19">line</name></expr></argument>, <argument pos:start="2965:22" pos:end="2965:22"><expr pos:start="2965:22" pos:end="2965:22"><name pos:start="2965:22" pos:end="2965:22">p</name></expr></argument>, <argument pos:start="2965:25" pos:end="2965:27"><expr pos:start="2965:25" pos:end="2965:27"><name pos:start="2965:25" pos:end="2965:27">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2966:9" pos:end="2966:25"><expr pos:start="2966:9" pos:end="2966:24"><name pos:start="2966:9" pos:end="2966:17"><name pos:start="2966:9" pos:end="2966:12">line</name><index pos:start="2966:13" pos:end="2966:17">[<expr pos:start="2966:14" pos:end="2966:16"><name pos:start="2966:14" pos:end="2966:16">len</name></expr>]</index></name> <operator pos:start="2966:19" pos:end="2966:19">=</operator> <literal type="char" pos:start="2966:21" pos:end="2966:24">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="2967:9" pos:end="2967:59"><expr pos:start="2967:9" pos:end="2967:58"><call pos:start="2967:9" pos:end="2967:58"><name pos:start="2967:9" pos:end="2967:26">ff_rtsp_parse_line</name><argument_list pos:start="2967:27" pos:end="2967:58">(<argument pos:start="2967:28" pos:end="2967:31"><expr pos:start="2967:28" pos:end="2967:31"><name pos:start="2967:28" pos:end="2967:31">NULL</name></expr></argument>, <argument pos:start="2967:34" pos:end="2967:39"><expr pos:start="2967:34" pos:end="2967:39"><name pos:start="2967:34" pos:end="2967:39">header</name></expr></argument>, <argument pos:start="2967:42" pos:end="2967:45"><expr pos:start="2967:42" pos:end="2967:45"><name pos:start="2967:42" pos:end="2967:45">line</name></expr></argument>, <argument pos:start="2967:48" pos:end="2967:51"><expr pos:start="2967:48" pos:end="2967:51"><name pos:start="2967:48" pos:end="2967:51">NULL</name></expr></argument>, <argument pos:start="2967:54" pos:end="2967:57"><expr pos:start="2967:54" pos:end="2967:57"><name pos:start="2967:54" pos:end="2967:57">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2968:9" pos:end="2968:19"><expr pos:start="2968:9" pos:end="2968:18"><name pos:start="2968:9" pos:end="2968:9">p</name> <operator pos:start="2968:11" pos:end="2968:11">=</operator> <name pos:start="2968:13" pos:end="2968:14">p1</name> <operator pos:start="2968:16" pos:end="2968:16">+</operator> <literal type="number" pos:start="2968:18" pos:end="2968:18">1</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block" pos:start="2971:5" pos:end="2971:32">/* handle sequence number */</comment>
    <expr_stmt pos:start="2972:5" pos:end="2972:25"><expr pos:start="2972:5" pos:end="2972:24"><name pos:start="2972:5" pos:end="2972:10"><name pos:start="2972:5" pos:end="2972:5">c</name><operator pos:start="2972:6" pos:end="2972:7">-&gt;</operator><name pos:start="2972:8" pos:end="2972:10">seq</name></name> <operator pos:start="2972:12" pos:end="2972:12">=</operator> <name pos:start="2972:14" pos:end="2972:24"><name pos:start="2972:14" pos:end="2972:19">header</name><operator pos:start="2972:20" pos:end="2972:21">-&gt;</operator><name pos:start="2972:22" pos:end="2972:24">seq</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="2974:5" pos:end="2987:48"><if pos:start="2974:5" pos:end="2975:34">if <condition pos:start="2974:8" pos:end="2974:33">(<expr pos:start="2974:9" pos:end="2974:32"><operator pos:start="2974:9" pos:end="2974:9">!</operator><call pos:start="2974:10" pos:end="2974:32"><name pos:start="2974:10" pos:end="2974:15">strcmp</name><argument_list pos:start="2974:16" pos:end="2974:32">(<argument pos:start="2974:17" pos:end="2974:19"><expr pos:start="2974:17" pos:end="2974:19"><name pos:start="2974:17" pos:end="2974:19">cmd</name></expr></argument>, <argument pos:start="2974:22" pos:end="2974:31"><expr pos:start="2974:22" pos:end="2974:31"><literal type="string" pos:start="2974:22" pos:end="2974:31">"DESCRIBE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2975:9" pos:end="2975:34"><block_content pos:start="2975:9" pos:end="2975:34">
        <expr_stmt pos:start="2975:9" pos:end="2975:34"><expr pos:start="2975:9" pos:end="2975:33"><call pos:start="2975:9" pos:end="2975:33"><name pos:start="2975:9" pos:end="2975:25">rtsp_cmd_describe</name><argument_list pos:start="2975:26" pos:end="2975:33">(<argument pos:start="2975:27" pos:end="2975:27"><expr pos:start="2975:27" pos:end="2975:27"><name pos:start="2975:27" pos:end="2975:27">c</name></expr></argument>, <argument pos:start="2975:30" pos:end="2975:32"><expr pos:start="2975:30" pos:end="2975:32"><name pos:start="2975:30" pos:end="2975:32">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif" pos:start="2976:5" pos:end="2977:33">else if <condition pos:start="2976:13" pos:end="2976:37">(<expr pos:start="2976:14" pos:end="2976:36"><operator pos:start="2976:14" pos:end="2976:14">!</operator><call pos:start="2976:15" pos:end="2976:36"><name pos:start="2976:15" pos:end="2976:20">strcmp</name><argument_list pos:start="2976:21" pos:end="2976:36">(<argument pos:start="2976:22" pos:end="2976:24"><expr pos:start="2976:22" pos:end="2976:24"><name pos:start="2976:22" pos:end="2976:24">cmd</name></expr></argument>, <argument pos:start="2976:27" pos:end="2976:35"><expr pos:start="2976:27" pos:end="2976:35"><literal type="string" pos:start="2976:27" pos:end="2976:35">"OPTIONS"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2977:9" pos:end="2977:33"><block_content pos:start="2977:9" pos:end="2977:33">
        <expr_stmt pos:start="2977:9" pos:end="2977:33"><expr pos:start="2977:9" pos:end="2977:32"><call pos:start="2977:9" pos:end="2977:32"><name pos:start="2977:9" pos:end="2977:24">rtsp_cmd_options</name><argument_list pos:start="2977:25" pos:end="2977:32">(<argument pos:start="2977:26" pos:end="2977:26"><expr pos:start="2977:26" pos:end="2977:26"><name pos:start="2977:26" pos:end="2977:26">c</name></expr></argument>, <argument pos:start="2977:29" pos:end="2977:31"><expr pos:start="2977:29" pos:end="2977:31"><name pos:start="2977:29" pos:end="2977:31">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif" pos:start="2978:5" pos:end="2979:39">else if <condition pos:start="2978:13" pos:end="2978:35">(<expr pos:start="2978:14" pos:end="2978:34"><operator pos:start="2978:14" pos:end="2978:14">!</operator><call pos:start="2978:15" pos:end="2978:34"><name pos:start="2978:15" pos:end="2978:20">strcmp</name><argument_list pos:start="2978:21" pos:end="2978:34">(<argument pos:start="2978:22" pos:end="2978:24"><expr pos:start="2978:22" pos:end="2978:24"><name pos:start="2978:22" pos:end="2978:24">cmd</name></expr></argument>, <argument pos:start="2978:27" pos:end="2978:33"><expr pos:start="2978:27" pos:end="2978:33"><literal type="string" pos:start="2978:27" pos:end="2978:33">"SETUP"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2979:9" pos:end="2979:39"><block_content pos:start="2979:9" pos:end="2979:39">
        <expr_stmt pos:start="2979:9" pos:end="2979:39"><expr pos:start="2979:9" pos:end="2979:38"><call pos:start="2979:9" pos:end="2979:38"><name pos:start="2979:9" pos:end="2979:22">rtsp_cmd_setup</name><argument_list pos:start="2979:23" pos:end="2979:38">(<argument pos:start="2979:24" pos:end="2979:24"><expr pos:start="2979:24" pos:end="2979:24"><name pos:start="2979:24" pos:end="2979:24">c</name></expr></argument>, <argument pos:start="2979:27" pos:end="2979:29"><expr pos:start="2979:27" pos:end="2979:29"><name pos:start="2979:27" pos:end="2979:29">url</name></expr></argument>, <argument pos:start="2979:32" pos:end="2979:37"><expr pos:start="2979:32" pos:end="2979:37"><name pos:start="2979:32" pos:end="2979:37">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif" pos:start="2980:5" pos:end="2981:38">else if <condition pos:start="2980:13" pos:end="2980:34">(<expr pos:start="2980:14" pos:end="2980:33"><operator pos:start="2980:14" pos:end="2980:14">!</operator><call pos:start="2980:15" pos:end="2980:33"><name pos:start="2980:15" pos:end="2980:20">strcmp</name><argument_list pos:start="2980:21" pos:end="2980:33">(<argument pos:start="2980:22" pos:end="2980:24"><expr pos:start="2980:22" pos:end="2980:24"><name pos:start="2980:22" pos:end="2980:24">cmd</name></expr></argument>, <argument pos:start="2980:27" pos:end="2980:32"><expr pos:start="2980:27" pos:end="2980:32"><literal type="string" pos:start="2980:27" pos:end="2980:32">"PLAY"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2981:9" pos:end="2981:38"><block_content pos:start="2981:9" pos:end="2981:38">
        <expr_stmt pos:start="2981:9" pos:end="2981:38"><expr pos:start="2981:9" pos:end="2981:37"><call pos:start="2981:9" pos:end="2981:37"><name pos:start="2981:9" pos:end="2981:21">rtsp_cmd_play</name><argument_list pos:start="2981:22" pos:end="2981:37">(<argument pos:start="2981:23" pos:end="2981:23"><expr pos:start="2981:23" pos:end="2981:23"><name pos:start="2981:23" pos:end="2981:23">c</name></expr></argument>, <argument pos:start="2981:26" pos:end="2981:28"><expr pos:start="2981:26" pos:end="2981:28"><name pos:start="2981:26" pos:end="2981:28">url</name></expr></argument>, <argument pos:start="2981:31" pos:end="2981:36"><expr pos:start="2981:31" pos:end="2981:36"><name pos:start="2981:31" pos:end="2981:36">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif" pos:start="2982:5" pos:end="2983:46">else if <condition pos:start="2982:13" pos:end="2982:35">(<expr pos:start="2982:14" pos:end="2982:34"><operator pos:start="2982:14" pos:end="2982:14">!</operator><call pos:start="2982:15" pos:end="2982:34"><name pos:start="2982:15" pos:end="2982:20">strcmp</name><argument_list pos:start="2982:21" pos:end="2982:34">(<argument pos:start="2982:22" pos:end="2982:24"><expr pos:start="2982:22" pos:end="2982:24"><name pos:start="2982:22" pos:end="2982:24">cmd</name></expr></argument>, <argument pos:start="2982:27" pos:end="2982:33"><expr pos:start="2982:27" pos:end="2982:33"><literal type="string" pos:start="2982:27" pos:end="2982:33">"PAUSE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2983:9" pos:end="2983:46"><block_content pos:start="2983:9" pos:end="2983:46">
        <expr_stmt pos:start="2983:9" pos:end="2983:46"><expr pos:start="2983:9" pos:end="2983:45"><call pos:start="2983:9" pos:end="2983:45"><name pos:start="2983:9" pos:end="2983:26">rtsp_cmd_interrupt</name><argument_list pos:start="2983:27" pos:end="2983:45">(<argument pos:start="2983:28" pos:end="2983:28"><expr pos:start="2983:28" pos:end="2983:28"><name pos:start="2983:28" pos:end="2983:28">c</name></expr></argument>, <argument pos:start="2983:31" pos:end="2983:33"><expr pos:start="2983:31" pos:end="2983:33"><name pos:start="2983:31" pos:end="2983:33">url</name></expr></argument>, <argument pos:start="2983:36" pos:end="2983:41"><expr pos:start="2983:36" pos:end="2983:41"><name pos:start="2983:36" pos:end="2983:41">header</name></expr></argument>, <argument pos:start="2983:44" pos:end="2983:44"><expr pos:start="2983:44" pos:end="2983:44"><literal type="number" pos:start="2983:44" pos:end="2983:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif" pos:start="2984:5" pos:end="2985:46">else if <condition pos:start="2984:13" pos:end="2984:38">(<expr pos:start="2984:14" pos:end="2984:37"><operator pos:start="2984:14" pos:end="2984:14">!</operator><call pos:start="2984:15" pos:end="2984:37"><name pos:start="2984:15" pos:end="2984:20">strcmp</name><argument_list pos:start="2984:21" pos:end="2984:37">(<argument pos:start="2984:22" pos:end="2984:24"><expr pos:start="2984:22" pos:end="2984:24"><name pos:start="2984:22" pos:end="2984:24">cmd</name></expr></argument>, <argument pos:start="2984:27" pos:end="2984:36"><expr pos:start="2984:27" pos:end="2984:36"><literal type="string" pos:start="2984:27" pos:end="2984:36">"TEARDOWN"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2985:9" pos:end="2985:46"><block_content pos:start="2985:9" pos:end="2985:46">
        <expr_stmt pos:start="2985:9" pos:end="2985:46"><expr pos:start="2985:9" pos:end="2985:45"><call pos:start="2985:9" pos:end="2985:45"><name pos:start="2985:9" pos:end="2985:26">rtsp_cmd_interrupt</name><argument_list pos:start="2985:27" pos:end="2985:45">(<argument pos:start="2985:28" pos:end="2985:28"><expr pos:start="2985:28" pos:end="2985:28"><name pos:start="2985:28" pos:end="2985:28">c</name></expr></argument>, <argument pos:start="2985:31" pos:end="2985:33"><expr pos:start="2985:31" pos:end="2985:33"><name pos:start="2985:31" pos:end="2985:33">url</name></expr></argument>, <argument pos:start="2985:36" pos:end="2985:41"><expr pos:start="2985:36" pos:end="2985:41"><name pos:start="2985:36" pos:end="2985:41">header</name></expr></argument>, <argument pos:start="2985:44" pos:end="2985:44"><expr pos:start="2985:44" pos:end="2985:44"><literal type="number" pos:start="2985:44" pos:end="2985:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else pos:start="2986:5" pos:end="2987:48">else<block type="pseudo" pos:start="2987:9" pos:end="2987:48"><block_content pos:start="2987:9" pos:end="2987:48">
        <expr_stmt pos:start="2987:9" pos:end="2987:48"><expr pos:start="2987:9" pos:end="2987:47"><call pos:start="2987:9" pos:end="2987:47"><name pos:start="2987:9" pos:end="2987:24">rtsp_reply_error</name><argument_list pos:start="2987:25" pos:end="2987:47">(<argument pos:start="2987:26" pos:end="2987:26"><expr pos:start="2987:26" pos:end="2987:26"><name pos:start="2987:26" pos:end="2987:26">c</name></expr></argument>, <argument pos:start="2987:29" pos:end="2987:46"><expr pos:start="2987:29" pos:end="2987:46"><name pos:start="2987:29" pos:end="2987:46">RTSP_STATUS_METHOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

 <label pos:start="2989:2" pos:end="2989:9"><name pos:start="2989:2" pos:end="2989:8">the_end</name>:</label>
    <expr_stmt pos:start="2990:5" pos:end="2990:51"><expr pos:start="2990:5" pos:end="2990:50"><name pos:start="2990:5" pos:end="2990:7">len</name> <operator pos:start="2990:9" pos:end="2990:9">=</operator> <call pos:start="2990:11" pos:end="2990:50"><name pos:start="2990:11" pos:end="2990:28">avio_close_dyn_buf</name><argument_list pos:start="2990:29" pos:end="2990:50">(<argument pos:start="2990:30" pos:end="2990:34"><expr pos:start="2990:30" pos:end="2990:34"><name pos:start="2990:30" pos:end="2990:34"><name pos:start="2990:30" pos:end="2990:30">c</name><operator pos:start="2990:31" pos:end="2990:32">-&gt;</operator><name pos:start="2990:33" pos:end="2990:34">pb</name></name></expr></argument>, <argument pos:start="2990:37" pos:end="2990:49"><expr pos:start="2990:37" pos:end="2990:49"><operator pos:start="2990:37" pos:end="2990:37">&amp;</operator><name pos:start="2990:38" pos:end="2990:49"><name pos:start="2990:38" pos:end="2990:38">c</name><operator pos:start="2990:39" pos:end="2990:40">-&gt;</operator><name pos:start="2990:41" pos:end="2990:49">pb_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2991:5" pos:end="2991:17"><expr pos:start="2991:5" pos:end="2991:16"><name pos:start="2991:5" pos:end="2991:9"><name pos:start="2991:5" pos:end="2991:5">c</name><operator pos:start="2991:6" pos:end="2991:7">-&gt;</operator><name pos:start="2991:8" pos:end="2991:9">pb</name></name> <operator pos:start="2991:11" pos:end="2991:11">=</operator> <name pos:start="2991:13" pos:end="2991:16">NULL</name></expr>;</expr_stmt> <comment type="block" pos:start="2991:19" pos:end="2991:30">/* safety */</comment>
    <if_stmt pos:start="2992:5" pos:end="2994:18"><if pos:start="2992:5" pos:end="2994:18">if <condition pos:start="2992:8" pos:end="2992:16">(<expr pos:start="2992:9" pos:end="2992:15"><name pos:start="2992:9" pos:end="2992:11">len</name> <operator pos:start="2992:13" pos:end="2992:13">&lt;</operator> <literal type="number" pos:start="2992:15" pos:end="2992:15">0</literal></expr>)</condition><block type="pseudo" pos:start="2994:9" pos:end="2994:18"><block_content pos:start="2994:9" pos:end="2994:18">
        <comment type="block" pos:start="2993:9" pos:end="2993:33">/* XXX: cannot do more */</comment>
        <return pos:start="2994:9" pos:end="2994:18">return <expr pos:start="2994:16" pos:end="2994:17"><operator pos:start="2994:16" pos:end="2994:16">-</operator><literal type="number" pos:start="2994:17" pos:end="2994:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="2996:5" pos:end="2996:33"><expr pos:start="2996:5" pos:end="2996:32"><name pos:start="2996:5" pos:end="2996:17"><name pos:start="2996:5" pos:end="2996:5">c</name><operator pos:start="2996:6" pos:end="2996:7">-&gt;</operator><name pos:start="2996:8" pos:end="2996:17">buffer_ptr</name></name> <operator pos:start="2996:19" pos:end="2996:19">=</operator> <name pos:start="2996:21" pos:end="2996:32"><name pos:start="2996:21" pos:end="2996:21">c</name><operator pos:start="2996:22" pos:end="2996:23">-&gt;</operator><name pos:start="2996:24" pos:end="2996:32">pb_buffer</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="2997:5" pos:end="2997:39"><expr pos:start="2997:5" pos:end="2997:38"><name pos:start="2997:5" pos:end="2997:17"><name pos:start="2997:5" pos:end="2997:5">c</name><operator pos:start="2997:6" pos:end="2997:7">-&gt;</operator><name pos:start="2997:8" pos:end="2997:17">buffer_end</name></name> <operator pos:start="2997:19" pos:end="2997:19">=</operator> <name pos:start="2997:21" pos:end="2997:32"><name pos:start="2997:21" pos:end="2997:21">c</name><operator pos:start="2997:22" pos:end="2997:23">-&gt;</operator><name pos:start="2997:24" pos:end="2997:32">pb_buffer</name></name> <operator pos:start="2997:34" pos:end="2997:34">+</operator> <name pos:start="2997:36" pos:end="2997:38">len</name></expr>;</expr_stmt>
    <expr_stmt pos:start="2998:5" pos:end="2998:36"><expr pos:start="2998:5" pos:end="2998:35"><name pos:start="2998:5" pos:end="2998:12"><name pos:start="2998:5" pos:end="2998:5">c</name><operator pos:start="2998:6" pos:end="2998:7">-&gt;</operator><name pos:start="2998:8" pos:end="2998:12">state</name></name> <operator pos:start="2998:14" pos:end="2998:14">=</operator> <name pos:start="2998:16" pos:end="2998:35">RTSPSTATE_SEND_REPLY</name></expr>;</expr_stmt>
    <return pos:start="2999:5" pos:end="2999:13">return <expr pos:start="2999:12" pos:end="2999:12"><literal type="number" pos:start="2999:12" pos:end="2999:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="3002:1" pos:end="3045:1"><type pos:start="3002:1" pos:end="3002:10"><specifier pos:start="3002:1" pos:end="3002:6">static</specifier> <name pos:start="3002:8" pos:end="3002:10">int</name></type> <name pos:start="3002:12" pos:end="3002:34">prepare_sdp_description</name><parameter_list pos:start="3002:35" pos:end="3003:56">(<parameter pos:start="3002:36" pos:end="3002:57"><decl pos:start="3002:36" pos:end="3002:57"><type pos:start="3002:36" pos:end="3002:57"><name pos:start="3002:36" pos:end="3002:49">FFServerStream</name> <modifier pos:start="3002:51" pos:end="3002:51">*</modifier></type><name pos:start="3002:52" pos:end="3002:57">stream</name></decl></parameter>, <parameter pos:start="3002:60" pos:end="3002:76"><decl pos:start="3002:60" pos:end="3002:76"><type pos:start="3002:60" pos:end="3002:76"><name pos:start="3002:60" pos:end="3002:66">uint8_t</name> <modifier pos:start="3002:68" pos:end="3002:68">*</modifier><modifier pos:start="3002:69" pos:end="3002:69">*</modifier></type><name pos:start="3002:70" pos:end="3002:76">pbuffer</name></decl></parameter>,
                                   <parameter pos:start="3003:36" pos:end="3003:55"><decl pos:start="3003:36" pos:end="3003:55"><type pos:start="3003:36" pos:end="3003:55"><name pos:start="3003:36" pos:end="3003:49"><name pos:start="3003:36" pos:end="3003:41">struct</name> <name pos:start="3003:43" pos:end="3003:49">in_addr</name></name></type> <name pos:start="3003:51" pos:end="3003:55">my_ip</name></decl></parameter>)</parameter_list>
<block pos:start="3004:1" pos:end="3045:1">{<block_content pos:start="3005:5" pos:end="3044:57">
    <decl_stmt pos:start="3005:5" pos:end="3005:25"><decl pos:start="3005:5" pos:end="3005:24"><type pos:start="3005:5" pos:end="3005:21"><name pos:start="3005:5" pos:end="3005:19">AVFormatContext</name> <modifier pos:start="3005:21" pos:end="3005:21">*</modifier></type><name pos:start="3005:22" pos:end="3005:24">avc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3006:5" pos:end="3006:68"><decl pos:start="3006:5" pos:end="3006:67"><type pos:start="3006:5" pos:end="3006:20"><name pos:start="3006:5" pos:end="3006:18">AVOutputFormat</name> <modifier pos:start="3006:20" pos:end="3006:20">*</modifier></type><name pos:start="3006:21" pos:end="3006:30">rtp_format</name> <init pos:start="3006:32" pos:end="3006:67">= <expr pos:start="3006:34" pos:end="3006:67"><call pos:start="3006:34" pos:end="3006:67"><name pos:start="3006:34" pos:end="3006:48">av_guess_format</name><argument_list pos:start="3006:49" pos:end="3006:67">(<argument pos:start="3006:50" pos:end="3006:54"><expr pos:start="3006:50" pos:end="3006:54"><literal type="string" pos:start="3006:50" pos:end="3006:54">"rtp"</literal></expr></argument>, <argument pos:start="3006:57" pos:end="3006:60"><expr pos:start="3006:57" pos:end="3006:60"><name pos:start="3006:57" pos:end="3006:60">NULL</name></expr></argument>, <argument pos:start="3006:63" pos:end="3006:66"><expr pos:start="3006:63" pos:end="3006:66"><name pos:start="3006:63" pos:end="3006:66">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="3007:5" pos:end="3007:79"><decl pos:start="3007:5" pos:end="3007:78"><type pos:start="3007:5" pos:end="3007:23"><name pos:start="3007:5" pos:end="3007:21">AVDictionaryEntry</name> <modifier pos:start="3007:23" pos:end="3007:23">*</modifier></type><name pos:start="3007:24" pos:end="3007:28">entry</name> <init pos:start="3007:30" pos:end="3007:78">= <expr pos:start="3007:32" pos:end="3007:78"><call pos:start="3007:32" pos:end="3007:78"><name pos:start="3007:32" pos:end="3007:42">av_dict_get</name><argument_list pos:start="3007:43" pos:end="3007:78">(<argument pos:start="3007:44" pos:end="3007:59"><expr pos:start="3007:44" pos:end="3007:59"><name pos:start="3007:44" pos:end="3007:59"><name pos:start="3007:44" pos:end="3007:49">stream</name><operator pos:start="3007:50" pos:end="3007:51">-&gt;</operator><name pos:start="3007:52" pos:end="3007:59">metadata</name></name></expr></argument>, <argument pos:start="3007:62" pos:end="3007:68"><expr pos:start="3007:62" pos:end="3007:68"><literal type="string" pos:start="3007:62" pos:end="3007:68">"title"</literal></expr></argument>, <argument pos:start="3007:71" pos:end="3007:74"><expr pos:start="3007:71" pos:end="3007:74"><name pos:start="3007:71" pos:end="3007:74">NULL</name></expr></argument>, <argument pos:start="3007:77" pos:end="3007:77"><expr pos:start="3007:77" pos:end="3007:77"><literal type="number" pos:start="3007:77" pos:end="3007:77">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="3008:5" pos:end="3008:10"><decl pos:start="3008:5" pos:end="3008:9"><type pos:start="3008:5" pos:end="3008:7"><name pos:start="3008:5" pos:end="3008:7">int</name></type> <name pos:start="3008:9" pos:end="3008:9">i</name></decl>;</decl_stmt>

    <expr_stmt pos:start="3010:5" pos:end="3010:20"><expr pos:start="3010:5" pos:end="3010:19"><operator pos:start="3010:5" pos:end="3010:5">*</operator><name pos:start="3010:6" pos:end="3010:12">pbuffer</name> <operator pos:start="3010:14" pos:end="3010:14">=</operator> <name pos:start="3010:16" pos:end="3010:19">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="3012:5" pos:end="3012:36"><expr pos:start="3012:5" pos:end="3012:35"><name pos:start="3012:5" pos:end="3012:7">avc</name> <operator pos:start="3012:9" pos:end="3012:9">=</operator>  <call pos:start="3012:12" pos:end="3012:35"><name pos:start="3012:12" pos:end="3012:33">avformat_alloc_context</name><argument_list pos:start="3012:34" pos:end="3012:35">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3013:5" pos:end="3014:18"><if pos:start="3013:5" pos:end="3014:18">if <condition pos:start="3013:8" pos:end="3013:28">(<expr pos:start="3013:9" pos:end="3013:27"><operator pos:start="3013:9" pos:end="3013:9">!</operator><name pos:start="3013:10" pos:end="3013:12">avc</name> <operator pos:start="3013:14" pos:end="3013:15">||</operator> <operator pos:start="3013:17" pos:end="3013:17">!</operator><name pos:start="3013:18" pos:end="3013:27">rtp_format</name></expr>)</condition><block type="pseudo" pos:start="3014:9" pos:end="3014:18"><block_content pos:start="3014:9" pos:end="3014:18">
        <return pos:start="3014:9" pos:end="3014:18">return <expr pos:start="3014:16" pos:end="3014:17"><operator pos:start="3014:16" pos:end="3014:16">-</operator><literal type="number" pos:start="3014:17" pos:end="3014:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="3016:5" pos:end="3016:30"><expr pos:start="3016:5" pos:end="3016:29"><name pos:start="3016:5" pos:end="3016:16"><name pos:start="3016:5" pos:end="3016:7">avc</name><operator pos:start="3016:8" pos:end="3016:9">-&gt;</operator><name pos:start="3016:10" pos:end="3016:16">oformat</name></name> <operator pos:start="3016:18" pos:end="3016:18">=</operator> <name pos:start="3016:20" pos:end="3016:29">rtp_format</name></expr>;</expr_stmt>
    <expr_stmt pos:start="3017:5" pos:end="3018:54"><expr pos:start="3017:5" pos:end="3018:53"><call pos:start="3017:5" pos:end="3018:53"><name pos:start="3017:5" pos:end="3017:15">av_dict_set</name><argument_list pos:start="3017:16" pos:end="3018:53">(<argument pos:start="3017:17" pos:end="3017:30"><expr pos:start="3017:17" pos:end="3017:30"><operator pos:start="3017:17" pos:end="3017:17">&amp;</operator><name pos:start="3017:18" pos:end="3017:30"><name pos:start="3017:18" pos:end="3017:20">avc</name><operator pos:start="3017:21" pos:end="3017:22">-&gt;</operator><name pos:start="3017:23" pos:end="3017:30">metadata</name></name></expr></argument>, <argument pos:start="3017:33" pos:end="3017:39"><expr pos:start="3017:33" pos:end="3017:39"><literal type="string" pos:start="3017:33" pos:end="3017:39">"title"</literal></expr></argument>,
                <argument pos:start="3018:17" pos:end="3018:49"><expr pos:start="3018:17" pos:end="3018:49"><ternary pos:start="3018:17" pos:end="3018:49"><condition pos:start="3018:17" pos:end="3018:23"><expr pos:start="3018:17" pos:end="3018:21"><name pos:start="3018:17" pos:end="3018:21">entry</name></expr> ?</condition><then pos:start="3018:25" pos:end="3018:36"> <expr pos:start="3018:25" pos:end="3018:36"><name pos:start="3018:25" pos:end="3018:36"><name pos:start="3018:25" pos:end="3018:29">entry</name><operator pos:start="3018:30" pos:end="3018:31">-&gt;</operator><name pos:start="3018:32" pos:end="3018:36">value</name></name></expr> </then><else pos:start="3018:38" pos:end="3018:49">: <expr pos:start="3018:40" pos:end="3018:49"><literal type="string" pos:start="3018:40" pos:end="3018:49">"No Title"</literal></expr></else></ternary></expr></argument>, <argument pos:start="3018:52" pos:end="3018:52"><expr pos:start="3018:52" pos:end="3018:52"><literal type="number" pos:start="3018:52" pos:end="3018:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3019:5" pos:end="3024:55"><if pos:start="3019:5" pos:end="3023:5">if <condition pos:start="3019:8" pos:end="3019:29">(<expr pos:start="3019:9" pos:end="3019:28"><name pos:start="3019:9" pos:end="3019:28"><name pos:start="3019:9" pos:end="3019:14">stream</name><operator pos:start="3019:15" pos:end="3019:16">-&gt;</operator><name pos:start="3019:17" pos:end="3019:28">is_multicast</name></name></expr>)</condition> <block pos:start="3019:31" pos:end="3023:5">{<block_content pos:start="3020:9" pos:end="3022:64">
        <expr_stmt pos:start="3020:9" pos:end="3022:64"><expr pos:start="3020:9" pos:end="3022:63"><call pos:start="3020:9" pos:end="3022:63"><name pos:start="3020:9" pos:end="3020:16">snprintf</name><argument_list pos:start="3020:17" pos:end="3022:63">(<argument pos:start="3020:18" pos:end="3020:30"><expr pos:start="3020:18" pos:end="3020:30"><name pos:start="3020:18" pos:end="3020:30"><name pos:start="3020:18" pos:end="3020:20">avc</name><operator pos:start="3020:21" pos:end="3020:22">-&gt;</operator><name pos:start="3020:23" pos:end="3020:30">filename</name></name></expr></argument>, <argument pos:start="3020:33" pos:end="3020:36"><expr pos:start="3020:33" pos:end="3020:36"><literal type="number" pos:start="3020:33" pos:end="3020:36">1024</literal></expr></argument>, <argument pos:start="3020:39" pos:end="3020:70"><expr pos:start="3020:39" pos:end="3020:70"><literal type="string" pos:start="3020:39" pos:end="3020:70">"rtp://%s:%d?multicast=1?ttl=%d"</literal></expr></argument>,
                 <argument pos:start="3021:18" pos:end="3021:48"><expr pos:start="3021:18" pos:end="3021:48"><call pos:start="3021:18" pos:end="3021:48"><name pos:start="3021:18" pos:end="3021:26">inet_ntoa</name><argument_list pos:start="3021:27" pos:end="3021:48">(<argument pos:start="3021:28" pos:end="3021:47"><expr pos:start="3021:28" pos:end="3021:47"><name pos:start="3021:28" pos:end="3021:47"><name pos:start="3021:28" pos:end="3021:33">stream</name><operator pos:start="3021:34" pos:end="3021:35">-&gt;</operator><name pos:start="3021:36" pos:end="3021:47">multicast_ip</name></name></expr></argument>)</argument_list></call></expr></argument>,
                 <argument pos:start="3022:18" pos:end="3022:39"><expr pos:start="3022:18" pos:end="3022:39"><name pos:start="3022:18" pos:end="3022:39"><name pos:start="3022:18" pos:end="3022:23">stream</name><operator pos:start="3022:24" pos:end="3022:25">-&gt;</operator><name pos:start="3022:26" pos:end="3022:39">multicast_port</name></name></expr></argument>, <argument pos:start="3022:42" pos:end="3022:62"><expr pos:start="3022:42" pos:end="3022:62"><name pos:start="3022:42" pos:end="3022:62"><name pos:start="3022:42" pos:end="3022:47">stream</name><operator pos:start="3022:48" pos:end="3022:49">-&gt;</operator><name pos:start="3022:50" pos:end="3022:62">multicast_ttl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="3023:7" pos:end="3024:55">else<block type="pseudo" pos:start="3024:9" pos:end="3024:55"><block_content pos:start="3024:9" pos:end="3024:55">
        <expr_stmt pos:start="3024:9" pos:end="3024:55"><expr pos:start="3024:9" pos:end="3024:54"><call pos:start="3024:9" pos:end="3024:54"><name pos:start="3024:9" pos:end="3024:16">snprintf</name><argument_list pos:start="3024:17" pos:end="3024:54">(<argument pos:start="3024:18" pos:end="3024:30"><expr pos:start="3024:18" pos:end="3024:30"><name pos:start="3024:18" pos:end="3024:30"><name pos:start="3024:18" pos:end="3024:20">avc</name><operator pos:start="3024:21" pos:end="3024:22">-&gt;</operator><name pos:start="3024:23" pos:end="3024:30">filename</name></name></expr></argument>, <argument pos:start="3024:33" pos:end="3024:36"><expr pos:start="3024:33" pos:end="3024:36"><literal type="number" pos:start="3024:33" pos:end="3024:36">1024</literal></expr></argument>, <argument pos:start="3024:39" pos:end="3024:53"><expr pos:start="3024:39" pos:end="3024:53"><literal type="string" pos:start="3024:39" pos:end="3024:53">"rtp://0.0.0.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <for pos:start="3026:5" pos:end="3034:0">for<control pos:start="3026:8" pos:end="3026:43">(<init pos:start="3026:9" pos:end="3026:14"><expr pos:start="3026:9" pos:end="3026:13"><name pos:start="3026:9" pos:end="3026:9">i</name> <operator pos:start="3026:11" pos:end="3026:11">=</operator> <literal type="number" pos:start="3026:13" pos:end="3026:13">0</literal></expr>;</init> <condition pos:start="3026:16" pos:end="3026:38"><expr pos:start="3026:16" pos:end="3026:37"><name pos:start="3026:16" pos:end="3026:16">i</name> <operator pos:start="3026:18" pos:end="3026:18">&lt;</operator> <name pos:start="3026:20" pos:end="3026:37"><name pos:start="3026:20" pos:end="3026:25">stream</name><operator pos:start="3026:26" pos:end="3026:27">-&gt;</operator><name pos:start="3026:28" pos:end="3026:37">nb_streams</name></name></expr>;</condition> <incr pos:start="3026:40" pos:end="3026:42"><expr pos:start="3026:40" pos:end="3026:42"><name pos:start="3026:40" pos:end="3026:40">i</name><operator pos:start="3026:41" pos:end="3026:42">++</operator></expr></incr>)</control> <block pos:start="3026:45" pos:end="3034:0">{<block_content pos:start="3027:9" pos:end="3031:47">
        <decl_stmt pos:start="3027:9" pos:end="3027:54"><decl pos:start="3027:9" pos:end="3027:53"><type pos:start="3027:9" pos:end="3027:18"><name pos:start="3027:9" pos:end="3027:16">AVStream</name> <modifier pos:start="3027:18" pos:end="3027:18">*</modifier></type><name pos:start="3027:19" pos:end="3027:20">st</name> <init pos:start="3027:22" pos:end="3027:53">= <expr pos:start="3027:24" pos:end="3027:53"><call pos:start="3027:24" pos:end="3027:53"><name pos:start="3027:24" pos:end="3027:42">avformat_new_stream</name><argument_list pos:start="3027:43" pos:end="3027:53">(<argument pos:start="3027:44" pos:end="3027:46"><expr pos:start="3027:44" pos:end="3027:46"><name pos:start="3027:44" pos:end="3027:46">avc</name></expr></argument>, <argument pos:start="3027:49" pos:end="3027:52"><expr pos:start="3027:49" pos:end="3027:52"><name pos:start="3027:49" pos:end="3027:52">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="3028:9" pos:end="3029:26"><if pos:start="3028:9" pos:end="3029:26">if <condition pos:start="3028:12" pos:end="3028:16">(<expr pos:start="3028:13" pos:end="3028:15"><operator pos:start="3028:13" pos:end="3028:13">!</operator><name pos:start="3028:14" pos:end="3028:15">st</name></expr>)</condition><block type="pseudo" pos:start="3029:13" pos:end="3029:26"><block_content pos:start="3029:13" pos:end="3029:26">
            <goto pos:start="3029:13" pos:end="3029:26">goto <name pos:start="3029:18" pos:end="3029:25">sdp_done</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="3030:9" pos:end="3030:97"><expr pos:start="3030:9" pos:end="3030:96"><call pos:start="3030:9" pos:end="3030:96"><name pos:start="3030:9" pos:end="3030:39">avcodec_parameters_from_context</name><argument_list pos:start="3030:40" pos:end="3030:96">(<argument pos:start="3030:41" pos:end="3030:68"><expr pos:start="3030:41" pos:end="3030:68"><name pos:start="3030:41" pos:end="3030:58"><name pos:start="3030:41" pos:end="3030:46">stream</name><operator pos:start="3030:47" pos:end="3030:48">-&gt;</operator><name pos:start="3030:49" pos:end="3030:55">streams</name><index pos:start="3030:56" pos:end="3030:58">[<expr pos:start="3030:57" pos:end="3030:57"><name pos:start="3030:57" pos:end="3030:57">i</name></expr>]</index></name><operator pos:start="3030:59" pos:end="3030:60">-&gt;</operator><name pos:start="3030:61" pos:end="3030:68">codecpar</name></expr></argument>, <argument pos:start="3030:71" pos:end="3030:95"><expr pos:start="3030:71" pos:end="3030:95"><name pos:start="3030:71" pos:end="3030:88"><name pos:start="3030:71" pos:end="3030:76">stream</name><operator pos:start="3030:77" pos:end="3030:78">-&gt;</operator><name pos:start="3030:79" pos:end="3030:85">streams</name><index pos:start="3030:86" pos:end="3030:88">[<expr pos:start="3030:87" pos:end="3030:87"><name pos:start="3030:87" pos:end="3030:87">i</name></expr>]</index></name><operator pos:start="3030:89" pos:end="3030:90">-&gt;</operator><name pos:start="3030:91" pos:end="3030:95">codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3031:9" pos:end="3031:47"><expr pos:start="3031:9" pos:end="3031:46"><call pos:start="3031:9" pos:end="3031:46"><name pos:start="3031:9" pos:end="3031:22">unlayer_stream</name><argument_list pos:start="3031:23" pos:end="3031:46">(<argument pos:start="3031:24" pos:end="3031:25"><expr pos:start="3031:24" pos:end="3031:25"><name pos:start="3031:24" pos:end="3031:25">st</name></expr></argument>, <argument pos:start="3031:28" pos:end="3031:45"><expr pos:start="3031:28" pos:end="3031:45"><name pos:start="3031:28" pos:end="3031:45"><name pos:start="3031:28" pos:end="3031:33">stream</name><operator pos:start="3031:34" pos:end="3031:35">-&gt;</operator><name pos:start="3031:36" pos:end="3031:42">streams</name><index pos:start="3031:43" pos:end="3031:45">[<expr pos:start="3031:44" pos:end="3031:44"><name pos:start="3031:44" pos:end="3031:44">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
<cpp:define pos:start="3033:1" pos:end="3033:25">#<cpp:directive pos:start="3033:2" pos:end="3033:7">define</cpp:directive> <cpp:macro pos:start="3033:9" pos:end="3033:20"><name pos:start="3033:9" pos:end="3033:20">PBUFFER_SIZE</name></cpp:macro> <cpp:value pos:start="3033:22" pos:end="3033:25">2048</cpp:value></cpp:define>
    <expr_stmt pos:start="3034:5" pos:end="3034:40"><expr pos:start="3034:5" pos:end="3034:39"><operator pos:start="3034:5" pos:end="3034:5">*</operator><name pos:start="3034:6" pos:end="3034:12">pbuffer</name> <operator pos:start="3034:14" pos:end="3034:14">=</operator> <call pos:start="3034:16" pos:end="3034:39"><name pos:start="3034:16" pos:end="3034:25">av_mallocz</name><argument_list pos:start="3034:26" pos:end="3034:39">(<argument pos:start="3034:27" pos:end="3034:38"><expr pos:start="3034:27" pos:end="3034:38"><name pos:start="3034:27" pos:end="3034:38">PBUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3035:5" pos:end="3036:22"><if pos:start="3035:5" pos:end="3036:22">if <condition pos:start="3035:8" pos:end="3035:18">(<expr pos:start="3035:9" pos:end="3035:17"><operator pos:start="3035:9" pos:end="3035:9">!</operator><operator pos:start="3035:10" pos:end="3035:10">*</operator><name pos:start="3035:11" pos:end="3035:17">pbuffer</name></expr>)</condition><block type="pseudo" pos:start="3036:9" pos:end="3036:22"><block_content pos:start="3036:9" pos:end="3036:22">
        <goto pos:start="3036:9" pos:end="3036:22">goto <name pos:start="3036:14" pos:end="3036:21">sdp_done</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt pos:start="3037:5" pos:end="3037:51"><expr pos:start="3037:5" pos:end="3037:50"><call pos:start="3037:5" pos:end="3037:50"><name pos:start="3037:5" pos:end="3037:17">av_sdp_create</name><argument_list pos:start="3037:18" pos:end="3037:50">(<argument pos:start="3037:19" pos:end="3037:22"><expr pos:start="3037:19" pos:end="3037:22"><operator pos:start="3037:19" pos:end="3037:19">&amp;</operator><name pos:start="3037:20" pos:end="3037:22">avc</name></expr></argument>, <argument pos:start="3037:25" pos:end="3037:25"><expr pos:start="3037:25" pos:end="3037:25"><literal type="number" pos:start="3037:25" pos:end="3037:25">1</literal></expr></argument>, <argument pos:start="3037:28" pos:end="3037:35"><expr pos:start="3037:28" pos:end="3037:35"><operator pos:start="3037:28" pos:end="3037:28">*</operator><name pos:start="3037:29" pos:end="3037:35">pbuffer</name></expr></argument>, <argument pos:start="3037:38" pos:end="3037:49"><expr pos:start="3037:38" pos:end="3037:49"><name pos:start="3037:38" pos:end="3037:49">PBUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

 <label pos:start="3039:2" pos:end="3039:10"><name pos:start="3039:2" pos:end="3039:9">sdp_done</name>:</label>
    <expr_stmt pos:start="3040:5" pos:end="3040:28"><expr pos:start="3040:5" pos:end="3040:27"><call pos:start="3040:5" pos:end="3040:27"><name pos:start="3040:5" pos:end="3040:12">av_freep</name><argument_list pos:start="3040:13" pos:end="3040:27">(<argument pos:start="3040:14" pos:end="3040:26"><expr pos:start="3040:14" pos:end="3040:26"><operator pos:start="3040:14" pos:end="3040:14">&amp;</operator><name pos:start="3040:15" pos:end="3040:26"><name pos:start="3040:15" pos:end="3040:17">avc</name><operator pos:start="3040:18" pos:end="3040:19">-&gt;</operator><name pos:start="3040:20" pos:end="3040:26">streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3041:5" pos:end="3041:33"><expr pos:start="3041:5" pos:end="3041:32"><call pos:start="3041:5" pos:end="3041:32"><name pos:start="3041:5" pos:end="3041:16">av_dict_free</name><argument_list pos:start="3041:17" pos:end="3041:32">(<argument pos:start="3041:18" pos:end="3041:31"><expr pos:start="3041:18" pos:end="3041:31"><operator pos:start="3041:18" pos:end="3041:18">&amp;</operator><name pos:start="3041:19" pos:end="3041:31"><name pos:start="3041:19" pos:end="3041:21">avc</name><operator pos:start="3041:22" pos:end="3041:23">-&gt;</operator><name pos:start="3041:24" pos:end="3041:31">metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3042:5" pos:end="3042:17"><expr pos:start="3042:5" pos:end="3042:16"><call pos:start="3042:5" pos:end="3042:16"><name pos:start="3042:5" pos:end="3042:11">av_free</name><argument_list pos:start="3042:12" pos:end="3042:16">(<argument pos:start="3042:13" pos:end="3042:15"><expr pos:start="3042:13" pos:end="3042:15"><name pos:start="3042:13" pos:end="3042:15">avc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="3044:5" pos:end="3044:57">return <expr pos:start="3044:12" pos:end="3044:56"><ternary pos:start="3044:12" pos:end="3044:56"><condition pos:start="3044:12" pos:end="3044:21"><expr pos:start="3044:12" pos:end="3044:19"><operator pos:start="3044:12" pos:end="3044:12">*</operator><name pos:start="3044:13" pos:end="3044:19">pbuffer</name></expr> ?</condition><then pos:start="3044:23" pos:end="3044:38"> <expr pos:start="3044:23" pos:end="3044:38"><call pos:start="3044:23" pos:end="3044:38"><name pos:start="3044:23" pos:end="3044:28">strlen</name><argument_list pos:start="3044:29" pos:end="3044:38">(<argument pos:start="3044:30" pos:end="3044:37"><expr pos:start="3044:30" pos:end="3044:37"><operator pos:start="3044:30" pos:end="3044:30">*</operator><name pos:start="3044:31" pos:end="3044:37">pbuffer</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="3044:40" pos:end="3044:56">: <expr pos:start="3044:42" pos:end="3044:56"><call pos:start="3044:42" pos:end="3044:56"><name pos:start="3044:42" pos:end="3044:48">AVERROR</name><argument_list pos:start="3044:49" pos:end="3044:56">(<argument pos:start="3044:50" pos:end="3044:55"><expr pos:start="3044:50" pos:end="3044:55"><name pos:start="3044:50" pos:end="3044:55">ENOMEM</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function pos:start="3047:1" pos:end="3055:1"><type pos:start="3047:1" pos:end="3047:11"><specifier pos:start="3047:1" pos:end="3047:6">static</specifier> <name pos:start="3047:8" pos:end="3047:11">void</name></type> <name pos:start="3047:13" pos:end="3047:28">rtsp_cmd_options</name><parameter_list pos:start="3047:29" pos:end="3047:61">(<parameter pos:start="3047:30" pos:end="3047:43"><decl pos:start="3047:30" pos:end="3047:43"><type pos:start="3047:30" pos:end="3047:43"><name pos:start="3047:30" pos:end="3047:40">HTTPContext</name> <modifier pos:start="3047:42" pos:end="3047:42">*</modifier></type><name pos:start="3047:43" pos:end="3047:43">c</name></decl></parameter>, <parameter pos:start="3047:46" pos:end="3047:60"><decl pos:start="3047:46" pos:end="3047:60"><type pos:start="3047:46" pos:end="3047:60"><specifier pos:start="3047:46" pos:end="3047:50">const</specifier> <name pos:start="3047:52" pos:end="3047:55">char</name> <modifier pos:start="3047:57" pos:end="3047:57">*</modifier></type><name pos:start="3047:58" pos:end="3047:60">url</name></decl></parameter>)</parameter_list>
<block pos:start="3048:1" pos:end="3055:1">{<block_content pos:start="3050:5" pos:end="3054:31">
    <comment type="block" pos:start="3049:5" pos:end="3049:47">/* rtsp_reply_header(c, RTSP_STATUS_OK); */</comment>
    <expr_stmt pos:start="3050:5" pos:end="3050:67"><expr pos:start="3050:5" pos:end="3050:66"><call pos:start="3050:5" pos:end="3050:66"><name pos:start="3050:5" pos:end="3050:15">avio_printf</name><argument_list pos:start="3050:16" pos:end="3050:66">(<argument pos:start="3050:17" pos:end="3050:21"><expr pos:start="3050:17" pos:end="3050:21"><name pos:start="3050:17" pos:end="3050:21"><name pos:start="3050:17" pos:end="3050:17">c</name><operator pos:start="3050:18" pos:end="3050:19">-&gt;</operator><name pos:start="3050:20" pos:end="3050:21">pb</name></name></expr></argument>, <argument pos:start="3050:24" pos:end="3050:43"><expr pos:start="3050:24" pos:end="3050:43"><literal type="string" pos:start="3050:24" pos:end="3050:43">"RTSP/1.0 %d %s\r\n"</literal></expr></argument>, <argument pos:start="3050:46" pos:end="3050:59"><expr pos:start="3050:46" pos:end="3050:59"><name pos:start="3050:46" pos:end="3050:59">RTSP_STATUS_OK</name></expr></argument>, <argument pos:start="3050:62" pos:end="3050:65"><expr pos:start="3050:62" pos:end="3050:65"><literal type="string" pos:start="3050:62" pos:end="3050:65">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3051:5" pos:end="3051:47"><expr pos:start="3051:5" pos:end="3051:46"><call pos:start="3051:5" pos:end="3051:46"><name pos:start="3051:5" pos:end="3051:15">avio_printf</name><argument_list pos:start="3051:16" pos:end="3051:46">(<argument pos:start="3051:17" pos:end="3051:21"><expr pos:start="3051:17" pos:end="3051:21"><name pos:start="3051:17" pos:end="3051:21"><name pos:start="3051:17" pos:end="3051:17">c</name><operator pos:start="3051:18" pos:end="3051:19">-&gt;</operator><name pos:start="3051:20" pos:end="3051:21">pb</name></name></expr></argument>, <argument pos:start="3051:24" pos:end="3051:37"><expr pos:start="3051:24" pos:end="3051:37"><literal type="string" pos:start="3051:24" pos:end="3051:37">"CSeq: %d\r\n"</literal></expr></argument>, <argument pos:start="3051:40" pos:end="3051:45"><expr pos:start="3051:40" pos:end="3051:45"><name pos:start="3051:40" pos:end="3051:45"><name pos:start="3051:40" pos:end="3051:40">c</name><operator pos:start="3051:41" pos:end="3051:42">-&gt;</operator><name pos:start="3051:43" pos:end="3051:45">seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3052:5" pos:end="3053:67"><expr pos:start="3052:5" pos:end="3053:66"><call pos:start="3052:5" pos:end="3053:66"><name pos:start="3052:5" pos:end="3052:15">avio_printf</name><argument_list pos:start="3052:16" pos:end="3053:66">(<argument pos:start="3052:17" pos:end="3052:21"><expr pos:start="3052:17" pos:end="3052:21"><name pos:start="3052:17" pos:end="3052:21"><name pos:start="3052:17" pos:end="3052:17">c</name><operator pos:start="3052:18" pos:end="3052:19">-&gt;</operator><name pos:start="3052:20" pos:end="3052:21">pb</name></name></expr></argument>, <argument pos:start="3052:24" pos:end="3052:39"><expr pos:start="3052:24" pos:end="3052:39"><literal type="string" pos:start="3052:24" pos:end="3052:39">"Public: %s\r\n"</literal></expr></argument>,
                <argument pos:start="3053:17" pos:end="3053:65"><expr pos:start="3053:17" pos:end="3053:65"><literal type="string" pos:start="3053:17" pos:end="3053:65">"OPTIONS, DESCRIBE, SETUP, TEARDOWN, PLAY, PAUSE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3054:5" pos:end="3054:31"><expr pos:start="3054:5" pos:end="3054:30"><call pos:start="3054:5" pos:end="3054:30"><name pos:start="3054:5" pos:end="3054:15">avio_printf</name><argument_list pos:start="3054:16" pos:end="3054:30">(<argument pos:start="3054:17" pos:end="3054:21"><expr pos:start="3054:17" pos:end="3054:21"><name pos:start="3054:17" pos:end="3054:21"><name pos:start="3054:17" pos:end="3054:17">c</name><operator pos:start="3054:18" pos:end="3054:19">-&gt;</operator><name pos:start="3054:20" pos:end="3054:21">pb</name></name></expr></argument>, <argument pos:start="3054:24" pos:end="3054:29"><expr pos:start="3054:24" pos:end="3054:29"><literal type="string" pos:start="3054:24" pos:end="3054:29">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="3057:1" pos:end="3103:1"><type pos:start="3057:1" pos:end="3057:11"><specifier pos:start="3057:1" pos:end="3057:6">static</specifier> <name pos:start="3057:8" pos:end="3057:11">void</name></type> <name pos:start="3057:13" pos:end="3057:29">rtsp_cmd_describe</name><parameter_list pos:start="3057:30" pos:end="3057:62">(<parameter pos:start="3057:31" pos:end="3057:44"><decl pos:start="3057:31" pos:end="3057:44"><type pos:start="3057:31" pos:end="3057:44"><name pos:start="3057:31" pos:end="3057:41">HTTPContext</name> <modifier pos:start="3057:43" pos:end="3057:43">*</modifier></type><name pos:start="3057:44" pos:end="3057:44">c</name></decl></parameter>, <parameter pos:start="3057:47" pos:end="3057:61"><decl pos:start="3057:47" pos:end="3057:61"><type pos:start="3057:47" pos:end="3057:61"><specifier pos:start="3057:47" pos:end="3057:51">const</specifier> <name pos:start="3057:53" pos:end="3057:56">char</name> <modifier pos:start="3057:58" pos:end="3057:58">*</modifier></type><name pos:start="3057:59" pos:end="3057:61">url</name></decl></parameter>)</parameter_list>
<block pos:start="3058:1" pos:end="3103:1">{<block_content pos:start="3059:5" pos:end="3102:21">
    <decl_stmt pos:start="3059:5" pos:end="3059:27"><decl pos:start="3059:5" pos:end="3059:26"><type pos:start="3059:5" pos:end="3059:20"><name pos:start="3059:5" pos:end="3059:18">FFServerStream</name> <modifier pos:start="3059:20" pos:end="3059:20">*</modifier></type><name pos:start="3059:21" pos:end="3059:26">stream</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3060:5" pos:end="3060:21"><decl pos:start="3060:5" pos:end="3060:20"><type pos:start="3060:5" pos:end="3060:8"><name pos:start="3060:5" pos:end="3060:8">char</name></type> <name pos:start="3060:10" pos:end="3060:20"><name pos:start="3060:10" pos:end="3060:14">path1</name><index pos:start="3060:15" pos:end="3060:20">[<expr pos:start="3060:16" pos:end="3060:19"><literal type="number" pos:start="3060:16" pos:end="3060:19">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="3061:5" pos:end="3061:21"><decl pos:start="3061:5" pos:end="3061:20"><type pos:start="3061:5" pos:end="3061:16"><specifier pos:start="3061:5" pos:end="3061:9">const</specifier> <name pos:start="3061:11" pos:end="3061:14">char</name> <modifier pos:start="3061:16" pos:end="3061:16">*</modifier></type><name pos:start="3061:17" pos:end="3061:20">path</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3062:5" pos:end="3062:21"><decl pos:start="3062:5" pos:end="3062:20"><type pos:start="3062:5" pos:end="3062:13"><name pos:start="3062:5" pos:end="3062:11">uint8_t</name> <modifier pos:start="3062:13" pos:end="3062:13">*</modifier></type><name pos:start="3062:14" pos:end="3062:20">content</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3063:5" pos:end="3063:23"><decl pos:start="3063:5" pos:end="3063:22"><type pos:start="3063:5" pos:end="3063:7"><name pos:start="3063:5" pos:end="3063:7">int</name></type> <name pos:start="3063:9" pos:end="3063:22">content_length</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3064:5" pos:end="3064:18"><decl pos:start="3064:5" pos:end="3064:17"><type pos:start="3064:5" pos:end="3064:13"><name pos:start="3064:5" pos:end="3064:13">socklen_t</name></type> <name pos:start="3064:15" pos:end="3064:17">len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3065:5" pos:end="3065:31"><decl pos:start="3065:5" pos:end="3065:30"><type pos:start="3065:5" pos:end="3065:22"><name pos:start="3065:5" pos:end="3065:22"><name pos:start="3065:5" pos:end="3065:10">struct</name> <name pos:start="3065:12" pos:end="3065:22">sockaddr_in</name></name></type> <name pos:start="3065:24" pos:end="3065:30">my_addr</name></decl>;</decl_stmt>

    <comment type="block" pos:start="3067:5" pos:end="3067:33">/* find which URL is asked */</comment>
    <expr_stmt pos:start="3068:5" pos:end="3068:77"><expr pos:start="3068:5" pos:end="3068:76"><call pos:start="3068:5" pos:end="3068:76"><name pos:start="3068:5" pos:end="3068:16">av_url_split</name><argument_list pos:start="3068:17" pos:end="3068:76">(<argument pos:start="3068:18" pos:end="3068:21"><expr pos:start="3068:18" pos:end="3068:21"><name pos:start="3068:18" pos:end="3068:21">NULL</name></expr></argument>, <argument pos:start="3068:24" pos:end="3068:24"><expr pos:start="3068:24" pos:end="3068:24"><literal type="number" pos:start="3068:24" pos:end="3068:24">0</literal></expr></argument>, <argument pos:start="3068:27" pos:end="3068:30"><expr pos:start="3068:27" pos:end="3068:30"><name pos:start="3068:27" pos:end="3068:30">NULL</name></expr></argument>, <argument pos:start="3068:33" pos:end="3068:33"><expr pos:start="3068:33" pos:end="3068:33"><literal type="number" pos:start="3068:33" pos:end="3068:33">0</literal></expr></argument>, <argument pos:start="3068:36" pos:end="3068:39"><expr pos:start="3068:36" pos:end="3068:39"><name pos:start="3068:36" pos:end="3068:39">NULL</name></expr></argument>, <argument pos:start="3068:42" pos:end="3068:42"><expr pos:start="3068:42" pos:end="3068:42"><literal type="number" pos:start="3068:42" pos:end="3068:42">0</literal></expr></argument>, <argument pos:start="3068:45" pos:end="3068:48"><expr pos:start="3068:45" pos:end="3068:48"><name pos:start="3068:45" pos:end="3068:48">NULL</name></expr></argument>, <argument pos:start="3068:51" pos:end="3068:55"><expr pos:start="3068:51" pos:end="3068:55"><name pos:start="3068:51" pos:end="3068:55">path1</name></expr></argument>, <argument pos:start="3068:58" pos:end="3068:70"><expr pos:start="3068:58" pos:end="3068:70"><sizeof pos:start="3068:58" pos:end="3068:70">sizeof<argument_list pos:start="3068:64" pos:end="3068:70">(<argument pos:start="3068:65" pos:end="3068:69"><expr pos:start="3068:65" pos:end="3068:69"><name pos:start="3068:65" pos:end="3068:69">path1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="3068:73" pos:end="3068:75"><expr pos:start="3068:73" pos:end="3068:75"><name pos:start="3068:73" pos:end="3068:75">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3069:5" pos:end="3069:17"><expr pos:start="3069:5" pos:end="3069:16"><name pos:start="3069:5" pos:end="3069:8">path</name> <operator pos:start="3069:10" pos:end="3069:10">=</operator> <name pos:start="3069:12" pos:end="3069:16">path1</name></expr>;</expr_stmt>
    <if_stmt pos:start="3070:5" pos:end="3071:15"><if pos:start="3070:5" pos:end="3071:15">if <condition pos:start="3070:8" pos:end="3070:21">(<expr pos:start="3070:9" pos:end="3070:20"><operator pos:start="3070:9" pos:end="3070:9">*</operator><name pos:start="3070:10" pos:end="3070:13">path</name> <operator pos:start="3070:15" pos:end="3070:16">==</operator> <literal type="char" pos:start="3070:18" pos:end="3070:20">'/'</literal></expr>)</condition><block type="pseudo" pos:start="3071:9" pos:end="3071:15"><block_content pos:start="3071:9" pos:end="3071:15">
        <expr_stmt pos:start="3071:9" pos:end="3071:15"><expr pos:start="3071:9" pos:end="3071:14"><name pos:start="3071:9" pos:end="3071:12">path</name><operator pos:start="3071:13" pos:end="3071:14">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="3073:5" pos:end="3079:5">for<control pos:start="3073:8" pos:end="3073:68">(<init pos:start="3073:9" pos:end="3073:37"><expr pos:start="3073:9" pos:end="3073:36"><name pos:start="3073:9" pos:end="3073:14">stream</name> <operator pos:start="3073:16" pos:end="3073:16">=</operator> <name pos:start="3073:18" pos:end="3073:36"><name pos:start="3073:18" pos:end="3073:23">config</name><operator pos:start="3073:24" pos:end="3073:24">.</operator><name pos:start="3073:25" pos:end="3073:36">first_stream</name></name></expr>;</init> <condition pos:start="3073:39" pos:end="3073:45"><expr pos:start="3073:39" pos:end="3073:44"><name pos:start="3073:39" pos:end="3073:44">stream</name></expr>;</condition> <incr pos:start="3073:47" pos:end="3073:67"><expr pos:start="3073:47" pos:end="3073:67"><name pos:start="3073:47" pos:end="3073:52">stream</name> <operator pos:start="3073:54" pos:end="3073:54">=</operator> <name pos:start="3073:56" pos:end="3073:67"><name pos:start="3073:56" pos:end="3073:61">stream</name><operator pos:start="3073:62" pos:end="3073:63">-&gt;</operator><name pos:start="3073:64" pos:end="3073:67">next</name></name></expr></incr>)</control> <block pos:start="3073:70" pos:end="3079:5">{<block_content pos:start="3074:9" pos:end="3078:9">
        <if_stmt pos:start="3074:9" pos:end="3078:9"><if pos:start="3074:9" pos:end="3078:9">if <condition pos:start="3074:12" pos:end="3076:44">(<expr pos:start="3074:13" pos:end="3076:43"><operator pos:start="3074:13" pos:end="3074:13">!</operator><name pos:start="3074:14" pos:end="3074:28"><name pos:start="3074:14" pos:end="3074:19">stream</name><operator pos:start="3074:20" pos:end="3074:21">-&gt;</operator><name pos:start="3074:22" pos:end="3074:28">is_feed</name></name> <operator pos:start="3074:30" pos:end="3074:31">&amp;&amp;</operator>
            <name pos:start="3075:13" pos:end="3075:23"><name pos:start="3075:13" pos:end="3075:18">stream</name><operator pos:start="3075:19" pos:end="3075:20">-&gt;</operator><name pos:start="3075:21" pos:end="3075:23">fmt</name></name> <operator pos:start="3075:25" pos:end="3075:26">&amp;&amp;</operator> <operator pos:start="3075:28" pos:end="3075:28">!</operator><call pos:start="3075:29" pos:end="3075:60"><name pos:start="3075:29" pos:end="3075:34">strcmp</name><argument_list pos:start="3075:35" pos:end="3075:60">(<argument pos:start="3075:36" pos:end="3075:52"><expr pos:start="3075:36" pos:end="3075:52"><name pos:start="3075:36" pos:end="3075:52"><name pos:start="3075:36" pos:end="3075:41">stream</name><operator pos:start="3075:42" pos:end="3075:43">-&gt;</operator><name pos:start="3075:44" pos:end="3075:46">fmt</name><operator pos:start="3075:47" pos:end="3075:48">-&gt;</operator><name pos:start="3075:49" pos:end="3075:52">name</name></name></expr></argument>, <argument pos:start="3075:55" pos:end="3075:59"><expr pos:start="3075:55" pos:end="3075:59"><literal type="string" pos:start="3075:55" pos:end="3075:59">"rtp"</literal></expr></argument>)</argument_list></call> <operator pos:start="3075:62" pos:end="3075:63">&amp;&amp;</operator>
            <operator pos:start="3076:13" pos:end="3076:13">!</operator><call pos:start="3076:14" pos:end="3076:43"><name pos:start="3076:14" pos:end="3076:19">strcmp</name><argument_list pos:start="3076:20" pos:end="3076:43">(<argument pos:start="3076:21" pos:end="3076:24"><expr pos:start="3076:21" pos:end="3076:24"><name pos:start="3076:21" pos:end="3076:24">path</name></expr></argument>, <argument pos:start="3076:27" pos:end="3076:42"><expr pos:start="3076:27" pos:end="3076:42"><name pos:start="3076:27" pos:end="3076:42"><name pos:start="3076:27" pos:end="3076:32">stream</name><operator pos:start="3076:33" pos:end="3076:34">-&gt;</operator><name pos:start="3076:35" pos:end="3076:42">filename</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3076:46" pos:end="3078:9">{<block_content pos:start="3077:13" pos:end="3077:23">
            <goto pos:start="3077:13" pos:end="3077:23">goto <name pos:start="3077:18" pos:end="3077:22">found</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block" pos:start="3080:5" pos:end="3080:25">/* no stream found */</comment>
    <expr_stmt pos:start="3081:5" pos:end="3081:47"><expr pos:start="3081:5" pos:end="3081:46"><call pos:start="3081:5" pos:end="3081:46"><name pos:start="3081:5" pos:end="3081:20">rtsp_reply_error</name><argument_list pos:start="3081:21" pos:end="3081:46">(<argument pos:start="3081:22" pos:end="3081:22"><expr pos:start="3081:22" pos:end="3081:22"><name pos:start="3081:22" pos:end="3081:22">c</name></expr></argument>, <argument pos:start="3081:25" pos:end="3081:45"><expr pos:start="3081:25" pos:end="3081:45"><name pos:start="3081:25" pos:end="3081:45">RTSP_STATUS_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="3082:5" pos:end="3082:11">return;</return>

 <label pos:start="3084:2" pos:end="3084:7"><name pos:start="3084:2" pos:end="3084:6">found</name>:</label>
    <comment type="block" pos:start="3085:5" pos:end="3085:53">/* prepare the media description in SDP format */</comment>

    <comment type="block" pos:start="3087:5" pos:end="3087:25">/* get the host IP */</comment>
    <expr_stmt pos:start="3088:5" pos:end="3088:26"><expr pos:start="3088:5" pos:end="3088:25"><name pos:start="3088:5" pos:end="3088:7">len</name> <operator pos:start="3088:9" pos:end="3088:9">=</operator> <sizeof pos:start="3088:11" pos:end="3088:25">sizeof<argument_list pos:start="3088:17" pos:end="3088:25">(<argument pos:start="3088:18" pos:end="3088:24"><expr pos:start="3088:18" pos:end="3088:24"><name pos:start="3088:18" pos:end="3088:24">my_addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt pos:start="3089:5" pos:end="3089:58"><expr pos:start="3089:5" pos:end="3089:57"><call pos:start="3089:5" pos:end="3089:57"><name pos:start="3089:5" pos:end="3089:15">getsockname</name><argument_list pos:start="3089:16" pos:end="3089:57">(<argument pos:start="3089:17" pos:end="3089:21"><expr pos:start="3089:17" pos:end="3089:21"><name pos:start="3089:17" pos:end="3089:21"><name pos:start="3089:17" pos:end="3089:17">c</name><operator pos:start="3089:18" pos:end="3089:19">-&gt;</operator><name pos:start="3089:20" pos:end="3089:21">fd</name></name></expr></argument>, <argument pos:start="3089:24" pos:end="3089:50"><expr pos:start="3089:24" pos:end="3089:50"><operator pos:start="3089:24" pos:end="3089:24">(</operator>struct <name pos:start="3089:32" pos:end="3089:39">sockaddr</name> <operator pos:start="3089:41" pos:end="3089:41">*</operator><operator pos:start="3089:42" pos:end="3089:42">)</operator><operator pos:start="3089:43" pos:end="3089:43">&amp;</operator><name pos:start="3089:44" pos:end="3089:50">my_addr</name></expr></argument>, <argument pos:start="3089:53" pos:end="3089:56"><expr pos:start="3089:53" pos:end="3089:56"><operator pos:start="3089:53" pos:end="3089:53">&amp;</operator><name pos:start="3089:54" pos:end="3089:56">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3090:5" pos:end="3091:63"><expr pos:start="3090:5" pos:end="3091:62"><name pos:start="3090:5" pos:end="3090:18">content_length</name> <operator pos:start="3090:20" pos:end="3090:20">=</operator> <call pos:start="3090:22" pos:end="3091:62"><name pos:start="3090:22" pos:end="3090:44">prepare_sdp_description</name><argument_list pos:start="3090:45" pos:end="3091:62">(<argument pos:start="3090:46" pos:end="3090:51"><expr pos:start="3090:46" pos:end="3090:51"><name pos:start="3090:46" pos:end="3090:51">stream</name></expr></argument>, <argument pos:start="3090:54" pos:end="3090:61"><expr pos:start="3090:54" pos:end="3090:61"><operator pos:start="3090:54" pos:end="3090:54">&amp;</operator><name pos:start="3090:55" pos:end="3090:61">content</name></expr></argument>,
                                             <argument pos:start="3091:46" pos:end="3091:61"><expr pos:start="3091:46" pos:end="3091:61"><name pos:start="3091:46" pos:end="3091:61"><name pos:start="3091:46" pos:end="3091:52">my_addr</name><operator pos:start="3091:53" pos:end="3091:53">.</operator><name pos:start="3091:54" pos:end="3091:61">sin_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3092:5" pos:end="3095:5"><if pos:start="3092:5" pos:end="3095:5">if <condition pos:start="3092:8" pos:end="3092:27">(<expr pos:start="3092:9" pos:end="3092:26"><name pos:start="3092:9" pos:end="3092:22">content_length</name> <operator pos:start="3092:24" pos:end="3092:24">&lt;</operator> <literal type="number" pos:start="3092:26" pos:end="3092:26">0</literal></expr>)</condition> <block pos:start="3092:29" pos:end="3095:5">{<block_content pos:start="3093:9" pos:end="3094:15">
        <expr_stmt pos:start="3093:9" pos:end="3093:50"><expr pos:start="3093:9" pos:end="3093:49"><call pos:start="3093:9" pos:end="3093:49"><name pos:start="3093:9" pos:end="3093:24">rtsp_reply_error</name><argument_list pos:start="3093:25" pos:end="3093:49">(<argument pos:start="3093:26" pos:end="3093:26"><expr pos:start="3093:26" pos:end="3093:26"><name pos:start="3093:26" pos:end="3093:26">c</name></expr></argument>, <argument pos:start="3093:29" pos:end="3093:48"><expr pos:start="3093:29" pos:end="3093:48"><name pos:start="3093:29" pos:end="3093:48">RTSP_STATUS_INTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="3094:9" pos:end="3094:15">return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="3096:5" pos:end="3096:41"><expr pos:start="3096:5" pos:end="3096:40"><call pos:start="3096:5" pos:end="3096:40"><name pos:start="3096:5" pos:end="3096:21">rtsp_reply_header</name><argument_list pos:start="3096:22" pos:end="3096:40">(<argument pos:start="3096:23" pos:end="3096:23"><expr pos:start="3096:23" pos:end="3096:23"><name pos:start="3096:23" pos:end="3096:23">c</name></expr></argument>, <argument pos:start="3096:26" pos:end="3096:39"><expr pos:start="3096:26" pos:end="3096:39"><name pos:start="3096:26" pos:end="3096:39">RTSP_STATUS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3097:5" pos:end="3097:53"><expr pos:start="3097:5" pos:end="3097:52"><call pos:start="3097:5" pos:end="3097:52"><name pos:start="3097:5" pos:end="3097:15">avio_printf</name><argument_list pos:start="3097:16" pos:end="3097:52">(<argument pos:start="3097:17" pos:end="3097:21"><expr pos:start="3097:17" pos:end="3097:21"><name pos:start="3097:17" pos:end="3097:21"><name pos:start="3097:17" pos:end="3097:17">c</name><operator pos:start="3097:18" pos:end="3097:19">-&gt;</operator><name pos:start="3097:20" pos:end="3097:21">pb</name></name></expr></argument>, <argument pos:start="3097:24" pos:end="3097:46"><expr pos:start="3097:24" pos:end="3097:46"><literal type="string" pos:start="3097:24" pos:end="3097:46">"Content-Base: %s/\r\n"</literal></expr></argument>, <argument pos:start="3097:49" pos:end="3097:51"><expr pos:start="3097:49" pos:end="3097:51"><name pos:start="3097:49" pos:end="3097:51">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3098:5" pos:end="3098:60"><expr pos:start="3098:5" pos:end="3098:59"><call pos:start="3098:5" pos:end="3098:59"><name pos:start="3098:5" pos:end="3098:15">avio_printf</name><argument_list pos:start="3098:16" pos:end="3098:59">(<argument pos:start="3098:17" pos:end="3098:21"><expr pos:start="3098:17" pos:end="3098:21"><name pos:start="3098:17" pos:end="3098:21"><name pos:start="3098:17" pos:end="3098:17">c</name><operator pos:start="3098:18" pos:end="3098:19">-&gt;</operator><name pos:start="3098:20" pos:end="3098:21">pb</name></name></expr></argument>, <argument pos:start="3098:24" pos:end="3098:58"><expr pos:start="3098:24" pos:end="3098:58"><literal type="string" pos:start="3098:24" pos:end="3098:58">"Content-Type: application/sdp\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3099:5" pos:end="3099:65"><expr pos:start="3099:5" pos:end="3099:64"><call pos:start="3099:5" pos:end="3099:64"><name pos:start="3099:5" pos:end="3099:15">avio_printf</name><argument_list pos:start="3099:16" pos:end="3099:64">(<argument pos:start="3099:17" pos:end="3099:21"><expr pos:start="3099:17" pos:end="3099:21"><name pos:start="3099:17" pos:end="3099:21"><name pos:start="3099:17" pos:end="3099:17">c</name><operator pos:start="3099:18" pos:end="3099:19">-&gt;</operator><name pos:start="3099:20" pos:end="3099:21">pb</name></name></expr></argument>, <argument pos:start="3099:24" pos:end="3099:47"><expr pos:start="3099:24" pos:end="3099:47"><literal type="string" pos:start="3099:24" pos:end="3099:47">"Content-Length: %d\r\n"</literal></expr></argument>, <argument pos:start="3099:50" pos:end="3099:63"><expr pos:start="3099:50" pos:end="3099:63"><name pos:start="3099:50" pos:end="3099:63">content_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3100:5" pos:end="3100:31"><expr pos:start="3100:5" pos:end="3100:30"><call pos:start="3100:5" pos:end="3100:30"><name pos:start="3100:5" pos:end="3100:15">avio_printf</name><argument_list pos:start="3100:16" pos:end="3100:30">(<argument pos:start="3100:17" pos:end="3100:21"><expr pos:start="3100:17" pos:end="3100:21"><name pos:start="3100:17" pos:end="3100:21"><name pos:start="3100:17" pos:end="3100:17">c</name><operator pos:start="3100:18" pos:end="3100:19">-&gt;</operator><name pos:start="3100:20" pos:end="3100:21">pb</name></name></expr></argument>, <argument pos:start="3100:24" pos:end="3100:29"><expr pos:start="3100:24" pos:end="3100:29"><literal type="string" pos:start="3100:24" pos:end="3100:29">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3101:5" pos:end="3101:47"><expr pos:start="3101:5" pos:end="3101:46"><call pos:start="3101:5" pos:end="3101:46"><name pos:start="3101:5" pos:end="3101:14">avio_write</name><argument_list pos:start="3101:15" pos:end="3101:46">(<argument pos:start="3101:16" pos:end="3101:20"><expr pos:start="3101:16" pos:end="3101:20"><name pos:start="3101:16" pos:end="3101:20"><name pos:start="3101:16" pos:end="3101:16">c</name><operator pos:start="3101:17" pos:end="3101:18">-&gt;</operator><name pos:start="3101:19" pos:end="3101:20">pb</name></name></expr></argument>, <argument pos:start="3101:23" pos:end="3101:29"><expr pos:start="3101:23" pos:end="3101:29"><name pos:start="3101:23" pos:end="3101:29">content</name></expr></argument>, <argument pos:start="3101:32" pos:end="3101:45"><expr pos:start="3101:32" pos:end="3101:45"><name pos:start="3101:32" pos:end="3101:45">content_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3102:5" pos:end="3102:21"><expr pos:start="3102:5" pos:end="3102:20"><call pos:start="3102:5" pos:end="3102:20"><name pos:start="3102:5" pos:end="3102:11">av_free</name><argument_list pos:start="3102:12" pos:end="3102:20">(<argument pos:start="3102:13" pos:end="3102:19"><expr pos:start="3102:13" pos:end="3102:19"><name pos:start="3102:13" pos:end="3102:19">content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="3105:1" pos:end="3117:1"><type pos:start="3105:1" pos:end="3105:20"><specifier pos:start="3105:1" pos:end="3105:6">static</specifier> <name pos:start="3105:8" pos:end="3105:18">HTTPContext</name> <modifier pos:start="3105:20" pos:end="3105:20">*</modifier></type><name pos:start="3105:21" pos:end="3105:36">find_rtp_session</name><parameter_list pos:start="3105:37" pos:end="3105:60">(<parameter pos:start="3105:38" pos:end="3105:59"><decl pos:start="3105:38" pos:end="3105:59"><type pos:start="3105:38" pos:end="3105:49"><specifier pos:start="3105:38" pos:end="3105:42">const</specifier> <name pos:start="3105:44" pos:end="3105:47">char</name> <modifier pos:start="3105:49" pos:end="3105:49">*</modifier></type><name pos:start="3105:50" pos:end="3105:59">session_id</name></decl></parameter>)</parameter_list>
<block pos:start="3106:1" pos:end="3117:1">{<block_content pos:start="3107:5" pos:end="3116:16">
    <decl_stmt pos:start="3107:5" pos:end="3107:19"><decl pos:start="3107:5" pos:end="3107:18"><type pos:start="3107:5" pos:end="3107:17"><name pos:start="3107:5" pos:end="3107:15">HTTPContext</name> <modifier pos:start="3107:17" pos:end="3107:17">*</modifier></type><name pos:start="3107:18" pos:end="3107:18">c</name></decl>;</decl_stmt>

    <if_stmt pos:start="3109:5" pos:end="3110:20"><if pos:start="3109:5" pos:end="3110:20">if <condition pos:start="3109:8" pos:end="3109:30">(<expr pos:start="3109:9" pos:end="3109:29"><name pos:start="3109:9" pos:end="3109:21"><name pos:start="3109:9" pos:end="3109:18">session_id</name><index pos:start="3109:19" pos:end="3109:21">[<expr pos:start="3109:20" pos:end="3109:20"><literal type="number" pos:start="3109:20" pos:end="3109:20">0</literal></expr>]</index></name> <operator pos:start="3109:23" pos:end="3109:24">==</operator> <literal type="char" pos:start="3109:26" pos:end="3109:29">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="3110:9" pos:end="3110:20"><block_content pos:start="3110:9" pos:end="3110:20">
        <return pos:start="3110:9" pos:end="3110:20">return <expr pos:start="3110:16" pos:end="3110:19"><name pos:start="3110:16" pos:end="3110:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <for pos:start="3112:5" pos:end="3115:5">for<control pos:start="3112:8" pos:end="3112:43">(<init pos:start="3112:9" pos:end="3112:27"><expr pos:start="3112:9" pos:end="3112:26"><name pos:start="3112:9" pos:end="3112:9">c</name> <operator pos:start="3112:11" pos:end="3112:11">=</operator> <name pos:start="3112:13" pos:end="3112:26">first_http_ctx</name></expr>;</init> <condition pos:start="3112:29" pos:end="3112:30"><expr pos:start="3112:29" pos:end="3112:29"><name pos:start="3112:29" pos:end="3112:29">c</name></expr>;</condition> <incr pos:start="3112:32" pos:end="3112:42"><expr pos:start="3112:32" pos:end="3112:42"><name pos:start="3112:32" pos:end="3112:32">c</name> <operator pos:start="3112:34" pos:end="3112:34">=</operator> <name pos:start="3112:36" pos:end="3112:42"><name pos:start="3112:36" pos:end="3112:36">c</name><operator pos:start="3112:37" pos:end="3112:38">-&gt;</operator><name pos:start="3112:39" pos:end="3112:42">next</name></name></expr></incr>)</control> <block pos:start="3112:45" pos:end="3115:5">{<block_content pos:start="3113:9" pos:end="3114:21">
        <if_stmt pos:start="3113:9" pos:end="3114:21"><if pos:start="3113:9" pos:end="3114:21">if <condition pos:start="3113:12" pos:end="3113:47">(<expr pos:start="3113:13" pos:end="3113:46"><operator pos:start="3113:13" pos:end="3113:13">!</operator><call pos:start="3113:14" pos:end="3113:46"><name pos:start="3113:14" pos:end="3113:19">strcmp</name><argument_list pos:start="3113:20" pos:end="3113:46">(<argument pos:start="3113:21" pos:end="3113:33"><expr pos:start="3113:21" pos:end="3113:33"><name pos:start="3113:21" pos:end="3113:33"><name pos:start="3113:21" pos:end="3113:21">c</name><operator pos:start="3113:22" pos:end="3113:23">-&gt;</operator><name pos:start="3113:24" pos:end="3113:33">session_id</name></name></expr></argument>, <argument pos:start="3113:36" pos:end="3113:45"><expr pos:start="3113:36" pos:end="3113:45"><name pos:start="3113:36" pos:end="3113:45">session_id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3114:13" pos:end="3114:21"><block_content pos:start="3114:13" pos:end="3114:21">
            <return pos:start="3114:13" pos:end="3114:21">return <expr pos:start="3114:20" pos:end="3114:20"><name pos:start="3114:20" pos:end="3114:20">c</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return pos:start="3116:5" pos:end="3116:16">return <expr pos:start="3116:12" pos:end="3116:15"><name pos:start="3116:12" pos:end="3116:15">NULL</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="3119:1" pos:end="3130:1"><type pos:start="3119:1" pos:end="3119:27"><specifier pos:start="3119:1" pos:end="3119:6">static</specifier> <name pos:start="3119:8" pos:end="3119:25">RTSPTransportField</name> <modifier pos:start="3119:27" pos:end="3119:27">*</modifier></type><name pos:start="3119:28" pos:end="3119:41">find_transport</name><parameter_list pos:start="3119:42" pos:end="3119:104">(<parameter pos:start="3119:43" pos:end="3119:62"><decl pos:start="3119:43" pos:end="3119:62"><type pos:start="3119:43" pos:end="3119:62"><name pos:start="3119:43" pos:end="3119:59">RTSPMessageHeader</name> <modifier pos:start="3119:61" pos:end="3119:61">*</modifier></type><name pos:start="3119:62" pos:end="3119:62">h</name></decl></parameter>, <parameter pos:start="3119:65" pos:end="3119:103"><decl pos:start="3119:65" pos:end="3119:103"><type pos:start="3119:65" pos:end="3119:103"><name pos:start="3119:65" pos:end="3119:87"><name pos:start="3119:65" pos:end="3119:68">enum</name> <name pos:start="3119:70" pos:end="3119:87">RTSPLowerTransport</name></name></type> <name pos:start="3119:89" pos:end="3119:103">lower_transport</name></decl></parameter>)</parameter_list>
<block pos:start="3120:1" pos:end="3130:1">{<block_content pos:start="3121:5" pos:end="3129:16">
    <decl_stmt pos:start="3121:5" pos:end="3121:27"><decl pos:start="3121:5" pos:end="3121:26"><type pos:start="3121:5" pos:end="3121:24"><name pos:start="3121:5" pos:end="3121:22">RTSPTransportField</name> <modifier pos:start="3121:24" pos:end="3121:24">*</modifier></type><name pos:start="3121:25" pos:end="3121:26">th</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3122:5" pos:end="3122:10"><decl pos:start="3122:5" pos:end="3122:9"><type pos:start="3122:5" pos:end="3122:7"><name pos:start="3122:5" pos:end="3122:7">int</name></type> <name pos:start="3122:9" pos:end="3122:9">i</name></decl>;</decl_stmt>

    <for pos:start="3124:5" pos:end="3128:5">for<control pos:start="3124:8" pos:end="3124:35">(<init pos:start="3124:9" pos:end="3124:12"><expr pos:start="3124:9" pos:end="3124:11"><name pos:start="3124:9" pos:end="3124:9">i</name><operator pos:start="3124:10" pos:end="3124:10">=</operator><literal type="number" pos:start="3124:11" pos:end="3124:11">0</literal></expr>;</init><condition pos:start="3124:13" pos:end="3124:31"><expr pos:start="3124:13" pos:end="3124:30"><name pos:start="3124:13" pos:end="3124:13">i</name><operator pos:start="3124:14" pos:end="3124:14">&lt;</operator><name pos:start="3124:15" pos:end="3124:30"><name pos:start="3124:15" pos:end="3124:15">h</name><operator pos:start="3124:16" pos:end="3124:17">-&gt;</operator><name pos:start="3124:18" pos:end="3124:30">nb_transports</name></name></expr>;</condition><incr pos:start="3124:32" pos:end="3124:34"><expr pos:start="3124:32" pos:end="3124:34"><name pos:start="3124:32" pos:end="3124:32">i</name><operator pos:start="3124:33" pos:end="3124:34">++</operator></expr></incr>)</control> <block pos:start="3124:37" pos:end="3128:5">{<block_content pos:start="3125:9" pos:end="3127:22">
        <expr_stmt pos:start="3125:9" pos:end="3125:31"><expr pos:start="3125:9" pos:end="3125:30"><name pos:start="3125:9" pos:end="3125:10">th</name> <operator pos:start="3125:12" pos:end="3125:12">=</operator> <operator pos:start="3125:14" pos:end="3125:14">&amp;</operator><name pos:start="3125:15" pos:end="3125:30"><name pos:start="3125:15" pos:end="3125:15">h</name><operator pos:start="3125:16" pos:end="3125:17">-&gt;</operator><name pos:start="3125:18" pos:end="3125:27">transports</name><index pos:start="3125:28" pos:end="3125:30">[<expr pos:start="3125:29" pos:end="3125:29"><name pos:start="3125:29" pos:end="3125:29">i</name></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt pos:start="3126:9" pos:end="3127:22"><if pos:start="3126:9" pos:end="3127:22">if <condition pos:start="3126:12" pos:end="3126:51">(<expr pos:start="3126:13" pos:end="3126:50"><name pos:start="3126:13" pos:end="3126:31"><name pos:start="3126:13" pos:end="3126:14">th</name><operator pos:start="3126:15" pos:end="3126:16">-&gt;</operator><name pos:start="3126:17" pos:end="3126:31">lower_transport</name></name> <operator pos:start="3126:33" pos:end="3126:34">==</operator> <name pos:start="3126:36" pos:end="3126:50">lower_transport</name></expr>)</condition><block type="pseudo" pos:start="3127:13" pos:end="3127:22"><block_content pos:start="3127:13" pos:end="3127:22">
            <return pos:start="3127:13" pos:end="3127:22">return <expr pos:start="3127:20" pos:end="3127:21"><name pos:start="3127:20" pos:end="3127:21">th</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return pos:start="3129:5" pos:end="3129:16">return <expr pos:start="3129:12" pos:end="3129:15"><name pos:start="3129:12" pos:end="3129:15">NULL</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="3132:1" pos:end="3274:1"><type pos:start="3132:1" pos:end="3132:11"><specifier pos:start="3132:1" pos:end="3132:6">static</specifier> <name pos:start="3132:8" pos:end="3132:11">void</name></type> <name pos:start="3132:13" pos:end="3132:26">rtsp_cmd_setup</name><parameter_list pos:start="3132:27" pos:end="3133:48">(<parameter pos:start="3132:28" pos:end="3132:41"><decl pos:start="3132:28" pos:end="3132:41"><type pos:start="3132:28" pos:end="3132:41"><name pos:start="3132:28" pos:end="3132:38">HTTPContext</name> <modifier pos:start="3132:40" pos:end="3132:40">*</modifier></type><name pos:start="3132:41" pos:end="3132:41">c</name></decl></parameter>, <parameter pos:start="3132:44" pos:end="3132:58"><decl pos:start="3132:44" pos:end="3132:58"><type pos:start="3132:44" pos:end="3132:58"><specifier pos:start="3132:44" pos:end="3132:48">const</specifier> <name pos:start="3132:50" pos:end="3132:53">char</name> <modifier pos:start="3132:55" pos:end="3132:55">*</modifier></type><name pos:start="3132:56" pos:end="3132:58">url</name></decl></parameter>,
                           <parameter pos:start="3133:28" pos:end="3133:47"><decl pos:start="3133:28" pos:end="3133:47"><type pos:start="3133:28" pos:end="3133:47"><name pos:start="3133:28" pos:end="3133:44">RTSPMessageHeader</name> <modifier pos:start="3133:46" pos:end="3133:46">*</modifier></type><name pos:start="3133:47" pos:end="3133:47">h</name></decl></parameter>)</parameter_list>
<block pos:start="3134:1" pos:end="3274:1">{<block_content pos:start="3135:5" pos:end="3273:31">
    <decl_stmt pos:start="3135:5" pos:end="3135:27"><decl pos:start="3135:5" pos:end="3135:26"><type pos:start="3135:5" pos:end="3135:20"><name pos:start="3135:5" pos:end="3135:18">FFServerStream</name> <modifier pos:start="3135:20" pos:end="3135:20">*</modifier></type><name pos:start="3135:21" pos:end="3135:26">stream</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3136:5" pos:end="3136:42"><decl pos:start="3136:5" pos:end="3136:20"><type pos:start="3136:5" pos:end="3136:7"><name pos:start="3136:5" pos:end="3136:7">int</name></type> <name pos:start="3136:9" pos:end="3136:20">stream_index</name></decl>, <decl pos:start="3136:23" pos:end="3136:30"><type ref="prev" pos:start="3136:5" pos:end="3136:7"/><name pos:start="3136:23" pos:end="3136:30">rtp_port</name></decl>, <decl pos:start="3136:33" pos:end="3136:41"><type ref="prev" pos:start="3136:5" pos:end="3136:7"/><name pos:start="3136:33" pos:end="3136:41">rtcp_port</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3137:5" pos:end="3137:19"><decl pos:start="3137:5" pos:end="3137:18"><type pos:start="3137:5" pos:end="3137:8"><name pos:start="3137:5" pos:end="3137:8">char</name></type> <name pos:start="3137:10" pos:end="3137:18"><name pos:start="3137:10" pos:end="3137:12">buf</name><index pos:start="3137:13" pos:end="3137:18">[<expr pos:start="3137:14" pos:end="3137:17"><literal type="number" pos:start="3137:14" pos:end="3137:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="3138:5" pos:end="3138:21"><decl pos:start="3138:5" pos:end="3138:20"><type pos:start="3138:5" pos:end="3138:8"><name pos:start="3138:5" pos:end="3138:8">char</name></type> <name pos:start="3138:10" pos:end="3138:20"><name pos:start="3138:10" pos:end="3138:14">path1</name><index pos:start="3138:15" pos:end="3138:20">[<expr pos:start="3138:16" pos:end="3138:19"><literal type="number" pos:start="3138:16" pos:end="3138:19">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="3139:5" pos:end="3139:21"><decl pos:start="3139:5" pos:end="3139:20"><type pos:start="3139:5" pos:end="3139:16"><specifier pos:start="3139:5" pos:end="3139:9">const</specifier> <name pos:start="3139:11" pos:end="3139:14">char</name> <modifier pos:start="3139:16" pos:end="3139:16">*</modifier></type><name pos:start="3139:17" pos:end="3139:20">path</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3140:5" pos:end="3140:23"><decl pos:start="3140:5" pos:end="3140:22"><type pos:start="3140:5" pos:end="3140:17"><name pos:start="3140:5" pos:end="3140:15">HTTPContext</name> <modifier pos:start="3140:17" pos:end="3140:17">*</modifier></type><name pos:start="3140:18" pos:end="3140:22">rtp_c</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3141:5" pos:end="3141:27"><decl pos:start="3141:5" pos:end="3141:26"><type pos:start="3141:5" pos:end="3141:24"><name pos:start="3141:5" pos:end="3141:22">RTSPTransportField</name> <modifier pos:start="3141:24" pos:end="3141:24">*</modifier></type><name pos:start="3141:25" pos:end="3141:26">th</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3142:5" pos:end="3142:33"><decl pos:start="3142:5" pos:end="3142:32"><type pos:start="3142:5" pos:end="3142:22"><name pos:start="3142:5" pos:end="3142:22"><name pos:start="3142:5" pos:end="3142:10">struct</name> <name pos:start="3142:12" pos:end="3142:22">sockaddr_in</name></name></type> <name pos:start="3142:24" pos:end="3142:32">dest_addr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3143:5" pos:end="3143:32"><decl pos:start="3143:5" pos:end="3143:31"><type pos:start="3143:5" pos:end="3143:25"><name pos:start="3143:5" pos:end="3143:25">RTSPActionServerSetup</name></type> <name pos:start="3143:27" pos:end="3143:31">setup</name></decl>;</decl_stmt>

    <comment type="block" pos:start="3145:5" pos:end="3145:33">/* find which URL is asked */</comment>
    <expr_stmt pos:start="3146:5" pos:end="3146:77"><expr pos:start="3146:5" pos:end="3146:76"><call pos:start="3146:5" pos:end="3146:76"><name pos:start="3146:5" pos:end="3146:16">av_url_split</name><argument_list pos:start="3146:17" pos:end="3146:76">(<argument pos:start="3146:18" pos:end="3146:21"><expr pos:start="3146:18" pos:end="3146:21"><name pos:start="3146:18" pos:end="3146:21">NULL</name></expr></argument>, <argument pos:start="3146:24" pos:end="3146:24"><expr pos:start="3146:24" pos:end="3146:24"><literal type="number" pos:start="3146:24" pos:end="3146:24">0</literal></expr></argument>, <argument pos:start="3146:27" pos:end="3146:30"><expr pos:start="3146:27" pos:end="3146:30"><name pos:start="3146:27" pos:end="3146:30">NULL</name></expr></argument>, <argument pos:start="3146:33" pos:end="3146:33"><expr pos:start="3146:33" pos:end="3146:33"><literal type="number" pos:start="3146:33" pos:end="3146:33">0</literal></expr></argument>, <argument pos:start="3146:36" pos:end="3146:39"><expr pos:start="3146:36" pos:end="3146:39"><name pos:start="3146:36" pos:end="3146:39">NULL</name></expr></argument>, <argument pos:start="3146:42" pos:end="3146:42"><expr pos:start="3146:42" pos:end="3146:42"><literal type="number" pos:start="3146:42" pos:end="3146:42">0</literal></expr></argument>, <argument pos:start="3146:45" pos:end="3146:48"><expr pos:start="3146:45" pos:end="3146:48"><name pos:start="3146:45" pos:end="3146:48">NULL</name></expr></argument>, <argument pos:start="3146:51" pos:end="3146:55"><expr pos:start="3146:51" pos:end="3146:55"><name pos:start="3146:51" pos:end="3146:55">path1</name></expr></argument>, <argument pos:start="3146:58" pos:end="3146:70"><expr pos:start="3146:58" pos:end="3146:70"><sizeof pos:start="3146:58" pos:end="3146:70">sizeof<argument_list pos:start="3146:64" pos:end="3146:70">(<argument pos:start="3146:65" pos:end="3146:69"><expr pos:start="3146:65" pos:end="3146:69"><name pos:start="3146:65" pos:end="3146:69">path1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="3146:73" pos:end="3146:75"><expr pos:start="3146:73" pos:end="3146:75"><name pos:start="3146:73" pos:end="3146:75">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3147:5" pos:end="3147:17"><expr pos:start="3147:5" pos:end="3147:16"><name pos:start="3147:5" pos:end="3147:8">path</name> <operator pos:start="3147:10" pos:end="3147:10">=</operator> <name pos:start="3147:12" pos:end="3147:16">path1</name></expr>;</expr_stmt>
    <if_stmt pos:start="3148:5" pos:end="3149:15"><if pos:start="3148:5" pos:end="3149:15">if <condition pos:start="3148:8" pos:end="3148:21">(<expr pos:start="3148:9" pos:end="3148:20"><operator pos:start="3148:9" pos:end="3148:9">*</operator><name pos:start="3148:10" pos:end="3148:13">path</name> <operator pos:start="3148:15" pos:end="3148:16">==</operator> <literal type="char" pos:start="3148:18" pos:end="3148:20">'/'</literal></expr>)</condition><block type="pseudo" pos:start="3149:9" pos:end="3149:15"><block_content pos:start="3149:9" pos:end="3149:15">
        <expr_stmt pos:start="3149:9" pos:end="3149:15"><expr pos:start="3149:9" pos:end="3149:14"><name pos:start="3149:9" pos:end="3149:12">path</name><operator pos:start="3149:13" pos:end="3149:14">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="3151:5" pos:end="3151:31">/* now check each stream */</comment>
    <for pos:start="3152:5" pos:end="3174:5">for<control pos:start="3152:8" pos:end="3152:68">(<init pos:start="3152:9" pos:end="3152:37"><expr pos:start="3152:9" pos:end="3152:36"><name pos:start="3152:9" pos:end="3152:14">stream</name> <operator pos:start="3152:16" pos:end="3152:16">=</operator> <name pos:start="3152:18" pos:end="3152:36"><name pos:start="3152:18" pos:end="3152:23">config</name><operator pos:start="3152:24" pos:end="3152:24">.</operator><name pos:start="3152:25" pos:end="3152:36">first_stream</name></name></expr>;</init> <condition pos:start="3152:39" pos:end="3152:45"><expr pos:start="3152:39" pos:end="3152:44"><name pos:start="3152:39" pos:end="3152:44">stream</name></expr>;</condition> <incr pos:start="3152:47" pos:end="3152:67"><expr pos:start="3152:47" pos:end="3152:67"><name pos:start="3152:47" pos:end="3152:52">stream</name> <operator pos:start="3152:54" pos:end="3152:54">=</operator> <name pos:start="3152:56" pos:end="3152:67"><name pos:start="3152:56" pos:end="3152:61">stream</name><operator pos:start="3152:62" pos:end="3152:63">-&gt;</operator><name pos:start="3152:64" pos:end="3152:67">next</name></name></expr></incr>)</control> <block pos:start="3152:70" pos:end="3174:5">{<block_content pos:start="3153:9" pos:end="3173:9">
        <if_stmt pos:start="3153:9" pos:end="3156:9"><if pos:start="3153:9" pos:end="3156:9">if <condition pos:start="3153:12" pos:end="3154:45">(<expr pos:start="3153:13" pos:end="3154:44"><name pos:start="3153:13" pos:end="3153:27"><name pos:start="3153:13" pos:end="3153:18">stream</name><operator pos:start="3153:19" pos:end="3153:20">-&gt;</operator><name pos:start="3153:21" pos:end="3153:27">is_feed</name></name> <operator pos:start="3153:29" pos:end="3153:30">||</operator> <operator pos:start="3153:32" pos:end="3153:32">!</operator><name pos:start="3153:33" pos:end="3153:43"><name pos:start="3153:33" pos:end="3153:38">stream</name><operator pos:start="3153:39" pos:end="3153:40">-&gt;</operator><name pos:start="3153:41" pos:end="3153:43">fmt</name></name> <operator pos:start="3153:45" pos:end="3153:46">||</operator>
            <call pos:start="3154:13" pos:end="3154:44"><name pos:start="3154:13" pos:end="3154:18">strcmp</name><argument_list pos:start="3154:19" pos:end="3154:44">(<argument pos:start="3154:20" pos:end="3154:36"><expr pos:start="3154:20" pos:end="3154:36"><name pos:start="3154:20" pos:end="3154:36"><name pos:start="3154:20" pos:end="3154:25">stream</name><operator pos:start="3154:26" pos:end="3154:27">-&gt;</operator><name pos:start="3154:28" pos:end="3154:30">fmt</name><operator pos:start="3154:31" pos:end="3154:32">-&gt;</operator><name pos:start="3154:33" pos:end="3154:36">name</name></name></expr></argument>, <argument pos:start="3154:39" pos:end="3154:43"><expr pos:start="3154:39" pos:end="3154:43"><literal type="string" pos:start="3154:39" pos:end="3154:43">"rtp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3154:47" pos:end="3156:9">{<block_content pos:start="3155:13" pos:end="3155:21">
            <continue pos:start="3155:13" pos:end="3155:21">continue;</continue>
        </block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="3157:9" pos:end="3157:62">/* accept aggregate filenames only if single stream */</comment>
        <if_stmt pos:start="3158:9" pos:end="3165:9"><if pos:start="3158:9" pos:end="3165:9">if <condition pos:start="3158:12" pos:end="3158:44">(<expr pos:start="3158:13" pos:end="3158:43"><operator pos:start="3158:13" pos:end="3158:13">!</operator><call pos:start="3158:14" pos:end="3158:43"><name pos:start="3158:14" pos:end="3158:19">strcmp</name><argument_list pos:start="3158:20" pos:end="3158:43">(<argument pos:start="3158:21" pos:end="3158:24"><expr pos:start="3158:21" pos:end="3158:24"><name pos:start="3158:21" pos:end="3158:24">path</name></expr></argument>, <argument pos:start="3158:27" pos:end="3158:42"><expr pos:start="3158:27" pos:end="3158:42"><name pos:start="3158:27" pos:end="3158:42"><name pos:start="3158:27" pos:end="3158:32">stream</name><operator pos:start="3158:33" pos:end="3158:34">-&gt;</operator><name pos:start="3158:35" pos:end="3158:42">filename</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3158:46" pos:end="3165:9">{<block_content pos:start="3159:13" pos:end="3164:23">
            <if_stmt pos:start="3159:13" pos:end="3162:13"><if pos:start="3159:13" pos:end="3162:13">if <condition pos:start="3159:16" pos:end="3159:40">(<expr pos:start="3159:17" pos:end="3159:39"><name pos:start="3159:17" pos:end="3159:34"><name pos:start="3159:17" pos:end="3159:22">stream</name><operator pos:start="3159:23" pos:end="3159:24">-&gt;</operator><name pos:start="3159:25" pos:end="3159:34">nb_streams</name></name> <operator pos:start="3159:36" pos:end="3159:37">!=</operator> <literal type="number" pos:start="3159:39" pos:end="3159:39">1</literal></expr>)</condition> <block pos:start="3159:42" pos:end="3162:13">{<block_content pos:start="3160:17" pos:end="3161:23">
                <expr_stmt pos:start="3160:17" pos:end="3160:59"><expr pos:start="3160:17" pos:end="3160:58"><call pos:start="3160:17" pos:end="3160:58"><name pos:start="3160:17" pos:end="3160:32">rtsp_reply_error</name><argument_list pos:start="3160:33" pos:end="3160:58">(<argument pos:start="3160:34" pos:end="3160:34"><expr pos:start="3160:34" pos:end="3160:34"><name pos:start="3160:34" pos:end="3160:34">c</name></expr></argument>, <argument pos:start="3160:37" pos:end="3160:57"><expr pos:start="3160:37" pos:end="3160:57"><name pos:start="3160:37" pos:end="3160:57">RTSP_STATUS_AGGREGATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3161:17" pos:end="3161:23">return;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="3163:13" pos:end="3163:29"><expr pos:start="3163:13" pos:end="3163:28"><name pos:start="3163:13" pos:end="3163:24">stream_index</name> <operator pos:start="3163:26" pos:end="3163:26">=</operator> <literal type="number" pos:start="3163:28" pos:end="3163:28">0</literal></expr>;</expr_stmt>
            <goto pos:start="3164:13" pos:end="3164:23">goto <name pos:start="3164:18" pos:end="3164:22">found</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <for pos:start="3167:9" pos:end="3173:9">for<control pos:start="3167:12" pos:end="3168:27">(<init pos:start="3167:13" pos:end="3167:29"><expr pos:start="3167:13" pos:end="3167:28"><name pos:start="3167:13" pos:end="3167:24">stream_index</name> <operator pos:start="3167:26" pos:end="3167:26">=</operator> <literal type="number" pos:start="3167:28" pos:end="3167:28">0</literal></expr>;</init> <condition pos:start="3167:31" pos:end="3167:64"><expr pos:start="3167:31" pos:end="3167:63"><name pos:start="3167:31" pos:end="3167:42">stream_index</name> <operator pos:start="3167:44" pos:end="3167:44">&lt;</operator> <name pos:start="3167:46" pos:end="3167:63"><name pos:start="3167:46" pos:end="3167:51">stream</name><operator pos:start="3167:52" pos:end="3167:53">-&gt;</operator><name pos:start="3167:54" pos:end="3167:63">nb_streams</name></name></expr>;</condition>
            <incr pos:start="3168:13" pos:end="3168:26"><expr pos:start="3168:13" pos:end="3168:26"><name pos:start="3168:13" pos:end="3168:24">stream_index</name><operator pos:start="3168:25" pos:end="3168:26">++</operator></expr></incr>)</control> <block pos:start="3168:29" pos:end="3173:9">{<block_content pos:start="3169:13" pos:end="3172:27">
            <expr_stmt pos:start="3169:13" pos:end="3170:53"><expr pos:start="3169:13" pos:end="3170:52"><call pos:start="3169:13" pos:end="3170:52"><name pos:start="3169:13" pos:end="3169:20">snprintf</name><argument_list pos:start="3169:21" pos:end="3170:52">(<argument pos:start="3169:22" pos:end="3169:24"><expr pos:start="3169:22" pos:end="3169:24"><name pos:start="3169:22" pos:end="3169:24">buf</name></expr></argument>, <argument pos:start="3169:27" pos:end="3169:37"><expr pos:start="3169:27" pos:end="3169:37"><sizeof pos:start="3169:27" pos:end="3169:37">sizeof<argument_list pos:start="3169:33" pos:end="3169:37">(<argument pos:start="3169:34" pos:end="3169:36"><expr pos:start="3169:34" pos:end="3169:36"><name pos:start="3169:34" pos:end="3169:36">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="3169:40" pos:end="3169:55"><expr pos:start="3169:40" pos:end="3169:55"><literal type="string" pos:start="3169:40" pos:end="3169:55">"%s/streamid=%d"</literal></expr></argument>,
                     <argument pos:start="3170:22" pos:end="3170:37"><expr pos:start="3170:22" pos:end="3170:37"><name pos:start="3170:22" pos:end="3170:37"><name pos:start="3170:22" pos:end="3170:27">stream</name><operator pos:start="3170:28" pos:end="3170:29">-&gt;</operator><name pos:start="3170:30" pos:end="3170:37">filename</name></name></expr></argument>, <argument pos:start="3170:40" pos:end="3170:51"><expr pos:start="3170:40" pos:end="3170:51"><name pos:start="3170:40" pos:end="3170:51">stream_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3171:13" pos:end="3172:27"><if pos:start="3171:13" pos:end="3172:27">if <condition pos:start="3171:16" pos:end="3171:35">(<expr pos:start="3171:17" pos:end="3171:34"><operator pos:start="3171:17" pos:end="3171:17">!</operator><call pos:start="3171:18" pos:end="3171:34"><name pos:start="3171:18" pos:end="3171:23">strcmp</name><argument_list pos:start="3171:24" pos:end="3171:34">(<argument pos:start="3171:25" pos:end="3171:28"><expr pos:start="3171:25" pos:end="3171:28"><name pos:start="3171:25" pos:end="3171:28">path</name></expr></argument>, <argument pos:start="3171:31" pos:end="3171:33"><expr pos:start="3171:31" pos:end="3171:33"><name pos:start="3171:31" pos:end="3171:33">buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3172:17" pos:end="3172:27"><block_content pos:start="3172:17" pos:end="3172:27">
                <goto pos:start="3172:17" pos:end="3172:27">goto <name pos:start="3172:22" pos:end="3172:26">found</name>;</goto></block_content></block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
    <comment type="block" pos:start="3175:5" pos:end="3175:25">/* no stream found */</comment>
    <expr_stmt pos:start="3176:5" pos:end="3176:45"><expr pos:start="3176:5" pos:end="3176:44"><call pos:start="3176:5" pos:end="3176:44"><name pos:start="3176:5" pos:end="3176:20">rtsp_reply_error</name><argument_list pos:start="3176:21" pos:end="3176:44">(<argument pos:start="3176:22" pos:end="3176:22"><expr pos:start="3176:22" pos:end="3176:22"><name pos:start="3176:22" pos:end="3176:22">c</name></expr></argument>, <argument pos:start="3176:25" pos:end="3176:43"><expr pos:start="3176:25" pos:end="3176:43"><name pos:start="3176:25" pos:end="3176:43">RTSP_STATUS_SERVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="3176:47" pos:end="3176:70">/* XXX: right error ? */</comment>
    <return pos:start="3177:5" pos:end="3177:11">return;</return>
 <label pos:start="3178:2" pos:end="3178:7"><name pos:start="3178:2" pos:end="3178:6">found</name>:</label>

    <comment type="block" pos:start="3180:5" pos:end="3180:39">/* generate session id if needed */</comment>
    <if_stmt pos:start="3181:5" pos:end="3186:5"><if pos:start="3181:5" pos:end="3186:5">if <condition pos:start="3181:8" pos:end="3181:33">(<expr pos:start="3181:9" pos:end="3181:32"><name pos:start="3181:9" pos:end="3181:24"><name pos:start="3181:9" pos:end="3181:9">h</name><operator pos:start="3181:10" pos:end="3181:11">-&gt;</operator><name pos:start="3181:12" pos:end="3181:21">session_id</name><index pos:start="3181:22" pos:end="3181:24">[<expr pos:start="3181:23" pos:end="3181:23"><literal type="number" pos:start="3181:23" pos:end="3181:23">0</literal></expr>]</index></name> <operator pos:start="3181:26" pos:end="3181:27">==</operator> <literal type="char" pos:start="3181:29" pos:end="3181:32">'\0'</literal></expr>)</condition> <block pos:start="3181:35" pos:end="3186:5">{<block_content pos:start="3182:9" pos:end="3185:35">
        <decl_stmt pos:start="3182:9" pos:end="3182:53"><decl pos:start="3182:9" pos:end="3182:52"><type pos:start="3182:9" pos:end="3182:16"><name pos:start="3182:9" pos:end="3182:16">unsigned</name></type> <name pos:start="3182:18" pos:end="3182:24">random0</name> <init pos:start="3182:26" pos:end="3182:52">= <expr pos:start="3182:28" pos:end="3182:52"><call pos:start="3182:28" pos:end="3182:52"><name pos:start="3182:28" pos:end="3182:37">av_lfg_get</name><argument_list pos:start="3182:38" pos:end="3182:52">(<argument pos:start="3182:39" pos:end="3182:51"><expr pos:start="3182:39" pos:end="3182:51"><operator pos:start="3182:39" pos:end="3182:39">&amp;</operator><name pos:start="3182:40" pos:end="3182:51">random_state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="3183:9" pos:end="3183:53"><decl pos:start="3183:9" pos:end="3183:52"><type pos:start="3183:9" pos:end="3183:16"><name pos:start="3183:9" pos:end="3183:16">unsigned</name></type> <name pos:start="3183:18" pos:end="3183:24">random1</name> <init pos:start="3183:26" pos:end="3183:52">= <expr pos:start="3183:28" pos:end="3183:52"><call pos:start="3183:28" pos:end="3183:52"><name pos:start="3183:28" pos:end="3183:37">av_lfg_get</name><argument_list pos:start="3183:38" pos:end="3183:52">(<argument pos:start="3183:39" pos:end="3183:51"><expr pos:start="3183:39" pos:end="3183:51"><operator pos:start="3183:39" pos:end="3183:39">&amp;</operator><name pos:start="3183:40" pos:end="3183:51">random_state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="3184:9" pos:end="3185:35"><expr pos:start="3184:9" pos:end="3185:34"><call pos:start="3184:9" pos:end="3185:34"><name pos:start="3184:9" pos:end="3184:16">snprintf</name><argument_list pos:start="3184:17" pos:end="3185:34">(<argument pos:start="3184:18" pos:end="3184:30"><expr pos:start="3184:18" pos:end="3184:30"><name pos:start="3184:18" pos:end="3184:30"><name pos:start="3184:18" pos:end="3184:18">h</name><operator pos:start="3184:19" pos:end="3184:20">-&gt;</operator><name pos:start="3184:21" pos:end="3184:30">session_id</name></name></expr></argument>, <argument pos:start="3184:33" pos:end="3184:53"><expr pos:start="3184:33" pos:end="3184:53"><sizeof pos:start="3184:33" pos:end="3184:53">sizeof<argument_list pos:start="3184:39" pos:end="3184:53">(<argument pos:start="3184:40" pos:end="3184:52"><expr pos:start="3184:40" pos:end="3184:52"><name pos:start="3184:40" pos:end="3184:52"><name pos:start="3184:40" pos:end="3184:40">h</name><operator pos:start="3184:41" pos:end="3184:42">-&gt;</operator><name pos:start="3184:43" pos:end="3184:52">session_id</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="3184:56" pos:end="3184:65"><expr pos:start="3184:56" pos:end="3184:65"><literal type="string" pos:start="3184:56" pos:end="3184:65">"%08x%08x"</literal></expr></argument>,
                 <argument pos:start="3185:18" pos:end="3185:24"><expr pos:start="3185:18" pos:end="3185:24"><name pos:start="3185:18" pos:end="3185:24">random0</name></expr></argument>, <argument pos:start="3185:27" pos:end="3185:33"><expr pos:start="3185:27" pos:end="3185:33"><name pos:start="3185:27" pos:end="3185:33">random1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="3188:5" pos:end="3188:55">/* find RTP session, and create it if none found */</comment>
    <expr_stmt pos:start="3189:5" pos:end="3189:44"><expr pos:start="3189:5" pos:end="3189:43"><name pos:start="3189:5" pos:end="3189:9">rtp_c</name> <operator pos:start="3189:11" pos:end="3189:11">=</operator> <call pos:start="3189:13" pos:end="3189:43"><name pos:start="3189:13" pos:end="3189:28">find_rtp_session</name><argument_list pos:start="3189:29" pos:end="3189:43">(<argument pos:start="3189:30" pos:end="3189:42"><expr pos:start="3189:30" pos:end="3189:42"><name pos:start="3189:30" pos:end="3189:42"><name pos:start="3189:30" pos:end="3189:30">h</name><operator pos:start="3189:31" pos:end="3189:32">-&gt;</operator><name pos:start="3189:33" pos:end="3189:42">session_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3190:5" pos:end="3213:5"><if pos:start="3190:5" pos:end="3213:5">if <condition pos:start="3190:8" pos:end="3190:15">(<expr pos:start="3190:9" pos:end="3190:14"><operator pos:start="3190:9" pos:end="3190:9">!</operator><name pos:start="3190:10" pos:end="3190:14">rtp_c</name></expr>)</condition> <block pos:start="3190:17" pos:end="3213:5">{<block_content pos:start="3192:9" pos:end="3212:9">
        <comment type="block" pos:start="3191:9" pos:end="3191:31">/* always prefer UDP */</comment>
        <expr_stmt pos:start="3192:9" pos:end="3192:57"><expr pos:start="3192:9" pos:end="3192:56"><name pos:start="3192:9" pos:end="3192:10">th</name> <operator pos:start="3192:12" pos:end="3192:12">=</operator> <call pos:start="3192:14" pos:end="3192:56"><name pos:start="3192:14" pos:end="3192:27">find_transport</name><argument_list pos:start="3192:28" pos:end="3192:56">(<argument pos:start="3192:29" pos:end="3192:29"><expr pos:start="3192:29" pos:end="3192:29"><name pos:start="3192:29" pos:end="3192:29">h</name></expr></argument>, <argument pos:start="3192:32" pos:end="3192:55"><expr pos:start="3192:32" pos:end="3192:55"><name pos:start="3192:32" pos:end="3192:55">RTSP_LOWER_TRANSPORT_UDP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="3193:9" pos:end="3199:9"><if pos:start="3193:9" pos:end="3199:9">if <condition pos:start="3193:12" pos:end="3193:16">(<expr pos:start="3193:13" pos:end="3193:15"><operator pos:start="3193:13" pos:end="3193:13">!</operator><name pos:start="3193:14" pos:end="3193:15">th</name></expr>)</condition> <block pos:start="3193:18" pos:end="3199:9">{<block_content pos:start="3194:13" pos:end="3198:13">
            <expr_stmt pos:start="3194:13" pos:end="3194:61"><expr pos:start="3194:13" pos:end="3194:60"><name pos:start="3194:13" pos:end="3194:14">th</name> <operator pos:start="3194:16" pos:end="3194:16">=</operator> <call pos:start="3194:18" pos:end="3194:60"><name pos:start="3194:18" pos:end="3194:31">find_transport</name><argument_list pos:start="3194:32" pos:end="3194:60">(<argument pos:start="3194:33" pos:end="3194:33"><expr pos:start="3194:33" pos:end="3194:33"><name pos:start="3194:33" pos:end="3194:33">h</name></expr></argument>, <argument pos:start="3194:36" pos:end="3194:59"><expr pos:start="3194:36" pos:end="3194:59"><name pos:start="3194:36" pos:end="3194:59">RTSP_LOWER_TRANSPORT_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3195:13" pos:end="3198:13"><if pos:start="3195:13" pos:end="3198:13">if <condition pos:start="3195:16" pos:end="3195:20">(<expr pos:start="3195:17" pos:end="3195:19"><operator pos:start="3195:17" pos:end="3195:17">!</operator><name pos:start="3195:18" pos:end="3195:19">th</name></expr>)</condition> <block pos:start="3195:22" pos:end="3198:13">{<block_content pos:start="3196:17" pos:end="3197:23">
                <expr_stmt pos:start="3196:17" pos:end="3196:59"><expr pos:start="3196:17" pos:end="3196:58"><call pos:start="3196:17" pos:end="3196:58"><name pos:start="3196:17" pos:end="3196:32">rtsp_reply_error</name><argument_list pos:start="3196:33" pos:end="3196:58">(<argument pos:start="3196:34" pos:end="3196:34"><expr pos:start="3196:34" pos:end="3196:34"><name pos:start="3196:34" pos:end="3196:34">c</name></expr></argument>, <argument pos:start="3196:37" pos:end="3196:57"><expr pos:start="3196:37" pos:end="3196:57"><name pos:start="3196:37" pos:end="3196:57">RTSP_STATUS_TRANSPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3197:17" pos:end="3197:23">return;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="3201:9" pos:end="3202:56"><expr pos:start="3201:9" pos:end="3202:55"><name pos:start="3201:9" pos:end="3201:13">rtp_c</name> <operator pos:start="3201:15" pos:end="3201:15">=</operator> <call pos:start="3201:17" pos:end="3202:55"><name pos:start="3201:17" pos:end="3201:34">rtp_new_connection</name><argument_list pos:start="3201:35" pos:end="3202:55">(<argument pos:start="3201:36" pos:end="3201:48"><expr pos:start="3201:36" pos:end="3201:48"><operator pos:start="3201:36" pos:end="3201:36">&amp;</operator><name pos:start="3201:37" pos:end="3201:48"><name pos:start="3201:37" pos:end="3201:37">c</name><operator pos:start="3201:38" pos:end="3201:39">-&gt;</operator><name pos:start="3201:40" pos:end="3201:48">from_addr</name></name></expr></argument>, <argument pos:start="3201:51" pos:end="3201:56"><expr pos:start="3201:51" pos:end="3201:56"><name pos:start="3201:51" pos:end="3201:56">stream</name></expr></argument>, <argument pos:start="3201:59" pos:end="3201:71"><expr pos:start="3201:59" pos:end="3201:71"><name pos:start="3201:59" pos:end="3201:71"><name pos:start="3201:59" pos:end="3201:59">h</name><operator pos:start="3201:60" pos:end="3201:61">-&gt;</operator><name pos:start="3201:62" pos:end="3201:71">session_id</name></name></expr></argument>,
                                   <argument pos:start="3202:36" pos:end="3202:54"><expr pos:start="3202:36" pos:end="3202:54"><name pos:start="3202:36" pos:end="3202:54"><name pos:start="3202:36" pos:end="3202:37">th</name><operator pos:start="3202:38" pos:end="3202:39">-&gt;</operator><name pos:start="3202:40" pos:end="3202:54">lower_transport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="3203:9" pos:end="3206:9"><if pos:start="3203:9" pos:end="3206:9">if <condition pos:start="3203:12" pos:end="3203:19">(<expr pos:start="3203:13" pos:end="3203:18"><operator pos:start="3203:13" pos:end="3203:13">!</operator><name pos:start="3203:14" pos:end="3203:18">rtp_c</name></expr>)</condition> <block pos:start="3203:21" pos:end="3206:9">{<block_content pos:start="3204:13" pos:end="3205:19">
            <expr_stmt pos:start="3204:13" pos:end="3204:55"><expr pos:start="3204:13" pos:end="3204:54"><call pos:start="3204:13" pos:end="3204:54"><name pos:start="3204:13" pos:end="3204:28">rtsp_reply_error</name><argument_list pos:start="3204:29" pos:end="3204:54">(<argument pos:start="3204:30" pos:end="3204:30"><expr pos:start="3204:30" pos:end="3204:30"><name pos:start="3204:30" pos:end="3204:30">c</name></expr></argument>, <argument pos:start="3204:33" pos:end="3204:53"><expr pos:start="3204:33" pos:end="3204:53"><name pos:start="3204:33" pos:end="3204:53">RTSP_STATUS_BANDWIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="3205:13" pos:end="3205:19">return;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="3208:9" pos:end="3208:31">/* open input stream */</comment>
        <if_stmt pos:start="3209:9" pos:end="3212:9"><if pos:start="3209:9" pos:end="3212:9">if <condition pos:start="3209:12" pos:end="3209:45">(<expr pos:start="3209:13" pos:end="3209:44"><call pos:start="3209:13" pos:end="3209:40"><name pos:start="3209:13" pos:end="3209:29">open_input_stream</name><argument_list pos:start="3209:30" pos:end="3209:40">(<argument pos:start="3209:31" pos:end="3209:35"><expr pos:start="3209:31" pos:end="3209:35"><name pos:start="3209:31" pos:end="3209:35">rtp_c</name></expr></argument>, <argument pos:start="3209:38" pos:end="3209:39"><expr pos:start="3209:38" pos:end="3209:39"><literal type="string" pos:start="3209:38" pos:end="3209:39">""</literal></expr></argument>)</argument_list></call> <operator pos:start="3209:42" pos:end="3209:42">&lt;</operator> <literal type="number" pos:start="3209:44" pos:end="3209:44">0</literal></expr>)</condition> <block pos:start="3209:47" pos:end="3212:9">{<block_content pos:start="3210:13" pos:end="3211:19">
            <expr_stmt pos:start="3210:13" pos:end="3210:54"><expr pos:start="3210:13" pos:end="3210:53"><call pos:start="3210:13" pos:end="3210:53"><name pos:start="3210:13" pos:end="3210:28">rtsp_reply_error</name><argument_list pos:start="3210:29" pos:end="3210:53">(<argument pos:start="3210:30" pos:end="3210:30"><expr pos:start="3210:30" pos:end="3210:30"><name pos:start="3210:30" pos:end="3210:30">c</name></expr></argument>, <argument pos:start="3210:33" pos:end="3210:52"><expr pos:start="3210:33" pos:end="3210:52"><name pos:start="3210:33" pos:end="3210:52">RTSP_STATUS_INTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="3211:13" pos:end="3211:19">return;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="3215:5" pos:end="3216:38">/* test if stream is OK (test needed because several SETUP needs
     * to be done for a given file) */</comment>
    <if_stmt pos:start="3217:5" pos:end="3220:5"><if pos:start="3217:5" pos:end="3220:5">if <condition pos:start="3217:8" pos:end="3217:32">(<expr pos:start="3217:9" pos:end="3217:31"><name pos:start="3217:9" pos:end="3217:21"><name pos:start="3217:9" pos:end="3217:13">rtp_c</name><operator pos:start="3217:14" pos:end="3217:15">-&gt;</operator><name pos:start="3217:16" pos:end="3217:21">stream</name></name> <operator pos:start="3217:23" pos:end="3217:24">!=</operator> <name pos:start="3217:26" pos:end="3217:31">stream</name></expr>)</condition> <block pos:start="3217:34" pos:end="3220:5">{<block_content pos:start="3218:9" pos:end="3219:15">
        <expr_stmt pos:start="3218:9" pos:end="3218:49"><expr pos:start="3218:9" pos:end="3218:48"><call pos:start="3218:9" pos:end="3218:48"><name pos:start="3218:9" pos:end="3218:24">rtsp_reply_error</name><argument_list pos:start="3218:25" pos:end="3218:48">(<argument pos:start="3218:26" pos:end="3218:26"><expr pos:start="3218:26" pos:end="3218:26"><name pos:start="3218:26" pos:end="3218:26">c</name></expr></argument>, <argument pos:start="3218:29" pos:end="3218:47"><expr pos:start="3218:29" pos:end="3218:47"><name pos:start="3218:29" pos:end="3218:47">RTSP_STATUS_SERVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="3219:9" pos:end="3219:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="3222:5" pos:end="3222:42">/* test if stream is already set up */</comment>
    <if_stmt pos:start="3223:5" pos:end="3226:5"><if pos:start="3223:5" pos:end="3226:5">if <condition pos:start="3223:8" pos:end="3223:37">(<expr pos:start="3223:9" pos:end="3223:36"><name pos:start="3223:9" pos:end="3223:36"><name pos:start="3223:9" pos:end="3223:13">rtp_c</name><operator pos:start="3223:14" pos:end="3223:15">-&gt;</operator><name pos:start="3223:16" pos:end="3223:22">rtp_ctx</name><index pos:start="3223:23" pos:end="3223:36">[<expr pos:start="3223:24" pos:end="3223:35"><name pos:start="3223:24" pos:end="3223:35">stream_index</name></expr>]</index></name></expr>)</condition> <block pos:start="3223:39" pos:end="3226:5">{<block_content pos:start="3224:9" pos:end="3225:15">
        <expr_stmt pos:start="3224:9" pos:end="3224:47"><expr pos:start="3224:9" pos:end="3224:46"><call pos:start="3224:9" pos:end="3224:46"><name pos:start="3224:9" pos:end="3224:24">rtsp_reply_error</name><argument_list pos:start="3224:25" pos:end="3224:46">(<argument pos:start="3224:26" pos:end="3224:26"><expr pos:start="3224:26" pos:end="3224:26"><name pos:start="3224:26" pos:end="3224:26">c</name></expr></argument>, <argument pos:start="3224:29" pos:end="3224:45"><expr pos:start="3224:29" pos:end="3224:45"><name pos:start="3224:29" pos:end="3224:45">RTSP_STATUS_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="3225:9" pos:end="3225:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="3228:5" pos:end="3228:25">/* check transport */</comment>
    <expr_stmt pos:start="3229:5" pos:end="3229:48"><expr pos:start="3229:5" pos:end="3229:47"><name pos:start="3229:5" pos:end="3229:6">th</name> <operator pos:start="3229:8" pos:end="3229:8">=</operator> <call pos:start="3229:10" pos:end="3229:47"><name pos:start="3229:10" pos:end="3229:23">find_transport</name><argument_list pos:start="3229:24" pos:end="3229:47">(<argument pos:start="3229:25" pos:end="3229:25"><expr pos:start="3229:25" pos:end="3229:25"><name pos:start="3229:25" pos:end="3229:25">h</name></expr></argument>, <argument pos:start="3229:28" pos:end="3229:46"><expr pos:start="3229:28" pos:end="3229:46"><name pos:start="3229:28" pos:end="3229:46"><name pos:start="3229:28" pos:end="3229:32">rtp_c</name><operator pos:start="3229:33" pos:end="3229:34">-&gt;</operator><name pos:start="3229:35" pos:end="3229:46">rtp_protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3230:5" pos:end="3234:5"><if pos:start="3230:5" pos:end="3234:5">if <condition pos:start="3230:8" pos:end="3231:42">(<expr pos:start="3230:9" pos:end="3231:41"><operator pos:start="3230:9" pos:end="3230:9">!</operator><name pos:start="3230:10" pos:end="3230:11">th</name> <operator pos:start="3230:13" pos:end="3230:14">||</operator> <operator pos:start="3230:16" pos:end="3230:16">(</operator><name pos:start="3230:17" pos:end="3230:35"><name pos:start="3230:17" pos:end="3230:18">th</name><operator pos:start="3230:19" pos:end="3230:20">-&gt;</operator><name pos:start="3230:21" pos:end="3230:35">lower_transport</name></name> <operator pos:start="3230:37" pos:end="3230:38">==</operator> <name pos:start="3230:40" pos:end="3230:63">RTSP_LOWER_TRANSPORT_UDP</name> <operator pos:start="3230:65" pos:end="3230:66">&amp;&amp;</operator>
                <name pos:start="3231:17" pos:end="3231:35"><name pos:start="3231:17" pos:end="3231:18">th</name><operator pos:start="3231:19" pos:end="3231:20">-&gt;</operator><name pos:start="3231:21" pos:end="3231:35">client_port_min</name></name> <operator pos:start="3231:37" pos:end="3231:38">&lt;=</operator> <literal type="number" pos:start="3231:40" pos:end="3231:40">0</literal><operator pos:start="3231:41" pos:end="3231:41">)</operator></expr>)</condition> <block pos:start="3231:44" pos:end="3234:5">{<block_content pos:start="3232:9" pos:end="3233:15">
        <expr_stmt pos:start="3232:9" pos:end="3232:51"><expr pos:start="3232:9" pos:end="3232:50"><call pos:start="3232:9" pos:end="3232:50"><name pos:start="3232:9" pos:end="3232:24">rtsp_reply_error</name><argument_list pos:start="3232:25" pos:end="3232:50">(<argument pos:start="3232:26" pos:end="3232:26"><expr pos:start="3232:26" pos:end="3232:26"><name pos:start="3232:26" pos:end="3232:26">c</name></expr></argument>, <argument pos:start="3232:29" pos:end="3232:49"><expr pos:start="3232:29" pos:end="3232:49"><name pos:start="3232:29" pos:end="3232:49">RTSP_STATUS_TRANSPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="3233:9" pos:end="3233:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="3236:5" pos:end="3236:31">/* setup default options */</comment>
    <expr_stmt pos:start="3237:5" pos:end="3237:37"><expr pos:start="3237:5" pos:end="3237:36"><name pos:start="3237:5" pos:end="3237:29"><name pos:start="3237:5" pos:end="3237:9">setup</name><operator pos:start="3237:10" pos:end="3237:10">.</operator><name pos:start="3237:11" pos:end="3237:26">transport_option</name><index pos:start="3237:27" pos:end="3237:29">[<expr pos:start="3237:28" pos:end="3237:28"><literal type="number" pos:start="3237:28" pos:end="3237:28">0</literal></expr>]</index></name> <operator pos:start="3237:31" pos:end="3237:31">=</operator> <literal type="char" pos:start="3237:33" pos:end="3237:36">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="3238:5" pos:end="3238:33"><expr pos:start="3238:5" pos:end="3238:32"><name pos:start="3238:5" pos:end="3238:13">dest_addr</name> <operator pos:start="3238:15" pos:end="3238:15">=</operator> <name pos:start="3238:17" pos:end="3238:32"><name pos:start="3238:17" pos:end="3238:21">rtp_c</name><operator pos:start="3238:22" pos:end="3238:23">-&gt;</operator><name pos:start="3238:24" pos:end="3238:32">from_addr</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="3239:5" pos:end="3239:52"><expr pos:start="3239:5" pos:end="3239:51"><name pos:start="3239:5" pos:end="3239:22"><name pos:start="3239:5" pos:end="3239:13">dest_addr</name><operator pos:start="3239:14" pos:end="3239:14">.</operator><name pos:start="3239:15" pos:end="3239:22">sin_port</name></name> <operator pos:start="3239:24" pos:end="3239:24">=</operator> <call pos:start="3239:26" pos:end="3239:51"><name pos:start="3239:26" pos:end="3239:30">htons</name><argument_list pos:start="3239:31" pos:end="3239:51">(<argument pos:start="3239:32" pos:end="3239:50"><expr pos:start="3239:32" pos:end="3239:50"><name pos:start="3239:32" pos:end="3239:50"><name pos:start="3239:32" pos:end="3239:33">th</name><operator pos:start="3239:34" pos:end="3239:35">-&gt;</operator><name pos:start="3239:36" pos:end="3239:50">client_port_min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="3241:5" pos:end="3241:22">/* setup stream */</comment>
    <if_stmt pos:start="3242:5" pos:end="3245:5"><if pos:start="3242:5" pos:end="3245:5">if <condition pos:start="3242:8" pos:end="3242:66">(<expr pos:start="3242:9" pos:end="3242:65"><call pos:start="3242:9" pos:end="3242:61"><name pos:start="3242:9" pos:end="3242:25">rtp_new_av_stream</name><argument_list pos:start="3242:26" pos:end="3242:61">(<argument pos:start="3242:27" pos:end="3242:31"><expr pos:start="3242:27" pos:end="3242:31"><name pos:start="3242:27" pos:end="3242:31">rtp_c</name></expr></argument>, <argument pos:start="3242:34" pos:end="3242:45"><expr pos:start="3242:34" pos:end="3242:45"><name pos:start="3242:34" pos:end="3242:45">stream_index</name></expr></argument>, <argument pos:start="3242:48" pos:end="3242:57"><expr pos:start="3242:48" pos:end="3242:57"><operator pos:start="3242:48" pos:end="3242:48">&amp;</operator><name pos:start="3242:49" pos:end="3242:57">dest_addr</name></expr></argument>, <argument pos:start="3242:60" pos:end="3242:60"><expr pos:start="3242:60" pos:end="3242:60"><name pos:start="3242:60" pos:end="3242:60">c</name></expr></argument>)</argument_list></call> <operator pos:start="3242:63" pos:end="3242:63">&lt;</operator> <literal type="number" pos:start="3242:65" pos:end="3242:65">0</literal></expr>)</condition> <block pos:start="3242:68" pos:end="3245:5">{<block_content pos:start="3243:9" pos:end="3244:15">
        <expr_stmt pos:start="3243:9" pos:end="3243:51"><expr pos:start="3243:9" pos:end="3243:50"><call pos:start="3243:9" pos:end="3243:50"><name pos:start="3243:9" pos:end="3243:24">rtsp_reply_error</name><argument_list pos:start="3243:25" pos:end="3243:50">(<argument pos:start="3243:26" pos:end="3243:26"><expr pos:start="3243:26" pos:end="3243:26"><name pos:start="3243:26" pos:end="3243:26">c</name></expr></argument>, <argument pos:start="3243:29" pos:end="3243:49"><expr pos:start="3243:29" pos:end="3243:49"><name pos:start="3243:29" pos:end="3243:49">RTSP_STATUS_TRANSPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="3244:9" pos:end="3244:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="3247:5" pos:end="3247:72">/* now everything is OK, so we can send the connection parameters */</comment>
    <expr_stmt pos:start="3248:5" pos:end="3248:41"><expr pos:start="3248:5" pos:end="3248:40"><call pos:start="3248:5" pos:end="3248:40"><name pos:start="3248:5" pos:end="3248:21">rtsp_reply_header</name><argument_list pos:start="3248:22" pos:end="3248:40">(<argument pos:start="3248:23" pos:end="3248:23"><expr pos:start="3248:23" pos:end="3248:23"><name pos:start="3248:23" pos:end="3248:23">c</name></expr></argument>, <argument pos:start="3248:26" pos:end="3248:39"><expr pos:start="3248:26" pos:end="3248:39"><name pos:start="3248:26" pos:end="3248:39">RTSP_STATUS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="3249:5" pos:end="3249:20">/* session ID */</comment>
    <expr_stmt pos:start="3250:5" pos:end="3250:61"><expr pos:start="3250:5" pos:end="3250:60"><call pos:start="3250:5" pos:end="3250:60"><name pos:start="3250:5" pos:end="3250:15">avio_printf</name><argument_list pos:start="3250:16" pos:end="3250:60">(<argument pos:start="3250:17" pos:end="3250:21"><expr pos:start="3250:17" pos:end="3250:21"><name pos:start="3250:17" pos:end="3250:21"><name pos:start="3250:17" pos:end="3250:17">c</name><operator pos:start="3250:18" pos:end="3250:19">-&gt;</operator><name pos:start="3250:20" pos:end="3250:21">pb</name></name></expr></argument>, <argument pos:start="3250:24" pos:end="3250:40"><expr pos:start="3250:24" pos:end="3250:40"><literal type="string" pos:start="3250:24" pos:end="3250:40">"Session: %s\r\n"</literal></expr></argument>, <argument pos:start="3250:43" pos:end="3250:59"><expr pos:start="3250:43" pos:end="3250:59"><name pos:start="3250:43" pos:end="3250:59"><name pos:start="3250:43" pos:end="3250:47">rtp_c</name><operator pos:start="3250:48" pos:end="3250:49">-&gt;</operator><name pos:start="3250:50" pos:end="3250:59">session_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="3252:5" pos:end="3267:5">switch<condition pos:start="3252:11" pos:end="3252:31">(<expr pos:start="3252:12" pos:end="3252:30"><name pos:start="3252:12" pos:end="3252:30"><name pos:start="3252:12" pos:end="3252:16">rtp_c</name><operator pos:start="3252:17" pos:end="3252:18">-&gt;</operator><name pos:start="3252:19" pos:end="3252:30">rtp_protocol</name></name></expr>)</condition> <block pos:start="3252:33" pos:end="3267:5">{<block_content pos:start="3253:5" pos:end="3266:14">
    <case pos:start="3253:5" pos:end="3253:34">case <expr pos:start="3253:10" pos:end="3253:33"><name pos:start="3253:10" pos:end="3253:33">RTSP_LOWER_TRANSPORT_UDP</name></expr>:</case>
        <expr_stmt pos:start="3254:9" pos:end="3254:79"><expr pos:start="3254:9" pos:end="3254:78"><name pos:start="3254:9" pos:end="3254:16">rtp_port</name> <operator pos:start="3254:18" pos:end="3254:18">=</operator> <call pos:start="3254:20" pos:end="3254:78"><name pos:start="3254:20" pos:end="3254:44">ff_rtp_get_local_rtp_port</name><argument_list pos:start="3254:45" pos:end="3254:78">(<argument pos:start="3254:46" pos:end="3254:77"><expr pos:start="3254:46" pos:end="3254:77"><name pos:start="3254:46" pos:end="3254:77"><name pos:start="3254:46" pos:end="3254:50">rtp_c</name><operator pos:start="3254:51" pos:end="3254:52">-&gt;</operator><name pos:start="3254:53" pos:end="3254:63">rtp_handles</name><index pos:start="3254:64" pos:end="3254:77">[<expr pos:start="3254:65" pos:end="3254:76"><name pos:start="3254:65" pos:end="3254:76">stream_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3255:9" pos:end="3255:81"><expr pos:start="3255:9" pos:end="3255:80"><name pos:start="3255:9" pos:end="3255:17">rtcp_port</name> <operator pos:start="3255:19" pos:end="3255:19">=</operator> <call pos:start="3255:21" pos:end="3255:80"><name pos:start="3255:21" pos:end="3255:46">ff_rtp_get_local_rtcp_port</name><argument_list pos:start="3255:47" pos:end="3255:80">(<argument pos:start="3255:48" pos:end="3255:79"><expr pos:start="3255:48" pos:end="3255:79"><name pos:start="3255:48" pos:end="3255:79"><name pos:start="3255:48" pos:end="3255:52">rtp_c</name><operator pos:start="3255:53" pos:end="3255:54">-&gt;</operator><name pos:start="3255:55" pos:end="3255:65">rtp_handles</name><index pos:start="3255:66" pos:end="3255:79">[<expr pos:start="3255:67" pos:end="3255:78"><name pos:start="3255:67" pos:end="3255:78">stream_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3256:9" pos:end="3259:41"><expr pos:start="3256:9" pos:end="3259:40"><call pos:start="3256:9" pos:end="3259:40"><name pos:start="3256:9" pos:end="3256:19">avio_printf</name><argument_list pos:start="3256:20" pos:end="3259:40">(<argument pos:start="3256:21" pos:end="3256:25"><expr pos:start="3256:21" pos:end="3256:25"><name pos:start="3256:21" pos:end="3256:25"><name pos:start="3256:21" pos:end="3256:21">c</name><operator pos:start="3256:22" pos:end="3256:23">-&gt;</operator><name pos:start="3256:24" pos:end="3256:25">pb</name></name></expr></argument>, <argument pos:start="3256:28" pos:end="3257:57"><expr pos:start="3256:28" pos:end="3257:57"><literal type="string" pos:start="3256:28" pos:end="3256:60">"Transport: RTP/AVP/UDP;unicast;"</literal>
                    <literal type="string" pos:start="3257:21" pos:end="3257:57">"client_port=%d-%d;server_port=%d-%d"</literal></expr></argument>,
                    <argument pos:start="3258:21" pos:end="3258:39"><expr pos:start="3258:21" pos:end="3258:39"><name pos:start="3258:21" pos:end="3258:39"><name pos:start="3258:21" pos:end="3258:22">th</name><operator pos:start="3258:23" pos:end="3258:24">-&gt;</operator><name pos:start="3258:25" pos:end="3258:39">client_port_min</name></name></expr></argument>, <argument pos:start="3258:42" pos:end="3258:60"><expr pos:start="3258:42" pos:end="3258:60"><name pos:start="3258:42" pos:end="3258:60"><name pos:start="3258:42" pos:end="3258:43">th</name><operator pos:start="3258:44" pos:end="3258:45">-&gt;</operator><name pos:start="3258:46" pos:end="3258:60">client_port_max</name></name></expr></argument>,
                    <argument pos:start="3259:21" pos:end="3259:28"><expr pos:start="3259:21" pos:end="3259:28"><name pos:start="3259:21" pos:end="3259:28">rtp_port</name></expr></argument>, <argument pos:start="3259:31" pos:end="3259:39"><expr pos:start="3259:31" pos:end="3259:39"><name pos:start="3259:31" pos:end="3259:39">rtcp_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="3260:9" pos:end="3260:14">break;</break>
    <case pos:start="3261:5" pos:end="3261:34">case <expr pos:start="3261:10" pos:end="3261:33"><name pos:start="3261:10" pos:end="3261:33">RTSP_LOWER_TRANSPORT_TCP</name></expr>:</case>
        <expr_stmt pos:start="3262:9" pos:end="3263:60"><expr pos:start="3262:9" pos:end="3263:59"><call pos:start="3262:9" pos:end="3263:59"><name pos:start="3262:9" pos:end="3262:19">avio_printf</name><argument_list pos:start="3262:20" pos:end="3263:59">(<argument pos:start="3262:21" pos:end="3262:25"><expr pos:start="3262:21" pos:end="3262:25"><name pos:start="3262:21" pos:end="3262:25"><name pos:start="3262:21" pos:end="3262:21">c</name><operator pos:start="3262:22" pos:end="3262:23">-&gt;</operator><name pos:start="3262:24" pos:end="3262:25">pb</name></name></expr></argument>, <argument pos:start="3262:28" pos:end="3262:69"><expr pos:start="3262:28" pos:end="3262:69"><literal type="string" pos:start="3262:28" pos:end="3262:69">"Transport: RTP/AVP/TCP;interleaved=%d-%d"</literal></expr></argument>,
                    <argument pos:start="3263:21" pos:end="3263:36"><expr pos:start="3263:21" pos:end="3263:36"><name pos:start="3263:21" pos:end="3263:32">stream_index</name> <operator pos:start="3263:34" pos:end="3263:34">*</operator> <literal type="number" pos:start="3263:36" pos:end="3263:36">2</literal></expr></argument>, <argument pos:start="3263:39" pos:end="3263:58"><expr pos:start="3263:39" pos:end="3263:58"><name pos:start="3263:39" pos:end="3263:50">stream_index</name> <operator pos:start="3263:52" pos:end="3263:52">*</operator> <literal type="number" pos:start="3263:54" pos:end="3263:56">2</literal> <operator pos:start="3263:56" pos:end="3263:56">+</operator> <literal type="number" pos:start="3263:58" pos:end="3263:58">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="3264:9" pos:end="3264:14">break;</break>
    <default pos:start="3265:5" pos:end="3265:12">default:</default>
        <break pos:start="3266:9" pos:end="3266:14">break;</break>
    </block_content>}</block></switch>
    <if_stmt pos:start="3268:5" pos:end="3269:58"><if pos:start="3268:5" pos:end="3269:58">if <condition pos:start="3268:8" pos:end="3268:42">(<expr pos:start="3268:9" pos:end="3268:41"><name pos:start="3268:9" pos:end="3268:33"><name pos:start="3268:9" pos:end="3268:13">setup</name><operator pos:start="3268:14" pos:end="3268:14">.</operator><name pos:start="3268:15" pos:end="3268:30">transport_option</name><index pos:start="3268:31" pos:end="3268:33">[<expr pos:start="3268:32" pos:end="3268:32"><literal type="number" pos:start="3268:32" pos:end="3268:32">0</literal></expr>]</index></name> <operator pos:start="3268:35" pos:end="3268:36">!=</operator> <literal type="char" pos:start="3268:38" pos:end="3268:41">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="3269:9" pos:end="3269:58"><block_content pos:start="3269:9" pos:end="3269:58">
        <expr_stmt pos:start="3269:9" pos:end="3269:58"><expr pos:start="3269:9" pos:end="3269:57"><call pos:start="3269:9" pos:end="3269:57"><name pos:start="3269:9" pos:end="3269:19">avio_printf</name><argument_list pos:start="3269:20" pos:end="3269:57">(<argument pos:start="3269:21" pos:end="3269:25"><expr pos:start="3269:21" pos:end="3269:25"><name pos:start="3269:21" pos:end="3269:25"><name pos:start="3269:21" pos:end="3269:21">c</name><operator pos:start="3269:22" pos:end="3269:23">-&gt;</operator><name pos:start="3269:24" pos:end="3269:25">pb</name></name></expr></argument>, <argument pos:start="3269:28" pos:end="3269:32"><expr pos:start="3269:28" pos:end="3269:32"><literal type="string" pos:start="3269:28" pos:end="3269:32">";%s"</literal></expr></argument>, <argument pos:start="3269:35" pos:end="3269:56"><expr pos:start="3269:35" pos:end="3269:56"><name pos:start="3269:35" pos:end="3269:56"><name pos:start="3269:35" pos:end="3269:39">setup</name><operator pos:start="3269:40" pos:end="3269:40">.</operator><name pos:start="3269:41" pos:end="3269:56">transport_option</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="3270:5" pos:end="3270:31"><expr pos:start="3270:5" pos:end="3270:30"><call pos:start="3270:5" pos:end="3270:30"><name pos:start="3270:5" pos:end="3270:15">avio_printf</name><argument_list pos:start="3270:16" pos:end="3270:30">(<argument pos:start="3270:17" pos:end="3270:21"><expr pos:start="3270:17" pos:end="3270:21"><name pos:start="3270:17" pos:end="3270:21"><name pos:start="3270:17" pos:end="3270:17">c</name><operator pos:start="3270:18" pos:end="3270:19">-&gt;</operator><name pos:start="3270:20" pos:end="3270:21">pb</name></name></expr></argument>, <argument pos:start="3270:24" pos:end="3270:29"><expr pos:start="3270:24" pos:end="3270:29"><literal type="string" pos:start="3270:24" pos:end="3270:29">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt pos:start="3273:5" pos:end="3273:31"><expr pos:start="3273:5" pos:end="3273:30"><call pos:start="3273:5" pos:end="3273:30"><name pos:start="3273:5" pos:end="3273:15">avio_printf</name><argument_list pos:start="3273:16" pos:end="3273:30">(<argument pos:start="3273:17" pos:end="3273:21"><expr pos:start="3273:17" pos:end="3273:21"><name pos:start="3273:17" pos:end="3273:21"><name pos:start="3273:17" pos:end="3273:17">c</name><operator pos:start="3273:18" pos:end="3273:19">-&gt;</operator><name pos:start="3273:20" pos:end="3273:21">pb</name></name></expr></argument>, <argument pos:start="3273:24" pos:end="3273:29"><expr pos:start="3273:24" pos:end="3273:29"><literal type="string" pos:start="3273:24" pos:end="3273:29">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen" pos:start="3277:1" pos:end="3280:3">/**
 * find an RTP connection by using the session ID. Check consistency
 * with filename
 */</comment>
<function pos:start="3281:1" pos:end="3313:1"><type pos:start="3281:1" pos:end="3281:20"><specifier pos:start="3281:1" pos:end="3281:6">static</specifier> <name pos:start="3281:8" pos:end="3281:18">HTTPContext</name> <modifier pos:start="3281:20" pos:end="3281:20">*</modifier></type><name pos:start="3281:21" pos:end="3281:45">find_rtp_session_with_url</name><parameter_list pos:start="3281:46" pos:end="3282:69">(<parameter pos:start="3281:47" pos:end="3281:61"><decl pos:start="3281:47" pos:end="3281:61"><type pos:start="3281:47" pos:end="3281:61"><specifier pos:start="3281:47" pos:end="3281:51">const</specifier> <name pos:start="3281:53" pos:end="3281:56">char</name> <modifier pos:start="3281:58" pos:end="3281:58">*</modifier></type><name pos:start="3281:59" pos:end="3281:61">url</name></decl></parameter>,
                                              <parameter pos:start="3282:47" pos:end="3282:68"><decl pos:start="3282:47" pos:end="3282:68"><type pos:start="3282:47" pos:end="3282:68"><specifier pos:start="3282:47" pos:end="3282:51">const</specifier> <name pos:start="3282:53" pos:end="3282:56">char</name> <modifier pos:start="3282:58" pos:end="3282:58">*</modifier></type><name pos:start="3282:59" pos:end="3282:68">session_id</name></decl></parameter>)</parameter_list>
<block pos:start="3283:1" pos:end="3313:1">{<block_content pos:start="3284:5" pos:end="3312:16">
    <decl_stmt pos:start="3284:5" pos:end="3284:23"><decl pos:start="3284:5" pos:end="3284:22"><type pos:start="3284:5" pos:end="3284:17"><name pos:start="3284:5" pos:end="3284:15">HTTPContext</name> <modifier pos:start="3284:17" pos:end="3284:17">*</modifier></type><name pos:start="3284:18" pos:end="3284:22">rtp_c</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3285:5" pos:end="3285:21"><decl pos:start="3285:5" pos:end="3285:20"><type pos:start="3285:5" pos:end="3285:8"><name pos:start="3285:5" pos:end="3285:8">char</name></type> <name pos:start="3285:10" pos:end="3285:20"><name pos:start="3285:10" pos:end="3285:14">path1</name><index pos:start="3285:15" pos:end="3285:20">[<expr pos:start="3285:16" pos:end="3285:19"><literal type="number" pos:start="3285:16" pos:end="3285:19">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="3286:5" pos:end="3286:21"><decl pos:start="3286:5" pos:end="3286:20"><type pos:start="3286:5" pos:end="3286:16"><specifier pos:start="3286:5" pos:end="3286:9">const</specifier> <name pos:start="3286:11" pos:end="3286:14">char</name> <modifier pos:start="3286:16" pos:end="3286:16">*</modifier></type><name pos:start="3286:17" pos:end="3286:20">path</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3287:5" pos:end="3287:19"><decl pos:start="3287:5" pos:end="3287:18"><type pos:start="3287:5" pos:end="3287:8"><name pos:start="3287:5" pos:end="3287:8">char</name></type> <name pos:start="3287:10" pos:end="3287:18"><name pos:start="3287:10" pos:end="3287:12">buf</name><index pos:start="3287:13" pos:end="3287:18">[<expr pos:start="3287:14" pos:end="3287:17"><literal type="number" pos:start="3287:14" pos:end="3287:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="3288:5" pos:end="3288:15"><decl pos:start="3288:5" pos:end="3288:9"><type pos:start="3288:5" pos:end="3288:7"><name pos:start="3288:5" pos:end="3288:7">int</name></type> <name pos:start="3288:9" pos:end="3288:9">s</name></decl>, <decl pos:start="3288:12" pos:end="3288:14"><type ref="prev" pos:start="3288:5" pos:end="3288:7"/><name pos:start="3288:12" pos:end="3288:14">len</name></decl>;</decl_stmt>

    <expr_stmt pos:start="3290:5" pos:end="3290:41"><expr pos:start="3290:5" pos:end="3290:40"><name pos:start="3290:5" pos:end="3290:9">rtp_c</name> <operator pos:start="3290:11" pos:end="3290:11">=</operator> <call pos:start="3290:13" pos:end="3290:40"><name pos:start="3290:13" pos:end="3290:28">find_rtp_session</name><argument_list pos:start="3290:29" pos:end="3290:40">(<argument pos:start="3290:30" pos:end="3290:39"><expr pos:start="3290:30" pos:end="3290:39"><name pos:start="3290:30" pos:end="3290:39">session_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3291:5" pos:end="3292:20"><if pos:start="3291:5" pos:end="3292:20">if <condition pos:start="3291:8" pos:end="3291:15">(<expr pos:start="3291:9" pos:end="3291:14"><operator pos:start="3291:9" pos:end="3291:9">!</operator><name pos:start="3291:10" pos:end="3291:14">rtp_c</name></expr>)</condition><block type="pseudo" pos:start="3292:9" pos:end="3292:20"><block_content pos:start="3292:9" pos:end="3292:20">
        <return pos:start="3292:9" pos:end="3292:20">return <expr pos:start="3292:16" pos:end="3292:19"><name pos:start="3292:16" pos:end="3292:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block" pos:start="3294:5" pos:end="3294:33">/* find which URL is asked */</comment>
    <expr_stmt pos:start="3295:5" pos:end="3295:77"><expr pos:start="3295:5" pos:end="3295:76"><call pos:start="3295:5" pos:end="3295:76"><name pos:start="3295:5" pos:end="3295:16">av_url_split</name><argument_list pos:start="3295:17" pos:end="3295:76">(<argument pos:start="3295:18" pos:end="3295:21"><expr pos:start="3295:18" pos:end="3295:21"><name pos:start="3295:18" pos:end="3295:21">NULL</name></expr></argument>, <argument pos:start="3295:24" pos:end="3295:24"><expr pos:start="3295:24" pos:end="3295:24"><literal type="number" pos:start="3295:24" pos:end="3295:24">0</literal></expr></argument>, <argument pos:start="3295:27" pos:end="3295:30"><expr pos:start="3295:27" pos:end="3295:30"><name pos:start="3295:27" pos:end="3295:30">NULL</name></expr></argument>, <argument pos:start="3295:33" pos:end="3295:33"><expr pos:start="3295:33" pos:end="3295:33"><literal type="number" pos:start="3295:33" pos:end="3295:33">0</literal></expr></argument>, <argument pos:start="3295:36" pos:end="3295:39"><expr pos:start="3295:36" pos:end="3295:39"><name pos:start="3295:36" pos:end="3295:39">NULL</name></expr></argument>, <argument pos:start="3295:42" pos:end="3295:42"><expr pos:start="3295:42" pos:end="3295:42"><literal type="number" pos:start="3295:42" pos:end="3295:42">0</literal></expr></argument>, <argument pos:start="3295:45" pos:end="3295:48"><expr pos:start="3295:45" pos:end="3295:48"><name pos:start="3295:45" pos:end="3295:48">NULL</name></expr></argument>, <argument pos:start="3295:51" pos:end="3295:55"><expr pos:start="3295:51" pos:end="3295:55"><name pos:start="3295:51" pos:end="3295:55">path1</name></expr></argument>, <argument pos:start="3295:58" pos:end="3295:70"><expr pos:start="3295:58" pos:end="3295:70"><sizeof pos:start="3295:58" pos:end="3295:70">sizeof<argument_list pos:start="3295:64" pos:end="3295:70">(<argument pos:start="3295:65" pos:end="3295:69"><expr pos:start="3295:65" pos:end="3295:69"><name pos:start="3295:65" pos:end="3295:69">path1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="3295:73" pos:end="3295:75"><expr pos:start="3295:73" pos:end="3295:75"><name pos:start="3295:73" pos:end="3295:75">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3296:5" pos:end="3296:17"><expr pos:start="3296:5" pos:end="3296:16"><name pos:start="3296:5" pos:end="3296:8">path</name> <operator pos:start="3296:10" pos:end="3296:10">=</operator> <name pos:start="3296:12" pos:end="3296:16">path1</name></expr>;</expr_stmt>
    <if_stmt pos:start="3297:5" pos:end="3298:15"><if pos:start="3297:5" pos:end="3298:15">if <condition pos:start="3297:8" pos:end="3297:21">(<expr pos:start="3297:9" pos:end="3297:20"><operator pos:start="3297:9" pos:end="3297:9">*</operator><name pos:start="3297:10" pos:end="3297:13">path</name> <operator pos:start="3297:15" pos:end="3297:16">==</operator> <literal type="char" pos:start="3297:18" pos:end="3297:20">'/'</literal></expr>)</condition><block type="pseudo" pos:start="3298:9" pos:end="3298:15"><block_content pos:start="3298:9" pos:end="3298:15">
        <expr_stmt pos:start="3298:9" pos:end="3298:15"><expr pos:start="3298:9" pos:end="3298:14"><name pos:start="3298:9" pos:end="3298:12">path</name><operator pos:start="3298:13" pos:end="3298:14">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="3299:5" pos:end="3299:60"><if pos:start="3299:5" pos:end="3299:60">if<condition pos:start="3299:7" pos:end="3299:46">(<expr pos:start="3299:8" pos:end="3299:45"><operator pos:start="3299:8" pos:end="3299:8">!</operator><call pos:start="3299:9" pos:end="3299:45"><name pos:start="3299:9" pos:end="3299:14">strcmp</name><argument_list pos:start="3299:15" pos:end="3299:45">(<argument pos:start="3299:16" pos:end="3299:19"><expr pos:start="3299:16" pos:end="3299:19"><name pos:start="3299:16" pos:end="3299:19">path</name></expr></argument>, <argument pos:start="3299:22" pos:end="3299:44"><expr pos:start="3299:22" pos:end="3299:44"><name pos:start="3299:22" pos:end="3299:44"><name pos:start="3299:22" pos:end="3299:26">rtp_c</name><operator pos:start="3299:27" pos:end="3299:28">-&gt;</operator><name pos:start="3299:29" pos:end="3299:34">stream</name><operator pos:start="3299:35" pos:end="3299:36">-&gt;</operator><name pos:start="3299:37" pos:end="3299:44">filename</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3299:48" pos:end="3299:60"><block_content pos:start="3299:48" pos:end="3299:60"> <return pos:start="3299:48" pos:end="3299:60">return <expr pos:start="3299:55" pos:end="3299:59"><name pos:start="3299:55" pos:end="3299:59">rtp_c</name></expr>;</return></block_content></block></if></if_stmt>
    <for pos:start="3300:5" pos:end="3307:5">for<control pos:start="3300:8" pos:end="3300:46">(<init pos:start="3300:9" pos:end="3300:12"><expr pos:start="3300:9" pos:end="3300:11"><name pos:start="3300:9" pos:end="3300:9">s</name><operator pos:start="3300:10" pos:end="3300:10">=</operator><literal type="number" pos:start="3300:11" pos:end="3300:11">0</literal></expr>;</init> <condition pos:start="3300:14" pos:end="3300:41"><expr pos:start="3300:14" pos:end="3300:40"><name pos:start="3300:14" pos:end="3300:14">s</name><operator pos:start="3300:15" pos:end="3300:15">&lt;</operator><name pos:start="3300:16" pos:end="3300:40"><name pos:start="3300:16" pos:end="3300:20">rtp_c</name><operator pos:start="3300:21" pos:end="3300:22">-&gt;</operator><name pos:start="3300:23" pos:end="3300:28">stream</name><operator pos:start="3300:29" pos:end="3300:30">-&gt;</operator><name pos:start="3300:31" pos:end="3300:40">nb_streams</name></name></expr>;</condition> <incr pos:start="3300:43" pos:end="3300:45"><expr pos:start="3300:43" pos:end="3300:45"><operator pos:start="3300:43" pos:end="3300:44">++</operator><name pos:start="3300:45" pos:end="3300:45">s</name></expr></incr>)</control> <block pos:start="3300:48" pos:end="3307:5">{<block_content pos:start="3301:7" pos:end="3306:21">
      <expr_stmt pos:start="3301:7" pos:end="3302:36"><expr pos:start="3301:7" pos:end="3302:35"><call pos:start="3301:7" pos:end="3302:35"><name pos:start="3301:7" pos:end="3301:14">snprintf</name><argument_list pos:start="3301:15" pos:end="3302:35">(<argument pos:start="3301:16" pos:end="3301:18"><expr pos:start="3301:16" pos:end="3301:18"><name pos:start="3301:16" pos:end="3301:18">buf</name></expr></argument>, <argument pos:start="3301:21" pos:end="3301:31"><expr pos:start="3301:21" pos:end="3301:31"><sizeof pos:start="3301:21" pos:end="3301:31">sizeof<argument_list pos:start="3301:27" pos:end="3301:31">(<argument pos:start="3301:28" pos:end="3301:30"><expr pos:start="3301:28" pos:end="3301:30"><name pos:start="3301:28" pos:end="3301:30">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="3301:34" pos:end="3301:49"><expr pos:start="3301:34" pos:end="3301:49"><literal type="string" pos:start="3301:34" pos:end="3301:49">"%s/streamid=%d"</literal></expr></argument>,
        <argument pos:start="3302:9" pos:end="3302:31"><expr pos:start="3302:9" pos:end="3302:31"><name pos:start="3302:9" pos:end="3302:31"><name pos:start="3302:9" pos:end="3302:13">rtp_c</name><operator pos:start="3302:14" pos:end="3302:15">-&gt;</operator><name pos:start="3302:16" pos:end="3302:21">stream</name><operator pos:start="3302:22" pos:end="3302:23">-&gt;</operator><name pos:start="3302:24" pos:end="3302:31">filename</name></name></expr></argument>, <argument pos:start="3302:34" pos:end="3302:34"><expr pos:start="3302:34" pos:end="3302:34"><name pos:start="3302:34" pos:end="3302:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt pos:start="3303:7" pos:end="3306:21"><if pos:start="3303:7" pos:end="3306:21">if<condition pos:start="3303:9" pos:end="3303:42">(<expr pos:start="3303:10" pos:end="3303:41"><operator pos:start="3303:10" pos:end="3303:10">!</operator><call pos:start="3303:11" pos:end="3303:41"><name pos:start="3303:11" pos:end="3303:17">strncmp</name><argument_list pos:start="3303:18" pos:end="3303:41">(<argument pos:start="3303:19" pos:end="3303:22"><expr pos:start="3303:19" pos:end="3303:22"><name pos:start="3303:19" pos:end="3303:22">path</name></expr></argument>, <argument pos:start="3303:25" pos:end="3303:27"><expr pos:start="3303:25" pos:end="3303:27"><name pos:start="3303:25" pos:end="3303:27">buf</name></expr></argument>, <argument pos:start="3303:30" pos:end="3303:40"><expr pos:start="3303:30" pos:end="3303:40"><sizeof pos:start="3303:30" pos:end="3303:40">sizeof<argument_list pos:start="3303:36" pos:end="3303:40">(<argument pos:start="3303:37" pos:end="3303:39"><expr pos:start="3303:37" pos:end="3303:39"><name pos:start="3303:37" pos:end="3303:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3306:9" pos:end="3306:21"><block_content pos:start="3306:9" pos:end="3306:21">
        <comment type="block" pos:start="3304:9" pos:end="3305:30">/* XXX: Should we reply with RTSP_STATUS_ONLY_AGGREGATE
         * if nb_streams&gt;1? */</comment>
        <return pos:start="3306:9" pos:end="3306:21">return <expr pos:start="3306:16" pos:end="3306:20"><name pos:start="3306:16" pos:end="3306:20">rtp_c</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="3308:5" pos:end="3308:23"><expr pos:start="3308:5" pos:end="3308:22"><name pos:start="3308:5" pos:end="3308:7">len</name> <operator pos:start="3308:9" pos:end="3308:9">=</operator> <call pos:start="3308:11" pos:end="3308:22"><name pos:start="3308:11" pos:end="3308:16">strlen</name><argument_list pos:start="3308:17" pos:end="3308:22">(<argument pos:start="3308:18" pos:end="3308:21"><expr pos:start="3308:18" pos:end="3308:21"><name pos:start="3308:18" pos:end="3308:21">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3309:5" pos:end="3311:21"><if pos:start="3309:5" pos:end="3311:21">if <condition pos:start="3309:8" pos:end="3310:57">(<expr pos:start="3309:9" pos:end="3310:56"><name pos:start="3309:9" pos:end="3309:11">len</name> <operator pos:start="3309:13" pos:end="3309:13">&gt;</operator> <literal type="number" pos:start="3309:15" pos:end="3309:15">0</literal> <operator pos:start="3309:17" pos:end="3309:18">&amp;&amp;</operator> <name pos:start="3309:20" pos:end="3309:32"><name pos:start="3309:20" pos:end="3309:23">path</name><index pos:start="3309:24" pos:end="3309:32">[<expr pos:start="3309:25" pos:end="3309:31"><name pos:start="3309:25" pos:end="3309:27">len</name> <operator pos:start="3309:29" pos:end="3309:29">-</operator> <literal type="number" pos:start="3309:31" pos:end="3309:31">1</literal></expr>]</index></name> <operator pos:start="3309:34" pos:end="3309:35">==</operator> <literal type="char" pos:start="3309:37" pos:end="3309:39">'/'</literal> <operator pos:start="3309:41" pos:end="3309:42">&amp;&amp;</operator>
        <operator pos:start="3310:9" pos:end="3310:9">!</operator><call pos:start="3310:10" pos:end="3310:56"><name pos:start="3310:10" pos:end="3310:16">strncmp</name><argument_list pos:start="3310:17" pos:end="3310:56">(<argument pos:start="3310:18" pos:end="3310:21"><expr pos:start="3310:18" pos:end="3310:21"><name pos:start="3310:18" pos:end="3310:21">path</name></expr></argument>, <argument pos:start="3310:24" pos:end="3310:46"><expr pos:start="3310:24" pos:end="3310:46"><name pos:start="3310:24" pos:end="3310:46"><name pos:start="3310:24" pos:end="3310:28">rtp_c</name><operator pos:start="3310:29" pos:end="3310:30">-&gt;</operator><name pos:start="3310:31" pos:end="3310:36">stream</name><operator pos:start="3310:37" pos:end="3310:38">-&gt;</operator><name pos:start="3310:39" pos:end="3310:46">filename</name></name></expr></argument>, <argument pos:start="3310:49" pos:end="3310:55"><expr pos:start="3310:49" pos:end="3310:55"><name pos:start="3310:49" pos:end="3310:51">len</name> <operator pos:start="3310:53" pos:end="3310:53">-</operator> <literal type="number" pos:start="3310:55" pos:end="3310:55">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3311:9" pos:end="3311:21"><block_content pos:start="3311:9" pos:end="3311:21">
        <return pos:start="3311:9" pos:end="3311:21">return <expr pos:start="3311:16" pos:end="3311:20"><name pos:start="3311:16" pos:end="3311:20">rtp_c</name></expr>;</return></block_content></block></if></if_stmt>
    <return pos:start="3312:5" pos:end="3312:16">return <expr pos:start="3312:12" pos:end="3312:15"><name pos:start="3312:12" pos:end="3312:15">NULL</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="3315:1" pos:end="3339:1"><type pos:start="3315:1" pos:end="3315:11"><specifier pos:start="3315:1" pos:end="3315:6">static</specifier> <name pos:start="3315:8" pos:end="3315:11">void</name></type> <name pos:start="3315:13" pos:end="3315:25">rtsp_cmd_play</name><parameter_list pos:start="3315:26" pos:end="3315:80">(<parameter pos:start="3315:27" pos:end="3315:40"><decl pos:start="3315:27" pos:end="3315:40"><type pos:start="3315:27" pos:end="3315:40"><name pos:start="3315:27" pos:end="3315:37">HTTPContext</name> <modifier pos:start="3315:39" pos:end="3315:39">*</modifier></type><name pos:start="3315:40" pos:end="3315:40">c</name></decl></parameter>, <parameter pos:start="3315:43" pos:end="3315:57"><decl pos:start="3315:43" pos:end="3315:57"><type pos:start="3315:43" pos:end="3315:57"><specifier pos:start="3315:43" pos:end="3315:47">const</specifier> <name pos:start="3315:49" pos:end="3315:52">char</name> <modifier pos:start="3315:54" pos:end="3315:54">*</modifier></type><name pos:start="3315:55" pos:end="3315:57">url</name></decl></parameter>, <parameter pos:start="3315:60" pos:end="3315:79"><decl pos:start="3315:60" pos:end="3315:79"><type pos:start="3315:60" pos:end="3315:79"><name pos:start="3315:60" pos:end="3315:76">RTSPMessageHeader</name> <modifier pos:start="3315:78" pos:end="3315:78">*</modifier></type><name pos:start="3315:79" pos:end="3315:79">h</name></decl></parameter>)</parameter_list>
<block pos:start="3316:1" pos:end="3339:1">{<block_content pos:start="3317:5" pos:end="3338:31">
    <decl_stmt pos:start="3317:5" pos:end="3317:23"><decl pos:start="3317:5" pos:end="3317:22"><type pos:start="3317:5" pos:end="3317:17"><name pos:start="3317:5" pos:end="3317:15">HTTPContext</name> <modifier pos:start="3317:17" pos:end="3317:17">*</modifier></type><name pos:start="3317:18" pos:end="3317:22">rtp_c</name></decl>;</decl_stmt>

    <expr_stmt pos:start="3319:5" pos:end="3319:58"><expr pos:start="3319:5" pos:end="3319:57"><name pos:start="3319:5" pos:end="3319:9">rtp_c</name> <operator pos:start="3319:11" pos:end="3319:11">=</operator> <call pos:start="3319:13" pos:end="3319:57"><name pos:start="3319:13" pos:end="3319:37">find_rtp_session_with_url</name><argument_list pos:start="3319:38" pos:end="3319:57">(<argument pos:start="3319:39" pos:end="3319:41"><expr pos:start="3319:39" pos:end="3319:41"><name pos:start="3319:39" pos:end="3319:41">url</name></expr></argument>, <argument pos:start="3319:44" pos:end="3319:56"><expr pos:start="3319:44" pos:end="3319:56"><name pos:start="3319:44" pos:end="3319:56"><name pos:start="3319:44" pos:end="3319:44">h</name><operator pos:start="3319:45" pos:end="3319:46">-&gt;</operator><name pos:start="3319:47" pos:end="3319:56">session_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3320:5" pos:end="3323:5"><if pos:start="3320:5" pos:end="3323:5">if <condition pos:start="3320:8" pos:end="3320:15">(<expr pos:start="3320:9" pos:end="3320:14"><operator pos:start="3320:9" pos:end="3320:9">!</operator><name pos:start="3320:10" pos:end="3320:14">rtp_c</name></expr>)</condition> <block pos:start="3320:17" pos:end="3323:5">{<block_content pos:start="3321:9" pos:end="3322:15">
        <expr_stmt pos:start="3321:9" pos:end="3321:49"><expr pos:start="3321:9" pos:end="3321:48"><call pos:start="3321:9" pos:end="3321:48"><name pos:start="3321:9" pos:end="3321:24">rtsp_reply_error</name><argument_list pos:start="3321:25" pos:end="3321:48">(<argument pos:start="3321:26" pos:end="3321:26"><expr pos:start="3321:26" pos:end="3321:26"><name pos:start="3321:26" pos:end="3321:26">c</name></expr></argument>, <argument pos:start="3321:29" pos:end="3321:47"><expr pos:start="3321:29" pos:end="3321:47"><name pos:start="3321:29" pos:end="3321:47">RTSP_STATUS_SESSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="3322:9" pos:end="3322:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="3325:5" pos:end="3330:5"><if pos:start="3325:5" pos:end="3330:5">if <condition pos:start="3325:8" pos:end="3327:40">(<expr pos:start="3325:9" pos:end="3327:39"><name pos:start="3325:9" pos:end="3325:20"><name pos:start="3325:9" pos:end="3325:13">rtp_c</name><operator pos:start="3325:14" pos:end="3325:15">-&gt;</operator><name pos:start="3325:16" pos:end="3325:20">state</name></name> <operator pos:start="3325:22" pos:end="3325:23">!=</operator> <name pos:start="3325:25" pos:end="3325:43">HTTPSTATE_SEND_DATA</name> <operator pos:start="3325:45" pos:end="3325:46">&amp;&amp;</operator>
        <name pos:start="3326:9" pos:end="3326:20"><name pos:start="3326:9" pos:end="3326:13">rtp_c</name><operator pos:start="3326:14" pos:end="3326:15">-&gt;</operator><name pos:start="3326:16" pos:end="3326:20">state</name></name> <operator pos:start="3326:22" pos:end="3326:23">!=</operator> <name pos:start="3326:25" pos:end="3326:43">HTTPSTATE_WAIT_FEED</name> <operator pos:start="3326:45" pos:end="3326:46">&amp;&amp;</operator>
        <name pos:start="3327:9" pos:end="3327:20"><name pos:start="3327:9" pos:end="3327:13">rtp_c</name><operator pos:start="3327:14" pos:end="3327:15">-&gt;</operator><name pos:start="3327:16" pos:end="3327:20">state</name></name> <operator pos:start="3327:22" pos:end="3327:23">!=</operator> <name pos:start="3327:25" pos:end="3327:39">HTTPSTATE_READY</name></expr>)</condition> <block pos:start="3327:42" pos:end="3330:5">{<block_content pos:start="3328:9" pos:end="3329:15">
        <expr_stmt pos:start="3328:9" pos:end="3328:47"><expr pos:start="3328:9" pos:end="3328:46"><call pos:start="3328:9" pos:end="3328:46"><name pos:start="3328:9" pos:end="3328:24">rtsp_reply_error</name><argument_list pos:start="3328:25" pos:end="3328:46">(<argument pos:start="3328:26" pos:end="3328:26"><expr pos:start="3328:26" pos:end="3328:26"><name pos:start="3328:26" pos:end="3328:26">c</name></expr></argument>, <argument pos:start="3328:29" pos:end="3328:45"><expr pos:start="3328:29" pos:end="3328:45"><name pos:start="3328:29" pos:end="3328:45">RTSP_STATUS_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="3329:9" pos:end="3329:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="3332:5" pos:end="3332:39"><expr pos:start="3332:5" pos:end="3332:38"><name pos:start="3332:5" pos:end="3332:16"><name pos:start="3332:5" pos:end="3332:9">rtp_c</name><operator pos:start="3332:10" pos:end="3332:11">-&gt;</operator><name pos:start="3332:12" pos:end="3332:16">state</name></name> <operator pos:start="3332:18" pos:end="3332:18">=</operator> <name pos:start="3332:20" pos:end="3332:38">HTTPSTATE_SEND_DATA</name></expr>;</expr_stmt>

    <comment type="block" pos:start="3334:5" pos:end="3334:72">/* now everything is OK, so we can send the connection parameters */</comment>
    <expr_stmt pos:start="3335:5" pos:end="3335:41"><expr pos:start="3335:5" pos:end="3335:40"><call pos:start="3335:5" pos:end="3335:40"><name pos:start="3335:5" pos:end="3335:21">rtsp_reply_header</name><argument_list pos:start="3335:22" pos:end="3335:40">(<argument pos:start="3335:23" pos:end="3335:23"><expr pos:start="3335:23" pos:end="3335:23"><name pos:start="3335:23" pos:end="3335:23">c</name></expr></argument>, <argument pos:start="3335:26" pos:end="3335:39"><expr pos:start="3335:26" pos:end="3335:39"><name pos:start="3335:26" pos:end="3335:39">RTSP_STATUS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="3336:5" pos:end="3336:20">/* session ID */</comment>
    <expr_stmt pos:start="3337:5" pos:end="3337:61"><expr pos:start="3337:5" pos:end="3337:60"><call pos:start="3337:5" pos:end="3337:60"><name pos:start="3337:5" pos:end="3337:15">avio_printf</name><argument_list pos:start="3337:16" pos:end="3337:60">(<argument pos:start="3337:17" pos:end="3337:21"><expr pos:start="3337:17" pos:end="3337:21"><name pos:start="3337:17" pos:end="3337:21"><name pos:start="3337:17" pos:end="3337:17">c</name><operator pos:start="3337:18" pos:end="3337:19">-&gt;</operator><name pos:start="3337:20" pos:end="3337:21">pb</name></name></expr></argument>, <argument pos:start="3337:24" pos:end="3337:40"><expr pos:start="3337:24" pos:end="3337:40"><literal type="string" pos:start="3337:24" pos:end="3337:40">"Session: %s\r\n"</literal></expr></argument>, <argument pos:start="3337:43" pos:end="3337:59"><expr pos:start="3337:43" pos:end="3337:59"><name pos:start="3337:43" pos:end="3337:59"><name pos:start="3337:43" pos:end="3337:47">rtp_c</name><operator pos:start="3337:48" pos:end="3337:49">-&gt;</operator><name pos:start="3337:50" pos:end="3337:59">session_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3338:5" pos:end="3338:31"><expr pos:start="3338:5" pos:end="3338:30"><call pos:start="3338:5" pos:end="3338:30"><name pos:start="3338:5" pos:end="3338:15">avio_printf</name><argument_list pos:start="3338:16" pos:end="3338:30">(<argument pos:start="3338:17" pos:end="3338:21"><expr pos:start="3338:17" pos:end="3338:21"><name pos:start="3338:17" pos:end="3338:21"><name pos:start="3338:17" pos:end="3338:17">c</name><operator pos:start="3338:18" pos:end="3338:19">-&gt;</operator><name pos:start="3338:20" pos:end="3338:21">pb</name></name></expr></argument>, <argument pos:start="3338:24" pos:end="3338:29"><expr pos:start="3338:24" pos:end="3338:29"><literal type="string" pos:start="3338:24" pos:end="3338:29">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="3341:1" pos:end="3370:1"><type pos:start="3341:1" pos:end="3341:11"><specifier pos:start="3341:1" pos:end="3341:6">static</specifier> <name pos:start="3341:8" pos:end="3341:11">void</name></type> <name pos:start="3341:13" pos:end="3341:30">rtsp_cmd_interrupt</name><parameter_list pos:start="3341:31" pos:end="3342:68">(<parameter pos:start="3341:32" pos:end="3341:45"><decl pos:start="3341:32" pos:end="3341:45"><type pos:start="3341:32" pos:end="3341:45"><name pos:start="3341:32" pos:end="3341:42">HTTPContext</name> <modifier pos:start="3341:44" pos:end="3341:44">*</modifier></type><name pos:start="3341:45" pos:end="3341:45">c</name></decl></parameter>, <parameter pos:start="3341:48" pos:end="3341:62"><decl pos:start="3341:48" pos:end="3341:62"><type pos:start="3341:48" pos:end="3341:62"><specifier pos:start="3341:48" pos:end="3341:52">const</specifier> <name pos:start="3341:54" pos:end="3341:57">char</name> <modifier pos:start="3341:59" pos:end="3341:59">*</modifier></type><name pos:start="3341:60" pos:end="3341:62">url</name></decl></parameter>,
                               <parameter pos:start="3342:32" pos:end="3342:51"><decl pos:start="3342:32" pos:end="3342:51"><type pos:start="3342:32" pos:end="3342:51"><name pos:start="3342:32" pos:end="3342:48">RTSPMessageHeader</name> <modifier pos:start="3342:50" pos:end="3342:50">*</modifier></type><name pos:start="3342:51" pos:end="3342:51">h</name></decl></parameter>, <parameter pos:start="3342:54" pos:end="3342:67"><decl pos:start="3342:54" pos:end="3342:67"><type pos:start="3342:54" pos:end="3342:67"><name pos:start="3342:54" pos:end="3342:56">int</name></type> <name pos:start="3342:58" pos:end="3342:67">pause_only</name></decl></parameter>)</parameter_list>
<block pos:start="3343:1" pos:end="3370:1">{<block_content pos:start="3344:5" pos:end="3369:32">
    <decl_stmt pos:start="3344:5" pos:end="3344:23"><decl pos:start="3344:5" pos:end="3344:22"><type pos:start="3344:5" pos:end="3344:17"><name pos:start="3344:5" pos:end="3344:15">HTTPContext</name> <modifier pos:start="3344:17" pos:end="3344:17">*</modifier></type><name pos:start="3344:18" pos:end="3344:22">rtp_c</name></decl>;</decl_stmt>

    <expr_stmt pos:start="3346:5" pos:end="3346:58"><expr pos:start="3346:5" pos:end="3346:57"><name pos:start="3346:5" pos:end="3346:9">rtp_c</name> <operator pos:start="3346:11" pos:end="3346:11">=</operator> <call pos:start="3346:13" pos:end="3346:57"><name pos:start="3346:13" pos:end="3346:37">find_rtp_session_with_url</name><argument_list pos:start="3346:38" pos:end="3346:57">(<argument pos:start="3346:39" pos:end="3346:41"><expr pos:start="3346:39" pos:end="3346:41"><name pos:start="3346:39" pos:end="3346:41">url</name></expr></argument>, <argument pos:start="3346:44" pos:end="3346:56"><expr pos:start="3346:44" pos:end="3346:56"><name pos:start="3346:44" pos:end="3346:56"><name pos:start="3346:44" pos:end="3346:44">h</name><operator pos:start="3346:45" pos:end="3346:46">-&gt;</operator><name pos:start="3346:47" pos:end="3346:56">session_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3347:5" pos:end="3350:5"><if pos:start="3347:5" pos:end="3350:5">if <condition pos:start="3347:8" pos:end="3347:15">(<expr pos:start="3347:9" pos:end="3347:14"><operator pos:start="3347:9" pos:end="3347:9">!</operator><name pos:start="3347:10" pos:end="3347:14">rtp_c</name></expr>)</condition> <block pos:start="3347:17" pos:end="3350:5">{<block_content pos:start="3348:9" pos:end="3349:15">
        <expr_stmt pos:start="3348:9" pos:end="3348:49"><expr pos:start="3348:9" pos:end="3348:48"><call pos:start="3348:9" pos:end="3348:48"><name pos:start="3348:9" pos:end="3348:24">rtsp_reply_error</name><argument_list pos:start="3348:25" pos:end="3348:48">(<argument pos:start="3348:26" pos:end="3348:26"><expr pos:start="3348:26" pos:end="3348:26"><name pos:start="3348:26" pos:end="3348:26">c</name></expr></argument>, <argument pos:start="3348:29" pos:end="3348:47"><expr pos:start="3348:29" pos:end="3348:47"><name pos:start="3348:29" pos:end="3348:47">RTSP_STATUS_SESSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="3349:9" pos:end="3349:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="3352:5" pos:end="3360:5"><if pos:start="3352:5" pos:end="3360:5">if <condition pos:start="3352:8" pos:end="3352:19">(<expr pos:start="3352:9" pos:end="3352:18"><name pos:start="3352:9" pos:end="3352:18">pause_only</name></expr>)</condition> <block pos:start="3352:21" pos:end="3360:5">{<block_content pos:start="3353:9" pos:end="3359:42">
        <if_stmt pos:start="3353:9" pos:end="3357:9"><if pos:start="3353:9" pos:end="3357:9">if <condition pos:start="3353:12" pos:end="3354:48">(<expr pos:start="3353:13" pos:end="3354:47"><name pos:start="3353:13" pos:end="3353:24"><name pos:start="3353:13" pos:end="3353:17">rtp_c</name><operator pos:start="3353:18" pos:end="3353:19">-&gt;</operator><name pos:start="3353:20" pos:end="3353:24">state</name></name> <operator pos:start="3353:26" pos:end="3353:27">!=</operator> <name pos:start="3353:29" pos:end="3353:47">HTTPSTATE_SEND_DATA</name> <operator pos:start="3353:49" pos:end="3353:50">&amp;&amp;</operator>
            <name pos:start="3354:13" pos:end="3354:24"><name pos:start="3354:13" pos:end="3354:17">rtp_c</name><operator pos:start="3354:18" pos:end="3354:19">-&gt;</operator><name pos:start="3354:20" pos:end="3354:24">state</name></name> <operator pos:start="3354:26" pos:end="3354:27">!=</operator> <name pos:start="3354:29" pos:end="3354:47">HTTPSTATE_WAIT_FEED</name></expr>)</condition> <block pos:start="3354:50" pos:end="3357:9">{<block_content pos:start="3355:13" pos:end="3356:19">
            <expr_stmt pos:start="3355:13" pos:end="3355:51"><expr pos:start="3355:13" pos:end="3355:50"><call pos:start="3355:13" pos:end="3355:50"><name pos:start="3355:13" pos:end="3355:28">rtsp_reply_error</name><argument_list pos:start="3355:29" pos:end="3355:50">(<argument pos:start="3355:30" pos:end="3355:30"><expr pos:start="3355:30" pos:end="3355:30"><name pos:start="3355:30" pos:end="3355:30">c</name></expr></argument>, <argument pos:start="3355:33" pos:end="3355:49"><expr pos:start="3355:33" pos:end="3355:49"><name pos:start="3355:33" pos:end="3355:49">RTSP_STATUS_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="3356:13" pos:end="3356:19">return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="3358:9" pos:end="3358:39"><expr pos:start="3358:9" pos:end="3358:38"><name pos:start="3358:9" pos:end="3358:20"><name pos:start="3358:9" pos:end="3358:13">rtp_c</name><operator pos:start="3358:14" pos:end="3358:15">-&gt;</operator><name pos:start="3358:16" pos:end="3358:20">state</name></name> <operator pos:start="3358:22" pos:end="3358:22">=</operator> <name pos:start="3358:24" pos:end="3358:38">HTTPSTATE_READY</name></expr>;</expr_stmt>
        <expr_stmt pos:start="3359:9" pos:end="3359:42"><expr pos:start="3359:9" pos:end="3359:41"><name pos:start="3359:9" pos:end="3359:24"><name pos:start="3359:9" pos:end="3359:13">rtp_c</name><operator pos:start="3359:14" pos:end="3359:15">-&gt;</operator><name pos:start="3359:16" pos:end="3359:24">first_pts</name></name> <operator pos:start="3359:26" pos:end="3359:26">=</operator> <name pos:start="3359:28" pos:end="3359:41">AV_NOPTS_VALUE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="3362:5" pos:end="3362:72">/* now everything is OK, so we can send the connection parameters */</comment>
    <expr_stmt pos:start="3363:5" pos:end="3363:41"><expr pos:start="3363:5" pos:end="3363:40"><call pos:start="3363:5" pos:end="3363:40"><name pos:start="3363:5" pos:end="3363:21">rtsp_reply_header</name><argument_list pos:start="3363:22" pos:end="3363:40">(<argument pos:start="3363:23" pos:end="3363:23"><expr pos:start="3363:23" pos:end="3363:23"><name pos:start="3363:23" pos:end="3363:23">c</name></expr></argument>, <argument pos:start="3363:26" pos:end="3363:39"><expr pos:start="3363:26" pos:end="3363:39"><name pos:start="3363:26" pos:end="3363:39">RTSP_STATUS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="3364:5" pos:end="3364:20">/* session ID */</comment>
    <expr_stmt pos:start="3365:5" pos:end="3365:61"><expr pos:start="3365:5" pos:end="3365:60"><call pos:start="3365:5" pos:end="3365:60"><name pos:start="3365:5" pos:end="3365:15">avio_printf</name><argument_list pos:start="3365:16" pos:end="3365:60">(<argument pos:start="3365:17" pos:end="3365:21"><expr pos:start="3365:17" pos:end="3365:21"><name pos:start="3365:17" pos:end="3365:21"><name pos:start="3365:17" pos:end="3365:17">c</name><operator pos:start="3365:18" pos:end="3365:19">-&gt;</operator><name pos:start="3365:20" pos:end="3365:21">pb</name></name></expr></argument>, <argument pos:start="3365:24" pos:end="3365:40"><expr pos:start="3365:24" pos:end="3365:40"><literal type="string" pos:start="3365:24" pos:end="3365:40">"Session: %s\r\n"</literal></expr></argument>, <argument pos:start="3365:43" pos:end="3365:59"><expr pos:start="3365:43" pos:end="3365:59"><name pos:start="3365:43" pos:end="3365:59"><name pos:start="3365:43" pos:end="3365:47">rtp_c</name><operator pos:start="3365:48" pos:end="3365:49">-&gt;</operator><name pos:start="3365:50" pos:end="3365:59">session_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3366:5" pos:end="3366:31"><expr pos:start="3366:5" pos:end="3366:30"><call pos:start="3366:5" pos:end="3366:30"><name pos:start="3366:5" pos:end="3366:15">avio_printf</name><argument_list pos:start="3366:16" pos:end="3366:30">(<argument pos:start="3366:17" pos:end="3366:21"><expr pos:start="3366:17" pos:end="3366:21"><name pos:start="3366:17" pos:end="3366:21"><name pos:start="3366:17" pos:end="3366:17">c</name><operator pos:start="3366:18" pos:end="3366:19">-&gt;</operator><name pos:start="3366:20" pos:end="3366:21">pb</name></name></expr></argument>, <argument pos:start="3366:24" pos:end="3366:29"><expr pos:start="3366:24" pos:end="3366:29"><literal type="string" pos:start="3366:24" pos:end="3366:29">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="3368:5" pos:end="3369:32"><if pos:start="3368:5" pos:end="3369:32">if <condition pos:start="3368:8" pos:end="3368:20">(<expr pos:start="3368:9" pos:end="3368:19"><operator pos:start="3368:9" pos:end="3368:9">!</operator><name pos:start="3368:10" pos:end="3368:19">pause_only</name></expr>)</condition><block type="pseudo" pos:start="3369:9" pos:end="3369:32"><block_content pos:start="3369:9" pos:end="3369:32">
        <expr_stmt pos:start="3369:9" pos:end="3369:32"><expr pos:start="3369:9" pos:end="3369:31"><call pos:start="3369:9" pos:end="3369:31"><name pos:start="3369:9" pos:end="3369:24">close_connection</name><argument_list pos:start="3369:25" pos:end="3369:31">(<argument pos:start="3369:26" pos:end="3369:30"><expr pos:start="3369:26" pos:end="3369:30"><name pos:start="3369:26" pos:end="3369:30">rtp_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="3372:1" pos:end="3372:70">/********************************************************************/</comment>
<comment type="block" pos:start="3373:1" pos:end="3373:18">/* RTP handling */</comment>

<function pos:start="3375:1" pos:end="3437:1"><type pos:start="3375:1" pos:end="3375:20"><specifier pos:start="3375:1" pos:end="3375:6">static</specifier> <name pos:start="3375:8" pos:end="3375:18">HTTPContext</name> <modifier pos:start="3375:20" pos:end="3375:20">*</modifier></type><name pos:start="3375:21" pos:end="3375:38">rtp_new_connection</name><parameter_list pos:start="3375:39" pos:end="3378:76">(<parameter pos:start="3375:40" pos:end="3375:68"><decl pos:start="3375:40" pos:end="3375:68"><type pos:start="3375:40" pos:end="3375:68"><name pos:start="3375:40" pos:end="3375:57"><name pos:start="3375:40" pos:end="3375:45">struct</name> <name pos:start="3375:47" pos:end="3375:57">sockaddr_in</name></name> <modifier pos:start="3375:59" pos:end="3375:59">*</modifier></type><name pos:start="3375:60" pos:end="3375:68">from_addr</name></decl></parameter>,
                                       <parameter pos:start="3376:40" pos:end="3376:61"><decl pos:start="3376:40" pos:end="3376:61"><type pos:start="3376:40" pos:end="3376:61"><name pos:start="3376:40" pos:end="3376:53">FFServerStream</name> <modifier pos:start="3376:55" pos:end="3376:55">*</modifier></type><name pos:start="3376:56" pos:end="3376:61">stream</name></decl></parameter>,
                                       <parameter pos:start="3377:40" pos:end="3377:61"><decl pos:start="3377:40" pos:end="3377:61"><type pos:start="3377:40" pos:end="3377:61"><specifier pos:start="3377:40" pos:end="3377:44">const</specifier> <name pos:start="3377:46" pos:end="3377:49">char</name> <modifier pos:start="3377:51" pos:end="3377:51">*</modifier></type><name pos:start="3377:52" pos:end="3377:61">session_id</name></decl></parameter>,
                                       <parameter pos:start="3378:40" pos:end="3378:75"><decl pos:start="3378:40" pos:end="3378:75"><type pos:start="3378:40" pos:end="3378:75"><name pos:start="3378:40" pos:end="3378:62"><name pos:start="3378:40" pos:end="3378:43">enum</name> <name pos:start="3378:45" pos:end="3378:62">RTSPLowerTransport</name></name></type> <name pos:start="3378:64" pos:end="3378:75">rtp_protocol</name></decl></parameter>)</parameter_list>
<block pos:start="3379:1" pos:end="3437:1">{<block_content pos:start="3380:5" pos:end="3436:16">
    <decl_stmt pos:start="3380:5" pos:end="3380:26"><decl pos:start="3380:5" pos:end="3380:25"><type pos:start="3380:5" pos:end="3380:17"><name pos:start="3380:5" pos:end="3380:15">HTTPContext</name> <modifier pos:start="3380:17" pos:end="3380:17">*</modifier></type><name pos:start="3380:18" pos:end="3380:18">c</name> <init pos:start="3380:20" pos:end="3380:25">= <expr pos:start="3380:22" pos:end="3380:25"><name pos:start="3380:22" pos:end="3380:25">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="3381:5" pos:end="3381:26"><decl pos:start="3381:5" pos:end="3381:25"><type pos:start="3381:5" pos:end="3381:16"><specifier pos:start="3381:5" pos:end="3381:9">const</specifier> <name pos:start="3381:11" pos:end="3381:14">char</name> <modifier pos:start="3381:16" pos:end="3381:16">*</modifier></type><name pos:start="3381:17" pos:end="3381:25">proto_str</name></decl>;</decl_stmt>

    <comment type="block" pos:start="3383:5" pos:end="3384:39">/* XXX: should output a warning page when coming
     * close to the connection limit */</comment>
    <if_stmt pos:start="3385:5" pos:end="3386:18"><if pos:start="3385:5" pos:end="3386:18">if <condition pos:start="3385:8" pos:end="3385:52">(<expr pos:start="3385:9" pos:end="3385:51"><name pos:start="3385:9" pos:end="3385:22">nb_connections</name> <operator pos:start="3385:24" pos:end="3385:25">&gt;=</operator> <name pos:start="3385:27" pos:end="3385:51"><name pos:start="3385:27" pos:end="3385:32">config</name><operator pos:start="3385:33" pos:end="3385:33">.</operator><name pos:start="3385:34" pos:end="3385:51">nb_max_connections</name></name></expr>)</condition><block type="pseudo" pos:start="3386:9" pos:end="3386:18"><block_content pos:start="3386:9" pos:end="3386:18">
        <goto pos:start="3386:9" pos:end="3386:18">goto <name pos:start="3386:14" pos:end="3386:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block" pos:start="3388:5" pos:end="3388:30">/* add a new connection */</comment>
    <expr_stmt pos:start="3389:5" pos:end="3389:40"><expr pos:start="3389:5" pos:end="3389:39"><name pos:start="3389:5" pos:end="3389:5">c</name> <operator pos:start="3389:7" pos:end="3389:7">=</operator> <call pos:start="3389:9" pos:end="3389:39"><name pos:start="3389:9" pos:end="3389:18">av_mallocz</name><argument_list pos:start="3389:19" pos:end="3389:39">(<argument pos:start="3389:20" pos:end="3389:38"><expr pos:start="3389:20" pos:end="3389:38"><sizeof pos:start="3389:20" pos:end="3389:38">sizeof<argument_list pos:start="3389:26" pos:end="3389:38">(<argument pos:start="3389:27" pos:end="3389:37"><expr pos:start="3389:27" pos:end="3389:37"><name pos:start="3389:27" pos:end="3389:37">HTTPContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3390:5" pos:end="3391:18"><if pos:start="3390:5" pos:end="3391:18">if <condition pos:start="3390:8" pos:end="3390:11">(<expr pos:start="3390:9" pos:end="3390:10"><operator pos:start="3390:9" pos:end="3390:9">!</operator><name pos:start="3390:10" pos:end="3390:10">c</name></expr>)</condition><block type="pseudo" pos:start="3391:9" pos:end="3391:18"><block_content pos:start="3391:9" pos:end="3391:18">
        <goto pos:start="3391:9" pos:end="3391:18">goto <name pos:start="3391:14" pos:end="3391:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt pos:start="3393:5" pos:end="3393:15"><expr pos:start="3393:5" pos:end="3393:14"><name pos:start="3393:5" pos:end="3393:9"><name pos:start="3393:5" pos:end="3393:5">c</name><operator pos:start="3393:6" pos:end="3393:7">-&gt;</operator><name pos:start="3393:8" pos:end="3393:9">fd</name></name> <operator pos:start="3393:11" pos:end="3393:11">=</operator> <operator pos:start="3393:13" pos:end="3393:13">-</operator><literal type="number" pos:start="3393:14" pos:end="3393:14">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="3394:5" pos:end="3394:25"><expr pos:start="3394:5" pos:end="3394:24"><name pos:start="3394:5" pos:end="3394:17"><name pos:start="3394:5" pos:end="3394:5">c</name><operator pos:start="3394:6" pos:end="3394:7">-&gt;</operator><name pos:start="3394:8" pos:end="3394:17">poll_entry</name></name> <operator pos:start="3394:19" pos:end="3394:19">=</operator> <name pos:start="3394:21" pos:end="3394:24">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="3395:5" pos:end="3395:30"><expr pos:start="3395:5" pos:end="3395:29"><name pos:start="3395:5" pos:end="3395:16"><name pos:start="3395:5" pos:end="3395:5">c</name><operator pos:start="3395:6" pos:end="3395:7">-&gt;</operator><name pos:start="3395:8" pos:end="3395:16">from_addr</name></name> <operator pos:start="3395:18" pos:end="3395:18">=</operator> <operator pos:start="3395:20" pos:end="3395:20">*</operator><name pos:start="3395:21" pos:end="3395:29">from_addr</name></expr>;</expr_stmt>
    <expr_stmt pos:start="3396:5" pos:end="3396:40"><expr pos:start="3396:5" pos:end="3396:39"><name pos:start="3396:5" pos:end="3396:18"><name pos:start="3396:5" pos:end="3396:5">c</name><operator pos:start="3396:6" pos:end="3396:7">-&gt;</operator><name pos:start="3396:8" pos:end="3396:18">buffer_size</name></name> <operator pos:start="3396:20" pos:end="3396:20">=</operator> <name pos:start="3396:22" pos:end="3396:39">IOBUFFER_INIT_SIZE</name></expr>;</expr_stmt>
    <expr_stmt pos:start="3397:5" pos:end="3397:42"><expr pos:start="3397:5" pos:end="3397:41"><name pos:start="3397:5" pos:end="3397:13"><name pos:start="3397:5" pos:end="3397:5">c</name><operator pos:start="3397:6" pos:end="3397:7">-&gt;</operator><name pos:start="3397:8" pos:end="3397:13">buffer</name></name> <operator pos:start="3397:15" pos:end="3397:15">=</operator> <call pos:start="3397:17" pos:end="3397:41"><name pos:start="3397:17" pos:end="3397:25">av_malloc</name><argument_list pos:start="3397:26" pos:end="3397:41">(<argument pos:start="3397:27" pos:end="3397:40"><expr pos:start="3397:27" pos:end="3397:40"><name pos:start="3397:27" pos:end="3397:40"><name pos:start="3397:27" pos:end="3397:27">c</name><operator pos:start="3397:28" pos:end="3397:29">-&gt;</operator><name pos:start="3397:30" pos:end="3397:40">buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3398:5" pos:end="3399:18"><if pos:start="3398:5" pos:end="3399:18">if <condition pos:start="3398:8" pos:end="3398:19">(<expr pos:start="3398:9" pos:end="3398:18"><operator pos:start="3398:9" pos:end="3398:9">!</operator><name pos:start="3398:10" pos:end="3398:18"><name pos:start="3398:10" pos:end="3398:10">c</name><operator pos:start="3398:11" pos:end="3398:12">-&gt;</operator><name pos:start="3398:13" pos:end="3398:18">buffer</name></name></expr>)</condition><block type="pseudo" pos:start="3399:9" pos:end="3399:18"><block_content pos:start="3399:9" pos:end="3399:18">
        <goto pos:start="3399:9" pos:end="3399:18">goto <name pos:start="3399:14" pos:end="3399:17">fail</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt pos:start="3400:5" pos:end="3400:21"><expr pos:start="3400:5" pos:end="3400:20"><name pos:start="3400:5" pos:end="3400:18">nb_connections</name><operator pos:start="3400:19" pos:end="3400:20">++</operator></expr>;</expr_stmt>
    <expr_stmt pos:start="3401:5" pos:end="3401:23"><expr pos:start="3401:5" pos:end="3401:22"><name pos:start="3401:5" pos:end="3401:13"><name pos:start="3401:5" pos:end="3401:5">c</name><operator pos:start="3401:6" pos:end="3401:7">-&gt;</operator><name pos:start="3401:8" pos:end="3401:13">stream</name></name> <operator pos:start="3401:15" pos:end="3401:15">=</operator> <name pos:start="3401:17" pos:end="3401:22">stream</name></expr>;</expr_stmt>
    <expr_stmt pos:start="3402:5" pos:end="3402:65"><expr pos:start="3402:5" pos:end="3402:64"><call pos:start="3402:5" pos:end="3402:64"><name pos:start="3402:5" pos:end="3402:14">av_strlcpy</name><argument_list pos:start="3402:15" pos:end="3402:64">(<argument pos:start="3402:16" pos:end="3402:28"><expr pos:start="3402:16" pos:end="3402:28"><name pos:start="3402:16" pos:end="3402:28"><name pos:start="3402:16" pos:end="3402:16">c</name><operator pos:start="3402:17" pos:end="3402:18">-&gt;</operator><name pos:start="3402:19" pos:end="3402:28">session_id</name></name></expr></argument>, <argument pos:start="3402:31" pos:end="3402:40"><expr pos:start="3402:31" pos:end="3402:40"><name pos:start="3402:31" pos:end="3402:40">session_id</name></expr></argument>, <argument pos:start="3402:43" pos:end="3402:63"><expr pos:start="3402:43" pos:end="3402:63"><sizeof pos:start="3402:43" pos:end="3402:63">sizeof<argument_list pos:start="3402:49" pos:end="3402:63">(<argument pos:start="3402:50" pos:end="3402:62"><expr pos:start="3402:50" pos:end="3402:62"><name pos:start="3402:50" pos:end="3402:62"><name pos:start="3402:50" pos:end="3402:50">c</name><operator pos:start="3402:51" pos:end="3402:52">-&gt;</operator><name pos:start="3402:53" pos:end="3402:62">session_id</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3403:5" pos:end="3403:31"><expr pos:start="3403:5" pos:end="3403:30"><name pos:start="3403:5" pos:end="3403:12"><name pos:start="3403:5" pos:end="3403:5">c</name><operator pos:start="3403:6" pos:end="3403:7">-&gt;</operator><name pos:start="3403:8" pos:end="3403:12">state</name></name> <operator pos:start="3403:14" pos:end="3403:14">=</operator> <name pos:start="3403:16" pos:end="3403:30">HTTPSTATE_READY</name></expr>;</expr_stmt>
    <expr_stmt pos:start="3404:5" pos:end="3404:25"><expr pos:start="3404:5" pos:end="3404:24"><name pos:start="3404:5" pos:end="3404:20"><name pos:start="3404:5" pos:end="3404:5">c</name><operator pos:start="3404:6" pos:end="3404:7">-&gt;</operator><name pos:start="3404:8" pos:end="3404:20">is_packetized</name></name> <operator pos:start="3404:22" pos:end="3404:22">=</operator> <literal type="number" pos:start="3404:24" pos:end="3404:24">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="3405:5" pos:end="3405:35"><expr pos:start="3405:5" pos:end="3405:34"><name pos:start="3405:5" pos:end="3405:19"><name pos:start="3405:5" pos:end="3405:5">c</name><operator pos:start="3405:6" pos:end="3405:7">-&gt;</operator><name pos:start="3405:8" pos:end="3405:19">rtp_protocol</name></name> <operator pos:start="3405:21" pos:end="3405:21">=</operator> <name pos:start="3405:23" pos:end="3405:34">rtp_protocol</name></expr>;</expr_stmt>

    <comment type="block" pos:start="3407:5" pos:end="3407:41">/* protocol is shown in statistics */</comment>
    <switch pos:start="3408:5" pos:end="3421:5">switch<condition pos:start="3408:11" pos:end="3408:27">(<expr pos:start="3408:12" pos:end="3408:26"><name pos:start="3408:12" pos:end="3408:26"><name pos:start="3408:12" pos:end="3408:12">c</name><operator pos:start="3408:13" pos:end="3408:14">-&gt;</operator><name pos:start="3408:15" pos:end="3408:26">rtp_protocol</name></name></expr>)</condition> <block pos:start="3408:29" pos:end="3421:5">{<block_content pos:start="3409:5" pos:end="3420:14">
    <case pos:start="3409:5" pos:end="3409:44">case <expr pos:start="3409:10" pos:end="3409:43"><name pos:start="3409:10" pos:end="3409:43">RTSP_LOWER_TRANSPORT_UDP_MULTICAST</name></expr>:</case>
        <expr_stmt pos:start="3410:9" pos:end="3410:28"><expr pos:start="3410:9" pos:end="3410:27"><name pos:start="3410:9" pos:end="3410:17">proto_str</name> <operator pos:start="3410:19" pos:end="3410:19">=</operator> <literal type="string" pos:start="3410:21" pos:end="3410:27">"MCAST"</literal></expr>;</expr_stmt>
        <break pos:start="3411:9" pos:end="3411:14">break;</break>
    <case pos:start="3412:5" pos:end="3412:34">case <expr pos:start="3412:10" pos:end="3412:33"><name pos:start="3412:10" pos:end="3412:33">RTSP_LOWER_TRANSPORT_UDP</name></expr>:</case>
        <expr_stmt pos:start="3413:9" pos:end="3413:26"><expr pos:start="3413:9" pos:end="3413:25"><name pos:start="3413:9" pos:end="3413:17">proto_str</name> <operator pos:start="3413:19" pos:end="3413:19">=</operator> <literal type="string" pos:start="3413:21" pos:end="3413:25">"UDP"</literal></expr>;</expr_stmt>
        <break pos:start="3414:9" pos:end="3414:14">break;</break>
    <case pos:start="3415:5" pos:end="3415:34">case <expr pos:start="3415:10" pos:end="3415:33"><name pos:start="3415:10" pos:end="3415:33">RTSP_LOWER_TRANSPORT_TCP</name></expr>:</case>
        <expr_stmt pos:start="3416:9" pos:end="3416:26"><expr pos:start="3416:9" pos:end="3416:25"><name pos:start="3416:9" pos:end="3416:17">proto_str</name> <operator pos:start="3416:19" pos:end="3416:19">=</operator> <literal type="string" pos:start="3416:21" pos:end="3416:25">"TCP"</literal></expr>;</expr_stmt>
        <break pos:start="3417:9" pos:end="3417:14">break;</break>
    <default pos:start="3418:5" pos:end="3418:12">default:</default>
        <expr_stmt pos:start="3419:9" pos:end="3419:26"><expr pos:start="3419:9" pos:end="3419:25"><name pos:start="3419:9" pos:end="3419:17">proto_str</name> <operator pos:start="3419:19" pos:end="3419:19">=</operator> <literal type="string" pos:start="3419:21" pos:end="3419:25">"???"</literal></expr>;</expr_stmt>
        <break pos:start="3420:9" pos:end="3420:14">break;</break>
    </block_content>}</block></switch>
    <expr_stmt pos:start="3422:5" pos:end="3422:57"><expr pos:start="3422:5" pos:end="3422:56"><call pos:start="3422:5" pos:end="3422:56"><name pos:start="3422:5" pos:end="3422:14">av_strlcpy</name><argument_list pos:start="3422:15" pos:end="3422:56">(<argument pos:start="3422:16" pos:end="3422:26"><expr pos:start="3422:16" pos:end="3422:26"><name pos:start="3422:16" pos:end="3422:26"><name pos:start="3422:16" pos:end="3422:16">c</name><operator pos:start="3422:17" pos:end="3422:18">-&gt;</operator><name pos:start="3422:19" pos:end="3422:26">protocol</name></name></expr></argument>, <argument pos:start="3422:29" pos:end="3422:34"><expr pos:start="3422:29" pos:end="3422:34"><literal type="string" pos:start="3422:29" pos:end="3422:34">"RTP/"</literal></expr></argument>, <argument pos:start="3422:37" pos:end="3422:55"><expr pos:start="3422:37" pos:end="3422:55"><sizeof pos:start="3422:37" pos:end="3422:55">sizeof<argument_list pos:start="3422:43" pos:end="3422:55">(<argument pos:start="3422:44" pos:end="3422:54"><expr pos:start="3422:44" pos:end="3422:54"><name pos:start="3422:44" pos:end="3422:54"><name pos:start="3422:44" pos:end="3422:44">c</name><operator pos:start="3422:45" pos:end="3422:46">-&gt;</operator><name pos:start="3422:47" pos:end="3422:54">protocol</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3423:5" pos:end="3423:60"><expr pos:start="3423:5" pos:end="3423:59"><call pos:start="3423:5" pos:end="3423:59"><name pos:start="3423:5" pos:end="3423:14">av_strlcat</name><argument_list pos:start="3423:15" pos:end="3423:59">(<argument pos:start="3423:16" pos:end="3423:26"><expr pos:start="3423:16" pos:end="3423:26"><name pos:start="3423:16" pos:end="3423:26"><name pos:start="3423:16" pos:end="3423:16">c</name><operator pos:start="3423:17" pos:end="3423:18">-&gt;</operator><name pos:start="3423:19" pos:end="3423:26">protocol</name></name></expr></argument>, <argument pos:start="3423:29" pos:end="3423:37"><expr pos:start="3423:29" pos:end="3423:37"><name pos:start="3423:29" pos:end="3423:37">proto_str</name></expr></argument>, <argument pos:start="3423:40" pos:end="3423:58"><expr pos:start="3423:40" pos:end="3423:58"><sizeof pos:start="3423:40" pos:end="3423:58">sizeof<argument_list pos:start="3423:46" pos:end="3423:58">(<argument pos:start="3423:47" pos:end="3423:57"><expr pos:start="3423:47" pos:end="3423:57"><name pos:start="3423:47" pos:end="3423:57"><name pos:start="3423:47" pos:end="3423:47">c</name><operator pos:start="3423:48" pos:end="3423:49">-&gt;</operator><name pos:start="3423:50" pos:end="3423:57">protocol</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="3425:5" pos:end="3425:43"><expr pos:start="3425:5" pos:end="3425:42"><name pos:start="3425:5" pos:end="3425:21">current_bandwidth</name> <operator pos:start="3425:23" pos:end="3425:24">+=</operator> <name pos:start="3425:26" pos:end="3425:42"><name pos:start="3425:26" pos:end="3425:31">stream</name><operator pos:start="3425:32" pos:end="3425:33">-&gt;</operator><name pos:start="3425:34" pos:end="3425:42">bandwidth</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="3427:5" pos:end="3427:29"><expr pos:start="3427:5" pos:end="3427:28"><name pos:start="3427:5" pos:end="3427:11"><name pos:start="3427:5" pos:end="3427:5">c</name><operator pos:start="3427:6" pos:end="3427:7">-&gt;</operator><name pos:start="3427:8" pos:end="3427:11">next</name></name> <operator pos:start="3427:13" pos:end="3427:13">=</operator> <name pos:start="3427:15" pos:end="3427:28">first_http_ctx</name></expr>;</expr_stmt>
    <expr_stmt pos:start="3428:5" pos:end="3428:23"><expr pos:start="3428:5" pos:end="3428:22"><name pos:start="3428:5" pos:end="3428:18">first_http_ctx</name> <operator pos:start="3428:20" pos:end="3428:20">=</operator> <name pos:start="3428:22" pos:end="3428:22">c</name></expr>;</expr_stmt>
    <return pos:start="3429:5" pos:end="3429:13">return <expr pos:start="3429:12" pos:end="3429:12"><name pos:start="3429:12" pos:end="3429:12">c</name></expr>;</return>

 <label pos:start="3431:2" pos:end="3431:6"><name pos:start="3431:2" pos:end="3431:5">fail</name>:</label>
    <if_stmt pos:start="3432:5" pos:end="3435:5"><if pos:start="3432:5" pos:end="3435:5">if <condition pos:start="3432:8" pos:end="3432:10">(<expr pos:start="3432:9" pos:end="3432:9"><name pos:start="3432:9" pos:end="3432:9">c</name></expr>)</condition> <block pos:start="3432:12" pos:end="3435:5">{<block_content pos:start="3433:9" pos:end="3434:19">
        <expr_stmt pos:start="3433:9" pos:end="3433:29"><expr pos:start="3433:9" pos:end="3433:28"><call pos:start="3433:9" pos:end="3433:28"><name pos:start="3433:9" pos:end="3433:16">av_freep</name><argument_list pos:start="3433:17" pos:end="3433:28">(<argument pos:start="3433:18" pos:end="3433:27"><expr pos:start="3433:18" pos:end="3433:27"><operator pos:start="3433:18" pos:end="3433:18">&amp;</operator><name pos:start="3433:19" pos:end="3433:27"><name pos:start="3433:19" pos:end="3433:19">c</name><operator pos:start="3433:20" pos:end="3433:21">-&gt;</operator><name pos:start="3433:22" pos:end="3433:27">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3434:9" pos:end="3434:19"><expr pos:start="3434:9" pos:end="3434:18"><call pos:start="3434:9" pos:end="3434:18"><name pos:start="3434:9" pos:end="3434:15">av_free</name><argument_list pos:start="3434:16" pos:end="3434:18">(<argument pos:start="3434:17" pos:end="3434:17"><expr pos:start="3434:17" pos:end="3434:17"><name pos:start="3434:17" pos:end="3434:17">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return pos:start="3436:5" pos:end="3436:16">return <expr pos:start="3436:12" pos:end="3436:15"><name pos:start="3436:12" pos:end="3436:15">NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="3439:1" pos:end="3443:3">/**
 * add a new RTP stream in an RTP connection (used in RTSP SETUP
 * command). If RTP/TCP protocol is used, TCP connection 'rtsp_c' is
 * used.
 */</comment>
<function pos:start="3444:1" pos:end="3537:1"><type pos:start="3444:1" pos:end="3444:10"><specifier pos:start="3444:1" pos:end="3444:6">static</specifier> <name pos:start="3444:8" pos:end="3444:10">int</name></type> <name pos:start="3444:12" pos:end="3444:28">rtp_new_av_stream</name><parameter_list pos:start="3444:29" pos:end="3446:49">(<parameter pos:start="3444:30" pos:end="3444:43"><decl pos:start="3444:30" pos:end="3444:43"><type pos:start="3444:30" pos:end="3444:43"><name pos:start="3444:30" pos:end="3444:40">HTTPContext</name> <modifier pos:start="3444:42" pos:end="3444:42">*</modifier></type><name pos:start="3444:43" pos:end="3444:43">c</name></decl></parameter>,
                             <parameter pos:start="3445:30" pos:end="3445:45"><decl pos:start="3445:30" pos:end="3445:45"><type pos:start="3445:30" pos:end="3445:45"><name pos:start="3445:30" pos:end="3445:32">int</name></type> <name pos:start="3445:34" pos:end="3445:45">stream_index</name></decl></parameter>, <parameter pos:start="3445:48" pos:end="3445:76"><decl pos:start="3445:48" pos:end="3445:76"><type pos:start="3445:48" pos:end="3445:76"><name pos:start="3445:48" pos:end="3445:65"><name pos:start="3445:48" pos:end="3445:53">struct</name> <name pos:start="3445:55" pos:end="3445:65">sockaddr_in</name></name> <modifier pos:start="3445:67" pos:end="3445:67">*</modifier></type><name pos:start="3445:68" pos:end="3445:76">dest_addr</name></decl></parameter>,
                             <parameter pos:start="3446:30" pos:end="3446:48"><decl pos:start="3446:30" pos:end="3446:48"><type pos:start="3446:30" pos:end="3446:48"><name pos:start="3446:30" pos:end="3446:40">HTTPContext</name> <modifier pos:start="3446:42" pos:end="3446:42">*</modifier></type><name pos:start="3446:43" pos:end="3446:48">rtsp_c</name></decl></parameter>)</parameter_list>
<block pos:start="3447:1" pos:end="3537:1">{<block_content pos:start="3448:5" pos:end="3536:13">
    <decl_stmt pos:start="3448:5" pos:end="3448:25"><decl pos:start="3448:5" pos:end="3448:24"><type pos:start="3448:5" pos:end="3448:21"><name pos:start="3448:5" pos:end="3448:19">AVFormatContext</name> <modifier pos:start="3448:21" pos:end="3448:21">*</modifier></type><name pos:start="3448:22" pos:end="3448:24">ctx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3449:5" pos:end="3449:17"><decl pos:start="3449:5" pos:end="3449:16"><type pos:start="3449:5" pos:end="3449:14"><name pos:start="3449:5" pos:end="3449:12">AVStream</name> <modifier pos:start="3449:14" pos:end="3449:14">*</modifier></type><name pos:start="3449:15" pos:end="3449:16">st</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3450:5" pos:end="3450:17"><decl pos:start="3450:5" pos:end="3450:16"><type pos:start="3450:5" pos:end="3450:10"><name pos:start="3450:5" pos:end="3450:8">char</name> <modifier pos:start="3450:10" pos:end="3450:10">*</modifier></type><name pos:start="3450:11" pos:end="3450:16">ipaddr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3451:5" pos:end="3451:25"><decl pos:start="3451:5" pos:end="3451:24"><type pos:start="3451:5" pos:end="3451:16"><name pos:start="3451:5" pos:end="3451:14">URLContext</name> <modifier pos:start="3451:16" pos:end="3451:16">*</modifier></type><name pos:start="3451:17" pos:end="3451:17">h</name> <init pos:start="3451:19" pos:end="3451:24">= <expr pos:start="3451:21" pos:end="3451:24"><name pos:start="3451:21" pos:end="3451:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="3452:5" pos:end="3452:23"><decl pos:start="3452:5" pos:end="3452:22"><type pos:start="3452:5" pos:end="3452:13"><name pos:start="3452:5" pos:end="3452:11">uint8_t</name> <modifier pos:start="3452:13" pos:end="3452:13">*</modifier></type><name pos:start="3452:14" pos:end="3452:22">dummy_buf</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3453:5" pos:end="3453:24"><decl pos:start="3453:5" pos:end="3453:23"><type pos:start="3453:5" pos:end="3453:7"><name pos:start="3453:5" pos:end="3453:7">int</name></type> <name pos:start="3453:9" pos:end="3453:23">max_packet_size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3454:5" pos:end="3454:22"><decl pos:start="3454:5" pos:end="3454:21"><type pos:start="3454:5" pos:end="3454:10"><name pos:start="3454:5" pos:end="3454:8">void</name> <modifier pos:start="3454:10" pos:end="3454:10">*</modifier></type><name pos:start="3454:11" pos:end="3454:21">st_internal</name></decl>;</decl_stmt>

    <comment type="block" pos:start="3456:5" pos:end="3456:52">/* now we can open the relevant output stream */</comment>
    <expr_stmt pos:start="3457:5" pos:end="3457:35"><expr pos:start="3457:5" pos:end="3457:34"><name pos:start="3457:5" pos:end="3457:7">ctx</name> <operator pos:start="3457:9" pos:end="3457:9">=</operator> <call pos:start="3457:11" pos:end="3457:34"><name pos:start="3457:11" pos:end="3457:32">avformat_alloc_context</name><argument_list pos:start="3457:33" pos:end="3457:34">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3458:5" pos:end="3459:18"><if pos:start="3458:5" pos:end="3459:18">if <condition pos:start="3458:8" pos:end="3458:13">(<expr pos:start="3458:9" pos:end="3458:12"><operator pos:start="3458:9" pos:end="3458:9">!</operator><name pos:start="3458:10" pos:end="3458:12">ctx</name></expr>)</condition><block type="pseudo" pos:start="3459:9" pos:end="3459:18"><block_content pos:start="3459:9" pos:end="3459:18">
        <return pos:start="3459:9" pos:end="3459:18">return <expr pos:start="3459:16" pos:end="3459:17"><operator pos:start="3459:16" pos:end="3459:16">-</operator><literal type="number" pos:start="3459:17" pos:end="3459:17">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="3460:5" pos:end="3460:54"><expr pos:start="3460:5" pos:end="3460:53"><name pos:start="3460:5" pos:end="3460:16"><name pos:start="3460:5" pos:end="3460:7">ctx</name><operator pos:start="3460:8" pos:end="3460:9">-&gt;</operator><name pos:start="3460:10" pos:end="3460:16">oformat</name></name> <operator pos:start="3460:18" pos:end="3460:18">=</operator> <call pos:start="3460:20" pos:end="3460:53"><name pos:start="3460:20" pos:end="3460:34">av_guess_format</name><argument_list pos:start="3460:35" pos:end="3460:53">(<argument pos:start="3460:36" pos:end="3460:40"><expr pos:start="3460:36" pos:end="3460:40"><literal type="string" pos:start="3460:36" pos:end="3460:40">"rtp"</literal></expr></argument>, <argument pos:start="3460:43" pos:end="3460:46"><expr pos:start="3460:43" pos:end="3460:46"><name pos:start="3460:43" pos:end="3460:46">NULL</name></expr></argument>, <argument pos:start="3460:49" pos:end="3460:52"><expr pos:start="3460:49" pos:end="3460:52"><name pos:start="3460:49" pos:end="3460:52">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="3462:5" pos:end="3462:40"><expr pos:start="3462:5" pos:end="3462:39"><name pos:start="3462:5" pos:end="3462:6">st</name> <operator pos:start="3462:8" pos:end="3462:8">=</operator> <call pos:start="3462:10" pos:end="3462:39"><name pos:start="3462:10" pos:end="3462:28">avformat_new_stream</name><argument_list pos:start="3462:29" pos:end="3462:39">(<argument pos:start="3462:30" pos:end="3462:32"><expr pos:start="3462:30" pos:end="3462:32"><name pos:start="3462:30" pos:end="3462:32">ctx</name></expr></argument>, <argument pos:start="3462:35" pos:end="3462:38"><expr pos:start="3462:35" pos:end="3462:38"><name pos:start="3462:35" pos:end="3462:38">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3463:5" pos:end="3464:18"><if pos:start="3463:5" pos:end="3464:18">if <condition pos:start="3463:8" pos:end="3463:12">(<expr pos:start="3463:9" pos:end="3463:11"><operator pos:start="3463:9" pos:end="3463:9">!</operator><name pos:start="3463:10" pos:end="3463:11">st</name></expr>)</condition><block type="pseudo" pos:start="3464:9" pos:end="3464:18"><block_content pos:start="3464:9" pos:end="3464:18">
        <goto pos:start="3464:9" pos:end="3464:18">goto <name pos:start="3464:14" pos:end="3464:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt pos:start="3466:5" pos:end="3466:31"><expr pos:start="3466:5" pos:end="3466:30"><name pos:start="3466:5" pos:end="3466:15">st_internal</name> <operator pos:start="3466:17" pos:end="3466:17">=</operator> <name pos:start="3466:19" pos:end="3466:30"><name pos:start="3466:19" pos:end="3466:20">st</name><operator pos:start="3466:21" pos:end="3466:22">-&gt;</operator><name pos:start="3466:23" pos:end="3466:30">internal</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="3468:5" pos:end="3473:80"><if pos:start="3468:5" pos:end="3470:61">if <condition pos:start="3468:8" pos:end="3469:37">(<expr pos:start="3468:9" pos:end="3469:36"><operator pos:start="3468:9" pos:end="3468:9">!</operator><name pos:start="3468:10" pos:end="3468:24"><name pos:start="3468:10" pos:end="3468:10">c</name><operator pos:start="3468:11" pos:end="3468:12">-&gt;</operator><name pos:start="3468:13" pos:end="3468:18">stream</name><operator pos:start="3468:19" pos:end="3468:20">-&gt;</operator><name pos:start="3468:21" pos:end="3468:24">feed</name></name> <operator pos:start="3468:26" pos:end="3468:27">||</operator>
        <name pos:start="3469:9" pos:end="3469:23"><name pos:start="3469:9" pos:end="3469:9">c</name><operator pos:start="3469:10" pos:end="3469:11">-&gt;</operator><name pos:start="3469:12" pos:end="3469:17">stream</name><operator pos:start="3469:18" pos:end="3469:19">-&gt;</operator><name pos:start="3469:20" pos:end="3469:23">feed</name></name> <operator pos:start="3469:25" pos:end="3469:26">==</operator> <name pos:start="3469:28" pos:end="3469:36"><name pos:start="3469:28" pos:end="3469:28">c</name><operator pos:start="3469:29" pos:end="3469:30">-&gt;</operator><name pos:start="3469:31" pos:end="3469:36">stream</name></name></expr>)</condition><block type="pseudo" pos:start="3470:9" pos:end="3470:61"><block_content pos:start="3470:9" pos:end="3470:61">
        <expr_stmt pos:start="3470:9" pos:end="3470:61"><expr pos:start="3470:9" pos:end="3470:60"><call pos:start="3470:9" pos:end="3470:60"><name pos:start="3470:9" pos:end="3470:22">unlayer_stream</name><argument_list pos:start="3470:23" pos:end="3470:60">(<argument pos:start="3470:24" pos:end="3470:25"><expr pos:start="3470:24" pos:end="3470:25"><name pos:start="3470:24" pos:end="3470:25">st</name></expr></argument>, <argument pos:start="3470:28" pos:end="3470:59"><expr pos:start="3470:28" pos:end="3470:59"><name pos:start="3470:28" pos:end="3470:59"><name pos:start="3470:28" pos:end="3470:28">c</name><operator pos:start="3470:29" pos:end="3470:30">-&gt;</operator><name pos:start="3470:31" pos:end="3470:36">stream</name><operator pos:start="3470:37" pos:end="3470:38">-&gt;</operator><name pos:start="3470:39" pos:end="3470:45">streams</name><index pos:start="3470:46" pos:end="3470:59">[<expr pos:start="3470:47" pos:end="3470:58"><name pos:start="3470:47" pos:end="3470:58">stream_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else pos:start="3471:5" pos:end="3473:80">else<block type="pseudo" pos:start="3472:9" pos:end="3473:80"><block_content pos:start="3472:9" pos:end="3473:80">
        <expr_stmt pos:start="3472:9" pos:end="3473:80"><expr pos:start="3472:9" pos:end="3473:79"><call pos:start="3472:9" pos:end="3473:79"><name pos:start="3472:9" pos:end="3472:22">unlayer_stream</name><argument_list pos:start="3472:23" pos:end="3473:79">(<argument pos:start="3472:24" pos:end="3472:25"><expr pos:start="3472:24" pos:end="3472:25"><name pos:start="3472:24" pos:end="3472:25">st</name></expr></argument>,
               <argument pos:start="3473:16" pos:end="3473:78"><expr pos:start="3473:16" pos:end="3473:78"><name pos:start="3473:16" pos:end="3473:78"><name pos:start="3473:16" pos:end="3473:16">c</name><operator pos:start="3473:17" pos:end="3473:18">-&gt;</operator><name pos:start="3473:19" pos:end="3473:24">stream</name><operator pos:start="3473:25" pos:end="3473:26">-&gt;</operator><name pos:start="3473:27" pos:end="3473:30">feed</name><operator pos:start="3473:31" pos:end="3473:32">-&gt;</operator><name pos:start="3473:33" pos:end="3473:39">streams</name><index pos:start="3473:40" pos:end="3473:78">[<expr pos:start="3473:41" pos:end="3473:77"><name pos:start="3473:41" pos:end="3473:77"><name pos:start="3473:41" pos:end="3473:41">c</name><operator pos:start="3473:42" pos:end="3473:43">-&gt;</operator><name pos:start="3473:44" pos:end="3473:49">stream</name><operator pos:start="3473:50" pos:end="3473:51">-&gt;</operator><name pos:start="3473:52" pos:end="3473:63">feed_streams</name><index pos:start="3473:64" pos:end="3473:77">[<expr pos:start="3473:65" pos:end="3473:76"><name pos:start="3473:65" pos:end="3473:76">stream_index</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt pos:start="3474:5" pos:end="3474:38"><expr pos:start="3474:5" pos:end="3474:37"><call pos:start="3474:5" pos:end="3474:37"><name pos:start="3474:5" pos:end="3474:14">av_assert0</name><argument_list pos:start="3474:15" pos:end="3474:37">(<argument pos:start="3474:16" pos:end="3474:36"><expr pos:start="3474:16" pos:end="3474:36"><name pos:start="3474:16" pos:end="3474:28"><name pos:start="3474:16" pos:end="3474:17">st</name><operator pos:start="3474:18" pos:end="3474:19">-&gt;</operator><name pos:start="3474:20" pos:end="3474:28">priv_data</name></name> <operator pos:start="3474:30" pos:end="3474:31">==</operator> <name pos:start="3474:33" pos:end="3474:36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3475:5" pos:end="3475:44"><expr pos:start="3475:5" pos:end="3475:43"><call pos:start="3475:5" pos:end="3475:43"><name pos:start="3475:5" pos:end="3475:14">av_assert0</name><argument_list pos:start="3475:15" pos:end="3475:43">(<argument pos:start="3475:16" pos:end="3475:42"><expr pos:start="3475:16" pos:end="3475:42"><name pos:start="3475:16" pos:end="3475:27"><name pos:start="3475:16" pos:end="3475:17">st</name><operator pos:start="3475:18" pos:end="3475:19">-&gt;</operator><name pos:start="3475:20" pos:end="3475:27">internal</name></name> <operator pos:start="3475:29" pos:end="3475:30">==</operator> <name pos:start="3475:32" pos:end="3475:42">st_internal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="3477:5" pos:end="3477:39">/* build destination RTP address */</comment>
    <expr_stmt pos:start="3478:5" pos:end="3478:44"><expr pos:start="3478:5" pos:end="3478:43"><name pos:start="3478:5" pos:end="3478:10">ipaddr</name> <operator pos:start="3478:12" pos:end="3478:12">=</operator> <call pos:start="3478:14" pos:end="3478:43"><name pos:start="3478:14" pos:end="3478:22">inet_ntoa</name><argument_list pos:start="3478:23" pos:end="3478:43">(<argument pos:start="3478:24" pos:end="3478:42"><expr pos:start="3478:24" pos:end="3478:42"><name pos:start="3478:24" pos:end="3478:42"><name pos:start="3478:24" pos:end="3478:32">dest_addr</name><operator pos:start="3478:33" pos:end="3478:34">-&gt;</operator><name pos:start="3478:35" pos:end="3478:42">sin_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="3480:5" pos:end="3511:5">switch<condition pos:start="3480:11" pos:end="3480:27">(<expr pos:start="3480:12" pos:end="3480:26"><name pos:start="3480:12" pos:end="3480:26"><name pos:start="3480:12" pos:end="3480:12">c</name><operator pos:start="3480:13" pos:end="3480:14">-&gt;</operator><name pos:start="3480:15" pos:end="3480:26">rtp_protocol</name></name></expr>)</condition> <block pos:start="3480:29" pos:end="3511:5">{<block_content pos:start="3481:5" pos:end="3510:18">
    <case pos:start="3481:5" pos:end="3481:34">case <expr pos:start="3481:10" pos:end="3481:33"><name pos:start="3481:10" pos:end="3481:33">RTSP_LOWER_TRANSPORT_UDP</name></expr>:</case>
    <case pos:start="3482:5" pos:end="3482:44">case <expr pos:start="3482:10" pos:end="3482:43"><name pos:start="3482:10" pos:end="3482:43">RTSP_LOWER_TRANSPORT_UDP_MULTICAST</name></expr>:</case>
        <comment type="block" pos:start="3483:9" pos:end="3483:26">/* RTP/UDP case */</comment>

        <comment type="block" pos:start="3485:9" pos:end="3485:55">/* XXX: also pass as parameter to function ? */</comment>
        <if_stmt pos:start="3486:9" pos:end="3497:9"><if pos:start="3486:9" pos:end="3494:9">if <condition pos:start="3486:12" pos:end="3486:36">(<expr pos:start="3486:13" pos:end="3486:35"><name pos:start="3486:13" pos:end="3486:35"><name pos:start="3486:13" pos:end="3486:13">c</name><operator pos:start="3486:14" pos:end="3486:15">-&gt;</operator><name pos:start="3486:16" pos:end="3486:21">stream</name><operator pos:start="3486:22" pos:end="3486:23">-&gt;</operator><name pos:start="3486:24" pos:end="3486:35">is_multicast</name></name></expr>)</condition> <block pos:start="3486:38" pos:end="3494:9">{<block_content pos:start="3487:13" pos:end="3493:62">
            <decl_stmt pos:start="3487:13" pos:end="3487:20"><decl pos:start="3487:13" pos:end="3487:19"><type pos:start="3487:13" pos:end="3487:15"><name pos:start="3487:13" pos:end="3487:15">int</name></type> <name pos:start="3487:17" pos:end="3487:19">ttl</name></decl>;</decl_stmt>
            <expr_stmt pos:start="3488:13" pos:end="3488:43"><expr pos:start="3488:13" pos:end="3488:42"><name pos:start="3488:13" pos:end="3488:15">ttl</name> <operator pos:start="3488:17" pos:end="3488:17">=</operator> <name pos:start="3488:19" pos:end="3488:42"><name pos:start="3488:19" pos:end="3488:19">c</name><operator pos:start="3488:20" pos:end="3488:21">-&gt;</operator><name pos:start="3488:22" pos:end="3488:27">stream</name><operator pos:start="3488:28" pos:end="3488:29">-&gt;</operator><name pos:start="3488:30" pos:end="3488:42">multicast_ttl</name></name></expr>;</expr_stmt>
            <if_stmt pos:start="3489:13" pos:end="3490:25"><if pos:start="3489:13" pos:end="3490:25">if <condition pos:start="3489:16" pos:end="3489:21">(<expr pos:start="3489:17" pos:end="3489:20"><operator pos:start="3489:17" pos:end="3489:17">!</operator><name pos:start="3489:18" pos:end="3489:20">ttl</name></expr>)</condition><block type="pseudo" pos:start="3490:17" pos:end="3490:25"><block_content pos:start="3490:17" pos:end="3490:25">
                <expr_stmt pos:start="3490:17" pos:end="3490:25"><expr pos:start="3490:17" pos:end="3490:24"><name pos:start="3490:17" pos:end="3490:19">ttl</name> <operator pos:start="3490:21" pos:end="3490:21">=</operator> <literal type="number" pos:start="3490:23" pos:end="3490:24">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="3491:13" pos:end="3493:62"><expr pos:start="3491:13" pos:end="3493:61"><call pos:start="3491:13" pos:end="3493:61"><name pos:start="3491:13" pos:end="3491:20">snprintf</name><argument_list pos:start="3491:21" pos:end="3493:61">(<argument pos:start="3491:22" pos:end="3491:34"><expr pos:start="3491:22" pos:end="3491:34"><name pos:start="3491:22" pos:end="3491:34"><name pos:start="3491:22" pos:end="3491:24">ctx</name><operator pos:start="3491:25" pos:end="3491:26">-&gt;</operator><name pos:start="3491:27" pos:end="3491:34">filename</name></name></expr></argument>, <argument pos:start="3491:37" pos:end="3491:57"><expr pos:start="3491:37" pos:end="3491:57"><sizeof pos:start="3491:37" pos:end="3491:57">sizeof<argument_list pos:start="3491:43" pos:end="3491:57">(<argument pos:start="3491:44" pos:end="3491:56"><expr pos:start="3491:44" pos:end="3491:56"><name pos:start="3491:44" pos:end="3491:56"><name pos:start="3491:44" pos:end="3491:46">ctx</name><operator pos:start="3491:47" pos:end="3491:48">-&gt;</operator><name pos:start="3491:49" pos:end="3491:56">filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
                     <argument pos:start="3492:22" pos:end="3492:53"><expr pos:start="3492:22" pos:end="3492:53"><literal type="string" pos:start="3492:22" pos:end="3492:53">"rtp://%s:%d?multicast=1&amp;ttl=%d"</literal></expr></argument>,
                     <argument pos:start="3493:22" pos:end="3493:27"><expr pos:start="3493:22" pos:end="3493:27"><name pos:start="3493:22" pos:end="3493:27">ipaddr</name></expr></argument>, <argument pos:start="3493:30" pos:end="3493:55"><expr pos:start="3493:30" pos:end="3493:55"><call pos:start="3493:30" pos:end="3493:55"><name pos:start="3493:30" pos:end="3493:34">ntohs</name><argument_list pos:start="3493:35" pos:end="3493:55">(<argument pos:start="3493:36" pos:end="3493:54"><expr pos:start="3493:36" pos:end="3493:54"><name pos:start="3493:36" pos:end="3493:54"><name pos:start="3493:36" pos:end="3493:44">dest_addr</name><operator pos:start="3493:45" pos:end="3493:46">-&gt;</operator><name pos:start="3493:47" pos:end="3493:54">sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="3493:58" pos:end="3493:60"><expr pos:start="3493:58" pos:end="3493:60"><name pos:start="3493:58" pos:end="3493:60">ttl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="3494:11" pos:end="3497:9">else <block pos:start="3494:16" pos:end="3497:9">{<block_content pos:start="3495:13" pos:end="3496:72">
            <expr_stmt pos:start="3495:13" pos:end="3496:72"><expr pos:start="3495:13" pos:end="3496:71"><call pos:start="3495:13" pos:end="3496:71"><name pos:start="3495:13" pos:end="3495:20">snprintf</name><argument_list pos:start="3495:21" pos:end="3496:71">(<argument pos:start="3495:22" pos:end="3495:34"><expr pos:start="3495:22" pos:end="3495:34"><name pos:start="3495:22" pos:end="3495:34"><name pos:start="3495:22" pos:end="3495:24">ctx</name><operator pos:start="3495:25" pos:end="3495:26">-&gt;</operator><name pos:start="3495:27" pos:end="3495:34">filename</name></name></expr></argument>, <argument pos:start="3495:37" pos:end="3495:57"><expr pos:start="3495:37" pos:end="3495:57"><sizeof pos:start="3495:37" pos:end="3495:57">sizeof<argument_list pos:start="3495:43" pos:end="3495:57">(<argument pos:start="3495:44" pos:end="3495:56"><expr pos:start="3495:44" pos:end="3495:56"><name pos:start="3495:44" pos:end="3495:56"><name pos:start="3495:44" pos:end="3495:46">ctx</name><operator pos:start="3495:47" pos:end="3495:48">-&gt;</operator><name pos:start="3495:49" pos:end="3495:56">filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
                     <argument pos:start="3496:22" pos:end="3496:34"><expr pos:start="3496:22" pos:end="3496:34"><literal type="string" pos:start="3496:22" pos:end="3496:34">"rtp://%s:%d"</literal></expr></argument>, <argument pos:start="3496:37" pos:end="3496:42"><expr pos:start="3496:37" pos:end="3496:42"><name pos:start="3496:37" pos:end="3496:42">ipaddr</name></expr></argument>, <argument pos:start="3496:45" pos:end="3496:70"><expr pos:start="3496:45" pos:end="3496:70"><call pos:start="3496:45" pos:end="3496:70"><name pos:start="3496:45" pos:end="3496:49">ntohs</name><argument_list pos:start="3496:50" pos:end="3496:70">(<argument pos:start="3496:51" pos:end="3496:69"><expr pos:start="3496:51" pos:end="3496:69"><name pos:start="3496:51" pos:end="3496:69"><name pos:start="3496:51" pos:end="3496:59">dest_addr</name><operator pos:start="3496:60" pos:end="3496:61">-&gt;</operator><name pos:start="3496:62" pos:end="3496:69">sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="3499:9" pos:end="3500:22"><if pos:start="3499:9" pos:end="3500:22">if <condition pos:start="3499:12" pos:end="3499:75">(<expr pos:start="3499:13" pos:end="3499:74"><call pos:start="3499:13" pos:end="3499:70"><name pos:start="3499:13" pos:end="3499:22">ffurl_open</name><argument_list pos:start="3499:23" pos:end="3499:70">(<argument pos:start="3499:24" pos:end="3499:25"><expr pos:start="3499:24" pos:end="3499:25"><operator pos:start="3499:24" pos:end="3499:24">&amp;</operator><name pos:start="3499:25" pos:end="3499:25">h</name></expr></argument>, <argument pos:start="3499:28" pos:end="3499:40"><expr pos:start="3499:28" pos:end="3499:40"><name pos:start="3499:28" pos:end="3499:40"><name pos:start="3499:28" pos:end="3499:30">ctx</name><operator pos:start="3499:31" pos:end="3499:32">-&gt;</operator><name pos:start="3499:33" pos:end="3499:40">filename</name></name></expr></argument>, <argument pos:start="3499:43" pos:end="3499:57"><expr pos:start="3499:43" pos:end="3499:57"><name pos:start="3499:43" pos:end="3499:57">AVIO_FLAG_WRITE</name></expr></argument>, <argument pos:start="3499:60" pos:end="3499:63"><expr pos:start="3499:60" pos:end="3499:63"><name pos:start="3499:60" pos:end="3499:63">NULL</name></expr></argument>, <argument pos:start="3499:66" pos:end="3499:69"><expr pos:start="3499:66" pos:end="3499:69"><name pos:start="3499:66" pos:end="3499:69">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="3499:72" pos:end="3499:72">&lt;</operator> <literal type="number" pos:start="3499:74" pos:end="3499:74">0</literal></expr>)</condition><block type="pseudo" pos:start="3500:13" pos:end="3500:22"><block_content pos:start="3500:13" pos:end="3500:22">
            <goto pos:start="3500:13" pos:end="3500:22">goto <name pos:start="3500:18" pos:end="3500:21">fail</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="3501:9" pos:end="3501:41"><expr pos:start="3501:9" pos:end="3501:40"><name pos:start="3501:9" pos:end="3501:36"><name pos:start="3501:9" pos:end="3501:9">c</name><operator pos:start="3501:10" pos:end="3501:11">-&gt;</operator><name pos:start="3501:12" pos:end="3501:22">rtp_handles</name><index pos:start="3501:23" pos:end="3501:36">[<expr pos:start="3501:24" pos:end="3501:35"><name pos:start="3501:24" pos:end="3501:35">stream_index</name></expr>]</index></name> <operator pos:start="3501:38" pos:end="3501:38">=</operator> <name pos:start="3501:40" pos:end="3501:40">h</name></expr>;</expr_stmt>
        <expr_stmt pos:start="3502:9" pos:end="3502:45"><expr pos:start="3502:9" pos:end="3502:44"><name pos:start="3502:9" pos:end="3502:23">max_packet_size</name> <operator pos:start="3502:25" pos:end="3502:25">=</operator> <name pos:start="3502:27" pos:end="3502:44"><name pos:start="3502:27" pos:end="3502:27">h</name><operator pos:start="3502:28" pos:end="3502:29">-&gt;</operator><name pos:start="3502:30" pos:end="3502:44">max_packet_size</name></name></expr>;</expr_stmt>
        <break pos:start="3503:9" pos:end="3503:14">break;</break>
    <case pos:start="3504:5" pos:end="3504:34">case <expr pos:start="3504:10" pos:end="3504:33"><name pos:start="3504:10" pos:end="3504:33">RTSP_LOWER_TRANSPORT_TCP</name></expr>:</case>
        <comment type="block" pos:start="3505:9" pos:end="3505:26">/* RTP/TCP case */</comment>
        <expr_stmt pos:start="3506:9" pos:end="3506:27"><expr pos:start="3506:9" pos:end="3506:26"><name pos:start="3506:9" pos:end="3506:17"><name pos:start="3506:9" pos:end="3506:9">c</name><operator pos:start="3506:10" pos:end="3506:11">-&gt;</operator><name pos:start="3506:12" pos:end="3506:17">rtsp_c</name></name> <operator pos:start="3506:19" pos:end="3506:19">=</operator> <name pos:start="3506:21" pos:end="3506:26">rtsp_c</name></expr>;</expr_stmt>
        <expr_stmt pos:start="3507:9" pos:end="3507:51"><expr pos:start="3507:9" pos:end="3507:50"><name pos:start="3507:9" pos:end="3507:23">max_packet_size</name> <operator pos:start="3507:25" pos:end="3507:25">=</operator> <name pos:start="3507:27" pos:end="3507:50">RTSP_TCP_MAX_PACKET_SIZE</name></expr>;</expr_stmt>
        <break pos:start="3508:9" pos:end="3508:14">break;</break>
    <default pos:start="3509:5" pos:end="3509:12">default:</default>
        <goto pos:start="3510:9" pos:end="3510:18">goto <name pos:start="3510:14" pos:end="3510:17">fail</name>;</goto>
    </block_content>}</block></switch>

    <expr_stmt pos:start="3513:5" pos:end="3515:61"><expr pos:start="3513:5" pos:end="3515:60"><call pos:start="3513:5" pos:end="3515:60"><name pos:start="3513:5" pos:end="3513:12">http_log</name><argument_list pos:start="3513:13" pos:end="3515:60">(<argument pos:start="3513:14" pos:end="3513:53"><expr pos:start="3513:14" pos:end="3513:53"><literal type="string" pos:start="3513:14" pos:end="3513:53">"%s:%d - - \"PLAY %s/streamid=%d %s\"\n"</literal></expr></argument>,
             <argument pos:start="3514:14" pos:end="3514:19"><expr pos:start="3514:14" pos:end="3514:19"><name pos:start="3514:14" pos:end="3514:19">ipaddr</name></expr></argument>, <argument pos:start="3514:22" pos:end="3514:47"><expr pos:start="3514:22" pos:end="3514:47"><call pos:start="3514:22" pos:end="3514:47"><name pos:start="3514:22" pos:end="3514:26">ntohs</name><argument_list pos:start="3514:27" pos:end="3514:47">(<argument pos:start="3514:28" pos:end="3514:46"><expr pos:start="3514:28" pos:end="3514:46"><name pos:start="3514:28" pos:end="3514:46"><name pos:start="3514:28" pos:end="3514:36">dest_addr</name><operator pos:start="3514:37" pos:end="3514:38">-&gt;</operator><name pos:start="3514:39" pos:end="3514:46">sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>,
             <argument pos:start="3515:14" pos:end="3515:32"><expr pos:start="3515:14" pos:end="3515:32"><name pos:start="3515:14" pos:end="3515:32"><name pos:start="3515:14" pos:end="3515:14">c</name><operator pos:start="3515:15" pos:end="3515:16">-&gt;</operator><name pos:start="3515:17" pos:end="3515:22">stream</name><operator pos:start="3515:23" pos:end="3515:24">-&gt;</operator><name pos:start="3515:25" pos:end="3515:32">filename</name></name></expr></argument>, <argument pos:start="3515:35" pos:end="3515:46"><expr pos:start="3515:35" pos:end="3515:46"><name pos:start="3515:35" pos:end="3515:46">stream_index</name></expr></argument>, <argument pos:start="3515:49" pos:end="3515:59"><expr pos:start="3515:49" pos:end="3515:59"><name pos:start="3515:49" pos:end="3515:59"><name pos:start="3515:49" pos:end="3515:49">c</name><operator pos:start="3515:50" pos:end="3515:51">-&gt;</operator><name pos:start="3515:52" pos:end="3515:59">protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="3517:5" pos:end="3518:20">/* normally, no packets should be output here, but the packet size may
     * be checked */</comment>
    <if_stmt pos:start="3519:5" pos:end="3521:18"><if pos:start="3519:5" pos:end="3521:18">if <condition pos:start="3519:8" pos:end="3519:64">(<expr pos:start="3519:9" pos:end="3519:63"><call pos:start="3519:9" pos:end="3519:59"><name pos:start="3519:9" pos:end="3519:32">ffio_open_dyn_packet_buf</name><argument_list pos:start="3519:33" pos:end="3519:59">(<argument pos:start="3519:34" pos:end="3519:41"><expr pos:start="3519:34" pos:end="3519:41"><operator pos:start="3519:34" pos:end="3519:34">&amp;</operator><name pos:start="3519:35" pos:end="3519:41"><name pos:start="3519:35" pos:end="3519:37">ctx</name><operator pos:start="3519:38" pos:end="3519:39">-&gt;</operator><name pos:start="3519:40" pos:end="3519:41">pb</name></name></expr></argument>, <argument pos:start="3519:44" pos:end="3519:58"><expr pos:start="3519:44" pos:end="3519:58"><name pos:start="3519:44" pos:end="3519:58">max_packet_size</name></expr></argument>)</argument_list></call> <operator pos:start="3519:61" pos:end="3519:61">&lt;</operator> <literal type="number" pos:start="3519:63" pos:end="3519:63">0</literal></expr>)</condition><block type="pseudo" pos:start="3521:9" pos:end="3521:18"><block_content pos:start="3521:9" pos:end="3521:18">
        <comment type="block" pos:start="3520:9" pos:end="3520:31">/* XXX: close stream */</comment>
        <goto pos:start="3521:9" pos:end="3521:18">goto <name pos:start="3521:14" pos:end="3521:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt pos:start="3523:5" pos:end="3530:5"><if pos:start="3523:5" pos:end="3530:5">if <condition pos:start="3523:8" pos:end="3523:45">(<expr pos:start="3523:9" pos:end="3523:44"><call pos:start="3523:9" pos:end="3523:40"><name pos:start="3523:9" pos:end="3523:29">avformat_write_header</name><argument_list pos:start="3523:30" pos:end="3523:40">(<argument pos:start="3523:31" pos:end="3523:33"><expr pos:start="3523:31" pos:end="3523:33"><name pos:start="3523:31" pos:end="3523:33">ctx</name></expr></argument>, <argument pos:start="3523:36" pos:end="3523:39"><expr pos:start="3523:36" pos:end="3523:39"><name pos:start="3523:36" pos:end="3523:39">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="3523:42" pos:end="3523:42">&lt;</operator> <literal type="number" pos:start="3523:44" pos:end="3523:44">0</literal></expr>)</condition> <block pos:start="3523:47" pos:end="3530:5">{<block_content pos:start="3524:5" pos:end="3529:18">
    <label pos:start="3524:5" pos:end="3524:9"><name pos:start="3524:5" pos:end="3524:8">fail</name>:</label>
        <if_stmt pos:start="3525:9" pos:end="3526:27"><if pos:start="3525:9" pos:end="3526:27">if <condition pos:start="3525:12" pos:end="3525:14">(<expr pos:start="3525:13" pos:end="3525:13"><name pos:start="3525:13" pos:end="3525:13">h</name></expr>)</condition><block type="pseudo" pos:start="3526:13" pos:end="3526:27"><block_content pos:start="3526:13" pos:end="3526:27">
            <expr_stmt pos:start="3526:13" pos:end="3526:27"><expr pos:start="3526:13" pos:end="3526:26"><call pos:start="3526:13" pos:end="3526:26"><name pos:start="3526:13" pos:end="3526:23">ffurl_close</name><argument_list pos:start="3526:24" pos:end="3526:26">(<argument pos:start="3526:25" pos:end="3526:25"><expr pos:start="3526:25" pos:end="3526:25"><name pos:start="3526:25" pos:end="3526:25">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="3527:9" pos:end="3527:20"><expr pos:start="3527:9" pos:end="3527:19"><call pos:start="3527:9" pos:end="3527:19"><name pos:start="3527:9" pos:end="3527:15">av_free</name><argument_list pos:start="3527:16" pos:end="3527:19">(<argument pos:start="3527:17" pos:end="3527:18"><expr pos:start="3527:17" pos:end="3527:18"><name pos:start="3527:17" pos:end="3527:18">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3528:9" pos:end="3528:21"><expr pos:start="3528:9" pos:end="3528:20"><call pos:start="3528:9" pos:end="3528:20"><name pos:start="3528:9" pos:end="3528:15">av_free</name><argument_list pos:start="3528:16" pos:end="3528:20">(<argument pos:start="3528:17" pos:end="3528:19"><expr pos:start="3528:17" pos:end="3528:19"><name pos:start="3528:17" pos:end="3528:19">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="3529:9" pos:end="3529:18">return <expr pos:start="3529:16" pos:end="3529:17"><operator pos:start="3529:16" pos:end="3529:16">-</operator><literal type="number" pos:start="3529:17" pos:end="3529:17">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="3531:5" pos:end="3531:44"><expr pos:start="3531:5" pos:end="3531:43"><call pos:start="3531:5" pos:end="3531:43"><name pos:start="3531:5" pos:end="3531:22">avio_close_dyn_buf</name><argument_list pos:start="3531:23" pos:end="3531:43">(<argument pos:start="3531:24" pos:end="3531:30"><expr pos:start="3531:24" pos:end="3531:30"><name pos:start="3531:24" pos:end="3531:30"><name pos:start="3531:24" pos:end="3531:26">ctx</name><operator pos:start="3531:27" pos:end="3531:28">-&gt;</operator><name pos:start="3531:29" pos:end="3531:30">pb</name></name></expr></argument>, <argument pos:start="3531:33" pos:end="3531:42"><expr pos:start="3531:33" pos:end="3531:42"><operator pos:start="3531:33" pos:end="3531:33">&amp;</operator><name pos:start="3531:34" pos:end="3531:42">dummy_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3532:5" pos:end="3532:19"><expr pos:start="3532:5" pos:end="3532:18"><name pos:start="3532:5" pos:end="3532:11"><name pos:start="3532:5" pos:end="3532:7">ctx</name><operator pos:start="3532:8" pos:end="3532:9">-&gt;</operator><name pos:start="3532:10" pos:end="3532:11">pb</name></name> <operator pos:start="3532:13" pos:end="3532:13">=</operator> <name pos:start="3532:15" pos:end="3532:18">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="3533:5" pos:end="3533:23"><expr pos:start="3533:5" pos:end="3533:22"><call pos:start="3533:5" pos:end="3533:22"><name pos:start="3533:5" pos:end="3533:11">av_free</name><argument_list pos:start="3533:12" pos:end="3533:22">(<argument pos:start="3533:13" pos:end="3533:21"><expr pos:start="3533:13" pos:end="3533:21"><name pos:start="3533:13" pos:end="3533:21">dummy_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="3535:5" pos:end="3535:35"><expr pos:start="3535:5" pos:end="3535:34"><name pos:start="3535:5" pos:end="3535:28"><name pos:start="3535:5" pos:end="3535:5">c</name><operator pos:start="3535:6" pos:end="3535:7">-&gt;</operator><name pos:start="3535:8" pos:end="3535:14">rtp_ctx</name><index pos:start="3535:15" pos:end="3535:28">[<expr pos:start="3535:16" pos:end="3535:27"><name pos:start="3535:16" pos:end="3535:27">stream_index</name></expr>]</index></name> <operator pos:start="3535:30" pos:end="3535:30">=</operator> <name pos:start="3535:32" pos:end="3535:34">ctx</name></expr>;</expr_stmt>
    <return pos:start="3536:5" pos:end="3536:13">return <expr pos:start="3536:12" pos:end="3536:12"><literal type="number" pos:start="3536:12" pos:end="3536:12">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="3539:1" pos:end="3539:70">/********************************************************************/</comment>
<comment type="block" pos:start="3540:1" pos:end="3540:29">/* ffserver initialization */</comment>

<comment type="block" pos:start="3542:1" pos:end="3542:55">/* FIXME: This code should use avformat_new_stream() */</comment>
<function pos:start="3543:1" pos:end="3575:1"><type pos:start="3543:1" pos:end="3543:24"><specifier pos:start="3543:1" pos:end="3543:6">static</specifier> <name pos:start="3543:8" pos:end="3543:22">LayeredAVStream</name> <modifier pos:start="3543:24" pos:end="3543:24">*</modifier></type><name pos:start="3543:25" pos:end="3543:38">add_av_stream1</name><parameter_list pos:start="3543:39" pos:end="3544:64">(<parameter pos:start="3543:40" pos:end="3543:61"><decl pos:start="3543:40" pos:end="3543:61"><type pos:start="3543:40" pos:end="3543:61"><name pos:start="3543:40" pos:end="3543:53">FFServerStream</name> <modifier pos:start="3543:55" pos:end="3543:55">*</modifier></type><name pos:start="3543:56" pos:end="3543:61">stream</name></decl></parameter>,
                                <parameter pos:start="3544:33" pos:end="3544:53"><decl pos:start="3544:33" pos:end="3544:53"><type pos:start="3544:33" pos:end="3544:53"><name pos:start="3544:33" pos:end="3544:46">AVCodecContext</name> <modifier pos:start="3544:48" pos:end="3544:48">*</modifier></type><name pos:start="3544:49" pos:end="3544:53">codec</name></decl></parameter>, <parameter pos:start="3544:56" pos:end="3544:63"><decl pos:start="3544:56" pos:end="3544:63"><type pos:start="3544:56" pos:end="3544:63"><name pos:start="3544:56" pos:end="3544:58">int</name></type> <name pos:start="3544:60" pos:end="3544:63">copy</name></decl></parameter>)</parameter_list>
<block pos:start="3545:1" pos:end="3575:1">{<block_content pos:start="3546:5" pos:end="3574:15">
    <decl_stmt pos:start="3546:5" pos:end="3546:25"><decl pos:start="3546:5" pos:end="3546:24"><type pos:start="3546:5" pos:end="3546:21"><name pos:start="3546:5" pos:end="3546:19">LayeredAVStream</name> <modifier pos:start="3546:21" pos:end="3546:21">*</modifier></type><name pos:start="3546:22" pos:end="3546:24">fst</name></decl>;</decl_stmt>

    <if_stmt pos:start="3548:5" pos:end="3549:20"><if pos:start="3548:5" pos:end="3549:20">if<condition pos:start="3548:7" pos:end="3548:61">(<expr pos:start="3548:8" pos:end="3548:60"><name pos:start="3548:8" pos:end="3548:25"><name pos:start="3548:8" pos:end="3548:13">stream</name><operator pos:start="3548:14" pos:end="3548:15">-&gt;</operator><name pos:start="3548:16" pos:end="3548:25">nb_streams</name></name> <operator pos:start="3548:27" pos:end="3548:28">&gt;=</operator> <call pos:start="3548:30" pos:end="3548:60"><name pos:start="3548:30" pos:end="3548:43">FF_ARRAY_ELEMS</name><argument_list pos:start="3548:44" pos:end="3548:60">(<argument pos:start="3548:45" pos:end="3548:59"><expr pos:start="3548:45" pos:end="3548:59"><name pos:start="3548:45" pos:end="3548:59"><name pos:start="3548:45" pos:end="3548:50">stream</name><operator pos:start="3548:51" pos:end="3548:52">-&gt;</operator><name pos:start="3548:53" pos:end="3548:59">streams</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3549:9" pos:end="3549:20"><block_content pos:start="3549:9" pos:end="3549:20">
        <return pos:start="3549:9" pos:end="3549:20">return <expr pos:start="3549:16" pos:end="3549:19"><name pos:start="3549:16" pos:end="3549:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="3551:5" pos:end="3551:35"><expr pos:start="3551:5" pos:end="3551:34"><name pos:start="3551:5" pos:end="3551:7">fst</name> <operator pos:start="3551:9" pos:end="3551:9">=</operator> <call pos:start="3551:11" pos:end="3551:34"><name pos:start="3551:11" pos:end="3551:20">av_mallocz</name><argument_list pos:start="3551:21" pos:end="3551:34">(<argument pos:start="3551:22" pos:end="3551:33"><expr pos:start="3551:22" pos:end="3551:33"><sizeof pos:start="3551:22" pos:end="3551:33">sizeof<argument_list pos:start="3551:28" pos:end="3551:33">(<argument pos:start="3551:29" pos:end="3551:32"><expr pos:start="3551:29" pos:end="3551:32"><operator pos:start="3551:29" pos:end="3551:29">*</operator><name pos:start="3551:30" pos:end="3551:32">fst</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3552:5" pos:end="3553:20"><if pos:start="3552:5" pos:end="3553:20">if <condition pos:start="3552:8" pos:end="3552:13">(<expr pos:start="3552:9" pos:end="3552:12"><operator pos:start="3552:9" pos:end="3552:9">!</operator><name pos:start="3552:10" pos:end="3552:12">fst</name></expr>)</condition><block type="pseudo" pos:start="3553:9" pos:end="3553:20"><block_content pos:start="3553:9" pos:end="3553:20">
        <return pos:start="3553:9" pos:end="3553:20">return <expr pos:start="3553:16" pos:end="3553:19"><name pos:start="3553:16" pos:end="3553:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt pos:start="3554:5" pos:end="3565:27"><if pos:start="3554:5" pos:end="3561:5">if <condition pos:start="3554:8" pos:end="3554:13">(<expr pos:start="3554:9" pos:end="3554:12"><name pos:start="3554:9" pos:end="3554:12">copy</name></expr>)</condition> <block pos:start="3554:15" pos:end="3561:5">{<block_content pos:start="3555:9" pos:end="3560:48">
        <expr_stmt pos:start="3555:9" pos:end="3555:58"><expr pos:start="3555:9" pos:end="3555:57"><name pos:start="3555:9" pos:end="3555:18"><name pos:start="3555:9" pos:end="3555:11">fst</name><operator pos:start="3555:12" pos:end="3555:13">-&gt;</operator><name pos:start="3555:14" pos:end="3555:18">codec</name></name> <operator pos:start="3555:20" pos:end="3555:20">=</operator> <call pos:start="3555:22" pos:end="3555:57"><name pos:start="3555:22" pos:end="3555:43">avcodec_alloc_context3</name><argument_list pos:start="3555:44" pos:end="3555:57">(<argument pos:start="3555:45" pos:end="3555:56"><expr pos:start="3555:45" pos:end="3555:56"><name pos:start="3555:45" pos:end="3555:56"><name pos:start="3555:45" pos:end="3555:49">codec</name><operator pos:start="3555:50" pos:end="3555:51">-&gt;</operator><name pos:start="3555:52" pos:end="3555:56">codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="3556:9" pos:end="3559:9"><if pos:start="3556:9" pos:end="3559:9">if <condition pos:start="3556:12" pos:end="3556:24">(<expr pos:start="3556:13" pos:end="3556:23"><operator pos:start="3556:13" pos:end="3556:13">!</operator><name pos:start="3556:14" pos:end="3556:23"><name pos:start="3556:14" pos:end="3556:16">fst</name><operator pos:start="3556:17" pos:end="3556:18">-&gt;</operator><name pos:start="3556:19" pos:end="3556:23">codec</name></name></expr>)</condition> <block pos:start="3556:26" pos:end="3559:9">{<block_content pos:start="3557:13" pos:end="3558:24">
            <expr_stmt pos:start="3557:13" pos:end="3557:25"><expr pos:start="3557:13" pos:end="3557:24"><call pos:start="3557:13" pos:end="3557:24"><name pos:start="3557:13" pos:end="3557:19">av_free</name><argument_list pos:start="3557:20" pos:end="3557:24">(<argument pos:start="3557:21" pos:end="3557:23"><expr pos:start="3557:21" pos:end="3557:23"><name pos:start="3557:21" pos:end="3557:23">fst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="3558:13" pos:end="3558:24">return <expr pos:start="3558:20" pos:end="3558:23"><name pos:start="3558:20" pos:end="3558:23">NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="3560:9" pos:end="3560:48"><expr pos:start="3560:9" pos:end="3560:47"><call pos:start="3560:9" pos:end="3560:47"><name pos:start="3560:9" pos:end="3560:28">avcodec_copy_context</name><argument_list pos:start="3560:29" pos:end="3560:47">(<argument pos:start="3560:30" pos:end="3560:39"><expr pos:start="3560:30" pos:end="3560:39"><name pos:start="3560:30" pos:end="3560:39"><name pos:start="3560:30" pos:end="3560:32">fst</name><operator pos:start="3560:33" pos:end="3560:34">-&gt;</operator><name pos:start="3560:35" pos:end="3560:39">codec</name></name></expr></argument>, <argument pos:start="3560:42" pos:end="3560:46"><expr pos:start="3560:42" pos:end="3560:46"><name pos:start="3560:42" pos:end="3560:46">codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="3561:7" pos:end="3565:27">else<block type="pseudo" pos:start="3565:9" pos:end="3565:27"><block_content pos:start="3565:9" pos:end="3565:27">
        <comment type="block" pos:start="3562:9" pos:end="3564:11">/* live streams must use the actual feed's codec since it may be
         * updated later to carry extradata needed by them.
         */</comment>
        <expr_stmt pos:start="3565:9" pos:end="3565:27"><expr pos:start="3565:9" pos:end="3565:26"><name pos:start="3565:9" pos:end="3565:18"><name pos:start="3565:9" pos:end="3565:11">fst</name><operator pos:start="3565:12" pos:end="3565:13">-&gt;</operator><name pos:start="3565:14" pos:end="3565:18">codec</name></name> <operator pos:start="3565:20" pos:end="3565:20">=</operator> <name pos:start="3565:22" pos:end="3565:26">codec</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="line" pos:start="3567:5" pos:end="3567:90">//NOTE we previously allocated internal &amp; internal-&gt;avctx, these seemed uneeded though</comment>
    <expr_stmt pos:start="3568:5" pos:end="3568:47"><expr pos:start="3568:5" pos:end="3568:46"><name pos:start="3568:5" pos:end="3568:17"><name pos:start="3568:5" pos:end="3568:7">fst</name><operator pos:start="3568:8" pos:end="3568:9">-&gt;</operator><name pos:start="3568:10" pos:end="3568:17">codecpar</name></name> <operator pos:start="3568:19" pos:end="3568:19">=</operator> <call pos:start="3568:21" pos:end="3568:46"><name pos:start="3568:21" pos:end="3568:44">avcodec_parameters_alloc</name><argument_list pos:start="3568:45" pos:end="3568:46">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3569:5" pos:end="3569:36"><expr pos:start="3569:5" pos:end="3569:35"><name pos:start="3569:5" pos:end="3569:14"><name pos:start="3569:5" pos:end="3569:7">fst</name><operator pos:start="3569:8" pos:end="3569:9">-&gt;</operator><name pos:start="3569:10" pos:end="3569:14">index</name></name> <operator pos:start="3569:16" pos:end="3569:16">=</operator> <name pos:start="3569:18" pos:end="3569:35"><name pos:start="3569:18" pos:end="3569:23">stream</name><operator pos:start="3569:24" pos:end="3569:25">-&gt;</operator><name pos:start="3569:26" pos:end="3569:35">nb_streams</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="3570:5" pos:end="3570:38"><expr pos:start="3570:5" pos:end="3570:37"><name pos:start="3570:5" pos:end="3570:18"><name pos:start="3570:5" pos:end="3570:7">fst</name><operator pos:start="3570:8" pos:end="3570:9">-&gt;</operator><name pos:start="3570:10" pos:end="3570:18">time_base</name></name> <operator pos:start="3570:20" pos:end="3570:20">=</operator> <name pos:start="3570:22" pos:end="3570:37"><name pos:start="3570:22" pos:end="3570:26">codec</name><operator pos:start="3570:27" pos:end="3570:28">-&gt;</operator><name pos:start="3570:29" pos:end="3570:37">time_base</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="3571:5" pos:end="3571:28"><expr pos:start="3571:5" pos:end="3571:27"><name pos:start="3571:5" pos:end="3571:22"><name pos:start="3571:5" pos:end="3571:7">fst</name><operator pos:start="3571:8" pos:end="3571:9">-&gt;</operator><name pos:start="3571:10" pos:end="3571:22">pts_wrap_bits</name></name> <operator pos:start="3571:24" pos:end="3571:24">=</operator> <literal type="number" pos:start="3571:26" pos:end="3571:27">33</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="3572:5" pos:end="3572:58"><expr pos:start="3572:5" pos:end="3572:57"><name pos:start="3572:5" pos:end="3572:28"><name pos:start="3572:5" pos:end="3572:7">fst</name><operator pos:start="3572:8" pos:end="3572:9">-&gt;</operator><name pos:start="3572:10" pos:end="3572:28">sample_aspect_ratio</name></name> <operator pos:start="3572:30" pos:end="3572:30">=</operator> <name pos:start="3572:32" pos:end="3572:57"><name pos:start="3572:32" pos:end="3572:36">codec</name><operator pos:start="3572:37" pos:end="3572:38">-&gt;</operator><name pos:start="3572:39" pos:end="3572:57">sample_aspect_ratio</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="3573:5" pos:end="3573:48"><expr pos:start="3573:5" pos:end="3573:47"><name pos:start="3573:5" pos:end="3573:41"><name pos:start="3573:5" pos:end="3573:10">stream</name><operator pos:start="3573:11" pos:end="3573:12">-&gt;</operator><name pos:start="3573:13" pos:end="3573:19">streams</name><index pos:start="3573:20" pos:end="3573:41">[<expr pos:start="3573:21" pos:end="3573:40"><name pos:start="3573:21" pos:end="3573:38"><name pos:start="3573:21" pos:end="3573:26">stream</name><operator pos:start="3573:27" pos:end="3573:28">-&gt;</operator><name pos:start="3573:29" pos:end="3573:38">nb_streams</name></name><operator pos:start="3573:39" pos:end="3573:40">++</operator></expr>]</index></name> <operator pos:start="3573:43" pos:end="3573:43">=</operator> <name pos:start="3573:45" pos:end="3573:47">fst</name></expr>;</expr_stmt>
    <return pos:start="3574:5" pos:end="3574:15">return <expr pos:start="3574:12" pos:end="3574:14"><name pos:start="3574:12" pos:end="3574:14">fst</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="3577:1" pos:end="3577:42">/* return the stream number in the feed */</comment>
<function pos:start="3578:1" pos:end="3618:1"><type pos:start="3578:1" pos:end="3578:10"><specifier pos:start="3578:1" pos:end="3578:6">static</specifier> <name pos:start="3578:8" pos:end="3578:10">int</name></type> <name pos:start="3578:12" pos:end="3578:24">add_av_stream</name><parameter_list pos:start="3578:25" pos:end="3578:67">(<parameter pos:start="3578:26" pos:end="3578:45"><decl pos:start="3578:26" pos:end="3578:45"><type pos:start="3578:26" pos:end="3578:45"><name pos:start="3578:26" pos:end="3578:39">FFServerStream</name> <modifier pos:start="3578:41" pos:end="3578:41">*</modifier></type><name pos:start="3578:42" pos:end="3578:45">feed</name></decl></parameter>, <parameter pos:start="3578:48" pos:end="3578:66"><decl pos:start="3578:48" pos:end="3578:66"><type pos:start="3578:48" pos:end="3578:66"><name pos:start="3578:48" pos:end="3578:62">LayeredAVStream</name> <modifier pos:start="3578:64" pos:end="3578:64">*</modifier></type><name pos:start="3578:65" pos:end="3578:66">st</name></decl></parameter>)</parameter_list>
<block pos:start="3579:1" pos:end="3618:1">{<block_content pos:start="3580:5" pos:end="3617:32">
    <decl_stmt pos:start="3580:5" pos:end="3580:25"><decl pos:start="3580:5" pos:end="3580:24"><type pos:start="3580:5" pos:end="3580:21"><name pos:start="3580:5" pos:end="3580:19">LayeredAVStream</name> <modifier pos:start="3580:21" pos:end="3580:21">*</modifier></type><name pos:start="3580:22" pos:end="3580:24">fst</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3581:5" pos:end="3581:29"><decl pos:start="3581:5" pos:end="3581:22"><type pos:start="3581:5" pos:end="3581:20"><name pos:start="3581:5" pos:end="3581:18">AVCodecContext</name> <modifier pos:start="3581:20" pos:end="3581:20">*</modifier></type><name pos:start="3581:21" pos:end="3581:22">av</name></decl>, <decl pos:start="3581:25" pos:end="3581:28"><type ref="prev" pos:start="3581:5" pos:end="3581:20"><modifier pos:start="3581:25" pos:end="3581:25">*</modifier></type><name pos:start="3581:26" pos:end="3581:28">av1</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3582:5" pos:end="3582:10"><decl pos:start="3582:5" pos:end="3582:9"><type pos:start="3582:5" pos:end="3582:7"><name pos:start="3582:5" pos:end="3582:7">int</name></type> <name pos:start="3582:9" pos:end="3582:9">i</name></decl>;</decl_stmt>

    <expr_stmt pos:start="3584:5" pos:end="3584:19"><expr pos:start="3584:5" pos:end="3584:18"><name pos:start="3584:5" pos:end="3584:6">av</name> <operator pos:start="3584:8" pos:end="3584:8">=</operator> <name pos:start="3584:10" pos:end="3584:18"><name pos:start="3584:10" pos:end="3584:11">st</name><operator pos:start="3584:12" pos:end="3584:13">-&gt;</operator><name pos:start="3584:14" pos:end="3584:18">codec</name></name></expr>;</expr_stmt>
    <for pos:start="3585:5" pos:end="3609:5">for<control pos:start="3585:8" pos:end="3585:35">(<init pos:start="3585:9" pos:end="3585:12"><expr pos:start="3585:9" pos:end="3585:11"><name pos:start="3585:9" pos:end="3585:9">i</name><operator pos:start="3585:10" pos:end="3585:10">=</operator><literal type="number" pos:start="3585:11" pos:end="3585:11">0</literal></expr>;</init><condition pos:start="3585:13" pos:end="3585:31"><expr pos:start="3585:13" pos:end="3585:30"><name pos:start="3585:13" pos:end="3585:13">i</name><operator pos:start="3585:14" pos:end="3585:14">&lt;</operator><name pos:start="3585:15" pos:end="3585:30"><name pos:start="3585:15" pos:end="3585:18">feed</name><operator pos:start="3585:19" pos:end="3585:20">-&gt;</operator><name pos:start="3585:21" pos:end="3585:30">nb_streams</name></name></expr>;</condition><incr pos:start="3585:32" pos:end="3585:34"><expr pos:start="3585:32" pos:end="3585:34"><name pos:start="3585:32" pos:end="3585:32">i</name><operator pos:start="3585:33" pos:end="3585:34">++</operator></expr></incr>)</control> <block pos:start="3585:37" pos:end="3609:5">{<block_content pos:start="3586:9" pos:end="3608:9">
        <expr_stmt pos:start="3586:9" pos:end="3586:38"><expr pos:start="3586:9" pos:end="3586:37"><name pos:start="3586:9" pos:end="3586:11">av1</name> <operator pos:start="3586:13" pos:end="3586:13">=</operator> <name pos:start="3586:15" pos:end="3586:30"><name pos:start="3586:15" pos:end="3586:18">feed</name><operator pos:start="3586:19" pos:end="3586:20">-&gt;</operator><name pos:start="3586:21" pos:end="3586:27">streams</name><index pos:start="3586:28" pos:end="3586:30">[<expr pos:start="3586:29" pos:end="3586:29"><name pos:start="3586:29" pos:end="3586:29">i</name></expr>]</index></name><operator pos:start="3586:31" pos:end="3586:32">-&gt;</operator><name pos:start="3586:33" pos:end="3586:37">codec</name></expr>;</expr_stmt>
        <if_stmt pos:start="3587:9" pos:end="3608:9"><if pos:start="3587:9" pos:end="3608:9">if <condition pos:start="3587:12" pos:end="3589:42">(<expr pos:start="3587:13" pos:end="3589:41"><name pos:start="3587:13" pos:end="3587:25"><name pos:start="3587:13" pos:end="3587:15">av1</name><operator pos:start="3587:16" pos:end="3587:17">-&gt;</operator><name pos:start="3587:18" pos:end="3587:25">codec_id</name></name> <operator pos:start="3587:27" pos:end="3587:28">==</operator> <name pos:start="3587:30" pos:end="3587:41"><name pos:start="3587:30" pos:end="3587:31">av</name><operator pos:start="3587:32" pos:end="3587:33">-&gt;</operator><name pos:start="3587:34" pos:end="3587:41">codec_id</name></name> <operator pos:start="3587:43" pos:end="3587:44">&amp;&amp;</operator>
            <name pos:start="3588:13" pos:end="3588:27"><name pos:start="3588:13" pos:end="3588:15">av1</name><operator pos:start="3588:16" pos:end="3588:17">-&gt;</operator><name pos:start="3588:18" pos:end="3588:27">codec_type</name></name> <operator pos:start="3588:29" pos:end="3588:30">==</operator> <name pos:start="3588:32" pos:end="3588:45"><name pos:start="3588:32" pos:end="3588:33">av</name><operator pos:start="3588:34" pos:end="3588:35">-&gt;</operator><name pos:start="3588:36" pos:end="3588:45">codec_type</name></name> <operator pos:start="3588:47" pos:end="3588:48">&amp;&amp;</operator>
            <name pos:start="3589:13" pos:end="3589:25"><name pos:start="3589:13" pos:end="3589:15">av1</name><operator pos:start="3589:16" pos:end="3589:17">-&gt;</operator><name pos:start="3589:18" pos:end="3589:25">bit_rate</name></name> <operator pos:start="3589:27" pos:end="3589:28">==</operator> <name pos:start="3589:30" pos:end="3589:41"><name pos:start="3589:30" pos:end="3589:31">av</name><operator pos:start="3589:32" pos:end="3589:33">-&gt;</operator><name pos:start="3589:34" pos:end="3589:41">bit_rate</name></name></expr>)</condition> <block pos:start="3589:44" pos:end="3608:9">{<block_content pos:start="3591:13" pos:end="3607:13">

            <switch pos:start="3591:13" pos:end="3607:13">switch<condition pos:start="3591:19" pos:end="3591:34">(<expr pos:start="3591:20" pos:end="3591:33"><name pos:start="3591:20" pos:end="3591:33"><name pos:start="3591:20" pos:end="3591:21">av</name><operator pos:start="3591:22" pos:end="3591:23">-&gt;</operator><name pos:start="3591:24" pos:end="3591:33">codec_type</name></name></expr>)</condition> <block pos:start="3591:36" pos:end="3607:13">{<block_content pos:start="3592:13" pos:end="3606:24">
            <case pos:start="3592:13" pos:end="3592:36">case <expr pos:start="3592:18" pos:end="3592:35"><name pos:start="3592:18" pos:end="3592:35">AVMEDIA_TYPE_AUDIO</name></expr>:</case>
                <if_stmt pos:start="3593:17" pos:end="3595:29"><if pos:start="3593:17" pos:end="3595:29">if <condition pos:start="3593:20" pos:end="3594:56">(<expr pos:start="3593:21" pos:end="3594:55"><name pos:start="3593:21" pos:end="3593:33"><name pos:start="3593:21" pos:end="3593:23">av1</name><operator pos:start="3593:24" pos:end="3593:25">-&gt;</operator><name pos:start="3593:26" pos:end="3593:33">channels</name></name> <operator pos:start="3593:35" pos:end="3593:36">==</operator> <name pos:start="3593:38" pos:end="3593:49"><name pos:start="3593:38" pos:end="3593:39">av</name><operator pos:start="3593:40" pos:end="3593:41">-&gt;</operator><name pos:start="3593:42" pos:end="3593:49">channels</name></name> <operator pos:start="3593:51" pos:end="3593:52">&amp;&amp;</operator>
                    <name pos:start="3594:21" pos:end="3594:36"><name pos:start="3594:21" pos:end="3594:23">av1</name><operator pos:start="3594:24" pos:end="3594:25">-&gt;</operator><name pos:start="3594:26" pos:end="3594:36">sample_rate</name></name> <operator pos:start="3594:38" pos:end="3594:39">==</operator> <name pos:start="3594:41" pos:end="3594:55"><name pos:start="3594:41" pos:end="3594:42">av</name><operator pos:start="3594:43" pos:end="3594:44">-&gt;</operator><name pos:start="3594:45" pos:end="3594:55">sample_rate</name></name></expr>)</condition><block type="pseudo" pos:start="3595:21" pos:end="3595:29"><block_content pos:start="3595:21" pos:end="3595:29">
                    <return pos:start="3595:21" pos:end="3595:29">return <expr pos:start="3595:28" pos:end="3595:28"><name pos:start="3595:28" pos:end="3595:28">i</name></expr>;</return></block_content></block></if></if_stmt>
                <break pos:start="3596:17" pos:end="3596:22">break;</break>
            <case pos:start="3597:13" pos:end="3597:36">case <expr pos:start="3597:18" pos:end="3597:35"><name pos:start="3597:18" pos:end="3597:35">AVMEDIA_TYPE_VIDEO</name></expr>:</case>
                <if_stmt pos:start="3598:17" pos:end="3603:29"><if pos:start="3598:17" pos:end="3603:29">if <condition pos:start="3598:20" pos:end="3602:50">(<expr pos:start="3598:21" pos:end="3602:49"><name pos:start="3598:21" pos:end="3598:30"><name pos:start="3598:21" pos:end="3598:23">av1</name><operator pos:start="3598:24" pos:end="3598:25">-&gt;</operator><name pos:start="3598:26" pos:end="3598:30">width</name></name> <operator pos:start="3598:32" pos:end="3598:33">==</operator> <name pos:start="3598:35" pos:end="3598:43"><name pos:start="3598:35" pos:end="3598:36">av</name><operator pos:start="3598:37" pos:end="3598:38">-&gt;</operator><name pos:start="3598:39" pos:end="3598:43">width</name></name> <operator pos:start="3598:45" pos:end="3598:46">&amp;&amp;</operator>
                    <name pos:start="3599:21" pos:end="3599:31"><name pos:start="3599:21" pos:end="3599:23">av1</name><operator pos:start="3599:24" pos:end="3599:25">-&gt;</operator><name pos:start="3599:26" pos:end="3599:31">height</name></name> <operator pos:start="3599:33" pos:end="3599:34">==</operator> <name pos:start="3599:36" pos:end="3599:45"><name pos:start="3599:36" pos:end="3599:37">av</name><operator pos:start="3599:38" pos:end="3599:39">-&gt;</operator><name pos:start="3599:40" pos:end="3599:45">height</name></name> <operator pos:start="3599:47" pos:end="3599:48">&amp;&amp;</operator>
                    <name pos:start="3600:21" pos:end="3600:38"><name pos:start="3600:21" pos:end="3600:23">av1</name><operator pos:start="3600:24" pos:end="3600:25">-&gt;</operator><name pos:start="3600:26" pos:end="3600:34">time_base</name><operator pos:start="3600:35" pos:end="3600:35">.</operator><name pos:start="3600:36" pos:end="3600:38">den</name></name> <operator pos:start="3600:40" pos:end="3600:41">==</operator> <name pos:start="3600:43" pos:end="3600:59"><name pos:start="3600:43" pos:end="3600:44">av</name><operator pos:start="3600:45" pos:end="3600:46">-&gt;</operator><name pos:start="3600:47" pos:end="3600:55">time_base</name><operator pos:start="3600:56" pos:end="3600:56">.</operator><name pos:start="3600:57" pos:end="3600:59">den</name></name> <operator pos:start="3600:61" pos:end="3600:62">&amp;&amp;</operator>
                    <name pos:start="3601:21" pos:end="3601:38"><name pos:start="3601:21" pos:end="3601:23">av1</name><operator pos:start="3601:24" pos:end="3601:25">-&gt;</operator><name pos:start="3601:26" pos:end="3601:34">time_base</name><operator pos:start="3601:35" pos:end="3601:35">.</operator><name pos:start="3601:36" pos:end="3601:38">num</name></name> <operator pos:start="3601:40" pos:end="3601:41">==</operator> <name pos:start="3601:43" pos:end="3601:59"><name pos:start="3601:43" pos:end="3601:44">av</name><operator pos:start="3601:45" pos:end="3601:46">-&gt;</operator><name pos:start="3601:47" pos:end="3601:55">time_base</name><operator pos:start="3601:56" pos:end="3601:56">.</operator><name pos:start="3601:57" pos:end="3601:59">num</name></name> <operator pos:start="3601:61" pos:end="3601:62">&amp;&amp;</operator>
                    <name pos:start="3602:21" pos:end="3602:33"><name pos:start="3602:21" pos:end="3602:23">av1</name><operator pos:start="3602:24" pos:end="3602:25">-&gt;</operator><name pos:start="3602:26" pos:end="3602:33">gop_size</name></name> <operator pos:start="3602:35" pos:end="3602:36">==</operator> <name pos:start="3602:38" pos:end="3602:49"><name pos:start="3602:38" pos:end="3602:39">av</name><operator pos:start="3602:40" pos:end="3602:41">-&gt;</operator><name pos:start="3602:42" pos:end="3602:49">gop_size</name></name></expr>)</condition><block type="pseudo" pos:start="3603:21" pos:end="3603:29"><block_content pos:start="3603:21" pos:end="3603:29">
                    <return pos:start="3603:21" pos:end="3603:29">return <expr pos:start="3603:28" pos:end="3603:28"><name pos:start="3603:28" pos:end="3603:28">i</name></expr>;</return></block_content></block></if></if_stmt>
                <break pos:start="3604:17" pos:end="3604:22">break;</break>
            <default pos:start="3605:13" pos:end="3605:20">default:</default>
                <expr_stmt pos:start="3606:17" pos:end="3606:24"><expr pos:start="3606:17" pos:end="3606:23"><call pos:start="3606:17" pos:end="3606:23"><name pos:start="3606:17" pos:end="3606:21">abort</name><argument_list pos:start="3606:22" pos:end="3606:23">()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></switch>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt pos:start="3611:5" pos:end="3611:38"><expr pos:start="3611:5" pos:end="3611:37"><name pos:start="3611:5" pos:end="3611:7">fst</name> <operator pos:start="3611:9" pos:end="3611:9">=</operator> <call pos:start="3611:11" pos:end="3611:37"><name pos:start="3611:11" pos:end="3611:24">add_av_stream1</name><argument_list pos:start="3611:25" pos:end="3611:37">(<argument pos:start="3611:26" pos:end="3611:29"><expr pos:start="3611:26" pos:end="3611:29"><name pos:start="3611:26" pos:end="3611:29">feed</name></expr></argument>, <argument pos:start="3611:32" pos:end="3611:33"><expr pos:start="3611:32" pos:end="3611:33"><name pos:start="3611:32" pos:end="3611:33">av</name></expr></argument>, <argument pos:start="3611:36" pos:end="3611:36"><expr pos:start="3611:36" pos:end="3611:36"><literal type="number" pos:start="3611:36" pos:end="3611:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3612:5" pos:end="3613:18"><if pos:start="3612:5" pos:end="3613:18">if <condition pos:start="3612:8" pos:end="3612:13">(<expr pos:start="3612:9" pos:end="3612:12"><operator pos:start="3612:9" pos:end="3612:9">!</operator><name pos:start="3612:10" pos:end="3612:12">fst</name></expr>)</condition><block type="pseudo" pos:start="3613:9" pos:end="3613:18"><block_content pos:start="3613:9" pos:end="3613:18">
        <return pos:start="3613:9" pos:end="3613:18">return <expr pos:start="3613:16" pos:end="3613:17"><operator pos:start="3613:16" pos:end="3613:16">-</operator><literal type="number" pos:start="3613:17" pos:end="3613:17">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt pos:start="3614:5" pos:end="3616:61"><if pos:start="3614:5" pos:end="3616:61">if <condition pos:start="3614:8" pos:end="3614:46">(<expr pos:start="3614:9" pos:end="3614:45"><name pos:start="3614:9" pos:end="3614:45"><name pos:start="3614:9" pos:end="3614:10">st</name><operator pos:start="3614:11" pos:end="3614:12">-&gt;</operator><name pos:start="3614:13" pos:end="3614:45">recommended_encoder_configuration</name></name></expr>)</condition><block type="pseudo" pos:start="3615:9" pos:end="3616:61"><block_content pos:start="3615:9" pos:end="3616:61">
        <expr_stmt pos:start="3615:9" pos:end="3616:61"><expr pos:start="3615:9" pos:end="3616:60"><name pos:start="3615:9" pos:end="3615:46"><name pos:start="3615:9" pos:end="3615:11">fst</name><operator pos:start="3615:12" pos:end="3615:13">-&gt;</operator><name pos:start="3615:14" pos:end="3615:46">recommended_encoder_configuration</name></name> <operator pos:start="3615:48" pos:end="3615:48">=</operator>
            <call pos:start="3616:13" pos:end="3616:60"><name pos:start="3616:13" pos:end="3616:21">av_strdup</name><argument_list pos:start="3616:22" pos:end="3616:60">(<argument pos:start="3616:23" pos:end="3616:59"><expr pos:start="3616:23" pos:end="3616:59"><name pos:start="3616:23" pos:end="3616:59"><name pos:start="3616:23" pos:end="3616:24">st</name><operator pos:start="3616:25" pos:end="3616:26">-&gt;</operator><name pos:start="3616:27" pos:end="3616:59">recommended_encoder_configuration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return pos:start="3617:5" pos:end="3617:32">return <expr pos:start="3617:12" pos:end="3617:31"><name pos:start="3617:12" pos:end="3617:27"><name pos:start="3617:12" pos:end="3617:15">feed</name><operator pos:start="3617:16" pos:end="3617:17">-&gt;</operator><name pos:start="3617:18" pos:end="3617:27">nb_streams</name></name> <operator pos:start="3617:29" pos:end="3617:29">-</operator> <literal type="number" pos:start="3617:31" pos:end="3617:31">1</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="3620:1" pos:end="3630:1"><type pos:start="3620:1" pos:end="3620:11"><specifier pos:start="3620:1" pos:end="3620:6">static</specifier> <name pos:start="3620:8" pos:end="3620:11">void</name></type> <name pos:start="3620:13" pos:end="3620:25">remove_stream</name><parameter_list pos:start="3620:26" pos:end="3620:49">(<parameter pos:start="3620:27" pos:end="3620:48"><decl pos:start="3620:27" pos:end="3620:48"><type pos:start="3620:27" pos:end="3620:42"><name pos:start="3620:27" pos:end="3620:40">FFServerStream</name> <modifier pos:start="3620:42" pos:end="3620:42">*</modifier></type><name pos:start="3620:43" pos:end="3620:48">stream</name></decl></parameter>)</parameter_list>
<block pos:start="3621:1" pos:end="3630:1">{<block_content pos:start="3622:5" pos:end="3629:5">
    <decl_stmt pos:start="3622:5" pos:end="3622:24"><decl pos:start="3622:5" pos:end="3622:23"><type pos:start="3622:5" pos:end="3622:21"><name pos:start="3622:5" pos:end="3622:18">FFServerStream</name> <modifier pos:start="3622:20" pos:end="3622:20">*</modifier><modifier pos:start="3622:21" pos:end="3622:21">*</modifier></type><name pos:start="3622:22" pos:end="3622:23">ps</name></decl>;</decl_stmt>
    <expr_stmt pos:start="3623:5" pos:end="3623:30"><expr pos:start="3623:5" pos:end="3623:29"><name pos:start="3623:5" pos:end="3623:6">ps</name> <operator pos:start="3623:8" pos:end="3623:8">=</operator> <operator pos:start="3623:10" pos:end="3623:10">&amp;</operator><name pos:start="3623:11" pos:end="3623:29"><name pos:start="3623:11" pos:end="3623:16">config</name><operator pos:start="3623:17" pos:end="3623:17">.</operator><name pos:start="3623:18" pos:end="3623:29">first_stream</name></name></expr>;</expr_stmt>
    <while pos:start="3624:5" pos:end="3629:5">while <condition pos:start="3624:11" pos:end="3624:15">(<expr pos:start="3624:12" pos:end="3624:14"><operator pos:start="3624:12" pos:end="3624:12">*</operator><name pos:start="3624:13" pos:end="3624:14">ps</name></expr>)</condition> <block pos:start="3624:17" pos:end="3629:5">{<block_content pos:start="3625:9" pos:end="3628:30">
        <if_stmt pos:start="3625:9" pos:end="3628:30"><if pos:start="3625:9" pos:end="3626:30">if <condition pos:start="3625:12" pos:end="3625:26">(<expr pos:start="3625:13" pos:end="3625:25"><operator pos:start="3625:13" pos:end="3625:13">*</operator><name pos:start="3625:14" pos:end="3625:15">ps</name> <operator pos:start="3625:17" pos:end="3625:18">==</operator> <name pos:start="3625:20" pos:end="3625:25">stream</name></expr>)</condition><block type="pseudo" pos:start="3626:13" pos:end="3626:30"><block_content pos:start="3626:13" pos:end="3626:30">
            <expr_stmt pos:start="3626:13" pos:end="3626:30"><expr pos:start="3626:13" pos:end="3626:29"><operator pos:start="3626:13" pos:end="3626:13">*</operator><name pos:start="3626:14" pos:end="3626:15">ps</name> <operator pos:start="3626:17" pos:end="3626:17">=</operator> <name pos:start="3626:19" pos:end="3626:29"><operator pos:start="3626:19" pos:end="3626:19">(</operator><operator pos:start="3626:20" pos:end="3626:20">*</operator><name pos:start="3626:21" pos:end="3626:22">ps</name><operator pos:start="3626:23" pos:end="3626:23">)</operator><operator pos:start="3626:24" pos:end="3626:25">-&gt;</operator><name pos:start="3626:26" pos:end="3626:29">next</name></name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="3627:9" pos:end="3628:30">else<block type="pseudo" pos:start="3628:13" pos:end="3628:30"><block_content pos:start="3628:13" pos:end="3628:30">
            <expr_stmt pos:start="3628:13" pos:end="3628:30"><expr pos:start="3628:13" pos:end="3628:29"><name pos:start="3628:13" pos:end="3628:14">ps</name> <operator pos:start="3628:16" pos:end="3628:16">=</operator> <operator pos:start="3628:18" pos:end="3628:18">&amp;</operator><name pos:start="3628:19" pos:end="3628:29"><operator pos:start="3628:19" pos:end="3628:19">(</operator><operator pos:start="3628:20" pos:end="3628:20">*</operator><name pos:start="3628:21" pos:end="3628:22">ps</name><operator pos:start="3628:23" pos:end="3628:23">)</operator><operator pos:start="3628:24" pos:end="3628:25">-&gt;</operator><name pos:start="3628:26" pos:end="3628:29">next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block" pos:start="3632:1" pos:end="3632:47">/* compute the needed AVStream for each file */</comment>
<function pos:start="3633:1" pos:end="3689:1"><type pos:start="3633:1" pos:end="3633:11"><specifier pos:start="3633:1" pos:end="3633:6">static</specifier> <name pos:start="3633:8" pos:end="3633:11">void</name></type> <name pos:start="3633:13" pos:end="3633:30">build_file_streams</name><parameter_list pos:start="3633:31" pos:end="3633:36">(<parameter pos:start="3633:32" pos:end="3633:35"><decl pos:start="3633:32" pos:end="3633:35"><type pos:start="3633:32" pos:end="3633:35"><name pos:start="3633:32" pos:end="3633:35">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="3634:1" pos:end="3689:1">{<block_content pos:start="3635:5" pos:end="3688:5">
    <decl_stmt pos:start="3635:5" pos:end="3635:27"><decl pos:start="3635:5" pos:end="3635:26"><type pos:start="3635:5" pos:end="3635:20"><name pos:start="3635:5" pos:end="3635:18">FFServerStream</name> <modifier pos:start="3635:20" pos:end="3635:20">*</modifier></type><name pos:start="3635:21" pos:end="3635:26">stream</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3636:5" pos:end="3636:28"><decl pos:start="3636:5" pos:end="3636:27"><type pos:start="3636:5" pos:end="3636:21"><name pos:start="3636:5" pos:end="3636:19">AVFormatContext</name> <modifier pos:start="3636:21" pos:end="3636:21">*</modifier></type><name pos:start="3636:22" pos:end="3636:27">infile</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3637:5" pos:end="3637:15"><decl pos:start="3637:5" pos:end="3637:9"><type pos:start="3637:5" pos:end="3637:7"><name pos:start="3637:5" pos:end="3637:7">int</name></type> <name pos:start="3637:9" pos:end="3637:9">i</name></decl>, <decl pos:start="3637:12" pos:end="3637:14"><type ref="prev" pos:start="3637:5" pos:end="3637:7"/><name pos:start="3637:12" pos:end="3637:14">ret</name></decl>;</decl_stmt>

    <comment type="block" pos:start="3639:5" pos:end="3639:28">/* gather all streams */</comment>
    <for pos:start="3640:5" pos:end="3688:5">for<control pos:start="3640:8" pos:end="3640:68">(<init pos:start="3640:9" pos:end="3640:37"><expr pos:start="3640:9" pos:end="3640:36"><name pos:start="3640:9" pos:end="3640:14">stream</name> <operator pos:start="3640:16" pos:end="3640:16">=</operator> <name pos:start="3640:18" pos:end="3640:36"><name pos:start="3640:18" pos:end="3640:23">config</name><operator pos:start="3640:24" pos:end="3640:24">.</operator><name pos:start="3640:25" pos:end="3640:36">first_stream</name></name></expr>;</init> <condition pos:start="3640:39" pos:end="3640:45"><expr pos:start="3640:39" pos:end="3640:44"><name pos:start="3640:39" pos:end="3640:44">stream</name></expr>;</condition> <incr pos:start="3640:47" pos:end="3640:67"><expr pos:start="3640:47" pos:end="3640:67"><name pos:start="3640:47" pos:end="3640:52">stream</name> <operator pos:start="3640:54" pos:end="3640:54">=</operator> <name pos:start="3640:56" pos:end="3640:67"><name pos:start="3640:56" pos:end="3640:61">stream</name><operator pos:start="3640:62" pos:end="3640:63">-&gt;</operator><name pos:start="3640:64" pos:end="3640:67">next</name></name></expr></incr>)</control> <block pos:start="3640:70" pos:end="3688:5">{<block_content pos:start="3641:9" pos:end="3687:9">
        <expr_stmt pos:start="3641:9" pos:end="3641:22"><expr pos:start="3641:9" pos:end="3641:21"><name pos:start="3641:9" pos:end="3641:14">infile</name> <operator pos:start="3641:16" pos:end="3641:16">=</operator> <name pos:start="3641:18" pos:end="3641:21">NULL</name></expr>;</expr_stmt>

        <if_stmt pos:start="3643:9" pos:end="3644:21"><if pos:start="3643:9" pos:end="3644:21">if <condition pos:start="3643:12" pos:end="3643:68">(<expr pos:start="3643:13" pos:end="3643:67"><name pos:start="3643:13" pos:end="3643:31"><name pos:start="3643:13" pos:end="3643:18">stream</name><operator pos:start="3643:19" pos:end="3643:20">-&gt;</operator><name pos:start="3643:21" pos:end="3643:31">stream_type</name></name> <operator pos:start="3643:33" pos:end="3643:34">!=</operator> <name pos:start="3643:36" pos:end="3643:51">STREAM_TYPE_LIVE</name> <operator pos:start="3643:53" pos:end="3643:54">||</operator> <name pos:start="3643:56" pos:end="3643:67"><name pos:start="3643:56" pos:end="3643:61">stream</name><operator pos:start="3643:62" pos:end="3643:63">-&gt;</operator><name pos:start="3643:64" pos:end="3643:67">feed</name></name></expr>)</condition><block type="pseudo" pos:start="3644:13" pos:end="3644:21"><block_content pos:start="3644:13" pos:end="3644:21">
            <continue pos:start="3644:13" pos:end="3644:21">continue;</continue></block_content></block></if></if_stmt>

        <comment type="block" pos:start="3646:9" pos:end="3646:42">/* the stream comes from a file */</comment>
        <comment type="block" pos:start="3647:9" pos:end="3647:34">/* try to open the file */</comment>
        <comment type="block" pos:start="3648:9" pos:end="3648:25">/* open stream */</comment>


        <comment type="block" pos:start="3651:9" pos:end="3652:50">/* specific case: if transport stream output to RTP,
         * we use a raw transport stream reader */</comment>
        <if_stmt pos:start="3653:9" pos:end="3654:73"><if pos:start="3653:9" pos:end="3654:73">if <condition pos:start="3653:12" pos:end="3653:61">(<expr pos:start="3653:13" pos:end="3653:60"><name pos:start="3653:13" pos:end="3653:23"><name pos:start="3653:13" pos:end="3653:18">stream</name><operator pos:start="3653:19" pos:end="3653:20">-&gt;</operator><name pos:start="3653:21" pos:end="3653:23">fmt</name></name> <operator pos:start="3653:25" pos:end="3653:26">&amp;&amp;</operator> <operator pos:start="3653:28" pos:end="3653:28">!</operator><call pos:start="3653:29" pos:end="3653:60"><name pos:start="3653:29" pos:end="3653:34">strcmp</name><argument_list pos:start="3653:35" pos:end="3653:60">(<argument pos:start="3653:36" pos:end="3653:52"><expr pos:start="3653:36" pos:end="3653:52"><name pos:start="3653:36" pos:end="3653:52"><name pos:start="3653:36" pos:end="3653:41">stream</name><operator pos:start="3653:42" pos:end="3653:43">-&gt;</operator><name pos:start="3653:44" pos:end="3653:46">fmt</name><operator pos:start="3653:47" pos:end="3653:48">-&gt;</operator><name pos:start="3653:49" pos:end="3653:52">name</name></name></expr></argument>, <argument pos:start="3653:55" pos:end="3653:59"><expr pos:start="3653:55" pos:end="3653:59"><literal type="string" pos:start="3653:55" pos:end="3653:59">"rtp"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3654:13" pos:end="3654:73"><block_content pos:start="3654:13" pos:end="3654:73">
            <expr_stmt pos:start="3654:13" pos:end="3654:73"><expr pos:start="3654:13" pos:end="3654:72"><call pos:start="3654:13" pos:end="3654:72"><name pos:start="3654:13" pos:end="3654:23">av_dict_set</name><argument_list pos:start="3654:24" pos:end="3654:72">(<argument pos:start="3654:25" pos:end="3654:40"><expr pos:start="3654:25" pos:end="3654:40"><operator pos:start="3654:25" pos:end="3654:25">&amp;</operator><name pos:start="3654:26" pos:end="3654:40"><name pos:start="3654:26" pos:end="3654:31">stream</name><operator pos:start="3654:32" pos:end="3654:33">-&gt;</operator><name pos:start="3654:34" pos:end="3654:40">in_opts</name></name></expr></argument>, <argument pos:start="3654:43" pos:end="3654:63"><expr pos:start="3654:43" pos:end="3654:63"><literal type="string" pos:start="3654:43" pos:end="3654:63">"mpeg2ts_compute_pcr"</literal></expr></argument>, <argument pos:start="3654:66" pos:end="3654:68"><expr pos:start="3654:66" pos:end="3654:68"><literal type="string" pos:start="3654:66" pos:end="3654:68">"1"</literal></expr></argument>, <argument pos:start="3654:71" pos:end="3654:71"><expr pos:start="3654:71" pos:end="3654:71"><literal type="number" pos:start="3654:71" pos:end="3654:71">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="3656:9" pos:end="3660:9"><if pos:start="3656:9" pos:end="3660:9">if <condition pos:start="3656:12" pos:end="3656:38">(<expr pos:start="3656:13" pos:end="3656:37"><operator pos:start="3656:13" pos:end="3656:13">!</operator><name pos:start="3656:14" pos:end="3656:37"><name pos:start="3656:14" pos:end="3656:19">stream</name><operator pos:start="3656:20" pos:end="3656:21">-&gt;</operator><name pos:start="3656:22" pos:end="3656:34">feed_filename</name><index pos:start="3656:35" pos:end="3656:37">[<expr pos:start="3656:36" pos:end="3656:36"><literal type="number" pos:start="3656:36" pos:end="3656:36">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="3656:40" pos:end="3660:9">{<block_content pos:start="3657:13" pos:end="3659:22">
            <expr_stmt pos:start="3657:13" pos:end="3658:39"><expr pos:start="3657:13" pos:end="3658:38"><call pos:start="3657:13" pos:end="3658:38"><name pos:start="3657:13" pos:end="3657:20">http_log</name><argument_list pos:start="3657:21" pos:end="3658:38">(<argument pos:start="3657:22" pos:end="3657:62"><expr pos:start="3657:22" pos:end="3657:62"><literal type="string" pos:start="3657:22" pos:end="3657:62">"Unspecified feed file for stream '%s'\n"</literal></expr></argument>,
                     <argument pos:start="3658:22" pos:end="3658:37"><expr pos:start="3658:22" pos:end="3658:37"><name pos:start="3658:22" pos:end="3658:37"><name pos:start="3658:22" pos:end="3658:27">stream</name><operator pos:start="3658:28" pos:end="3658:29">-&gt;</operator><name pos:start="3658:30" pos:end="3658:37">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto pos:start="3659:13" pos:end="3659:22">goto <name pos:start="3659:18" pos:end="3659:21">fail</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="3662:9" pos:end="3663:58"><expr pos:start="3662:9" pos:end="3663:57"><call pos:start="3662:9" pos:end="3663:57"><name pos:start="3662:9" pos:end="3662:16">http_log</name><argument_list pos:start="3662:17" pos:end="3663:57">(<argument pos:start="3662:18" pos:end="3662:59"><expr pos:start="3662:18" pos:end="3662:59"><literal type="string" pos:start="3662:18" pos:end="3662:59">"Opening feed file '%s' for stream '%s'\n"</literal></expr></argument>,
                 <argument pos:start="3663:18" pos:end="3663:38"><expr pos:start="3663:18" pos:end="3663:38"><name pos:start="3663:18" pos:end="3663:38"><name pos:start="3663:18" pos:end="3663:23">stream</name><operator pos:start="3663:24" pos:end="3663:25">-&gt;</operator><name pos:start="3663:26" pos:end="3663:38">feed_filename</name></name></expr></argument>, <argument pos:start="3663:41" pos:end="3663:56"><expr pos:start="3663:41" pos:end="3663:56"><name pos:start="3663:41" pos:end="3663:56"><name pos:start="3663:41" pos:end="3663:46">stream</name><operator pos:start="3663:47" pos:end="3663:48">-&gt;</operator><name pos:start="3663:49" pos:end="3663:56">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3665:9" pos:end="3666:66"><expr pos:start="3665:9" pos:end="3666:65"><name pos:start="3665:9" pos:end="3665:11">ret</name> <operator pos:start="3665:13" pos:end="3665:13">=</operator> <call pos:start="3665:15" pos:end="3666:65"><name pos:start="3665:15" pos:end="3665:33">avformat_open_input</name><argument_list pos:start="3665:34" pos:end="3666:65">(<argument pos:start="3665:35" pos:end="3665:41"><expr pos:start="3665:35" pos:end="3665:41"><operator pos:start="3665:35" pos:end="3665:35">&amp;</operator><name pos:start="3665:36" pos:end="3665:41">infile</name></expr></argument>, <argument pos:start="3665:44" pos:end="3665:64"><expr pos:start="3665:44" pos:end="3665:64"><name pos:start="3665:44" pos:end="3665:64"><name pos:start="3665:44" pos:end="3665:49">stream</name><operator pos:start="3665:50" pos:end="3665:51">-&gt;</operator><name pos:start="3665:52" pos:end="3665:64">feed_filename</name></name></expr></argument>,
                                  <argument pos:start="3666:35" pos:end="3666:46"><expr pos:start="3666:35" pos:end="3666:46"><name pos:start="3666:35" pos:end="3666:46"><name pos:start="3666:35" pos:end="3666:40">stream</name><operator pos:start="3666:41" pos:end="3666:42">-&gt;</operator><name pos:start="3666:43" pos:end="3666:46">ifmt</name></name></expr></argument>, <argument pos:start="3666:49" pos:end="3666:64"><expr pos:start="3666:49" pos:end="3666:64"><operator pos:start="3666:49" pos:end="3666:49">&amp;</operator><name pos:start="3666:50" pos:end="3666:64"><name pos:start="3666:50" pos:end="3666:55">stream</name><operator pos:start="3666:56" pos:end="3666:57">-&gt;</operator><name pos:start="3666:58" pos:end="3666:64">in_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="3667:9" pos:end="3687:9"><if pos:start="3667:9" pos:end="3673:9">if <condition pos:start="3667:12" pos:end="3667:20">(<expr pos:start="3667:13" pos:end="3667:19"><name pos:start="3667:13" pos:end="3667:15">ret</name> <operator pos:start="3667:17" pos:end="3667:17">&lt;</operator> <literal type="number" pos:start="3667:19" pos:end="3667:19">0</literal></expr>)</condition> <block pos:start="3667:22" pos:end="3673:9">{<block_content pos:start="3668:13" pos:end="3672:34">
            <expr_stmt pos:start="3668:13" pos:end="3669:38"><expr pos:start="3668:13" pos:end="3669:37"><call pos:start="3668:13" pos:end="3669:37"><name pos:start="3668:13" pos:end="3668:20">http_log</name><argument_list pos:start="3668:21" pos:end="3669:37">(<argument pos:start="3668:22" pos:end="3668:48"><expr pos:start="3668:22" pos:end="3668:48"><literal type="string" pos:start="3668:22" pos:end="3668:48">"Could not open '%s': %s\n"</literal></expr></argument>, <argument pos:start="3668:51" pos:end="3668:71"><expr pos:start="3668:51" pos:end="3668:71"><name pos:start="3668:51" pos:end="3668:71"><name pos:start="3668:51" pos:end="3668:56">stream</name><operator pos:start="3668:57" pos:end="3668:58">-&gt;</operator><name pos:start="3668:59" pos:end="3668:71">feed_filename</name></name></expr></argument>,
                     <argument pos:start="3669:22" pos:end="3669:36"><expr pos:start="3669:22" pos:end="3669:36"><call pos:start="3669:22" pos:end="3669:36"><name pos:start="3669:22" pos:end="3669:31">av_err2str</name><argument_list pos:start="3669:32" pos:end="3669:36">(<argument pos:start="3669:33" pos:end="3669:35"><expr pos:start="3669:33" pos:end="3669:35"><name pos:start="3669:33" pos:end="3669:35">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="3670:13" pos:end="3670:66">/* remove stream (no need to spend more time on it) */</comment>
        <label pos:start="3671:9" pos:end="3671:13"><name pos:start="3671:9" pos:end="3671:12">fail</name>:</label>
            <expr_stmt pos:start="3672:13" pos:end="3672:34"><expr pos:start="3672:13" pos:end="3672:33"><call pos:start="3672:13" pos:end="3672:33"><name pos:start="3672:13" pos:end="3672:25">remove_stream</name><argument_list pos:start="3672:26" pos:end="3672:33">(<argument pos:start="3672:27" pos:end="3672:32"><expr pos:start="3672:27" pos:end="3672:32"><name pos:start="3672:27" pos:end="3672:32">stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="3673:11" pos:end="3687:9">else <block pos:start="3673:16" pos:end="3687:9">{<block_content pos:start="3676:13" pos:end="3686:42">
            <comment type="block" pos:start="3674:13" pos:end="3675:26">/* find all the AVStreams inside and reference them in
             * 'stream' */</comment>
            <if_stmt pos:start="3676:13" pos:end="3681:13"><if pos:start="3676:13" pos:end="3681:13">if <condition pos:start="3676:16" pos:end="3676:60">(<expr pos:start="3676:17" pos:end="3676:59"><call pos:start="3676:17" pos:end="3676:55"><name pos:start="3676:17" pos:end="3676:41">avformat_find_stream_info</name><argument_list pos:start="3676:42" pos:end="3676:55">(<argument pos:start="3676:43" pos:end="3676:48"><expr pos:start="3676:43" pos:end="3676:48"><name pos:start="3676:43" pos:end="3676:48">infile</name></expr></argument>, <argument pos:start="3676:51" pos:end="3676:54"><expr pos:start="3676:51" pos:end="3676:54"><name pos:start="3676:51" pos:end="3676:54">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="3676:57" pos:end="3676:57">&lt;</operator> <literal type="number" pos:start="3676:59" pos:end="3676:59">0</literal></expr>)</condition> <block pos:start="3676:62" pos:end="3681:13">{<block_content pos:start="3677:17" pos:end="3680:26">
                <expr_stmt pos:start="3677:17" pos:end="3678:48"><expr pos:start="3677:17" pos:end="3678:47"><call pos:start="3677:17" pos:end="3678:47"><name pos:start="3677:17" pos:end="3677:24">http_log</name><argument_list pos:start="3677:25" pos:end="3678:47">(<argument pos:start="3677:26" pos:end="3677:70"><expr pos:start="3677:26" pos:end="3677:70"><literal type="string" pos:start="3677:26" pos:end="3677:70">"Could not find codec parameters from '%s'\n"</literal></expr></argument>,
                         <argument pos:start="3678:26" pos:end="3678:46"><expr pos:start="3678:26" pos:end="3678:46"><name pos:start="3678:26" pos:end="3678:46"><name pos:start="3678:26" pos:end="3678:31">stream</name><operator pos:start="3678:32" pos:end="3678:33">-&gt;</operator><name pos:start="3678:34" pos:end="3678:46">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3679:17" pos:end="3679:46"><expr pos:start="3679:17" pos:end="3679:45"><call pos:start="3679:17" pos:end="3679:45"><name pos:start="3679:17" pos:end="3679:36">avformat_close_input</name><argument_list pos:start="3679:37" pos:end="3679:45">(<argument pos:start="3679:38" pos:end="3679:44"><expr pos:start="3679:38" pos:end="3679:44"><operator pos:start="3679:38" pos:end="3679:38">&amp;</operator><name pos:start="3679:39" pos:end="3679:44">infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="3680:17" pos:end="3680:26">goto <name pos:start="3680:22" pos:end="3680:25">fail</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <for pos:start="3683:13" pos:end="3684:69">for<control pos:start="3683:16" pos:end="3683:45">(<init pos:start="3683:17" pos:end="3683:20"><expr pos:start="3683:17" pos:end="3683:19"><name pos:start="3683:17" pos:end="3683:17">i</name><operator pos:start="3683:18" pos:end="3683:18">=</operator><literal type="number" pos:start="3683:19" pos:end="3683:19">0</literal></expr>;</init><condition pos:start="3683:21" pos:end="3683:41"><expr pos:start="3683:21" pos:end="3683:40"><name pos:start="3683:21" pos:end="3683:21">i</name><operator pos:start="3683:22" pos:end="3683:22">&lt;</operator><name pos:start="3683:23" pos:end="3683:40"><name pos:start="3683:23" pos:end="3683:28">infile</name><operator pos:start="3683:29" pos:end="3683:30">-&gt;</operator><name pos:start="3683:31" pos:end="3683:40">nb_streams</name></name></expr>;</condition><incr pos:start="3683:42" pos:end="3683:44"><expr pos:start="3683:42" pos:end="3683:44"><name pos:start="3683:42" pos:end="3683:42">i</name><operator pos:start="3683:43" pos:end="3683:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="3684:17" pos:end="3684:69"><block_content pos:start="3684:17" pos:end="3684:69">
                <expr_stmt pos:start="3684:17" pos:end="3684:69"><expr pos:start="3684:17" pos:end="3684:68"><call pos:start="3684:17" pos:end="3684:68"><name pos:start="3684:17" pos:end="3684:30">add_av_stream1</name><argument_list pos:start="3684:31" pos:end="3684:68">(<argument pos:start="3684:32" pos:end="3684:37"><expr pos:start="3684:32" pos:end="3684:37"><name pos:start="3684:32" pos:end="3684:37">stream</name></expr></argument>, <argument pos:start="3684:40" pos:end="3684:64"><expr pos:start="3684:40" pos:end="3684:64"><name pos:start="3684:40" pos:end="3684:57"><name pos:start="3684:40" pos:end="3684:45">infile</name><operator pos:start="3684:46" pos:end="3684:47">-&gt;</operator><name pos:start="3684:48" pos:end="3684:54">streams</name><index pos:start="3684:55" pos:end="3684:57">[<expr pos:start="3684:56" pos:end="3684:56"><name pos:start="3684:56" pos:end="3684:56">i</name></expr>]</index></name><operator pos:start="3684:58" pos:end="3684:59">-&gt;</operator><name pos:start="3684:60" pos:end="3684:64">codec</name></expr></argument>, <argument pos:start="3684:67" pos:end="3684:67"><expr pos:start="3684:67" pos:end="3684:67"><literal type="number" pos:start="3684:67" pos:end="3684:67">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="3686:13" pos:end="3686:42"><expr pos:start="3686:13" pos:end="3686:41"><call pos:start="3686:13" pos:end="3686:41"><name pos:start="3686:13" pos:end="3686:32">avformat_close_input</name><argument_list pos:start="3686:33" pos:end="3686:41">(<argument pos:start="3686:34" pos:end="3686:40"><expr pos:start="3686:34" pos:end="3686:40"><operator pos:start="3686:34" pos:end="3686:34">&amp;</operator><name pos:start="3686:35" pos:end="3686:40">infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function pos:start="3691:1" pos:end="3723:1"><type pos:start="3691:1" pos:end="3692:3"><specifier pos:start="3691:1" pos:end="3691:6">static</specifier> <specifier pos:start="3691:8" pos:end="3691:13">inline</specifier>
<name pos:start="3692:1" pos:end="3692:3">int</name></type> <name pos:start="3692:5" pos:end="3692:21">check_codec_match</name><parameter_list pos:start="3692:22" pos:end="3692:70">(<parameter pos:start="3692:23" pos:end="3692:42"><decl pos:start="3692:23" pos:end="3692:42"><type pos:start="3692:23" pos:end="3692:42"><name pos:start="3692:23" pos:end="3692:37">LayeredAVStream</name> <modifier pos:start="3692:39" pos:end="3692:39">*</modifier></type><name pos:start="3692:40" pos:end="3692:42">ccf</name></decl></parameter>, <parameter pos:start="3692:45" pos:end="3692:57"><decl pos:start="3692:45" pos:end="3692:57"><type pos:start="3692:45" pos:end="3692:57"><name pos:start="3692:45" pos:end="3692:52">AVStream</name> <modifier pos:start="3692:54" pos:end="3692:54">*</modifier></type><name pos:start="3692:55" pos:end="3692:57">ccs</name></decl></parameter>, <parameter pos:start="3692:60" pos:end="3692:69"><decl pos:start="3692:60" pos:end="3692:69"><type pos:start="3692:60" pos:end="3692:69"><name pos:start="3692:60" pos:end="3692:62">int</name></type> <name pos:start="3692:64" pos:end="3692:69">stream</name></decl></parameter>)</parameter_list>
<block pos:start="3693:1" pos:end="3723:1">{<block_content pos:start="3694:5" pos:end="3722:19">
    <decl_stmt pos:start="3694:5" pos:end="3698:0"><decl pos:start="3694:5" pos:end="3694:19"><type pos:start="3694:5" pos:end="3694:7"><name pos:start="3694:5" pos:end="3694:7">int</name></type> <name pos:start="3694:9" pos:end="3694:15">matches</name> <init pos:start="3694:17" pos:end="3694:19">= <expr pos:start="3694:19" pos:end="3694:19"><literal type="number" pos:start="3694:19" pos:end="3694:19">1</literal></expr></init></decl>;</decl_stmt>

<comment type="block" pos:start="3696:1" pos:end="3696:49">/* FIXME: Missed check on AVCodecContext.flags */</comment>
<cpp:define pos:start="3697:1" pos:end="3697:62">#<cpp:directive pos:start="3697:2" pos:end="3697:7">define</cpp:directive> <cpp:macro pos:start="3697:9" pos:end="3697:22"><name pos:start="3697:9" pos:end="3697:19">CHECK_CODEC</name><parameter_list pos:start="3697:20" pos:end="3697:22">(<parameter pos:start="3697:21" pos:end="3697:21"><type pos:start="3697:21" pos:end="3697:21"><name pos:start="3697:21" pos:end="3697:21">x</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value pos:start="3697:25" pos:end="3697:62">(ccf-&gt;codecpar-&gt;x != ccs-&gt;codecpar-&gt;x)</cpp:value></cpp:define>
    <if_stmt pos:start="3698:5" pos:end="3720:5"><if pos:start="3698:5" pos:end="3701:5">if <condition pos:start="3698:8" pos:end="3698:57">(<expr pos:start="3698:9" pos:end="3698:56"><call pos:start="3698:9" pos:end="3698:29"><name pos:start="3698:9" pos:end="3698:19">CHECK_CODEC</name><argument_list pos:start="3698:20" pos:end="3698:29">(<argument pos:start="3698:21" pos:end="3698:28"><expr pos:start="3698:21" pos:end="3698:28"><name pos:start="3698:21" pos:end="3698:28">codec_id</name></expr></argument>)</argument_list></call> <operator pos:start="3698:31" pos:end="3698:32">||</operator> <call pos:start="3698:34" pos:end="3698:56"><name pos:start="3698:34" pos:end="3698:44">CHECK_CODEC</name><argument_list pos:start="3698:45" pos:end="3698:56">(<argument pos:start="3698:46" pos:end="3698:55"><expr pos:start="3698:46" pos:end="3698:55"><name pos:start="3698:46" pos:end="3698:55">codec_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3698:59" pos:end="3701:5">{<block_content pos:start="3699:9" pos:end="3700:20">
        <expr_stmt pos:start="3699:9" pos:end="3699:64"><expr pos:start="3699:9" pos:end="3699:63"><call pos:start="3699:9" pos:end="3699:63"><name pos:start="3699:9" pos:end="3699:16">http_log</name><argument_list pos:start="3699:17" pos:end="3699:63">(<argument pos:start="3699:18" pos:end="3699:54"><expr pos:start="3699:18" pos:end="3699:54"><literal type="string" pos:start="3699:18" pos:end="3699:54">"Codecs do not match for stream %d\n"</literal></expr></argument>, <argument pos:start="3699:57" pos:end="3699:62"><expr pos:start="3699:57" pos:end="3699:62"><name pos:start="3699:57" pos:end="3699:62">stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3700:9" pos:end="3700:20"><expr pos:start="3700:9" pos:end="3700:19"><name pos:start="3700:9" pos:end="3700:15">matches</name> <operator pos:start="3700:17" pos:end="3700:17">=</operator> <literal type="number" pos:start="3700:19" pos:end="3700:19">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="3701:7" pos:end="3704:5">else if <condition pos:start="3701:15" pos:end="3701:37">(<expr pos:start="3701:16" pos:end="3701:36"><call pos:start="3701:16" pos:end="3701:36"><name pos:start="3701:16" pos:end="3701:26">CHECK_CODEC</name><argument_list pos:start="3701:27" pos:end="3701:36">(<argument pos:start="3701:28" pos:end="3701:35"><expr pos:start="3701:28" pos:end="3701:35"><name pos:start="3701:28" pos:end="3701:35">bit_rate</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3701:39" pos:end="3704:5">{<block_content pos:start="3702:9" pos:end="3703:20">
        <expr_stmt pos:start="3702:9" pos:end="3702:72"><expr pos:start="3702:9" pos:end="3702:71"><call pos:start="3702:9" pos:end="3702:71"><name pos:start="3702:9" pos:end="3702:16">http_log</name><argument_list pos:start="3702:17" pos:end="3702:71">(<argument pos:start="3702:18" pos:end="3702:62"><expr pos:start="3702:18" pos:end="3702:62"><literal type="string" pos:start="3702:18" pos:end="3702:62">"Codec bitrates do not match for stream %d\n"</literal></expr></argument>, <argument pos:start="3702:65" pos:end="3702:70"><expr pos:start="3702:65" pos:end="3702:70"><name pos:start="3702:65" pos:end="3702:70">stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3703:9" pos:end="3703:20"><expr pos:start="3703:9" pos:end="3703:19"><name pos:start="3703:9" pos:end="3703:15">matches</name> <operator pos:start="3703:17" pos:end="3703:17">=</operator> <literal type="number" pos:start="3703:19" pos:end="3703:19">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="3704:7" pos:end="3710:5">else if <condition pos:start="3704:15" pos:end="3704:63">(<expr pos:start="3704:16" pos:end="3704:62"><name pos:start="3704:16" pos:end="3704:40"><name pos:start="3704:16" pos:end="3704:18">ccf</name><operator pos:start="3704:19" pos:end="3704:20">-&gt;</operator><name pos:start="3704:21" pos:end="3704:28">codecpar</name><operator pos:start="3704:29" pos:end="3704:30">-&gt;</operator><name pos:start="3704:31" pos:end="3704:40">codec_type</name></name> <operator pos:start="3704:42" pos:end="3704:43">==</operator> <name pos:start="3704:45" pos:end="3704:62">AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block pos:start="3704:65" pos:end="3710:5">{<block_content pos:start="3705:9" pos:end="3709:9">
        <if_stmt pos:start="3705:9" pos:end="3709:9"><if pos:start="3705:9" pos:end="3709:9">if <condition pos:start="3705:12" pos:end="3706:54">(<expr pos:start="3705:13" pos:end="3706:53"><call pos:start="3705:13" pos:end="3705:52"><name pos:start="3705:13" pos:end="3705:20">av_cmp_q</name><argument_list pos:start="3705:21" pos:end="3705:52">(<argument pos:start="3705:22" pos:end="3705:35"><expr pos:start="3705:22" pos:end="3705:35"><name pos:start="3705:22" pos:end="3705:35"><name pos:start="3705:22" pos:end="3705:24">ccf</name><operator pos:start="3705:25" pos:end="3705:26">-&gt;</operator><name pos:start="3705:27" pos:end="3705:35">time_base</name></name></expr></argument>, <argument pos:start="3705:38" pos:end="3705:51"><expr pos:start="3705:38" pos:end="3705:51"><name pos:start="3705:38" pos:end="3705:51"><name pos:start="3705:38" pos:end="3705:40">ccs</name><operator pos:start="3705:41" pos:end="3705:42">-&gt;</operator><name pos:start="3705:43" pos:end="3705:51">time_base</name></name></expr></argument>)</argument_list></call> <operator pos:start="3705:54" pos:end="3705:55">||</operator>
            <call pos:start="3706:13" pos:end="3706:30"><name pos:start="3706:13" pos:end="3706:23">CHECK_CODEC</name><argument_list pos:start="3706:24" pos:end="3706:30">(<argument pos:start="3706:25" pos:end="3706:29"><expr pos:start="3706:25" pos:end="3706:29"><name pos:start="3706:25" pos:end="3706:29">width</name></expr></argument>)</argument_list></call> <operator pos:start="3706:32" pos:end="3706:33">||</operator> <call pos:start="3706:35" pos:end="3706:53"><name pos:start="3706:35" pos:end="3706:45">CHECK_CODEC</name><argument_list pos:start="3706:46" pos:end="3706:53">(<argument pos:start="3706:47" pos:end="3706:52"><expr pos:start="3706:47" pos:end="3706:52"><name pos:start="3706:47" pos:end="3706:52">height</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3706:56" pos:end="3709:9">{<block_content pos:start="3707:13" pos:end="3708:24">
            <expr_stmt pos:start="3707:13" pos:end="3707:94"><expr pos:start="3707:13" pos:end="3707:93"><call pos:start="3707:13" pos:end="3707:93"><name pos:start="3707:13" pos:end="3707:20">http_log</name><argument_list pos:start="3707:21" pos:end="3707:93">(<argument pos:start="3707:22" pos:end="3707:84"><expr pos:start="3707:22" pos:end="3707:84"><literal type="string" pos:start="3707:22" pos:end="3707:84">"Codec width, height or framerate do not match for stream %d\n"</literal></expr></argument>, <argument pos:start="3707:87" pos:end="3707:92"><expr pos:start="3707:87" pos:end="3707:92"><name pos:start="3707:87" pos:end="3707:92">stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3708:13" pos:end="3708:24"><expr pos:start="3708:13" pos:end="3708:23"><name pos:start="3708:13" pos:end="3708:19">matches</name> <operator pos:start="3708:21" pos:end="3708:21">=</operator> <literal type="number" pos:start="3708:23" pos:end="3708:23">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="3710:7" pos:end="3717:5">else if <condition pos:start="3710:15" pos:end="3710:63">(<expr pos:start="3710:16" pos:end="3710:62"><name pos:start="3710:16" pos:end="3710:40"><name pos:start="3710:16" pos:end="3710:18">ccf</name><operator pos:start="3710:19" pos:end="3710:20">-&gt;</operator><name pos:start="3710:21" pos:end="3710:28">codecpar</name><operator pos:start="3710:29" pos:end="3710:30">-&gt;</operator><name pos:start="3710:31" pos:end="3710:40">codec_type</name></name> <operator pos:start="3710:42" pos:end="3710:43">==</operator> <name pos:start="3710:45" pos:end="3710:62">AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block pos:start="3710:65" pos:end="3717:5">{<block_content pos:start="3711:9" pos:end="3716:9">
        <if_stmt pos:start="3711:9" pos:end="3716:9"><if pos:start="3711:9" pos:end="3716:9">if <condition pos:start="3711:12" pos:end="3713:36">(<expr pos:start="3711:13" pos:end="3713:35"><call pos:start="3711:13" pos:end="3711:36"><name pos:start="3711:13" pos:end="3711:23">CHECK_CODEC</name><argument_list pos:start="3711:24" pos:end="3711:36">(<argument pos:start="3711:25" pos:end="3711:35"><expr pos:start="3711:25" pos:end="3711:35"><name pos:start="3711:25" pos:end="3711:35">sample_rate</name></expr></argument>)</argument_list></call> <operator pos:start="3711:38" pos:end="3711:39">||</operator>
            <call pos:start="3712:13" pos:end="3712:33"><name pos:start="3712:13" pos:end="3712:23">CHECK_CODEC</name><argument_list pos:start="3712:24" pos:end="3712:33">(<argument pos:start="3712:25" pos:end="3712:32"><expr pos:start="3712:25" pos:end="3712:32"><name pos:start="3712:25" pos:end="3712:32">channels</name></expr></argument>)</argument_list></call> <operator pos:start="3712:35" pos:end="3712:36">||</operator>
            <call pos:start="3713:13" pos:end="3713:35"><name pos:start="3713:13" pos:end="3713:23">CHECK_CODEC</name><argument_list pos:start="3713:24" pos:end="3713:35">(<argument pos:start="3713:25" pos:end="3713:34"><expr pos:start="3713:25" pos:end="3713:34"><name pos:start="3713:25" pos:end="3713:34">frame_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3713:38" pos:end="3716:9">{<block_content pos:start="3714:13" pos:end="3715:24">
            <expr_stmt pos:start="3714:13" pos:end="3714:101"><expr pos:start="3714:13" pos:end="3714:100"><call pos:start="3714:13" pos:end="3714:100"><name pos:start="3714:13" pos:end="3714:20">http_log</name><argument_list pos:start="3714:21" pos:end="3714:100">(<argument pos:start="3714:22" pos:end="3714:91"><expr pos:start="3714:22" pos:end="3714:91"><literal type="string" pos:start="3714:22" pos:end="3714:91">"Codec sample_rate, channels, frame_size do not match for stream %d\n"</literal></expr></argument>, <argument pos:start="3714:94" pos:end="3714:99"><expr pos:start="3714:94" pos:end="3714:99"><name pos:start="3714:94" pos:end="3714:99">stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3715:13" pos:end="3715:24"><expr pos:start="3715:13" pos:end="3715:23"><name pos:start="3715:13" pos:end="3715:19">matches</name> <operator pos:start="3715:21" pos:end="3715:21">=</operator> <literal type="number" pos:start="3715:23" pos:end="3715:23">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else pos:start="3717:7" pos:end="3720:5">else <block pos:start="3717:12" pos:end="3720:5">{<block_content pos:start="3718:9" pos:end="3719:20">
        <expr_stmt pos:start="3718:9" pos:end="3718:63"><expr pos:start="3718:9" pos:end="3718:62"><call pos:start="3718:9" pos:end="3718:62"><name pos:start="3718:9" pos:end="3718:16">http_log</name><argument_list pos:start="3718:17" pos:end="3718:62">(<argument pos:start="3718:18" pos:end="3718:53"><expr pos:start="3718:18" pos:end="3718:53"><literal type="string" pos:start="3718:18" pos:end="3718:53">"Unknown codec type for stream %d\n"</literal></expr></argument>, <argument pos:start="3718:56" pos:end="3718:61"><expr pos:start="3718:56" pos:end="3718:61"><name pos:start="3718:56" pos:end="3718:61">stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3719:9" pos:end="3719:20"><expr pos:start="3719:9" pos:end="3719:19"><name pos:start="3719:9" pos:end="3719:15">matches</name> <operator pos:start="3719:17" pos:end="3719:17">=</operator> <literal type="number" pos:start="3719:19" pos:end="3719:19">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return pos:start="3722:5" pos:end="3722:19">return <expr pos:start="3722:12" pos:end="3722:18"><name pos:start="3722:12" pos:end="3722:18">matches</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="3725:1" pos:end="3725:47">/* compute the needed AVStream for each feed */</comment>
<function pos:start="3726:1" pos:end="3881:1"><type pos:start="3726:1" pos:end="3726:10"><specifier pos:start="3726:1" pos:end="3726:6">static</specifier> <name pos:start="3726:8" pos:end="3726:10">int</name></type> <name pos:start="3726:12" pos:end="3726:29">build_feed_streams</name><parameter_list pos:start="3726:30" pos:end="3726:35">(<parameter pos:start="3726:31" pos:end="3726:34"><decl pos:start="3726:31" pos:end="3726:34"><type pos:start="3726:31" pos:end="3726:34"><name pos:start="3726:31" pos:end="3726:34">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="3727:1" pos:end="3881:1">{<block_content pos:start="3728:5" pos:end="3880:14">
    <decl_stmt pos:start="3728:5" pos:end="3728:34"><decl pos:start="3728:5" pos:end="3728:26"><type pos:start="3728:5" pos:end="3728:20"><name pos:start="3728:5" pos:end="3728:18">FFServerStream</name> <modifier pos:start="3728:20" pos:end="3728:20">*</modifier></type><name pos:start="3728:21" pos:end="3728:26">stream</name></decl>, <decl pos:start="3728:29" pos:end="3728:33"><type ref="prev" pos:start="3728:5" pos:end="3728:20"><modifier pos:start="3728:29" pos:end="3728:29">*</modifier></type><name pos:start="3728:30" pos:end="3728:33">feed</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3729:5" pos:end="3729:14"><decl pos:start="3729:5" pos:end="3729:9"><type pos:start="3729:5" pos:end="3729:7"><name pos:start="3729:5" pos:end="3729:7">int</name></type> <name pos:start="3729:9" pos:end="3729:9">i</name></decl>, <decl pos:start="3729:12" pos:end="3729:13"><type ref="prev" pos:start="3729:5" pos:end="3729:7"/><name pos:start="3729:12" pos:end="3729:13">fd</name></decl>;</decl_stmt>

    <comment type="block" pos:start="3731:5" pos:end="3731:28">/* gather all streams */</comment>
    <for pos:start="3732:5" pos:end="3745:5">for<control pos:start="3732:8" pos:end="3732:68">(<init pos:start="3732:9" pos:end="3732:37"><expr pos:start="3732:9" pos:end="3732:36"><name pos:start="3732:9" pos:end="3732:14">stream</name> <operator pos:start="3732:16" pos:end="3732:16">=</operator> <name pos:start="3732:18" pos:end="3732:36"><name pos:start="3732:18" pos:end="3732:23">config</name><operator pos:start="3732:24" pos:end="3732:24">.</operator><name pos:start="3732:25" pos:end="3732:36">first_stream</name></name></expr>;</init> <condition pos:start="3732:39" pos:end="3732:45"><expr pos:start="3732:39" pos:end="3732:44"><name pos:start="3732:39" pos:end="3732:44">stream</name></expr>;</condition> <incr pos:start="3732:47" pos:end="3732:67"><expr pos:start="3732:47" pos:end="3732:67"><name pos:start="3732:47" pos:end="3732:52">stream</name> <operator pos:start="3732:54" pos:end="3732:54">=</operator> <name pos:start="3732:56" pos:end="3732:67"><name pos:start="3732:56" pos:end="3732:61">stream</name><operator pos:start="3732:62" pos:end="3732:63">-&gt;</operator><name pos:start="3732:64" pos:end="3732:67">next</name></name></expr></incr>)</control> <block pos:start="3732:70" pos:end="3745:5">{<block_content pos:start="3733:9" pos:end="3744:78">
        <expr_stmt pos:start="3733:9" pos:end="3733:28"><expr pos:start="3733:9" pos:end="3733:27"><name pos:start="3733:9" pos:end="3733:12">feed</name> <operator pos:start="3733:14" pos:end="3733:14">=</operator> <name pos:start="3733:16" pos:end="3733:27"><name pos:start="3733:16" pos:end="3733:21">stream</name><operator pos:start="3733:22" pos:end="3733:23">-&gt;</operator><name pos:start="3733:24" pos:end="3733:27">feed</name></name></expr>;</expr_stmt>
        <if_stmt pos:start="3734:9" pos:end="3735:21"><if pos:start="3734:9" pos:end="3735:21">if <condition pos:start="3734:12" pos:end="3734:18">(<expr pos:start="3734:13" pos:end="3734:17"><operator pos:start="3734:13" pos:end="3734:13">!</operator><name pos:start="3734:14" pos:end="3734:17">feed</name></expr>)</condition><block type="pseudo" pos:start="3735:13" pos:end="3735:21"><block_content pos:start="3735:13" pos:end="3735:21">
            <continue pos:start="3735:13" pos:end="3735:21">continue;</continue></block_content></block></if></if_stmt>

        <if_stmt pos:start="3737:9" pos:end="3741:9"><if pos:start="3737:9" pos:end="3741:9">if <condition pos:start="3737:12" pos:end="3737:28">(<expr pos:start="3737:13" pos:end="3737:27"><name pos:start="3737:13" pos:end="3737:27"><name pos:start="3737:13" pos:end="3737:18">stream</name><operator pos:start="3737:19" pos:end="3737:20">-&gt;</operator><name pos:start="3737:21" pos:end="3737:27">is_feed</name></name></expr>)</condition> <block pos:start="3737:30" pos:end="3741:9">{<block_content pos:start="3738:13" pos:end="3740:21">
            <for pos:start="3738:13" pos:end="3739:44">for<control pos:start="3738:16" pos:end="3738:45">(<init pos:start="3738:17" pos:end="3738:20"><expr pos:start="3738:17" pos:end="3738:19"><name pos:start="3738:17" pos:end="3738:17">i</name><operator pos:start="3738:18" pos:end="3738:18">=</operator><literal type="number" pos:start="3738:19" pos:end="3738:19">0</literal></expr>;</init><condition pos:start="3738:21" pos:end="3738:41"><expr pos:start="3738:21" pos:end="3738:40"><name pos:start="3738:21" pos:end="3738:21">i</name><operator pos:start="3738:22" pos:end="3738:22">&lt;</operator><name pos:start="3738:23" pos:end="3738:40"><name pos:start="3738:23" pos:end="3738:28">stream</name><operator pos:start="3738:29" pos:end="3738:30">-&gt;</operator><name pos:start="3738:31" pos:end="3738:40">nb_streams</name></name></expr>;</condition><incr pos:start="3738:42" pos:end="3738:44"><expr pos:start="3738:42" pos:end="3738:44"><name pos:start="3738:42" pos:end="3738:42">i</name><operator pos:start="3738:43" pos:end="3738:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="3739:17" pos:end="3739:44"><block_content pos:start="3739:17" pos:end="3739:44">
                <expr_stmt pos:start="3739:17" pos:end="3739:44"><expr pos:start="3739:17" pos:end="3739:43"><name pos:start="3739:17" pos:end="3739:39"><name pos:start="3739:17" pos:end="3739:22">stream</name><operator pos:start="3739:23" pos:end="3739:24">-&gt;</operator><name pos:start="3739:25" pos:end="3739:36">feed_streams</name><index pos:start="3739:37" pos:end="3739:39">[<expr pos:start="3739:38" pos:end="3739:38"><name pos:start="3739:38" pos:end="3739:38">i</name></expr>]</index></name> <operator pos:start="3739:41" pos:end="3739:41">=</operator> <name pos:start="3739:43" pos:end="3739:43">i</name></expr>;</expr_stmt></block_content></block></for>
            <continue pos:start="3740:13" pos:end="3740:21">continue;</continue>
        </block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="3742:9" pos:end="3742:51">/* we handle a stream coming from a feed */</comment>
        <for pos:start="3743:9" pos:end="3744:78">for<control pos:start="3743:12" pos:end="3743:41">(<init pos:start="3743:13" pos:end="3743:16"><expr pos:start="3743:13" pos:end="3743:15"><name pos:start="3743:13" pos:end="3743:13">i</name><operator pos:start="3743:14" pos:end="3743:14">=</operator><literal type="number" pos:start="3743:15" pos:end="3743:15">0</literal></expr>;</init><condition pos:start="3743:17" pos:end="3743:37"><expr pos:start="3743:17" pos:end="3743:36"><name pos:start="3743:17" pos:end="3743:17">i</name><operator pos:start="3743:18" pos:end="3743:18">&lt;</operator><name pos:start="3743:19" pos:end="3743:36"><name pos:start="3743:19" pos:end="3743:24">stream</name><operator pos:start="3743:25" pos:end="3743:26">-&gt;</operator><name pos:start="3743:27" pos:end="3743:36">nb_streams</name></name></expr>;</condition><incr pos:start="3743:38" pos:end="3743:40"><expr pos:start="3743:38" pos:end="3743:40"><name pos:start="3743:38" pos:end="3743:38">i</name><operator pos:start="3743:39" pos:end="3743:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="3744:13" pos:end="3744:78"><block_content pos:start="3744:13" pos:end="3744:78">
            <expr_stmt pos:start="3744:13" pos:end="3744:78"><expr pos:start="3744:13" pos:end="3744:77"><name pos:start="3744:13" pos:end="3744:35"><name pos:start="3744:13" pos:end="3744:18">stream</name><operator pos:start="3744:19" pos:end="3744:20">-&gt;</operator><name pos:start="3744:21" pos:end="3744:32">feed_streams</name><index pos:start="3744:33" pos:end="3744:35">[<expr pos:start="3744:34" pos:end="3744:34"><name pos:start="3744:34" pos:end="3744:34">i</name></expr>]</index></name> <operator pos:start="3744:37" pos:end="3744:37">=</operator> <call pos:start="3744:39" pos:end="3744:77"><name pos:start="3744:39" pos:end="3744:51">add_av_stream</name><argument_list pos:start="3744:52" pos:end="3744:77">(<argument pos:start="3744:53" pos:end="3744:56"><expr pos:start="3744:53" pos:end="3744:56"><name pos:start="3744:53" pos:end="3744:56">feed</name></expr></argument>, <argument pos:start="3744:59" pos:end="3744:76"><expr pos:start="3744:59" pos:end="3744:76"><name pos:start="3744:59" pos:end="3744:76"><name pos:start="3744:59" pos:end="3744:64">stream</name><operator pos:start="3744:65" pos:end="3744:66">-&gt;</operator><name pos:start="3744:67" pos:end="3744:73">streams</name><index pos:start="3744:74" pos:end="3744:76">[<expr pos:start="3744:75" pos:end="3744:75"><name pos:start="3744:75" pos:end="3744:75">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></for>

    <comment type="block" pos:start="3747:5" pos:end="3747:37">/* create feed files if needed */</comment>
    <for pos:start="3748:5" pos:end="3876:5">for<control pos:start="3748:8" pos:end="3748:63">(<init pos:start="3748:9" pos:end="3748:33"><expr pos:start="3748:9" pos:end="3748:32"><name pos:start="3748:9" pos:end="3748:12">feed</name> <operator pos:start="3748:14" pos:end="3748:14">=</operator> <name pos:start="3748:16" pos:end="3748:32"><name pos:start="3748:16" pos:end="3748:21">config</name><operator pos:start="3748:22" pos:end="3748:22">.</operator><name pos:start="3748:23" pos:end="3748:32">first_feed</name></name></expr>;</init> <condition pos:start="3748:35" pos:end="3748:39"><expr pos:start="3748:35" pos:end="3748:38"><name pos:start="3748:35" pos:end="3748:38">feed</name></expr>;</condition> <incr pos:start="3748:41" pos:end="3748:62"><expr pos:start="3748:41" pos:end="3748:62"><name pos:start="3748:41" pos:end="3748:44">feed</name> <operator pos:start="3748:46" pos:end="3748:46">=</operator> <name pos:start="3748:48" pos:end="3748:62"><name pos:start="3748:48" pos:end="3748:51">feed</name><operator pos:start="3748:52" pos:end="3748:53">-&gt;</operator><name pos:start="3748:54" pos:end="3748:62">next_feed</name></name></expr></incr>)</control> <block pos:start="3748:65" pos:end="3876:5">{<block_content pos:start="3750:9" pos:end="3875:18">

        <if_stmt pos:start="3750:9" pos:end="3810:9"><if pos:start="3750:9" pos:end="3810:9">if <condition pos:start="3750:12" pos:end="3750:64">(<expr pos:start="3750:13" pos:end="3750:63"><call pos:start="3750:13" pos:end="3750:59"><name pos:start="3750:13" pos:end="3750:22">avio_check</name><argument_list pos:start="3750:23" pos:end="3750:59">(<argument pos:start="3750:24" pos:end="3750:42"><expr pos:start="3750:24" pos:end="3750:42"><name pos:start="3750:24" pos:end="3750:42"><name pos:start="3750:24" pos:end="3750:27">feed</name><operator pos:start="3750:28" pos:end="3750:29">-&gt;</operator><name pos:start="3750:30" pos:end="3750:42">feed_filename</name></name></expr></argument>, <argument pos:start="3750:45" pos:end="3750:58"><expr pos:start="3750:45" pos:end="3750:58"><name pos:start="3750:45" pos:end="3750:58">AVIO_FLAG_READ</name></expr></argument>)</argument_list></call> <operator pos:start="3750:61" pos:end="3750:61">&gt;</operator> <literal type="number" pos:start="3750:63" pos:end="3750:63">0</literal></expr>)</condition> <block pos:start="3750:66" pos:end="3810:9">{<block_content pos:start="3751:13" pos:end="3809:13">
            <decl_stmt pos:start="3751:13" pos:end="3751:38"><decl pos:start="3751:13" pos:end="3751:37"><type pos:start="3751:13" pos:end="3751:29"><name pos:start="3751:13" pos:end="3751:27">AVFormatContext</name> <modifier pos:start="3751:29" pos:end="3751:29">*</modifier></type><name pos:start="3751:30" pos:end="3751:30">s</name> <init pos:start="3751:32" pos:end="3751:37">= <expr pos:start="3751:34" pos:end="3751:37"><name pos:start="3751:34" pos:end="3751:37">NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="3752:13" pos:end="3752:28"><decl pos:start="3752:13" pos:end="3752:27"><type pos:start="3752:13" pos:end="3752:15"><name pos:start="3752:13" pos:end="3752:15">int</name></type> <name pos:start="3752:17" pos:end="3752:23">matches</name> <init pos:start="3752:25" pos:end="3752:27">= <expr pos:start="3752:27" pos:end="3752:27"><literal type="number" pos:start="3752:27" pos:end="3752:27">0</literal></expr></init></decl>;</decl_stmt>

            <comment type="block" pos:start="3754:13" pos:end="3754:35">/* See if it matches */</comment>

            <if_stmt pos:start="3756:13" pos:end="3761:13"><if pos:start="3756:13" pos:end="3761:13">if <condition pos:start="3756:16" pos:end="3756:77">(<expr pos:start="3756:17" pos:end="3756:76"><call pos:start="3756:17" pos:end="3756:72"><name pos:start="3756:17" pos:end="3756:35">avformat_open_input</name><argument_list pos:start="3756:36" pos:end="3756:72">(<argument pos:start="3756:37" pos:end="3756:38"><expr pos:start="3756:37" pos:end="3756:38"><operator pos:start="3756:37" pos:end="3756:37">&amp;</operator><name pos:start="3756:38" pos:end="3756:38">s</name></expr></argument>, <argument pos:start="3756:41" pos:end="3756:59"><expr pos:start="3756:41" pos:end="3756:59"><name pos:start="3756:41" pos:end="3756:59"><name pos:start="3756:41" pos:end="3756:44">feed</name><operator pos:start="3756:45" pos:end="3756:46">-&gt;</operator><name pos:start="3756:47" pos:end="3756:59">feed_filename</name></name></expr></argument>, <argument pos:start="3756:62" pos:end="3756:65"><expr pos:start="3756:62" pos:end="3756:65"><name pos:start="3756:62" pos:end="3756:65">NULL</name></expr></argument>, <argument pos:start="3756:68" pos:end="3756:71"><expr pos:start="3756:68" pos:end="3756:71"><name pos:start="3756:68" pos:end="3756:71">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="3756:74" pos:end="3756:74">&lt;</operator> <literal type="number" pos:start="3756:76" pos:end="3756:76">0</literal></expr>)</condition> <block pos:start="3756:79" pos:end="3761:13">{<block_content pos:start="3757:17" pos:end="3760:26">
                <expr_stmt pos:start="3757:17" pos:end="3759:46"><expr pos:start="3757:17" pos:end="3759:45"><call pos:start="3757:17" pos:end="3759:45"><name pos:start="3757:17" pos:end="3757:24">http_log</name><argument_list pos:start="3757:25" pos:end="3759:45">(<argument pos:start="3757:26" pos:end="3758:45"><expr pos:start="3757:26" pos:end="3758:45"><literal type="string" pos:start="3757:26" pos:end="3757:65">"Deleting feed file '%s' as it appears "</literal>
                            <literal type="string" pos:start="3758:29" pos:end="3758:45">"to be corrupt\n"</literal></expr></argument>,
                         <argument pos:start="3759:26" pos:end="3759:44"><expr pos:start="3759:26" pos:end="3759:44"><name pos:start="3759:26" pos:end="3759:44"><name pos:start="3759:26" pos:end="3759:29">feed</name><operator pos:start="3759:30" pos:end="3759:31">-&gt;</operator><name pos:start="3759:32" pos:end="3759:44">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="3760:17" pos:end="3760:26">goto <name pos:start="3760:22" pos:end="3760:25">drop</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="3763:13" pos:end="3763:33">/* set buffer size */</comment>
            <if_stmt pos:start="3764:13" pos:end="3768:13"><if pos:start="3764:13" pos:end="3768:13">if <condition pos:start="3764:16" pos:end="3764:62">(<expr pos:start="3764:17" pos:end="3764:61"><call pos:start="3764:17" pos:end="3764:57"><name pos:start="3764:17" pos:end="3764:33">ffio_set_buf_size</name><argument_list pos:start="3764:34" pos:end="3764:57">(<argument pos:start="3764:35" pos:end="3764:39"><expr pos:start="3764:35" pos:end="3764:39"><name pos:start="3764:35" pos:end="3764:39"><name pos:start="3764:35" pos:end="3764:35">s</name><operator pos:start="3764:36" pos:end="3764:37">-&gt;</operator><name pos:start="3764:38" pos:end="3764:39">pb</name></name></expr></argument>, <argument pos:start="3764:42" pos:end="3764:56"><expr pos:start="3764:42" pos:end="3764:56"><name pos:start="3764:42" pos:end="3764:56">FFM_PACKET_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="3764:59" pos:end="3764:59">&lt;</operator> <literal type="number" pos:start="3764:61" pos:end="3764:61">0</literal></expr>)</condition> <block pos:start="3764:64" pos:end="3768:13">{<block_content pos:start="3765:17" pos:end="3767:26">
                <expr_stmt pos:start="3765:17" pos:end="3765:56"><expr pos:start="3765:17" pos:end="3765:55"><call pos:start="3765:17" pos:end="3765:55"><name pos:start="3765:17" pos:end="3765:24">http_log</name><argument_list pos:start="3765:25" pos:end="3765:55">(<argument pos:start="3765:26" pos:end="3765:54"><expr pos:start="3765:26" pos:end="3765:54"><literal type="string" pos:start="3765:26" pos:end="3765:54">"Failed to set buffer size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3766:17" pos:end="3766:41"><expr pos:start="3766:17" pos:end="3766:40"><call pos:start="3766:17" pos:end="3766:40"><name pos:start="3766:17" pos:end="3766:36">avformat_close_input</name><argument_list pos:start="3766:37" pos:end="3766:40">(<argument pos:start="3766:38" pos:end="3766:39"><expr pos:start="3766:38" pos:end="3766:39"><operator pos:start="3766:38" pos:end="3766:38">&amp;</operator><name pos:start="3766:39" pos:end="3766:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="3767:17" pos:end="3767:26">goto <name pos:start="3767:22" pos:end="3767:25">bail</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="3770:13" pos:end="3770:39">/* Now see if it matches */</comment>
            <if_stmt pos:start="3771:13" pos:end="3776:13"><if pos:start="3771:13" pos:end="3776:13">if <condition pos:start="3771:16" pos:end="3771:50">(<expr pos:start="3771:17" pos:end="3771:49"><name pos:start="3771:17" pos:end="3771:29"><name pos:start="3771:17" pos:end="3771:17">s</name><operator pos:start="3771:18" pos:end="3771:19">-&gt;</operator><name pos:start="3771:20" pos:end="3771:29">nb_streams</name></name> <operator pos:start="3771:31" pos:end="3771:32">!=</operator> <name pos:start="3771:34" pos:end="3771:49"><name pos:start="3771:34" pos:end="3771:37">feed</name><operator pos:start="3771:38" pos:end="3771:39">-&gt;</operator><name pos:start="3771:40" pos:end="3771:49">nb_streams</name></name></expr>)</condition> <block pos:start="3771:52" pos:end="3776:13">{<block_content pos:start="3772:17" pos:end="3775:26">
                <expr_stmt pos:start="3772:17" pos:end="3774:79"><expr pos:start="3772:17" pos:end="3774:78"><call pos:start="3772:17" pos:end="3774:78"><name pos:start="3772:17" pos:end="3772:24">http_log</name><argument_list pos:start="3772:25" pos:end="3774:78">(<argument pos:start="3772:26" pos:end="3773:49"><expr pos:start="3772:26" pos:end="3773:49"><literal type="string" pos:start="3772:26" pos:end="3772:68">"Deleting feed file '%s' as stream counts "</literal>
                            <literal type="string" pos:start="3773:29" pos:end="3773:49">"differ (%d != %d)\n"</literal></expr></argument>,
                         <argument pos:start="3774:26" pos:end="3774:44"><expr pos:start="3774:26" pos:end="3774:44"><name pos:start="3774:26" pos:end="3774:44"><name pos:start="3774:26" pos:end="3774:29">feed</name><operator pos:start="3774:30" pos:end="3774:31">-&gt;</operator><name pos:start="3774:32" pos:end="3774:44">feed_filename</name></name></expr></argument>, <argument pos:start="3774:47" pos:end="3774:59"><expr pos:start="3774:47" pos:end="3774:59"><name pos:start="3774:47" pos:end="3774:59"><name pos:start="3774:47" pos:end="3774:47">s</name><operator pos:start="3774:48" pos:end="3774:49">-&gt;</operator><name pos:start="3774:50" pos:end="3774:59">nb_streams</name></name></expr></argument>, <argument pos:start="3774:62" pos:end="3774:77"><expr pos:start="3774:62" pos:end="3774:77"><name pos:start="3774:62" pos:end="3774:77"><name pos:start="3774:62" pos:end="3774:65">feed</name><operator pos:start="3774:66" pos:end="3774:67">-&gt;</operator><name pos:start="3774:68" pos:end="3774:77">nb_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="3775:17" pos:end="3775:26">goto <name pos:start="3775:22" pos:end="3775:25">drop</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="3778:13" pos:end="3778:24"><expr pos:start="3778:13" pos:end="3778:23"><name pos:start="3778:13" pos:end="3778:19">matches</name> <operator pos:start="3778:21" pos:end="3778:21">=</operator> <literal type="number" pos:start="3778:23" pos:end="3778:23">1</literal></expr>;</expr_stmt>
            <for pos:start="3779:13" pos:end="3796:13">for<control pos:start="3779:16" pos:end="3779:40">(<init pos:start="3779:17" pos:end="3779:20"><expr pos:start="3779:17" pos:end="3779:19"><name pos:start="3779:17" pos:end="3779:17">i</name><operator pos:start="3779:18" pos:end="3779:18">=</operator><literal type="number" pos:start="3779:19" pos:end="3779:19">0</literal></expr>;</init><condition pos:start="3779:21" pos:end="3779:36"><expr pos:start="3779:21" pos:end="3779:35"><name pos:start="3779:21" pos:end="3779:21">i</name><operator pos:start="3779:22" pos:end="3779:22">&lt;</operator><name pos:start="3779:23" pos:end="3779:35"><name pos:start="3779:23" pos:end="3779:23">s</name><operator pos:start="3779:24" pos:end="3779:25">-&gt;</operator><name pos:start="3779:26" pos:end="3779:35">nb_streams</name></name></expr>;</condition><incr pos:start="3779:37" pos:end="3779:39"><expr pos:start="3779:37" pos:end="3779:39"><name pos:start="3779:37" pos:end="3779:37">i</name><operator pos:start="3779:38" pos:end="3779:39">++</operator></expr></incr>)</control> <block pos:start="3779:42" pos:end="3796:13">{<block_content pos:start="3780:17" pos:end="3795:26">
                <decl_stmt pos:start="3780:17" pos:end="3780:29"><decl pos:start="3780:17" pos:end="3780:28"><type pos:start="3780:17" pos:end="3780:26"><name pos:start="3780:17" pos:end="3780:24">AVStream</name> <modifier pos:start="3780:26" pos:end="3780:26">*</modifier></type><name pos:start="3780:27" pos:end="3780:28">ss</name></decl>;</decl_stmt>
                <decl_stmt pos:start="3781:17" pos:end="3781:36"><decl pos:start="3781:17" pos:end="3781:35"><type pos:start="3781:17" pos:end="3781:33"><name pos:start="3781:17" pos:end="3781:31">LayeredAVStream</name> <modifier pos:start="3781:33" pos:end="3781:33">*</modifier></type><name pos:start="3781:34" pos:end="3781:35">sf</name></decl>;</decl_stmt>

                <expr_stmt pos:start="3783:17" pos:end="3783:38"><expr pos:start="3783:17" pos:end="3783:37"><name pos:start="3783:17" pos:end="3783:18">sf</name> <operator pos:start="3783:20" pos:end="3783:20">=</operator> <name pos:start="3783:22" pos:end="3783:37"><name pos:start="3783:22" pos:end="3783:25">feed</name><operator pos:start="3783:26" pos:end="3783:27">-&gt;</operator><name pos:start="3783:28" pos:end="3783:34">streams</name><index pos:start="3783:35" pos:end="3783:37">[<expr pos:start="3783:36" pos:end="3783:36"><name pos:start="3783:36" pos:end="3783:36">i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt pos:start="3784:17" pos:end="3784:35"><expr pos:start="3784:17" pos:end="3784:34"><name pos:start="3784:17" pos:end="3784:18">ss</name> <operator pos:start="3784:20" pos:end="3784:20">=</operator> <name pos:start="3784:22" pos:end="3784:34"><name pos:start="3784:22" pos:end="3784:22">s</name><operator pos:start="3784:23" pos:end="3784:24">-&gt;</operator><name pos:start="3784:25" pos:end="3784:31">streams</name><index pos:start="3784:32" pos:end="3784:34">[<expr pos:start="3784:33" pos:end="3784:33"><name pos:start="3784:33" pos:end="3784:33">i</name></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt pos:start="3786:17" pos:end="3791:17"><if pos:start="3786:17" pos:end="3791:17">if <condition pos:start="3786:20" pos:end="3786:63">(<expr pos:start="3786:21" pos:end="3786:62"><name pos:start="3786:21" pos:end="3786:29"><name pos:start="3786:21" pos:end="3786:22">sf</name><operator pos:start="3786:23" pos:end="3786:24">-&gt;</operator><name pos:start="3786:25" pos:end="3786:29">index</name></name> <operator pos:start="3786:31" pos:end="3786:32">!=</operator> <name pos:start="3786:34" pos:end="3786:42"><name pos:start="3786:34" pos:end="3786:35">ss</name><operator pos:start="3786:36" pos:end="3786:37">-&gt;</operator><name pos:start="3786:38" pos:end="3786:42">index</name></name> <operator pos:start="3786:44" pos:end="3786:45">||</operator> <name pos:start="3786:47" pos:end="3786:52"><name pos:start="3786:47" pos:end="3786:48">sf</name><operator pos:start="3786:49" pos:end="3786:50">-&gt;</operator><name pos:start="3786:51" pos:end="3786:52">id</name></name> <operator pos:start="3786:54" pos:end="3786:55">!=</operator> <name pos:start="3786:57" pos:end="3786:62"><name pos:start="3786:57" pos:end="3786:58">ss</name><operator pos:start="3786:59" pos:end="3786:60">-&gt;</operator><name pos:start="3786:61" pos:end="3786:62">id</name></name></expr>)</condition> <block pos:start="3786:65" pos:end="3791:17">{<block_content pos:start="3787:21" pos:end="3790:26">
                    <expr_stmt pos:start="3787:21" pos:end="3788:53"><expr pos:start="3787:21" pos:end="3788:52"><call pos:start="3787:21" pos:end="3788:52"><name pos:start="3787:21" pos:end="3787:28">http_log</name><argument_list pos:start="3787:29" pos:end="3788:52">(<argument pos:start="3787:30" pos:end="3787:75"><expr pos:start="3787:30" pos:end="3787:75"><literal type="string" pos:start="3787:30" pos:end="3787:75">"Index &amp; Id do not match for stream %d (%s)\n"</literal></expr></argument>,
                             <argument pos:start="3788:30" pos:end="3788:30"><expr pos:start="3788:30" pos:end="3788:30"><name pos:start="3788:30" pos:end="3788:30">i</name></expr></argument>, <argument pos:start="3788:33" pos:end="3788:51"><expr pos:start="3788:33" pos:end="3788:51"><name pos:start="3788:33" pos:end="3788:51"><name pos:start="3788:33" pos:end="3788:36">feed</name><operator pos:start="3788:37" pos:end="3788:38">-&gt;</operator><name pos:start="3788:39" pos:end="3788:51">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="3789:21" pos:end="3789:32"><expr pos:start="3789:21" pos:end="3789:31"><name pos:start="3789:21" pos:end="3789:27">matches</name> <operator pos:start="3789:29" pos:end="3789:29">=</operator> <literal type="number" pos:start="3789:31" pos:end="3789:31">0</literal></expr>;</expr_stmt>
                    <break pos:start="3790:21" pos:end="3790:26">break;</break>
                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="3793:17" pos:end="3793:56"><expr pos:start="3793:17" pos:end="3793:55"><name pos:start="3793:17" pos:end="3793:23">matches</name> <operator pos:start="3793:25" pos:end="3793:25">=</operator> <call pos:start="3793:27" pos:end="3793:55"><name pos:start="3793:27" pos:end="3793:43">check_codec_match</name> <argument_list pos:start="3793:45" pos:end="3793:55">(<argument pos:start="3793:46" pos:end="3793:47"><expr pos:start="3793:46" pos:end="3793:47"><name pos:start="3793:46" pos:end="3793:47">sf</name></expr></argument>, <argument pos:start="3793:50" pos:end="3793:51"><expr pos:start="3793:50" pos:end="3793:51"><name pos:start="3793:50" pos:end="3793:51">ss</name></expr></argument>, <argument pos:start="3793:54" pos:end="3793:54"><expr pos:start="3793:54" pos:end="3793:54"><name pos:start="3793:54" pos:end="3793:54">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="3794:17" pos:end="3795:26"><if pos:start="3794:17" pos:end="3795:26">if <condition pos:start="3794:20" pos:end="3794:29">(<expr pos:start="3794:21" pos:end="3794:28"><operator pos:start="3794:21" pos:end="3794:21">!</operator><name pos:start="3794:22" pos:end="3794:28">matches</name></expr>)</condition><block type="pseudo" pos:start="3795:21" pos:end="3795:26"><block_content pos:start="3795:21" pos:end="3795:26">
                    <break pos:start="3795:21" pos:end="3795:26">break;</break></block_content></block></if></if_stmt>
            </block_content>}</block></for>

<label pos:start="3798:1" pos:end="3798:5"><name pos:start="3798:1" pos:end="3798:4">drop</name>:</label>
            <if_stmt pos:start="3799:13" pos:end="3800:41"><if pos:start="3799:13" pos:end="3800:41">if <condition pos:start="3799:16" pos:end="3799:18">(<expr pos:start="3799:17" pos:end="3799:17"><name pos:start="3799:17" pos:end="3799:17">s</name></expr>)</condition><block type="pseudo" pos:start="3800:17" pos:end="3800:41"><block_content pos:start="3800:17" pos:end="3800:41">
                <expr_stmt pos:start="3800:17" pos:end="3800:41"><expr pos:start="3800:17" pos:end="3800:40"><call pos:start="3800:17" pos:end="3800:40"><name pos:start="3800:17" pos:end="3800:36">avformat_close_input</name><argument_list pos:start="3800:37" pos:end="3800:40">(<argument pos:start="3800:38" pos:end="3800:39"><expr pos:start="3800:38" pos:end="3800:39"><operator pos:start="3800:38" pos:end="3800:38">&amp;</operator><name pos:start="3800:39" pos:end="3800:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="3802:13" pos:end="3809:13"><if pos:start="3802:13" pos:end="3809:13">if <condition pos:start="3802:16" pos:end="3802:25">(<expr pos:start="3802:17" pos:end="3802:24"><operator pos:start="3802:17" pos:end="3802:17">!</operator><name pos:start="3802:18" pos:end="3802:24">matches</name></expr>)</condition> <block pos:start="3802:27" pos:end="3809:13">{<block_content pos:start="3803:17" pos:end="3808:44">
                <if_stmt pos:start="3803:17" pos:end="3807:17"><if pos:start="3803:17" pos:end="3807:17">if <condition pos:start="3803:20" pos:end="3803:35">(<expr pos:start="3803:21" pos:end="3803:34"><name pos:start="3803:21" pos:end="3803:34"><name pos:start="3803:21" pos:end="3803:24">feed</name><operator pos:start="3803:25" pos:end="3803:26">-&gt;</operator><name pos:start="3803:27" pos:end="3803:34">readonly</name></name></expr>)</condition> <block pos:start="3803:37" pos:end="3807:17">{<block_content pos:start="3804:21" pos:end="3806:30">
                    <expr_stmt pos:start="3804:21" pos:end="3805:50"><expr pos:start="3804:21" pos:end="3805:49"><call pos:start="3804:21" pos:end="3805:49"><name pos:start="3804:21" pos:end="3804:28">http_log</name><argument_list pos:start="3804:29" pos:end="3805:49">(<argument pos:start="3804:30" pos:end="3804:74"><expr pos:start="3804:30" pos:end="3804:74"><literal type="string" pos:start="3804:30" pos:end="3804:74">"Unable to delete read-only feed file '%s'\n"</literal></expr></argument>,
                             <argument pos:start="3805:30" pos:end="3805:48"><expr pos:start="3805:30" pos:end="3805:48"><name pos:start="3805:30" pos:end="3805:48"><name pos:start="3805:30" pos:end="3805:33">feed</name><operator pos:start="3805:34" pos:end="3805:35">-&gt;</operator><name pos:start="3805:36" pos:end="3805:48">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <goto pos:start="3806:21" pos:end="3806:30">goto <name pos:start="3806:26" pos:end="3806:29">bail</name>;</goto>
                </block_content>}</block></if></if_stmt>
                <expr_stmt pos:start="3808:17" pos:end="3808:44"><expr pos:start="3808:17" pos:end="3808:43"><call pos:start="3808:17" pos:end="3808:43"><name pos:start="3808:17" pos:end="3808:22">unlink</name><argument_list pos:start="3808:23" pos:end="3808:43">(<argument pos:start="3808:24" pos:end="3808:42"><expr pos:start="3808:24" pos:end="3808:42"><name pos:start="3808:24" pos:end="3808:42"><name pos:start="3808:24" pos:end="3808:27">feed</name><operator pos:start="3808:28" pos:end="3808:29">-&gt;</operator><name pos:start="3808:30" pos:end="3808:42">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="3812:9" pos:end="3858:9"><if pos:start="3812:9" pos:end="3858:9">if <condition pos:start="3812:12" pos:end="3812:66">(<expr pos:start="3812:13" pos:end="3812:65"><call pos:start="3812:13" pos:end="3812:60"><name pos:start="3812:13" pos:end="3812:22">avio_check</name><argument_list pos:start="3812:23" pos:end="3812:60">(<argument pos:start="3812:24" pos:end="3812:42"><expr pos:start="3812:24" pos:end="3812:42"><name pos:start="3812:24" pos:end="3812:42"><name pos:start="3812:24" pos:end="3812:27">feed</name><operator pos:start="3812:28" pos:end="3812:29">-&gt;</operator><name pos:start="3812:30" pos:end="3812:42">feed_filename</name></name></expr></argument>, <argument pos:start="3812:45" pos:end="3812:59"><expr pos:start="3812:45" pos:end="3812:59"><name pos:start="3812:45" pos:end="3812:59">AVIO_FLAG_WRITE</name></expr></argument>)</argument_list></call> <operator pos:start="3812:62" pos:end="3812:63">&lt;=</operator> <literal type="number" pos:start="3812:65" pos:end="3812:65">0</literal></expr>)</condition> <block pos:start="3812:68" pos:end="3858:9">{<block_content pos:start="3813:13" pos:end="3857:37">
            <decl_stmt pos:start="3813:13" pos:end="3813:58"><decl pos:start="3813:13" pos:end="3813:57"><type pos:start="3813:13" pos:end="3813:29"><name pos:start="3813:13" pos:end="3813:27">AVFormatContext</name> <modifier pos:start="3813:29" pos:end="3813:29">*</modifier></type><name pos:start="3813:30" pos:end="3813:30">s</name> <init pos:start="3813:32" pos:end="3813:57">= <expr pos:start="3813:34" pos:end="3813:57"><call pos:start="3813:34" pos:end="3813:57"><name pos:start="3813:34" pos:end="3813:55">avformat_alloc_context</name><argument_list pos:start="3813:56" pos:end="3813:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="3815:13" pos:end="3818:13"><if pos:start="3815:13" pos:end="3818:13">if <condition pos:start="3815:16" pos:end="3815:19">(<expr pos:start="3815:17" pos:end="3815:18"><operator pos:start="3815:17" pos:end="3815:17">!</operator><name pos:start="3815:18" pos:end="3815:18">s</name></expr>)</condition> <block pos:start="3815:21" pos:end="3818:13">{<block_content pos:start="3816:17" pos:end="3817:26">
                <expr_stmt pos:start="3816:17" pos:end="3816:57"><expr pos:start="3816:17" pos:end="3816:56"><call pos:start="3816:17" pos:end="3816:56"><name pos:start="3816:17" pos:end="3816:24">http_log</name><argument_list pos:start="3816:25" pos:end="3816:56">(<argument pos:start="3816:26" pos:end="3816:55"><expr pos:start="3816:26" pos:end="3816:55"><literal type="string" pos:start="3816:26" pos:end="3816:55">"Failed to allocate context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="3817:17" pos:end="3817:26">goto <name pos:start="3817:22" pos:end="3817:25">bail</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="3820:13" pos:end="3826:13"><if pos:start="3820:13" pos:end="3826:13">if <condition pos:start="3820:16" pos:end="3820:31">(<expr pos:start="3820:17" pos:end="3820:30"><name pos:start="3820:17" pos:end="3820:30"><name pos:start="3820:17" pos:end="3820:20">feed</name><operator pos:start="3820:21" pos:end="3820:22">-&gt;</operator><name pos:start="3820:23" pos:end="3820:30">readonly</name></name></expr>)</condition> <block pos:start="3820:33" pos:end="3826:13">{<block_content pos:start="3821:17" pos:end="3825:26">
                <expr_stmt pos:start="3821:17" pos:end="3823:46"><expr pos:start="3821:17" pos:end="3823:45"><call pos:start="3821:17" pos:end="3823:45"><name pos:start="3821:17" pos:end="3821:24">http_log</name><argument_list pos:start="3821:25" pos:end="3823:45">(<argument pos:start="3821:26" pos:end="3822:47"><expr pos:start="3821:26" pos:end="3822:47"><literal type="string" pos:start="3821:26" pos:end="3821:68">"Unable to create feed file '%s' as it is "</literal>
                            <literal type="string" pos:start="3822:29" pos:end="3822:47">"marked readonly\n"</literal></expr></argument>,
                         <argument pos:start="3823:26" pos:end="3823:44"><expr pos:start="3823:26" pos:end="3823:44"><name pos:start="3823:26" pos:end="3823:44"><name pos:start="3823:26" pos:end="3823:29">feed</name><operator pos:start="3823:30" pos:end="3823:31">-&gt;</operator><name pos:start="3823:32" pos:end="3823:44">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3824:17" pos:end="3824:41"><expr pos:start="3824:17" pos:end="3824:40"><call pos:start="3824:17" pos:end="3824:40"><name pos:start="3824:17" pos:end="3824:37">avformat_free_context</name><argument_list pos:start="3824:38" pos:end="3824:40">(<argument pos:start="3824:39" pos:end="3824:39"><expr pos:start="3824:39" pos:end="3824:39"><name pos:start="3824:39" pos:end="3824:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="3825:17" pos:end="3825:26">goto <name pos:start="3825:22" pos:end="3825:25">bail</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="3828:13" pos:end="3828:55">/* only write the header of the ffm file */</comment>
            <if_stmt pos:start="3829:13" pos:end="3834:13"><if pos:start="3829:13" pos:end="3834:13">if <condition pos:start="3829:16" pos:end="3829:76">(<expr pos:start="3829:17" pos:end="3829:75"><call pos:start="3829:17" pos:end="3829:71"><name pos:start="3829:17" pos:end="3829:25">avio_open</name><argument_list pos:start="3829:26" pos:end="3829:71">(<argument pos:start="3829:27" pos:end="3829:32"><expr pos:start="3829:27" pos:end="3829:32"><operator pos:start="3829:27" pos:end="3829:27">&amp;</operator><name pos:start="3829:28" pos:end="3829:32"><name pos:start="3829:28" pos:end="3829:28">s</name><operator pos:start="3829:29" pos:end="3829:30">-&gt;</operator><name pos:start="3829:31" pos:end="3829:32">pb</name></name></expr></argument>, <argument pos:start="3829:35" pos:end="3829:53"><expr pos:start="3829:35" pos:end="3829:53"><name pos:start="3829:35" pos:end="3829:53"><name pos:start="3829:35" pos:end="3829:38">feed</name><operator pos:start="3829:39" pos:end="3829:40">-&gt;</operator><name pos:start="3829:41" pos:end="3829:53">feed_filename</name></name></expr></argument>, <argument pos:start="3829:56" pos:end="3829:70"><expr pos:start="3829:56" pos:end="3829:70"><name pos:start="3829:56" pos:end="3829:70">AVIO_FLAG_WRITE</name></expr></argument>)</argument_list></call> <operator pos:start="3829:73" pos:end="3829:73">&lt;</operator> <literal type="number" pos:start="3829:75" pos:end="3829:75">0</literal></expr>)</condition> <block pos:start="3829:78" pos:end="3834:13">{<block_content pos:start="3830:17" pos:end="3833:26">
                <expr_stmt pos:start="3830:17" pos:end="3831:46"><expr pos:start="3830:17" pos:end="3831:45"><call pos:start="3830:17" pos:end="3831:45"><name pos:start="3830:17" pos:end="3830:24">http_log</name><argument_list pos:start="3830:25" pos:end="3831:45">(<argument pos:start="3830:26" pos:end="3830:65"><expr pos:start="3830:26" pos:end="3830:65"><literal type="string" pos:start="3830:26" pos:end="3830:65">"Could not open output feed file '%s'\n"</literal></expr></argument>,
                         <argument pos:start="3831:26" pos:end="3831:44"><expr pos:start="3831:26" pos:end="3831:44"><name pos:start="3831:26" pos:end="3831:44"><name pos:start="3831:26" pos:end="3831:29">feed</name><operator pos:start="3831:30" pos:end="3831:31">-&gt;</operator><name pos:start="3831:32" pos:end="3831:44">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3832:17" pos:end="3832:41"><expr pos:start="3832:17" pos:end="3832:40"><call pos:start="3832:17" pos:end="3832:40"><name pos:start="3832:17" pos:end="3832:37">avformat_free_context</name><argument_list pos:start="3832:38" pos:end="3832:40">(<argument pos:start="3832:39" pos:end="3832:39"><expr pos:start="3832:39" pos:end="3832:39"><name pos:start="3832:39" pos:end="3832:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="3833:17" pos:end="3833:26">goto <name pos:start="3833:22" pos:end="3833:25">bail</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="3835:13" pos:end="3835:35"><expr pos:start="3835:13" pos:end="3835:34"><name pos:start="3835:13" pos:end="3835:22"><name pos:start="3835:13" pos:end="3835:13">s</name><operator pos:start="3835:14" pos:end="3835:15">-&gt;</operator><name pos:start="3835:16" pos:end="3835:22">oformat</name></name> <operator pos:start="3835:24" pos:end="3835:24">=</operator> <name pos:start="3835:26" pos:end="3835:34"><name pos:start="3835:26" pos:end="3835:29">feed</name><operator pos:start="3835:30" pos:end="3835:31">-&gt;</operator><name pos:start="3835:32" pos:end="3835:34">fmt</name></name></expr>;</expr_stmt>
            <for pos:start="3836:13" pos:end="3843:13">for <control pos:start="3836:17" pos:end="3836:48">(<init pos:start="3836:18" pos:end="3836:23"><expr pos:start="3836:18" pos:end="3836:22"><name pos:start="3836:18" pos:end="3836:18">i</name> <operator pos:start="3836:20" pos:end="3836:20">=</operator> <literal type="number" pos:start="3836:22" pos:end="3836:22">0</literal></expr>;</init> <condition pos:start="3836:25" pos:end="3836:43"><expr pos:start="3836:25" pos:end="3836:42"><name pos:start="3836:25" pos:end="3836:25">i</name><operator pos:start="3836:26" pos:end="3836:26">&lt;</operator><name pos:start="3836:27" pos:end="3836:42"><name pos:start="3836:27" pos:end="3836:30">feed</name><operator pos:start="3836:31" pos:end="3836:32">-&gt;</operator><name pos:start="3836:33" pos:end="3836:42">nb_streams</name></name></expr>;</condition> <incr pos:start="3836:45" pos:end="3836:47"><expr pos:start="3836:45" pos:end="3836:47"><name pos:start="3836:45" pos:end="3836:45">i</name><operator pos:start="3836:46" pos:end="3836:47">++</operator></expr></incr>)</control> <block pos:start="3836:50" pos:end="3843:13">{<block_content pos:start="3837:17" pos:end="3842:53">
                <decl_stmt pos:start="3837:17" pos:end="3837:60"><decl pos:start="3837:17" pos:end="3837:59"><type pos:start="3837:17" pos:end="3837:26"><name pos:start="3837:17" pos:end="3837:24">AVStream</name> <modifier pos:start="3837:26" pos:end="3837:26">*</modifier></type><name pos:start="3837:27" pos:end="3837:28">st</name> <init pos:start="3837:30" pos:end="3837:59">= <expr pos:start="3837:32" pos:end="3837:59"><call pos:start="3837:32" pos:end="3837:59"><name pos:start="3837:32" pos:end="3837:50">avformat_new_stream</name><argument_list pos:start="3837:51" pos:end="3837:59">(<argument pos:start="3837:52" pos:end="3837:52"><expr pos:start="3837:52" pos:end="3837:52"><name pos:start="3837:52" pos:end="3837:52">s</name></expr></argument>, <argument pos:start="3837:55" pos:end="3837:58"><expr pos:start="3837:55" pos:end="3837:58"><name pos:start="3837:55" pos:end="3837:58">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="3837:62" pos:end="3837:79">// FIXME free this</comment>
                <if_stmt pos:start="3838:17" pos:end="3841:17"><if pos:start="3838:17" pos:end="3841:17">if <condition pos:start="3838:20" pos:end="3838:24">(<expr pos:start="3838:21" pos:end="3838:23"><operator pos:start="3838:21" pos:end="3838:21">!</operator><name pos:start="3838:22" pos:end="3838:23">st</name></expr>)</condition> <block pos:start="3838:26" pos:end="3841:17">{<block_content pos:start="3839:21" pos:end="3840:30">
                    <expr_stmt pos:start="3839:21" pos:end="3839:60"><expr pos:start="3839:21" pos:end="3839:59"><call pos:start="3839:21" pos:end="3839:59"><name pos:start="3839:21" pos:end="3839:28">http_log</name><argument_list pos:start="3839:29" pos:end="3839:59">(<argument pos:start="3839:30" pos:end="3839:58"><expr pos:start="3839:30" pos:end="3839:58"><literal type="string" pos:start="3839:30" pos:end="3839:58">"Failed to allocate stream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <goto pos:start="3840:21" pos:end="3840:30">goto <name pos:start="3840:26" pos:end="3840:29">bail</name>;</goto>
                </block_content>}</block></if></if_stmt>
                <expr_stmt pos:start="3842:17" pos:end="3842:53"><expr pos:start="3842:17" pos:end="3842:52"><call pos:start="3842:17" pos:end="3842:52"><name pos:start="3842:17" pos:end="3842:30">unlayer_stream</name><argument_list pos:start="3842:31" pos:end="3842:52">(<argument pos:start="3842:32" pos:end="3842:33"><expr pos:start="3842:32" pos:end="3842:33"><name pos:start="3842:32" pos:end="3842:33">st</name></expr></argument>, <argument pos:start="3842:36" pos:end="3842:51"><expr pos:start="3842:36" pos:end="3842:51"><name pos:start="3842:36" pos:end="3842:51"><name pos:start="3842:36" pos:end="3842:39">feed</name><operator pos:start="3842:40" pos:end="3842:41">-&gt;</operator><name pos:start="3842:42" pos:end="3842:48">streams</name><index pos:start="3842:49" pos:end="3842:51">[<expr pos:start="3842:50" pos:end="3842:50"><name pos:start="3842:50" pos:end="3842:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <if_stmt pos:start="3844:13" pos:end="3851:13"><if pos:start="3844:13" pos:end="3851:13">if <condition pos:start="3844:16" pos:end="3844:51">(<expr pos:start="3844:17" pos:end="3844:50"><call pos:start="3844:17" pos:end="3844:46"><name pos:start="3844:17" pos:end="3844:37">avformat_write_header</name><argument_list pos:start="3844:38" pos:end="3844:46">(<argument pos:start="3844:39" pos:end="3844:39"><expr pos:start="3844:39" pos:end="3844:39"><name pos:start="3844:39" pos:end="3844:39">s</name></expr></argument>, <argument pos:start="3844:42" pos:end="3844:45"><expr pos:start="3844:42" pos:end="3844:45"><name pos:start="3844:42" pos:end="3844:45">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="3844:48" pos:end="3844:48">&lt;</operator> <literal type="number" pos:start="3844:50" pos:end="3844:50">0</literal></expr>)</condition> <block pos:start="3844:53" pos:end="3851:13">{<block_content pos:start="3845:17" pos:end="3850:26">
                <expr_stmt pos:start="3845:17" pos:end="3845:80"><expr pos:start="3845:17" pos:end="3845:79"><call pos:start="3845:17" pos:end="3845:79"><name pos:start="3845:17" pos:end="3845:24">http_log</name><argument_list pos:start="3845:25" pos:end="3845:79">(<argument pos:start="3845:26" pos:end="3845:78"><expr pos:start="3845:26" pos:end="3845:78"><literal type="string" pos:start="3845:26" pos:end="3845:78">"Container doesn't support the required parameters\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3846:17" pos:end="3846:36"><expr pos:start="3846:17" pos:end="3846:35"><call pos:start="3846:17" pos:end="3846:35"><name pos:start="3846:17" pos:end="3846:27">avio_closep</name><argument_list pos:start="3846:28" pos:end="3846:35">(<argument pos:start="3846:29" pos:end="3846:34"><expr pos:start="3846:29" pos:end="3846:34"><operator pos:start="3846:29" pos:end="3846:29">&amp;</operator><name pos:start="3846:30" pos:end="3846:34"><name pos:start="3846:30" pos:end="3846:30">s</name><operator pos:start="3846:31" pos:end="3846:32">-&gt;</operator><name pos:start="3846:33" pos:end="3846:34">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3847:17" pos:end="3847:34"><expr pos:start="3847:17" pos:end="3847:33"><name pos:start="3847:17" pos:end="3847:26"><name pos:start="3847:17" pos:end="3847:17">s</name><operator pos:start="3847:18" pos:end="3847:19">-&gt;</operator><name pos:start="3847:20" pos:end="3847:26">streams</name></name> <operator pos:start="3847:28" pos:end="3847:28">=</operator> <name pos:start="3847:30" pos:end="3847:33">NULL</name></expr>;</expr_stmt>
                <expr_stmt pos:start="3848:17" pos:end="3848:34"><expr pos:start="3848:17" pos:end="3848:33"><name pos:start="3848:17" pos:end="3848:29"><name pos:start="3848:17" pos:end="3848:17">s</name><operator pos:start="3848:18" pos:end="3848:19">-&gt;</operator><name pos:start="3848:20" pos:end="3848:29">nb_streams</name></name> <operator pos:start="3848:31" pos:end="3848:31">=</operator> <literal type="number" pos:start="3848:33" pos:end="3848:33">0</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="3849:17" pos:end="3849:41"><expr pos:start="3849:17" pos:end="3849:40"><call pos:start="3849:17" pos:end="3849:40"><name pos:start="3849:17" pos:end="3849:37">avformat_free_context</name><argument_list pos:start="3849:38" pos:end="3849:40">(<argument pos:start="3849:39" pos:end="3849:39"><expr pos:start="3849:39" pos:end="3849:39"><name pos:start="3849:39" pos:end="3849:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="3850:17" pos:end="3850:26">goto <name pos:start="3850:22" pos:end="3850:25">bail</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <comment type="block" pos:start="3852:13" pos:end="3852:38">/* XXX: need better API */</comment>
            <expr_stmt pos:start="3853:13" pos:end="3853:36"><expr pos:start="3853:13" pos:end="3853:35"><call pos:start="3853:13" pos:end="3853:35"><name pos:start="3853:13" pos:end="3853:20">av_freep</name><argument_list pos:start="3853:21" pos:end="3853:35">(<argument pos:start="3853:22" pos:end="3853:34"><expr pos:start="3853:22" pos:end="3853:34"><operator pos:start="3853:22" pos:end="3853:22">&amp;</operator><name pos:start="3853:23" pos:end="3853:34"><name pos:start="3853:23" pos:end="3853:23">s</name><operator pos:start="3853:24" pos:end="3853:25">-&gt;</operator><name pos:start="3853:26" pos:end="3853:34">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3854:13" pos:end="3854:32"><expr pos:start="3854:13" pos:end="3854:31"><call pos:start="3854:13" pos:end="3854:31"><name pos:start="3854:13" pos:end="3854:23">avio_closep</name><argument_list pos:start="3854:24" pos:end="3854:31">(<argument pos:start="3854:25" pos:end="3854:30"><expr pos:start="3854:25" pos:end="3854:30"><operator pos:start="3854:25" pos:end="3854:25">&amp;</operator><name pos:start="3854:26" pos:end="3854:30"><name pos:start="3854:26" pos:end="3854:26">s</name><operator pos:start="3854:27" pos:end="3854:28">-&gt;</operator><name pos:start="3854:29" pos:end="3854:30">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3855:13" pos:end="3855:30"><expr pos:start="3855:13" pos:end="3855:29"><name pos:start="3855:13" pos:end="3855:22"><name pos:start="3855:13" pos:end="3855:13">s</name><operator pos:start="3855:14" pos:end="3855:15">-&gt;</operator><name pos:start="3855:16" pos:end="3855:22">streams</name></name> <operator pos:start="3855:24" pos:end="3855:24">=</operator> <name pos:start="3855:26" pos:end="3855:29">NULL</name></expr>;</expr_stmt>
            <expr_stmt pos:start="3856:13" pos:end="3856:30"><expr pos:start="3856:13" pos:end="3856:29"><name pos:start="3856:13" pos:end="3856:25"><name pos:start="3856:13" pos:end="3856:13">s</name><operator pos:start="3856:14" pos:end="3856:15">-&gt;</operator><name pos:start="3856:16" pos:end="3856:25">nb_streams</name></name> <operator pos:start="3856:27" pos:end="3856:27">=</operator> <literal type="number" pos:start="3856:29" pos:end="3856:29">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="3857:13" pos:end="3857:37"><expr pos:start="3857:13" pos:end="3857:36"><call pos:start="3857:13" pos:end="3857:36"><name pos:start="3857:13" pos:end="3857:33">avformat_free_context</name><argument_list pos:start="3857:34" pos:end="3857:36">(<argument pos:start="3857:35" pos:end="3857:35"><expr pos:start="3857:35" pos:end="3857:35"><name pos:start="3857:35" pos:end="3857:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="3860:9" pos:end="3860:43">/* get feed size and write index */</comment>
        <expr_stmt pos:start="3861:9" pos:end="3861:49"><expr pos:start="3861:9" pos:end="3861:48"><name pos:start="3861:9" pos:end="3861:10">fd</name> <operator pos:start="3861:12" pos:end="3861:12">=</operator> <call pos:start="3861:14" pos:end="3861:48"><name pos:start="3861:14" pos:end="3861:17">open</name><argument_list pos:start="3861:18" pos:end="3861:48">(<argument pos:start="3861:19" pos:end="3861:37"><expr pos:start="3861:19" pos:end="3861:37"><name pos:start="3861:19" pos:end="3861:37"><name pos:start="3861:19" pos:end="3861:22">feed</name><operator pos:start="3861:23" pos:end="3861:24">-&gt;</operator><name pos:start="3861:25" pos:end="3861:37">feed_filename</name></name></expr></argument>, <argument pos:start="3861:40" pos:end="3861:47"><expr pos:start="3861:40" pos:end="3861:47"><name pos:start="3861:40" pos:end="3861:47">O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="3862:9" pos:end="3866:9"><if pos:start="3862:9" pos:end="3866:9">if <condition pos:start="3862:12" pos:end="3862:19">(<expr pos:start="3862:13" pos:end="3862:18"><name pos:start="3862:13" pos:end="3862:14">fd</name> <operator pos:start="3862:16" pos:end="3862:16">&lt;</operator> <literal type="number" pos:start="3862:18" pos:end="3862:18">0</literal></expr>)</condition> <block pos:start="3862:21" pos:end="3866:9">{<block_content pos:start="3863:13" pos:end="3865:22">
            <expr_stmt pos:start="3863:13" pos:end="3864:41"><expr pos:start="3863:13" pos:end="3864:40"><call pos:start="3863:13" pos:end="3864:40"><name pos:start="3863:13" pos:end="3863:20">http_log</name><argument_list pos:start="3863:21" pos:end="3864:40">(<argument pos:start="3863:22" pos:end="3863:61"><expr pos:start="3863:22" pos:end="3863:61"><literal type="string" pos:start="3863:22" pos:end="3863:61">"Could not open output feed file '%s'\n"</literal></expr></argument>,
                    <argument pos:start="3864:21" pos:end="3864:39"><expr pos:start="3864:21" pos:end="3864:39"><name pos:start="3864:21" pos:end="3864:39"><name pos:start="3864:21" pos:end="3864:24">feed</name><operator pos:start="3864:25" pos:end="3864:26">-&gt;</operator><name pos:start="3864:27" pos:end="3864:39">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto pos:start="3865:13" pos:end="3865:22">goto <name pos:start="3865:18" pos:end="3865:21">bail</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="3868:9" pos:end="3869:56"><expr pos:start="3868:9" pos:end="3869:55"><name pos:start="3868:9" pos:end="3868:30"><name pos:start="3868:9" pos:end="3868:12">feed</name><operator pos:start="3868:13" pos:end="3868:14">-&gt;</operator><name pos:start="3868:15" pos:end="3868:30">feed_write_index</name></name> <operator pos:start="3868:32" pos:end="3868:32">=</operator> <call pos:start="3868:34" pos:end="3869:55"><name pos:start="3868:34" pos:end="3868:38">FFMAX</name><argument_list pos:start="3868:39" pos:end="3869:55">(<argument pos:start="3868:40" pos:end="3868:63"><expr pos:start="3868:40" pos:end="3868:63"><call pos:start="3868:40" pos:end="3868:63"><name pos:start="3868:40" pos:end="3868:59">ffm_read_write_index</name><argument_list pos:start="3868:60" pos:end="3868:63">(<argument pos:start="3868:61" pos:end="3868:62"><expr pos:start="3868:61" pos:end="3868:62"><name pos:start="3868:61" pos:end="3868:62">fd</name></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument pos:start="3869:40" pos:end="3869:54"><expr pos:start="3869:40" pos:end="3869:54"><name pos:start="3869:40" pos:end="3869:54">FFM_PACKET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3870:9" pos:end="3870:49"><expr pos:start="3870:9" pos:end="3870:48"><name pos:start="3870:9" pos:end="3870:23"><name pos:start="3870:9" pos:end="3870:12">feed</name><operator pos:start="3870:13" pos:end="3870:14">-&gt;</operator><name pos:start="3870:15" pos:end="3870:23">feed_size</name></name> <operator pos:start="3870:25" pos:end="3870:25">=</operator> <call pos:start="3870:27" pos:end="3870:48"><name pos:start="3870:27" pos:end="3870:31">lseek</name><argument_list pos:start="3870:32" pos:end="3870:48">(<argument pos:start="3870:33" pos:end="3870:34"><expr pos:start="3870:33" pos:end="3870:34"><name pos:start="3870:33" pos:end="3870:34">fd</name></expr></argument>, <argument pos:start="3870:37" pos:end="3870:37"><expr pos:start="3870:37" pos:end="3870:37"><literal type="number" pos:start="3870:37" pos:end="3870:37">0</literal></expr></argument>, <argument pos:start="3870:40" pos:end="3870:47"><expr pos:start="3870:40" pos:end="3870:47"><name pos:start="3870:40" pos:end="3870:47">SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="3871:9" pos:end="3871:63">/* ensure that we do not wrap before the end of file */</comment>
        <if_stmt pos:start="3872:9" pos:end="3873:50"><if pos:start="3872:9" pos:end="3873:50">if <condition pos:start="3872:12" pos:end="3872:73">(<expr pos:start="3872:13" pos:end="3872:72"><name pos:start="3872:13" pos:end="3872:31"><name pos:start="3872:13" pos:end="3872:16">feed</name><operator pos:start="3872:17" pos:end="3872:18">-&gt;</operator><name pos:start="3872:19" pos:end="3872:31">feed_max_size</name></name> <operator pos:start="3872:33" pos:end="3872:34">&amp;&amp;</operator> <name pos:start="3872:36" pos:end="3872:54"><name pos:start="3872:36" pos:end="3872:39">feed</name><operator pos:start="3872:40" pos:end="3872:41">-&gt;</operator><name pos:start="3872:42" pos:end="3872:54">feed_max_size</name></name> <operator pos:start="3872:56" pos:end="3872:56">&lt;</operator> <name pos:start="3872:58" pos:end="3872:72"><name pos:start="3872:58" pos:end="3872:61">feed</name><operator pos:start="3872:62" pos:end="3872:63">-&gt;</operator><name pos:start="3872:64" pos:end="3872:72">feed_size</name></name></expr>)</condition><block type="pseudo" pos:start="3873:13" pos:end="3873:50"><block_content pos:start="3873:13" pos:end="3873:50">
            <expr_stmt pos:start="3873:13" pos:end="3873:50"><expr pos:start="3873:13" pos:end="3873:49"><name pos:start="3873:13" pos:end="3873:31"><name pos:start="3873:13" pos:end="3873:16">feed</name><operator pos:start="3873:17" pos:end="3873:18">-&gt;</operator><name pos:start="3873:19" pos:end="3873:31">feed_max_size</name></name> <operator pos:start="3873:33" pos:end="3873:33">=</operator> <name pos:start="3873:35" pos:end="3873:49"><name pos:start="3873:35" pos:end="3873:38">feed</name><operator pos:start="3873:39" pos:end="3873:40">-&gt;</operator><name pos:start="3873:41" pos:end="3873:49">feed_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3875:9" pos:end="3875:18"><expr pos:start="3875:9" pos:end="3875:17"><call pos:start="3875:9" pos:end="3875:17"><name pos:start="3875:9" pos:end="3875:13">close</name><argument_list pos:start="3875:14" pos:end="3875:17">(<argument pos:start="3875:15" pos:end="3875:16"><expr pos:start="3875:15" pos:end="3875:16"><name pos:start="3875:15" pos:end="3875:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return pos:start="3877:5" pos:end="3877:13">return <expr pos:start="3877:12" pos:end="3877:12"><literal type="number" pos:start="3877:12" pos:end="3877:12">0</literal></expr>;</return>

<label pos:start="3879:1" pos:end="3879:5"><name pos:start="3879:1" pos:end="3879:4">bail</name>:</label>
    <return pos:start="3880:5" pos:end="3880:14">return <expr pos:start="3880:12" pos:end="3880:13"><operator pos:start="3880:12" pos:end="3880:12">-</operator><literal type="number" pos:start="3880:13" pos:end="3880:13">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="3883:1" pos:end="3883:47">/* compute the bandwidth used by each stream */</comment>
<function pos:start="3884:1" pos:end="3905:1"><type pos:start="3884:1" pos:end="3884:11"><specifier pos:start="3884:1" pos:end="3884:6">static</specifier> <name pos:start="3884:8" pos:end="3884:11">void</name></type> <name pos:start="3884:13" pos:end="3884:29">compute_bandwidth</name><parameter_list pos:start="3884:30" pos:end="3884:35">(<parameter pos:start="3884:31" pos:end="3884:34"><decl pos:start="3884:31" pos:end="3884:34"><type pos:start="3884:31" pos:end="3884:34"><name pos:start="3884:31" pos:end="3884:34">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="3885:1" pos:end="3905:1">{<block_content pos:start="3886:5" pos:end="3904:5">
    <decl_stmt pos:start="3886:5" pos:end="3886:23"><decl pos:start="3886:5" pos:end="3886:22"><type pos:start="3886:5" pos:end="3886:12"><name pos:start="3886:5" pos:end="3886:12">unsigned</name></type> <name pos:start="3886:14" pos:end="3886:22">bandwidth</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3887:5" pos:end="3887:10"><decl pos:start="3887:5" pos:end="3887:9"><type pos:start="3887:5" pos:end="3887:7"><name pos:start="3887:5" pos:end="3887:7">int</name></type> <name pos:start="3887:9" pos:end="3887:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3888:5" pos:end="3888:27"><decl pos:start="3888:5" pos:end="3888:26"><type pos:start="3888:5" pos:end="3888:20"><name pos:start="3888:5" pos:end="3888:18">FFServerStream</name> <modifier pos:start="3888:20" pos:end="3888:20">*</modifier></type><name pos:start="3888:21" pos:end="3888:26">stream</name></decl>;</decl_stmt>

    <for pos:start="3890:5" pos:end="3904:5">for<control pos:start="3890:8" pos:end="3890:68">(<init pos:start="3890:9" pos:end="3890:37"><expr pos:start="3890:9" pos:end="3890:36"><name pos:start="3890:9" pos:end="3890:14">stream</name> <operator pos:start="3890:16" pos:end="3890:16">=</operator> <name pos:start="3890:18" pos:end="3890:36"><name pos:start="3890:18" pos:end="3890:23">config</name><operator pos:start="3890:24" pos:end="3890:24">.</operator><name pos:start="3890:25" pos:end="3890:36">first_stream</name></name></expr>;</init> <condition pos:start="3890:39" pos:end="3890:45"><expr pos:start="3890:39" pos:end="3890:44"><name pos:start="3890:39" pos:end="3890:44">stream</name></expr>;</condition> <incr pos:start="3890:47" pos:end="3890:67"><expr pos:start="3890:47" pos:end="3890:67"><name pos:start="3890:47" pos:end="3890:52">stream</name> <operator pos:start="3890:54" pos:end="3890:54">=</operator> <name pos:start="3890:56" pos:end="3890:67"><name pos:start="3890:56" pos:end="3890:61">stream</name><operator pos:start="3890:62" pos:end="3890:63">-&gt;</operator><name pos:start="3890:64" pos:end="3890:67">next</name></name></expr></incr>)</control> <block pos:start="3890:70" pos:end="3904:5">{<block_content pos:start="3891:9" pos:end="3903:53">
        <expr_stmt pos:start="3891:9" pos:end="3891:22"><expr pos:start="3891:9" pos:end="3891:21"><name pos:start="3891:9" pos:end="3891:17">bandwidth</name> <operator pos:start="3891:19" pos:end="3891:19">=</operator> <literal type="number" pos:start="3891:21" pos:end="3891:21">0</literal></expr>;</expr_stmt>
        <for pos:start="3892:9" pos:end="3902:9">for<control pos:start="3892:12" pos:end="3892:41">(<init pos:start="3892:13" pos:end="3892:16"><expr pos:start="3892:13" pos:end="3892:15"><name pos:start="3892:13" pos:end="3892:13">i</name><operator pos:start="3892:14" pos:end="3892:14">=</operator><literal type="number" pos:start="3892:15" pos:end="3892:15">0</literal></expr>;</init><condition pos:start="3892:17" pos:end="3892:37"><expr pos:start="3892:17" pos:end="3892:36"><name pos:start="3892:17" pos:end="3892:17">i</name><operator pos:start="3892:18" pos:end="3892:18">&lt;</operator><name pos:start="3892:19" pos:end="3892:36"><name pos:start="3892:19" pos:end="3892:24">stream</name><operator pos:start="3892:25" pos:end="3892:26">-&gt;</operator><name pos:start="3892:27" pos:end="3892:36">nb_streams</name></name></expr>;</condition><incr pos:start="3892:38" pos:end="3892:40"><expr pos:start="3892:38" pos:end="3892:40"><name pos:start="3892:38" pos:end="3892:38">i</name><operator pos:start="3892:39" pos:end="3892:40">++</operator></expr></incr>)</control> <block pos:start="3892:43" pos:end="3902:9">{<block_content pos:start="3893:13" pos:end="3901:13">
            <decl_stmt pos:start="3893:13" pos:end="3893:53"><decl pos:start="3893:13" pos:end="3893:52"><type pos:start="3893:13" pos:end="3893:29"><name pos:start="3893:13" pos:end="3893:27">LayeredAVStream</name> <modifier pos:start="3893:29" pos:end="3893:29">*</modifier></type><name pos:start="3893:30" pos:end="3893:31">st</name> <init pos:start="3893:33" pos:end="3893:52">= <expr pos:start="3893:35" pos:end="3893:52"><name pos:start="3893:35" pos:end="3893:52"><name pos:start="3893:35" pos:end="3893:40">stream</name><operator pos:start="3893:41" pos:end="3893:42">-&gt;</operator><name pos:start="3893:43" pos:end="3893:49">streams</name><index pos:start="3893:50" pos:end="3893:52">[<expr pos:start="3893:51" pos:end="3893:51"><name pos:start="3893:51" pos:end="3893:51">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <switch pos:start="3894:13" pos:end="3901:13">switch<condition pos:start="3894:19" pos:end="3894:41">(<expr pos:start="3894:20" pos:end="3894:40"><name pos:start="3894:20" pos:end="3894:40"><name pos:start="3894:20" pos:end="3894:21">st</name><operator pos:start="3894:22" pos:end="3894:23">-&gt;</operator><name pos:start="3894:24" pos:end="3894:28">codec</name><operator pos:start="3894:29" pos:end="3894:30">-&gt;</operator><name pos:start="3894:31" pos:end="3894:40">codec_type</name></name></expr>)</condition> <block pos:start="3894:43" pos:end="3901:13">{<block_content pos:start="3895:13" pos:end="3900:22">
            <case pos:start="3895:13" pos:end="3895:36">case <expr pos:start="3895:18" pos:end="3895:35"><name pos:start="3895:18" pos:end="3895:35">AVMEDIA_TYPE_AUDIO</name></expr>:</case>
            <case pos:start="3896:13" pos:end="3896:36">case <expr pos:start="3896:18" pos:end="3896:35"><name pos:start="3896:18" pos:end="3896:35">AVMEDIA_TYPE_VIDEO</name></expr>:</case>
                <expr_stmt pos:start="3897:17" pos:end="3897:49"><expr pos:start="3897:17" pos:end="3897:48"><name pos:start="3897:17" pos:end="3897:25">bandwidth</name> <operator pos:start="3897:27" pos:end="3897:28">+=</operator> <name pos:start="3897:30" pos:end="3897:48"><name pos:start="3897:30" pos:end="3897:31">st</name><operator pos:start="3897:32" pos:end="3897:33">-&gt;</operator><name pos:start="3897:34" pos:end="3897:38">codec</name><operator pos:start="3897:39" pos:end="3897:40">-&gt;</operator><name pos:start="3897:41" pos:end="3897:48">bit_rate</name></name></expr>;</expr_stmt>
                <break pos:start="3898:17" pos:end="3898:22">break;</break>
            <default pos:start="3899:13" pos:end="3899:20">default:</default>
                <break pos:start="3900:17" pos:end="3900:22">break;</break>
            </block_content>}</block></switch>
        </block_content>}</block></for>
        <expr_stmt pos:start="3903:9" pos:end="3903:53"><expr pos:start="3903:9" pos:end="3903:52"><name pos:start="3903:9" pos:end="3903:25"><name pos:start="3903:9" pos:end="3903:14">stream</name><operator pos:start="3903:15" pos:end="3903:16">-&gt;</operator><name pos:start="3903:17" pos:end="3903:25">bandwidth</name></name> <operator pos:start="3903:27" pos:end="3903:27">=</operator> <operator pos:start="3903:29" pos:end="3903:29">(</operator><name pos:start="3903:30" pos:end="3903:38">bandwidth</name> <operator pos:start="3903:40" pos:end="3903:40">+</operator> <literal type="number" pos:start="3903:42" pos:end="3903:44">999</literal><operator pos:start="3903:45" pos:end="3903:45">)</operator> <operator pos:start="3903:47" pos:end="3903:47">/</operator> <literal type="number" pos:start="3903:49" pos:end="3903:52">1000</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function pos:start="3907:1" pos:end="3934:1"><type pos:start="3907:1" pos:end="3907:11"><specifier pos:start="3907:1" pos:end="3907:6">static</specifier> <name pos:start="3907:8" pos:end="3907:11">void</name></type> <name pos:start="3907:13" pos:end="3907:29">handle_child_exit</name><parameter_list pos:start="3907:30" pos:end="3907:38">(<parameter pos:start="3907:31" pos:end="3907:37"><decl pos:start="3907:31" pos:end="3907:37"><type pos:start="3907:31" pos:end="3907:33"><name pos:start="3907:31" pos:end="3907:33">int</name></type> <name pos:start="3907:35" pos:end="3907:37">sig</name></decl></parameter>)</parameter_list>
<block pos:start="3908:1" pos:end="3934:1">{<block_content pos:start="3909:5" pos:end="3933:31">
    <decl_stmt pos:start="3909:5" pos:end="3909:14"><decl pos:start="3909:5" pos:end="3909:13"><type pos:start="3909:5" pos:end="3909:9"><name pos:start="3909:5" pos:end="3909:9">pid_t</name></type> <name pos:start="3909:11" pos:end="3909:13">pid</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3910:5" pos:end="3910:15"><decl pos:start="3910:5" pos:end="3910:14"><type pos:start="3910:5" pos:end="3910:7"><name pos:start="3910:5" pos:end="3910:7">int</name></type> <name pos:start="3910:9" pos:end="3910:14">status</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3911:5" pos:end="3911:18"><decl pos:start="3911:5" pos:end="3911:17"><type pos:start="3911:5" pos:end="3911:10"><name pos:start="3911:5" pos:end="3911:10">time_t</name></type> <name pos:start="3911:12" pos:end="3911:17">uptime</name></decl>;</decl_stmt>

    <while pos:start="3913:5" pos:end="3931:5">while <condition pos:start="3913:11" pos:end="3913:53">(<expr pos:start="3913:12" pos:end="3913:52"><operator pos:start="3913:12" pos:end="3913:12">(</operator><name pos:start="3913:13" pos:end="3913:15">pid</name> <operator pos:start="3913:17" pos:end="3913:17">=</operator> <call pos:start="3913:19" pos:end="3913:47"><name pos:start="3913:19" pos:end="3913:25">waitpid</name><argument_list pos:start="3913:26" pos:end="3913:47">(<argument pos:start="3913:27" pos:end="3913:28"><expr pos:start="3913:27" pos:end="3913:28"><operator pos:start="3913:27" pos:end="3913:27">-</operator><literal type="number" pos:start="3913:28" pos:end="3913:28">1</literal></expr></argument>, <argument pos:start="3913:31" pos:end="3913:37"><expr pos:start="3913:31" pos:end="3913:37"><operator pos:start="3913:31" pos:end="3913:31">&amp;</operator><name pos:start="3913:32" pos:end="3913:37">status</name></expr></argument>, <argument pos:start="3913:40" pos:end="3913:46"><expr pos:start="3913:40" pos:end="3913:46"><name pos:start="3913:40" pos:end="3913:46">WNOHANG</name></expr></argument>)</argument_list></call><operator pos:start="3913:48" pos:end="3913:48">)</operator> <operator pos:start="3913:50" pos:end="3913:50">&gt;</operator> <literal type="number" pos:start="3913:52" pos:end="3913:52">0</literal></expr>)</condition> <block pos:start="3913:55" pos:end="3931:5">{<block_content pos:start="3914:9" pos:end="3930:9">
        <decl_stmt pos:start="3914:9" pos:end="3914:29"><decl pos:start="3914:9" pos:end="3914:28"><type pos:start="3914:9" pos:end="3914:24"><name pos:start="3914:9" pos:end="3914:22">FFServerStream</name> <modifier pos:start="3914:24" pos:end="3914:24">*</modifier></type><name pos:start="3914:25" pos:end="3914:28">feed</name></decl>;</decl_stmt>

        <for pos:start="3916:9" pos:end="3930:9">for <control pos:start="3916:13" pos:end="3916:63">(<init pos:start="3916:14" pos:end="3916:38"><expr pos:start="3916:14" pos:end="3916:37"><name pos:start="3916:14" pos:end="3916:17">feed</name> <operator pos:start="3916:19" pos:end="3916:19">=</operator> <name pos:start="3916:21" pos:end="3916:37"><name pos:start="3916:21" pos:end="3916:26">config</name><operator pos:start="3916:27" pos:end="3916:27">.</operator><name pos:start="3916:28" pos:end="3916:37">first_feed</name></name></expr>;</init> <condition pos:start="3916:40" pos:end="3916:44"><expr pos:start="3916:40" pos:end="3916:43"><name pos:start="3916:40" pos:end="3916:43">feed</name></expr>;</condition> <incr pos:start="3916:46" pos:end="3916:62"><expr pos:start="3916:46" pos:end="3916:62"><name pos:start="3916:46" pos:end="3916:49">feed</name> <operator pos:start="3916:51" pos:end="3916:51">=</operator> <name pos:start="3916:53" pos:end="3916:62"><name pos:start="3916:53" pos:end="3916:56">feed</name><operator pos:start="3916:57" pos:end="3916:58">-&gt;</operator><name pos:start="3916:59" pos:end="3916:62">next</name></name></expr></incr>)</control> <block pos:start="3916:65" pos:end="3930:9">{<block_content pos:start="3917:13" pos:end="3929:60">
            <if_stmt pos:start="3917:13" pos:end="3918:25"><if pos:start="3917:13" pos:end="3918:25">if <condition pos:start="3917:16" pos:end="3917:33">(<expr pos:start="3917:17" pos:end="3917:32"><name pos:start="3917:17" pos:end="3917:25"><name pos:start="3917:17" pos:end="3917:20">feed</name><operator pos:start="3917:21" pos:end="3917:22">-&gt;</operator><name pos:start="3917:23" pos:end="3917:25">pid</name></name> <operator pos:start="3917:27" pos:end="3917:28">!=</operator> <name pos:start="3917:30" pos:end="3917:32">pid</name></expr>)</condition><block type="pseudo" pos:start="3918:17" pos:end="3918:25"><block_content pos:start="3918:17" pos:end="3918:25">
                <continue pos:start="3918:17" pos:end="3918:25">continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt pos:start="3920:13" pos:end="3920:47"><expr pos:start="3920:13" pos:end="3920:46"><name pos:start="3920:13" pos:end="3920:18">uptime</name> <operator pos:start="3920:20" pos:end="3920:20">=</operator> <call pos:start="3920:22" pos:end="3920:28"><name pos:start="3920:22" pos:end="3920:25">time</name><argument_list pos:start="3920:26" pos:end="3920:28">(<argument pos:start="3920:27" pos:end="3920:27"><expr pos:start="3920:27" pos:end="3920:27"><literal type="number" pos:start="3920:27" pos:end="3920:27">0</literal></expr></argument>)</argument_list></call> <operator pos:start="3920:30" pos:end="3920:30">-</operator> <name pos:start="3920:32" pos:end="3920:46"><name pos:start="3920:32" pos:end="3920:35">feed</name><operator pos:start="3920:36" pos:end="3920:37">-&gt;</operator><name pos:start="3920:38" pos:end="3920:46">pid_start</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="3921:13" pos:end="3921:26"><expr pos:start="3921:13" pos:end="3921:25"><name pos:start="3921:13" pos:end="3921:21"><name pos:start="3921:13" pos:end="3921:16">feed</name><operator pos:start="3921:17" pos:end="3921:18">-&gt;</operator><name pos:start="3921:19" pos:end="3921:21">pid</name></name> <operator pos:start="3921:23" pos:end="3921:23">=</operator> <literal type="number" pos:start="3921:25" pos:end="3921:25">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="3922:13" pos:end="3925:76"><expr pos:start="3922:13" pos:end="3925:75"><call pos:start="3922:13" pos:end="3925:75"><name pos:start="3922:13" pos:end="3922:19">fprintf</name><argument_list pos:start="3922:20" pos:end="3925:75">(<argument pos:start="3922:21" pos:end="3922:26"><expr pos:start="3922:21" pos:end="3922:26"><name pos:start="3922:21" pos:end="3922:26">stderr</name></expr></argument>,
                    <argument pos:start="3923:21" pos:end="3924:35"><expr pos:start="3923:21" pos:end="3924:35"><literal type="string" pos:start="3923:21" pos:end="3923:31">"%s: Pid %"</literal><name pos:start="3923:32" pos:end="3923:37">PRId64</name><literal type="string" pos:start="3923:38" pos:end="3923:69">" exited with status %d after %"</literal><name pos:start="3923:70" pos:end="3923:75">PRId64</name><literal type="string" pos:start="3923:76" pos:end="3923:78">" "</literal>
                        <literal type="string" pos:start="3924:25" pos:end="3924:35">"seconds\n"</literal></expr></argument>,
                    <argument pos:start="3925:21" pos:end="3925:34"><expr pos:start="3925:21" pos:end="3925:34"><name pos:start="3925:21" pos:end="3925:34"><name pos:start="3925:21" pos:end="3925:24">feed</name><operator pos:start="3925:25" pos:end="3925:26">-&gt;</operator><name pos:start="3925:27" pos:end="3925:34">filename</name></name></expr></argument>, <argument pos:start="3925:37" pos:end="3925:49"><expr pos:start="3925:37" pos:end="3925:49"><operator pos:start="3925:37" pos:end="3925:37">(</operator><name pos:start="3925:38" pos:end="3925:44">int64_t</name><operator pos:start="3925:45" pos:end="3925:45">)</operator> <name pos:start="3925:47" pos:end="3925:49">pid</name></expr></argument>, <argument pos:start="3925:52" pos:end="3925:57"><expr pos:start="3925:52" pos:end="3925:57"><name pos:start="3925:52" pos:end="3925:57">status</name></expr></argument>, <argument pos:start="3925:60" pos:end="3925:74"><expr pos:start="3925:60" pos:end="3925:74"><operator pos:start="3925:60" pos:end="3925:60">(</operator><name pos:start="3925:61" pos:end="3925:67">int64_t</name><operator pos:start="3925:68" pos:end="3925:68">)</operator><name pos:start="3925:69" pos:end="3925:74">uptime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="3927:13" pos:end="3929:60"><if pos:start="3927:13" pos:end="3929:60">if <condition pos:start="3927:16" pos:end="3927:28">(<expr pos:start="3927:17" pos:end="3927:27"><name pos:start="3927:17" pos:end="3927:22">uptime</name> <operator pos:start="3927:24" pos:end="3927:24">&lt;</operator> <literal type="number" pos:start="3927:26" pos:end="3927:27">30</literal></expr>)</condition><block type="pseudo" pos:start="3929:17" pos:end="3929:60"><block_content pos:start="3929:17" pos:end="3929:60">
                <comment type="block" pos:start="3928:17" pos:end="3928:48">/* Turn off any more restarts */</comment>
                <expr_stmt pos:start="3929:17" pos:end="3929:60"><expr pos:start="3929:17" pos:end="3929:59"><call pos:start="3929:17" pos:end="3929:59"><name pos:start="3929:17" pos:end="3929:40">ffserver_free_child_args</name><argument_list pos:start="3929:41" pos:end="3929:59">(<argument pos:start="3929:42" pos:end="3929:58"><expr pos:start="3929:42" pos:end="3929:58"><operator pos:start="3929:42" pos:end="3929:42">&amp;</operator><name pos:start="3929:43" pos:end="3929:58"><name pos:start="3929:43" pos:end="3929:46">feed</name><operator pos:start="3929:47" pos:end="3929:48">-&gt;</operator><name pos:start="3929:49" pos:end="3929:58">child_argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></while>

    <expr_stmt pos:start="3933:5" pos:end="3933:31"><expr pos:start="3933:5" pos:end="3933:30"><name pos:start="3933:5" pos:end="3933:26">need_to_start_children</name> <operator pos:start="3933:28" pos:end="3933:28">=</operator> <literal type="number" pos:start="3933:30" pos:end="3933:30">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="3936:1" pos:end="3940:1"><type pos:start="3936:1" pos:end="3936:11"><specifier pos:start="3936:1" pos:end="3936:6">static</specifier> <name pos:start="3936:8" pos:end="3936:11">void</name></type> <name pos:start="3936:13" pos:end="3936:21">opt_debug</name><parameter_list pos:start="3936:22" pos:end="3936:27">(<parameter pos:start="3936:23" pos:end="3936:26"><decl pos:start="3936:23" pos:end="3936:26"><type pos:start="3936:23" pos:end="3936:26"><name pos:start="3936:23" pos:end="3936:26">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="3937:1" pos:end="3940:1">{<block_content pos:start="3938:5" pos:end="3939:66">
    <expr_stmt pos:start="3938:5" pos:end="3938:21"><expr pos:start="3938:5" pos:end="3938:20"><name pos:start="3938:5" pos:end="3938:16"><name pos:start="3938:5" pos:end="3938:10">config</name><operator pos:start="3938:11" pos:end="3938:11">.</operator><name pos:start="3938:12" pos:end="3938:16">debug</name></name> <operator pos:start="3938:18" pos:end="3938:18">=</operator> <literal type="number" pos:start="3938:20" pos:end="3938:20">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="3939:5" pos:end="3939:66"><expr pos:start="3939:5" pos:end="3939:65"><call pos:start="3939:5" pos:end="3939:65"><name pos:start="3939:5" pos:end="3939:12">snprintf</name><argument_list pos:start="3939:13" pos:end="3939:65">(<argument pos:start="3939:14" pos:end="3939:31"><expr pos:start="3939:14" pos:end="3939:31"><name pos:start="3939:14" pos:end="3939:31"><name pos:start="3939:14" pos:end="3939:19">config</name><operator pos:start="3939:20" pos:end="3939:20">.</operator><name pos:start="3939:21" pos:end="3939:31">logfilename</name></name></expr></argument>, <argument pos:start="3939:34" pos:end="3939:59"><expr pos:start="3939:34" pos:end="3939:59"><sizeof pos:start="3939:34" pos:end="3939:59">sizeof<argument_list pos:start="3939:40" pos:end="3939:59">(<argument pos:start="3939:41" pos:end="3939:58"><expr pos:start="3939:41" pos:end="3939:58"><name pos:start="3939:41" pos:end="3939:58"><name pos:start="3939:41" pos:end="3939:46">config</name><operator pos:start="3939:47" pos:end="3939:47">.</operator><name pos:start="3939:48" pos:end="3939:58">logfilename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="3939:62" pos:end="3939:64"><expr pos:start="3939:62" pos:end="3939:64"><literal type="string" pos:start="3939:62" pos:end="3939:64">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="3942:1" pos:end="3948:1"><type pos:start="3942:1" pos:end="3942:4"><name pos:start="3942:1" pos:end="3942:4">void</name></type> <name pos:start="3942:6" pos:end="3942:22">show_help_default</name><parameter_list pos:start="3942:23" pos:end="3942:56">(<parameter pos:start="3942:24" pos:end="3942:38"><decl pos:start="3942:24" pos:end="3942:38"><type pos:start="3942:24" pos:end="3942:38"><specifier pos:start="3942:24" pos:end="3942:28">const</specifier> <name pos:start="3942:30" pos:end="3942:33">char</name> <modifier pos:start="3942:35" pos:end="3942:35">*</modifier></type><name pos:start="3942:36" pos:end="3942:38">opt</name></decl></parameter>, <parameter pos:start="3942:41" pos:end="3942:55"><decl pos:start="3942:41" pos:end="3942:55"><type pos:start="3942:41" pos:end="3942:55"><specifier pos:start="3942:41" pos:end="3942:45">const</specifier> <name pos:start="3942:47" pos:end="3942:50">char</name> <modifier pos:start="3942:52" pos:end="3942:52">*</modifier></type><name pos:start="3942:53" pos:end="3942:55">arg</name></decl></parameter>)</parameter_list>
<block pos:start="3943:1" pos:end="3948:1">{<block_content pos:start="3944:5" pos:end="3947:57">
    <expr_stmt pos:start="3944:5" pos:end="3945:69"><expr pos:start="3944:5" pos:end="3945:68"><call pos:start="3944:5" pos:end="3945:68"><name pos:start="3944:5" pos:end="3944:10">printf</name><argument_list pos:start="3944:11" pos:end="3945:68">(<argument pos:start="3944:12" pos:end="3945:67"><expr pos:start="3944:12" pos:end="3945:67"><literal type="string" pos:start="3944:12" pos:end="3944:40">"usage: ffserver [options]\n"</literal>
           <literal type="string" pos:start="3945:12" pos:end="3945:67">"Hyper fast multi format Audio/Video streaming server\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3946:5" pos:end="3946:17"><expr pos:start="3946:5" pos:end="3946:16"><call pos:start="3946:5" pos:end="3946:16"><name pos:start="3946:5" pos:end="3946:10">printf</name><argument_list pos:start="3946:11" pos:end="3946:16">(<argument pos:start="3946:12" pos:end="3946:15"><expr pos:start="3946:12" pos:end="3946:15"><literal type="string" pos:start="3946:12" pos:end="3946:15">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3947:5" pos:end="3947:57"><expr pos:start="3947:5" pos:end="3947:56"><call pos:start="3947:5" pos:end="3947:56"><name pos:start="3947:5" pos:end="3947:21">show_help_options</name><argument_list pos:start="3947:22" pos:end="3947:56">(<argument pos:start="3947:23" pos:end="3947:29"><expr pos:start="3947:23" pos:end="3947:29"><name pos:start="3947:23" pos:end="3947:29">options</name></expr></argument>, <argument pos:start="3947:32" pos:end="3947:46"><expr pos:start="3947:32" pos:end="3947:46"><literal type="string" pos:start="3947:32" pos:end="3947:46">"Main options:"</literal></expr></argument>, <argument pos:start="3947:49" pos:end="3947:49"><expr pos:start="3947:49" pos:end="3947:49"><literal type="number" pos:start="3947:49" pos:end="3947:49">0</literal></expr></argument>, <argument pos:start="3947:52" pos:end="3947:52"><expr pos:start="3947:52" pos:end="3947:52"><literal type="number" pos:start="3947:52" pos:end="3947:52">0</literal></expr></argument>, <argument pos:start="3947:55" pos:end="3947:55"><expr pos:start="3947:55" pos:end="3947:55"><literal type="number" pos:start="3947:55" pos:end="3947:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt pos:start="3950:1" pos:end="3956:2"><decl pos:start="3950:1" pos:end="3956:1"><type pos:start="3950:1" pos:end="3950:22"><specifier pos:start="3950:1" pos:end="3950:6">static</specifier> <specifier pos:start="3950:8" pos:end="3950:12">const</specifier> <name pos:start="3950:14" pos:end="3950:22">OptionDef</name></type> <name pos:start="3950:24" pos:end="3950:32"><name pos:start="3950:24" pos:end="3950:30">options</name><index pos:start="3950:31" pos:end="3950:32">[]</index></name> <init pos:start="3950:34" pos:end="3956:1">= <expr pos:start="3950:36" pos:end="3956:1"><block pos:start="3950:36" pos:end="3956:1">{
<cpp:include pos:start="3951:1" pos:end="3951:33">#<cpp:directive pos:start="3951:2" pos:end="3951:8">include</cpp:directive> <cpp:file pos:start="3951:10" pos:end="3951:33">"cmdutils_common_opts.h"</cpp:file></cpp:include>
    <expr pos:start="3952:5" pos:end="3952:69"><block pos:start="3952:5" pos:end="3952:69">{ <expr pos:start="3952:7" pos:end="3952:9"><literal type="string" pos:start="3952:7" pos:end="3952:9">"n"</literal></expr>, <expr pos:start="3952:12" pos:end="3952:19"><name pos:start="3952:12" pos:end="3952:19">OPT_BOOL</name></expr>, <expr pos:start="3952:22" pos:end="3952:42"><block pos:start="3952:22" pos:end="3952:42">{<expr pos:start="3952:23" pos:end="3952:40"><operator pos:start="3952:23" pos:end="3952:23">(</operator><name pos:start="3952:24" pos:end="3952:27">void</name> <operator pos:start="3952:29" pos:end="3952:29">*</operator><operator pos:start="3952:30" pos:end="3952:30">)</operator><operator pos:start="3952:31" pos:end="3952:31">&amp;</operator><name pos:start="3952:32" pos:end="3952:40">no_launch</name></expr> }</block></expr>, <expr pos:start="3952:45" pos:end="3952:67"><literal type="string" pos:start="3952:45" pos:end="3952:67">"enable no-launch mode"</literal></expr> }</block></expr>,
    <expr pos:start="3953:5" pos:end="3953:55"><block pos:start="3953:5" pos:end="3953:55">{ <expr pos:start="3953:7" pos:end="3953:9"><literal type="string" pos:start="3953:7" pos:end="3953:9">"d"</literal></expr>, <expr pos:start="3953:12" pos:end="3953:12"><literal type="number" pos:start="3953:12" pos:end="3953:12">0</literal></expr>, <expr pos:start="3953:15" pos:end="3953:32"><block pos:start="3953:15" pos:end="3953:32">{<expr pos:start="3953:16" pos:end="3953:31"><operator pos:start="3953:16" pos:end="3953:16">(</operator><name pos:start="3953:17" pos:end="3953:20">void</name><operator pos:start="3953:21" pos:end="3953:21">*</operator><operator pos:start="3953:22" pos:end="3953:22">)</operator><name pos:start="3953:23" pos:end="3953:31">opt_debug</name></expr>}</block></expr>, <expr pos:start="3953:35" pos:end="3953:53"><literal type="string" pos:start="3953:35" pos:end="3953:53">"enable debug mode"</literal></expr> }</block></expr>,
    <expr pos:start="3954:5" pos:end="3954:123"><block pos:start="3954:5" pos:end="3954:123">{ <expr pos:start="3954:7" pos:end="3954:9"><literal type="string" pos:start="3954:7" pos:end="3954:9">"f"</literal></expr>, <expr pos:start="3954:12" pos:end="3954:31"><name pos:start="3954:12" pos:end="3954:18">HAS_ARG</name> <operator pos:start="3954:20" pos:end="3954:20">|</operator> <name pos:start="3954:22" pos:end="3954:31">OPT_STRING</name></expr>, <expr pos:start="3954:34" pos:end="3954:59"><block pos:start="3954:34" pos:end="3954:59">{<expr pos:start="3954:35" pos:end="3954:57"><operator pos:start="3954:35" pos:end="3954:35">(</operator><name pos:start="3954:36" pos:end="3954:39">void</name><operator pos:start="3954:40" pos:end="3954:40">*</operator><operator pos:start="3954:41" pos:end="3954:41">)</operator><operator pos:start="3954:42" pos:end="3954:42">&amp;</operator><name pos:start="3954:43" pos:end="3954:57"><name pos:start="3954:43" pos:end="3954:48">config</name><operator pos:start="3954:49" pos:end="3954:49">.</operator><name pos:start="3954:50" pos:end="3954:57">filename</name></name></expr> }</block></expr>, <expr pos:start="3954:62" pos:end="3954:107"><literal type="string" pos:start="3954:62" pos:end="3954:107">"use configfile instead of /etc/ffserver.conf"</literal></expr>, <expr pos:start="3954:110" pos:end="3954:121"><literal type="string" pos:start="3954:110" pos:end="3954:121">"configfile"</literal></expr> }</block></expr>,
    <expr pos:start="3955:5" pos:end="3955:12"><block pos:start="3955:5" pos:end="3955:12">{ <expr pos:start="3955:7" pos:end="3955:10"><name pos:start="3955:7" pos:end="3955:10">NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function pos:start="3958:1" pos:end="4024:1"><type pos:start="3958:1" pos:end="3958:3"><name pos:start="3958:1" pos:end="3958:3">int</name></type> <name pos:start="3958:5" pos:end="3958:8">main</name><parameter_list pos:start="3958:9" pos:end="3958:31">(<parameter pos:start="3958:10" pos:end="3958:17"><decl pos:start="3958:10" pos:end="3958:17"><type pos:start="3958:10" pos:end="3958:17"><name pos:start="3958:10" pos:end="3958:12">int</name></type> <name pos:start="3958:14" pos:end="3958:17">argc</name></decl></parameter>, <parameter pos:start="3958:20" pos:end="3958:30"><decl pos:start="3958:20" pos:end="3958:30"><type pos:start="3958:20" pos:end="3958:30"><name pos:start="3958:20" pos:end="3958:23">char</name> <modifier pos:start="3958:25" pos:end="3958:25">*</modifier><modifier pos:start="3958:26" pos:end="3958:26">*</modifier></type><name pos:start="3958:27" pos:end="3958:30">argv</name></decl></parameter>)</parameter_list>
<block pos:start="3959:1" pos:end="4024:1">{<block_content pos:start="3960:5" pos:end="4023:15">
    <decl_stmt pos:start="3960:5" pos:end="3960:40"><decl pos:start="3960:5" pos:end="3960:39"><type pos:start="3960:5" pos:end="3960:20"><name pos:start="3960:5" pos:end="3960:20"><name pos:start="3960:5" pos:end="3960:10">struct</name> <name pos:start="3960:12" pos:end="3960:20">sigaction</name></name></type> <name pos:start="3960:22" pos:end="3960:27">sigact</name> <init pos:start="3960:29" pos:end="3960:39">= <expr pos:start="3960:31" pos:end="3960:39"><block pos:start="3960:31" pos:end="3960:39">{ <expr pos:start="3960:33" pos:end="3960:37"><block pos:start="3960:33" pos:end="3960:37">{ <expr pos:start="3960:35" pos:end="3960:35"><literal type="number" pos:start="3960:35" pos:end="3960:35">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="3961:5" pos:end="3961:19"><decl pos:start="3961:5" pos:end="3961:18"><type pos:start="3961:5" pos:end="3961:7"><name pos:start="3961:5" pos:end="3961:7">int</name></type> <name pos:start="3961:9" pos:end="3961:18">cfg_parsed</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3962:5" pos:end="3962:27"><decl pos:start="3962:5" pos:end="3962:26"><type pos:start="3962:5" pos:end="3962:7"><name pos:start="3962:5" pos:end="3962:7">int</name></type> <name pos:start="3962:9" pos:end="3962:11">ret</name> <init pos:start="3962:13" pos:end="3962:26">= <expr pos:start="3962:15" pos:end="3962:26"><name pos:start="3962:15" pos:end="3962:26">EXIT_FAILURE</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="3964:5" pos:end="3964:19"><expr pos:start="3964:5" pos:end="3964:18"><call pos:start="3964:5" pos:end="3964:18"><name pos:start="3964:5" pos:end="3964:16">init_dynload</name><argument_list pos:start="3964:17" pos:end="3964:18">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="3966:5" pos:end="3966:54"><expr pos:start="3966:5" pos:end="3966:53"><name pos:start="3966:5" pos:end="3966:19"><name pos:start="3966:5" pos:end="3966:10">config</name><operator pos:start="3966:11" pos:end="3966:11">.</operator><name pos:start="3966:12" pos:end="3966:19">filename</name></name> <operator pos:start="3966:21" pos:end="3966:21">=</operator> <call pos:start="3966:23" pos:end="3966:53"><name pos:start="3966:23" pos:end="3966:31">av_strdup</name><argument_list pos:start="3966:32" pos:end="3966:53">(<argument pos:start="3966:33" pos:end="3966:52"><expr pos:start="3966:33" pos:end="3966:52"><literal type="string" pos:start="3966:33" pos:end="3966:52">"/etc/ffserver.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="3968:5" pos:end="3968:40"><expr pos:start="3968:5" pos:end="3968:39"><call pos:start="3968:5" pos:end="3968:39"><name pos:start="3968:5" pos:end="3968:18">parse_loglevel</name><argument_list pos:start="3968:19" pos:end="3968:39">(<argument pos:start="3968:20" pos:end="3968:23"><expr pos:start="3968:20" pos:end="3968:23"><name pos:start="3968:20" pos:end="3968:23">argc</name></expr></argument>, <argument pos:start="3968:26" pos:end="3968:29"><expr pos:start="3968:26" pos:end="3968:29"><name pos:start="3968:26" pos:end="3968:29">argv</name></expr></argument>, <argument pos:start="3968:32" pos:end="3968:38"><expr pos:start="3968:32" pos:end="3968:38"><name pos:start="3968:32" pos:end="3968:38">options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3969:5" pos:end="3969:22"><expr pos:start="3969:5" pos:end="3969:21"><call pos:start="3969:5" pos:end="3969:21"><name pos:start="3969:5" pos:end="3969:19">av_register_all</name><argument_list pos:start="3969:20" pos:end="3969:21">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3970:5" pos:end="3970:28"><expr pos:start="3970:5" pos:end="3970:27"><call pos:start="3970:5" pos:end="3970:27"><name pos:start="3970:5" pos:end="3970:25">avformat_network_init</name><argument_list pos:start="3970:26" pos:end="3970:27">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="3972:5" pos:end="3972:37"><expr pos:start="3972:5" pos:end="3972:36"><call pos:start="3972:5" pos:end="3972:36"><name pos:start="3972:5" pos:end="3972:15">show_banner</name><argument_list pos:start="3972:16" pos:end="3972:36">(<argument pos:start="3972:17" pos:end="3972:20"><expr pos:start="3972:17" pos:end="3972:20"><name pos:start="3972:17" pos:end="3972:20">argc</name></expr></argument>, <argument pos:start="3972:23" pos:end="3972:26"><expr pos:start="3972:23" pos:end="3972:26"><name pos:start="3972:23" pos:end="3972:26">argv</name></expr></argument>, <argument pos:start="3972:29" pos:end="3972:35"><expr pos:start="3972:29" pos:end="3972:35"><name pos:start="3972:29" pos:end="3972:35">options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="3974:5" pos:end="3974:30"><expr pos:start="3974:5" pos:end="3974:29"><name pos:start="3974:5" pos:end="3974:19">my_program_name</name> <operator pos:start="3974:21" pos:end="3974:21">=</operator> <name pos:start="3974:23" pos:end="3974:29"><name pos:start="3974:23" pos:end="3974:26">argv</name><index pos:start="3974:27" pos:end="3974:29">[<expr pos:start="3974:28" pos:end="3974:28"><literal type="number" pos:start="3974:28" pos:end="3974:28">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="3976:5" pos:end="3976:51"><expr pos:start="3976:5" pos:end="3976:50"><call pos:start="3976:5" pos:end="3976:50"><name pos:start="3976:5" pos:end="3976:17">parse_options</name><argument_list pos:start="3976:18" pos:end="3976:50">(<argument pos:start="3976:19" pos:end="3976:22"><expr pos:start="3976:19" pos:end="3976:22"><name pos:start="3976:19" pos:end="3976:22">NULL</name></expr></argument>, <argument pos:start="3976:25" pos:end="3976:28"><expr pos:start="3976:25" pos:end="3976:28"><name pos:start="3976:25" pos:end="3976:28">argc</name></expr></argument>, <argument pos:start="3976:31" pos:end="3976:34"><expr pos:start="3976:31" pos:end="3976:34"><name pos:start="3976:31" pos:end="3976:34">argv</name></expr></argument>, <argument pos:start="3976:37" pos:end="3976:43"><expr pos:start="3976:37" pos:end="3976:43"><name pos:start="3976:37" pos:end="3976:43">options</name></expr></argument>, <argument pos:start="3976:46" pos:end="3976:49"><expr pos:start="3976:46" pos:end="3976:49"><name pos:start="3976:46" pos:end="3976:49">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="3978:5" pos:end="3978:27"><expr pos:start="3978:5" pos:end="3978:26"><call pos:start="3978:5" pos:end="3978:26"><name pos:start="3978:5" pos:end="3978:12">unsetenv</name><argument_list pos:start="3978:13" pos:end="3978:26">(<argument pos:start="3978:14" pos:end="3978:25"><expr pos:start="3978:14" pos:end="3978:25"><literal type="string" pos:start="3978:14" pos:end="3978:25">"http_proxy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="block" pos:start="3978:41" pos:end="3978:65">/* Kill the http_proxy */</comment>

    <expr_stmt pos:start="3980:5" pos:end="3980:53"><expr pos:start="3980:5" pos:end="3980:52"><call pos:start="3980:5" pos:end="3980:52"><name pos:start="3980:5" pos:end="3980:15">av_lfg_init</name><argument_list pos:start="3980:16" pos:end="3980:52">(<argument pos:start="3980:17" pos:end="3980:29"><expr pos:start="3980:17" pos:end="3980:29"><operator pos:start="3980:17" pos:end="3980:17">&amp;</operator><name pos:start="3980:18" pos:end="3980:29">random_state</name></expr></argument>, <argument pos:start="3980:32" pos:end="3980:51"><expr pos:start="3980:32" pos:end="3980:51"><call pos:start="3980:32" pos:end="3980:51"><name pos:start="3980:32" pos:end="3980:49">av_get_random_seed</name><argument_list pos:start="3980:50" pos:end="3980:51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="3982:5" pos:end="3982:42"><expr pos:start="3982:5" pos:end="3982:41"><name pos:start="3982:5" pos:end="3982:21"><name pos:start="3982:5" pos:end="3982:10">sigact</name><operator pos:start="3982:11" pos:end="3982:11">.</operator><name pos:start="3982:12" pos:end="3982:21">sa_handler</name></name> <operator pos:start="3982:23" pos:end="3982:23">=</operator> <name pos:start="3982:25" pos:end="3982:41">handle_child_exit</name></expr>;</expr_stmt>
    <expr_stmt pos:start="3983:5" pos:end="3983:48"><expr pos:start="3983:5" pos:end="3983:47"><name pos:start="3983:5" pos:end="3983:19"><name pos:start="3983:5" pos:end="3983:10">sigact</name><operator pos:start="3983:11" pos:end="3983:11">.</operator><name pos:start="3983:12" pos:end="3983:19">sa_flags</name></name> <operator pos:start="3983:21" pos:end="3983:21">=</operator> <name pos:start="3983:23" pos:end="3983:34">SA_NOCLDSTOP</name> <operator pos:start="3983:36" pos:end="3983:36">|</operator> <name pos:start="3983:38" pos:end="3983:47">SA_RESTART</name></expr>;</expr_stmt>
    <expr_stmt pos:start="3984:5" pos:end="3984:35"><expr pos:start="3984:5" pos:end="3984:34"><call pos:start="3984:5" pos:end="3984:34"><name pos:start="3984:5" pos:end="3984:13">sigaction</name><argument_list pos:start="3984:14" pos:end="3984:34">(<argument pos:start="3984:15" pos:end="3984:21"><expr pos:start="3984:15" pos:end="3984:21"><name pos:start="3984:15" pos:end="3984:21">SIGCHLD</name></expr></argument>, <argument pos:start="3984:24" pos:end="3984:30"><expr pos:start="3984:24" pos:end="3984:30"><operator pos:start="3984:24" pos:end="3984:24">&amp;</operator><name pos:start="3984:25" pos:end="3984:30">sigact</name></expr></argument>, <argument pos:start="3984:33" pos:end="3984:33"><expr pos:start="3984:33" pos:end="3984:33"><literal type="number" pos:start="3984:33" pos:end="3984:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="3986:5" pos:end="3990:5"><if pos:start="3986:5" pos:end="3990:5">if <condition pos:start="3986:8" pos:end="3986:77">(<expr pos:start="3986:9" pos:end="3986:76"><operator pos:start="3986:9" pos:end="3986:9">(</operator><name pos:start="3986:10" pos:end="3986:19">cfg_parsed</name> <operator pos:start="3986:21" pos:end="3986:21">=</operator> <call pos:start="3986:23" pos:end="3986:71"><name pos:start="3986:23" pos:end="3986:45">ffserver_parse_ffconfig</name><argument_list pos:start="3986:46" pos:end="3986:71">(<argument pos:start="3986:47" pos:end="3986:61"><expr pos:start="3986:47" pos:end="3986:61"><name pos:start="3986:47" pos:end="3986:61"><name pos:start="3986:47" pos:end="3986:52">config</name><operator pos:start="3986:53" pos:end="3986:53">.</operator><name pos:start="3986:54" pos:end="3986:61">filename</name></name></expr></argument>, <argument pos:start="3986:64" pos:end="3986:70"><expr pos:start="3986:64" pos:end="3986:70"><operator pos:start="3986:64" pos:end="3986:64">&amp;</operator><name pos:start="3986:65" pos:end="3986:70">config</name></expr></argument>)</argument_list></call><operator pos:start="3986:72" pos:end="3986:72">)</operator> <operator pos:start="3986:74" pos:end="3986:74">&lt;</operator> <literal type="number" pos:start="3986:76" pos:end="3986:76">0</literal></expr>)</condition> <block pos:start="3986:79" pos:end="3990:5">{<block_content pos:start="3987:9" pos:end="3989:18">
        <expr_stmt pos:start="3987:9" pos:end="3988:57"><expr pos:start="3987:9" pos:end="3988:56"><call pos:start="3987:9" pos:end="3988:56"><name pos:start="3987:9" pos:end="3987:15">fprintf</name><argument_list pos:start="3987:16" pos:end="3988:56">(<argument pos:start="3987:17" pos:end="3987:22"><expr pos:start="3987:17" pos:end="3987:22"><name pos:start="3987:17" pos:end="3987:22">stderr</name></expr></argument>, <argument pos:start="3987:25" pos:end="3987:69"><expr pos:start="3987:25" pos:end="3987:69"><literal type="string" pos:start="3987:25" pos:end="3987:69">"Error reading configuration file '%s': %s\n"</literal></expr></argument>,
                <argument pos:start="3988:17" pos:end="3988:31"><expr pos:start="3988:17" pos:end="3988:31"><name pos:start="3988:17" pos:end="3988:31"><name pos:start="3988:17" pos:end="3988:22">config</name><operator pos:start="3988:23" pos:end="3988:23">.</operator><name pos:start="3988:24" pos:end="3988:31">filename</name></name></expr></argument>, <argument pos:start="3988:34" pos:end="3988:55"><expr pos:start="3988:34" pos:end="3988:55"><call pos:start="3988:34" pos:end="3988:55"><name pos:start="3988:34" pos:end="3988:43">av_err2str</name><argument_list pos:start="3988:44" pos:end="3988:55">(<argument pos:start="3988:45" pos:end="3988:54"><expr pos:start="3988:45" pos:end="3988:54"><name pos:start="3988:45" pos:end="3988:54">cfg_parsed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="3989:9" pos:end="3989:18">goto <name pos:start="3989:14" pos:end="3989:17">bail</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="3992:5" pos:end="3992:33">/* open log file if needed */</comment>
    <if_stmt pos:start="3993:5" pos:end="3999:5"><if pos:start="3993:5" pos:end="3999:5">if <condition pos:start="3993:8" pos:end="3993:38">(<expr pos:start="3993:9" pos:end="3993:37"><name pos:start="3993:9" pos:end="3993:29"><name pos:start="3993:9" pos:end="3993:14">config</name><operator pos:start="3993:15" pos:end="3993:15">.</operator><name pos:start="3993:16" pos:end="3993:26">logfilename</name><index pos:start="3993:27" pos:end="3993:29">[<expr pos:start="3993:28" pos:end="3993:28"><literal type="number" pos:start="3993:28" pos:end="3993:28">0</literal></expr>]</index></name> <operator pos:start="3993:31" pos:end="3993:32">!=</operator> <literal type="char" pos:start="3993:34" pos:end="3993:37">'\0'</literal></expr>)</condition> <block pos:start="3993:40" pos:end="3999:5">{<block_content pos:start="3994:9" pos:end="3998:41">
        <if_stmt pos:start="3994:9" pos:end="3997:53"><if pos:start="3994:9" pos:end="3995:29">if <condition pos:start="3994:12" pos:end="3994:45">(<expr pos:start="3994:13" pos:end="3994:44"><operator pos:start="3994:13" pos:end="3994:13">!</operator><call pos:start="3994:14" pos:end="3994:44"><name pos:start="3994:14" pos:end="3994:19">strcmp</name><argument_list pos:start="3994:20" pos:end="3994:44">(<argument pos:start="3994:21" pos:end="3994:38"><expr pos:start="3994:21" pos:end="3994:38"><name pos:start="3994:21" pos:end="3994:38"><name pos:start="3994:21" pos:end="3994:26">config</name><operator pos:start="3994:27" pos:end="3994:27">.</operator><name pos:start="3994:28" pos:end="3994:38">logfilename</name></name></expr></argument>, <argument pos:start="3994:41" pos:end="3994:43"><expr pos:start="3994:41" pos:end="3994:43"><literal type="string" pos:start="3994:41" pos:end="3994:43">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3995:13" pos:end="3995:29"><block_content pos:start="3995:13" pos:end="3995:29">
            <expr_stmt pos:start="3995:13" pos:end="3995:29"><expr pos:start="3995:13" pos:end="3995:28"><name pos:start="3995:13" pos:end="3995:19">logfile</name> <operator pos:start="3995:21" pos:end="3995:21">=</operator> <name pos:start="3995:23" pos:end="3995:28">stdout</name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="3996:9" pos:end="3997:53">else<block type="pseudo" pos:start="3997:13" pos:end="3997:53"><block_content pos:start="3997:13" pos:end="3997:53">
            <expr_stmt pos:start="3997:13" pos:end="3997:53"><expr pos:start="3997:13" pos:end="3997:52"><name pos:start="3997:13" pos:end="3997:19">logfile</name> <operator pos:start="3997:21" pos:end="3997:21">=</operator> <call pos:start="3997:23" pos:end="3997:52"><name pos:start="3997:23" pos:end="3997:27">fopen</name><argument_list pos:start="3997:28" pos:end="3997:52">(<argument pos:start="3997:29" pos:end="3997:46"><expr pos:start="3997:29" pos:end="3997:46"><name pos:start="3997:29" pos:end="3997:46"><name pos:start="3997:29" pos:end="3997:34">config</name><operator pos:start="3997:35" pos:end="3997:35">.</operator><name pos:start="3997:36" pos:end="3997:46">logfilename</name></name></expr></argument>, <argument pos:start="3997:49" pos:end="3997:51"><expr pos:start="3997:49" pos:end="3997:51"><literal type="string" pos:start="3997:49" pos:end="3997:51">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt pos:start="3998:9" pos:end="3998:41"><expr pos:start="3998:9" pos:end="3998:40"><call pos:start="3998:9" pos:end="3998:40"><name pos:start="3998:9" pos:end="3998:27">av_log_set_callback</name><argument_list pos:start="3998:28" pos:end="3998:40">(<argument pos:start="3998:29" pos:end="3998:39"><expr pos:start="3998:29" pos:end="3998:39"><name pos:start="3998:29" pos:end="3998:39">http_av_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="4001:5" pos:end="4001:25"><expr pos:start="4001:5" pos:end="4001:24"><call pos:start="4001:5" pos:end="4001:24"><name pos:start="4001:5" pos:end="4001:22">build_file_streams</name><argument_list pos:start="4001:23" pos:end="4001:24">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="4003:5" pos:end="4006:5"><if pos:start="4003:5" pos:end="4006:5">if <condition pos:start="4003:8" pos:end="4003:33">(<expr pos:start="4003:9" pos:end="4003:32"><call pos:start="4003:9" pos:end="4003:28"><name pos:start="4003:9" pos:end="4003:26">build_feed_streams</name><argument_list pos:start="4003:27" pos:end="4003:28">()</argument_list></call> <operator pos:start="4003:30" pos:end="4003:30">&lt;</operator> <literal type="number" pos:start="4003:32" pos:end="4003:32">0</literal></expr>)</condition> <block pos:start="4003:35" pos:end="4006:5">{<block_content pos:start="4004:9" pos:end="4005:18">
        <expr_stmt pos:start="4004:9" pos:end="4004:51"><expr pos:start="4004:9" pos:end="4004:50"><call pos:start="4004:9" pos:end="4004:50"><name pos:start="4004:9" pos:end="4004:16">http_log</name><argument_list pos:start="4004:17" pos:end="4004:50">(<argument pos:start="4004:18" pos:end="4004:49"><expr pos:start="4004:18" pos:end="4004:49"><literal type="string" pos:start="4004:18" pos:end="4004:49">"Could not setup feed streams\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="4005:9" pos:end="4005:18">goto <name pos:start="4005:14" pos:end="4005:17">bail</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="4008:5" pos:end="4008:24"><expr pos:start="4008:5" pos:end="4008:23"><call pos:start="4008:5" pos:end="4008:23"><name pos:start="4008:5" pos:end="4008:21">compute_bandwidth</name><argument_list pos:start="4008:22" pos:end="4008:23">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="4010:5" pos:end="4010:21">/* signal init */</comment>
    <expr_stmt pos:start="4011:5" pos:end="4011:29"><expr pos:start="4011:5" pos:end="4011:28"><call pos:start="4011:5" pos:end="4011:28"><name pos:start="4011:5" pos:end="4011:10">signal</name><argument_list pos:start="4011:11" pos:end="4011:28">(<argument pos:start="4011:12" pos:end="4011:18"><expr pos:start="4011:12" pos:end="4011:18"><name pos:start="4011:12" pos:end="4011:18">SIGPIPE</name></expr></argument>, <argument pos:start="4011:21" pos:end="4011:27"><expr pos:start="4011:21" pos:end="4011:27"><name pos:start="4011:21" pos:end="4011:27">SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="4013:5" pos:end="4016:5"><if pos:start="4013:5" pos:end="4016:5">if <condition pos:start="4013:8" pos:end="4013:26">(<expr pos:start="4013:9" pos:end="4013:25"><call pos:start="4013:9" pos:end="4013:21"><name pos:start="4013:9" pos:end="4013:19">http_server</name><argument_list pos:start="4013:20" pos:end="4013:21">()</argument_list></call> <operator pos:start="4013:23" pos:end="4013:23">&lt;</operator> <literal type="number" pos:start="4013:25" pos:end="4013:25">0</literal></expr>)</condition> <block pos:start="4013:28" pos:end="4016:5">{<block_content pos:start="4014:9" pos:end="4015:18">
        <expr_stmt pos:start="4014:9" pos:end="4014:45"><expr pos:start="4014:9" pos:end="4014:44"><call pos:start="4014:9" pos:end="4014:44"><name pos:start="4014:9" pos:end="4014:16">http_log</name><argument_list pos:start="4014:17" pos:end="4014:44">(<argument pos:start="4014:18" pos:end="4014:43"><expr pos:start="4014:18" pos:end="4014:43"><literal type="string" pos:start="4014:18" pos:end="4014:43">"Could not start server\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="4015:9" pos:end="4015:18">goto <name pos:start="4015:14" pos:end="4015:17">bail</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="4018:5" pos:end="4018:21"><expr pos:start="4018:5" pos:end="4018:20"><name pos:start="4018:5" pos:end="4018:7">ret</name><operator pos:start="4018:8" pos:end="4018:8">=</operator><name pos:start="4018:9" pos:end="4018:20">EXIT_SUCCESS</name></expr>;</expr_stmt>

<label pos:start="4020:1" pos:end="4020:5"><name pos:start="4020:1" pos:end="4020:4">bail</name>:</label>
    <expr_stmt pos:start="4021:5" pos:end="4021:32"><expr pos:start="4021:5" pos:end="4021:31"><call pos:start="4021:5" pos:end="4021:31"><name pos:start="4021:5" pos:end="4021:12">av_freep</name> <argument_list pos:start="4021:14" pos:end="4021:31">(<argument pos:start="4021:15" pos:end="4021:30"><expr pos:start="4021:15" pos:end="4021:30"><operator pos:start="4021:15" pos:end="4021:15">&amp;</operator><name pos:start="4021:16" pos:end="4021:30"><name pos:start="4021:16" pos:end="4021:21">config</name><operator pos:start="4021:22" pos:end="4021:22">.</operator><name pos:start="4021:23" pos:end="4021:30">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="4022:5" pos:end="4022:30"><expr pos:start="4022:5" pos:end="4022:29"><call pos:start="4022:5" pos:end="4022:29"><name pos:start="4022:5" pos:end="4022:27">avformat_network_deinit</name><argument_list pos:start="4022:28" pos:end="4022:29">()</argument_list></call></expr>;</expr_stmt>
    <return pos:start="4023:5" pos:end="4023:15">return <expr pos:start="4023:12" pos:end="4023:14"><name pos:start="4023:12" pos:end="4023:14">ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
