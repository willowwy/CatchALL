<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="program_file/output_data\dot11decrypt2.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="7:3">/* dot11decrypt.c
 *
 * Copyright (c) 2006 CACE Technologies, Davis (California)
 * All rights reserved.
 *
 * SPDX-License-Identifier: (BSD-3-Clause OR GPL-2.0-only)
 */</comment>

<comment type="block" format="doxygen" pos:start="9:1" pos:end="9:78">/****************************************************************************/</comment>
<comment type="block" pos:start="10:1" pos:end="10:78">/*      File includes                                                       */</comment>

<cpp:include pos:start="12:1" pos:end="12:19">#<cpp:directive pos:start="12:2" pos:end="12:8">include</cpp:directive> <cpp:file pos:start="12:10" pos:end="12:19">"config.h"</cpp:file></cpp:include>

<cpp:include pos:start="14:1" pos:end="14:17">#<cpp:directive pos:start="14:2" pos:end="14:8">include</cpp:directive> <cpp:file pos:start="14:10" pos:end="14:17">&lt;glib.h&gt;</cpp:file></cpp:include>

<cpp:include pos:start="16:1" pos:end="16:28">#<cpp:directive pos:start="16:2" pos:end="16:8">include</cpp:directive> <cpp:file pos:start="16:10" pos:end="16:28">&lt;wsutil/wsgcrypt.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="17:1" pos:end="17:25">#<cpp:directive pos:start="17:2" pos:end="17:8">include</cpp:directive> <cpp:file pos:start="17:10" pos:end="17:25">&lt;wsutil/crc32.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="18:1" pos:end="18:24">#<cpp:directive pos:start="18:2" pos:end="18:8">include</cpp:directive> <cpp:file pos:start="18:10" pos:end="18:24">&lt;wsutil/pint.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="19:1" pos:end="19:31">#<cpp:directive pos:start="19:2" pos:end="19:8">include</cpp:directive> <cpp:file pos:start="19:10" pos:end="19:31">&lt;wsutil/glib-compat.h&gt;</cpp:file></cpp:include>

<cpp:include pos:start="21:1" pos:end="21:23">#<cpp:directive pos:start="21:2" pos:end="21:8">include</cpp:directive> <cpp:file pos:start="21:10" pos:end="21:23">&lt;epan/proto.h&gt;</cpp:file></cpp:include> <comment type="block" pos:start="21:25" pos:end="21:51">/* for DISSECTOR_ASSERT. */</comment>
<cpp:include pos:start="22:1" pos:end="22:24">#<cpp:directive pos:start="22:2" pos:end="22:8">include</cpp:directive> <cpp:file pos:start="22:10" pos:end="22:24">&lt;epan/tvbuff.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="23:1" pos:end="23:24">#<cpp:directive pos:start="23:2" pos:end="23:8">include</cpp:directive> <cpp:file pos:start="23:10" pos:end="23:24">&lt;epan/to_str.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="24:1" pos:end="24:25">#<cpp:directive pos:start="24:2" pos:end="24:8">include</cpp:directive> <cpp:file pos:start="24:10" pos:end="24:25">&lt;epan/strutil.h&gt;</cpp:file></cpp:include>

<cpp:include pos:start="26:1" pos:end="26:30">#<cpp:directive pos:start="26:2" pos:end="26:8">include</cpp:directive> <cpp:file pos:start="26:10" pos:end="26:30">"dot11decrypt_util.h"</cpp:file></cpp:include>
<cpp:include pos:start="27:1" pos:end="27:32">#<cpp:directive pos:start="27:2" pos:end="27:8">include</cpp:directive> <cpp:file pos:start="27:10" pos:end="27:32">"dot11decrypt_system.h"</cpp:file></cpp:include>
<cpp:include pos:start="28:1" pos:end="28:29">#<cpp:directive pos:start="28:2" pos:end="28:8">include</cpp:directive> <cpp:file pos:start="28:10" pos:end="28:29">"dot11decrypt_int.h"</cpp:file></cpp:include>

<cpp:include pos:start="30:1" pos:end="30:31">#<cpp:directive pos:start="30:2" pos:end="30:8">include</cpp:directive> <cpp:file pos:start="30:10" pos:end="30:31">"dot11decrypt_debug.h"</cpp:file></cpp:include>

<cpp:include pos:start="32:1" pos:end="32:24">#<cpp:directive pos:start="32:2" pos:end="32:8">include</cpp:directive> <cpp:file pos:start="32:10" pos:end="32:24">"wep-wpadefs.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen" pos:start="34:1" pos:end="34:78">/****************************************************************************/</comment>
<function_decl pos:start="35:1" pos:end="35:42"><type pos:start="35:1" pos:end="35:10"><specifier pos:start="35:1" pos:end="35:6">static</specifier> <name pos:start="35:8" pos:end="35:10">int</name></type> <name pos:start="35:12" pos:end="35:32">Dot11DecryptGetKckLen</name><parameter_list pos:start="35:33" pos:end="35:41">(<parameter pos:start="35:34" pos:end="35:40"><decl pos:start="35:34" pos:end="35:40"><type pos:start="35:34" pos:end="35:36"><name pos:start="35:34" pos:end="35:36">int</name></type> <name pos:start="35:38" pos:end="35:40">akm</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="36:1" pos:end="36:44"><type pos:start="36:1" pos:end="36:10"><specifier pos:start="36:1" pos:end="36:6">static</specifier> <name pos:start="36:8" pos:end="36:10">int</name></type> <name pos:start="36:12" pos:end="36:31">Dot11DecryptGetTkLen</name><parameter_list pos:start="36:32" pos:end="36:43">(<parameter pos:start="36:33" pos:end="36:42"><decl pos:start="36:33" pos:end="36:42"><type pos:start="36:33" pos:end="36:35"><name pos:start="36:33" pos:end="36:35">int</name></type> <name pos:start="36:37" pos:end="36:42">cipher</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="37:1" pos:end="37:42"><type pos:start="37:1" pos:end="37:10"><specifier pos:start="37:1" pos:end="37:6">static</specifier> <name pos:start="37:8" pos:end="37:10">int</name></type> <name pos:start="37:12" pos:end="37:32">Dot11DecryptGetKekLen</name><parameter_list pos:start="37:33" pos:end="37:41">(<parameter pos:start="37:34" pos:end="37:40"><decl pos:start="37:34" pos:end="37:40"><type pos:start="37:34" pos:end="37:36"><name pos:start="37:34" pos:end="37:36">int</name></type> <name pos:start="37:38" pos:end="37:40">akm</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="38:1" pos:end="38:54"><type pos:start="38:1" pos:end="38:10"><specifier pos:start="38:1" pos:end="38:6">static</specifier> <name pos:start="38:8" pos:end="38:10">int</name></type> <name pos:start="38:12" pos:end="38:32">Dot11DecryptGetPtkLen</name><parameter_list pos:start="38:33" pos:end="38:53">(<parameter pos:start="38:34" pos:end="38:40"><decl pos:start="38:34" pos:end="38:40"><type pos:start="38:34" pos:end="38:40"><name pos:start="38:34" pos:end="38:36">int</name></type> <name pos:start="38:38" pos:end="38:40">akm</name></decl></parameter>, <parameter pos:start="38:43" pos:end="38:52"><decl pos:start="38:43" pos:end="38:52"><type pos:start="38:43" pos:end="38:52"><name pos:start="38:43" pos:end="38:45">int</name></type> <name pos:start="38:47" pos:end="38:52">cipher</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="39:1" pos:end="83:0"><type pos:start="39:1" pos:end="39:10"><specifier pos:start="39:1" pos:end="39:6">static</specifier> <name pos:start="39:8" pos:end="39:10">int</name></type> <name pos:start="39:12" pos:end="39:41">Dot11DecryptGetHashAlgoFromAkm</name><parameter_list pos:start="39:42" pos:end="39:50">(<parameter pos:start="39:43" pos:end="39:49"><decl pos:start="39:43" pos:end="39:49"><type pos:start="39:43" pos:end="39:45"><name pos:start="39:43" pos:end="39:45">int</name></type> <name pos:start="39:47" pos:end="39:49">akm</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen" pos:start="41:1" pos:end="41:78">/****************************************************************************/</comment>
<comment type="block" pos:start="42:1" pos:end="42:82">/*      Constant definitions                                                    */</comment>

<comment type="block" pos:start="44:1" pos:end="44:82">/*      EAPOL definitions                                                       */</comment>
<comment type="block" format="doxygen" pos:start="45:1" pos:end="48:3">/**
 * Length of the EAPOL-Key key confirmation key (KCK) used to calculate
 * MIC over EAPOL frame and validate an EAPOL packet (128 bits)
 */</comment>
<cpp:define pos:start="49:1" pos:end="49:35">#<cpp:directive pos:start="49:2" pos:end="49:7">define</cpp:directive> <cpp:macro pos:start="49:9" pos:end="49:32"><name pos:start="49:9" pos:end="49:32">DOT11DECRYPT_WPA_KCK_LEN</name></cpp:macro> <cpp:value pos:start="49:34" pos:end="49:35">16</cpp:value></cpp:define>
<comment type="block" format="doxygen" pos:start="50:1" pos:end="52:3">/**
 *Offset of the Key MIC in the EAPOL packet body
 */</comment>
<cpp:define pos:start="53:1" pos:end="53:41">#<cpp:directive pos:start="53:2" pos:end="53:7">define</cpp:directive> <cpp:macro pos:start="53:9" pos:end="53:38"><name pos:start="53:9" pos:end="53:38">DOT11DECRYPT_WPA_MICKEY_OFFSET</name></cpp:macro> <cpp:value pos:start="53:40" pos:end="53:41">77</cpp:value></cpp:define>
<comment type="block" format="doxygen" pos:start="54:1" pos:end="57:3">/**
 * Maximum length of the EAPOL packet (it depends on the maximum MAC
 * frame size)
 */</comment>
<cpp:define pos:start="58:1" pos:end="58:43">#<cpp:directive pos:start="58:2" pos:end="58:7">define</cpp:directive> <cpp:macro pos:start="58:9" pos:end="58:38"><name pos:start="58:9" pos:end="58:38">DOT11DECRYPT_WPA_MAX_EAPOL_LEN</name></cpp:macro> <cpp:value pos:start="58:40" pos:end="58:43">4095</cpp:value></cpp:define>
<comment type="block" format="doxygen" pos:start="59:1" pos:end="65:3">/**
 * EAPOL Key Descriptor Version 1, used for all EAPOL-Key frames to and
 * from a STA when neither the group nor pairwise ciphers are CCMP for
 * Key Descriptor 1.
 * @note
 * Defined in 802.11i-2004, page 78
 */</comment>
<cpp:define pos:start="66:1" pos:end="66:43">#<cpp:directive pos:start="66:2" pos:end="66:7">define</cpp:directive> <cpp:macro pos:start="66:9" pos:end="66:41"><name pos:start="66:9" pos:end="66:41">DOT11DECRYPT_WPA_KEY_VER_NOT_CCMP</name></cpp:macro> <cpp:value pos:start="66:43" pos:end="66:43">1</cpp:value></cpp:define>
<comment type="block" format="doxygen" pos:start="67:1" pos:end="73:3">/**
 * EAPOL Key Descriptor Version 2, used for all EAPOL-Key frames to and
 * from a STA when either the pairwise or the group cipher is AES-CCMP
 * for Key Descriptor 2.
 * /note
 * Defined in 802.11i-2004, page 78
 */</comment>
<cpp:define pos:start="74:1" pos:end="74:43">#<cpp:directive pos:start="74:2" pos:end="74:7">define</cpp:directive> <cpp:macro pos:start="74:9" pos:end="74:41"><name pos:start="74:9" pos:end="74:41">DOT11DECRYPT_WPA_KEY_VER_AES_CCMP</name></cpp:macro> <cpp:value pos:start="74:43" pos:end="74:43">2</cpp:value></cpp:define>

<comment type="block" format="doxygen" pos:start="76:1" pos:end="76:80">/** Define EAPOL Key Descriptor type values:  use 254 for WPA and 2 for WPA2 **/</comment>
<cpp:define pos:start="77:1" pos:end="77:47">#<cpp:directive pos:start="77:2" pos:end="77:7">define</cpp:directive> <cpp:macro pos:start="77:9" pos:end="77:43"><name pos:start="77:9" pos:end="77:43">DOT11DECRYPT_RSN_WPA_KEY_DESCRIPTOR</name></cpp:macro> <cpp:value pos:start="77:45" pos:end="77:47">254</cpp:value></cpp:define>
<cpp:define pos:start="78:1" pos:end="78:46">#<cpp:directive pos:start="78:2" pos:end="78:7">define</cpp:directive> <cpp:macro pos:start="78:9" pos:end="78:44"><name pos:start="78:9" pos:end="78:44">DOT11DECRYPT_RSN_WPA2_KEY_DESCRIPTOR</name></cpp:macro> <cpp:value pos:start="78:46" pos:end="78:46">2</cpp:value></cpp:define>

<comment type="block" pos:start="80:1" pos:end="80:33">/* PMK to PTK derive functions */</comment>
<cpp:define pos:start="81:1" pos:end="81:39">#<cpp:directive pos:start="81:2" pos:end="81:7">define</cpp:directive> <cpp:macro pos:start="81:9" pos:end="81:37"><name pos:start="81:9" pos:end="81:37">DOT11DECRYPT_DERIVE_USING_PRF</name></cpp:macro> <cpp:value pos:start="81:39" pos:end="81:39">0</cpp:value></cpp:define>
<cpp:define pos:start="82:1" pos:end="82:39">#<cpp:directive pos:start="82:2" pos:end="82:7">define</cpp:directive> <cpp:macro pos:start="82:9" pos:end="82:37"><name pos:start="82:9" pos:end="82:37">DOT11DECRYPT_DERIVE_USING_KDF</name></cpp:macro> <cpp:value pos:start="82:39" pos:end="82:39">1</cpp:value></cpp:define>
<comment type="block" format="doxygen" pos:start="83:1" pos:end="83:78">/****************************************************************************/</comment>

<comment type="block" format="doxygen" pos:start="85:1" pos:end="85:78">/****************************************************************************/</comment>
<comment type="block" pos:start="86:1" pos:end="86:82">/*      Macro definitions                                                       */</comment>

<decl_stmt pos:start="88:1" pos:end="110:0"><decl pos:start="88:1" pos:end="88:36"><type pos:start="88:1" pos:end="88:19"><specifier pos:start="88:1" pos:end="88:6">extern</specifier> <specifier pos:start="88:8" pos:end="88:12">const</specifier> <name pos:start="88:14" pos:end="88:19">UINT32</name></type> <name pos:start="88:21" pos:end="88:36"><name pos:start="88:21" pos:end="88:31">crc32_table</name><index pos:start="88:32" pos:end="88:36">[<expr pos:start="88:33" pos:end="88:35"><literal type="number" pos:start="88:33" pos:end="88:35">256</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:define pos:start="89:1" pos:end="89:74">#<cpp:directive pos:start="89:2" pos:end="89:7">define</cpp:directive> <cpp:macro pos:start="89:9" pos:end="89:20"><name pos:start="89:9" pos:end="89:11">CRC</name><parameter_list pos:start="89:12" pos:end="89:20">(<parameter pos:start="89:13" pos:end="89:15"><type pos:start="89:13" pos:end="89:15"><name pos:start="89:13" pos:end="89:15">crc</name></type></parameter>, <parameter pos:start="89:18" pos:end="89:19"><type pos:start="89:18" pos:end="89:19"><name pos:start="89:18" pos:end="89:19">ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="89:22" pos:end="89:74">(crc = (crc &gt;&gt; 8) ^ crc32_table[(crc ^ (ch)) &amp; 0xff])</cpp:value></cpp:define>

<cpp:define pos:start="91:1" pos:end="91:27">#<cpp:directive pos:start="91:2" pos:end="91:7">define</cpp:directive> <cpp:macro pos:start="91:9" pos:end="91:23"><name pos:start="91:9" pos:end="91:18">KCK_OFFSET</name><parameter_list pos:start="91:19" pos:end="91:23">(<parameter pos:start="91:20" pos:end="91:22"><type pos:start="91:20" pos:end="91:22"><name pos:start="91:20" pos:end="91:22">akm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="91:25" pos:end="91:27">(0)</cpp:value></cpp:define>
<cpp:define pos:start="92:1" pos:end="92:76">#<cpp:directive pos:start="92:2" pos:end="92:7">define</cpp:directive> <cpp:macro pos:start="92:9" pos:end="92:23"><name pos:start="92:9" pos:end="92:18">KEK_OFFSET</name><parameter_list pos:start="92:19" pos:end="92:23">(<parameter pos:start="92:20" pos:end="92:22"><type pos:start="92:20" pos:end="92:22"><name pos:start="92:20" pos:end="92:22">akm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="92:25" pos:end="92:76">((KCK_OFFSET(akm) + Dot11DecryptGetKckLen(akm) / 8))</cpp:value></cpp:define>
<cpp:define pos:start="93:1" pos:end="93:75">#<cpp:directive pos:start="93:2" pos:end="93:7">define</cpp:directive> <cpp:macro pos:start="93:9" pos:end="93:22"><name pos:start="93:9" pos:end="93:17">TK_OFFSET</name><parameter_list pos:start="93:18" pos:end="93:22">(<parameter pos:start="93:19" pos:end="93:21"><type pos:start="93:19" pos:end="93:21"><name pos:start="93:19" pos:end="93:21">akm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="93:24" pos:end="93:75">((KEK_OFFSET(akm) + Dot11DecryptGetKekLen(akm) / 8))</cpp:value></cpp:define>

<cpp:define pos:start="95:1" pos:end="95:62">#<cpp:directive pos:start="95:2" pos:end="95:7">define</cpp:directive> <cpp:macro pos:start="95:9" pos:end="95:38"><name pos:start="95:9" pos:end="95:28">DOT11DECRYPT_GET_KCK</name><parameter_list pos:start="95:29" pos:end="95:38">(<parameter pos:start="95:30" pos:end="95:32"><type pos:start="95:30" pos:end="95:32"><name pos:start="95:30" pos:end="95:32">ptk</name></type></parameter>, <parameter pos:start="95:35" pos:end="95:37"><type pos:start="95:35" pos:end="95:37"><name pos:start="95:35" pos:end="95:37">akm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="95:40" pos:end="95:62">(ptk + KCK_OFFSET(akm))</cpp:value></cpp:define>
<cpp:define pos:start="96:1" pos:end="96:62">#<cpp:directive pos:start="96:2" pos:end="96:7">define</cpp:directive> <cpp:macro pos:start="96:9" pos:end="96:38"><name pos:start="96:9" pos:end="96:28">DOT11DECRYPT_GET_KEK</name><parameter_list pos:start="96:29" pos:end="96:38">(<parameter pos:start="96:30" pos:end="96:32"><type pos:start="96:30" pos:end="96:32"><name pos:start="96:30" pos:end="96:32">ptk</name></type></parameter>, <parameter pos:start="96:35" pos:end="96:37"><type pos:start="96:35" pos:end="96:37"><name pos:start="96:35" pos:end="96:37">akm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="96:40" pos:end="96:62">(ptk + KEK_OFFSET(akm))</cpp:value></cpp:define>
<cpp:define pos:start="97:1" pos:end="97:48">#<cpp:directive pos:start="97:2" pos:end="97:7">define</cpp:directive> <cpp:macro pos:start="97:9" pos:end="97:37"><name pos:start="97:9" pos:end="97:32">DOT11DECRYPT_GET_TK_TKIP</name><parameter_list pos:start="97:33" pos:end="97:37">(<parameter pos:start="97:34" pos:end="97:36"><type pos:start="97:34" pos:end="97:36"><name pos:start="97:34" pos:end="97:36">ptk</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="97:39" pos:end="97:48">(ptk + 32)</cpp:value></cpp:define>
<cpp:define pos:start="98:1" pos:end="98:60">#<cpp:directive pos:start="98:2" pos:end="98:7">define</cpp:directive> <cpp:macro pos:start="98:9" pos:end="98:37"><name pos:start="98:9" pos:end="98:27">DOT11DECRYPT_GET_TK</name><parameter_list pos:start="98:28" pos:end="98:37">(<parameter pos:start="98:29" pos:end="98:31"><type pos:start="98:29" pos:end="98:31"><name pos:start="98:29" pos:end="98:31">ptk</name></type></parameter>, <parameter pos:start="98:34" pos:end="98:36"><type pos:start="98:34" pos:end="98:36"><name pos:start="98:34" pos:end="98:36">akm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="98:39" pos:end="98:60">(ptk + TK_OFFSET(akm))</cpp:value></cpp:define>

<cpp:define pos:start="100:1" pos:end="100:66">#<cpp:directive pos:start="100:2" pos:end="100:7">define</cpp:directive> <cpp:macro pos:start="100:9" pos:end="100:39"><name pos:start="100:9" pos:end="100:34">DOT11DECRYPT_IEEE80211_OUI</name><parameter_list pos:start="100:35" pos:end="100:39">(<parameter pos:start="100:36" pos:end="100:38"><type pos:start="100:36" pos:end="100:38"><name pos:start="100:36" pos:end="100:38">oui</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="100:41" pos:end="100:66">(pntoh24(oui) == 0x000fac)</cpp:value></cpp:define>

<comment type="block" format="doxygen" pos:start="102:1" pos:end="102:78">/****************************************************************************/</comment>

<comment type="block" format="doxygen" pos:start="104:1" pos:end="104:78">/****************************************************************************/</comment>
<comment type="block" pos:start="105:1" pos:end="105:82">/*      Type definitions                                                        */</comment>

<comment type="block" pos:start="107:1" pos:end="107:82">/*      Internal function prototype declarations                                */</comment>

<cpp:ifdef pos:start="109:1" pos:end="109:18">#<cpp:directive pos:start="109:2" pos:end="109:6">ifdef</cpp:directive> <name pos:start="109:8" pos:end="109:18">__cplusplus</name></cpp:ifdef>
<extern pos:start="110:1" pos:end="272:0">extern <literal type="string" pos:start="110:8" pos:end="110:10">"C"</literal>
<block pos:start="111:1" pos:end="272:0">{<block_content pos:start="126:5" pos:end="263:0">
<cpp:endif pos:start="112:1" pos:end="112:6">#<cpp:directive pos:start="112:2" pos:end="112:6">endif</cpp:directive></cpp:endif>

    <comment type="block" format="doxygen" pos:start="114:5" pos:end="125:7">/**
     * It is a step of the PBKDF2 (specifically the PKCS #5 v2.0) defined in
     * the RFC 2898 to derive a key (used as PMK in WPA)
     * @param ppbytes [IN] pointer to a password (sequence of between 8 and
     * 63 ASCII encoded characters)
     * @param ssid [IN] pointer to the SSID string encoded in max 32 ASCII
     * encoded characters
     * @param iterations [IN] times to hash the password (4096 for WPA)
     * @param count [IN] ???
     * @param output [OUT] pointer to a preallocated buffer of
     * SHA1_DIGEST_LEN characters that will contain a part of the key
     */</comment>
    <function_decl pos:start="126:5" pos:end="133:23"><type pos:start="126:5" pos:end="126:14"><specifier pos:start="126:5" pos:end="126:10">static</specifier> <name pos:start="126:12" pos:end="126:14">INT</name></type> <name pos:start="126:16" pos:end="126:42">Dot11DecryptRsnaPwd2PskStep</name><parameter_list pos:start="126:43" pos:end="133:22">(
        <parameter pos:start="127:9" pos:end="127:29"><decl pos:start="127:9" pos:end="127:29"><type pos:start="127:9" pos:end="127:29"><specifier pos:start="127:9" pos:end="127:13">const</specifier> <name pos:start="127:15" pos:end="127:20">guint8</name> <modifier pos:start="127:22" pos:end="127:22">*</modifier></type><name pos:start="127:23" pos:end="127:29">ppbytes</name></decl></parameter>,
        <parameter pos:start="128:9" pos:end="128:30"><decl pos:start="128:9" pos:end="128:30"><type pos:start="128:9" pos:end="128:30"><specifier pos:start="128:9" pos:end="128:13">const</specifier> <name pos:start="128:15" pos:end="128:19">guint</name></type> <name pos:start="128:21" pos:end="128:30">passLength</name></decl></parameter>,
        <parameter pos:start="129:9" pos:end="129:24"><decl pos:start="129:9" pos:end="129:24"><type pos:start="129:9" pos:end="129:24"><specifier pos:start="129:9" pos:end="129:13">const</specifier> <name pos:start="129:15" pos:end="129:18">CHAR</name> <modifier pos:start="129:20" pos:end="129:20">*</modifier></type><name pos:start="129:21" pos:end="129:24">ssid</name></decl></parameter>,
        <parameter pos:start="130:9" pos:end="130:31"><decl pos:start="130:9" pos:end="130:31"><type pos:start="130:9" pos:end="130:31"><specifier pos:start="130:9" pos:end="130:13">const</specifier> <name pos:start="130:15" pos:end="130:20">size_t</name></type> <name pos:start="130:22" pos:end="130:31">ssidLength</name></decl></parameter>,
        <parameter pos:start="131:9" pos:end="131:28"><decl pos:start="131:9" pos:end="131:28"><type pos:start="131:9" pos:end="131:28"><specifier pos:start="131:9" pos:end="131:13">const</specifier> <name pos:start="131:15" pos:end="131:17">INT</name></type> <name pos:start="131:19" pos:end="131:28">iterations</name></decl></parameter>,
        <parameter pos:start="132:9" pos:end="132:23"><decl pos:start="132:9" pos:end="132:23"><type pos:start="132:9" pos:end="132:23"><specifier pos:start="132:9" pos:end="132:13">const</specifier> <name pos:start="132:15" pos:end="132:17">INT</name></type> <name pos:start="132:19" pos:end="132:23">count</name></decl></parameter>,
        <parameter pos:start="133:9" pos:end="133:21"><decl pos:start="133:9" pos:end="133:21"><type pos:start="133:9" pos:end="133:21"><name pos:start="133:9" pos:end="133:13">UCHAR</name> <modifier pos:start="133:15" pos:end="133:15">*</modifier></type><name pos:start="133:16" pos:end="133:21">output</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="doxygen" pos:start="135:5" pos:end="146:7">/**
     * It calculates the passphrase-to-PSK mapping reccomanded for use with
     * RSNAs. This implementation uses the PBKDF2 method defined in the RFC
     * 2898.
     * @param passphrase [IN] pointer to a password (sequence of between 8 and
     * 63 ASCII encoded characters)
     * @param ssid [IN] pointer to the SSID string encoded in max 32 ASCII
     * encoded characters
     * @param output [OUT] calculated PSK (to use as PMK in WPA)
     * @note
     * Described in 802.11i-2004, page 165
     */</comment>
    <function_decl pos:start="147:5" pos:end="151:23"><type pos:start="147:5" pos:end="147:14"><specifier pos:start="147:5" pos:end="147:10">static</specifier> <name pos:start="147:12" pos:end="147:14">INT</name></type> <name pos:start="147:16" pos:end="147:38">Dot11DecryptRsnaPwd2Psk</name><parameter_list pos:start="147:39" pos:end="151:22">(
        <parameter pos:start="148:9" pos:end="148:30"><decl pos:start="148:9" pos:end="148:30"><type pos:start="148:9" pos:end="148:30"><specifier pos:start="148:9" pos:end="148:13">const</specifier> <name pos:start="148:15" pos:end="148:18">CHAR</name> <modifier pos:start="148:20" pos:end="148:20">*</modifier></type><name pos:start="148:21" pos:end="148:30">passphrase</name></decl></parameter>,
        <parameter pos:start="149:9" pos:end="149:24"><decl pos:start="149:9" pos:end="149:24"><type pos:start="149:9" pos:end="149:24"><specifier pos:start="149:9" pos:end="149:13">const</specifier> <name pos:start="149:15" pos:end="149:18">CHAR</name> <modifier pos:start="149:20" pos:end="149:20">*</modifier></type><name pos:start="149:21" pos:end="149:24">ssid</name></decl></parameter>,
        <parameter pos:start="150:9" pos:end="150:31"><decl pos:start="150:9" pos:end="150:31"><type pos:start="150:9" pos:end="150:31"><specifier pos:start="150:9" pos:end="150:13">const</specifier> <name pos:start="150:15" pos:end="150:20">size_t</name></type> <name pos:start="150:22" pos:end="150:31">ssidLength</name></decl></parameter>,
        <parameter pos:start="151:9" pos:end="151:21"><decl pos:start="151:9" pos:end="151:21"><type pos:start="151:9" pos:end="151:21"><name pos:start="151:9" pos:end="151:13">UCHAR</name> <modifier pos:start="151:15" pos:end="151:15">*</modifier></type><name pos:start="151:16" pos:end="151:21">output</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="153:5" pos:end="158:42"><type pos:start="153:5" pos:end="153:14"><specifier pos:start="153:5" pos:end="153:10">static</specifier> <name pos:start="153:12" pos:end="153:14">INT</name></type> <name pos:start="153:16" pos:end="153:34">Dot11DecryptRsnaMng</name><parameter_list pos:start="153:35" pos:end="158:41">(
        <parameter pos:start="154:9" pos:end="154:27"><decl pos:start="154:9" pos:end="154:27"><type pos:start="154:9" pos:end="154:27"><name pos:start="154:9" pos:end="154:13">UCHAR</name> <modifier pos:start="154:15" pos:end="154:15">*</modifier></type><name pos:start="154:16" pos:end="154:27">decrypt_data</name></decl></parameter>,
        <parameter pos:start="155:9" pos:end="155:28"><decl pos:start="155:9" pos:end="155:28"><type pos:start="155:9" pos:end="155:28"><name pos:start="155:9" pos:end="155:13">guint</name></type> <name pos:start="155:15" pos:end="155:28">mac_header_len</name></decl></parameter>,
        <parameter pos:start="156:9" pos:end="156:26"><decl pos:start="156:9" pos:end="156:26"><type pos:start="156:9" pos:end="156:26"><name pos:start="156:9" pos:end="156:13">guint</name> <modifier pos:start="156:15" pos:end="156:15">*</modifier></type><name pos:start="156:16" pos:end="156:26">decrypt_len</name></decl></parameter>,
        <parameter pos:start="157:9" pos:end="157:34"><decl pos:start="157:9" pos:end="157:34"><type pos:start="157:9" pos:end="157:34"><name pos:start="157:9" pos:end="157:30">PDOT11DECRYPT_KEY_ITEM</name></type> <name pos:start="157:32" pos:end="157:34">key</name></decl></parameter>,
        <parameter pos:start="158:9" pos:end="158:40"><decl pos:start="158:9" pos:end="158:40"><type pos:start="158:9" pos:end="158:40"><name pos:start="158:9" pos:end="158:36">DOT11DECRYPT_SEC_ASSOCIATION</name> <modifier pos:start="158:38" pos:end="158:38">*</modifier></type><name pos:start="158:39" pos:end="158:40">sa</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="160:5" pos:end="166:45"><type pos:start="160:5" pos:end="160:14"><specifier pos:start="160:5" pos:end="160:10">static</specifier> <name pos:start="160:12" pos:end="160:14">INT</name></type> <name pos:start="160:16" pos:end="160:33">Dot11DecryptWepMng</name><parameter_list pos:start="160:34" pos:end="166:44">(
        <parameter pos:start="161:9" pos:end="161:33"><decl pos:start="161:9" pos:end="161:33"><type pos:start="161:9" pos:end="161:33"><name pos:start="161:9" pos:end="161:29">PDOT11DECRYPT_CONTEXT</name></type> <name pos:start="161:31" pos:end="161:33">ctx</name></decl></parameter>,
        <parameter pos:start="162:9" pos:end="162:27"><decl pos:start="162:9" pos:end="162:27"><type pos:start="162:9" pos:end="162:27"><name pos:start="162:9" pos:end="162:13">UCHAR</name> <modifier pos:start="162:15" pos:end="162:15">*</modifier></type><name pos:start="162:16" pos:end="162:27">decrypt_data</name></decl></parameter>,
        <parameter pos:start="163:9" pos:end="163:28"><decl pos:start="163:9" pos:end="163:28"><type pos:start="163:9" pos:end="163:28"><name pos:start="163:9" pos:end="163:13">guint</name></type> <name pos:start="163:15" pos:end="163:28">mac_header_len</name></decl></parameter>,
        <parameter pos:start="164:9" pos:end="164:26"><decl pos:start="164:9" pos:end="164:26"><type pos:start="164:9" pos:end="164:26"><name pos:start="164:9" pos:end="164:13">guint</name> <modifier pos:start="164:15" pos:end="164:15">*</modifier></type><name pos:start="164:16" pos:end="164:26">decrypt_len</name></decl></parameter>,
        <parameter pos:start="165:9" pos:end="165:34"><decl pos:start="165:9" pos:end="165:34"><type pos:start="165:9" pos:end="165:34"><name pos:start="165:9" pos:end="165:30">PDOT11DECRYPT_KEY_ITEM</name></type> <name pos:start="165:32" pos:end="165:34">key</name></decl></parameter>,
        <parameter pos:start="166:9" pos:end="166:43"><decl pos:start="166:9" pos:end="166:43"><type pos:start="166:9" pos:end="166:43"><name pos:start="166:9" pos:end="166:39">DOT11DECRYPT_SEC_ASSOCIATION_ID</name> <modifier pos:start="166:41" pos:end="166:41">*</modifier></type><name pos:start="166:42" pos:end="166:43">id</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="168:5" pos:end="173:29"><type pos:start="168:5" pos:end="168:14"><specifier pos:start="168:5" pos:end="168:10">static</specifier> <name pos:start="168:12" pos:end="168:14">INT</name></type> <name pos:start="168:16" pos:end="168:42">Dot11DecryptRsna4WHandshake</name><parameter_list pos:start="168:43" pos:end="173:28">(
        <parameter pos:start="169:9" pos:end="169:33"><decl pos:start="169:9" pos:end="169:33"><type pos:start="169:9" pos:end="169:33"><name pos:start="169:9" pos:end="169:29">PDOT11DECRYPT_CONTEXT</name></type> <name pos:start="169:31" pos:end="169:33">ctx</name></decl></parameter>,
        <parameter pos:start="170:9" pos:end="170:47"><decl pos:start="170:9" pos:end="170:47"><type pos:start="170:9" pos:end="170:47"><name pos:start="170:9" pos:end="170:34">PDOT11DECRYPT_EAPOL_PARSED</name></type> <name pos:start="170:36" pos:end="170:47">eapol_parsed</name></decl></parameter>,
        <parameter pos:start="171:9" pos:end="171:31"><decl pos:start="171:9" pos:end="171:31"><type pos:start="171:9" pos:end="171:31"><specifier pos:start="171:9" pos:end="171:13">const</specifier> <name pos:start="171:15" pos:end="171:20">guint8</name> <modifier pos:start="171:22" pos:end="171:22">*</modifier></type><name pos:start="171:23" pos:end="171:31">eapol_raw</name></decl></parameter>,
        <parameter pos:start="172:9" pos:end="172:43"><decl pos:start="172:9" pos:end="172:43"><type pos:start="172:9" pos:end="172:43"><name pos:start="172:9" pos:end="172:39">DOT11DECRYPT_SEC_ASSOCIATION_ID</name> <modifier pos:start="172:41" pos:end="172:41">*</modifier></type><name pos:start="172:42" pos:end="172:43">id</name></decl></parameter>,
        <parameter pos:start="173:9" pos:end="173:27"><decl pos:start="173:9" pos:end="173:27"><type pos:start="173:9" pos:end="173:27"><specifier pos:start="173:9" pos:end="173:13">const</specifier> <name pos:start="173:15" pos:end="173:19">guint</name></type> <name pos:start="173:21" pos:end="173:27">tot_len</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="doxygen" pos:start="175:5" pos:end="184:7">/**
     * It checks whether the specified key is corrected or not.
     * @note
     * For a standard WEP key the length will be changed to the standard
     * length, and the type changed in a generic WEP key.
     * @param key [IN] pointer to the key to validate
     * @return
     * - TRUE: the key contains valid fields and values
     * - FALSE: the key has some invalid field or value
     */</comment>
    <function_decl pos:start="185:5" pos:end="186:36"><type pos:start="185:5" pos:end="185:14"><specifier pos:start="185:5" pos:end="185:10">static</specifier> <name pos:start="185:12" pos:end="185:14">INT</name></type> <name pos:start="185:16" pos:end="185:38">Dot11DecryptValidateKey</name><parameter_list pos:start="185:39" pos:end="186:35">(
        <parameter pos:start="186:9" pos:end="186:34"><decl pos:start="186:9" pos:end="186:34"><type pos:start="186:9" pos:end="186:30"><name pos:start="186:9" pos:end="186:30">PDOT11DECRYPT_KEY_ITEM</name></type> <name pos:start="186:32" pos:end="186:34">key</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="188:5" pos:end="194:17"><type pos:start="188:5" pos:end="188:14"><specifier pos:start="188:5" pos:end="188:10">static</specifier> <name pos:start="188:12" pos:end="188:14">INT</name></type> <name pos:start="188:16" pos:end="188:39">Dot11DecryptRsnaMicCheck</name><parameter_list pos:start="188:40" pos:end="194:16">(
        <parameter pos:start="189:9" pos:end="189:47"><decl pos:start="189:9" pos:end="189:47"><type pos:start="189:9" pos:end="189:47"><name pos:start="189:9" pos:end="189:34">PDOT11DECRYPT_EAPOL_PARSED</name></type> <name pos:start="189:36" pos:end="189:47">eapol_parsed</name></decl></parameter>,
        <parameter pos:start="190:9" pos:end="190:20"><decl pos:start="190:9" pos:end="190:20"><type pos:start="190:9" pos:end="190:20"><name pos:start="190:9" pos:end="190:13">UCHAR</name> <modifier pos:start="190:15" pos:end="190:15">*</modifier></type><name pos:start="190:16" pos:end="190:20">eapol</name></decl></parameter>,
        <parameter pos:start="191:9" pos:end="191:24"><decl pos:start="191:9" pos:end="191:24"><type pos:start="191:9" pos:end="191:24"><name pos:start="191:9" pos:end="191:14">USHORT</name></type> <name pos:start="191:16" pos:end="191:24">eapol_len</name></decl></parameter>,
        <parameter pos:start="192:9" pos:end="192:18"><decl pos:start="192:9" pos:end="192:18"><type pos:start="192:9" pos:end="192:18"><name pos:start="192:9" pos:end="192:13">UCHAR</name> <modifier pos:start="192:15" pos:end="192:15">*</modifier></type><name pos:start="192:16" pos:end="192:18">KCK</name></decl></parameter>,
        <parameter pos:start="193:9" pos:end="193:22"><decl pos:start="193:9" pos:end="193:22"><type pos:start="193:9" pos:end="193:22"><name pos:start="193:9" pos:end="193:14">USHORT</name></type> <name pos:start="193:16" pos:end="193:22">key_ver</name></decl></parameter>,
        <parameter pos:start="194:9" pos:end="194:15"><decl pos:start="194:9" pos:end="194:15"><type pos:start="194:9" pos:end="194:15"><name pos:start="194:9" pos:end="194:11">int</name></type> <name pos:start="194:13" pos:end="194:15">akm</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="196:5" pos:end="200:24"><type pos:start="196:5" pos:end="196:15"><specifier pos:start="196:5" pos:end="196:10">static</specifier> <name pos:start="196:12" pos:end="196:15">gint</name></type>
    <name pos:start="197:5" pos:end="197:26">Dot11DecryptFtMicCheck</name><parameter_list pos:start="197:27" pos:end="200:23">(
        <parameter pos:start="198:9" pos:end="198:53"><decl pos:start="198:9" pos:end="198:53"><type pos:start="198:9" pos:end="198:53"><specifier pos:start="198:9" pos:end="198:13">const</specifier> <name pos:start="198:15" pos:end="198:40">PDOT11DECRYPT_ASSOC_PARSED</name></type> <name pos:start="198:42" pos:end="198:53">assoc_parsed</name></decl></parameter>,
        <parameter pos:start="199:9" pos:end="199:25"><decl pos:start="199:9" pos:end="199:25"><type pos:start="199:9" pos:end="199:25"><specifier pos:start="199:9" pos:end="199:13">const</specifier> <name pos:start="199:15" pos:end="199:20">guint8</name> <modifier pos:start="199:22" pos:end="199:22">*</modifier></type><name pos:start="199:23" pos:end="199:25">kck</name></decl></parameter>,
        <parameter pos:start="200:9" pos:end="200:22"><decl pos:start="200:9" pos:end="200:22"><type pos:start="200:9" pos:end="200:22"><name pos:start="200:9" pos:end="200:14">size_t</name></type> <name pos:start="200:16" pos:end="200:22">kck_len</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="202:5" pos:end="205:51"><type pos:start="202:5" pos:end="202:40"><specifier pos:start="202:5" pos:end="202:10">static</specifier> <name pos:start="202:12" pos:end="202:40">PDOT11DECRYPT_SEC_ASSOCIATION</name></type>
    <name pos:start="203:5" pos:end="203:21">Dot11DecryptGetSa</name><parameter_list pos:start="203:22" pos:end="205:50">(
        <parameter pos:start="204:9" pos:end="204:33"><decl pos:start="204:9" pos:end="204:33"><type pos:start="204:9" pos:end="204:33"><name pos:start="204:9" pos:end="204:29">PDOT11DECRYPT_CONTEXT</name></type> <name pos:start="204:31" pos:end="204:33">ctx</name></decl></parameter>,
        <parameter pos:start="205:9" pos:end="205:49"><decl pos:start="205:9" pos:end="205:49"><type pos:start="205:9" pos:end="205:49"><specifier pos:start="205:9" pos:end="205:13">const</specifier> <name pos:start="205:15" pos:end="205:45">DOT11DECRYPT_SEC_ASSOCIATION_ID</name> <modifier pos:start="205:47" pos:end="205:47">*</modifier></type><name pos:start="205:48" pos:end="205:49">id</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="207:5" pos:end="209:45"><type pos:start="207:5" pos:end="207:14"><specifier pos:start="207:5" pos:end="207:10">static</specifier> <name pos:start="207:12" pos:end="207:14">INT</name></type> <name pos:start="207:16" pos:end="207:39">Dot11DecryptGetSaAddress</name><parameter_list pos:start="207:40" pos:end="209:44">(
        <parameter pos:start="208:9" pos:end="208:49"><decl pos:start="208:9" pos:end="208:49"><type pos:start="208:9" pos:end="208:49"><specifier pos:start="208:9" pos:end="208:13">const</specifier> <name pos:start="208:15" pos:end="208:42">DOT11DECRYPT_MAC_FRAME_ADDR4</name> <modifier pos:start="208:44" pos:end="208:44">*</modifier></type><name pos:start="208:45" pos:end="208:49">frame</name></decl></parameter>,
        <parameter pos:start="209:9" pos:end="209:43"><decl pos:start="209:9" pos:end="209:43"><type pos:start="209:9" pos:end="209:43"><name pos:start="209:9" pos:end="209:39">DOT11DECRYPT_SEC_ASSOCIATION_ID</name> <modifier pos:start="209:41" pos:end="209:41">*</modifier></type><name pos:start="209:42" pos:end="209:43">id</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="211:5" pos:end="212:51"><type pos:start="211:5" pos:end="211:24"><specifier pos:start="211:5" pos:end="211:10">static</specifier> <specifier pos:start="211:12" pos:end="211:16">const</specifier> <name pos:start="211:18" pos:end="211:22">UCHAR</name> <modifier pos:start="211:24" pos:end="211:24">*</modifier></type><name pos:start="211:25" pos:end="211:49">Dot11DecryptGetStaAddress</name><parameter_list pos:start="211:50" pos:end="212:50">(
        <parameter pos:start="212:9" pos:end="212:49"><decl pos:start="212:9" pos:end="212:49"><type pos:start="212:9" pos:end="212:44"><specifier pos:start="212:9" pos:end="212:13">const</specifier> <name pos:start="212:15" pos:end="212:42">DOT11DECRYPT_MAC_FRAME_ADDR4</name> <modifier pos:start="212:44" pos:end="212:44">*</modifier></type><name pos:start="212:45" pos:end="212:49">frame</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="214:5" pos:end="215:51"><type pos:start="214:5" pos:end="214:24"><specifier pos:start="214:5" pos:end="214:10">static</specifier> <specifier pos:start="214:12" pos:end="214:16">const</specifier> <name pos:start="214:18" pos:end="214:22">UCHAR</name> <modifier pos:start="214:24" pos:end="214:24">*</modifier></type><name pos:start="214:25" pos:end="214:51">Dot11DecryptGetBssidAddress</name><parameter_list pos:start="214:52" pos:end="215:50">(
        <parameter pos:start="215:9" pos:end="215:49"><decl pos:start="215:9" pos:end="215:49"><type pos:start="215:9" pos:end="215:44"><specifier pos:start="215:9" pos:end="215:13">const</specifier> <name pos:start="215:15" pos:end="215:42">DOT11DECRYPT_MAC_FRAME_ADDR4</name> <modifier pos:start="215:44" pos:end="215:44">*</modifier></type><name pos:start="215:45" pos:end="215:49">frame</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="217:5" pos:end="226:38"><type pos:start="217:5" pos:end="217:17"><specifier pos:start="217:5" pos:end="217:10">static</specifier> <name pos:start="217:12" pos:end="217:17">guint8</name></type>
    <name pos:start="218:5" pos:end="218:25">Dot11DecryptDerivePtk</name><parameter_list pos:start="218:26" pos:end="226:37">(
        <parameter pos:start="219:9" pos:end="219:46"><decl pos:start="219:9" pos:end="219:46"><type pos:start="219:9" pos:end="219:46"><specifier pos:start="219:9" pos:end="219:13">const</specifier> <name pos:start="219:15" pos:end="219:42">DOT11DECRYPT_SEC_ASSOCIATION</name> <modifier pos:start="219:44" pos:end="219:44">*</modifier></type><name pos:start="219:45" pos:end="219:46">sa</name></decl></parameter>,
        <parameter pos:start="220:9" pos:end="220:24"><decl pos:start="220:9" pos:end="220:24"><type pos:start="220:9" pos:end="220:24"><specifier pos:start="220:9" pos:end="220:13">const</specifier> <name pos:start="220:15" pos:end="220:19">UCHAR</name> <modifier pos:start="220:21" pos:end="220:21">*</modifier></type><name pos:start="220:22" pos:end="220:24">pmk</name></decl></parameter>,
        <parameter pos:start="221:9" pos:end="221:22"><decl pos:start="221:9" pos:end="221:22"><type pos:start="221:9" pos:end="221:22"><name pos:start="221:9" pos:end="221:14">size_t</name></type> <name pos:start="221:16" pos:end="221:22">pmk_len</name></decl></parameter>,
        <parameter pos:start="222:9" pos:end="222:30"><decl pos:start="222:9" pos:end="222:30"><type pos:start="222:9" pos:end="222:26"><specifier pos:start="222:9" pos:end="222:13">const</specifier> <name pos:start="222:15" pos:end="222:19">UCHAR</name></type> <name pos:start="222:21" pos:end="222:30"><name pos:start="222:21" pos:end="222:26">snonce</name><index pos:start="222:27" pos:end="222:30">[<expr pos:start="222:28" pos:end="222:29"><literal type="number" pos:start="222:28" pos:end="222:29">32</literal></expr>]</index></name></decl></parameter>,
        <parameter pos:start="223:9" pos:end="223:23"><decl pos:start="223:9" pos:end="223:23"><type pos:start="223:9" pos:end="223:23"><name pos:start="223:9" pos:end="223:11">int</name></type> <name pos:start="223:13" pos:end="223:23">key_version</name></decl></parameter>,
        <parameter pos:start="224:9" pos:end="224:15"><decl pos:start="224:9" pos:end="224:15"><type pos:start="224:9" pos:end="224:15"><name pos:start="224:9" pos:end="224:11">int</name></type> <name pos:start="224:13" pos:end="224:15">akm</name></decl></parameter>,
        <parameter pos:start="225:9" pos:end="225:18"><decl pos:start="225:9" pos:end="225:18"><type pos:start="225:9" pos:end="225:18"><name pos:start="225:9" pos:end="225:11">int</name></type> <name pos:start="225:13" pos:end="225:18">cipher</name></decl></parameter>,
        <parameter pos:start="226:9" pos:end="226:19"><decl pos:start="226:9" pos:end="226:19"><type pos:start="226:9" pos:end="226:19"><name pos:start="226:9" pos:end="226:14">guint8</name> <modifier pos:start="226:16" pos:end="226:16">*</modifier></type><name pos:start="226:17" pos:end="226:19">ptk</name></decl></parameter>, <parameter pos:start="226:22" pos:end="226:36"><decl pos:start="226:22" pos:end="226:36"><type pos:start="226:22" pos:end="226:36"><name pos:start="226:22" pos:end="226:27">size_t</name> <modifier pos:start="226:29" pos:end="226:29">*</modifier></type><name pos:start="226:30" pos:end="226:36">ptk_len</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="228:5" pos:end="238:38"><type pos:start="228:5" pos:end="228:17"><specifier pos:start="228:5" pos:end="228:10">static</specifier> <name pos:start="228:12" pos:end="228:17">guint8</name></type>
    <name pos:start="229:5" pos:end="229:27">Dot11DecryptFtDerivePtk</name><parameter_list pos:start="229:28" pos:end="238:37">(
        <parameter pos:start="230:9" pos:end="230:39"><decl pos:start="230:9" pos:end="230:39"><type pos:start="230:9" pos:end="230:39"><specifier pos:start="230:9" pos:end="230:13">const</specifier> <name pos:start="230:15" pos:end="230:35">PDOT11DECRYPT_CONTEXT</name></type> <name pos:start="230:37" pos:end="230:39">ctx</name></decl></parameter>,
        <parameter pos:start="231:9" pos:end="231:46"><decl pos:start="231:9" pos:end="231:46"><type pos:start="231:9" pos:end="231:46"><specifier pos:start="231:9" pos:end="231:13">const</specifier> <name pos:start="231:15" pos:end="231:42">DOT11DECRYPT_SEC_ASSOCIATION</name> <modifier pos:start="231:44" pos:end="231:44">*</modifier></type><name pos:start="231:45" pos:end="231:46">sa</name></decl></parameter>,
        <parameter pos:start="232:9" pos:end="232:40"><decl pos:start="232:9" pos:end="232:40"><type pos:start="232:9" pos:end="232:40"><specifier pos:start="232:9" pos:end="232:13">const</specifier> <name pos:start="232:15" pos:end="232:36">PDOT11DECRYPT_KEY_ITEM</name></type> <name pos:start="232:38" pos:end="232:40">key</name></decl></parameter>,
        <parameter pos:start="233:9" pos:end="233:28"><decl pos:start="233:9" pos:end="233:28"><type pos:start="233:9" pos:end="233:25"><specifier pos:start="233:9" pos:end="233:13">const</specifier> <name pos:start="233:15" pos:end="233:20">guint8</name></type> <name pos:start="233:22" pos:end="233:28"><name pos:start="233:22" pos:end="233:25">mdid</name><index pos:start="233:26" pos:end="233:28">[<expr pos:start="233:27" pos:end="233:27"><literal type="number" pos:start="233:27" pos:end="233:27">2</literal></expr>]</index></name></decl></parameter>,
        <parameter pos:start="234:9" pos:end="234:28"><decl pos:start="234:9" pos:end="234:28"><type pos:start="234:9" pos:end="234:28"><specifier pos:start="234:9" pos:end="234:13">const</specifier> <name pos:start="234:15" pos:end="234:20">guint8</name> <modifier pos:start="234:22" pos:end="234:22">*</modifier></type><name pos:start="234:23" pos:end="234:28">snonce</name></decl></parameter>,
        <parameter pos:start="235:9" pos:end="235:29"><decl pos:start="235:9" pos:end="235:29"><type pos:start="235:9" pos:end="235:29"><specifier pos:start="235:9" pos:end="235:13">const</specifier> <name pos:start="235:15" pos:end="235:20">guint8</name> <modifier pos:start="235:22" pos:end="235:22">*</modifier></type><name pos:start="235:23" pos:end="235:29">r0kh_id</name></decl></parameter>, <parameter pos:start="235:32" pos:end="235:49"><decl pos:start="235:32" pos:end="235:49"><type pos:start="235:32" pos:end="235:49"><name pos:start="235:32" pos:end="235:37">size_t</name></type> <name pos:start="235:39" pos:end="235:49">r0kh_id_len</name></decl></parameter>,
        <parameter pos:start="236:9" pos:end="236:29"><decl pos:start="236:9" pos:end="236:29"><type pos:start="236:9" pos:end="236:29"><specifier pos:start="236:9" pos:end="236:13">const</specifier> <name pos:start="236:15" pos:end="236:20">guint8</name> <modifier pos:start="236:22" pos:end="236:22">*</modifier></type><name pos:start="236:23" pos:end="236:29">r1kh_id</name></decl></parameter>, <parameter pos:start="236:32" pos:end="236:53"><decl pos:start="236:32" pos:end="236:53"><type pos:start="236:32" pos:end="236:53"><name pos:start="236:32" pos:end="236:37">size_t</name> <name pos:start="236:39" pos:end="236:49">r1kh_id_len</name></type> <name pos:start="236:51" pos:end="236:53">_U_</name></decl></parameter>,
        <parameter pos:start="237:9" pos:end="237:15"><decl pos:start="237:9" pos:end="237:15"><type pos:start="237:9" pos:end="237:15"><name pos:start="237:9" pos:end="237:11">int</name></type> <name pos:start="237:13" pos:end="237:15">akm</name></decl></parameter>, <parameter pos:start="237:18" pos:end="237:27"><decl pos:start="237:18" pos:end="237:27"><type pos:start="237:18" pos:end="237:27"><name pos:start="237:18" pos:end="237:20">int</name></type> <name pos:start="237:22" pos:end="237:27">cipher</name></decl></parameter>,
        <parameter pos:start="238:9" pos:end="238:19"><decl pos:start="238:9" pos:end="238:19"><type pos:start="238:9" pos:end="238:19"><name pos:start="238:9" pos:end="238:14">guint8</name> <modifier pos:start="238:16" pos:end="238:16">*</modifier></type><name pos:start="238:17" pos:end="238:19">ptk</name></decl></parameter>, <parameter pos:start="238:22" pos:end="238:36"><decl pos:start="238:22" pos:end="238:36"><type pos:start="238:22" pos:end="238:36"><name pos:start="238:22" pos:end="238:27">size_t</name> <modifier pos:start="238:29" pos:end="238:29">*</modifier></type><name pos:start="238:30" pos:end="238:36">ptk_len</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="doxygen" pos:start="240:5" pos:end="252:7">/**
     * @param sa  [IN/OUT] pointer to SA that will hold the key
     * @param data [IN] Frame
     * @param offset_rsne [IN] RSNE IE offset in the frame
     * @param offset_fte [IN] Fast BSS Transition IE offset in the frame
     * @param offset_timeout [IN] Timeout Interval IE offset in the frame
     * @param offset_link [IN] Link Identifier IE offset in the frame
     * @param action [IN] Tdls Action code (response or confirm)
     *
     * @return
     *  DOT11DECRYPT_RET_SUCCESS if Key has been sucessfully derived (and MIC verified)
     *  DOT11DECRYPT_RET_UNSUCCESS otherwise
     */</comment>
    <function_decl pos:start="253:5" pos:end="263:0"><type pos:start="253:5" pos:end="253:14"><specifier pos:start="253:5" pos:end="253:10">static</specifier> <name pos:start="253:12" pos:end="253:14">INT</name></type>
    <name pos:start="254:5" pos:end="254:29">Dot11DecryptTDLSDeriveKey</name><parameter_list pos:start="254:30" pos:end="261:22">(
        <parameter pos:start="255:9" pos:end="255:40"><decl pos:start="255:9" pos:end="255:40"><type pos:start="255:9" pos:end="255:40"><name pos:start="255:9" pos:end="255:37">PDOT11DECRYPT_SEC_ASSOCIATION</name></type> <name pos:start="255:39" pos:end="255:40">sa</name></decl></parameter>,
        <parameter pos:start="256:9" pos:end="256:26"><decl pos:start="256:9" pos:end="256:26"><type pos:start="256:9" pos:end="256:26"><specifier pos:start="256:9" pos:end="256:13">const</specifier> <name pos:start="256:15" pos:end="256:20">guint8</name> <modifier pos:start="256:22" pos:end="256:22">*</modifier></type><name pos:start="256:23" pos:end="256:26">data</name></decl></parameter>,
        <parameter pos:start="257:9" pos:end="257:25"><decl pos:start="257:9" pos:end="257:25"><type pos:start="257:9" pos:end="257:25"><name pos:start="257:9" pos:end="257:13">guint</name></type> <name pos:start="257:15" pos:end="257:25">offset_rsne</name></decl></parameter>,
        <parameter pos:start="258:9" pos:end="258:24"><decl pos:start="258:9" pos:end="258:24"><type pos:start="258:9" pos:end="258:24"><name pos:start="258:9" pos:end="258:13">guint</name></type> <name pos:start="258:15" pos:end="258:24">offset_fte</name></decl></parameter>,
        <parameter pos:start="259:9" pos:end="259:28"><decl pos:start="259:9" pos:end="259:28"><type pos:start="259:9" pos:end="259:28"><name pos:start="259:9" pos:end="259:13">guint</name></type> <name pos:start="259:15" pos:end="259:28">offset_timeout</name></decl></parameter>,
        <parameter pos:start="260:9" pos:end="260:25"><decl pos:start="260:9" pos:end="260:25"><type pos:start="260:9" pos:end="260:25"><name pos:start="260:9" pos:end="260:13">guint</name></type> <name pos:start="260:15" pos:end="260:25">offset_link</name></decl></parameter>,
        <parameter pos:start="261:9" pos:end="261:21"><decl pos:start="261:9" pos:end="261:21"><type pos:start="261:9" pos:end="261:21"><name pos:start="261:9" pos:end="261:14">guint8</name></type> <name pos:start="261:16" pos:end="261:21">action</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifdef pos:start="262:1" pos:end="262:18">#<cpp:directive pos:start="262:2" pos:end="262:6">ifdef</cpp:directive> <name pos:start="262:8" pos:end="262:18">__cplusplus</name></cpp:ifdef>
</block_content>}</block></extern>
<cpp:endif pos:start="264:1" pos:end="264:6">#<cpp:directive pos:start="264:2" pos:end="264:6">endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen" pos:start="266:1" pos:end="266:78">/****************************************************************************/</comment>

<comment type="block" format="doxygen" pos:start="268:1" pos:end="268:78">/****************************************************************************/</comment>
<comment type="block" pos:start="269:1" pos:end="269:82">/* Exported function definitions                                                */</comment>

<cpp:ifdef pos:start="271:1" pos:end="271:18">#<cpp:directive pos:start="271:2" pos:end="271:6">ifdef</cpp:directive> <name pos:start="271:8" pos:end="271:18">__cplusplus</name></cpp:ifdef>
<extern pos:start="272:1" pos:end="1294:0">extern <literal type="string" pos:start="272:8" pos:end="272:10">"C"</literal>
<block pos:start="273:1" pos:end="1294:0">{<block_content pos:start="276:5" pos:end="1285:0">
<cpp:endif pos:start="274:1" pos:end="274:6">#<cpp:directive pos:start="274:2" pos:end="274:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="276:5" pos:end="288:0"><decl pos:start="276:5" pos:end="276:71"><type pos:start="276:5" pos:end="276:16"><specifier pos:start="276:5" pos:end="276:9">const</specifier> <name pos:start="276:11" pos:end="276:16">guint8</name></type> <name pos:start="276:18" pos:end="276:32"><name pos:start="276:18" pos:end="276:30">broadcast_mac</name><index pos:start="276:31" pos:end="276:32">[]</index></name> <init pos:start="276:34" pos:end="276:71">= <expr pos:start="276:36" pos:end="276:71"><block pos:start="276:36" pos:end="276:71">{<expr pos:start="276:37" pos:end="276:40"><literal type="number" pos:start="276:37" pos:end="276:40">0xFF</literal></expr>, <expr pos:start="276:43" pos:end="276:46"><literal type="number" pos:start="276:43" pos:end="276:46">0xFF</literal></expr>, <expr pos:start="276:49" pos:end="276:52"><literal type="number" pos:start="276:49" pos:end="276:52">0xFF</literal></expr>, <expr pos:start="276:55" pos:end="276:58"><literal type="number" pos:start="276:55" pos:end="276:58">0xFF</literal></expr>, <expr pos:start="276:61" pos:end="276:64"><literal type="number" pos:start="276:61" pos:end="276:64">0xFF</literal></expr>, <expr pos:start="276:67" pos:end="276:70"><literal type="number" pos:start="276:67" pos:end="276:70">0xFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define pos:start="278:1" pos:end="278:29">#<cpp:directive pos:start="278:2" pos:end="278:7">define</cpp:directive> <cpp:macro pos:start="278:9" pos:end="278:26"><name pos:start="278:9" pos:end="278:26">TKIP_GROUP_KEY_LEN</name></cpp:macro> <cpp:value pos:start="278:28" pos:end="278:29">32</cpp:value></cpp:define>
<cpp:define pos:start="279:1" pos:end="279:29">#<cpp:directive pos:start="279:2" pos:end="279:7">define</cpp:directive> <cpp:macro pos:start="279:9" pos:end="279:26"><name pos:start="279:9" pos:end="279:26">CCMP_GROUP_KEY_LEN</name></cpp:macro> <cpp:value pos:start="279:28" pos:end="279:29">16</cpp:value></cpp:define>

<cpp:define pos:start="281:1" pos:end="281:28">#<cpp:directive pos:start="281:2" pos:end="281:7">define</cpp:directive> <cpp:macro pos:start="281:9" pos:end="281:25"><name pos:start="281:9" pos:end="281:25">EAPOL_RSN_KEY_LEN</name></cpp:macro> <cpp:value pos:start="281:27" pos:end="281:28">95</cpp:value></cpp:define>

<comment type="block" pos:start="283:1" pos:end="283:73">/* Minimum possible key data size (at least one GTK KDE with CCMP key) */</comment>
<cpp:define pos:start="284:1" pos:end="284:48">#<cpp:directive pos:start="284:2" pos:end="284:7">define</cpp:directive> <cpp:macro pos:start="284:9" pos:end="284:25"><name pos:start="284:9" pos:end="284:25">GROUP_KEY_MIN_LEN</name></cpp:macro> <cpp:value pos:start="284:27" pos:end="284:48">8 + CCMP_GROUP_KEY_LEN</cpp:value></cpp:define>
<comment type="block" pos:start="285:1" pos:end="285:77">/* Minimum possible group key msg size (group key msg using CCMP as cipher)*/</comment>
<cpp:define pos:start="286:1" pos:end="287:43">#<cpp:directive pos:start="286:2" pos:end="286:7">define</cpp:directive> <cpp:macro pos:start="286:9" pos:end="286:33"><name pos:start="286:9" pos:end="286:33">GROUP_KEY_PAYLOAD_LEN_MIN</name></cpp:macro> \
    <cpp:value pos:start="287:5" pos:end="287:43">(EAPOL_RSN_KEY_LEN + GROUP_KEY_MIN_LEN)</cpp:value></cpp:define>

    <function pos:start="289:5" pos:end="343:5"><type pos:start="289:5" pos:end="289:15"><specifier pos:start="289:5" pos:end="289:10">static</specifier> <name pos:start="289:12" pos:end="289:15">void</name></type>
    <name pos:start="290:5" pos:end="290:23">Dot11DecryptCopyKey</name><parameter_list pos:start="290:24" pos:end="290:85">(<parameter pos:start="290:25" pos:end="290:56"><decl pos:start="290:25" pos:end="290:56"><type pos:start="290:25" pos:end="290:56"><name pos:start="290:25" pos:end="290:53">PDOT11DECRYPT_SEC_ASSOCIATION</name></type> <name pos:start="290:55" pos:end="290:56">sa</name></decl></parameter>, <parameter pos:start="290:59" pos:end="290:84"><decl pos:start="290:59" pos:end="290:84"><type pos:start="290:59" pos:end="290:84"><name pos:start="290:59" pos:end="290:80">PDOT11DECRYPT_KEY_ITEM</name></type> <name pos:start="290:82" pos:end="290:84">key</name></decl></parameter>)</parameter_list>
    <block pos:start="291:5" pos:end="343:5">{<block_content pos:start="292:9" pos:end="342:9">
        <if_stmt pos:start="292:9" pos:end="342:9"><if pos:start="292:9" pos:end="342:9">if <condition pos:start="292:12" pos:end="292:24">(<expr pos:start="292:13" pos:end="292:23"><name pos:start="292:13" pos:end="292:15">key</name> <operator pos:start="292:17" pos:end="292:18">!=</operator> <name pos:start="292:20" pos:end="292:23">NULL</name></expr>)</condition>
        <block pos:start="293:9" pos:end="342:9">{<block_content pos:start="294:13" pos:end="341:13">
            <if_stmt pos:start="294:13" pos:end="297:62"><if pos:start="294:13" pos:end="295:68">if <condition pos:start="294:16" pos:end="294:32">(<expr pos:start="294:17" pos:end="294:31"><name pos:start="294:17" pos:end="294:23"><name pos:start="294:17" pos:end="294:18">sa</name><operator pos:start="294:19" pos:end="294:20">-&gt;</operator><name pos:start="294:21" pos:end="294:23">key</name></name> <operator pos:start="294:25" pos:end="294:26">!=</operator> <name pos:start="294:28" pos:end="294:31">NULL</name></expr>)</condition><block type="pseudo" pos:start="295:17" pos:end="295:68"><block_content pos:start="295:17" pos:end="295:68">
                <expr_stmt pos:start="295:17" pos:end="295:68"><expr pos:start="295:17" pos:end="295:67"><call pos:start="295:17" pos:end="295:67"><name pos:start="295:17" pos:end="295:22">memcpy</name><argument_list pos:start="295:23" pos:end="295:67">(<argument pos:start="295:24" pos:end="295:26"><expr pos:start="295:24" pos:end="295:26"><name pos:start="295:24" pos:end="295:26">key</name></expr></argument>, <argument pos:start="295:29" pos:end="295:35"><expr pos:start="295:29" pos:end="295:35"><name pos:start="295:29" pos:end="295:35"><name pos:start="295:29" pos:end="295:30">sa</name><operator pos:start="295:31" pos:end="295:32">-&gt;</operator><name pos:start="295:33" pos:end="295:35">key</name></name></expr></argument>, <argument pos:start="295:38" pos:end="295:66"><expr pos:start="295:38" pos:end="295:66"><sizeof pos:start="295:38" pos:end="295:66">sizeof<argument_list pos:start="295:44" pos:end="295:66">(<argument pos:start="295:45" pos:end="295:65"><expr pos:start="295:45" pos:end="295:65"><name pos:start="295:45" pos:end="295:65">DOT11DECRYPT_KEY_ITEM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="296:13" pos:end="297:62">else<block type="pseudo" pos:start="297:17" pos:end="297:62"><block_content pos:start="297:17" pos:end="297:62">
                <expr_stmt pos:start="297:17" pos:end="297:62"><expr pos:start="297:17" pos:end="297:61"><call pos:start="297:17" pos:end="297:61"><name pos:start="297:17" pos:end="297:22">memset</name><argument_list pos:start="297:23" pos:end="297:61">(<argument pos:start="297:24" pos:end="297:26"><expr pos:start="297:24" pos:end="297:26"><name pos:start="297:24" pos:end="297:26">key</name></expr></argument>, <argument pos:start="297:29" pos:end="297:29"><expr pos:start="297:29" pos:end="297:29"><literal type="number" pos:start="297:29" pos:end="297:29">0</literal></expr></argument>, <argument pos:start="297:32" pos:end="297:60"><expr pos:start="297:32" pos:end="297:60"><sizeof pos:start="297:32" pos:end="297:60">sizeof<argument_list pos:start="297:38" pos:end="297:60">(<argument pos:start="297:39" pos:end="297:59"><expr pos:start="297:39" pos:end="297:59"><name pos:start="297:39" pos:end="297:59">DOT11DECRYPT_KEY_ITEM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt pos:start="298:13" pos:end="298:54"><expr pos:start="298:13" pos:end="298:53"><name pos:start="298:13" pos:end="298:35"><name pos:start="298:13" pos:end="298:15">key</name><operator pos:start="298:16" pos:end="298:17">-&gt;</operator><name pos:start="298:18" pos:end="298:24">KeyData</name><operator pos:start="298:25" pos:end="298:25">.</operator><name pos:start="298:26" pos:end="298:28">Wpa</name><operator pos:start="298:29" pos:end="298:29">.</operator><name pos:start="298:30" pos:end="298:35">PtkLen</name></name> <operator pos:start="298:37" pos:end="298:37">=</operator> <name pos:start="298:39" pos:end="298:53"><name pos:start="298:39" pos:end="298:40">sa</name><operator pos:start="298:41" pos:end="298:42">-&gt;</operator><name pos:start="298:43" pos:end="298:45">wpa</name><operator pos:start="298:46" pos:end="298:46">.</operator><name pos:start="298:47" pos:end="298:53">ptk_len</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="299:13" pos:end="299:71"><expr pos:start="299:13" pos:end="299:70"><call pos:start="299:13" pos:end="299:70"><name pos:start="299:13" pos:end="299:18">memcpy</name><argument_list pos:start="299:19" pos:end="299:70">(<argument pos:start="299:20" pos:end="299:39"><expr pos:start="299:20" pos:end="299:39"><name pos:start="299:20" pos:end="299:39"><name pos:start="299:20" pos:end="299:22">key</name><operator pos:start="299:23" pos:end="299:24">-&gt;</operator><name pos:start="299:25" pos:end="299:31">KeyData</name><operator pos:start="299:32" pos:end="299:32">.</operator><name pos:start="299:33" pos:end="299:35">Wpa</name><operator pos:start="299:36" pos:end="299:36">.</operator><name pos:start="299:37" pos:end="299:39">Ptk</name></name></expr></argument>, <argument pos:start="299:42" pos:end="299:52"><expr pos:start="299:42" pos:end="299:52"><name pos:start="299:42" pos:end="299:52"><name pos:start="299:42" pos:end="299:43">sa</name><operator pos:start="299:44" pos:end="299:45">-&gt;</operator><name pos:start="299:46" pos:end="299:48">wpa</name><operator pos:start="299:49" pos:end="299:49">.</operator><name pos:start="299:50" pos:end="299:52">ptk</name></name></expr></argument>, <argument pos:start="299:55" pos:end="299:69"><expr pos:start="299:55" pos:end="299:69"><name pos:start="299:55" pos:end="299:69"><name pos:start="299:55" pos:end="299:56">sa</name><operator pos:start="299:57" pos:end="299:58">-&gt;</operator><name pos:start="299:59" pos:end="299:61">wpa</name><operator pos:start="299:62" pos:end="299:62">.</operator><name pos:start="299:63" pos:end="299:69">ptk_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="300:13" pos:end="300:47"><expr pos:start="300:13" pos:end="300:46"><name pos:start="300:13" pos:end="300:32"><name pos:start="300:13" pos:end="300:15">key</name><operator pos:start="300:16" pos:end="300:17">-&gt;</operator><name pos:start="300:18" pos:end="300:24">KeyData</name><operator pos:start="300:25" pos:end="300:25">.</operator><name pos:start="300:26" pos:end="300:28">Wpa</name><operator pos:start="300:29" pos:end="300:29">.</operator><name pos:start="300:30" pos:end="300:32">Akm</name></name> <operator pos:start="300:34" pos:end="300:34">=</operator> <name pos:start="300:36" pos:end="300:46"><name pos:start="300:36" pos:end="300:37">sa</name><operator pos:start="300:38" pos:end="300:39">-&gt;</operator><name pos:start="300:40" pos:end="300:42">wpa</name><operator pos:start="300:43" pos:end="300:43">.</operator><name pos:start="300:44" pos:end="300:46">akm</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="301:13" pos:end="301:53"><expr pos:start="301:13" pos:end="301:52"><name pos:start="301:13" pos:end="301:35"><name pos:start="301:13" pos:end="301:15">key</name><operator pos:start="301:16" pos:end="301:17">-&gt;</operator><name pos:start="301:18" pos:end="301:24">KeyData</name><operator pos:start="301:25" pos:end="301:25">.</operator><name pos:start="301:26" pos:end="301:28">Wpa</name><operator pos:start="301:29" pos:end="301:29">.</operator><name pos:start="301:30" pos:end="301:35">Cipher</name></name> <operator pos:start="301:37" pos:end="301:37">=</operator> <name pos:start="301:39" pos:end="301:52"><name pos:start="301:39" pos:end="301:40">sa</name><operator pos:start="301:41" pos:end="301:42">-&gt;</operator><name pos:start="301:43" pos:end="301:45">wpa</name><operator pos:start="301:46" pos:end="301:46">.</operator><name pos:start="301:47" pos:end="301:52">cipher</name></name></expr>;</expr_stmt>
            <if_stmt pos:start="302:13" pos:end="341:13"><if pos:start="302:13" pos:end="303:58">if <condition pos:start="302:16" pos:end="302:37">(<expr pos:start="302:17" pos:end="302:36"><name pos:start="302:17" pos:end="302:31"><name pos:start="302:17" pos:end="302:18">sa</name><operator pos:start="302:19" pos:end="302:20">-&gt;</operator><name pos:start="302:21" pos:end="302:23">wpa</name><operator pos:start="302:24" pos:end="302:24">.</operator><name pos:start="302:25" pos:end="302:31">key_ver</name></name> <operator pos:start="302:33" pos:end="302:34">==</operator> <literal type="number" pos:start="302:36" pos:end="302:36">1</literal></expr>)</condition><block type="pseudo" pos:start="303:17" pos:end="303:58"><block_content pos:start="303:17" pos:end="303:58">
                <expr_stmt pos:start="303:17" pos:end="303:58"><expr pos:start="303:17" pos:end="303:57"><name pos:start="303:17" pos:end="303:28"><name pos:start="303:17" pos:end="303:19">key</name><operator pos:start="303:20" pos:end="303:21">-&gt;</operator><name pos:start="303:22" pos:end="303:28">KeyType</name></name> <operator pos:start="303:30" pos:end="303:30">=</operator> <name pos:start="303:32" pos:end="303:57">DOT11DECRYPT_KEY_TYPE_TKIP</name></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif" pos:start="304:13" pos:end="341:13">else if <condition pos:start="304:21" pos:end="305:42">(<expr pos:start="304:22" pos:end="305:41"><name pos:start="304:22" pos:end="304:36"><name pos:start="304:22" pos:end="304:23">sa</name><operator pos:start="304:24" pos:end="304:25">-&gt;</operator><name pos:start="304:26" pos:end="304:28">wpa</name><operator pos:start="304:29" pos:end="304:29">.</operator><name pos:start="304:30" pos:end="304:36">key_ver</name></name> <operator pos:start="304:38" pos:end="304:39">==</operator> <literal type="number" pos:start="304:41" pos:end="304:41">0</literal> <operator pos:start="304:43" pos:end="304:44">||</operator> <name pos:start="304:46" pos:end="304:60"><name pos:start="304:46" pos:end="304:47">sa</name><operator pos:start="304:48" pos:end="304:49">-&gt;</operator><name pos:start="304:50" pos:end="304:52">wpa</name><operator pos:start="304:53" pos:end="304:53">.</operator><name pos:start="304:54" pos:end="304:60">key_ver</name></name> <operator pos:start="304:62" pos:end="304:63">==</operator> <literal type="number" pos:start="304:65" pos:end="304:65">3</literal> <operator pos:start="304:67" pos:end="304:68">||</operator>
                     <name pos:start="305:22" pos:end="305:36"><name pos:start="305:22" pos:end="305:23">sa</name><operator pos:start="305:24" pos:end="305:25">-&gt;</operator><name pos:start="305:26" pos:end="305:28">wpa</name><operator pos:start="305:29" pos:end="305:29">.</operator><name pos:start="305:30" pos:end="305:36">key_ver</name></name> <operator pos:start="305:38" pos:end="305:39">==</operator> <literal type="number" pos:start="305:41" pos:end="305:41">2</literal></expr>)</condition>
            <block pos:start="306:13" pos:end="341:13">{<block_content pos:start="307:17" pos:end="340:17">
                <switch pos:start="307:17" pos:end="340:17">switch <condition pos:start="307:24" pos:end="307:39">(<expr pos:start="307:25" pos:end="307:38"><name pos:start="307:25" pos:end="307:38"><name pos:start="307:25" pos:end="307:26">sa</name><operator pos:start="307:27" pos:end="307:28">-&gt;</operator><name pos:start="307:29" pos:end="307:31">wpa</name><operator pos:start="307:32" pos:end="307:32">.</operator><name pos:start="307:33" pos:end="307:38">cipher</name></name></expr>)</condition>
                <block pos:start="308:17" pos:end="340:17">{<block_content pos:start="309:17" pos:end="332:26">
                <case pos:start="309:17" pos:end="309:23">case <expr pos:start="309:22" pos:end="309:22"><literal type="number" pos:start="309:22" pos:end="309:22">1</literal></expr>:</case>
                    <expr_stmt pos:start="310:21" pos:end="310:64"><expr pos:start="310:21" pos:end="310:63"><name pos:start="310:21" pos:end="310:32"><name pos:start="310:21" pos:end="310:23">key</name><operator pos:start="310:24" pos:end="310:25">-&gt;</operator><name pos:start="310:26" pos:end="310:32">KeyType</name></name> <operator pos:start="310:34" pos:end="310:34">=</operator> <name pos:start="310:36" pos:end="310:63">DOT11DECRYPT_KEY_TYPE_WEP_40</name></expr>;</expr_stmt>
                    <break pos:start="311:21" pos:end="311:26">break;</break>
                <case pos:start="312:17" pos:end="312:23">case <expr pos:start="312:22" pos:end="312:22"><literal type="number" pos:start="312:22" pos:end="312:22">2</literal></expr>:</case>
                    <expr_stmt pos:start="313:21" pos:end="313:62"><expr pos:start="313:21" pos:end="313:61"><name pos:start="313:21" pos:end="313:32"><name pos:start="313:21" pos:end="313:23">key</name><operator pos:start="313:24" pos:end="313:25">-&gt;</operator><name pos:start="313:26" pos:end="313:32">KeyType</name></name> <operator pos:start="313:34" pos:end="313:34">=</operator> <name pos:start="313:36" pos:end="313:61">DOT11DECRYPT_KEY_TYPE_TKIP</name></expr>;</expr_stmt>
                    <break pos:start="314:21" pos:end="314:26">break;</break>
                <case pos:start="315:17" pos:end="315:23">case <expr pos:start="315:22" pos:end="315:22"><literal type="number" pos:start="315:22" pos:end="315:22">4</literal></expr>:</case>
                    <expr_stmt pos:start="316:21" pos:end="316:62"><expr pos:start="316:21" pos:end="316:61"><name pos:start="316:21" pos:end="316:32"><name pos:start="316:21" pos:end="316:23">key</name><operator pos:start="316:24" pos:end="316:25">-&gt;</operator><name pos:start="316:26" pos:end="316:32">KeyType</name></name> <operator pos:start="316:34" pos:end="316:34">=</operator> <name pos:start="316:36" pos:end="316:61">DOT11DECRYPT_KEY_TYPE_CCMP</name></expr>;</expr_stmt>
                    <break pos:start="317:21" pos:end="317:26">break;</break>
                <case pos:start="318:17" pos:end="318:23">case <expr pos:start="318:22" pos:end="318:22"><literal type="number" pos:start="318:22" pos:end="318:22">5</literal></expr>:</case>
                    <expr_stmt pos:start="319:21" pos:end="319:65"><expr pos:start="319:21" pos:end="319:64"><name pos:start="319:21" pos:end="319:32"><name pos:start="319:21" pos:end="319:23">key</name><operator pos:start="319:24" pos:end="319:25">-&gt;</operator><name pos:start="319:26" pos:end="319:32">KeyType</name></name> <operator pos:start="319:34" pos:end="319:34">=</operator> <name pos:start="319:36" pos:end="319:64">DOT11DECRYPT_KEY_TYPE_WEP_104</name></expr>;</expr_stmt>
                    <break pos:start="320:21" pos:end="320:26">break;</break>
                <case pos:start="321:17" pos:end="321:23">case <expr pos:start="321:22" pos:end="321:22"><literal type="number" pos:start="321:22" pos:end="321:22">8</literal></expr>:</case>
                    <expr_stmt pos:start="322:21" pos:end="322:62"><expr pos:start="322:21" pos:end="322:61"><name pos:start="322:21" pos:end="322:32"><name pos:start="322:21" pos:end="322:23">key</name><operator pos:start="322:24" pos:end="322:25">-&gt;</operator><name pos:start="322:26" pos:end="322:32">KeyType</name></name> <operator pos:start="322:34" pos:end="322:34">=</operator> <name pos:start="322:36" pos:end="322:61">DOT11DECRYPT_KEY_TYPE_GCMP</name></expr>;</expr_stmt>
                    <break pos:start="323:21" pos:end="323:26">break;</break>
                <case pos:start="324:17" pos:end="324:23">case <expr pos:start="324:22" pos:end="324:22"><literal type="number" pos:start="324:22" pos:end="324:22">9</literal></expr>:</case>
                    <expr_stmt pos:start="325:21" pos:end="325:66"><expr pos:start="325:21" pos:end="325:65"><name pos:start="325:21" pos:end="325:32"><name pos:start="325:21" pos:end="325:23">key</name><operator pos:start="325:24" pos:end="325:25">-&gt;</operator><name pos:start="325:26" pos:end="325:32">KeyType</name></name> <operator pos:start="325:34" pos:end="325:34">=</operator> <name pos:start="325:36" pos:end="325:65">DOT11DECRYPT_KEY_TYPE_GCMP_256</name></expr>;</expr_stmt>
                    <break pos:start="326:21" pos:end="326:26">break;</break>
                <case pos:start="327:17" pos:end="327:24">case <expr pos:start="327:22" pos:end="327:23"><literal type="number" pos:start="327:22" pos:end="327:23">10</literal></expr>:</case>
                    <expr_stmt pos:start="328:21" pos:end="328:66"><expr pos:start="328:21" pos:end="328:65"><name pos:start="328:21" pos:end="328:32"><name pos:start="328:21" pos:end="328:23">key</name><operator pos:start="328:24" pos:end="328:25">-&gt;</operator><name pos:start="328:26" pos:end="328:32">KeyType</name></name> <operator pos:start="328:34" pos:end="328:34">=</operator> <name pos:start="328:36" pos:end="328:65">DOT11DECRYPT_KEY_TYPE_CCMP_256</name></expr>;</expr_stmt>
                    <break pos:start="329:21" pos:end="329:26">break;</break>
                <default pos:start="330:17" pos:end="330:24">default:</default>
                    <expr_stmt pos:start="331:21" pos:end="331:65"><expr pos:start="331:21" pos:end="331:64"><name pos:start="331:21" pos:end="331:32"><name pos:start="331:21" pos:end="331:23">key</name><operator pos:start="331:24" pos:end="331:25">-&gt;</operator><name pos:start="331:26" pos:end="331:32">KeyType</name></name> <operator pos:start="331:34" pos:end="331:34">=</operator> <name pos:start="331:36" pos:end="331:64">DOT11DECRYPT_KEY_TYPE_UNKNOWN</name></expr>;</expr_stmt>
                    <break pos:start="332:21" pos:end="332:26">break;</break>
                    <comment type="block" pos:start="333:21" pos:end="339:44">/* NOT SUPPORTED YET
                    case 3:  Reserved
                    case 6:  BIP-CMAC-128
                    case 7:  Group addressed traffic not allowed
                    case 11: BIP-GMAC-128
                    case 12: BIP-GMAC-256
                    case 13: BIP-CMAC-256 */</comment>
                </block_content>}</block></switch>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function pos:start="345:5" pos:end="374:5"><type pos:start="345:5" pos:end="345:19"><specifier pos:start="345:5" pos:end="345:10">static</specifier> <name pos:start="345:12" pos:end="345:17">guint8</name> <modifier pos:start="345:19" pos:end="345:19">*</modifier></type>
    <name pos:start="346:5" pos:end="346:26">Dot11DecryptRc4KeyData</name><parameter_list pos:start="346:27" pos:end="347:88">(<parameter pos:start="346:28" pos:end="346:55"><decl pos:start="346:28" pos:end="346:55"><type pos:start="346:28" pos:end="346:55"><specifier pos:start="346:28" pos:end="346:32">const</specifier> <name pos:start="346:34" pos:end="346:39">guint8</name> <modifier pos:start="346:41" pos:end="346:41">*</modifier></type><name pos:start="346:42" pos:end="346:55">decryption_key</name></decl></parameter>, <parameter pos:start="346:58" pos:end="346:81"><decl pos:start="346:58" pos:end="346:81"><type pos:start="346:58" pos:end="346:81"><name pos:start="346:58" pos:end="346:62">guint</name></type> <name pos:start="346:64" pos:end="346:81">decryption_key_len</name></decl></parameter>,
                           <parameter pos:start="347:28" pos:end="347:58"><decl pos:start="347:28" pos:end="347:58"><type pos:start="347:28" pos:end="347:58"><specifier pos:start="347:28" pos:end="347:32">const</specifier> <name pos:start="347:34" pos:end="347:39">guint8</name> <modifier pos:start="347:41" pos:end="347:41">*</modifier></type><name pos:start="347:42" pos:end="347:58">encrypted_keydata</name></decl></parameter>, <parameter pos:start="347:61" pos:end="347:87"><decl pos:start="347:61" pos:end="347:87"><type pos:start="347:61" pos:end="347:87"><name pos:start="347:61" pos:end="347:65">guint</name></type> <name pos:start="347:67" pos:end="347:87">encrypted_keydata_len</name></decl></parameter>)</parameter_list>
    <block pos:start="348:5" pos:end="374:5">{<block_content pos:start="349:9" pos:end="373:29">
        <decl_stmt pos:start="349:9" pos:end="349:36"><decl pos:start="349:9" pos:end="349:35"><type pos:start="349:9" pos:end="349:24"><name pos:start="349:9" pos:end="349:24">gcry_cipher_hd_t</name></type> <name pos:start="349:26" pos:end="349:35">rc4_handle</name></decl>;</decl_stmt>
        <decl_stmt pos:start="350:9" pos:end="350:32"><decl pos:start="350:9" pos:end="350:31"><type pos:start="350:9" pos:end="350:14"><name pos:start="350:9" pos:end="350:14">guint8</name></type> <name pos:start="350:16" pos:end="350:25"><name pos:start="350:16" pos:end="350:20">dummy</name><index pos:start="350:21" pos:end="350:25">[<expr pos:start="350:22" pos:end="350:24"><literal type="number" pos:start="350:22" pos:end="350:24">256</literal></expr>]</index></name> <init pos:start="350:27" pos:end="350:31">= <expr pos:start="350:29" pos:end="350:31"><block pos:start="350:29" pos:end="350:31">{<expr pos:start="350:30" pos:end="350:30"><literal type="number" pos:start="350:30" pos:end="350:30">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="351:9" pos:end="351:37"><decl pos:start="351:9" pos:end="351:36"><type pos:start="351:9" pos:end="351:16"><name pos:start="351:9" pos:end="351:14">guint8</name> <modifier pos:start="351:16" pos:end="351:16">*</modifier></type><name pos:start="351:17" pos:end="351:29">decrypted_key</name> <init pos:start="351:31" pos:end="351:36">= <expr pos:start="351:33" pos:end="351:36"><name pos:start="351:33" pos:end="351:36">NULL</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="353:9" pos:end="356:9"><if pos:start="353:9" pos:end="356:9">if <condition pos:start="353:12" pos:end="353:91">(<expr pos:start="353:13" pos:end="353:90"><call pos:start="353:13" pos:end="353:90"><name pos:start="353:13" pos:end="353:28">gcry_cipher_open</name><argument_list pos:start="353:29" pos:end="353:90">(<argument pos:start="353:30" pos:end="353:40"><expr pos:start="353:30" pos:end="353:40"><operator pos:start="353:30" pos:end="353:30">&amp;</operator><name pos:start="353:31" pos:end="353:40">rc4_handle</name></expr></argument>, <argument pos:start="353:43" pos:end="353:61"><expr pos:start="353:43" pos:end="353:61"><name pos:start="353:43" pos:end="353:61">GCRY_CIPHER_ARCFOUR</name></expr></argument>, <argument pos:start="353:64" pos:end="353:86"><expr pos:start="353:64" pos:end="353:86"><name pos:start="353:64" pos:end="353:86">GCRY_CIPHER_MODE_STREAM</name></expr></argument>, <argument pos:start="353:89" pos:end="353:89"><expr pos:start="353:89" pos:end="353:89"><literal type="number" pos:start="353:89" pos:end="353:89">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block pos:start="354:9" pos:end="356:9">{<block_content pos:start="355:13" pos:end="355:24">
            <return pos:start="355:13" pos:end="355:24">return <expr pos:start="355:20" pos:end="355:23"><name pos:start="355:20" pos:end="355:23">NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="357:9" pos:end="361:9"><if pos:start="357:9" pos:end="361:9">if <condition pos:start="357:12" pos:end="357:79">(<expr pos:start="357:13" pos:end="357:78"><call pos:start="357:13" pos:end="357:78"><name pos:start="357:13" pos:end="357:30">gcry_cipher_setkey</name><argument_list pos:start="357:31" pos:end="357:78">(<argument pos:start="357:32" pos:end="357:41"><expr pos:start="357:32" pos:end="357:41"><name pos:start="357:32" pos:end="357:41">rc4_handle</name></expr></argument>, <argument pos:start="357:44" pos:end="357:57"><expr pos:start="357:44" pos:end="357:57"><name pos:start="357:44" pos:end="357:57">decryption_key</name></expr></argument>, <argument pos:start="357:60" pos:end="357:77"><expr pos:start="357:60" pos:end="357:77"><name pos:start="357:60" pos:end="357:77">decryption_key_len</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block pos:start="358:9" pos:end="361:9">{<block_content pos:start="359:13" pos:end="360:24">
            <expr_stmt pos:start="359:13" pos:end="359:42"><expr pos:start="359:13" pos:end="359:41"><call pos:start="359:13" pos:end="359:41"><name pos:start="359:13" pos:end="359:29">gcry_cipher_close</name><argument_list pos:start="359:30" pos:end="359:41">(<argument pos:start="359:31" pos:end="359:40"><expr pos:start="359:31" pos:end="359:40"><name pos:start="359:31" pos:end="359:40">rc4_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="360:13" pos:end="360:24">return <expr pos:start="360:20" pos:end="360:23"><name pos:start="360:20" pos:end="360:23">NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="362:9" pos:end="362:86"><expr pos:start="362:9" pos:end="362:85"><name pos:start="362:9" pos:end="362:21">decrypted_key</name> <operator pos:start="362:23" pos:end="362:23">=</operator> <operator pos:start="362:25" pos:end="362:25">(</operator><name pos:start="362:26" pos:end="362:31">guint8</name> <operator pos:start="362:33" pos:end="362:33">*</operator><operator pos:start="362:34" pos:end="362:34">)</operator><call pos:start="362:35" pos:end="362:85"><name pos:start="362:35" pos:end="362:43">g_memdup2</name><argument_list pos:start="362:44" pos:end="362:85">(<argument pos:start="362:45" pos:end="362:61"><expr pos:start="362:45" pos:end="362:61"><name pos:start="362:45" pos:end="362:61">encrypted_keydata</name></expr></argument>, <argument pos:start="362:64" pos:end="362:84"><expr pos:start="362:64" pos:end="362:84"><name pos:start="362:64" pos:end="362:84">encrypted_keydata_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="363:9" pos:end="367:9"><if pos:start="363:9" pos:end="367:9">if <condition pos:start="363:12" pos:end="363:27">(<expr pos:start="363:13" pos:end="363:26"><operator pos:start="363:13" pos:end="363:13">!</operator><name pos:start="363:14" pos:end="363:26">decrypted_key</name></expr>)</condition>
        <block pos:start="364:9" pos:end="367:9">{<block_content pos:start="365:13" pos:end="366:24">
            <expr_stmt pos:start="365:13" pos:end="365:42"><expr pos:start="365:13" pos:end="365:41"><call pos:start="365:13" pos:end="365:41"><name pos:start="365:13" pos:end="365:29">gcry_cipher_close</name><argument_list pos:start="365:30" pos:end="365:41">(<argument pos:start="365:31" pos:end="365:40"><expr pos:start="365:31" pos:end="365:40"><name pos:start="365:31" pos:end="365:40">rc4_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="366:13" pos:end="366:24">return <expr pos:start="366:20" pos:end="366:23"><name pos:start="366:20" pos:end="366:23">NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="369:9" pos:end="369:97">/* Do dummy 256 iterations of the RC4 algorithm (per 802.11i, Draft 3.0, p. 97 line 6) */</comment>
        <expr_stmt pos:start="370:9" pos:end="370:61"><expr pos:start="370:9" pos:end="370:60"><call pos:start="370:9" pos:end="370:60"><name pos:start="370:9" pos:end="370:27">gcry_cipher_decrypt</name><argument_list pos:start="370:28" pos:end="370:60">(<argument pos:start="370:29" pos:end="370:38"><expr pos:start="370:29" pos:end="370:38"><name pos:start="370:29" pos:end="370:38">rc4_handle</name></expr></argument>, <argument pos:start="370:41" pos:end="370:45"><expr pos:start="370:41" pos:end="370:45"><name pos:start="370:41" pos:end="370:45">dummy</name></expr></argument>, <argument pos:start="370:48" pos:end="370:50"><expr pos:start="370:48" pos:end="370:50"><literal type="number" pos:start="370:48" pos:end="370:50">256</literal></expr></argument>, <argument pos:start="370:53" pos:end="370:56"><expr pos:start="370:53" pos:end="370:56"><name pos:start="370:53" pos:end="370:56">NULL</name></expr></argument>, <argument pos:start="370:59" pos:end="370:59"><expr pos:start="370:59" pos:end="370:59"><literal type="number" pos:start="370:59" pos:end="370:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="371:9" pos:end="371:87"><expr pos:start="371:9" pos:end="371:86"><call pos:start="371:9" pos:end="371:86"><name pos:start="371:9" pos:end="371:27">gcry_cipher_decrypt</name><argument_list pos:start="371:28" pos:end="371:86">(<argument pos:start="371:29" pos:end="371:38"><expr pos:start="371:29" pos:end="371:38"><name pos:start="371:29" pos:end="371:38">rc4_handle</name></expr></argument>, <argument pos:start="371:41" pos:end="371:53"><expr pos:start="371:41" pos:end="371:53"><name pos:start="371:41" pos:end="371:53">decrypted_key</name></expr></argument>, <argument pos:start="371:56" pos:end="371:76"><expr pos:start="371:56" pos:end="371:76"><name pos:start="371:56" pos:end="371:76">encrypted_keydata_len</name></expr></argument>, <argument pos:start="371:79" pos:end="371:82"><expr pos:start="371:79" pos:end="371:82"><name pos:start="371:79" pos:end="371:82">NULL</name></expr></argument>, <argument pos:start="371:85" pos:end="371:85"><expr pos:start="371:85" pos:end="371:85"><literal type="number" pos:start="371:85" pos:end="371:85">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="372:9" pos:end="372:38"><expr pos:start="372:9" pos:end="372:37"><call pos:start="372:9" pos:end="372:37"><name pos:start="372:9" pos:end="372:25">gcry_cipher_close</name><argument_list pos:start="372:26" pos:end="372:37">(<argument pos:start="372:27" pos:end="372:36"><expr pos:start="372:27" pos:end="372:36"><name pos:start="372:27" pos:end="372:36">rc4_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="373:9" pos:end="373:29">return <expr pos:start="373:16" pos:end="373:28"><name pos:start="373:16" pos:end="373:28">decrypted_key</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="376:5" pos:end="408:5"><type pos:start="376:5" pos:end="376:14"><specifier pos:start="376:5" pos:end="376:10">static</specifier> <name pos:start="376:12" pos:end="376:14">int</name></type>
    <name pos:start="377:5" pos:end="377:14">AES_unwrap</name><parameter_list pos:start="377:15" pos:end="383:28">(
        <parameter pos:start="378:9" pos:end="378:25"><decl pos:start="378:9" pos:end="378:25"><type pos:start="378:9" pos:end="378:25"><specifier pos:start="378:9" pos:end="378:13">const</specifier> <name pos:start="378:15" pos:end="378:20">guint8</name> <modifier pos:start="378:22" pos:end="378:22">*</modifier></type><name pos:start="378:23" pos:end="378:25">kek</name></decl></parameter>,
        <parameter pos:start="379:9" pos:end="379:23"><decl pos:start="379:9" pos:end="379:23"><type pos:start="379:9" pos:end="379:23"><name pos:start="379:9" pos:end="379:15">guint16</name></type> <name pos:start="379:17" pos:end="379:23">kek_len</name></decl></parameter>,
        <parameter pos:start="380:9" pos:end="380:33"><decl pos:start="380:9" pos:end="380:33"><type pos:start="380:9" pos:end="380:33"><specifier pos:start="380:9" pos:end="380:13">const</specifier> <name pos:start="380:15" pos:end="380:20">guint8</name> <modifier pos:start="380:22" pos:end="380:22">*</modifier></type><name pos:start="380:23" pos:end="380:33">cipher_text</name></decl></parameter>,
        <parameter pos:start="381:9" pos:end="381:26"><decl pos:start="381:9" pos:end="381:26"><type pos:start="381:9" pos:end="381:26"><name pos:start="381:9" pos:end="381:15">guint16</name></type> <name pos:start="381:17" pos:end="381:26">cipher_len</name></decl></parameter>,
        <parameter pos:start="382:9" pos:end="382:22"><decl pos:start="382:9" pos:end="382:22"><type pos:start="382:9" pos:end="382:22"><name pos:start="382:9" pos:end="382:14">guint8</name> <modifier pos:start="382:16" pos:end="382:16">*</modifier></type><name pos:start="382:17" pos:end="382:22">output</name></decl></parameter>,
        <parameter pos:start="383:9" pos:end="383:27"><decl pos:start="383:9" pos:end="383:27"><type pos:start="383:9" pos:end="383:27"><name pos:start="383:9" pos:end="383:15">guint16</name> <modifier pos:start="383:17" pos:end="383:17">*</modifier></type><name pos:start="383:18" pos:end="383:27">output_len</name></decl></parameter>)</parameter_list>
    <block pos:start="384:5" pos:end="408:5">{<block_content pos:start="385:9" pos:end="407:17">
        <decl_stmt pos:start="385:9" pos:end="385:32"><decl pos:start="385:9" pos:end="385:31"><type pos:start="385:9" pos:end="385:24"><name pos:start="385:9" pos:end="385:24">gcry_cipher_hd_t</name></type> <name pos:start="385:26" pos:end="385:31">handle</name></decl>;</decl_stmt>

        <if_stmt pos:start="387:9" pos:end="390:9"><if pos:start="387:9" pos:end="390:9">if <condition pos:start="387:12" pos:end="387:66">(<expr pos:start="387:13" pos:end="387:65"><name pos:start="387:13" pos:end="387:15">kek</name> <operator pos:start="387:17" pos:end="387:18">==</operator> <name pos:start="387:20" pos:end="387:23">NULL</name> <operator pos:start="387:25" pos:end="387:26">||</operator> <name pos:start="387:28" pos:end="387:37">cipher_len</name> <operator pos:start="387:39" pos:end="387:39">&lt;</operator> <literal type="number" pos:start="387:41" pos:end="387:42">16</literal> <operator pos:start="387:44" pos:end="387:45">||</operator> <name pos:start="387:47" pos:end="387:57">cipher_text</name> <operator pos:start="387:59" pos:end="387:60">==</operator> <name pos:start="387:62" pos:end="387:65">NULL</name></expr>)</condition>
        <block pos:start="388:9" pos:end="390:9">{<block_content pos:start="389:13" pos:end="389:21">
            <return pos:start="389:13" pos:end="389:21">return <expr pos:start="389:20" pos:end="389:20"><literal type="number" pos:start="389:20" pos:end="389:20">1</literal></expr>;</return> <comment type="block" pos:start="389:23" pos:end="389:47">/* "should not happen" */</comment>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="391:9" pos:end="394:9"><if pos:start="391:9" pos:end="394:9">if <condition pos:start="391:12" pos:end="391:84">(<expr pos:start="391:13" pos:end="391:83"><call pos:start="391:13" pos:end="391:83"><name pos:start="391:13" pos:end="391:28">gcry_cipher_open</name><argument_list pos:start="391:29" pos:end="391:83">(<argument pos:start="391:30" pos:end="391:36"><expr pos:start="391:30" pos:end="391:36"><operator pos:start="391:30" pos:end="391:30">&amp;</operator><name pos:start="391:31" pos:end="391:36">handle</name></expr></argument>, <argument pos:start="391:39" pos:end="391:53"><expr pos:start="391:39" pos:end="391:53"><name pos:start="391:39" pos:end="391:53">GCRY_CIPHER_AES</name></expr></argument>, <argument pos:start="391:56" pos:end="391:79"><expr pos:start="391:56" pos:end="391:79"><name pos:start="391:56" pos:end="391:79">GCRY_CIPHER_MODE_AESWRAP</name></expr></argument>, <argument pos:start="391:82" pos:end="391:82"><expr pos:start="391:82" pos:end="391:82"><literal type="number" pos:start="391:82" pos:end="391:82">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block pos:start="392:9" pos:end="394:9">{<block_content pos:start="393:13" pos:end="393:21">
            <return pos:start="393:13" pos:end="393:21">return <expr pos:start="393:20" pos:end="393:20"><literal type="number" pos:start="393:20" pos:end="393:20">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="395:9" pos:end="399:9"><if pos:start="395:9" pos:end="399:9">if <condition pos:start="395:12" pos:end="395:53">(<expr pos:start="395:13" pos:end="395:52"><call pos:start="395:13" pos:end="395:52"><name pos:start="395:13" pos:end="395:30">gcry_cipher_setkey</name><argument_list pos:start="395:31" pos:end="395:52">(<argument pos:start="395:32" pos:end="395:37"><expr pos:start="395:32" pos:end="395:37"><name pos:start="395:32" pos:end="395:37">handle</name></expr></argument>, <argument pos:start="395:40" pos:end="395:42"><expr pos:start="395:40" pos:end="395:42"><name pos:start="395:40" pos:end="395:42">kek</name></expr></argument>, <argument pos:start="395:45" pos:end="395:51"><expr pos:start="395:45" pos:end="395:51"><name pos:start="395:45" pos:end="395:51">kek_len</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block pos:start="396:9" pos:end="399:9">{<block_content pos:start="397:13" pos:end="398:21">
            <expr_stmt pos:start="397:13" pos:end="397:38"><expr pos:start="397:13" pos:end="397:37"><call pos:start="397:13" pos:end="397:37"><name pos:start="397:13" pos:end="397:29">gcry_cipher_close</name><argument_list pos:start="397:30" pos:end="397:37">(<argument pos:start="397:31" pos:end="397:36"><expr pos:start="397:31" pos:end="397:36"><name pos:start="397:31" pos:end="397:36">handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="398:13" pos:end="398:21">return <expr pos:start="398:20" pos:end="398:20"><literal type="number" pos:start="398:20" pos:end="398:20">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="400:9" pos:end="404:9"><if pos:start="400:9" pos:end="404:9">if <condition pos:start="400:12" pos:end="400:89">(<expr pos:start="400:13" pos:end="400:88"><call pos:start="400:13" pos:end="400:88"><name pos:start="400:13" pos:end="400:31">gcry_cipher_decrypt</name><argument_list pos:start="400:32" pos:end="400:88">(<argument pos:start="400:33" pos:end="400:38"><expr pos:start="400:33" pos:end="400:38"><name pos:start="400:33" pos:end="400:38">handle</name></expr></argument>, <argument pos:start="400:41" pos:end="400:46"><expr pos:start="400:41" pos:end="400:46"><name pos:start="400:41" pos:end="400:46">output</name></expr></argument>, <argument pos:start="400:49" pos:end="400:62"><expr pos:start="400:49" pos:end="400:62"><name pos:start="400:49" pos:end="400:58">cipher_len</name> <operator pos:start="400:60" pos:end="400:60">-</operator> <literal type="number" pos:start="400:62" pos:end="400:62">8</literal></expr></argument>, <argument pos:start="400:65" pos:end="400:75"><expr pos:start="400:65" pos:end="400:75"><name pos:start="400:65" pos:end="400:75">cipher_text</name></expr></argument>, <argument pos:start="400:78" pos:end="400:87"><expr pos:start="400:78" pos:end="400:87"><name pos:start="400:78" pos:end="400:87">cipher_len</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block pos:start="401:9" pos:end="404:9">{<block_content pos:start="402:13" pos:end="403:21">
            <expr_stmt pos:start="402:13" pos:end="402:38"><expr pos:start="402:13" pos:end="402:37"><call pos:start="402:13" pos:end="402:37"><name pos:start="402:13" pos:end="402:29">gcry_cipher_close</name><argument_list pos:start="402:30" pos:end="402:37">(<argument pos:start="402:31" pos:end="402:36"><expr pos:start="402:31" pos:end="402:36"><name pos:start="402:31" pos:end="402:36">handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="403:13" pos:end="403:21">return <expr pos:start="403:20" pos:end="403:20"><literal type="number" pos:start="403:20" pos:end="403:20">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="405:9" pos:end="405:37"><expr pos:start="405:9" pos:end="405:36"><operator pos:start="405:9" pos:end="405:9">*</operator><name pos:start="405:10" pos:end="405:19">output_len</name> <operator pos:start="405:21" pos:end="405:21">=</operator> <name pos:start="405:23" pos:end="405:32">cipher_len</name> <operator pos:start="405:34" pos:end="405:34">-</operator> <literal type="number" pos:start="405:36" pos:end="405:36">8</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="406:9" pos:end="406:34"><expr pos:start="406:9" pos:end="406:33"><call pos:start="406:9" pos:end="406:33"><name pos:start="406:9" pos:end="406:25">gcry_cipher_close</name><argument_list pos:start="406:26" pos:end="406:33">(<argument pos:start="406:27" pos:end="406:32"><expr pos:start="406:27" pos:end="406:32"><name pos:start="406:27" pos:end="406:32">handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="407:9" pos:end="407:17">return <expr pos:start="407:16" pos:end="407:16"><literal type="number" pos:start="407:16" pos:end="407:16">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="410:5" pos:end="534:5"><type pos:start="410:5" pos:end="410:7"><name pos:start="410:5" pos:end="410:7">INT</name></type>
    <name pos:start="411:5" pos:end="411:30">Dot11DecryptDecryptKeyData</name><parameter_list pos:start="411:31" pos:end="416:58">(<parameter pos:start="411:32" pos:end="411:56"><decl pos:start="411:32" pos:end="411:56"><type pos:start="411:32" pos:end="411:56"><name pos:start="411:32" pos:end="411:52">PDOT11DECRYPT_CONTEXT</name></type> <name pos:start="411:54" pos:end="411:56">ctx</name></decl></parameter>,
                               <parameter pos:start="412:32" pos:end="412:70"><decl pos:start="412:32" pos:end="412:70"><type pos:start="412:32" pos:end="412:70"><name pos:start="412:32" pos:end="412:57">PDOT11DECRYPT_EAPOL_PARSED</name></type> <name pos:start="412:59" pos:end="412:70">eapol_parsed</name></decl></parameter>,
                               <parameter pos:start="413:32" pos:end="413:70"><decl pos:start="413:32" pos:end="413:70"><type pos:start="413:32" pos:end="413:48"><specifier pos:start="413:32" pos:end="413:36">const</specifier> <name pos:start="413:38" pos:end="413:42">UCHAR</name></type> <name pos:start="413:44" pos:end="413:70"><name pos:start="413:44" pos:end="413:48">bssid</name><index pos:start="413:49" pos:end="413:70">[<expr pos:start="413:50" pos:end="413:69"><name pos:start="413:50" pos:end="413:69">DOT11DECRYPT_MAC_LEN</name></expr>]</index></name></decl></parameter>,
                               <parameter pos:start="414:32" pos:end="414:68"><decl pos:start="414:32" pos:end="414:68"><type pos:start="414:32" pos:end="414:46"><specifier pos:start="414:32" pos:end="414:36">const</specifier> <name pos:start="414:38" pos:end="414:42">UCHAR</name></type> <name pos:start="414:44" pos:end="414:68"><name pos:start="414:44" pos:end="414:46">sta</name><index pos:start="414:47" pos:end="414:68">[<expr pos:start="414:48" pos:end="414:67"><name pos:start="414:48" pos:end="414:67">DOT11DECRYPT_MAC_LEN</name></expr>]</index></name></decl></parameter>,
                               <parameter pos:start="415:32" pos:end="415:52"><decl pos:start="415:32" pos:end="415:52"><type pos:start="415:32" pos:end="415:52"><name pos:start="415:32" pos:end="415:36">UCHAR</name> <modifier pos:start="415:38" pos:end="415:38">*</modifier></type><name pos:start="415:39" pos:end="415:52">decrypted_data</name></decl></parameter>, <parameter pos:start="415:55" pos:end="415:74"><decl pos:start="415:55" pos:end="415:74"><type pos:start="415:55" pos:end="415:74"><name pos:start="415:55" pos:end="415:59">guint</name> <modifier pos:start="415:61" pos:end="415:61">*</modifier></type><name pos:start="415:62" pos:end="415:74">decrypted_len</name></decl></parameter>,
                               <parameter pos:start="416:32" pos:end="416:57"><decl pos:start="416:32" pos:end="416:57"><type pos:start="416:32" pos:end="416:57"><name pos:start="416:32" pos:end="416:53">PDOT11DECRYPT_KEY_ITEM</name></type> <name pos:start="416:55" pos:end="416:57">key</name></decl></parameter>)</parameter_list>
    <block pos:start="417:5" pos:end="534:5">{<block_content pos:start="418:9" pos:end="533:40">
        <decl_stmt pos:start="418:9" pos:end="418:27"><decl pos:start="418:9" pos:end="418:26"><type pos:start="418:9" pos:end="418:14"><name pos:start="418:9" pos:end="418:14">guint8</name></type> <name pos:start="418:16" pos:end="418:26">key_version</name></decl>;</decl_stmt>
        <decl_stmt pos:start="419:9" pos:end="419:31"><decl pos:start="419:9" pos:end="419:30"><type pos:start="419:9" pos:end="419:22"><specifier pos:start="419:9" pos:end="419:13">const</specifier> <name pos:start="419:15" pos:end="419:20">guint8</name> <modifier pos:start="419:22" pos:end="419:22">*</modifier></type><name pos:start="419:23" pos:end="419:30">key_data</name></decl>;</decl_stmt>
        <decl_stmt pos:start="420:9" pos:end="420:34"><decl pos:start="420:9" pos:end="420:33"><type pos:start="420:9" pos:end="420:15"><name pos:start="420:9" pos:end="420:15">guint16</name></type> <name pos:start="420:17" pos:end="420:29">key_bytes_len</name> <init pos:start="420:31" pos:end="420:33">= <expr pos:start="420:33" pos:end="420:33"><literal type="number" pos:start="420:33" pos:end="420:33">0</literal></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="420:36" pos:end="420:75">/* Length of the total key data field */</comment>
        <decl_stmt pos:start="421:9" pos:end="421:43"><decl pos:start="421:9" pos:end="421:42"><type pos:start="421:9" pos:end="421:39"><name pos:start="421:9" pos:end="421:39">DOT11DECRYPT_SEC_ASSOCIATION_ID</name></type> <name pos:start="421:41" pos:end="421:42">id</name></decl>;</decl_stmt>
        <decl_stmt pos:start="422:9" pos:end="422:41"><decl pos:start="422:9" pos:end="422:40"><type pos:start="422:9" pos:end="422:37"><name pos:start="422:9" pos:end="422:37">PDOT11DECRYPT_SEC_ASSOCIATION</name></type> <name pos:start="422:39" pos:end="422:40">sa</name></decl>;</decl_stmt>

        <comment type="block" pos:start="424:9" pos:end="424:79">/* search for a cached Security Association for current BSSID and AP */</comment>
        <expr_stmt pos:start="425:9" pos:end="425:54"><expr pos:start="425:9" pos:end="425:53"><call pos:start="425:9" pos:end="425:53"><name pos:start="425:9" pos:end="425:14">memcpy</name><argument_list pos:start="425:15" pos:end="425:53">(<argument pos:start="425:16" pos:end="425:23"><expr pos:start="425:16" pos:end="425:23"><name pos:start="425:16" pos:end="425:23"><name pos:start="425:16" pos:end="425:17">id</name><operator pos:start="425:18" pos:end="425:18">.</operator><name pos:start="425:19" pos:end="425:23">bssid</name></name></expr></argument>, <argument pos:start="425:26" pos:end="425:30"><expr pos:start="425:26" pos:end="425:30"><name pos:start="425:26" pos:end="425:30">bssid</name></expr></argument>, <argument pos:start="425:33" pos:end="425:52"><expr pos:start="425:33" pos:end="425:52"><name pos:start="425:33" pos:end="425:52">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="426:9" pos:end="426:50"><expr pos:start="426:9" pos:end="426:49"><call pos:start="426:9" pos:end="426:49"><name pos:start="426:9" pos:end="426:14">memcpy</name><argument_list pos:start="426:15" pos:end="426:49">(<argument pos:start="426:16" pos:end="426:21"><expr pos:start="426:16" pos:end="426:21"><name pos:start="426:16" pos:end="426:21"><name pos:start="426:16" pos:end="426:17">id</name><operator pos:start="426:18" pos:end="426:18">.</operator><name pos:start="426:19" pos:end="426:21">sta</name></name></expr></argument>, <argument pos:start="426:24" pos:end="426:26"><expr pos:start="426:24" pos:end="426:26"><name pos:start="426:24" pos:end="426:26">sta</name></expr></argument>, <argument pos:start="426:29" pos:end="426:48"><expr pos:start="426:29" pos:end="426:48"><name pos:start="426:29" pos:end="426:48">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="427:9" pos:end="427:41"><expr pos:start="427:9" pos:end="427:40"><name pos:start="427:9" pos:end="427:10">sa</name> <operator pos:start="427:12" pos:end="427:12">=</operator> <call pos:start="427:14" pos:end="427:40"><name pos:start="427:14" pos:end="427:30">Dot11DecryptGetSa</name><argument_list pos:start="427:31" pos:end="427:40">(<argument pos:start="427:32" pos:end="427:34"><expr pos:start="427:32" pos:end="427:34"><name pos:start="427:32" pos:end="427:34">ctx</name></expr></argument>, <argument pos:start="427:37" pos:end="427:39"><expr pos:start="427:37" pos:end="427:39"><operator pos:start="427:37" pos:end="427:37">&amp;</operator><name pos:start="427:38" pos:end="427:39">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="428:9" pos:end="432:9"><if pos:start="428:9" pos:end="432:9">if <condition pos:start="428:12" pos:end="428:40">(<expr pos:start="428:13" pos:end="428:39"><name pos:start="428:13" pos:end="428:14">sa</name> <operator pos:start="428:16" pos:end="428:17">==</operator> <name pos:start="428:19" pos:end="428:22">NULL</name> <operator pos:start="428:24" pos:end="428:25">||</operator> <operator pos:start="428:27" pos:end="428:27">!</operator><name pos:start="428:28" pos:end="428:39"><name pos:start="428:28" pos:end="428:29">sa</name><operator pos:start="428:30" pos:end="428:31">-&gt;</operator><name pos:start="428:32" pos:end="428:39">validKey</name></name></expr>)</condition>
        <block pos:start="429:9" pos:end="432:9">{<block_content pos:start="430:13" pos:end="431:46">
            <expr_stmt pos:start="430:13" pos:end="430:52"><expr pos:start="430:13" pos:end="430:51"><call pos:start="430:13" pos:end="430:51"><name pos:start="430:13" pos:end="430:20">ws_debug</name><argument_list pos:start="430:21" pos:end="430:51">(<argument pos:start="430:22" pos:end="430:50"><expr pos:start="430:22" pos:end="430:50"><literal type="string" pos:start="430:22" pos:end="430:50">"No valid SA for BSSID found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="431:13" pos:end="431:46">return <expr pos:start="431:20" pos:end="431:45"><name pos:start="431:20" pos:end="431:45">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="434:9" pos:end="434:50">/* Decrypt GTK using KEK portion of PTK */</comment>
        <decl_stmt pos:start="435:9" pos:end="435:98"><decl pos:start="435:9" pos:end="435:97"><type pos:start="435:9" pos:end="435:16"><name pos:start="435:9" pos:end="435:14">guint8</name> <modifier pos:start="435:16" pos:end="435:16">*</modifier></type><name pos:start="435:17" pos:end="435:30">decryption_key</name> <init pos:start="435:32" pos:end="435:97">= <expr pos:start="435:34" pos:end="435:97"><operator pos:start="435:34" pos:end="435:34">(</operator><name pos:start="435:35" pos:end="435:45"><name pos:start="435:35" pos:end="435:36">sa</name><operator pos:start="435:37" pos:end="435:38">-&gt;</operator><name pos:start="435:39" pos:end="435:41">wpa</name><operator pos:start="435:42" pos:end="435:42">.</operator><name pos:start="435:43" pos:end="435:45">ptk</name></name> <operator pos:start="435:47" pos:end="435:47">+</operator> <operator pos:start="435:49" pos:end="435:49">(</operator><operator pos:start="435:50" pos:end="435:50">(</operator><operator pos:start="435:51" pos:end="435:51">(</operator><literal type="number" pos:start="435:52" pos:end="435:52">0</literal><operator pos:start="435:53" pos:end="435:53">)</operator> <operator pos:start="435:55" pos:end="435:55">+</operator> <call pos:start="435:57" pos:end="435:90"><name pos:start="435:57" pos:end="435:77">Dot11DecryptGetKckLen</name><argument_list pos:start="435:78" pos:end="435:90">(<argument pos:start="435:79" pos:end="435:89"><expr pos:start="435:79" pos:end="435:89"><name pos:start="435:79" pos:end="435:89"><name pos:start="435:79" pos:end="435:80">sa</name><operator pos:start="435:81" pos:end="435:82">-&gt;</operator><name pos:start="435:83" pos:end="435:85">wpa</name><operator pos:start="435:86" pos:end="435:86">.</operator><name pos:start="435:87" pos:end="435:89">akm</name></name></expr></argument>)</argument_list></call> <operator pos:start="435:92" pos:end="435:92">/</operator> <literal type="number" pos:start="435:94" pos:end="435:94">8</literal><operator pos:start="435:95" pos:end="435:95">)</operator><operator pos:start="435:96" pos:end="435:96">)</operator><operator pos:start="435:97" pos:end="435:97">)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="436:9" pos:end="436:74"><decl pos:start="436:9" pos:end="436:73"><type pos:start="436:9" pos:end="436:13"><name pos:start="436:9" pos:end="436:13">guint</name></type> <name pos:start="436:15" pos:end="436:32">decryption_key_len</name> <init pos:start="436:34" pos:end="436:73">= <expr pos:start="436:36" pos:end="436:73"><call pos:start="436:36" pos:end="436:69"><name pos:start="436:36" pos:end="436:56">Dot11DecryptGetKekLen</name><argument_list pos:start="436:57" pos:end="436:69">(<argument pos:start="436:58" pos:end="436:68"><expr pos:start="436:58" pos:end="436:68"><name pos:start="436:58" pos:end="436:68"><name pos:start="436:58" pos:end="436:59">sa</name><operator pos:start="436:60" pos:end="436:61">-&gt;</operator><name pos:start="436:62" pos:end="436:64">wpa</name><operator pos:start="436:65" pos:end="436:65">.</operator><name pos:start="436:66" pos:end="436:68">akm</name></name></expr></argument>)</argument_list></call> <operator pos:start="436:71" pos:end="436:71">/</operator> <literal type="number" pos:start="436:73" pos:end="436:73">8</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="438:9" pos:end="438:148">/* We skip verifying the MIC of the key. If we were implementing a WPA supplicant we'd want to verify, but for a sniffer it's not needed. */</comment>

        <comment type="block" pos:start="440:9" pos:end="440:89">/* Preparation for decrypting the group key -  determine group key data length */</comment>
        <comment type="block" pos:start="441:9" pos:end="441:81">/* depending on whether the pairwise key is TKIP or AES encryption key */</comment>
        <expr_stmt pos:start="442:9" pos:end="442:48"><expr pos:start="442:9" pos:end="442:47"><name pos:start="442:9" pos:end="442:19">key_version</name> <operator pos:start="442:21" pos:end="442:21">=</operator> <name pos:start="442:23" pos:end="442:47"><name pos:start="442:23" pos:end="442:34">eapol_parsed</name><operator pos:start="442:35" pos:end="442:36">-&gt;</operator><name pos:start="442:37" pos:end="442:47">key_version</name></name></expr>;</expr_stmt>
        <if_stmt pos:start="443:9" pos:end="470:9"><if pos:start="443:9" pos:end="447:9">if <condition pos:start="443:12" pos:end="443:29">(<expr pos:start="443:13" pos:end="443:28"><name pos:start="443:13" pos:end="443:23">key_version</name> <operator pos:start="443:25" pos:end="443:26">==</operator> <literal type="number" pos:start="443:28" pos:end="443:28">1</literal></expr>)</condition>
        <block pos:start="444:9" pos:end="447:9">{<block_content pos:start="446:13" pos:end="446:50">
            <comment type="block" pos:start="445:13" pos:end="445:22">/* TKIP */</comment>
            <expr_stmt pos:start="446:13" pos:end="446:50"><expr pos:start="446:13" pos:end="446:49"><name pos:start="446:13" pos:end="446:25">key_bytes_len</name> <operator pos:start="446:27" pos:end="446:27">=</operator> <name pos:start="446:29" pos:end="446:49"><name pos:start="446:29" pos:end="446:40">eapol_parsed</name><operator pos:start="446:41" pos:end="446:42">-&gt;</operator><name pos:start="446:43" pos:end="446:49">key_len</name></name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif" pos:start="448:9" pos:end="458:9">else if <condition pos:start="448:17" pos:end="448:34">(<expr pos:start="448:18" pos:end="448:33"><name pos:start="448:18" pos:end="448:28">key_version</name> <operator pos:start="448:30" pos:end="448:31">==</operator> <literal type="number" pos:start="448:33" pos:end="448:33">2</literal></expr>)</condition>
        <block pos:start="449:9" pos:end="458:9">{<block_content pos:start="451:13" pos:end="457:13">
            <comment type="block" pos:start="450:13" pos:end="450:21">/* AES */</comment>
            <expr_stmt pos:start="451:13" pos:end="451:55"><expr pos:start="451:13" pos:end="451:54"><name pos:start="451:13" pos:end="451:25">key_bytes_len</name> <operator pos:start="451:27" pos:end="451:27">=</operator> <name pos:start="451:29" pos:end="451:54"><name pos:start="451:29" pos:end="451:40">eapol_parsed</name><operator pos:start="451:41" pos:end="451:42">-&gt;</operator><name pos:start="451:43" pos:end="451:54">key_data_len</name></name></expr>;</expr_stmt>

            <comment type="block" pos:start="453:13" pos:end="453:64">/* AES keys must be at least 128 bits = 16 bytes. */</comment>
            <if_stmt pos:start="454:13" pos:end="457:13"><if pos:start="454:13" pos:end="457:13">if <condition pos:start="454:16" pos:end="454:35">(<expr pos:start="454:17" pos:end="454:34"><name pos:start="454:17" pos:end="454:29">key_bytes_len</name> <operator pos:start="454:31" pos:end="454:31">&lt;</operator> <literal type="number" pos:start="454:33" pos:end="454:34">16</literal></expr>)</condition>
            <block pos:start="455:13" pos:end="457:13">{<block_content pos:start="456:17" pos:end="456:50">
                <return pos:start="456:17" pos:end="456:50">return <expr pos:start="456:24" pos:end="456:49"><name pos:start="456:24" pos:end="456:49">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else pos:start="459:9" pos:end="470:9">else
        <block pos:start="460:9" pos:end="470:9">{<block_content pos:start="464:13" pos:end="469:13">
            <comment type="block" pos:start="461:13" pos:end="461:98">/* XXX Ideally group cipher suite type from EAPOL message 2 of 4 should be used to  */</comment>
            <comment type="block" pos:start="462:13" pos:end="462:98">/* determine key size. As we currently have no way to do this lookup check that key */</comment>
            <comment type="block" pos:start="463:13" pos:end="463:98">/* is at least 16 bytes (IEEE802.11-2016 Table 12-4 Cipher suite key lengths)       */</comment>
            <expr_stmt pos:start="464:13" pos:end="464:55"><expr pos:start="464:13" pos:end="464:54"><name pos:start="464:13" pos:end="464:25">key_bytes_len</name> <operator pos:start="464:27" pos:end="464:27">=</operator> <name pos:start="464:29" pos:end="464:54"><name pos:start="464:29" pos:end="464:40">eapol_parsed</name><operator pos:start="464:41" pos:end="464:42">-&gt;</operator><name pos:start="464:43" pos:end="464:54">key_data_len</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="466:13" pos:end="469:13"><if pos:start="466:13" pos:end="469:13">if <condition pos:start="466:16" pos:end="466:35">(<expr pos:start="466:17" pos:end="466:34"><name pos:start="466:17" pos:end="466:29">key_bytes_len</name> <operator pos:start="466:31" pos:end="466:31">&lt;</operator> <literal type="number" pos:start="466:33" pos:end="466:34">16</literal></expr>)</condition>
            <block pos:start="467:13" pos:end="469:13">{<block_content pos:start="468:17" pos:end="468:50">
                <return pos:start="468:17" pos:end="468:50">return <expr pos:start="468:24" pos:end="468:49"><name pos:start="468:24" pos:end="468:49">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="472:9" pos:end="477:9"><if pos:start="472:9" pos:end="477:9">if <condition pos:start="472:12" pos:end="474:53">(<expr pos:start="472:13" pos:end="474:52"><operator pos:start="472:13" pos:end="472:13">(</operator><name pos:start="472:14" pos:end="472:26">key_bytes_len</name> <operator pos:start="472:28" pos:end="472:28">&lt;</operator> <literal type="number" pos:start="472:30" pos:end="472:30">8</literal> <operator pos:start="472:32" pos:end="472:32">+</operator> <literal type="number" pos:start="472:34" pos:end="472:35">16</literal><operator pos:start="472:36" pos:end="472:36">)</operator> <operator pos:start="472:38" pos:end="472:39">||</operator>
            <operator pos:start="473:13" pos:end="473:13">(</operator><name pos:start="473:14" pos:end="473:30"><name pos:start="473:14" pos:end="473:25">eapol_parsed</name><operator pos:start="473:26" pos:end="473:27">-&gt;</operator><name pos:start="473:28" pos:end="473:30">len</name></name> <operator pos:start="473:32" pos:end="473:32">&lt;</operator> <literal type="number" pos:start="473:34" pos:end="473:35">95</literal><operator pos:start="473:36" pos:end="473:36">)</operator> <operator pos:start="473:38" pos:end="473:39">||</operator>
            <operator pos:start="474:13" pos:end="474:13">(</operator><name pos:start="474:14" pos:end="474:26">key_bytes_len</name> <operator pos:start="474:28" pos:end="474:28">&gt;</operator> <name pos:start="474:30" pos:end="474:46"><name pos:start="474:30" pos:end="474:41">eapol_parsed</name><operator pos:start="474:42" pos:end="474:43">-&gt;</operator><name pos:start="474:44" pos:end="474:46">len</name></name> <operator pos:start="474:48" pos:end="474:48">-</operator> <literal type="number" pos:start="474:50" pos:end="474:51">95</literal><operator pos:start="474:52" pos:end="474:52">)</operator></expr>)</condition>
        <block pos:start="475:9" pos:end="477:9">{<block_content pos:start="476:13" pos:end="476:46">
            <return pos:start="476:13" pos:end="476:46">return <expr pos:start="476:20" pos:end="476:45"><name pos:start="476:20" pos:end="476:45">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="479:9" pos:end="479:87">/* Encrypted key is in the information element field of the EAPOL key packet */</comment>
        <expr_stmt pos:start="480:9" pos:end="480:42"><expr pos:start="480:9" pos:end="480:41"><name pos:start="480:9" pos:end="480:16">key_data</name> <operator pos:start="480:18" pos:end="480:18">=</operator> <name pos:start="480:20" pos:end="480:41"><name pos:start="480:20" pos:end="480:31">eapol_parsed</name><operator pos:start="480:32" pos:end="480:33">-&gt;</operator><name pos:start="480:34" pos:end="480:41">key_data</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="482:9" pos:end="482:88"><expr pos:start="482:9" pos:end="482:87"><call pos:start="482:9" pos:end="482:87"><name pos:start="482:9" pos:end="482:18">DEBUG_DUMP</name><argument_list pos:start="482:19" pos:end="482:87">(<argument pos:start="482:20" pos:end="482:44"><expr pos:start="482:20" pos:end="482:44"><literal type="string" pos:start="482:20" pos:end="482:44">"Encrypted Broadcast key"</literal></expr></argument>, <argument pos:start="482:47" pos:end="482:54"><expr pos:start="482:47" pos:end="482:54"><name pos:start="482:47" pos:end="482:54">key_data</name></expr></argument>, <argument pos:start="482:57" pos:end="482:69"><expr pos:start="482:57" pos:end="482:69"><name pos:start="482:57" pos:end="482:69">key_bytes_len</name></expr></argument>, <argument pos:start="482:72" pos:end="482:86"><expr pos:start="482:72" pos:end="482:86"><name pos:start="482:72" pos:end="482:86">LOG_LEVEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="483:9" pos:end="483:71"><expr pos:start="483:9" pos:end="483:70"><call pos:start="483:9" pos:end="483:70"><name pos:start="483:9" pos:end="483:18">DEBUG_DUMP</name><argument_list pos:start="483:19" pos:end="483:70">(<argument pos:start="483:20" pos:end="483:26"><expr pos:start="483:20" pos:end="483:26"><literal type="string" pos:start="483:20" pos:end="483:26">"KeyIV"</literal></expr></argument>, <argument pos:start="483:29" pos:end="483:48"><expr pos:start="483:29" pos:end="483:48"><name pos:start="483:29" pos:end="483:48"><name pos:start="483:29" pos:end="483:40">eapol_parsed</name><operator pos:start="483:41" pos:end="483:42">-&gt;</operator><name pos:start="483:43" pos:end="483:48">key_iv</name></name></expr></argument>, <argument pos:start="483:51" pos:end="483:52"><expr pos:start="483:51" pos:end="483:52"><literal type="number" pos:start="483:51" pos:end="483:52">16</literal></expr></argument>, <argument pos:start="483:55" pos:end="483:69"><expr pos:start="483:55" pos:end="483:69"><name pos:start="483:55" pos:end="483:69">LOG_LEVEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="484:9" pos:end="484:90"><expr pos:start="484:9" pos:end="484:89"><call pos:start="484:9" pos:end="484:89"><name pos:start="484:9" pos:end="484:18">DEBUG_DUMP</name><argument_list pos:start="484:19" pos:end="484:89">(<argument pos:start="484:20" pos:end="484:35"><expr pos:start="484:20" pos:end="484:35"><literal type="string" pos:start="484:20" pos:end="484:35">"decryption_key"</literal></expr></argument>, <argument pos:start="484:38" pos:end="484:51"><expr pos:start="484:38" pos:end="484:51"><name pos:start="484:38" pos:end="484:51">decryption_key</name></expr></argument>, <argument pos:start="484:54" pos:end="484:71"><expr pos:start="484:54" pos:end="484:71"><name pos:start="484:54" pos:end="484:71">decryption_key_len</name></expr></argument>, <argument pos:start="484:74" pos:end="484:88"><expr pos:start="484:74" pos:end="484:88"><name pos:start="484:74" pos:end="484:88">LOG_LEVEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="486:9" pos:end="486:109">/* As we have no concept of the prior association request at this point, we need to deduce the     */</comment>
        <comment type="block" pos:start="487:9" pos:end="487:109">/* group key cipher from the length of the key bytes. In WPA this is straightforward as the        */</comment>
        <comment type="block" pos:start="488:9" pos:end="488:109">/* keybytes just contain the GTK, and the GTK is only in the group handshake, NOT the M3.          */</comment>
        <comment type="block" pos:start="489:9" pos:end="489:109">/* In WPA2 its a little more tricky as the M3 keybytes contain an RSN_IE, but the group handshake  */</comment>
        <comment type="block" pos:start="490:9" pos:end="490:109">/* does not. Also there are other (variable length) items in the keybytes which we need to account */</comment>
        <comment type="block" pos:start="491:9" pos:end="491:109">/* for to determine the true key length, and thus the group cipher.                                */</comment>

        <if_stmt pos:start="493:9" pos:end="529:9"><if pos:start="493:9" pos:end="516:9">if <condition pos:start="493:12" pos:end="493:29">(<expr pos:start="493:13" pos:end="493:28"><name pos:start="493:13" pos:end="493:23">key_version</name> <operator pos:start="493:25" pos:end="493:26">==</operator> <literal type="number" pos:start="493:28" pos:end="493:28">1</literal></expr>)</condition>
        <block pos:start="494:9" pos:end="516:9">{<block_content pos:start="498:13" pos:end="515:25">
            <comment type="block" pos:start="495:13" pos:end="495:26">/* TKIP key */</comment>
            <comment type="block" pos:start="496:13" pos:end="496:78">/* Per 802.11i, Draft 3.0 spec, section 8.5.2, p. 97, line 4-8, */</comment>
            <comment type="block" pos:start="497:13" pos:end="497:126">/* group key is decrypted using RC4.  Concatenate the IV with the 16 byte EK (PTK+16) to get the decryption key */</comment>
            <decl_stmt pos:start="498:13" pos:end="498:31"><decl pos:start="498:13" pos:end="498:30"><type pos:start="498:13" pos:end="498:18"><name pos:start="498:13" pos:end="498:18">guint8</name></type> <name pos:start="498:20" pos:end="498:30"><name pos:start="498:20" pos:end="498:26">new_key</name><index pos:start="498:27" pos:end="498:30">[<expr pos:start="498:28" pos:end="498:29"><literal type="number" pos:start="498:28" pos:end="498:29">32</literal></expr>]</index></name></decl>;</decl_stmt>
            <decl_stmt pos:start="499:13" pos:end="499:25"><decl pos:start="499:13" pos:end="499:24"><type pos:start="499:13" pos:end="499:20"><name pos:start="499:13" pos:end="499:18">guint8</name> <modifier pos:start="499:20" pos:end="499:20">*</modifier></type><name pos:start="499:21" pos:end="499:24">data</name></decl>;</decl_stmt>

            <comment type="block" pos:start="501:13" pos:end="501:105">/* The WPA group key just contains the GTK bytes so deducing the type is straightforward   */</comment>
            <comment type="block" pos:start="502:13" pos:end="502:105">/* Note - WPA M3 doesn't contain a group key so we'll only be here for the group handshake */</comment>
            <expr_stmt pos:start="503:13" pos:end="503:60"><expr pos:start="503:13" pos:end="503:59"><name pos:start="503:13" pos:end="503:27"><name pos:start="503:13" pos:end="503:14">sa</name><operator pos:start="503:15" pos:end="503:16">-&gt;</operator><name pos:start="503:17" pos:end="503:19">wpa</name><operator pos:start="503:20" pos:end="503:20">.</operator><name pos:start="503:21" pos:end="503:27">key_ver</name></name> <operator pos:start="503:29" pos:end="503:29">=</operator> <ternary pos:start="503:31" pos:end="503:59"><condition pos:start="503:31" pos:end="503:53"><expr pos:start="503:31" pos:end="503:51"><operator pos:start="503:31" pos:end="503:31">(</operator><name pos:start="503:32" pos:end="503:44">key_bytes_len</name> <operator pos:start="503:46" pos:end="503:47">&gt;=</operator> <literal type="number" pos:start="503:49" pos:end="503:50">32</literal><operator pos:start="503:51" pos:end="503:51">)</operator></expr> ?</condition><then pos:start="503:55" pos:end="503:55"> <expr pos:start="503:55" pos:end="503:55"><literal type="number" pos:start="503:55" pos:end="503:55">1</literal></expr> </then><else pos:start="503:57" pos:end="503:59">: <expr pos:start="503:59" pos:end="503:59"><literal type="number" pos:start="503:59" pos:end="503:59">2</literal></expr></else></ternary></expr>;</expr_stmt>

            <comment type="block" pos:start="505:13" pos:end="505:92">/* Build the full decryption key based on the IV and part of the pairwise key */</comment>
            <expr_stmt pos:start="506:13" pos:end="506:54"><expr pos:start="506:13" pos:end="506:53"><call pos:start="506:13" pos:end="506:53"><name pos:start="506:13" pos:end="506:18">memcpy</name><argument_list pos:start="506:19" pos:end="506:53">(<argument pos:start="506:20" pos:end="506:26"><expr pos:start="506:20" pos:end="506:26"><name pos:start="506:20" pos:end="506:26">new_key</name></expr></argument>, <argument pos:start="506:29" pos:end="506:48"><expr pos:start="506:29" pos:end="506:48"><name pos:start="506:29" pos:end="506:48"><name pos:start="506:29" pos:end="506:40">eapol_parsed</name><operator pos:start="506:41" pos:end="506:42">-&gt;</operator><name pos:start="506:43" pos:end="506:48">key_iv</name></name></expr></argument>, <argument pos:start="506:51" pos:end="506:52"><expr pos:start="506:51" pos:end="506:52"><literal type="number" pos:start="506:51" pos:end="506:52">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="507:13" pos:end="507:53"><expr pos:start="507:13" pos:end="507:52"><call pos:start="507:13" pos:end="507:52"><name pos:start="507:13" pos:end="507:18">memcpy</name><argument_list pos:start="507:19" pos:end="507:52">(<argument pos:start="507:20" pos:end="507:31"><expr pos:start="507:20" pos:end="507:31"><name pos:start="507:20" pos:end="507:26">new_key</name> <operator pos:start="507:28" pos:end="507:28">+</operator> <literal type="number" pos:start="507:30" pos:end="507:31">16</literal></expr></argument>, <argument pos:start="507:34" pos:end="507:47"><expr pos:start="507:34" pos:end="507:47"><name pos:start="507:34" pos:end="507:47">decryption_key</name></expr></argument>, <argument pos:start="507:50" pos:end="507:51"><expr pos:start="507:50" pos:end="507:51"><literal type="number" pos:start="507:50" pos:end="507:51">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="508:13" pos:end="508:68"><expr pos:start="508:13" pos:end="508:67"><call pos:start="508:13" pos:end="508:67"><name pos:start="508:13" pos:end="508:22">DEBUG_DUMP</name><argument_list pos:start="508:23" pos:end="508:67">(<argument pos:start="508:24" pos:end="508:36"><expr pos:start="508:24" pos:end="508:36"><literal type="string" pos:start="508:24" pos:end="508:36">"FullDecrKey"</literal></expr></argument>, <argument pos:start="508:39" pos:end="508:45"><expr pos:start="508:39" pos:end="508:45"><name pos:start="508:39" pos:end="508:45">new_key</name></expr></argument>, <argument pos:start="508:48" pos:end="508:49"><expr pos:start="508:48" pos:end="508:49"><literal type="number" pos:start="508:48" pos:end="508:49">32</literal></expr></argument>, <argument pos:start="508:52" pos:end="508:66"><expr pos:start="508:52" pos:end="508:66"><name pos:start="508:52" pos:end="508:66">LOG_LEVEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="509:13" pos:end="509:80"><expr pos:start="509:13" pos:end="509:79"><name pos:start="509:13" pos:end="509:16">data</name> <operator pos:start="509:18" pos:end="509:18">=</operator> <call pos:start="509:20" pos:end="509:79"><name pos:start="509:20" pos:end="509:41">Dot11DecryptRc4KeyData</name><argument_list pos:start="509:42" pos:end="509:79">(<argument pos:start="509:43" pos:end="509:49"><expr pos:start="509:43" pos:end="509:49"><name pos:start="509:43" pos:end="509:49">new_key</name></expr></argument>, <argument pos:start="509:52" pos:end="509:53"><expr pos:start="509:52" pos:end="509:53"><literal type="number" pos:start="509:52" pos:end="509:53">32</literal></expr></argument>, <argument pos:start="509:56" pos:end="509:63"><expr pos:start="509:56" pos:end="509:63"><name pos:start="509:56" pos:end="509:63">key_data</name></expr></argument>, <argument pos:start="509:66" pos:end="509:78"><expr pos:start="509:66" pos:end="509:78"><name pos:start="509:66" pos:end="509:78">key_bytes_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="510:13" pos:end="513:13"><if pos:start="510:13" pos:end="513:13">if <condition pos:start="510:16" pos:end="510:22">(<expr pos:start="510:17" pos:end="510:21"><operator pos:start="510:17" pos:end="510:17">!</operator><name pos:start="510:18" pos:end="510:21">data</name></expr>)</condition>
            <block pos:start="511:13" pos:end="513:13">{<block_content pos:start="512:17" pos:end="512:50">
                <return pos:start="512:17" pos:end="512:50">return <expr pos:start="512:24" pos:end="512:49"><name pos:start="512:24" pos:end="512:49">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="514:13" pos:end="514:56"><expr pos:start="514:13" pos:end="514:55"><call pos:start="514:13" pos:end="514:55"><name pos:start="514:13" pos:end="514:18">memcpy</name><argument_list pos:start="514:19" pos:end="514:55">(<argument pos:start="514:20" pos:end="514:33"><expr pos:start="514:20" pos:end="514:33"><name pos:start="514:20" pos:end="514:33">decrypted_data</name></expr></argument>, <argument pos:start="514:36" pos:end="514:39"><expr pos:start="514:36" pos:end="514:39"><name pos:start="514:36" pos:end="514:39">data</name></expr></argument>, <argument pos:start="514:42" pos:end="514:54"><expr pos:start="514:42" pos:end="514:54"><name pos:start="514:42" pos:end="514:54">key_bytes_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="515:13" pos:end="515:25"><expr pos:start="515:13" pos:end="515:24"><call pos:start="515:13" pos:end="515:24"><name pos:start="515:13" pos:end="515:18">g_free</name><argument_list pos:start="515:19" pos:end="515:24">(<argument pos:start="515:20" pos:end="515:23"><expr pos:start="515:20" pos:end="515:23"><name pos:start="515:20" pos:end="515:23">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else pos:start="517:9" pos:end="529:9">else
        <block pos:start="518:9" pos:end="529:9">{<block_content pos:start="524:13" pos:end="528:13">
            <comment type="block" pos:start="519:13" pos:end="519:108">/* Ideally AKM from EAPOL message 2 of 4 should be used to determine Key-wrap algoritm to use */</comment>
            <comment type="block" pos:start="520:13" pos:end="520:108">/* Though fortunately IEEE802.11-2016 Table 12-8 state that all AKMs use "NIST AES Key Wrap"  */</comment>
            <comment type="block" pos:start="521:13" pos:end="521:55">/* algorithm so no AKM lookup is needed. */</comment>

            <comment type="block" pos:start="523:13" pos:end="523:71">/* Unwrap the key; the result is key_bytes_len in length */</comment>
            <if_stmt pos:start="524:13" pos:end="528:13"><if pos:start="524:13" pos:end="528:13">if <condition pos:start="524:16" pos:end="525:59">(<expr pos:start="524:17" pos:end="525:58"><call pos:start="524:17" pos:end="525:58"><name pos:start="524:17" pos:end="524:26">AES_unwrap</name><argument_list pos:start="524:27" pos:end="525:58">(<argument pos:start="524:28" pos:end="524:41"><expr pos:start="524:28" pos:end="524:41"><name pos:start="524:28" pos:end="524:41">decryption_key</name></expr></argument>, <argument pos:start="524:44" pos:end="524:61"><expr pos:start="524:44" pos:end="524:61"><name pos:start="524:44" pos:end="524:61">decryption_key_len</name></expr></argument>, <argument pos:start="524:64" pos:end="524:71"><expr pos:start="524:64" pos:end="524:71"><name pos:start="524:64" pos:end="524:71">key_data</name></expr></argument>, <argument pos:start="524:74" pos:end="524:86"><expr pos:start="524:74" pos:end="524:86"><name pos:start="524:74" pos:end="524:86">key_bytes_len</name></expr></argument>,
                           <argument pos:start="525:28" pos:end="525:41"><expr pos:start="525:28" pos:end="525:41"><name pos:start="525:28" pos:end="525:41">decrypted_data</name></expr></argument>, <argument pos:start="525:44" pos:end="525:57"><expr pos:start="525:44" pos:end="525:57"><operator pos:start="525:44" pos:end="525:44">&amp;</operator><name pos:start="525:45" pos:end="525:57">key_bytes_len</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block pos:start="526:13" pos:end="528:13">{<block_content pos:start="527:17" pos:end="527:50">
                <return pos:start="527:17" pos:end="527:50">return <expr pos:start="527:24" pos:end="527:49"><name pos:start="527:24" pos:end="527:49">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="531:9" pos:end="531:37"><expr pos:start="531:9" pos:end="531:36"><call pos:start="531:9" pos:end="531:36"><name pos:start="531:9" pos:end="531:27">Dot11DecryptCopyKey</name><argument_list pos:start="531:28" pos:end="531:36">(<argument pos:start="531:29" pos:end="531:30"><expr pos:start="531:29" pos:end="531:30"><name pos:start="531:29" pos:end="531:30">sa</name></expr></argument>, <argument pos:start="531:33" pos:end="531:35"><expr pos:start="531:33" pos:end="531:35"><name pos:start="531:33" pos:end="531:35">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="532:9" pos:end="532:39"><expr pos:start="532:9" pos:end="532:38"><operator pos:start="532:9" pos:end="532:9">*</operator><name pos:start="532:10" pos:end="532:22">decrypted_len</name> <operator pos:start="532:24" pos:end="532:24">=</operator> <name pos:start="532:26" pos:end="532:38">key_bytes_len</name></expr>;</expr_stmt>
        <return pos:start="533:9" pos:end="533:40">return <expr pos:start="533:16" pos:end="533:39"><name pos:start="533:16" pos:end="533:39">DOT11DECRYPT_RET_SUCCESS</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="doxygen" pos:start="536:5" pos:end="541:7">/**
     * @param ctx [IN] pointer to the current context
     * @param id [IN] id of the association (composed by BSSID and MAC of
     * the station)
     * @return a pointer of the requested SA. NULL if it doesn't exist.
     */</comment>
    <function pos:start="542:5" pos:end="548:5"><type pos:start="542:5" pos:end="542:40"><specifier pos:start="542:5" pos:end="542:10">static</specifier> <name pos:start="542:12" pos:end="542:40">PDOT11DECRYPT_SEC_ASSOCIATION</name></type>
    <name pos:start="543:5" pos:end="543:21">Dot11DecryptGetSa</name><parameter_list pos:start="543:22" pos:end="545:50">(
        <parameter pos:start="544:9" pos:end="544:33"><decl pos:start="544:9" pos:end="544:33"><type pos:start="544:9" pos:end="544:33"><name pos:start="544:9" pos:end="544:29">PDOT11DECRYPT_CONTEXT</name></type> <name pos:start="544:31" pos:end="544:33">ctx</name></decl></parameter>,
        <parameter pos:start="545:9" pos:end="545:49"><decl pos:start="545:9" pos:end="545:49"><type pos:start="545:9" pos:end="545:49"><specifier pos:start="545:9" pos:end="545:13">const</specifier> <name pos:start="545:15" pos:end="545:45">DOT11DECRYPT_SEC_ASSOCIATION_ID</name> <modifier pos:start="545:47" pos:end="545:47">*</modifier></type><name pos:start="545:48" pos:end="545:49">id</name></decl></parameter>)</parameter_list>
    <block pos:start="546:5" pos:end="548:5">{<block_content pos:start="547:9" pos:end="547:85">
        <return pos:start="547:9" pos:end="547:85">return <expr pos:start="547:16" pos:end="547:84"><operator pos:start="547:16" pos:end="547:16">(</operator><name pos:start="547:17" pos:end="547:44">DOT11DECRYPT_SEC_ASSOCIATION</name> <operator pos:start="547:46" pos:end="547:46">*</operator><operator pos:start="547:47" pos:end="547:47">)</operator><call pos:start="547:48" pos:end="547:84"><name pos:start="547:48" pos:end="547:66">g_hash_table_lookup</name><argument_list pos:start="547:67" pos:end="547:84">(<argument pos:start="547:68" pos:end="547:79"><expr pos:start="547:68" pos:end="547:79"><name pos:start="547:68" pos:end="547:79"><name pos:start="547:68" pos:end="547:70">ctx</name><operator pos:start="547:71" pos:end="547:72">-&gt;</operator><name pos:start="547:73" pos:end="547:79">sa_hash</name></name></expr></argument>, <argument pos:start="547:82" pos:end="547:83"><expr pos:start="547:82" pos:end="547:83"><name pos:start="547:82" pos:end="547:83">id</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="550:5" pos:end="559:5"><type pos:start="550:5" pos:end="550:40"><specifier pos:start="550:5" pos:end="550:10">static</specifier> <name pos:start="550:12" pos:end="550:40">PDOT11DECRYPT_SEC_ASSOCIATION</name></type>
    <name pos:start="551:5" pos:end="551:21">Dot11DecryptNewSa</name><parameter_list pos:start="551:22" pos:end="551:64">(<parameter pos:start="551:23" pos:end="551:63"><decl pos:start="551:23" pos:end="551:63"><type pos:start="551:23" pos:end="551:61"><specifier pos:start="551:23" pos:end="551:27">const</specifier> <name pos:start="551:29" pos:end="551:59">DOT11DECRYPT_SEC_ASSOCIATION_ID</name> <modifier pos:start="551:61" pos:end="551:61">*</modifier></type><name pos:start="551:62" pos:end="551:63">id</name></decl></parameter>)</parameter_list>
    <block pos:start="552:5" pos:end="559:5">{<block_content pos:start="553:9" pos:end="558:18">
        <decl_stmt pos:start="553:9" pos:end="553:83"><decl pos:start="553:9" pos:end="553:82"><type pos:start="553:9" pos:end="553:37"><name pos:start="553:9" pos:end="553:37">PDOT11DECRYPT_SEC_ASSOCIATION</name></type> <name pos:start="553:39" pos:end="553:40">sa</name> <init pos:start="553:42" pos:end="553:82">= <expr pos:start="553:44" pos:end="553:82"><call pos:start="553:44" pos:end="553:82"><name pos:start="553:44" pos:end="553:49">g_new0</name><argument_list pos:start="553:50" pos:end="553:82">(<argument pos:start="553:51" pos:end="553:78"><expr pos:start="553:51" pos:end="553:78"><name pos:start="553:51" pos:end="553:78">DOT11DECRYPT_SEC_ASSOCIATION</name></expr></argument>, <argument pos:start="553:81" pos:end="553:81"><expr pos:start="553:81" pos:end="553:81"><literal type="number" pos:start="553:81" pos:end="553:81">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="554:9" pos:end="557:9"><if pos:start="554:9" pos:end="557:9">if <condition pos:start="554:12" pos:end="554:23">(<expr pos:start="554:13" pos:end="554:22"><name pos:start="554:13" pos:end="554:14">sa</name> <operator pos:start="554:16" pos:end="554:17">!=</operator> <name pos:start="554:19" pos:end="554:22">NULL</name></expr>)</condition>
        <block pos:start="555:9" pos:end="557:9">{<block_content pos:start="556:13" pos:end="556:27">
            <expr_stmt pos:start="556:13" pos:end="556:27"><expr pos:start="556:13" pos:end="556:26"><name pos:start="556:13" pos:end="556:20"><name pos:start="556:13" pos:end="556:14">sa</name><operator pos:start="556:15" pos:end="556:16">-&gt;</operator><name pos:start="556:17" pos:end="556:20">saId</name></name> <operator pos:start="556:22" pos:end="556:22">=</operator> <operator pos:start="556:24" pos:end="556:24">*</operator><name pos:start="556:25" pos:end="556:26">id</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return pos:start="558:9" pos:end="558:18">return <expr pos:start="558:16" pos:end="558:17"><name pos:start="558:16" pos:end="558:17">sa</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="561:5" pos:end="575:5"><type pos:start="561:5" pos:end="561:41"><specifier pos:start="561:5" pos:end="561:10">static</specifier> <name pos:start="561:12" pos:end="561:39">DOT11DECRYPT_SEC_ASSOCIATION</name> <modifier pos:start="561:41" pos:end="561:41">*</modifier></type>
    <name pos:start="562:5" pos:end="562:25">Dot11DecryptPrependSa</name><parameter_list pos:start="562:26" pos:end="564:45">(
        <parameter pos:start="563:9" pos:end="563:49"><decl pos:start="563:9" pos:end="563:49"><type pos:start="563:9" pos:end="563:49"><name pos:start="563:9" pos:end="563:36">DOT11DECRYPT_SEC_ASSOCIATION</name> <modifier pos:start="563:38" pos:end="563:38">*</modifier></type><name pos:start="563:39" pos:end="563:49">existing_sa</name></decl></parameter>,
        <parameter pos:start="564:9" pos:end="564:44"><decl pos:start="564:9" pos:end="564:44"><type pos:start="564:9" pos:end="564:44"><name pos:start="564:9" pos:end="564:36">DOT11DECRYPT_SEC_ASSOCIATION</name> <modifier pos:start="564:38" pos:end="564:38">*</modifier></type><name pos:start="564:39" pos:end="564:44">new_sa</name></decl></parameter>)</parameter_list>
    <block pos:start="565:5" pos:end="575:5">{<block_content pos:start="566:9" pos:end="574:27">
        <decl_stmt pos:start="566:9" pos:end="566:44"><decl pos:start="566:9" pos:end="566:43"><type pos:start="566:9" pos:end="566:36"><name pos:start="566:9" pos:end="566:36">DOT11DECRYPT_SEC_ASSOCIATION</name></type> <name pos:start="566:38" pos:end="566:43">tmp_sa</name></decl>;</decl_stmt>

        <comment type="block" pos:start="568:9" pos:end="569:64">/* Add new SA first in list, but copy by value into existing record
         * so that sa_hash need not be updated with new value */</comment>
        <expr_stmt pos:start="570:9" pos:end="570:30"><expr pos:start="570:9" pos:end="570:29"><name pos:start="570:9" pos:end="570:14">tmp_sa</name> <operator pos:start="570:16" pos:end="570:16">=</operator> <operator pos:start="570:18" pos:end="570:18">*</operator><name pos:start="570:19" pos:end="570:29">existing_sa</name></expr>;</expr_stmt>
        <expr_stmt pos:start="571:9" pos:end="571:31"><expr pos:start="571:9" pos:end="571:30"><operator pos:start="571:9" pos:end="571:9">*</operator><name pos:start="571:10" pos:end="571:20">existing_sa</name> <operator pos:start="571:22" pos:end="571:22">=</operator> <operator pos:start="571:24" pos:end="571:24">*</operator><name pos:start="571:25" pos:end="571:30">new_sa</name></expr>;</expr_stmt>
        <expr_stmt pos:start="572:9" pos:end="572:25"><expr pos:start="572:9" pos:end="572:24"><operator pos:start="572:9" pos:end="572:9">*</operator><name pos:start="572:10" pos:end="572:15">new_sa</name> <operator pos:start="572:17" pos:end="572:17">=</operator> <name pos:start="572:19" pos:end="572:24">tmp_sa</name></expr>;</expr_stmt>
        <expr_stmt pos:start="573:9" pos:end="573:35"><expr pos:start="573:9" pos:end="573:34"><name pos:start="573:9" pos:end="573:25"><name pos:start="573:9" pos:end="573:19">existing_sa</name><operator pos:start="573:20" pos:end="573:21">-&gt;</operator><name pos:start="573:22" pos:end="573:25">next</name></name> <operator pos:start="573:27" pos:end="573:27">=</operator> <name pos:start="573:29" pos:end="573:34">new_sa</name></expr>;</expr_stmt>
        <return pos:start="574:9" pos:end="574:27">return <expr pos:start="574:16" pos:end="574:26"><name pos:start="574:16" pos:end="574:26">existing_sa</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" pos:start="577:5" pos:end="577:85">/* Add SA, keep existing (if any). Return pointer to newly inserted (first) SA */</comment>
    <function pos:start="578:5" pos:end="595:5"><type pos:start="578:5" pos:end="578:40"><specifier pos:start="578:5" pos:end="578:10">static</specifier> <name pos:start="578:12" pos:end="578:40">PDOT11DECRYPT_SEC_ASSOCIATION</name></type>
    <name pos:start="579:5" pos:end="579:21">Dot11DecryptAddSa</name><parameter_list pos:start="579:22" pos:end="582:41">(
        <parameter pos:start="580:9" pos:end="580:33"><decl pos:start="580:9" pos:end="580:33"><type pos:start="580:9" pos:end="580:33"><name pos:start="580:9" pos:end="580:29">PDOT11DECRYPT_CONTEXT</name></type> <name pos:start="580:31" pos:end="580:33">ctx</name></decl></parameter>,
        <parameter pos:start="581:9" pos:end="581:49"><decl pos:start="581:9" pos:end="581:49"><type pos:start="581:9" pos:end="581:49"><specifier pos:start="581:9" pos:end="581:13">const</specifier> <name pos:start="581:15" pos:end="581:45">DOT11DECRYPT_SEC_ASSOCIATION_ID</name> <modifier pos:start="581:47" pos:end="581:47">*</modifier></type><name pos:start="581:48" pos:end="581:49">id</name></decl></parameter>,
        <parameter pos:start="582:9" pos:end="582:40"><decl pos:start="582:9" pos:end="582:40"><type pos:start="582:9" pos:end="582:40"><name pos:start="582:9" pos:end="582:36">DOT11DECRYPT_SEC_ASSOCIATION</name> <modifier pos:start="582:38" pos:end="582:38">*</modifier></type><name pos:start="582:39" pos:end="582:40">sa</name></decl></parameter>)</parameter_list>
    <block pos:start="583:5" pos:end="595:5">{<block_content pos:start="584:9" pos:end="594:18">
        <decl_stmt pos:start="584:9" pos:end="584:79"><decl pos:start="584:9" pos:end="584:78"><type pos:start="584:9" pos:end="584:38"><name pos:start="584:9" pos:end="584:36">DOT11DECRYPT_SEC_ASSOCIATION</name> <modifier pos:start="584:38" pos:end="584:38">*</modifier></type><name pos:start="584:39" pos:end="584:49">existing_sa</name> <init pos:start="584:51" pos:end="584:78">= <expr pos:start="584:53" pos:end="584:78"><call pos:start="584:53" pos:end="584:78"><name pos:start="584:53" pos:end="584:69">Dot11DecryptGetSa</name><argument_list pos:start="584:70" pos:end="584:78">(<argument pos:start="584:71" pos:end="584:73"><expr pos:start="584:71" pos:end="584:73"><name pos:start="584:71" pos:end="584:73">ctx</name></expr></argument>, <argument pos:start="584:76" pos:end="584:77"><expr pos:start="584:76" pos:end="584:77"><name pos:start="584:76" pos:end="584:77">id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="585:9" pos:end="593:9"><if pos:start="585:9" pos:end="588:9">if <condition pos:start="585:12" pos:end="585:32">(<expr pos:start="585:13" pos:end="585:31"><name pos:start="585:13" pos:end="585:23">existing_sa</name> <operator pos:start="585:25" pos:end="585:26">!=</operator> <name pos:start="585:28" pos:end="585:31">NULL</name></expr>)</condition>
        <block pos:start="586:9" pos:end="588:9">{<block_content pos:start="587:13" pos:end="587:56">
            <expr_stmt pos:start="587:13" pos:end="587:56"><expr pos:start="587:13" pos:end="587:55"><name pos:start="587:13" pos:end="587:14">sa</name> <operator pos:start="587:16" pos:end="587:16">=</operator> <call pos:start="587:18" pos:end="587:55"><name pos:start="587:18" pos:end="587:38">Dot11DecryptPrependSa</name><argument_list pos:start="587:39" pos:end="587:55">(<argument pos:start="587:40" pos:end="587:50"><expr pos:start="587:40" pos:end="587:50"><name pos:start="587:40" pos:end="587:50">existing_sa</name></expr></argument>, <argument pos:start="587:53" pos:end="587:54"><expr pos:start="587:53" pos:end="587:54"><name pos:start="587:53" pos:end="587:54">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else pos:start="589:9" pos:end="593:9">else
        <block pos:start="590:9" pos:end="593:9">{<block_content pos:start="591:13" pos:end="592:55">
            <decl_stmt pos:start="591:13" pos:end="591:79"><decl pos:start="591:13" pos:end="591:78"><type pos:start="591:13" pos:end="591:18"><name pos:start="591:13" pos:end="591:16">void</name> <modifier pos:start="591:18" pos:end="591:18">*</modifier></type><name pos:start="591:19" pos:end="591:21">key</name> <init pos:start="591:23" pos:end="591:78">= <expr pos:start="591:25" pos:end="591:78"><call pos:start="591:25" pos:end="591:78"><name pos:start="591:25" pos:end="591:33">g_memdup2</name><argument_list pos:start="591:34" pos:end="591:78">(<argument pos:start="591:35" pos:end="591:36"><expr pos:start="591:35" pos:end="591:36"><name pos:start="591:35" pos:end="591:36">id</name></expr></argument>, <argument pos:start="591:39" pos:end="591:77"><expr pos:start="591:39" pos:end="591:77"><sizeof pos:start="591:39" pos:end="591:77">sizeof<argument_list pos:start="591:45" pos:end="591:77">(<argument pos:start="591:46" pos:end="591:76"><expr pos:start="591:46" pos:end="591:76"><name pos:start="591:46" pos:end="591:76">DOT11DECRYPT_SEC_ASSOCIATION_ID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="592:13" pos:end="592:55"><expr pos:start="592:13" pos:end="592:54"><call pos:start="592:13" pos:end="592:54"><name pos:start="592:13" pos:end="592:31">g_hash_table_insert</name><argument_list pos:start="592:32" pos:end="592:54">(<argument pos:start="592:33" pos:end="592:44"><expr pos:start="592:33" pos:end="592:44"><name pos:start="592:33" pos:end="592:44"><name pos:start="592:33" pos:end="592:35">ctx</name><operator pos:start="592:36" pos:end="592:37">-&gt;</operator><name pos:start="592:38" pos:end="592:44">sa_hash</name></name></expr></argument>, <argument pos:start="592:47" pos:end="592:49"><expr pos:start="592:47" pos:end="592:49"><name pos:start="592:47" pos:end="592:49">key</name></expr></argument>, <argument pos:start="592:52" pos:end="592:53"><expr pos:start="592:52" pos:end="592:53"><name pos:start="592:52" pos:end="592:53">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return pos:start="594:9" pos:end="594:18">return <expr pos:start="594:16" pos:end="594:17"><name pos:start="594:16" pos:end="594:17">sa</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="597:5" pos:end="606:5"><type pos:start="597:5" pos:end="597:7"><name pos:start="597:5" pos:end="597:7">int</name></type>
    <name pos:start="598:5" pos:end="598:22">Dot11DecryptGetKCK</name><parameter_list pos:start="598:23" pos:end="598:76">(<parameter pos:start="598:24" pos:end="598:55"><decl pos:start="598:24" pos:end="598:55"><type pos:start="598:24" pos:end="598:55"><specifier pos:start="598:24" pos:end="598:28">const</specifier> <name pos:start="598:30" pos:end="598:51">PDOT11DECRYPT_KEY_ITEM</name></type> <name pos:start="598:53" pos:end="598:55">key</name></decl></parameter>, <parameter pos:start="598:58" pos:end="598:75"><decl pos:start="598:58" pos:end="598:75"><type pos:start="598:58" pos:end="598:75"><specifier pos:start="598:58" pos:end="598:62">const</specifier> <name pos:start="598:64" pos:end="598:69">guint8</name> <modifier pos:start="598:71" pos:end="598:71">*</modifier><modifier pos:start="598:72" pos:end="598:72">*</modifier></type><name pos:start="598:73" pos:end="598:75">kck</name></decl></parameter>)</parameter_list>
    <block pos:start="599:5" pos:end="606:5">{<block_content pos:start="600:9" pos:end="605:63">
        <if_stmt pos:start="600:9" pos:end="603:9"><if pos:start="600:9" pos:end="603:9">if <condition pos:start="600:12" pos:end="600:25">(<expr pos:start="600:13" pos:end="600:24"><operator pos:start="600:13" pos:end="600:13">!</operator><name pos:start="600:14" pos:end="600:16">key</name> <operator pos:start="600:18" pos:end="600:19">||</operator> <operator pos:start="600:21" pos:end="600:21">!</operator><name pos:start="600:22" pos:end="600:24">kck</name></expr>)</condition>
        <block pos:start="601:9" pos:end="603:9">{<block_content pos:start="602:13" pos:end="602:21">
            <return pos:start="602:13" pos:end="602:21">return <expr pos:start="602:20" pos:end="602:20"><literal type="number" pos:start="602:20" pos:end="602:20">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="604:9" pos:end="604:44"><expr pos:start="604:9" pos:end="604:43"><operator pos:start="604:9" pos:end="604:9">*</operator><name pos:start="604:10" pos:end="604:12">kck</name> <operator pos:start="604:14" pos:end="604:14">=</operator> <operator pos:start="604:16" pos:end="604:16">(</operator><name pos:start="604:17" pos:end="604:36"><name pos:start="604:17" pos:end="604:19">key</name><operator pos:start="604:20" pos:end="604:21">-&gt;</operator><name pos:start="604:22" pos:end="604:28">KeyData</name><operator pos:start="604:29" pos:end="604:29">.</operator><name pos:start="604:30" pos:end="604:32">Wpa</name><operator pos:start="604:33" pos:end="604:33">.</operator><name pos:start="604:34" pos:end="604:36">Ptk</name></name> <operator pos:start="604:38" pos:end="604:38">+</operator> <operator pos:start="604:40" pos:end="604:40">(</operator><literal type="number" pos:start="604:41" pos:end="604:41">0</literal><operator pos:start="604:42" pos:end="604:42">)</operator><operator pos:start="604:43" pos:end="604:43">)</operator></expr>;</expr_stmt>
        <return pos:start="605:9" pos:end="605:63">return <expr pos:start="605:16" pos:end="605:62"><call pos:start="605:16" pos:end="605:58"><name pos:start="605:16" pos:end="605:36">Dot11DecryptGetKckLen</name><argument_list pos:start="605:37" pos:end="605:58">(<argument pos:start="605:38" pos:end="605:57"><expr pos:start="605:38" pos:end="605:57"><name pos:start="605:38" pos:end="605:57"><name pos:start="605:38" pos:end="605:40">key</name><operator pos:start="605:41" pos:end="605:42">-&gt;</operator><name pos:start="605:43" pos:end="605:49">KeyData</name><operator pos:start="605:50" pos:end="605:50">.</operator><name pos:start="605:51" pos:end="605:53">Wpa</name><operator pos:start="605:54" pos:end="605:54">.</operator><name pos:start="605:55" pos:end="605:57">Akm</name></name></expr></argument>)</argument_list></call> <operator pos:start="605:60" pos:end="605:60">/</operator> <literal type="number" pos:start="605:62" pos:end="605:62">8</literal></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="608:5" pos:end="617:5"><type pos:start="608:5" pos:end="608:7"><name pos:start="608:5" pos:end="608:7">int</name></type>
    <name pos:start="609:5" pos:end="609:22">Dot11DecryptGetKEK</name><parameter_list pos:start="609:23" pos:end="609:76">(<parameter pos:start="609:24" pos:end="609:55"><decl pos:start="609:24" pos:end="609:55"><type pos:start="609:24" pos:end="609:55"><specifier pos:start="609:24" pos:end="609:28">const</specifier> <name pos:start="609:30" pos:end="609:51">PDOT11DECRYPT_KEY_ITEM</name></type> <name pos:start="609:53" pos:end="609:55">key</name></decl></parameter>, <parameter pos:start="609:58" pos:end="609:75"><decl pos:start="609:58" pos:end="609:75"><type pos:start="609:58" pos:end="609:75"><specifier pos:start="609:58" pos:end="609:62">const</specifier> <name pos:start="609:64" pos:end="609:69">guint8</name> <modifier pos:start="609:71" pos:end="609:71">*</modifier><modifier pos:start="609:72" pos:end="609:72">*</modifier></type><name pos:start="609:73" pos:end="609:75">kek</name></decl></parameter>)</parameter_list>
    <block pos:start="610:5" pos:end="617:5">{<block_content pos:start="611:9" pos:end="616:63">
        <if_stmt pos:start="611:9" pos:end="614:9"><if pos:start="611:9" pos:end="614:9">if <condition pos:start="611:12" pos:end="611:25">(<expr pos:start="611:13" pos:end="611:24"><operator pos:start="611:13" pos:end="611:13">!</operator><name pos:start="611:14" pos:end="611:16">key</name> <operator pos:start="611:18" pos:end="611:19">||</operator> <operator pos:start="611:21" pos:end="611:21">!</operator><name pos:start="611:22" pos:end="611:24">kek</name></expr>)</condition>
        <block pos:start="612:9" pos:end="614:9">{<block_content pos:start="613:13" pos:end="613:21">
            <return pos:start="613:13" pos:end="613:21">return <expr pos:start="613:20" pos:end="613:20"><literal type="number" pos:start="613:20" pos:end="613:20">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="615:9" pos:end="615:98"><expr pos:start="615:9" pos:end="615:97"><operator pos:start="615:9" pos:end="615:9">*</operator><name pos:start="615:10" pos:end="615:12">kek</name> <operator pos:start="615:14" pos:end="615:14">=</operator> <operator pos:start="615:16" pos:end="615:16">(</operator><name pos:start="615:17" pos:end="615:36"><name pos:start="615:17" pos:end="615:19">key</name><operator pos:start="615:20" pos:end="615:21">-&gt;</operator><name pos:start="615:22" pos:end="615:28">KeyData</name><operator pos:start="615:29" pos:end="615:29">.</operator><name pos:start="615:30" pos:end="615:32">Wpa</name><operator pos:start="615:33" pos:end="615:33">.</operator><name pos:start="615:34" pos:end="615:36">Ptk</name></name> <operator pos:start="615:38" pos:end="615:38">+</operator> <operator pos:start="615:40" pos:end="615:40">(</operator><operator pos:start="615:41" pos:end="615:41">(</operator><operator pos:start="615:42" pos:end="615:42">(</operator><literal type="number" pos:start="615:43" pos:end="615:43">0</literal><operator pos:start="615:44" pos:end="615:44">)</operator> <operator pos:start="615:46" pos:end="615:46">+</operator> <call pos:start="615:48" pos:end="615:90"><name pos:start="615:48" pos:end="615:68">Dot11DecryptGetKckLen</name><argument_list pos:start="615:69" pos:end="615:90">(<argument pos:start="615:70" pos:end="615:89"><expr pos:start="615:70" pos:end="615:89"><name pos:start="615:70" pos:end="615:89"><name pos:start="615:70" pos:end="615:72">key</name><operator pos:start="615:73" pos:end="615:74">-&gt;</operator><name pos:start="615:75" pos:end="615:81">KeyData</name><operator pos:start="615:82" pos:end="615:82">.</operator><name pos:start="615:83" pos:end="615:85">Wpa</name><operator pos:start="615:86" pos:end="615:86">.</operator><name pos:start="615:87" pos:end="615:89">Akm</name></name></expr></argument>)</argument_list></call> <operator pos:start="615:92" pos:end="615:92">/</operator> <literal type="number" pos:start="615:94" pos:end="615:94">8</literal><operator pos:start="615:95" pos:end="615:95">)</operator><operator pos:start="615:96" pos:end="615:96">)</operator><operator pos:start="615:97" pos:end="615:97">)</operator></expr>;</expr_stmt>
        <return pos:start="616:9" pos:end="616:63">return <expr pos:start="616:16" pos:end="616:62"><call pos:start="616:16" pos:end="616:58"><name pos:start="616:16" pos:end="616:36">Dot11DecryptGetKekLen</name><argument_list pos:start="616:37" pos:end="616:58">(<argument pos:start="616:38" pos:end="616:57"><expr pos:start="616:38" pos:end="616:57"><name pos:start="616:38" pos:end="616:57"><name pos:start="616:38" pos:end="616:40">key</name><operator pos:start="616:41" pos:end="616:42">-&gt;</operator><name pos:start="616:43" pos:end="616:49">KeyData</name><operator pos:start="616:50" pos:end="616:50">.</operator><name pos:start="616:51" pos:end="616:53">Wpa</name><operator pos:start="616:54" pos:end="616:54">.</operator><name pos:start="616:55" pos:end="616:57">Akm</name></name></expr></argument>)</argument_list></call> <operator pos:start="616:60" pos:end="616:60">/</operator> <literal type="number" pos:start="616:62" pos:end="616:62">8</literal></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="619:5" pos:end="638:5"><type pos:start="619:5" pos:end="619:7"><name pos:start="619:5" pos:end="619:7">int</name></type>
    <name pos:start="620:5" pos:end="620:21">Dot11DecryptGetTK</name><parameter_list pos:start="620:22" pos:end="620:74">(<parameter pos:start="620:23" pos:end="620:54"><decl pos:start="620:23" pos:end="620:54"><type pos:start="620:23" pos:end="620:54"><specifier pos:start="620:23" pos:end="620:27">const</specifier> <name pos:start="620:29" pos:end="620:50">PDOT11DECRYPT_KEY_ITEM</name></type> <name pos:start="620:52" pos:end="620:54">key</name></decl></parameter>, <parameter pos:start="620:57" pos:end="620:73"><decl pos:start="620:57" pos:end="620:73"><type pos:start="620:57" pos:end="620:73"><specifier pos:start="620:57" pos:end="620:61">const</specifier> <name pos:start="620:63" pos:end="620:68">guint8</name> <modifier pos:start="620:70" pos:end="620:70">*</modifier><modifier pos:start="620:71" pos:end="620:71">*</modifier></type><name pos:start="620:72" pos:end="620:73">tk</name></decl></parameter>)</parameter_list>
    <block pos:start="621:5" pos:end="638:5">{<block_content pos:start="622:9" pos:end="637:19">
        <decl_stmt pos:start="622:9" pos:end="622:16"><decl pos:start="622:9" pos:end="622:15"><type pos:start="622:9" pos:end="622:11"><name pos:start="622:9" pos:end="622:11">int</name></type> <name pos:start="622:13" pos:end="622:15">len</name></decl>;</decl_stmt>
        <if_stmt pos:start="623:9" pos:end="626:9"><if pos:start="623:9" pos:end="626:9">if <condition pos:start="623:12" pos:end="623:24">(<expr pos:start="623:13" pos:end="623:23"><operator pos:start="623:13" pos:end="623:13">!</operator><name pos:start="623:14" pos:end="623:16">key</name> <operator pos:start="623:18" pos:end="623:19">||</operator> <operator pos:start="623:21" pos:end="623:21">!</operator><name pos:start="623:22" pos:end="623:23">tk</name></expr>)</condition>
        <block pos:start="624:9" pos:end="626:9">{<block_content pos:start="625:13" pos:end="625:21">
            <return pos:start="625:13" pos:end="625:21">return <expr pos:start="625:20" pos:end="625:20"><literal type="number" pos:start="625:20" pos:end="625:20">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="627:9" pos:end="636:9"><if pos:start="627:9" pos:end="631:9">if <condition pos:start="627:12" pos:end="627:55">(<expr pos:start="627:13" pos:end="627:54"><name pos:start="627:13" pos:end="627:24"><name pos:start="627:13" pos:end="627:15">key</name><operator pos:start="627:16" pos:end="627:17">-&gt;</operator><name pos:start="627:18" pos:end="627:24">KeyType</name></name> <operator pos:start="627:26" pos:end="627:27">==</operator> <name pos:start="627:29" pos:end="627:54">DOT11DECRYPT_KEY_TYPE_TKIP</name></expr>)</condition>
        <block pos:start="628:9" pos:end="631:9">{<block_content pos:start="629:13" pos:end="630:21">
            <expr_stmt pos:start="629:13" pos:end="629:46"><expr pos:start="629:13" pos:end="629:45"><operator pos:start="629:13" pos:end="629:13">*</operator><name pos:start="629:14" pos:end="629:15">tk</name> <operator pos:start="629:17" pos:end="629:17">=</operator> <operator pos:start="629:19" pos:end="629:19">(</operator><name pos:start="629:20" pos:end="629:39"><name pos:start="629:20" pos:end="629:22">key</name><operator pos:start="629:23" pos:end="629:24">-&gt;</operator><name pos:start="629:25" pos:end="629:31">KeyData</name><operator pos:start="629:32" pos:end="629:32">.</operator><name pos:start="629:33" pos:end="629:35">Wpa</name><operator pos:start="629:36" pos:end="629:36">.</operator><name pos:start="629:37" pos:end="629:39">Ptk</name></name> <operator pos:start="629:41" pos:end="629:41">+</operator> <literal type="number" pos:start="629:43" pos:end="629:44">32</literal><operator pos:start="629:45" pos:end="629:45">)</operator></expr>;</expr_stmt>
            <expr_stmt pos:start="630:13" pos:end="630:21"><expr pos:start="630:13" pos:end="630:20"><name pos:start="630:13" pos:end="630:15">len</name> <operator pos:start="630:17" pos:end="630:17">=</operator> <literal type="number" pos:start="630:19" pos:end="630:20">16</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else pos:start="632:9" pos:end="636:9">else
        <block pos:start="633:9" pos:end="636:9">{<block_content pos:start="634:13" pos:end="635:68">
            <expr_stmt pos:start="634:13" pos:end="634:155"><expr pos:start="634:13" pos:end="634:154"><operator pos:start="634:13" pos:end="634:13">*</operator><name pos:start="634:14" pos:end="634:15">tk</name> <operator pos:start="634:17" pos:end="634:17">=</operator> <operator pos:start="634:19" pos:end="634:19">(</operator><name pos:start="634:20" pos:end="634:39"><name pos:start="634:20" pos:end="634:22">key</name><operator pos:start="634:23" pos:end="634:24">-&gt;</operator><name pos:start="634:25" pos:end="634:31">KeyData</name><operator pos:start="634:32" pos:end="634:32">.</operator><name pos:start="634:33" pos:end="634:35">Wpa</name><operator pos:start="634:36" pos:end="634:36">.</operator><name pos:start="634:37" pos:end="634:39">Ptk</name></name> <operator pos:start="634:41" pos:end="634:41">+</operator> <operator pos:start="634:43" pos:end="634:43">(</operator><operator pos:start="634:44" pos:end="634:44">(</operator><operator pos:start="634:45" pos:end="634:45">(</operator><operator pos:start="634:46" pos:end="634:46">(</operator><operator pos:start="634:47" pos:end="634:47">(</operator><literal type="number" pos:start="634:48" pos:end="634:48">0</literal><operator pos:start="634:49" pos:end="634:49">)</operator> <operator pos:start="634:51" pos:end="634:51">+</operator> <call pos:start="634:53" pos:end="634:95"><name pos:start="634:53" pos:end="634:73">Dot11DecryptGetKckLen</name><argument_list pos:start="634:74" pos:end="634:95">(<argument pos:start="634:75" pos:end="634:94"><expr pos:start="634:75" pos:end="634:94"><name pos:start="634:75" pos:end="634:94"><name pos:start="634:75" pos:end="634:77">key</name><operator pos:start="634:78" pos:end="634:79">-&gt;</operator><name pos:start="634:80" pos:end="634:86">KeyData</name><operator pos:start="634:87" pos:end="634:87">.</operator><name pos:start="634:88" pos:end="634:90">Wpa</name><operator pos:start="634:91" pos:end="634:91">.</operator><name pos:start="634:92" pos:end="634:94">Akm</name></name></expr></argument>)</argument_list></call> <operator pos:start="634:97" pos:end="634:97">/</operator> <literal type="number" pos:start="634:99" pos:end="634:99">8</literal><operator pos:start="634:100" pos:end="634:100">)</operator><operator pos:start="634:101" pos:end="634:101">)</operator> <operator pos:start="634:103" pos:end="634:103">+</operator> <call pos:start="634:105" pos:end="634:147"><name pos:start="634:105" pos:end="634:125">Dot11DecryptGetKekLen</name><argument_list pos:start="634:126" pos:end="634:147">(<argument pos:start="634:127" pos:end="634:146"><expr pos:start="634:127" pos:end="634:146"><name pos:start="634:127" pos:end="634:146"><name pos:start="634:127" pos:end="634:129">key</name><operator pos:start="634:130" pos:end="634:131">-&gt;</operator><name pos:start="634:132" pos:end="634:138">KeyData</name><operator pos:start="634:139" pos:end="634:139">.</operator><name pos:start="634:140" pos:end="634:142">Wpa</name><operator pos:start="634:143" pos:end="634:143">.</operator><name pos:start="634:144" pos:end="634:146">Akm</name></name></expr></argument>)</argument_list></call> <operator pos:start="634:149" pos:end="634:149">/</operator> <literal type="number" pos:start="634:151" pos:end="634:151">8</literal><operator pos:start="634:152" pos:end="634:152">)</operator><operator pos:start="634:153" pos:end="634:153">)</operator><operator pos:start="634:154" pos:end="634:154">)</operator></expr>;</expr_stmt>
            <expr_stmt pos:start="635:13" pos:end="635:68"><expr pos:start="635:13" pos:end="635:67"><name pos:start="635:13" pos:end="635:15">len</name> <operator pos:start="635:17" pos:end="635:17">=</operator> <call pos:start="635:19" pos:end="635:63"><name pos:start="635:19" pos:end="635:38">Dot11DecryptGetTkLen</name><argument_list pos:start="635:39" pos:end="635:63">(<argument pos:start="635:40" pos:end="635:62"><expr pos:start="635:40" pos:end="635:62"><name pos:start="635:40" pos:end="635:62"><name pos:start="635:40" pos:end="635:42">key</name><operator pos:start="635:43" pos:end="635:44">-&gt;</operator><name pos:start="635:45" pos:end="635:51">KeyData</name><operator pos:start="635:52" pos:end="635:52">.</operator><name pos:start="635:53" pos:end="635:55">Wpa</name><operator pos:start="635:56" pos:end="635:56">.</operator><name pos:start="635:57" pos:end="635:62">Cipher</name></name></expr></argument>)</argument_list></call> <operator pos:start="635:65" pos:end="635:65">/</operator> <literal type="number" pos:start="635:67" pos:end="635:67">8</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return pos:start="637:9" pos:end="637:19">return <expr pos:start="637:16" pos:end="637:18"><name pos:start="637:16" pos:end="637:18">len</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="640:5" pos:end="660:5"><type pos:start="640:5" pos:end="640:7"><name pos:start="640:5" pos:end="640:7">int</name></type>
    <name pos:start="641:5" pos:end="641:22">Dot11DecryptGetGTK</name><parameter_list pos:start="641:23" pos:end="641:76">(<parameter pos:start="641:24" pos:end="641:55"><decl pos:start="641:24" pos:end="641:55"><type pos:start="641:24" pos:end="641:55"><specifier pos:start="641:24" pos:end="641:28">const</specifier> <name pos:start="641:30" pos:end="641:51">PDOT11DECRYPT_KEY_ITEM</name></type> <name pos:start="641:53" pos:end="641:55">key</name></decl></parameter>, <parameter pos:start="641:58" pos:end="641:75"><decl pos:start="641:58" pos:end="641:75"><type pos:start="641:58" pos:end="641:75"><specifier pos:start="641:58" pos:end="641:62">const</specifier> <name pos:start="641:64" pos:end="641:69">guint8</name> <modifier pos:start="641:71" pos:end="641:71">*</modifier><modifier pos:start="641:72" pos:end="641:72">*</modifier></type><name pos:start="641:73" pos:end="641:75">gtk</name></decl></parameter>)</parameter_list>
    <block pos:start="642:5" pos:end="660:5">{<block_content pos:start="643:9" pos:end="659:19">
        <decl_stmt pos:start="643:9" pos:end="643:16"><decl pos:start="643:9" pos:end="643:15"><type pos:start="643:9" pos:end="643:11"><name pos:start="643:9" pos:end="643:11">int</name></type> <name pos:start="643:13" pos:end="643:15">len</name></decl>;</decl_stmt>
        <if_stmt pos:start="644:9" pos:end="647:9"><if pos:start="644:9" pos:end="647:9">if <condition pos:start="644:12" pos:end="644:25">(<expr pos:start="644:13" pos:end="644:24"><operator pos:start="644:13" pos:end="644:13">!</operator><name pos:start="644:14" pos:end="644:16">key</name> <operator pos:start="644:18" pos:end="644:19">||</operator> <operator pos:start="644:21" pos:end="644:21">!</operator><name pos:start="644:22" pos:end="644:24">gtk</name></expr>)</condition>
        <block pos:start="645:9" pos:end="647:9">{<block_content pos:start="646:13" pos:end="646:21">
            <return pos:start="646:13" pos:end="646:21">return <expr pos:start="646:20" pos:end="646:20"><literal type="number" pos:start="646:20" pos:end="646:20">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="649:9" pos:end="649:92">/* GTK is stored in PTK at offset 32. See comment in Dot11DecryptCopyBroadcastKey */</comment>
        <expr_stmt pos:start="650:9" pos:end="650:41"><expr pos:start="650:9" pos:end="650:40"><operator pos:start="650:9" pos:end="650:9">*</operator><name pos:start="650:10" pos:end="650:12">gtk</name> <operator pos:start="650:14" pos:end="650:14">=</operator> <name pos:start="650:16" pos:end="650:35"><name pos:start="650:16" pos:end="650:18">key</name><operator pos:start="650:19" pos:end="650:20">-&gt;</operator><name pos:start="650:21" pos:end="650:27">KeyData</name><operator pos:start="650:28" pos:end="650:28">.</operator><name pos:start="650:29" pos:end="650:31">Wpa</name><operator pos:start="650:32" pos:end="650:32">.</operator><name pos:start="650:33" pos:end="650:35">Ptk</name></name> <operator pos:start="650:37" pos:end="650:37">+</operator> <literal type="number" pos:start="650:39" pos:end="650:40">32</literal></expr>;</expr_stmt>
        <if_stmt pos:start="651:9" pos:end="658:9"><if pos:start="651:9" pos:end="654:9">if <condition pos:start="651:12" pos:end="651:55">(<expr pos:start="651:13" pos:end="651:54"><name pos:start="651:13" pos:end="651:24"><name pos:start="651:13" pos:end="651:15">key</name><operator pos:start="651:16" pos:end="651:17">-&gt;</operator><name pos:start="651:18" pos:end="651:24">KeyType</name></name> <operator pos:start="651:26" pos:end="651:27">==</operator> <name pos:start="651:29" pos:end="651:54">DOT11DECRYPT_KEY_TYPE_TKIP</name></expr>)</condition>
        <block pos:start="652:9" pos:end="654:9">{<block_content pos:start="653:13" pos:end="653:21">
            <expr_stmt pos:start="653:13" pos:end="653:21"><expr pos:start="653:13" pos:end="653:20"><name pos:start="653:13" pos:end="653:15">len</name> <operator pos:start="653:17" pos:end="653:17">=</operator> <literal type="number" pos:start="653:19" pos:end="653:20">16</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else pos:start="655:9" pos:end="658:9">else
        <block pos:start="656:9" pos:end="658:9">{<block_content pos:start="657:13" pos:end="657:68">
            <expr_stmt pos:start="657:13" pos:end="657:68"><expr pos:start="657:13" pos:end="657:67"><name pos:start="657:13" pos:end="657:15">len</name> <operator pos:start="657:17" pos:end="657:17">=</operator> <call pos:start="657:19" pos:end="657:63"><name pos:start="657:19" pos:end="657:38">Dot11DecryptGetTkLen</name><argument_list pos:start="657:39" pos:end="657:63">(<argument pos:start="657:40" pos:end="657:62"><expr pos:start="657:40" pos:end="657:62"><name pos:start="657:40" pos:end="657:62"><name pos:start="657:40" pos:end="657:42">key</name><operator pos:start="657:43" pos:end="657:44">-&gt;</operator><name pos:start="657:45" pos:end="657:51">KeyData</name><operator pos:start="657:52" pos:end="657:52">.</operator><name pos:start="657:53" pos:end="657:55">Wpa</name><operator pos:start="657:56" pos:end="657:56">.</operator><name pos:start="657:57" pos:end="657:62">Cipher</name></name></expr></argument>)</argument_list></call> <operator pos:start="657:65" pos:end="657:65">/</operator> <literal type="number" pos:start="657:67" pos:end="657:67">8</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return pos:start="659:9" pos:end="659:19">return <expr pos:start="659:16" pos:end="659:18"><name pos:start="659:16" pos:end="659:18">len</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="662:5" pos:end="797:5"><type pos:start="662:5" pos:end="662:7"><name pos:start="662:5" pos:end="662:7">INT</name></type> <name pos:start="662:9" pos:end="662:35">Dot11DecryptScanTdlsForKeys</name><parameter_list pos:start="662:36" pos:end="665:28">(
        <parameter pos:start="663:9" pos:end="663:33"><decl pos:start="663:9" pos:end="663:33"><type pos:start="663:9" pos:end="663:33"><name pos:start="663:9" pos:end="663:29">PDOT11DECRYPT_CONTEXT</name></type> <name pos:start="663:31" pos:end="663:33">ctx</name></decl></parameter>,
        <parameter pos:start="664:9" pos:end="664:26"><decl pos:start="664:9" pos:end="664:26"><type pos:start="664:9" pos:end="664:26"><specifier pos:start="664:9" pos:end="664:13">const</specifier> <name pos:start="664:15" pos:end="664:20">guint8</name> <modifier pos:start="664:22" pos:end="664:22">*</modifier></type><name pos:start="664:23" pos:end="664:26">data</name></decl></parameter>,
        <parameter pos:start="665:9" pos:end="665:27"><decl pos:start="665:9" pos:end="665:27"><type pos:start="665:9" pos:end="665:27"><specifier pos:start="665:9" pos:end="665:13">const</specifier> <name pos:start="665:15" pos:end="665:19">guint</name></type> <name pos:start="665:21" pos:end="665:27">tot_len</name></decl></parameter>)</parameter_list>
    <block pos:start="666:5" pos:end="797:5">{<block_content pos:start="667:9" pos:end="796:51">
        <decl_stmt pos:start="667:9" pos:end="667:25"><decl pos:start="667:9" pos:end="667:24"><type pos:start="667:9" pos:end="667:13"><name pos:start="667:9" pos:end="667:13">guint</name></type> <name pos:start="667:15" pos:end="667:20">offset</name> <init pos:start="667:22" pos:end="667:24">= <expr pos:start="667:24" pos:end="667:24"><literal type="number" pos:start="667:24" pos:end="667:24">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="668:9" pos:end="668:37"><decl pos:start="668:9" pos:end="668:36"><type pos:start="668:9" pos:end="668:13"><name pos:start="668:9" pos:end="668:13">guint</name></type> <name pos:start="668:15" pos:end="668:26">tot_len_left</name> <init pos:start="668:28" pos:end="668:36">= <expr pos:start="668:30" pos:end="668:36"><name pos:start="668:30" pos:end="668:36">tot_len</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="669:9" pos:end="669:43"><decl pos:start="669:9" pos:end="669:42"><type pos:start="669:9" pos:end="669:39"><name pos:start="669:9" pos:end="669:39">DOT11DECRYPT_SEC_ASSOCIATION_ID</name></type> <name pos:start="669:41" pos:end="669:42">id</name></decl>;</decl_stmt>
        <decl_stmt pos:start="670:9" pos:end="670:41"><decl pos:start="670:9" pos:end="670:40"><type pos:start="670:9" pos:end="670:37"><name pos:start="670:9" pos:end="670:37">PDOT11DECRYPT_SEC_ASSOCIATION</name></type> <name pos:start="670:39" pos:end="670:40">sa</name></decl>;</decl_stmt>
        <decl_stmt pos:start="671:9" pos:end="671:44"><decl pos:start="671:9" pos:end="671:31"><type pos:start="671:9" pos:end="671:22"><specifier pos:start="671:9" pos:end="671:13">const</specifier> <name pos:start="671:15" pos:end="671:20">guint8</name> <modifier pos:start="671:22" pos:end="671:22">*</modifier></type><name pos:start="671:23" pos:end="671:31">initiator</name></decl>, <decl pos:start="671:34" pos:end="671:43"><type ref="prev" pos:start="671:9" pos:end="671:22"><modifier pos:start="671:34" pos:end="671:34">*</modifier></type><name pos:start="671:35" pos:end="671:43">responder</name></decl>;</decl_stmt>
        <decl_stmt pos:start="672:9" pos:end="672:22"><decl pos:start="672:9" pos:end="672:21"><type pos:start="672:9" pos:end="672:14"><name pos:start="672:9" pos:end="672:14">guint8</name></type> <name pos:start="672:16" pos:end="672:21">action</name></decl>;</decl_stmt>
        <decl_stmt pos:start="673:9" pos:end="673:91"><decl pos:start="673:9" pos:end="673:20"><type pos:start="673:9" pos:end="673:13"><name pos:start="673:9" pos:end="673:13">guint</name></type> <name pos:start="673:15" pos:end="673:20">status</name></decl>, <decl pos:start="673:23" pos:end="673:37"><type ref="prev" pos:start="673:9" pos:end="673:13"/><name pos:start="673:23" pos:end="673:33">offset_rsne</name> <init pos:start="673:35" pos:end="673:37">= <expr pos:start="673:37" pos:end="673:37"><literal type="number" pos:start="673:37" pos:end="673:37">0</literal></expr></init></decl>, <decl pos:start="673:40" pos:end="673:53"><type ref="prev" pos:start="673:9" pos:end="673:13"/><name pos:start="673:40" pos:end="673:49">offset_fte</name> <init pos:start="673:51" pos:end="673:53">= <expr pos:start="673:53" pos:end="673:53"><literal type="number" pos:start="673:53" pos:end="673:53">0</literal></expr></init></decl>, <decl pos:start="673:56" pos:end="673:70"><type ref="prev" pos:start="673:9" pos:end="673:13"/><name pos:start="673:56" pos:end="673:66">offset_link</name> <init pos:start="673:68" pos:end="673:70">= <expr pos:start="673:70" pos:end="673:70"><literal type="number" pos:start="673:70" pos:end="673:70">0</literal></expr></init></decl>, <decl pos:start="673:73" pos:end="673:90"><type ref="prev" pos:start="673:9" pos:end="673:13"/><name pos:start="673:73" pos:end="673:86">offset_timeout</name> <init pos:start="673:88" pos:end="673:90">= <expr pos:start="673:90" pos:end="673:90"><literal type="number" pos:start="673:90" pos:end="673:90">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="674:9" pos:end="674:54"><expr pos:start="674:9" pos:end="674:53"><call pos:start="674:9" pos:end="674:53"><name pos:start="674:9" pos:end="674:16">ws_debug</name><argument_list pos:start="674:17" pos:end="674:53">(<argument pos:start="674:18" pos:end="674:52"><expr pos:start="674:18" pos:end="674:52"><literal type="string" pos:start="674:18" pos:end="674:52">"Authentication: TDLS Action Frame"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="676:9" pos:end="676:76">/* TDLS payload contains a TDLS Action field (802.11-2016 9.6.13) */</comment>

        <comment type="block" pos:start="678:9" pos:end="678:63">/* check if the packet is a TDLS response or confirm */</comment>
        <if_stmt pos:start="679:9" pos:end="683:9"><if pos:start="679:9" pos:end="683:9">if <condition pos:start="679:12" pos:end="679:29">(<expr pos:start="679:13" pos:end="679:28"><name pos:start="679:13" pos:end="679:24">tot_len_left</name> <operator pos:start="679:26" pos:end="679:26">&lt;</operator> <literal type="number" pos:start="679:28" pos:end="679:28">1</literal></expr>)</condition>
        <block pos:start="680:9" pos:end="683:9">{<block_content pos:start="681:13" pos:end="682:55">
            <expr_stmt pos:start="681:13" pos:end="681:38"><expr pos:start="681:13" pos:end="681:37"><call pos:start="681:13" pos:end="681:37"><name pos:start="681:13" pos:end="681:20">ws_debug</name><argument_list pos:start="681:21" pos:end="681:37">(<argument pos:start="681:22" pos:end="681:36"><expr pos:start="681:22" pos:end="681:36"><literal type="string" pos:start="681:22" pos:end="681:36">"Not EAPOL-Key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="682:13" pos:end="682:55">return <expr pos:start="682:20" pos:end="682:54"><name pos:start="682:20" pos:end="682:54">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="684:9" pos:end="684:30"><expr pos:start="684:9" pos:end="684:29"><name pos:start="684:9" pos:end="684:14">action</name> <operator pos:start="684:16" pos:end="684:16">=</operator> <name pos:start="684:18" pos:end="684:29"><name pos:start="684:18" pos:end="684:21">data</name><index pos:start="684:22" pos:end="684:29">[<expr pos:start="684:23" pos:end="684:28"><name pos:start="684:23" pos:end="684:28">offset</name></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt pos:start="685:9" pos:end="689:9"><if pos:start="685:9" pos:end="689:9">if <condition pos:start="685:12" pos:end="685:39">(<expr pos:start="685:13" pos:end="685:38"><name pos:start="685:13" pos:end="685:18">action</name> <operator pos:start="685:20" pos:end="685:21">!=</operator> <literal type="number" pos:start="685:23" pos:end="685:23">1</literal> <operator pos:start="685:25" pos:end="685:26">&amp;&amp;</operator> <name pos:start="685:28" pos:end="685:33">action</name> <operator pos:start="685:35" pos:end="685:36">!=</operator> <literal type="number" pos:start="685:38" pos:end="685:38">2</literal></expr>)</condition>
        <block pos:start="686:9" pos:end="689:9">{<block_content pos:start="687:13" pos:end="688:55">
            <expr_stmt pos:start="687:13" pos:end="687:49"><expr pos:start="687:13" pos:end="687:48"><call pos:start="687:13" pos:end="687:48"><name pos:start="687:13" pos:end="687:20">ws_debug</name><argument_list pos:start="687:21" pos:end="687:48">(<argument pos:start="687:22" pos:end="687:47"><expr pos:start="687:22" pos:end="687:47"><literal type="string" pos:start="687:22" pos:end="687:47">"Not Response nor confirm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="688:13" pos:end="688:55">return <expr pos:start="688:20" pos:end="688:54"><name pos:start="688:20" pos:end="688:54">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="690:9" pos:end="690:17"><expr pos:start="690:9" pos:end="690:16"><name pos:start="690:9" pos:end="690:14">offset</name><operator pos:start="690:15" pos:end="690:16">++</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="691:9" pos:end="691:23"><expr pos:start="691:9" pos:end="691:22"><name pos:start="691:9" pos:end="691:20">tot_len_left</name><operator pos:start="691:21" pos:end="691:22">--</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="693:9" pos:end="693:79">/* Check for SUCCESS (0) or SUCCESS_POWER_SAVE_MODE (85) Status Code */</comment>
        <if_stmt pos:start="694:9" pos:end="698:9"><if pos:start="694:9" pos:end="698:9">if <condition pos:start="694:12" pos:end="694:29">(<expr pos:start="694:13" pos:end="694:28"><name pos:start="694:13" pos:end="694:24">tot_len_left</name> <operator pos:start="694:26" pos:end="694:26">&lt;</operator> <literal type="number" pos:start="694:28" pos:end="694:28">5</literal></expr>)</condition>
        <block pos:start="695:9" pos:end="698:9">{<block_content pos:start="696:13" pos:end="697:55">
            <expr_stmt pos:start="696:13" pos:end="696:38"><expr pos:start="696:13" pos:end="696:37"><call pos:start="696:13" pos:end="696:37"><name pos:start="696:13" pos:end="696:20">ws_debug</name><argument_list pos:start="696:21" pos:end="696:37">(<argument pos:start="696:22" pos:end="696:36"><expr pos:start="696:22" pos:end="696:36"><literal type="string" pos:start="696:22" pos:end="696:36">"Not EAPOL-Key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="697:13" pos:end="697:55">return <expr pos:start="697:20" pos:end="697:54"><name pos:start="697:20" pos:end="697:54">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="699:9" pos:end="699:40"><expr pos:start="699:9" pos:end="699:39"><name pos:start="699:9" pos:end="699:14">status</name> <operator pos:start="699:16" pos:end="699:16">=</operator> <call pos:start="699:18" pos:end="699:39"><name pos:start="699:18" pos:end="699:24">pntoh16</name><argument_list pos:start="699:25" pos:end="699:39">(<argument pos:start="699:26" pos:end="699:38"><expr pos:start="699:26" pos:end="699:38"><name pos:start="699:26" pos:end="699:29">data</name> <operator pos:start="699:31" pos:end="699:31">+</operator> <name pos:start="699:33" pos:end="699:38">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="700:9" pos:end="704:9"><if pos:start="700:9" pos:end="704:9">if <condition pos:start="700:12" pos:end="700:40">(<expr pos:start="700:13" pos:end="700:39"><name pos:start="700:13" pos:end="700:18">status</name> <operator pos:start="700:20" pos:end="700:21">!=</operator> <literal type="number" pos:start="700:23" pos:end="700:23">0</literal> <operator pos:start="700:25" pos:end="700:26">&amp;&amp;</operator> <name pos:start="700:28" pos:end="700:33">status</name> <operator pos:start="700:35" pos:end="700:36">!=</operator> <literal type="number" pos:start="700:38" pos:end="700:39">85</literal></expr>)</condition>
        <block pos:start="701:9" pos:end="704:9">{<block_content pos:start="702:13" pos:end="703:55">
            <expr_stmt pos:start="702:13" pos:end="702:50"><expr pos:start="702:13" pos:end="702:49"><call pos:start="702:13" pos:end="702:49"><name pos:start="702:13" pos:end="702:20">ws_debug</name><argument_list pos:start="702:21" pos:end="702:49">(<argument pos:start="702:22" pos:end="702:48"><expr pos:start="702:22" pos:end="702:48"><literal type="string" pos:start="702:22" pos:end="702:48">"TDLS setup not successful"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="703:13" pos:end="703:55">return <expr pos:start="703:20" pos:end="703:54"><name pos:start="703:20" pos:end="703:54">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="706:9" pos:end="706:39">/* skip Token + capabilities */</comment>
        <expr_stmt pos:start="707:9" pos:end="707:20"><expr pos:start="707:9" pos:end="707:19"><name pos:start="707:9" pos:end="707:14">offset</name> <operator pos:start="707:16" pos:end="707:17">+=</operator> <literal type="number" pos:start="707:19" pos:end="707:19">5</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="709:9" pos:end="709:91">/* search for RSN, Fast BSS Transition, Link Identifier and Timeout Interval IEs */</comment>

        <while pos:start="711:9" pos:end="743:9">while <condition pos:start="711:15" pos:end="711:38">(<expr pos:start="711:16" pos:end="711:37"><name pos:start="711:16" pos:end="711:21">offset</name> <operator pos:start="711:23" pos:end="711:23">&lt;</operator> <operator pos:start="711:25" pos:end="711:25">(</operator><name pos:start="711:26" pos:end="711:32">tot_len</name> <operator pos:start="711:34" pos:end="711:34">-</operator> <literal type="number" pos:start="711:36" pos:end="711:36">2</literal><operator pos:start="711:37" pos:end="711:37">)</operator></expr>)</condition>
        <block pos:start="712:9" pos:end="743:9">{<block_content pos:start="713:13" pos:end="742:33">
            <decl_stmt pos:start="713:13" pos:end="713:45"><decl pos:start="713:13" pos:end="713:44"><type pos:start="713:13" pos:end="713:18"><name pos:start="713:13" pos:end="713:18">guint8</name></type> <name pos:start="713:20" pos:end="713:29">element_id</name> <init pos:start="713:31" pos:end="713:44">= <expr pos:start="713:33" pos:end="713:44"><name pos:start="713:33" pos:end="713:44"><name pos:start="713:33" pos:end="713:36">data</name><index pos:start="713:37" pos:end="713:44">[<expr pos:start="713:38" pos:end="713:43"><name pos:start="713:38" pos:end="713:43">offset</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="714:13" pos:end="714:45"><decl pos:start="714:13" pos:end="714:44"><type pos:start="714:13" pos:end="714:18"><name pos:start="714:13" pos:end="714:18">guint8</name></type> <name pos:start="714:20" pos:end="714:25">length</name> <init pos:start="714:27" pos:end="714:44">= <expr pos:start="714:29" pos:end="714:44"><name pos:start="714:29" pos:end="714:44"><name pos:start="714:29" pos:end="714:32">data</name><index pos:start="714:33" pos:end="714:44">[<expr pos:start="714:34" pos:end="714:43"><name pos:start="714:34" pos:end="714:39">offset</name> <operator pos:start="714:41" pos:end="714:41">+</operator> <literal type="number" pos:start="714:43" pos:end="714:43">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="715:13" pos:end="715:38"><decl pos:start="715:13" pos:end="715:37"><type pos:start="715:13" pos:end="715:17"><name pos:start="715:13" pos:end="715:17">guint</name></type> <name pos:start="715:19" pos:end="715:28">min_length</name> <init pos:start="715:30" pos:end="715:37">= <expr pos:start="715:32" pos:end="715:37"><name pos:start="715:32" pos:end="715:37">length</name></expr></init></decl>;</decl_stmt>
            <switch pos:start="716:13" pos:end="735:13">switch <condition pos:start="716:20" pos:end="716:31">(<expr pos:start="716:21" pos:end="716:30"><name pos:start="716:21" pos:end="716:30">element_id</name></expr>)</condition>
            <block pos:start="717:13" pos:end="735:13">{<block_content pos:start="718:13" pos:end="734:22">
            <case pos:start="718:13" pos:end="718:20">case <expr pos:start="718:18" pos:end="718:19"><literal type="number" pos:start="718:18" pos:end="718:19">48</literal></expr>:</case> <comment type="block" pos:start="718:22" pos:end="718:53">/* RSN (802.11-2016 9.4.2.35) */</comment>
                <expr_stmt pos:start="719:17" pos:end="719:37"><expr pos:start="719:17" pos:end="719:36"><name pos:start="719:17" pos:end="719:27">offset_rsne</name> <operator pos:start="719:29" pos:end="719:29">=</operator> <name pos:start="719:31" pos:end="719:36">offset</name></expr>;</expr_stmt>
                <expr_stmt pos:start="720:17" pos:end="720:31"><expr pos:start="720:17" pos:end="720:30"><name pos:start="720:17" pos:end="720:26">min_length</name> <operator pos:start="720:28" pos:end="720:28">=</operator> <literal type="number" pos:start="720:30" pos:end="720:30">1</literal></expr>;</expr_stmt>
                <break pos:start="721:17" pos:end="721:22">break;</break>
            <case pos:start="722:13" pos:end="722:20">case <expr pos:start="722:18" pos:end="722:19"><literal type="number" pos:start="722:18" pos:end="722:19">55</literal></expr>:</case> <comment type="block" pos:start="722:22" pos:end="722:53">/* FTE (802.11-2016 9.4.2.48) */</comment>
                <expr_stmt pos:start="723:17" pos:end="723:36"><expr pos:start="723:17" pos:end="723:35"><name pos:start="723:17" pos:end="723:26">offset_fte</name> <operator pos:start="723:28" pos:end="723:28">=</operator> <name pos:start="723:30" pos:end="723:35">offset</name></expr>;</expr_stmt>
                <comment type="block" pos:start="724:17" pos:end="724:64">/* Plus variable length optional parameter(s) */</comment>
                <expr_stmt pos:start="725:17" pos:end="725:46"><expr pos:start="725:17" pos:end="725:45"><name pos:start="725:17" pos:end="725:26">min_length</name> <operator pos:start="725:28" pos:end="725:28">=</operator> <literal type="number" pos:start="725:30" pos:end="725:32">2</literal> <operator pos:start="725:32" pos:end="725:32">+</operator> <literal type="number" pos:start="725:34" pos:end="725:37">16</literal> <operator pos:start="725:37" pos:end="725:37">+</operator> <literal type="number" pos:start="725:39" pos:end="725:42">32</literal> <operator pos:start="725:42" pos:end="725:42">+</operator> <literal type="number" pos:start="725:44" pos:end="725:45">32</literal></expr>;</expr_stmt>
                <break pos:start="726:17" pos:end="726:22">break;</break>
            <case pos:start="727:13" pos:end="727:20">case <expr pos:start="727:18" pos:end="727:19"><literal type="number" pos:start="727:18" pos:end="727:19">56</literal></expr>:</case> <comment type="block" pos:start="727:22" pos:end="727:66">/* Timeout Interval (802.11-2016 9.4.2.49) */</comment>
                <expr_stmt pos:start="728:17" pos:end="728:40"><expr pos:start="728:17" pos:end="728:39"><name pos:start="728:17" pos:end="728:30">offset_timeout</name> <operator pos:start="728:32" pos:end="728:32">=</operator> <name pos:start="728:34" pos:end="728:39">offset</name></expr>;</expr_stmt>
                <expr_stmt pos:start="729:17" pos:end="729:35"><expr pos:start="729:17" pos:end="729:34"><name pos:start="729:17" pos:end="729:26">min_length</name> <operator pos:start="729:28" pos:end="729:28">=</operator> <literal type="number" pos:start="729:30" pos:end="729:32">1</literal> <operator pos:start="729:32" pos:end="729:32">+</operator> <literal type="number" pos:start="729:34" pos:end="729:34">4</literal></expr>;</expr_stmt>
                <break pos:start="730:17" pos:end="730:22">break;</break>
            <case pos:start="731:13" pos:end="731:21">case <expr pos:start="731:18" pos:end="731:20"><literal type="number" pos:start="731:18" pos:end="731:20">101</literal></expr>:</case> <comment type="block" pos:start="731:23" pos:end="731:66">/* Link Identifier (802.11-2016 9.4.2.62) */</comment>
                <expr_stmt pos:start="732:17" pos:end="732:37"><expr pos:start="732:17" pos:end="732:36"><name pos:start="732:17" pos:end="732:27">offset_link</name> <operator pos:start="732:29" pos:end="732:29">=</operator> <name pos:start="732:31" pos:end="732:36">offset</name></expr>;</expr_stmt>
                <expr_stmt pos:start="733:17" pos:end="733:39"><expr pos:start="733:17" pos:end="733:38"><name pos:start="733:17" pos:end="733:26">min_length</name> <operator pos:start="733:28" pos:end="733:28">=</operator> <literal type="number" pos:start="733:30" pos:end="733:32">6</literal> <operator pos:start="733:32" pos:end="733:32">+</operator> <literal type="number" pos:start="733:34" pos:end="733:36">6</literal> <operator pos:start="733:36" pos:end="733:36">+</operator> <literal type="number" pos:start="733:38" pos:end="733:38">6</literal></expr>;</expr_stmt>
                <break pos:start="734:17" pos:end="734:22">break;</break>
            </block_content>}</block></switch>

            <if_stmt pos:start="737:13" pos:end="741:13"><if pos:start="737:13" pos:end="741:13">if <condition pos:start="737:16" pos:end="737:69">(<expr pos:start="737:17" pos:end="737:68"><name pos:start="737:17" pos:end="737:22">length</name> <operator pos:start="737:24" pos:end="737:24">&lt;</operator> <name pos:start="737:26" pos:end="737:35">min_length</name> <operator pos:start="737:37" pos:end="737:38">||</operator> <name pos:start="737:40" pos:end="737:46">tot_len</name> <operator pos:start="737:48" pos:end="737:48">&lt;</operator> <name pos:start="737:50" pos:end="737:55">offset</name> <operator pos:start="737:57" pos:end="737:57">+</operator> <literal type="number" pos:start="737:59" pos:end="737:61">2</literal> <operator pos:start="737:61" pos:end="737:61">+</operator> <name pos:start="737:63" pos:end="737:68">length</name></expr>)</condition>
            <block pos:start="738:13" pos:end="741:13">{<block_content pos:start="739:17" pos:end="740:59">
                <expr_stmt pos:start="739:17" pos:end="739:58"><expr pos:start="739:17" pos:end="739:57"><call pos:start="739:17" pos:end="739:57"><name pos:start="739:17" pos:end="739:24">ws_debug</name><argument_list pos:start="739:25" pos:end="739:57">(<argument pos:start="739:26" pos:end="739:56"><expr pos:start="739:26" pos:end="739:56"><literal type="string" pos:start="739:26" pos:end="739:56">"Invalid length records in IEs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="740:17" pos:end="740:59">return <expr pos:start="740:24" pos:end="740:58"><name pos:start="740:24" pos:end="740:58">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="742:13" pos:end="742:33"><expr pos:start="742:13" pos:end="742:32"><name pos:start="742:13" pos:end="742:18">offset</name> <operator pos:start="742:20" pos:end="742:21">+=</operator> <literal type="number" pos:start="742:23" pos:end="742:25">2</literal> <operator pos:start="742:25" pos:end="742:25">+</operator> <name pos:start="742:27" pos:end="742:32">length</name></expr>;</expr_stmt>
        </block_content>}</block></while>

        <if_stmt pos:start="745:9" pos:end="750:9"><if pos:start="745:9" pos:end="750:9">if <condition pos:start="745:12" pos:end="746:52">(<expr pos:start="745:13" pos:end="746:51"><name pos:start="745:13" pos:end="745:23">offset_rsne</name> <operator pos:start="745:25" pos:end="745:26">==</operator> <literal type="number" pos:start="745:28" pos:end="745:28">0</literal> <operator pos:start="745:30" pos:end="745:31">||</operator> <name pos:start="745:33" pos:end="745:42">offset_fte</name> <operator pos:start="745:44" pos:end="745:45">==</operator> <literal type="number" pos:start="745:47" pos:end="745:47">0</literal> <operator pos:start="745:49" pos:end="745:50">||</operator>
            <name pos:start="746:13" pos:end="746:26">offset_timeout</name> <operator pos:start="746:28" pos:end="746:29">==</operator> <literal type="number" pos:start="746:31" pos:end="746:31">0</literal> <operator pos:start="746:33" pos:end="746:34">||</operator> <name pos:start="746:36" pos:end="746:46">offset_link</name> <operator pos:start="746:48" pos:end="746:49">==</operator> <literal type="number" pos:start="746:51" pos:end="746:51">0</literal></expr>)</condition>
        <block pos:start="747:9" pos:end="750:9">{<block_content pos:start="748:13" pos:end="749:55">
            <expr_stmt pos:start="748:13" pos:end="748:54"><expr pos:start="748:13" pos:end="748:53"><call pos:start="748:13" pos:end="748:53"><name pos:start="748:13" pos:end="748:20">ws_debug</name><argument_list pos:start="748:21" pos:end="748:53">(<argument pos:start="748:22" pos:end="748:52"><expr pos:start="748:22" pos:end="748:52"><literal type="string" pos:start="748:22" pos:end="748:52">"Cannot Find all necessary IEs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="749:13" pos:end="749:55">return <expr pos:start="749:20" pos:end="749:54"><name pos:start="749:20" pos:end="749:54">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="752:9" pos:end="752:66"><expr pos:start="752:9" pos:end="752:65"><call pos:start="752:9" pos:end="752:65"><name pos:start="752:9" pos:end="752:16">ws_debug</name><argument_list pos:start="752:17" pos:end="752:65">(<argument pos:start="752:18" pos:end="752:64"><expr pos:start="752:18" pos:end="752:64"><literal type="string" pos:start="752:18" pos:end="752:64">"Found RSNE/Fast BSS/Timeout Interval/Link IEs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="754:9" pos:end="754:92">/* Will create a Security Association between 2 STA. Need to get both MAC address */</comment>
        <expr_stmt pos:start="755:9" pos:end="755:43"><expr pos:start="755:9" pos:end="755:42"><name pos:start="755:9" pos:end="755:17">initiator</name> <operator pos:start="755:19" pos:end="755:19">=</operator> <operator pos:start="755:21" pos:end="755:21">&amp;</operator><name pos:start="755:22" pos:end="755:42"><name pos:start="755:22" pos:end="755:25">data</name><index pos:start="755:26" pos:end="755:42">[<expr pos:start="755:27" pos:end="755:41"><name pos:start="755:27" pos:end="755:37">offset_link</name> <operator pos:start="755:39" pos:end="755:39">+</operator> <literal type="number" pos:start="755:41" pos:end="755:41">8</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="756:9" pos:end="756:44"><expr pos:start="756:9" pos:end="756:43"><name pos:start="756:9" pos:end="756:17">responder</name> <operator pos:start="756:19" pos:end="756:19">=</operator> <operator pos:start="756:21" pos:end="756:21">&amp;</operator><name pos:start="756:22" pos:end="756:43"><name pos:start="756:22" pos:end="756:25">data</name><index pos:start="756:26" pos:end="756:43">[<expr pos:start="756:27" pos:end="756:42"><name pos:start="756:27" pos:end="756:37">offset_link</name> <operator pos:start="756:39" pos:end="756:39">+</operator> <literal type="number" pos:start="756:41" pos:end="756:42">14</literal></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="758:9" pos:end="767:9"><if pos:start="758:9" pos:end="762:9">if <condition pos:start="758:12" pos:end="758:67">(<expr pos:start="758:13" pos:end="758:66"><call pos:start="758:13" pos:end="758:62"><name pos:start="758:13" pos:end="758:18">memcmp</name><argument_list pos:start="758:19" pos:end="758:62">(<argument pos:start="758:20" pos:end="758:28"><expr pos:start="758:20" pos:end="758:28"><name pos:start="758:20" pos:end="758:28">initiator</name></expr></argument>, <argument pos:start="758:31" pos:end="758:39"><expr pos:start="758:31" pos:end="758:39"><name pos:start="758:31" pos:end="758:39">responder</name></expr></argument>, <argument pos:start="758:42" pos:end="758:61"><expr pos:start="758:42" pos:end="758:61"><name pos:start="758:42" pos:end="758:61">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="758:64" pos:end="758:64">&lt;</operator> <literal type="number" pos:start="758:66" pos:end="758:66">0</literal></expr>)</condition>
        <block pos:start="759:9" pos:end="762:9">{<block_content pos:start="760:13" pos:end="761:62">
            <expr_stmt pos:start="760:13" pos:end="760:60"><expr pos:start="760:13" pos:end="760:59"><call pos:start="760:13" pos:end="760:59"><name pos:start="760:13" pos:end="760:18">memcpy</name><argument_list pos:start="760:19" pos:end="760:59">(<argument pos:start="760:20" pos:end="760:25"><expr pos:start="760:20" pos:end="760:25"><name pos:start="760:20" pos:end="760:25"><name pos:start="760:20" pos:end="760:21">id</name><operator pos:start="760:22" pos:end="760:22">.</operator><name pos:start="760:23" pos:end="760:25">sta</name></name></expr></argument>, <argument pos:start="760:28" pos:end="760:36"><expr pos:start="760:28" pos:end="760:36"><name pos:start="760:28" pos:end="760:36">initiator</name></expr></argument>, <argument pos:start="760:39" pos:end="760:58"><expr pos:start="760:39" pos:end="760:58"><name pos:start="760:39" pos:end="760:58">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="761:13" pos:end="761:62"><expr pos:start="761:13" pos:end="761:61"><call pos:start="761:13" pos:end="761:61"><name pos:start="761:13" pos:end="761:18">memcpy</name><argument_list pos:start="761:19" pos:end="761:61">(<argument pos:start="761:20" pos:end="761:27"><expr pos:start="761:20" pos:end="761:27"><name pos:start="761:20" pos:end="761:27"><name pos:start="761:20" pos:end="761:21">id</name><operator pos:start="761:22" pos:end="761:22">.</operator><name pos:start="761:23" pos:end="761:27">bssid</name></name></expr></argument>, <argument pos:start="761:30" pos:end="761:38"><expr pos:start="761:30" pos:end="761:38"><name pos:start="761:30" pos:end="761:38">responder</name></expr></argument>, <argument pos:start="761:41" pos:end="761:60"><expr pos:start="761:41" pos:end="761:60"><name pos:start="761:41" pos:end="761:60">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else pos:start="763:9" pos:end="767:9">else
        <block pos:start="764:9" pos:end="767:9">{<block_content pos:start="765:13" pos:end="766:62">
            <expr_stmt pos:start="765:13" pos:end="765:60"><expr pos:start="765:13" pos:end="765:59"><call pos:start="765:13" pos:end="765:59"><name pos:start="765:13" pos:end="765:18">memcpy</name><argument_list pos:start="765:19" pos:end="765:59">(<argument pos:start="765:20" pos:end="765:25"><expr pos:start="765:20" pos:end="765:25"><name pos:start="765:20" pos:end="765:25"><name pos:start="765:20" pos:end="765:21">id</name><operator pos:start="765:22" pos:end="765:22">.</operator><name pos:start="765:23" pos:end="765:25">sta</name></name></expr></argument>, <argument pos:start="765:28" pos:end="765:36"><expr pos:start="765:28" pos:end="765:36"><name pos:start="765:28" pos:end="765:36">responder</name></expr></argument>, <argument pos:start="765:39" pos:end="765:58"><expr pos:start="765:39" pos:end="765:58"><name pos:start="765:39" pos:end="765:58">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="766:13" pos:end="766:62"><expr pos:start="766:13" pos:end="766:61"><call pos:start="766:13" pos:end="766:61"><name pos:start="766:13" pos:end="766:18">memcpy</name><argument_list pos:start="766:19" pos:end="766:61">(<argument pos:start="766:20" pos:end="766:27"><expr pos:start="766:20" pos:end="766:27"><name pos:start="766:20" pos:end="766:27"><name pos:start="766:20" pos:end="766:21">id</name><operator pos:start="766:22" pos:end="766:22">.</operator><name pos:start="766:23" pos:end="766:27">bssid</name></name></expr></argument>, <argument pos:start="766:30" pos:end="766:38"><expr pos:start="766:30" pos:end="766:38"><name pos:start="766:30" pos:end="766:38">initiator</name></expr></argument>, <argument pos:start="766:41" pos:end="766:60"><expr pos:start="766:41" pos:end="766:60"><name pos:start="766:41" pos:end="766:60">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="block" pos:start="769:9" pos:end="769:47">/* Check if already derived this key */</comment>
        <expr_stmt pos:start="770:9" pos:end="770:41"><expr pos:start="770:9" pos:end="770:40"><name pos:start="770:9" pos:end="770:10">sa</name> <operator pos:start="770:12" pos:end="770:12">=</operator> <call pos:start="770:14" pos:end="770:40"><name pos:start="770:14" pos:end="770:30">Dot11DecryptGetSa</name><argument_list pos:start="770:31" pos:end="770:40">(<argument pos:start="770:32" pos:end="770:34"><expr pos:start="770:32" pos:end="770:34"><name pos:start="770:32" pos:end="770:34">ctx</name></expr></argument>, <argument pos:start="770:37" pos:end="770:39"><expr pos:start="770:37" pos:end="770:39"><operator pos:start="770:37" pos:end="770:37">&amp;</operator><name pos:start="770:38" pos:end="770:39">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt pos:start="771:9" pos:end="771:46"><decl pos:start="771:9" pos:end="771:45"><type pos:start="771:9" pos:end="771:37"><name pos:start="771:9" pos:end="771:37">PDOT11DECRYPT_SEC_ASSOCIATION</name></type> <name pos:start="771:39" pos:end="771:45">iter_sa</name></decl>;</decl_stmt>
        <for pos:start="772:9" pos:end="781:9">for <control pos:start="772:13" pos:end="772:68">(<init pos:start="772:14" pos:end="772:26"><expr pos:start="772:14" pos:end="772:25"><name pos:start="772:14" pos:end="772:20">iter_sa</name> <operator pos:start="772:22" pos:end="772:22">=</operator> <name pos:start="772:24" pos:end="772:25">sa</name></expr>;</init> <condition pos:start="772:28" pos:end="772:43"><expr pos:start="772:28" pos:end="772:42"><name pos:start="772:28" pos:end="772:34">iter_sa</name> <operator pos:start="772:36" pos:end="772:37">!=</operator> <name pos:start="772:39" pos:end="772:42">NULL</name></expr>;</condition> <incr pos:start="772:45" pos:end="772:67"><expr pos:start="772:45" pos:end="772:67"><name pos:start="772:45" pos:end="772:51">iter_sa</name> <operator pos:start="772:53" pos:end="772:53">=</operator> <name pos:start="772:55" pos:end="772:67"><name pos:start="772:55" pos:end="772:61">iter_sa</name><operator pos:start="772:62" pos:end="772:63">-&gt;</operator><name pos:start="772:64" pos:end="772:67">next</name></name></expr></incr>)</control>
        <block pos:start="773:9" pos:end="781:9">{<block_content pos:start="774:13" pos:end="780:13">
            <if_stmt pos:start="774:13" pos:end="780:13"><if pos:start="774:13" pos:end="780:13">if <condition pos:start="774:16" pos:end="776:56">(<expr pos:start="774:17" pos:end="776:55"><name pos:start="774:17" pos:end="774:33"><name pos:start="774:17" pos:end="774:23">iter_sa</name><operator pos:start="774:24" pos:end="774:25">-&gt;</operator><name pos:start="774:26" pos:end="774:33">validKey</name></name> <operator pos:start="774:35" pos:end="774:36">&amp;&amp;</operator>
                <call pos:start="775:17" pos:end="776:50"><name pos:start="775:17" pos:end="775:22">memcmp</name><argument_list pos:start="775:23" pos:end="776:50">(<argument pos:start="775:24" pos:end="775:41"><expr pos:start="775:24" pos:end="775:41"><name pos:start="775:24" pos:end="775:41"><name pos:start="775:24" pos:end="775:30">iter_sa</name><operator pos:start="775:31" pos:end="775:32">-&gt;</operator><name pos:start="775:33" pos:end="775:35">wpa</name><operator pos:start="775:36" pos:end="775:36">.</operator><name pos:start="775:37" pos:end="775:41">nonce</name></name></expr></argument>, <argument pos:start="775:44" pos:end="775:65"><expr pos:start="775:44" pos:end="775:65"><name pos:start="775:44" pos:end="775:47">data</name> <operator pos:start="775:49" pos:end="775:49">+</operator> <name pos:start="775:51" pos:end="775:60">offset_fte</name> <operator pos:start="775:62" pos:end="775:62">+</operator> <literal type="number" pos:start="775:64" pos:end="775:65">52</literal></expr></argument>,
                       <argument pos:start="776:24" pos:end="776:49"><expr pos:start="776:24" pos:end="776:49"><name pos:start="776:24" pos:end="776:49">DOT11DECRYPT_WPA_NONCE_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="776:52" pos:end="776:53">==</operator> <literal type="number" pos:start="776:55" pos:end="776:55">0</literal></expr>)</condition>
            <block pos:start="777:13" pos:end="780:13">{<block_content pos:start="779:17" pos:end="779:58">
                <comment type="block" pos:start="778:17" pos:end="778:88">/* Already have valid key for this SA, no need to redo key derivation */</comment>
                <return pos:start="779:17" pos:end="779:58">return <expr pos:start="779:24" pos:end="779:57"><name pos:start="779:24" pos:end="779:57">DOT11DECRYPT_RET_SUCCESS_HANDSHAKE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <comment type="block" pos:start="782:9" pos:end="782:98">/* We are opening a new session with the same two STA (previous sa will be kept if any) */</comment>
        <expr_stmt pos:start="783:9" pos:end="783:36"><expr pos:start="783:9" pos:end="783:35"><name pos:start="783:9" pos:end="783:10">sa</name> <operator pos:start="783:12" pos:end="783:12">=</operator> <call pos:start="783:14" pos:end="783:35"><name pos:start="783:14" pos:end="783:30">Dot11DecryptNewSa</name><argument_list pos:start="783:31" pos:end="783:35">(<argument pos:start="783:32" pos:end="783:34"><expr pos:start="783:32" pos:end="783:34"><operator pos:start="783:32" pos:end="783:32">&amp;</operator><name pos:start="783:33" pos:end="783:34">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="784:9" pos:end="788:9"><if pos:start="784:9" pos:end="788:9">if <condition pos:start="784:12" pos:end="784:23">(<expr pos:start="784:13" pos:end="784:22"><name pos:start="784:13" pos:end="784:14">sa</name> <operator pos:start="784:16" pos:end="784:17">==</operator> <name pos:start="784:19" pos:end="784:22">NULL</name></expr>)</condition>
        <block pos:start="785:9" pos:end="788:9">{<block_content pos:start="786:13" pos:end="787:45">
            <expr_stmt pos:start="786:13" pos:end="786:55"><expr pos:start="786:13" pos:end="786:54"><call pos:start="786:13" pos:end="786:54"><name pos:start="786:13" pos:end="786:22">ws_warning</name><argument_list pos:start="786:23" pos:end="786:54">(<argument pos:start="786:24" pos:end="786:53"><expr pos:start="786:24" pos:end="786:53"><literal type="string" pos:start="786:24" pos:end="786:53">"Failed to alloc new SA entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="787:13" pos:end="787:45">return <expr pos:start="787:20" pos:end="787:44"><name pos:start="787:20" pos:end="787:44">DOT11DECRYPT_RET_REQ_DATA</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="789:9" pos:end="794:9"><if pos:start="789:9" pos:end="794:9">if <condition pos:start="789:12" pos:end="790:103">(<expr pos:start="789:13" pos:end="790:102"><call pos:start="789:13" pos:end="790:74"><name pos:start="789:13" pos:end="789:37">Dot11DecryptTDLSDeriveKey</name><argument_list pos:start="789:38" pos:end="790:74">(<argument pos:start="789:39" pos:end="789:40"><expr pos:start="789:39" pos:end="789:40"><name pos:start="789:39" pos:end="789:40">sa</name></expr></argument>, <argument pos:start="789:43" pos:end="789:46"><expr pos:start="789:43" pos:end="789:46"><name pos:start="789:43" pos:end="789:46">data</name></expr></argument>, <argument pos:start="789:49" pos:end="789:59"><expr pos:start="789:49" pos:end="789:59"><name pos:start="789:49" pos:end="789:59">offset_rsne</name></expr></argument>, <argument pos:start="789:62" pos:end="789:71"><expr pos:start="789:62" pos:end="789:71"><name pos:start="789:62" pos:end="789:71">offset_fte</name></expr></argument>,
                                      <argument pos:start="790:39" pos:end="790:52"><expr pos:start="790:39" pos:end="790:52"><name pos:start="790:39" pos:end="790:52">offset_timeout</name></expr></argument>, <argument pos:start="790:55" pos:end="790:65"><expr pos:start="790:55" pos:end="790:65"><name pos:start="790:55" pos:end="790:65">offset_link</name></expr></argument>, <argument pos:start="790:68" pos:end="790:73"><expr pos:start="790:68" pos:end="790:73"><name pos:start="790:68" pos:end="790:73">action</name></expr></argument>)</argument_list></call> <operator pos:start="790:76" pos:end="790:77">==</operator> <name pos:start="790:79" pos:end="790:102">DOT11DECRYPT_RET_SUCCESS</name></expr>)</condition>
        <block pos:start="791:9" pos:end="794:9">{<block_content pos:start="792:13" pos:end="793:54">
            <expr_stmt pos:start="792:13" pos:end="792:44"><expr pos:start="792:13" pos:end="792:43"><call pos:start="792:13" pos:end="792:43"><name pos:start="792:13" pos:end="792:29">Dot11DecryptAddSa</name><argument_list pos:start="792:30" pos:end="792:43">(<argument pos:start="792:31" pos:end="792:33"><expr pos:start="792:31" pos:end="792:33"><name pos:start="792:31" pos:end="792:33">ctx</name></expr></argument>, <argument pos:start="792:36" pos:end="792:38"><expr pos:start="792:36" pos:end="792:38"><operator pos:start="792:36" pos:end="792:36">&amp;</operator><name pos:start="792:37" pos:end="792:38">id</name></expr></argument>, <argument pos:start="792:41" pos:end="792:42"><expr pos:start="792:41" pos:end="792:42"><name pos:start="792:41" pos:end="792:42">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="793:13" pos:end="793:54">return <expr pos:start="793:20" pos:end="793:53"><name pos:start="793:20" pos:end="793:53">DOT11DECRYPT_RET_SUCCESS_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="795:9" pos:end="795:19"><expr pos:start="795:9" pos:end="795:18"><call pos:start="795:9" pos:end="795:18"><name pos:start="795:9" pos:end="795:14">g_free</name><argument_list pos:start="795:15" pos:end="795:18">(<argument pos:start="795:16" pos:end="795:17"><expr pos:start="795:16" pos:end="795:17"><name pos:start="795:16" pos:end="795:17">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="796:9" pos:end="796:51">return <expr pos:start="796:16" pos:end="796:50"><name pos:start="796:16" pos:end="796:50">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="799:5" pos:end="855:5"><type pos:start="799:5" pos:end="799:14"><specifier pos:start="799:5" pos:end="799:10">static</specifier> <name pos:start="799:12" pos:end="799:14">INT</name></type>
    <name pos:start="800:5" pos:end="800:32">Dot11DecryptCopyBroadcastKey</name><parameter_list pos:start="800:33" pos:end="803:50">(
        <parameter pos:start="801:9" pos:end="801:33"><decl pos:start="801:9" pos:end="801:33"><type pos:start="801:9" pos:end="801:33"><name pos:start="801:9" pos:end="801:29">PDOT11DECRYPT_CONTEXT</name></type> <name pos:start="801:31" pos:end="801:33">ctx</name></decl></parameter>,
        <parameter pos:start="802:9" pos:end="802:25"><decl pos:start="802:9" pos:end="802:25"><type pos:start="802:9" pos:end="802:25"><specifier pos:start="802:9" pos:end="802:13">const</specifier> <name pos:start="802:15" pos:end="802:20">guint8</name> <modifier pos:start="802:22" pos:end="802:22">*</modifier></type><name pos:start="802:23" pos:end="802:25">gtk</name></decl></parameter>, <parameter pos:start="802:28" pos:end="802:41"><decl pos:start="802:28" pos:end="802:41"><type pos:start="802:28" pos:end="802:41"><name pos:start="802:28" pos:end="802:33">size_t</name></type> <name pos:start="802:35" pos:end="802:41">gtk_len</name></decl></parameter>,
        <parameter pos:start="803:9" pos:end="803:49"><decl pos:start="803:9" pos:end="803:49"><type pos:start="803:9" pos:end="803:49"><specifier pos:start="803:9" pos:end="803:13">const</specifier> <name pos:start="803:15" pos:end="803:45">DOT11DECRYPT_SEC_ASSOCIATION_ID</name> <modifier pos:start="803:47" pos:end="803:47">*</modifier></type><name pos:start="803:48" pos:end="803:49">id</name></decl></parameter>)</parameter_list>
    <block pos:start="804:5" pos:end="855:5">{<block_content pos:start="805:9" pos:end="854:50">
        <decl_stmt pos:start="805:9" pos:end="805:53"><decl pos:start="805:9" pos:end="805:52"><type pos:start="805:9" pos:end="805:39"><name pos:start="805:9" pos:end="805:39">DOT11DECRYPT_SEC_ASSOCIATION_ID</name></type> <name pos:start="805:41" pos:end="805:52">broadcast_id</name></decl>;</decl_stmt>
        <decl_stmt pos:start="806:9" pos:end="806:41"><decl pos:start="806:9" pos:end="806:40"><type pos:start="806:9" pos:end="806:38"><name pos:start="806:9" pos:end="806:36">DOT11DECRYPT_SEC_ASSOCIATION</name> <modifier pos:start="806:38" pos:end="806:38">*</modifier></type><name pos:start="806:39" pos:end="806:40">sa</name></decl>;</decl_stmt>
        <decl_stmt pos:start="807:9" pos:end="807:51"><decl pos:start="807:9" pos:end="807:50"><type pos:start="807:9" pos:end="807:38"><name pos:start="807:9" pos:end="807:36">DOT11DECRYPT_SEC_ASSOCIATION</name> <modifier pos:start="807:38" pos:end="807:38">*</modifier></type><name pos:start="807:39" pos:end="807:50">broadcast_sa</name></decl>;</decl_stmt>

        <if_stmt pos:start="809:9" pos:end="813:9"><if pos:start="809:9" pos:end="813:9">if <condition pos:start="809:12" pos:end="809:33">(<expr pos:start="809:13" pos:end="809:32"><operator pos:start="809:13" pos:end="809:13">!</operator><name pos:start="809:14" pos:end="809:16">gtk</name> <operator pos:start="809:18" pos:end="809:19">||</operator> <name pos:start="809:21" pos:end="809:27">gtk_len</name> <operator pos:start="809:29" pos:end="809:30">==</operator> <literal type="number" pos:start="809:32" pos:end="809:32">0</literal></expr>)</condition>
        <block pos:start="810:9" pos:end="813:9">{<block_content pos:start="811:13" pos:end="812:55">
            <expr_stmt pos:start="811:13" pos:end="811:47"><expr pos:start="811:13" pos:end="811:46"><call pos:start="811:13" pos:end="811:46"><name pos:start="811:13" pos:end="811:20">ws_debug</name><argument_list pos:start="811:21" pos:end="811:46">(<argument pos:start="811:22" pos:end="811:45"><expr pos:start="811:22" pos:end="811:45"><literal type="string" pos:start="811:22" pos:end="811:45">"No broadcast key found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="812:13" pos:end="812:55">return <expr pos:start="812:20" pos:end="812:54"><name pos:start="812:20" pos:end="812:54">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="814:9" pos:end="818:9"><if pos:start="814:9" pos:end="818:9">if <condition pos:start="814:12" pos:end="814:56">(<expr pos:start="814:13" pos:end="814:55"><name pos:start="814:13" pos:end="814:19">gtk_len</name> <operator pos:start="814:21" pos:end="814:21">&gt;</operator> <name pos:start="814:23" pos:end="814:50">DOT11DECRYPT_WPA_PTK_MAX_LEN</name> <operator pos:start="814:52" pos:end="814:52">-</operator> <literal type="number" pos:start="814:54" pos:end="814:55">32</literal></expr>)</condition>
        <block pos:start="815:9" pos:end="818:9">{<block_content pos:start="816:13" pos:end="817:55">
            <expr_stmt pos:start="816:13" pos:end="816:48"><expr pos:start="816:13" pos:end="816:47"><call pos:start="816:13" pos:end="816:47"><name pos:start="816:13" pos:end="816:20">ws_debug</name><argument_list pos:start="816:21" pos:end="816:47">(<argument pos:start="816:22" pos:end="816:46"><expr pos:start="816:22" pos:end="816:46"><literal type="string" pos:start="816:22" pos:end="816:46">"Broadcast key too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="817:13" pos:end="817:55">return <expr pos:start="817:20" pos:end="817:54"><name pos:start="817:20" pos:end="817:54">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="820:9" pos:end="820:40"><expr pos:start="820:9" pos:end="820:39"><name pos:start="820:9" pos:end="820:10">sa</name> <operator pos:start="820:12" pos:end="820:12">=</operator> <call pos:start="820:14" pos:end="820:39"><name pos:start="820:14" pos:end="820:30">Dot11DecryptGetSa</name><argument_list pos:start="820:31" pos:end="820:39">(<argument pos:start="820:32" pos:end="820:34"><expr pos:start="820:32" pos:end="820:34"><name pos:start="820:32" pos:end="820:34">ctx</name></expr></argument>, <argument pos:start="820:37" pos:end="820:38"><expr pos:start="820:37" pos:end="820:38"><name pos:start="820:37" pos:end="820:38">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="821:9" pos:end="825:9"><if pos:start="821:9" pos:end="825:9">if <condition pos:start="821:12" pos:end="821:23">(<expr pos:start="821:13" pos:end="821:22"><name pos:start="821:13" pos:end="821:14">sa</name> <operator pos:start="821:16" pos:end="821:17">==</operator> <name pos:start="821:19" pos:end="821:22">NULL</name></expr>)</condition>
        <block pos:start="822:9" pos:end="825:9">{<block_content pos:start="823:13" pos:end="824:55">
            <expr_stmt pos:start="823:13" pos:end="823:46"><expr pos:start="823:13" pos:end="823:45"><call pos:start="823:13" pos:end="823:45"><name pos:start="823:13" pos:end="823:20">ws_debug</name><argument_list pos:start="823:21" pos:end="823:45">(<argument pos:start="823:22" pos:end="823:44"><expr pos:start="823:22" pos:end="823:44"><literal type="string" pos:start="823:22" pos:end="823:44">"No SA for BSSID found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="824:13" pos:end="824:55">return <expr pos:start="824:20" pos:end="824:54"><name pos:start="824:20" pos:end="824:54">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="827:9" pos:end="827:48">/* Broadcast SA for the current BSSID */</comment>
        <expr_stmt pos:start="828:9" pos:end="828:68"><expr pos:start="828:9" pos:end="828:67"><call pos:start="828:9" pos:end="828:67"><name pos:start="828:9" pos:end="828:14">memcpy</name><argument_list pos:start="828:15" pos:end="828:67">(<argument pos:start="828:16" pos:end="828:33"><expr pos:start="828:16" pos:end="828:33"><name pos:start="828:16" pos:end="828:33"><name pos:start="828:16" pos:end="828:27">broadcast_id</name><operator pos:start="828:28" pos:end="828:28">.</operator><name pos:start="828:29" pos:end="828:33">bssid</name></name></expr></argument>, <argument pos:start="828:36" pos:end="828:44"><expr pos:start="828:36" pos:end="828:44"><name pos:start="828:36" pos:end="828:44"><name pos:start="828:36" pos:end="828:37">id</name><operator pos:start="828:38" pos:end="828:39">-&gt;</operator><name pos:start="828:40" pos:end="828:44">bssid</name></name></expr></argument>, <argument pos:start="828:47" pos:end="828:66"><expr pos:start="828:47" pos:end="828:66"><name pos:start="828:47" pos:end="828:66">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="829:9" pos:end="829:70"><expr pos:start="829:9" pos:end="829:69"><call pos:start="829:9" pos:end="829:69"><name pos:start="829:9" pos:end="829:14">memcpy</name><argument_list pos:start="829:15" pos:end="829:69">(<argument pos:start="829:16" pos:end="829:31"><expr pos:start="829:16" pos:end="829:31"><name pos:start="829:16" pos:end="829:31"><name pos:start="829:16" pos:end="829:27">broadcast_id</name><operator pos:start="829:28" pos:end="829:28">.</operator><name pos:start="829:29" pos:end="829:31">sta</name></name></expr></argument>, <argument pos:start="829:34" pos:end="829:46"><expr pos:start="829:34" pos:end="829:46"><name pos:start="829:34" pos:end="829:46">broadcast_mac</name></expr></argument>, <argument pos:start="829:49" pos:end="829:68"><expr pos:start="829:49" pos:end="829:68"><name pos:start="829:49" pos:end="829:68">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="831:9" pos:end="831:56"><expr pos:start="831:9" pos:end="831:55"><name pos:start="831:9" pos:end="831:20">broadcast_sa</name> <operator pos:start="831:22" pos:end="831:22">=</operator> <call pos:start="831:24" pos:end="831:55"><name pos:start="831:24" pos:end="831:40">Dot11DecryptNewSa</name><argument_list pos:start="831:41" pos:end="831:55">(<argument pos:start="831:42" pos:end="831:54"><expr pos:start="831:42" pos:end="831:54"><operator pos:start="831:42" pos:end="831:42">&amp;</operator><name pos:start="831:43" pos:end="831:54">broadcast_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="832:9" pos:end="836:9"><if pos:start="832:9" pos:end="836:9">if <condition pos:start="832:12" pos:end="832:33">(<expr pos:start="832:13" pos:end="832:32"><name pos:start="832:13" pos:end="832:24">broadcast_sa</name> <operator pos:start="832:26" pos:end="832:27">==</operator> <name pos:start="832:29" pos:end="832:32">NULL</name></expr>)</condition>
        <block pos:start="833:9" pos:end="836:9">{<block_content pos:start="834:13" pos:end="835:55">
            <expr_stmt pos:start="834:13" pos:end="834:55"><expr pos:start="834:13" pos:end="834:54"><call pos:start="834:13" pos:end="834:54"><name pos:start="834:13" pos:end="834:22">ws_warning</name><argument_list pos:start="834:23" pos:end="834:54">(<argument pos:start="834:24" pos:end="834:53"><expr pos:start="834:24" pos:end="834:53"><literal type="string" pos:start="834:24" pos:end="834:53">"Failed to alloc broadcast sa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="835:13" pos:end="835:55">return <expr pos:start="835:20" pos:end="835:54"><name pos:start="835:20" pos:end="835:54">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="838:9" pos:end="838:65">/* Retrieve AKMS / cipher etc from handshake message 2 */</comment>

        <expr_stmt pos:start="840:9" pos:end="840:52"><expr pos:start="840:9" pos:end="840:51"><name pos:start="840:9" pos:end="840:33"><name pos:start="840:9" pos:end="840:20">broadcast_sa</name><operator pos:start="840:21" pos:end="840:22">-&gt;</operator><name pos:start="840:23" pos:end="840:25">wpa</name><operator pos:start="840:26" pos:end="840:26">.</operator><name pos:start="840:27" pos:end="840:33">key_ver</name></name> <operator pos:start="840:35" pos:end="840:35">=</operator> <name pos:start="840:37" pos:end="840:51"><name pos:start="840:37" pos:end="840:38">sa</name><operator pos:start="840:39" pos:end="840:40">-&gt;</operator><name pos:start="840:41" pos:end="840:43">wpa</name><operator pos:start="840:44" pos:end="840:44">.</operator><name pos:start="840:45" pos:end="840:51">key_ver</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="841:9" pos:end="841:44"><expr pos:start="841:9" pos:end="841:43"><name pos:start="841:9" pos:end="841:29"><name pos:start="841:9" pos:end="841:20">broadcast_sa</name><operator pos:start="841:21" pos:end="841:22">-&gt;</operator><name pos:start="841:23" pos:end="841:25">wpa</name><operator pos:start="841:26" pos:end="841:26">.</operator><name pos:start="841:27" pos:end="841:29">akm</name></name> <operator pos:start="841:31" pos:end="841:31">=</operator> <name pos:start="841:33" pos:end="841:43"><name pos:start="841:33" pos:end="841:34">sa</name><operator pos:start="841:35" pos:end="841:36">-&gt;</operator><name pos:start="841:37" pos:end="841:39">wpa</name><operator pos:start="841:40" pos:end="841:40">.</operator><name pos:start="841:41" pos:end="841:43">akm</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="842:9" pos:end="842:60"><expr pos:start="842:9" pos:end="842:59"><name pos:start="842:9" pos:end="842:32"><name pos:start="842:9" pos:end="842:20">broadcast_sa</name><operator pos:start="842:21" pos:end="842:22">-&gt;</operator><name pos:start="842:23" pos:end="842:25">wpa</name><operator pos:start="842:26" pos:end="842:26">.</operator><name pos:start="842:27" pos:end="842:32">cipher</name></name> <operator pos:start="842:34" pos:end="842:34">=</operator> <name pos:start="842:36" pos:end="842:59"><name pos:start="842:36" pos:end="842:37">sa</name><operator pos:start="842:38" pos:end="842:39">-&gt;</operator><name pos:start="842:40" pos:end="842:42">wpa</name><operator pos:start="842:43" pos:end="842:43">.</operator><name pos:start="842:44" pos:end="842:59">tmp_group_cipher</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="843:9" pos:end="843:52"><expr pos:start="843:9" pos:end="843:51"><name pos:start="843:9" pos:end="843:33"><name pos:start="843:9" pos:end="843:20">broadcast_sa</name><operator pos:start="843:21" pos:end="843:22">-&gt;</operator><name pos:start="843:23" pos:end="843:25">wpa</name><operator pos:start="843:26" pos:end="843:26">.</operator><name pos:start="843:27" pos:end="843:33">ptk_len</name></name> <operator pos:start="843:35" pos:end="843:35">=</operator> <name pos:start="843:37" pos:end="843:51"><name pos:start="843:37" pos:end="843:38">sa</name><operator pos:start="843:39" pos:end="843:40">-&gt;</operator><name pos:start="843:41" pos:end="843:43">wpa</name><operator pos:start="843:44" pos:end="843:44">.</operator><name pos:start="843:45" pos:end="843:51">ptk_len</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="844:9" pos:end="844:38"><expr pos:start="844:9" pos:end="844:37"><name pos:start="844:9" pos:end="844:30"><name pos:start="844:9" pos:end="844:20">broadcast_sa</name><operator pos:start="844:21" pos:end="844:22">-&gt;</operator><name pos:start="844:23" pos:end="844:30">validKey</name></name> <operator pos:start="844:32" pos:end="844:32">=</operator> <name pos:start="844:34" pos:end="844:37">TRUE</name></expr>;</expr_stmt>
        <expr_stmt pos:start="845:9" pos:end="845:67"><expr pos:start="845:9" pos:end="845:66"><call pos:start="845:9" pos:end="845:66"><name pos:start="845:9" pos:end="845:18">DEBUG_DUMP</name><argument_list pos:start="845:19" pos:end="845:66">(<argument pos:start="845:20" pos:end="845:34"><expr pos:start="845:20" pos:end="845:34"><literal type="string" pos:start="845:20" pos:end="845:34">"Broadcast key"</literal></expr></argument>, <argument pos:start="845:37" pos:end="845:39"><expr pos:start="845:37" pos:end="845:39"><name pos:start="845:37" pos:end="845:39">gtk</name></expr></argument>, <argument pos:start="845:42" pos:end="845:48"><expr pos:start="845:42" pos:end="845:48"><name pos:start="845:42" pos:end="845:48">gtk_len</name></expr></argument>, <argument pos:start="845:51" pos:end="845:65"><expr pos:start="845:51" pos:end="845:65"><name pos:start="845:51" pos:end="845:65">LOG_LEVEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="847:9" pos:end="850:43">/* Since this is a GTK and its size is only 32 bytes (vs. the 64 byte size of a PTK),
         * we fake it and put it in at a 32-byte offset so the Dot11DecryptRsnaMng() function
         * will extract the right piece of the GTK for decryption. (The first 16 bytes of the
         * GTK are used for decryption.) */</comment>
        <expr_stmt pos:start="851:9" pos:end="851:72"><expr pos:start="851:9" pos:end="851:71"><call pos:start="851:9" pos:end="851:71"><name pos:start="851:9" pos:end="851:14">memset</name><argument_list pos:start="851:15" pos:end="851:71">(<argument pos:start="851:16" pos:end="851:36"><expr pos:start="851:16" pos:end="851:36"><name pos:start="851:16" pos:end="851:36"><name pos:start="851:16" pos:end="851:27">broadcast_sa</name><operator pos:start="851:28" pos:end="851:29">-&gt;</operator><name pos:start="851:30" pos:end="851:32">wpa</name><operator pos:start="851:33" pos:end="851:33">.</operator><name pos:start="851:34" pos:end="851:36">ptk</name></name></expr></argument>, <argument pos:start="851:39" pos:end="851:39"><expr pos:start="851:39" pos:end="851:39"><literal type="number" pos:start="851:39" pos:end="851:39">0</literal></expr></argument>, <argument pos:start="851:42" pos:end="851:70"><expr pos:start="851:42" pos:end="851:70"><sizeof pos:start="851:42" pos:end="851:70">sizeof<argument_list pos:start="851:48" pos:end="851:70">(<argument pos:start="851:49" pos:end="851:69"><expr pos:start="851:49" pos:end="851:69"><name pos:start="851:49" pos:end="851:69"><name pos:start="851:49" pos:end="851:60">broadcast_sa</name><operator pos:start="851:61" pos:end="851:62">-&gt;</operator><name pos:start="851:63" pos:end="851:65">wpa</name><operator pos:start="851:66" pos:end="851:66">.</operator><name pos:start="851:67" pos:end="851:69">ptk</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="852:9" pos:end="852:57"><expr pos:start="852:9" pos:end="852:56"><call pos:start="852:9" pos:end="852:56"><name pos:start="852:9" pos:end="852:14">memcpy</name><argument_list pos:start="852:15" pos:end="852:56">(<argument pos:start="852:16" pos:end="852:41"><expr pos:start="852:16" pos:end="852:41"><name pos:start="852:16" pos:end="852:36"><name pos:start="852:16" pos:end="852:27">broadcast_sa</name><operator pos:start="852:28" pos:end="852:29">-&gt;</operator><name pos:start="852:30" pos:end="852:32">wpa</name><operator pos:start="852:33" pos:end="852:33">.</operator><name pos:start="852:34" pos:end="852:36">ptk</name></name> <operator pos:start="852:38" pos:end="852:38">+</operator> <literal type="number" pos:start="852:40" pos:end="852:41">32</literal></expr></argument>, <argument pos:start="852:44" pos:end="852:46"><expr pos:start="852:44" pos:end="852:46"><name pos:start="852:44" pos:end="852:46">gtk</name></expr></argument>, <argument pos:start="852:49" pos:end="852:55"><expr pos:start="852:49" pos:end="852:55"><name pos:start="852:49" pos:end="852:55">gtk_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="853:9" pos:end="853:60"><expr pos:start="853:9" pos:end="853:59"><call pos:start="853:9" pos:end="853:59"><name pos:start="853:9" pos:end="853:25">Dot11DecryptAddSa</name><argument_list pos:start="853:26" pos:end="853:59">(<argument pos:start="853:27" pos:end="853:29"><expr pos:start="853:27" pos:end="853:29"><name pos:start="853:27" pos:end="853:29">ctx</name></expr></argument>, <argument pos:start="853:32" pos:end="853:44"><expr pos:start="853:32" pos:end="853:44"><operator pos:start="853:32" pos:end="853:32">&amp;</operator><name pos:start="853:33" pos:end="853:44">broadcast_id</name></expr></argument>, <argument pos:start="853:47" pos:end="853:58"><expr pos:start="853:47" pos:end="853:58"><name pos:start="853:47" pos:end="853:58">broadcast_sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="854:9" pos:end="854:50">return <expr pos:start="854:16" pos:end="854:49"><name pos:start="854:16" pos:end="854:49">DOT11DECRYPT_RET_SUCCESS_HANDSHAKE</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="857:5" pos:end="876:5"><type pos:start="857:5" pos:end="857:14"><specifier pos:start="857:5" pos:end="857:10">static</specifier> <name pos:start="857:12" pos:end="857:14">int</name></type>
    <name pos:start="858:5" pos:end="858:30">Dot11DecryptGroupHandshake</name><parameter_list pos:start="858:31" pos:end="862:28">(
        <parameter pos:start="859:9" pos:end="859:33"><decl pos:start="859:9" pos:end="859:33"><type pos:start="859:9" pos:end="859:33"><name pos:start="859:9" pos:end="859:29">PDOT11DECRYPT_CONTEXT</name></type> <name pos:start="859:31" pos:end="859:33">ctx</name></decl></parameter>,
        <parameter pos:start="860:9" pos:end="860:47"><decl pos:start="860:9" pos:end="860:47"><type pos:start="860:9" pos:end="860:47"><name pos:start="860:9" pos:end="860:34">PDOT11DECRYPT_EAPOL_PARSED</name></type> <name pos:start="860:36" pos:end="860:47">eapol_parsed</name></decl></parameter>,
        <parameter pos:start="861:9" pos:end="861:49"><decl pos:start="861:9" pos:end="861:49"><type pos:start="861:9" pos:end="861:49"><specifier pos:start="861:9" pos:end="861:13">const</specifier> <name pos:start="861:15" pos:end="861:45">DOT11DECRYPT_SEC_ASSOCIATION_ID</name> <modifier pos:start="861:47" pos:end="861:47">*</modifier></type><name pos:start="861:48" pos:end="861:49">id</name></decl></parameter>,
        <parameter pos:start="862:9" pos:end="862:27"><decl pos:start="862:9" pos:end="862:27"><type pos:start="862:9" pos:end="862:27"><specifier pos:start="862:9" pos:end="862:13">const</specifier> <name pos:start="862:15" pos:end="862:19">guint</name></type> <name pos:start="862:21" pos:end="862:27">tot_len</name></decl></parameter>)</parameter_list>
    <block pos:start="863:5" pos:end="876:5">{<block_content pos:start="865:9" pos:end="875:95">

        <if_stmt pos:start="865:9" pos:end="869:9"><if pos:start="865:9" pos:end="869:9">if <condition pos:start="865:12" pos:end="865:36">(<expr pos:start="865:13" pos:end="865:35"><operator pos:start="865:13" pos:end="865:13">(</operator><literal type="number" pos:start="865:14" pos:end="865:17">95</literal> <operator pos:start="865:17" pos:end="865:17">+</operator> <literal type="number" pos:start="865:19" pos:end="865:21">8</literal> <operator pos:start="865:21" pos:end="865:21">+</operator> <literal type="number" pos:start="865:23" pos:end="865:24">16</literal><operator pos:start="865:25" pos:end="865:25">)</operator> <operator pos:start="865:27" pos:end="865:27">&gt;</operator> <name pos:start="865:29" pos:end="865:35">tot_len</name></expr>)</condition>
        <block pos:start="866:9" pos:end="869:9">{<block_content pos:start="867:13" pos:end="868:55">
            <expr_stmt pos:start="867:13" pos:end="867:56"><expr pos:start="867:13" pos:end="867:55"><call pos:start="867:13" pos:end="867:55"><name pos:start="867:13" pos:end="867:20">ws_debug</name><argument_list pos:start="867:21" pos:end="867:55">(<argument pos:start="867:22" pos:end="867:54"><expr pos:start="867:22" pos:end="867:54"><literal type="string" pos:start="867:22" pos:end="867:54">"Message too short for Group Key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="868:13" pos:end="868:55">return <expr pos:start="868:20" pos:end="868:54"><name pos:start="868:20" pos:end="868:54">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="870:9" pos:end="874:9"><if pos:start="870:9" pos:end="874:9">if <condition pos:start="870:12" pos:end="870:69">(<expr pos:start="870:13" pos:end="870:68"><name pos:start="870:13" pos:end="870:34"><name pos:start="870:13" pos:end="870:24">eapol_parsed</name><operator pos:start="870:25" pos:end="870:26">-&gt;</operator><name pos:start="870:27" pos:end="870:34">msg_type</name></name> <operator pos:start="870:36" pos:end="870:37">!=</operator> <name pos:start="870:39" pos:end="870:68">DOT11DECRYPT_HS_MSG_TYPE_GHS_1</name></expr>)</condition>
        <block pos:start="871:9" pos:end="874:9">{<block_content pos:start="872:13" pos:end="873:55">
            <expr_stmt pos:start="872:13" pos:end="872:56"><expr pos:start="872:13" pos:end="872:55"><call pos:start="872:13" pos:end="872:55"><name pos:start="872:13" pos:end="872:22">ws_warning</name><argument_list pos:start="872:23" pos:end="872:55">(<argument pos:start="872:24" pos:end="872:54"><expr pos:start="872:24" pos:end="872:54"><literal type="string" pos:start="872:24" pos:end="872:54">"Not Group handshake message 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="873:13" pos:end="873:55">return <expr pos:start="873:20" pos:end="873:54"><name pos:start="873:20" pos:end="873:54">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return pos:start="875:9" pos:end="875:95">return <expr pos:start="875:16" pos:end="875:94"><call pos:start="875:16" pos:end="875:94"><name pos:start="875:16" pos:end="875:43">Dot11DecryptCopyBroadcastKey</name><argument_list pos:start="875:44" pos:end="875:94">(<argument pos:start="875:45" pos:end="875:47"><expr pos:start="875:45" pos:end="875:47"><name pos:start="875:45" pos:end="875:47">ctx</name></expr></argument>, <argument pos:start="875:50" pos:end="875:66"><expr pos:start="875:50" pos:end="875:66"><name pos:start="875:50" pos:end="875:66"><name pos:start="875:50" pos:end="875:61">eapol_parsed</name><operator pos:start="875:62" pos:end="875:63">-&gt;</operator><name pos:start="875:64" pos:end="875:66">gtk</name></name></expr></argument>, <argument pos:start="875:69" pos:end="875:89"><expr pos:start="875:69" pos:end="875:89"><name pos:start="875:69" pos:end="875:89"><name pos:start="875:69" pos:end="875:80">eapol_parsed</name><operator pos:start="875:81" pos:end="875:82">-&gt;</operator><name pos:start="875:83" pos:end="875:89">gtk_len</name></name></expr></argument>, <argument pos:start="875:92" pos:end="875:93"><expr pos:start="875:92" pos:end="875:93"><name pos:start="875:92" pos:end="875:93">id</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="878:5" pos:end="924:5"><type pos:start="878:5" pos:end="878:7"><name pos:start="878:5" pos:end="878:7">INT</name></type> <name pos:start="878:9" pos:end="878:36">Dot11DecryptScanEapolForKeys</name><parameter_list pos:start="878:37" pos:end="884:46">(
        <parameter pos:start="879:9" pos:end="879:33"><decl pos:start="879:9" pos:end="879:33"><type pos:start="879:9" pos:end="879:33"><name pos:start="879:9" pos:end="879:29">PDOT11DECRYPT_CONTEXT</name></type> <name pos:start="879:31" pos:end="879:33">ctx</name></decl></parameter>,
        <parameter pos:start="880:9" pos:end="880:47"><decl pos:start="880:9" pos:end="880:47"><type pos:start="880:9" pos:end="880:47"><name pos:start="880:9" pos:end="880:34">PDOT11DECRYPT_EAPOL_PARSED</name></type> <name pos:start="880:36" pos:end="880:47">eapol_parsed</name></decl></parameter>,
        <parameter pos:start="881:9" pos:end="881:31"><decl pos:start="881:9" pos:end="881:31"><type pos:start="881:9" pos:end="881:31"><specifier pos:start="881:9" pos:end="881:13">const</specifier> <name pos:start="881:15" pos:end="881:20">guint8</name> <modifier pos:start="881:22" pos:end="881:22">*</modifier></type><name pos:start="881:23" pos:end="881:31">eapol_raw</name></decl></parameter>,
        <parameter pos:start="882:9" pos:end="882:27"><decl pos:start="882:9" pos:end="882:27"><type pos:start="882:9" pos:end="882:27"><specifier pos:start="882:9" pos:end="882:13">const</specifier> <name pos:start="882:15" pos:end="882:19">guint</name></type> <name pos:start="882:21" pos:end="882:27">tot_len</name></decl></parameter>,
        <parameter pos:start="883:9" pos:end="883:47"><decl pos:start="883:9" pos:end="883:47"><type pos:start="883:9" pos:end="883:25"><specifier pos:start="883:9" pos:end="883:13">const</specifier> <name pos:start="883:15" pos:end="883:19">UCHAR</name></type> <name pos:start="883:21" pos:end="883:47"><name pos:start="883:21" pos:end="883:25">bssid</name><index pos:start="883:26" pos:end="883:47">[<expr pos:start="883:27" pos:end="883:46"><name pos:start="883:27" pos:end="883:46">DOT11DECRYPT_MAC_LEN</name></expr>]</index></name></decl></parameter>,
        <parameter pos:start="884:9" pos:end="884:45"><decl pos:start="884:9" pos:end="884:45"><type pos:start="884:9" pos:end="884:23"><specifier pos:start="884:9" pos:end="884:13">const</specifier> <name pos:start="884:15" pos:end="884:19">UCHAR</name></type> <name pos:start="884:21" pos:end="884:45"><name pos:start="884:21" pos:end="884:23">sta</name><index pos:start="884:24" pos:end="884:45">[<expr pos:start="884:25" pos:end="884:44"><name pos:start="884:25" pos:end="884:44">DOT11DECRYPT_MAC_LEN</name></expr>]</index></name></decl></parameter>)</parameter_list>
    <block pos:start="885:5" pos:end="924:5">{<block_content pos:start="886:9" pos:end="923:51">
        <decl_stmt pos:start="886:9" pos:end="886:43"><decl pos:start="886:9" pos:end="886:42"><type pos:start="886:9" pos:end="886:39"><name pos:start="886:9" pos:end="886:39">DOT11DECRYPT_SEC_ASSOCIATION_ID</name></type> <name pos:start="886:41" pos:end="886:42">id</name></decl>;</decl_stmt>

        <comment type="block" pos:start="888:9" pos:end="888:76">/* Callers provide these guarantees, so let's make them explicit. */</comment>
        <expr_stmt pos:start="889:9" pos:end="889:64"><expr pos:start="889:9" pos:end="889:63"><call pos:start="889:9" pos:end="889:63"><name pos:start="889:9" pos:end="889:24">DISSECTOR_ASSERT</name><argument_list pos:start="889:25" pos:end="889:63">(<argument pos:start="889:26" pos:end="889:62"><expr pos:start="889:26" pos:end="889:62"><name pos:start="889:26" pos:end="889:32">tot_len</name> <operator pos:start="889:34" pos:end="889:35">&lt;=</operator> <name pos:start="889:37" pos:end="889:62">DOT11DECRYPT_EAPOL_MAX_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="891:9" pos:end="891:49"><expr pos:start="891:9" pos:end="891:48"><call pos:start="891:9" pos:end="891:48"><name pos:start="891:9" pos:end="891:16">ws_debug</name><argument_list pos:start="891:17" pos:end="891:48">(<argument pos:start="891:18" pos:end="891:47"><expr pos:start="891:18" pos:end="891:47"><literal type="string" pos:start="891:18" pos:end="891:47">"Authentication: EAPOL packet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="893:9" pos:end="893:82">/* check if the key descriptor type is valid (IEEE 802.1X-2004, pg. 27) */</comment>
        <if_stmt pos:start="894:9" pos:end="900:9"><if pos:start="894:9" pos:end="900:9">if <condition pos:start="894:12" pos:end="896:42">(<comment type="block" pos:start="894:13" pos:end="894:48">/*eapol_parsed-&gt;key_type != 0x1 &amp;&amp;*/</comment>                                  <comment type="block" pos:start="894:83" pos:end="894:124">/* RC4 Key Descriptor Type (deprecated) */</comment>
                <expr pos:start="895:17" pos:end="896:41"><name pos:start="895:17" pos:end="895:38"><name pos:start="895:17" pos:end="895:28">eapol_parsed</name><operator pos:start="895:29" pos:end="895:30">-&gt;</operator><name pos:start="895:31" pos:end="895:38">key_type</name></name> <operator pos:start="895:40" pos:end="895:41">!=</operator> <literal type="number" pos:start="895:43" pos:end="895:43">2</literal> <operator pos:start="895:45" pos:end="895:46">&amp;&amp;</operator> <comment type="block" pos:start="895:48" pos:end="895:92">/* IEEE 802.11 Key Descriptor Type  (WPA2) */</comment>
            <name pos:start="896:13" pos:end="896:34"><name pos:start="896:13" pos:end="896:24">eapol_parsed</name><operator pos:start="896:25" pos:end="896:26">-&gt;</operator><name pos:start="896:27" pos:end="896:34">key_type</name></name> <operator pos:start="896:36" pos:end="896:37">!=</operator> <literal type="number" pos:start="896:39" pos:end="896:41">254</literal></expr>)</condition>        <comment type="block" pos:start="896:51" pos:end="896:95">/* 254 = RSN_KEY_DESCRIPTOR - WPA,         */</comment>
        <block pos:start="897:9" pos:end="900:9">{<block_content pos:start="898:13" pos:end="899:55">
            <expr_stmt pos:start="898:13" pos:end="898:54"><expr pos:start="898:13" pos:end="898:53"><call pos:start="898:13" pos:end="898:53"><name pos:start="898:13" pos:end="898:20">ws_debug</name><argument_list pos:start="898:21" pos:end="898:53">(<argument pos:start="898:22" pos:end="898:52"><expr pos:start="898:22" pos:end="898:52"><literal type="string" pos:start="898:22" pos:end="898:52">"Not valid key descriptor type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="899:13" pos:end="899:55">return <expr pos:start="899:20" pos:end="899:54"><name pos:start="899:20" pos:end="899:54">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="902:9" pos:end="902:79">/* search for a cached Security Association for current BSSID and AP */</comment>
        <expr_stmt pos:start="903:9" pos:end="903:54"><expr pos:start="903:9" pos:end="903:53"><call pos:start="903:9" pos:end="903:53"><name pos:start="903:9" pos:end="903:14">memcpy</name><argument_list pos:start="903:15" pos:end="903:53">(<argument pos:start="903:16" pos:end="903:23"><expr pos:start="903:16" pos:end="903:23"><name pos:start="903:16" pos:end="903:23"><name pos:start="903:16" pos:end="903:17">id</name><operator pos:start="903:18" pos:end="903:18">.</operator><name pos:start="903:19" pos:end="903:23">bssid</name></name></expr></argument>, <argument pos:start="903:26" pos:end="903:30"><expr pos:start="903:26" pos:end="903:30"><name pos:start="903:26" pos:end="903:30">bssid</name></expr></argument>, <argument pos:start="903:33" pos:end="903:52"><expr pos:start="903:33" pos:end="903:52"><name pos:start="903:33" pos:end="903:52">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="904:9" pos:end="904:50"><expr pos:start="904:9" pos:end="904:49"><call pos:start="904:9" pos:end="904:49"><name pos:start="904:9" pos:end="904:14">memcpy</name><argument_list pos:start="904:15" pos:end="904:49">(<argument pos:start="904:16" pos:end="904:21"><expr pos:start="904:16" pos:end="904:21"><name pos:start="904:16" pos:end="904:21"><name pos:start="904:16" pos:end="904:17">id</name><operator pos:start="904:18" pos:end="904:18">.</operator><name pos:start="904:19" pos:end="904:21">sta</name></name></expr></argument>, <argument pos:start="904:24" pos:end="904:26"><expr pos:start="904:24" pos:end="904:26"><name pos:start="904:24" pos:end="904:26">sta</name></expr></argument>, <argument pos:start="904:29" pos:end="904:48"><expr pos:start="904:29" pos:end="904:48"><name pos:start="904:29" pos:end="904:48">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="906:9" pos:end="922:9">switch <condition pos:start="906:16" pos:end="906:39">(<expr pos:start="906:17" pos:end="906:38"><name pos:start="906:17" pos:end="906:38"><name pos:start="906:17" pos:end="906:28">eapol_parsed</name><operator pos:start="906:29" pos:end="906:30">-&gt;</operator><name pos:start="906:31" pos:end="906:38">msg_type</name></name></expr>)</condition>
        <block pos:start="907:9" pos:end="922:9">{<block_content pos:start="908:9" pos:end="921:18">
        <case pos:start="908:9" pos:end="908:45">case <expr pos:start="908:14" pos:end="908:44"><name pos:start="908:14" pos:end="908:44">DOT11DECRYPT_HS_MSG_TYPE_4WHS_1</name></expr>:</case>
        <case pos:start="909:9" pos:end="909:45">case <expr pos:start="909:14" pos:end="909:44"><name pos:start="909:14" pos:end="909:44">DOT11DECRYPT_HS_MSG_TYPE_4WHS_2</name></expr>:</case>
        <case pos:start="910:9" pos:end="910:45">case <expr pos:start="910:14" pos:end="910:44"><name pos:start="910:14" pos:end="910:44">DOT11DECRYPT_HS_MSG_TYPE_4WHS_3</name></expr>:</case>
        <case pos:start="911:9" pos:end="911:45">case <expr pos:start="911:14" pos:end="911:44"><name pos:start="911:14" pos:end="911:44">DOT11DECRYPT_HS_MSG_TYPE_4WHS_4</name></expr>:</case>
            <return pos:start="912:13" pos:end="913:61">return <expr pos:start="912:20" pos:end="913:60"><call pos:start="912:20" pos:end="913:60"><name pos:start="912:20" pos:end="912:46">Dot11DecryptRsna4WHandshake</name><argument_list pos:start="912:47" pos:end="913:60">(<argument pos:start="912:48" pos:end="912:50"><expr pos:start="912:48" pos:end="912:50"><name pos:start="912:48" pos:end="912:50">ctx</name></expr></argument>, <argument pos:start="912:53" pos:end="912:64"><expr pos:start="912:53" pos:end="912:64"><name pos:start="912:53" pos:end="912:64">eapol_parsed</name></expr></argument>, <argument pos:start="912:67" pos:end="912:75"><expr pos:start="912:67" pos:end="912:75"><name pos:start="912:67" pos:end="912:75">eapol_raw</name></expr></argument>,
                                               <argument pos:start="913:48" pos:end="913:50"><expr pos:start="913:48" pos:end="913:50"><operator pos:start="913:48" pos:end="913:48">&amp;</operator><name pos:start="913:49" pos:end="913:50">id</name></expr></argument>, <argument pos:start="913:53" pos:end="913:59"><expr pos:start="913:53" pos:end="913:59"><name pos:start="913:53" pos:end="913:59">tot_len</name></expr></argument>)</argument_list></call></expr>;</return>
        <case pos:start="914:9" pos:end="914:44">case <expr pos:start="914:14" pos:end="914:43"><name pos:start="914:14" pos:end="914:43">DOT11DECRYPT_HS_MSG_TYPE_GHS_1</name></expr>:</case>
            <return pos:start="915:13" pos:end="915:79">return <expr pos:start="915:20" pos:end="915:78"><call pos:start="915:20" pos:end="915:78"><name pos:start="915:20" pos:end="915:45">Dot11DecryptGroupHandshake</name><argument_list pos:start="915:46" pos:end="915:78">(<argument pos:start="915:47" pos:end="915:49"><expr pos:start="915:47" pos:end="915:49"><name pos:start="915:47" pos:end="915:49">ctx</name></expr></argument>, <argument pos:start="915:52" pos:end="915:63"><expr pos:start="915:52" pos:end="915:63"><name pos:start="915:52" pos:end="915:63">eapol_parsed</name></expr></argument>, <argument pos:start="915:66" pos:end="915:68"><expr pos:start="915:66" pos:end="915:68"><operator pos:start="915:66" pos:end="915:66">&amp;</operator><name pos:start="915:67" pos:end="915:68">id</name></expr></argument>, <argument pos:start="915:71" pos:end="915:77"><expr pos:start="915:71" pos:end="915:77"><name pos:start="915:71" pos:end="915:77">tot_len</name></expr></argument>)</argument_list></call></expr>;</return>
        <case pos:start="916:9" pos:end="916:44">case <expr pos:start="916:14" pos:end="916:43"><name pos:start="916:14" pos:end="916:43">DOT11DECRYPT_HS_MSG_TYPE_GHS_2</name></expr>:</case>
            <break pos:start="917:13" pos:end="917:18">break;</break>
        <case pos:start="918:9" pos:end="918:46">case <expr pos:start="918:14" pos:end="918:45"><name pos:start="918:14" pos:end="918:45">DOT11DECRYPT_HS_MSG_TYPE_INVALID</name></expr>:</case>
        <default pos:start="919:9" pos:end="919:16">default:</default>
            <expr_stmt pos:start="920:13" pos:end="920:47"><expr pos:start="920:13" pos:end="920:46"><call pos:start="920:13" pos:end="920:46"><name pos:start="920:13" pos:end="920:22">ws_warning</name><argument_list pos:start="920:23" pos:end="920:46">(<argument pos:start="920:24" pos:end="920:45"><expr pos:start="920:24" pos:end="920:45"><literal type="string" pos:start="920:24" pos:end="920:45">"Invalid message type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="921:13" pos:end="921:18">break;</break>
        </block_content>}</block></switch>
        <return pos:start="923:9" pos:end="923:51">return <expr pos:start="923:16" pos:end="923:50"><name pos:start="923:16" pos:end="923:50">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="926:5" pos:end="938:5"><type pos:start="926:5" pos:end="926:14"><specifier pos:start="926:5" pos:end="926:10">static</specifier> <name pos:start="926:12" pos:end="926:14">int</name></type>
    <name pos:start="927:5" pos:end="927:30">Dot11DecryptGetNbrOfTkKeys</name><parameter_list pos:start="927:31" pos:end="927:57">(<parameter pos:start="927:32" pos:end="927:56"><decl pos:start="927:32" pos:end="927:56"><type pos:start="927:32" pos:end="927:52"><name pos:start="927:32" pos:end="927:52">PDOT11DECRYPT_CONTEXT</name></type> <name pos:start="927:54" pos:end="927:56">ctx</name></decl></parameter>)</parameter_list>
    <block pos:start="928:5" pos:end="938:5">{<block_content pos:start="929:9" pos:end="937:19">
        <decl_stmt pos:start="929:9" pos:end="929:20"><decl pos:start="929:9" pos:end="929:19"><type pos:start="929:9" pos:end="929:11"><name pos:start="929:9" pos:end="929:11">int</name></type> <name pos:start="929:13" pos:end="929:15">nbr</name> <init pos:start="929:17" pos:end="929:19">= <expr pos:start="929:19" pos:end="929:19"><literal type="number" pos:start="929:19" pos:end="929:19">0</literal></expr></init></decl>;</decl_stmt>
        <for pos:start="930:9" pos:end="936:9">for <control pos:start="930:13" pos:end="930:49">(<init pos:start="930:14" pos:end="930:26"><decl pos:start="930:14" pos:end="930:25"><type pos:start="930:14" pos:end="930:19"><name pos:start="930:14" pos:end="930:19">size_t</name></type> <name pos:start="930:21" pos:end="930:21">i</name> <init pos:start="930:23" pos:end="930:25">= <expr pos:start="930:25" pos:end="930:25"><literal type="number" pos:start="930:25" pos:end="930:25">0</literal></expr></init></decl>;</init> <condition pos:start="930:28" pos:end="930:44"><expr pos:start="930:28" pos:end="930:43"><name pos:start="930:28" pos:end="930:28">i</name> <operator pos:start="930:30" pos:end="930:30">&lt;</operator> <name pos:start="930:32" pos:end="930:43"><name pos:start="930:32" pos:end="930:34">ctx</name><operator pos:start="930:35" pos:end="930:36">-&gt;</operator><name pos:start="930:37" pos:end="930:43">keys_nr</name></name></expr>;</condition> <incr pos:start="930:46" pos:end="930:48"><expr pos:start="930:46" pos:end="930:48"><name pos:start="930:46" pos:end="930:46">i</name><operator pos:start="930:47" pos:end="930:48">++</operator></expr></incr>)</control>
        <block pos:start="931:9" pos:end="936:9">{<block_content pos:start="932:13" pos:end="935:13">
            <if_stmt pos:start="932:13" pos:end="935:13"><if pos:start="932:13" pos:end="935:13">if <condition pos:start="932:16" pos:end="932:65">(<expr pos:start="932:17" pos:end="932:64"><name pos:start="932:17" pos:end="932:28"><name pos:start="932:17" pos:end="932:19">ctx</name><operator pos:start="932:20" pos:end="932:21">-&gt;</operator><name pos:start="932:22" pos:end="932:25">keys</name><index pos:start="932:26" pos:end="932:28">[<expr pos:start="932:27" pos:end="932:27"><name pos:start="932:27" pos:end="932:27">i</name></expr>]</index></name><operator pos:start="932:29" pos:end="932:29">.</operator><name pos:start="932:30" pos:end="932:36">KeyType</name> <operator pos:start="932:38" pos:end="932:39">==</operator> <name pos:start="932:41" pos:end="932:64">DOT11DECRYPT_KEY_TYPE_TK</name></expr>)</condition>
            <block pos:start="933:13" pos:end="935:13">{<block_content pos:start="934:17" pos:end="934:22">
                <expr_stmt pos:start="934:17" pos:end="934:22"><expr pos:start="934:17" pos:end="934:21"><name pos:start="934:17" pos:end="934:19">nbr</name><operator pos:start="934:20" pos:end="934:21">++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return pos:start="937:9" pos:end="937:19">return <expr pos:start="937:16" pos:end="937:18"><name pos:start="937:16" pos:end="937:18">nbr</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="940:5" pos:end="1021:5"><type pos:start="940:5" pos:end="940:14"><specifier pos:start="940:5" pos:end="940:10">static</specifier> <name pos:start="940:12" pos:end="940:14">int</name></type>
    <name pos:start="941:5" pos:end="941:27">Dot11DecryptUsingUserTk</name><parameter_list pos:start="941:28" pos:end="947:40">(
        <parameter pos:start="942:9" pos:end="942:33"><decl pos:start="942:9" pos:end="942:33"><type pos:start="942:9" pos:end="942:33"><name pos:start="942:9" pos:end="942:29">PDOT11DECRYPT_CONTEXT</name></type> <name pos:start="942:31" pos:end="942:33">ctx</name></decl></parameter>,
        <parameter pos:start="943:9" pos:end="943:27"><decl pos:start="943:9" pos:end="943:27"><type pos:start="943:9" pos:end="943:27"><name pos:start="943:9" pos:end="943:13">UCHAR</name> <modifier pos:start="943:15" pos:end="943:15">*</modifier></type><name pos:start="943:16" pos:end="943:27">decrypt_data</name></decl></parameter>,
        <parameter pos:start="944:9" pos:end="944:28"><decl pos:start="944:9" pos:end="944:28"><type pos:start="944:9" pos:end="944:28"><name pos:start="944:9" pos:end="944:13">guint</name></type> <name pos:start="944:15" pos:end="944:28">mac_header_len</name></decl></parameter>,
        <parameter pos:start="945:9" pos:end="945:26"><decl pos:start="945:9" pos:end="945:26"><type pos:start="945:9" pos:end="945:26"><name pos:start="945:9" pos:end="945:13">guint</name> <modifier pos:start="945:15" pos:end="945:15">*</modifier></type><name pos:start="945:16" pos:end="945:26">decrypt_len</name></decl></parameter>,
        <parameter pos:start="946:9" pos:end="946:43"><decl pos:start="946:9" pos:end="946:43"><type pos:start="946:9" pos:end="946:43"><name pos:start="946:9" pos:end="946:39">DOT11DECRYPT_SEC_ASSOCIATION_ID</name> <modifier pos:start="946:41" pos:end="946:41">*</modifier></type><name pos:start="946:42" pos:end="946:43">id</name></decl></parameter>,
        <parameter pos:start="947:9" pos:end="947:39"><decl pos:start="947:9" pos:end="947:39"><type pos:start="947:9" pos:end="947:39"><name pos:start="947:9" pos:end="947:29">DOT11DECRYPT_KEY_ITEM</name> <modifier pos:start="947:31" pos:end="947:31">*</modifier></type><name pos:start="947:32" pos:end="947:39">used_key</name></decl></parameter>)</parameter_list>
    <block pos:start="948:5" pos:end="1021:5">{<block_content pos:start="949:9" pos:end="1020:19">
        <decl_stmt pos:start="949:9" pos:end="949:44"><decl pos:start="949:9" pos:end="949:43"><type pos:start="949:9" pos:end="949:11"><name pos:start="949:9" pos:end="949:11">int</name></type> <name pos:start="949:13" pos:end="949:15">ret</name> <init pos:start="949:17" pos:end="949:43">= <expr pos:start="949:19" pos:end="949:43"><name pos:start="949:19" pos:end="949:43">DOT11DECRYPT_RET_REQ_DATA</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="950:9" pos:end="950:65"><decl pos:start="950:9" pos:end="950:64"><type pos:start="950:9" pos:end="950:38"><name pos:start="950:9" pos:end="950:36">DOT11DECRYPT_SEC_ASSOCIATION</name> <modifier pos:start="950:38" pos:end="950:38">*</modifier></type><name pos:start="950:39" pos:end="950:40">sa</name> <init pos:start="950:42" pos:end="950:64">= <expr pos:start="950:44" pos:end="950:64"><call pos:start="950:44" pos:end="950:64"><name pos:start="950:44" pos:end="950:60">Dot11DecryptNewSa</name><argument_list pos:start="950:61" pos:end="950:64">(<argument pos:start="950:62" pos:end="950:63"><expr pos:start="950:62" pos:end="950:63"><name pos:start="950:62" pos:end="950:63">id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="951:9" pos:end="951:35"><decl pos:start="951:9" pos:end="951:34"><type pos:start="951:9" pos:end="951:31"><name pos:start="951:9" pos:end="951:29">DOT11DECRYPT_KEY_ITEM</name> <modifier pos:start="951:31" pos:end="951:31">*</modifier></type><name pos:start="951:32" pos:end="951:34">key</name></decl>;</decl_stmt>
        <if_stmt pos:start="952:9" pos:end="955:9"><if pos:start="952:9" pos:end="955:9">if <condition pos:start="952:12" pos:end="952:23">(<expr pos:start="952:13" pos:end="952:22"><name pos:start="952:13" pos:end="952:14">sa</name> <operator pos:start="952:16" pos:end="952:17">==</operator> <name pos:start="952:19" pos:end="952:22">NULL</name></expr>)</condition>
        <block pos:start="953:9" pos:end="955:9">{<block_content pos:start="954:13" pos:end="954:23">
            <return pos:start="954:13" pos:end="954:23">return <expr pos:start="954:20" pos:end="954:22"><name pos:start="954:20" pos:end="954:22">ret</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="957:9" pos:end="957:24"><expr pos:start="957:9" pos:end="957:23"><name pos:start="957:9" pos:end="957:19"><name pos:start="957:9" pos:end="957:10">sa</name><operator pos:start="957:11" pos:end="957:12">-&gt;</operator><name pos:start="957:13" pos:end="957:15">wpa</name><operator pos:start="957:16" pos:end="957:16">.</operator><name pos:start="957:17" pos:end="957:19">akm</name></name> <operator pos:start="957:21" pos:end="957:21">=</operator> <literal type="number" pos:start="957:23" pos:end="957:23">2</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="958:9" pos:end="958:28"><expr pos:start="958:9" pos:end="958:27"><name pos:start="958:9" pos:end="958:20"><name pos:start="958:9" pos:end="958:10">sa</name><operator pos:start="958:11" pos:end="958:12">-&gt;</operator><name pos:start="958:13" pos:end="958:20">validKey</name></name> <operator pos:start="958:22" pos:end="958:22">=</operator> <name pos:start="958:24" pos:end="958:27">TRUE</name></expr>;</expr_stmt>

        <comment type="block" pos:start="960:9" pos:end="960:69">/* Try decrypt packet with all user TKs applicable ciphers */</comment>
        <for pos:start="961:9" pos:end="1018:9">for <control pos:start="961:13" pos:end="961:73">(<init pos:start="961:14" pos:end="961:34"><decl pos:start="961:14" pos:end="961:33"><type pos:start="961:14" pos:end="961:19"><name pos:start="961:14" pos:end="961:19">size_t</name></type> <name pos:start="961:21" pos:end="961:29">key_index</name> <init pos:start="961:31" pos:end="961:33">= <expr pos:start="961:33" pos:end="961:33"><literal type="number" pos:start="961:33" pos:end="961:33">0</literal></expr></init></decl>;</init> <condition pos:start="961:36" pos:end="961:60"><expr pos:start="961:36" pos:end="961:59"><name pos:start="961:36" pos:end="961:44">key_index</name> <operator pos:start="961:46" pos:end="961:46">&lt;</operator> <name pos:start="961:48" pos:end="961:59"><name pos:start="961:48" pos:end="961:50">ctx</name><operator pos:start="961:51" pos:end="961:52">-&gt;</operator><name pos:start="961:53" pos:end="961:59">keys_nr</name></name></expr>;</condition> <incr pos:start="961:62" pos:end="961:72"><expr pos:start="961:62" pos:end="961:72"><name pos:start="961:62" pos:end="961:70">key_index</name><operator pos:start="961:71" pos:end="961:72">++</operator></expr></incr>)</control>
        <block pos:start="962:9" pos:end="1018:9">{<block_content pos:start="963:13" pos:end="1017:13">
            <expr_stmt pos:start="963:13" pos:end="963:40"><expr pos:start="963:13" pos:end="963:39"><name pos:start="963:13" pos:end="963:15">key</name> <operator pos:start="963:17" pos:end="963:17">=</operator> <operator pos:start="963:19" pos:end="963:19">&amp;</operator><name pos:start="963:20" pos:end="963:39"><name pos:start="963:20" pos:end="963:22">ctx</name><operator pos:start="963:23" pos:end="963:24">-&gt;</operator><name pos:start="963:25" pos:end="963:28">keys</name><index pos:start="963:29" pos:end="963:39">[<expr pos:start="963:30" pos:end="963:38"><name pos:start="963:30" pos:end="963:38">key_index</name></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt pos:start="964:13" pos:end="967:13"><if pos:start="964:13" pos:end="967:13">if <condition pos:start="964:16" pos:end="964:57">(<expr pos:start="964:17" pos:end="964:56"><name pos:start="964:17" pos:end="964:28"><name pos:start="964:17" pos:end="964:19">key</name><operator pos:start="964:20" pos:end="964:21">-&gt;</operator><name pos:start="964:22" pos:end="964:28">KeyType</name></name> <operator pos:start="964:30" pos:end="964:31">!=</operator> <name pos:start="964:33" pos:end="964:56">DOT11DECRYPT_KEY_TYPE_TK</name></expr>)</condition>
            <block pos:start="965:13" pos:end="967:13">{<block_content pos:start="966:17" pos:end="966:25">
                <continue pos:start="966:17" pos:end="966:25">continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt pos:start="968:13" pos:end="968:40"><decl pos:start="968:13" pos:end="968:39"><type pos:start="968:13" pos:end="968:15"><name pos:start="968:13" pos:end="968:15">int</name></type> <name pos:start="968:17" pos:end="968:33"><name pos:start="968:17" pos:end="968:30">ciphers_to_try</name><index pos:start="968:31" pos:end="968:33">[<expr pos:start="968:32" pos:end="968:32"><literal type="number" pos:start="968:32" pos:end="968:32">4</literal></expr>]</index></name> <init pos:start="968:35" pos:end="968:39">= <expr pos:start="968:37" pos:end="968:39"><block pos:start="968:37" pos:end="968:39">{<expr pos:start="968:38" pos:end="968:38"><literal type="number" pos:start="968:38" pos:end="968:38">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <switch pos:start="969:13" pos:end="986:13">switch <condition pos:start="969:20" pos:end="969:32">(<expr pos:start="969:21" pos:end="969:31"><name pos:start="969:21" pos:end="969:31"><name pos:start="969:21" pos:end="969:23">key</name><operator pos:start="969:24" pos:end="969:25">-&gt;</operator><name pos:start="969:26" pos:end="969:27">Tk</name><operator pos:start="969:28" pos:end="969:28">.</operator><name pos:start="969:29" pos:end="969:31">Len</name></name></expr>)</condition>
            <block pos:start="970:13" pos:end="986:13">{<block_content pos:start="971:13" pos:end="985:25">
            <case pos:start="971:13" pos:end="971:45">case <expr pos:start="971:18" pos:end="971:44"><name pos:start="971:18" pos:end="971:44">DOT11DECRYPT_WEP_40_KEY_LEN</name></expr>:</case>
            <case pos:start="972:13" pos:end="972:46">case <expr pos:start="972:18" pos:end="972:45"><name pos:start="972:18" pos:end="972:45">DOT11DECRYPT_WEP_104_KEY_LEN</name></expr>:</case>
                <comment type="block" pos:start="973:17" pos:end="973:35">/* TBD implement */</comment>
                <continue pos:start="974:17" pos:end="974:25">continue;</continue>
            <case pos:start="975:13" pos:end="975:25">case <expr pos:start="975:18" pos:end="975:24"><literal type="number" pos:start="975:18" pos:end="975:20">256</literal> <operator pos:start="975:22" pos:end="975:22">/</operator> <literal type="number" pos:start="975:24" pos:end="975:24">8</literal></expr>:</case>
                <expr_stmt pos:start="976:17" pos:end="976:38"><expr pos:start="976:17" pos:end="976:37"><name pos:start="976:17" pos:end="976:33"><name pos:start="976:17" pos:end="976:30">ciphers_to_try</name><index pos:start="976:31" pos:end="976:33">[<expr pos:start="976:32" pos:end="976:32"><literal type="number" pos:start="976:32" pos:end="976:32">0</literal></expr>]</index></name> <operator pos:start="976:35" pos:end="976:35">=</operator> <literal type="number" pos:start="976:37" pos:end="976:37">9</literal></expr>;</expr_stmt>  <comment type="block" pos:start="976:41" pos:end="976:54">/* GCMP-256 */</comment>
                <expr_stmt pos:start="977:17" pos:end="977:39"><expr pos:start="977:17" pos:end="977:38"><name pos:start="977:17" pos:end="977:33"><name pos:start="977:17" pos:end="977:30">ciphers_to_try</name><index pos:start="977:31" pos:end="977:33">[<expr pos:start="977:32" pos:end="977:32"><literal type="number" pos:start="977:32" pos:end="977:32">1</literal></expr>]</index></name> <operator pos:start="977:35" pos:end="977:35">=</operator> <literal type="number" pos:start="977:37" pos:end="977:38">10</literal></expr>;</expr_stmt> <comment type="block" pos:start="977:41" pos:end="977:54">/* CCMP-256 */</comment>
                <break pos:start="978:17" pos:end="978:22">break;</break>
            <case pos:start="979:13" pos:end="979:25">case <expr pos:start="979:18" pos:end="979:24"><literal type="number" pos:start="979:18" pos:end="979:20">128</literal> <operator pos:start="979:22" pos:end="979:22">/</operator> <literal type="number" pos:start="979:24" pos:end="979:24">8</literal></expr>:</case>
                <expr_stmt pos:start="980:17" pos:end="980:38"><expr pos:start="980:17" pos:end="980:37"><name pos:start="980:17" pos:end="980:33"><name pos:start="980:17" pos:end="980:30">ciphers_to_try</name><index pos:start="980:31" pos:end="980:33">[<expr pos:start="980:32" pos:end="980:32"><literal type="number" pos:start="980:32" pos:end="980:32">0</literal></expr>]</index></name> <operator pos:start="980:35" pos:end="980:35">=</operator> <literal type="number" pos:start="980:37" pos:end="980:37">4</literal></expr>;</expr_stmt> <comment type="block" pos:start="980:40" pos:end="980:53">/* CCMP-128 */</comment>
                <expr_stmt pos:start="981:17" pos:end="981:38"><expr pos:start="981:17" pos:end="981:37"><name pos:start="981:17" pos:end="981:33"><name pos:start="981:17" pos:end="981:30">ciphers_to_try</name><index pos:start="981:31" pos:end="981:33">[<expr pos:start="981:32" pos:end="981:32"><literal type="number" pos:start="981:32" pos:end="981:32">1</literal></expr>]</index></name> <operator pos:start="981:35" pos:end="981:35">=</operator> <literal type="number" pos:start="981:37" pos:end="981:37">8</literal></expr>;</expr_stmt> <comment type="block" pos:start="981:40" pos:end="981:53">/* GCMP-128 */</comment>
                <expr_stmt pos:start="982:17" pos:end="982:38"><expr pos:start="982:17" pos:end="982:37"><name pos:start="982:17" pos:end="982:33"><name pos:start="982:17" pos:end="982:30">ciphers_to_try</name><index pos:start="982:31" pos:end="982:33">[<expr pos:start="982:32" pos:end="982:32"><literal type="number" pos:start="982:32" pos:end="982:32">2</literal></expr>]</index></name> <operator pos:start="982:35" pos:end="982:35">=</operator> <literal type="number" pos:start="982:37" pos:end="982:37">2</literal></expr>;</expr_stmt> <comment type="block" pos:start="982:40" pos:end="982:49">/* TKIP */</comment>
                <break pos:start="983:17" pos:end="983:22">break;</break>
            <default pos:start="984:13" pos:end="984:20">default:</default>
                <continue pos:start="985:17" pos:end="985:25">continue;</continue>
            </block_content>}</block></switch>

            <expr_stmt pos:start="988:13" pos:end="988:26"><expr pos:start="988:13" pos:end="988:25"><name pos:start="988:13" pos:end="988:19"><name pos:start="988:13" pos:end="988:14">sa</name><operator pos:start="988:15" pos:end="988:16">-&gt;</operator><name pos:start="988:17" pos:end="988:19">key</name></name> <operator pos:start="988:21" pos:end="988:21">=</operator> <name pos:start="988:23" pos:end="988:25">key</name></expr>;</expr_stmt>

            <for pos:start="990:13" pos:end="1017:13">for <control pos:start="990:17" pos:end="990:56">(<init pos:start="990:18" pos:end="990:27"><decl pos:start="990:18" pos:end="990:26"><type pos:start="990:18" pos:end="990:20"><name pos:start="990:18" pos:end="990:20">int</name></type> <name pos:start="990:22" pos:end="990:22">i</name> <init pos:start="990:24" pos:end="990:26">= <expr pos:start="990:26" pos:end="990:26"><literal type="number" pos:start="990:26" pos:end="990:26">0</literal></expr></init></decl>;</init> <condition pos:start="990:29" pos:end="990:51"><expr pos:start="990:29" pos:end="990:50"><name pos:start="990:29" pos:end="990:45"><name pos:start="990:29" pos:end="990:42">ciphers_to_try</name><index pos:start="990:43" pos:end="990:45">[<expr pos:start="990:44" pos:end="990:44"><name pos:start="990:44" pos:end="990:44">i</name></expr>]</index></name> <operator pos:start="990:47" pos:end="990:48">!=</operator> <literal type="number" pos:start="990:50" pos:end="990:50">0</literal></expr>;</condition> <incr pos:start="990:53" pos:end="990:55"><expr pos:start="990:53" pos:end="990:55"><name pos:start="990:53" pos:end="990:53">i</name><operator pos:start="990:54" pos:end="990:55">++</operator></expr></incr>)</control>
            <block pos:start="991:13" pos:end="1017:13">{<block_content pos:start="992:17" pos:end="1016:17">
                <expr_stmt pos:start="992:17" pos:end="992:51"><expr pos:start="992:17" pos:end="992:50"><name pos:start="992:17" pos:end="992:30"><name pos:start="992:17" pos:end="992:18">sa</name><operator pos:start="992:19" pos:end="992:20">-&gt;</operator><name pos:start="992:21" pos:end="992:23">wpa</name><operator pos:start="992:24" pos:end="992:24">.</operator><name pos:start="992:25" pos:end="992:30">cipher</name></name> <operator pos:start="992:32" pos:end="992:32">=</operator> <name pos:start="992:34" pos:end="992:50"><name pos:start="992:34" pos:end="992:47">ciphers_to_try</name><index pos:start="992:48" pos:end="992:50">[<expr pos:start="992:49" pos:end="992:49"><name pos:start="992:49" pos:end="992:49">i</name></expr>]</index></name></expr>;</expr_stmt>
                <if_stmt pos:start="993:17" pos:end="1005:17"><if pos:start="993:17" pos:end="998:17">if <condition pos:start="993:20" pos:end="993:51">(<expr pos:start="993:21" pos:end="993:39"><name pos:start="993:21" pos:end="993:34"><name pos:start="993:21" pos:end="993:22">sa</name><operator pos:start="993:23" pos:end="993:24">-&gt;</operator><name pos:start="993:25" pos:end="993:27">wpa</name><operator pos:start="993:28" pos:end="993:28">.</operator><name pos:start="993:29" pos:end="993:34">cipher</name></name> <operator pos:start="993:36" pos:end="993:37">==</operator> <literal type="number" pos:start="993:39" pos:end="993:39">2</literal></expr> <comment type="block" pos:start="993:41" pos:end="993:50">/* TKIP */</comment>)</condition>
                <block pos:start="994:17" pos:end="998:17">{<block_content pos:start="995:21" pos:end="997:52">
                    <expr_stmt pos:start="995:21" pos:end="995:40"><expr pos:start="995:21" pos:end="995:39"><name pos:start="995:21" pos:end="995:35"><name pos:start="995:21" pos:end="995:22">sa</name><operator pos:start="995:23" pos:end="995:24">-&gt;</operator><name pos:start="995:25" pos:end="995:27">wpa</name><operator pos:start="995:28" pos:end="995:28">.</operator><name pos:start="995:29" pos:end="995:35">key_ver</name></name> <operator pos:start="995:37" pos:end="995:37">=</operator> <literal type="number" pos:start="995:39" pos:end="995:39">1</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="996:21" pos:end="997:52"><expr pos:start="996:21" pos:end="997:51"><call pos:start="996:21" pos:end="997:51"><name pos:start="996:21" pos:end="996:26">memcpy</name><argument_list pos:start="996:27" pos:end="997:51">(<argument pos:start="996:28" pos:end="996:45"><expr pos:start="996:28" pos:end="996:45"><operator pos:start="996:28" pos:end="996:28">(</operator><name pos:start="996:29" pos:end="996:39"><name pos:start="996:29" pos:end="996:30">sa</name><operator pos:start="996:31" pos:end="996:32">-&gt;</operator><name pos:start="996:33" pos:end="996:35">wpa</name><operator pos:start="996:36" pos:end="996:36">.</operator><name pos:start="996:37" pos:end="996:39">ptk</name></name> <operator pos:start="996:41" pos:end="996:41">+</operator> <literal type="number" pos:start="996:43" pos:end="996:44">32</literal><operator pos:start="996:45" pos:end="996:45">)</operator></expr></argument>,
                           <argument pos:start="997:28" pos:end="997:37"><expr pos:start="997:28" pos:end="997:37"><name pos:start="997:28" pos:end="997:37"><name pos:start="997:28" pos:end="997:30">key</name><operator pos:start="997:31" pos:end="997:32">-&gt;</operator><name pos:start="997:33" pos:end="997:34">Tk</name><operator pos:start="997:35" pos:end="997:35">.</operator><name pos:start="997:36" pos:end="997:37">Tk</name></name></expr></argument>, <argument pos:start="997:40" pos:end="997:50"><expr pos:start="997:40" pos:end="997:50"><name pos:start="997:40" pos:end="997:50"><name pos:start="997:40" pos:end="997:42">key</name><operator pos:start="997:43" pos:end="997:44">-&gt;</operator><name pos:start="997:45" pos:end="997:46">Tk</name><operator pos:start="997:47" pos:end="997:47">.</operator><name pos:start="997:48" pos:end="997:50">Len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else pos:start="999:17" pos:end="1005:17">else
                <block pos:start="1000:17" pos:end="1005:17">{<block_content pos:start="1001:21" pos:end="1004:52">
                    <expr_stmt pos:start="1001:21" pos:end="1001:40"><expr pos:start="1001:21" pos:end="1001:39"><name pos:start="1001:21" pos:end="1001:35"><name pos:start="1001:21" pos:end="1001:22">sa</name><operator pos:start="1001:23" pos:end="1001:24">-&gt;</operator><name pos:start="1001:25" pos:end="1001:27">wpa</name><operator pos:start="1001:28" pos:end="1001:28">.</operator><name pos:start="1001:29" pos:end="1001:35">key_ver</name></name> <operator pos:start="1001:37" pos:end="1001:37">=</operator> <literal type="number" pos:start="1001:39" pos:end="1001:39">2</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="1002:21" pos:end="1002:36"><expr pos:start="1002:21" pos:end="1002:35"><name pos:start="1002:21" pos:end="1002:31"><name pos:start="1002:21" pos:end="1002:22">sa</name><operator pos:start="1002:23" pos:end="1002:24">-&gt;</operator><name pos:start="1002:25" pos:end="1002:27">wpa</name><operator pos:start="1002:28" pos:end="1002:28">.</operator><name pos:start="1002:29" pos:end="1002:31">akm</name></name> <operator pos:start="1002:33" pos:end="1002:33">=</operator> <literal type="number" pos:start="1002:35" pos:end="1002:35">2</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="1003:21" pos:end="1004:52"><expr pos:start="1003:21" pos:end="1004:51"><call pos:start="1003:21" pos:end="1004:51"><name pos:start="1003:21" pos:end="1003:26">memcpy</name><argument_list pos:start="1003:27" pos:end="1004:51">(<argument pos:start="1003:28" pos:end="1003:136"><expr pos:start="1003:28" pos:end="1003:136"><operator pos:start="1003:28" pos:end="1003:28">(</operator><name pos:start="1003:29" pos:end="1003:39"><name pos:start="1003:29" pos:end="1003:30">sa</name><operator pos:start="1003:31" pos:end="1003:32">-&gt;</operator><name pos:start="1003:33" pos:end="1003:35">wpa</name><operator pos:start="1003:36" pos:end="1003:36">.</operator><name pos:start="1003:37" pos:end="1003:39">ptk</name></name> <operator pos:start="1003:41" pos:end="1003:41">+</operator> <operator pos:start="1003:43" pos:end="1003:43">(</operator><operator pos:start="1003:44" pos:end="1003:44">(</operator><operator pos:start="1003:45" pos:end="1003:45">(</operator><operator pos:start="1003:46" pos:end="1003:46">(</operator><operator pos:start="1003:47" pos:end="1003:47">(</operator><literal type="number" pos:start="1003:48" pos:end="1003:48">0</literal><operator pos:start="1003:49" pos:end="1003:49">)</operator> <operator pos:start="1003:51" pos:end="1003:51">+</operator> <call pos:start="1003:53" pos:end="1003:86"><name pos:start="1003:53" pos:end="1003:73">Dot11DecryptGetKckLen</name><argument_list pos:start="1003:74" pos:end="1003:86">(<argument pos:start="1003:75" pos:end="1003:85"><expr pos:start="1003:75" pos:end="1003:85"><name pos:start="1003:75" pos:end="1003:85"><name pos:start="1003:75" pos:end="1003:76">sa</name><operator pos:start="1003:77" pos:end="1003:78">-&gt;</operator><name pos:start="1003:79" pos:end="1003:81">wpa</name><operator pos:start="1003:82" pos:end="1003:82">.</operator><name pos:start="1003:83" pos:end="1003:85">akm</name></name></expr></argument>)</argument_list></call> <operator pos:start="1003:88" pos:end="1003:88">/</operator> <literal type="number" pos:start="1003:90" pos:end="1003:90">8</literal><operator pos:start="1003:91" pos:end="1003:91">)</operator><operator pos:start="1003:92" pos:end="1003:92">)</operator> <operator pos:start="1003:94" pos:end="1003:94">+</operator> <call pos:start="1003:96" pos:end="1003:129"><name pos:start="1003:96" pos:end="1003:116">Dot11DecryptGetKekLen</name><argument_list pos:start="1003:117" pos:end="1003:129">(<argument pos:start="1003:118" pos:end="1003:128"><expr pos:start="1003:118" pos:end="1003:128"><name pos:start="1003:118" pos:end="1003:128"><name pos:start="1003:118" pos:end="1003:119">sa</name><operator pos:start="1003:120" pos:end="1003:121">-&gt;</operator><name pos:start="1003:122" pos:end="1003:124">wpa</name><operator pos:start="1003:125" pos:end="1003:125">.</operator><name pos:start="1003:126" pos:end="1003:128">akm</name></name></expr></argument>)</argument_list></call> <operator pos:start="1003:131" pos:end="1003:131">/</operator> <literal type="number" pos:start="1003:133" pos:end="1003:133">8</literal><operator pos:start="1003:134" pos:end="1003:134">)</operator><operator pos:start="1003:135" pos:end="1003:135">)</operator><operator pos:start="1003:136" pos:end="1003:136">)</operator></expr></argument>,
                           <argument pos:start="1004:28" pos:end="1004:37"><expr pos:start="1004:28" pos:end="1004:37"><name pos:start="1004:28" pos:end="1004:37"><name pos:start="1004:28" pos:end="1004:30">key</name><operator pos:start="1004:31" pos:end="1004:32">-&gt;</operator><name pos:start="1004:33" pos:end="1004:34">Tk</name><operator pos:start="1004:35" pos:end="1004:35">.</operator><name pos:start="1004:36" pos:end="1004:37">Tk</name></name></expr></argument>, <argument pos:start="1004:40" pos:end="1004:50"><expr pos:start="1004:40" pos:end="1004:50"><name pos:start="1004:40" pos:end="1004:50"><name pos:start="1004:40" pos:end="1004:42">key</name><operator pos:start="1004:43" pos:end="1004:44">-&gt;</operator><name pos:start="1004:45" pos:end="1004:46">Tk</name><operator pos:start="1004:47" pos:end="1004:47">.</operator><name pos:start="1004:48" pos:end="1004:50">Len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt pos:start="1006:17" pos:end="1006:89"><expr pos:start="1006:17" pos:end="1006:88"><name pos:start="1006:17" pos:end="1006:31"><name pos:start="1006:17" pos:end="1006:18">sa</name><operator pos:start="1006:19" pos:end="1006:20">-&gt;</operator><name pos:start="1006:21" pos:end="1006:23">wpa</name><operator pos:start="1006:24" pos:end="1006:24">.</operator><name pos:start="1006:25" pos:end="1006:31">ptk_len</name></name> <operator pos:start="1006:33" pos:end="1006:33">=</operator> <call pos:start="1006:35" pos:end="1006:84"><name pos:start="1006:35" pos:end="1006:55">Dot11DecryptGetPtkLen</name><argument_list pos:start="1006:56" pos:end="1006:84">(<argument pos:start="1006:57" pos:end="1006:67"><expr pos:start="1006:57" pos:end="1006:67"><name pos:start="1006:57" pos:end="1006:67"><name pos:start="1006:57" pos:end="1006:58">sa</name><operator pos:start="1006:59" pos:end="1006:60">-&gt;</operator><name pos:start="1006:61" pos:end="1006:63">wpa</name><operator pos:start="1006:64" pos:end="1006:64">.</operator><name pos:start="1006:65" pos:end="1006:67">akm</name></name></expr></argument>, <argument pos:start="1006:70" pos:end="1006:83"><expr pos:start="1006:70" pos:end="1006:83"><name pos:start="1006:70" pos:end="1006:83"><name pos:start="1006:70" pos:end="1006:71">sa</name><operator pos:start="1006:72" pos:end="1006:73">-&gt;</operator><name pos:start="1006:74" pos:end="1006:76">wpa</name><operator pos:start="1006:77" pos:end="1006:77">.</operator><name pos:start="1006:78" pos:end="1006:83">cipher</name></name></expr></argument>)</argument_list></call> <operator pos:start="1006:86" pos:end="1006:86">/</operator> <literal type="number" pos:start="1006:88" pos:end="1006:88">8</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="1007:17" pos:end="1007:99"><expr pos:start="1007:17" pos:end="1007:98"><name pos:start="1007:17" pos:end="1007:19">ret</name> <operator pos:start="1007:21" pos:end="1007:21">=</operator> <call pos:start="1007:23" pos:end="1007:98"><name pos:start="1007:23" pos:end="1007:41">Dot11DecryptRsnaMng</name><argument_list pos:start="1007:42" pos:end="1007:98">(<argument pos:start="1007:43" pos:end="1007:54"><expr pos:start="1007:43" pos:end="1007:54"><name pos:start="1007:43" pos:end="1007:54">decrypt_data</name></expr></argument>, <argument pos:start="1007:57" pos:end="1007:70"><expr pos:start="1007:57" pos:end="1007:70"><name pos:start="1007:57" pos:end="1007:70">mac_header_len</name></expr></argument>, <argument pos:start="1007:73" pos:end="1007:83"><expr pos:start="1007:73" pos:end="1007:83"><name pos:start="1007:73" pos:end="1007:83">decrypt_len</name></expr></argument>, <argument pos:start="1007:86" pos:end="1007:93"><expr pos:start="1007:86" pos:end="1007:93"><name pos:start="1007:86" pos:end="1007:93">used_key</name></expr></argument>, <argument pos:start="1007:96" pos:end="1007:97"><expr pos:start="1007:96" pos:end="1007:97"><name pos:start="1007:96" pos:end="1007:97">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="1008:17" pos:end="1016:17"><if pos:start="1008:17" pos:end="1016:17">if <condition pos:start="1008:20" pos:end="1008:52">(<expr pos:start="1008:21" pos:end="1008:51"><name pos:start="1008:21" pos:end="1008:23">ret</name> <operator pos:start="1008:25" pos:end="1008:26">==</operator> <name pos:start="1008:28" pos:end="1008:51">DOT11DECRYPT_RET_SUCCESS</name></expr>)</condition>
                <block pos:start="1009:17" pos:end="1016:17">{<block_content pos:start="1014:21" pos:end="1015:31">
                    <comment type="block" pos:start="1010:21" pos:end="1013:23">/* Successfully decrypted using user TK. Add SA formed from user TK so that
                     * subsequent frames can be decrypted much faster using normal code path
                     * without trying each and every user TK entered.
                     */</comment>
                    <expr_stmt pos:start="1014:21" pos:end="1014:51"><expr pos:start="1014:21" pos:end="1014:50"><call pos:start="1014:21" pos:end="1014:50"><name pos:start="1014:21" pos:end="1014:37">Dot11DecryptAddSa</name><argument_list pos:start="1014:38" pos:end="1014:50">(<argument pos:start="1014:39" pos:end="1014:41"><expr pos:start="1014:39" pos:end="1014:41"><name pos:start="1014:39" pos:end="1014:41">ctx</name></expr></argument>, <argument pos:start="1014:44" pos:end="1014:45"><expr pos:start="1014:44" pos:end="1014:45"><name pos:start="1014:44" pos:end="1014:45">id</name></expr></argument>, <argument pos:start="1014:48" pos:end="1014:49"><expr pos:start="1014:48" pos:end="1014:49"><name pos:start="1014:48" pos:end="1014:49">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:start="1015:21" pos:end="1015:31">return <expr pos:start="1015:28" pos:end="1015:30"><name pos:start="1015:28" pos:end="1015:30">ret</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <expr_stmt pos:start="1019:9" pos:end="1019:19"><expr pos:start="1019:9" pos:end="1019:18"><call pos:start="1019:9" pos:end="1019:18"><name pos:start="1019:9" pos:end="1019:14">g_free</name><argument_list pos:start="1019:15" pos:end="1019:18">(<argument pos:start="1019:16" pos:end="1019:17"><expr pos:start="1019:16" pos:end="1019:17"><name pos:start="1019:16" pos:end="1019:17">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1020:9" pos:end="1020:19">return <expr pos:start="1020:16" pos:end="1020:18"><name pos:start="1020:16" pos:end="1020:18">ret</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="1023:5" pos:end="1126:5"><type pos:start="1023:5" pos:end="1023:7"><name pos:start="1023:5" pos:end="1023:7">INT</name></type> <name pos:start="1023:9" pos:end="1023:33">Dot11DecryptDecryptPacket</name><parameter_list pos:start="1023:34" pos:end="1030:35">(
        <parameter pos:start="1024:9" pos:end="1024:33"><decl pos:start="1024:9" pos:end="1024:33"><type pos:start="1024:9" pos:end="1024:33"><name pos:start="1024:9" pos:end="1024:29">PDOT11DECRYPT_CONTEXT</name></type> <name pos:start="1024:31" pos:end="1024:33">ctx</name></decl></parameter>,
        <parameter pos:start="1025:9" pos:end="1025:26"><decl pos:start="1025:9" pos:end="1025:26"><type pos:start="1025:9" pos:end="1025:26"><specifier pos:start="1025:9" pos:end="1025:13">const</specifier> <name pos:start="1025:15" pos:end="1025:20">guint8</name> <modifier pos:start="1025:22" pos:end="1025:22">*</modifier></type><name pos:start="1025:23" pos:end="1025:26">data</name></decl></parameter>,
        <parameter pos:start="1026:9" pos:end="1026:34"><decl pos:start="1026:9" pos:end="1026:34"><type pos:start="1026:9" pos:end="1026:34"><specifier pos:start="1026:9" pos:end="1026:13">const</specifier> <name pos:start="1026:15" pos:end="1026:19">guint</name></type> <name pos:start="1026:21" pos:end="1026:34">mac_header_len</name></decl></parameter>,
        <parameter pos:start="1027:9" pos:end="1027:27"><decl pos:start="1027:9" pos:end="1027:27"><type pos:start="1027:9" pos:end="1027:27"><specifier pos:start="1027:9" pos:end="1027:13">const</specifier> <name pos:start="1027:15" pos:end="1027:19">guint</name></type> <name pos:start="1027:21" pos:end="1027:27">tot_len</name></decl></parameter>,
        <parameter pos:start="1028:9" pos:end="1028:27"><decl pos:start="1028:9" pos:end="1028:27"><type pos:start="1028:9" pos:end="1028:27"><name pos:start="1028:9" pos:end="1028:13">UCHAR</name> <modifier pos:start="1028:15" pos:end="1028:15">*</modifier></type><name pos:start="1028:16" pos:end="1028:27">decrypt_data</name></decl></parameter>,
        <parameter pos:start="1029:9" pos:end="1029:26"><decl pos:start="1029:9" pos:end="1029:26"><type pos:start="1029:9" pos:end="1029:26"><name pos:start="1029:9" pos:end="1029:13">guint</name> <modifier pos:start="1029:15" pos:end="1029:15">*</modifier></type><name pos:start="1029:16" pos:end="1029:26">decrypt_len</name></decl></parameter>,
        <parameter pos:start="1030:9" pos:end="1030:34"><decl pos:start="1030:9" pos:end="1030:34"><type pos:start="1030:9" pos:end="1030:34"><name pos:start="1030:9" pos:end="1030:30">PDOT11DECRYPT_KEY_ITEM</name></type> <name pos:start="1030:32" pos:end="1030:34">key</name></decl></parameter>)</parameter_list>
    <block pos:start="1031:5" pos:end="1126:5">{<block_content pos:start="1032:9" pos:end="1125:42">
        <decl_stmt pos:start="1032:9" pos:end="1032:43"><decl pos:start="1032:9" pos:end="1032:42"><type pos:start="1032:9" pos:end="1032:39"><name pos:start="1032:9" pos:end="1032:39">DOT11DECRYPT_SEC_ASSOCIATION_ID</name></type> <name pos:start="1032:41" pos:end="1032:42">id</name></decl>;</decl_stmt>
        <expr_stmt pos:start="1033:9" pos:end="1033:39"><expr pos:start="1033:9" pos:end="1033:38"><call pos:start="1033:9" pos:end="1033:38"><name pos:start="1033:9" pos:end="1033:24">DISSECTOR_ASSERT</name><argument_list pos:start="1033:25" pos:end="1033:38">(<argument pos:start="1033:26" pos:end="1033:37"><expr pos:start="1033:26" pos:end="1033:37"><name pos:start="1033:26" pos:end="1033:37">decrypt_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1034:9" pos:end="1034:38"><expr pos:start="1034:9" pos:end="1034:37"><call pos:start="1034:9" pos:end="1034:37"><name pos:start="1034:9" pos:end="1034:24">DISSECTOR_ASSERT</name><argument_list pos:start="1034:25" pos:end="1034:37">(<argument pos:start="1034:26" pos:end="1034:36"><expr pos:start="1034:26" pos:end="1034:36"><name pos:start="1034:26" pos:end="1034:36">decrypt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1036:9" pos:end="1039:9"><if pos:start="1036:9" pos:end="1039:9">if <condition pos:start="1036:12" pos:end="1036:24">(<expr pos:start="1036:13" pos:end="1036:23"><name pos:start="1036:13" pos:end="1036:23">decrypt_len</name></expr>)</condition>
        <block pos:start="1037:9" pos:end="1039:9">{<block_content pos:start="1038:13" pos:end="1038:29">
            <expr_stmt pos:start="1038:13" pos:end="1038:29"><expr pos:start="1038:13" pos:end="1038:28"><operator pos:start="1038:13" pos:end="1038:13">*</operator><name pos:start="1038:14" pos:end="1038:24">decrypt_len</name> <operator pos:start="1038:26" pos:end="1038:26">=</operator> <literal type="number" pos:start="1038:28" pos:end="1038:28">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="1040:9" pos:end="1044:9"><if pos:start="1040:9" pos:end="1044:9">if <condition pos:start="1040:12" pos:end="1040:24">(<expr pos:start="1040:13" pos:end="1040:23"><name pos:start="1040:13" pos:end="1040:15">ctx</name> <operator pos:start="1040:17" pos:end="1040:18">==</operator> <name pos:start="1040:20" pos:end="1040:23">NULL</name></expr>)</condition>
        <block pos:start="1041:9" pos:end="1044:9">{<block_content pos:start="1042:13" pos:end="1043:45">
            <expr_stmt pos:start="1042:13" pos:end="1042:39"><expr pos:start="1042:13" pos:end="1042:38"><call pos:start="1042:13" pos:end="1042:38"><name pos:start="1042:13" pos:end="1042:22">ws_warning</name><argument_list pos:start="1042:23" pos:end="1042:38">(<argument pos:start="1042:24" pos:end="1042:37"><expr pos:start="1042:24" pos:end="1042:37"><literal type="string" pos:start="1042:24" pos:end="1042:37">"NULL context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1043:13" pos:end="1043:45">return <expr pos:start="1043:20" pos:end="1043:44"><name pos:start="1043:20" pos:end="1043:44">DOT11DECRYPT_RET_REQ_DATA</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="1045:9" pos:end="1049:9"><if pos:start="1045:9" pos:end="1049:9">if <condition pos:start="1045:12" pos:end="1045:41">(<expr pos:start="1045:13" pos:end="1045:40"><name pos:start="1045:13" pos:end="1045:16">data</name> <operator pos:start="1045:18" pos:end="1045:19">==</operator> <name pos:start="1045:21" pos:end="1045:24">NULL</name> <operator pos:start="1045:26" pos:end="1045:27">||</operator> <name pos:start="1045:29" pos:end="1045:35">tot_len</name> <operator pos:start="1045:37" pos:end="1045:38">==</operator> <literal type="number" pos:start="1045:40" pos:end="1045:40">0</literal></expr>)</condition>
        <block pos:start="1046:9" pos:end="1049:9">{<block_content pos:start="1047:13" pos:end="1048:45">
            <expr_stmt pos:start="1047:13" pos:end="1047:46"><expr pos:start="1047:13" pos:end="1047:45"><call pos:start="1047:13" pos:end="1047:45"><name pos:start="1047:13" pos:end="1047:20">ws_debug</name><argument_list pos:start="1047:21" pos:end="1047:45">(<argument pos:start="1047:22" pos:end="1047:44"><expr pos:start="1047:22" pos:end="1047:44"><literal type="string" pos:start="1047:22" pos:end="1047:44">"NULL data or length=0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1048:13" pos:end="1048:45">return <expr pos:start="1048:20" pos:end="1048:44"><name pos:start="1048:20" pos:end="1048:44">DOT11DECRYPT_RET_REQ_DATA</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1051:9" pos:end="1051:92">/* check correct packet size, to avoid wrong elaboration of encryption algorithms */</comment>
        <if_stmt pos:start="1052:9" pos:end="1056:9"><if pos:start="1052:9" pos:end="1056:9">if <condition pos:start="1052:12" pos:end="1052:80">(<expr pos:start="1052:13" pos:end="1052:79"><name pos:start="1052:13" pos:end="1052:19">tot_len</name> <operator pos:start="1052:21" pos:end="1052:21">&lt;</operator> <operator pos:start="1052:23" pos:end="1052:23">(</operator><name pos:start="1052:24" pos:end="1052:27">UINT</name><operator pos:start="1052:28" pos:end="1052:28">)</operator><operator pos:start="1052:29" pos:end="1052:29">(</operator><name pos:start="1052:30" pos:end="1052:43">mac_header_len</name> <operator pos:start="1052:45" pos:end="1052:45">+</operator> <name pos:start="1052:47" pos:end="1052:78">DOT11DECRYPT_CRYPTED_DATA_MINLEN</name><operator pos:start="1052:79" pos:end="1052:79">)</operator></expr>)</condition>
        <block pos:start="1053:9" pos:end="1056:9">{<block_content pos:start="1054:13" pos:end="1055:52">
            <expr_stmt pos:start="1054:13" pos:end="1054:48"><expr pos:start="1054:13" pos:end="1054:47"><call pos:start="1054:13" pos:end="1054:47"><name pos:start="1054:13" pos:end="1054:20">ws_debug</name><argument_list pos:start="1054:21" pos:end="1054:47">(<argument pos:start="1054:22" pos:end="1054:46"><expr pos:start="1054:22" pos:end="1054:46"><literal type="string" pos:start="1054:22" pos:end="1054:46">"minimum length violated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1055:13" pos:end="1055:52">return <expr pos:start="1055:20" pos:end="1055:51"><name pos:start="1055:20" pos:end="1055:51">DOT11DECRYPT_RET_WRONG_DATA_SIZE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1058:9" pos:end="1058:75">/* Assume that the decrypt_data field is no more than this size. */</comment>
        <if_stmt pos:start="1059:9" pos:end="1063:9"><if pos:start="1059:9" pos:end="1063:9">if <condition pos:start="1059:12" pos:end="1059:46">(<expr pos:start="1059:13" pos:end="1059:45"><name pos:start="1059:13" pos:end="1059:19">tot_len</name> <operator pos:start="1059:21" pos:end="1059:21">&gt;</operator> <name pos:start="1059:23" pos:end="1059:45">DOT11DECRYPT_MAX_CAPLEN</name></expr>)</condition>
        <block pos:start="1060:9" pos:end="1063:9">{<block_content pos:start="1061:13" pos:end="1062:46">
            <expr_stmt pos:start="1061:13" pos:end="1061:41"><expr pos:start="1061:13" pos:end="1061:40"><call pos:start="1061:13" pos:end="1061:40"><name pos:start="1061:13" pos:end="1061:20">ws_debug</name><argument_list pos:start="1061:21" pos:end="1061:40">(<argument pos:start="1061:22" pos:end="1061:39"><expr pos:start="1061:22" pos:end="1061:39"><literal type="string" pos:start="1061:22" pos:end="1061:39">"length too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1062:13" pos:end="1062:46">return <expr pos:start="1062:20" pos:end="1062:45"><name pos:start="1062:20" pos:end="1062:45">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1065:9" pos:end="1065:35">/* get STA/BSSID address */</comment>
        <if_stmt pos:start="1066:9" pos:end="1070:9"><if pos:start="1066:9" pos:end="1070:9">if <condition pos:start="1066:12" pos:end="1066:116">(<expr pos:start="1066:13" pos:end="1066:115"><call pos:start="1066:13" pos:end="1066:87"><name pos:start="1066:13" pos:end="1066:36">Dot11DecryptGetSaAddress</name><argument_list pos:start="1066:37" pos:end="1066:87">(<argument pos:start="1066:38" pos:end="1066:81"><expr pos:start="1066:38" pos:end="1066:81"><operator pos:start="1066:38" pos:end="1066:38">(</operator><specifier pos:start="1066:39" pos:end="1066:43">const</specifier> <name pos:start="1066:45" pos:end="1066:72">DOT11DECRYPT_MAC_FRAME_ADDR4</name> <operator pos:start="1066:74" pos:end="1066:74">*</operator><operator pos:start="1066:75" pos:end="1066:75">)</operator><operator pos:start="1066:76" pos:end="1066:76">(</operator><name pos:start="1066:77" pos:end="1066:80">data</name><operator pos:start="1066:81" pos:end="1066:81">)</operator></expr></argument>, <argument pos:start="1066:84" pos:end="1066:86"><expr pos:start="1066:84" pos:end="1066:86"><operator pos:start="1066:84" pos:end="1066:84">&amp;</operator><name pos:start="1066:85" pos:end="1066:86">id</name></expr></argument>)</argument_list></call> <operator pos:start="1066:89" pos:end="1066:90">!=</operator> <name pos:start="1066:92" pos:end="1066:115">DOT11DECRYPT_RET_SUCCESS</name></expr>)</condition>
        <block pos:start="1067:9" pos:end="1070:9">{<block_content pos:start="1068:13" pos:end="1069:45">
            <expr_stmt pos:start="1068:13" pos:end="1068:44"><expr pos:start="1068:13" pos:end="1068:43"><call pos:start="1068:13" pos:end="1068:43"><name pos:start="1068:13" pos:end="1068:20">ws_noisy</name><argument_list pos:start="1068:21" pos:end="1068:43">(<argument pos:start="1068:22" pos:end="1068:42"><expr pos:start="1068:22" pos:end="1068:42"><literal type="string" pos:start="1068:22" pos:end="1068:42">"STA/BSSID not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1069:13" pos:end="1069:45">return <expr pos:start="1069:20" pos:end="1069:44"><name pos:start="1069:20" pos:end="1069:44">DOT11DECRYPT_RET_REQ_DATA</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1072:9" pos:end="1072:85">/* check if data is encrypted (use the WEP bit in the Frame Control field) */</comment>
        <if_stmt pos:start="1073:9" pos:end="1076:9"><if pos:start="1073:9" pos:end="1076:9">if <condition pos:start="1073:12" pos:end="1073:43">(<expr pos:start="1073:13" pos:end="1073:42"><call pos:start="1073:13" pos:end="1073:37"><name pos:start="1073:13" pos:end="1073:28">DOT11DECRYPT_WEP</name><argument_list pos:start="1073:29" pos:end="1073:37">(<argument pos:start="1073:30" pos:end="1073:36"><expr pos:start="1073:30" pos:end="1073:36"><name pos:start="1073:30" pos:end="1073:36"><name pos:start="1073:30" pos:end="1073:33">data</name><index pos:start="1073:34" pos:end="1073:36">[<expr pos:start="1073:35" pos:end="1073:35"><literal type="number" pos:start="1073:35" pos:end="1073:35">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="1073:39" pos:end="1073:40">==</operator> <literal type="number" pos:start="1073:42" pos:end="1073:42">0</literal></expr>)</condition>
        <block pos:start="1074:9" pos:end="1076:9">{<block_content pos:start="1075:13" pos:end="1075:54">
            <return pos:start="1075:13" pos:end="1075:54">return <expr pos:start="1075:20" pos:end="1075:53"><name pos:start="1075:20" pos:end="1075:53">DOT11DECRYPT_RET_NO_DATA_ENCRYPTED</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt pos:start="1077:9" pos:end="1077:41"><decl pos:start="1077:9" pos:end="1077:40"><type pos:start="1077:9" pos:end="1077:37"><name pos:start="1077:9" pos:end="1077:37">PDOT11DECRYPT_SEC_ASSOCIATION</name></type> <name pos:start="1077:39" pos:end="1077:40">sa</name></decl>;</decl_stmt>

        <comment type="block" pos:start="1079:9" pos:end="1079:50">/* create new header and data to modify */</comment>
        <expr_stmt pos:start="1080:9" pos:end="1080:31"><expr pos:start="1080:9" pos:end="1080:30"><operator pos:start="1080:9" pos:end="1080:9">*</operator><name pos:start="1080:10" pos:end="1080:20">decrypt_len</name> <operator pos:start="1080:22" pos:end="1080:22">=</operator> <name pos:start="1080:24" pos:end="1080:30">tot_len</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1081:9" pos:end="1081:49"><expr pos:start="1081:9" pos:end="1081:48"><call pos:start="1081:9" pos:end="1081:48"><name pos:start="1081:9" pos:end="1081:14">memcpy</name><argument_list pos:start="1081:15" pos:end="1081:48">(<argument pos:start="1081:16" pos:end="1081:27"><expr pos:start="1081:16" pos:end="1081:27"><name pos:start="1081:16" pos:end="1081:27">decrypt_data</name></expr></argument>, <argument pos:start="1081:30" pos:end="1081:33"><expr pos:start="1081:30" pos:end="1081:33"><name pos:start="1081:30" pos:end="1081:33">data</name></expr></argument>, <argument pos:start="1081:36" pos:end="1081:47"><expr pos:start="1081:36" pos:end="1081:47"><operator pos:start="1081:36" pos:end="1081:36">*</operator><name pos:start="1081:37" pos:end="1081:47">decrypt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1083:9" pos:end="1083:28">/* encrypted data */</comment>
        <expr_stmt pos:start="1084:9" pos:end="1084:35"><expr pos:start="1084:9" pos:end="1084:34"><call pos:start="1084:9" pos:end="1084:34"><name pos:start="1084:9" pos:end="1084:16">ws_noisy</name><argument_list pos:start="1084:17" pos:end="1084:34">(<argument pos:start="1084:18" pos:end="1084:33"><expr pos:start="1084:18" pos:end="1084:33"><literal type="string" pos:start="1084:18" pos:end="1084:33">"Encrypted data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1086:9" pos:end="1086:93">/* check the Extension IV to distinguish between WEP encryption and WPA encryption */</comment>
        <comment type="block" pos:start="1087:9" pos:end="1087:69">/* refer to IEEE 802.11i-2004, 8.2.1.2, pag.35 for WEP,    */</comment>
        <comment type="block" pos:start="1088:9" pos:end="1088:69">/*          IEEE 802.11i-2004, 8.3.2.2, pag. 45 for TKIP,  */</comment>
        <comment type="block" pos:start="1089:9" pos:end="1089:69">/*          IEEE 802.11i-2004, 8.3.3.2, pag. 57 for CCMP   */</comment>
        <if_stmt pos:start="1090:9" pos:end="1124:9"><if pos:start="1090:9" pos:end="1094:9">if <condition pos:start="1090:12" pos:end="1090:62">(<expr pos:start="1090:13" pos:end="1090:61"><call pos:start="1090:13" pos:end="1090:56"><name pos:start="1090:13" pos:end="1090:30">DOT11DECRYPT_EXTIV</name><argument_list pos:start="1090:31" pos:end="1090:56">(<argument pos:start="1090:32" pos:end="1090:55"><expr pos:start="1090:32" pos:end="1090:55"><name pos:start="1090:32" pos:end="1090:55"><name pos:start="1090:32" pos:end="1090:35">data</name><index pos:start="1090:36" pos:end="1090:55">[<expr pos:start="1090:37" pos:end="1090:54"><name pos:start="1090:37" pos:end="1090:50">mac_header_len</name> <operator pos:start="1090:52" pos:end="1090:52">+</operator> <literal type="number" pos:start="1090:54" pos:end="1090:54">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="1090:58" pos:end="1090:59">==</operator> <literal type="number" pos:start="1090:61" pos:end="1090:61">0</literal></expr>)</condition>
        <block pos:start="1091:9" pos:end="1094:9">{<block_content pos:start="1092:13" pos:end="1093:96">
            <expr_stmt pos:start="1092:13" pos:end="1092:39"><expr pos:start="1092:13" pos:end="1092:38"><call pos:start="1092:13" pos:end="1092:38"><name pos:start="1092:13" pos:end="1092:20">ws_noisy</name><argument_list pos:start="1092:21" pos:end="1092:38">(<argument pos:start="1092:22" pos:end="1092:37"><expr pos:start="1092:22" pos:end="1092:37"><literal type="string" pos:start="1092:22" pos:end="1092:37">"WEP encryption"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1093:13" pos:end="1093:96">return <expr pos:start="1093:20" pos:end="1093:95"><call pos:start="1093:20" pos:end="1093:95"><name pos:start="1093:20" pos:end="1093:37">Dot11DecryptWepMng</name><argument_list pos:start="1093:38" pos:end="1093:95">(<argument pos:start="1093:39" pos:end="1093:41"><expr pos:start="1093:39" pos:end="1093:41"><name pos:start="1093:39" pos:end="1093:41">ctx</name></expr></argument>, <argument pos:start="1093:44" pos:end="1093:55"><expr pos:start="1093:44" pos:end="1093:55"><name pos:start="1093:44" pos:end="1093:55">decrypt_data</name></expr></argument>, <argument pos:start="1093:58" pos:end="1093:71"><expr pos:start="1093:58" pos:end="1093:71"><name pos:start="1093:58" pos:end="1093:71">mac_header_len</name></expr></argument>, <argument pos:start="1093:74" pos:end="1093:84"><expr pos:start="1093:74" pos:end="1093:84"><name pos:start="1093:74" pos:end="1093:84">decrypt_len</name></expr></argument>, <argument pos:start="1093:87" pos:end="1093:89"><expr pos:start="1093:87" pos:end="1093:89"><name pos:start="1093:87" pos:end="1093:89">key</name></expr></argument>, <argument pos:start="1093:92" pos:end="1093:94"><expr pos:start="1093:92" pos:end="1093:94"><operator pos:start="1093:92" pos:end="1093:92">&amp;</operator><name pos:start="1093:93" pos:end="1093:94">id</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <else pos:start="1095:9" pos:end="1124:9">else
        <block pos:start="1096:9" pos:end="1124:9">{<block_content pos:start="1097:13" pos:end="1123:23">
            <expr_stmt pos:start="1097:13" pos:end="1097:48"><expr pos:start="1097:13" pos:end="1097:47"><call pos:start="1097:13" pos:end="1097:47"><name pos:start="1097:13" pos:end="1097:20">ws_noisy</name><argument_list pos:start="1097:21" pos:end="1097:47">(<argument pos:start="1097:22" pos:end="1097:46"><expr pos:start="1097:22" pos:end="1097:46"><literal type="string" pos:start="1097:22" pos:end="1097:46">"TKIP or CCMP encryption"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="1099:13" pos:end="1102:63">/* If the destination is a multicast address use the group key. This will not work if the AP is using
                more than one group key simultaneously.  I've not seen this in practice, however.
                Usually an AP will rotate between the two key index values of 1 and 2 whenever
                it needs to change the group key to be used. */</comment>
            <if_stmt pos:start="1103:13" pos:end="1109:13"><if pos:start="1103:13" pos:end="1109:13">if <condition pos:start="1103:16" pos:end="1103:80">(<expr pos:start="1103:17" pos:end="1103:79"><operator pos:start="1103:17" pos:end="1103:17">(</operator><operator pos:start="1103:18" pos:end="1103:18">(</operator><specifier pos:start="1103:19" pos:end="1103:23">const</specifier> <name pos:start="1103:25" pos:end="1103:52">DOT11DECRYPT_MAC_FRAME_ADDR4</name> <operator pos:start="1103:54" pos:end="1103:54">*</operator><operator pos:start="1103:55" pos:end="1103:55">)</operator><operator pos:start="1103:56" pos:end="1103:56">(</operator><name pos:start="1103:57" pos:end="1103:60">data</name><operator pos:start="1103:61" pos:end="1103:61">)</operator><operator pos:start="1103:62" pos:end="1103:62">)</operator><operator pos:start="1103:63" pos:end="1103:64">-&gt;</operator><name pos:start="1103:65" pos:end="1103:72"><name pos:start="1103:65" pos:end="1103:69">addr1</name><index pos:start="1103:70" pos:end="1103:72">[<expr pos:start="1103:71" pos:end="1103:71"><literal type="number" pos:start="1103:71" pos:end="1103:71">0</literal></expr>]</index></name> <operator pos:start="1103:74" pos:end="1103:74">&amp;</operator> <literal type="number" pos:start="1103:76" pos:end="1103:79">0x01</literal></expr>)</condition>
            <block pos:start="1104:13" pos:end="1109:13">{<block_content pos:start="1105:17" pos:end="1108:68">
                <expr_stmt pos:start="1105:17" pos:end="1105:93"><expr pos:start="1105:17" pos:end="1105:92"><call pos:start="1105:17" pos:end="1105:92"><name pos:start="1105:17" pos:end="1105:24">ws_noisy</name><argument_list pos:start="1105:25" pos:end="1105:92">(<argument pos:start="1105:26" pos:end="1105:91"><expr pos:start="1105:26" pos:end="1105:91"><literal type="string" pos:start="1105:26" pos:end="1105:91">"Broadcast/Multicast address. This is encrypted with a group key."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="1107:17" pos:end="1107:91">/* force STA address to broadcast MAC so we load the SA for the groupkey */</comment>
                <expr_stmt pos:start="1108:17" pos:end="1108:68"><expr pos:start="1108:17" pos:end="1108:67"><call pos:start="1108:17" pos:end="1108:67"><name pos:start="1108:17" pos:end="1108:22">memcpy</name><argument_list pos:start="1108:23" pos:end="1108:67">(<argument pos:start="1108:24" pos:end="1108:29"><expr pos:start="1108:24" pos:end="1108:29"><name pos:start="1108:24" pos:end="1108:29"><name pos:start="1108:24" pos:end="1108:25">id</name><operator pos:start="1108:26" pos:end="1108:26">.</operator><name pos:start="1108:27" pos:end="1108:29">sta</name></name></expr></argument>, <argument pos:start="1108:32" pos:end="1108:44"><expr pos:start="1108:32" pos:end="1108:44"><name pos:start="1108:32" pos:end="1108:44">broadcast_mac</name></expr></argument>, <argument pos:start="1108:47" pos:end="1108:66"><expr pos:start="1108:47" pos:end="1108:66"><name pos:start="1108:47" pos:end="1108:66">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="block" pos:start="1110:13" pos:end="1110:98">/* search for a cached Security Association for current BSSID and STA/broadcast MAC */</comment>
            <decl_stmt pos:start="1111:13" pos:end="1111:48"><decl pos:start="1111:13" pos:end="1111:47"><type pos:start="1111:13" pos:end="1111:15"><name pos:start="1111:13" pos:end="1111:15">int</name></type> <name pos:start="1111:17" pos:end="1111:19">ret</name> <init pos:start="1111:21" pos:end="1111:47">= <expr pos:start="1111:23" pos:end="1111:47"><name pos:start="1111:23" pos:end="1111:47">DOT11DECRYPT_RET_REQ_DATA</name></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="1112:13" pos:end="1112:45"><expr pos:start="1112:13" pos:end="1112:44"><name pos:start="1112:13" pos:end="1112:14">sa</name> <operator pos:start="1112:16" pos:end="1112:16">=</operator> <call pos:start="1112:18" pos:end="1112:44"><name pos:start="1112:18" pos:end="1112:34">Dot11DecryptGetSa</name><argument_list pos:start="1112:35" pos:end="1112:44">(<argument pos:start="1112:36" pos:end="1112:38"><expr pos:start="1112:36" pos:end="1112:38"><name pos:start="1112:36" pos:end="1112:38">ctx</name></expr></argument>, <argument pos:start="1112:41" pos:end="1112:43"><expr pos:start="1112:41" pos:end="1112:43"><operator pos:start="1112:41" pos:end="1112:41">&amp;</operator><name pos:start="1112:42" pos:end="1112:43">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1113:13" pos:end="1117:13"><if pos:start="1113:13" pos:end="1117:13">if <condition pos:start="1113:16" pos:end="1113:27">(<expr pos:start="1113:17" pos:end="1113:26"><name pos:start="1113:17" pos:end="1113:18">sa</name> <operator pos:start="1113:20" pos:end="1113:21">!=</operator> <name pos:start="1113:23" pos:end="1113:26">NULL</name></expr>)</condition>
            <block pos:start="1114:13" pos:end="1117:13">{<block_content pos:start="1116:17" pos:end="1116:94">
                <comment type="block" pos:start="1115:17" pos:end="1115:65">/* Decrypt the packet using the appropriate SA */</comment>
                <expr_stmt pos:start="1116:17" pos:end="1116:94"><expr pos:start="1116:17" pos:end="1116:93"><name pos:start="1116:17" pos:end="1116:19">ret</name> <operator pos:start="1116:21" pos:end="1116:21">=</operator> <call pos:start="1116:23" pos:end="1116:93"><name pos:start="1116:23" pos:end="1116:41">Dot11DecryptRsnaMng</name><argument_list pos:start="1116:42" pos:end="1116:93">(<argument pos:start="1116:43" pos:end="1116:54"><expr pos:start="1116:43" pos:end="1116:54"><name pos:start="1116:43" pos:end="1116:54">decrypt_data</name></expr></argument>, <argument pos:start="1116:57" pos:end="1116:70"><expr pos:start="1116:57" pos:end="1116:70"><name pos:start="1116:57" pos:end="1116:70">mac_header_len</name></expr></argument>, <argument pos:start="1116:73" pos:end="1116:83"><expr pos:start="1116:73" pos:end="1116:83"><name pos:start="1116:73" pos:end="1116:83">decrypt_len</name></expr></argument>, <argument pos:start="1116:86" pos:end="1116:88"><expr pos:start="1116:86" pos:end="1116:88"><name pos:start="1116:86" pos:end="1116:88">key</name></expr></argument>, <argument pos:start="1116:91" pos:end="1116:92"><expr pos:start="1116:91" pos:end="1116:92"><name pos:start="1116:91" pos:end="1116:92">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="1118:13" pos:end="1122:13"><if pos:start="1118:13" pos:end="1122:13">if <condition pos:start="1118:16" pos:end="1118:87">(<expr pos:start="1118:17" pos:end="1118:86"><name pos:start="1118:17" pos:end="1118:19">ret</name> <operator pos:start="1118:21" pos:end="1118:22">!=</operator> <name pos:start="1118:24" pos:end="1118:47">DOT11DECRYPT_RET_SUCCESS</name> <operator pos:start="1118:49" pos:end="1118:50">&amp;&amp;</operator> <call pos:start="1118:52" pos:end="1118:82"><name pos:start="1118:52" pos:end="1118:77">Dot11DecryptGetNbrOfTkKeys</name><argument_list pos:start="1118:78" pos:end="1118:82">(<argument pos:start="1118:79" pos:end="1118:81"><expr pos:start="1118:79" pos:end="1118:81"><name pos:start="1118:79" pos:end="1118:81">ctx</name></expr></argument>)</argument_list></call> <operator pos:start="1118:84" pos:end="1118:84">&gt;</operator> <literal type="number" pos:start="1118:86" pos:end="1118:86">0</literal></expr>)</condition>
            <block pos:start="1119:13" pos:end="1122:13">{<block_content pos:start="1121:17" pos:end="1121:104">
                <comment type="block" pos:start="1120:17" pos:end="1120:88">/* Decryption with known SAs failed. Try decrypt with TK user entries */</comment>
                <expr_stmt pos:start="1121:17" pos:end="1121:104"><expr pos:start="1121:17" pos:end="1121:103"><name pos:start="1121:17" pos:end="1121:19">ret</name> <operator pos:start="1121:21" pos:end="1121:21">=</operator> <call pos:start="1121:23" pos:end="1121:103"><name pos:start="1121:23" pos:end="1121:45">Dot11DecryptUsingUserTk</name><argument_list pos:start="1121:46" pos:end="1121:103">(<argument pos:start="1121:47" pos:end="1121:49"><expr pos:start="1121:47" pos:end="1121:49"><name pos:start="1121:47" pos:end="1121:49">ctx</name></expr></argument>, <argument pos:start="1121:52" pos:end="1121:63"><expr pos:start="1121:52" pos:end="1121:63"><name pos:start="1121:52" pos:end="1121:63">decrypt_data</name></expr></argument>, <argument pos:start="1121:66" pos:end="1121:79"><expr pos:start="1121:66" pos:end="1121:79"><name pos:start="1121:66" pos:end="1121:79">mac_header_len</name></expr></argument>, <argument pos:start="1121:82" pos:end="1121:92"><expr pos:start="1121:82" pos:end="1121:92"><name pos:start="1121:82" pos:end="1121:92">decrypt_len</name></expr></argument>, <argument pos:start="1121:95" pos:end="1121:97"><expr pos:start="1121:95" pos:end="1121:97"><operator pos:start="1121:95" pos:end="1121:95">&amp;</operator><name pos:start="1121:96" pos:end="1121:97">id</name></expr></argument>, <argument pos:start="1121:100" pos:end="1121:102"><expr pos:start="1121:100" pos:end="1121:102"><name pos:start="1121:100" pos:end="1121:102">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return pos:start="1123:13" pos:end="1123:23">return <expr pos:start="1123:20" pos:end="1123:22"><name pos:start="1123:20" pos:end="1123:22">ret</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
        <return pos:start="1125:9" pos:end="1125:42">return <expr pos:start="1125:16" pos:end="1125:41"><name pos:start="1125:16" pos:end="1125:41">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="1128:5" pos:end="1168:5"><type pos:start="1128:5" pos:end="1128:7"><name pos:start="1128:5" pos:end="1128:7">INT</name></type> <name pos:start="1128:9" pos:end="1128:27">Dot11DecryptSetKeys</name><parameter_list pos:start="1128:28" pos:end="1131:29">(
        <parameter pos:start="1129:9" pos:end="1129:33"><decl pos:start="1129:9" pos:end="1129:33"><type pos:start="1129:9" pos:end="1129:33"><name pos:start="1129:9" pos:end="1129:29">PDOT11DECRYPT_CONTEXT</name></type> <name pos:start="1129:31" pos:end="1129:33">ctx</name></decl></parameter>,
        <parameter pos:start="1130:9" pos:end="1130:36"><decl pos:start="1130:9" pos:end="1130:36"><type pos:start="1130:9" pos:end="1130:34"><name pos:start="1130:9" pos:end="1130:29">DOT11DECRYPT_KEY_ITEM</name></type> <name pos:start="1130:31" pos:end="1130:36"><name pos:start="1130:31" pos:end="1130:34">keys</name><index pos:start="1130:35" pos:end="1130:36">[]</index></name></decl></parameter>,
        <parameter pos:start="1131:9" pos:end="1131:28"><decl pos:start="1131:9" pos:end="1131:28"><type pos:start="1131:9" pos:end="1131:28"><specifier pos:start="1131:9" pos:end="1131:13">const</specifier> <name pos:start="1131:15" pos:end="1131:20">size_t</name></type> <name pos:start="1131:22" pos:end="1131:28">keys_nr</name></decl></parameter>)</parameter_list>
    <block pos:start="1132:5" pos:end="1168:5">{<block_content pos:start="1133:9" pos:end="1167:23">
        <decl_stmt pos:start="1133:9" pos:end="1133:14"><decl pos:start="1133:9" pos:end="1133:13"><type pos:start="1133:9" pos:end="1133:11"><name pos:start="1133:9" pos:end="1133:11">INT</name></type> <name pos:start="1133:13" pos:end="1133:13">i</name></decl>;</decl_stmt>
        <decl_stmt pos:start="1134:9" pos:end="1134:20"><decl pos:start="1134:9" pos:end="1134:19"><type pos:start="1134:9" pos:end="1134:11"><name pos:start="1134:9" pos:end="1134:11">INT</name></type> <name pos:start="1134:13" pos:end="1134:19">success</name></decl>;</decl_stmt>

        <if_stmt pos:start="1136:9" pos:end="1140:9"><if pos:start="1136:9" pos:end="1140:9">if <condition pos:start="1136:12" pos:end="1136:40">(<expr pos:start="1136:13" pos:end="1136:39"><name pos:start="1136:13" pos:end="1136:15">ctx</name> <operator pos:start="1136:17" pos:end="1136:18">==</operator> <name pos:start="1136:20" pos:end="1136:23">NULL</name> <operator pos:start="1136:25" pos:end="1136:26">||</operator> <name pos:start="1136:28" pos:end="1136:31">keys</name> <operator pos:start="1136:33" pos:end="1136:34">==</operator> <name pos:start="1136:36" pos:end="1136:39">NULL</name></expr>)</condition>
        <block pos:start="1137:9" pos:end="1140:9">{<block_content pos:start="1138:13" pos:end="1139:21">
            <expr_stmt pos:start="1138:13" pos:end="1138:58"><expr pos:start="1138:13" pos:end="1138:57"><call pos:start="1138:13" pos:end="1138:57"><name pos:start="1138:13" pos:end="1138:22">ws_warning</name><argument_list pos:start="1138:23" pos:end="1138:57">(<argument pos:start="1138:24" pos:end="1138:56"><expr pos:start="1138:24" pos:end="1138:56"><literal type="string" pos:start="1138:24" pos:end="1138:56">"NULL context or NULL keys array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1139:13" pos:end="1139:21">return <expr pos:start="1139:20" pos:end="1139:20"><literal type="number" pos:start="1139:20" pos:end="1139:20">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="1142:9" pos:end="1146:9"><if pos:start="1142:9" pos:end="1146:9">if <condition pos:start="1142:12" pos:end="1142:47">(<expr pos:start="1142:13" pos:end="1142:46"><name pos:start="1142:13" pos:end="1142:19">keys_nr</name> <operator pos:start="1142:21" pos:end="1142:21">&gt;</operator> <name pos:start="1142:23" pos:end="1142:46">DOT11DECRYPT_MAX_KEYS_NR</name></expr>)</condition>
        <block pos:start="1143:9" pos:end="1146:9">{<block_content pos:start="1144:13" pos:end="1145:21">
            <expr_stmt pos:start="1144:13" pos:end="1144:59"><expr pos:start="1144:13" pos:end="1144:58"><call pos:start="1144:13" pos:end="1144:58"><name pos:start="1144:13" pos:end="1144:22">ws_warning</name><argument_list pos:start="1144:23" pos:end="1144:58">(<argument pos:start="1144:24" pos:end="1144:57"><expr pos:start="1144:24" pos:end="1144:57"><literal type="string" pos:start="1144:24" pos:end="1144:57">"Keys number greater than maximum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1145:13" pos:end="1145:21">return <expr pos:start="1145:20" pos:end="1145:20"><literal type="number" pos:start="1145:20" pos:end="1145:20">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1148:9" pos:end="1148:66">/* clean key and SA collections before setting new ones */</comment>
        <expr_stmt pos:start="1149:9" pos:end="1149:37"><expr pos:start="1149:9" pos:end="1149:36"><call pos:start="1149:9" pos:end="1149:36"><name pos:start="1149:9" pos:end="1149:31">Dot11DecryptInitContext</name><argument_list pos:start="1149:32" pos:end="1149:36">(<argument pos:start="1149:33" pos:end="1149:35"><expr pos:start="1149:33" pos:end="1149:35"><name pos:start="1149:33" pos:end="1149:35">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1151:9" pos:end="1151:35">/* check and insert keys */</comment>
        <for pos:start="1152:9" pos:end="1164:9">for <control pos:start="1152:13" pos:end="1152:55">(<init pos:start="1152:14" pos:end="1152:32"><expr pos:start="1152:14" pos:end="1152:18"><name pos:start="1152:14" pos:end="1152:14">i</name> <operator pos:start="1152:16" pos:end="1152:16">=</operator> <literal type="number" pos:start="1152:18" pos:end="1152:18">0</literal></expr><operator pos:start="1152:19" pos:end="1152:19">,</operator> <expr pos:start="1152:21" pos:end="1152:31"><name pos:start="1152:21" pos:end="1152:27">success</name> <operator pos:start="1152:29" pos:end="1152:29">=</operator> <literal type="number" pos:start="1152:31" pos:end="1152:31">0</literal></expr>;</init> <condition pos:start="1152:34" pos:end="1152:50"><expr pos:start="1152:34" pos:end="1152:49"><name pos:start="1152:34" pos:end="1152:34">i</name> <operator pos:start="1152:36" pos:end="1152:36">&lt;</operator> <operator pos:start="1152:38" pos:end="1152:38">(</operator><name pos:start="1152:39" pos:end="1152:41">INT</name><operator pos:start="1152:42" pos:end="1152:42">)</operator><name pos:start="1152:43" pos:end="1152:49">keys_nr</name></expr>;</condition> <incr pos:start="1152:52" pos:end="1152:54"><expr pos:start="1152:52" pos:end="1152:54"><name pos:start="1152:52" pos:end="1152:52">i</name><operator pos:start="1152:53" pos:end="1152:54">++</operator></expr></incr>)</control>
        <block pos:start="1153:9" pos:end="1164:9">{<block_content pos:start="1154:13" pos:end="1163:13">
            <if_stmt pos:start="1154:13" pos:end="1163:13"><if pos:start="1154:13" pos:end="1163:13">if <condition pos:start="1154:16" pos:end="1154:58">(<expr pos:start="1154:17" pos:end="1154:57"><call pos:start="1154:17" pos:end="1154:49"><name pos:start="1154:17" pos:end="1154:39">Dot11DecryptValidateKey</name><argument_list pos:start="1154:40" pos:end="1154:49">(<argument pos:start="1154:41" pos:end="1154:48"><expr pos:start="1154:41" pos:end="1154:48"><name pos:start="1154:41" pos:end="1154:44">keys</name> <operator pos:start="1154:46" pos:end="1154:46">+</operator> <name pos:start="1154:48" pos:end="1154:48">i</name></expr></argument>)</argument_list></call> <operator pos:start="1154:51" pos:end="1154:52">==</operator> <name pos:start="1154:54" pos:end="1154:57">TRUE</name></expr>)</condition>
            <block pos:start="1155:13" pos:end="1163:13">{<block_content pos:start="1156:17" pos:end="1162:26">
                <if_stmt pos:start="1156:17" pos:end="1160:17"><if pos:start="1156:17" pos:end="1160:17">if <condition pos:start="1156:20" pos:end="1156:69">(<expr pos:start="1156:21" pos:end="1156:68"><name pos:start="1156:21" pos:end="1156:27"><name pos:start="1156:21" pos:end="1156:24">keys</name><index pos:start="1156:25" pos:end="1156:27">[<expr pos:start="1156:26" pos:end="1156:26"><name pos:start="1156:26" pos:end="1156:26">i</name></expr>]</index></name><operator pos:start="1156:28" pos:end="1156:28">.</operator><name pos:start="1156:29" pos:end="1156:35">KeyType</name> <operator pos:start="1156:37" pos:end="1156:38">==</operator> <name pos:start="1156:40" pos:end="1156:68">DOT11DECRYPT_KEY_TYPE_WPA_PWD</name></expr>)</condition>
                <block pos:start="1157:17" pos:end="1160:17">{<block_content pos:start="1158:21" pos:end="1159:78">
                    <expr_stmt pos:start="1158:21" pos:end="1158:144"><expr pos:start="1158:21" pos:end="1158:143"><call pos:start="1158:21" pos:end="1158:143"><name pos:start="1158:21" pos:end="1158:43">Dot11DecryptRsnaPwd2Psk</name><argument_list pos:start="1158:44" pos:end="1158:143">(<argument pos:start="1158:45" pos:end="1158:70"><expr pos:start="1158:45" pos:end="1158:70"><name pos:start="1158:45" pos:end="1158:51"><name pos:start="1158:45" pos:end="1158:48">keys</name><index pos:start="1158:49" pos:end="1158:51">[<expr pos:start="1158:50" pos:end="1158:50"><name pos:start="1158:50" pos:end="1158:50">i</name></expr>]</index></name><operator pos:start="1158:52" pos:end="1158:52">.</operator><name pos:start="1158:53" pos:end="1158:70"><name pos:start="1158:53" pos:end="1158:59">UserPwd</name><operator pos:start="1158:60" pos:end="1158:60">.</operator><name pos:start="1158:61" pos:end="1158:70">Passphrase</name></name></expr></argument>, <argument pos:start="1158:73" pos:end="1158:92"><expr pos:start="1158:73" pos:end="1158:92"><name pos:start="1158:73" pos:end="1158:79"><name pos:start="1158:73" pos:end="1158:76">keys</name><index pos:start="1158:77" pos:end="1158:79">[<expr pos:start="1158:78" pos:end="1158:78"><name pos:start="1158:78" pos:end="1158:78">i</name></expr>]</index></name><operator pos:start="1158:80" pos:end="1158:80">.</operator><name pos:start="1158:81" pos:end="1158:92"><name pos:start="1158:81" pos:end="1158:87">UserPwd</name><operator pos:start="1158:88" pos:end="1158:88">.</operator><name pos:start="1158:89" pos:end="1158:92">Ssid</name></name></expr></argument>, <argument pos:start="1158:95" pos:end="1158:117"><expr pos:start="1158:95" pos:end="1158:117"><name pos:start="1158:95" pos:end="1158:101"><name pos:start="1158:95" pos:end="1158:98">keys</name><index pos:start="1158:99" pos:end="1158:101">[<expr pos:start="1158:100" pos:end="1158:100"><name pos:start="1158:100" pos:end="1158:100">i</name></expr>]</index></name><operator pos:start="1158:102" pos:end="1158:102">.</operator><name pos:start="1158:103" pos:end="1158:117"><name pos:start="1158:103" pos:end="1158:109">UserPwd</name><operator pos:start="1158:110" pos:end="1158:110">.</operator><name pos:start="1158:111" pos:end="1158:117">SsidLen</name></name></expr></argument>, <argument pos:start="1158:120" pos:end="1158:142"><expr pos:start="1158:120" pos:end="1158:142"><name pos:start="1158:120" pos:end="1158:126"><name pos:start="1158:120" pos:end="1158:123">keys</name><index pos:start="1158:124" pos:end="1158:126">[<expr pos:start="1158:125" pos:end="1158:125"><name pos:start="1158:125" pos:end="1158:125">i</name></expr>]</index></name><operator pos:start="1158:127" pos:end="1158:127">.</operator><name pos:start="1158:128" pos:end="1158:142"><name pos:start="1158:128" pos:end="1158:134">KeyData</name><operator pos:start="1158:135" pos:end="1158:135">.</operator><name pos:start="1158:136" pos:end="1158:138">Wpa</name><operator pos:start="1158:139" pos:end="1158:139">.</operator><name pos:start="1158:140" pos:end="1158:142">Psk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1159:21" pos:end="1159:78"><expr pos:start="1159:21" pos:end="1159:77"><name pos:start="1159:21" pos:end="1159:27"><name pos:start="1159:21" pos:end="1159:24">keys</name><index pos:start="1159:25" pos:end="1159:27">[<expr pos:start="1159:26" pos:end="1159:26"><name pos:start="1159:26" pos:end="1159:26">i</name></expr>]</index></name><operator pos:start="1159:28" pos:end="1159:28">.</operator><name pos:start="1159:29" pos:end="1159:46"><name pos:start="1159:29" pos:end="1159:35">KeyData</name><operator pos:start="1159:36" pos:end="1159:36">.</operator><name pos:start="1159:37" pos:end="1159:39">Wpa</name><operator pos:start="1159:40" pos:end="1159:40">.</operator><name pos:start="1159:41" pos:end="1159:46">PskLen</name></name> <operator pos:start="1159:48" pos:end="1159:48">=</operator> <name pos:start="1159:50" pos:end="1159:77">DOT11DECRYPT_WPA_PWD_PSK_LEN</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt pos:start="1161:17" pos:end="1161:71"><expr pos:start="1161:17" pos:end="1161:70"><call pos:start="1161:17" pos:end="1161:70"><name pos:start="1161:17" pos:end="1161:22">memcpy</name><argument_list pos:start="1161:23" pos:end="1161:70">(<argument pos:start="1161:24" pos:end="1161:42"><expr pos:start="1161:24" pos:end="1161:42"><operator pos:start="1161:24" pos:end="1161:24">&amp;</operator><name pos:start="1161:25" pos:end="1161:42"><name pos:start="1161:25" pos:end="1161:27">ctx</name><operator pos:start="1161:28" pos:end="1161:29">-&gt;</operator><name pos:start="1161:30" pos:end="1161:33">keys</name><index pos:start="1161:34" pos:end="1161:42">[<expr pos:start="1161:35" pos:end="1161:41"><name pos:start="1161:35" pos:end="1161:41">success</name></expr>]</index></name></expr></argument>, <argument pos:start="1161:45" pos:end="1161:52"><expr pos:start="1161:45" pos:end="1161:52"><operator pos:start="1161:45" pos:end="1161:45">&amp;</operator><name pos:start="1161:46" pos:end="1161:52"><name pos:start="1161:46" pos:end="1161:49">keys</name><index pos:start="1161:50" pos:end="1161:52">[<expr pos:start="1161:51" pos:end="1161:51"><name pos:start="1161:51" pos:end="1161:51">i</name></expr>]</index></name></expr></argument>, <argument pos:start="1161:55" pos:end="1161:69"><expr pos:start="1161:55" pos:end="1161:69"><sizeof pos:start="1161:55" pos:end="1161:69">sizeof<argument_list pos:start="1161:61" pos:end="1161:69">(<argument pos:start="1161:62" pos:end="1161:68"><expr pos:start="1161:62" pos:end="1161:68"><name pos:start="1161:62" pos:end="1161:68"><name pos:start="1161:62" pos:end="1161:65">keys</name><index pos:start="1161:66" pos:end="1161:68">[<expr pos:start="1161:67" pos:end="1161:67"><name pos:start="1161:67" pos:end="1161:67">i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1162:17" pos:end="1162:26"><expr pos:start="1162:17" pos:end="1162:25"><name pos:start="1162:17" pos:end="1162:23">success</name><operator pos:start="1162:24" pos:end="1162:25">++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <expr_stmt pos:start="1166:9" pos:end="1166:31"><expr pos:start="1166:9" pos:end="1166:30"><name pos:start="1166:9" pos:end="1166:20"><name pos:start="1166:9" pos:end="1166:11">ctx</name><operator pos:start="1166:12" pos:end="1166:13">-&gt;</operator><name pos:start="1166:14" pos:end="1166:20">keys_nr</name></name> <operator pos:start="1166:22" pos:end="1166:22">=</operator> <name pos:start="1166:24" pos:end="1166:30">success</name></expr>;</expr_stmt>
        <return pos:start="1167:9" pos:end="1167:23">return <expr pos:start="1167:16" pos:end="1167:22"><name pos:start="1167:16" pos:end="1167:22">success</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="1170:5" pos:end="1184:5"><type pos:start="1170:5" pos:end="1170:15"><specifier pos:start="1170:5" pos:end="1170:10">static</specifier> <name pos:start="1170:12" pos:end="1170:15">void</name></type>
    <name pos:start="1171:5" pos:end="1171:25">Dot11DecryptCleanKeys</name><parameter_list pos:start="1171:26" pos:end="1172:34">(
        <parameter pos:start="1172:9" pos:end="1172:33"><decl pos:start="1172:9" pos:end="1172:33"><type pos:start="1172:9" pos:end="1172:29"><name pos:start="1172:9" pos:end="1172:29">PDOT11DECRYPT_CONTEXT</name></type> <name pos:start="1172:31" pos:end="1172:33">ctx</name></decl></parameter>)</parameter_list>
    <block pos:start="1173:5" pos:end="1184:5">{<block_content pos:start="1174:9" pos:end="1183:45">
        <if_stmt pos:start="1174:9" pos:end="1178:9"><if pos:start="1174:9" pos:end="1178:9">if <condition pos:start="1174:12" pos:end="1174:24">(<expr pos:start="1174:13" pos:end="1174:23"><name pos:start="1174:13" pos:end="1174:15">ctx</name> <operator pos:start="1174:17" pos:end="1174:18">==</operator> <name pos:start="1174:20" pos:end="1174:23">NULL</name></expr>)</condition>
        <block pos:start="1175:9" pos:end="1178:9">{<block_content pos:start="1176:13" pos:end="1177:19">
            <expr_stmt pos:start="1176:13" pos:end="1176:39"><expr pos:start="1176:13" pos:end="1176:38"><call pos:start="1176:13" pos:end="1176:38"><name pos:start="1176:13" pos:end="1176:22">ws_warning</name><argument_list pos:start="1176:23" pos:end="1176:38">(<argument pos:start="1176:24" pos:end="1176:37"><expr pos:start="1176:24" pos:end="1176:37"><literal type="string" pos:start="1176:24" pos:end="1176:37">"NULL context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1177:13" pos:end="1177:19">return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="1180:9" pos:end="1180:87"><expr pos:start="1180:9" pos:end="1180:86"><call pos:start="1180:9" pos:end="1180:86"><name pos:start="1180:9" pos:end="1180:14">memset</name><argument_list pos:start="1180:15" pos:end="1180:86">(<argument pos:start="1180:16" pos:end="1180:24"><expr pos:start="1180:16" pos:end="1180:24"><name pos:start="1180:16" pos:end="1180:24"><name pos:start="1180:16" pos:end="1180:18">ctx</name><operator pos:start="1180:19" pos:end="1180:20">-&gt;</operator><name pos:start="1180:21" pos:end="1180:24">keys</name></name></expr></argument>, <argument pos:start="1180:27" pos:end="1180:27"><expr pos:start="1180:27" pos:end="1180:27"><literal type="number" pos:start="1180:27" pos:end="1180:27">0</literal></expr></argument>, <argument pos:start="1180:30" pos:end="1180:85"><expr pos:start="1180:30" pos:end="1180:85"><sizeof pos:start="1180:30" pos:end="1180:58">sizeof<argument_list pos:start="1180:36" pos:end="1180:58">(<argument pos:start="1180:37" pos:end="1180:57"><expr pos:start="1180:37" pos:end="1180:57"><name pos:start="1180:37" pos:end="1180:57">DOT11DECRYPT_KEY_ITEM</name></expr></argument>)</argument_list></sizeof> <operator pos:start="1180:60" pos:end="1180:60">*</operator> <name pos:start="1180:62" pos:end="1180:85">DOT11DECRYPT_MAX_KEYS_NR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1182:9" pos:end="1182:25"><expr pos:start="1182:9" pos:end="1182:24"><name pos:start="1182:9" pos:end="1182:20"><name pos:start="1182:9" pos:end="1182:11">ctx</name><operator pos:start="1182:12" pos:end="1182:13">-&gt;</operator><name pos:start="1182:14" pos:end="1182:20">keys_nr</name></name> <operator pos:start="1182:22" pos:end="1182:22">=</operator> <literal type="number" pos:start="1182:24" pos:end="1182:24">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1183:9" pos:end="1183:45"><expr pos:start="1183:9" pos:end="1183:44"><call pos:start="1183:9" pos:end="1183:44"><name pos:start="1183:9" pos:end="1183:16">ws_debug</name><argument_list pos:start="1183:17" pos:end="1183:44">(<argument pos:start="1183:18" pos:end="1183:43"><expr pos:start="1183:18" pos:end="1183:43"><literal type="string" pos:start="1183:18" pos:end="1183:43">"Keys collection cleaned!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function pos:start="1186:5" pos:end="1196:5"><type pos:start="1186:5" pos:end="1186:15"><specifier pos:start="1186:5" pos:end="1186:10">static</specifier> <name pos:start="1186:12" pos:end="1186:15">void</name></type>
    <name pos:start="1187:5" pos:end="1187:30">Dot11DecryptRecurseCleanSA</name><parameter_list pos:start="1187:31" pos:end="1188:26">(
        <parameter pos:start="1188:9" pos:end="1188:25"><decl pos:start="1188:9" pos:end="1188:25"><type pos:start="1188:9" pos:end="1188:16"><name pos:start="1188:9" pos:end="1188:16">gpointer</name></type> <name pos:start="1188:18" pos:end="1188:25">first_sa</name></decl></parameter>)</parameter_list>
    <block pos:start="1189:5" pos:end="1196:5">{<block_content pos:start="1190:9" pos:end="1195:9">
        <decl_stmt pos:start="1190:9" pos:end="1190:84"><decl pos:start="1190:9" pos:end="1190:83"><type pos:start="1190:9" pos:end="1190:38"><name pos:start="1190:9" pos:end="1190:36">DOT11DECRYPT_SEC_ASSOCIATION</name> <modifier pos:start="1190:38" pos:end="1190:38">*</modifier></type><name pos:start="1190:39" pos:end="1190:40">sa</name> <init pos:start="1190:42" pos:end="1190:83">= <expr pos:start="1190:44" pos:end="1190:83"><operator pos:start="1190:44" pos:end="1190:44">(</operator><name pos:start="1190:45" pos:end="1190:72">DOT11DECRYPT_SEC_ASSOCIATION</name> <operator pos:start="1190:74" pos:end="1190:74">*</operator><operator pos:start="1190:75" pos:end="1190:75">)</operator><name pos:start="1190:76" pos:end="1190:83">first_sa</name></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="1191:9" pos:end="1195:9"><if pos:start="1191:9" pos:end="1195:9">if <condition pos:start="1191:12" pos:end="1191:23">(<expr pos:start="1191:13" pos:end="1191:22"><name pos:start="1191:13" pos:end="1191:14">sa</name> <operator pos:start="1191:16" pos:end="1191:17">!=</operator> <name pos:start="1191:19" pos:end="1191:22">NULL</name></expr>)</condition>
        <block pos:start="1192:9" pos:end="1195:9">{<block_content pos:start="1193:13" pos:end="1194:23">
            <expr_stmt pos:start="1193:13" pos:end="1193:59"><expr pos:start="1193:13" pos:end="1193:58"><call pos:start="1193:13" pos:end="1193:58"><name pos:start="1193:13" pos:end="1193:38">Dot11DecryptRecurseCleanSA</name><argument_list pos:start="1193:39" pos:end="1193:58">(<argument pos:start="1193:40" pos:end="1193:57"><expr pos:start="1193:40" pos:end="1193:57"><operator pos:start="1193:40" pos:end="1193:40">(</operator><name pos:start="1193:41" pos:end="1193:48">gpointer</name><operator pos:start="1193:49" pos:end="1193:49">)</operator><name pos:start="1193:50" pos:end="1193:57"><name pos:start="1193:50" pos:end="1193:51">sa</name><operator pos:start="1193:52" pos:end="1193:53">-&gt;</operator><name pos:start="1193:54" pos:end="1193:57">next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1194:13" pos:end="1194:23"><expr pos:start="1194:13" pos:end="1194:22"><call pos:start="1194:13" pos:end="1194:22"><name pos:start="1194:13" pos:end="1194:18">g_free</name><argument_list pos:start="1194:19" pos:end="1194:22">(<argument pos:start="1194:20" pos:end="1194:21"><expr pos:start="1194:20" pos:end="1194:21"><name pos:start="1194:20" pos:end="1194:21">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function pos:start="1198:5" pos:end="1207:5"><type pos:start="1198:5" pos:end="1198:15"><specifier pos:start="1198:5" pos:end="1198:10">static</specifier> <name pos:start="1198:12" pos:end="1198:15">void</name></type>
    <name pos:start="1199:5" pos:end="1199:29">Dot11DecryptCleanSecAssoc</name><parameter_list pos:start="1199:30" pos:end="1200:34">(
        <parameter pos:start="1200:9" pos:end="1200:33"><decl pos:start="1200:9" pos:end="1200:33"><type pos:start="1200:9" pos:end="1200:29"><name pos:start="1200:9" pos:end="1200:29">PDOT11DECRYPT_CONTEXT</name></type> <name pos:start="1200:31" pos:end="1200:33">ctx</name></decl></parameter>)</parameter_list>
    <block pos:start="1201:5" pos:end="1207:5">{<block_content pos:start="1202:9" pos:end="1206:9">
        <if_stmt pos:start="1202:9" pos:end="1206:9"><if pos:start="1202:9" pos:end="1206:9">if <condition pos:start="1202:12" pos:end="1202:33">(<expr pos:start="1202:13" pos:end="1202:32"><name pos:start="1202:13" pos:end="1202:24"><name pos:start="1202:13" pos:end="1202:15">ctx</name><operator pos:start="1202:16" pos:end="1202:17">-&gt;</operator><name pos:start="1202:18" pos:end="1202:24">sa_hash</name></name> <operator pos:start="1202:26" pos:end="1202:27">!=</operator> <name pos:start="1202:29" pos:end="1202:32">NULL</name></expr>)</condition>
        <block pos:start="1203:9" pos:end="1206:9">{<block_content pos:start="1204:13" pos:end="1205:32">
            <expr_stmt pos:start="1204:13" pos:end="1204:47"><expr pos:start="1204:13" pos:end="1204:46"><call pos:start="1204:13" pos:end="1204:46"><name pos:start="1204:13" pos:end="1204:32">g_hash_table_destroy</name><argument_list pos:start="1204:33" pos:end="1204:46">(<argument pos:start="1204:34" pos:end="1204:45"><expr pos:start="1204:34" pos:end="1204:45"><name pos:start="1204:34" pos:end="1204:45"><name pos:start="1204:34" pos:end="1204:36">ctx</name><operator pos:start="1204:37" pos:end="1204:38">-&gt;</operator><name pos:start="1204:39" pos:end="1204:45">sa_hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1205:13" pos:end="1205:32"><expr pos:start="1205:13" pos:end="1205:31"><name pos:start="1205:13" pos:end="1205:24"><name pos:start="1205:13" pos:end="1205:15">ctx</name><operator pos:start="1205:16" pos:end="1205:17">-&gt;</operator><name pos:start="1205:18" pos:end="1205:24">sa_hash</name></name> <operator pos:start="1205:26" pos:end="1205:26">=</operator> <name pos:start="1205:28" pos:end="1205:31">NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" pos:start="1209:5" pos:end="1214:7">/*
     * XXX - This won't be reliable if a packet containing SSID "B" shows
     * up in the middle of a 4-way handshake for SSID "A".
     * We should probably use a small array or hash table to keep multiple
     * SSIDs.
     */</comment>
    <function pos:start="1215:5" pos:end="1227:5"><type pos:start="1215:5" pos:end="1215:7"><name pos:start="1215:5" pos:end="1215:7">INT</name></type> <name pos:start="1215:9" pos:end="1215:31">Dot11DecryptSetLastSSID</name><parameter_list pos:start="1215:32" pos:end="1218:28">(
        <parameter pos:start="1216:9" pos:end="1216:33"><decl pos:start="1216:9" pos:end="1216:33"><type pos:start="1216:9" pos:end="1216:33"><name pos:start="1216:9" pos:end="1216:29">PDOT11DECRYPT_CONTEXT</name></type> <name pos:start="1216:31" pos:end="1216:33">ctx</name></decl></parameter>,
        <parameter pos:start="1217:9" pos:end="1217:22"><decl pos:start="1217:9" pos:end="1217:22"><type pos:start="1217:9" pos:end="1217:22"><name pos:start="1217:9" pos:end="1217:12">CHAR</name> <modifier pos:start="1217:14" pos:end="1217:14">*</modifier></type><name pos:start="1217:15" pos:end="1217:22">pkt_ssid</name></decl></parameter>,
        <parameter pos:start="1218:9" pos:end="1218:27"><decl pos:start="1218:9" pos:end="1218:27"><type pos:start="1218:9" pos:end="1218:27"><name pos:start="1218:9" pos:end="1218:14">size_t</name></type> <name pos:start="1218:16" pos:end="1218:27">pkt_ssid_len</name></decl></parameter>)</parameter_list>
    <block pos:start="1219:5" pos:end="1227:5">{<block_content pos:start="1220:9" pos:end="1226:40">
        <if_stmt pos:start="1220:9" pos:end="1221:46"><if pos:start="1220:9" pos:end="1221:46">if <condition pos:start="1220:12" pos:end="1220:86">(<expr pos:start="1220:13" pos:end="1220:85"><operator pos:start="1220:13" pos:end="1220:13">!</operator><name pos:start="1220:14" pos:end="1220:16">ctx</name> <operator pos:start="1220:18" pos:end="1220:19">||</operator> <operator pos:start="1220:21" pos:end="1220:21">!</operator><name pos:start="1220:22" pos:end="1220:29">pkt_ssid</name> <operator pos:start="1220:31" pos:end="1220:32">||</operator> <name pos:start="1220:34" pos:end="1220:67"><name pos:start="1220:34" pos:end="1220:45">pkt_ssid_len</name> <argument_list type="generic" pos:start="1220:47" pos:end="1220:67">&lt; <argument pos:start="1220:49" pos:end="1220:65"><expr pos:start="1220:49" pos:end="1220:65"><literal type="number" pos:start="1220:49" pos:end="1220:49">1</literal> <operator pos:start="1220:51" pos:end="1220:52">||</operator> <name pos:start="1220:54" pos:end="1220:65">pkt_ssid_len</name></expr></argument> &gt;</argument_list></name> <name pos:start="1220:69" pos:end="1220:85">WPA_SSID_MAX_SIZE</name></expr>)</condition><block type="pseudo" pos:start="1221:13" pos:end="1221:46"><block_content pos:start="1221:13" pos:end="1221:46">
            <return pos:start="1221:13" pos:end="1221:46">return <expr pos:start="1221:20" pos:end="1221:45"><name pos:start="1221:20" pos:end="1221:45">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1223:9" pos:end="1223:54"><expr pos:start="1223:9" pos:end="1223:53"><call pos:start="1223:9" pos:end="1223:53"><name pos:start="1223:9" pos:end="1223:14">memcpy</name><argument_list pos:start="1223:15" pos:end="1223:53">(<argument pos:start="1223:16" pos:end="1223:28"><expr pos:start="1223:16" pos:end="1223:28"><name pos:start="1223:16" pos:end="1223:28"><name pos:start="1223:16" pos:end="1223:18">ctx</name><operator pos:start="1223:19" pos:end="1223:20">-&gt;</operator><name pos:start="1223:21" pos:end="1223:28">pkt_ssid</name></name></expr></argument>, <argument pos:start="1223:31" pos:end="1223:38"><expr pos:start="1223:31" pos:end="1223:38"><name pos:start="1223:31" pos:end="1223:38">pkt_ssid</name></expr></argument>, <argument pos:start="1223:41" pos:end="1223:52"><expr pos:start="1223:41" pos:end="1223:52"><name pos:start="1223:41" pos:end="1223:52">pkt_ssid_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1224:9" pos:end="1224:41"><expr pos:start="1224:9" pos:end="1224:40"><name pos:start="1224:9" pos:end="1224:25"><name pos:start="1224:9" pos:end="1224:11">ctx</name><operator pos:start="1224:12" pos:end="1224:13">-&gt;</operator><name pos:start="1224:14" pos:end="1224:25">pkt_ssid_len</name></name> <operator pos:start="1224:27" pos:end="1224:27">=</operator> <name pos:start="1224:29" pos:end="1224:40">pkt_ssid_len</name></expr>;</expr_stmt>

        <return pos:start="1226:9" pos:end="1226:40">return <expr pos:start="1226:16" pos:end="1226:39"><name pos:start="1226:16" pos:end="1226:39">DOT11DECRYPT_RET_SUCCESS</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="1229:5" pos:end="1236:5"><type pos:start="1229:5" pos:end="1229:16"><specifier pos:start="1229:5" pos:end="1229:10">static</specifier> <name pos:start="1229:12" pos:end="1229:16">guint</name></type>
    <name pos:start="1230:5" pos:end="1230:22">Dot11DecryptSaHash</name><parameter_list pos:start="1230:23" pos:end="1230:41">(<parameter pos:start="1230:24" pos:end="1230:40"><decl pos:start="1230:24" pos:end="1230:40"><type pos:start="1230:24" pos:end="1230:36"><name pos:start="1230:24" pos:end="1230:36">gconstpointer</name></type> <name pos:start="1230:38" pos:end="1230:40">key</name></decl></parameter>)</parameter_list>
    <block pos:start="1231:5" pos:end="1236:5">{<block_content pos:start="1232:9" pos:end="1235:20">
        <decl_stmt pos:start="1232:9" pos:end="1232:89"><decl pos:start="1232:9" pos:end="1232:88"><type pos:start="1232:9" pos:end="1232:16"><name pos:start="1232:9" pos:end="1232:14">GBytes</name> <modifier pos:start="1232:16" pos:end="1232:16">*</modifier></type><name pos:start="1232:17" pos:end="1232:21">bytes</name> <init pos:start="1232:23" pos:end="1232:88">= <expr pos:start="1232:25" pos:end="1232:88"><call pos:start="1232:25" pos:end="1232:88"><name pos:start="1232:25" pos:end="1232:42">g_bytes_new_static</name><argument_list pos:start="1232:43" pos:end="1232:88">(<argument pos:start="1232:44" pos:end="1232:46"><expr pos:start="1232:44" pos:end="1232:46"><name pos:start="1232:44" pos:end="1232:46">key</name></expr></argument>, <argument pos:start="1232:49" pos:end="1232:87"><expr pos:start="1232:49" pos:end="1232:87"><sizeof pos:start="1232:49" pos:end="1232:87">sizeof<argument_list pos:start="1232:55" pos:end="1232:87">(<argument pos:start="1232:56" pos:end="1232:86"><expr pos:start="1232:56" pos:end="1232:86"><name pos:start="1232:56" pos:end="1232:86">DOT11DECRYPT_SEC_ASSOCIATION_ID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="1233:9" pos:end="1233:41"><decl pos:start="1233:9" pos:end="1233:40"><type pos:start="1233:9" pos:end="1233:13"><name pos:start="1233:9" pos:end="1233:13">guint</name></type> <name pos:start="1233:15" pos:end="1233:18">hash</name> <init pos:start="1233:20" pos:end="1233:40">= <expr pos:start="1233:22" pos:end="1233:40"><call pos:start="1233:22" pos:end="1233:40"><name pos:start="1233:22" pos:end="1233:33">g_bytes_hash</name><argument_list pos:start="1233:34" pos:end="1233:40">(<argument pos:start="1233:35" pos:end="1233:39"><expr pos:start="1233:35" pos:end="1233:39"><name pos:start="1233:35" pos:end="1233:39">bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="1234:9" pos:end="1234:29"><expr pos:start="1234:9" pos:end="1234:28"><call pos:start="1234:9" pos:end="1234:28"><name pos:start="1234:9" pos:end="1234:21">g_bytes_unref</name><argument_list pos:start="1234:22" pos:end="1234:28">(<argument pos:start="1234:23" pos:end="1234:27"><expr pos:start="1234:23" pos:end="1234:27"><name pos:start="1234:23" pos:end="1234:27">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1235:9" pos:end="1235:20">return <expr pos:start="1235:16" pos:end="1235:19"><name pos:start="1235:16" pos:end="1235:19">hash</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="1238:5" pos:end="1242:5"><type pos:start="1238:5" pos:end="1238:19"><specifier pos:start="1238:5" pos:end="1238:10">static</specifier> <name pos:start="1238:12" pos:end="1238:19">gboolean</name></type>
    <name pos:start="1239:5" pos:end="1239:27">Dot11DecryptIsSaIdEqual</name><parameter_list pos:start="1239:28" pos:end="1239:67">(<parameter pos:start="1239:29" pos:end="1239:46"><decl pos:start="1239:29" pos:end="1239:46"><type pos:start="1239:29" pos:end="1239:46"><name pos:start="1239:29" pos:end="1239:41">gconstpointer</name></type> <name pos:start="1239:43" pos:end="1239:46">key1</name></decl></parameter>, <parameter pos:start="1239:49" pos:end="1239:66"><decl pos:start="1239:49" pos:end="1239:66"><type pos:start="1239:49" pos:end="1239:66"><name pos:start="1239:49" pos:end="1239:61">gconstpointer</name></type> <name pos:start="1239:63" pos:end="1239:66">key2</name></decl></parameter>)</parameter_list>
    <block pos:start="1240:5" pos:end="1242:5">{<block_content pos:start="1241:9" pos:end="1241:80">
        <return pos:start="1241:9" pos:end="1241:80">return <expr pos:start="1241:16" pos:end="1241:79"><call pos:start="1241:16" pos:end="1241:74"><name pos:start="1241:16" pos:end="1241:21">memcmp</name><argument_list pos:start="1241:22" pos:end="1241:74">(<argument pos:start="1241:23" pos:end="1241:26"><expr pos:start="1241:23" pos:end="1241:26"><name pos:start="1241:23" pos:end="1241:26">key1</name></expr></argument>, <argument pos:start="1241:29" pos:end="1241:32"><expr pos:start="1241:29" pos:end="1241:32"><name pos:start="1241:29" pos:end="1241:32">key2</name></expr></argument>, <argument pos:start="1241:35" pos:end="1241:73"><expr pos:start="1241:35" pos:end="1241:73"><sizeof pos:start="1241:35" pos:end="1241:73">sizeof<argument_list pos:start="1241:41" pos:end="1241:73">(<argument pos:start="1241:42" pos:end="1241:72"><expr pos:start="1241:42" pos:end="1241:72"><name pos:start="1241:42" pos:end="1241:72">DOT11DECRYPT_SEC_ASSOCIATION_ID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="1241:76" pos:end="1241:77">==</operator> <literal type="number" pos:start="1241:79" pos:end="1241:79">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="1244:5" pos:end="1266:5"><type pos:start="1244:5" pos:end="1244:7"><name pos:start="1244:5" pos:end="1244:7">INT</name></type> <name pos:start="1244:9" pos:end="1244:31">Dot11DecryptInitContext</name><parameter_list pos:start="1244:32" pos:end="1245:34">(
        <parameter pos:start="1245:9" pos:end="1245:33"><decl pos:start="1245:9" pos:end="1245:33"><type pos:start="1245:9" pos:end="1245:29"><name pos:start="1245:9" pos:end="1245:29">PDOT11DECRYPT_CONTEXT</name></type> <name pos:start="1245:31" pos:end="1245:33">ctx</name></decl></parameter>)</parameter_list>
    <block pos:start="1246:5" pos:end="1266:5">{<block_content pos:start="1247:9" pos:end="1265:40">
        <if_stmt pos:start="1247:9" pos:end="1251:9"><if pos:start="1247:9" pos:end="1251:9">if <condition pos:start="1247:12" pos:end="1247:24">(<expr pos:start="1247:13" pos:end="1247:23"><name pos:start="1247:13" pos:end="1247:15">ctx</name> <operator pos:start="1247:17" pos:end="1247:18">==</operator> <name pos:start="1247:20" pos:end="1247:23">NULL</name></expr>)</condition>
        <block pos:start="1248:9" pos:end="1251:9">{<block_content pos:start="1249:13" pos:end="1250:46">
            <expr_stmt pos:start="1249:13" pos:end="1249:39"><expr pos:start="1249:13" pos:end="1249:38"><call pos:start="1249:13" pos:end="1249:38"><name pos:start="1249:13" pos:end="1249:22">ws_warning</name><argument_list pos:start="1249:23" pos:end="1249:38">(<argument pos:start="1249:24" pos:end="1249:37"><expr pos:start="1249:24" pos:end="1249:37"><literal type="string" pos:start="1249:24" pos:end="1249:37">"NULL context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1250:13" pos:end="1250:46">return <expr pos:start="1250:20" pos:end="1250:45"><name pos:start="1250:20" pos:end="1250:45">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="1253:9" pos:end="1253:35"><expr pos:start="1253:9" pos:end="1253:34"><call pos:start="1253:9" pos:end="1253:34"><name pos:start="1253:9" pos:end="1253:29">Dot11DecryptCleanKeys</name><argument_list pos:start="1253:30" pos:end="1253:34">(<argument pos:start="1253:31" pos:end="1253:33"><expr pos:start="1253:31" pos:end="1253:33"><name pos:start="1253:31" pos:end="1253:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1254:9" pos:end="1254:39"><expr pos:start="1254:9" pos:end="1254:38"><call pos:start="1254:9" pos:end="1254:38"><name pos:start="1254:9" pos:end="1254:33">Dot11DecryptCleanSecAssoc</name><argument_list pos:start="1254:34" pos:end="1254:38">(<argument pos:start="1254:35" pos:end="1254:37"><expr pos:start="1254:35" pos:end="1254:37"><name pos:start="1254:35" pos:end="1254:37">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1256:9" pos:end="1256:30"><expr pos:start="1256:9" pos:end="1256:29"><name pos:start="1256:9" pos:end="1256:25"><name pos:start="1256:9" pos:end="1256:11">ctx</name><operator pos:start="1256:12" pos:end="1256:13">-&gt;</operator><name pos:start="1256:14" pos:end="1256:25">pkt_ssid_len</name></name> <operator pos:start="1256:27" pos:end="1256:27">=</operator> <literal type="number" pos:start="1256:29" pos:end="1256:29">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1257:9" pos:end="1258:81"><expr pos:start="1257:9" pos:end="1258:80"><name pos:start="1257:9" pos:end="1257:20"><name pos:start="1257:9" pos:end="1257:11">ctx</name><operator pos:start="1257:12" pos:end="1257:13">-&gt;</operator><name pos:start="1257:14" pos:end="1257:20">sa_hash</name></name> <operator pos:start="1257:22" pos:end="1257:22">=</operator> <call pos:start="1257:24" pos:end="1258:80"><name pos:start="1257:24" pos:end="1257:44">g_hash_table_new_full</name><argument_list pos:start="1257:45" pos:end="1258:80">(<argument pos:start="1257:46" pos:end="1257:63"><expr pos:start="1257:46" pos:end="1257:63"><name pos:start="1257:46" pos:end="1257:63">Dot11DecryptSaHash</name></expr></argument>, <argument pos:start="1257:66" pos:end="1257:88"><expr pos:start="1257:66" pos:end="1257:88"><name pos:start="1257:66" pos:end="1257:88">Dot11DecryptIsSaIdEqual</name></expr></argument>,
                                             <argument pos:start="1258:46" pos:end="1258:51"><expr pos:start="1258:46" pos:end="1258:51"><name pos:start="1258:46" pos:end="1258:51">g_free</name></expr></argument>, <argument pos:start="1258:54" pos:end="1258:79"><expr pos:start="1258:54" pos:end="1258:79"><name pos:start="1258:54" pos:end="1258:79">Dot11DecryptRecurseCleanSA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1259:9" pos:end="1262:9"><if pos:start="1259:9" pos:end="1262:9">if <condition pos:start="1259:12" pos:end="1259:33">(<expr pos:start="1259:13" pos:end="1259:32"><name pos:start="1259:13" pos:end="1259:24"><name pos:start="1259:13" pos:end="1259:15">ctx</name><operator pos:start="1259:16" pos:end="1259:17">-&gt;</operator><name pos:start="1259:18" pos:end="1259:24">sa_hash</name></name> <operator pos:start="1259:26" pos:end="1259:27">==</operator> <name pos:start="1259:29" pos:end="1259:32">NULL</name></expr>)</condition>
        <block pos:start="1260:9" pos:end="1262:9">{<block_content pos:start="1261:13" pos:end="1261:46">
            <return pos:start="1261:13" pos:end="1261:46">return <expr pos:start="1261:20" pos:end="1261:45"><name pos:start="1261:20" pos:end="1261:45">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="1264:9" pos:end="1264:41"><expr pos:start="1264:9" pos:end="1264:40"><call pos:start="1264:9" pos:end="1264:40"><name pos:start="1264:9" pos:end="1264:16">ws_debug</name><argument_list pos:start="1264:17" pos:end="1264:40">(<argument pos:start="1264:18" pos:end="1264:39"><expr pos:start="1264:18" pos:end="1264:39"><literal type="string" pos:start="1264:18" pos:end="1264:39">"Context initialized!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1265:9" pos:end="1265:40">return <expr pos:start="1265:16" pos:end="1265:39"><name pos:start="1265:16" pos:end="1265:39">DOT11DECRYPT_RET_SUCCESS</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="1268:5" pos:end="1285:0"><type pos:start="1268:5" pos:end="1268:7"><name pos:start="1268:5" pos:end="1268:7">INT</name></type> <name pos:start="1268:9" pos:end="1268:34">Dot11DecryptDestroyContext</name><parameter_list pos:start="1268:35" pos:end="1269:34">(
        <parameter pos:start="1269:9" pos:end="1269:33"><decl pos:start="1269:9" pos:end="1269:33"><type pos:start="1269:9" pos:end="1269:29"><name pos:start="1269:9" pos:end="1269:29">PDOT11DECRYPT_CONTEXT</name></type> <name pos:start="1269:31" pos:end="1269:33">ctx</name></decl></parameter>)</parameter_list>
    <block pos:start="1270:5" pos:end="1285:0">{<block_content pos:start="1271:9" pos:end="1281:40">
        <if_stmt pos:start="1271:9" pos:end="1275:9"><if pos:start="1271:9" pos:end="1275:9">if <condition pos:start="1271:12" pos:end="1271:24">(<expr pos:start="1271:13" pos:end="1271:23"><name pos:start="1271:13" pos:end="1271:15">ctx</name> <operator pos:start="1271:17" pos:end="1271:18">==</operator> <name pos:start="1271:20" pos:end="1271:23">NULL</name></expr>)</condition>
        <block pos:start="1272:9" pos:end="1275:9">{<block_content pos:start="1273:13" pos:end="1274:46">
            <expr_stmt pos:start="1273:13" pos:end="1273:39"><expr pos:start="1273:13" pos:end="1273:38"><call pos:start="1273:13" pos:end="1273:38"><name pos:start="1273:13" pos:end="1273:22">ws_warning</name><argument_list pos:start="1273:23" pos:end="1273:38">(<argument pos:start="1273:24" pos:end="1273:37"><expr pos:start="1273:24" pos:end="1273:37"><literal type="string" pos:start="1273:24" pos:end="1273:37">"NULL context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1274:13" pos:end="1274:46">return <expr pos:start="1274:20" pos:end="1274:45"><name pos:start="1274:20" pos:end="1274:45">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="1277:9" pos:end="1277:35"><expr pos:start="1277:9" pos:end="1277:34"><call pos:start="1277:9" pos:end="1277:34"><name pos:start="1277:9" pos:end="1277:29">Dot11DecryptCleanKeys</name><argument_list pos:start="1277:30" pos:end="1277:34">(<argument pos:start="1277:31" pos:end="1277:33"><expr pos:start="1277:31" pos:end="1277:33"><name pos:start="1277:31" pos:end="1277:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1278:9" pos:end="1278:39"><expr pos:start="1278:9" pos:end="1278:38"><call pos:start="1278:9" pos:end="1278:38"><name pos:start="1278:9" pos:end="1278:33">Dot11DecryptCleanSecAssoc</name><argument_list pos:start="1278:34" pos:end="1278:38">(<argument pos:start="1278:35" pos:end="1278:37"><expr pos:start="1278:35" pos:end="1278:37"><name pos:start="1278:35" pos:end="1278:37">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1280:9" pos:end="1280:39"><expr pos:start="1280:9" pos:end="1280:38"><call pos:start="1280:9" pos:end="1280:38"><name pos:start="1280:9" pos:end="1280:16">ws_debug</name><argument_list pos:start="1280:17" pos:end="1280:38">(<argument pos:start="1280:18" pos:end="1280:37"><expr pos:start="1280:18" pos:end="1280:37"><literal type="string" pos:start="1280:18" pos:end="1280:37">"Context destroyed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1281:9" pos:end="1281:40">return <expr pos:start="1281:16" pos:end="1281:39"><name pos:start="1281:16" pos:end="1281:39">DOT11DECRYPT_RET_SUCCESS</name></expr>;</return>
    </block_content>}</block></function>

<cpp:ifdef pos:start="1284:1" pos:end="1284:18">#<cpp:directive pos:start="1284:2" pos:end="1284:6">ifdef</cpp:directive> <name pos:start="1284:8" pos:end="1284:18">__cplusplus</name></cpp:ifdef>
</block_content>}</block></extern>
<cpp:endif pos:start="1286:1" pos:end="1286:6">#<cpp:directive pos:start="1286:2" pos:end="1286:6">endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen" pos:start="1288:1" pos:end="1288:78">/****************************************************************************/</comment>

<comment type="block" format="doxygen" pos:start="1290:1" pos:end="1290:78">/****************************************************************************/</comment>
<comment type="block" pos:start="1291:1" pos:end="1291:75">/* Internal function definitions                                         */</comment>

<cpp:ifdef pos:start="1293:1" pos:end="1293:18">#<cpp:directive pos:start="1293:2" pos:end="1293:6">ifdef</cpp:directive> <name pos:start="1293:8" pos:end="1293:18">__cplusplus</name></cpp:ifdef>
<extern pos:start="1294:1" pos:end="3377:0">extern <literal type="string" pos:start="1294:8" pos:end="1294:10">"C"</literal>
<block pos:start="1295:1" pos:end="3377:0">{<block_content pos:start="1298:5" pos:end="3375:0">
<cpp:endif pos:start="1296:1" pos:end="1296:6">#<cpp:directive pos:start="1296:2" pos:end="1296:6">endif</cpp:directive></cpp:endif>

    <function pos:start="1298:5" pos:end="1452:5"><type pos:start="1298:5" pos:end="1298:14"><specifier pos:start="1298:5" pos:end="1298:10">static</specifier> <name pos:start="1298:12" pos:end="1298:14">INT</name></type>
    <name pos:start="1299:5" pos:end="1299:23">Dot11DecryptRsnaMng</name><parameter_list pos:start="1299:24" pos:end="1304:41">(
        <parameter pos:start="1300:9" pos:end="1300:27"><decl pos:start="1300:9" pos:end="1300:27"><type pos:start="1300:9" pos:end="1300:27"><name pos:start="1300:9" pos:end="1300:13">UCHAR</name> <modifier pos:start="1300:15" pos:end="1300:15">*</modifier></type><name pos:start="1300:16" pos:end="1300:27">decrypt_data</name></decl></parameter>,
        <parameter pos:start="1301:9" pos:end="1301:28"><decl pos:start="1301:9" pos:end="1301:28"><type pos:start="1301:9" pos:end="1301:28"><name pos:start="1301:9" pos:end="1301:13">guint</name></type> <name pos:start="1301:15" pos:end="1301:28">mac_header_len</name></decl></parameter>,
        <parameter pos:start="1302:9" pos:end="1302:26"><decl pos:start="1302:9" pos:end="1302:26"><type pos:start="1302:9" pos:end="1302:26"><name pos:start="1302:9" pos:end="1302:13">guint</name> <modifier pos:start="1302:15" pos:end="1302:15">*</modifier></type><name pos:start="1302:16" pos:end="1302:26">decrypt_len</name></decl></parameter>,
        <parameter pos:start="1303:9" pos:end="1303:34"><decl pos:start="1303:9" pos:end="1303:34"><type pos:start="1303:9" pos:end="1303:34"><name pos:start="1303:9" pos:end="1303:30">PDOT11DECRYPT_KEY_ITEM</name></type> <name pos:start="1303:32" pos:end="1303:34">key</name></decl></parameter>,
        <parameter pos:start="1304:9" pos:end="1304:40"><decl pos:start="1304:9" pos:end="1304:40"><type pos:start="1304:9" pos:end="1304:40"><name pos:start="1304:9" pos:end="1304:36">DOT11DECRYPT_SEC_ASSOCIATION</name> <modifier pos:start="1304:38" pos:end="1304:38">*</modifier></type><name pos:start="1304:39" pos:end="1304:40">sa</name></decl></parameter>)</parameter_list>
    <block pos:start="1305:5" pos:end="1452:5">{<block_content pos:start="1306:9" pos:end="1451:40">
        <decl_stmt pos:start="1306:9" pos:end="1306:20"><decl pos:start="1306:9" pos:end="1306:19"><type pos:start="1306:9" pos:end="1306:11"><name pos:start="1306:9" pos:end="1306:11">INT</name></type> <name pos:start="1306:13" pos:end="1306:15">ret</name> <init pos:start="1306:17" pos:end="1306:19">= <expr pos:start="1306:19" pos:end="1306:19"><literal type="number" pos:start="1306:19" pos:end="1306:19">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="1307:9" pos:end="1307:24"><decl pos:start="1307:9" pos:end="1307:23"><type pos:start="1307:9" pos:end="1307:15"><name pos:start="1307:9" pos:end="1307:13">UCHAR</name> <modifier pos:start="1307:15" pos:end="1307:15">*</modifier></type><name pos:start="1307:16" pos:end="1307:23">try_data</name></decl>;</decl_stmt>
        <decl_stmt pos:start="1308:9" pos:end="1308:42"><decl pos:start="1308:9" pos:end="1308:41"><type pos:start="1308:9" pos:end="1308:13"><name pos:start="1308:9" pos:end="1308:13">guint</name></type> <name pos:start="1308:15" pos:end="1308:26">try_data_len</name> <init pos:start="1308:28" pos:end="1308:41">= <expr pos:start="1308:30" pos:end="1308:41"><operator pos:start="1308:30" pos:end="1308:30">*</operator><name pos:start="1308:31" pos:end="1308:41">decrypt_len</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="1310:9" pos:end="1314:9"><if pos:start="1310:9" pos:end="1314:9">if <condition pos:start="1310:12" pos:end="1310:30">(<expr pos:start="1310:13" pos:end="1310:29"><operator pos:start="1310:13" pos:end="1310:13">*</operator><name pos:start="1310:14" pos:end="1310:24">decrypt_len</name> <operator pos:start="1310:26" pos:end="1310:27">==</operator> <literal type="number" pos:start="1310:29" pos:end="1310:29">0</literal></expr>)</condition>
        <block pos:start="1311:9" pos:end="1314:9">{<block_content pos:start="1312:13" pos:end="1313:46">
            <expr_stmt pos:start="1312:13" pos:end="1312:50"><expr pos:start="1312:13" pos:end="1312:49"><call pos:start="1312:13" pos:end="1312:49"><name pos:start="1312:13" pos:end="1312:20">ws_debug</name><argument_list pos:start="1312:21" pos:end="1312:49">(<argument pos:start="1312:22" pos:end="1312:48"><expr pos:start="1312:22" pos:end="1312:48"><literal type="string" pos:start="1312:22" pos:end="1312:48">"Invalid decryption length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1313:13" pos:end="1313:46">return <expr pos:start="1313:20" pos:end="1313:45"><name pos:start="1313:20" pos:end="1313:45">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1316:9" pos:end="1316:60">/* allocate a temp buffer for the decryption loop */</comment>
        <expr_stmt pos:start="1317:9" pos:end="1317:51"><expr pos:start="1317:9" pos:end="1317:50"><name pos:start="1317:9" pos:end="1317:16">try_data</name> <operator pos:start="1317:18" pos:end="1317:18">=</operator> <operator pos:start="1317:20" pos:end="1317:20">(</operator><name pos:start="1317:21" pos:end="1317:25">UCHAR</name> <operator pos:start="1317:27" pos:end="1317:27">*</operator><operator pos:start="1317:28" pos:end="1317:28">)</operator><call pos:start="1317:29" pos:end="1317:50"><name pos:start="1317:29" pos:end="1317:36">g_malloc</name><argument_list pos:start="1317:37" pos:end="1317:50">(<argument pos:start="1317:38" pos:end="1317:49"><expr pos:start="1317:38" pos:end="1317:49"><name pos:start="1317:38" pos:end="1317:49">try_data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1319:9" pos:end="1319:40">/* start of loop added by GCS */</comment>
        <for pos:start="1320:9" pos:end="1415:9">for <control pos:start="1320:13" pos:end="1320:49">(<comment type="block" pos:start="1320:14" pos:end="1320:21">/* sa */</comment><init pos:start="1320:22" pos:end="1320:22">;</init> <condition pos:start="1320:24" pos:end="1320:34"><expr pos:start="1320:24" pos:end="1320:33"><name pos:start="1320:24" pos:end="1320:25">sa</name> <operator pos:start="1320:27" pos:end="1320:28">!=</operator> <name pos:start="1320:30" pos:end="1320:33">NULL</name></expr>;</condition> <incr pos:start="1320:36" pos:end="1320:48"><expr pos:start="1320:36" pos:end="1320:48"><name pos:start="1320:36" pos:end="1320:37">sa</name> <operator pos:start="1320:39" pos:end="1320:39">=</operator> <name pos:start="1320:41" pos:end="1320:48"><name pos:start="1320:41" pos:end="1320:42">sa</name><operator pos:start="1320:43" pos:end="1320:44">-&gt;</operator><name pos:start="1320:45" pos:end="1320:48">next</name></name></expr></incr>)</control>
        <block pos:start="1321:9" pos:end="1415:9">{<block_content pos:start="1323:13" pos:end="1414:13">

            <if_stmt pos:start="1323:13" pos:end="1327:13"><if pos:start="1323:13" pos:end="1327:13">if <condition pos:start="1323:16" pos:end="1323:38">(<expr pos:start="1323:17" pos:end="1323:37"><name pos:start="1323:17" pos:end="1323:28"><name pos:start="1323:17" pos:end="1323:18">sa</name><operator pos:start="1323:19" pos:end="1323:20">-&gt;</operator><name pos:start="1323:21" pos:end="1323:28">validKey</name></name> <operator pos:start="1323:30" pos:end="1323:31">==</operator> <name pos:start="1323:33" pos:end="1323:37">FALSE</name></expr>)</condition>
            <block pos:start="1324:13" pos:end="1327:13">{<block_content pos:start="1325:17" pos:end="1326:25">
                <expr_stmt pos:start="1325:17" pos:end="1325:46"><expr pos:start="1325:17" pos:end="1325:45"><call pos:start="1325:17" pos:end="1325:45"><name pos:start="1325:17" pos:end="1325:24">ws_noisy</name><argument_list pos:start="1325:25" pos:end="1325:45">(<argument pos:start="1325:26" pos:end="1325:44"><expr pos:start="1325:26" pos:end="1325:44"><literal type="string" pos:start="1325:26" pos:end="1325:44">"Key not yet valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue pos:start="1326:17" pos:end="1326:25">continue;</continue>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="1329:13" pos:end="1329:60">/* copy the encrypted data into a temp buffer */</comment>
            <expr_stmt pos:start="1330:13" pos:end="1330:57"><expr pos:start="1330:13" pos:end="1330:56"><call pos:start="1330:13" pos:end="1330:56"><name pos:start="1330:13" pos:end="1330:18">memcpy</name><argument_list pos:start="1330:19" pos:end="1330:56">(<argument pos:start="1330:20" pos:end="1330:27"><expr pos:start="1330:20" pos:end="1330:27"><name pos:start="1330:20" pos:end="1330:27">try_data</name></expr></argument>, <argument pos:start="1330:30" pos:end="1330:41"><expr pos:start="1330:30" pos:end="1330:41"><name pos:start="1330:30" pos:end="1330:41">decrypt_data</name></expr></argument>, <argument pos:start="1330:44" pos:end="1330:55"><expr pos:start="1330:44" pos:end="1330:55"><operator pos:start="1330:44" pos:end="1330:44">*</operator><name pos:start="1330:45" pos:end="1330:55">decrypt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1332:13" pos:end="1414:13"><if pos:start="1332:13" pos:end="1366:13">if <condition pos:start="1332:16" pos:end="1332:37">(<expr pos:start="1332:17" pos:end="1332:36"><name pos:start="1332:17" pos:end="1332:31"><name pos:start="1332:17" pos:end="1332:18">sa</name><operator pos:start="1332:19" pos:end="1332:20">-&gt;</operator><name pos:start="1332:21" pos:end="1332:23">wpa</name><operator pos:start="1332:24" pos:end="1332:24">.</operator><name pos:start="1332:25" pos:end="1332:31">key_ver</name></name> <operator pos:start="1332:33" pos:end="1332:34">==</operator> <literal type="number" pos:start="1332:36" pos:end="1332:36">1</literal></expr>)</condition>
            <block pos:start="1333:13" pos:end="1366:13">{<block_content pos:start="1335:17" pos:end="1365:22">
                <comment type="block" pos:start="1334:17" pos:end="1334:102">/* CCMP -&gt; HMAC-MD5 is the EAPOL-Key MIC, RC4 is the EAPOL-Key encryption algorithm */</comment>
                <expr_stmt pos:start="1335:17" pos:end="1335:33"><expr pos:start="1335:17" pos:end="1335:32"><call pos:start="1335:17" pos:end="1335:32"><name pos:start="1335:17" pos:end="1335:24">ws_noisy</name><argument_list pos:start="1335:25" pos:end="1335:32">(<argument pos:start="1335:26" pos:end="1335:31"><expr pos:start="1335:26" pos:end="1335:31"><literal type="string" pos:start="1335:26" pos:end="1335:31">"TKIP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1336:17" pos:end="1336:68"><expr pos:start="1336:17" pos:end="1336:67"><call pos:start="1336:17" pos:end="1336:67"><name pos:start="1336:17" pos:end="1336:26">DEBUG_DUMP</name><argument_list pos:start="1336:27" pos:end="1336:67">(<argument pos:start="1336:28" pos:end="1336:32"><expr pos:start="1336:28" pos:end="1336:32"><literal type="string" pos:start="1336:28" pos:end="1336:32">"ptk"</literal></expr></argument>, <argument pos:start="1336:35" pos:end="1336:45"><expr pos:start="1336:35" pos:end="1336:45"><name pos:start="1336:35" pos:end="1336:45"><name pos:start="1336:35" pos:end="1336:36">sa</name><operator pos:start="1336:37" pos:end="1336:38">-&gt;</operator><name pos:start="1336:39" pos:end="1336:41">wpa</name><operator pos:start="1336:42" pos:end="1336:42">.</operator><name pos:start="1336:43" pos:end="1336:45">ptk</name></name></expr></argument>, <argument pos:start="1336:48" pos:end="1336:49"><expr pos:start="1336:48" pos:end="1336:49"><literal type="number" pos:start="1336:48" pos:end="1336:49">64</literal></expr></argument>, <argument pos:start="1336:52" pos:end="1336:66"><expr pos:start="1336:52" pos:end="1336:66"><name pos:start="1336:52" pos:end="1336:66">LOG_LEVEL_NOISY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1337:17" pos:end="1338:48"><expr pos:start="1337:17" pos:end="1338:47"><call pos:start="1337:17" pos:end="1338:47"><name pos:start="1337:17" pos:end="1337:26">DEBUG_DUMP</name><argument_list pos:start="1337:27" pos:end="1338:47">(<argument pos:start="1337:28" pos:end="1337:45"><expr pos:start="1337:28" pos:end="1337:45"><literal type="string" pos:start="1337:28" pos:end="1337:45">"ptk portion used"</literal></expr></argument>, <argument pos:start="1337:48" pos:end="1337:65"><expr pos:start="1337:48" pos:end="1337:65"><operator pos:start="1337:48" pos:end="1337:48">(</operator><name pos:start="1337:49" pos:end="1337:59"><name pos:start="1337:49" pos:end="1337:50">sa</name><operator pos:start="1337:51" pos:end="1337:52">-&gt;</operator><name pos:start="1337:53" pos:end="1337:55">wpa</name><operator pos:start="1337:56" pos:end="1337:56">.</operator><name pos:start="1337:57" pos:end="1337:59">ptk</name></name> <operator pos:start="1337:61" pos:end="1337:61">+</operator> <literal type="number" pos:start="1337:63" pos:end="1337:64">32</literal><operator pos:start="1337:65" pos:end="1337:65">)</operator></expr></argument>,
                           <argument pos:start="1338:28" pos:end="1338:29"><expr pos:start="1338:28" pos:end="1338:29"><literal type="number" pos:start="1338:28" pos:end="1338:29">16</literal></expr></argument>, <argument pos:start="1338:32" pos:end="1338:46"><expr pos:start="1338:32" pos:end="1338:46"><name pos:start="1338:32" pos:end="1338:46">LOG_LEVEL_NOISY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1340:17" pos:end="1345:17"><if pos:start="1340:17" pos:end="1345:17">if <condition pos:start="1340:20" pos:end="1340:57">(<expr pos:start="1340:21" pos:end="1340:56"><operator pos:start="1340:21" pos:end="1340:21">*</operator><name pos:start="1340:22" pos:end="1340:32">decrypt_len</name> <operator pos:start="1340:34" pos:end="1340:34">&lt;</operator> <operator pos:start="1340:36" pos:end="1340:36">(</operator><name pos:start="1340:37" pos:end="1340:41">guint</name><operator pos:start="1340:42" pos:end="1340:42">)</operator><name pos:start="1340:43" pos:end="1340:56">mac_header_len</name></expr>)</condition>
                <block pos:start="1341:17" pos:end="1345:17">{<block_content pos:start="1342:21" pos:end="1344:54">
                    <expr_stmt pos:start="1342:21" pos:end="1342:58"><expr pos:start="1342:21" pos:end="1342:57"><call pos:start="1342:21" pos:end="1342:57"><name pos:start="1342:21" pos:end="1342:28">ws_debug</name><argument_list pos:start="1342:29" pos:end="1342:57">(<argument pos:start="1342:30" pos:end="1342:56"><expr pos:start="1342:30" pos:end="1342:56"><literal type="string" pos:start="1342:30" pos:end="1342:56">"Invalid decryption length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1343:21" pos:end="1343:37"><expr pos:start="1343:21" pos:end="1343:36"><call pos:start="1343:21" pos:end="1343:36"><name pos:start="1343:21" pos:end="1343:26">g_free</name><argument_list pos:start="1343:27" pos:end="1343:36">(<argument pos:start="1343:28" pos:end="1343:35"><expr pos:start="1343:28" pos:end="1343:35"><name pos:start="1343:28" pos:end="1343:35">try_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:start="1344:21" pos:end="1344:54">return <expr pos:start="1344:28" pos:end="1344:53"><name pos:start="1344:28" pos:end="1344:53">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <if_stmt pos:start="1346:17" pos:end="1351:17"><if pos:start="1346:17" pos:end="1351:17">if <condition pos:start="1346:20" pos:end="1346:83">(<expr pos:start="1346:21" pos:end="1346:82"><operator pos:start="1346:21" pos:end="1346:21">*</operator><name pos:start="1346:22" pos:end="1346:32">decrypt_len</name> <operator pos:start="1346:34" pos:end="1346:34">&lt;</operator> <name pos:start="1346:36" pos:end="1346:59">DOT11DECRYPT_TKIP_MICLEN</name> <operator pos:start="1346:61" pos:end="1346:61">+</operator> <name pos:start="1346:63" pos:end="1346:82">DOT11DECRYPT_WEP_ICV</name></expr>)</condition>
                <block pos:start="1347:17" pos:end="1351:17">{<block_content pos:start="1348:21" pos:end="1350:54">
                    <expr_stmt pos:start="1348:21" pos:end="1348:58"><expr pos:start="1348:21" pos:end="1348:57"><call pos:start="1348:21" pos:end="1348:57"><name pos:start="1348:21" pos:end="1348:28">ws_debug</name><argument_list pos:start="1348:29" pos:end="1348:57">(<argument pos:start="1348:30" pos:end="1348:56"><expr pos:start="1348:30" pos:end="1348:56"><literal type="string" pos:start="1348:30" pos:end="1348:56">"Invalid decryption length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1349:21" pos:end="1349:37"><expr pos:start="1349:21" pos:end="1349:36"><call pos:start="1349:21" pos:end="1349:36"><name pos:start="1349:21" pos:end="1349:26">g_free</name><argument_list pos:start="1349:27" pos:end="1349:36">(<argument pos:start="1349:28" pos:end="1349:35"><expr pos:start="1349:28" pos:end="1349:35"><name pos:start="1349:28" pos:end="1349:35">try_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:start="1350:21" pos:end="1350:54">return <expr pos:start="1350:28" pos:end="1350:53"><name pos:start="1350:28" pos:end="1350:53">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1353:17" pos:end="1355:66"><expr pos:start="1353:17" pos:end="1355:65"><name pos:start="1353:17" pos:end="1353:19">ret</name> <operator pos:start="1353:21" pos:end="1353:21">=</operator> <call pos:start="1353:23" pos:end="1355:65"><name pos:start="1353:23" pos:end="1353:45">Dot11DecryptTkipDecrypt</name><argument_list pos:start="1353:46" pos:end="1355:65">(<argument pos:start="1353:47" pos:end="1353:71"><expr pos:start="1353:47" pos:end="1353:71"><name pos:start="1353:47" pos:end="1353:54">try_data</name> <operator pos:start="1353:56" pos:end="1353:56">+</operator> <name pos:start="1353:58" pos:end="1353:71">mac_header_len</name></expr></argument>, <argument pos:start="1353:74" pos:end="1353:102"><expr pos:start="1353:74" pos:end="1353:102"><operator pos:start="1353:74" pos:end="1353:74">*</operator><name pos:start="1353:75" pos:end="1353:85">decrypt_len</name> <operator pos:start="1353:87" pos:end="1353:87">-</operator> <name pos:start="1353:89" pos:end="1353:102">mac_header_len</name></expr></argument>,
                                              <argument pos:start="1354:47" pos:end="1354:79"><expr pos:start="1354:47" pos:end="1354:79"><name pos:start="1354:47" pos:end="1354:54">try_data</name> <operator pos:start="1354:56" pos:end="1354:56">+</operator> <name pos:start="1354:58" pos:end="1354:79">DOT11DECRYPT_TA_OFFSET</name></expr></argument>,
                                              <argument pos:start="1355:47" pos:end="1355:64"><expr pos:start="1355:47" pos:end="1355:64"><operator pos:start="1355:47" pos:end="1355:47">(</operator><name pos:start="1355:48" pos:end="1355:58"><name pos:start="1355:48" pos:end="1355:49">sa</name><operator pos:start="1355:50" pos:end="1355:51">-&gt;</operator><name pos:start="1355:52" pos:end="1355:54">wpa</name><operator pos:start="1355:55" pos:end="1355:55">.</operator><name pos:start="1355:56" pos:end="1355:58">ptk</name></name> <operator pos:start="1355:60" pos:end="1355:60">+</operator> <literal type="number" pos:start="1355:62" pos:end="1355:63">32</literal><operator pos:start="1355:64" pos:end="1355:64">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="1356:17" pos:end="1360:17"><if pos:start="1356:17" pos:end="1360:17">if <condition pos:start="1356:20" pos:end="1356:24">(<expr pos:start="1356:21" pos:end="1356:23"><name pos:start="1356:21" pos:end="1356:23">ret</name></expr>)</condition>
                <block pos:start="1357:17" pos:end="1360:17">{<block_content pos:start="1358:21" pos:end="1359:29">
                    <expr_stmt pos:start="1358:21" pos:end="1358:45"><expr pos:start="1358:21" pos:end="1358:44"><call pos:start="1358:21" pos:end="1358:44"><name pos:start="1358:21" pos:end="1358:28">ws_noisy</name><argument_list pos:start="1358:29" pos:end="1358:44">(<argument pos:start="1358:30" pos:end="1358:43"><expr pos:start="1358:30" pos:end="1358:43"><literal type="string" pos:start="1358:30" pos:end="1358:43">"TKIP failed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue pos:start="1359:21" pos:end="1359:29">continue;</continue>
                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1362:17" pos:end="1362:46"><expr pos:start="1362:17" pos:end="1362:45"><call pos:start="1362:17" pos:end="1362:45"><name pos:start="1362:17" pos:end="1362:24">ws_noisy</name><argument_list pos:start="1362:25" pos:end="1362:45">(<argument pos:start="1362:26" pos:end="1362:44"><expr pos:start="1362:26" pos:end="1362:44"><literal type="string" pos:start="1362:26" pos:end="1362:44">"TKIP DECRYPTED!!!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block" pos:start="1363:17" pos:end="1363:63">/* remove MIC and ICV from the end of packet */</comment>
                <expr_stmt pos:start="1364:17" pos:end="1364:80"><expr pos:start="1364:17" pos:end="1364:79"><operator pos:start="1364:17" pos:end="1364:17">*</operator><name pos:start="1364:18" pos:end="1364:28">decrypt_len</name> <operator pos:start="1364:30" pos:end="1364:31">-=</operator> <name pos:start="1364:33" pos:end="1364:56">DOT11DECRYPT_TKIP_MICLEN</name> <operator pos:start="1364:58" pos:end="1364:58">+</operator> <name pos:start="1364:60" pos:end="1364:79">DOT11DECRYPT_WEP_ICV</name></expr>;</expr_stmt>
                <break pos:start="1365:17" pos:end="1365:22">break;</break>
            </block_content>}</block></if>
            <if type="elseif" pos:start="1367:13" pos:end="1388:13">else if <condition pos:start="1367:21" pos:end="1367:64">(<expr pos:start="1367:22" pos:end="1367:63"><name pos:start="1367:22" pos:end="1367:35"><name pos:start="1367:22" pos:end="1367:23">sa</name><operator pos:start="1367:24" pos:end="1367:25">-&gt;</operator><name pos:start="1367:26" pos:end="1367:28">wpa</name><operator pos:start="1367:29" pos:end="1367:29">.</operator><name pos:start="1367:30" pos:end="1367:35">cipher</name></name> <operator pos:start="1367:37" pos:end="1367:38">==</operator> <literal type="number" pos:start="1367:40" pos:end="1367:40">8</literal> <operator pos:start="1367:42" pos:end="1367:43">||</operator> <name pos:start="1367:45" pos:end="1367:58"><name pos:start="1367:45" pos:end="1367:46">sa</name><operator pos:start="1367:47" pos:end="1367:48">-&gt;</operator><name pos:start="1367:49" pos:end="1367:51">wpa</name><operator pos:start="1367:52" pos:end="1367:52">.</operator><name pos:start="1367:53" pos:end="1367:58">cipher</name></name> <operator pos:start="1367:60" pos:end="1367:61">==</operator> <literal type="number" pos:start="1367:63" pos:end="1367:63">9</literal></expr>)</condition>
            <block pos:start="1368:13" pos:end="1388:13">{<block_content pos:start="1369:17" pos:end="1387:22">
                <expr_stmt pos:start="1369:17" pos:end="1369:33"><expr pos:start="1369:17" pos:end="1369:32"><call pos:start="1369:17" pos:end="1369:32"><name pos:start="1369:17" pos:end="1369:24">ws_noisy</name><argument_list pos:start="1369:25" pos:end="1369:32">(<argument pos:start="1369:26" pos:end="1369:31"><expr pos:start="1369:26" pos:end="1369:31"><literal type="string" pos:start="1369:26" pos:end="1369:31">"GCMP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1371:17" pos:end="1376:17"><if pos:start="1371:17" pos:end="1376:17">if <condition pos:start="1371:20" pos:end="1371:61">(<expr pos:start="1371:21" pos:end="1371:60"><operator pos:start="1371:21" pos:end="1371:21">*</operator><name pos:start="1371:22" pos:end="1371:32">decrypt_len</name> <operator pos:start="1371:34" pos:end="1371:34">&lt;</operator> <name pos:start="1371:36" pos:end="1371:60">DOT11DECRYPT_GCMP_TRAILER</name></expr>)</condition>
                <block pos:start="1372:17" pos:end="1376:17">{<block_content pos:start="1373:21" pos:end="1375:54">
                    <expr_stmt pos:start="1373:21" pos:end="1373:58"><expr pos:start="1373:21" pos:end="1373:57"><call pos:start="1373:21" pos:end="1373:57"><name pos:start="1373:21" pos:end="1373:28">ws_debug</name><argument_list pos:start="1373:29" pos:end="1373:57">(<argument pos:start="1373:30" pos:end="1373:56"><expr pos:start="1373:30" pos:end="1373:56"><literal type="string" pos:start="1373:30" pos:end="1373:56">"Invalid decryption length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1374:21" pos:end="1374:37"><expr pos:start="1374:21" pos:end="1374:36"><call pos:start="1374:21" pos:end="1374:36"><name pos:start="1374:21" pos:end="1374:26">g_free</name><argument_list pos:start="1374:27" pos:end="1374:36">(<argument pos:start="1374:28" pos:end="1374:35"><expr pos:start="1374:28" pos:end="1374:35"><name pos:start="1374:28" pos:end="1374:35">try_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:start="1375:21" pos:end="1375:54">return <expr pos:start="1375:28" pos:end="1375:53"><name pos:start="1375:28" pos:end="1375:53">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt pos:start="1377:17" pos:end="1379:88"><expr pos:start="1377:17" pos:end="1379:87"><name pos:start="1377:17" pos:end="1377:19">ret</name> <operator pos:start="1377:21" pos:end="1377:21">=</operator> <call pos:start="1377:23" pos:end="1379:87"><name pos:start="1377:23" pos:end="1377:45">Dot11DecryptGcmpDecrypt</name><argument_list pos:start="1377:46" pos:end="1379:87">(<argument pos:start="1377:47" pos:end="1377:54"><expr pos:start="1377:47" pos:end="1377:54"><name pos:start="1377:47" pos:end="1377:54">try_data</name></expr></argument>, <argument pos:start="1377:57" pos:end="1377:70"><expr pos:start="1377:57" pos:end="1377:70"><name pos:start="1377:57" pos:end="1377:70">mac_header_len</name></expr></argument>, <argument pos:start="1377:73" pos:end="1377:89"><expr pos:start="1377:73" pos:end="1377:89"><operator pos:start="1377:73" pos:end="1377:73">(</operator><name pos:start="1377:74" pos:end="1377:76">INT</name><operator pos:start="1377:77" pos:end="1377:77">)</operator><operator pos:start="1377:78" pos:end="1377:78">*</operator><name pos:start="1377:79" pos:end="1377:89">decrypt_len</name></expr></argument>,
                                              <argument pos:start="1378:47" pos:end="1378:155"><expr pos:start="1378:47" pos:end="1378:155"><operator pos:start="1378:47" pos:end="1378:47">(</operator><name pos:start="1378:48" pos:end="1378:58"><name pos:start="1378:48" pos:end="1378:49">sa</name><operator pos:start="1378:50" pos:end="1378:51">-&gt;</operator><name pos:start="1378:52" pos:end="1378:54">wpa</name><operator pos:start="1378:55" pos:end="1378:55">.</operator><name pos:start="1378:56" pos:end="1378:58">ptk</name></name> <operator pos:start="1378:60" pos:end="1378:60">+</operator> <operator pos:start="1378:62" pos:end="1378:62">(</operator><operator pos:start="1378:63" pos:end="1378:63">(</operator><operator pos:start="1378:64" pos:end="1378:64">(</operator><operator pos:start="1378:65" pos:end="1378:65">(</operator><operator pos:start="1378:66" pos:end="1378:66">(</operator><literal type="number" pos:start="1378:67" pos:end="1378:67">0</literal><operator pos:start="1378:68" pos:end="1378:68">)</operator> <operator pos:start="1378:70" pos:end="1378:70">+</operator> <call pos:start="1378:72" pos:end="1378:105"><name pos:start="1378:72" pos:end="1378:92">Dot11DecryptGetKckLen</name><argument_list pos:start="1378:93" pos:end="1378:105">(<argument pos:start="1378:94" pos:end="1378:104"><expr pos:start="1378:94" pos:end="1378:104"><name pos:start="1378:94" pos:end="1378:104"><name pos:start="1378:94" pos:end="1378:95">sa</name><operator pos:start="1378:96" pos:end="1378:97">-&gt;</operator><name pos:start="1378:98" pos:end="1378:100">wpa</name><operator pos:start="1378:101" pos:end="1378:101">.</operator><name pos:start="1378:102" pos:end="1378:104">akm</name></name></expr></argument>)</argument_list></call> <operator pos:start="1378:107" pos:end="1378:107">/</operator> <literal type="number" pos:start="1378:109" pos:end="1378:109">8</literal><operator pos:start="1378:110" pos:end="1378:110">)</operator><operator pos:start="1378:111" pos:end="1378:111">)</operator> <operator pos:start="1378:113" pos:end="1378:113">+</operator> <call pos:start="1378:115" pos:end="1378:148"><name pos:start="1378:115" pos:end="1378:135">Dot11DecryptGetKekLen</name><argument_list pos:start="1378:136" pos:end="1378:148">(<argument pos:start="1378:137" pos:end="1378:147"><expr pos:start="1378:137" pos:end="1378:147"><name pos:start="1378:137" pos:end="1378:147"><name pos:start="1378:137" pos:end="1378:138">sa</name><operator pos:start="1378:139" pos:end="1378:140">-&gt;</operator><name pos:start="1378:141" pos:end="1378:143">wpa</name><operator pos:start="1378:144" pos:end="1378:144">.</operator><name pos:start="1378:145" pos:end="1378:147">akm</name></name></expr></argument>)</argument_list></call> <operator pos:start="1378:150" pos:end="1378:150">/</operator> <literal type="number" pos:start="1378:152" pos:end="1378:152">8</literal><operator pos:start="1378:153" pos:end="1378:153">)</operator><operator pos:start="1378:154" pos:end="1378:154">)</operator><operator pos:start="1378:155" pos:end="1378:155">)</operator></expr></argument>,
                                              <argument pos:start="1379:47" pos:end="1379:86"><expr pos:start="1379:47" pos:end="1379:86"><call pos:start="1379:47" pos:end="1379:82"><name pos:start="1379:47" pos:end="1379:66">Dot11DecryptGetTkLen</name><argument_list pos:start="1379:67" pos:end="1379:82">(<argument pos:start="1379:68" pos:end="1379:81"><expr pos:start="1379:68" pos:end="1379:81"><name pos:start="1379:68" pos:end="1379:81"><name pos:start="1379:68" pos:end="1379:69">sa</name><operator pos:start="1379:70" pos:end="1379:71">-&gt;</operator><name pos:start="1379:72" pos:end="1379:74">wpa</name><operator pos:start="1379:75" pos:end="1379:75">.</operator><name pos:start="1379:76" pos:end="1379:81">cipher</name></name></expr></argument>)</argument_list></call> <operator pos:start="1379:84" pos:end="1379:84">/</operator> <literal type="number" pos:start="1379:86" pos:end="1379:86">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="1380:17" pos:end="1383:17"><if pos:start="1380:17" pos:end="1383:17">if <condition pos:start="1380:20" pos:end="1380:24">(<expr pos:start="1380:21" pos:end="1380:23"><name pos:start="1380:21" pos:end="1380:23">ret</name></expr>)</condition>
                <block pos:start="1381:17" pos:end="1383:17">{<block_content pos:start="1382:21" pos:end="1382:29">
                    <continue pos:start="1382:21" pos:end="1382:29">continue;</continue>
                </block_content>}</block></if></if_stmt>
                <expr_stmt pos:start="1384:17" pos:end="1384:46"><expr pos:start="1384:17" pos:end="1384:45"><call pos:start="1384:17" pos:end="1384:45"><name pos:start="1384:17" pos:end="1384:24">ws_noisy</name><argument_list pos:start="1384:25" pos:end="1384:45">(<argument pos:start="1384:26" pos:end="1384:44"><expr pos:start="1384:26" pos:end="1384:44"><literal type="string" pos:start="1384:26" pos:end="1384:44">"GCMP DECRYPTED!!!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block" pos:start="1385:17" pos:end="1385:55">/* remove MIC from the end of packet */</comment>
                <expr_stmt pos:start="1386:17" pos:end="1386:58"><expr pos:start="1386:17" pos:end="1386:57"><operator pos:start="1386:17" pos:end="1386:17">*</operator><name pos:start="1386:18" pos:end="1386:28">decrypt_len</name> <operator pos:start="1386:30" pos:end="1386:31">-=</operator> <name pos:start="1386:33" pos:end="1386:57">DOT11DECRYPT_GCMP_TRAILER</name></expr>;</expr_stmt>
                <break pos:start="1387:17" pos:end="1387:22">break;</break>
            </block_content>}</block></if>
            <else pos:start="1389:13" pos:end="1414:13">else
            <block pos:start="1390:13" pos:end="1414:13">{<block_content pos:start="1392:17" pos:end="1413:22">
                <comment type="block" pos:start="1391:17" pos:end="1391:124">/* AES-CCMP -&gt; HMAC-SHA1-128 is the EAPOL-Key MIC, AES wep_key wrap is the EAPOL-Key encryption algorithm */</comment>
                <expr_stmt pos:start="1392:17" pos:end="1392:33"><expr pos:start="1392:17" pos:end="1392:32"><call pos:start="1392:17" pos:end="1392:32"><name pos:start="1392:17" pos:end="1392:24">ws_noisy</name><argument_list pos:start="1392:25" pos:end="1392:32">(<argument pos:start="1392:26" pos:end="1392:31"><expr pos:start="1392:26" pos:end="1392:31"><literal type="string" pos:start="1392:26" pos:end="1392:31">"CCMP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt pos:start="1394:17" pos:end="1394:113"><decl pos:start="1394:17" pos:end="1394:112"><type pos:start="1394:17" pos:end="1394:21"><name pos:start="1394:17" pos:end="1394:21">guint</name></type> <name pos:start="1394:23" pos:end="1394:29">trailer</name> <init pos:start="1394:31" pos:end="1394:112">= <expr pos:start="1394:33" pos:end="1394:112"><ternary pos:start="1394:33" pos:end="1394:112"><condition pos:start="1394:33" pos:end="1394:54"><expr pos:start="1394:33" pos:end="1394:52"><name pos:start="1394:33" pos:end="1394:46"><name pos:start="1394:33" pos:end="1394:34">sa</name><operator pos:start="1394:35" pos:end="1394:36">-&gt;</operator><name pos:start="1394:37" pos:end="1394:39">wpa</name><operator pos:start="1394:40" pos:end="1394:40">.</operator><name pos:start="1394:41" pos:end="1394:46">cipher</name></name> <operator pos:start="1394:48" pos:end="1394:49">!=</operator> <literal type="number" pos:start="1394:51" pos:end="1394:52">10</literal></expr> ?</condition><then pos:start="1394:56" pos:end="1394:80"> <expr pos:start="1394:56" pos:end="1394:80"><name pos:start="1394:56" pos:end="1394:80">DOT11DECRYPT_CCMP_TRAILER</name></expr> </then><else pos:start="1394:82" pos:end="1394:112">: <expr pos:start="1394:84" pos:end="1394:112"><name pos:start="1394:84" pos:end="1394:112">DOT11DECRYPT_CCMP_256_TRAILER</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <if_stmt pos:start="1395:17" pos:end="1400:17"><if pos:start="1395:17" pos:end="1400:17">if <condition pos:start="1395:20" pos:end="1395:43">(<expr pos:start="1395:21" pos:end="1395:42"><operator pos:start="1395:21" pos:end="1395:21">*</operator><name pos:start="1395:22" pos:end="1395:32">decrypt_len</name> <operator pos:start="1395:34" pos:end="1395:34">&lt;</operator> <name pos:start="1395:36" pos:end="1395:42">trailer</name></expr>)</condition>
                <block pos:start="1396:17" pos:end="1400:17">{<block_content pos:start="1397:21" pos:end="1399:54">
                    <expr_stmt pos:start="1397:21" pos:end="1397:58"><expr pos:start="1397:21" pos:end="1397:57"><call pos:start="1397:21" pos:end="1397:57"><name pos:start="1397:21" pos:end="1397:28">ws_debug</name><argument_list pos:start="1397:29" pos:end="1397:57">(<argument pos:start="1397:30" pos:end="1397:56"><expr pos:start="1397:30" pos:end="1397:56"><literal type="string" pos:start="1397:30" pos:end="1397:56">"Invalid decryption length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1398:21" pos:end="1398:37"><expr pos:start="1398:21" pos:end="1398:36"><call pos:start="1398:21" pos:end="1398:36"><name pos:start="1398:21" pos:end="1398:26">g_free</name><argument_list pos:start="1398:27" pos:end="1398:36">(<argument pos:start="1398:28" pos:end="1398:35"><expr pos:start="1398:28" pos:end="1398:35"><name pos:start="1398:28" pos:end="1398:35">try_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:start="1399:21" pos:end="1399:54">return <expr pos:start="1399:28" pos:end="1399:53"><name pos:start="1399:28" pos:end="1399:53">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1402:17" pos:end="1405:55"><expr pos:start="1402:17" pos:end="1405:54"><name pos:start="1402:17" pos:end="1402:19">ret</name> <operator pos:start="1402:21" pos:end="1402:21">=</operator> <call pos:start="1402:23" pos:end="1405:54"><name pos:start="1402:23" pos:end="1402:45">Dot11DecryptCcmpDecrypt</name><argument_list pos:start="1402:46" pos:end="1405:54">(<argument pos:start="1402:47" pos:end="1402:54"><expr pos:start="1402:47" pos:end="1402:54"><name pos:start="1402:47" pos:end="1402:54">try_data</name></expr></argument>, <argument pos:start="1402:57" pos:end="1402:70"><expr pos:start="1402:57" pos:end="1402:70"><name pos:start="1402:57" pos:end="1402:70">mac_header_len</name></expr></argument>, <argument pos:start="1402:73" pos:end="1402:89"><expr pos:start="1402:73" pos:end="1402:89"><operator pos:start="1402:73" pos:end="1402:73">(</operator><name pos:start="1402:74" pos:end="1402:76">INT</name><operator pos:start="1402:77" pos:end="1402:77">)</operator><operator pos:start="1402:78" pos:end="1402:78">*</operator><name pos:start="1402:79" pos:end="1402:89">decrypt_len</name></expr></argument>,
                                              <argument pos:start="1403:47" pos:end="1403:155"><expr pos:start="1403:47" pos:end="1403:155"><operator pos:start="1403:47" pos:end="1403:47">(</operator><name pos:start="1403:48" pos:end="1403:58"><name pos:start="1403:48" pos:end="1403:49">sa</name><operator pos:start="1403:50" pos:end="1403:51">-&gt;</operator><name pos:start="1403:52" pos:end="1403:54">wpa</name><operator pos:start="1403:55" pos:end="1403:55">.</operator><name pos:start="1403:56" pos:end="1403:58">ptk</name></name> <operator pos:start="1403:60" pos:end="1403:60">+</operator> <operator pos:start="1403:62" pos:end="1403:62">(</operator><operator pos:start="1403:63" pos:end="1403:63">(</operator><operator pos:start="1403:64" pos:end="1403:64">(</operator><operator pos:start="1403:65" pos:end="1403:65">(</operator><operator pos:start="1403:66" pos:end="1403:66">(</operator><literal type="number" pos:start="1403:67" pos:end="1403:67">0</literal><operator pos:start="1403:68" pos:end="1403:68">)</operator> <operator pos:start="1403:70" pos:end="1403:70">+</operator> <call pos:start="1403:72" pos:end="1403:105"><name pos:start="1403:72" pos:end="1403:92">Dot11DecryptGetKckLen</name><argument_list pos:start="1403:93" pos:end="1403:105">(<argument pos:start="1403:94" pos:end="1403:104"><expr pos:start="1403:94" pos:end="1403:104"><name pos:start="1403:94" pos:end="1403:104"><name pos:start="1403:94" pos:end="1403:95">sa</name><operator pos:start="1403:96" pos:end="1403:97">-&gt;</operator><name pos:start="1403:98" pos:end="1403:100">wpa</name><operator pos:start="1403:101" pos:end="1403:101">.</operator><name pos:start="1403:102" pos:end="1403:104">akm</name></name></expr></argument>)</argument_list></call> <operator pos:start="1403:107" pos:end="1403:107">/</operator> <literal type="number" pos:start="1403:109" pos:end="1403:109">8</literal><operator pos:start="1403:110" pos:end="1403:110">)</operator><operator pos:start="1403:111" pos:end="1403:111">)</operator> <operator pos:start="1403:113" pos:end="1403:113">+</operator> <call pos:start="1403:115" pos:end="1403:148"><name pos:start="1403:115" pos:end="1403:135">Dot11DecryptGetKekLen</name><argument_list pos:start="1403:136" pos:end="1403:148">(<argument pos:start="1403:137" pos:end="1403:147"><expr pos:start="1403:137" pos:end="1403:147"><name pos:start="1403:137" pos:end="1403:147"><name pos:start="1403:137" pos:end="1403:138">sa</name><operator pos:start="1403:139" pos:end="1403:140">-&gt;</operator><name pos:start="1403:141" pos:end="1403:143">wpa</name><operator pos:start="1403:144" pos:end="1403:144">.</operator><name pos:start="1403:145" pos:end="1403:147">akm</name></name></expr></argument>)</argument_list></call> <operator pos:start="1403:150" pos:end="1403:150">/</operator> <literal type="number" pos:start="1403:152" pos:end="1403:152">8</literal><operator pos:start="1403:153" pos:end="1403:153">)</operator><operator pos:start="1403:154" pos:end="1403:154">)</operator><operator pos:start="1403:155" pos:end="1403:155">)</operator></expr></argument>,
                                              <argument pos:start="1404:47" pos:end="1404:86"><expr pos:start="1404:47" pos:end="1404:86"><call pos:start="1404:47" pos:end="1404:82"><name pos:start="1404:47" pos:end="1404:66">Dot11DecryptGetTkLen</name><argument_list pos:start="1404:67" pos:end="1404:82">(<argument pos:start="1404:68" pos:end="1404:81"><expr pos:start="1404:68" pos:end="1404:81"><name pos:start="1404:68" pos:end="1404:81"><name pos:start="1404:68" pos:end="1404:69">sa</name><operator pos:start="1404:70" pos:end="1404:71">-&gt;</operator><name pos:start="1404:72" pos:end="1404:74">wpa</name><operator pos:start="1404:75" pos:end="1404:75">.</operator><name pos:start="1404:76" pos:end="1404:81">cipher</name></name></expr></argument>)</argument_list></call> <operator pos:start="1404:84" pos:end="1404:84">/</operator> <literal type="number" pos:start="1404:86" pos:end="1404:86">8</literal></expr></argument>,
                                              <argument pos:start="1405:47" pos:end="1405:53"><expr pos:start="1405:47" pos:end="1405:53"><name pos:start="1405:47" pos:end="1405:53">trailer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="1406:17" pos:end="1409:17"><if pos:start="1406:17" pos:end="1409:17">if <condition pos:start="1406:20" pos:end="1406:24">(<expr pos:start="1406:21" pos:end="1406:23"><name pos:start="1406:21" pos:end="1406:23">ret</name></expr>)</condition>
                <block pos:start="1407:17" pos:end="1409:17">{<block_content pos:start="1408:21" pos:end="1408:29">
                    <continue pos:start="1408:21" pos:end="1408:29">continue;</continue>
                </block_content>}</block></if></if_stmt>
                <expr_stmt pos:start="1410:17" pos:end="1410:46"><expr pos:start="1410:17" pos:end="1410:45"><call pos:start="1410:17" pos:end="1410:45"><name pos:start="1410:17" pos:end="1410:24">ws_noisy</name><argument_list pos:start="1410:25" pos:end="1410:45">(<argument pos:start="1410:26" pos:end="1410:44"><expr pos:start="1410:26" pos:end="1410:44"><literal type="string" pos:start="1410:26" pos:end="1410:44">"CCMP DECRYPTED!!!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block" pos:start="1411:17" pos:end="1411:55">/* remove MIC from the end of packet */</comment>
                <expr_stmt pos:start="1412:17" pos:end="1412:40"><expr pos:start="1412:17" pos:end="1412:39"><operator pos:start="1412:17" pos:end="1412:17">*</operator><name pos:start="1412:18" pos:end="1412:28">decrypt_len</name> <operator pos:start="1412:30" pos:end="1412:31">-=</operator> <name pos:start="1412:33" pos:end="1412:39">trailer</name></expr>;</expr_stmt>
                <break pos:start="1413:17" pos:end="1413:22">break;</break>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        <comment type="block" pos:start="1416:9" pos:end="1416:25">/* end of loop */</comment>

        <comment type="block" pos:start="1418:9" pos:end="1418:37">/* none of the keys worked */</comment>
        <if_stmt pos:start="1419:9" pos:end="1423:9"><if pos:start="1419:9" pos:end="1423:9">if <condition pos:start="1419:12" pos:end="1419:23">(<expr pos:start="1419:13" pos:end="1419:22"><name pos:start="1419:13" pos:end="1419:14">sa</name> <operator pos:start="1419:16" pos:end="1419:17">==</operator> <name pos:start="1419:19" pos:end="1419:22">NULL</name></expr>)</condition>
        <block pos:start="1420:9" pos:end="1423:9">{<block_content pos:start="1421:13" pos:end="1422:23">
            <expr_stmt pos:start="1421:13" pos:end="1421:29"><expr pos:start="1421:13" pos:end="1421:28"><call pos:start="1421:13" pos:end="1421:28"><name pos:start="1421:13" pos:end="1421:18">g_free</name><argument_list pos:start="1421:19" pos:end="1421:28">(<argument pos:start="1421:20" pos:end="1421:27"><expr pos:start="1421:20" pos:end="1421:27"><name pos:start="1421:20" pos:end="1421:27">try_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1422:13" pos:end="1422:23">return <expr pos:start="1422:20" pos:end="1422:22"><name pos:start="1422:20" pos:end="1422:22">ret</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="1425:9" pos:end="1430:9"><if pos:start="1425:9" pos:end="1430:9">if <condition pos:start="1425:12" pos:end="1425:60">(<expr pos:start="1425:13" pos:end="1425:59"><operator pos:start="1425:13" pos:end="1425:13">*</operator><name pos:start="1425:14" pos:end="1425:24">decrypt_len</name> <operator pos:start="1425:26" pos:end="1425:26">&gt;</operator> <name pos:start="1425:28" pos:end="1425:39">try_data_len</name> <operator pos:start="1425:41" pos:end="1425:42">||</operator> <operator pos:start="1425:44" pos:end="1425:44">*</operator><name pos:start="1425:45" pos:end="1425:55">decrypt_len</name> <operator pos:start="1425:57" pos:end="1425:57">&lt;</operator> <literal type="number" pos:start="1425:59" pos:end="1425:59">8</literal></expr>)</condition>
        <block pos:start="1426:9" pos:end="1430:9">{<block_content pos:start="1427:13" pos:end="1429:46">
            <expr_stmt pos:start="1427:13" pos:end="1427:50"><expr pos:start="1427:13" pos:end="1427:49"><call pos:start="1427:13" pos:end="1427:49"><name pos:start="1427:13" pos:end="1427:20">ws_debug</name><argument_list pos:start="1427:21" pos:end="1427:49">(<argument pos:start="1427:22" pos:end="1427:48"><expr pos:start="1427:22" pos:end="1427:48"><literal type="string" pos:start="1427:22" pos:end="1427:48">"Invalid decryption length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1428:13" pos:end="1428:29"><expr pos:start="1428:13" pos:end="1428:28"><call pos:start="1428:13" pos:end="1428:28"><name pos:start="1428:13" pos:end="1428:18">g_free</name><argument_list pos:start="1428:19" pos:end="1428:28">(<argument pos:start="1428:20" pos:end="1428:27"><expr pos:start="1428:20" pos:end="1428:27"><name pos:start="1428:20" pos:end="1428:27">try_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1429:13" pos:end="1429:46">return <expr pos:start="1429:20" pos:end="1429:45"><name pos:start="1429:20" pos:end="1429:45">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1432:9" pos:end="1432:35">/* remove protection bit */</comment>
        <expr_stmt pos:start="1433:9" pos:end="1433:32"><expr pos:start="1433:9" pos:end="1433:31"><name pos:start="1433:9" pos:end="1433:23"><name pos:start="1433:9" pos:end="1433:20">decrypt_data</name><index pos:start="1433:21" pos:end="1433:23">[<expr pos:start="1433:22" pos:end="1433:22"><literal type="number" pos:start="1433:22" pos:end="1433:22">1</literal></expr>]</index></name> <operator pos:start="1433:25" pos:end="1433:26">&amp;=</operator> <literal type="number" pos:start="1433:28" pos:end="1433:31">0xBF</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="1435:9" pos:end="1435:37">/* remove TKIP/CCMP header */</comment>
        <expr_stmt pos:start="1436:9" pos:end="1436:26"><expr pos:start="1436:9" pos:end="1436:25"><operator pos:start="1436:9" pos:end="1436:9">*</operator><name pos:start="1436:10" pos:end="1436:20">decrypt_len</name> <operator pos:start="1436:22" pos:end="1436:23">-=</operator> <literal type="number" pos:start="1436:25" pos:end="1436:25">8</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1438:9" pos:end="1443:9"><if pos:start="1438:9" pos:end="1443:9">if <condition pos:start="1438:12" pos:end="1438:42">(<expr pos:start="1438:13" pos:end="1438:41"><operator pos:start="1438:13" pos:end="1438:13">*</operator><name pos:start="1438:14" pos:end="1438:24">decrypt_len</name> <operator pos:start="1438:26" pos:end="1438:26">&lt;</operator> <name pos:start="1438:28" pos:end="1438:41">mac_header_len</name></expr>)</condition>
        <block pos:start="1439:9" pos:end="1443:9">{<block_content pos:start="1440:13" pos:end="1442:46">
            <expr_stmt pos:start="1440:13" pos:end="1440:67"><expr pos:start="1440:13" pos:end="1440:66"><call pos:start="1440:13" pos:end="1440:66"><name pos:start="1440:13" pos:end="1440:20">ws_debug</name><argument_list pos:start="1440:21" pos:end="1440:66">(<argument pos:start="1440:22" pos:end="1440:65"><expr pos:start="1440:22" pos:end="1440:65"><literal type="string" pos:start="1440:22" pos:end="1440:65">"Invalid decryption length &lt; mac_header_len"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1441:13" pos:end="1441:29"><expr pos:start="1441:13" pos:end="1441:28"><call pos:start="1441:13" pos:end="1441:28"><name pos:start="1441:13" pos:end="1441:18">g_free</name><argument_list pos:start="1441:19" pos:end="1441:28">(<argument pos:start="1441:20" pos:end="1441:27"><expr pos:start="1441:20" pos:end="1441:27"><name pos:start="1441:20" pos:end="1441:27">try_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1442:13" pos:end="1442:46">return <expr pos:start="1442:20" pos:end="1442:45"><name pos:start="1442:20" pos:end="1442:45">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1445:9" pos:end="1445:64">/* copy the decrypted data into the decrypt buffer GCS*/</comment>
        <expr_stmt pos:start="1446:9" pos:end="1447:46"><expr pos:start="1446:9" pos:end="1447:45"><call pos:start="1446:9" pos:end="1447:45"><name pos:start="1446:9" pos:end="1446:14">memcpy</name><argument_list pos:start="1446:15" pos:end="1447:45">(<argument pos:start="1446:16" pos:end="1446:44"><expr pos:start="1446:16" pos:end="1446:44"><name pos:start="1446:16" pos:end="1446:27">decrypt_data</name> <operator pos:start="1446:29" pos:end="1446:29">+</operator> <name pos:start="1446:31" pos:end="1446:44">mac_header_len</name></expr></argument>, <argument pos:start="1446:47" pos:end="1446:75"><expr pos:start="1446:47" pos:end="1446:75"><name pos:start="1446:47" pos:end="1446:54">try_data</name> <operator pos:start="1446:56" pos:end="1446:56">+</operator> <name pos:start="1446:58" pos:end="1446:71">mac_header_len</name> <operator pos:start="1446:73" pos:end="1446:73">+</operator> <literal type="number" pos:start="1446:75" pos:end="1446:75">8</literal></expr></argument>,
               <argument pos:start="1447:16" pos:end="1447:44"><expr pos:start="1447:16" pos:end="1447:44"><operator pos:start="1447:16" pos:end="1447:16">*</operator><name pos:start="1447:17" pos:end="1447:27">decrypt_len</name> <operator pos:start="1447:29" pos:end="1447:29">-</operator> <name pos:start="1447:31" pos:end="1447:44">mac_header_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1448:9" pos:end="1448:25"><expr pos:start="1448:9" pos:end="1448:24"><call pos:start="1448:9" pos:end="1448:24"><name pos:start="1448:9" pos:end="1448:14">g_free</name><argument_list pos:start="1448:15" pos:end="1448:24">(<argument pos:start="1448:16" pos:end="1448:23"><expr pos:start="1448:16" pos:end="1448:23"><name pos:start="1448:16" pos:end="1448:23">try_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1450:9" pos:end="1450:37"><expr pos:start="1450:9" pos:end="1450:36"><call pos:start="1450:9" pos:end="1450:36"><name pos:start="1450:9" pos:end="1450:27">Dot11DecryptCopyKey</name><argument_list pos:start="1450:28" pos:end="1450:36">(<argument pos:start="1450:29" pos:end="1450:30"><expr pos:start="1450:29" pos:end="1450:30"><name pos:start="1450:29" pos:end="1450:30">sa</name></expr></argument>, <argument pos:start="1450:33" pos:end="1450:35"><expr pos:start="1450:33" pos:end="1450:35"><name pos:start="1450:33" pos:end="1450:35">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1451:9" pos:end="1451:40">return <expr pos:start="1451:16" pos:end="1451:39"><name pos:start="1451:16" pos:end="1451:39">DOT11DECRYPT_RET_SUCCESS</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="1454:5" pos:end="1593:5"><type pos:start="1454:5" pos:end="1454:14"><specifier pos:start="1454:5" pos:end="1454:10">static</specifier> <name pos:start="1454:12" pos:end="1454:14">INT</name></type>
    <name pos:start="1455:5" pos:end="1455:22">Dot11DecryptWepMng</name><parameter_list pos:start="1455:23" pos:end="1461:44">(
        <parameter pos:start="1456:9" pos:end="1456:33"><decl pos:start="1456:9" pos:end="1456:33"><type pos:start="1456:9" pos:end="1456:33"><name pos:start="1456:9" pos:end="1456:29">PDOT11DECRYPT_CONTEXT</name></type> <name pos:start="1456:31" pos:end="1456:33">ctx</name></decl></parameter>,
        <parameter pos:start="1457:9" pos:end="1457:27"><decl pos:start="1457:9" pos:end="1457:27"><type pos:start="1457:9" pos:end="1457:27"><name pos:start="1457:9" pos:end="1457:13">UCHAR</name> <modifier pos:start="1457:15" pos:end="1457:15">*</modifier></type><name pos:start="1457:16" pos:end="1457:27">decrypt_data</name></decl></parameter>,
        <parameter pos:start="1458:9" pos:end="1458:28"><decl pos:start="1458:9" pos:end="1458:28"><type pos:start="1458:9" pos:end="1458:28"><name pos:start="1458:9" pos:end="1458:13">guint</name></type> <name pos:start="1458:15" pos:end="1458:28">mac_header_len</name></decl></parameter>,
        <parameter pos:start="1459:9" pos:end="1459:26"><decl pos:start="1459:9" pos:end="1459:26"><type pos:start="1459:9" pos:end="1459:26"><name pos:start="1459:9" pos:end="1459:13">guint</name> <modifier pos:start="1459:15" pos:end="1459:15">*</modifier></type><name pos:start="1459:16" pos:end="1459:26">decrypt_len</name></decl></parameter>,
        <parameter pos:start="1460:9" pos:end="1460:34"><decl pos:start="1460:9" pos:end="1460:34"><type pos:start="1460:9" pos:end="1460:34"><name pos:start="1460:9" pos:end="1460:30">PDOT11DECRYPT_KEY_ITEM</name></type> <name pos:start="1460:32" pos:end="1460:34">key</name></decl></parameter>,
        <parameter pos:start="1461:9" pos:end="1461:43"><decl pos:start="1461:9" pos:end="1461:43"><type pos:start="1461:9" pos:end="1461:43"><name pos:start="1461:9" pos:end="1461:39">DOT11DECRYPT_SEC_ASSOCIATION_ID</name> <modifier pos:start="1461:41" pos:end="1461:41">*</modifier></type><name pos:start="1461:42" pos:end="1461:43">id</name></decl></parameter>)</parameter_list>
    <block pos:start="1462:5" pos:end="1593:5">{<block_content pos:start="1463:9" pos:end="1592:40">
        <decl_stmt pos:start="1463:9" pos:end="1463:76"><decl pos:start="1463:9" pos:end="1463:75"><type pos:start="1463:9" pos:end="1463:13"><name pos:start="1463:9" pos:end="1463:13">UCHAR</name></type> <name pos:start="1463:15" pos:end="1463:75"><name pos:start="1463:15" pos:end="1463:21">wep_key</name><index pos:start="1463:22" pos:end="1463:75">[<expr pos:start="1463:23" pos:end="1463:74"><name pos:start="1463:23" pos:end="1463:49">DOT11DECRYPT_WEP_KEY_MAXLEN</name> <operator pos:start="1463:51" pos:end="1463:51">+</operator> <name pos:start="1463:53" pos:end="1463:74">DOT11DECRYPT_WEP_IVLEN</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="1464:9" pos:end="1464:22"><decl pos:start="1464:9" pos:end="1464:21"><type pos:start="1464:9" pos:end="1464:14"><name pos:start="1464:9" pos:end="1464:14">size_t</name></type> <name pos:start="1464:16" pos:end="1464:21">keylen</name></decl>;</decl_stmt>
        <decl_stmt pos:start="1465:9" pos:end="1465:26"><decl pos:start="1465:9" pos:end="1465:25"><type pos:start="1465:9" pos:end="1465:11"><name pos:start="1465:9" pos:end="1465:11">INT</name></type> <name pos:start="1465:13" pos:end="1465:21">ret_value</name> <init pos:start="1465:23" pos:end="1465:25">= <expr pos:start="1465:25" pos:end="1465:25"><literal type="number" pos:start="1465:25" pos:end="1465:25">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="1466:9" pos:end="1466:22"><decl pos:start="1466:9" pos:end="1466:21"><type pos:start="1466:9" pos:end="1466:11"><name pos:start="1466:9" pos:end="1466:11">INT</name></type> <name pos:start="1466:13" pos:end="1466:21">key_index</name></decl>;</decl_stmt>
        <decl_stmt pos:start="1467:9" pos:end="1467:39"><decl pos:start="1467:9" pos:end="1467:38"><type pos:start="1467:9" pos:end="1467:31"><name pos:start="1467:9" pos:end="1467:29">DOT11DECRYPT_KEY_ITEM</name> <modifier pos:start="1467:31" pos:end="1467:31">*</modifier></type><name pos:start="1467:32" pos:end="1467:38">tmp_key</name></decl>;</decl_stmt>
        <decl_stmt pos:start="1468:9" pos:end="1468:31"><decl pos:start="1468:9" pos:end="1468:30"><type pos:start="1468:9" pos:end="1468:13"><name pos:start="1468:9" pos:end="1468:13">UINT8</name></type> <name pos:start="1468:15" pos:end="1468:22">useCache</name> <init pos:start="1468:24" pos:end="1468:30">= <expr pos:start="1468:26" pos:end="1468:30"><name pos:start="1468:26" pos:end="1468:30">FALSE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="1469:9" pos:end="1469:24"><decl pos:start="1469:9" pos:end="1469:23"><type pos:start="1469:9" pos:end="1469:15"><name pos:start="1469:9" pos:end="1469:13">UCHAR</name> <modifier pos:start="1469:15" pos:end="1469:15">*</modifier></type><name pos:start="1469:16" pos:end="1469:23">try_data</name></decl>;</decl_stmt>
        <decl_stmt pos:start="1470:9" pos:end="1470:41"><decl pos:start="1470:9" pos:end="1470:40"><type pos:start="1470:9" pos:end="1470:38"><name pos:start="1470:9" pos:end="1470:36">DOT11DECRYPT_SEC_ASSOCIATION</name> <modifier pos:start="1470:38" pos:end="1470:38">*</modifier></type><name pos:start="1470:39" pos:end="1470:40">sa</name></decl>;</decl_stmt>
        <decl_stmt pos:start="1471:9" pos:end="1471:42"><decl pos:start="1471:9" pos:end="1471:41"><type pos:start="1471:9" pos:end="1471:13"><name pos:start="1471:9" pos:end="1471:13">guint</name></type> <name pos:start="1471:15" pos:end="1471:26">try_data_len</name> <init pos:start="1471:28" pos:end="1471:41">= <expr pos:start="1471:30" pos:end="1471:41"><operator pos:start="1471:30" pos:end="1471:30">*</operator><name pos:start="1471:31" pos:end="1471:41">decrypt_len</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="1473:9" pos:end="1473:51"><expr pos:start="1473:9" pos:end="1473:50"><name pos:start="1473:9" pos:end="1473:16">try_data</name> <operator pos:start="1473:18" pos:end="1473:18">=</operator> <operator pos:start="1473:20" pos:end="1473:20">(</operator><name pos:start="1473:21" pos:end="1473:25">UCHAR</name> <operator pos:start="1473:27" pos:end="1473:27">*</operator><operator pos:start="1473:28" pos:end="1473:28">)</operator><call pos:start="1473:29" pos:end="1473:50"><name pos:start="1473:29" pos:end="1473:36">g_malloc</name><argument_list pos:start="1473:37" pos:end="1473:50">(<argument pos:start="1473:38" pos:end="1473:49"><expr pos:start="1473:38" pos:end="1473:49"><name pos:start="1473:38" pos:end="1473:49">try_data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1475:9" pos:end="1475:71">/* get the Security Association structure for the STA and AP */</comment>

        <comment type="block" pos:start="1477:9" pos:end="1480:11">/* For WEP the sa is used only for caching. When no sa exists all user
         * entered WEP keys are checked and on successful packet decryption an
         * sa is formed caching the key used for decryption.
         */</comment>
        <expr_stmt pos:start="1481:9" pos:end="1481:40"><expr pos:start="1481:9" pos:end="1481:39"><name pos:start="1481:9" pos:end="1481:10">sa</name> <operator pos:start="1481:12" pos:end="1481:12">=</operator> <call pos:start="1481:14" pos:end="1481:39"><name pos:start="1481:14" pos:end="1481:30">Dot11DecryptGetSa</name><argument_list pos:start="1481:31" pos:end="1481:39">(<argument pos:start="1481:32" pos:end="1481:34"><expr pos:start="1481:32" pos:end="1481:34"><name pos:start="1481:32" pos:end="1481:34">ctx</name></expr></argument>, <argument pos:start="1481:37" pos:end="1481:38"><expr pos:start="1481:37" pos:end="1481:38"><name pos:start="1481:37" pos:end="1481:38">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1482:9" pos:end="1485:9"><if pos:start="1482:9" pos:end="1485:9">if <condition pos:start="1482:12" pos:end="1482:42">(<expr pos:start="1482:13" pos:end="1482:41"><name pos:start="1482:13" pos:end="1482:14">sa</name> <operator pos:start="1482:16" pos:end="1482:17">!=</operator> <name pos:start="1482:19" pos:end="1482:22">NULL</name> <operator pos:start="1482:24" pos:end="1482:25">&amp;&amp;</operator> <name pos:start="1482:27" pos:end="1482:33"><name pos:start="1482:27" pos:end="1482:28">sa</name><operator pos:start="1482:29" pos:end="1482:30">-&gt;</operator><name pos:start="1482:31" pos:end="1482:33">key</name></name> <operator pos:start="1482:35" pos:end="1482:36">!=</operator> <name pos:start="1482:38" pos:end="1482:41">NULL</name></expr>)</condition>
        <block pos:start="1483:9" pos:end="1485:9">{<block_content pos:start="1484:13" pos:end="1484:28">
            <expr_stmt pos:start="1484:13" pos:end="1484:28"><expr pos:start="1484:13" pos:end="1484:27"><name pos:start="1484:13" pos:end="1484:20">useCache</name> <operator pos:start="1484:22" pos:end="1484:22">=</operator> <name pos:start="1484:24" pos:end="1484:27">TRUE</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <for pos:start="1487:9" pos:end="1566:9">for <control pos:start="1487:13" pos:end="1487:71">(<init pos:start="1487:14" pos:end="1487:27"><expr pos:start="1487:14" pos:end="1487:26"><name pos:start="1487:14" pos:end="1487:22">key_index</name> <operator pos:start="1487:24" pos:end="1487:24">=</operator> <literal type="number" pos:start="1487:26" pos:end="1487:26">0</literal></expr>;</init> <condition pos:start="1487:29" pos:end="1487:58"><expr pos:start="1487:29" pos:end="1487:57"><name pos:start="1487:29" pos:end="1487:37">key_index</name> <operator pos:start="1487:39" pos:end="1487:39">&lt;</operator> <operator pos:start="1487:41" pos:end="1487:41">(</operator><name pos:start="1487:42" pos:end="1487:44">INT</name><operator pos:start="1487:45" pos:end="1487:45">)</operator><name pos:start="1487:46" pos:end="1487:57"><name pos:start="1487:46" pos:end="1487:48">ctx</name><operator pos:start="1487:49" pos:end="1487:50">-&gt;</operator><name pos:start="1487:51" pos:end="1487:57">keys_nr</name></name></expr>;</condition> <incr pos:start="1487:60" pos:end="1487:70"><expr pos:start="1487:60" pos:end="1487:70"><name pos:start="1487:60" pos:end="1487:68">key_index</name><operator pos:start="1487:69" pos:end="1487:70">++</operator></expr></incr>)</control>
        <block pos:start="1488:9" pos:end="1566:9">{<block_content pos:start="1490:13" pos:end="1565:13">
            <comment type="block" pos:start="1489:13" pos:end="1489:53">/* use the cached one, or try all keys */</comment>
            <if_stmt pos:start="1490:13" pos:end="1506:13"><if pos:start="1490:13" pos:end="1493:13">if <condition pos:start="1490:16" pos:end="1490:26">(<expr pos:start="1490:17" pos:end="1490:25"><operator pos:start="1490:17" pos:end="1490:17">!</operator><name pos:start="1490:18" pos:end="1490:25">useCache</name></expr>)</condition>
            <block pos:start="1491:13" pos:end="1493:13">{<block_content pos:start="1492:17" pos:end="1492:48">
                <expr_stmt pos:start="1492:17" pos:end="1492:48"><expr pos:start="1492:17" pos:end="1492:47"><name pos:start="1492:17" pos:end="1492:23">tmp_key</name> <operator pos:start="1492:25" pos:end="1492:25">=</operator> <operator pos:start="1492:27" pos:end="1492:27">&amp;</operator><name pos:start="1492:28" pos:end="1492:47"><name pos:start="1492:28" pos:end="1492:30">ctx</name><operator pos:start="1492:31" pos:end="1492:32">-&gt;</operator><name pos:start="1492:33" pos:end="1492:36">keys</name><index pos:start="1492:37" pos:end="1492:47">[<expr pos:start="1492:38" pos:end="1492:46"><name pos:start="1492:38" pos:end="1492:46">key_index</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else pos:start="1494:13" pos:end="1506:13">else
            <block pos:start="1495:13" pos:end="1506:13">{<block_content pos:start="1496:17" pos:end="1505:17">
                <if_stmt pos:start="1496:17" pos:end="1505:17"><if pos:start="1496:17" pos:end="1500:17">if <condition pos:start="1496:20" pos:end="1496:85">(<expr pos:start="1496:21" pos:end="1496:84"><name pos:start="1496:21" pos:end="1496:27"><name pos:start="1496:21" pos:end="1496:22">sa</name><operator pos:start="1496:23" pos:end="1496:24">-&gt;</operator><name pos:start="1496:25" pos:end="1496:27">key</name></name> <operator pos:start="1496:29" pos:end="1496:30">!=</operator> <name pos:start="1496:32" pos:end="1496:35">NULL</name> <operator pos:start="1496:37" pos:end="1496:38">&amp;&amp;</operator> <name pos:start="1496:40" pos:end="1496:55"><name pos:start="1496:40" pos:end="1496:41">sa</name><operator pos:start="1496:42" pos:end="1496:43">-&gt;</operator><name pos:start="1496:44" pos:end="1496:46">key</name><operator pos:start="1496:47" pos:end="1496:48">-&gt;</operator><name pos:start="1496:49" pos:end="1496:55">KeyType</name></name> <operator pos:start="1496:57" pos:end="1496:58">==</operator> <name pos:start="1496:60" pos:end="1496:84">DOT11DECRYPT_KEY_TYPE_WEP</name></expr>)</condition>
                <block pos:start="1497:17" pos:end="1500:17">{<block_content pos:start="1498:21" pos:end="1499:38">
                    <expr_stmt pos:start="1498:21" pos:end="1498:54"><expr pos:start="1498:21" pos:end="1498:53"><call pos:start="1498:21" pos:end="1498:53"><name pos:start="1498:21" pos:end="1498:28">ws_noisy</name><argument_list pos:start="1498:29" pos:end="1498:53">(<argument pos:start="1498:30" pos:end="1498:52"><expr pos:start="1498:30" pos:end="1498:52"><literal type="string" pos:start="1498:30" pos:end="1498:52">"Try cached WEP key..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1499:21" pos:end="1499:38"><expr pos:start="1499:21" pos:end="1499:37"><name pos:start="1499:21" pos:end="1499:27">tmp_key</name> <operator pos:start="1499:29" pos:end="1499:29">=</operator> <name pos:start="1499:31" pos:end="1499:37"><name pos:start="1499:31" pos:end="1499:32">sa</name><operator pos:start="1499:33" pos:end="1499:34">-&gt;</operator><name pos:start="1499:35" pos:end="1499:37">key</name></name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else pos:start="1501:17" pos:end="1505:17">else
                <block pos:start="1502:17" pos:end="1505:17">{<block_content pos:start="1503:21" pos:end="1504:52">
                    <expr_stmt pos:start="1503:21" pos:end="1503:80"><expr pos:start="1503:21" pos:end="1503:79"><call pos:start="1503:21" pos:end="1503:79"><name pos:start="1503:21" pos:end="1503:28">ws_noisy</name><argument_list pos:start="1503:29" pos:end="1503:79">(<argument pos:start="1503:30" pos:end="1503:78"><expr pos:start="1503:30" pos:end="1503:78"><literal type="string" pos:start="1503:30" pos:end="1503:78">"Cached key is not valid, try another WEP key..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1504:21" pos:end="1504:52"><expr pos:start="1504:21" pos:end="1504:51"><name pos:start="1504:21" pos:end="1504:27">tmp_key</name> <operator pos:start="1504:29" pos:end="1504:29">=</operator> <operator pos:start="1504:31" pos:end="1504:31">&amp;</operator><name pos:start="1504:32" pos:end="1504:51"><name pos:start="1504:32" pos:end="1504:34">ctx</name><operator pos:start="1504:35" pos:end="1504:36">-&gt;</operator><name pos:start="1504:37" pos:end="1504:40">keys</name><index pos:start="1504:41" pos:end="1504:51">[<expr pos:start="1504:42" pos:end="1504:50"><name pos:start="1504:42" pos:end="1504:50">key_index</name></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="block" pos:start="1508:13" pos:end="1508:49">/* obviously, try only WEP keys... */</comment>
            <if_stmt pos:start="1509:13" pos:end="1528:13"><if pos:start="1509:13" pos:end="1528:13">if <condition pos:start="1509:16" pos:end="1509:62">(<expr pos:start="1509:17" pos:end="1509:61"><name pos:start="1509:17" pos:end="1509:32"><name pos:start="1509:17" pos:end="1509:23">tmp_key</name><operator pos:start="1509:24" pos:end="1509:25">-&gt;</operator><name pos:start="1509:26" pos:end="1509:32">KeyType</name></name> <operator pos:start="1509:34" pos:end="1509:35">==</operator> <name pos:start="1509:37" pos:end="1509:61">DOT11DECRYPT_KEY_TYPE_WEP</name></expr>)</condition>
            <block pos:start="1510:13" pos:end="1528:13">{<block_content pos:start="1511:17" pos:end="1527:65">
                <expr_stmt pos:start="1511:17" pos:end="1511:43"><expr pos:start="1511:17" pos:end="1511:42"><call pos:start="1511:17" pos:end="1511:42"><name pos:start="1511:17" pos:end="1511:24">ws_noisy</name><argument_list pos:start="1511:25" pos:end="1511:42">(<argument pos:start="1511:26" pos:end="1511:41"><expr pos:start="1511:26" pos:end="1511:41"><literal type="string" pos:start="1511:26" pos:end="1511:41">"Try WEP key..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1513:17" pos:end="1513:52"><expr pos:start="1513:17" pos:end="1513:51"><call pos:start="1513:17" pos:end="1513:51"><name pos:start="1513:17" pos:end="1513:22">memset</name><argument_list pos:start="1513:23" pos:end="1513:51">(<argument pos:start="1513:24" pos:end="1513:30"><expr pos:start="1513:24" pos:end="1513:30"><name pos:start="1513:24" pos:end="1513:30">wep_key</name></expr></argument>, <argument pos:start="1513:33" pos:end="1513:33"><expr pos:start="1513:33" pos:end="1513:33"><literal type="number" pos:start="1513:33" pos:end="1513:33">0</literal></expr></argument>, <argument pos:start="1513:36" pos:end="1513:50"><expr pos:start="1513:36" pos:end="1513:50"><sizeof pos:start="1513:36" pos:end="1513:50">sizeof<argument_list pos:start="1513:42" pos:end="1513:50">(<argument pos:start="1513:43" pos:end="1513:49"><expr pos:start="1513:43" pos:end="1513:49"><name pos:start="1513:43" pos:end="1513:49">wep_key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1514:17" pos:end="1514:61"><expr pos:start="1514:17" pos:end="1514:60"><call pos:start="1514:17" pos:end="1514:60"><name pos:start="1514:17" pos:end="1514:22">memcpy</name><argument_list pos:start="1514:23" pos:end="1514:60">(<argument pos:start="1514:24" pos:end="1514:31"><expr pos:start="1514:24" pos:end="1514:31"><name pos:start="1514:24" pos:end="1514:31">try_data</name></expr></argument>, <argument pos:start="1514:34" pos:end="1514:45"><expr pos:start="1514:34" pos:end="1514:45"><name pos:start="1514:34" pos:end="1514:45">decrypt_data</name></expr></argument>, <argument pos:start="1514:48" pos:end="1514:59"><expr pos:start="1514:48" pos:end="1514:59"><operator pos:start="1514:48" pos:end="1514:48">*</operator><name pos:start="1514:49" pos:end="1514:59">decrypt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="1516:17" pos:end="1516:138">/* Costruct the WEP seed: copy the IV in first 3 bytes and then the WEP key (refer to 802-11i-2004, 8.2.1.4.3, pag. 36) */</comment>
                <expr_stmt pos:start="1517:17" pos:end="1517:83"><expr pos:start="1517:17" pos:end="1517:82"><call pos:start="1517:17" pos:end="1517:82"><name pos:start="1517:17" pos:end="1517:22">memcpy</name><argument_list pos:start="1517:23" pos:end="1517:82">(<argument pos:start="1517:24" pos:end="1517:30"><expr pos:start="1517:24" pos:end="1517:30"><name pos:start="1517:24" pos:end="1517:30">wep_key</name></expr></argument>, <argument pos:start="1517:33" pos:end="1517:57"><expr pos:start="1517:33" pos:end="1517:57"><name pos:start="1517:33" pos:end="1517:40">try_data</name> <operator pos:start="1517:42" pos:end="1517:42">+</operator> <name pos:start="1517:44" pos:end="1517:57">mac_header_len</name></expr></argument>, <argument pos:start="1517:60" pos:end="1517:81"><expr pos:start="1517:60" pos:end="1517:81"><name pos:start="1517:60" pos:end="1517:81">DOT11DECRYPT_WEP_IVLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1518:17" pos:end="1518:56"><expr pos:start="1518:17" pos:end="1518:55"><name pos:start="1518:17" pos:end="1518:22">keylen</name> <operator pos:start="1518:24" pos:end="1518:24">=</operator> <name pos:start="1518:26" pos:end="1518:55"><name pos:start="1518:26" pos:end="1518:32">tmp_key</name><operator pos:start="1518:33" pos:end="1518:34">-&gt;</operator><name pos:start="1518:35" pos:end="1518:41">KeyData</name><operator pos:start="1518:42" pos:end="1518:42">.</operator><name pos:start="1518:43" pos:end="1518:45">Wep</name><operator pos:start="1518:46" pos:end="1518:46">.</operator><name pos:start="1518:47" pos:end="1518:55">WepKeyLen</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="1519:17" pos:end="1519:94"><expr pos:start="1519:17" pos:end="1519:93"><call pos:start="1519:17" pos:end="1519:93"><name pos:start="1519:17" pos:end="1519:22">memcpy</name><argument_list pos:start="1519:23" pos:end="1519:93">(<argument pos:start="1519:24" pos:end="1519:55"><expr pos:start="1519:24" pos:end="1519:55"><name pos:start="1519:24" pos:end="1519:30">wep_key</name> <operator pos:start="1519:32" pos:end="1519:32">+</operator> <name pos:start="1519:34" pos:end="1519:55">DOT11DECRYPT_WEP_IVLEN</name></expr></argument>, <argument pos:start="1519:58" pos:end="1519:84"><expr pos:start="1519:58" pos:end="1519:84"><name pos:start="1519:58" pos:end="1519:84"><name pos:start="1519:58" pos:end="1519:64">tmp_key</name><operator pos:start="1519:65" pos:end="1519:66">-&gt;</operator><name pos:start="1519:67" pos:end="1519:73">KeyData</name><operator pos:start="1519:74" pos:end="1519:74">.</operator><name pos:start="1519:75" pos:end="1519:77">Wep</name><operator pos:start="1519:78" pos:end="1519:78">.</operator><name pos:start="1519:79" pos:end="1519:84">WepKey</name></name></expr></argument>, <argument pos:start="1519:87" pos:end="1519:92"><expr pos:start="1519:87" pos:end="1519:92"><name pos:start="1519:87" pos:end="1519:92">keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1521:17" pos:end="1524:158"><expr pos:start="1521:17" pos:end="1524:157"><name pos:start="1521:17" pos:end="1521:25">ret_value</name> <operator pos:start="1521:27" pos:end="1521:27">=</operator> <call pos:start="1521:29" pos:end="1524:157"><name pos:start="1521:29" pos:end="1521:50">Dot11DecryptWepDecrypt</name><argument_list pos:start="1521:51" pos:end="1524:157">(<argument pos:start="1521:52" pos:end="1521:58"><expr pos:start="1521:52" pos:end="1521:58"><name pos:start="1521:52" pos:end="1521:58">wep_key</name></expr></argument>,
                                                   <argument pos:start="1522:52" pos:end="1522:82"><expr pos:start="1522:52" pos:end="1522:82"><name pos:start="1522:52" pos:end="1522:57">keylen</name> <operator pos:start="1522:59" pos:end="1522:59">+</operator> <name pos:start="1522:61" pos:end="1522:82">DOT11DECRYPT_WEP_IVLEN</name></expr></argument>,
                                                   <argument pos:start="1523:52" pos:end="1523:129"><expr pos:start="1523:52" pos:end="1523:129"><name pos:start="1523:52" pos:end="1523:59">try_data</name> <operator pos:start="1523:61" pos:end="1523:61">+</operator> <operator pos:start="1523:63" pos:end="1523:63">(</operator><name pos:start="1523:64" pos:end="1523:77">mac_header_len</name> <operator pos:start="1523:79" pos:end="1523:79">+</operator> <name pos:start="1523:81" pos:end="1523:102">DOT11DECRYPT_WEP_IVLEN</name> <operator pos:start="1523:104" pos:end="1523:104">+</operator> <name pos:start="1523:106" pos:end="1523:128">DOT11DECRYPT_WEP_KIDLEN</name><operator pos:start="1523:129" pos:end="1523:129">)</operator></expr></argument>,
                                                   <argument pos:start="1524:52" pos:end="1524:156"><expr pos:start="1524:52" pos:end="1524:156"><operator pos:start="1524:52" pos:end="1524:52">*</operator><name pos:start="1524:53" pos:end="1524:63">decrypt_len</name> <operator pos:start="1524:65" pos:end="1524:65">-</operator> <operator pos:start="1524:67" pos:end="1524:67">(</operator><name pos:start="1524:68" pos:end="1524:81">mac_header_len</name> <operator pos:start="1524:83" pos:end="1524:83">+</operator> <name pos:start="1524:85" pos:end="1524:106">DOT11DECRYPT_WEP_IVLEN</name> <operator pos:start="1524:108" pos:end="1524:108">+</operator> <name pos:start="1524:110" pos:end="1524:132">DOT11DECRYPT_WEP_KIDLEN</name> <operator pos:start="1524:134" pos:end="1524:134">+</operator> <name pos:start="1524:136" pos:end="1524:155">DOT11DECRYPT_CRC_LEN</name><operator pos:start="1524:156" pos:end="1524:156">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1526:17" pos:end="1527:65"><if pos:start="1526:17" pos:end="1527:65">if <condition pos:start="1526:20" pos:end="1526:58">(<expr pos:start="1526:21" pos:end="1526:57"><name pos:start="1526:21" pos:end="1526:29">ret_value</name> <operator pos:start="1526:31" pos:end="1526:32">==</operator> <name pos:start="1526:34" pos:end="1526:57">DOT11DECRYPT_RET_SUCCESS</name></expr>)</condition><block type="pseudo" pos:start="1527:21" pos:end="1527:65"><block_content pos:start="1527:21" pos:end="1527:65">
                    <expr_stmt pos:start="1527:21" pos:end="1527:65"><expr pos:start="1527:21" pos:end="1527:64"><call pos:start="1527:21" pos:end="1527:64"><name pos:start="1527:21" pos:end="1527:26">memcpy</name><argument_list pos:start="1527:27" pos:end="1527:64">(<argument pos:start="1527:28" pos:end="1527:39"><expr pos:start="1527:28" pos:end="1527:39"><name pos:start="1527:28" pos:end="1527:39">decrypt_data</name></expr></argument>, <argument pos:start="1527:42" pos:end="1527:49"><expr pos:start="1527:42" pos:end="1527:49"><name pos:start="1527:42" pos:end="1527:49">try_data</name></expr></argument>, <argument pos:start="1527:52" pos:end="1527:63"><expr pos:start="1527:52" pos:end="1527:63"><operator pos:start="1527:52" pos:end="1527:52">*</operator><name pos:start="1527:53" pos:end="1527:63">decrypt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="1530:13" pos:end="1565:13"><if pos:start="1530:13" pos:end="1555:13">if <condition pos:start="1530:16" pos:end="1530:76">(<expr pos:start="1530:17" pos:end="1530:75"><operator pos:start="1530:17" pos:end="1530:17">!</operator><name pos:start="1530:18" pos:end="1530:26">ret_value</name> <operator pos:start="1530:28" pos:end="1530:29">&amp;&amp;</operator> <name pos:start="1530:31" pos:end="1530:46"><name pos:start="1530:31" pos:end="1530:37">tmp_key</name><operator pos:start="1530:38" pos:end="1530:39">-&gt;</operator><name pos:start="1530:40" pos:end="1530:46">KeyType</name></name> <operator pos:start="1530:48" pos:end="1530:49">==</operator> <name pos:start="1530:51" pos:end="1530:75">DOT11DECRYPT_KEY_TYPE_WEP</name></expr>)</condition>
            <block pos:start="1531:13" pos:end="1555:13">{<block_content pos:start="1535:17" pos:end="1554:22">
                <comment type="block" pos:start="1532:17" pos:end="1532:92">/* the tried key is the correct one, cache it in the Security Association */</comment>

                <comment type="block" pos:start="1534:17" pos:end="1534:62">/* Form an SA if one does not exist already */</comment>
                <if_stmt pos:start="1535:17" pos:end="1545:17"><if pos:start="1535:17" pos:end="1545:17">if <condition pos:start="1535:20" pos:end="1535:31">(<expr pos:start="1535:21" pos:end="1535:30"><name pos:start="1535:21" pos:end="1535:22">sa</name> <operator pos:start="1535:24" pos:end="1535:25">==</operator> <name pos:start="1535:27" pos:end="1535:30">NULL</name></expr>)</condition>
                <block pos:start="1536:17" pos:end="1545:17">{<block_content pos:start="1537:21" pos:end="1544:56">
                    <expr_stmt pos:start="1537:21" pos:end="1537:47"><expr pos:start="1537:21" pos:end="1537:46"><name pos:start="1537:21" pos:end="1537:22">sa</name> <operator pos:start="1537:24" pos:end="1537:24">=</operator> <call pos:start="1537:26" pos:end="1537:46"><name pos:start="1537:26" pos:end="1537:42">Dot11DecryptNewSa</name><argument_list pos:start="1537:43" pos:end="1537:46">(<argument pos:start="1537:44" pos:end="1537:45"><expr pos:start="1537:44" pos:end="1537:45"><name pos:start="1537:44" pos:end="1537:45">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="1538:21" pos:end="1543:21"><if pos:start="1538:21" pos:end="1543:21">if <condition pos:start="1538:24" pos:end="1538:35">(<expr pos:start="1538:25" pos:end="1538:34"><name pos:start="1538:25" pos:end="1538:26">sa</name> <operator pos:start="1538:28" pos:end="1538:29">==</operator> <name pos:start="1538:31" pos:end="1538:34">NULL</name></expr>)</condition>
                    <block pos:start="1539:21" pos:end="1543:21">{<block_content pos:start="1540:25" pos:end="1542:30">
                        <expr_stmt pos:start="1540:25" pos:end="1540:65"><expr pos:start="1540:25" pos:end="1540:64"><call pos:start="1540:25" pos:end="1540:64"><name pos:start="1540:25" pos:end="1540:34">ws_warning</name><argument_list pos:start="1540:35" pos:end="1540:64">(<argument pos:start="1540:36" pos:end="1540:63"><expr pos:start="1540:36" pos:end="1540:63"><literal type="string" pos:start="1540:36" pos:end="1540:63">"Failed to alloc sa for WEP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1541:25" pos:end="1541:63"><expr pos:start="1541:25" pos:end="1541:62"><name pos:start="1541:25" pos:end="1541:33">ret_value</name> <operator pos:start="1541:35" pos:end="1541:35">=</operator> <name pos:start="1541:37" pos:end="1541:62">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</expr_stmt>
                        <break pos:start="1542:25" pos:end="1542:30">break;</break>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt pos:start="1544:21" pos:end="1544:56"><expr pos:start="1544:21" pos:end="1544:55"><name pos:start="1544:21" pos:end="1544:22">sa</name> <operator pos:start="1544:24" pos:end="1544:24">=</operator> <call pos:start="1544:26" pos:end="1544:55"><name pos:start="1544:26" pos:end="1544:42">Dot11DecryptAddSa</name><argument_list pos:start="1544:43" pos:end="1544:55">(<argument pos:start="1544:44" pos:end="1544:46"><expr pos:start="1544:44" pos:end="1544:46"><name pos:start="1544:44" pos:end="1544:46">ctx</name></expr></argument>, <argument pos:start="1544:49" pos:end="1544:50"><expr pos:start="1544:49" pos:end="1544:50"><name pos:start="1544:49" pos:end="1544:50">id</name></expr></argument>, <argument pos:start="1544:53" pos:end="1544:54"><expr pos:start="1544:53" pos:end="1544:54"><name pos:start="1544:53" pos:end="1544:54">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt pos:start="1546:17" pos:end="1546:34"><expr pos:start="1546:17" pos:end="1546:33"><name pos:start="1546:17" pos:end="1546:23"><name pos:start="1546:17" pos:end="1546:18">sa</name><operator pos:start="1546:19" pos:end="1546:20">-&gt;</operator><name pos:start="1546:21" pos:end="1546:23">key</name></name> <operator pos:start="1546:25" pos:end="1546:25">=</operator> <name pos:start="1546:27" pos:end="1546:33">tmp_key</name></expr>;</expr_stmt>

                <if_stmt pos:start="1548:17" pos:end="1552:17"><if pos:start="1548:17" pos:end="1552:17">if <condition pos:start="1548:20" pos:end="1548:32">(<expr pos:start="1548:21" pos:end="1548:31"><name pos:start="1548:21" pos:end="1548:23">key</name> <operator pos:start="1548:25" pos:end="1548:26">!=</operator> <name pos:start="1548:28" pos:end="1548:31">NULL</name></expr>)</condition>
                <block pos:start="1549:17" pos:end="1552:17">{<block_content pos:start="1550:21" pos:end="1551:61">
                    <expr_stmt pos:start="1550:21" pos:end="1550:72"><expr pos:start="1550:21" pos:end="1550:71"><call pos:start="1550:21" pos:end="1550:71"><name pos:start="1550:21" pos:end="1550:26">memcpy</name><argument_list pos:start="1550:27" pos:end="1550:71">(<argument pos:start="1550:28" pos:end="1550:30"><expr pos:start="1550:28" pos:end="1550:30"><name pos:start="1550:28" pos:end="1550:30">key</name></expr></argument>, <argument pos:start="1550:33" pos:end="1550:39"><expr pos:start="1550:33" pos:end="1550:39"><name pos:start="1550:33" pos:end="1550:39"><name pos:start="1550:33" pos:end="1550:34">sa</name><operator pos:start="1550:35" pos:end="1550:36">-&gt;</operator><name pos:start="1550:37" pos:end="1550:39">key</name></name></expr></argument>, <argument pos:start="1550:42" pos:end="1550:70"><expr pos:start="1550:42" pos:end="1550:70"><sizeof pos:start="1550:42" pos:end="1550:70">sizeof<argument_list pos:start="1550:48" pos:end="1550:70">(<argument pos:start="1550:49" pos:end="1550:69"><expr pos:start="1550:49" pos:end="1550:69"><name pos:start="1550:49" pos:end="1550:69">DOT11DECRYPT_KEY_ITEM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1551:21" pos:end="1551:61"><expr pos:start="1551:21" pos:end="1551:60"><name pos:start="1551:21" pos:end="1551:32"><name pos:start="1551:21" pos:end="1551:23">key</name><operator pos:start="1551:24" pos:end="1551:25">-&gt;</operator><name pos:start="1551:26" pos:end="1551:32">KeyType</name></name> <operator pos:start="1551:34" pos:end="1551:34">=</operator> <name pos:start="1551:36" pos:end="1551:60">DOT11DECRYPT_KEY_TYPE_WEP</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <break pos:start="1554:17" pos:end="1554:22">break;</break>
            </block_content>}</block></if>
            <else pos:start="1556:13" pos:end="1565:13">else
            <block pos:start="1557:13" pos:end="1565:13">{<block_content pos:start="1560:17" pos:end="1564:17">
                <comment type="block" pos:start="1558:17" pos:end="1558:66">/* the cached key was not valid, try other keys */</comment>

                <if_stmt pos:start="1560:17" pos:end="1564:17"><if pos:start="1560:17" pos:end="1564:17">if <condition pos:start="1560:20" pos:end="1560:37">(<expr pos:start="1560:21" pos:end="1560:36"><name pos:start="1560:21" pos:end="1560:28">useCache</name> <operator pos:start="1560:30" pos:end="1560:31">==</operator> <name pos:start="1560:33" pos:end="1560:36">TRUE</name></expr>)</condition>
                <block pos:start="1561:17" pos:end="1564:17">{<block_content pos:start="1562:21" pos:end="1563:32">
                    <expr_stmt pos:start="1562:21" pos:end="1562:37"><expr pos:start="1562:21" pos:end="1562:36"><name pos:start="1562:21" pos:end="1562:28">useCache</name> <operator pos:start="1562:30" pos:end="1562:30">=</operator> <name pos:start="1562:32" pos:end="1562:36">FALSE</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="1563:21" pos:end="1563:32"><expr pos:start="1563:21" pos:end="1563:31"><name pos:start="1563:21" pos:end="1563:29">key_index</name><operator pos:start="1563:30" pos:end="1563:31">--</operator></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

        <expr_stmt pos:start="1568:9" pos:end="1568:25"><expr pos:start="1568:9" pos:end="1568:24"><call pos:start="1568:9" pos:end="1568:24"><name pos:start="1568:9" pos:end="1568:14">g_free</name><argument_list pos:start="1568:15" pos:end="1568:24">(<argument pos:start="1568:16" pos:end="1568:23"><expr pos:start="1568:16" pos:end="1568:23"><name pos:start="1568:16" pos:end="1568:23">try_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1569:9" pos:end="1570:46"><if pos:start="1569:9" pos:end="1570:46">if <condition pos:start="1569:12" pos:end="1569:22">(<expr pos:start="1569:13" pos:end="1569:21"><name pos:start="1569:13" pos:end="1569:21">ret_value</name></expr>)</condition><block type="pseudo" pos:start="1570:13" pos:end="1570:46"><block_content pos:start="1570:13" pos:end="1570:46">
            <return pos:start="1570:13" pos:end="1570:46">return <expr pos:start="1570:20" pos:end="1570:45"><name pos:start="1570:20" pos:end="1570:45">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1572:9" pos:end="1572:37"><expr pos:start="1572:9" pos:end="1572:36"><call pos:start="1572:9" pos:end="1572:36"><name pos:start="1572:9" pos:end="1572:16">ws_noisy</name><argument_list pos:start="1572:17" pos:end="1572:36">(<argument pos:start="1572:18" pos:end="1572:35"><expr pos:start="1572:18" pos:end="1572:35"><literal type="string" pos:start="1572:18" pos:end="1572:35">"WEP DECRYPTED!!!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1574:9" pos:end="1574:56">/* remove ICV (4bytes) from the end of packet */</comment>
        <expr_stmt pos:start="1575:9" pos:end="1575:26"><expr pos:start="1575:9" pos:end="1575:25"><operator pos:start="1575:9" pos:end="1575:9">*</operator><name pos:start="1575:10" pos:end="1575:20">decrypt_len</name> <operator pos:start="1575:22" pos:end="1575:23">-=</operator> <literal type="number" pos:start="1575:25" pos:end="1575:25">4</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1577:9" pos:end="1581:9"><if pos:start="1577:9" pos:end="1581:9">if <condition pos:start="1577:12" pos:end="1577:29">(<expr pos:start="1577:13" pos:end="1577:28"><operator pos:start="1577:13" pos:end="1577:13">*</operator><name pos:start="1577:14" pos:end="1577:24">decrypt_len</name> <operator pos:start="1577:26" pos:end="1577:26">&lt;</operator> <literal type="number" pos:start="1577:28" pos:end="1577:28">4</literal></expr>)</condition>
        <block pos:start="1578:9" pos:end="1581:9">{<block_content pos:start="1579:13" pos:end="1580:46">
            <expr_stmt pos:start="1579:13" pos:end="1579:52"><expr pos:start="1579:13" pos:end="1579:51"><call pos:start="1579:13" pos:end="1579:51"><name pos:start="1579:13" pos:end="1579:20">ws_debug</name><argument_list pos:start="1579:21" pos:end="1579:51">(<argument pos:start="1579:22" pos:end="1579:50"><expr pos:start="1579:22" pos:end="1579:50"><literal type="string" pos:start="1579:22" pos:end="1579:50">"Decryption length too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1580:13" pos:end="1580:46">return <expr pos:start="1580:20" pos:end="1580:45"><name pos:start="1580:20" pos:end="1580:45">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1583:9" pos:end="1583:35">/* remove protection bit */</comment>
        <expr_stmt pos:start="1584:9" pos:end="1584:32"><expr pos:start="1584:9" pos:end="1584:31"><name pos:start="1584:9" pos:end="1584:23"><name pos:start="1584:9" pos:end="1584:20">decrypt_data</name><index pos:start="1584:21" pos:end="1584:23">[<expr pos:start="1584:22" pos:end="1584:22"><literal type="number" pos:start="1584:22" pos:end="1584:22">1</literal></expr>]</index></name> <operator pos:start="1584:25" pos:end="1584:26">&amp;=</operator> <literal type="number" pos:start="1584:28" pos:end="1584:31">0xBF</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="1586:9" pos:end="1586:30">/* remove IC header */</comment>
        <expr_stmt pos:start="1587:9" pos:end="1587:26"><expr pos:start="1587:9" pos:end="1587:25"><operator pos:start="1587:9" pos:end="1587:9">*</operator><name pos:start="1587:10" pos:end="1587:20">decrypt_len</name> <operator pos:start="1587:22" pos:end="1587:23">-=</operator> <literal type="number" pos:start="1587:25" pos:end="1587:25">4</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1588:9" pos:end="1590:47"><expr pos:start="1588:9" pos:end="1590:46"><call pos:start="1588:9" pos:end="1590:46"><name pos:start="1588:9" pos:end="1588:15">memmove</name><argument_list pos:start="1588:16" pos:end="1590:46">(<argument pos:start="1588:17" pos:end="1588:45"><expr pos:start="1588:17" pos:end="1588:45"><name pos:start="1588:17" pos:end="1588:28">decrypt_data</name> <operator pos:start="1588:30" pos:end="1588:30">+</operator> <name pos:start="1588:32" pos:end="1588:45">mac_header_len</name></expr></argument>,
                <argument pos:start="1589:17" pos:end="1589:96"><expr pos:start="1589:17" pos:end="1589:96"><name pos:start="1589:17" pos:end="1589:28">decrypt_data</name> <operator pos:start="1589:30" pos:end="1589:30">+</operator> <name pos:start="1589:32" pos:end="1589:45">mac_header_len</name> <operator pos:start="1589:47" pos:end="1589:47">+</operator> <name pos:start="1589:49" pos:end="1589:70">DOT11DECRYPT_WEP_IVLEN</name> <operator pos:start="1589:72" pos:end="1589:72">+</operator> <name pos:start="1589:74" pos:end="1589:96">DOT11DECRYPT_WEP_KIDLEN</name></expr></argument>,
                <argument pos:start="1590:17" pos:end="1590:45"><expr pos:start="1590:17" pos:end="1590:45"><operator pos:start="1590:17" pos:end="1590:17">*</operator><name pos:start="1590:18" pos:end="1590:28">decrypt_len</name> <operator pos:start="1590:30" pos:end="1590:30">-</operator> <name pos:start="1590:32" pos:end="1590:45">mac_header_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="1592:9" pos:end="1592:40">return <expr pos:start="1592:16" pos:end="1592:39"><name pos:start="1592:16" pos:end="1592:39">DOT11DECRYPT_RET_SUCCESS</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" pos:start="1595:5" pos:end="1595:65">/* From IEEE 802.11-2016 Table 9-133&#8212;AKM suite selectors */</comment>
    <function pos:start="1596:5" pos:end="1607:5"><type pos:start="1596:5" pos:end="1596:19"><specifier pos:start="1596:5" pos:end="1596:10">static</specifier> <name pos:start="1596:12" pos:end="1596:19">gboolean</name></type> <name pos:start="1596:21" pos:end="1596:39">Dot11DecryptIsFtAkm</name><parameter_list pos:start="1596:40" pos:end="1596:48">(<parameter pos:start="1596:41" pos:end="1596:47"><decl pos:start="1596:41" pos:end="1596:47"><type pos:start="1596:41" pos:end="1596:43"><name pos:start="1596:41" pos:end="1596:43">int</name></type> <name pos:start="1596:45" pos:end="1596:47">akm</name></decl></parameter>)</parameter_list>
    <block pos:start="1597:5" pos:end="1607:5">{<block_content pos:start="1598:9" pos:end="1606:21">
        <switch pos:start="1598:9" pos:end="1605:9">switch <condition pos:start="1598:16" pos:end="1598:20">(<expr pos:start="1598:17" pos:end="1598:19"><name pos:start="1598:17" pos:end="1598:19">akm</name></expr>)</condition>
        <block pos:start="1599:9" pos:end="1605:9">{<block_content pos:start="1600:9" pos:end="1604:24">
        <case pos:start="1600:9" pos:end="1600:15">case <expr pos:start="1600:14" pos:end="1600:14"><literal type="number" pos:start="1600:14" pos:end="1600:14">3</literal></expr>:</case>
        <case pos:start="1601:9" pos:end="1601:15">case <expr pos:start="1601:14" pos:end="1601:14"><literal type="number" pos:start="1601:14" pos:end="1601:14">4</literal></expr>:</case>
        <case pos:start="1602:9" pos:end="1602:15">case <expr pos:start="1602:14" pos:end="1602:14"><literal type="number" pos:start="1602:14" pos:end="1602:14">9</literal></expr>:</case>
        <case pos:start="1603:9" pos:end="1603:16">case <expr pos:start="1603:14" pos:end="1603:15"><literal type="number" pos:start="1603:14" pos:end="1603:15">13</literal></expr>:</case>
            <return pos:start="1604:13" pos:end="1604:24">return <expr pos:start="1604:20" pos:end="1604:23"><name pos:start="1604:20" pos:end="1604:23">TRUE</name></expr>;</return>
        </block_content>}</block></switch>
        <return pos:start="1606:9" pos:end="1606:21">return <expr pos:start="1606:16" pos:end="1606:20"><name pos:start="1606:16" pos:end="1606:20">FALSE</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" pos:start="1609:5" pos:end="1609:34">/* Get xxkey portion of MSK */</comment>
    <comment type="block" pos:start="1610:5" pos:end="1610:49">/* From IEEE 802.11-2016 12.7.1.7.3 PMK-R0 */</comment>
    <function pos:start="1611:5" pos:end="1638:5"><type pos:start="1611:5" pos:end="1611:25"><specifier pos:start="1611:5" pos:end="1611:10">static</specifier> <specifier pos:start="1611:12" pos:end="1611:16">const</specifier> <name pos:start="1611:18" pos:end="1611:23">guint8</name> <modifier pos:start="1611:25" pos:end="1611:25">*</modifier></type>
    <name pos:start="1612:5" pos:end="1612:31">Dot11DecryptGetXXKeyFromMSK</name><parameter_list pos:start="1612:32" pos:end="1613:59">(<parameter pos:start="1612:33" pos:end="1612:49"><decl pos:start="1612:33" pos:end="1612:49"><type pos:start="1612:33" pos:end="1612:49"><specifier pos:start="1612:33" pos:end="1612:37">const</specifier> <name pos:start="1612:39" pos:end="1612:44">guint8</name> <modifier pos:start="1612:46" pos:end="1612:46">*</modifier></type><name pos:start="1612:47" pos:end="1612:49">msk</name></decl></parameter>, <parameter pos:start="1612:52" pos:end="1612:65"><decl pos:start="1612:52" pos:end="1612:65"><type pos:start="1612:52" pos:end="1612:65"><name pos:start="1612:52" pos:end="1612:57">size_t</name></type> <name pos:start="1612:59" pos:end="1612:65">msk_len</name></decl></parameter>,
                                <parameter pos:start="1613:33" pos:end="1613:39"><decl pos:start="1613:33" pos:end="1613:39"><type pos:start="1613:33" pos:end="1613:39"><name pos:start="1613:33" pos:end="1613:35">int</name></type> <name pos:start="1613:37" pos:end="1613:39">akm</name></decl></parameter>, <parameter pos:start="1613:42" pos:end="1613:58"><decl pos:start="1613:42" pos:end="1613:58"><type pos:start="1613:42" pos:end="1613:58"><name pos:start="1613:42" pos:end="1613:47">size_t</name> <modifier pos:start="1613:49" pos:end="1613:49">*</modifier></type><name pos:start="1613:50" pos:end="1613:58">xxkey_len</name></decl></parameter>)</parameter_list>
    <block pos:start="1614:5" pos:end="1638:5">{<block_content pos:start="1615:9" pos:end="1637:9">
        <if_stmt pos:start="1615:9" pos:end="1618:9"><if pos:start="1615:9" pos:end="1618:9">if <condition pos:start="1615:12" pos:end="1615:23">(<expr pos:start="1615:13" pos:end="1615:22"><operator pos:start="1615:13" pos:end="1615:13">!</operator><name pos:start="1615:14" pos:end="1615:22">xxkey_len</name></expr>)</condition>
        <block pos:start="1616:9" pos:end="1618:9">{<block_content pos:start="1617:13" pos:end="1617:24">
            <return pos:start="1617:13" pos:end="1617:24">return <expr pos:start="1617:20" pos:end="1617:23"><name pos:start="1617:20" pos:end="1617:23">NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <switch pos:start="1619:9" pos:end="1637:9">switch <condition pos:start="1619:16" pos:end="1619:20">(<expr pos:start="1619:17" pos:end="1619:19"><name pos:start="1619:17" pos:end="1619:19">akm</name></expr>)</condition>
        <block pos:start="1620:9" pos:end="1637:9">{<block_content pos:start="1621:9" pos:end="1636:24">
        <case pos:start="1621:9" pos:end="1621:15">case <expr pos:start="1621:14" pos:end="1621:14"><literal type="number" pos:start="1621:14" pos:end="1621:14">3</literal></expr>:</case>
            <if_stmt pos:start="1622:13" pos:end="1625:13"><if pos:start="1622:13" pos:end="1625:13">if <condition pos:start="1622:16" pos:end="1622:29">(<expr pos:start="1622:17" pos:end="1622:28"><name pos:start="1622:17" pos:end="1622:23">msk_len</name> <operator pos:start="1622:25" pos:end="1622:25">&lt;</operator> <literal type="number" pos:start="1622:27" pos:end="1622:28">64</literal></expr>)</condition>
            <block pos:start="1623:13" pos:end="1625:13">{<block_content pos:start="1624:17" pos:end="1624:28">
                <return pos:start="1624:17" pos:end="1624:28">return <expr pos:start="1624:24" pos:end="1624:27"><name pos:start="1624:24" pos:end="1624:27">NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="1626:13" pos:end="1626:28"><expr pos:start="1626:13" pos:end="1626:27"><operator pos:start="1626:13" pos:end="1626:13">*</operator><name pos:start="1626:14" pos:end="1626:22">xxkey_len</name> <operator pos:start="1626:24" pos:end="1626:24">=</operator> <literal type="number" pos:start="1626:26" pos:end="1626:27">32</literal></expr>;</expr_stmt>
            <return pos:start="1627:13" pos:end="1627:28">return <expr pos:start="1627:20" pos:end="1627:27"><name pos:start="1627:20" pos:end="1627:22">msk</name> <operator pos:start="1627:24" pos:end="1627:24">+</operator> <literal type="number" pos:start="1627:26" pos:end="1627:27">32</literal></expr>;</return>
        <case pos:start="1628:9" pos:end="1628:16">case <expr pos:start="1628:14" pos:end="1628:15"><literal type="number" pos:start="1628:14" pos:end="1628:15">13</literal></expr>:</case>
            <if_stmt pos:start="1629:13" pos:end="1632:13"><if pos:start="1629:13" pos:end="1632:13">if <condition pos:start="1629:16" pos:end="1629:29">(<expr pos:start="1629:17" pos:end="1629:28"><name pos:start="1629:17" pos:end="1629:23">msk_len</name> <operator pos:start="1629:25" pos:end="1629:25">&lt;</operator> <literal type="number" pos:start="1629:27" pos:end="1629:28">48</literal></expr>)</condition>
            <block pos:start="1630:13" pos:end="1632:13">{<block_content pos:start="1631:17" pos:end="1631:28">
                <return pos:start="1631:17" pos:end="1631:28">return <expr pos:start="1631:24" pos:end="1631:27"><name pos:start="1631:24" pos:end="1631:27">NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="1633:13" pos:end="1633:28"><expr pos:start="1633:13" pos:end="1633:27"><operator pos:start="1633:13" pos:end="1633:13">*</operator><name pos:start="1633:14" pos:end="1633:22">xxkey_len</name> <operator pos:start="1633:24" pos:end="1633:24">=</operator> <literal type="number" pos:start="1633:26" pos:end="1633:27">48</literal></expr>;</expr_stmt>
            <return pos:start="1634:13" pos:end="1634:23">return <expr pos:start="1634:20" pos:end="1634:22"><name pos:start="1634:20" pos:end="1634:22">msk</name></expr>;</return>
        <default pos:start="1635:9" pos:end="1635:16">default:</default>
            <return pos:start="1636:13" pos:end="1636:24">return <expr pos:start="1636:20" pos:end="1636:23"><name pos:start="1636:20" pos:end="1636:23">NULL</name></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" pos:start="1640:5" pos:end="1640:63">/* From IEEE 802.11-2016 12.7.1.3 Pairwise key hierarchy */</comment>
    <function pos:start="1641:5" pos:end="1667:5"><type pos:start="1641:5" pos:end="1641:15"><specifier pos:start="1641:5" pos:end="1641:10">static</specifier> <name pos:start="1641:12" pos:end="1641:15">void</name></type>
    <name pos:start="1642:5" pos:end="1642:32">Dot11DecryptDerivePmkFromMsk</name><parameter_list pos:start="1642:33" pos:end="1643:62">(<parameter pos:start="1642:34" pos:end="1642:50"><decl pos:start="1642:34" pos:end="1642:50"><type pos:start="1642:34" pos:end="1642:50"><specifier pos:start="1642:34" pos:end="1642:38">const</specifier> <name pos:start="1642:40" pos:end="1642:45">guint8</name> <modifier pos:start="1642:47" pos:end="1642:47">*</modifier></type><name pos:start="1642:48" pos:end="1642:50">msk</name></decl></parameter>, <parameter pos:start="1642:53" pos:end="1642:66"><decl pos:start="1642:53" pos:end="1642:66"><type pos:start="1642:53" pos:end="1642:66"><name pos:start="1642:53" pos:end="1642:58">guint8</name></type> <name pos:start="1642:60" pos:end="1642:66">msk_len</name></decl></parameter>, <parameter pos:start="1642:69" pos:end="1642:75"><decl pos:start="1642:69" pos:end="1642:75"><type pos:start="1642:69" pos:end="1642:75"><name pos:start="1642:69" pos:end="1642:71">int</name></type> <name pos:start="1642:73" pos:end="1642:75">akm</name></decl></parameter>,
                                 <parameter pos:start="1643:34" pos:end="1643:44"><decl pos:start="1643:34" pos:end="1643:44"><type pos:start="1643:34" pos:end="1643:44"><name pos:start="1643:34" pos:end="1643:39">guint8</name> <modifier pos:start="1643:41" pos:end="1643:41">*</modifier></type><name pos:start="1643:42" pos:end="1643:44">pmk</name></decl></parameter>, <parameter pos:start="1643:47" pos:end="1643:61"><decl pos:start="1643:47" pos:end="1643:61"><type pos:start="1643:47" pos:end="1643:61"><name pos:start="1643:47" pos:end="1643:52">guint8</name> <modifier pos:start="1643:54" pos:end="1643:54">*</modifier></type><name pos:start="1643:55" pos:end="1643:61">pmk_len</name></decl></parameter>)</parameter_list>
    <block pos:start="1644:5" pos:end="1667:5">{<block_content pos:start="1645:9" pos:end="1666:35">
        <if_stmt pos:start="1645:9" pos:end="1648:9"><if pos:start="1645:9" pos:end="1648:9">if <condition pos:start="1645:12" pos:end="1645:37">(<expr pos:start="1645:13" pos:end="1645:36"><operator pos:start="1645:13" pos:end="1645:13">!</operator><name pos:start="1645:14" pos:end="1645:16">msk</name> <operator pos:start="1645:18" pos:end="1645:19">||</operator> <operator pos:start="1645:21" pos:end="1645:21">!</operator><name pos:start="1645:22" pos:end="1645:24">pmk</name> <operator pos:start="1645:26" pos:end="1645:27">||</operator> <operator pos:start="1645:29" pos:end="1645:29">!</operator><name pos:start="1645:30" pos:end="1645:36">pmk_len</name></expr>)</condition>
        <block pos:start="1646:9" pos:end="1648:9">{<block_content pos:start="1647:13" pos:end="1647:19">
            <return pos:start="1647:13" pos:end="1647:19">return;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="line" pos:start="1649:9" pos:end="1649:86">// When using AKM suite selector 00-0F-AC:12, the length of the PMK, PMK_bits,</comment>
        <comment type="line" pos:start="1650:9" pos:end="1650:88">// shall be 384 bits. With all other AKM suite selectors, the length of the PMK,</comment>
        <comment type="line" pos:start="1651:9" pos:end="1651:39">// PMK_bits, shall be 256 bits.</comment>
        <if_stmt pos:start="1652:9" pos:end="1659:9"><if pos:start="1652:9" pos:end="1655:9">if <condition pos:start="1652:12" pos:end="1652:22">(<expr pos:start="1652:13" pos:end="1652:21"><name pos:start="1652:13" pos:end="1652:15">akm</name> <operator pos:start="1652:17" pos:end="1652:18">==</operator> <literal type="number" pos:start="1652:20" pos:end="1652:21">12</literal></expr>)</condition>
        <block pos:start="1653:9" pos:end="1655:9">{<block_content pos:start="1654:13" pos:end="1654:31">
            <expr_stmt pos:start="1654:13" pos:end="1654:31"><expr pos:start="1654:13" pos:end="1654:30"><operator pos:start="1654:13" pos:end="1654:13">*</operator><name pos:start="1654:14" pos:end="1654:20">pmk_len</name> <operator pos:start="1654:22" pos:end="1654:22">=</operator> <literal type="number" pos:start="1654:24" pos:end="1654:26">384</literal> <operator pos:start="1654:28" pos:end="1654:28">/</operator> <literal type="number" pos:start="1654:30" pos:end="1654:30">8</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else pos:start="1656:9" pos:end="1659:9">else
        <block pos:start="1657:9" pos:end="1659:9">{<block_content pos:start="1658:13" pos:end="1658:31">
            <expr_stmt pos:start="1658:13" pos:end="1658:31"><expr pos:start="1658:13" pos:end="1658:30"><operator pos:start="1658:13" pos:end="1658:13">*</operator><name pos:start="1658:14" pos:end="1658:20">pmk_len</name> <operator pos:start="1658:22" pos:end="1658:22">=</operator> <literal type="number" pos:start="1658:24" pos:end="1658:26">256</literal> <operator pos:start="1658:28" pos:end="1658:28">/</operator> <literal type="number" pos:start="1658:30" pos:end="1658:30">8</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt pos:start="1660:9" pos:end="1664:9"><if pos:start="1660:9" pos:end="1664:9">if <condition pos:start="1660:12" pos:end="1660:51">(<expr pos:start="1660:13" pos:end="1660:50"><operator pos:start="1660:13" pos:end="1660:13">(</operator><name pos:start="1660:14" pos:end="1660:19">guint8</name><operator pos:start="1660:20" pos:end="1660:20">)</operator><operator pos:start="1660:21" pos:end="1660:21">(</operator><name pos:start="1660:22" pos:end="1660:28">msk_len</name> <operator pos:start="1660:30" pos:end="1660:30">+</operator> <operator pos:start="1660:32" pos:end="1660:32">*</operator><name pos:start="1660:33" pos:end="1660:39">pmk_len</name><operator pos:start="1660:40" pos:end="1660:40">)</operator> <operator pos:start="1660:42" pos:end="1660:42">&lt;</operator> <name pos:start="1660:44" pos:end="1660:50">msk_len</name></expr>)</condition>
        <block pos:start="1661:9" pos:end="1664:9">{<block_content pos:start="1662:13" pos:end="1663:19">
            <expr_stmt pos:start="1662:13" pos:end="1662:25"><expr pos:start="1662:13" pos:end="1662:24"><operator pos:start="1662:13" pos:end="1662:13">*</operator><name pos:start="1662:14" pos:end="1662:20">pmk_len</name> <operator pos:start="1662:22" pos:end="1662:22">=</operator> <literal type="number" pos:start="1662:24" pos:end="1662:24">0</literal></expr>;</expr_stmt>
            <return pos:start="1663:13" pos:end="1663:19">return;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="line" pos:start="1665:9" pos:end="1665:37">// PMK = L(MSK, 0, PMK_bits).</comment>
        <expr_stmt pos:start="1666:9" pos:end="1666:35"><expr pos:start="1666:9" pos:end="1666:34"><call pos:start="1666:9" pos:end="1666:34"><name pos:start="1666:9" pos:end="1666:14">memcpy</name><argument_list pos:start="1666:15" pos:end="1666:34">(<argument pos:start="1666:16" pos:end="1666:18"><expr pos:start="1666:16" pos:end="1666:18"><name pos:start="1666:16" pos:end="1666:18">pmk</name></expr></argument>, <argument pos:start="1666:21" pos:end="1666:23"><expr pos:start="1666:21" pos:end="1666:23"><name pos:start="1666:21" pos:end="1666:23">msk</name></expr></argument>, <argument pos:start="1666:26" pos:end="1666:33"><expr pos:start="1666:26" pos:end="1666:33"><operator pos:start="1666:26" pos:end="1666:26">*</operator><name pos:start="1666:27" pos:end="1666:33">pmk_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function pos:start="1669:5" pos:end="1681:5"><type pos:start="1669:5" pos:end="1669:19"><specifier pos:start="1669:5" pos:end="1669:10">static</specifier> <name pos:start="1669:12" pos:end="1669:19">gboolean</name></type>
    <name pos:start="1670:5" pos:end="1670:28">Dot11DecryptIsWpaKeyType</name><parameter_list pos:start="1670:29" pos:end="1670:45">(<parameter pos:start="1670:30" pos:end="1670:44"><decl pos:start="1670:30" pos:end="1670:44"><type pos:start="1670:30" pos:end="1670:35"><name pos:start="1670:30" pos:end="1670:35">guint8</name></type> <name pos:start="1670:37" pos:end="1670:44">key_type</name></decl></parameter>)</parameter_list>
    <block pos:start="1671:5" pos:end="1681:5">{<block_content pos:start="1672:9" pos:end="1680:21">
        <switch pos:start="1672:9" pos:end="1679:9">switch <condition pos:start="1672:16" pos:end="1672:25">(<expr pos:start="1672:17" pos:end="1672:24"><name pos:start="1672:17" pos:end="1672:24">key_type</name></expr>)</condition>
        <block pos:start="1673:9" pos:end="1679:9">{<block_content pos:start="1674:9" pos:end="1678:24">
        <case pos:start="1674:9" pos:end="1674:43">case <expr pos:start="1674:14" pos:end="1674:42"><name pos:start="1674:14" pos:end="1674:42">DOT11DECRYPT_KEY_TYPE_WPA_PWD</name></expr>:</case>
        <case pos:start="1675:9" pos:end="1675:43">case <expr pos:start="1675:14" pos:end="1675:42"><name pos:start="1675:14" pos:end="1675:42">DOT11DECRYPT_KEY_TYPE_WPA_PSK</name></expr>:</case>
        <case pos:start="1676:9" pos:end="1676:43">case <expr pos:start="1676:14" pos:end="1676:42"><name pos:start="1676:14" pos:end="1676:42">DOT11DECRYPT_KEY_TYPE_WPA_PMK</name></expr>:</case>
        <case pos:start="1677:9" pos:end="1677:39">case <expr pos:start="1677:14" pos:end="1677:38"><name pos:start="1677:14" pos:end="1677:38">DOT11DECRYPT_KEY_TYPE_MSK</name></expr>:</case>
            <return pos:start="1678:13" pos:end="1678:24">return <expr pos:start="1678:20" pos:end="1678:23"><name pos:start="1678:20" pos:end="1678:23">TRUE</name></expr>;</return>
        </block_content>}</block></switch>
        <return pos:start="1680:9" pos:end="1680:21">return <expr pos:start="1680:16" pos:end="1680:20"><name pos:start="1680:16" pos:end="1680:20">FALSE</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="1683:5" pos:end="1697:5"><type pos:start="1683:5" pos:end="1683:19"><specifier pos:start="1683:5" pos:end="1683:10">static</specifier> <name pos:start="1683:12" pos:end="1683:19">gboolean</name></type>
    <name pos:start="1684:5" pos:end="1684:33">Dot11DecryptIsPwdWildcardSsid</name><parameter_list pos:start="1684:34" pos:end="1685:72">(<parameter pos:start="1684:35" pos:end="1684:65"><decl pos:start="1684:35" pos:end="1684:65"><type pos:start="1684:35" pos:end="1684:65"><specifier pos:start="1684:35" pos:end="1684:39">const</specifier> <name pos:start="1684:41" pos:end="1684:61">PDOT11DECRYPT_CONTEXT</name></type> <name pos:start="1684:63" pos:end="1684:65">ctx</name></decl></parameter>,
                                  <parameter pos:start="1685:35" pos:end="1685:71"><decl pos:start="1685:35" pos:end="1685:71"><type pos:start="1685:35" pos:end="1685:71"><specifier pos:start="1685:35" pos:end="1685:39">const</specifier> <name pos:start="1685:41" pos:end="1685:61">DOT11DECRYPT_KEY_ITEM</name> <modifier pos:start="1685:63" pos:end="1685:63">*</modifier></type><name pos:start="1685:64" pos:end="1685:71">key_item</name></decl></parameter>)</parameter_list>
    <block pos:start="1686:5" pos:end="1697:5">{<block_content pos:start="1687:9" pos:end="1696:21">
        <if_stmt pos:start="1687:9" pos:end="1690:9"><if pos:start="1687:9" pos:end="1690:9">if <condition pos:start="1687:12" pos:end="1687:84">(<expr pos:start="1687:13" pos:end="1687:83"><operator pos:start="1687:13" pos:end="1687:13">!</operator><name pos:start="1687:14" pos:end="1687:16">ctx</name> <operator pos:start="1687:18" pos:end="1687:19">||</operator> <operator pos:start="1687:21" pos:end="1687:21">!</operator><name pos:start="1687:22" pos:end="1687:29">key_item</name> <operator pos:start="1687:31" pos:end="1687:32">||</operator> <name pos:start="1687:34" pos:end="1687:50"><name pos:start="1687:34" pos:end="1687:41">key_item</name><operator pos:start="1687:42" pos:end="1687:43">-&gt;</operator><name pos:start="1687:44" pos:end="1687:50">KeyType</name></name> <operator pos:start="1687:52" pos:end="1687:53">!=</operator> <name pos:start="1687:55" pos:end="1687:83">DOT11DECRYPT_KEY_TYPE_WPA_PWD</name></expr>)</condition>
        <block pos:start="1688:9" pos:end="1690:9">{<block_content pos:start="1689:13" pos:end="1689:25">
            <return pos:start="1689:13" pos:end="1689:25">return <expr pos:start="1689:20" pos:end="1689:24"><name pos:start="1689:20" pos:end="1689:24">FALSE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="1691:9" pos:end="1695:9"><if pos:start="1691:9" pos:end="1695:9">if <condition pos:start="1691:12" pos:end="1692:63">(<expr pos:start="1691:13" pos:end="1692:62"><name pos:start="1691:13" pos:end="1691:37"><name pos:start="1691:13" pos:end="1691:20">key_item</name><operator pos:start="1691:21" pos:end="1691:22">-&gt;</operator><name pos:start="1691:23" pos:end="1691:29">UserPwd</name><operator pos:start="1691:30" pos:end="1691:30">.</operator><name pos:start="1691:31" pos:end="1691:37">SsidLen</name></name> <operator pos:start="1691:39" pos:end="1691:40">==</operator> <literal type="number" pos:start="1691:42" pos:end="1691:42">0</literal> <operator pos:start="1691:44" pos:end="1691:45">&amp;&amp;</operator> <name pos:start="1691:47" pos:end="1691:63"><name pos:start="1691:47" pos:end="1691:49">ctx</name><operator pos:start="1691:50" pos:end="1691:51">-&gt;</operator><name pos:start="1691:52" pos:end="1691:63">pkt_ssid_len</name></name> <operator pos:start="1691:65" pos:end="1691:65">&gt;</operator> <literal type="number" pos:start="1691:67" pos:end="1691:67">0</literal> <operator pos:start="1691:69" pos:end="1691:70">&amp;&amp;</operator>
            <name pos:start="1692:13" pos:end="1692:29"><name pos:start="1692:13" pos:end="1692:15">ctx</name><operator pos:start="1692:16" pos:end="1692:17">-&gt;</operator><name pos:start="1692:18" pos:end="1692:29">pkt_ssid_len</name></name> <operator pos:start="1692:31" pos:end="1692:32">&lt;=</operator> <name pos:start="1692:34" pos:end="1692:62">DOT11DECRYPT_WPA_SSID_MAX_LEN</name></expr>)</condition>
        <block pos:start="1693:9" pos:end="1695:9">{<block_content pos:start="1694:13" pos:end="1694:24">
            <return pos:start="1694:13" pos:end="1694:24">return <expr pos:start="1694:20" pos:end="1694:23"><name pos:start="1694:20" pos:end="1694:23">TRUE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return pos:start="1696:9" pos:end="1696:21">return <expr pos:start="1696:16" pos:end="1696:20"><name pos:start="1696:16" pos:end="1696:20">FALSE</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" pos:start="1699:5" pos:end="1699:52">/* Refer to IEEE 802.11i-2004, 8.5.3, pag. 85 */</comment>
    <function pos:start="1700:5" pos:end="1972:5"><type pos:start="1700:5" pos:end="1700:14"><specifier pos:start="1700:5" pos:end="1700:10">static</specifier> <name pos:start="1700:12" pos:end="1700:14">INT</name></type>
    <name pos:start="1701:5" pos:end="1701:31">Dot11DecryptRsna4WHandshake</name><parameter_list pos:start="1701:32" pos:end="1706:28">(
        <parameter pos:start="1702:9" pos:end="1702:33"><decl pos:start="1702:9" pos:end="1702:33"><type pos:start="1702:9" pos:end="1702:33"><name pos:start="1702:9" pos:end="1702:29">PDOT11DECRYPT_CONTEXT</name></type> <name pos:start="1702:31" pos:end="1702:33">ctx</name></decl></parameter>,
        <parameter pos:start="1703:9" pos:end="1703:47"><decl pos:start="1703:9" pos:end="1703:47"><type pos:start="1703:9" pos:end="1703:47"><name pos:start="1703:9" pos:end="1703:34">PDOT11DECRYPT_EAPOL_PARSED</name></type> <name pos:start="1703:36" pos:end="1703:47">eapol_parsed</name></decl></parameter>,
        <parameter pos:start="1704:9" pos:end="1704:31"><decl pos:start="1704:9" pos:end="1704:31"><type pos:start="1704:9" pos:end="1704:31"><specifier pos:start="1704:9" pos:end="1704:13">const</specifier> <name pos:start="1704:15" pos:end="1704:20">guint8</name> <modifier pos:start="1704:22" pos:end="1704:22">*</modifier></type><name pos:start="1704:23" pos:end="1704:31">eapol_raw</name></decl></parameter>,
        <parameter pos:start="1705:9" pos:end="1705:43"><decl pos:start="1705:9" pos:end="1705:43"><type pos:start="1705:9" pos:end="1705:43"><name pos:start="1705:9" pos:end="1705:39">DOT11DECRYPT_SEC_ASSOCIATION_ID</name> <modifier pos:start="1705:41" pos:end="1705:41">*</modifier></type><name pos:start="1705:42" pos:end="1705:43">id</name></decl></parameter>,
        <parameter pos:start="1706:9" pos:end="1706:27"><decl pos:start="1706:9" pos:end="1706:27"><type pos:start="1706:9" pos:end="1706:27"><specifier pos:start="1706:9" pos:end="1706:13">const</specifier> <name pos:start="1706:15" pos:end="1706:19">guint</name></type> <name pos:start="1706:21" pos:end="1706:27">tot_len</name></decl></parameter>)</parameter_list>
    <block pos:start="1707:5" pos:end="1972:5">{<block_content pos:start="1708:9" pos:end="1971:51">
        <decl_stmt pos:start="1708:9" pos:end="1708:62"><decl pos:start="1708:9" pos:end="1708:38"><type pos:start="1708:9" pos:end="1708:31"><name pos:start="1708:9" pos:end="1708:29">DOT11DECRYPT_KEY_ITEM</name> <modifier pos:start="1708:31" pos:end="1708:31">*</modifier></type><name pos:start="1708:32" pos:end="1708:38">tmp_key</name></decl>, <decl pos:start="1708:41" pos:end="1708:52"><type ref="prev" pos:start="1708:9" pos:end="1708:31"><modifier pos:start="1708:41" pos:end="1708:41">*</modifier></type><name pos:start="1708:42" pos:end="1708:52">tmp_pkt_key</name></decl>, <decl pos:start="1708:55" pos:end="1708:61"><type ref="prev" pos:start="1708:9" pos:end="1708:31"/><name pos:start="1708:55" pos:end="1708:61">pkt_key</name></decl>;</decl_stmt>
        <decl_stmt pos:start="1709:9" pos:end="1709:41"><decl pos:start="1709:9" pos:end="1709:40"><type pos:start="1709:9" pos:end="1709:38"><name pos:start="1709:9" pos:end="1709:36">DOT11DECRYPT_SEC_ASSOCIATION</name> <modifier pos:start="1709:38" pos:end="1709:38">*</modifier></type><name pos:start="1709:39" pos:end="1709:40">sa</name></decl>;</decl_stmt>
        <decl_stmt pos:start="1710:9" pos:end="1710:22"><decl pos:start="1710:9" pos:end="1710:21"><type pos:start="1710:9" pos:end="1710:11"><name pos:start="1710:9" pos:end="1710:11">INT</name></type> <name pos:start="1710:13" pos:end="1710:21">key_index</name></decl>;</decl_stmt>
        <decl_stmt pos:start="1711:9" pos:end="1711:20"><decl pos:start="1711:9" pos:end="1711:19"><type pos:start="1711:9" pos:end="1711:11"><name pos:start="1711:9" pos:end="1711:11">INT</name></type> <name pos:start="1711:13" pos:end="1711:15">ret</name> <init pos:start="1711:17" pos:end="1711:19">= <expr pos:start="1711:19" pos:end="1711:19"><literal type="number" pos:start="1711:19" pos:end="1711:19">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="1712:9" pos:end="1712:31"><decl pos:start="1712:9" pos:end="1712:30"><type pos:start="1712:9" pos:end="1712:13"><name pos:start="1712:9" pos:end="1712:13">UCHAR</name></type> <name pos:start="1712:15" pos:end="1712:22">useCache</name> <init pos:start="1712:24" pos:end="1712:30">= <expr pos:start="1712:26" pos:end="1712:30"><name pos:start="1712:26" pos:end="1712:30">FALSE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="1713:9" pos:end="1713:48"><decl pos:start="1713:9" pos:end="1713:47"><type pos:start="1713:9" pos:end="1713:13"><name pos:start="1713:9" pos:end="1713:13">UCHAR</name></type> <name pos:start="1713:15" pos:end="1713:47"><name pos:start="1713:15" pos:end="1713:19">eapol</name><index pos:start="1713:20" pos:end="1713:47">[<expr pos:start="1713:21" pos:end="1713:46"><name pos:start="1713:21" pos:end="1713:46">DOT11DECRYPT_EAPOL_MAX_LEN</name></expr>]</index></name></decl>;</decl_stmt>

        <if_stmt pos:start="1715:9" pos:end="1721:9"><if pos:start="1715:9" pos:end="1721:9">if <condition pos:start="1715:12" pos:end="1717:68">(<expr pos:start="1715:13" pos:end="1717:67"><name pos:start="1715:13" pos:end="1715:29"><name pos:start="1715:13" pos:end="1715:24">eapol_parsed</name><operator pos:start="1715:25" pos:end="1715:26">-&gt;</operator><name pos:start="1715:27" pos:end="1715:29">len</name></name> <operator pos:start="1715:31" pos:end="1715:31">&gt;</operator> <name pos:start="1715:33" pos:end="1715:58">DOT11DECRYPT_EAPOL_MAX_LEN</name> <operator pos:start="1715:60" pos:end="1715:61">||</operator>
            <name pos:start="1716:13" pos:end="1716:33"><name pos:start="1716:13" pos:end="1716:24">eapol_parsed</name><operator pos:start="1716:25" pos:end="1716:26">-&gt;</operator><name pos:start="1716:27" pos:end="1716:33">key_len</name></name> <operator pos:start="1716:35" pos:end="1716:35">&gt;</operator> <name pos:start="1716:37" pos:end="1716:62">DOT11DECRYPT_EAPOL_MAX_LEN</name> <operator pos:start="1716:64" pos:end="1716:65">||</operator>
            <name pos:start="1717:13" pos:end="1717:38"><name pos:start="1717:13" pos:end="1717:24">eapol_parsed</name><operator pos:start="1717:25" pos:end="1717:26">-&gt;</operator><name pos:start="1717:27" pos:end="1717:38">key_data_len</name></name> <operator pos:start="1717:40" pos:end="1717:40">&gt;</operator> <name pos:start="1717:42" pos:end="1717:67">DOT11DECRYPT_EAPOL_MAX_LEN</name></expr>)</condition>
        <block pos:start="1718:9" pos:end="1721:9">{<block_content pos:start="1719:13" pos:end="1720:55">
            <expr_stmt pos:start="1719:13" pos:end="1719:62"><expr pos:start="1719:13" pos:end="1719:61"><call pos:start="1719:13" pos:end="1719:61"><name pos:start="1719:13" pos:end="1719:20">ws_debug</name><argument_list pos:start="1719:21" pos:end="1719:61">(<argument pos:start="1719:22" pos:end="1719:60"><expr pos:start="1719:22" pos:end="1719:60"><literal type="string" pos:start="1719:22" pos:end="1719:60">"Too large EAPOL frame and/or key data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1720:13" pos:end="1720:55">return <expr pos:start="1720:20" pos:end="1720:54"><name pos:start="1720:20" pos:end="1720:54">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1723:9" pos:end="1723:28">/* TODO timeouts? */</comment>

        <comment type="block" pos:start="1725:9" pos:end="1725:37">/* TODO consider key-index */</comment>

        <comment type="block" pos:start="1727:9" pos:end="1727:46">/* TODO considera Deauthentications */</comment>

        <expr_stmt pos:start="1729:9" pos:end="1729:39"><expr pos:start="1729:9" pos:end="1729:38"><call pos:start="1729:9" pos:end="1729:38"><name pos:start="1729:9" pos:end="1729:16">ws_debug</name><argument_list pos:start="1729:17" pos:end="1729:38">(<argument pos:start="1729:18" pos:end="1729:37"><expr pos:start="1729:18" pos:end="1729:37"><literal type="string" pos:start="1729:18" pos:end="1729:37">"4-way handshake..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1731:9" pos:end="1731:128">/* manage 4-way handshake packets; this step completes the 802.1X authentication process (IEEE 802.11i-2004, pag. 85) */</comment>

        <comment type="block" pos:start="1733:9" pos:end="1733:128">/* message 1: Authenticator-&gt;Supplicant (Sec=0, Mic=0, Ack=1, Inst=0, Key=1(pairwise), KeyRSC=0, Nonce=ANonce, MIC=0) */</comment>
        <if_stmt pos:start="1734:9" pos:end="1768:9"><if pos:start="1734:9" pos:end="1768:9">if <condition pos:start="1734:12" pos:end="1734:70">(<expr pos:start="1734:13" pos:end="1734:69"><name pos:start="1734:13" pos:end="1734:34"><name pos:start="1734:13" pos:end="1734:24">eapol_parsed</name><operator pos:start="1734:25" pos:end="1734:26">-&gt;</operator><name pos:start="1734:27" pos:end="1734:34">msg_type</name></name> <operator pos:start="1734:36" pos:end="1734:37">==</operator> <name pos:start="1734:39" pos:end="1734:69">DOT11DECRYPT_HS_MSG_TYPE_4WHS_1</name></expr>)</condition>
        <block pos:start="1735:9" pos:end="1768:9">{<block_content pos:start="1736:13" pos:end="1767:54">
            <expr_stmt pos:start="1736:13" pos:end="1736:50"><expr pos:start="1736:13" pos:end="1736:49"><call pos:start="1736:13" pos:end="1736:49"><name pos:start="1736:13" pos:end="1736:20">ws_debug</name><argument_list pos:start="1736:21" pos:end="1736:49">(<argument pos:start="1736:22" pos:end="1736:48"><expr pos:start="1736:22" pos:end="1736:48"><literal type="string" pos:start="1736:22" pos:end="1736:48">"4-way handshake message 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="1738:13" pos:end="1738:129">/* On reception of Message 1, the Supplicant determines whether the Key Replay Counter field value has been        */</comment>
            <comment type="block" pos:start="1739:13" pos:end="1739:129">/* used before with the current PMKSA. If the Key Replay Counter field value is less than or equal to the current  */</comment>
            <comment type="block" pos:start="1740:13" pos:end="1740:129">/* local value, the Supplicant discards the message.                                                               */</comment>
            <comment type="block" pos:start="1741:13" pos:end="1741:129">/* -&gt; not checked, the Authenticator will be send another Message 1 (hopefully!)                                   */</comment>

            <comment type="block" pos:start="1743:13" pos:end="1743:105">/* save ANonce (from authenticator) to derive the PTK with the SNonce (from the 2 message) */</comment>
            <if_stmt pos:start="1744:13" pos:end="1748:13"><if pos:start="1744:13" pos:end="1748:13">if <condition pos:start="1744:16" pos:end="1744:37">(<expr pos:start="1744:17" pos:end="1744:36"><operator pos:start="1744:17" pos:end="1744:17">!</operator><name pos:start="1744:18" pos:end="1744:36"><name pos:start="1744:18" pos:end="1744:29">eapol_parsed</name><operator pos:start="1744:30" pos:end="1744:31">-&gt;</operator><name pos:start="1744:32" pos:end="1744:36">nonce</name></name></expr>)</condition>
            <block pos:start="1745:13" pos:end="1748:13">{<block_content pos:start="1746:17" pos:end="1747:59">
                <expr_stmt pos:start="1746:17" pos:end="1746:43"><expr pos:start="1746:17" pos:end="1746:42"><call pos:start="1746:17" pos:end="1746:42"><name pos:start="1746:17" pos:end="1746:24">ws_debug</name><argument_list pos:start="1746:25" pos:end="1746:42">(<argument pos:start="1746:26" pos:end="1746:41"><expr pos:start="1746:26" pos:end="1746:41"><literal type="string" pos:start="1746:26" pos:end="1746:41">"ANonce missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="1747:17" pos:end="1747:59">return <expr pos:start="1747:24" pos:end="1747:58"><name pos:start="1747:24" pos:end="1747:58">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="1750:13" pos:end="1750:44"><expr pos:start="1750:13" pos:end="1750:43"><name pos:start="1750:13" pos:end="1750:14">sa</name> <operator pos:start="1750:16" pos:end="1750:16">=</operator> <call pos:start="1750:18" pos:end="1750:43"><name pos:start="1750:18" pos:end="1750:34">Dot11DecryptGetSa</name><argument_list pos:start="1750:35" pos:end="1750:43">(<argument pos:start="1750:36" pos:end="1750:38"><expr pos:start="1750:36" pos:end="1750:38"><name pos:start="1750:36" pos:end="1750:38">ctx</name></expr></argument>, <argument pos:start="1750:41" pos:end="1750:42"><expr pos:start="1750:41" pos:end="1750:42"><name pos:start="1750:41" pos:end="1750:42">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1751:13" pos:end="1761:13"><if pos:start="1751:13" pos:end="1761:13">if <condition pos:start="1751:16" pos:end="1751:49">(<expr pos:start="1751:17" pos:end="1751:48"><name pos:start="1751:17" pos:end="1751:18">sa</name> <operator pos:start="1751:20" pos:end="1751:21">==</operator> <name pos:start="1751:23" pos:end="1751:26">NULL</name> <operator pos:start="1751:28" pos:end="1751:29">||</operator> <name pos:start="1751:31" pos:end="1751:43"><name pos:start="1751:31" pos:end="1751:32">sa</name><operator pos:start="1751:33" pos:end="1751:34">-&gt;</operator><name pos:start="1751:35" pos:end="1751:43">handshake</name></name> <operator pos:start="1751:45" pos:end="1751:46">&gt;=</operator> <literal type="number" pos:start="1751:48" pos:end="1751:48">2</literal></expr>)</condition>
            <block pos:start="1752:13" pos:end="1761:13">{<block_content pos:start="1754:17" pos:end="1760:52">
                <comment type="block" pos:start="1753:17" pos:end="1753:82">/* Either no SA exists or one exists but we're reauthenticating */</comment>
                <expr_stmt pos:start="1754:17" pos:end="1754:43"><expr pos:start="1754:17" pos:end="1754:42"><name pos:start="1754:17" pos:end="1754:18">sa</name> <operator pos:start="1754:20" pos:end="1754:20">=</operator> <call pos:start="1754:22" pos:end="1754:42"><name pos:start="1754:22" pos:end="1754:38">Dot11DecryptNewSa</name><argument_list pos:start="1754:39" pos:end="1754:42">(<argument pos:start="1754:40" pos:end="1754:41"><expr pos:start="1754:40" pos:end="1754:41"><name pos:start="1754:40" pos:end="1754:41">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="1755:17" pos:end="1759:17"><if pos:start="1755:17" pos:end="1759:17">if <condition pos:start="1755:20" pos:end="1755:31">(<expr pos:start="1755:21" pos:end="1755:30"><name pos:start="1755:21" pos:end="1755:22">sa</name> <operator pos:start="1755:24" pos:end="1755:25">==</operator> <name pos:start="1755:27" pos:end="1755:30">NULL</name></expr>)</condition>
                <block pos:start="1756:17" pos:end="1759:17">{<block_content pos:start="1757:21" pos:end="1758:63">
                    <expr_stmt pos:start="1757:21" pos:end="1757:63"><expr pos:start="1757:21" pos:end="1757:62"><call pos:start="1757:21" pos:end="1757:62"><name pos:start="1757:21" pos:end="1757:30">ws_warning</name><argument_list pos:start="1757:31" pos:end="1757:62">(<argument pos:start="1757:32" pos:end="1757:61"><expr pos:start="1757:32" pos:end="1757:61"><literal type="string" pos:start="1757:32" pos:end="1757:61">"Failed to alloc broadcast sa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:start="1758:21" pos:end="1758:63">return <expr pos:start="1758:28" pos:end="1758:62"><name pos:start="1758:28" pos:end="1758:62">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt pos:start="1760:17" pos:end="1760:52"><expr pos:start="1760:17" pos:end="1760:51"><name pos:start="1760:17" pos:end="1760:18">sa</name> <operator pos:start="1760:20" pos:end="1760:20">=</operator> <call pos:start="1760:22" pos:end="1760:51"><name pos:start="1760:22" pos:end="1760:38">Dot11DecryptAddSa</name><argument_list pos:start="1760:39" pos:end="1760:51">(<argument pos:start="1760:40" pos:end="1760:42"><expr pos:start="1760:40" pos:end="1760:42"><name pos:start="1760:40" pos:end="1760:42">ctx</name></expr></argument>, <argument pos:start="1760:45" pos:end="1760:46"><expr pos:start="1760:45" pos:end="1760:46"><name pos:start="1760:45" pos:end="1760:46">id</name></expr></argument>, <argument pos:start="1760:49" pos:end="1760:50"><expr pos:start="1760:49" pos:end="1760:50"><name pos:start="1760:49" pos:end="1760:50">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="1762:13" pos:end="1762:59"><expr pos:start="1762:13" pos:end="1762:58"><call pos:start="1762:13" pos:end="1762:58"><name pos:start="1762:13" pos:end="1762:18">memcpy</name><argument_list pos:start="1762:19" pos:end="1762:58">(<argument pos:start="1762:20" pos:end="1762:32"><expr pos:start="1762:20" pos:end="1762:32"><name pos:start="1762:20" pos:end="1762:32"><name pos:start="1762:20" pos:end="1762:21">sa</name><operator pos:start="1762:22" pos:end="1762:23">-&gt;</operator><name pos:start="1762:24" pos:end="1762:26">wpa</name><operator pos:start="1762:27" pos:end="1762:27">.</operator><name pos:start="1762:28" pos:end="1762:32">nonce</name></name></expr></argument>, <argument pos:start="1762:35" pos:end="1762:53"><expr pos:start="1762:35" pos:end="1762:53"><name pos:start="1762:35" pos:end="1762:53"><name pos:start="1762:35" pos:end="1762:46">eapol_parsed</name><operator pos:start="1762:47" pos:end="1762:48">-&gt;</operator><name pos:start="1762:49" pos:end="1762:53">nonce</name></name></expr></argument>, <argument pos:start="1762:56" pos:end="1762:57"><expr pos:start="1762:56" pos:end="1762:57"><literal type="number" pos:start="1762:56" pos:end="1762:57">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="1764:13" pos:end="1764:104">/* get the Key Descriptor Version (to select algorithm used in decryption -CCMP or TKIP-) */</comment>
            <expr_stmt pos:start="1765:13" pos:end="1765:56"><expr pos:start="1765:13" pos:end="1765:55"><name pos:start="1765:13" pos:end="1765:27"><name pos:start="1765:13" pos:end="1765:14">sa</name><operator pos:start="1765:15" pos:end="1765:16">-&gt;</operator><name pos:start="1765:17" pos:end="1765:19">wpa</name><operator pos:start="1765:20" pos:end="1765:20">.</operator><name pos:start="1765:21" pos:end="1765:27">key_ver</name></name> <operator pos:start="1765:29" pos:end="1765:29">=</operator> <name pos:start="1765:31" pos:end="1765:55"><name pos:start="1765:31" pos:end="1765:42">eapol_parsed</name><operator pos:start="1765:43" pos:end="1765:44">-&gt;</operator><name pos:start="1765:45" pos:end="1765:55">key_version</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="1766:13" pos:end="1766:30"><expr pos:start="1766:13" pos:end="1766:29"><name pos:start="1766:13" pos:end="1766:25"><name pos:start="1766:13" pos:end="1766:14">sa</name><operator pos:start="1766:15" pos:end="1766:16">-&gt;</operator><name pos:start="1766:17" pos:end="1766:25">handshake</name></name> <operator pos:start="1766:27" pos:end="1766:27">=</operator> <literal type="number" pos:start="1766:29" pos:end="1766:29">1</literal></expr>;</expr_stmt>
            <return pos:start="1767:13" pos:end="1767:54">return <expr pos:start="1767:20" pos:end="1767:53"><name pos:start="1767:20" pos:end="1767:53">DOT11DECRYPT_RET_SUCCESS_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1770:9" pos:end="1770:147">/* message 2|4: Supplicant-&gt;Authenticator (Sec=0|1, Mic=1, Ack=0, Inst=0, Key=1(pairwise), KeyRSC=0, Nonce=SNonce|0, MIC=MIC(KCK,EAPOL)) */</comment>
        <if_stmt pos:start="1771:9" pos:end="1936:9"><if pos:start="1771:9" pos:end="1936:9">if <condition pos:start="1771:12" pos:end="1771:70">(<expr pos:start="1771:13" pos:end="1771:69"><name pos:start="1771:13" pos:end="1771:34"><name pos:start="1771:13" pos:end="1771:24">eapol_parsed</name><operator pos:start="1771:25" pos:end="1771:26">-&gt;</operator><name pos:start="1771:27" pos:end="1771:34">msg_type</name></name> <operator pos:start="1771:36" pos:end="1771:37">==</operator> <name pos:start="1771:39" pos:end="1771:69">DOT11DECRYPT_HS_MSG_TYPE_4WHS_2</name></expr>)</condition>
        <block pos:start="1772:9" pos:end="1936:9">{<block_content pos:start="1773:13" pos:end="1935:54">
            <expr_stmt pos:start="1773:13" pos:end="1773:50"><expr pos:start="1773:13" pos:end="1773:49"><call pos:start="1773:13" pos:end="1773:49"><name pos:start="1773:13" pos:end="1773:20">ws_debug</name><argument_list pos:start="1773:21" pos:end="1773:49">(<argument pos:start="1773:22" pos:end="1773:48"><expr pos:start="1773:22" pos:end="1773:48"><literal type="string" pos:start="1773:22" pos:end="1773:48">"4-way handshake message 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="1775:13" pos:end="1775:116">/* On reception of Message 2, the Authenticator checks that the key replay counter corresponds to the */</comment>
            <comment type="block" pos:start="1776:13" pos:end="1776:116">/* outstanding Message 1. If not, it silently discards the message.                                   */</comment>
            <comment type="block" pos:start="1777:13" pos:end="1777:116">/* If the calculated MIC does not match the MIC that the Supplicant included in the EAPOL-Key frame,  */</comment>
            <comment type="block" pos:start="1778:13" pos:end="1778:116">/* the Authenticator silently discards Message 2.                                                     */</comment>
            <comment type="block" pos:start="1779:13" pos:end="1779:116">/* -&gt; not checked; the Supplicant will send another message 2 (hopefully!)                            */</comment>

            <expr_stmt pos:start="1781:13" pos:end="1781:44"><expr pos:start="1781:13" pos:end="1781:43"><name pos:start="1781:13" pos:end="1781:14">sa</name> <operator pos:start="1781:16" pos:end="1781:16">=</operator> <call pos:start="1781:18" pos:end="1781:43"><name pos:start="1781:18" pos:end="1781:34">Dot11DecryptGetSa</name><argument_list pos:start="1781:35" pos:end="1781:43">(<argument pos:start="1781:36" pos:end="1781:38"><expr pos:start="1781:36" pos:end="1781:38"><name pos:start="1781:36" pos:end="1781:38">ctx</name></expr></argument>, <argument pos:start="1781:41" pos:end="1781:42"><expr pos:start="1781:41" pos:end="1781:42"><name pos:start="1781:41" pos:end="1781:42">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1782:13" pos:end="1786:13"><if pos:start="1782:13" pos:end="1786:13">if <condition pos:start="1782:16" pos:end="1782:27">(<expr pos:start="1782:17" pos:end="1782:26"><name pos:start="1782:17" pos:end="1782:18">sa</name> <operator pos:start="1782:20" pos:end="1782:21">==</operator> <name pos:start="1782:23" pos:end="1782:26">NULL</name></expr>)</condition>
            <block pos:start="1783:13" pos:end="1786:13">{<block_content pos:start="1784:17" pos:end="1785:59">
                <expr_stmt pos:start="1784:17" pos:end="1784:50"><expr pos:start="1784:17" pos:end="1784:49"><call pos:start="1784:17" pos:end="1784:49"><name pos:start="1784:17" pos:end="1784:24">ws_debug</name><argument_list pos:start="1784:25" pos:end="1784:49">(<argument pos:start="1784:26" pos:end="1784:48"><expr pos:start="1784:26" pos:end="1784:48"><literal type="string" pos:start="1784:26" pos:end="1784:48">"No SA for BSSID found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="1785:17" pos:end="1785:59">return <expr pos:start="1785:24" pos:end="1785:58"><name pos:start="1785:24" pos:end="1785:58">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="1787:13" pos:end="1791:13"><if pos:start="1787:13" pos:end="1791:13">if <condition pos:start="1787:16" pos:end="1787:37">(<expr pos:start="1787:17" pos:end="1787:36"><operator pos:start="1787:17" pos:end="1787:17">!</operator><name pos:start="1787:18" pos:end="1787:36"><name pos:start="1787:18" pos:end="1787:29">eapol_parsed</name><operator pos:start="1787:30" pos:end="1787:31">-&gt;</operator><name pos:start="1787:32" pos:end="1787:36">nonce</name></name></expr>)</condition>
            <block pos:start="1788:13" pos:end="1791:13">{<block_content pos:start="1789:17" pos:end="1790:59">
                <expr_stmt pos:start="1789:17" pos:end="1789:43"><expr pos:start="1789:17" pos:end="1789:42"><call pos:start="1789:17" pos:end="1789:42"><name pos:start="1789:17" pos:end="1789:24">ws_debug</name><argument_list pos:start="1789:25" pos:end="1789:42">(<argument pos:start="1789:26" pos:end="1789:41"><expr pos:start="1789:26" pos:end="1789:41"><literal type="string" pos:start="1789:26" pos:end="1789:41">"SNonce missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="1790:17" pos:end="1790:59">return <expr pos:start="1790:24" pos:end="1790:58"><name pos:start="1790:24" pos:end="1790:58">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="1792:13" pos:end="1795:13"><if pos:start="1792:13" pos:end="1795:13">if <condition pos:start="1792:16" pos:end="1792:32">(<expr pos:start="1792:17" pos:end="1792:31"><name pos:start="1792:17" pos:end="1792:23"><name pos:start="1792:17" pos:end="1792:18">sa</name><operator pos:start="1792:19" pos:end="1792:20">-&gt;</operator><name pos:start="1792:21" pos:end="1792:23">key</name></name> <operator pos:start="1792:25" pos:end="1792:26">!=</operator> <name pos:start="1792:28" pos:end="1792:31">NULL</name></expr>)</condition>
            <block pos:start="1793:13" pos:end="1795:13">{<block_content pos:start="1794:17" pos:end="1794:32">
                <expr_stmt pos:start="1794:17" pos:end="1794:32"><expr pos:start="1794:17" pos:end="1794:31"><name pos:start="1794:17" pos:end="1794:24">useCache</name> <operator pos:start="1794:26" pos:end="1794:26">=</operator> <name pos:start="1794:28" pos:end="1794:31">TRUE</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <decl_stmt pos:start="1797:13" pos:end="1797:25"><decl pos:start="1797:13" pos:end="1797:24"><type pos:start="1797:13" pos:end="1797:15"><name pos:start="1797:13" pos:end="1797:15">int</name></type> <name pos:start="1797:17" pos:end="1797:19">akm</name> <init pos:start="1797:21" pos:end="1797:24">= <expr pos:start="1797:23" pos:end="1797:24"><operator pos:start="1797:23" pos:end="1797:23">-</operator><literal type="number" pos:start="1797:24" pos:end="1797:24">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="1798:13" pos:end="1798:28"><decl pos:start="1798:13" pos:end="1798:27"><type pos:start="1798:13" pos:end="1798:15"><name pos:start="1798:13" pos:end="1798:15">int</name></type> <name pos:start="1798:17" pos:end="1798:22">cipher</name> <init pos:start="1798:24" pos:end="1798:27">= <expr pos:start="1798:26" pos:end="1798:27"><operator pos:start="1798:26" pos:end="1798:26">-</operator><literal type="number" pos:start="1798:27" pos:end="1798:27">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="1799:13" pos:end="1799:34"><decl pos:start="1799:13" pos:end="1799:33"><type pos:start="1799:13" pos:end="1799:15"><name pos:start="1799:13" pos:end="1799:15">int</name></type> <name pos:start="1799:17" pos:end="1799:28">group_cipher</name> <init pos:start="1799:30" pos:end="1799:33">= <expr pos:start="1799:32" pos:end="1799:33"><operator pos:start="1799:32" pos:end="1799:32">-</operator><literal type="number" pos:start="1799:33" pos:end="1799:33">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="1800:13" pos:end="1800:53"><decl pos:start="1800:13" pos:end="1800:52"><type pos:start="1800:13" pos:end="1800:18"><name pos:start="1800:13" pos:end="1800:18">guint8</name></type> <name pos:start="1800:20" pos:end="1800:52"><name pos:start="1800:20" pos:end="1800:22">ptk</name><index pos:start="1800:23" pos:end="1800:52">[<expr pos:start="1800:24" pos:end="1800:51"><name pos:start="1800:24" pos:end="1800:51">DOT11DECRYPT_WPA_PTK_MAX_LEN</name></expr>]</index></name></decl>;</decl_stmt>
            <decl_stmt pos:start="1801:13" pos:end="1801:31"><decl pos:start="1801:13" pos:end="1801:30"><type pos:start="1801:13" pos:end="1801:18"><name pos:start="1801:13" pos:end="1801:18">size_t</name></type> <name pos:start="1801:20" pos:end="1801:26">ptk_len</name> <init pos:start="1801:28" pos:end="1801:30">= <expr pos:start="1801:30" pos:end="1801:30"><literal type="number" pos:start="1801:30" pos:end="1801:30">0</literal></expr></init></decl>;</decl_stmt>

            <comment type="block" pos:start="1803:13" pos:end="1803:44">/* now you can derive the PTK */</comment>
            <for pos:start="1804:13" pos:end="1919:13">for <control pos:start="1804:17" pos:end="1804:87">(<init pos:start="1804:18" pos:end="1804:31"><expr pos:start="1804:18" pos:end="1804:30"><name pos:start="1804:18" pos:end="1804:26">key_index</name> <operator pos:start="1804:28" pos:end="1804:28">=</operator> <literal type="number" pos:start="1804:30" pos:end="1804:30">0</literal></expr>;</init> <condition pos:start="1804:33" pos:end="1804:74"><expr pos:start="1804:33" pos:end="1804:73"><name pos:start="1804:33" pos:end="1804:41">key_index</name> <operator pos:start="1804:43" pos:end="1804:43">&lt;</operator> <operator pos:start="1804:45" pos:end="1804:45">(</operator><name pos:start="1804:46" pos:end="1804:48">INT</name><operator pos:start="1804:49" pos:end="1804:49">)</operator><name pos:start="1804:50" pos:end="1804:61"><name pos:start="1804:50" pos:end="1804:52">ctx</name><operator pos:start="1804:53" pos:end="1804:54">-&gt;</operator><name pos:start="1804:55" pos:end="1804:61">keys_nr</name></name> <operator pos:start="1804:63" pos:end="1804:64">||</operator> <name pos:start="1804:66" pos:end="1804:73">useCache</name></expr>;</condition> <incr pos:start="1804:76" pos:end="1804:86"><expr pos:start="1804:76" pos:end="1804:86"><name pos:start="1804:76" pos:end="1804:84">key_index</name><operator pos:start="1804:85" pos:end="1804:86">++</operator></expr></incr>)</control>
            <block pos:start="1805:13" pos:end="1919:13">{<block_content pos:start="1807:17" pos:end="1918:17">
                <comment type="block" pos:start="1806:17" pos:end="1806:57">/* use the cached one, or try all keys */</comment>
                <if_stmt pos:start="1807:17" pos:end="1818:17"><if pos:start="1807:17" pos:end="1813:17">if <condition pos:start="1807:20" pos:end="1807:75">(<expr pos:start="1807:21" pos:end="1807:74"><name pos:start="1807:21" pos:end="1807:28">useCache</name> <operator pos:start="1807:30" pos:end="1807:31">&amp;&amp;</operator> <call pos:start="1807:33" pos:end="1807:74"><name pos:start="1807:33" pos:end="1807:56">Dot11DecryptIsWpaKeyType</name><argument_list pos:start="1807:57" pos:end="1807:74">(<argument pos:start="1807:58" pos:end="1807:73"><expr pos:start="1807:58" pos:end="1807:73"><name pos:start="1807:58" pos:end="1807:73"><name pos:start="1807:58" pos:end="1807:59">sa</name><operator pos:start="1807:60" pos:end="1807:61">-&gt;</operator><name pos:start="1807:62" pos:end="1807:64">key</name><operator pos:start="1807:65" pos:end="1807:66">-&gt;</operator><name pos:start="1807:67" pos:end="1807:73">KeyType</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                <block pos:start="1808:17" pos:end="1813:17">{<block_content pos:start="1809:21" pos:end="1812:32">
                    <expr_stmt pos:start="1809:21" pos:end="1809:54"><expr pos:start="1809:21" pos:end="1809:53"><call pos:start="1809:21" pos:end="1809:53"><name pos:start="1809:21" pos:end="1809:28">ws_debug</name><argument_list pos:start="1809:29" pos:end="1809:53">(<argument pos:start="1809:30" pos:end="1809:52"><expr pos:start="1809:30" pos:end="1809:52"><literal type="string" pos:start="1809:30" pos:end="1809:52">"Try cached WPA key..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1810:21" pos:end="1810:38"><expr pos:start="1810:21" pos:end="1810:37"><name pos:start="1810:21" pos:end="1810:27">tmp_key</name> <operator pos:start="1810:29" pos:end="1810:29">=</operator> <name pos:start="1810:31" pos:end="1810:37"><name pos:start="1810:31" pos:end="1810:32">sa</name><operator pos:start="1810:33" pos:end="1810:34">-&gt;</operator><name pos:start="1810:35" pos:end="1810:37">key</name></name></expr>;</expr_stmt>
                    <comment type="block" pos:start="1811:21" pos:end="1811:78">/* Step back loop counter as cached key is used instead */</comment>
                    <expr_stmt pos:start="1812:21" pos:end="1812:32"><expr pos:start="1812:21" pos:end="1812:31"><name pos:start="1812:21" pos:end="1812:29">key_index</name><operator pos:start="1812:30" pos:end="1812:31">--</operator></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else pos:start="1814:17" pos:end="1818:17">else
                <block pos:start="1815:17" pos:end="1818:17">{<block_content pos:start="1816:21" pos:end="1817:52">
                    <expr_stmt pos:start="1816:21" pos:end="1816:47"><expr pos:start="1816:21" pos:end="1816:46"><call pos:start="1816:21" pos:end="1816:46"><name pos:start="1816:21" pos:end="1816:28">ws_debug</name><argument_list pos:start="1816:29" pos:end="1816:46">(<argument pos:start="1816:30" pos:end="1816:45"><expr pos:start="1816:30" pos:end="1816:45"><literal type="string" pos:start="1816:30" pos:end="1816:45">"Try WPA key..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1817:21" pos:end="1817:52"><expr pos:start="1817:21" pos:end="1817:51"><name pos:start="1817:21" pos:end="1817:27">tmp_key</name> <operator pos:start="1817:29" pos:end="1817:29">=</operator> <operator pos:start="1817:31" pos:end="1817:31">&amp;</operator><name pos:start="1817:32" pos:end="1817:51"><name pos:start="1817:32" pos:end="1817:34">ctx</name><operator pos:start="1817:35" pos:end="1817:36">-&gt;</operator><name pos:start="1817:37" pos:end="1817:40">keys</name><index pos:start="1817:41" pos:end="1817:51">[<expr pos:start="1817:42" pos:end="1817:50"><name pos:start="1817:42" pos:end="1817:50">key_index</name></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt pos:start="1819:17" pos:end="1819:33"><expr pos:start="1819:17" pos:end="1819:32"><name pos:start="1819:17" pos:end="1819:24">useCache</name> <operator pos:start="1819:26" pos:end="1819:26">=</operator> <name pos:start="1819:28" pos:end="1819:32">FALSE</name></expr>;</expr_stmt>

                <comment type="block" pos:start="1821:17" pos:end="1821:53">/* obviously, try only WPA keys... */</comment>
                <if_stmt pos:start="1822:17" pos:end="1825:17"><if pos:start="1822:17" pos:end="1825:17">if <condition pos:start="1822:20" pos:end="1822:64">(<expr pos:start="1822:21" pos:end="1822:63"><operator pos:start="1822:21" pos:end="1822:21">!</operator><call pos:start="1822:22" pos:end="1822:63"><name pos:start="1822:22" pos:end="1822:45">Dot11DecryptIsWpaKeyType</name><argument_list pos:start="1822:46" pos:end="1822:63">(<argument pos:start="1822:47" pos:end="1822:62"><expr pos:start="1822:47" pos:end="1822:62"><name pos:start="1822:47" pos:end="1822:62"><name pos:start="1822:47" pos:end="1822:53">tmp_key</name><operator pos:start="1822:54" pos:end="1822:55">-&gt;</operator><name pos:start="1822:56" pos:end="1822:62">KeyType</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                <block pos:start="1823:17" pos:end="1825:17">{<block_content pos:start="1824:21" pos:end="1824:29">
                    <continue pos:start="1824:21" pos:end="1824:29">continue;</continue>
                </block_content>}</block></if></if_stmt>
                <if_stmt pos:start="1826:17" pos:end="1840:17"><if pos:start="1826:17" pos:end="1836:17">if <condition pos:start="1826:20" pos:end="1827:64">(<expr pos:start="1826:21" pos:end="1827:63"><name pos:start="1826:21" pos:end="1826:36"><name pos:start="1826:21" pos:end="1826:27">tmp_key</name><operator pos:start="1826:28" pos:end="1826:29">-&gt;</operator><name pos:start="1826:30" pos:end="1826:36">KeyType</name></name> <operator pos:start="1826:38" pos:end="1826:39">==</operator> <name pos:start="1826:41" pos:end="1826:69">DOT11DECRYPT_KEY_TYPE_WPA_PWD</name> <operator pos:start="1826:71" pos:end="1826:72">&amp;&amp;</operator>
                    <call pos:start="1827:21" pos:end="1827:63"><name pos:start="1827:21" pos:end="1827:49">Dot11DecryptIsPwdWildcardSsid</name><argument_list pos:start="1827:50" pos:end="1827:63">(<argument pos:start="1827:51" pos:end="1827:53"><expr pos:start="1827:51" pos:end="1827:53"><name pos:start="1827:51" pos:end="1827:53">ctx</name></expr></argument>, <argument pos:start="1827:56" pos:end="1827:62"><expr pos:start="1827:56" pos:end="1827:62"><name pos:start="1827:56" pos:end="1827:62">tmp_key</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block pos:start="1828:17" pos:end="1836:17">{<block_content pos:start="1830:21" pos:end="1835:43">
                    <comment type="block" pos:start="1829:21" pos:end="1829:82">/* We have a "wildcard" SSID.  Use the one from the packet. */</comment>
                    <expr_stmt pos:start="1830:21" pos:end="1830:63"><expr pos:start="1830:21" pos:end="1830:62"><call pos:start="1830:21" pos:end="1830:62"><name pos:start="1830:21" pos:end="1830:26">memcpy</name><argument_list pos:start="1830:27" pos:end="1830:62">(<argument pos:start="1830:28" pos:end="1830:35"><expr pos:start="1830:28" pos:end="1830:35"><operator pos:start="1830:28" pos:end="1830:28">&amp;</operator><name pos:start="1830:29" pos:end="1830:35">pkt_key</name></expr></argument>, <argument pos:start="1830:38" pos:end="1830:44"><expr pos:start="1830:38" pos:end="1830:44"><name pos:start="1830:38" pos:end="1830:44">tmp_key</name></expr></argument>, <argument pos:start="1830:47" pos:end="1830:61"><expr pos:start="1830:47" pos:end="1830:61"><sizeof pos:start="1830:47" pos:end="1830:61">sizeof<argument_list pos:start="1830:53" pos:end="1830:61">(<argument pos:start="1830:54" pos:end="1830:60"><expr pos:start="1830:54" pos:end="1830:60"><name pos:start="1830:54" pos:end="1830:60">pkt_key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1831:21" pos:end="1831:84"><expr pos:start="1831:21" pos:end="1831:83"><call pos:start="1831:21" pos:end="1831:83"><name pos:start="1831:21" pos:end="1831:26">memcpy</name><argument_list pos:start="1831:27" pos:end="1831:83">(<argument pos:start="1831:28" pos:end="1831:48"><expr pos:start="1831:28" pos:end="1831:48"><operator pos:start="1831:28" pos:end="1831:28">&amp;</operator><name pos:start="1831:29" pos:end="1831:48"><name pos:start="1831:29" pos:end="1831:35">pkt_key</name><operator pos:start="1831:36" pos:end="1831:36">.</operator><name pos:start="1831:37" pos:end="1831:43">UserPwd</name><operator pos:start="1831:44" pos:end="1831:44">.</operator><name pos:start="1831:45" pos:end="1831:48">Ssid</name></name></expr></argument>, <argument pos:start="1831:51" pos:end="1831:63"><expr pos:start="1831:51" pos:end="1831:63"><name pos:start="1831:51" pos:end="1831:63"><name pos:start="1831:51" pos:end="1831:53">ctx</name><operator pos:start="1831:54" pos:end="1831:55">-&gt;</operator><name pos:start="1831:56" pos:end="1831:63">pkt_ssid</name></name></expr></argument>, <argument pos:start="1831:66" pos:end="1831:82"><expr pos:start="1831:66" pos:end="1831:82"><name pos:start="1831:66" pos:end="1831:82"><name pos:start="1831:66" pos:end="1831:68">ctx</name><operator pos:start="1831:69" pos:end="1831:70">-&gt;</operator><name pos:start="1831:71" pos:end="1831:82">pkt_ssid_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1832:21" pos:end="1832:64"><expr pos:start="1832:21" pos:end="1832:63"><name pos:start="1832:21" pos:end="1832:43"><name pos:start="1832:21" pos:end="1832:27">pkt_key</name><operator pos:start="1832:28" pos:end="1832:28">.</operator><name pos:start="1832:29" pos:end="1832:35">UserPwd</name><operator pos:start="1832:36" pos:end="1832:36">.</operator><name pos:start="1832:37" pos:end="1832:43">SsidLen</name></name> <operator pos:start="1832:45" pos:end="1832:45">=</operator> <name pos:start="1832:47" pos:end="1832:63"><name pos:start="1832:47" pos:end="1832:49">ctx</name><operator pos:start="1832:50" pos:end="1832:51">-&gt;</operator><name pos:start="1832:52" pos:end="1832:63">pkt_ssid_len</name></name></expr>;</expr_stmt>
                    <expr_stmt pos:start="1833:21" pos:end="1834:94"><expr pos:start="1833:21" pos:end="1834:93"><call pos:start="1833:21" pos:end="1834:93"><name pos:start="1833:21" pos:end="1833:43">Dot11DecryptRsnaPwd2Psk</name><argument_list pos:start="1833:44" pos:end="1834:93">(<argument pos:start="1833:45" pos:end="1833:70"><expr pos:start="1833:45" pos:end="1833:70"><name pos:start="1833:45" pos:end="1833:70"><name pos:start="1833:45" pos:end="1833:51">pkt_key</name><operator pos:start="1833:52" pos:end="1833:52">.</operator><name pos:start="1833:53" pos:end="1833:59">UserPwd</name><operator pos:start="1833:60" pos:end="1833:60">.</operator><name pos:start="1833:61" pos:end="1833:70">Passphrase</name></name></expr></argument>, <argument pos:start="1833:73" pos:end="1833:92"><expr pos:start="1833:73" pos:end="1833:92"><name pos:start="1833:73" pos:end="1833:92"><name pos:start="1833:73" pos:end="1833:79">pkt_key</name><operator pos:start="1833:80" pos:end="1833:80">.</operator><name pos:start="1833:81" pos:end="1833:87">UserPwd</name><operator pos:start="1833:88" pos:end="1833:88">.</operator><name pos:start="1833:89" pos:end="1833:92">Ssid</name></name></expr></argument>,
                                            <argument pos:start="1834:45" pos:end="1834:67"><expr pos:start="1834:45" pos:end="1834:67"><name pos:start="1834:45" pos:end="1834:67"><name pos:start="1834:45" pos:end="1834:51">pkt_key</name><operator pos:start="1834:52" pos:end="1834:52">.</operator><name pos:start="1834:53" pos:end="1834:59">UserPwd</name><operator pos:start="1834:60" pos:end="1834:60">.</operator><name pos:start="1834:61" pos:end="1834:67">SsidLen</name></name></expr></argument>, <argument pos:start="1834:70" pos:end="1834:92"><expr pos:start="1834:70" pos:end="1834:92"><name pos:start="1834:70" pos:end="1834:92"><name pos:start="1834:70" pos:end="1834:76">pkt_key</name><operator pos:start="1834:77" pos:end="1834:77">.</operator><name pos:start="1834:78" pos:end="1834:84">KeyData</name><operator pos:start="1834:85" pos:end="1834:85">.</operator><name pos:start="1834:86" pos:end="1834:88">Wpa</name><operator pos:start="1834:89" pos:end="1834:89">.</operator><name pos:start="1834:90" pos:end="1834:92">Psk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1835:21" pos:end="1835:43"><expr pos:start="1835:21" pos:end="1835:42"><name pos:start="1835:21" pos:end="1835:31">tmp_pkt_key</name> <operator pos:start="1835:33" pos:end="1835:33">=</operator> <operator pos:start="1835:35" pos:end="1835:35">&amp;</operator><name pos:start="1835:36" pos:end="1835:42">pkt_key</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else pos:start="1837:17" pos:end="1840:17">else
                <block pos:start="1838:17" pos:end="1840:17">{<block_content pos:start="1839:21" pos:end="1839:42">
                    <expr_stmt pos:start="1839:21" pos:end="1839:42"><expr pos:start="1839:21" pos:end="1839:41"><name pos:start="1839:21" pos:end="1839:31">tmp_pkt_key</name> <operator pos:start="1839:33" pos:end="1839:33">=</operator> <name pos:start="1839:35" pos:end="1839:41">tmp_key</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt pos:start="1841:17" pos:end="1841:50"><expr pos:start="1841:17" pos:end="1841:49"><call pos:start="1841:17" pos:end="1841:49"><name pos:start="1841:17" pos:end="1841:22">memcpy</name><argument_list pos:start="1841:23" pos:end="1841:49">(<argument pos:start="1841:24" pos:end="1841:28"><expr pos:start="1841:24" pos:end="1841:28"><name pos:start="1841:24" pos:end="1841:28">eapol</name></expr></argument>, <argument pos:start="1841:31" pos:end="1841:39"><expr pos:start="1841:31" pos:end="1841:39"><name pos:start="1841:31" pos:end="1841:39">eapol_raw</name></expr></argument>, <argument pos:start="1841:42" pos:end="1841:48"><expr pos:start="1841:42" pos:end="1841:48"><name pos:start="1841:42" pos:end="1841:48">tot_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="1843:17" pos:end="1843:67">/* From IEEE 802.11-2016 12.7.2 EAPOL-Key frames */</comment>
                <if_stmt pos:start="1844:17" pos:end="1863:17"><if pos:start="1844:17" pos:end="1851:17">if <condition pos:start="1844:20" pos:end="1845:51">(<expr pos:start="1844:21" pos:end="1845:50"><name pos:start="1844:21" pos:end="1844:45"><name pos:start="1844:21" pos:end="1844:32">eapol_parsed</name><operator pos:start="1844:33" pos:end="1844:34">-&gt;</operator><name pos:start="1844:35" pos:end="1844:45">key_version</name></name> <operator pos:start="1844:47" pos:end="1844:48">==</operator> <literal type="number" pos:start="1844:50" pos:end="1844:50">0</literal> <operator pos:start="1844:52" pos:end="1844:53">||</operator> <name pos:start="1844:55" pos:end="1844:79"><name pos:start="1844:55" pos:end="1844:66">eapol_parsed</name><operator pos:start="1844:67" pos:end="1844:68">-&gt;</operator><name pos:start="1844:69" pos:end="1844:79">key_version</name></name> <operator pos:start="1844:81" pos:end="1844:82">==</operator> <literal type="number" pos:start="1844:84" pos:end="1844:84">3</literal> <operator pos:start="1844:86" pos:end="1844:87">||</operator>
                    <name pos:start="1845:21" pos:end="1845:45"><name pos:start="1845:21" pos:end="1845:32">eapol_parsed</name><operator pos:start="1845:33" pos:end="1845:34">-&gt;</operator><name pos:start="1845:35" pos:end="1845:45">key_version</name></name> <operator pos:start="1845:47" pos:end="1845:48">==</operator> <literal type="number" pos:start="1845:50" pos:end="1845:50">2</literal></expr>)</condition>
                <block pos:start="1846:17" pos:end="1851:17">{<block_content pos:start="1848:21" pos:end="1850:62">
                    <comment type="block" pos:start="1847:21" pos:end="1847:87">/* PTK derivation is based on Authentication Key Management Type */</comment>
                    <expr_stmt pos:start="1848:21" pos:end="1848:44"><expr pos:start="1848:21" pos:end="1848:43"><name pos:start="1848:21" pos:end="1848:23">akm</name> <operator pos:start="1848:25" pos:end="1848:25">=</operator> <name pos:start="1848:27" pos:end="1848:43"><name pos:start="1848:27" pos:end="1848:38">eapol_parsed</name><operator pos:start="1848:39" pos:end="1848:40">-&gt;</operator><name pos:start="1848:41" pos:end="1848:43">akm</name></name></expr>;</expr_stmt>
                    <expr_stmt pos:start="1849:21" pos:end="1849:50"><expr pos:start="1849:21" pos:end="1849:49"><name pos:start="1849:21" pos:end="1849:26">cipher</name> <operator pos:start="1849:28" pos:end="1849:28">=</operator> <name pos:start="1849:30" pos:end="1849:49"><name pos:start="1849:30" pos:end="1849:41">eapol_parsed</name><operator pos:start="1849:42" pos:end="1849:43">-&gt;</operator><name pos:start="1849:44" pos:end="1849:49">cipher</name></name></expr>;</expr_stmt>
                    <expr_stmt pos:start="1850:21" pos:end="1850:62"><expr pos:start="1850:21" pos:end="1850:61"><name pos:start="1850:21" pos:end="1850:32">group_cipher</name> <operator pos:start="1850:34" pos:end="1850:34">=</operator> <name pos:start="1850:36" pos:end="1850:61"><name pos:start="1850:36" pos:end="1850:47">eapol_parsed</name><operator pos:start="1850:48" pos:end="1850:49">-&gt;</operator><name pos:start="1850:50" pos:end="1850:61">group_cipher</name></name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif" pos:start="1852:17" pos:end="1858:17">else if <condition pos:start="1852:25" pos:end="1852:56">(<expr pos:start="1852:26" pos:end="1852:55"><name pos:start="1852:26" pos:end="1852:50"><name pos:start="1852:26" pos:end="1852:37">eapol_parsed</name><operator pos:start="1852:38" pos:end="1852:39">-&gt;</operator><name pos:start="1852:40" pos:end="1852:50">key_version</name></name> <operator pos:start="1852:52" pos:end="1852:53">==</operator> <literal type="number" pos:start="1852:55" pos:end="1852:55">1</literal></expr>)</condition>
                <block pos:start="1853:17" pos:end="1858:17">{<block_content pos:start="1855:21" pos:end="1857:37">
                    <comment type="block" pos:start="1854:21" pos:end="1854:30">/* TKIP */</comment>
                    <expr_stmt pos:start="1855:21" pos:end="1855:28"><expr pos:start="1855:21" pos:end="1855:27"><name pos:start="1855:21" pos:end="1855:23">akm</name> <operator pos:start="1855:25" pos:end="1855:25">=</operator> <literal type="number" pos:start="1855:27" pos:end="1855:27">2</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="1856:21" pos:end="1856:31"><expr pos:start="1856:21" pos:end="1856:30"><name pos:start="1856:21" pos:end="1856:26">cipher</name> <operator pos:start="1856:28" pos:end="1856:28">=</operator> <literal type="number" pos:start="1856:30" pos:end="1856:30">2</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="1857:21" pos:end="1857:37"><expr pos:start="1857:21" pos:end="1857:36"><name pos:start="1857:21" pos:end="1857:32">group_cipher</name> <operator pos:start="1857:34" pos:end="1857:34">=</operator> <literal type="number" pos:start="1857:36" pos:end="1857:36">2</literal></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else pos:start="1859:17" pos:end="1863:17">else
                <block pos:start="1860:17" pos:end="1863:17">{<block_content pos:start="1861:21" pos:end="1862:63">
                    <expr_stmt pos:start="1861:21" pos:end="1861:63"><expr pos:start="1861:21" pos:end="1861:62"><call pos:start="1861:21" pos:end="1861:62"><name pos:start="1861:21" pos:end="1861:27">ws_info</name><argument_list pos:start="1861:28" pos:end="1861:62">(<argument pos:start="1861:29" pos:end="1861:61"><expr pos:start="1861:29" pos:end="1861:61"><literal type="string" pos:start="1861:29" pos:end="1861:61">"EAPOL key_version not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:start="1862:21" pos:end="1862:63">return <expr pos:start="1862:28" pos:end="1862:62"><name pos:start="1862:28" pos:end="1862:62">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="1865:17" pos:end="1870:17"><if pos:start="1865:17" pos:end="1870:17">if <condition pos:start="1865:20" pos:end="1865:70">(<expr pos:start="1865:21" pos:end="1865:69"><name pos:start="1865:21" pos:end="1865:40"><name pos:start="1865:21" pos:end="1865:31">tmp_pkt_key</name><operator pos:start="1865:32" pos:end="1865:33">-&gt;</operator><name pos:start="1865:34" pos:end="1865:40">KeyType</name></name> <operator pos:start="1865:42" pos:end="1865:43">==</operator> <name pos:start="1865:45" pos:end="1865:69">DOT11DECRYPT_KEY_TYPE_MSK</name></expr>)</condition>
                <block pos:start="1866:17" pos:end="1870:17">{<block_content pos:start="1867:21" pos:end="1869:83">
                    <expr_stmt pos:start="1867:21" pos:end="1869:83"><expr pos:start="1867:21" pos:end="1869:82"><call pos:start="1867:21" pos:end="1869:82"><name pos:start="1867:21" pos:end="1867:48">Dot11DecryptDerivePmkFromMsk</name><argument_list pos:start="1867:49" pos:end="1869:82">(<argument pos:start="1867:50" pos:end="1867:69"><expr pos:start="1867:50" pos:end="1867:69"><name pos:start="1867:50" pos:end="1867:69"><name pos:start="1867:50" pos:end="1867:60">tmp_pkt_key</name><operator pos:start="1867:61" pos:end="1867:62">-&gt;</operator><name pos:start="1867:63" pos:end="1867:65">Msk</name><operator pos:start="1867:66" pos:end="1867:66">.</operator><name pos:start="1867:67" pos:end="1867:69">Msk</name></name></expr></argument>, <argument pos:start="1867:72" pos:end="1867:91"><expr pos:start="1867:72" pos:end="1867:91"><name pos:start="1867:72" pos:end="1867:91"><name pos:start="1867:72" pos:end="1867:82">tmp_pkt_key</name><operator pos:start="1867:83" pos:end="1867:84">-&gt;</operator><name pos:start="1867:85" pos:end="1867:87">Msk</name><operator pos:start="1867:88" pos:end="1867:88">.</operator><name pos:start="1867:89" pos:end="1867:91">Len</name></name></expr></argument>, <argument pos:start="1867:94" pos:end="1867:96"><expr pos:start="1867:94" pos:end="1867:96"><name pos:start="1867:94" pos:end="1867:96">akm</name></expr></argument>,
                                                 <argument pos:start="1868:50" pos:end="1868:77"><expr pos:start="1868:50" pos:end="1868:77"><name pos:start="1868:50" pos:end="1868:77"><name pos:start="1868:50" pos:end="1868:60">tmp_pkt_key</name><operator pos:start="1868:61" pos:end="1868:62">-&gt;</operator><name pos:start="1868:63" pos:end="1868:69">KeyData</name><operator pos:start="1868:70" pos:end="1868:70">.</operator><name pos:start="1868:71" pos:end="1868:73">Wpa</name><operator pos:start="1868:74" pos:end="1868:74">.</operator><name pos:start="1868:75" pos:end="1868:77">Psk</name></name></expr></argument>,
                                                 <argument pos:start="1869:50" pos:end="1869:81"><expr pos:start="1869:50" pos:end="1869:81"><operator pos:start="1869:50" pos:end="1869:50">&amp;</operator><name pos:start="1869:51" pos:end="1869:81"><name pos:start="1869:51" pos:end="1869:61">tmp_pkt_key</name><operator pos:start="1869:62" pos:end="1869:63">-&gt;</operator><name pos:start="1869:64" pos:end="1869:70">KeyData</name><operator pos:start="1869:71" pos:end="1869:71">.</operator><name pos:start="1869:72" pos:end="1869:74">Wpa</name><operator pos:start="1869:75" pos:end="1869:75">.</operator><name pos:start="1869:76" pos:end="1869:81">PskLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="1872:17" pos:end="1892:17"><if pos:start="1872:17" pos:end="1882:17">if <condition pos:start="1872:20" pos:end="1872:45">(<expr pos:start="1872:21" pos:end="1872:44"><call pos:start="1872:21" pos:end="1872:44"><name pos:start="1872:21" pos:end="1872:39">Dot11DecryptIsFtAkm</name><argument_list pos:start="1872:40" pos:end="1872:44">(<argument pos:start="1872:41" pos:end="1872:43"><expr pos:start="1872:41" pos:end="1872:43"><name pos:start="1872:41" pos:end="1872:43">akm</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block pos:start="1873:17" pos:end="1882:17">{<block_content pos:start="1874:21" pos:end="1881:78">
                    <expr_stmt pos:start="1874:21" pos:end="1881:78"><expr pos:start="1874:21" pos:end="1881:77"><name pos:start="1874:21" pos:end="1874:23">ret</name> <operator pos:start="1874:25" pos:end="1874:25">=</operator> <call pos:start="1874:27" pos:end="1881:77"><name pos:start="1874:27" pos:end="1874:49">Dot11DecryptFtDerivePtk</name><argument_list pos:start="1874:50" pos:end="1881:77">(<argument pos:start="1874:51" pos:end="1874:53"><expr pos:start="1874:51" pos:end="1874:53"><name pos:start="1874:51" pos:end="1874:53">ctx</name></expr></argument>, <argument pos:start="1874:56" pos:end="1874:57"><expr pos:start="1874:56" pos:end="1874:57"><name pos:start="1874:56" pos:end="1874:57">sa</name></expr></argument>, <argument pos:start="1874:60" pos:end="1874:70"><expr pos:start="1874:60" pos:end="1874:70"><name pos:start="1874:60" pos:end="1874:70">tmp_pkt_key</name></expr></argument>,
                                                  <argument pos:start="1875:51" pos:end="1875:68"><expr pos:start="1875:51" pos:end="1875:68"><name pos:start="1875:51" pos:end="1875:68"><name pos:start="1875:51" pos:end="1875:62">eapol_parsed</name><operator pos:start="1875:63" pos:end="1875:64">-&gt;</operator><name pos:start="1875:65" pos:end="1875:68">mdid</name></name></expr></argument>,
                                                  <argument pos:start="1876:51" pos:end="1876:69"><expr pos:start="1876:51" pos:end="1876:69"><name pos:start="1876:51" pos:end="1876:69"><name pos:start="1876:51" pos:end="1876:62">eapol_parsed</name><operator pos:start="1876:63" pos:end="1876:64">-&gt;</operator><name pos:start="1876:65" pos:end="1876:69">nonce</name></name></expr></argument>,
                                                  <argument pos:start="1877:51" pos:end="1877:75"><expr pos:start="1877:51" pos:end="1877:75"><name pos:start="1877:51" pos:end="1877:75"><name pos:start="1877:51" pos:end="1877:62">eapol_parsed</name><operator pos:start="1877:63" pos:end="1877:64">-&gt;</operator><name pos:start="1877:65" pos:end="1877:67">fte</name><operator pos:start="1877:68" pos:end="1877:68">.</operator><name pos:start="1877:69" pos:end="1877:75">r0kh_id</name></name></expr></argument>,
                                                  <argument pos:start="1878:51" pos:end="1878:79"><expr pos:start="1878:51" pos:end="1878:79"><name pos:start="1878:51" pos:end="1878:79"><name pos:start="1878:51" pos:end="1878:62">eapol_parsed</name><operator pos:start="1878:63" pos:end="1878:64">-&gt;</operator><name pos:start="1878:65" pos:end="1878:67">fte</name><operator pos:start="1878:68" pos:end="1878:68">.</operator><name pos:start="1878:69" pos:end="1878:79">r0kh_id_len</name></name></expr></argument>,
                                                  <argument pos:start="1879:51" pos:end="1879:75"><expr pos:start="1879:51" pos:end="1879:75"><name pos:start="1879:51" pos:end="1879:75"><name pos:start="1879:51" pos:end="1879:62">eapol_parsed</name><operator pos:start="1879:63" pos:end="1879:64">-&gt;</operator><name pos:start="1879:65" pos:end="1879:67">fte</name><operator pos:start="1879:68" pos:end="1879:68">.</operator><name pos:start="1879:69" pos:end="1879:75">r1kh_id</name></name></expr></argument>,
                                                  <argument pos:start="1880:51" pos:end="1880:79"><expr pos:start="1880:51" pos:end="1880:79"><name pos:start="1880:51" pos:end="1880:79"><name pos:start="1880:51" pos:end="1880:62">eapol_parsed</name><operator pos:start="1880:63" pos:end="1880:64">-&gt;</operator><name pos:start="1880:65" pos:end="1880:67">fte</name><operator pos:start="1880:68" pos:end="1880:68">.</operator><name pos:start="1880:69" pos:end="1880:79">r1kh_id_len</name></name></expr></argument>,
                                                  <argument pos:start="1881:51" pos:end="1881:53"><expr pos:start="1881:51" pos:end="1881:53"><name pos:start="1881:51" pos:end="1881:53">akm</name></expr></argument>, <argument pos:start="1881:56" pos:end="1881:61"><expr pos:start="1881:56" pos:end="1881:61"><name pos:start="1881:56" pos:end="1881:61">cipher</name></expr></argument>, <argument pos:start="1881:64" pos:end="1881:66"><expr pos:start="1881:64" pos:end="1881:66"><name pos:start="1881:64" pos:end="1881:66">ptk</name></expr></argument>, <argument pos:start="1881:69" pos:end="1881:76"><expr pos:start="1881:69" pos:end="1881:76"><operator pos:start="1881:69" pos:end="1881:69">&amp;</operator><name pos:start="1881:70" pos:end="1881:76">ptk_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else pos:start="1883:17" pos:end="1892:17">else
                <block pos:start="1884:17" pos:end="1892:17">{<block_content pos:start="1886:21" pos:end="1891:76">
                    <comment type="block" pos:start="1885:21" pos:end="1885:85">/* derive the PTK from the BSSID, STA MAC, PMK, SNonce, ANonce */</comment>
                    <expr_stmt pos:start="1886:21" pos:end="1891:76"><expr pos:start="1886:21" pos:end="1891:75"><name pos:start="1886:21" pos:end="1886:23">ret</name> <operator pos:start="1886:25" pos:end="1886:25">=</operator> <call pos:start="1886:27" pos:end="1891:75"><name pos:start="1886:27" pos:end="1886:47">Dot11DecryptDerivePtk</name><argument_list pos:start="1886:48" pos:end="1891:75">(<argument pos:start="1886:49" pos:end="1886:50"><expr pos:start="1886:49" pos:end="1886:50"><name pos:start="1886:49" pos:end="1886:50">sa</name></expr></argument>,                           <comment type="block" pos:start="1886:79" pos:end="1886:123">/* authenticator nonce, bssid, station mac */</comment>
                                                <argument pos:start="1887:49" pos:end="1887:76"><expr pos:start="1887:49" pos:end="1887:76"><name pos:start="1887:49" pos:end="1887:76"><name pos:start="1887:49" pos:end="1887:59">tmp_pkt_key</name><operator pos:start="1887:60" pos:end="1887:61">-&gt;</operator><name pos:start="1887:62" pos:end="1887:68">KeyData</name><operator pos:start="1887:69" pos:end="1887:69">.</operator><name pos:start="1887:70" pos:end="1887:72">Wpa</name><operator pos:start="1887:73" pos:end="1887:73">.</operator><name pos:start="1887:74" pos:end="1887:76">Psk</name></name></expr></argument>, <comment type="block" pos:start="1887:79" pos:end="1887:94">/* PSK == PMK */</comment>
                                                <argument pos:start="1888:49" pos:end="1888:79"><expr pos:start="1888:49" pos:end="1888:79"><name pos:start="1888:49" pos:end="1888:79"><name pos:start="1888:49" pos:end="1888:59">tmp_pkt_key</name><operator pos:start="1888:60" pos:end="1888:61">-&gt;</operator><name pos:start="1888:62" pos:end="1888:68">KeyData</name><operator pos:start="1888:69" pos:end="1888:69">.</operator><name pos:start="1888:70" pos:end="1888:72">Wpa</name><operator pos:start="1888:73" pos:end="1888:73">.</operator><name pos:start="1888:74" pos:end="1888:79">PskLen</name></name></expr></argument>,
                                                <argument pos:start="1889:49" pos:end="1889:67"><expr pos:start="1889:49" pos:end="1889:67"><name pos:start="1889:49" pos:end="1889:67"><name pos:start="1889:49" pos:end="1889:60">eapol_parsed</name><operator pos:start="1889:61" pos:end="1889:62">-&gt;</operator><name pos:start="1889:63" pos:end="1889:67">nonce</name></name></expr></argument>, <comment type="block" pos:start="1889:70" pos:end="1889:91">/* supplicant nonce */</comment>
                                                <argument pos:start="1890:49" pos:end="1890:73"><expr pos:start="1890:49" pos:end="1890:73"><name pos:start="1890:49" pos:end="1890:73"><name pos:start="1890:49" pos:end="1890:60">eapol_parsed</name><operator pos:start="1890:61" pos:end="1890:62">-&gt;</operator><name pos:start="1890:63" pos:end="1890:73">key_version</name></name></expr></argument>,
                                                <argument pos:start="1891:49" pos:end="1891:51"><expr pos:start="1891:49" pos:end="1891:51"><name pos:start="1891:49" pos:end="1891:51">akm</name></expr></argument>, <argument pos:start="1891:54" pos:end="1891:59"><expr pos:start="1891:54" pos:end="1891:59"><name pos:start="1891:54" pos:end="1891:59">cipher</name></expr></argument>, <argument pos:start="1891:62" pos:end="1891:64"><expr pos:start="1891:62" pos:end="1891:64"><name pos:start="1891:62" pos:end="1891:64">ptk</name></expr></argument>, <argument pos:start="1891:67" pos:end="1891:74"><expr pos:start="1891:67" pos:end="1891:74"><operator pos:start="1891:67" pos:end="1891:67">&amp;</operator><name pos:start="1891:68" pos:end="1891:74">ptk_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <if_stmt pos:start="1893:17" pos:end="1897:17"><if pos:start="1893:17" pos:end="1897:17">if <condition pos:start="1893:20" pos:end="1893:24">(<expr pos:start="1893:21" pos:end="1893:23"><name pos:start="1893:21" pos:end="1893:23">ret</name></expr>)</condition>
                <block pos:start="1894:17" pos:end="1897:17">{<block_content pos:start="1896:21" pos:end="1896:29">
                    <comment type="block" pos:start="1895:21" pos:end="1895:53">/* Unsuccessful PTK derivation */</comment>
                    <continue pos:start="1896:21" pos:end="1896:29">continue;</continue>
                </block_content>}</block></if></if_stmt>
                <expr_stmt pos:start="1898:17" pos:end="1899:44"><expr pos:start="1898:17" pos:end="1899:43"><call pos:start="1898:17" pos:end="1899:43"><name pos:start="1898:17" pos:end="1898:26">DEBUG_DUMP</name><argument_list pos:start="1898:27" pos:end="1899:43">(<argument pos:start="1898:28" pos:end="1898:31"><expr pos:start="1898:28" pos:end="1898:31"><literal type="string" pos:start="1898:28" pos:end="1898:31">"TK"</literal></expr></argument>, <argument pos:start="1898:34" pos:end="1898:118"><expr pos:start="1898:34" pos:end="1898:118"><operator pos:start="1898:34" pos:end="1898:34">(</operator><name pos:start="1898:35" pos:end="1898:37">ptk</name> <operator pos:start="1898:39" pos:end="1898:39">+</operator> <operator pos:start="1898:41" pos:end="1898:41">(</operator><operator pos:start="1898:42" pos:end="1898:42">(</operator><operator pos:start="1898:43" pos:end="1898:43">(</operator><operator pos:start="1898:44" pos:end="1898:44">(</operator><operator pos:start="1898:45" pos:end="1898:45">(</operator><literal type="number" pos:start="1898:46" pos:end="1898:46">0</literal><operator pos:start="1898:47" pos:end="1898:47">)</operator> <operator pos:start="1898:49" pos:end="1898:49">+</operator> <call pos:start="1898:51" pos:end="1898:76"><name pos:start="1898:51" pos:end="1898:71">Dot11DecryptGetKckLen</name><argument_list pos:start="1898:72" pos:end="1898:76">(<argument pos:start="1898:73" pos:end="1898:75"><expr pos:start="1898:73" pos:end="1898:75"><name pos:start="1898:73" pos:end="1898:75">akm</name></expr></argument>)</argument_list></call> <operator pos:start="1898:78" pos:end="1898:78">/</operator> <literal type="number" pos:start="1898:80" pos:end="1898:80">8</literal><operator pos:start="1898:81" pos:end="1898:81">)</operator><operator pos:start="1898:82" pos:end="1898:82">)</operator> <operator pos:start="1898:84" pos:end="1898:84">+</operator> <call pos:start="1898:86" pos:end="1898:111"><name pos:start="1898:86" pos:end="1898:106">Dot11DecryptGetKekLen</name><argument_list pos:start="1898:107" pos:end="1898:111">(<argument pos:start="1898:108" pos:end="1898:110"><expr pos:start="1898:108" pos:end="1898:110"><name pos:start="1898:108" pos:end="1898:110">akm</name></expr></argument>)</argument_list></call> <operator pos:start="1898:113" pos:end="1898:113">/</operator> <literal type="number" pos:start="1898:115" pos:end="1898:115">8</literal><operator pos:start="1898:116" pos:end="1898:116">)</operator><operator pos:start="1898:117" pos:end="1898:117">)</operator><operator pos:start="1898:118" pos:end="1898:118">)</operator></expr></argument>, <argument pos:start="1898:121" pos:end="1898:152"><expr pos:start="1898:121" pos:end="1898:152"><call pos:start="1898:121" pos:end="1898:148"><name pos:start="1898:121" pos:end="1898:140">Dot11DecryptGetTkLen</name><argument_list pos:start="1898:141" pos:end="1898:148">(<argument pos:start="1898:142" pos:end="1898:147"><expr pos:start="1898:142" pos:end="1898:147"><name pos:start="1898:142" pos:end="1898:147">cipher</name></expr></argument>)</argument_list></call> <operator pos:start="1898:150" pos:end="1898:150">/</operator> <literal type="number" pos:start="1898:152" pos:end="1898:152">8</literal></expr></argument>,
                           <argument pos:start="1899:28" pos:end="1899:42"><expr pos:start="1899:28" pos:end="1899:42"><name pos:start="1899:28" pos:end="1899:42">LOG_LEVEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1901:17" pos:end="1906:52"><expr pos:start="1901:17" pos:end="1906:51"><name pos:start="1901:17" pos:end="1901:19">ret</name> <operator pos:start="1901:21" pos:end="1901:21">=</operator> <call pos:start="1901:23" pos:end="1906:51"><name pos:start="1901:23" pos:end="1901:46">Dot11DecryptRsnaMicCheck</name><argument_list pos:start="1901:47" pos:end="1906:51">(<argument pos:start="1901:48" pos:end="1901:59"><expr pos:start="1901:48" pos:end="1901:59"><name pos:start="1901:48" pos:end="1901:59">eapol_parsed</name></expr></argument>,
                                               <argument pos:start="1902:48" pos:end="1902:52"><expr pos:start="1902:48" pos:end="1902:52"><name pos:start="1902:48" pos:end="1902:52">eapol</name></expr></argument>,   <comment type="block" pos:start="1902:57" pos:end="1902:87">/* eapol frame (header also) */</comment>
                                               <argument pos:start="1903:48" pos:end="1903:54"><expr pos:start="1903:48" pos:end="1903:54"><name pos:start="1903:48" pos:end="1903:54">tot_len</name></expr></argument>, <comment type="block" pos:start="1903:57" pos:end="1903:80">/* eapol frame length */</comment>
                                               <argument pos:start="1904:48" pos:end="1904:58"><expr pos:start="1904:48" pos:end="1904:58"><operator pos:start="1904:48" pos:end="1904:48">(</operator><name pos:start="1904:49" pos:end="1904:51">ptk</name> <operator pos:start="1904:53" pos:end="1904:53">+</operator> <operator pos:start="1904:55" pos:end="1904:55">(</operator><literal type="number" pos:start="1904:56" pos:end="1904:56">0</literal><operator pos:start="1904:57" pos:end="1904:57">)</operator><operator pos:start="1904:58" pos:end="1904:58">)</operator></expr></argument>,
                                               <argument pos:start="1905:48" pos:end="1905:72"><expr pos:start="1905:48" pos:end="1905:72"><name pos:start="1905:48" pos:end="1905:72"><name pos:start="1905:48" pos:end="1905:59">eapol_parsed</name><operator pos:start="1905:60" pos:end="1905:61">-&gt;</operator><name pos:start="1905:62" pos:end="1905:72">key_version</name></name></expr></argument>,
                                               <argument pos:start="1906:48" pos:end="1906:50"><expr pos:start="1906:48" pos:end="1906:50"><name pos:start="1906:48" pos:end="1906:50">akm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block" pos:start="1907:17" pos:end="1907:119">/* If the MIC is valid, the Authenticator checks that the RSN information element bit-wise matches   */</comment>
                <comment type="block" pos:start="1908:17" pos:end="1908:119">/* that from the (Re)Association Request message.                                                    */</comment>
                <comment type="block" pos:start="1909:17" pos:end="1909:119">/*     i) TODO If these are not exactly the same, the Authenticator uses MLME-DEAUTHENTICATE.request */</comment>
                <comment type="block" pos:start="1910:17" pos:end="1910:119">/* primitive to terminate the association.                                                           */</comment>
                <comment type="block" pos:start="1911:17" pos:end="1911:119">/*     ii) If they do match bit-wise, the Authenticator constructs Message 3.                        */</comment>

                <if_stmt pos:start="1913:17" pos:end="1918:17"><if pos:start="1913:17" pos:end="1918:17">if <condition pos:start="1913:20" pos:end="1913:52">(<expr pos:start="1913:21" pos:end="1913:51"><name pos:start="1913:21" pos:end="1913:23">ret</name> <operator pos:start="1913:25" pos:end="1913:26">==</operator> <name pos:start="1913:28" pos:end="1913:51">DOT11DECRYPT_RET_SUCCESS</name></expr>)</condition>
                <block pos:start="1914:17" pos:end="1918:17">{<block_content pos:start="1916:21" pos:end="1917:26">
                    <comment type="block" pos:start="1915:21" pos:end="1915:90">/* the key is the correct one, cache it in the Security Association */</comment>
                    <expr_stmt pos:start="1916:21" pos:end="1916:38"><expr pos:start="1916:21" pos:end="1916:37"><name pos:start="1916:21" pos:end="1916:27"><name pos:start="1916:21" pos:end="1916:22">sa</name><operator pos:start="1916:23" pos:end="1916:24">-&gt;</operator><name pos:start="1916:25" pos:end="1916:27">key</name></name> <operator pos:start="1916:29" pos:end="1916:29">=</operator> <name pos:start="1916:31" pos:end="1916:37">tmp_key</name></expr>;</expr_stmt>
                    <break pos:start="1917:21" pos:end="1917:26">break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <if_stmt pos:start="1921:13" pos:end="1925:13"><if pos:start="1921:13" pos:end="1925:13">if <condition pos:start="1921:16" pos:end="1921:20">(<expr pos:start="1921:17" pos:end="1921:19"><name pos:start="1921:17" pos:end="1921:19">ret</name></expr>)</condition>
            <block pos:start="1922:13" pos:end="1925:13">{<block_content pos:start="1923:17" pos:end="1924:59">
                <expr_stmt pos:start="1923:17" pos:end="1923:50"><expr pos:start="1923:17" pos:end="1923:49"><call pos:start="1923:17" pos:end="1923:49"><name pos:start="1923:17" pos:end="1923:24">ws_debug</name><argument_list pos:start="1923:25" pos:end="1923:49">(<argument pos:start="1923:26" pos:end="1923:48"><expr pos:start="1923:26" pos:end="1923:48"><literal type="string" pos:start="1923:26" pos:end="1923:48">"handshake step failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="1924:17" pos:end="1924:59">return <expr pos:start="1924:24" pos:end="1924:58"><name pos:start="1924:24" pos:end="1924:58">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="1926:13" pos:end="1926:56"><expr pos:start="1926:13" pos:end="1926:55"><name pos:start="1926:13" pos:end="1926:27"><name pos:start="1926:13" pos:end="1926:14">sa</name><operator pos:start="1926:15" pos:end="1926:16">-&gt;</operator><name pos:start="1926:17" pos:end="1926:19">wpa</name><operator pos:start="1926:20" pos:end="1926:20">.</operator><name pos:start="1926:21" pos:end="1926:27">key_ver</name></name> <operator pos:start="1926:29" pos:end="1926:29">=</operator> <name pos:start="1926:31" pos:end="1926:55"><name pos:start="1926:31" pos:end="1926:42">eapol_parsed</name><operator pos:start="1926:43" pos:end="1926:44">-&gt;</operator><name pos:start="1926:45" pos:end="1926:55">key_version</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="1927:13" pos:end="1927:30"><expr pos:start="1927:13" pos:end="1927:29"><name pos:start="1927:13" pos:end="1927:23"><name pos:start="1927:13" pos:end="1927:14">sa</name><operator pos:start="1927:15" pos:end="1927:16">-&gt;</operator><name pos:start="1927:17" pos:end="1927:19">wpa</name><operator pos:start="1927:20" pos:end="1927:20">.</operator><name pos:start="1927:21" pos:end="1927:23">akm</name></name> <operator pos:start="1927:25" pos:end="1927:25">=</operator> <name pos:start="1927:27" pos:end="1927:29">akm</name></expr>;</expr_stmt>
            <expr_stmt pos:start="1928:13" pos:end="1928:36"><expr pos:start="1928:13" pos:end="1928:35"><name pos:start="1928:13" pos:end="1928:26"><name pos:start="1928:13" pos:end="1928:14">sa</name><operator pos:start="1928:15" pos:end="1928:16">-&gt;</operator><name pos:start="1928:17" pos:end="1928:19">wpa</name><operator pos:start="1928:20" pos:end="1928:20">.</operator><name pos:start="1928:21" pos:end="1928:26">cipher</name></name> <operator pos:start="1928:28" pos:end="1928:28">=</operator> <name pos:start="1928:30" pos:end="1928:35">cipher</name></expr>;</expr_stmt>
            <expr_stmt pos:start="1929:13" pos:end="1929:52"><expr pos:start="1929:13" pos:end="1929:51"><name pos:start="1929:13" pos:end="1929:36"><name pos:start="1929:13" pos:end="1929:14">sa</name><operator pos:start="1929:15" pos:end="1929:16">-&gt;</operator><name pos:start="1929:17" pos:end="1929:19">wpa</name><operator pos:start="1929:20" pos:end="1929:20">.</operator><name pos:start="1929:21" pos:end="1929:36">tmp_group_cipher</name></name> <operator pos:start="1929:38" pos:end="1929:38">=</operator> <name pos:start="1929:40" pos:end="1929:51">group_cipher</name></expr>;</expr_stmt>
            <expr_stmt pos:start="1930:13" pos:end="1930:46"><expr pos:start="1930:13" pos:end="1930:45"><call pos:start="1930:13" pos:end="1930:45"><name pos:start="1930:13" pos:end="1930:18">memcpy</name><argument_list pos:start="1930:19" pos:end="1930:45">(<argument pos:start="1930:20" pos:end="1930:30"><expr pos:start="1930:20" pos:end="1930:30"><name pos:start="1930:20" pos:end="1930:30"><name pos:start="1930:20" pos:end="1930:21">sa</name><operator pos:start="1930:22" pos:end="1930:23">-&gt;</operator><name pos:start="1930:24" pos:end="1930:26">wpa</name><operator pos:start="1930:27" pos:end="1930:27">.</operator><name pos:start="1930:28" pos:end="1930:30">ptk</name></name></expr></argument>, <argument pos:start="1930:33" pos:end="1930:35"><expr pos:start="1930:33" pos:end="1930:35"><name pos:start="1930:33" pos:end="1930:35">ptk</name></expr></argument>, <argument pos:start="1930:38" pos:end="1930:44"><expr pos:start="1930:38" pos:end="1930:44"><name pos:start="1930:38" pos:end="1930:44">ptk_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1931:13" pos:end="1931:43"><expr pos:start="1931:13" pos:end="1931:42"><name pos:start="1931:13" pos:end="1931:27"><name pos:start="1931:13" pos:end="1931:14">sa</name><operator pos:start="1931:15" pos:end="1931:16">-&gt;</operator><name pos:start="1931:17" pos:end="1931:19">wpa</name><operator pos:start="1931:20" pos:end="1931:20">.</operator><name pos:start="1931:21" pos:end="1931:27">ptk_len</name></name> <operator pos:start="1931:29" pos:end="1931:29">=</operator> <operator pos:start="1931:31" pos:end="1931:31">(</operator><name pos:start="1931:32" pos:end="1931:34">INT</name><operator pos:start="1931:35" pos:end="1931:35">)</operator><name pos:start="1931:36" pos:end="1931:42">ptk_len</name></expr>;</expr_stmt>
            <expr_stmt pos:start="1932:13" pos:end="1932:30"><expr pos:start="1932:13" pos:end="1932:29"><name pos:start="1932:13" pos:end="1932:25"><name pos:start="1932:13" pos:end="1932:14">sa</name><operator pos:start="1932:15" pos:end="1932:16">-&gt;</operator><name pos:start="1932:17" pos:end="1932:25">handshake</name></name> <operator pos:start="1932:27" pos:end="1932:27">=</operator> <literal type="number" pos:start="1932:29" pos:end="1932:29">2</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="1933:13" pos:end="1933:32"><expr pos:start="1933:13" pos:end="1933:31"><name pos:start="1933:13" pos:end="1933:24"><name pos:start="1933:13" pos:end="1933:14">sa</name><operator pos:start="1933:15" pos:end="1933:16">-&gt;</operator><name pos:start="1933:17" pos:end="1933:24">validKey</name></name> <operator pos:start="1933:26" pos:end="1933:26">=</operator> <name pos:start="1933:28" pos:end="1933:31">TRUE</name></expr>;</expr_stmt> <comment type="block" pos:start="1933:34" pos:end="1933:121">/* we can use the key to decode, even if we have not captured the other eapol packets */</comment>

            <return pos:start="1935:13" pos:end="1935:54">return <expr pos:start="1935:20" pos:end="1935:53"><name pos:start="1935:20" pos:end="1935:53">DOT11DECRYPT_RET_SUCCESS_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1938:9" pos:end="1938:132">/* message 3: Authenticator-&gt;Supplicant (Sec=1, Mic=1, Ack=1, Inst=0/1, Key=1(pairwise), KeyRSC=???, Nonce=ANonce, MIC=1) */</comment>
        <if_stmt pos:start="1939:9" pos:end="1955:9"><if pos:start="1939:9" pos:end="1955:9">if <condition pos:start="1939:12" pos:end="1939:70">(<expr pos:start="1939:13" pos:end="1939:69"><name pos:start="1939:13" pos:end="1939:34"><name pos:start="1939:13" pos:end="1939:24">eapol_parsed</name><operator pos:start="1939:25" pos:end="1939:26">-&gt;</operator><name pos:start="1939:27" pos:end="1939:34">msg_type</name></name> <operator pos:start="1939:36" pos:end="1939:37">==</operator> <name pos:start="1939:39" pos:end="1939:69">DOT11DECRYPT_HS_MSG_TYPE_4WHS_3</name></expr>)</condition>
        <block pos:start="1940:9" pos:end="1955:9">{<block_content pos:start="1941:13" pos:end="1954:13">
            <expr_stmt pos:start="1941:13" pos:end="1941:50"><expr pos:start="1941:13" pos:end="1941:49"><call pos:start="1941:13" pos:end="1941:49"><name pos:start="1941:13" pos:end="1941:20">ws_debug</name><argument_list pos:start="1941:21" pos:end="1941:49">(<argument pos:start="1941:22" pos:end="1941:48"><expr pos:start="1941:22" pos:end="1941:48"><literal type="string" pos:start="1941:22" pos:end="1941:48">"4-way handshake message 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="1943:13" pos:end="1943:125">/* On reception of Message 3, the Supplicant silently discards the message if the Key Replay Counter field     */</comment>
            <comment type="block" pos:start="1944:13" pos:end="1944:125">/* value has already been used or if the ANonce value in Message 3 differs from the ANonce value in Message 1. */</comment>
            <comment type="block" pos:start="1945:13" pos:end="1945:125">/* -&gt; not checked, the Authenticator will send another message 3 (hopefully!)                                  */</comment>

            <comment type="block" pos:start="1947:13" pos:end="1947:42">/* TODO check page 88 (RNS) */</comment>

            <comment type="block" pos:start="1949:13" pos:end="1950:119">/* If using WPA2 PSK, message 3 will contain an RSN for the group key (GTK KDE).
               In order to properly support decrypting WPA2-PSK packets, we need to parse this to get the group key. */</comment>
            <if_stmt pos:start="1951:13" pos:end="1954:13"><if pos:start="1951:13" pos:end="1954:13">if <condition pos:start="1951:16" pos:end="1951:44">(<expr pos:start="1951:17" pos:end="1951:43"><name pos:start="1951:17" pos:end="1951:38"><name pos:start="1951:17" pos:end="1951:28">eapol_parsed</name><operator pos:start="1951:29" pos:end="1951:30">-&gt;</operator><name pos:start="1951:31" pos:end="1951:38">key_type</name></name> <operator pos:start="1951:40" pos:end="1951:41">==</operator> <literal type="number" pos:start="1951:43" pos:end="1951:43">2</literal></expr>)</condition>
            <block pos:start="1952:13" pos:end="1954:13">{<block_content pos:start="1953:17" pos:end="1953:103">
                <return pos:start="1953:17" pos:end="1953:103">return <expr pos:start="1953:24" pos:end="1953:102"><call pos:start="1953:24" pos:end="1953:102"><name pos:start="1953:24" pos:end="1953:51">Dot11DecryptCopyBroadcastKey</name><argument_list pos:start="1953:52" pos:end="1953:102">(<argument pos:start="1953:53" pos:end="1953:55"><expr pos:start="1953:53" pos:end="1953:55"><name pos:start="1953:53" pos:end="1953:55">ctx</name></expr></argument>, <argument pos:start="1953:58" pos:end="1953:74"><expr pos:start="1953:58" pos:end="1953:74"><name pos:start="1953:58" pos:end="1953:74"><name pos:start="1953:58" pos:end="1953:69">eapol_parsed</name><operator pos:start="1953:70" pos:end="1953:71">-&gt;</operator><name pos:start="1953:72" pos:end="1953:74">gtk</name></name></expr></argument>, <argument pos:start="1953:77" pos:end="1953:97"><expr pos:start="1953:77" pos:end="1953:97"><name pos:start="1953:77" pos:end="1953:97"><name pos:start="1953:77" pos:end="1953:88">eapol_parsed</name><operator pos:start="1953:89" pos:end="1953:90">-&gt;</operator><name pos:start="1953:91" pos:end="1953:97">gtk_len</name></name></expr></argument>, <argument pos:start="1953:100" pos:end="1953:101"><expr pos:start="1953:100" pos:end="1953:101"><name pos:start="1953:100" pos:end="1953:101">id</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1957:9" pos:end="1957:23">/* message 4 */</comment>
        <if_stmt pos:start="1958:9" pos:end="1970:9"><if pos:start="1958:9" pos:end="1970:9">if <condition pos:start="1958:12" pos:end="1958:70">(<expr pos:start="1958:13" pos:end="1958:69"><name pos:start="1958:13" pos:end="1958:34"><name pos:start="1958:13" pos:end="1958:24">eapol_parsed</name><operator pos:start="1958:25" pos:end="1958:26">-&gt;</operator><name pos:start="1958:27" pos:end="1958:34">msg_type</name></name> <operator pos:start="1958:36" pos:end="1958:37">==</operator> <name pos:start="1958:39" pos:end="1958:69">DOT11DECRYPT_HS_MSG_TYPE_4WHS_4</name></expr>)</condition>
        <block pos:start="1959:9" pos:end="1970:9">{<block_content pos:start="1968:13" pos:end="1969:54">
            <comment type="block" pos:start="1960:13" pos:end="1960:105">/* TODO "Note that when the 4-Way Handshake is first used Message 4 is sent in the clear." */</comment>

            <comment type="block" pos:start="1962:13" pos:end="1962:119">/* TODO check MIC and Replay Counter                                                                     */</comment>
            <comment type="block" pos:start="1963:13" pos:end="1963:119">/* On reception of Message 4, the Authenticator verifies that the Key Replay Counter field value is one  */</comment>
            <comment type="block" pos:start="1964:13" pos:end="1964:119">/* that it used on this 4-Way Handshake; if it is not, it silently discards the message.                 */</comment>
            <comment type="block" pos:start="1965:13" pos:end="1965:119">/* If the calculated MIC does not match the MIC that the Supplicant included in the EAPOL-Key frame, the */</comment>
            <comment type="block" pos:start="1966:13" pos:end="1966:119">/* Authenticator silently discards Message 4.                                                            */</comment>

            <expr_stmt pos:start="1968:13" pos:end="1968:50"><expr pos:start="1968:13" pos:end="1968:49"><call pos:start="1968:13" pos:end="1968:49"><name pos:start="1968:13" pos:end="1968:20">ws_debug</name><argument_list pos:start="1968:21" pos:end="1968:49">(<argument pos:start="1968:22" pos:end="1968:48"><expr pos:start="1968:22" pos:end="1968:48"><literal type="string" pos:start="1968:22" pos:end="1968:48">"4-way handshake message 4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1969:13" pos:end="1969:54">return <expr pos:start="1969:20" pos:end="1969:53"><name pos:start="1969:20" pos:end="1969:53">DOT11DECRYPT_RET_SUCCESS_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return pos:start="1971:9" pos:end="1971:51">return <expr pos:start="1971:16" pos:end="1971:50"><name pos:start="1971:16" pos:end="1971:50">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" pos:start="1974:5" pos:end="1974:76">/* Refer to IEEE 802.11-2016 Chapeter 13.8 FT authentication sequence */</comment>
    <function pos:start="1975:5" pos:end="2153:5"><type pos:start="1975:5" pos:end="1975:8"><name pos:start="1975:5" pos:end="1975:8">gint</name></type>
    <name pos:start="1976:5" pos:end="1976:34">Dot11DecryptScanFtAssocForKeys</name><parameter_list pos:start="1976:35" pos:end="1980:40">(
        <parameter pos:start="1977:9" pos:end="1977:39"><decl pos:start="1977:9" pos:end="1977:39"><type pos:start="1977:9" pos:end="1977:39"><specifier pos:start="1977:9" pos:end="1977:13">const</specifier> <name pos:start="1977:15" pos:end="1977:35">PDOT11DECRYPT_CONTEXT</name></type> <name pos:start="1977:37" pos:end="1977:39">ctx</name></decl></parameter>,
        <parameter pos:start="1978:9" pos:end="1978:53"><decl pos:start="1978:9" pos:end="1978:53"><type pos:start="1978:9" pos:end="1978:53"><specifier pos:start="1978:9" pos:end="1978:13">const</specifier> <name pos:start="1978:15" pos:end="1978:40">PDOT11DECRYPT_ASSOC_PARSED</name></type> <name pos:start="1978:42" pos:end="1978:53">assoc_parsed</name></decl></parameter>,
        <parameter pos:start="1979:9" pos:end="1979:29"><decl pos:start="1979:9" pos:end="1979:29"><type pos:start="1979:9" pos:end="1979:29"><name pos:start="1979:9" pos:end="1979:14">guint8</name> <modifier pos:start="1979:16" pos:end="1979:16">*</modifier></type><name pos:start="1979:17" pos:end="1979:29">decrypted_gtk</name></decl></parameter>, <parameter pos:start="1979:32" pos:end="1979:52"><decl pos:start="1979:32" pos:end="1979:52"><type pos:start="1979:32" pos:end="1979:52"><name pos:start="1979:32" pos:end="1979:37">size_t</name> <modifier pos:start="1979:39" pos:end="1979:39">*</modifier></type><name pos:start="1979:40" pos:end="1979:52">decrypted_len</name></decl></parameter>,
        <parameter pos:start="1980:9" pos:end="1980:39"><decl pos:start="1980:9" pos:end="1980:39"><type pos:start="1980:9" pos:end="1980:39"><name pos:start="1980:9" pos:end="1980:29">DOT11DECRYPT_KEY_ITEM</name> <modifier pos:start="1980:31" pos:end="1980:31">*</modifier></type><name pos:start="1980:32" pos:end="1980:39">used_key</name></decl></parameter>)</parameter_list>
    <block pos:start="1981:5" pos:end="2153:5">{<block_content pos:start="1982:9" pos:end="2152:50">
        <decl_stmt pos:start="1982:9" pos:end="1982:43"><decl pos:start="1982:9" pos:end="1982:42"><type pos:start="1982:9" pos:end="1982:39"><name pos:start="1982:9" pos:end="1982:39">DOT11DECRYPT_SEC_ASSOCIATION_ID</name></type> <name pos:start="1982:41" pos:end="1982:42">id</name></decl>;</decl_stmt>

        <expr_stmt pos:start="1984:9" pos:end="1984:43"><expr pos:start="1984:9" pos:end="1984:42"><call pos:start="1984:9" pos:end="1984:42"><name pos:start="1984:9" pos:end="1984:16">ws_debug</name><argument_list pos:start="1984:17" pos:end="1984:42">(<argument pos:start="1984:18" pos:end="1984:41"><expr pos:start="1984:18" pos:end="1984:41"><literal type="string" pos:start="1984:18" pos:end="1984:41">"(Re)Association packet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1986:9" pos:end="1990:9"><if pos:start="1986:9" pos:end="1990:9">if <condition pos:start="1986:12" pos:end="1986:34">(<expr pos:start="1986:13" pos:end="1986:33"><operator pos:start="1986:13" pos:end="1986:13">!</operator><name pos:start="1986:14" pos:end="1986:16">ctx</name> <operator pos:start="1986:18" pos:end="1986:19">||</operator> <operator pos:start="1986:21" pos:end="1986:21">!</operator><name pos:start="1986:22" pos:end="1986:33">assoc_parsed</name></expr>)</condition>
        <block pos:start="1987:9" pos:end="1990:9">{<block_content pos:start="1988:13" pos:end="1989:55">
            <expr_stmt pos:start="1988:13" pos:end="1988:51"><expr pos:start="1988:13" pos:end="1988:50"><call pos:start="1988:13" pos:end="1988:50"><name pos:start="1988:13" pos:end="1988:22">ws_warning</name><argument_list pos:start="1988:23" pos:end="1988:50">(<argument pos:start="1988:24" pos:end="1988:49"><expr pos:start="1988:24" pos:end="1988:49"><literal type="string" pos:start="1988:24" pos:end="1988:49">"Invalid input parameters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1989:13" pos:end="1989:55">return <expr pos:start="1989:20" pos:end="1989:54"><name pos:start="1989:20" pos:end="1989:54">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="1991:9" pos:end="1994:9"><if pos:start="1991:9" pos:end="1994:9">if <condition pos:start="1991:12" pos:end="1991:52">(<expr pos:start="1991:13" pos:end="1991:51"><operator pos:start="1991:13" pos:end="1991:13">!</operator><call pos:start="1991:14" pos:end="1991:51"><name pos:start="1991:14" pos:end="1991:32">Dot11DecryptIsFtAkm</name><argument_list pos:start="1991:33" pos:end="1991:51">(<argument pos:start="1991:34" pos:end="1991:50"><expr pos:start="1991:34" pos:end="1991:50"><name pos:start="1991:34" pos:end="1991:50"><name pos:start="1991:34" pos:end="1991:45">assoc_parsed</name><operator pos:start="1991:46" pos:end="1991:47">-&gt;</operator><name pos:start="1991:48" pos:end="1991:50">akm</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block pos:start="1992:9" pos:end="1994:9">{<block_content pos:start="1993:13" pos:end="1993:55">
            <return pos:start="1993:13" pos:end="1993:55">return <expr pos:start="1993:20" pos:end="1993:54"><name pos:start="1993:20" pos:end="1993:54">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="1995:9" pos:end="1999:9"><if pos:start="1995:9" pos:end="1999:9">if <condition pos:start="1995:12" pos:end="1995:67">(<expr pos:start="1995:13" pos:end="1995:66"><operator pos:start="1995:13" pos:end="1995:13">!</operator><name pos:start="1995:14" pos:end="1995:37"><name pos:start="1995:14" pos:end="1995:25">assoc_parsed</name><operator pos:start="1995:26" pos:end="1995:27">-&gt;</operator><name pos:start="1995:28" pos:end="1995:30">fte</name><operator pos:start="1995:31" pos:end="1995:31">.</operator><name pos:start="1995:32" pos:end="1995:37">anonce</name></name> <operator pos:start="1995:39" pos:end="1995:40">||</operator> <operator pos:start="1995:42" pos:end="1995:42">!</operator><name pos:start="1995:43" pos:end="1995:66"><name pos:start="1995:43" pos:end="1995:54">assoc_parsed</name><operator pos:start="1995:55" pos:end="1995:56">-&gt;</operator><name pos:start="1995:57" pos:end="1995:59">fte</name><operator pos:start="1995:60" pos:end="1995:60">.</operator><name pos:start="1995:61" pos:end="1995:66">snonce</name></name></expr>)</condition>
        <block pos:start="1996:9" pos:end="1999:9">{<block_content pos:start="1997:13" pos:end="1998:55">
            <expr_stmt pos:start="1997:13" pos:end="1997:49"><expr pos:start="1997:13" pos:end="1997:48"><call pos:start="1997:13" pos:end="1997:48"><name pos:start="1997:13" pos:end="1997:20">ws_debug</name><argument_list pos:start="1997:21" pos:end="1997:48">(<argument pos:start="1997:22" pos:end="1997:47"><expr pos:start="1997:22" pos:end="1997:47"><literal type="string" pos:start="1997:22" pos:end="1997:47">"ANonce or SNonce missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1998:13" pos:end="1998:55">return <expr pos:start="1998:20" pos:end="1998:54"><name pos:start="1998:20" pos:end="1998:54">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <switch pos:start="2001:9" pos:end="2014:9">switch <condition pos:start="2001:16" pos:end="2001:44">(<expr pos:start="2001:17" pos:end="2001:43"><name pos:start="2001:17" pos:end="2001:43"><name pos:start="2001:17" pos:end="2001:28">assoc_parsed</name><operator pos:start="2001:29" pos:end="2001:30">-&gt;</operator><name pos:start="2001:31" pos:end="2001:43">frame_subtype</name></name></expr>)</condition>
        <block pos:start="2002:9" pos:end="2014:9">{<block_content pos:start="2003:9" pos:end="2013:46">
        <case pos:start="2003:9" pos:end="2003:44">case <expr pos:start="2003:14" pos:end="2003:43"><name pos:start="2003:14" pos:end="2003:43">DOT11DECRYPT_SUBTYPE_ASSOC_REQ</name></expr>:</case>
        <case pos:start="2004:9" pos:end="2004:46">case <expr pos:start="2004:14" pos:end="2004:45"><name pos:start="2004:14" pos:end="2004:45">DOT11DECRYPT_SUBTYPE_REASSOC_REQ</name></expr>:</case>
            <expr_stmt pos:start="2005:13" pos:end="2005:67"><expr pos:start="2005:13" pos:end="2005:66"><call pos:start="2005:13" pos:end="2005:66"><name pos:start="2005:13" pos:end="2005:18">memcpy</name><argument_list pos:start="2005:19" pos:end="2005:66">(<argument pos:start="2005:20" pos:end="2005:25"><expr pos:start="2005:20" pos:end="2005:25"><name pos:start="2005:20" pos:end="2005:25"><name pos:start="2005:20" pos:end="2005:21">id</name><operator pos:start="2005:22" pos:end="2005:22">.</operator><name pos:start="2005:23" pos:end="2005:25">sta</name></name></expr></argument>, <argument pos:start="2005:28" pos:end="2005:43"><expr pos:start="2005:28" pos:end="2005:43"><name pos:start="2005:28" pos:end="2005:43"><name pos:start="2005:28" pos:end="2005:39">assoc_parsed</name><operator pos:start="2005:40" pos:end="2005:41">-&gt;</operator><name pos:start="2005:42" pos:end="2005:43">sa</name></name></expr></argument>, <argument pos:start="2005:46" pos:end="2005:65"><expr pos:start="2005:46" pos:end="2005:65"><name pos:start="2005:46" pos:end="2005:65">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="2006:13" pos:end="2006:18">break;</break>
        <case pos:start="2007:9" pos:end="2007:45">case <expr pos:start="2007:14" pos:end="2007:44"><name pos:start="2007:14" pos:end="2007:44">DOT11DECRYPT_SUBTYPE_ASSOC_RESP</name></expr>:</case>
        <case pos:start="2008:9" pos:end="2008:47">case <expr pos:start="2008:14" pos:end="2008:46"><name pos:start="2008:14" pos:end="2008:46">DOT11DECRYPT_SUBTYPE_REASSOC_RESP</name></expr>:</case>
            <expr_stmt pos:start="2009:13" pos:end="2009:67"><expr pos:start="2009:13" pos:end="2009:66"><call pos:start="2009:13" pos:end="2009:66"><name pos:start="2009:13" pos:end="2009:18">memcpy</name><argument_list pos:start="2009:19" pos:end="2009:66">(<argument pos:start="2009:20" pos:end="2009:25"><expr pos:start="2009:20" pos:end="2009:25"><name pos:start="2009:20" pos:end="2009:25"><name pos:start="2009:20" pos:end="2009:21">id</name><operator pos:start="2009:22" pos:end="2009:22">.</operator><name pos:start="2009:23" pos:end="2009:25">sta</name></name></expr></argument>, <argument pos:start="2009:28" pos:end="2009:43"><expr pos:start="2009:28" pos:end="2009:43"><name pos:start="2009:28" pos:end="2009:43"><name pos:start="2009:28" pos:end="2009:39">assoc_parsed</name><operator pos:start="2009:40" pos:end="2009:41">-&gt;</operator><name pos:start="2009:42" pos:end="2009:43">da</name></name></expr></argument>, <argument pos:start="2009:46" pos:end="2009:65"><expr pos:start="2009:46" pos:end="2009:65"><name pos:start="2009:46" pos:end="2009:65">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="2010:13" pos:end="2010:18">break;</break>
        <default pos:start="2011:9" pos:end="2011:16">default:</default>
            <expr_stmt pos:start="2012:13" pos:end="2012:48"><expr pos:start="2012:13" pos:end="2012:47"><call pos:start="2012:13" pos:end="2012:47"><name pos:start="2012:13" pos:end="2012:22">ws_warning</name><argument_list pos:start="2012:23" pos:end="2012:47">(<argument pos:start="2012:24" pos:end="2012:46"><expr pos:start="2012:24" pos:end="2012:46"><literal type="string" pos:start="2012:24" pos:end="2012:46">"Invalid frame subtype"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2013:13" pos:end="2013:46">return <expr pos:start="2013:20" pos:end="2013:45"><name pos:start="2013:20" pos:end="2013:45">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></switch>
        <expr_stmt pos:start="2015:9" pos:end="2015:68"><expr pos:start="2015:9" pos:end="2015:67"><call pos:start="2015:9" pos:end="2015:67"><name pos:start="2015:9" pos:end="2015:14">memcpy</name><argument_list pos:start="2015:15" pos:end="2015:67">(<argument pos:start="2015:16" pos:end="2015:23"><expr pos:start="2015:16" pos:end="2015:23"><name pos:start="2015:16" pos:end="2015:23"><name pos:start="2015:16" pos:end="2015:17">id</name><operator pos:start="2015:18" pos:end="2015:18">.</operator><name pos:start="2015:19" pos:end="2015:23">bssid</name></name></expr></argument>, <argument pos:start="2015:26" pos:end="2015:44"><expr pos:start="2015:26" pos:end="2015:44"><name pos:start="2015:26" pos:end="2015:44"><name pos:start="2015:26" pos:end="2015:37">assoc_parsed</name><operator pos:start="2015:38" pos:end="2015:39">-&gt;</operator><name pos:start="2015:40" pos:end="2015:44">bssid</name></name></expr></argument>, <argument pos:start="2015:47" pos:end="2015:66"><expr pos:start="2015:47" pos:end="2015:66"><name pos:start="2015:47" pos:end="2015:66">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt pos:start="2017:9" pos:end="2017:62"><decl pos:start="2017:9" pos:end="2017:38"><type pos:start="2017:9" pos:end="2017:31"><name pos:start="2017:9" pos:end="2017:29">DOT11DECRYPT_KEY_ITEM</name> <modifier pos:start="2017:31" pos:end="2017:31">*</modifier></type><name pos:start="2017:32" pos:end="2017:38">tmp_key</name></decl>, <decl pos:start="2017:41" pos:end="2017:52"><type ref="prev" pos:start="2017:9" pos:end="2017:31"><modifier pos:start="2017:41" pos:end="2017:41">*</modifier></type><name pos:start="2017:42" pos:end="2017:52">tmp_pkt_key</name></decl>, <decl pos:start="2017:55" pos:end="2017:61"><type ref="prev" pos:start="2017:9" pos:end="2017:31"/><name pos:start="2017:55" pos:end="2017:61">pkt_key</name></decl>;</decl_stmt>
        <decl_stmt pos:start="2018:9" pos:end="2018:41"><decl pos:start="2018:9" pos:end="2018:40"><type pos:start="2018:9" pos:end="2018:38"><name pos:start="2018:9" pos:end="2018:36">DOT11DECRYPT_SEC_ASSOCIATION</name> <modifier pos:start="2018:38" pos:end="2018:38">*</modifier></type><name pos:start="2018:39" pos:end="2018:40">sa</name></decl>;</decl_stmt>
        <decl_stmt pos:start="2019:9" pos:end="2019:25"><decl pos:start="2019:9" pos:end="2019:24"><type pos:start="2019:9" pos:end="2019:14"><name pos:start="2019:9" pos:end="2019:14">size_t</name></type> <name pos:start="2019:16" pos:end="2019:24">key_index</name></decl>;</decl_stmt>
        <decl_stmt pos:start="2020:9" pos:end="2020:22"><decl pos:start="2020:9" pos:end="2020:21"><type pos:start="2020:9" pos:end="2020:13"><name pos:start="2020:9" pos:end="2020:13">guint</name></type> <name pos:start="2020:15" pos:end="2020:17">ret</name> <init pos:start="2020:19" pos:end="2020:21">= <expr pos:start="2020:21" pos:end="2020:21"><literal type="number" pos:start="2020:21" pos:end="2020:21">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="2021:9" pos:end="2021:34"><decl pos:start="2021:9" pos:end="2021:33"><type pos:start="2021:9" pos:end="2021:16"><name pos:start="2021:9" pos:end="2021:16">gboolean</name></type> <name pos:start="2021:18" pos:end="2021:25">useCache</name> <init pos:start="2021:27" pos:end="2021:33">= <expr pos:start="2021:29" pos:end="2021:33"><name pos:start="2021:29" pos:end="2021:33">FALSE</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="2023:9" pos:end="2023:36"><expr pos:start="2023:9" pos:end="2023:35"><name pos:start="2023:9" pos:end="2023:10">sa</name> <operator pos:start="2023:12" pos:end="2023:12">=</operator> <call pos:start="2023:14" pos:end="2023:35"><name pos:start="2023:14" pos:end="2023:30">Dot11DecryptNewSa</name><argument_list pos:start="2023:31" pos:end="2023:35">(<argument pos:start="2023:32" pos:end="2023:34"><expr pos:start="2023:32" pos:end="2023:34"><operator pos:start="2023:32" pos:end="2023:32">&amp;</operator><name pos:start="2023:33" pos:end="2023:34">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2024:9" pos:end="2028:9"><if pos:start="2024:9" pos:end="2028:9">if <condition pos:start="2024:12" pos:end="2024:23">(<expr pos:start="2024:13" pos:end="2024:22"><name pos:start="2024:13" pos:end="2024:14">sa</name> <operator pos:start="2024:16" pos:end="2024:17">==</operator> <name pos:start="2024:19" pos:end="2024:22">NULL</name></expr>)</condition>
        <block pos:start="2025:9" pos:end="2028:9">{<block_content pos:start="2026:13" pos:end="2027:55">
            <expr_stmt pos:start="2026:13" pos:end="2026:45"><expr pos:start="2026:13" pos:end="2026:44"><call pos:start="2026:13" pos:end="2026:44"><name pos:start="2026:13" pos:end="2026:22">ws_warning</name><argument_list pos:start="2026:23" pos:end="2026:44">(<argument pos:start="2026:24" pos:end="2026:43"><expr pos:start="2026:24" pos:end="2026:43"><literal type="string" pos:start="2026:24" pos:end="2026:43">"Failed to alloc sa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2027:13" pos:end="2027:55">return <expr pos:start="2027:20" pos:end="2027:54"><name pos:start="2027:20" pos:end="2027:54">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2030:9" pos:end="2030:60"><expr pos:start="2030:9" pos:end="2030:59"><call pos:start="2030:9" pos:end="2030:59"><name pos:start="2030:9" pos:end="2030:14">memcpy</name><argument_list pos:start="2030:15" pos:end="2030:59">(<argument pos:start="2030:16" pos:end="2030:28"><expr pos:start="2030:16" pos:end="2030:28"><name pos:start="2030:16" pos:end="2030:28"><name pos:start="2030:16" pos:end="2030:17">sa</name><operator pos:start="2030:18" pos:end="2030:19">-&gt;</operator><name pos:start="2030:20" pos:end="2030:22">wpa</name><operator pos:start="2030:23" pos:end="2030:23">.</operator><name pos:start="2030:24" pos:end="2030:28">nonce</name></name></expr></argument>, <argument pos:start="2030:31" pos:end="2030:54"><expr pos:start="2030:31" pos:end="2030:54"><name pos:start="2030:31" pos:end="2030:54"><name pos:start="2030:31" pos:end="2030:42">assoc_parsed</name><operator pos:start="2030:43" pos:end="2030:44">-&gt;</operator><name pos:start="2030:45" pos:end="2030:47">fte</name><operator pos:start="2030:48" pos:end="2030:48">.</operator><name pos:start="2030:49" pos:end="2030:54">anonce</name></name></expr></argument>, <argument pos:start="2030:57" pos:end="2030:58"><expr pos:start="2030:57" pos:end="2030:58"><literal type="number" pos:start="2030:57" pos:end="2030:58">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2032:9" pos:end="2035:9"><if pos:start="2032:9" pos:end="2035:9">if <condition pos:start="2032:12" pos:end="2032:28">(<expr pos:start="2032:13" pos:end="2032:27"><name pos:start="2032:13" pos:end="2032:19"><name pos:start="2032:13" pos:end="2032:14">sa</name><operator pos:start="2032:15" pos:end="2032:16">-&gt;</operator><name pos:start="2032:17" pos:end="2032:19">key</name></name> <operator pos:start="2032:21" pos:end="2032:22">!=</operator> <name pos:start="2032:24" pos:end="2032:27">NULL</name></expr>)</condition>
        <block pos:start="2033:9" pos:end="2035:9">{<block_content pos:start="2034:13" pos:end="2034:28">
            <expr_stmt pos:start="2034:13" pos:end="2034:28"><expr pos:start="2034:13" pos:end="2034:27"><name pos:start="2034:13" pos:end="2034:20">useCache</name> <operator pos:start="2034:22" pos:end="2034:22">=</operator> <name pos:start="2034:24" pos:end="2034:27">TRUE</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt pos:start="2037:9" pos:end="2037:49"><decl pos:start="2037:9" pos:end="2037:48"><type pos:start="2037:9" pos:end="2037:14"><name pos:start="2037:9" pos:end="2037:14">guint8</name></type> <name pos:start="2037:16" pos:end="2037:48"><name pos:start="2037:16" pos:end="2037:18">ptk</name><index pos:start="2037:19" pos:end="2037:48">[<expr pos:start="2037:20" pos:end="2037:47"><name pos:start="2037:20" pos:end="2037:47">DOT11DECRYPT_WPA_PTK_MAX_LEN</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="2038:9" pos:end="2038:23"><decl pos:start="2038:9" pos:end="2038:22"><type pos:start="2038:9" pos:end="2038:14"><name pos:start="2038:9" pos:end="2038:14">size_t</name></type> <name pos:start="2038:16" pos:end="2038:22">ptk_len</name></decl>;</decl_stmt>

        <comment type="block" pos:start="2040:9" pos:end="2040:40">/* now you can derive the PTK */</comment>
        <for pos:start="2041:9" pos:end="2113:9">for <control pos:start="2041:13" pos:end="2041:78">(<init pos:start="2041:14" pos:end="2041:27"><expr pos:start="2041:14" pos:end="2041:26"><name pos:start="2041:14" pos:end="2041:22">key_index</name> <operator pos:start="2041:24" pos:end="2041:24">=</operator> <literal type="number" pos:start="2041:26" pos:end="2041:26">0</literal></expr>;</init> <condition pos:start="2041:29" pos:end="2041:65"><expr pos:start="2041:29" pos:end="2041:64"><name pos:start="2041:29" pos:end="2041:37">key_index</name> <operator pos:start="2041:39" pos:end="2041:39">&lt;</operator> <name pos:start="2041:41" pos:end="2041:52"><name pos:start="2041:41" pos:end="2041:43">ctx</name><operator pos:start="2041:44" pos:end="2041:45">-&gt;</operator><name pos:start="2041:46" pos:end="2041:52">keys_nr</name></name> <operator pos:start="2041:54" pos:end="2041:55">||</operator> <name pos:start="2041:57" pos:end="2041:64">useCache</name></expr>;</condition> <incr pos:start="2041:67" pos:end="2041:77"><expr pos:start="2041:67" pos:end="2041:77"><name pos:start="2041:67" pos:end="2041:75">key_index</name><operator pos:start="2041:76" pos:end="2041:77">++</operator></expr></incr>)</control>
        <block pos:start="2042:9" pos:end="2113:9">{<block_content pos:start="2044:13" pos:end="2112:13">
            <comment type="block" pos:start="2043:13" pos:end="2043:53">/* use the cached one, or try all keys */</comment>
            <if_stmt pos:start="2044:13" pos:end="2055:13"><if pos:start="2044:13" pos:end="2050:13">if <condition pos:start="2044:16" pos:end="2044:71">(<expr pos:start="2044:17" pos:end="2044:70"><name pos:start="2044:17" pos:end="2044:24">useCache</name> <operator pos:start="2044:26" pos:end="2044:27">&amp;&amp;</operator> <call pos:start="2044:29" pos:end="2044:70"><name pos:start="2044:29" pos:end="2044:52">Dot11DecryptIsWpaKeyType</name><argument_list pos:start="2044:53" pos:end="2044:70">(<argument pos:start="2044:54" pos:end="2044:69"><expr pos:start="2044:54" pos:end="2044:69"><name pos:start="2044:54" pos:end="2044:69"><name pos:start="2044:54" pos:end="2044:55">sa</name><operator pos:start="2044:56" pos:end="2044:57">-&gt;</operator><name pos:start="2044:58" pos:end="2044:60">key</name><operator pos:start="2044:61" pos:end="2044:62">-&gt;</operator><name pos:start="2044:63" pos:end="2044:69">KeyType</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block pos:start="2045:13" pos:end="2050:13">{<block_content pos:start="2046:17" pos:end="2049:28">
                <expr_stmt pos:start="2046:17" pos:end="2046:50"><expr pos:start="2046:17" pos:end="2046:49"><call pos:start="2046:17" pos:end="2046:49"><name pos:start="2046:17" pos:end="2046:24">ws_debug</name><argument_list pos:start="2046:25" pos:end="2046:49">(<argument pos:start="2046:26" pos:end="2046:48"><expr pos:start="2046:26" pos:end="2046:48"><literal type="string" pos:start="2046:26" pos:end="2046:48">"Try cached WPA key..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2047:17" pos:end="2047:34"><expr pos:start="2047:17" pos:end="2047:33"><name pos:start="2047:17" pos:end="2047:23">tmp_key</name> <operator pos:start="2047:25" pos:end="2047:25">=</operator> <name pos:start="2047:27" pos:end="2047:33"><name pos:start="2047:27" pos:end="2047:28">sa</name><operator pos:start="2047:29" pos:end="2047:30">-&gt;</operator><name pos:start="2047:31" pos:end="2047:33">key</name></name></expr>;</expr_stmt>
                <comment type="block" pos:start="2048:17" pos:end="2048:74">/* Step back loop counter as cached key is used instead */</comment>
                <expr_stmt pos:start="2049:17" pos:end="2049:28"><expr pos:start="2049:17" pos:end="2049:27"><name pos:start="2049:17" pos:end="2049:25">key_index</name><operator pos:start="2049:26" pos:end="2049:27">--</operator></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else pos:start="2051:13" pos:end="2055:13">else
            <block pos:start="2052:13" pos:end="2055:13">{<block_content pos:start="2053:17" pos:end="2054:48">
                <expr_stmt pos:start="2053:17" pos:end="2053:43"><expr pos:start="2053:17" pos:end="2053:42"><call pos:start="2053:17" pos:end="2053:42"><name pos:start="2053:17" pos:end="2053:24">ws_debug</name><argument_list pos:start="2053:25" pos:end="2053:42">(<argument pos:start="2053:26" pos:end="2053:41"><expr pos:start="2053:26" pos:end="2053:41"><literal type="string" pos:start="2053:26" pos:end="2053:41">"Try WPA key..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2054:17" pos:end="2054:48"><expr pos:start="2054:17" pos:end="2054:47"><name pos:start="2054:17" pos:end="2054:23">tmp_key</name> <operator pos:start="2054:25" pos:end="2054:25">=</operator> <operator pos:start="2054:27" pos:end="2054:27">&amp;</operator><name pos:start="2054:28" pos:end="2054:47"><name pos:start="2054:28" pos:end="2054:30">ctx</name><operator pos:start="2054:31" pos:end="2054:32">-&gt;</operator><name pos:start="2054:33" pos:end="2054:36">keys</name><index pos:start="2054:37" pos:end="2054:47">[<expr pos:start="2054:38" pos:end="2054:46"><name pos:start="2054:38" pos:end="2054:46">key_index</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt pos:start="2056:13" pos:end="2056:29"><expr pos:start="2056:13" pos:end="2056:28"><name pos:start="2056:13" pos:end="2056:20">useCache</name> <operator pos:start="2056:22" pos:end="2056:22">=</operator> <name pos:start="2056:24" pos:end="2056:28">FALSE</name></expr>;</expr_stmt>

            <comment type="block" pos:start="2058:13" pos:end="2058:38">/* Try only WPA keys... */</comment>
            <if_stmt pos:start="2059:13" pos:end="2062:13"><if pos:start="2059:13" pos:end="2062:13">if <condition pos:start="2059:16" pos:end="2059:60">(<expr pos:start="2059:17" pos:end="2059:59"><operator pos:start="2059:17" pos:end="2059:17">!</operator><call pos:start="2059:18" pos:end="2059:59"><name pos:start="2059:18" pos:end="2059:41">Dot11DecryptIsWpaKeyType</name><argument_list pos:start="2059:42" pos:end="2059:59">(<argument pos:start="2059:43" pos:end="2059:58"><expr pos:start="2059:43" pos:end="2059:58"><name pos:start="2059:43" pos:end="2059:58"><name pos:start="2059:43" pos:end="2059:49">tmp_key</name><operator pos:start="2059:50" pos:end="2059:51">-&gt;</operator><name pos:start="2059:52" pos:end="2059:58">KeyType</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block pos:start="2060:13" pos:end="2062:13">{<block_content pos:start="2061:17" pos:end="2061:25">
                <continue pos:start="2061:17" pos:end="2061:25">continue;</continue>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="2063:13" pos:end="2077:13"><if pos:start="2063:13" pos:end="2073:13">if <condition pos:start="2063:16" pos:end="2064:60">(<expr pos:start="2063:17" pos:end="2064:59"><name pos:start="2063:17" pos:end="2063:32"><name pos:start="2063:17" pos:end="2063:23">tmp_key</name><operator pos:start="2063:24" pos:end="2063:25">-&gt;</operator><name pos:start="2063:26" pos:end="2063:32">KeyType</name></name> <operator pos:start="2063:34" pos:end="2063:35">==</operator> <name pos:start="2063:37" pos:end="2063:65">DOT11DECRYPT_KEY_TYPE_WPA_PWD</name> <operator pos:start="2063:67" pos:end="2063:68">&amp;&amp;</operator>
                <call pos:start="2064:17" pos:end="2064:59"><name pos:start="2064:17" pos:end="2064:45">Dot11DecryptIsPwdWildcardSsid</name><argument_list pos:start="2064:46" pos:end="2064:59">(<argument pos:start="2064:47" pos:end="2064:49"><expr pos:start="2064:47" pos:end="2064:49"><name pos:start="2064:47" pos:end="2064:49">ctx</name></expr></argument>, <argument pos:start="2064:52" pos:end="2064:58"><expr pos:start="2064:52" pos:end="2064:58"><name pos:start="2064:52" pos:end="2064:58">tmp_key</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block pos:start="2065:13" pos:end="2073:13">{<block_content pos:start="2067:17" pos:end="2072:39">
                <comment type="block" pos:start="2066:17" pos:end="2066:78">/* We have a "wildcard" SSID.  Use the one from the packet. */</comment>
                <expr_stmt pos:start="2067:17" pos:end="2067:59"><expr pos:start="2067:17" pos:end="2067:58"><call pos:start="2067:17" pos:end="2067:58"><name pos:start="2067:17" pos:end="2067:22">memcpy</name><argument_list pos:start="2067:23" pos:end="2067:58">(<argument pos:start="2067:24" pos:end="2067:31"><expr pos:start="2067:24" pos:end="2067:31"><operator pos:start="2067:24" pos:end="2067:24">&amp;</operator><name pos:start="2067:25" pos:end="2067:31">pkt_key</name></expr></argument>, <argument pos:start="2067:34" pos:end="2067:40"><expr pos:start="2067:34" pos:end="2067:40"><name pos:start="2067:34" pos:end="2067:40">tmp_key</name></expr></argument>, <argument pos:start="2067:43" pos:end="2067:57"><expr pos:start="2067:43" pos:end="2067:57"><sizeof pos:start="2067:43" pos:end="2067:57">sizeof<argument_list pos:start="2067:49" pos:end="2067:57">(<argument pos:start="2067:50" pos:end="2067:56"><expr pos:start="2067:50" pos:end="2067:56"><name pos:start="2067:50" pos:end="2067:56">pkt_key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2068:17" pos:end="2068:80"><expr pos:start="2068:17" pos:end="2068:79"><call pos:start="2068:17" pos:end="2068:79"><name pos:start="2068:17" pos:end="2068:22">memcpy</name><argument_list pos:start="2068:23" pos:end="2068:79">(<argument pos:start="2068:24" pos:end="2068:44"><expr pos:start="2068:24" pos:end="2068:44"><operator pos:start="2068:24" pos:end="2068:24">&amp;</operator><name pos:start="2068:25" pos:end="2068:44"><name pos:start="2068:25" pos:end="2068:31">pkt_key</name><operator pos:start="2068:32" pos:end="2068:32">.</operator><name pos:start="2068:33" pos:end="2068:39">UserPwd</name><operator pos:start="2068:40" pos:end="2068:40">.</operator><name pos:start="2068:41" pos:end="2068:44">Ssid</name></name></expr></argument>, <argument pos:start="2068:47" pos:end="2068:59"><expr pos:start="2068:47" pos:end="2068:59"><name pos:start="2068:47" pos:end="2068:59"><name pos:start="2068:47" pos:end="2068:49">ctx</name><operator pos:start="2068:50" pos:end="2068:51">-&gt;</operator><name pos:start="2068:52" pos:end="2068:59">pkt_ssid</name></name></expr></argument>, <argument pos:start="2068:62" pos:end="2068:78"><expr pos:start="2068:62" pos:end="2068:78"><name pos:start="2068:62" pos:end="2068:78"><name pos:start="2068:62" pos:end="2068:64">ctx</name><operator pos:start="2068:65" pos:end="2068:66">-&gt;</operator><name pos:start="2068:67" pos:end="2068:78">pkt_ssid_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2069:17" pos:end="2069:60"><expr pos:start="2069:17" pos:end="2069:59"><name pos:start="2069:17" pos:end="2069:39"><name pos:start="2069:17" pos:end="2069:23">pkt_key</name><operator pos:start="2069:24" pos:end="2069:24">.</operator><name pos:start="2069:25" pos:end="2069:31">UserPwd</name><operator pos:start="2069:32" pos:end="2069:32">.</operator><name pos:start="2069:33" pos:end="2069:39">SsidLen</name></name> <operator pos:start="2069:41" pos:end="2069:41">=</operator> <name pos:start="2069:43" pos:end="2069:59"><name pos:start="2069:43" pos:end="2069:45">ctx</name><operator pos:start="2069:46" pos:end="2069:47">-&gt;</operator><name pos:start="2069:48" pos:end="2069:59">pkt_ssid_len</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="2070:17" pos:end="2071:90"><expr pos:start="2070:17" pos:end="2071:89"><call pos:start="2070:17" pos:end="2071:89"><name pos:start="2070:17" pos:end="2070:39">Dot11DecryptRsnaPwd2Psk</name><argument_list pos:start="2070:40" pos:end="2071:89">(<argument pos:start="2070:41" pos:end="2070:66"><expr pos:start="2070:41" pos:end="2070:66"><name pos:start="2070:41" pos:end="2070:66"><name pos:start="2070:41" pos:end="2070:47">pkt_key</name><operator pos:start="2070:48" pos:end="2070:48">.</operator><name pos:start="2070:49" pos:end="2070:55">UserPwd</name><operator pos:start="2070:56" pos:end="2070:56">.</operator><name pos:start="2070:57" pos:end="2070:66">Passphrase</name></name></expr></argument>, <argument pos:start="2070:69" pos:end="2070:88"><expr pos:start="2070:69" pos:end="2070:88"><name pos:start="2070:69" pos:end="2070:88"><name pos:start="2070:69" pos:end="2070:75">pkt_key</name><operator pos:start="2070:76" pos:end="2070:76">.</operator><name pos:start="2070:77" pos:end="2070:83">UserPwd</name><operator pos:start="2070:84" pos:end="2070:84">.</operator><name pos:start="2070:85" pos:end="2070:88">Ssid</name></name></expr></argument>,
                                        <argument pos:start="2071:41" pos:end="2071:63"><expr pos:start="2071:41" pos:end="2071:63"><name pos:start="2071:41" pos:end="2071:63"><name pos:start="2071:41" pos:end="2071:47">pkt_key</name><operator pos:start="2071:48" pos:end="2071:48">.</operator><name pos:start="2071:49" pos:end="2071:55">UserPwd</name><operator pos:start="2071:56" pos:end="2071:56">.</operator><name pos:start="2071:57" pos:end="2071:63">SsidLen</name></name></expr></argument>, <argument pos:start="2071:66" pos:end="2071:88"><expr pos:start="2071:66" pos:end="2071:88"><name pos:start="2071:66" pos:end="2071:88"><name pos:start="2071:66" pos:end="2071:72">pkt_key</name><operator pos:start="2071:73" pos:end="2071:73">.</operator><name pos:start="2071:74" pos:end="2071:80">KeyData</name><operator pos:start="2071:81" pos:end="2071:81">.</operator><name pos:start="2071:82" pos:end="2071:84">Wpa</name><operator pos:start="2071:85" pos:end="2071:85">.</operator><name pos:start="2071:86" pos:end="2071:88">Psk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2072:17" pos:end="2072:39"><expr pos:start="2072:17" pos:end="2072:38"><name pos:start="2072:17" pos:end="2072:27">tmp_pkt_key</name> <operator pos:start="2072:29" pos:end="2072:29">=</operator> <operator pos:start="2072:31" pos:end="2072:31">&amp;</operator><name pos:start="2072:32" pos:end="2072:38">pkt_key</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else pos:start="2074:13" pos:end="2077:13">else
            <block pos:start="2075:13" pos:end="2077:13">{<block_content pos:start="2076:17" pos:end="2076:38">
                <expr_stmt pos:start="2076:17" pos:end="2076:38"><expr pos:start="2076:17" pos:end="2076:37"><name pos:start="2076:17" pos:end="2076:27">tmp_pkt_key</name> <operator pos:start="2076:29" pos:end="2076:29">=</operator> <name pos:start="2076:31" pos:end="2076:37">tmp_key</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="2079:13" pos:end="2085:13"><if pos:start="2079:13" pos:end="2085:13">if <condition pos:start="2079:16" pos:end="2079:66">(<expr pos:start="2079:17" pos:end="2079:65"><name pos:start="2079:17" pos:end="2079:36"><name pos:start="2079:17" pos:end="2079:27">tmp_pkt_key</name><operator pos:start="2079:28" pos:end="2079:29">-&gt;</operator><name pos:start="2079:30" pos:end="2079:36">KeyType</name></name> <operator pos:start="2079:38" pos:end="2079:39">==</operator> <name pos:start="2079:41" pos:end="2079:65">DOT11DECRYPT_KEY_TYPE_MSK</name></expr>)</condition>
            <block pos:start="2080:13" pos:end="2085:13">{<block_content pos:start="2081:17" pos:end="2084:79">
                <expr_stmt pos:start="2081:17" pos:end="2084:79"><expr pos:start="2081:17" pos:end="2084:78"><call pos:start="2081:17" pos:end="2084:78"><name pos:start="2081:17" pos:end="2081:44">Dot11DecryptDerivePmkFromMsk</name><argument_list pos:start="2081:45" pos:end="2084:78">(<argument pos:start="2081:46" pos:end="2081:65"><expr pos:start="2081:46" pos:end="2081:65"><name pos:start="2081:46" pos:end="2081:65"><name pos:start="2081:46" pos:end="2081:56">tmp_pkt_key</name><operator pos:start="2081:57" pos:end="2081:58">-&gt;</operator><name pos:start="2081:59" pos:end="2081:61">Msk</name><operator pos:start="2081:62" pos:end="2081:62">.</operator><name pos:start="2081:63" pos:end="2081:65">Msk</name></name></expr></argument>, <argument pos:start="2081:68" pos:end="2081:87"><expr pos:start="2081:68" pos:end="2081:87"><name pos:start="2081:68" pos:end="2081:87"><name pos:start="2081:68" pos:end="2081:78">tmp_pkt_key</name><operator pos:start="2081:79" pos:end="2081:80">-&gt;</operator><name pos:start="2081:81" pos:end="2081:83">Msk</name><operator pos:start="2081:84" pos:end="2081:84">.</operator><name pos:start="2081:85" pos:end="2081:87">Len</name></name></expr></argument>,
                                             <argument pos:start="2082:46" pos:end="2082:62"><expr pos:start="2082:46" pos:end="2082:62"><name pos:start="2082:46" pos:end="2082:62"><name pos:start="2082:46" pos:end="2082:57">assoc_parsed</name><operator pos:start="2082:58" pos:end="2082:59">-&gt;</operator><name pos:start="2082:60" pos:end="2082:62">akm</name></name></expr></argument>,
                                             <argument pos:start="2083:46" pos:end="2083:73"><expr pos:start="2083:46" pos:end="2083:73"><name pos:start="2083:46" pos:end="2083:73"><name pos:start="2083:46" pos:end="2083:56">tmp_pkt_key</name><operator pos:start="2083:57" pos:end="2083:58">-&gt;</operator><name pos:start="2083:59" pos:end="2083:65">KeyData</name><operator pos:start="2083:66" pos:end="2083:66">.</operator><name pos:start="2083:67" pos:end="2083:69">Wpa</name><operator pos:start="2083:70" pos:end="2083:70">.</operator><name pos:start="2083:71" pos:end="2083:73">Psk</name></name></expr></argument>,
                                             <argument pos:start="2084:46" pos:end="2084:77"><expr pos:start="2084:46" pos:end="2084:77"><operator pos:start="2084:46" pos:end="2084:46">&amp;</operator><name pos:start="2084:47" pos:end="2084:77"><name pos:start="2084:47" pos:end="2084:57">tmp_pkt_key</name><operator pos:start="2084:58" pos:end="2084:59">-&gt;</operator><name pos:start="2084:60" pos:end="2084:66">KeyData</name><operator pos:start="2084:67" pos:end="2084:67">.</operator><name pos:start="2084:68" pos:end="2084:70">Wpa</name><operator pos:start="2084:71" pos:end="2084:71">.</operator><name pos:start="2084:72" pos:end="2084:77">PskLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="2087:13" pos:end="2095:57"><expr pos:start="2087:13" pos:end="2095:56"><name pos:start="2087:13" pos:end="2087:15">ret</name> <operator pos:start="2087:17" pos:end="2087:17">=</operator> <call pos:start="2087:19" pos:end="2095:56"><name pos:start="2087:19" pos:end="2087:41">Dot11DecryptFtDerivePtk</name><argument_list pos:start="2087:42" pos:end="2095:56">(<argument pos:start="2087:43" pos:end="2087:45"><expr pos:start="2087:43" pos:end="2087:45"><name pos:start="2087:43" pos:end="2087:45">ctx</name></expr></argument>, <argument pos:start="2087:48" pos:end="2087:49"><expr pos:start="2087:48" pos:end="2087:49"><name pos:start="2087:48" pos:end="2087:49">sa</name></expr></argument>, <argument pos:start="2087:52" pos:end="2087:62"><expr pos:start="2087:52" pos:end="2087:62"><name pos:start="2087:52" pos:end="2087:62">tmp_pkt_key</name></expr></argument>,
                                          <argument pos:start="2088:43" pos:end="2088:60"><expr pos:start="2088:43" pos:end="2088:60"><name pos:start="2088:43" pos:end="2088:60"><name pos:start="2088:43" pos:end="2088:54">assoc_parsed</name><operator pos:start="2088:55" pos:end="2088:56">-&gt;</operator><name pos:start="2088:57" pos:end="2088:60">mdid</name></name></expr></argument>,
                                          <argument pos:start="2089:43" pos:end="2089:66"><expr pos:start="2089:43" pos:end="2089:66"><name pos:start="2089:43" pos:end="2089:66"><name pos:start="2089:43" pos:end="2089:54">assoc_parsed</name><operator pos:start="2089:55" pos:end="2089:56">-&gt;</operator><name pos:start="2089:57" pos:end="2089:59">fte</name><operator pos:start="2089:60" pos:end="2089:60">.</operator><name pos:start="2089:61" pos:end="2089:66">snonce</name></name></expr></argument>,
                                          <argument pos:start="2090:43" pos:end="2090:67"><expr pos:start="2090:43" pos:end="2090:67"><name pos:start="2090:43" pos:end="2090:67"><name pos:start="2090:43" pos:end="2090:54">assoc_parsed</name><operator pos:start="2090:55" pos:end="2090:56">-&gt;</operator><name pos:start="2090:57" pos:end="2090:59">fte</name><operator pos:start="2090:60" pos:end="2090:60">.</operator><name pos:start="2090:61" pos:end="2090:67">r0kh_id</name></name></expr></argument>,
                                          <argument pos:start="2091:43" pos:end="2091:71"><expr pos:start="2091:43" pos:end="2091:71"><name pos:start="2091:43" pos:end="2091:71"><name pos:start="2091:43" pos:end="2091:54">assoc_parsed</name><operator pos:start="2091:55" pos:end="2091:56">-&gt;</operator><name pos:start="2091:57" pos:end="2091:59">fte</name><operator pos:start="2091:60" pos:end="2091:60">.</operator><name pos:start="2091:61" pos:end="2091:71">r0kh_id_len</name></name></expr></argument>,
                                          <argument pos:start="2092:43" pos:end="2092:67"><expr pos:start="2092:43" pos:end="2092:67"><name pos:start="2092:43" pos:end="2092:67"><name pos:start="2092:43" pos:end="2092:54">assoc_parsed</name><operator pos:start="2092:55" pos:end="2092:56">-&gt;</operator><name pos:start="2092:57" pos:end="2092:59">fte</name><operator pos:start="2092:60" pos:end="2092:60">.</operator><name pos:start="2092:61" pos:end="2092:67">r1kh_id</name></name></expr></argument>,
                                          <argument pos:start="2093:43" pos:end="2093:71"><expr pos:start="2093:43" pos:end="2093:71"><name pos:start="2093:43" pos:end="2093:71"><name pos:start="2093:43" pos:end="2093:54">assoc_parsed</name><operator pos:start="2093:55" pos:end="2093:56">-&gt;</operator><name pos:start="2093:57" pos:end="2093:59">fte</name><operator pos:start="2093:60" pos:end="2093:60">.</operator><name pos:start="2093:61" pos:end="2093:71">r1kh_id_len</name></name></expr></argument>,
                                          <argument pos:start="2094:43" pos:end="2094:59"><expr pos:start="2094:43" pos:end="2094:59"><name pos:start="2094:43" pos:end="2094:59"><name pos:start="2094:43" pos:end="2094:54">assoc_parsed</name><operator pos:start="2094:55" pos:end="2094:56">-&gt;</operator><name pos:start="2094:57" pos:end="2094:59">akm</name></name></expr></argument>, <argument pos:start="2094:62" pos:end="2094:81"><expr pos:start="2094:62" pos:end="2094:81"><name pos:start="2094:62" pos:end="2094:81"><name pos:start="2094:62" pos:end="2094:73">assoc_parsed</name><operator pos:start="2094:74" pos:end="2094:75">-&gt;</operator><name pos:start="2094:76" pos:end="2094:81">cipher</name></name></expr></argument>,
                                          <argument pos:start="2095:43" pos:end="2095:45"><expr pos:start="2095:43" pos:end="2095:45"><name pos:start="2095:43" pos:end="2095:45">ptk</name></expr></argument>, <argument pos:start="2095:48" pos:end="2095:55"><expr pos:start="2095:48" pos:end="2095:55"><operator pos:start="2095:48" pos:end="2095:48">&amp;</operator><name pos:start="2095:49" pos:end="2095:55">ptk_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2096:13" pos:end="2099:13"><if pos:start="2096:13" pos:end="2099:13">if <condition pos:start="2096:16" pos:end="2096:48">(<expr pos:start="2096:17" pos:end="2096:47"><name pos:start="2096:17" pos:end="2096:19">ret</name> <operator pos:start="2096:21" pos:end="2096:22">!=</operator> <name pos:start="2096:24" pos:end="2096:47">DOT11DECRYPT_RET_SUCCESS</name></expr>)</condition>
            <block pos:start="2097:13" pos:end="2099:13">{<block_content pos:start="2098:17" pos:end="2098:25">
                <continue pos:start="2098:17" pos:end="2098:25">continue;</continue>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="2100:13" pos:end="2102:40"><expr pos:start="2100:13" pos:end="2102:39"><call pos:start="2100:13" pos:end="2102:39"><name pos:start="2100:13" pos:end="2100:22">DEBUG_DUMP</name><argument_list pos:start="2100:23" pos:end="2102:39">(<argument pos:start="2100:24" pos:end="2100:27"><expr pos:start="2100:24" pos:end="2100:27"><literal type="string" pos:start="2100:24" pos:end="2100:27">"TK"</literal></expr></argument>, <argument pos:start="2100:30" pos:end="2100:142"><expr pos:start="2100:30" pos:end="2100:142"><operator pos:start="2100:30" pos:end="2100:30">(</operator><name pos:start="2100:31" pos:end="2100:33">ptk</name> <operator pos:start="2100:35" pos:end="2100:35">+</operator> <operator pos:start="2100:37" pos:end="2100:37">(</operator><operator pos:start="2100:38" pos:end="2100:38">(</operator><operator pos:start="2100:39" pos:end="2100:39">(</operator><operator pos:start="2100:40" pos:end="2100:40">(</operator><operator pos:start="2100:41" pos:end="2100:41">(</operator><literal type="number" pos:start="2100:42" pos:end="2100:42">0</literal><operator pos:start="2100:43" pos:end="2100:43">)</operator> <operator pos:start="2100:45" pos:end="2100:45">+</operator> <call pos:start="2100:47" pos:end="2100:86"><name pos:start="2100:47" pos:end="2100:67">Dot11DecryptGetKckLen</name><argument_list pos:start="2100:68" pos:end="2100:86">(<argument pos:start="2100:69" pos:end="2100:85"><expr pos:start="2100:69" pos:end="2100:85"><name pos:start="2100:69" pos:end="2100:85"><name pos:start="2100:69" pos:end="2100:80">assoc_parsed</name><operator pos:start="2100:81" pos:end="2100:82">-&gt;</operator><name pos:start="2100:83" pos:end="2100:85">akm</name></name></expr></argument>)</argument_list></call> <operator pos:start="2100:88" pos:end="2100:88">/</operator> <literal type="number" pos:start="2100:90" pos:end="2100:90">8</literal><operator pos:start="2100:91" pos:end="2100:91">)</operator><operator pos:start="2100:92" pos:end="2100:92">)</operator> <operator pos:start="2100:94" pos:end="2100:94">+</operator> <call pos:start="2100:96" pos:end="2100:135"><name pos:start="2100:96" pos:end="2100:116">Dot11DecryptGetKekLen</name><argument_list pos:start="2100:117" pos:end="2100:135">(<argument pos:start="2100:118" pos:end="2100:134"><expr pos:start="2100:118" pos:end="2100:134"><name pos:start="2100:118" pos:end="2100:134"><name pos:start="2100:118" pos:end="2100:129">assoc_parsed</name><operator pos:start="2100:130" pos:end="2100:131">-&gt;</operator><name pos:start="2100:132" pos:end="2100:134">akm</name></name></expr></argument>)</argument_list></call> <operator pos:start="2100:137" pos:end="2100:137">/</operator> <literal type="number" pos:start="2100:139" pos:end="2100:139">8</literal><operator pos:start="2100:140" pos:end="2100:140">)</operator><operator pos:start="2100:141" pos:end="2100:141">)</operator><operator pos:start="2100:142" pos:end="2100:142">)</operator></expr></argument>,
                       <argument pos:start="2101:24" pos:end="2101:69"><expr pos:start="2101:24" pos:end="2101:69"><call pos:start="2101:24" pos:end="2101:65"><name pos:start="2101:24" pos:end="2101:43">Dot11DecryptGetTkLen</name><argument_list pos:start="2101:44" pos:end="2101:65">(<argument pos:start="2101:45" pos:end="2101:64"><expr pos:start="2101:45" pos:end="2101:64"><name pos:start="2101:45" pos:end="2101:64"><name pos:start="2101:45" pos:end="2101:56">assoc_parsed</name><operator pos:start="2101:57" pos:end="2101:58">-&gt;</operator><name pos:start="2101:59" pos:end="2101:64">cipher</name></name></expr></argument>)</argument_list></call> <operator pos:start="2101:67" pos:end="2101:67">/</operator> <literal type="number" pos:start="2101:69" pos:end="2101:69">8</literal></expr></argument>,
                       <argument pos:start="2102:24" pos:end="2102:38"><expr pos:start="2102:24" pos:end="2102:38"><name pos:start="2102:24" pos:end="2102:38">LOG_LEVEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2104:13" pos:end="2106:87"><expr pos:start="2104:13" pos:end="2106:86"><name pos:start="2104:13" pos:end="2104:15">ret</name> <operator pos:start="2104:17" pos:end="2104:17">=</operator> <call pos:start="2104:19" pos:end="2106:86"><name pos:start="2104:19" pos:end="2104:40">Dot11DecryptFtMicCheck</name><argument_list pos:start="2104:41" pos:end="2106:86">(<argument pos:start="2104:42" pos:end="2104:53"><expr pos:start="2104:42" pos:end="2104:53"><name pos:start="2104:42" pos:end="2104:53">assoc_parsed</name></expr></argument>,
                                         <argument pos:start="2105:42" pos:end="2105:52"><expr pos:start="2105:42" pos:end="2105:52"><operator pos:start="2105:42" pos:end="2105:42">(</operator><name pos:start="2105:43" pos:end="2105:45">ptk</name> <operator pos:start="2105:47" pos:end="2105:47">+</operator> <operator pos:start="2105:49" pos:end="2105:49">(</operator><literal type="number" pos:start="2105:50" pos:end="2105:50">0</literal><operator pos:start="2105:51" pos:end="2105:51">)</operator><operator pos:start="2105:52" pos:end="2105:52">)</operator></expr></argument>,
                                         <argument pos:start="2106:42" pos:end="2106:85"><expr pos:start="2106:42" pos:end="2106:85"><call pos:start="2106:42" pos:end="2106:81"><name pos:start="2106:42" pos:end="2106:62">Dot11DecryptGetKckLen</name><argument_list pos:start="2106:63" pos:end="2106:81">(<argument pos:start="2106:64" pos:end="2106:80"><expr pos:start="2106:64" pos:end="2106:80"><name pos:start="2106:64" pos:end="2106:80"><name pos:start="2106:64" pos:end="2106:75">assoc_parsed</name><operator pos:start="2106:76" pos:end="2106:77">-&gt;</operator><name pos:start="2106:78" pos:end="2106:80">akm</name></name></expr></argument>)</argument_list></call> <operator pos:start="2106:83" pos:end="2106:83">/</operator> <literal type="number" pos:start="2106:85" pos:end="2106:85">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2107:13" pos:end="2112:13"><if pos:start="2107:13" pos:end="2112:13">if <condition pos:start="2107:16" pos:end="2107:48">(<expr pos:start="2107:17" pos:end="2107:47"><name pos:start="2107:17" pos:end="2107:19">ret</name> <operator pos:start="2107:21" pos:end="2107:22">==</operator> <name pos:start="2107:24" pos:end="2107:47">DOT11DECRYPT_RET_SUCCESS</name></expr>)</condition>
            <block pos:start="2108:13" pos:end="2112:13">{<block_content pos:start="2110:17" pos:end="2111:22">
                <comment type="block" pos:start="2109:17" pos:end="2109:86">/* the key is the correct one, cache it in the Security Association */</comment>
                <expr_stmt pos:start="2110:17" pos:end="2110:34"><expr pos:start="2110:17" pos:end="2110:33"><name pos:start="2110:17" pos:end="2110:23"><name pos:start="2110:17" pos:end="2110:18">sa</name><operator pos:start="2110:19" pos:end="2110:20">-&gt;</operator><name pos:start="2110:21" pos:end="2110:23">key</name></name> <operator pos:start="2110:25" pos:end="2110:25">=</operator> <name pos:start="2110:27" pos:end="2110:33">tmp_key</name></expr>;</expr_stmt>
                <break pos:start="2111:17" pos:end="2111:22">break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt pos:start="2115:9" pos:end="2120:9"><if pos:start="2115:9" pos:end="2120:9">if <condition pos:start="2115:12" pos:end="2115:16">(<expr pos:start="2115:13" pos:end="2115:15"><name pos:start="2115:13" pos:end="2115:15">ret</name></expr>)</condition>
        <block pos:start="2116:9" pos:end="2120:9">{<block_content pos:start="2117:13" pos:end="2119:55">
            <expr_stmt pos:start="2117:13" pos:end="2117:46"><expr pos:start="2117:13" pos:end="2117:45"><call pos:start="2117:13" pos:end="2117:45"><name pos:start="2117:13" pos:end="2117:20">ws_debug</name><argument_list pos:start="2117:21" pos:end="2117:45">(<argument pos:start="2117:22" pos:end="2117:44"><expr pos:start="2117:22" pos:end="2117:44"><literal type="string" pos:start="2117:22" pos:end="2117:44">"handshake step failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2118:13" pos:end="2118:23"><expr pos:start="2118:13" pos:end="2118:22"><call pos:start="2118:13" pos:end="2118:22"><name pos:start="2118:13" pos:end="2118:18">g_free</name><argument_list pos:start="2118:19" pos:end="2118:22">(<argument pos:start="2118:20" pos:end="2118:21"><expr pos:start="2118:20" pos:end="2118:21"><name pos:start="2118:20" pos:end="2118:21">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2119:13" pos:end="2119:55">return <expr pos:start="2119:20" pos:end="2119:54"><name pos:start="2119:20" pos:end="2119:54">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="2121:9" pos:end="2121:45"><expr pos:start="2121:9" pos:end="2121:44"><name pos:start="2121:9" pos:end="2121:10">sa</name> <operator pos:start="2121:12" pos:end="2121:12">=</operator> <call pos:start="2121:14" pos:end="2121:44"><name pos:start="2121:14" pos:end="2121:30">Dot11DecryptAddSa</name><argument_list pos:start="2121:31" pos:end="2121:44">(<argument pos:start="2121:32" pos:end="2121:34"><expr pos:start="2121:32" pos:end="2121:34"><name pos:start="2121:32" pos:end="2121:34">ctx</name></expr></argument>, <argument pos:start="2121:37" pos:end="2121:39"><expr pos:start="2121:37" pos:end="2121:39"><operator pos:start="2121:37" pos:end="2121:37">&amp;</operator><name pos:start="2121:38" pos:end="2121:39">id</name></expr></argument>, <argument pos:start="2121:42" pos:end="2121:43"><expr pos:start="2121:42" pos:end="2121:43"><name pos:start="2121:42" pos:end="2121:43">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2123:9" pos:end="2123:28"><expr pos:start="2123:9" pos:end="2123:27"><name pos:start="2123:9" pos:end="2123:23"><name pos:start="2123:9" pos:end="2123:10">sa</name><operator pos:start="2123:11" pos:end="2123:12">-&gt;</operator><name pos:start="2123:13" pos:end="2123:15">wpa</name><operator pos:start="2123:16" pos:end="2123:16">.</operator><name pos:start="2123:17" pos:end="2123:23">key_ver</name></name> <operator pos:start="2123:25" pos:end="2123:25">=</operator> <literal type="number" pos:start="2123:27" pos:end="2123:27">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="2123:30" pos:end="2123:73">/* Determine key type from akms and cipher*/</comment>
        <expr_stmt pos:start="2124:9" pos:end="2124:40"><expr pos:start="2124:9" pos:end="2124:39"><name pos:start="2124:9" pos:end="2124:19"><name pos:start="2124:9" pos:end="2124:10">sa</name><operator pos:start="2124:11" pos:end="2124:12">-&gt;</operator><name pos:start="2124:13" pos:end="2124:15">wpa</name><operator pos:start="2124:16" pos:end="2124:16">.</operator><name pos:start="2124:17" pos:end="2124:19">akm</name></name> <operator pos:start="2124:21" pos:end="2124:21">=</operator> <name pos:start="2124:23" pos:end="2124:39"><name pos:start="2124:23" pos:end="2124:34">assoc_parsed</name><operator pos:start="2124:35" pos:end="2124:36">-&gt;</operator><name pos:start="2124:37" pos:end="2124:39">akm</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="2125:9" pos:end="2125:46"><expr pos:start="2125:9" pos:end="2125:45"><name pos:start="2125:9" pos:end="2125:22"><name pos:start="2125:9" pos:end="2125:10">sa</name><operator pos:start="2125:11" pos:end="2125:12">-&gt;</operator><name pos:start="2125:13" pos:end="2125:15">wpa</name><operator pos:start="2125:16" pos:end="2125:16">.</operator><name pos:start="2125:17" pos:end="2125:22">cipher</name></name> <operator pos:start="2125:24" pos:end="2125:24">=</operator> <name pos:start="2125:26" pos:end="2125:45"><name pos:start="2125:26" pos:end="2125:37">assoc_parsed</name><operator pos:start="2125:38" pos:end="2125:39">-&gt;</operator><name pos:start="2125:40" pos:end="2125:45">cipher</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="2126:9" pos:end="2126:62"><expr pos:start="2126:9" pos:end="2126:61"><name pos:start="2126:9" pos:end="2126:32"><name pos:start="2126:9" pos:end="2126:10">sa</name><operator pos:start="2126:11" pos:end="2126:12">-&gt;</operator><name pos:start="2126:13" pos:end="2126:15">wpa</name><operator pos:start="2126:16" pos:end="2126:16">.</operator><name pos:start="2126:17" pos:end="2126:32">tmp_group_cipher</name></name> <operator pos:start="2126:34" pos:end="2126:34">=</operator> <name pos:start="2126:36" pos:end="2126:61"><name pos:start="2126:36" pos:end="2126:47">assoc_parsed</name><operator pos:start="2126:48" pos:end="2126:49">-&gt;</operator><name pos:start="2126:50" pos:end="2126:61">group_cipher</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="2127:9" pos:end="2127:42"><expr pos:start="2127:9" pos:end="2127:41"><call pos:start="2127:9" pos:end="2127:41"><name pos:start="2127:9" pos:end="2127:14">memcpy</name><argument_list pos:start="2127:15" pos:end="2127:41">(<argument pos:start="2127:16" pos:end="2127:26"><expr pos:start="2127:16" pos:end="2127:26"><name pos:start="2127:16" pos:end="2127:26"><name pos:start="2127:16" pos:end="2127:17">sa</name><operator pos:start="2127:18" pos:end="2127:19">-&gt;</operator><name pos:start="2127:20" pos:end="2127:22">wpa</name><operator pos:start="2127:23" pos:end="2127:23">.</operator><name pos:start="2127:24" pos:end="2127:26">ptk</name></name></expr></argument>, <argument pos:start="2127:29" pos:end="2127:31"><expr pos:start="2127:29" pos:end="2127:31"><name pos:start="2127:29" pos:end="2127:31">ptk</name></expr></argument>, <argument pos:start="2127:34" pos:end="2127:40"><expr pos:start="2127:34" pos:end="2127:40"><name pos:start="2127:34" pos:end="2127:40">ptk_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2128:9" pos:end="2128:39"><expr pos:start="2128:9" pos:end="2128:38"><name pos:start="2128:9" pos:end="2128:23"><name pos:start="2128:9" pos:end="2128:10">sa</name><operator pos:start="2128:11" pos:end="2128:12">-&gt;</operator><name pos:start="2128:13" pos:end="2128:15">wpa</name><operator pos:start="2128:16" pos:end="2128:16">.</operator><name pos:start="2128:17" pos:end="2128:23">ptk_len</name></name> <operator pos:start="2128:25" pos:end="2128:25">=</operator> <operator pos:start="2128:27" pos:end="2128:27">(</operator><name pos:start="2128:28" pos:end="2128:30">INT</name><operator pos:start="2128:31" pos:end="2128:31">)</operator><name pos:start="2128:32" pos:end="2128:38">ptk_len</name></expr>;</expr_stmt>
        <expr_stmt pos:start="2129:9" pos:end="2129:28"><expr pos:start="2129:9" pos:end="2129:27"><name pos:start="2129:9" pos:end="2129:20"><name pos:start="2129:9" pos:end="2129:10">sa</name><operator pos:start="2129:11" pos:end="2129:12">-&gt;</operator><name pos:start="2129:13" pos:end="2129:20">validKey</name></name> <operator pos:start="2129:22" pos:end="2129:22">=</operator> <name pos:start="2129:24" pos:end="2129:27">TRUE</name></expr>;</expr_stmt>

        <if_stmt pos:start="2131:9" pos:end="2150:9"><if pos:start="2131:9" pos:end="2150:9">if <condition pos:start="2131:12" pos:end="2131:96">(<expr pos:start="2131:13" pos:end="2131:95"><name pos:start="2131:13" pos:end="2131:29"><name pos:start="2131:13" pos:end="2131:24">assoc_parsed</name><operator pos:start="2131:25" pos:end="2131:26">-&gt;</operator><name pos:start="2131:27" pos:end="2131:29">gtk</name></name> <operator pos:start="2131:31" pos:end="2131:32">&amp;&amp;</operator> <name pos:start="2131:34" pos:end="2131:54"><name pos:start="2131:34" pos:end="2131:45">assoc_parsed</name><operator pos:start="2131:46" pos:end="2131:47">-&gt;</operator><name pos:start="2131:48" pos:end="2131:54">gtk_len</name></name> <operator pos:start="2131:56" pos:end="2131:56">-</operator> <literal type="number" pos:start="2131:58" pos:end="2131:58">8</literal> <operator pos:start="2131:60" pos:end="2131:61">&lt;=</operator> <name pos:start="2131:63" pos:end="2131:90">DOT11DECRYPT_WPA_PTK_MAX_LEN</name> <operator pos:start="2131:92" pos:end="2131:92">-</operator> <literal type="number" pos:start="2131:94" pos:end="2131:95">32</literal></expr>)</condition>
        <block pos:start="2132:9" pos:end="2150:9">{<block_content pos:start="2133:13" pos:end="2149:68">
            <decl_stmt pos:start="2133:13" pos:end="2133:68"><decl pos:start="2133:13" pos:end="2133:67"><type pos:start="2133:13" pos:end="2133:18"><name pos:start="2133:13" pos:end="2133:18">guint8</name></type> <name pos:start="2133:20" pos:end="2133:67"><name pos:start="2133:20" pos:end="2133:32">decrypted_key</name><index pos:start="2133:33" pos:end="2133:67">[<expr pos:start="2133:34" pos:end="2133:66"><name pos:start="2133:34" pos:end="2133:61">DOT11DECRYPT_WPA_PTK_MAX_LEN</name> <operator pos:start="2133:63" pos:end="2133:63">-</operator> <literal type="number" pos:start="2133:65" pos:end="2133:66">32</literal></expr>]</index></name></decl>;</decl_stmt>
            <decl_stmt pos:start="2134:13" pos:end="2134:38"><decl pos:start="2134:13" pos:end="2134:37"><type pos:start="2134:13" pos:end="2134:19"><name pos:start="2134:13" pos:end="2134:19">guint16</name></type> <name pos:start="2134:21" pos:end="2134:37">decrypted_key_len</name></decl>;</decl_stmt>
            <if_stmt pos:start="2135:13" pos:end="2141:13"><if pos:start="2135:13" pos:end="2141:13">if <condition pos:start="2135:16" pos:end="2138:62">(<expr pos:start="2135:17" pos:end="2138:61"><call pos:start="2135:17" pos:end="2138:61"><name pos:start="2135:17" pos:end="2135:26">AES_unwrap</name><argument_list pos:start="2135:27" pos:end="2138:61">(<argument pos:start="2135:28" pos:end="2135:91"><expr pos:start="2135:28" pos:end="2135:91"><operator pos:start="2135:28" pos:end="2135:28">(</operator><name pos:start="2135:29" pos:end="2135:39"><name pos:start="2135:29" pos:end="2135:30">sa</name><operator pos:start="2135:31" pos:end="2135:32">-&gt;</operator><name pos:start="2135:33" pos:end="2135:35">wpa</name><operator pos:start="2135:36" pos:end="2135:36">.</operator><name pos:start="2135:37" pos:end="2135:39">ptk</name></name> <operator pos:start="2135:41" pos:end="2135:41">+</operator> <operator pos:start="2135:43" pos:end="2135:43">(</operator><operator pos:start="2135:44" pos:end="2135:44">(</operator><operator pos:start="2135:45" pos:end="2135:45">(</operator><literal type="number" pos:start="2135:46" pos:end="2135:46">0</literal><operator pos:start="2135:47" pos:end="2135:47">)</operator> <operator pos:start="2135:49" pos:end="2135:49">+</operator> <call pos:start="2135:51" pos:end="2135:84"><name pos:start="2135:51" pos:end="2135:71">Dot11DecryptGetKckLen</name><argument_list pos:start="2135:72" pos:end="2135:84">(<argument pos:start="2135:73" pos:end="2135:83"><expr pos:start="2135:73" pos:end="2135:83"><name pos:start="2135:73" pos:end="2135:83"><name pos:start="2135:73" pos:end="2135:74">sa</name><operator pos:start="2135:75" pos:end="2135:76">-&gt;</operator><name pos:start="2135:77" pos:end="2135:79">wpa</name><operator pos:start="2135:80" pos:end="2135:80">.</operator><name pos:start="2135:81" pos:end="2135:83">akm</name></name></expr></argument>)</argument_list></call> <operator pos:start="2135:86" pos:end="2135:86">/</operator> <literal type="number" pos:start="2135:88" pos:end="2135:88">8</literal><operator pos:start="2135:89" pos:end="2135:89">)</operator><operator pos:start="2135:90" pos:end="2135:90">)</operator><operator pos:start="2135:91" pos:end="2135:91">)</operator></expr></argument>,
                           <argument pos:start="2136:28" pos:end="2136:65"><expr pos:start="2136:28" pos:end="2136:65"><call pos:start="2136:28" pos:end="2136:61"><name pos:start="2136:28" pos:end="2136:48">Dot11DecryptGetKekLen</name><argument_list pos:start="2136:49" pos:end="2136:61">(<argument pos:start="2136:50" pos:end="2136:60"><expr pos:start="2136:50" pos:end="2136:60"><name pos:start="2136:50" pos:end="2136:60"><name pos:start="2136:50" pos:end="2136:51">sa</name><operator pos:start="2136:52" pos:end="2136:53">-&gt;</operator><name pos:start="2136:54" pos:end="2136:56">wpa</name><operator pos:start="2136:57" pos:end="2136:57">.</operator><name pos:start="2136:58" pos:end="2136:60">akm</name></name></expr></argument>)</argument_list></call> <operator pos:start="2136:63" pos:end="2136:63">/</operator> <literal type="number" pos:start="2136:65" pos:end="2136:65">8</literal></expr></argument>,
                           <argument pos:start="2137:28" pos:end="2137:44"><expr pos:start="2137:28" pos:end="2137:44"><name pos:start="2137:28" pos:end="2137:44"><name pos:start="2137:28" pos:end="2137:39">assoc_parsed</name><operator pos:start="2137:40" pos:end="2137:41">-&gt;</operator><name pos:start="2137:42" pos:end="2137:44">gtk</name></name></expr></argument>, <argument pos:start="2137:47" pos:end="2137:67"><expr pos:start="2137:47" pos:end="2137:67"><name pos:start="2137:47" pos:end="2137:67"><name pos:start="2137:47" pos:end="2137:58">assoc_parsed</name><operator pos:start="2137:59" pos:end="2137:60">-&gt;</operator><name pos:start="2137:61" pos:end="2137:67">gtk_len</name></name></expr></argument>,
                           <argument pos:start="2138:28" pos:end="2138:40"><expr pos:start="2138:28" pos:end="2138:40"><name pos:start="2138:28" pos:end="2138:40">decrypted_key</name></expr></argument>, <argument pos:start="2138:43" pos:end="2138:60"><expr pos:start="2138:43" pos:end="2138:60"><operator pos:start="2138:43" pos:end="2138:43">&amp;</operator><name pos:start="2138:44" pos:end="2138:60">decrypted_key_len</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block pos:start="2139:13" pos:end="2141:13">{<block_content pos:start="2140:17" pos:end="2140:50">
                <return pos:start="2140:17" pos:end="2140:50">return <expr pos:start="2140:24" pos:end="2140:49"><name pos:start="2140:24" pos:end="2140:49">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="2142:13" pos:end="2146:13"><if pos:start="2142:13" pos:end="2146:13">if <condition pos:start="2142:16" pos:end="2142:71">(<expr pos:start="2142:17" pos:end="2142:70"><name pos:start="2142:17" pos:end="2142:33">decrypted_key_len</name> <operator pos:start="2142:35" pos:end="2142:36">!=</operator> <name pos:start="2142:38" pos:end="2142:70"><name pos:start="2142:38" pos:end="2142:49">assoc_parsed</name><operator pos:start="2142:50" pos:end="2142:51">-&gt;</operator><name pos:start="2142:52" pos:end="2142:70">gtk_subelem_key_len</name></name></expr>)</condition>
            <block pos:start="2143:13" pos:end="2146:13">{<block_content pos:start="2144:17" pos:end="2145:50">
                <expr_stmt pos:start="2144:17" pos:end="2144:50"><expr pos:start="2144:17" pos:end="2144:49"><call pos:start="2144:17" pos:end="2144:49"><name pos:start="2144:17" pos:end="2144:24">ws_debug</name><argument_list pos:start="2144:25" pos:end="2144:49">(<argument pos:start="2144:26" pos:end="2144:48"><expr pos:start="2144:26" pos:end="2144:48"><literal type="string" pos:start="2144:26" pos:end="2144:48">"Unexpected GTK length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="2145:17" pos:end="2145:50">return <expr pos:start="2145:24" pos:end="2145:49"><name pos:start="2145:24" pos:end="2145:49">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="2147:13" pos:end="2147:85"><expr pos:start="2147:13" pos:end="2147:84"><call pos:start="2147:13" pos:end="2147:84"><name pos:start="2147:13" pos:end="2147:40">Dot11DecryptCopyBroadcastKey</name><argument_list pos:start="2147:41" pos:end="2147:84">(<argument pos:start="2147:42" pos:end="2147:44"><expr pos:start="2147:42" pos:end="2147:44"><name pos:start="2147:42" pos:end="2147:44">ctx</name></expr></argument>, <argument pos:start="2147:47" pos:end="2147:59"><expr pos:start="2147:47" pos:end="2147:59"><name pos:start="2147:47" pos:end="2147:59">decrypted_key</name></expr></argument>, <argument pos:start="2147:62" pos:end="2147:78"><expr pos:start="2147:62" pos:end="2147:78"><name pos:start="2147:62" pos:end="2147:78">decrypted_key_len</name></expr></argument>, <argument pos:start="2147:81" pos:end="2147:83"><expr pos:start="2147:81" pos:end="2147:83"><operator pos:start="2147:81" pos:end="2147:81">&amp;</operator><name pos:start="2147:82" pos:end="2147:83">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2148:13" pos:end="2148:47"><expr pos:start="2148:13" pos:end="2148:46"><operator pos:start="2148:13" pos:end="2148:13">*</operator><name pos:start="2148:14" pos:end="2148:26">decrypted_len</name> <operator pos:start="2148:28" pos:end="2148:28">=</operator> <name pos:start="2148:30" pos:end="2148:46">decrypted_key_len</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2149:13" pos:end="2149:68"><expr pos:start="2149:13" pos:end="2149:67"><call pos:start="2149:13" pos:end="2149:67"><name pos:start="2149:13" pos:end="2149:18">memcpy</name><argument_list pos:start="2149:19" pos:end="2149:67">(<argument pos:start="2149:20" pos:end="2149:32"><expr pos:start="2149:20" pos:end="2149:32"><name pos:start="2149:20" pos:end="2149:32">decrypted_gtk</name></expr></argument>, <argument pos:start="2149:35" pos:end="2149:47"><expr pos:start="2149:35" pos:end="2149:47"><name pos:start="2149:35" pos:end="2149:47">decrypted_key</name></expr></argument>, <argument pos:start="2149:50" pos:end="2149:66"><expr pos:start="2149:50" pos:end="2149:66"><name pos:start="2149:50" pos:end="2149:66">decrypted_key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="2151:9" pos:end="2151:42"><expr pos:start="2151:9" pos:end="2151:41"><call pos:start="2151:9" pos:end="2151:41"><name pos:start="2151:9" pos:end="2151:27">Dot11DecryptCopyKey</name><argument_list pos:start="2151:28" pos:end="2151:41">(<argument pos:start="2151:29" pos:end="2151:30"><expr pos:start="2151:29" pos:end="2151:30"><name pos:start="2151:29" pos:end="2151:30">sa</name></expr></argument>, <argument pos:start="2151:33" pos:end="2151:40"><expr pos:start="2151:33" pos:end="2151:40"><name pos:start="2151:33" pos:end="2151:40">used_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2152:9" pos:end="2152:50">return <expr pos:start="2152:16" pos:end="2152:49"><name pos:start="2152:16" pos:end="2152:49">DOT11DECRYPT_RET_SUCCESS_HANDSHAKE</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" pos:start="2155:5" pos:end="2155:76">/* From IEEE 802.11-2016 Table 12-8 Integrity and key-wrap algorithms */</comment>
    <function pos:start="2156:5" pos:end="2194:5"><type pos:start="2156:5" pos:end="2156:14"><specifier pos:start="2156:5" pos:end="2156:10">static</specifier> <name pos:start="2156:12" pos:end="2156:14">int</name></type>
    <name pos:start="2157:5" pos:end="2157:39">Dot11DecryptGetIntegrityAlgoFromAkm</name><parameter_list pos:start="2157:40" pos:end="2157:75">(<parameter pos:start="2157:41" pos:end="2157:47"><decl pos:start="2157:41" pos:end="2157:47"><type pos:start="2157:41" pos:end="2157:47"><name pos:start="2157:41" pos:end="2157:43">int</name></type> <name pos:start="2157:45" pos:end="2157:47">akm</name></decl></parameter>, <parameter pos:start="2157:50" pos:end="2157:58"><decl pos:start="2157:50" pos:end="2157:58"><type pos:start="2157:50" pos:end="2157:58"><name pos:start="2157:50" pos:end="2157:52">int</name> <modifier pos:start="2157:54" pos:end="2157:54">*</modifier></type><name pos:start="2157:55" pos:end="2157:58">algo</name></decl></parameter>, <parameter pos:start="2157:61" pos:end="2157:74"><decl pos:start="2157:61" pos:end="2157:74"><type pos:start="2157:61" pos:end="2157:74"><name pos:start="2157:61" pos:end="2157:68">gboolean</name> <modifier pos:start="2157:70" pos:end="2157:70">*</modifier></type><name pos:start="2157:71" pos:end="2157:74">hmac</name></decl></parameter>)</parameter_list>
    <block pos:start="2158:5" pos:end="2194:5">{<block_content pos:start="2159:9" pos:end="2193:19">
        <decl_stmt pos:start="2159:9" pos:end="2159:20"><decl pos:start="2159:9" pos:end="2159:19"><type pos:start="2159:9" pos:end="2159:11"><name pos:start="2159:9" pos:end="2159:11">int</name></type> <name pos:start="2159:13" pos:end="2159:15">res</name> <init pos:start="2159:17" pos:end="2159:19">= <expr pos:start="2159:19" pos:end="2159:19"><literal type="number" pos:start="2159:19" pos:end="2159:19">0</literal></expr></init></decl>;</decl_stmt>
        <switch pos:start="2160:9" pos:end="2192:9">switch <condition pos:start="2160:16" pos:end="2160:20">(<expr pos:start="2160:17" pos:end="2160:19"><name pos:start="2160:17" pos:end="2160:19">akm</name></expr>)</condition>
        <block pos:start="2161:9" pos:end="2192:9">{<block_content pos:start="2162:9" pos:end="2191:18">
        <case pos:start="2162:9" pos:end="2162:15">case <expr pos:start="2162:14" pos:end="2162:14"><literal type="number" pos:start="2162:14" pos:end="2162:14">1</literal></expr>:</case>
        <case pos:start="2163:9" pos:end="2163:15">case <expr pos:start="2163:14" pos:end="2163:14"><literal type="number" pos:start="2163:14" pos:end="2163:14">2</literal></expr>:</case>
            <expr_stmt pos:start="2164:13" pos:end="2164:33"><expr pos:start="2164:13" pos:end="2164:32"><operator pos:start="2164:13" pos:end="2164:13">*</operator><name pos:start="2164:14" pos:end="2164:17">algo</name> <operator pos:start="2164:19" pos:end="2164:19">=</operator> <name pos:start="2164:21" pos:end="2164:32">GCRY_MD_SHA1</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2165:13" pos:end="2165:25"><expr pos:start="2165:13" pos:end="2165:24"><operator pos:start="2165:13" pos:end="2165:13">*</operator><name pos:start="2165:14" pos:end="2165:17">hmac</name> <operator pos:start="2165:19" pos:end="2165:19">=</operator> <name pos:start="2165:21" pos:end="2165:24">TRUE</name></expr>;</expr_stmt>
            <break pos:start="2166:13" pos:end="2166:18">break;</break>
        <case pos:start="2167:9" pos:end="2167:15">case <expr pos:start="2167:14" pos:end="2167:14"><literal type="number" pos:start="2167:14" pos:end="2167:14">3</literal></expr>:</case>
        <case pos:start="2168:9" pos:end="2168:15">case <expr pos:start="2168:14" pos:end="2168:14"><literal type="number" pos:start="2168:14" pos:end="2168:14">4</literal></expr>:</case>
        <case pos:start="2169:9" pos:end="2169:15">case <expr pos:start="2169:14" pos:end="2169:14"><literal type="number" pos:start="2169:14" pos:end="2169:14">5</literal></expr>:</case>
        <case pos:start="2170:9" pos:end="2170:15">case <expr pos:start="2170:14" pos:end="2170:14"><literal type="number" pos:start="2170:14" pos:end="2170:14">6</literal></expr>:</case>
        <case pos:start="2171:9" pos:end="2171:15">case <expr pos:start="2171:14" pos:end="2171:14"><literal type="number" pos:start="2171:14" pos:end="2171:14">7</literal></expr>:</case>
        <case pos:start="2172:9" pos:end="2172:15">case <expr pos:start="2172:14" pos:end="2172:14"><literal type="number" pos:start="2172:14" pos:end="2172:14">8</literal></expr>:</case>
        <case pos:start="2173:9" pos:end="2173:15">case <expr pos:start="2173:14" pos:end="2173:14"><literal type="number" pos:start="2173:14" pos:end="2173:14">9</literal></expr>:</case>
        <case pos:start="2174:9" pos:end="2174:16">case <expr pos:start="2174:14" pos:end="2174:15"><literal type="number" pos:start="2174:14" pos:end="2174:15">10</literal></expr>:</case>
            <expr_stmt pos:start="2175:13" pos:end="2175:38"><expr pos:start="2175:13" pos:end="2175:37"><operator pos:start="2175:13" pos:end="2175:13">*</operator><name pos:start="2175:14" pos:end="2175:17">algo</name> <operator pos:start="2175:19" pos:end="2175:19">=</operator> <name pos:start="2175:21" pos:end="2175:37">GCRY_MAC_CMAC_AES</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2176:13" pos:end="2176:26"><expr pos:start="2176:13" pos:end="2176:25"><operator pos:start="2176:13" pos:end="2176:13">*</operator><name pos:start="2176:14" pos:end="2176:17">hmac</name> <operator pos:start="2176:19" pos:end="2176:19">=</operator> <name pos:start="2176:21" pos:end="2176:25">FALSE</name></expr>;</expr_stmt>
            <break pos:start="2177:13" pos:end="2177:18">break;</break>
        <case pos:start="2178:9" pos:end="2178:16">case <expr pos:start="2178:14" pos:end="2178:15"><literal type="number" pos:start="2178:14" pos:end="2178:15">11</literal></expr>:</case>
        <case pos:start="2179:9" pos:end="2179:16">case <expr pos:start="2179:14" pos:end="2179:15"><literal type="number" pos:start="2179:14" pos:end="2179:15">18</literal></expr>:</case>
            <expr_stmt pos:start="2180:13" pos:end="2180:35"><expr pos:start="2180:13" pos:end="2180:34"><operator pos:start="2180:13" pos:end="2180:13">*</operator><name pos:start="2180:14" pos:end="2180:17">algo</name> <operator pos:start="2180:19" pos:end="2180:19">=</operator> <name pos:start="2180:21" pos:end="2180:34">GCRY_MD_SHA256</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2181:13" pos:end="2181:25"><expr pos:start="2181:13" pos:end="2181:24"><operator pos:start="2181:13" pos:end="2181:13">*</operator><name pos:start="2181:14" pos:end="2181:17">hmac</name> <operator pos:start="2181:19" pos:end="2181:19">=</operator> <name pos:start="2181:21" pos:end="2181:24">TRUE</name></expr>;</expr_stmt>
            <break pos:start="2182:13" pos:end="2182:18">break;</break>
        <case pos:start="2183:9" pos:end="2183:16">case <expr pos:start="2183:14" pos:end="2183:15"><literal type="number" pos:start="2183:14" pos:end="2183:15">12</literal></expr>:</case>
        <case pos:start="2184:9" pos:end="2184:16">case <expr pos:start="2184:14" pos:end="2184:15"><literal type="number" pos:start="2184:14" pos:end="2184:15">13</literal></expr>:</case>
            <expr_stmt pos:start="2185:13" pos:end="2185:35"><expr pos:start="2185:13" pos:end="2185:34"><operator pos:start="2185:13" pos:end="2185:13">*</operator><name pos:start="2185:14" pos:end="2185:17">algo</name> <operator pos:start="2185:19" pos:end="2185:19">=</operator> <name pos:start="2185:21" pos:end="2185:34">GCRY_MD_SHA384</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2186:13" pos:end="2186:25"><expr pos:start="2186:13" pos:end="2186:24"><operator pos:start="2186:13" pos:end="2186:13">*</operator><name pos:start="2186:14" pos:end="2186:17">hmac</name> <operator pos:start="2186:19" pos:end="2186:19">=</operator> <name pos:start="2186:21" pos:end="2186:24">TRUE</name></expr>;</expr_stmt>
            <break pos:start="2187:13" pos:end="2187:18">break;</break>
        <default pos:start="2188:9" pos:end="2188:16">default:</default>
            <comment type="block" pos:start="2189:13" pos:end="2189:45">/* Unknown / Not supported yet */</comment>
            <expr_stmt pos:start="2190:13" pos:end="2190:21"><expr pos:start="2190:13" pos:end="2190:20"><name pos:start="2190:13" pos:end="2190:15">res</name> <operator pos:start="2190:17" pos:end="2190:17">=</operator> <operator pos:start="2190:19" pos:end="2190:19">-</operator><literal type="number" pos:start="2190:20" pos:end="2190:20">1</literal></expr>;</expr_stmt>
            <break pos:start="2191:13" pos:end="2191:18">break;</break>
        </block_content>}</block></switch>
        <return pos:start="2193:9" pos:end="2193:19">return <expr pos:start="2193:16" pos:end="2193:18"><name pos:start="2193:16" pos:end="2193:18">res</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="2196:5" pos:end="2264:5"><type pos:start="2196:5" pos:end="2196:14"><specifier pos:start="2196:5" pos:end="2196:10">static</specifier> <name pos:start="2196:12" pos:end="2196:14">INT</name></type>
    <name pos:start="2197:5" pos:end="2197:28">Dot11DecryptRsnaMicCheck</name><parameter_list pos:start="2197:29" pos:end="2203:16">(
        <parameter pos:start="2198:9" pos:end="2198:47"><decl pos:start="2198:9" pos:end="2198:47"><type pos:start="2198:9" pos:end="2198:47"><name pos:start="2198:9" pos:end="2198:34">PDOT11DECRYPT_EAPOL_PARSED</name></type> <name pos:start="2198:36" pos:end="2198:47">eapol_parsed</name></decl></parameter>,
        <parameter pos:start="2199:9" pos:end="2199:20"><decl pos:start="2199:9" pos:end="2199:20"><type pos:start="2199:9" pos:end="2199:20"><name pos:start="2199:9" pos:end="2199:13">UCHAR</name> <modifier pos:start="2199:15" pos:end="2199:15">*</modifier></type><name pos:start="2199:16" pos:end="2199:20">eapol</name></decl></parameter>,
        <parameter pos:start="2200:9" pos:end="2200:24"><decl pos:start="2200:9" pos:end="2200:24"><type pos:start="2200:9" pos:end="2200:24"><name pos:start="2200:9" pos:end="2200:14">USHORT</name></type> <name pos:start="2200:16" pos:end="2200:24">eapol_len</name></decl></parameter>,
        <parameter pos:start="2201:9" pos:end="2201:18"><decl pos:start="2201:9" pos:end="2201:18"><type pos:start="2201:9" pos:end="2201:18"><name pos:start="2201:9" pos:end="2201:13">UCHAR</name> <modifier pos:start="2201:15" pos:end="2201:15">*</modifier></type><name pos:start="2201:16" pos:end="2201:18">KCK</name></decl></parameter>,
        <parameter pos:start="2202:9" pos:end="2202:22"><decl pos:start="2202:9" pos:end="2202:22"><type pos:start="2202:9" pos:end="2202:22"><name pos:start="2202:9" pos:end="2202:14">USHORT</name></type> <name pos:start="2202:16" pos:end="2202:22">key_ver</name></decl></parameter>,
        <parameter pos:start="2203:9" pos:end="2203:15"><decl pos:start="2203:9" pos:end="2203:15"><type pos:start="2203:9" pos:end="2203:15"><name pos:start="2203:9" pos:end="2203:11">int</name></type> <name pos:start="2203:13" pos:end="2203:15">akm</name></decl></parameter>)</parameter_list>
    <block pos:start="2204:5" pos:end="2264:5">{<block_content pos:start="2205:9" pos:end="2263:43">
        <decl_stmt pos:start="2205:9" pos:end="2205:40"><decl pos:start="2205:9" pos:end="2205:39"><type pos:start="2205:9" pos:end="2205:16"><name pos:start="2205:9" pos:end="2205:14">guint8</name> <modifier pos:start="2205:16" pos:end="2205:16">*</modifier></type><name pos:start="2205:17" pos:end="2205:19">mic</name> <init pos:start="2205:21" pos:end="2205:39">= <expr pos:start="2205:23" pos:end="2205:39"><name pos:start="2205:23" pos:end="2205:39"><name pos:start="2205:23" pos:end="2205:34">eapol_parsed</name><operator pos:start="2205:35" pos:end="2205:36">-&gt;</operator><name pos:start="2205:37" pos:end="2205:39">mic</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="2206:9" pos:end="2206:48"><decl pos:start="2206:9" pos:end="2206:47"><type pos:start="2206:9" pos:end="2206:15"><name pos:start="2206:9" pos:end="2206:15">guint16</name></type> <name pos:start="2206:17" pos:end="2206:23">mic_len</name> <init pos:start="2206:25" pos:end="2206:47">= <expr pos:start="2206:27" pos:end="2206:47"><name pos:start="2206:27" pos:end="2206:47"><name pos:start="2206:27" pos:end="2206:38">eapol_parsed</name><operator pos:start="2206:39" pos:end="2206:40">-&gt;</operator><name pos:start="2206:41" pos:end="2206:47">mic_len</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="2207:9" pos:end="2207:57"><decl pos:start="2207:9" pos:end="2207:56"><type pos:start="2207:9" pos:end="2207:15"><name pos:start="2207:9" pos:end="2207:15">guint16</name></type> <name pos:start="2207:17" pos:end="2207:23">kck_len</name> <init pos:start="2207:25" pos:end="2207:56">= <expr pos:start="2207:27" pos:end="2207:56"><call pos:start="2207:27" pos:end="2207:52"><name pos:start="2207:27" pos:end="2207:47">Dot11DecryptGetKckLen</name><argument_list pos:start="2207:48" pos:end="2207:52">(<argument pos:start="2207:49" pos:end="2207:51"><expr pos:start="2207:49" pos:end="2207:51"><name pos:start="2207:49" pos:end="2207:51">akm</name></expr></argument>)</argument_list></call> <operator pos:start="2207:54" pos:end="2207:54">/</operator> <literal type="number" pos:start="2207:56" pos:end="2207:56">8</literal></expr></init></decl>;</decl_stmt>
        <comment type="block" pos:start="2208:9" pos:end="2208:93">/* MIC 16 or 24 bytes, though HMAC-SHA256 / SHA384 algos need 32 / 48 bytes buffer */</comment>
        <decl_stmt pos:start="2209:9" pos:end="2209:30"><decl pos:start="2209:9" pos:end="2209:29"><type pos:start="2209:9" pos:end="2209:13"><name pos:start="2209:9" pos:end="2209:13">UCHAR</name></type> <name pos:start="2209:15" pos:end="2209:23"><name pos:start="2209:15" pos:end="2209:19">c_mic</name><index pos:start="2209:20" pos:end="2209:23">[<expr pos:start="2209:21" pos:end="2209:22"><literal type="number" pos:start="2209:21" pos:end="2209:22">48</literal></expr>]</index></name> <init pos:start="2209:25" pos:end="2209:29">= <expr pos:start="2209:27" pos:end="2209:29"><block pos:start="2209:27" pos:end="2209:29">{<expr pos:start="2209:28" pos:end="2209:28"><literal type="number" pos:start="2209:28" pos:end="2209:28">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="2210:9" pos:end="2210:22"><decl pos:start="2210:9" pos:end="2210:21"><type pos:start="2210:9" pos:end="2210:11"><name pos:start="2210:9" pos:end="2210:11">int</name></type> <name pos:start="2210:13" pos:end="2210:16">algo</name> <init pos:start="2210:18" pos:end="2210:21">= <expr pos:start="2210:20" pos:end="2210:21"><operator pos:start="2210:20" pos:end="2210:20">-</operator><literal type="number" pos:start="2210:21" pos:end="2210:21">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="2211:9" pos:end="2211:29"><decl pos:start="2211:9" pos:end="2211:28"><type pos:start="2211:9" pos:end="2211:16"><name pos:start="2211:9" pos:end="2211:16">gboolean</name></type> <name pos:start="2211:18" pos:end="2211:21">hmac</name> <init pos:start="2211:23" pos:end="2211:28">= <expr pos:start="2211:25" pos:end="2211:28"><name pos:start="2211:25" pos:end="2211:28">TRUE</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="2213:9" pos:end="2217:9"><if pos:start="2213:9" pos:end="2217:9">if <condition pos:start="2213:12" pos:end="2213:62">(<expr pos:start="2213:13" pos:end="2213:61"><operator pos:start="2213:13" pos:end="2213:13">!</operator><name pos:start="2213:14" pos:end="2213:16">mic</name> <operator pos:start="2213:18" pos:end="2213:19">||</operator> <name pos:start="2213:21" pos:end="2213:27">mic_len</name> <operator pos:start="2213:29" pos:end="2213:29">&gt;</operator> <name pos:start="2213:31" pos:end="2213:61">DOT11DECRYPT_WPA_MICKEY_MAX_LEN</name></expr>)</condition>
        <block pos:start="2214:9" pos:end="2217:9">{<block_content pos:start="2215:13" pos:end="2216:46">
            <expr_stmt pos:start="2215:13" pos:end="2215:40"><expr pos:start="2215:13" pos:end="2215:39"><call pos:start="2215:13" pos:end="2215:39"><name pos:start="2215:13" pos:end="2215:20">ws_debug</name><argument_list pos:start="2215:21" pos:end="2215:39">(<argument pos:start="2215:22" pos:end="2215:38"><expr pos:start="2215:22" pos:end="2215:38"><literal type="string" pos:start="2215:22" pos:end="2215:38">"Not a valid mic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2216:13" pos:end="2216:46">return <expr pos:start="2216:20" pos:end="2216:45"><name pos:start="2216:20" pos:end="2216:45">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="2219:9" pos:end="2219:73">/* set to 0 the MIC in the EAPOL packet (to calculate the MIC) */</comment>
        <expr_stmt pos:start="2220:9" pos:end="2220:43"><expr pos:start="2220:9" pos:end="2220:42"><call pos:start="2220:9" pos:end="2220:42"><name pos:start="2220:9" pos:end="2220:14">memset</name><argument_list pos:start="2220:15" pos:end="2220:42">(<argument pos:start="2220:16" pos:end="2220:29"><expr pos:start="2220:16" pos:end="2220:29"><name pos:start="2220:16" pos:end="2220:20">eapol</name> <operator pos:start="2220:22" pos:end="2220:22">+</operator> <literal type="number" pos:start="2220:24" pos:end="2220:27">77</literal> <operator pos:start="2220:27" pos:end="2220:27">+</operator> <literal type="number" pos:start="2220:29" pos:end="2220:29">4</literal></expr></argument>, <argument pos:start="2220:32" pos:end="2220:32"><expr pos:start="2220:32" pos:end="2220:32"><literal type="number" pos:start="2220:32" pos:end="2220:32">0</literal></expr></argument>, <argument pos:start="2220:35" pos:end="2220:41"><expr pos:start="2220:35" pos:end="2220:41"><name pos:start="2220:35" pos:end="2220:41">mic_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2222:9" pos:end="2242:9"><if pos:start="2222:9" pos:end="2227:9">if <condition pos:start="2222:12" pos:end="2222:25">(<expr pos:start="2222:13" pos:end="2222:24"><name pos:start="2222:13" pos:end="2222:19">key_ver</name> <operator pos:start="2222:21" pos:end="2222:22">==</operator> <literal type="number" pos:start="2222:24" pos:end="2222:24">1</literal></expr>)</condition>
        <block pos:start="2223:9" pos:end="2227:9">{<block_content pos:start="2225:13" pos:end="2226:24">
            <comment type="block" pos:start="2224:13" pos:end="2224:52">/* use HMAC-MD5 for the EAPOL-Key MIC */</comment>
            <expr_stmt pos:start="2225:13" pos:end="2225:31"><expr pos:start="2225:13" pos:end="2225:30"><name pos:start="2225:13" pos:end="2225:16">algo</name> <operator pos:start="2225:18" pos:end="2225:18">=</operator> <name pos:start="2225:20" pos:end="2225:30">GCRY_MD_MD5</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2226:13" pos:end="2226:24"><expr pos:start="2226:13" pos:end="2226:23"><name pos:start="2226:13" pos:end="2226:16">hmac</name> <operator pos:start="2226:18" pos:end="2226:18">=</operator> <name pos:start="2226:20" pos:end="2226:23">TRUE</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif" pos:start="2228:9" pos:end="2233:9">else if <condition pos:start="2228:17" pos:end="2228:30">(<expr pos:start="2228:18" pos:end="2228:29"><name pos:start="2228:18" pos:end="2228:24">key_ver</name> <operator pos:start="2228:26" pos:end="2228:27">==</operator> <literal type="number" pos:start="2228:29" pos:end="2228:29">2</literal></expr>)</condition>
        <block pos:start="2229:9" pos:end="2233:9">{<block_content pos:start="2231:13" pos:end="2232:24">
            <comment type="block" pos:start="2230:13" pos:end="2230:57">/* use HMAC-SHA1-128 for the EAPOL-Key MIC */</comment>
            <expr_stmt pos:start="2231:13" pos:end="2231:32"><expr pos:start="2231:13" pos:end="2231:31"><name pos:start="2231:13" pos:end="2231:16">algo</name> <operator pos:start="2231:18" pos:end="2231:18">=</operator> <name pos:start="2231:20" pos:end="2231:31">GCRY_MD_SHA1</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2232:13" pos:end="2232:24"><expr pos:start="2232:13" pos:end="2232:23"><name pos:start="2232:13" pos:end="2232:16">hmac</name> <operator pos:start="2232:18" pos:end="2232:18">=</operator> <name pos:start="2232:20" pos:end="2232:23">TRUE</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else pos:start="2234:9" pos:end="2242:9">else
        <block pos:start="2235:9" pos:end="2242:9">{<block_content pos:start="2237:13" pos:end="2241:14">
            <comment type="block" pos:start="2236:13" pos:end="2236:59">/* Mic check algoritm determined by AKM type */</comment>
            <if_stmt pos:start="2237:13" pos:end="2241:13"><if pos:start="2237:13" pos:end="2241:13">if <condition pos:start="2237:16" pos:end="2237:71">(<expr pos:start="2237:17" pos:end="2237:70"><call pos:start="2237:17" pos:end="2237:70"><name pos:start="2237:17" pos:end="2237:51">Dot11DecryptGetIntegrityAlgoFromAkm</name><argument_list pos:start="2237:52" pos:end="2237:70">(<argument pos:start="2237:53" pos:end="2237:55"><expr pos:start="2237:53" pos:end="2237:55"><name pos:start="2237:53" pos:end="2237:55">akm</name></expr></argument>, <argument pos:start="2237:58" pos:end="2237:62"><expr pos:start="2237:58" pos:end="2237:62"><operator pos:start="2237:58" pos:end="2237:58">&amp;</operator><name pos:start="2237:59" pos:end="2237:62">algo</name></expr></argument>, <argument pos:start="2237:65" pos:end="2237:69"><expr pos:start="2237:65" pos:end="2237:69"><operator pos:start="2237:65" pos:end="2237:65">&amp;</operator><name pos:start="2237:66" pos:end="2237:69">hmac</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block pos:start="2238:13" pos:end="2241:13">{<block_content pos:start="2239:17" pos:end="2240:50">
                <expr_stmt pos:start="2239:17" pos:end="2239:53"><expr pos:start="2239:17" pos:end="2239:52"><call pos:start="2239:17" pos:end="2239:52"><name pos:start="2239:17" pos:end="2239:26">ws_warning</name><argument_list pos:start="2239:27" pos:end="2239:52">(<argument pos:start="2239:28" pos:end="2239:51"><expr pos:start="2239:28" pos:end="2239:51"><literal type="string" pos:start="2239:28" pos:end="2239:51">"Unknown Mic check algo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="2240:17" pos:end="2240:50">return <expr pos:start="2240:24" pos:end="2240:49"><name pos:start="2240:24" pos:end="2240:49">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
            </block_content>}</block></if></if_stmt><empty_stmt pos:start="2241:14" pos:end="2241:14">;</empty_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt pos:start="2243:9" pos:end="2258:9"><if pos:start="2243:9" pos:end="2250:9">if <condition pos:start="2243:12" pos:end="2243:17">(<expr pos:start="2243:13" pos:end="2243:16"><name pos:start="2243:13" pos:end="2243:16">hmac</name></expr>)</condition>
        <block pos:start="2244:9" pos:end="2250:9">{<block_content pos:start="2245:13" pos:end="2249:13">
            <if_stmt pos:start="2245:13" pos:end="2249:13"><if pos:start="2245:13" pos:end="2249:13">if <condition pos:start="2245:16" pos:end="2245:76">(<expr pos:start="2245:17" pos:end="2245:75"><call pos:start="2245:17" pos:end="2245:75"><name pos:start="2245:17" pos:end="2245:30">ws_hmac_buffer</name><argument_list pos:start="2245:31" pos:end="2245:75">(<argument pos:start="2245:32" pos:end="2245:35"><expr pos:start="2245:32" pos:end="2245:35"><name pos:start="2245:32" pos:end="2245:35">algo</name></expr></argument>, <argument pos:start="2245:38" pos:end="2245:42"><expr pos:start="2245:38" pos:end="2245:42"><name pos:start="2245:38" pos:end="2245:42">c_mic</name></expr></argument>, <argument pos:start="2245:45" pos:end="2245:49"><expr pos:start="2245:45" pos:end="2245:49"><name pos:start="2245:45" pos:end="2245:49">eapol</name></expr></argument>, <argument pos:start="2245:52" pos:end="2245:60"><expr pos:start="2245:52" pos:end="2245:60"><name pos:start="2245:52" pos:end="2245:60">eapol_len</name></expr></argument>, <argument pos:start="2245:63" pos:end="2245:65"><expr pos:start="2245:63" pos:end="2245:65"><name pos:start="2245:63" pos:end="2245:65">KCK</name></expr></argument>, <argument pos:start="2245:68" pos:end="2245:74"><expr pos:start="2245:68" pos:end="2245:74"><name pos:start="2245:68" pos:end="2245:74">kck_len</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block pos:start="2246:13" pos:end="2249:13">{<block_content pos:start="2247:17" pos:end="2248:50">
                <expr_stmt pos:start="2247:17" pos:end="2247:40"><expr pos:start="2247:17" pos:end="2247:39"><call pos:start="2247:17" pos:end="2247:39"><name pos:start="2247:17" pos:end="2247:24">ws_debug</name><argument_list pos:start="2247:25" pos:end="2247:39">(<argument pos:start="2247:26" pos:end="2247:38"><expr pos:start="2247:26" pos:end="2247:38"><literal type="string" pos:start="2247:26" pos:end="2247:38">"HMAC_BUFFER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="2248:17" pos:end="2248:50">return <expr pos:start="2248:24" pos:end="2248:49"><name pos:start="2248:24" pos:end="2248:49">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else pos:start="2251:9" pos:end="2258:9">else
        <block pos:start="2252:9" pos:end="2258:9">{<block_content pos:start="2253:13" pos:end="2257:13">
            <if_stmt pos:start="2253:13" pos:end="2257:13"><if pos:start="2253:13" pos:end="2257:13">if <condition pos:start="2253:16" pos:end="2253:76">(<expr pos:start="2253:17" pos:end="2253:75"><call pos:start="2253:17" pos:end="2253:75"><name pos:start="2253:17" pos:end="2253:30">ws_cmac_buffer</name><argument_list pos:start="2253:31" pos:end="2253:75">(<argument pos:start="2253:32" pos:end="2253:35"><expr pos:start="2253:32" pos:end="2253:35"><name pos:start="2253:32" pos:end="2253:35">algo</name></expr></argument>, <argument pos:start="2253:38" pos:end="2253:42"><expr pos:start="2253:38" pos:end="2253:42"><name pos:start="2253:38" pos:end="2253:42">c_mic</name></expr></argument>, <argument pos:start="2253:45" pos:end="2253:49"><expr pos:start="2253:45" pos:end="2253:49"><name pos:start="2253:45" pos:end="2253:49">eapol</name></expr></argument>, <argument pos:start="2253:52" pos:end="2253:60"><expr pos:start="2253:52" pos:end="2253:60"><name pos:start="2253:52" pos:end="2253:60">eapol_len</name></expr></argument>, <argument pos:start="2253:63" pos:end="2253:65"><expr pos:start="2253:63" pos:end="2253:65"><name pos:start="2253:63" pos:end="2253:65">KCK</name></expr></argument>, <argument pos:start="2253:68" pos:end="2253:74"><expr pos:start="2253:68" pos:end="2253:74"><name pos:start="2253:68" pos:end="2253:74">kck_len</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block pos:start="2254:13" pos:end="2257:13">{<block_content pos:start="2255:17" pos:end="2256:50">
                <expr_stmt pos:start="2255:17" pos:end="2255:40"><expr pos:start="2255:17" pos:end="2255:39"><call pos:start="2255:17" pos:end="2255:39"><name pos:start="2255:17" pos:end="2255:24">ws_debug</name><argument_list pos:start="2255:25" pos:end="2255:39">(<argument pos:start="2255:26" pos:end="2255:38"><expr pos:start="2255:26" pos:end="2255:38"><literal type="string" pos:start="2255:26" pos:end="2255:38">"HMAC_BUFFER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="2256:17" pos:end="2256:50">return <expr pos:start="2256:24" pos:end="2256:49"><name pos:start="2256:24" pos:end="2256:49">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="block" pos:start="2260:9" pos:end="2260:89">/* compare calculated MIC with the Key MIC and return result (0 means success) */</comment>
        <expr_stmt pos:start="2261:9" pos:end="2261:57"><expr pos:start="2261:9" pos:end="2261:56"><call pos:start="2261:9" pos:end="2261:56"><name pos:start="2261:9" pos:end="2261:18">DEBUG_DUMP</name><argument_list pos:start="2261:19" pos:end="2261:56">(<argument pos:start="2261:20" pos:end="2261:24"><expr pos:start="2261:20" pos:end="2261:24"><literal type="string" pos:start="2261:20" pos:end="2261:24">"mic"</literal></expr></argument>, <argument pos:start="2261:27" pos:end="2261:29"><expr pos:start="2261:27" pos:end="2261:29"><name pos:start="2261:27" pos:end="2261:29">mic</name></expr></argument>, <argument pos:start="2261:32" pos:end="2261:38"><expr pos:start="2261:32" pos:end="2261:38"><name pos:start="2261:32" pos:end="2261:38">mic_len</name></expr></argument>, <argument pos:start="2261:41" pos:end="2261:55"><expr pos:start="2261:41" pos:end="2261:55"><name pos:start="2261:41" pos:end="2261:55">LOG_LEVEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2262:9" pos:end="2262:61"><expr pos:start="2262:9" pos:end="2262:60"><call pos:start="2262:9" pos:end="2262:60"><name pos:start="2262:9" pos:end="2262:18">DEBUG_DUMP</name><argument_list pos:start="2262:19" pos:end="2262:60">(<argument pos:start="2262:20" pos:end="2262:26"><expr pos:start="2262:20" pos:end="2262:26"><literal type="string" pos:start="2262:20" pos:end="2262:26">"c_mic"</literal></expr></argument>, <argument pos:start="2262:29" pos:end="2262:33"><expr pos:start="2262:29" pos:end="2262:33"><name pos:start="2262:29" pos:end="2262:33">c_mic</name></expr></argument>, <argument pos:start="2262:36" pos:end="2262:42"><expr pos:start="2262:36" pos:end="2262:42"><name pos:start="2262:36" pos:end="2262:42">mic_len</name></expr></argument>, <argument pos:start="2262:45" pos:end="2262:59"><expr pos:start="2262:45" pos:end="2262:59"><name pos:start="2262:45" pos:end="2262:59">LOG_LEVEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2263:9" pos:end="2263:43">return <expr pos:start="2263:16" pos:end="2263:42"><call pos:start="2263:16" pos:end="2263:42"><name pos:start="2263:16" pos:end="2263:21">memcmp</name><argument_list pos:start="2263:22" pos:end="2263:42">(<argument pos:start="2263:23" pos:end="2263:25"><expr pos:start="2263:23" pos:end="2263:25"><name pos:start="2263:23" pos:end="2263:25">mic</name></expr></argument>, <argument pos:start="2263:28" pos:end="2263:32"><expr pos:start="2263:28" pos:end="2263:32"><name pos:start="2263:28" pos:end="2263:32">c_mic</name></expr></argument>, <argument pos:start="2263:35" pos:end="2263:41"><expr pos:start="2263:35" pos:end="2263:41"><name pos:start="2263:35" pos:end="2263:41">mic_len</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" pos:start="2266:5" pos:end="2283:7">/* IEEE 802.11-2016 Chapter 13.8.4 FT authentication sequence: contents of third message
     * IEEE 802.11-2016 Chapter 13.8.5 FT authentication sequence: contents of fourth message
     * The MIC shall be calculated on the concatenation of the following data, in the order given here:
     * &#8212;
     * &#8212; FTO&#8217;s MAC address (6 octets)
     * &#8212; Target AP&#8217;s MAC address (6 octets)
     * If third message:
     * &#8212; Transaction sequence number (1 octet), which shall be set to the value 5 if this is a
     *   Reassociation Request frame and, otherwise, set to the value 3
     * If fourth message:
     * &#8212; Transaction sequence number (1 octet), which shall be set to the value 6 if this is a
     *   Reassociation Response frame or, otherwise, set to the value 4
     *
     * &#8212; RSNE
     * &#8212; MDE
     * &#8212; FTE, with the MIC field of the FTE set to 0
     * &#8212; Contents of the RIC-Response (if present)
     */</comment>
    <function pos:start="2284:5" pos:end="2365:5"><type pos:start="2284:5" pos:end="2284:15"><specifier pos:start="2284:5" pos:end="2284:10">static</specifier> <name pos:start="2284:12" pos:end="2284:15">gint</name></type>
    <name pos:start="2285:5" pos:end="2285:26">Dot11DecryptFtMicCheck</name><parameter_list pos:start="2285:27" pos:end="2288:23">(
        <parameter pos:start="2286:9" pos:end="2286:53"><decl pos:start="2286:9" pos:end="2286:53"><type pos:start="2286:9" pos:end="2286:53"><specifier pos:start="2286:9" pos:end="2286:13">const</specifier> <name pos:start="2286:15" pos:end="2286:40">PDOT11DECRYPT_ASSOC_PARSED</name></type> <name pos:start="2286:42" pos:end="2286:53">assoc_parsed</name></decl></parameter>,
        <parameter pos:start="2287:9" pos:end="2287:25"><decl pos:start="2287:9" pos:end="2287:25"><type pos:start="2287:9" pos:end="2287:25"><specifier pos:start="2287:9" pos:end="2287:13">const</specifier> <name pos:start="2287:15" pos:end="2287:20">guint8</name> <modifier pos:start="2287:22" pos:end="2287:22">*</modifier></type><name pos:start="2287:23" pos:end="2287:25">kck</name></decl></parameter>,
        <parameter pos:start="2288:9" pos:end="2288:22"><decl pos:start="2288:9" pos:end="2288:22"><type pos:start="2288:9" pos:end="2288:22"><name pos:start="2288:9" pos:end="2288:14">size_t</name></type> <name pos:start="2288:16" pos:end="2288:22">kck_len</name></decl></parameter>)</parameter_list>
    <block pos:start="2289:5" pos:end="2365:5">{<block_content pos:start="2290:9" pos:end="2364:40">
        <decl_stmt pos:start="2290:9" pos:end="2290:20"><decl pos:start="2290:9" pos:end="2290:19"><type pos:start="2290:9" pos:end="2290:16"><name pos:start="2290:9" pos:end="2290:14">guint8</name> <modifier pos:start="2290:16" pos:end="2290:16">*</modifier></type><name pos:start="2290:17" pos:end="2290:19">sta</name></decl>;</decl_stmt>
        <decl_stmt pos:start="2291:9" pos:end="2291:23"><decl pos:start="2291:9" pos:end="2291:22"><type pos:start="2291:9" pos:end="2291:14"><name pos:start="2291:9" pos:end="2291:14">guint8</name></type> <name pos:start="2291:16" pos:end="2291:22">seq_num</name></decl>;</decl_stmt>
        <decl_stmt pos:start="2292:9" pos:end="2292:23"><decl pos:start="2292:9" pos:end="2292:22"><type pos:start="2292:9" pos:end="2292:14"><name pos:start="2292:9" pos:end="2292:14">guint8</name></type> <name pos:start="2292:16" pos:end="2292:22">fte_len</name></decl>;</decl_stmt>
        <decl_stmt pos:start="2293:9" pos:end="2293:24"><decl pos:start="2293:9" pos:end="2293:23"><type pos:start="2293:9" pos:end="2293:15"><name pos:start="2293:9" pos:end="2293:15">guint16</name></type> <name pos:start="2293:17" pos:end="2293:23">mic_len</name></decl>;</decl_stmt>
        <decl_stmt pos:start="2294:9" pos:end="2294:31"><decl pos:start="2294:9" pos:end="2294:30"><type pos:start="2294:9" pos:end="2294:14"><name pos:start="2294:9" pos:end="2294:14">guint8</name></type> <name pos:start="2294:16" pos:end="2294:24"><name pos:start="2294:16" pos:end="2294:20">zeros</name><index pos:start="2294:21" pos:end="2294:24">[<expr pos:start="2294:22" pos:end="2294:23"><literal type="number" pos:start="2294:22" pos:end="2294:23">16</literal></expr>]</index></name> <init pos:start="2294:26" pos:end="2294:30">= <expr pos:start="2294:28" pos:end="2294:30"><block pos:start="2294:28" pos:end="2294:30">{<expr pos:start="2294:29" pos:end="2294:29"><literal type="number" pos:start="2294:29" pos:end="2294:29">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="2295:9" pos:end="2295:29"><decl pos:start="2295:9" pos:end="2295:28"><type pos:start="2295:9" pos:end="2295:21"><name pos:start="2295:9" pos:end="2295:21">gcry_mac_hd_t</name></type> <name pos:start="2295:23" pos:end="2295:28">handle</name></decl>;</decl_stmt>

        <expr_stmt pos:start="2297:9" pos:end="2297:47"><expr pos:start="2297:9" pos:end="2297:46"><name pos:start="2297:9" pos:end="2297:15">fte_len</name> <operator pos:start="2297:17" pos:end="2297:17">=</operator> <name pos:start="2297:19" pos:end="2297:42"><name pos:start="2297:19" pos:end="2297:30">assoc_parsed</name><operator pos:start="2297:31" pos:end="2297:32">-&gt;</operator><name pos:start="2297:33" pos:end="2297:39">fte_tag</name><index pos:start="2297:40" pos:end="2297:42">[<expr pos:start="2297:41" pos:end="2297:41"><literal type="number" pos:start="2297:41" pos:end="2297:41">1</literal></expr>]</index></name> <operator pos:start="2297:44" pos:end="2297:44">+</operator> <literal type="number" pos:start="2297:46" pos:end="2297:46">2</literal></expr>;</expr_stmt>
        <if_stmt pos:start="2298:9" pos:end="2302:9"><if pos:start="2298:9" pos:end="2302:9">if <condition pos:start="2298:12" pos:end="2298:25">(<expr pos:start="2298:13" pos:end="2298:24"><name pos:start="2298:13" pos:end="2298:19">fte_len</name> <operator pos:start="2298:21" pos:end="2298:21">&lt;</operator> <literal type="number" pos:start="2298:23" pos:end="2298:24">20</literal></expr>)</condition>
        <block pos:start="2299:9" pos:end="2302:9">{<block_content pos:start="2300:13" pos:end="2301:46">
            <expr_stmt pos:start="2300:13" pos:end="2300:38"><expr pos:start="2300:13" pos:end="2300:37"><call pos:start="2300:13" pos:end="2300:37"><name pos:start="2300:13" pos:end="2300:20">ws_debug</name><argument_list pos:start="2300:21" pos:end="2300:37">(<argument pos:start="2300:22" pos:end="2300:36"><expr pos:start="2300:22" pos:end="2300:36"><literal type="string" pos:start="2300:22" pos:end="2300:36">"FTE too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2301:13" pos:end="2301:46">return <expr pos:start="2301:20" pos:end="2301:45"><name pos:start="2301:20" pos:end="2301:45">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <switch pos:start="2304:9" pos:end="2324:9">switch <condition pos:start="2304:16" pos:end="2304:44">(<expr pos:start="2304:17" pos:end="2304:43"><name pos:start="2304:17" pos:end="2304:43"><name pos:start="2304:17" pos:end="2304:28">assoc_parsed</name><operator pos:start="2304:29" pos:end="2304:30">-&gt;</operator><name pos:start="2304:31" pos:end="2304:43">frame_subtype</name></name></expr>)</condition>
        <block pos:start="2305:9" pos:end="2324:9">{<block_content pos:start="2306:9" pos:end="2323:46">
        <case pos:start="2306:9" pos:end="2306:44">case <expr pos:start="2306:14" pos:end="2306:43"><name pos:start="2306:14" pos:end="2306:43">DOT11DECRYPT_SUBTYPE_ASSOC_REQ</name></expr>:</case>
            <expr_stmt pos:start="2307:13" pos:end="2307:35"><expr pos:start="2307:13" pos:end="2307:34"><name pos:start="2307:13" pos:end="2307:15">sta</name> <operator pos:start="2307:17" pos:end="2307:17">=</operator> <name pos:start="2307:19" pos:end="2307:34"><name pos:start="2307:19" pos:end="2307:30">assoc_parsed</name><operator pos:start="2307:31" pos:end="2307:32">-&gt;</operator><name pos:start="2307:33" pos:end="2307:34">sa</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="2308:13" pos:end="2308:24"><expr pos:start="2308:13" pos:end="2308:23"><name pos:start="2308:13" pos:end="2308:19">seq_num</name> <operator pos:start="2308:21" pos:end="2308:21">=</operator> <literal type="number" pos:start="2308:23" pos:end="2308:23">3</literal></expr>;</expr_stmt>
            <break pos:start="2309:13" pos:end="2309:18">break;</break>
        <case pos:start="2310:9" pos:end="2310:45">case <expr pos:start="2310:14" pos:end="2310:44"><name pos:start="2310:14" pos:end="2310:44">DOT11DECRYPT_SUBTYPE_ASSOC_RESP</name></expr>:</case>
            <expr_stmt pos:start="2311:13" pos:end="2311:35"><expr pos:start="2311:13" pos:end="2311:34"><name pos:start="2311:13" pos:end="2311:15">sta</name> <operator pos:start="2311:17" pos:end="2311:17">=</operator> <name pos:start="2311:19" pos:end="2311:34"><name pos:start="2311:19" pos:end="2311:30">assoc_parsed</name><operator pos:start="2311:31" pos:end="2311:32">-&gt;</operator><name pos:start="2311:33" pos:end="2311:34">da</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="2312:13" pos:end="2312:24"><expr pos:start="2312:13" pos:end="2312:23"><name pos:start="2312:13" pos:end="2312:19">seq_num</name> <operator pos:start="2312:21" pos:end="2312:21">=</operator> <literal type="number" pos:start="2312:23" pos:end="2312:23">4</literal></expr>;</expr_stmt>
            <break pos:start="2313:13" pos:end="2313:18">break;</break>
        <case pos:start="2314:9" pos:end="2314:46">case <expr pos:start="2314:14" pos:end="2314:45"><name pos:start="2314:14" pos:end="2314:45">DOT11DECRYPT_SUBTYPE_REASSOC_REQ</name></expr>:</case>
            <expr_stmt pos:start="2315:13" pos:end="2315:35"><expr pos:start="2315:13" pos:end="2315:34"><name pos:start="2315:13" pos:end="2315:15">sta</name> <operator pos:start="2315:17" pos:end="2315:17">=</operator> <name pos:start="2315:19" pos:end="2315:34"><name pos:start="2315:19" pos:end="2315:30">assoc_parsed</name><operator pos:start="2315:31" pos:end="2315:32">-&gt;</operator><name pos:start="2315:33" pos:end="2315:34">sa</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="2316:13" pos:end="2316:24"><expr pos:start="2316:13" pos:end="2316:23"><name pos:start="2316:13" pos:end="2316:19">seq_num</name> <operator pos:start="2316:21" pos:end="2316:21">=</operator> <literal type="number" pos:start="2316:23" pos:end="2316:23">5</literal></expr>;</expr_stmt>
            <break pos:start="2317:13" pos:end="2317:18">break;</break>
        <case pos:start="2318:9" pos:end="2318:47">case <expr pos:start="2318:14" pos:end="2318:46"><name pos:start="2318:14" pos:end="2318:46">DOT11DECRYPT_SUBTYPE_REASSOC_RESP</name></expr>:</case>
            <expr_stmt pos:start="2319:13" pos:end="2319:35"><expr pos:start="2319:13" pos:end="2319:34"><name pos:start="2319:13" pos:end="2319:15">sta</name> <operator pos:start="2319:17" pos:end="2319:17">=</operator> <name pos:start="2319:19" pos:end="2319:34"><name pos:start="2319:19" pos:end="2319:30">assoc_parsed</name><operator pos:start="2319:31" pos:end="2319:32">-&gt;</operator><name pos:start="2319:33" pos:end="2319:34">da</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="2320:13" pos:end="2320:24"><expr pos:start="2320:13" pos:end="2320:23"><name pos:start="2320:13" pos:end="2320:19">seq_num</name> <operator pos:start="2320:21" pos:end="2320:21">=</operator> <literal type="number" pos:start="2320:23" pos:end="2320:23">6</literal></expr>;</expr_stmt>
            <break pos:start="2321:13" pos:end="2321:18">break;</break>
        <default pos:start="2322:9" pos:end="2322:16">default:</default>
            <return pos:start="2323:13" pos:end="2323:46">return <expr pos:start="2323:20" pos:end="2323:45"><name pos:start="2323:20" pos:end="2323:45">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></switch>

        <if_stmt pos:start="2326:9" pos:end="2330:9"><if pos:start="2326:9" pos:end="2330:9">if <condition pos:start="2326:12" pos:end="2326:63">(<expr pos:start="2326:13" pos:end="2326:62"><call pos:start="2326:13" pos:end="2326:62"><name pos:start="2326:13" pos:end="2326:25">gcry_mac_open</name><argument_list pos:start="2326:26" pos:end="2326:62">(<argument pos:start="2326:27" pos:end="2326:33"><expr pos:start="2326:27" pos:end="2326:33"><operator pos:start="2326:27" pos:end="2326:27">&amp;</operator><name pos:start="2326:28" pos:end="2326:33">handle</name></expr></argument>, <argument pos:start="2326:36" pos:end="2326:52"><expr pos:start="2326:36" pos:end="2326:52"><name pos:start="2326:36" pos:end="2326:52">GCRY_MAC_CMAC_AES</name></expr></argument>, <argument pos:start="2326:55" pos:end="2326:55"><expr pos:start="2326:55" pos:end="2326:55"><literal type="number" pos:start="2326:55" pos:end="2326:55">0</literal></expr></argument>, <argument pos:start="2326:58" pos:end="2326:61"><expr pos:start="2326:58" pos:end="2326:61"><name pos:start="2326:58" pos:end="2326:61">NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block pos:start="2327:9" pos:end="2330:9">{<block_content pos:start="2328:13" pos:end="2329:46">
            <expr_stmt pos:start="2328:13" pos:end="2328:47"><expr pos:start="2328:13" pos:end="2328:46"><call pos:start="2328:13" pos:end="2328:46"><name pos:start="2328:13" pos:end="2328:22">ws_warning</name><argument_list pos:start="2328:23" pos:end="2328:46">(<argument pos:start="2328:24" pos:end="2328:45"><expr pos:start="2328:24" pos:end="2328:45"><literal type="string" pos:start="2328:24" pos:end="2328:45">"gcry_mac_open failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2329:13" pos:end="2329:46">return <expr pos:start="2329:20" pos:end="2329:45"><name pos:start="2329:20" pos:end="2329:45">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="2331:9" pos:end="2336:9"><if pos:start="2331:9" pos:end="2336:9">if <condition pos:start="2331:12" pos:end="2331:50">(<expr pos:start="2331:13" pos:end="2331:49"><call pos:start="2331:13" pos:end="2331:49"><name pos:start="2331:13" pos:end="2331:27">gcry_mac_setkey</name><argument_list pos:start="2331:28" pos:end="2331:49">(<argument pos:start="2331:29" pos:end="2331:34"><expr pos:start="2331:29" pos:end="2331:34"><name pos:start="2331:29" pos:end="2331:34">handle</name></expr></argument>, <argument pos:start="2331:37" pos:end="2331:39"><expr pos:start="2331:37" pos:end="2331:39"><name pos:start="2331:37" pos:end="2331:39">kck</name></expr></argument>, <argument pos:start="2331:42" pos:end="2331:48"><expr pos:start="2331:42" pos:end="2331:48"><name pos:start="2331:42" pos:end="2331:48">kck_len</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block pos:start="2332:9" pos:end="2336:9">{<block_content pos:start="2333:13" pos:end="2335:46">
            <expr_stmt pos:start="2333:13" pos:end="2333:49"><expr pos:start="2333:13" pos:end="2333:48"><call pos:start="2333:13" pos:end="2333:48"><name pos:start="2333:13" pos:end="2333:22">ws_warning</name><argument_list pos:start="2333:23" pos:end="2333:48">(<argument pos:start="2333:24" pos:end="2333:47"><expr pos:start="2333:24" pos:end="2333:47"><literal type="string" pos:start="2333:24" pos:end="2333:47">"gcry_mac_setkey failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2334:13" pos:end="2334:35"><expr pos:start="2334:13" pos:end="2334:34"><call pos:start="2334:13" pos:end="2334:34"><name pos:start="2334:13" pos:end="2334:26">gcry_mac_close</name><argument_list pos:start="2334:27" pos:end="2334:34">(<argument pos:start="2334:28" pos:end="2334:33"><expr pos:start="2334:28" pos:end="2334:33"><name pos:start="2334:28" pos:end="2334:33">handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2335:13" pos:end="2335:46">return <expr pos:start="2335:20" pos:end="2335:45"><name pos:start="2335:20" pos:end="2335:45">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="2337:9" pos:end="2337:58"><expr pos:start="2337:9" pos:end="2337:57"><call pos:start="2337:9" pos:end="2337:57"><name pos:start="2337:9" pos:end="2337:22">gcry_mac_write</name><argument_list pos:start="2337:23" pos:end="2337:57">(<argument pos:start="2337:24" pos:end="2337:29"><expr pos:start="2337:24" pos:end="2337:29"><name pos:start="2337:24" pos:end="2337:29">handle</name></expr></argument>, <argument pos:start="2337:32" pos:end="2337:34"><expr pos:start="2337:32" pos:end="2337:34"><name pos:start="2337:32" pos:end="2337:34">sta</name></expr></argument>, <argument pos:start="2337:37" pos:end="2337:56"><expr pos:start="2337:37" pos:end="2337:56"><name pos:start="2337:37" pos:end="2337:56">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2338:9" pos:end="2338:74"><expr pos:start="2338:9" pos:end="2338:73"><call pos:start="2338:9" pos:end="2338:73"><name pos:start="2338:9" pos:end="2338:22">gcry_mac_write</name><argument_list pos:start="2338:23" pos:end="2338:73">(<argument pos:start="2338:24" pos:end="2338:29"><expr pos:start="2338:24" pos:end="2338:29"><name pos:start="2338:24" pos:end="2338:29">handle</name></expr></argument>, <argument pos:start="2338:32" pos:end="2338:50"><expr pos:start="2338:32" pos:end="2338:50"><name pos:start="2338:32" pos:end="2338:50"><name pos:start="2338:32" pos:end="2338:43">assoc_parsed</name><operator pos:start="2338:44" pos:end="2338:45">-&gt;</operator><name pos:start="2338:46" pos:end="2338:50">bssid</name></name></expr></argument>, <argument pos:start="2338:53" pos:end="2338:72"><expr pos:start="2338:53" pos:end="2338:72"><name pos:start="2338:53" pos:end="2338:72">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2340:9" pos:end="2340:44"><expr pos:start="2340:9" pos:end="2340:43"><call pos:start="2340:9" pos:end="2340:43"><name pos:start="2340:9" pos:end="2340:22">gcry_mac_write</name><argument_list pos:start="2340:23" pos:end="2340:43">(<argument pos:start="2340:24" pos:end="2340:29"><expr pos:start="2340:24" pos:end="2340:29"><name pos:start="2340:24" pos:end="2340:29">handle</name></expr></argument>, <argument pos:start="2340:32" pos:end="2340:39"><expr pos:start="2340:32" pos:end="2340:39"><operator pos:start="2340:32" pos:end="2340:32">&amp;</operator><name pos:start="2340:33" pos:end="2340:39">seq_num</name></expr></argument>, <argument pos:start="2340:42" pos:end="2340:42"><expr pos:start="2340:42" pos:end="2340:42"><literal type="number" pos:start="2340:42" pos:end="2340:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2342:9" pos:end="2342:86"><expr pos:start="2342:9" pos:end="2342:85"><call pos:start="2342:9" pos:end="2342:85"><name pos:start="2342:9" pos:end="2342:22">gcry_mac_write</name><argument_list pos:start="2342:23" pos:end="2342:85">(<argument pos:start="2342:24" pos:end="2342:29"><expr pos:start="2342:24" pos:end="2342:29"><name pos:start="2342:24" pos:end="2342:29">handle</name></expr></argument>, <argument pos:start="2342:32" pos:end="2342:53"><expr pos:start="2342:32" pos:end="2342:53"><name pos:start="2342:32" pos:end="2342:53"><name pos:start="2342:32" pos:end="2342:43">assoc_parsed</name><operator pos:start="2342:44" pos:end="2342:45">-&gt;</operator><name pos:start="2342:46" pos:end="2342:53">rsne_tag</name></name></expr></argument>, <argument pos:start="2342:56" pos:end="2342:84"><expr pos:start="2342:56" pos:end="2342:84"><name pos:start="2342:56" pos:end="2342:80"><name pos:start="2342:56" pos:end="2342:67">assoc_parsed</name><operator pos:start="2342:68" pos:end="2342:69">-&gt;</operator><name pos:start="2342:70" pos:end="2342:77">rsne_tag</name><index pos:start="2342:78" pos:end="2342:80">[<expr pos:start="2342:79" pos:end="2342:79"><literal type="number" pos:start="2342:79" pos:end="2342:79">1</literal></expr>]</index></name> <operator pos:start="2342:82" pos:end="2342:82">+</operator> <literal type="number" pos:start="2342:84" pos:end="2342:84">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2343:9" pos:end="2343:84"><expr pos:start="2343:9" pos:end="2343:83"><call pos:start="2343:9" pos:end="2343:83"><name pos:start="2343:9" pos:end="2343:22">gcry_mac_write</name><argument_list pos:start="2343:23" pos:end="2343:83">(<argument pos:start="2343:24" pos:end="2343:29"><expr pos:start="2343:24" pos:end="2343:29"><name pos:start="2343:24" pos:end="2343:29">handle</name></expr></argument>, <argument pos:start="2343:32" pos:end="2343:52"><expr pos:start="2343:32" pos:end="2343:52"><name pos:start="2343:32" pos:end="2343:52"><name pos:start="2343:32" pos:end="2343:43">assoc_parsed</name><operator pos:start="2343:44" pos:end="2343:45">-&gt;</operator><name pos:start="2343:46" pos:end="2343:52">mde_tag</name></name></expr></argument>, <argument pos:start="2343:55" pos:end="2343:82"><expr pos:start="2343:55" pos:end="2343:82"><name pos:start="2343:55" pos:end="2343:78"><name pos:start="2343:55" pos:end="2343:66">assoc_parsed</name><operator pos:start="2343:67" pos:end="2343:68">-&gt;</operator><name pos:start="2343:69" pos:end="2343:75">mde_tag</name><index pos:start="2343:76" pos:end="2343:78">[<expr pos:start="2343:77" pos:end="2343:77"><literal type="number" pos:start="2343:77" pos:end="2343:77">1</literal></expr>]</index></name> <operator pos:start="2343:80" pos:end="2343:80">+</operator> <literal type="number" pos:start="2343:82" pos:end="2343:82">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2345:9" pos:end="2345:44"><expr pos:start="2345:9" pos:end="2345:43"><name pos:start="2345:9" pos:end="2345:15">mic_len</name> <operator pos:start="2345:17" pos:end="2345:17">=</operator> <name pos:start="2345:19" pos:end="2345:43"><name pos:start="2345:19" pos:end="2345:30">assoc_parsed</name><operator pos:start="2345:31" pos:end="2345:32">-&gt;</operator><name pos:start="2345:33" pos:end="2345:35">fte</name><operator pos:start="2345:36" pos:end="2345:36">.</operator><name pos:start="2345:37" pos:end="2345:43">mic_len</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="2346:9" pos:end="2346:57"><expr pos:start="2346:9" pos:end="2346:56"><call pos:start="2346:9" pos:end="2346:56"><name pos:start="2346:9" pos:end="2346:22">gcry_mac_write</name><argument_list pos:start="2346:23" pos:end="2346:56">(<argument pos:start="2346:24" pos:end="2346:29"><expr pos:start="2346:24" pos:end="2346:29"><name pos:start="2346:24" pos:end="2346:29">handle</name></expr></argument>, <argument pos:start="2346:32" pos:end="2346:52"><expr pos:start="2346:32" pos:end="2346:52"><name pos:start="2346:32" pos:end="2346:52"><name pos:start="2346:32" pos:end="2346:43">assoc_parsed</name><operator pos:start="2346:44" pos:end="2346:45">-&gt;</operator><name pos:start="2346:46" pos:end="2346:52">fte_tag</name></name></expr></argument>, <argument pos:start="2346:55" pos:end="2346:55"><expr pos:start="2346:55" pos:end="2346:55"><literal type="number" pos:start="2346:55" pos:end="2346:55">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2347:9" pos:end="2347:47"><expr pos:start="2347:9" pos:end="2347:46"><call pos:start="2347:9" pos:end="2347:46"><name pos:start="2347:9" pos:end="2347:22">gcry_mac_write</name><argument_list pos:start="2347:23" pos:end="2347:46">(<argument pos:start="2347:24" pos:end="2347:29"><expr pos:start="2347:24" pos:end="2347:29"><name pos:start="2347:24" pos:end="2347:29">handle</name></expr></argument>, <argument pos:start="2347:32" pos:end="2347:36"><expr pos:start="2347:32" pos:end="2347:36"><name pos:start="2347:32" pos:end="2347:36">zeros</name></expr></argument>, <argument pos:start="2347:39" pos:end="2347:45"><expr pos:start="2347:39" pos:end="2347:45"><name pos:start="2347:39" pos:end="2347:45">mic_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="2347:49" pos:end="2347:64">/* MIC zeroed */</comment>
        <expr_stmt pos:start="2348:9" pos:end="2348:91"><expr pos:start="2348:9" pos:end="2348:90"><call pos:start="2348:9" pos:end="2348:90"><name pos:start="2348:9" pos:end="2348:22">gcry_mac_write</name><argument_list pos:start="2348:23" pos:end="2348:90">(<argument pos:start="2348:24" pos:end="2348:29"><expr pos:start="2348:24" pos:end="2348:29"><name pos:start="2348:24" pos:end="2348:29">handle</name></expr></argument>, <argument pos:start="2348:32" pos:end="2348:66"><expr pos:start="2348:32" pos:end="2348:66"><name pos:start="2348:32" pos:end="2348:52"><name pos:start="2348:32" pos:end="2348:43">assoc_parsed</name><operator pos:start="2348:44" pos:end="2348:45">-&gt;</operator><name pos:start="2348:46" pos:end="2348:52">fte_tag</name></name> <operator pos:start="2348:54" pos:end="2348:54">+</operator> <literal type="number" pos:start="2348:56" pos:end="2348:58">4</literal> <operator pos:start="2348:58" pos:end="2348:58">+</operator> <name pos:start="2348:60" pos:end="2348:66">mic_len</name></expr></argument>, <argument pos:start="2348:69" pos:end="2348:89"><expr pos:start="2348:69" pos:end="2348:89"><name pos:start="2348:69" pos:end="2348:75">fte_len</name> <operator pos:start="2348:77" pos:end="2348:77">-</operator> <literal type="number" pos:start="2348:79" pos:end="2348:81">4</literal> <operator pos:start="2348:81" pos:end="2348:81">-</operator> <name pos:start="2348:83" pos:end="2348:89">mic_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2350:9" pos:end="2353:9"><if pos:start="2350:9" pos:end="2353:9">if <condition pos:start="2350:12" pos:end="2350:34">(<expr pos:start="2350:13" pos:end="2350:33"><name pos:start="2350:13" pos:end="2350:33"><name pos:start="2350:13" pos:end="2350:24">assoc_parsed</name><operator pos:start="2350:25" pos:end="2350:26">-&gt;</operator><name pos:start="2350:27" pos:end="2350:33">rde_tag</name></name></expr>)</condition>
        <block pos:start="2351:9" pos:end="2353:9">{<block_content pos:start="2352:13" pos:end="2352:88">
            <expr_stmt pos:start="2352:13" pos:end="2352:88"><expr pos:start="2352:13" pos:end="2352:87"><call pos:start="2352:13" pos:end="2352:87"><name pos:start="2352:13" pos:end="2352:26">gcry_mac_write</name><argument_list pos:start="2352:27" pos:end="2352:87">(<argument pos:start="2352:28" pos:end="2352:33"><expr pos:start="2352:28" pos:end="2352:33"><name pos:start="2352:28" pos:end="2352:33">handle</name></expr></argument>, <argument pos:start="2352:36" pos:end="2352:56"><expr pos:start="2352:36" pos:end="2352:56"><name pos:start="2352:36" pos:end="2352:56"><name pos:start="2352:36" pos:end="2352:47">assoc_parsed</name><operator pos:start="2352:48" pos:end="2352:49">-&gt;</operator><name pos:start="2352:50" pos:end="2352:56">rde_tag</name></name></expr></argument>, <argument pos:start="2352:59" pos:end="2352:86"><expr pos:start="2352:59" pos:end="2352:86"><name pos:start="2352:59" pos:end="2352:82"><name pos:start="2352:59" pos:end="2352:70">assoc_parsed</name><operator pos:start="2352:71" pos:end="2352:72">-&gt;</operator><name pos:start="2352:73" pos:end="2352:79">rde_tag</name><index pos:start="2352:80" pos:end="2352:82">[<expr pos:start="2352:81" pos:end="2352:81"><literal type="number" pos:start="2352:81" pos:end="2352:81">1</literal></expr>]</index></name> <operator pos:start="2352:84" pos:end="2352:84">+</operator> <literal type="number" pos:start="2352:86" pos:end="2352:86">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="2355:9" pos:end="2361:9"><if pos:start="2355:9" pos:end="2361:9">if <condition pos:start="2355:12" pos:end="2355:73">(<expr pos:start="2355:13" pos:end="2355:72"><call pos:start="2355:13" pos:end="2355:67"><name pos:start="2355:13" pos:end="2355:27">gcry_mac_verify</name><argument_list pos:start="2355:28" pos:end="2355:67">(<argument pos:start="2355:29" pos:end="2355:34"><expr pos:start="2355:29" pos:end="2355:34"><name pos:start="2355:29" pos:end="2355:34">handle</name></expr></argument>, <argument pos:start="2355:37" pos:end="2355:57"><expr pos:start="2355:37" pos:end="2355:57"><name pos:start="2355:37" pos:end="2355:57"><name pos:start="2355:37" pos:end="2355:48">assoc_parsed</name><operator pos:start="2355:49" pos:end="2355:50">-&gt;</operator><name pos:start="2355:51" pos:end="2355:53">fte</name><operator pos:start="2355:54" pos:end="2355:54">.</operator><name pos:start="2355:55" pos:end="2355:57">mic</name></name></expr></argument>, <argument pos:start="2355:60" pos:end="2355:66"><expr pos:start="2355:60" pos:end="2355:66"><name pos:start="2355:60" pos:end="2355:66">mic_len</name></expr></argument>)</argument_list></call> <operator pos:start="2355:69" pos:end="2355:70">!=</operator> <literal type="number" pos:start="2355:72" pos:end="2355:72">0</literal></expr>)</condition>
        <block pos:start="2356:9" pos:end="2361:9">{<block_content pos:start="2357:13" pos:end="2360:46">
            <expr_stmt pos:start="2357:13" pos:end="2357:79"><expr pos:start="2357:13" pos:end="2357:78"><call pos:start="2357:13" pos:end="2357:78"><name pos:start="2357:13" pos:end="2357:22">DEBUG_DUMP</name><argument_list pos:start="2357:23" pos:end="2357:78">(<argument pos:start="2357:24" pos:end="2357:28"><expr pos:start="2357:24" pos:end="2357:28"><literal type="string" pos:start="2357:24" pos:end="2357:28">"MIC"</literal></expr></argument>, <argument pos:start="2357:31" pos:end="2357:51"><expr pos:start="2357:31" pos:end="2357:51"><name pos:start="2357:31" pos:end="2357:51"><name pos:start="2357:31" pos:end="2357:42">assoc_parsed</name><operator pos:start="2357:43" pos:end="2357:44">-&gt;</operator><name pos:start="2357:45" pos:end="2357:47">fte</name><operator pos:start="2357:48" pos:end="2357:48">.</operator><name pos:start="2357:49" pos:end="2357:51">mic</name></name></expr></argument>, <argument pos:start="2357:54" pos:end="2357:60"><expr pos:start="2357:54" pos:end="2357:60"><name pos:start="2357:54" pos:end="2357:60">mic_len</name></expr></argument>, <argument pos:start="2357:63" pos:end="2357:77"><expr pos:start="2357:63" pos:end="2357:77"><name pos:start="2357:63" pos:end="2357:77">LOG_LEVEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2358:13" pos:end="2358:48"><expr pos:start="2358:13" pos:end="2358:47"><call pos:start="2358:13" pos:end="2358:47"><name pos:start="2358:13" pos:end="2358:20">ws_debug</name><argument_list pos:start="2358:21" pos:end="2358:47">(<argument pos:start="2358:22" pos:end="2358:46"><expr pos:start="2358:22" pos:end="2358:46"><literal type="string" pos:start="2358:22" pos:end="2358:46">"MIC verification failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2359:13" pos:end="2359:35"><expr pos:start="2359:13" pos:end="2359:34"><call pos:start="2359:13" pos:end="2359:34"><name pos:start="2359:13" pos:end="2359:26">gcry_mac_close</name><argument_list pos:start="2359:27" pos:end="2359:34">(<argument pos:start="2359:28" pos:end="2359:33"><expr pos:start="2359:28" pos:end="2359:33"><name pos:start="2359:28" pos:end="2359:33">handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2360:13" pos:end="2360:46">return <expr pos:start="2360:20" pos:end="2360:45"><name pos:start="2360:20" pos:end="2360:45">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="2362:9" pos:end="2362:75"><expr pos:start="2362:9" pos:end="2362:74"><call pos:start="2362:9" pos:end="2362:74"><name pos:start="2362:9" pos:end="2362:18">DEBUG_DUMP</name><argument_list pos:start="2362:19" pos:end="2362:74">(<argument pos:start="2362:20" pos:end="2362:24"><expr pos:start="2362:20" pos:end="2362:24"><literal type="string" pos:start="2362:20" pos:end="2362:24">"MIC"</literal></expr></argument>, <argument pos:start="2362:27" pos:end="2362:47"><expr pos:start="2362:27" pos:end="2362:47"><name pos:start="2362:27" pos:end="2362:47"><name pos:start="2362:27" pos:end="2362:38">assoc_parsed</name><operator pos:start="2362:39" pos:end="2362:40">-&gt;</operator><name pos:start="2362:41" pos:end="2362:43">fte</name><operator pos:start="2362:44" pos:end="2362:44">.</operator><name pos:start="2362:45" pos:end="2362:47">mic</name></name></expr></argument>, <argument pos:start="2362:50" pos:end="2362:56"><expr pos:start="2362:50" pos:end="2362:56"><name pos:start="2362:50" pos:end="2362:56">mic_len</name></expr></argument>, <argument pos:start="2362:59" pos:end="2362:73"><expr pos:start="2362:59" pos:end="2362:73"><name pos:start="2362:59" pos:end="2362:73">LOG_LEVEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2363:9" pos:end="2363:31"><expr pos:start="2363:9" pos:end="2363:30"><call pos:start="2363:9" pos:end="2363:30"><name pos:start="2363:9" pos:end="2363:22">gcry_mac_close</name><argument_list pos:start="2363:23" pos:end="2363:30">(<argument pos:start="2363:24" pos:end="2363:29"><expr pos:start="2363:24" pos:end="2363:29"><name pos:start="2363:24" pos:end="2363:29">handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2364:9" pos:end="2364:40">return <expr pos:start="2364:16" pos:end="2364:39"><name pos:start="2364:16" pos:end="2364:39">DOT11DECRYPT_RET_SUCCESS</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="2367:5" pos:end="2435:5"><type pos:start="2367:5" pos:end="2367:14"><specifier pos:start="2367:5" pos:end="2367:10">static</specifier> <name pos:start="2367:12" pos:end="2367:14">INT</name></type>
    <name pos:start="2368:5" pos:end="2368:27">Dot11DecryptValidateKey</name><parameter_list pos:start="2368:28" pos:end="2369:35">(
        <parameter pos:start="2369:9" pos:end="2369:34"><decl pos:start="2369:9" pos:end="2369:34"><type pos:start="2369:9" pos:end="2369:30"><name pos:start="2369:9" pos:end="2369:30">PDOT11DECRYPT_KEY_ITEM</name></type> <name pos:start="2369:32" pos:end="2369:34">key</name></decl></parameter>)</parameter_list>
    <block pos:start="2370:5" pos:end="2435:5">{<block_content pos:start="2371:9" pos:end="2434:19">
        <decl_stmt pos:start="2371:9" pos:end="2371:19"><decl pos:start="2371:9" pos:end="2371:18"><type pos:start="2371:9" pos:end="2371:14"><name pos:start="2371:9" pos:end="2371:14">size_t</name></type> <name pos:start="2371:16" pos:end="2371:18">len</name></decl>;</decl_stmt>
        <decl_stmt pos:start="2372:9" pos:end="2372:25"><decl pos:start="2372:9" pos:end="2372:24"><type pos:start="2372:9" pos:end="2372:13"><name pos:start="2372:9" pos:end="2372:13">UCHAR</name></type> <name pos:start="2372:15" pos:end="2372:17">ret</name> <init pos:start="2372:19" pos:end="2372:24">= <expr pos:start="2372:21" pos:end="2372:24"><name pos:start="2372:21" pos:end="2372:24">TRUE</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="2374:9" pos:end="2378:9"><if pos:start="2374:9" pos:end="2378:9">if <condition pos:start="2374:12" pos:end="2374:24">(<expr pos:start="2374:13" pos:end="2374:23"><name pos:start="2374:13" pos:end="2374:15">key</name> <operator pos:start="2374:17" pos:end="2374:18">==</operator> <name pos:start="2374:20" pos:end="2374:23">NULL</name></expr>)</condition>
        <block pos:start="2375:9" pos:end="2378:9">{<block_content pos:start="2376:13" pos:end="2377:25">
            <expr_stmt pos:start="2376:13" pos:end="2376:35"><expr pos:start="2376:13" pos:end="2376:34"><call pos:start="2376:13" pos:end="2376:34"><name pos:start="2376:13" pos:end="2376:22">ws_warning</name><argument_list pos:start="2376:23" pos:end="2376:34">(<argument pos:start="2376:24" pos:end="2376:33"><expr pos:start="2376:24" pos:end="2376:33"><literal type="string" pos:start="2376:24" pos:end="2376:33">"NULL key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2377:13" pos:end="2377:25">return <expr pos:start="2377:20" pos:end="2377:24"><name pos:start="2377:20" pos:end="2377:24">FALSE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <switch pos:start="2380:9" pos:end="2433:9">switch <condition pos:start="2380:16" pos:end="2380:29">(<expr pos:start="2380:17" pos:end="2380:28"><name pos:start="2380:17" pos:end="2380:28"><name pos:start="2380:17" pos:end="2380:19">key</name><operator pos:start="2380:20" pos:end="2380:21">-&gt;</operator><name pos:start="2380:22" pos:end="2380:28">KeyType</name></name></expr>)</condition>
        <block pos:start="2381:9" pos:end="2433:9">{<block_content pos:start="2382:9" pos:end="2432:24">
        <case pos:start="2382:9" pos:end="2382:39">case <expr pos:start="2382:14" pos:end="2382:38"><name pos:start="2382:14" pos:end="2382:38">DOT11DECRYPT_KEY_TYPE_WEP</name></expr>:</case>
            <comment type="block" pos:start="2383:13" pos:end="2383:39">/* check key size limits */</comment>
            <expr_stmt pos:start="2384:13" pos:end="2384:45"><expr pos:start="2384:13" pos:end="2384:44"><name pos:start="2384:13" pos:end="2384:15">len</name> <operator pos:start="2384:17" pos:end="2384:17">=</operator> <name pos:start="2384:19" pos:end="2384:44"><name pos:start="2384:19" pos:end="2384:21">key</name><operator pos:start="2384:22" pos:end="2384:23">-&gt;</operator><name pos:start="2384:24" pos:end="2384:30">KeyData</name><operator pos:start="2384:31" pos:end="2384:31">.</operator><name pos:start="2384:32" pos:end="2384:34">Wep</name><operator pos:start="2384:35" pos:end="2384:35">.</operator><name pos:start="2384:36" pos:end="2384:44">WepKeyLen</name></name></expr>;</expr_stmt>
            <if_stmt pos:start="2385:13" pos:end="2389:13"><if pos:start="2385:13" pos:end="2389:13">if <condition pos:start="2385:16" pos:end="2385:87">(<expr pos:start="2385:17" pos:end="2385:86"><name pos:start="2385:17" pos:end="2385:58"><name pos:start="2385:17" pos:end="2385:19">len</name> <argument_list type="generic" pos:start="2385:21" pos:end="2385:58">&lt; <argument pos:start="2385:23" pos:end="2385:56"><expr pos:start="2385:23" pos:end="2385:56"><name pos:start="2385:23" pos:end="2385:49">DOT11DECRYPT_WEP_KEY_MINLEN</name> <operator pos:start="2385:51" pos:end="2385:52">||</operator> <name pos:start="2385:54" pos:end="2385:56">len</name></expr></argument> &gt;</argument_list></name> <name pos:start="2385:60" pos:end="2385:86">DOT11DECRYPT_WEP_KEY_MAXLEN</name></expr>)</condition>
            <block pos:start="2386:13" pos:end="2389:13">{<block_content pos:start="2387:17" pos:end="2388:28">
                <expr_stmt pos:start="2387:17" pos:end="2387:60"><expr pos:start="2387:17" pos:end="2387:59"><call pos:start="2387:17" pos:end="2387:59"><name pos:start="2387:17" pos:end="2387:23">ws_info</name><argument_list pos:start="2387:24" pos:end="2387:59">(<argument pos:start="2387:25" pos:end="2387:58"><expr pos:start="2387:25" pos:end="2387:58"><literal type="string" pos:start="2387:25" pos:end="2387:58">"WEP key: key length not accepted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2388:17" pos:end="2388:28"><expr pos:start="2388:17" pos:end="2388:27"><name pos:start="2388:17" pos:end="2388:19">ret</name> <operator pos:start="2388:21" pos:end="2388:21">=</operator> <name pos:start="2388:23" pos:end="2388:27">FALSE</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break pos:start="2390:13" pos:end="2390:18">break;</break>

        <case pos:start="2392:9" pos:end="2392:42">case <expr pos:start="2392:14" pos:end="2392:41"><name pos:start="2392:14" pos:end="2392:41">DOT11DECRYPT_KEY_TYPE_WEP_40</name></expr>:</case>
            <comment type="block" pos:start="2393:13" pos:end="2393:72">/* set the standard length and use a generic WEP key type */</comment>
            <expr_stmt pos:start="2394:13" pos:end="2394:69"><expr pos:start="2394:13" pos:end="2394:68"><name pos:start="2394:13" pos:end="2394:38"><name pos:start="2394:13" pos:end="2394:15">key</name><operator pos:start="2394:16" pos:end="2394:17">-&gt;</operator><name pos:start="2394:18" pos:end="2394:24">KeyData</name><operator pos:start="2394:25" pos:end="2394:25">.</operator><name pos:start="2394:26" pos:end="2394:28">Wep</name><operator pos:start="2394:29" pos:end="2394:29">.</operator><name pos:start="2394:30" pos:end="2394:38">WepKeyLen</name></name> <operator pos:start="2394:40" pos:end="2394:40">=</operator> <name pos:start="2394:42" pos:end="2394:68">DOT11DECRYPT_WEP_40_KEY_LEN</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2395:13" pos:end="2395:53"><expr pos:start="2395:13" pos:end="2395:52"><name pos:start="2395:13" pos:end="2395:24"><name pos:start="2395:13" pos:end="2395:15">key</name><operator pos:start="2395:16" pos:end="2395:17">-&gt;</operator><name pos:start="2395:18" pos:end="2395:24">KeyType</name></name> <operator pos:start="2395:26" pos:end="2395:26">=</operator> <name pos:start="2395:28" pos:end="2395:52">DOT11DECRYPT_KEY_TYPE_WEP</name></expr>;</expr_stmt>
            <break pos:start="2396:13" pos:end="2396:18">break;</break>

        <case pos:start="2398:9" pos:end="2398:43">case <expr pos:start="2398:14" pos:end="2398:42"><name pos:start="2398:14" pos:end="2398:42">DOT11DECRYPT_KEY_TYPE_WEP_104</name></expr>:</case>
            <comment type="block" pos:start="2399:13" pos:end="2399:72">/* set the standard length and use a generic WEP key type */</comment>
            <expr_stmt pos:start="2400:13" pos:end="2400:70"><expr pos:start="2400:13" pos:end="2400:69"><name pos:start="2400:13" pos:end="2400:38"><name pos:start="2400:13" pos:end="2400:15">key</name><operator pos:start="2400:16" pos:end="2400:17">-&gt;</operator><name pos:start="2400:18" pos:end="2400:24">KeyData</name><operator pos:start="2400:25" pos:end="2400:25">.</operator><name pos:start="2400:26" pos:end="2400:28">Wep</name><operator pos:start="2400:29" pos:end="2400:29">.</operator><name pos:start="2400:30" pos:end="2400:38">WepKeyLen</name></name> <operator pos:start="2400:40" pos:end="2400:40">=</operator> <name pos:start="2400:42" pos:end="2400:69">DOT11DECRYPT_WEP_104_KEY_LEN</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2401:13" pos:end="2401:53"><expr pos:start="2401:13" pos:end="2401:52"><name pos:start="2401:13" pos:end="2401:24"><name pos:start="2401:13" pos:end="2401:15">key</name><operator pos:start="2401:16" pos:end="2401:17">-&gt;</operator><name pos:start="2401:18" pos:end="2401:24">KeyType</name></name> <operator pos:start="2401:26" pos:end="2401:26">=</operator> <name pos:start="2401:28" pos:end="2401:52">DOT11DECRYPT_KEY_TYPE_WEP</name></expr>;</expr_stmt>
            <break pos:start="2402:13" pos:end="2402:18">break;</break>

        <case pos:start="2404:9" pos:end="2404:43">case <expr pos:start="2404:14" pos:end="2404:42"><name pos:start="2404:14" pos:end="2404:42">DOT11DECRYPT_KEY_TYPE_WPA_PWD</name></expr>:</case>
            <comment type="block" pos:start="2405:13" pos:end="2405:55">/* check passphrase and SSID size limits */</comment>
            <expr_stmt pos:start="2406:13" pos:end="2406:50"><expr pos:start="2406:13" pos:end="2406:49"><name pos:start="2406:13" pos:end="2406:15">len</name> <operator pos:start="2406:17" pos:end="2406:17">=</operator> <call pos:start="2406:19" pos:end="2406:49"><name pos:start="2406:19" pos:end="2406:24">strlen</name><argument_list pos:start="2406:25" pos:end="2406:49">(<argument pos:start="2406:26" pos:end="2406:48"><expr pos:start="2406:26" pos:end="2406:48"><name pos:start="2406:26" pos:end="2406:48"><name pos:start="2406:26" pos:end="2406:28">key</name><operator pos:start="2406:29" pos:end="2406:30">-&gt;</operator><name pos:start="2406:31" pos:end="2406:37">UserPwd</name><operator pos:start="2406:38" pos:end="2406:38">.</operator><name pos:start="2406:39" pos:end="2406:48">Passphrase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2407:13" pos:end="2411:13"><if pos:start="2407:13" pos:end="2411:13">if <condition pos:start="2407:16" pos:end="2407:103">(<expr pos:start="2407:17" pos:end="2407:102"><name pos:start="2407:17" pos:end="2407:66"><name pos:start="2407:17" pos:end="2407:19">len</name> <argument_list type="generic" pos:start="2407:21" pos:end="2407:66">&lt; <argument pos:start="2407:23" pos:end="2407:64"><expr pos:start="2407:23" pos:end="2407:64"><name pos:start="2407:23" pos:end="2407:57">DOT11DECRYPT_WPA_PASSPHRASE_MIN_LEN</name> <operator pos:start="2407:59" pos:end="2407:60">||</operator> <name pos:start="2407:62" pos:end="2407:64">len</name></expr></argument> &gt;</argument_list></name> <name pos:start="2407:68" pos:end="2407:102">DOT11DECRYPT_WPA_PASSPHRASE_MAX_LEN</name></expr>)</condition>
            <block pos:start="2408:13" pos:end="2411:13">{<block_content pos:start="2409:17" pos:end="2410:28">
                <expr_stmt pos:start="2409:17" pos:end="2409:71"><expr pos:start="2409:17" pos:end="2409:70"><call pos:start="2409:17" pos:end="2409:70"><name pos:start="2409:17" pos:end="2409:23">ws_info</name><argument_list pos:start="2409:24" pos:end="2409:70">(<argument pos:start="2409:25" pos:end="2409:69"><expr pos:start="2409:25" pos:end="2409:69"><literal type="string" pos:start="2409:25" pos:end="2409:69">"WPA-PWD key: passphrase length not accepted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2410:17" pos:end="2410:28"><expr pos:start="2410:17" pos:end="2410:27"><name pos:start="2410:17" pos:end="2410:19">ret</name> <operator pos:start="2410:21" pos:end="2410:21">=</operator> <name pos:start="2410:23" pos:end="2410:27">FALSE</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="2413:13" pos:end="2413:39"><expr pos:start="2413:13" pos:end="2413:38"><name pos:start="2413:13" pos:end="2413:15">len</name> <operator pos:start="2413:17" pos:end="2413:17">=</operator> <name pos:start="2413:19" pos:end="2413:38"><name pos:start="2413:19" pos:end="2413:21">key</name><operator pos:start="2413:22" pos:end="2413:23">-&gt;</operator><name pos:start="2413:24" pos:end="2413:30">UserPwd</name><operator pos:start="2413:31" pos:end="2413:31">.</operator><name pos:start="2413:32" pos:end="2413:38">SsidLen</name></name></expr>;</expr_stmt>
            <if_stmt pos:start="2414:13" pos:end="2418:13"><if pos:start="2414:13" pos:end="2418:13">if <condition pos:start="2414:16" pos:end="2414:52">(<expr pos:start="2414:17" pos:end="2414:51"><name pos:start="2414:17" pos:end="2414:19">len</name> <operator pos:start="2414:21" pos:end="2414:21">&gt;</operator> <name pos:start="2414:23" pos:end="2414:51">DOT11DECRYPT_WPA_SSID_MAX_LEN</name></expr>)</condition>
            <block pos:start="2415:13" pos:end="2418:13">{<block_content pos:start="2416:17" pos:end="2417:28">
                <expr_stmt pos:start="2416:17" pos:end="2416:65"><expr pos:start="2416:17" pos:end="2416:64"><call pos:start="2416:17" pos:end="2416:64"><name pos:start="2416:17" pos:end="2416:23">ws_info</name><argument_list pos:start="2416:24" pos:end="2416:64">(<argument pos:start="2416:25" pos:end="2416:63"><expr pos:start="2416:25" pos:end="2416:63"><literal type="string" pos:start="2416:25" pos:end="2416:63">"WPA-PWD key: ssid length not accepted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2417:17" pos:end="2417:28"><expr pos:start="2417:17" pos:end="2417:27"><name pos:start="2417:17" pos:end="2417:19">ret</name> <operator pos:start="2417:21" pos:end="2417:21">=</operator> <name pos:start="2417:23" pos:end="2417:27">FALSE</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break pos:start="2420:13" pos:end="2420:18">break;</break>

        <case pos:start="2422:9" pos:end="2422:43">case <expr pos:start="2422:14" pos:end="2422:42"><name pos:start="2422:14" pos:end="2422:42">DOT11DECRYPT_KEY_TYPE_WPA_PSK</name></expr>:</case>
            <break pos:start="2423:13" pos:end="2423:18">break;</break>

        <case pos:start="2425:9" pos:end="2425:38">case <expr pos:start="2425:14" pos:end="2425:37"><name pos:start="2425:14" pos:end="2425:37">DOT11DECRYPT_KEY_TYPE_TK</name></expr>:</case>
            <break pos:start="2426:13" pos:end="2426:18">break;</break>

        <case pos:start="2428:9" pos:end="2428:39">case <expr pos:start="2428:14" pos:end="2428:38"><name pos:start="2428:14" pos:end="2428:38">DOT11DECRYPT_KEY_TYPE_MSK</name></expr>:</case>
            <break pos:start="2429:13" pos:end="2429:18">break;</break>

        <default pos:start="2431:9" pos:end="2431:16">default:</default>
            <expr_stmt pos:start="2432:13" pos:end="2432:24"><expr pos:start="2432:13" pos:end="2432:23"><name pos:start="2432:13" pos:end="2432:15">ret</name> <operator pos:start="2432:17" pos:end="2432:17">=</operator> <name pos:start="2432:19" pos:end="2432:23">FALSE</name></expr>;</expr_stmt>
        </block_content>}</block></switch>
        <return pos:start="2434:9" pos:end="2434:19">return <expr pos:start="2434:16" pos:end="2434:18"><name pos:start="2434:16" pos:end="2434:18">ret</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="2437:5" pos:end="2489:5"><type pos:start="2437:5" pos:end="2437:14"><specifier pos:start="2437:5" pos:end="2437:10">static</specifier> <name pos:start="2437:12" pos:end="2437:14">INT</name></type>
    <name pos:start="2438:5" pos:end="2438:28">Dot11DecryptGetSaAddress</name><parameter_list pos:start="2438:29" pos:end="2440:44">(
        <parameter pos:start="2439:9" pos:end="2439:49"><decl pos:start="2439:9" pos:end="2439:49"><type pos:start="2439:9" pos:end="2439:49"><specifier pos:start="2439:9" pos:end="2439:13">const</specifier> <name pos:start="2439:15" pos:end="2439:42">DOT11DECRYPT_MAC_FRAME_ADDR4</name> <modifier pos:start="2439:44" pos:end="2439:44">*</modifier></type><name pos:start="2439:45" pos:end="2439:49">frame</name></decl></parameter>,
        <parameter pos:start="2440:9" pos:end="2440:43"><decl pos:start="2440:9" pos:end="2440:43"><type pos:start="2440:9" pos:end="2440:43"><name pos:start="2440:9" pos:end="2440:39">DOT11DECRYPT_SEC_ASSOCIATION_ID</name> <modifier pos:start="2440:41" pos:end="2440:41">*</modifier></type><name pos:start="2440:42" pos:end="2440:43">id</name></decl></parameter>)</parameter_list>
    <block pos:start="2441:5" pos:end="2489:5">{<block_content pos:start="2442:9" pos:end="2488:40">
        <if_stmt pos:start="2442:9" pos:end="2482:9"><if pos:start="2442:9" pos:end="2459:9">if <condition pos:start="2442:12" pos:end="2445:76">(<expr pos:start="2442:13" pos:end="2445:75"><operator pos:start="2442:13" pos:end="2442:13">(</operator><call pos:start="2442:14" pos:end="2442:44"><name pos:start="2442:14" pos:end="2442:30">DOT11DECRYPT_TYPE</name><argument_list pos:start="2442:31" pos:end="2442:44">(<argument pos:start="2442:32" pos:end="2442:43"><expr pos:start="2442:32" pos:end="2442:43"><name pos:start="2442:32" pos:end="2442:43"><name pos:start="2442:32" pos:end="2442:36">frame</name><operator pos:start="2442:37" pos:end="2442:38">-&gt;</operator><name pos:start="2442:39" pos:end="2442:40">fc</name><index pos:start="2442:41" pos:end="2442:43">[<expr pos:start="2442:42" pos:end="2442:42"><literal type="number" pos:start="2442:42" pos:end="2442:42">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="2442:46" pos:end="2442:47">==</operator> <name pos:start="2442:49" pos:end="2442:70">DOT11DECRYPT_TYPE_DATA</name><operator pos:start="2442:71" pos:end="2442:71">)</operator> <operator pos:start="2442:73" pos:end="2442:74">&amp;&amp;</operator>
            <operator pos:start="2443:13" pos:end="2443:13">(</operator><call pos:start="2443:14" pos:end="2443:47"><name pos:start="2443:14" pos:end="2443:33">DOT11DECRYPT_DS_BITS</name><argument_list pos:start="2443:34" pos:end="2443:47">(<argument pos:start="2443:35" pos:end="2443:46"><expr pos:start="2443:35" pos:end="2443:46"><name pos:start="2443:35" pos:end="2443:46"><name pos:start="2443:35" pos:end="2443:39">frame</name><operator pos:start="2443:40" pos:end="2443:41">-&gt;</operator><name pos:start="2443:42" pos:end="2443:43">fc</name><index pos:start="2443:44" pos:end="2443:46">[<expr pos:start="2443:45" pos:end="2443:45"><literal type="number" pos:start="2443:45" pos:end="2443:45">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="2443:49" pos:end="2443:50">==</operator> <literal type="number" pos:start="2443:52" pos:end="2443:52">0</literal><operator pos:start="2443:53" pos:end="2443:53">)</operator> <operator pos:start="2443:55" pos:end="2443:56">&amp;&amp;</operator>
            <operator pos:start="2444:13" pos:end="2444:13">(</operator><call pos:start="2444:14" pos:end="2444:69"><name pos:start="2444:14" pos:end="2444:19">memcmp</name><argument_list pos:start="2444:20" pos:end="2444:69">(<argument pos:start="2444:21" pos:end="2444:32"><expr pos:start="2444:21" pos:end="2444:32"><name pos:start="2444:21" pos:end="2444:32"><name pos:start="2444:21" pos:end="2444:25">frame</name><operator pos:start="2444:26" pos:end="2444:27">-&gt;</operator><name pos:start="2444:28" pos:end="2444:32">addr2</name></name></expr></argument>, <argument pos:start="2444:35" pos:end="2444:46"><expr pos:start="2444:35" pos:end="2444:46"><name pos:start="2444:35" pos:end="2444:46"><name pos:start="2444:35" pos:end="2444:39">frame</name><operator pos:start="2444:40" pos:end="2444:41">-&gt;</operator><name pos:start="2444:42" pos:end="2444:46">addr3</name></name></expr></argument>, <argument pos:start="2444:49" pos:end="2444:68"><expr pos:start="2444:49" pos:end="2444:68"><name pos:start="2444:49" pos:end="2444:68">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="2444:71" pos:end="2444:72">!=</operator> <literal type="number" pos:start="2444:74" pos:end="2444:74">0</literal><operator pos:start="2444:75" pos:end="2444:75">)</operator> <operator pos:start="2444:77" pos:end="2444:78">&amp;&amp;</operator>
            <operator pos:start="2445:13" pos:end="2445:13">(</operator><call pos:start="2445:14" pos:end="2445:69"><name pos:start="2445:14" pos:end="2445:19">memcmp</name><argument_list pos:start="2445:20" pos:end="2445:69">(<argument pos:start="2445:21" pos:end="2445:32"><expr pos:start="2445:21" pos:end="2445:32"><name pos:start="2445:21" pos:end="2445:32"><name pos:start="2445:21" pos:end="2445:25">frame</name><operator pos:start="2445:26" pos:end="2445:27">-&gt;</operator><name pos:start="2445:28" pos:end="2445:32">addr1</name></name></expr></argument>, <argument pos:start="2445:35" pos:end="2445:46"><expr pos:start="2445:35" pos:end="2445:46"><name pos:start="2445:35" pos:end="2445:46"><name pos:start="2445:35" pos:end="2445:39">frame</name><operator pos:start="2445:40" pos:end="2445:41">-&gt;</operator><name pos:start="2445:42" pos:end="2445:46">addr3</name></name></expr></argument>, <argument pos:start="2445:49" pos:end="2445:68"><expr pos:start="2445:49" pos:end="2445:68"><name pos:start="2445:49" pos:end="2445:68">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="2445:71" pos:end="2445:72">!=</operator> <literal type="number" pos:start="2445:74" pos:end="2445:74">0</literal><operator pos:start="2445:75" pos:end="2445:75">)</operator></expr>)</condition>
        <block pos:start="2446:9" pos:end="2459:9">{<block_content pos:start="2449:13" pos:end="2458:13">
            <comment type="block" pos:start="2447:13" pos:end="2448:68">/* DATA frame with fromDS=0 ToDS=0 and neither RA or SA is BSSID
               =&gt; TDLS traffic. Use highest MAC address for bssid */</comment>
            <if_stmt pos:start="2449:13" pos:end="2458:13"><if pos:start="2449:13" pos:end="2453:13">if <condition pos:start="2449:16" pos:end="2449:77">(<expr pos:start="2449:17" pos:end="2449:76"><call pos:start="2449:17" pos:end="2449:72"><name pos:start="2449:17" pos:end="2449:22">memcmp</name><argument_list pos:start="2449:23" pos:end="2449:72">(<argument pos:start="2449:24" pos:end="2449:35"><expr pos:start="2449:24" pos:end="2449:35"><name pos:start="2449:24" pos:end="2449:35"><name pos:start="2449:24" pos:end="2449:28">frame</name><operator pos:start="2449:29" pos:end="2449:30">-&gt;</operator><name pos:start="2449:31" pos:end="2449:35">addr1</name></name></expr></argument>, <argument pos:start="2449:38" pos:end="2449:49"><expr pos:start="2449:38" pos:end="2449:49"><name pos:start="2449:38" pos:end="2449:49"><name pos:start="2449:38" pos:end="2449:42">frame</name><operator pos:start="2449:43" pos:end="2449:44">-&gt;</operator><name pos:start="2449:45" pos:end="2449:49">addr2</name></name></expr></argument>, <argument pos:start="2449:52" pos:end="2449:71"><expr pos:start="2449:52" pos:end="2449:71"><name pos:start="2449:52" pos:end="2449:71">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="2449:74" pos:end="2449:74">&lt;</operator> <literal type="number" pos:start="2449:76" pos:end="2449:76">0</literal></expr>)</condition>
            <block pos:start="2450:13" pos:end="2453:13">{<block_content pos:start="2451:17" pos:end="2452:70">
                <expr_stmt pos:start="2451:17" pos:end="2451:68"><expr pos:start="2451:17" pos:end="2451:67"><call pos:start="2451:17" pos:end="2451:67"><name pos:start="2451:17" pos:end="2451:22">memcpy</name><argument_list pos:start="2451:23" pos:end="2451:67">(<argument pos:start="2451:24" pos:end="2451:30"><expr pos:start="2451:24" pos:end="2451:30"><name pos:start="2451:24" pos:end="2451:30"><name pos:start="2451:24" pos:end="2451:25">id</name><operator pos:start="2451:26" pos:end="2451:27">-&gt;</operator><name pos:start="2451:28" pos:end="2451:30">sta</name></name></expr></argument>, <argument pos:start="2451:33" pos:end="2451:44"><expr pos:start="2451:33" pos:end="2451:44"><name pos:start="2451:33" pos:end="2451:44"><name pos:start="2451:33" pos:end="2451:37">frame</name><operator pos:start="2451:38" pos:end="2451:39">-&gt;</operator><name pos:start="2451:40" pos:end="2451:44">addr1</name></name></expr></argument>, <argument pos:start="2451:47" pos:end="2451:66"><expr pos:start="2451:47" pos:end="2451:66"><name pos:start="2451:47" pos:end="2451:66">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2452:17" pos:end="2452:70"><expr pos:start="2452:17" pos:end="2452:69"><call pos:start="2452:17" pos:end="2452:69"><name pos:start="2452:17" pos:end="2452:22">memcpy</name><argument_list pos:start="2452:23" pos:end="2452:69">(<argument pos:start="2452:24" pos:end="2452:32"><expr pos:start="2452:24" pos:end="2452:32"><name pos:start="2452:24" pos:end="2452:32"><name pos:start="2452:24" pos:end="2452:25">id</name><operator pos:start="2452:26" pos:end="2452:27">-&gt;</operator><name pos:start="2452:28" pos:end="2452:32">bssid</name></name></expr></argument>, <argument pos:start="2452:35" pos:end="2452:46"><expr pos:start="2452:35" pos:end="2452:46"><name pos:start="2452:35" pos:end="2452:46"><name pos:start="2452:35" pos:end="2452:39">frame</name><operator pos:start="2452:40" pos:end="2452:41">-&gt;</operator><name pos:start="2452:42" pos:end="2452:46">addr2</name></name></expr></argument>, <argument pos:start="2452:49" pos:end="2452:68"><expr pos:start="2452:49" pos:end="2452:68"><name pos:start="2452:49" pos:end="2452:68">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else pos:start="2454:13" pos:end="2458:13">else
            <block pos:start="2455:13" pos:end="2458:13">{<block_content pos:start="2456:17" pos:end="2457:70">
                <expr_stmt pos:start="2456:17" pos:end="2456:68"><expr pos:start="2456:17" pos:end="2456:67"><call pos:start="2456:17" pos:end="2456:67"><name pos:start="2456:17" pos:end="2456:22">memcpy</name><argument_list pos:start="2456:23" pos:end="2456:67">(<argument pos:start="2456:24" pos:end="2456:30"><expr pos:start="2456:24" pos:end="2456:30"><name pos:start="2456:24" pos:end="2456:30"><name pos:start="2456:24" pos:end="2456:25">id</name><operator pos:start="2456:26" pos:end="2456:27">-&gt;</operator><name pos:start="2456:28" pos:end="2456:30">sta</name></name></expr></argument>, <argument pos:start="2456:33" pos:end="2456:44"><expr pos:start="2456:33" pos:end="2456:44"><name pos:start="2456:33" pos:end="2456:44"><name pos:start="2456:33" pos:end="2456:37">frame</name><operator pos:start="2456:38" pos:end="2456:39">-&gt;</operator><name pos:start="2456:40" pos:end="2456:44">addr2</name></name></expr></argument>, <argument pos:start="2456:47" pos:end="2456:66"><expr pos:start="2456:47" pos:end="2456:66"><name pos:start="2456:47" pos:end="2456:66">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2457:17" pos:end="2457:70"><expr pos:start="2457:17" pos:end="2457:69"><call pos:start="2457:17" pos:end="2457:69"><name pos:start="2457:17" pos:end="2457:22">memcpy</name><argument_list pos:start="2457:23" pos:end="2457:69">(<argument pos:start="2457:24" pos:end="2457:32"><expr pos:start="2457:24" pos:end="2457:32"><name pos:start="2457:24" pos:end="2457:32"><name pos:start="2457:24" pos:end="2457:25">id</name><operator pos:start="2457:26" pos:end="2457:27">-&gt;</operator><name pos:start="2457:28" pos:end="2457:32">bssid</name></name></expr></argument>, <argument pos:start="2457:35" pos:end="2457:46"><expr pos:start="2457:35" pos:end="2457:46"><name pos:start="2457:35" pos:end="2457:46"><name pos:start="2457:35" pos:end="2457:39">frame</name><operator pos:start="2457:40" pos:end="2457:41">-&gt;</operator><name pos:start="2457:42" pos:end="2457:46">addr1</name></name></expr></argument>, <argument pos:start="2457:49" pos:end="2457:68"><expr pos:start="2457:49" pos:end="2457:68"><name pos:start="2457:49" pos:end="2457:68">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else pos:start="2460:9" pos:end="2482:9">else
        <block pos:start="2461:9" pos:end="2482:9">{<block_content pos:start="2462:13" pos:end="2481:13">
            <decl_stmt pos:start="2462:13" pos:end="2462:30"><decl pos:start="2462:13" pos:end="2462:29"><type pos:start="2462:13" pos:end="2462:25"><specifier pos:start="2462:13" pos:end="2462:17">const</specifier> <name pos:start="2462:19" pos:end="2462:23">UCHAR</name> <modifier pos:start="2462:25" pos:end="2462:25">*</modifier></type><name pos:start="2462:26" pos:end="2462:29">addr</name></decl>;</decl_stmt>

            <comment type="block" pos:start="2464:13" pos:end="2464:52">/* Normal Case: SA between STA and AP */</comment>
            <if_stmt pos:start="2465:13" pos:end="2472:13"><if pos:start="2465:13" pos:end="2468:13">if <condition pos:start="2465:16" pos:end="2465:68">(<expr pos:start="2465:17" pos:end="2465:67"><operator pos:start="2465:17" pos:end="2465:17">(</operator><name pos:start="2465:18" pos:end="2465:21">addr</name> <operator pos:start="2465:23" pos:end="2465:23">=</operator> <call pos:start="2465:25" pos:end="2465:58"><name pos:start="2465:25" pos:end="2465:51">Dot11DecryptGetBssidAddress</name><argument_list pos:start="2465:52" pos:end="2465:58">(<argument pos:start="2465:53" pos:end="2465:57"><expr pos:start="2465:53" pos:end="2465:57"><name pos:start="2465:53" pos:end="2465:57">frame</name></expr></argument>)</argument_list></call><operator pos:start="2465:59" pos:end="2465:59">)</operator> <operator pos:start="2465:61" pos:end="2465:62">!=</operator> <name pos:start="2465:64" pos:end="2465:67">NULL</name></expr>)</condition>
            <block pos:start="2466:13" pos:end="2468:13">{<block_content pos:start="2467:17" pos:end="2467:62">
                <expr_stmt pos:start="2467:17" pos:end="2467:62"><expr pos:start="2467:17" pos:end="2467:61"><call pos:start="2467:17" pos:end="2467:61"><name pos:start="2467:17" pos:end="2467:22">memcpy</name><argument_list pos:start="2467:23" pos:end="2467:61">(<argument pos:start="2467:24" pos:end="2467:32"><expr pos:start="2467:24" pos:end="2467:32"><name pos:start="2467:24" pos:end="2467:32"><name pos:start="2467:24" pos:end="2467:25">id</name><operator pos:start="2467:26" pos:end="2467:27">-&gt;</operator><name pos:start="2467:28" pos:end="2467:32">bssid</name></name></expr></argument>, <argument pos:start="2467:35" pos:end="2467:38"><expr pos:start="2467:35" pos:end="2467:38"><name pos:start="2467:35" pos:end="2467:38">addr</name></expr></argument>, <argument pos:start="2467:41" pos:end="2467:60"><expr pos:start="2467:41" pos:end="2467:60"><name pos:start="2467:41" pos:end="2467:60">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else pos:start="2469:13" pos:end="2472:13">else
            <block pos:start="2470:13" pos:end="2472:13">{<block_content pos:start="2471:17" pos:end="2471:50">
                <return pos:start="2471:17" pos:end="2471:50">return <expr pos:start="2471:24" pos:end="2471:49"><name pos:start="2471:24" pos:end="2471:49">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="2474:13" pos:end="2481:13"><if pos:start="2474:13" pos:end="2477:13">if <condition pos:start="2474:16" pos:end="2474:66">(<expr pos:start="2474:17" pos:end="2474:65"><operator pos:start="2474:17" pos:end="2474:17">(</operator><name pos:start="2474:18" pos:end="2474:21">addr</name> <operator pos:start="2474:23" pos:end="2474:23">=</operator> <call pos:start="2474:25" pos:end="2474:56"><name pos:start="2474:25" pos:end="2474:49">Dot11DecryptGetStaAddress</name><argument_list pos:start="2474:50" pos:end="2474:56">(<argument pos:start="2474:51" pos:end="2474:55"><expr pos:start="2474:51" pos:end="2474:55"><name pos:start="2474:51" pos:end="2474:55">frame</name></expr></argument>)</argument_list></call><operator pos:start="2474:57" pos:end="2474:57">)</operator> <operator pos:start="2474:59" pos:end="2474:60">!=</operator> <name pos:start="2474:62" pos:end="2474:65">NULL</name></expr>)</condition>
            <block pos:start="2475:13" pos:end="2477:13">{<block_content pos:start="2476:17" pos:end="2476:60">
                <expr_stmt pos:start="2476:17" pos:end="2476:60"><expr pos:start="2476:17" pos:end="2476:59"><call pos:start="2476:17" pos:end="2476:59"><name pos:start="2476:17" pos:end="2476:22">memcpy</name><argument_list pos:start="2476:23" pos:end="2476:59">(<argument pos:start="2476:24" pos:end="2476:30"><expr pos:start="2476:24" pos:end="2476:30"><name pos:start="2476:24" pos:end="2476:30"><name pos:start="2476:24" pos:end="2476:25">id</name><operator pos:start="2476:26" pos:end="2476:27">-&gt;</operator><name pos:start="2476:28" pos:end="2476:30">sta</name></name></expr></argument>, <argument pos:start="2476:33" pos:end="2476:36"><expr pos:start="2476:33" pos:end="2476:36"><name pos:start="2476:33" pos:end="2476:36">addr</name></expr></argument>, <argument pos:start="2476:39" pos:end="2476:58"><expr pos:start="2476:39" pos:end="2476:58"><name pos:start="2476:39" pos:end="2476:58">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else pos:start="2478:13" pos:end="2481:13">else
            <block pos:start="2479:13" pos:end="2481:13">{<block_content pos:start="2480:17" pos:end="2480:50">
                <return pos:start="2480:17" pos:end="2480:50">return <expr pos:start="2480:24" pos:end="2480:49"><name pos:start="2480:24" pos:end="2480:49">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt pos:start="2483:9" pos:end="2484:101"><expr pos:start="2483:9" pos:end="2484:100"><call pos:start="2483:9" pos:end="2484:100"><name pos:start="2483:9" pos:end="2483:16">ws_noisy</name><argument_list pos:start="2483:17" pos:end="2484:100">(<argument pos:start="2483:18" pos:end="2483:61"><expr pos:start="2483:18" pos:end="2483:61"><literal type="string" pos:start="2483:18" pos:end="2483:61">"BSSID_MAC: %02X.%02X.%02X.%02X.%02X.%02X\t"</literal></expr></argument>,
                 <argument pos:start="2484:18" pos:end="2484:29"><expr pos:start="2484:18" pos:end="2484:29"><name pos:start="2484:18" pos:end="2484:29"><name pos:start="2484:18" pos:end="2484:19">id</name><operator pos:start="2484:20" pos:end="2484:21">-&gt;</operator><name pos:start="2484:22" pos:end="2484:26">bssid</name><index pos:start="2484:27" pos:end="2484:29">[<expr pos:start="2484:28" pos:end="2484:28"><literal type="number" pos:start="2484:28" pos:end="2484:28">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2484:32" pos:end="2484:43"><expr pos:start="2484:32" pos:end="2484:43"><name pos:start="2484:32" pos:end="2484:43"><name pos:start="2484:32" pos:end="2484:33">id</name><operator pos:start="2484:34" pos:end="2484:35">-&gt;</operator><name pos:start="2484:36" pos:end="2484:40">bssid</name><index pos:start="2484:41" pos:end="2484:43">[<expr pos:start="2484:42" pos:end="2484:42"><literal type="number" pos:start="2484:42" pos:end="2484:42">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="2484:46" pos:end="2484:57"><expr pos:start="2484:46" pos:end="2484:57"><name pos:start="2484:46" pos:end="2484:57"><name pos:start="2484:46" pos:end="2484:47">id</name><operator pos:start="2484:48" pos:end="2484:49">-&gt;</operator><name pos:start="2484:50" pos:end="2484:54">bssid</name><index pos:start="2484:55" pos:end="2484:57">[<expr pos:start="2484:56" pos:end="2484:56"><literal type="number" pos:start="2484:56" pos:end="2484:56">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="2484:60" pos:end="2484:71"><expr pos:start="2484:60" pos:end="2484:71"><name pos:start="2484:60" pos:end="2484:71"><name pos:start="2484:60" pos:end="2484:61">id</name><operator pos:start="2484:62" pos:end="2484:63">-&gt;</operator><name pos:start="2484:64" pos:end="2484:68">bssid</name><index pos:start="2484:69" pos:end="2484:71">[<expr pos:start="2484:70" pos:end="2484:70"><literal type="number" pos:start="2484:70" pos:end="2484:70">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="2484:74" pos:end="2484:85"><expr pos:start="2484:74" pos:end="2484:85"><name pos:start="2484:74" pos:end="2484:85"><name pos:start="2484:74" pos:end="2484:75">id</name><operator pos:start="2484:76" pos:end="2484:77">-&gt;</operator><name pos:start="2484:78" pos:end="2484:82">bssid</name><index pos:start="2484:83" pos:end="2484:85">[<expr pos:start="2484:84" pos:end="2484:84"><literal type="number" pos:start="2484:84" pos:end="2484:84">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="2484:88" pos:end="2484:99"><expr pos:start="2484:88" pos:end="2484:99"><name pos:start="2484:88" pos:end="2484:99"><name pos:start="2484:88" pos:end="2484:89">id</name><operator pos:start="2484:90" pos:end="2484:91">-&gt;</operator><name pos:start="2484:92" pos:end="2484:96">bssid</name><index pos:start="2484:97" pos:end="2484:99">[<expr pos:start="2484:98" pos:end="2484:98"><literal type="number" pos:start="2484:98" pos:end="2484:98">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2485:9" pos:end="2486:89"><expr pos:start="2485:9" pos:end="2486:88"><call pos:start="2485:9" pos:end="2486:88"><name pos:start="2485:9" pos:end="2485:16">ws_noisy</name><argument_list pos:start="2485:17" pos:end="2486:88">(<argument pos:start="2485:18" pos:end="2485:59"><expr pos:start="2485:18" pos:end="2485:59"><literal type="string" pos:start="2485:18" pos:end="2485:59">"STA_MAC: %02X.%02X.%02X.%02X.%02X.%02X\t"</literal></expr></argument>,
                 <argument pos:start="2486:18" pos:end="2486:27"><expr pos:start="2486:18" pos:end="2486:27"><name pos:start="2486:18" pos:end="2486:27"><name pos:start="2486:18" pos:end="2486:19">id</name><operator pos:start="2486:20" pos:end="2486:21">-&gt;</operator><name pos:start="2486:22" pos:end="2486:24">sta</name><index pos:start="2486:25" pos:end="2486:27">[<expr pos:start="2486:26" pos:end="2486:26"><literal type="number" pos:start="2486:26" pos:end="2486:26">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2486:30" pos:end="2486:39"><expr pos:start="2486:30" pos:end="2486:39"><name pos:start="2486:30" pos:end="2486:39"><name pos:start="2486:30" pos:end="2486:31">id</name><operator pos:start="2486:32" pos:end="2486:33">-&gt;</operator><name pos:start="2486:34" pos:end="2486:36">sta</name><index pos:start="2486:37" pos:end="2486:39">[<expr pos:start="2486:38" pos:end="2486:38"><literal type="number" pos:start="2486:38" pos:end="2486:38">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="2486:42" pos:end="2486:51"><expr pos:start="2486:42" pos:end="2486:51"><name pos:start="2486:42" pos:end="2486:51"><name pos:start="2486:42" pos:end="2486:43">id</name><operator pos:start="2486:44" pos:end="2486:45">-&gt;</operator><name pos:start="2486:46" pos:end="2486:48">sta</name><index pos:start="2486:49" pos:end="2486:51">[<expr pos:start="2486:50" pos:end="2486:50"><literal type="number" pos:start="2486:50" pos:end="2486:50">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="2486:54" pos:end="2486:63"><expr pos:start="2486:54" pos:end="2486:63"><name pos:start="2486:54" pos:end="2486:63"><name pos:start="2486:54" pos:end="2486:55">id</name><operator pos:start="2486:56" pos:end="2486:57">-&gt;</operator><name pos:start="2486:58" pos:end="2486:60">sta</name><index pos:start="2486:61" pos:end="2486:63">[<expr pos:start="2486:62" pos:end="2486:62"><literal type="number" pos:start="2486:62" pos:end="2486:62">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="2486:66" pos:end="2486:75"><expr pos:start="2486:66" pos:end="2486:75"><name pos:start="2486:66" pos:end="2486:75"><name pos:start="2486:66" pos:end="2486:67">id</name><operator pos:start="2486:68" pos:end="2486:69">-&gt;</operator><name pos:start="2486:70" pos:end="2486:72">sta</name><index pos:start="2486:73" pos:end="2486:75">[<expr pos:start="2486:74" pos:end="2486:74"><literal type="number" pos:start="2486:74" pos:end="2486:74">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="2486:78" pos:end="2486:87"><expr pos:start="2486:78" pos:end="2486:87"><name pos:start="2486:78" pos:end="2486:87"><name pos:start="2486:78" pos:end="2486:79">id</name><operator pos:start="2486:80" pos:end="2486:81">-&gt;</operator><name pos:start="2486:82" pos:end="2486:84">sta</name><index pos:start="2486:85" pos:end="2486:87">[<expr pos:start="2486:86" pos:end="2486:86"><literal type="number" pos:start="2486:86" pos:end="2486:86">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="2488:9" pos:end="2488:40">return <expr pos:start="2488:16" pos:end="2488:39"><name pos:start="2488:16" pos:end="2488:39">DOT11DECRYPT_RET_SUCCESS</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" pos:start="2491:5" pos:end="2501:7">/*
     * Dot11DecryptGetBssidAddress() and Dot11DecryptGetBssidAddress() are used for
     * key caching.  In each case, it's more important to return a value than
     * to return a _correct_ value, so we fudge addresses in some cases, e.g.
     * the BSSID in bridged connections.
     * FromDS    ToDS   Sta      BSSID
     * 0         0      addr1/2  addr3
     * 0         1      addr2    addr1
     * 1         0      addr1    addr2
     * 1         1      addr2    addr1
     */</comment>

    <function pos:start="2503:5" pos:end="2527:5"><type pos:start="2503:5" pos:end="2503:24"><specifier pos:start="2503:5" pos:end="2503:10">static</specifier> <specifier pos:start="2503:12" pos:end="2503:16">const</specifier> <name pos:start="2503:18" pos:end="2503:22">UCHAR</name> <modifier pos:start="2503:24" pos:end="2503:24">*</modifier></type>
    <name pos:start="2504:5" pos:end="2504:29">Dot11DecryptGetStaAddress</name><parameter_list pos:start="2504:30" pos:end="2505:50">(
        <parameter pos:start="2505:9" pos:end="2505:49"><decl pos:start="2505:9" pos:end="2505:49"><type pos:start="2505:9" pos:end="2505:44"><specifier pos:start="2505:9" pos:end="2505:13">const</specifier> <name pos:start="2505:15" pos:end="2505:42">DOT11DECRYPT_MAC_FRAME_ADDR4</name> <modifier pos:start="2505:44" pos:end="2505:44">*</modifier></type><name pos:start="2505:45" pos:end="2505:49">frame</name></decl></parameter>)</parameter_list>
    <block pos:start="2506:5" pos:end="2527:5">{<block_content pos:start="2507:9" pos:end="2526:9">
        <switch pos:start="2507:9" pos:end="2526:9">switch <condition pos:start="2507:16" pos:end="2507:51">(<expr pos:start="2507:17" pos:end="2507:50"><call pos:start="2507:17" pos:end="2507:50"><name pos:start="2507:17" pos:end="2507:36">DOT11DECRYPT_DS_BITS</name><argument_list pos:start="2507:37" pos:end="2507:50">(<argument pos:start="2507:38" pos:end="2507:49"><expr pos:start="2507:38" pos:end="2507:49"><name pos:start="2507:38" pos:end="2507:49"><name pos:start="2507:38" pos:end="2507:42">frame</name><operator pos:start="2507:43" pos:end="2507:44">-&gt;</operator><name pos:start="2507:45" pos:end="2507:46">fc</name><index pos:start="2507:47" pos:end="2507:49">[<expr pos:start="2507:48" pos:end="2507:48"><literal type="number" pos:start="2507:48" pos:end="2507:48">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block pos:start="2508:9" pos:end="2526:9">{<block_content pos:start="2509:9" pos:end="2525:24"> <comment type="block" pos:start="2508:11" pos:end="2508:44">/* Bit 1 = FromDS, bit 0 = ToDS */</comment>
        <case pos:start="2509:9" pos:end="2509:15">case <expr pos:start="2509:14" pos:end="2509:14"><literal type="number" pos:start="2509:14" pos:end="2509:14">0</literal></expr>:</case>
            <if_stmt pos:start="2510:13" pos:end="2513:36"><if pos:start="2510:13" pos:end="2511:36">if <condition pos:start="2510:16" pos:end="2510:78">(<expr pos:start="2510:17" pos:end="2510:77"><call pos:start="2510:17" pos:end="2510:72"><name pos:start="2510:17" pos:end="2510:22">memcmp</name><argument_list pos:start="2510:23" pos:end="2510:72">(<argument pos:start="2510:24" pos:end="2510:35"><expr pos:start="2510:24" pos:end="2510:35"><name pos:start="2510:24" pos:end="2510:35"><name pos:start="2510:24" pos:end="2510:28">frame</name><operator pos:start="2510:29" pos:end="2510:30">-&gt;</operator><name pos:start="2510:31" pos:end="2510:35">addr2</name></name></expr></argument>, <argument pos:start="2510:38" pos:end="2510:49"><expr pos:start="2510:38" pos:end="2510:49"><name pos:start="2510:38" pos:end="2510:49"><name pos:start="2510:38" pos:end="2510:42">frame</name><operator pos:start="2510:43" pos:end="2510:44">-&gt;</operator><name pos:start="2510:45" pos:end="2510:49">addr3</name></name></expr></argument>, <argument pos:start="2510:52" pos:end="2510:71"><expr pos:start="2510:52" pos:end="2510:71"><name pos:start="2510:52" pos:end="2510:71">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="2510:74" pos:end="2510:75">==</operator> <literal type="number" pos:start="2510:77" pos:end="2510:77">0</literal></expr>)</condition><block type="pseudo" pos:start="2511:17" pos:end="2511:36"><block_content pos:start="2511:17" pos:end="2511:36">
                <return pos:start="2511:17" pos:end="2511:36">return <expr pos:start="2511:24" pos:end="2511:35"><name pos:start="2511:24" pos:end="2511:35"><name pos:start="2511:24" pos:end="2511:28">frame</name><operator pos:start="2511:29" pos:end="2511:30">-&gt;</operator><name pos:start="2511:31" pos:end="2511:35">addr1</name></name></expr>;</return></block_content></block></if>
            <else pos:start="2512:13" pos:end="2513:36">else<block type="pseudo" pos:start="2513:17" pos:end="2513:36"><block_content pos:start="2513:17" pos:end="2513:36">
                <return pos:start="2513:17" pos:end="2513:36">return <expr pos:start="2513:24" pos:end="2513:35"><name pos:start="2513:24" pos:end="2513:35"><name pos:start="2513:24" pos:end="2513:28">frame</name><operator pos:start="2513:29" pos:end="2513:30">-&gt;</operator><name pos:start="2513:31" pos:end="2513:35">addr2</name></name></expr>;</return></block_content></block></else></if_stmt>
        <case pos:start="2514:9" pos:end="2514:15">case <expr pos:start="2514:14" pos:end="2514:14"><literal type="number" pos:start="2514:14" pos:end="2514:14">1</literal></expr>:</case>
            <return pos:start="2515:13" pos:end="2515:32">return <expr pos:start="2515:20" pos:end="2515:31"><name pos:start="2515:20" pos:end="2515:31"><name pos:start="2515:20" pos:end="2515:24">frame</name><operator pos:start="2515:25" pos:end="2515:26">-&gt;</operator><name pos:start="2515:27" pos:end="2515:31">addr2</name></name></expr>;</return>
        <case pos:start="2516:9" pos:end="2516:15">case <expr pos:start="2516:14" pos:end="2516:14"><literal type="number" pos:start="2516:14" pos:end="2516:14">2</literal></expr>:</case>
            <return pos:start="2517:13" pos:end="2517:32">return <expr pos:start="2517:20" pos:end="2517:31"><name pos:start="2517:20" pos:end="2517:31"><name pos:start="2517:20" pos:end="2517:24">frame</name><operator pos:start="2517:25" pos:end="2517:26">-&gt;</operator><name pos:start="2517:27" pos:end="2517:31">addr1</name></name></expr>;</return>
        <case pos:start="2518:9" pos:end="2518:15">case <expr pos:start="2518:14" pos:end="2518:14"><literal type="number" pos:start="2518:14" pos:end="2518:14">3</literal></expr>:</case>
            <if_stmt pos:start="2519:13" pos:end="2522:36"><if pos:start="2519:13" pos:end="2520:36">if <condition pos:start="2519:16" pos:end="2519:77">(<expr pos:start="2519:17" pos:end="2519:76"><call pos:start="2519:17" pos:end="2519:72"><name pos:start="2519:17" pos:end="2519:22">memcmp</name><argument_list pos:start="2519:23" pos:end="2519:72">(<argument pos:start="2519:24" pos:end="2519:35"><expr pos:start="2519:24" pos:end="2519:35"><name pos:start="2519:24" pos:end="2519:35"><name pos:start="2519:24" pos:end="2519:28">frame</name><operator pos:start="2519:29" pos:end="2519:30">-&gt;</operator><name pos:start="2519:31" pos:end="2519:35">addr1</name></name></expr></argument>, <argument pos:start="2519:38" pos:end="2519:49"><expr pos:start="2519:38" pos:end="2519:49"><name pos:start="2519:38" pos:end="2519:49"><name pos:start="2519:38" pos:end="2519:42">frame</name><operator pos:start="2519:43" pos:end="2519:44">-&gt;</operator><name pos:start="2519:45" pos:end="2519:49">addr2</name></name></expr></argument>, <argument pos:start="2519:52" pos:end="2519:71"><expr pos:start="2519:52" pos:end="2519:71"><name pos:start="2519:52" pos:end="2519:71">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="2519:74" pos:end="2519:74">&lt;</operator> <literal type="number" pos:start="2519:76" pos:end="2519:76">0</literal></expr>)</condition><block type="pseudo" pos:start="2520:17" pos:end="2520:36"><block_content pos:start="2520:17" pos:end="2520:36">
                <return pos:start="2520:17" pos:end="2520:36">return <expr pos:start="2520:24" pos:end="2520:35"><name pos:start="2520:24" pos:end="2520:35"><name pos:start="2520:24" pos:end="2520:28">frame</name><operator pos:start="2520:29" pos:end="2520:30">-&gt;</operator><name pos:start="2520:31" pos:end="2520:35">addr1</name></name></expr>;</return></block_content></block></if>
            <else pos:start="2521:13" pos:end="2522:36">else<block type="pseudo" pos:start="2522:17" pos:end="2522:36"><block_content pos:start="2522:17" pos:end="2522:36">
                <return pos:start="2522:17" pos:end="2522:36">return <expr pos:start="2522:24" pos:end="2522:35"><name pos:start="2522:24" pos:end="2522:35"><name pos:start="2522:24" pos:end="2522:28">frame</name><operator pos:start="2522:29" pos:end="2522:30">-&gt;</operator><name pos:start="2522:31" pos:end="2522:35">addr2</name></name></expr>;</return></block_content></block></else></if_stmt>

        <default pos:start="2524:9" pos:end="2524:16">default:</default>
            <return pos:start="2525:13" pos:end="2525:24">return <expr pos:start="2525:20" pos:end="2525:23"><name pos:start="2525:20" pos:end="2525:23">NULL</name></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function pos:start="2529:5" pos:end="2550:5"><type pos:start="2529:5" pos:end="2529:24"><specifier pos:start="2529:5" pos:end="2529:10">static</specifier> <specifier pos:start="2529:12" pos:end="2529:16">const</specifier> <name pos:start="2529:18" pos:end="2529:22">UCHAR</name> <modifier pos:start="2529:24" pos:end="2529:24">*</modifier></type>
    <name pos:start="2530:5" pos:end="2530:31">Dot11DecryptGetBssidAddress</name><parameter_list pos:start="2530:32" pos:end="2531:50">(
        <parameter pos:start="2531:9" pos:end="2531:49"><decl pos:start="2531:9" pos:end="2531:49"><type pos:start="2531:9" pos:end="2531:44"><specifier pos:start="2531:9" pos:end="2531:13">const</specifier> <name pos:start="2531:15" pos:end="2531:42">DOT11DECRYPT_MAC_FRAME_ADDR4</name> <modifier pos:start="2531:44" pos:end="2531:44">*</modifier></type><name pos:start="2531:45" pos:end="2531:49">frame</name></decl></parameter>)</parameter_list>
    <block pos:start="2532:5" pos:end="2550:5">{<block_content pos:start="2533:9" pos:end="2549:9">
        <switch pos:start="2533:9" pos:end="2549:9">switch <condition pos:start="2533:16" pos:end="2533:51">(<expr pos:start="2533:17" pos:end="2533:50"><call pos:start="2533:17" pos:end="2533:50"><name pos:start="2533:17" pos:end="2533:36">DOT11DECRYPT_DS_BITS</name><argument_list pos:start="2533:37" pos:end="2533:50">(<argument pos:start="2533:38" pos:end="2533:49"><expr pos:start="2533:38" pos:end="2533:49"><name pos:start="2533:38" pos:end="2533:49"><name pos:start="2533:38" pos:end="2533:42">frame</name><operator pos:start="2533:43" pos:end="2533:44">-&gt;</operator><name pos:start="2533:45" pos:end="2533:46">fc</name><index pos:start="2533:47" pos:end="2533:49">[<expr pos:start="2533:48" pos:end="2533:48"><literal type="number" pos:start="2533:48" pos:end="2533:48">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block pos:start="2534:9" pos:end="2549:9">{<block_content pos:start="2535:9" pos:end="2548:24"> <comment type="block" pos:start="2534:11" pos:end="2534:44">/* Bit 1 = FromDS, bit 0 = ToDS */</comment>
        <case pos:start="2535:9" pos:end="2535:15">case <expr pos:start="2535:14" pos:end="2535:14"><literal type="number" pos:start="2535:14" pos:end="2535:14">0</literal></expr>:</case>
            <return pos:start="2536:13" pos:end="2536:32">return <expr pos:start="2536:20" pos:end="2536:31"><name pos:start="2536:20" pos:end="2536:31"><name pos:start="2536:20" pos:end="2536:24">frame</name><operator pos:start="2536:25" pos:end="2536:26">-&gt;</operator><name pos:start="2536:27" pos:end="2536:31">addr3</name></name></expr>;</return>
        <case pos:start="2537:9" pos:end="2537:15">case <expr pos:start="2537:14" pos:end="2537:14"><literal type="number" pos:start="2537:14" pos:end="2537:14">1</literal></expr>:</case>
            <return pos:start="2538:13" pos:end="2538:32">return <expr pos:start="2538:20" pos:end="2538:31"><name pos:start="2538:20" pos:end="2538:31"><name pos:start="2538:20" pos:end="2538:24">frame</name><operator pos:start="2538:25" pos:end="2538:26">-&gt;</operator><name pos:start="2538:27" pos:end="2538:31">addr1</name></name></expr>;</return>
        <case pos:start="2539:9" pos:end="2539:15">case <expr pos:start="2539:14" pos:end="2539:14"><literal type="number" pos:start="2539:14" pos:end="2539:14">2</literal></expr>:</case>
            <return pos:start="2540:13" pos:end="2540:32">return <expr pos:start="2540:20" pos:end="2540:31"><name pos:start="2540:20" pos:end="2540:31"><name pos:start="2540:20" pos:end="2540:24">frame</name><operator pos:start="2540:25" pos:end="2540:26">-&gt;</operator><name pos:start="2540:27" pos:end="2540:31">addr2</name></name></expr>;</return>
        <case pos:start="2541:9" pos:end="2541:15">case <expr pos:start="2541:14" pos:end="2541:14"><literal type="number" pos:start="2541:14" pos:end="2541:14">3</literal></expr>:</case>
            <if_stmt pos:start="2542:13" pos:end="2545:36"><if pos:start="2542:13" pos:end="2543:36">if <condition pos:start="2542:16" pos:end="2542:77">(<expr pos:start="2542:17" pos:end="2542:76"><call pos:start="2542:17" pos:end="2542:72"><name pos:start="2542:17" pos:end="2542:22">memcmp</name><argument_list pos:start="2542:23" pos:end="2542:72">(<argument pos:start="2542:24" pos:end="2542:35"><expr pos:start="2542:24" pos:end="2542:35"><name pos:start="2542:24" pos:end="2542:35"><name pos:start="2542:24" pos:end="2542:28">frame</name><operator pos:start="2542:29" pos:end="2542:30">-&gt;</operator><name pos:start="2542:31" pos:end="2542:35">addr1</name></name></expr></argument>, <argument pos:start="2542:38" pos:end="2542:49"><expr pos:start="2542:38" pos:end="2542:49"><name pos:start="2542:38" pos:end="2542:49"><name pos:start="2542:38" pos:end="2542:42">frame</name><operator pos:start="2542:43" pos:end="2542:44">-&gt;</operator><name pos:start="2542:45" pos:end="2542:49">addr2</name></name></expr></argument>, <argument pos:start="2542:52" pos:end="2542:71"><expr pos:start="2542:52" pos:end="2542:71"><name pos:start="2542:52" pos:end="2542:71">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="2542:74" pos:end="2542:74">&gt;</operator> <literal type="number" pos:start="2542:76" pos:end="2542:76">0</literal></expr>)</condition><block type="pseudo" pos:start="2543:17" pos:end="2543:36"><block_content pos:start="2543:17" pos:end="2543:36">
                <return pos:start="2543:17" pos:end="2543:36">return <expr pos:start="2543:24" pos:end="2543:35"><name pos:start="2543:24" pos:end="2543:35"><name pos:start="2543:24" pos:end="2543:28">frame</name><operator pos:start="2543:29" pos:end="2543:30">-&gt;</operator><name pos:start="2543:31" pos:end="2543:35">addr1</name></name></expr>;</return></block_content></block></if>
            <else pos:start="2544:13" pos:end="2545:36">else<block type="pseudo" pos:start="2545:17" pos:end="2545:36"><block_content pos:start="2545:17" pos:end="2545:36">
                <return pos:start="2545:17" pos:end="2545:36">return <expr pos:start="2545:24" pos:end="2545:35"><name pos:start="2545:24" pos:end="2545:35"><name pos:start="2545:24" pos:end="2545:28">frame</name><operator pos:start="2545:29" pos:end="2545:30">-&gt;</operator><name pos:start="2545:31" pos:end="2545:35">addr2</name></name></expr>;</return></block_content></block></else></if_stmt>

        <default pos:start="2547:9" pos:end="2547:16">default:</default>
            <return pos:start="2548:13" pos:end="2548:24">return <expr pos:start="2548:20" pos:end="2548:23"><name pos:start="2548:20" pos:end="2548:23">NULL</name></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" pos:start="2552:5" pos:end="2553:45">/* From IEEE 802.11-2016 Table 9-131 Cipher suite selectors and
     * Table 12-4 Cipher suite key lengths */</comment>
    <function pos:start="2554:5" pos:end="2588:5"><type pos:start="2554:5" pos:end="2554:14"><specifier pos:start="2554:5" pos:end="2554:10">static</specifier> <name pos:start="2554:12" pos:end="2554:14">int</name></type> <name pos:start="2554:16" pos:end="2554:35">Dot11DecryptGetTkLen</name><parameter_list pos:start="2554:36" pos:end="2554:47">(<parameter pos:start="2554:37" pos:end="2554:46"><decl pos:start="2554:37" pos:end="2554:46"><type pos:start="2554:37" pos:end="2554:39"><name pos:start="2554:37" pos:end="2554:39">int</name></type> <name pos:start="2554:41" pos:end="2554:46">cipher</name></decl></parameter>)</parameter_list>
    <block pos:start="2555:5" pos:end="2588:5">{<block_content pos:start="2556:9" pos:end="2587:9">
        <switch pos:start="2556:9" pos:end="2587:9">switch <condition pos:start="2556:16" pos:end="2556:23">(<expr pos:start="2556:17" pos:end="2556:22"><name pos:start="2556:17" pos:end="2556:22">cipher</name></expr>)</condition>
        <block pos:start="2557:9" pos:end="2587:9">{<block_content pos:start="2558:9" pos:end="2586:22">
        <case pos:start="2558:9" pos:end="2558:15">case <expr pos:start="2558:14" pos:end="2558:14"><literal type="number" pos:start="2558:14" pos:end="2558:14">1</literal></expr>:</case>
            <return pos:start="2559:13" pos:end="2559:22">return <expr pos:start="2559:20" pos:end="2559:21"><literal type="number" pos:start="2559:20" pos:end="2559:21">40</literal></expr>;</return> <comment type="block" pos:start="2559:24" pos:end="2559:35">/* WEP-40 */</comment>
        <case pos:start="2560:9" pos:end="2560:15">case <expr pos:start="2560:14" pos:end="2560:14"><literal type="number" pos:start="2560:14" pos:end="2560:14">2</literal></expr>:</case>
            <return pos:start="2561:13" pos:end="2561:23">return <expr pos:start="2561:20" pos:end="2561:22"><literal type="number" pos:start="2561:20" pos:end="2561:22">256</literal></expr>;</return> <comment type="block" pos:start="2561:25" pos:end="2561:34">/* TKIP */</comment>
        <case pos:start="2562:9" pos:end="2562:15">case <expr pos:start="2562:14" pos:end="2562:14"><literal type="number" pos:start="2562:14" pos:end="2562:14">3</literal></expr>:</case>
            <return pos:start="2563:13" pos:end="2563:22">return <expr pos:start="2563:20" pos:end="2563:21"><operator pos:start="2563:20" pos:end="2563:20">-</operator><literal type="number" pos:start="2563:21" pos:end="2563:21">1</literal></expr>;</return> <comment type="block" pos:start="2563:24" pos:end="2563:37">/* Reserved */</comment>
        <case pos:start="2564:9" pos:end="2564:15">case <expr pos:start="2564:14" pos:end="2564:14"><literal type="number" pos:start="2564:14" pos:end="2564:14">4</literal></expr>:</case>
            <return pos:start="2565:13" pos:end="2565:23">return <expr pos:start="2565:20" pos:end="2565:22"><literal type="number" pos:start="2565:20" pos:end="2565:22">128</literal></expr>;</return> <comment type="block" pos:start="2565:25" pos:end="2565:38">/* CCMP-128 */</comment>
        <case pos:start="2566:9" pos:end="2566:15">case <expr pos:start="2566:14" pos:end="2566:14"><literal type="number" pos:start="2566:14" pos:end="2566:14">5</literal></expr>:</case>
            <return pos:start="2567:13" pos:end="2567:23">return <expr pos:start="2567:20" pos:end="2567:22"><literal type="number" pos:start="2567:20" pos:end="2567:22">104</literal></expr>;</return> <comment type="block" pos:start="2567:25" pos:end="2567:37">/* WEP-104 */</comment>
        <case pos:start="2568:9" pos:end="2568:15">case <expr pos:start="2568:14" pos:end="2568:14"><literal type="number" pos:start="2568:14" pos:end="2568:14">6</literal></expr>:</case>
            <return pos:start="2569:13" pos:end="2569:23">return <expr pos:start="2569:20" pos:end="2569:22"><literal type="number" pos:start="2569:20" pos:end="2569:22">128</literal></expr>;</return> <comment type="block" pos:start="2569:25" pos:end="2569:42">/* BIP-CMAC-128 */</comment>
        <case pos:start="2570:9" pos:end="2570:15">case <expr pos:start="2570:14" pos:end="2570:14"><literal type="number" pos:start="2570:14" pos:end="2570:14">7</literal></expr>:</case>
            <return pos:start="2571:13" pos:end="2571:22">return <expr pos:start="2571:20" pos:end="2571:21"><operator pos:start="2571:20" pos:end="2571:20">-</operator><literal type="number" pos:start="2571:21" pos:end="2571:21">1</literal></expr>;</return> <comment type="block" pos:start="2571:24" pos:end="2571:64">/* Group addressed traffic not allowed */</comment>
        <case pos:start="2572:9" pos:end="2572:15">case <expr pos:start="2572:14" pos:end="2572:14"><literal type="number" pos:start="2572:14" pos:end="2572:14">8</literal></expr>:</case>
            <return pos:start="2573:13" pos:end="2573:23">return <expr pos:start="2573:20" pos:end="2573:22"><literal type="number" pos:start="2573:20" pos:end="2573:22">128</literal></expr>;</return> <comment type="block" pos:start="2573:25" pos:end="2573:38">/* GCMP-128 */</comment>
        <case pos:start="2574:9" pos:end="2574:15">case <expr pos:start="2574:14" pos:end="2574:14"><literal type="number" pos:start="2574:14" pos:end="2574:14">9</literal></expr>:</case>
            <return pos:start="2575:13" pos:end="2575:23">return <expr pos:start="2575:20" pos:end="2575:22"><literal type="number" pos:start="2575:20" pos:end="2575:22">256</literal></expr>;</return> <comment type="block" pos:start="2575:25" pos:end="2575:38">/* GCMP-256 */</comment>
        <case pos:start="2576:9" pos:end="2576:16">case <expr pos:start="2576:14" pos:end="2576:15"><literal type="number" pos:start="2576:14" pos:end="2576:15">10</literal></expr>:</case>
            <return pos:start="2577:13" pos:end="2577:23">return <expr pos:start="2577:20" pos:end="2577:22"><literal type="number" pos:start="2577:20" pos:end="2577:22">256</literal></expr>;</return> <comment type="block" pos:start="2577:25" pos:end="2577:38">/* CCMP-256 */</comment>
        <case pos:start="2578:9" pos:end="2578:16">case <expr pos:start="2578:14" pos:end="2578:15"><literal type="number" pos:start="2578:14" pos:end="2578:15">11</literal></expr>:</case>
            <return pos:start="2579:13" pos:end="2579:23">return <expr pos:start="2579:20" pos:end="2579:22"><literal type="number" pos:start="2579:20" pos:end="2579:22">128</literal></expr>;</return> <comment type="block" pos:start="2579:25" pos:end="2579:42">/* BIP-GMAC-128 */</comment>
        <case pos:start="2580:9" pos:end="2580:16">case <expr pos:start="2580:14" pos:end="2580:15"><literal type="number" pos:start="2580:14" pos:end="2580:15">12</literal></expr>:</case>
            <return pos:start="2581:13" pos:end="2581:23">return <expr pos:start="2581:20" pos:end="2581:22"><literal type="number" pos:start="2581:20" pos:end="2581:22">256</literal></expr>;</return> <comment type="block" pos:start="2581:25" pos:end="2581:42">/* BIP-GMAC-256 */</comment>
        <case pos:start="2582:9" pos:end="2582:16">case <expr pos:start="2582:14" pos:end="2582:15"><literal type="number" pos:start="2582:14" pos:end="2582:15">13</literal></expr>:</case>
            <return pos:start="2583:13" pos:end="2583:23">return <expr pos:start="2583:20" pos:end="2583:22"><literal type="number" pos:start="2583:20" pos:end="2583:22">256</literal></expr>;</return> <comment type="block" pos:start="2583:25" pos:end="2583:42">/* BIP-CMAC-256 */</comment>
        <default pos:start="2584:9" pos:end="2584:16">default:</default>
            <expr_stmt pos:start="2585:13" pos:end="2585:41"><expr pos:start="2585:13" pos:end="2585:40"><call pos:start="2585:13" pos:end="2585:40"><name pos:start="2585:13" pos:end="2585:22">ws_warning</name><argument_list pos:start="2585:23" pos:end="2585:40">(<argument pos:start="2585:24" pos:end="2585:39"><expr pos:start="2585:24" pos:end="2585:39"><literal type="string" pos:start="2585:24" pos:end="2585:39">"Unknown cipher"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2586:13" pos:end="2586:22">return <expr pos:start="2586:20" pos:end="2586:21"><operator pos:start="2586:20" pos:end="2586:20">-</operator><literal type="number" pos:start="2586:21" pos:end="2586:21">1</literal></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" pos:start="2590:5" pos:end="2590:76">/* From IEEE 802.11-2016 Table 12-8 Integrity and key-wrap algorithms */</comment>
    <function pos:start="2591:5" pos:end="2624:5"><type pos:start="2591:5" pos:end="2591:14"><specifier pos:start="2591:5" pos:end="2591:10">static</specifier> <name pos:start="2591:12" pos:end="2591:14">int</name></type> <name pos:start="2591:16" pos:end="2591:36">Dot11DecryptGetKckLen</name><parameter_list pos:start="2591:37" pos:end="2591:45">(<parameter pos:start="2591:38" pos:end="2591:44"><decl pos:start="2591:38" pos:end="2591:44"><type pos:start="2591:38" pos:end="2591:40"><name pos:start="2591:38" pos:end="2591:40">int</name></type> <name pos:start="2591:42" pos:end="2591:44">akm</name></decl></parameter>)</parameter_list>
    <block pos:start="2592:5" pos:end="2624:5">{<block_content pos:start="2593:9" pos:end="2623:9">
        <switch pos:start="2593:9" pos:end="2623:9">switch <condition pos:start="2593:16" pos:end="2593:20">(<expr pos:start="2593:17" pos:end="2593:19"><name pos:start="2593:17" pos:end="2593:19">akm</name></expr>)</condition>
        <block pos:start="2594:9" pos:end="2623:9">{<block_content pos:start="2595:9" pos:end="2622:22">
        <case pos:start="2595:9" pos:end="2595:15">case <expr pos:start="2595:14" pos:end="2595:14"><literal type="number" pos:start="2595:14" pos:end="2595:14">1</literal></expr>:</case>
            <return pos:start="2596:13" pos:end="2596:23">return <expr pos:start="2596:20" pos:end="2596:22"><literal type="number" pos:start="2596:20" pos:end="2596:22">128</literal></expr>;</return>
        <case pos:start="2597:9" pos:end="2597:15">case <expr pos:start="2597:14" pos:end="2597:14"><literal type="number" pos:start="2597:14" pos:end="2597:14">2</literal></expr>:</case>
            <return pos:start="2598:13" pos:end="2598:23">return <expr pos:start="2598:20" pos:end="2598:22"><literal type="number" pos:start="2598:20" pos:end="2598:22">128</literal></expr>;</return>
        <case pos:start="2599:9" pos:end="2599:15">case <expr pos:start="2599:14" pos:end="2599:14"><literal type="number" pos:start="2599:14" pos:end="2599:14">3</literal></expr>:</case>
            <return pos:start="2600:13" pos:end="2600:23">return <expr pos:start="2600:20" pos:end="2600:22"><literal type="number" pos:start="2600:20" pos:end="2600:22">128</literal></expr>;</return>
        <case pos:start="2601:9" pos:end="2601:15">case <expr pos:start="2601:14" pos:end="2601:14"><literal type="number" pos:start="2601:14" pos:end="2601:14">4</literal></expr>:</case>
            <return pos:start="2602:13" pos:end="2602:23">return <expr pos:start="2602:20" pos:end="2602:22"><literal type="number" pos:start="2602:20" pos:end="2602:22">128</literal></expr>;</return>
        <case pos:start="2603:9" pos:end="2603:15">case <expr pos:start="2603:14" pos:end="2603:14"><literal type="number" pos:start="2603:14" pos:end="2603:14">5</literal></expr>:</case>
            <return pos:start="2604:13" pos:end="2604:23">return <expr pos:start="2604:20" pos:end="2604:22"><literal type="number" pos:start="2604:20" pos:end="2604:22">128</literal></expr>;</return>
        <case pos:start="2605:9" pos:end="2605:15">case <expr pos:start="2605:14" pos:end="2605:14"><literal type="number" pos:start="2605:14" pos:end="2605:14">6</literal></expr>:</case>
            <return pos:start="2606:13" pos:end="2606:23">return <expr pos:start="2606:20" pos:end="2606:22"><literal type="number" pos:start="2606:20" pos:end="2606:22">128</literal></expr>;</return>
        <case pos:start="2607:9" pos:end="2607:15">case <expr pos:start="2607:14" pos:end="2607:14"><literal type="number" pos:start="2607:14" pos:end="2607:14">8</literal></expr>:</case>
            <return pos:start="2608:13" pos:end="2608:23">return <expr pos:start="2608:20" pos:end="2608:22"><literal type="number" pos:start="2608:20" pos:end="2608:22">128</literal></expr>;</return>
        <case pos:start="2609:9" pos:end="2609:15">case <expr pos:start="2609:14" pos:end="2609:14"><literal type="number" pos:start="2609:14" pos:end="2609:14">9</literal></expr>:</case>
            <return pos:start="2610:13" pos:end="2610:23">return <expr pos:start="2610:20" pos:end="2610:22"><literal type="number" pos:start="2610:20" pos:end="2610:22">128</literal></expr>;</return>
        <case pos:start="2611:9" pos:end="2611:16">case <expr pos:start="2611:14" pos:end="2611:15"><literal type="number" pos:start="2611:14" pos:end="2611:15">11</literal></expr>:</case>
            <return pos:start="2612:13" pos:end="2612:23">return <expr pos:start="2612:20" pos:end="2612:22"><literal type="number" pos:start="2612:20" pos:end="2612:22">128</literal></expr>;</return>
        <case pos:start="2613:9" pos:end="2613:16">case <expr pos:start="2613:14" pos:end="2613:15"><literal type="number" pos:start="2613:14" pos:end="2613:15">12</literal></expr>:</case>
            <return pos:start="2614:13" pos:end="2614:23">return <expr pos:start="2614:20" pos:end="2614:22"><literal type="number" pos:start="2614:20" pos:end="2614:22">192</literal></expr>;</return>
        <case pos:start="2615:9" pos:end="2615:16">case <expr pos:start="2615:14" pos:end="2615:15"><literal type="number" pos:start="2615:14" pos:end="2615:15">13</literal></expr>:</case>
            <return pos:start="2616:13" pos:end="2616:23">return <expr pos:start="2616:20" pos:end="2616:22"><literal type="number" pos:start="2616:20" pos:end="2616:22">192</literal></expr>;</return>
        <case pos:start="2617:9" pos:end="2617:16">case <expr pos:start="2617:14" pos:end="2617:15"><literal type="number" pos:start="2617:14" pos:end="2617:15">18</literal></expr>:</case>
            <return pos:start="2618:13" pos:end="2618:23">return <expr pos:start="2618:20" pos:end="2618:22"><literal type="number" pos:start="2618:20" pos:end="2618:22">128</literal></expr>;</return>
        <default pos:start="2619:9" pos:end="2619:16">default:</default>
            <comment type="block" pos:start="2620:13" pos:end="2620:41">/* Unknown / Not supported */</comment>
            <expr_stmt pos:start="2621:13" pos:end="2621:38"><expr pos:start="2621:13" pos:end="2621:37"><call pos:start="2621:13" pos:end="2621:37"><name pos:start="2621:13" pos:end="2621:22">ws_warning</name><argument_list pos:start="2621:23" pos:end="2621:37">(<argument pos:start="2621:24" pos:end="2621:36"><expr pos:start="2621:24" pos:end="2621:36"><literal type="string" pos:start="2621:24" pos:end="2621:36">"Unknown akm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2622:13" pos:end="2622:22">return <expr pos:start="2622:20" pos:end="2622:21"><operator pos:start="2622:20" pos:end="2622:20">-</operator><literal type="number" pos:start="2622:21" pos:end="2622:21">1</literal></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" pos:start="2626:5" pos:end="2626:76">/* From IEEE 802.11-2016 Table 12-8 Integrity and key-wrap algorithms */</comment>
    <function pos:start="2627:5" pos:end="2660:5"><type pos:start="2627:5" pos:end="2627:14"><specifier pos:start="2627:5" pos:end="2627:10">static</specifier> <name pos:start="2627:12" pos:end="2627:14">int</name></type> <name pos:start="2627:16" pos:end="2627:36">Dot11DecryptGetKekLen</name><parameter_list pos:start="2627:37" pos:end="2627:45">(<parameter pos:start="2627:38" pos:end="2627:44"><decl pos:start="2627:38" pos:end="2627:44"><type pos:start="2627:38" pos:end="2627:40"><name pos:start="2627:38" pos:end="2627:40">int</name></type> <name pos:start="2627:42" pos:end="2627:44">akm</name></decl></parameter>)</parameter_list>
    <block pos:start="2628:5" pos:end="2660:5">{<block_content pos:start="2629:9" pos:end="2659:9">
        <switch pos:start="2629:9" pos:end="2659:9">switch <condition pos:start="2629:16" pos:end="2629:20">(<expr pos:start="2629:17" pos:end="2629:19"><name pos:start="2629:17" pos:end="2629:19">akm</name></expr>)</condition>
        <block pos:start="2630:9" pos:end="2659:9">{<block_content pos:start="2631:9" pos:end="2658:22">
        <case pos:start="2631:9" pos:end="2631:15">case <expr pos:start="2631:14" pos:end="2631:14"><literal type="number" pos:start="2631:14" pos:end="2631:14">1</literal></expr>:</case>
            <return pos:start="2632:13" pos:end="2632:23">return <expr pos:start="2632:20" pos:end="2632:22"><literal type="number" pos:start="2632:20" pos:end="2632:22">128</literal></expr>;</return>
        <case pos:start="2633:9" pos:end="2633:15">case <expr pos:start="2633:14" pos:end="2633:14"><literal type="number" pos:start="2633:14" pos:end="2633:14">2</literal></expr>:</case>
            <return pos:start="2634:13" pos:end="2634:23">return <expr pos:start="2634:20" pos:end="2634:22"><literal type="number" pos:start="2634:20" pos:end="2634:22">128</literal></expr>;</return>
        <case pos:start="2635:9" pos:end="2635:15">case <expr pos:start="2635:14" pos:end="2635:14"><literal type="number" pos:start="2635:14" pos:end="2635:14">3</literal></expr>:</case>
            <return pos:start="2636:13" pos:end="2636:23">return <expr pos:start="2636:20" pos:end="2636:22"><literal type="number" pos:start="2636:20" pos:end="2636:22">128</literal></expr>;</return>
        <case pos:start="2637:9" pos:end="2637:15">case <expr pos:start="2637:14" pos:end="2637:14"><literal type="number" pos:start="2637:14" pos:end="2637:14">4</literal></expr>:</case>
            <return pos:start="2638:13" pos:end="2638:23">return <expr pos:start="2638:20" pos:end="2638:22"><literal type="number" pos:start="2638:20" pos:end="2638:22">128</literal></expr>;</return>
        <case pos:start="2639:9" pos:end="2639:15">case <expr pos:start="2639:14" pos:end="2639:14"><literal type="number" pos:start="2639:14" pos:end="2639:14">5</literal></expr>:</case>
            <return pos:start="2640:13" pos:end="2640:23">return <expr pos:start="2640:20" pos:end="2640:22"><literal type="number" pos:start="2640:20" pos:end="2640:22">128</literal></expr>;</return>
        <case pos:start="2641:9" pos:end="2641:15">case <expr pos:start="2641:14" pos:end="2641:14"><literal type="number" pos:start="2641:14" pos:end="2641:14">6</literal></expr>:</case>
            <return pos:start="2642:13" pos:end="2642:23">return <expr pos:start="2642:20" pos:end="2642:22"><literal type="number" pos:start="2642:20" pos:end="2642:22">128</literal></expr>;</return>
        <case pos:start="2643:9" pos:end="2643:15">case <expr pos:start="2643:14" pos:end="2643:14"><literal type="number" pos:start="2643:14" pos:end="2643:14">8</literal></expr>:</case>
            <return pos:start="2644:13" pos:end="2644:23">return <expr pos:start="2644:20" pos:end="2644:22"><literal type="number" pos:start="2644:20" pos:end="2644:22">128</literal></expr>;</return>
        <case pos:start="2645:9" pos:end="2645:15">case <expr pos:start="2645:14" pos:end="2645:14"><literal type="number" pos:start="2645:14" pos:end="2645:14">9</literal></expr>:</case>
            <return pos:start="2646:13" pos:end="2646:23">return <expr pos:start="2646:20" pos:end="2646:22"><literal type="number" pos:start="2646:20" pos:end="2646:22">128</literal></expr>;</return>
        <case pos:start="2647:9" pos:end="2647:16">case <expr pos:start="2647:14" pos:end="2647:15"><literal type="number" pos:start="2647:14" pos:end="2647:15">11</literal></expr>:</case>
            <return pos:start="2648:13" pos:end="2648:23">return <expr pos:start="2648:20" pos:end="2648:22"><literal type="number" pos:start="2648:20" pos:end="2648:22">128</literal></expr>;</return>
        <case pos:start="2649:9" pos:end="2649:16">case <expr pos:start="2649:14" pos:end="2649:15"><literal type="number" pos:start="2649:14" pos:end="2649:15">12</literal></expr>:</case>
            <return pos:start="2650:13" pos:end="2650:23">return <expr pos:start="2650:20" pos:end="2650:22"><literal type="number" pos:start="2650:20" pos:end="2650:22">256</literal></expr>;</return>
        <case pos:start="2651:9" pos:end="2651:16">case <expr pos:start="2651:14" pos:end="2651:15"><literal type="number" pos:start="2651:14" pos:end="2651:15">13</literal></expr>:</case>
            <return pos:start="2652:13" pos:end="2652:23">return <expr pos:start="2652:20" pos:end="2652:22"><literal type="number" pos:start="2652:20" pos:end="2652:22">256</literal></expr>;</return>
        <case pos:start="2653:9" pos:end="2653:16">case <expr pos:start="2653:14" pos:end="2653:15"><literal type="number" pos:start="2653:14" pos:end="2653:15">18</literal></expr>:</case>
            <return pos:start="2654:13" pos:end="2654:23">return <expr pos:start="2654:20" pos:end="2654:22"><literal type="number" pos:start="2654:20" pos:end="2654:22">128</literal></expr>;</return>
        <default pos:start="2655:9" pos:end="2655:16">default:</default>
            <comment type="block" pos:start="2656:13" pos:end="2656:41">/* Unknown / Not supported */</comment>
            <expr_stmt pos:start="2657:13" pos:end="2657:38"><expr pos:start="2657:13" pos:end="2657:37"><call pos:start="2657:13" pos:end="2657:37"><name pos:start="2657:13" pos:end="2657:22">ws_warning</name><argument_list pos:start="2657:23" pos:end="2657:37">(<argument pos:start="2657:24" pos:end="2657:36"><expr pos:start="2657:24" pos:end="2657:36"><literal type="string" pos:start="2657:24" pos:end="2657:36">"Unknown akm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2658:13" pos:end="2658:22">return <expr pos:start="2658:20" pos:end="2658:21"><operator pos:start="2658:20" pos:end="2658:20">-</operator><literal type="number" pos:start="2658:21" pos:end="2658:21">1</literal></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" pos:start="2662:5" pos:end="2663:54">/* From IEEE 802.11-2016 9.4.2.25.3 AKM suites and
     * Table 12-8 Integrity and key-wrap algorithms */</comment>
    <function pos:start="2664:5" pos:end="2676:5"><type pos:start="2664:5" pos:end="2664:14"><specifier pos:start="2664:5" pos:end="2664:10">static</specifier> <name pos:start="2664:12" pos:end="2664:14">int</name></type> <name pos:start="2664:16" pos:end="2664:36">Dot11DecryptGetPtkLen</name><parameter_list pos:start="2664:37" pos:end="2664:57">(<parameter pos:start="2664:38" pos:end="2664:44"><decl pos:start="2664:38" pos:end="2664:44"><type pos:start="2664:38" pos:end="2664:44"><name pos:start="2664:38" pos:end="2664:40">int</name></type> <name pos:start="2664:42" pos:end="2664:44">akm</name></decl></parameter>, <parameter pos:start="2664:47" pos:end="2664:56"><decl pos:start="2664:47" pos:end="2664:56"><type pos:start="2664:47" pos:end="2664:56"><name pos:start="2664:47" pos:end="2664:49">int</name></type> <name pos:start="2664:51" pos:end="2664:56">cipher</name></decl></parameter>)</parameter_list>
    <block pos:start="2665:5" pos:end="2676:5">{<block_content pos:start="2666:9" pos:end="2675:42">
        <decl_stmt pos:start="2666:9" pos:end="2666:49"><decl pos:start="2666:9" pos:end="2666:48"><type pos:start="2666:9" pos:end="2666:11"><name pos:start="2666:9" pos:end="2666:11">int</name></type> <name pos:start="2666:13" pos:end="2666:19">kck_len</name> <init pos:start="2666:21" pos:end="2666:48">= <expr pos:start="2666:23" pos:end="2666:48"><call pos:start="2666:23" pos:end="2666:48"><name pos:start="2666:23" pos:end="2666:43">Dot11DecryptGetKckLen</name><argument_list pos:start="2666:44" pos:end="2666:48">(<argument pos:start="2666:45" pos:end="2666:47"><expr pos:start="2666:45" pos:end="2666:47"><name pos:start="2666:45" pos:end="2666:47">akm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="2667:9" pos:end="2667:49"><decl pos:start="2667:9" pos:end="2667:48"><type pos:start="2667:9" pos:end="2667:11"><name pos:start="2667:9" pos:end="2667:11">int</name></type> <name pos:start="2667:13" pos:end="2667:19">kek_len</name> <init pos:start="2667:21" pos:end="2667:48">= <expr pos:start="2667:23" pos:end="2667:48"><call pos:start="2667:23" pos:end="2667:48"><name pos:start="2667:23" pos:end="2667:43">Dot11DecryptGetKekLen</name><argument_list pos:start="2667:44" pos:end="2667:48">(<argument pos:start="2667:45" pos:end="2667:47"><expr pos:start="2667:45" pos:end="2667:47"><name pos:start="2667:45" pos:end="2667:47">akm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="2668:9" pos:end="2668:50"><decl pos:start="2668:9" pos:end="2668:49"><type pos:start="2668:9" pos:end="2668:11"><name pos:start="2668:9" pos:end="2668:11">int</name></type> <name pos:start="2668:13" pos:end="2668:18">tk_len</name> <init pos:start="2668:20" pos:end="2668:49">= <expr pos:start="2668:22" pos:end="2668:49"><call pos:start="2668:22" pos:end="2668:49"><name pos:start="2668:22" pos:end="2668:41">Dot11DecryptGetTkLen</name><argument_list pos:start="2668:42" pos:end="2668:49">(<argument pos:start="2668:43" pos:end="2668:48"><expr pos:start="2668:43" pos:end="2668:48"><name pos:start="2668:43" pos:end="2668:48">cipher</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="2670:9" pos:end="2674:9"><if pos:start="2670:9" pos:end="2674:9">if <condition pos:start="2670:12" pos:end="2670:59">(<expr pos:start="2670:13" pos:end="2670:58"><name pos:start="2670:13" pos:end="2670:19">kck_len</name> <operator pos:start="2670:21" pos:end="2670:22">==</operator> <operator pos:start="2670:24" pos:end="2670:24">-</operator><literal type="number" pos:start="2670:25" pos:end="2670:25">1</literal> <operator pos:start="2670:27" pos:end="2670:28">||</operator> <name pos:start="2670:30" pos:end="2670:36">kek_len</name> <operator pos:start="2670:38" pos:end="2670:39">==</operator> <operator pos:start="2670:41" pos:end="2670:41">-</operator><literal type="number" pos:start="2670:42" pos:end="2670:42">1</literal> <operator pos:start="2670:44" pos:end="2670:45">||</operator> <name pos:start="2670:47" pos:end="2670:52">tk_len</name> <operator pos:start="2670:54" pos:end="2670:55">==</operator> <operator pos:start="2670:57" pos:end="2670:57">-</operator><literal type="number" pos:start="2670:58" pos:end="2670:58">1</literal></expr>)</condition>
        <block pos:start="2671:9" pos:end="2674:9">{<block_content pos:start="2672:13" pos:end="2673:22">
            <expr_stmt pos:start="2672:13" pos:end="2672:42"><expr pos:start="2672:13" pos:end="2672:41"><call pos:start="2672:13" pos:end="2672:41"><name pos:start="2672:13" pos:end="2672:22">ws_warning</name><argument_list pos:start="2672:23" pos:end="2672:41">(<argument pos:start="2672:24" pos:end="2672:40"><expr pos:start="2672:24" pos:end="2672:40"><literal type="string" pos:start="2672:24" pos:end="2672:40">"Invalid PTK len"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2673:13" pos:end="2673:22">return <expr pos:start="2673:20" pos:end="2673:21"><operator pos:start="2673:20" pos:end="2673:20">-</operator><literal type="number" pos:start="2673:21" pos:end="2673:21">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return pos:start="2675:9" pos:end="2675:42">return <expr pos:start="2675:16" pos:end="2675:41"><name pos:start="2675:16" pos:end="2675:22">kck_len</name> <operator pos:start="2675:24" pos:end="2675:24">+</operator> <name pos:start="2675:26" pos:end="2675:32">kek_len</name> <operator pos:start="2675:34" pos:end="2675:34">+</operator> <name pos:start="2675:36" pos:end="2675:41">tk_len</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" pos:start="2678:5" pos:end="2678:80">/* From IEEE 802.11-2016 12.7.1.2 PRF and Table 9-133 AKM suite selectors */</comment>
    <function pos:start="2679:5" pos:end="2708:5"><type pos:start="2679:5" pos:end="2679:14"><specifier pos:start="2679:5" pos:end="2679:10">static</specifier> <name pos:start="2679:12" pos:end="2679:14">int</name></type>
    <name pos:start="2680:5" pos:end="2680:36">Dot11DecryptGetDeriveFuncFromAkm</name><parameter_list pos:start="2680:37" pos:end="2680:45">(<parameter pos:start="2680:38" pos:end="2680:44"><decl pos:start="2680:38" pos:end="2680:44"><type pos:start="2680:38" pos:end="2680:40"><name pos:start="2680:38" pos:end="2680:40">int</name></type> <name pos:start="2680:42" pos:end="2680:44">akm</name></decl></parameter>)</parameter_list>
    <block pos:start="2681:5" pos:end="2708:5">{<block_content pos:start="2682:9" pos:end="2707:20">
        <decl_stmt pos:start="2682:9" pos:end="2682:22"><decl pos:start="2682:9" pos:end="2682:21"><type pos:start="2682:9" pos:end="2682:11"><name pos:start="2682:9" pos:end="2682:11">int</name></type> <name pos:start="2682:13" pos:end="2682:16">func</name> <init pos:start="2682:18" pos:end="2682:21">= <expr pos:start="2682:20" pos:end="2682:21"><operator pos:start="2682:20" pos:end="2682:20">-</operator><literal type="number" pos:start="2682:21" pos:end="2682:21">1</literal></expr></init></decl>;</decl_stmt>
        <switch pos:start="2683:9" pos:end="2706:9">switch <condition pos:start="2683:16" pos:end="2683:20">(<expr pos:start="2683:17" pos:end="2683:19"><name pos:start="2683:17" pos:end="2683:19">akm</name></expr>)</condition>
        <block pos:start="2684:9" pos:end="2706:9">{<block_content pos:start="2685:9" pos:end="2705:18">
        <case pos:start="2685:9" pos:end="2685:15">case <expr pos:start="2685:14" pos:end="2685:14"><literal type="number" pos:start="2685:14" pos:end="2685:14">1</literal></expr>:</case>
        <case pos:start="2686:9" pos:end="2686:15">case <expr pos:start="2686:14" pos:end="2686:14"><literal type="number" pos:start="2686:14" pos:end="2686:14">2</literal></expr>:</case>
            <expr_stmt pos:start="2687:13" pos:end="2687:21"><expr pos:start="2687:13" pos:end="2687:20"><name pos:start="2687:13" pos:end="2687:16">func</name> <operator pos:start="2687:18" pos:end="2687:18">=</operator> <literal type="number" pos:start="2687:20" pos:end="2687:20">0</literal></expr>;</expr_stmt>
            <break pos:start="2688:13" pos:end="2688:18">break;</break>
        <case pos:start="2689:9" pos:end="2689:15">case <expr pos:start="2689:14" pos:end="2689:14"><literal type="number" pos:start="2689:14" pos:end="2689:14">3</literal></expr>:</case>
        <case pos:start="2690:9" pos:end="2690:15">case <expr pos:start="2690:14" pos:end="2690:14"><literal type="number" pos:start="2690:14" pos:end="2690:14">4</literal></expr>:</case>
        <case pos:start="2691:9" pos:end="2691:15">case <expr pos:start="2691:14" pos:end="2691:14"><literal type="number" pos:start="2691:14" pos:end="2691:14">5</literal></expr>:</case>
        <case pos:start="2692:9" pos:end="2692:15">case <expr pos:start="2692:14" pos:end="2692:14"><literal type="number" pos:start="2692:14" pos:end="2692:14">6</literal></expr>:</case>
        <case pos:start="2693:9" pos:end="2693:15">case <expr pos:start="2693:14" pos:end="2693:14"><literal type="number" pos:start="2693:14" pos:end="2693:14">7</literal></expr>:</case>
        <case pos:start="2694:9" pos:end="2694:15">case <expr pos:start="2694:14" pos:end="2694:14"><literal type="number" pos:start="2694:14" pos:end="2694:14">8</literal></expr>:</case>
        <case pos:start="2695:9" pos:end="2695:15">case <expr pos:start="2695:14" pos:end="2695:14"><literal type="number" pos:start="2695:14" pos:end="2695:14">9</literal></expr>:</case>
        <case pos:start="2696:9" pos:end="2696:16">case <expr pos:start="2696:14" pos:end="2696:15"><literal type="number" pos:start="2696:14" pos:end="2696:15">10</literal></expr>:</case>
        <case pos:start="2697:9" pos:end="2697:16">case <expr pos:start="2697:14" pos:end="2697:15"><literal type="number" pos:start="2697:14" pos:end="2697:15">11</literal></expr>:</case>
        <case pos:start="2698:9" pos:end="2698:16">case <expr pos:start="2698:14" pos:end="2698:15"><literal type="number" pos:start="2698:14" pos:end="2698:15">12</literal></expr>:</case>
        <case pos:start="2699:9" pos:end="2699:16">case <expr pos:start="2699:14" pos:end="2699:15"><literal type="number" pos:start="2699:14" pos:end="2699:15">13</literal></expr>:</case>
        <case pos:start="2700:9" pos:end="2700:16">case <expr pos:start="2700:14" pos:end="2700:15"><literal type="number" pos:start="2700:14" pos:end="2700:15">18</literal></expr>:</case>
            <expr_stmt pos:start="2701:13" pos:end="2701:21"><expr pos:start="2701:13" pos:end="2701:20"><name pos:start="2701:13" pos:end="2701:16">func</name> <operator pos:start="2701:18" pos:end="2701:18">=</operator> <literal type="number" pos:start="2701:20" pos:end="2701:20">1</literal></expr>;</expr_stmt>
            <break pos:start="2702:13" pos:end="2702:18">break;</break>
        <default pos:start="2703:9" pos:end="2703:16">default:</default>
            <comment type="block" pos:start="2704:13" pos:end="2704:45">/* Unknown / Not supported yet */</comment>
            <break pos:start="2705:13" pos:end="2705:18">break;</break>
        </block_content>}</block></switch>
        <return pos:start="2707:9" pos:end="2707:20">return <expr pos:start="2707:16" pos:end="2707:19"><name pos:start="2707:16" pos:end="2707:19">func</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" pos:start="2710:5" pos:end="2710:80">/* From IEEE 802.11-2016 12.7.1.2 PRF and Table 9-133 AKM suite selectors */</comment>
    <function pos:start="2711:5" pos:end="2742:5"><type pos:start="2711:5" pos:end="2711:14"><specifier pos:start="2711:5" pos:end="2711:10">static</specifier> <name pos:start="2711:12" pos:end="2711:14">int</name></type>
    <name pos:start="2712:5" pos:end="2712:34">Dot11DecryptGetHashAlgoFromAkm</name><parameter_list pos:start="2712:35" pos:end="2712:43">(<parameter pos:start="2712:36" pos:end="2712:42"><decl pos:start="2712:36" pos:end="2712:42"><type pos:start="2712:36" pos:end="2712:38"><name pos:start="2712:36" pos:end="2712:38">int</name></type> <name pos:start="2712:40" pos:end="2712:42">akm</name></decl></parameter>)</parameter_list>
    <block pos:start="2713:5" pos:end="2742:5">{<block_content pos:start="2714:9" pos:end="2741:20">
        <decl_stmt pos:start="2714:9" pos:end="2714:22"><decl pos:start="2714:9" pos:end="2714:21"><type pos:start="2714:9" pos:end="2714:11"><name pos:start="2714:9" pos:end="2714:11">int</name></type> <name pos:start="2714:13" pos:end="2714:16">algo</name> <init pos:start="2714:18" pos:end="2714:21">= <expr pos:start="2714:20" pos:end="2714:21"><operator pos:start="2714:20" pos:end="2714:20">-</operator><literal type="number" pos:start="2714:21" pos:end="2714:21">1</literal></expr></init></decl>;</decl_stmt>
        <switch pos:start="2715:9" pos:end="2740:9">switch <condition pos:start="2715:16" pos:end="2715:20">(<expr pos:start="2715:17" pos:end="2715:19"><name pos:start="2715:17" pos:end="2715:19">akm</name></expr>)</condition>
        <block pos:start="2716:9" pos:end="2740:9">{<block_content pos:start="2717:9" pos:end="2739:18">
        <case pos:start="2717:9" pos:end="2717:15">case <expr pos:start="2717:14" pos:end="2717:14"><literal type="number" pos:start="2717:14" pos:end="2717:14">1</literal></expr>:</case>
        <case pos:start="2718:9" pos:end="2718:15">case <expr pos:start="2718:14" pos:end="2718:14"><literal type="number" pos:start="2718:14" pos:end="2718:14">2</literal></expr>:</case>
            <expr_stmt pos:start="2719:13" pos:end="2719:32"><expr pos:start="2719:13" pos:end="2719:31"><name pos:start="2719:13" pos:end="2719:16">algo</name> <operator pos:start="2719:18" pos:end="2719:18">=</operator> <name pos:start="2719:20" pos:end="2719:31">GCRY_MD_SHA1</name></expr>;</expr_stmt>
            <break pos:start="2720:13" pos:end="2720:18">break;</break>
        <case pos:start="2721:9" pos:end="2721:15">case <expr pos:start="2721:14" pos:end="2721:14"><literal type="number" pos:start="2721:14" pos:end="2721:14">3</literal></expr>:</case>
        <case pos:start="2722:9" pos:end="2722:15">case <expr pos:start="2722:14" pos:end="2722:14"><literal type="number" pos:start="2722:14" pos:end="2722:14">4</literal></expr>:</case>
        <case pos:start="2723:9" pos:end="2723:15">case <expr pos:start="2723:14" pos:end="2723:14"><literal type="number" pos:start="2723:14" pos:end="2723:14">5</literal></expr>:</case>
        <case pos:start="2724:9" pos:end="2724:15">case <expr pos:start="2724:14" pos:end="2724:14"><literal type="number" pos:start="2724:14" pos:end="2724:14">6</literal></expr>:</case>
        <case pos:start="2725:9" pos:end="2725:15">case <expr pos:start="2725:14" pos:end="2725:14"><literal type="number" pos:start="2725:14" pos:end="2725:14">7</literal></expr>:</case>
        <case pos:start="2726:9" pos:end="2726:15">case <expr pos:start="2726:14" pos:end="2726:14"><literal type="number" pos:start="2726:14" pos:end="2726:14">8</literal></expr>:</case>
        <case pos:start="2727:9" pos:end="2727:15">case <expr pos:start="2727:14" pos:end="2727:14"><literal type="number" pos:start="2727:14" pos:end="2727:14">9</literal></expr>:</case>
        <case pos:start="2728:9" pos:end="2728:16">case <expr pos:start="2728:14" pos:end="2728:15"><literal type="number" pos:start="2728:14" pos:end="2728:15">10</literal></expr>:</case>
        <case pos:start="2729:9" pos:end="2729:16">case <expr pos:start="2729:14" pos:end="2729:15"><literal type="number" pos:start="2729:14" pos:end="2729:15">11</literal></expr>:</case>
        <case pos:start="2730:9" pos:end="2730:16">case <expr pos:start="2730:14" pos:end="2730:15"><literal type="number" pos:start="2730:14" pos:end="2730:15">18</literal></expr>:</case>
            <expr_stmt pos:start="2731:13" pos:end="2731:34"><expr pos:start="2731:13" pos:end="2731:33"><name pos:start="2731:13" pos:end="2731:16">algo</name> <operator pos:start="2731:18" pos:end="2731:18">=</operator> <name pos:start="2731:20" pos:end="2731:33">GCRY_MD_SHA256</name></expr>;</expr_stmt>
            <break pos:start="2732:13" pos:end="2732:18">break;</break>
        <case pos:start="2733:9" pos:end="2733:16">case <expr pos:start="2733:14" pos:end="2733:15"><literal type="number" pos:start="2733:14" pos:end="2733:15">12</literal></expr>:</case>
        <case pos:start="2734:9" pos:end="2734:16">case <expr pos:start="2734:14" pos:end="2734:15"><literal type="number" pos:start="2734:14" pos:end="2734:15">13</literal></expr>:</case>
            <expr_stmt pos:start="2735:13" pos:end="2735:34"><expr pos:start="2735:13" pos:end="2735:33"><name pos:start="2735:13" pos:end="2735:16">algo</name> <operator pos:start="2735:18" pos:end="2735:18">=</operator> <name pos:start="2735:20" pos:end="2735:33">GCRY_MD_SHA384</name></expr>;</expr_stmt>
            <break pos:start="2736:13" pos:end="2736:18">break;</break>
        <default pos:start="2737:9" pos:end="2737:16">default:</default>
            <comment type="block" pos:start="2738:13" pos:end="2738:45">/* Unknown / Not supported yet */</comment>
            <break pos:start="2739:13" pos:end="2739:18">break;</break>
        </block_content>}</block></switch>
        <return pos:start="2741:9" pos:end="2741:20">return <expr pos:start="2741:16" pos:end="2741:19"><name pos:start="2741:16" pos:end="2741:19">algo</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" pos:start="2744:5" pos:end="2744:69">/* derive the PTK from the BSSID, STA MAC, PMK, SNonce, ANonce */</comment>
    <comment type="block" format="doxygen" pos:start="2745:5" pos:end="2749:7">/** From IEEE 802.11-2016 12.7.1.3 Pairwise key hierarchy:
     *  PRF-Length(PMK, &#8220;Pairwise key expansion&#8221;,
     *      Min(AA, SPA) || Max(AA, SPA) ||
     *      Min(ANonce, SNonce) || Max(ANonce, SNonce))
     */</comment>
    <function pos:start="2750:5" pos:end="2840:5"><type pos:start="2750:5" pos:end="2750:17"><specifier pos:start="2750:5" pos:end="2750:10">static</specifier> <name pos:start="2750:12" pos:end="2750:17">guint8</name></type>
    <name pos:start="2751:5" pos:end="2751:25">Dot11DecryptDerivePtk</name><parameter_list pos:start="2751:26" pos:end="2759:37">(
        <parameter pos:start="2752:9" pos:end="2752:46"><decl pos:start="2752:9" pos:end="2752:46"><type pos:start="2752:9" pos:end="2752:46"><specifier pos:start="2752:9" pos:end="2752:13">const</specifier> <name pos:start="2752:15" pos:end="2752:42">DOT11DECRYPT_SEC_ASSOCIATION</name> <modifier pos:start="2752:44" pos:end="2752:44">*</modifier></type><name pos:start="2752:45" pos:end="2752:46">sa</name></decl></parameter>,
        <parameter pos:start="2753:9" pos:end="2753:24"><decl pos:start="2753:9" pos:end="2753:24"><type pos:start="2753:9" pos:end="2753:24"><specifier pos:start="2753:9" pos:end="2753:13">const</specifier> <name pos:start="2753:15" pos:end="2753:19">UCHAR</name> <modifier pos:start="2753:21" pos:end="2753:21">*</modifier></type><name pos:start="2753:22" pos:end="2753:24">pmk</name></decl></parameter>,
        <parameter pos:start="2754:9" pos:end="2754:22"><decl pos:start="2754:9" pos:end="2754:22"><type pos:start="2754:9" pos:end="2754:22"><name pos:start="2754:9" pos:end="2754:14">size_t</name></type> <name pos:start="2754:16" pos:end="2754:22">pmk_len</name></decl></parameter>,
        <parameter pos:start="2755:9" pos:end="2755:30"><decl pos:start="2755:9" pos:end="2755:30"><type pos:start="2755:9" pos:end="2755:26"><specifier pos:start="2755:9" pos:end="2755:13">const</specifier> <name pos:start="2755:15" pos:end="2755:19">UCHAR</name></type> <name pos:start="2755:21" pos:end="2755:30"><name pos:start="2755:21" pos:end="2755:26">snonce</name><index pos:start="2755:27" pos:end="2755:30">[<expr pos:start="2755:28" pos:end="2755:29"><literal type="number" pos:start="2755:28" pos:end="2755:29">32</literal></expr>]</index></name></decl></parameter>,
        <parameter pos:start="2756:9" pos:end="2756:23"><decl pos:start="2756:9" pos:end="2756:23"><type pos:start="2756:9" pos:end="2756:23"><name pos:start="2756:9" pos:end="2756:11">int</name></type> <name pos:start="2756:13" pos:end="2756:23">key_version</name></decl></parameter>,
        <parameter pos:start="2757:9" pos:end="2757:15"><decl pos:start="2757:9" pos:end="2757:15"><type pos:start="2757:9" pos:end="2757:15"><name pos:start="2757:9" pos:end="2757:11">int</name></type> <name pos:start="2757:13" pos:end="2757:15">akm</name></decl></parameter>,
        <parameter pos:start="2758:9" pos:end="2758:18"><decl pos:start="2758:9" pos:end="2758:18"><type pos:start="2758:9" pos:end="2758:18"><name pos:start="2758:9" pos:end="2758:11">int</name></type> <name pos:start="2758:13" pos:end="2758:18">cipher</name></decl></parameter>,
        <parameter pos:start="2759:9" pos:end="2759:19"><decl pos:start="2759:9" pos:end="2759:19"><type pos:start="2759:9" pos:end="2759:19"><name pos:start="2759:9" pos:end="2759:14">guint8</name> <modifier pos:start="2759:16" pos:end="2759:16">*</modifier></type><name pos:start="2759:17" pos:end="2759:19">ptk</name></decl></parameter>, <parameter pos:start="2759:22" pos:end="2759:36"><decl pos:start="2759:22" pos:end="2759:36"><type pos:start="2759:22" pos:end="2759:36"><name pos:start="2759:22" pos:end="2759:27">size_t</name> <modifier pos:start="2759:29" pos:end="2759:29">*</modifier></type><name pos:start="2759:30" pos:end="2759:36">ptk_len</name></decl></parameter>)</parameter_list>
    <block pos:start="2760:5" pos:end="2840:5">{<block_content pos:start="2761:9" pos:end="2839:40">
        <decl_stmt pos:start="2761:9" pos:end="2761:22"><decl pos:start="2761:9" pos:end="2761:21"><type pos:start="2761:9" pos:end="2761:11"><name pos:start="2761:9" pos:end="2761:11">int</name></type> <name pos:start="2761:13" pos:end="2761:16">algo</name> <init pos:start="2761:18" pos:end="2761:21">= <expr pos:start="2761:20" pos:end="2761:21"><operator pos:start="2761:20" pos:end="2761:20">-</operator><literal type="number" pos:start="2761:21" pos:end="2761:21">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="2762:9" pos:end="2762:30"><decl pos:start="2762:9" pos:end="2762:29"><type pos:start="2762:9" pos:end="2762:11"><name pos:start="2762:9" pos:end="2762:11">int</name></type> <name pos:start="2762:13" pos:end="2762:24">ptk_len_bits</name> <init pos:start="2762:26" pos:end="2762:29">= <expr pos:start="2762:28" pos:end="2762:29"><operator pos:start="2762:28" pos:end="2762:28">-</operator><literal type="number" pos:start="2762:29" pos:end="2762:29">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="2763:9" pos:end="2763:24"><decl pos:start="2763:9" pos:end="2763:23"><type pos:start="2763:9" pos:end="2763:11"><name pos:start="2763:9" pos:end="2763:11">int</name></type> <name pos:start="2763:13" pos:end="2763:23">derive_func</name></decl>;</decl_stmt>

        <if_stmt pos:start="2765:9" pos:end="2769:9"><if pos:start="2765:9" pos:end="2769:9">if <condition pos:start="2765:12" pos:end="2765:55">(<expr pos:start="2765:13" pos:end="2765:54"><operator pos:start="2765:13" pos:end="2765:13">!</operator><name pos:start="2765:14" pos:end="2765:15">sa</name> <operator pos:start="2765:17" pos:end="2765:18">||</operator> <operator pos:start="2765:20" pos:end="2765:20">!</operator><name pos:start="2765:21" pos:end="2765:23">pmk</name> <operator pos:start="2765:25" pos:end="2765:26">||</operator> <operator pos:start="2765:28" pos:end="2765:28">!</operator><name pos:start="2765:29" pos:end="2765:34">snonce</name> <operator pos:start="2765:36" pos:end="2765:37">||</operator> <operator pos:start="2765:39" pos:end="2765:39">!</operator><name pos:start="2765:40" pos:end="2765:42">ptk</name> <operator pos:start="2765:44" pos:end="2765:45">||</operator> <operator pos:start="2765:47" pos:end="2765:47">!</operator><name pos:start="2765:48" pos:end="2765:54">ptk_len</name></expr>)</condition>
        <block pos:start="2766:9" pos:end="2769:9">{<block_content pos:start="2767:13" pos:end="2768:55">
            <expr_stmt pos:start="2767:13" pos:end="2767:59"><expr pos:start="2767:13" pos:end="2767:58"><call pos:start="2767:13" pos:end="2767:58"><name pos:start="2767:13" pos:end="2767:22">ws_warning</name><argument_list pos:start="2767:23" pos:end="2767:58">(<argument pos:start="2767:24" pos:end="2767:57"><expr pos:start="2767:24" pos:end="2767:57"><literal type="string" pos:start="2767:24" pos:end="2767:57">"Invalid input for PTK derivation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2768:13" pos:end="2768:55">return <expr pos:start="2768:20" pos:end="2768:54"><name pos:start="2768:20" pos:end="2768:54">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="2771:9" pos:end="2785:9"><if pos:start="2771:9" pos:end="2777:9">if <condition pos:start="2771:12" pos:end="2771:29">(<expr pos:start="2771:13" pos:end="2771:28"><name pos:start="2771:13" pos:end="2771:23">key_version</name> <operator pos:start="2771:25" pos:end="2771:26">==</operator> <literal type="number" pos:start="2771:28" pos:end="2771:28">1</literal></expr>)</condition>
        <block pos:start="2772:9" pos:end="2777:9">{<block_content pos:start="2774:13" pos:end="2776:32">
            <comment type="block" pos:start="2773:13" pos:end="2773:22">/* TKIP */</comment>
            <expr_stmt pos:start="2774:13" pos:end="2774:31"><expr pos:start="2774:13" pos:end="2774:30"><name pos:start="2774:13" pos:end="2774:24">ptk_len_bits</name> <operator pos:start="2774:26" pos:end="2774:26">=</operator> <literal type="number" pos:start="2774:28" pos:end="2774:30">512</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="2775:13" pos:end="2775:28"><expr pos:start="2775:13" pos:end="2775:27"><name pos:start="2775:13" pos:end="2775:23">derive_func</name> <operator pos:start="2775:25" pos:end="2775:25">=</operator> <literal type="number" pos:start="2775:27" pos:end="2775:27">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="2776:13" pos:end="2776:32"><expr pos:start="2776:13" pos:end="2776:31"><name pos:start="2776:13" pos:end="2776:16">algo</name> <operator pos:start="2776:18" pos:end="2776:18">=</operator> <name pos:start="2776:20" pos:end="2776:31">GCRY_MD_SHA1</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else pos:start="2778:9" pos:end="2785:9">else
        <block pos:start="2779:9" pos:end="2785:9">{<block_content pos:start="2781:13" pos:end="2784:91">
            <comment type="block" pos:start="2780:13" pos:end="2780:84">/* From IEEE 802.11-2016 Table 12-8 Integrity and key-wrap algorithms */</comment>
            <expr_stmt pos:start="2781:13" pos:end="2781:62"><expr pos:start="2781:13" pos:end="2781:61"><name pos:start="2781:13" pos:end="2781:24">ptk_len_bits</name> <operator pos:start="2781:26" pos:end="2781:26">=</operator> <call pos:start="2781:28" pos:end="2781:61"><name pos:start="2781:28" pos:end="2781:48">Dot11DecryptGetPtkLen</name><argument_list pos:start="2781:49" pos:end="2781:61">(<argument pos:start="2781:50" pos:end="2781:52"><expr pos:start="2781:50" pos:end="2781:52"><name pos:start="2781:50" pos:end="2781:52">akm</name></expr></argument>, <argument pos:start="2781:55" pos:end="2781:60"><expr pos:start="2781:55" pos:end="2781:60"><name pos:start="2781:55" pos:end="2781:60">cipher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2782:13" pos:end="2782:55"><expr pos:start="2782:13" pos:end="2782:54"><name pos:start="2782:13" pos:end="2782:16">algo</name> <operator pos:start="2782:18" pos:end="2782:18">=</operator> <call pos:start="2782:20" pos:end="2782:54"><name pos:start="2782:20" pos:end="2782:49">Dot11DecryptGetHashAlgoFromAkm</name><argument_list pos:start="2782:50" pos:end="2782:54">(<argument pos:start="2782:51" pos:end="2782:53"><expr pos:start="2782:51" pos:end="2782:53"><name pos:start="2782:51" pos:end="2782:53">akm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2783:13" pos:end="2783:64"><expr pos:start="2783:13" pos:end="2783:63"><name pos:start="2783:13" pos:end="2783:23">derive_func</name> <operator pos:start="2783:25" pos:end="2783:25">=</operator> <call pos:start="2783:27" pos:end="2783:63"><name pos:start="2783:27" pos:end="2783:58">Dot11DecryptGetDeriveFuncFromAkm</name><argument_list pos:start="2783:59" pos:end="2783:63">(<argument pos:start="2783:60" pos:end="2783:62"><expr pos:start="2783:60" pos:end="2783:62"><name pos:start="2783:60" pos:end="2783:62">akm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2784:13" pos:end="2784:91"><expr pos:start="2784:13" pos:end="2784:90"><call pos:start="2784:13" pos:end="2784:90"><name pos:start="2784:13" pos:end="2784:20">ws_debug</name><argument_list pos:start="2784:21" pos:end="2784:90">(<argument pos:start="2784:22" pos:end="2784:61"><expr pos:start="2784:22" pos:end="2784:61"><literal type="string" pos:start="2784:22" pos:end="2784:61">"ptk_len_bits: %d, algo: %d, cipher: %d"</literal></expr></argument>, <argument pos:start="2784:64" pos:end="2784:75"><expr pos:start="2784:64" pos:end="2784:75"><name pos:start="2784:64" pos:end="2784:75">ptk_len_bits</name></expr></argument>, <argument pos:start="2784:78" pos:end="2784:81"><expr pos:start="2784:78" pos:end="2784:81"><name pos:start="2784:78" pos:end="2784:81">algo</name></expr></argument>, <argument pos:start="2784:84" pos:end="2784:89"><expr pos:start="2784:84" pos:end="2784:89"><name pos:start="2784:84" pos:end="2784:89">cipher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="2787:9" pos:end="2790:9"><if pos:start="2787:9" pos:end="2790:9">if <condition pos:start="2787:12" pos:end="2787:45">(<expr pos:start="2787:13" pos:end="2787:44"><name pos:start="2787:13" pos:end="2787:24">ptk_len_bits</name> <operator pos:start="2787:26" pos:end="2787:27">==</operator> <operator pos:start="2787:29" pos:end="2787:29">-</operator><literal type="number" pos:start="2787:30" pos:end="2787:30">1</literal> <operator pos:start="2787:32" pos:end="2787:33">||</operator> <name pos:start="2787:35" pos:end="2787:38">algo</name> <operator pos:start="2787:40" pos:end="2787:41">==</operator> <operator pos:start="2787:43" pos:end="2787:43">-</operator><literal type="number" pos:start="2787:44" pos:end="2787:44">1</literal></expr>)</condition>
        <block pos:start="2788:9" pos:end="2790:9">{<block_content pos:start="2789:13" pos:end="2789:55">
            <return pos:start="2789:13" pos:end="2789:55">return <expr pos:start="2789:20" pos:end="2789:54"><name pos:start="2789:20" pos:end="2789:54">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="2791:9" pos:end="2791:36"><expr pos:start="2791:9" pos:end="2791:35"><operator pos:start="2791:9" pos:end="2791:9">*</operator><name pos:start="2791:10" pos:end="2791:16">ptk_len</name> <operator pos:start="2791:18" pos:end="2791:18">=</operator> <name pos:start="2791:20" pos:end="2791:31">ptk_len_bits</name> <operator pos:start="2791:33" pos:end="2791:33">/</operator> <literal type="number" pos:start="2791:35" pos:end="2791:35">8</literal></expr>;</expr_stmt>

        <decl_stmt pos:start="2793:9" pos:end="2793:66"><decl pos:start="2793:9" pos:end="2793:65"><type pos:start="2793:9" pos:end="2793:32"><specifier pos:start="2793:9" pos:end="2793:14">static</specifier> <specifier pos:start="2793:16" pos:end="2793:20">const</specifier> <name pos:start="2793:22" pos:end="2793:25">char</name> <modifier pos:start="2793:27" pos:end="2793:27">*</modifier><specifier pos:start="2793:28" pos:end="2793:32">const</specifier></type> <name pos:start="2793:34" pos:end="2793:38">label</name> <init pos:start="2793:40" pos:end="2793:65">= <expr pos:start="2793:42" pos:end="2793:65"><literal type="string" pos:start="2793:42" pos:end="2793:65">"Pairwise key expansion"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="2794:9" pos:end="2794:58"><decl pos:start="2794:9" pos:end="2794:57"><type pos:start="2794:9" pos:end="2794:14"><name pos:start="2794:9" pos:end="2794:14">guint8</name></type> <name pos:start="2794:16" pos:end="2794:57"><name pos:start="2794:16" pos:end="2794:22">context</name><index pos:start="2794:23" pos:end="2794:57">[<expr pos:start="2794:24" pos:end="2794:56"><name pos:start="2794:24" pos:end="2794:43">DOT11DECRYPT_MAC_LEN</name> <operator pos:start="2794:45" pos:end="2794:45">*</operator> <literal type="number" pos:start="2794:47" pos:end="2794:47">2</literal> <operator pos:start="2794:49" pos:end="2794:49">+</operator> <literal type="number" pos:start="2794:51" pos:end="2794:52">32</literal> <operator pos:start="2794:54" pos:end="2794:54">*</operator> <literal type="number" pos:start="2794:56" pos:end="2794:56">2</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="2795:9" pos:end="2795:23"><decl pos:start="2795:9" pos:end="2795:22"><type pos:start="2795:9" pos:end="2795:11"><name pos:start="2795:9" pos:end="2795:11">int</name></type> <name pos:start="2795:13" pos:end="2795:18">offset</name> <init pos:start="2795:20" pos:end="2795:22">= <expr pos:start="2795:22" pos:end="2795:22"><literal type="number" pos:start="2795:22" pos:end="2795:22">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="2797:9" pos:end="2797:42">/* Min(AA, SPA) || Max(AA, SPA) */</comment>
        <if_stmt pos:start="2798:9" pos:end="2811:9"><if pos:start="2798:9" pos:end="2804:9">if <condition pos:start="2798:12" pos:end="2798:75">(<expr pos:start="2798:13" pos:end="2798:74"><call pos:start="2798:13" pos:end="2798:70"><name pos:start="2798:13" pos:end="2798:18">memcmp</name><argument_list pos:start="2798:19" pos:end="2798:70">(<argument pos:start="2798:20" pos:end="2798:31"><expr pos:start="2798:20" pos:end="2798:31"><name pos:start="2798:20" pos:end="2798:31"><name pos:start="2798:20" pos:end="2798:21">sa</name><operator pos:start="2798:22" pos:end="2798:23">-&gt;</operator><name pos:start="2798:24" pos:end="2798:27">saId</name><operator pos:start="2798:28" pos:end="2798:28">.</operator><name pos:start="2798:29" pos:end="2798:31">sta</name></name></expr></argument>, <argument pos:start="2798:34" pos:end="2798:47"><expr pos:start="2798:34" pos:end="2798:47"><name pos:start="2798:34" pos:end="2798:47"><name pos:start="2798:34" pos:end="2798:35">sa</name><operator pos:start="2798:36" pos:end="2798:37">-&gt;</operator><name pos:start="2798:38" pos:end="2798:41">saId</name><operator pos:start="2798:42" pos:end="2798:42">.</operator><name pos:start="2798:43" pos:end="2798:47">bssid</name></name></expr></argument>, <argument pos:start="2798:50" pos:end="2798:69"><expr pos:start="2798:50" pos:end="2798:69"><name pos:start="2798:50" pos:end="2798:69">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="2798:72" pos:end="2798:72">&lt;</operator> <literal type="number" pos:start="2798:74" pos:end="2798:74">0</literal></expr>)</condition>
        <block pos:start="2799:9" pos:end="2804:9">{<block_content pos:start="2800:13" pos:end="2803:43">
            <expr_stmt pos:start="2800:13" pos:end="2800:73"><expr pos:start="2800:13" pos:end="2800:72"><call pos:start="2800:13" pos:end="2800:72"><name pos:start="2800:13" pos:end="2800:18">memcpy</name><argument_list pos:start="2800:19" pos:end="2800:72">(<argument pos:start="2800:20" pos:end="2800:35"><expr pos:start="2800:20" pos:end="2800:35"><name pos:start="2800:20" pos:end="2800:26">context</name> <operator pos:start="2800:28" pos:end="2800:28">+</operator> <name pos:start="2800:30" pos:end="2800:35">offset</name></expr></argument>, <argument pos:start="2800:38" pos:end="2800:49"><expr pos:start="2800:38" pos:end="2800:49"><name pos:start="2800:38" pos:end="2800:49"><name pos:start="2800:38" pos:end="2800:39">sa</name><operator pos:start="2800:40" pos:end="2800:41">-&gt;</operator><name pos:start="2800:42" pos:end="2800:45">saId</name><operator pos:start="2800:46" pos:end="2800:46">.</operator><name pos:start="2800:47" pos:end="2800:49">sta</name></name></expr></argument>, <argument pos:start="2800:52" pos:end="2800:71"><expr pos:start="2800:52" pos:end="2800:71"><name pos:start="2800:52" pos:end="2800:71">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2801:13" pos:end="2801:43"><expr pos:start="2801:13" pos:end="2801:42"><name pos:start="2801:13" pos:end="2801:18">offset</name> <operator pos:start="2801:20" pos:end="2801:21">+=</operator> <name pos:start="2801:23" pos:end="2801:42">DOT11DECRYPT_MAC_LEN</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2802:13" pos:end="2802:75"><expr pos:start="2802:13" pos:end="2802:74"><call pos:start="2802:13" pos:end="2802:74"><name pos:start="2802:13" pos:end="2802:18">memcpy</name><argument_list pos:start="2802:19" pos:end="2802:74">(<argument pos:start="2802:20" pos:end="2802:35"><expr pos:start="2802:20" pos:end="2802:35"><name pos:start="2802:20" pos:end="2802:26">context</name> <operator pos:start="2802:28" pos:end="2802:28">+</operator> <name pos:start="2802:30" pos:end="2802:35">offset</name></expr></argument>, <argument pos:start="2802:38" pos:end="2802:51"><expr pos:start="2802:38" pos:end="2802:51"><name pos:start="2802:38" pos:end="2802:51"><name pos:start="2802:38" pos:end="2802:39">sa</name><operator pos:start="2802:40" pos:end="2802:41">-&gt;</operator><name pos:start="2802:42" pos:end="2802:45">saId</name><operator pos:start="2802:46" pos:end="2802:46">.</operator><name pos:start="2802:47" pos:end="2802:51">bssid</name></name></expr></argument>, <argument pos:start="2802:54" pos:end="2802:73"><expr pos:start="2802:54" pos:end="2802:73"><name pos:start="2802:54" pos:end="2802:73">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2803:13" pos:end="2803:43"><expr pos:start="2803:13" pos:end="2803:42"><name pos:start="2803:13" pos:end="2803:18">offset</name> <operator pos:start="2803:20" pos:end="2803:21">+=</operator> <name pos:start="2803:23" pos:end="2803:42">DOT11DECRYPT_MAC_LEN</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else pos:start="2805:9" pos:end="2811:9">else
        <block pos:start="2806:9" pos:end="2811:9">{<block_content pos:start="2807:13" pos:end="2810:43">
            <expr_stmt pos:start="2807:13" pos:end="2807:75"><expr pos:start="2807:13" pos:end="2807:74"><call pos:start="2807:13" pos:end="2807:74"><name pos:start="2807:13" pos:end="2807:18">memcpy</name><argument_list pos:start="2807:19" pos:end="2807:74">(<argument pos:start="2807:20" pos:end="2807:35"><expr pos:start="2807:20" pos:end="2807:35"><name pos:start="2807:20" pos:end="2807:26">context</name> <operator pos:start="2807:28" pos:end="2807:28">+</operator> <name pos:start="2807:30" pos:end="2807:35">offset</name></expr></argument>, <argument pos:start="2807:38" pos:end="2807:51"><expr pos:start="2807:38" pos:end="2807:51"><name pos:start="2807:38" pos:end="2807:51"><name pos:start="2807:38" pos:end="2807:39">sa</name><operator pos:start="2807:40" pos:end="2807:41">-&gt;</operator><name pos:start="2807:42" pos:end="2807:45">saId</name><operator pos:start="2807:46" pos:end="2807:46">.</operator><name pos:start="2807:47" pos:end="2807:51">bssid</name></name></expr></argument>, <argument pos:start="2807:54" pos:end="2807:73"><expr pos:start="2807:54" pos:end="2807:73"><name pos:start="2807:54" pos:end="2807:73">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2808:13" pos:end="2808:43"><expr pos:start="2808:13" pos:end="2808:42"><name pos:start="2808:13" pos:end="2808:18">offset</name> <operator pos:start="2808:20" pos:end="2808:21">+=</operator> <name pos:start="2808:23" pos:end="2808:42">DOT11DECRYPT_MAC_LEN</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2809:13" pos:end="2809:73"><expr pos:start="2809:13" pos:end="2809:72"><call pos:start="2809:13" pos:end="2809:72"><name pos:start="2809:13" pos:end="2809:18">memcpy</name><argument_list pos:start="2809:19" pos:end="2809:72">(<argument pos:start="2809:20" pos:end="2809:35"><expr pos:start="2809:20" pos:end="2809:35"><name pos:start="2809:20" pos:end="2809:26">context</name> <operator pos:start="2809:28" pos:end="2809:28">+</operator> <name pos:start="2809:30" pos:end="2809:35">offset</name></expr></argument>, <argument pos:start="2809:38" pos:end="2809:49"><expr pos:start="2809:38" pos:end="2809:49"><name pos:start="2809:38" pos:end="2809:49"><name pos:start="2809:38" pos:end="2809:39">sa</name><operator pos:start="2809:40" pos:end="2809:41">-&gt;</operator><name pos:start="2809:42" pos:end="2809:45">saId</name><operator pos:start="2809:46" pos:end="2809:46">.</operator><name pos:start="2809:47" pos:end="2809:49">sta</name></name></expr></argument>, <argument pos:start="2809:52" pos:end="2809:71"><expr pos:start="2809:52" pos:end="2809:71"><name pos:start="2809:52" pos:end="2809:71">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2810:13" pos:end="2810:43"><expr pos:start="2810:13" pos:end="2810:42"><name pos:start="2810:13" pos:end="2810:18">offset</name> <operator pos:start="2810:20" pos:end="2810:21">+=</operator> <name pos:start="2810:23" pos:end="2810:42">DOT11DECRYPT_MAC_LEN</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="block" pos:start="2813:9" pos:end="2813:56">/* Min(ANonce, SNonce) || Max(ANonce, SNonce) */</comment>
        <if_stmt pos:start="2814:9" pos:end="2827:9"><if pos:start="2814:9" pos:end="2820:9">if <condition pos:start="2814:12" pos:end="2814:50">(<expr pos:start="2814:13" pos:end="2814:49"><call pos:start="2814:13" pos:end="2814:45"><name pos:start="2814:13" pos:end="2814:18">memcmp</name><argument_list pos:start="2814:19" pos:end="2814:45">(<argument pos:start="2814:20" pos:end="2814:25"><expr pos:start="2814:20" pos:end="2814:25"><name pos:start="2814:20" pos:end="2814:25">snonce</name></expr></argument>, <argument pos:start="2814:28" pos:end="2814:40"><expr pos:start="2814:28" pos:end="2814:40"><name pos:start="2814:28" pos:end="2814:40"><name pos:start="2814:28" pos:end="2814:29">sa</name><operator pos:start="2814:30" pos:end="2814:31">-&gt;</operator><name pos:start="2814:32" pos:end="2814:34">wpa</name><operator pos:start="2814:35" pos:end="2814:35">.</operator><name pos:start="2814:36" pos:end="2814:40">nonce</name></name></expr></argument>, <argument pos:start="2814:43" pos:end="2814:44"><expr pos:start="2814:43" pos:end="2814:44"><literal type="number" pos:start="2814:43" pos:end="2814:44">32</literal></expr></argument>)</argument_list></call> <operator pos:start="2814:47" pos:end="2814:47">&lt;</operator> <literal type="number" pos:start="2814:49" pos:end="2814:49">0</literal></expr>)</condition>
        <block pos:start="2815:9" pos:end="2820:9">{<block_content pos:start="2816:13" pos:end="2819:25">
            <expr_stmt pos:start="2816:13" pos:end="2816:49"><expr pos:start="2816:13" pos:end="2816:48"><call pos:start="2816:13" pos:end="2816:48"><name pos:start="2816:13" pos:end="2816:18">memcpy</name><argument_list pos:start="2816:19" pos:end="2816:48">(<argument pos:start="2816:20" pos:end="2816:35"><expr pos:start="2816:20" pos:end="2816:35"><name pos:start="2816:20" pos:end="2816:26">context</name> <operator pos:start="2816:28" pos:end="2816:28">+</operator> <name pos:start="2816:30" pos:end="2816:35">offset</name></expr></argument>, <argument pos:start="2816:38" pos:end="2816:43"><expr pos:start="2816:38" pos:end="2816:43"><name pos:start="2816:38" pos:end="2816:43">snonce</name></expr></argument>, <argument pos:start="2816:46" pos:end="2816:47"><expr pos:start="2816:46" pos:end="2816:47"><literal type="number" pos:start="2816:46" pos:end="2816:47">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2817:13" pos:end="2817:25"><expr pos:start="2817:13" pos:end="2817:24"><name pos:start="2817:13" pos:end="2817:18">offset</name> <operator pos:start="2817:20" pos:end="2817:21">+=</operator> <literal type="number" pos:start="2817:23" pos:end="2817:24">32</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="2818:13" pos:end="2818:56"><expr pos:start="2818:13" pos:end="2818:55"><call pos:start="2818:13" pos:end="2818:55"><name pos:start="2818:13" pos:end="2818:18">memcpy</name><argument_list pos:start="2818:19" pos:end="2818:55">(<argument pos:start="2818:20" pos:end="2818:35"><expr pos:start="2818:20" pos:end="2818:35"><name pos:start="2818:20" pos:end="2818:26">context</name> <operator pos:start="2818:28" pos:end="2818:28">+</operator> <name pos:start="2818:30" pos:end="2818:35">offset</name></expr></argument>, <argument pos:start="2818:38" pos:end="2818:50"><expr pos:start="2818:38" pos:end="2818:50"><name pos:start="2818:38" pos:end="2818:50"><name pos:start="2818:38" pos:end="2818:39">sa</name><operator pos:start="2818:40" pos:end="2818:41">-&gt;</operator><name pos:start="2818:42" pos:end="2818:44">wpa</name><operator pos:start="2818:45" pos:end="2818:45">.</operator><name pos:start="2818:46" pos:end="2818:50">nonce</name></name></expr></argument>, <argument pos:start="2818:53" pos:end="2818:54"><expr pos:start="2818:53" pos:end="2818:54"><literal type="number" pos:start="2818:53" pos:end="2818:54">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2819:13" pos:end="2819:25"><expr pos:start="2819:13" pos:end="2819:24"><name pos:start="2819:13" pos:end="2819:18">offset</name> <operator pos:start="2819:20" pos:end="2819:21">+=</operator> <literal type="number" pos:start="2819:23" pos:end="2819:24">32</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else pos:start="2821:9" pos:end="2827:9">else
        <block pos:start="2822:9" pos:end="2827:9">{<block_content pos:start="2823:13" pos:end="2826:25">
            <expr_stmt pos:start="2823:13" pos:end="2823:56"><expr pos:start="2823:13" pos:end="2823:55"><call pos:start="2823:13" pos:end="2823:55"><name pos:start="2823:13" pos:end="2823:18">memcpy</name><argument_list pos:start="2823:19" pos:end="2823:55">(<argument pos:start="2823:20" pos:end="2823:35"><expr pos:start="2823:20" pos:end="2823:35"><name pos:start="2823:20" pos:end="2823:26">context</name> <operator pos:start="2823:28" pos:end="2823:28">+</operator> <name pos:start="2823:30" pos:end="2823:35">offset</name></expr></argument>, <argument pos:start="2823:38" pos:end="2823:50"><expr pos:start="2823:38" pos:end="2823:50"><name pos:start="2823:38" pos:end="2823:50"><name pos:start="2823:38" pos:end="2823:39">sa</name><operator pos:start="2823:40" pos:end="2823:41">-&gt;</operator><name pos:start="2823:42" pos:end="2823:44">wpa</name><operator pos:start="2823:45" pos:end="2823:45">.</operator><name pos:start="2823:46" pos:end="2823:50">nonce</name></name></expr></argument>, <argument pos:start="2823:53" pos:end="2823:54"><expr pos:start="2823:53" pos:end="2823:54"><literal type="number" pos:start="2823:53" pos:end="2823:54">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2824:13" pos:end="2824:25"><expr pos:start="2824:13" pos:end="2824:24"><name pos:start="2824:13" pos:end="2824:18">offset</name> <operator pos:start="2824:20" pos:end="2824:21">+=</operator> <literal type="number" pos:start="2824:23" pos:end="2824:24">32</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="2825:13" pos:end="2825:49"><expr pos:start="2825:13" pos:end="2825:48"><call pos:start="2825:13" pos:end="2825:48"><name pos:start="2825:13" pos:end="2825:18">memcpy</name><argument_list pos:start="2825:19" pos:end="2825:48">(<argument pos:start="2825:20" pos:end="2825:35"><expr pos:start="2825:20" pos:end="2825:35"><name pos:start="2825:20" pos:end="2825:26">context</name> <operator pos:start="2825:28" pos:end="2825:28">+</operator> <name pos:start="2825:30" pos:end="2825:35">offset</name></expr></argument>, <argument pos:start="2825:38" pos:end="2825:43"><expr pos:start="2825:38" pos:end="2825:43"><name pos:start="2825:38" pos:end="2825:43">snonce</name></expr></argument>, <argument pos:start="2825:46" pos:end="2825:47"><expr pos:start="2825:46" pos:end="2825:47"><literal type="number" pos:start="2825:46" pos:end="2825:47">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2826:13" pos:end="2826:25"><expr pos:start="2826:13" pos:end="2826:24"><name pos:start="2826:13" pos:end="2826:18">offset</name> <operator pos:start="2826:20" pos:end="2826:21">+=</operator> <literal type="number" pos:start="2826:23" pos:end="2826:24">32</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt pos:start="2828:9" pos:end="2837:9"><if pos:start="2828:9" pos:end="2832:9">if <condition pos:start="2828:12" pos:end="2828:29">(<expr pos:start="2828:13" pos:end="2828:28"><name pos:start="2828:13" pos:end="2828:23">derive_func</name> <operator pos:start="2828:25" pos:end="2828:26">==</operator> <literal type="number" pos:start="2828:28" pos:end="2828:28">0</literal></expr>)</condition>
        <block pos:start="2829:9" pos:end="2832:9">{<block_content pos:start="2830:13" pos:end="2831:44">
            <expr_stmt pos:start="2830:13" pos:end="2831:44"><expr pos:start="2830:13" pos:end="2831:43"><call pos:start="2830:13" pos:end="2831:43"><name pos:start="2830:13" pos:end="2830:28">dot11decrypt_prf</name><argument_list pos:start="2830:29" pos:end="2831:43">(<argument pos:start="2830:30" pos:end="2830:32"><expr pos:start="2830:30" pos:end="2830:32"><name pos:start="2830:30" pos:end="2830:32">pmk</name></expr></argument>, <argument pos:start="2830:35" pos:end="2830:41"><expr pos:start="2830:35" pos:end="2830:41"><name pos:start="2830:35" pos:end="2830:41">pmk_len</name></expr></argument>, <argument pos:start="2830:44" pos:end="2830:48"><expr pos:start="2830:44" pos:end="2830:48"><name pos:start="2830:44" pos:end="2830:48">label</name></expr></argument>, <argument pos:start="2830:51" pos:end="2830:57"><expr pos:start="2830:51" pos:end="2830:57"><name pos:start="2830:51" pos:end="2830:57">context</name></expr></argument>, <argument pos:start="2830:60" pos:end="2830:65"><expr pos:start="2830:60" pos:end="2830:65"><name pos:start="2830:60" pos:end="2830:65">offset</name></expr></argument>, <argument pos:start="2830:68" pos:end="2830:71"><expr pos:start="2830:68" pos:end="2830:71"><name pos:start="2830:68" pos:end="2830:71">algo</name></expr></argument>,
                             <argument pos:start="2831:30" pos:end="2831:32"><expr pos:start="2831:30" pos:end="2831:32"><name pos:start="2831:30" pos:end="2831:32">ptk</name></expr></argument>, <argument pos:start="2831:35" pos:end="2831:42"><expr pos:start="2831:35" pos:end="2831:42"><operator pos:start="2831:35" pos:end="2831:35">*</operator><name pos:start="2831:36" pos:end="2831:42">ptk_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else pos:start="2833:9" pos:end="2837:9">else
        <block pos:start="2834:9" pos:end="2837:9">{<block_content pos:start="2835:13" pos:end="2836:44">
            <expr_stmt pos:start="2835:13" pos:end="2836:44"><expr pos:start="2835:13" pos:end="2836:43"><call pos:start="2835:13" pos:end="2836:43"><name pos:start="2835:13" pos:end="2835:28">dot11decrypt_kdf</name><argument_list pos:start="2835:29" pos:end="2836:43">(<argument pos:start="2835:30" pos:end="2835:32"><expr pos:start="2835:30" pos:end="2835:32"><name pos:start="2835:30" pos:end="2835:32">pmk</name></expr></argument>, <argument pos:start="2835:35" pos:end="2835:41"><expr pos:start="2835:35" pos:end="2835:41"><name pos:start="2835:35" pos:end="2835:41">pmk_len</name></expr></argument>, <argument pos:start="2835:44" pos:end="2835:48"><expr pos:start="2835:44" pos:end="2835:48"><name pos:start="2835:44" pos:end="2835:48">label</name></expr></argument>, <argument pos:start="2835:51" pos:end="2835:57"><expr pos:start="2835:51" pos:end="2835:57"><name pos:start="2835:51" pos:end="2835:57">context</name></expr></argument>, <argument pos:start="2835:60" pos:end="2835:65"><expr pos:start="2835:60" pos:end="2835:65"><name pos:start="2835:60" pos:end="2835:65">offset</name></expr></argument>, <argument pos:start="2835:68" pos:end="2835:71"><expr pos:start="2835:68" pos:end="2835:71"><name pos:start="2835:68" pos:end="2835:71">algo</name></expr></argument>,
                             <argument pos:start="2836:30" pos:end="2836:32"><expr pos:start="2836:30" pos:end="2836:32"><name pos:start="2836:30" pos:end="2836:32">ptk</name></expr></argument>, <argument pos:start="2836:35" pos:end="2836:42"><expr pos:start="2836:35" pos:end="2836:42"><operator pos:start="2836:35" pos:end="2836:35">*</operator><name pos:start="2836:36" pos:end="2836:42">ptk_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt pos:start="2838:9" pos:end="2838:58"><expr pos:start="2838:9" pos:end="2838:57"><call pos:start="2838:9" pos:end="2838:57"><name pos:start="2838:9" pos:end="2838:18">DEBUG_DUMP</name><argument_list pos:start="2838:19" pos:end="2838:57">(<argument pos:start="2838:20" pos:end="2838:24"><expr pos:start="2838:20" pos:end="2838:24"><literal type="string" pos:start="2838:20" pos:end="2838:24">"PTK"</literal></expr></argument>, <argument pos:start="2838:27" pos:end="2838:29"><expr pos:start="2838:27" pos:end="2838:29"><name pos:start="2838:27" pos:end="2838:29">ptk</name></expr></argument>, <argument pos:start="2838:32" pos:end="2838:39"><expr pos:start="2838:32" pos:end="2838:39"><operator pos:start="2838:32" pos:end="2838:32">*</operator><name pos:start="2838:33" pos:end="2838:39">ptk_len</name></expr></argument>, <argument pos:start="2838:42" pos:end="2838:56"><expr pos:start="2838:42" pos:end="2838:56"><name pos:start="2838:42" pos:end="2838:56">LOG_LEVEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2839:9" pos:end="2839:40">return <expr pos:start="2839:16" pos:end="2839:39"><name pos:start="2839:16" pos:end="2839:39">DOT11DECRYPT_RET_SUCCESS</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="doxygen" pos:start="2842:5" pos:end="2846:7">/**
     * For Fast BSS Transition AKMS derive PTK from sa, selected key and various information in
     * eapol key frame.
     * From IEEE 802.11-2016 12.7.1.7.1
     */</comment>
    <function pos:start="2847:5" pos:end="2925:0"><type pos:start="2847:5" pos:end="2847:17"><specifier pos:start="2847:5" pos:end="2847:10">static</specifier> <name pos:start="2847:12" pos:end="2847:17">guint8</name></type>
    <name pos:start="2848:5" pos:end="2848:27">Dot11DecryptFtDerivePtk</name><parameter_list pos:start="2848:28" pos:end="2857:37">(
        <parameter pos:start="2849:9" pos:end="2849:39"><decl pos:start="2849:9" pos:end="2849:39"><type pos:start="2849:9" pos:end="2849:39"><specifier pos:start="2849:9" pos:end="2849:13">const</specifier> <name pos:start="2849:15" pos:end="2849:35">PDOT11DECRYPT_CONTEXT</name></type> <name pos:start="2849:37" pos:end="2849:39">ctx</name></decl></parameter>,
        <parameter pos:start="2850:9" pos:end="2850:46"><decl pos:start="2850:9" pos:end="2850:46"><type pos:start="2850:9" pos:end="2850:46"><specifier pos:start="2850:9" pos:end="2850:13">const</specifier> <name pos:start="2850:15" pos:end="2850:42">DOT11DECRYPT_SEC_ASSOCIATION</name> <modifier pos:start="2850:44" pos:end="2850:44">*</modifier></type><name pos:start="2850:45" pos:end="2850:46">sa</name></decl></parameter>,
        <parameter pos:start="2851:9" pos:end="2851:40"><decl pos:start="2851:9" pos:end="2851:40"><type pos:start="2851:9" pos:end="2851:40"><specifier pos:start="2851:9" pos:end="2851:13">const</specifier> <name pos:start="2851:15" pos:end="2851:36">PDOT11DECRYPT_KEY_ITEM</name></type> <name pos:start="2851:38" pos:end="2851:40">key</name></decl></parameter>,
        <parameter pos:start="2852:9" pos:end="2852:28"><decl pos:start="2852:9" pos:end="2852:28"><type pos:start="2852:9" pos:end="2852:25"><specifier pos:start="2852:9" pos:end="2852:13">const</specifier> <name pos:start="2852:15" pos:end="2852:20">guint8</name></type> <name pos:start="2852:22" pos:end="2852:28"><name pos:start="2852:22" pos:end="2852:25">mdid</name><index pos:start="2852:26" pos:end="2852:28">[<expr pos:start="2852:27" pos:end="2852:27"><literal type="number" pos:start="2852:27" pos:end="2852:27">2</literal></expr>]</index></name></decl></parameter>,
        <parameter pos:start="2853:9" pos:end="2853:28"><decl pos:start="2853:9" pos:end="2853:28"><type pos:start="2853:9" pos:end="2853:28"><specifier pos:start="2853:9" pos:end="2853:13">const</specifier> <name pos:start="2853:15" pos:end="2853:20">guint8</name> <modifier pos:start="2853:22" pos:end="2853:22">*</modifier></type><name pos:start="2853:23" pos:end="2853:28">snonce</name></decl></parameter>,
        <parameter pos:start="2854:9" pos:end="2854:29"><decl pos:start="2854:9" pos:end="2854:29"><type pos:start="2854:9" pos:end="2854:29"><specifier pos:start="2854:9" pos:end="2854:13">const</specifier> <name pos:start="2854:15" pos:end="2854:20">guint8</name> <modifier pos:start="2854:22" pos:end="2854:22">*</modifier></type><name pos:start="2854:23" pos:end="2854:29">r0kh_id</name></decl></parameter>, <parameter pos:start="2854:32" pos:end="2854:49"><decl pos:start="2854:32" pos:end="2854:49"><type pos:start="2854:32" pos:end="2854:49"><name pos:start="2854:32" pos:end="2854:37">size_t</name></type> <name pos:start="2854:39" pos:end="2854:49">r0kh_id_len</name></decl></parameter>,
        <parameter pos:start="2855:9" pos:end="2855:29"><decl pos:start="2855:9" pos:end="2855:29"><type pos:start="2855:9" pos:end="2855:29"><specifier pos:start="2855:9" pos:end="2855:13">const</specifier> <name pos:start="2855:15" pos:end="2855:20">guint8</name> <modifier pos:start="2855:22" pos:end="2855:22">*</modifier></type><name pos:start="2855:23" pos:end="2855:29">r1kh_id</name></decl></parameter>, <parameter pos:start="2855:32" pos:end="2855:53"><decl pos:start="2855:32" pos:end="2855:53"><type pos:start="2855:32" pos:end="2855:53"><name pos:start="2855:32" pos:end="2855:37">size_t</name> <name pos:start="2855:39" pos:end="2855:49">r1kh_id_len</name></type> <name pos:start="2855:51" pos:end="2855:53">_U_</name></decl></parameter>,
        <parameter pos:start="2856:9" pos:end="2856:15"><decl pos:start="2856:9" pos:end="2856:15"><type pos:start="2856:9" pos:end="2856:15"><name pos:start="2856:9" pos:end="2856:11">int</name></type> <name pos:start="2856:13" pos:end="2856:15">akm</name></decl></parameter>, <parameter pos:start="2856:18" pos:end="2856:27"><decl pos:start="2856:18" pos:end="2856:27"><type pos:start="2856:18" pos:end="2856:27"><name pos:start="2856:18" pos:end="2856:20">int</name></type> <name pos:start="2856:22" pos:end="2856:27">cipher</name></decl></parameter>,
        <parameter pos:start="2857:9" pos:end="2857:19"><decl pos:start="2857:9" pos:end="2857:19"><type pos:start="2857:9" pos:end="2857:19"><name pos:start="2857:9" pos:end="2857:14">guint8</name> <modifier pos:start="2857:16" pos:end="2857:16">*</modifier></type><name pos:start="2857:17" pos:end="2857:19">ptk</name></decl></parameter>, <parameter pos:start="2857:22" pos:end="2857:36"><decl pos:start="2857:22" pos:end="2857:36"><type pos:start="2857:22" pos:end="2857:36"><name pos:start="2857:22" pos:end="2857:27">size_t</name> <modifier pos:start="2857:29" pos:end="2857:29">*</modifier></type><name pos:start="2857:30" pos:end="2857:36">ptk_len</name></decl></parameter>)</parameter_list>
    <block pos:start="2858:5" pos:end="2925:0">{<block_content pos:start="2859:9" pos:end="2921:40">
        <decl_stmt pos:start="2859:9" pos:end="2859:60"><decl pos:start="2859:9" pos:end="2859:59"><type pos:start="2859:9" pos:end="2859:11"><name pos:start="2859:9" pos:end="2859:11">int</name></type> <name pos:start="2859:13" pos:end="2859:21">hash_algo</name> <init pos:start="2859:23" pos:end="2859:59">= <expr pos:start="2859:25" pos:end="2859:59"><call pos:start="2859:25" pos:end="2859:59"><name pos:start="2859:25" pos:end="2859:54">Dot11DecryptGetHashAlgoFromAkm</name><argument_list pos:start="2859:55" pos:end="2859:59">(<argument pos:start="2859:56" pos:end="2859:58"><expr pos:start="2859:56" pos:end="2859:58"><name pos:start="2859:56" pos:end="2859:58">akm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="2860:9" pos:end="2860:52"><decl pos:start="2860:9" pos:end="2860:51"><type pos:start="2860:9" pos:end="2860:14"><name pos:start="2860:9" pos:end="2860:14">guint8</name></type> <name pos:start="2860:16" pos:end="2860:51"><name pos:start="2860:16" pos:end="2860:21">pmk_r0</name><index pos:start="2860:22" pos:end="2860:51">[<expr pos:start="2860:23" pos:end="2860:50"><name pos:start="2860:23" pos:end="2860:50">DOT11DECRYPT_WPA_PMK_MAX_LEN</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="2861:9" pos:end="2861:52"><decl pos:start="2861:9" pos:end="2861:51"><type pos:start="2861:9" pos:end="2861:14"><name pos:start="2861:9" pos:end="2861:14">guint8</name></type> <name pos:start="2861:16" pos:end="2861:51"><name pos:start="2861:16" pos:end="2861:21">pmk_r1</name><index pos:start="2861:22" pos:end="2861:51">[<expr pos:start="2861:23" pos:end="2861:50"><name pos:start="2861:23" pos:end="2861:50">DOT11DECRYPT_WPA_PMK_MAX_LEN</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="2862:9" pos:end="2862:31"><decl pos:start="2862:9" pos:end="2862:30"><type pos:start="2862:9" pos:end="2862:14"><name pos:start="2862:9" pos:end="2862:14">guint8</name></type> <name pos:start="2862:16" pos:end="2862:30"><name pos:start="2862:16" pos:end="2862:26">pmk_r0_name</name><index pos:start="2862:27" pos:end="2862:30">[<expr pos:start="2862:28" pos:end="2862:29"><literal type="number" pos:start="2862:28" pos:end="2862:29">16</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="2863:9" pos:end="2863:31"><decl pos:start="2863:9" pos:end="2863:30"><type pos:start="2863:9" pos:end="2863:14"><name pos:start="2863:9" pos:end="2863:14">guint8</name></type> <name pos:start="2863:16" pos:end="2863:30"><name pos:start="2863:16" pos:end="2863:26">pmk_r1_name</name><index pos:start="2863:27" pos:end="2863:30">[<expr pos:start="2863:28" pos:end="2863:29"><literal type="number" pos:start="2863:28" pos:end="2863:29">16</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="2864:9" pos:end="2864:28"><decl pos:start="2864:9" pos:end="2864:27"><type pos:start="2864:9" pos:end="2864:14"><name pos:start="2864:9" pos:end="2864:14">guint8</name></type> <name pos:start="2864:16" pos:end="2864:27"><name pos:start="2864:16" pos:end="2864:23">ptk_name</name><index pos:start="2864:24" pos:end="2864:27">[<expr pos:start="2864:25" pos:end="2864:26"><literal type="number" pos:start="2864:25" pos:end="2864:26">16</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="2865:9" pos:end="2865:26"><decl pos:start="2865:9" pos:end="2865:25"><type pos:start="2865:9" pos:end="2865:14"><name pos:start="2865:9" pos:end="2865:14">size_t</name></type> <name pos:start="2865:16" pos:end="2865:25">pmk_r0_len</name></decl>;</decl_stmt>
        <decl_stmt pos:start="2866:9" pos:end="2866:26"><decl pos:start="2866:9" pos:end="2866:25"><type pos:start="2866:9" pos:end="2866:14"><name pos:start="2866:9" pos:end="2866:14">size_t</name></type> <name pos:start="2866:16" pos:end="2866:25">pmk_r1_len</name></decl>;</decl_stmt>
        <decl_stmt pos:start="2867:9" pos:end="2867:35"><decl pos:start="2867:9" pos:end="2867:34"><type pos:start="2867:9" pos:end="2867:22"><specifier pos:start="2867:9" pos:end="2867:13">const</specifier> <name pos:start="2867:15" pos:end="2867:20">guint8</name> <modifier pos:start="2867:22" pos:end="2867:22">*</modifier></type><name pos:start="2867:23" pos:end="2867:27">xxkey</name> <init pos:start="2867:29" pos:end="2867:34">= <expr pos:start="2867:31" pos:end="2867:34"><name pos:start="2867:31" pos:end="2867:34">NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="2868:9" pos:end="2868:25"><decl pos:start="2868:9" pos:end="2868:24"><type pos:start="2868:9" pos:end="2868:14"><name pos:start="2868:9" pos:end="2868:14">size_t</name></type> <name pos:start="2868:16" pos:end="2868:24">xxkey_len</name></decl>;</decl_stmt>
        <decl_stmt pos:start="2869:9" pos:end="2869:25"><decl pos:start="2869:9" pos:end="2869:24"><type pos:start="2869:9" pos:end="2869:11"><name pos:start="2869:9" pos:end="2869:11">int</name></type> <name pos:start="2869:13" pos:end="2869:24">ptk_len_bits</name></decl>;</decl_stmt>

        <if_stmt pos:start="2871:9" pos:end="2875:9"><if pos:start="2871:9" pos:end="2875:9">if <condition pos:start="2871:12" pos:end="2871:88">(<expr pos:start="2871:13" pos:end="2871:87"><operator pos:start="2871:13" pos:end="2871:13">!</operator><name pos:start="2871:14" pos:end="2871:15">sa</name> <operator pos:start="2871:17" pos:end="2871:18">||</operator> <operator pos:start="2871:20" pos:end="2871:20">!</operator><name pos:start="2871:21" pos:end="2871:23">key</name> <operator pos:start="2871:25" pos:end="2871:26">||</operator> <operator pos:start="2871:28" pos:end="2871:28">!</operator><name pos:start="2871:29" pos:end="2871:32">mdid</name> <operator pos:start="2871:34" pos:end="2871:35">||</operator> <operator pos:start="2871:37" pos:end="2871:37">!</operator><name pos:start="2871:38" pos:end="2871:43">snonce</name> <operator pos:start="2871:45" pos:end="2871:46">||</operator> <operator pos:start="2871:48" pos:end="2871:48">!</operator><name pos:start="2871:49" pos:end="2871:55">r0kh_id</name> <operator pos:start="2871:57" pos:end="2871:58">||</operator> <operator pos:start="2871:60" pos:end="2871:60">!</operator><name pos:start="2871:61" pos:end="2871:67">r1kh_id</name> <operator pos:start="2871:69" pos:end="2871:70">||</operator> <operator pos:start="2871:72" pos:end="2871:72">!</operator><name pos:start="2871:73" pos:end="2871:75">ptk</name> <operator pos:start="2871:77" pos:end="2871:78">||</operator> <operator pos:start="2871:80" pos:end="2871:80">!</operator><name pos:start="2871:81" pos:end="2871:87">ptk_len</name></expr>)</condition>
        <block pos:start="2872:9" pos:end="2875:9">{<block_content pos:start="2873:13" pos:end="2874:55">
            <expr_stmt pos:start="2873:13" pos:end="2873:62"><expr pos:start="2873:13" pos:end="2873:61"><call pos:start="2873:13" pos:end="2873:61"><name pos:start="2873:13" pos:end="2873:22">ws_warning</name><argument_list pos:start="2873:23" pos:end="2873:61">(<argument pos:start="2873:24" pos:end="2873:60"><expr pos:start="2873:24" pos:end="2873:60"><literal type="string" pos:start="2873:24" pos:end="2873:60">"Invalid input for FT PTK derivation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2874:13" pos:end="2874:55">return <expr pos:start="2874:20" pos:end="2874:54"><name pos:start="2874:20" pos:end="2874:54">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="2876:9" pos:end="2876:58"><expr pos:start="2876:9" pos:end="2876:57"><name pos:start="2876:9" pos:end="2876:20">ptk_len_bits</name> <operator pos:start="2876:22" pos:end="2876:22">=</operator> <call pos:start="2876:24" pos:end="2876:57"><name pos:start="2876:24" pos:end="2876:44">Dot11DecryptGetPtkLen</name><argument_list pos:start="2876:45" pos:end="2876:57">(<argument pos:start="2876:46" pos:end="2876:48"><expr pos:start="2876:46" pos:end="2876:48"><name pos:start="2876:46" pos:end="2876:48">akm</name></expr></argument>, <argument pos:start="2876:51" pos:end="2876:56"><expr pos:start="2876:51" pos:end="2876:56"><name pos:start="2876:51" pos:end="2876:56">cipher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2877:9" pos:end="2881:9"><if pos:start="2877:9" pos:end="2881:9">if <condition pos:start="2877:12" pos:end="2877:31">(<expr pos:start="2877:13" pos:end="2877:30"><name pos:start="2877:13" pos:end="2877:24">ptk_len_bits</name> <operator pos:start="2877:26" pos:end="2877:27">==</operator> <operator pos:start="2877:29" pos:end="2877:29">-</operator><literal type="number" pos:start="2877:30" pos:end="2877:30">1</literal></expr>)</condition>
        <block pos:start="2878:9" pos:end="2881:9">{<block_content pos:start="2879:13" pos:end="2880:55">
            <expr_stmt pos:start="2879:13" pos:end="2879:48"><expr pos:start="2879:13" pos:end="2879:47"><call pos:start="2879:13" pos:end="2879:47"><name pos:start="2879:13" pos:end="2879:22">ws_warning</name><argument_list pos:start="2879:23" pos:end="2879:47">(<argument pos:start="2879:24" pos:end="2879:46"><expr pos:start="2879:24" pos:end="2879:46"><literal type="string" pos:start="2879:24" pos:end="2879:46">"Invalid akm or cipher"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2880:13" pos:end="2880:55">return <expr pos:start="2880:20" pos:end="2880:54"><name pos:start="2880:20" pos:end="2880:54">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="2882:9" pos:end="2882:36"><expr pos:start="2882:9" pos:end="2882:35"><operator pos:start="2882:9" pos:end="2882:9">*</operator><name pos:start="2882:10" pos:end="2882:16">ptk_len</name> <operator pos:start="2882:18" pos:end="2882:18">=</operator> <name pos:start="2882:20" pos:end="2882:31">ptk_len_bits</name> <operator pos:start="2882:33" pos:end="2882:33">/</operator> <literal type="number" pos:start="2882:35" pos:end="2882:35">8</literal></expr>;</expr_stmt>

        <if_stmt pos:start="2884:9" pos:end="2890:9"><if pos:start="2884:9" pos:end="2890:9">if <condition pos:start="2884:12" pos:end="2884:54">(<expr pos:start="2884:13" pos:end="2884:53"><name pos:start="2884:13" pos:end="2884:24"><name pos:start="2884:13" pos:end="2884:15">key</name><operator pos:start="2884:16" pos:end="2884:17">-&gt;</operator><name pos:start="2884:18" pos:end="2884:24">KeyType</name></name> <operator pos:start="2884:26" pos:end="2884:27">==</operator> <name pos:start="2884:29" pos:end="2884:53">DOT11DECRYPT_KEY_TYPE_MSK</name></expr>)</condition>
        <block pos:start="2885:9" pos:end="2890:9">{<block_content pos:start="2886:13" pos:end="2889:60">
            <expr_stmt pos:start="2886:13" pos:end="2889:60"><expr pos:start="2886:13" pos:end="2889:59"><name pos:start="2886:13" pos:end="2886:17">xxkey</name> <operator pos:start="2886:19" pos:end="2886:19">=</operator> <call pos:start="2886:21" pos:end="2889:59"><name pos:start="2886:21" pos:end="2886:47">Dot11DecryptGetXXKeyFromMSK</name><argument_list pos:start="2886:48" pos:end="2889:59">(<argument pos:start="2886:49" pos:end="2886:60"><expr pos:start="2886:49" pos:end="2886:60"><name pos:start="2886:49" pos:end="2886:60"><name pos:start="2886:49" pos:end="2886:51">key</name><operator pos:start="2886:52" pos:end="2886:53">-&gt;</operator><name pos:start="2886:54" pos:end="2886:56">Msk</name><operator pos:start="2886:57" pos:end="2886:57">.</operator><name pos:start="2886:58" pos:end="2886:60">Msk</name></name></expr></argument>,
                                                <argument pos:start="2887:49" pos:end="2887:60"><expr pos:start="2887:49" pos:end="2887:60"><name pos:start="2887:49" pos:end="2887:60"><name pos:start="2887:49" pos:end="2887:51">key</name><operator pos:start="2887:52" pos:end="2887:53">-&gt;</operator><name pos:start="2887:54" pos:end="2887:56">Msk</name><operator pos:start="2887:57" pos:end="2887:57">.</operator><name pos:start="2887:58" pos:end="2887:60">Len</name></name></expr></argument>,
                                                <argument pos:start="2888:49" pos:end="2888:51"><expr pos:start="2888:49" pos:end="2888:51"><name pos:start="2888:49" pos:end="2888:51">akm</name></expr></argument>,
                                                <argument pos:start="2889:49" pos:end="2889:58"><expr pos:start="2889:49" pos:end="2889:58"><operator pos:start="2889:49" pos:end="2889:49">&amp;</operator><name pos:start="2889:50" pos:end="2889:58">xxkey_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="2891:9" pos:end="2895:9"><if pos:start="2891:9" pos:end="2895:9">if <condition pos:start="2891:12" pos:end="2891:50">(<expr pos:start="2891:13" pos:end="2891:49"><operator pos:start="2891:13" pos:end="2891:13">!</operator><name pos:start="2891:14" pos:end="2891:18">xxkey</name> <operator pos:start="2891:20" pos:end="2891:21">&amp;&amp;</operator> <name pos:start="2891:23" pos:end="2891:45"><name pos:start="2891:23" pos:end="2891:25">key</name><operator pos:start="2891:26" pos:end="2891:27">-&gt;</operator><name pos:start="2891:28" pos:end="2891:34">KeyData</name><operator pos:start="2891:35" pos:end="2891:35">.</operator><name pos:start="2891:36" pos:end="2891:38">Wpa</name><operator pos:start="2891:39" pos:end="2891:39">.</operator><name pos:start="2891:40" pos:end="2891:45">PskLen</name></name> <operator pos:start="2891:47" pos:end="2891:47">&gt;</operator> <literal type="number" pos:start="2891:49" pos:end="2891:49">0</literal></expr>)</condition>
        <block pos:start="2892:9" pos:end="2895:9">{<block_content pos:start="2893:13" pos:end="2894:48">
            <expr_stmt pos:start="2893:13" pos:end="2893:41"><expr pos:start="2893:13" pos:end="2893:40"><name pos:start="2893:13" pos:end="2893:17">xxkey</name> <operator pos:start="2893:19" pos:end="2893:19">=</operator> <name pos:start="2893:21" pos:end="2893:40"><name pos:start="2893:21" pos:end="2893:23">key</name><operator pos:start="2893:24" pos:end="2893:25">-&gt;</operator><name pos:start="2893:26" pos:end="2893:32">KeyData</name><operator pos:start="2893:33" pos:end="2893:33">.</operator><name pos:start="2893:34" pos:end="2893:36">Wpa</name><operator pos:start="2893:37" pos:end="2893:37">.</operator><name pos:start="2893:38" pos:end="2893:40">Psk</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="2894:13" pos:end="2894:48"><expr pos:start="2894:13" pos:end="2894:47"><name pos:start="2894:13" pos:end="2894:21">xxkey_len</name> <operator pos:start="2894:23" pos:end="2894:23">=</operator> <name pos:start="2894:25" pos:end="2894:47"><name pos:start="2894:25" pos:end="2894:27">key</name><operator pos:start="2894:28" pos:end="2894:29">-&gt;</operator><name pos:start="2894:30" pos:end="2894:36">KeyData</name><operator pos:start="2894:37" pos:end="2894:37">.</operator><name pos:start="2894:38" pos:end="2894:40">Wpa</name><operator pos:start="2894:41" pos:end="2894:41">.</operator><name pos:start="2894:42" pos:end="2894:47">PskLen</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="2896:9" pos:end="2900:9"><if pos:start="2896:9" pos:end="2900:9">if <condition pos:start="2896:12" pos:end="2896:19">(<expr pos:start="2896:13" pos:end="2896:18"><operator pos:start="2896:13" pos:end="2896:13">!</operator><name pos:start="2896:14" pos:end="2896:18">xxkey</name></expr>)</condition>
        <block pos:start="2897:9" pos:end="2900:9">{<block_content pos:start="2898:13" pos:end="2899:55">
            <expr_stmt pos:start="2898:13" pos:end="2898:43"><expr pos:start="2898:13" pos:end="2898:42"><call pos:start="2898:13" pos:end="2898:42"><name pos:start="2898:13" pos:end="2898:20">ws_debug</name><argument_list pos:start="2898:21" pos:end="2898:42">(<argument pos:start="2898:22" pos:end="2898:41"><expr pos:start="2898:22" pos:end="2898:41"><literal type="string" pos:start="2898:22" pos:end="2898:41">"no xxkey. Skipping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2899:13" pos:end="2899:55">return <expr pos:start="2899:20" pos:end="2899:54"><name pos:start="2899:20" pos:end="2899:54">DOT11DECRYPT_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="2901:9" pos:end="2906:69"><expr pos:start="2901:9" pos:end="2906:68"><call pos:start="2901:9" pos:end="2906:68"><name pos:start="2901:9" pos:end="2901:34">dot11decrypt_derive_pmk_r0</name><argument_list pos:start="2901:35" pos:end="2906:68">(<argument pos:start="2901:36" pos:end="2901:40"><expr pos:start="2901:36" pos:end="2901:40"><name pos:start="2901:36" pos:end="2901:40">xxkey</name></expr></argument>, <argument pos:start="2901:43" pos:end="2901:51"><expr pos:start="2901:43" pos:end="2901:51"><name pos:start="2901:43" pos:end="2901:51">xxkey_len</name></expr></argument>,
                                   <argument pos:start="2902:36" pos:end="2902:48"><expr pos:start="2902:36" pos:end="2902:48"><name pos:start="2902:36" pos:end="2902:48"><name pos:start="2902:36" pos:end="2902:38">ctx</name><operator pos:start="2902:39" pos:end="2902:40">-&gt;</operator><name pos:start="2902:41" pos:end="2902:48">pkt_ssid</name></name></expr></argument>, <argument pos:start="2902:51" pos:end="2902:67"><expr pos:start="2902:51" pos:end="2902:67"><name pos:start="2902:51" pos:end="2902:67"><name pos:start="2902:51" pos:end="2902:53">ctx</name><operator pos:start="2902:54" pos:end="2902:55">-&gt;</operator><name pos:start="2902:56" pos:end="2902:67">pkt_ssid_len</name></name></expr></argument>,
                                   <argument pos:start="2903:36" pos:end="2903:39"><expr pos:start="2903:36" pos:end="2903:39"><name pos:start="2903:36" pos:end="2903:39">mdid</name></expr></argument>,
                                   <argument pos:start="2904:36" pos:end="2904:42"><expr pos:start="2904:36" pos:end="2904:42"><name pos:start="2904:36" pos:end="2904:42">r0kh_id</name></expr></argument>, <argument pos:start="2904:45" pos:end="2904:55"><expr pos:start="2904:45" pos:end="2904:55"><name pos:start="2904:45" pos:end="2904:55">r0kh_id_len</name></expr></argument>,
                                   <argument pos:start="2905:36" pos:end="2905:47"><expr pos:start="2905:36" pos:end="2905:47"><name pos:start="2905:36" pos:end="2905:47"><name pos:start="2905:36" pos:end="2905:37">sa</name><operator pos:start="2905:38" pos:end="2905:39">-&gt;</operator><name pos:start="2905:40" pos:end="2905:43">saId</name><operator pos:start="2905:44" pos:end="2905:44">.</operator><name pos:start="2905:45" pos:end="2905:47">sta</name></name></expr></argument>, <argument pos:start="2905:50" pos:end="2905:58"><expr pos:start="2905:50" pos:end="2905:58"><name pos:start="2905:50" pos:end="2905:58">hash_algo</name></expr></argument>,
                                   <argument pos:start="2906:36" pos:end="2906:41"><expr pos:start="2906:36" pos:end="2906:41"><name pos:start="2906:36" pos:end="2906:41">pmk_r0</name></expr></argument>, <argument pos:start="2906:44" pos:end="2906:54"><expr pos:start="2906:44" pos:end="2906:54"><operator pos:start="2906:44" pos:end="2906:44">&amp;</operator><name pos:start="2906:45" pos:end="2906:54">pmk_r0_len</name></expr></argument>, <argument pos:start="2906:57" pos:end="2906:67"><expr pos:start="2906:57" pos:end="2906:67"><name pos:start="2906:57" pos:end="2906:67">pmk_r0_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2907:9" pos:end="2907:66"><expr pos:start="2907:9" pos:end="2907:65"><call pos:start="2907:9" pos:end="2907:65"><name pos:start="2907:9" pos:end="2907:18">DEBUG_DUMP</name><argument_list pos:start="2907:19" pos:end="2907:65">(<argument pos:start="2907:20" pos:end="2907:27"><expr pos:start="2907:20" pos:end="2907:27"><literal type="string" pos:start="2907:20" pos:end="2907:27">"PMK-R0"</literal></expr></argument>, <argument pos:start="2907:30" pos:end="2907:35"><expr pos:start="2907:30" pos:end="2907:35"><name pos:start="2907:30" pos:end="2907:35">pmk_r0</name></expr></argument>, <argument pos:start="2907:38" pos:end="2907:47"><expr pos:start="2907:38" pos:end="2907:47"><name pos:start="2907:38" pos:end="2907:47">pmk_r0_len</name></expr></argument>, <argument pos:start="2907:50" pos:end="2907:64"><expr pos:start="2907:50" pos:end="2907:64"><name pos:start="2907:50" pos:end="2907:64">LOG_LEVEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2908:9" pos:end="2908:66"><expr pos:start="2908:9" pos:end="2908:65"><call pos:start="2908:9" pos:end="2908:65"><name pos:start="2908:9" pos:end="2908:18">DEBUG_DUMP</name><argument_list pos:start="2908:19" pos:end="2908:65">(<argument pos:start="2908:20" pos:end="2908:30"><expr pos:start="2908:20" pos:end="2908:30"><literal type="string" pos:start="2908:20" pos:end="2908:30">"PMKR0Name"</literal></expr></argument>, <argument pos:start="2908:33" pos:end="2908:43"><expr pos:start="2908:33" pos:end="2908:43"><name pos:start="2908:33" pos:end="2908:43">pmk_r0_name</name></expr></argument>, <argument pos:start="2908:46" pos:end="2908:47"><expr pos:start="2908:46" pos:end="2908:47"><literal type="number" pos:start="2908:46" pos:end="2908:47">16</literal></expr></argument>, <argument pos:start="2908:50" pos:end="2908:64"><expr pos:start="2908:50" pos:end="2908:64"><name pos:start="2908:50" pos:end="2908:64">LOG_LEVEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2910:9" pos:end="2912:69"><expr pos:start="2910:9" pos:end="2912:68"><call pos:start="2910:9" pos:end="2912:68"><name pos:start="2910:9" pos:end="2910:34">dot11decrypt_derive_pmk_r1</name><argument_list pos:start="2910:35" pos:end="2912:68">(<argument pos:start="2910:36" pos:end="2910:41"><expr pos:start="2910:36" pos:end="2910:41"><name pos:start="2910:36" pos:end="2910:41">pmk_r0</name></expr></argument>, <argument pos:start="2910:44" pos:end="2910:53"><expr pos:start="2910:44" pos:end="2910:53"><name pos:start="2910:44" pos:end="2910:53">pmk_r0_len</name></expr></argument>, <argument pos:start="2910:56" pos:end="2910:66"><expr pos:start="2910:56" pos:end="2910:66"><name pos:start="2910:56" pos:end="2910:66">pmk_r0_name</name></expr></argument>,
                                   <argument pos:start="2911:36" pos:end="2911:42"><expr pos:start="2911:36" pos:end="2911:42"><name pos:start="2911:36" pos:end="2911:42">r1kh_id</name></expr></argument>, <argument pos:start="2911:45" pos:end="2911:56"><expr pos:start="2911:45" pos:end="2911:56"><name pos:start="2911:45" pos:end="2911:56"><name pos:start="2911:45" pos:end="2911:46">sa</name><operator pos:start="2911:47" pos:end="2911:48">-&gt;</operator><name pos:start="2911:49" pos:end="2911:52">saId</name><operator pos:start="2911:53" pos:end="2911:53">.</operator><name pos:start="2911:54" pos:end="2911:56">sta</name></name></expr></argument>, <argument pos:start="2911:59" pos:end="2911:67"><expr pos:start="2911:59" pos:end="2911:67"><name pos:start="2911:59" pos:end="2911:67">hash_algo</name></expr></argument>,
                                   <argument pos:start="2912:36" pos:end="2912:41"><expr pos:start="2912:36" pos:end="2912:41"><name pos:start="2912:36" pos:end="2912:41">pmk_r1</name></expr></argument>, <argument pos:start="2912:44" pos:end="2912:54"><expr pos:start="2912:44" pos:end="2912:54"><operator pos:start="2912:44" pos:end="2912:44">&amp;</operator><name pos:start="2912:45" pos:end="2912:54">pmk_r1_len</name></expr></argument>, <argument pos:start="2912:57" pos:end="2912:67"><expr pos:start="2912:57" pos:end="2912:67"><name pos:start="2912:57" pos:end="2912:67">pmk_r1_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2913:9" pos:end="2913:66"><expr pos:start="2913:9" pos:end="2913:65"><call pos:start="2913:9" pos:end="2913:65"><name pos:start="2913:9" pos:end="2913:18">DEBUG_DUMP</name><argument_list pos:start="2913:19" pos:end="2913:65">(<argument pos:start="2913:20" pos:end="2913:27"><expr pos:start="2913:20" pos:end="2913:27"><literal type="string" pos:start="2913:20" pos:end="2913:27">"PMK-R1"</literal></expr></argument>, <argument pos:start="2913:30" pos:end="2913:35"><expr pos:start="2913:30" pos:end="2913:35"><name pos:start="2913:30" pos:end="2913:35">pmk_r1</name></expr></argument>, <argument pos:start="2913:38" pos:end="2913:47"><expr pos:start="2913:38" pos:end="2913:47"><name pos:start="2913:38" pos:end="2913:47">pmk_r1_len</name></expr></argument>, <argument pos:start="2913:50" pos:end="2913:64"><expr pos:start="2913:50" pos:end="2913:64"><name pos:start="2913:50" pos:end="2913:64">LOG_LEVEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2914:9" pos:end="2914:66"><expr pos:start="2914:9" pos:end="2914:65"><call pos:start="2914:9" pos:end="2914:65"><name pos:start="2914:9" pos:end="2914:18">DEBUG_DUMP</name><argument_list pos:start="2914:19" pos:end="2914:65">(<argument pos:start="2914:20" pos:end="2914:30"><expr pos:start="2914:20" pos:end="2914:30"><literal type="string" pos:start="2914:20" pos:end="2914:30">"PMKR1Name"</literal></expr></argument>, <argument pos:start="2914:33" pos:end="2914:43"><expr pos:start="2914:33" pos:end="2914:43"><name pos:start="2914:33" pos:end="2914:43">pmk_r1_name</name></expr></argument>, <argument pos:start="2914:46" pos:end="2914:47"><expr pos:start="2914:46" pos:end="2914:47"><literal type="number" pos:start="2914:46" pos:end="2914:47">16</literal></expr></argument>, <argument pos:start="2914:50" pos:end="2914:64"><expr pos:start="2914:50" pos:end="2914:64"><name pos:start="2914:50" pos:end="2914:64">LOG_LEVEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2916:9" pos:end="2919:60"><expr pos:start="2916:9" pos:end="2919:59"><call pos:start="2916:9" pos:end="2919:59"><name pos:start="2916:9" pos:end="2916:34">dot11decrypt_derive_ft_ptk</name><argument_list pos:start="2916:35" pos:end="2919:59">(<argument pos:start="2916:36" pos:end="2916:41"><expr pos:start="2916:36" pos:end="2916:41"><name pos:start="2916:36" pos:end="2916:41">pmk_r1</name></expr></argument>, <argument pos:start="2916:44" pos:end="2916:53"><expr pos:start="2916:44" pos:end="2916:53"><name pos:start="2916:44" pos:end="2916:53">pmk_r1_len</name></expr></argument>, <argument pos:start="2916:56" pos:end="2916:66"><expr pos:start="2916:56" pos:end="2916:66"><name pos:start="2916:56" pos:end="2916:66">pmk_r1_name</name></expr></argument>,
                                   <argument pos:start="2917:36" pos:end="2917:41"><expr pos:start="2917:36" pos:end="2917:41"><name pos:start="2917:36" pos:end="2917:41">snonce</name></expr></argument>, <argument pos:start="2917:44" pos:end="2917:56"><expr pos:start="2917:44" pos:end="2917:56"><name pos:start="2917:44" pos:end="2917:56"><name pos:start="2917:44" pos:end="2917:45">sa</name><operator pos:start="2917:46" pos:end="2917:47">-&gt;</operator><name pos:start="2917:48" pos:end="2917:50">wpa</name><operator pos:start="2917:51" pos:end="2917:51">.</operator><name pos:start="2917:52" pos:end="2917:56">nonce</name></name></expr></argument>,
                                   <argument pos:start="2918:36" pos:end="2918:49"><expr pos:start="2918:36" pos:end="2918:49"><name pos:start="2918:36" pos:end="2918:49"><name pos:start="2918:36" pos:end="2918:37">sa</name><operator pos:start="2918:38" pos:end="2918:39">-&gt;</operator><name pos:start="2918:40" pos:end="2918:43">saId</name><operator pos:start="2918:44" pos:end="2918:44">.</operator><name pos:start="2918:45" pos:end="2918:49">bssid</name></name></expr></argument>, <argument pos:start="2918:52" pos:end="2918:63"><expr pos:start="2918:52" pos:end="2918:63"><name pos:start="2918:52" pos:end="2918:63"><name pos:start="2918:52" pos:end="2918:53">sa</name><operator pos:start="2918:54" pos:end="2918:55">-&gt;</operator><name pos:start="2918:56" pos:end="2918:59">saId</name><operator pos:start="2918:60" pos:end="2918:60">.</operator><name pos:start="2918:61" pos:end="2918:63">sta</name></name></expr></argument>, <argument pos:start="2918:66" pos:end="2918:74"><expr pos:start="2918:66" pos:end="2918:74"><name pos:start="2918:66" pos:end="2918:74">hash_algo</name></expr></argument>,
                                   <argument pos:start="2919:36" pos:end="2919:38"><expr pos:start="2919:36" pos:end="2919:38"><name pos:start="2919:36" pos:end="2919:38">ptk</name></expr></argument>, <argument pos:start="2919:41" pos:end="2919:48"><expr pos:start="2919:41" pos:end="2919:48"><operator pos:start="2919:41" pos:end="2919:41">*</operator><name pos:start="2919:42" pos:end="2919:48">ptk_len</name></expr></argument>, <argument pos:start="2919:51" pos:end="2919:58"><expr pos:start="2919:51" pos:end="2919:58"><name pos:start="2919:51" pos:end="2919:58">ptk_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2920:9" pos:end="2920:58"><expr pos:start="2920:9" pos:end="2920:57"><call pos:start="2920:9" pos:end="2920:57"><name pos:start="2920:9" pos:end="2920:18">DEBUG_DUMP</name><argument_list pos:start="2920:19" pos:end="2920:57">(<argument pos:start="2920:20" pos:end="2920:24"><expr pos:start="2920:20" pos:end="2920:24"><literal type="string" pos:start="2920:20" pos:end="2920:24">"PTK"</literal></expr></argument>, <argument pos:start="2920:27" pos:end="2920:29"><expr pos:start="2920:27" pos:end="2920:29"><name pos:start="2920:27" pos:end="2920:29">ptk</name></expr></argument>, <argument pos:start="2920:32" pos:end="2920:39"><expr pos:start="2920:32" pos:end="2920:39"><operator pos:start="2920:32" pos:end="2920:32">*</operator><name pos:start="2920:33" pos:end="2920:39">ptk_len</name></expr></argument>, <argument pos:start="2920:42" pos:end="2920:56"><expr pos:start="2920:42" pos:end="2920:56"><name pos:start="2920:42" pos:end="2920:56">LOG_LEVEL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2921:9" pos:end="2921:40">return <expr pos:start="2921:16" pos:end="2921:39"><name pos:start="2921:16" pos:end="2921:39">DOT11DECRYPT_RET_SUCCESS</name></expr>;</return>
    </block_content>}</block></function>

<cpp:define pos:start="2924:1" pos:end="2924:26">#<cpp:directive pos:start="2924:2" pos:end="2924:7">define</cpp:directive> <cpp:macro pos:start="2924:9" pos:end="2924:23"><name pos:start="2924:9" pos:end="2924:23">MAX_SSID_LENGTH</name></cpp:macro> <cpp:value pos:start="2924:25" pos:end="2924:26">32</cpp:value></cpp:define> <comment type="block" pos:start="2924:28" pos:end="2924:52">/* maximum SSID length */</comment>

    <function pos:start="2926:5" pos:end="2974:5"><type pos:start="2926:5" pos:end="2926:14"><specifier pos:start="2926:5" pos:end="2926:10">static</specifier> <name pos:start="2926:12" pos:end="2926:14">INT</name></type>
    <name pos:start="2927:5" pos:end="2927:31">Dot11DecryptRsnaPwd2PskStep</name><parameter_list pos:start="2927:32" pos:end="2934:22">(
        <parameter pos:start="2928:9" pos:end="2928:29"><decl pos:start="2928:9" pos:end="2928:29"><type pos:start="2928:9" pos:end="2928:29"><specifier pos:start="2928:9" pos:end="2928:13">const</specifier> <name pos:start="2928:15" pos:end="2928:20">guint8</name> <modifier pos:start="2928:22" pos:end="2928:22">*</modifier></type><name pos:start="2928:23" pos:end="2928:29">ppBytes</name></decl></parameter>,
        <parameter pos:start="2929:9" pos:end="2929:28"><decl pos:start="2929:9" pos:end="2929:28"><type pos:start="2929:9" pos:end="2929:28"><specifier pos:start="2929:9" pos:end="2929:13">const</specifier> <name pos:start="2929:15" pos:end="2929:19">guint</name></type> <name pos:start="2929:21" pos:end="2929:28">ppLength</name></decl></parameter>,
        <parameter pos:start="2930:9" pos:end="2930:24"><decl pos:start="2930:9" pos:end="2930:24"><type pos:start="2930:9" pos:end="2930:24"><specifier pos:start="2930:9" pos:end="2930:13">const</specifier> <name pos:start="2930:15" pos:end="2930:18">CHAR</name> <modifier pos:start="2930:20" pos:end="2930:20">*</modifier></type><name pos:start="2930:21" pos:end="2930:24">ssid</name></decl></parameter>,
        <parameter pos:start="2931:9" pos:end="2931:31"><decl pos:start="2931:9" pos:end="2931:31"><type pos:start="2931:9" pos:end="2931:31"><specifier pos:start="2931:9" pos:end="2931:13">const</specifier> <name pos:start="2931:15" pos:end="2931:20">size_t</name></type> <name pos:start="2931:22" pos:end="2931:31">ssidLength</name></decl></parameter>,
        <parameter pos:start="2932:9" pos:end="2932:28"><decl pos:start="2932:9" pos:end="2932:28"><type pos:start="2932:9" pos:end="2932:28"><specifier pos:start="2932:9" pos:end="2932:13">const</specifier> <name pos:start="2932:15" pos:end="2932:17">INT</name></type> <name pos:start="2932:19" pos:end="2932:28">iterations</name></decl></parameter>,
        <parameter pos:start="2933:9" pos:end="2933:23"><decl pos:start="2933:9" pos:end="2933:23"><type pos:start="2933:9" pos:end="2933:23"><specifier pos:start="2933:9" pos:end="2933:13">const</specifier> <name pos:start="2933:15" pos:end="2933:17">INT</name></type> <name pos:start="2933:19" pos:end="2933:23">count</name></decl></parameter>,
        <parameter pos:start="2934:9" pos:end="2934:21"><decl pos:start="2934:9" pos:end="2934:21"><type pos:start="2934:9" pos:end="2934:21"><name pos:start="2934:9" pos:end="2934:13">UCHAR</name> <modifier pos:start="2934:15" pos:end="2934:15">*</modifier></type><name pos:start="2934:16" pos:end="2934:21">output</name></decl></parameter>)</parameter_list>
    <block pos:start="2935:5" pos:end="2974:5">{<block_content pos:start="2936:9" pos:end="2973:40">
        <decl_stmt pos:start="2936:9" pos:end="2936:35"><decl pos:start="2936:9" pos:end="2936:34"><type pos:start="2936:9" pos:end="2936:13"><name pos:start="2936:9" pos:end="2936:13">UCHAR</name></type> <name pos:start="2936:15" pos:end="2936:28"><name pos:start="2936:15" pos:end="2936:20">digest</name><index pos:start="2936:21" pos:end="2936:28">[<expr pos:start="2936:22" pos:end="2936:27"><literal type="number" pos:start="2936:22" pos:end="2936:23">32</literal> <operator pos:start="2936:25" pos:end="2936:25">+</operator> <literal type="number" pos:start="2936:27" pos:end="2936:27">4</literal></expr>]</index></name> <init pos:start="2936:30" pos:end="2936:34">= <expr pos:start="2936:32" pos:end="2936:34"><block pos:start="2936:32" pos:end="2936:34">{<expr pos:start="2936:33" pos:end="2936:33"><literal type="number" pos:start="2936:33" pos:end="2936:33">0</literal></expr>}</block></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="2936:37" pos:end="2936:68">/* SSID plus 4 bytes of count */</comment>
        <decl_stmt pos:start="2937:9" pos:end="2937:17"><decl pos:start="2937:9" pos:end="2937:13"><type pos:start="2937:9" pos:end="2937:11"><name pos:start="2937:9" pos:end="2937:11">INT</name></type> <name pos:start="2937:13" pos:end="2937:13">i</name></decl>, <decl pos:start="2937:16" pos:end="2937:16"><type ref="prev" pos:start="2937:9" pos:end="2937:11"/><name pos:start="2937:16" pos:end="2937:16">j</name></decl>;</decl_stmt>

        <if_stmt pos:start="2939:9" pos:end="2943:9"><if pos:start="2939:9" pos:end="2943:9">if <condition pos:start="2939:12" pos:end="2939:28">(<expr pos:start="2939:13" pos:end="2939:27"><name pos:start="2939:13" pos:end="2939:22">ssidLength</name> <operator pos:start="2939:24" pos:end="2939:24">&gt;</operator> <literal type="number" pos:start="2939:26" pos:end="2939:27">32</literal></expr>)</condition>
        <block pos:start="2940:9" pos:end="2943:9">{<block_content pos:start="2942:13" pos:end="2942:46">
            <comment type="block" pos:start="2941:13" pos:end="2941:42">/* This "should not happen" */</comment>
            <return pos:start="2942:13" pos:end="2942:46">return <expr pos:start="2942:20" pos:end="2942:45"><name pos:start="2942:20" pos:end="2942:45">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="2945:9" pos:end="2945:38">/* U1 = PRF(P, S || INT(i)) */</comment>
        <expr_stmt pos:start="2946:9" pos:end="2946:41"><expr pos:start="2946:9" pos:end="2946:40"><call pos:start="2946:9" pos:end="2946:40"><name pos:start="2946:9" pos:end="2946:14">memcpy</name><argument_list pos:start="2946:15" pos:end="2946:40">(<argument pos:start="2946:16" pos:end="2946:21"><expr pos:start="2946:16" pos:end="2946:21"><name pos:start="2946:16" pos:end="2946:21">digest</name></expr></argument>, <argument pos:start="2946:24" pos:end="2946:27"><expr pos:start="2946:24" pos:end="2946:27"><name pos:start="2946:24" pos:end="2946:27">ssid</name></expr></argument>, <argument pos:start="2946:30" pos:end="2946:39"><expr pos:start="2946:30" pos:end="2946:39"><name pos:start="2946:30" pos:end="2946:39">ssidLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2947:9" pos:end="2947:59"><expr pos:start="2947:9" pos:end="2947:58"><name pos:start="2947:9" pos:end="2947:26"><name pos:start="2947:9" pos:end="2947:14">digest</name><index pos:start="2947:15" pos:end="2947:26">[<expr pos:start="2947:16" pos:end="2947:25"><name pos:start="2947:16" pos:end="2947:25">ssidLength</name></expr>]</index></name> <operator pos:start="2947:28" pos:end="2947:28">=</operator> <operator pos:start="2947:30" pos:end="2947:30">(</operator><name pos:start="2947:31" pos:end="2947:35">UCHAR</name><operator pos:start="2947:36" pos:end="2947:36">)</operator><operator pos:start="2947:37" pos:end="2947:37">(</operator><operator pos:start="2947:38" pos:end="2947:38">(</operator><name pos:start="2947:39" pos:end="2947:43">count</name> <operator pos:start="2947:45" pos:end="2947:46">&gt;&gt;</operator> <literal type="number" pos:start="2947:48" pos:end="2947:49">24</literal><operator pos:start="2947:50" pos:end="2947:50">)</operator> <operator pos:start="2947:52" pos:end="2947:52">&amp;</operator> <literal type="number" pos:start="2947:54" pos:end="2947:57">0xff</literal><operator pos:start="2947:58" pos:end="2947:58">)</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="2948:9" pos:end="2948:63"><expr pos:start="2948:9" pos:end="2948:62"><name pos:start="2948:9" pos:end="2948:30"><name pos:start="2948:9" pos:end="2948:14">digest</name><index pos:start="2948:15" pos:end="2948:30">[<expr pos:start="2948:16" pos:end="2948:29"><name pos:start="2948:16" pos:end="2948:25">ssidLength</name> <operator pos:start="2948:27" pos:end="2948:27">+</operator> <literal type="number" pos:start="2948:29" pos:end="2948:29">1</literal></expr>]</index></name> <operator pos:start="2948:32" pos:end="2948:32">=</operator> <operator pos:start="2948:34" pos:end="2948:34">(</operator><name pos:start="2948:35" pos:end="2948:39">UCHAR</name><operator pos:start="2948:40" pos:end="2948:40">)</operator><operator pos:start="2948:41" pos:end="2948:41">(</operator><operator pos:start="2948:42" pos:end="2948:42">(</operator><name pos:start="2948:43" pos:end="2948:47">count</name> <operator pos:start="2948:49" pos:end="2948:50">&gt;&gt;</operator> <literal type="number" pos:start="2948:52" pos:end="2948:53">16</literal><operator pos:start="2948:54" pos:end="2948:54">)</operator> <operator pos:start="2948:56" pos:end="2948:56">&amp;</operator> <literal type="number" pos:start="2948:58" pos:end="2948:61">0xff</literal><operator pos:start="2948:62" pos:end="2948:62">)</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="2949:9" pos:end="2949:62"><expr pos:start="2949:9" pos:end="2949:61"><name pos:start="2949:9" pos:end="2949:30"><name pos:start="2949:9" pos:end="2949:14">digest</name><index pos:start="2949:15" pos:end="2949:30">[<expr pos:start="2949:16" pos:end="2949:29"><name pos:start="2949:16" pos:end="2949:25">ssidLength</name> <operator pos:start="2949:27" pos:end="2949:27">+</operator> <literal type="number" pos:start="2949:29" pos:end="2949:29">2</literal></expr>]</index></name> <operator pos:start="2949:32" pos:end="2949:32">=</operator> <operator pos:start="2949:34" pos:end="2949:34">(</operator><name pos:start="2949:35" pos:end="2949:39">UCHAR</name><operator pos:start="2949:40" pos:end="2949:40">)</operator><operator pos:start="2949:41" pos:end="2949:41">(</operator><operator pos:start="2949:42" pos:end="2949:42">(</operator><name pos:start="2949:43" pos:end="2949:47">count</name> <operator pos:start="2949:49" pos:end="2949:50">&gt;&gt;</operator> <literal type="number" pos:start="2949:52" pos:end="2949:52">8</literal><operator pos:start="2949:53" pos:end="2949:53">)</operator> <operator pos:start="2949:55" pos:end="2949:55">&amp;</operator> <literal type="number" pos:start="2949:57" pos:end="2949:60">0xff</literal><operator pos:start="2949:61" pos:end="2949:61">)</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="2950:9" pos:end="2950:55"><expr pos:start="2950:9" pos:end="2950:54"><name pos:start="2950:9" pos:end="2950:30"><name pos:start="2950:9" pos:end="2950:14">digest</name><index pos:start="2950:15" pos:end="2950:30">[<expr pos:start="2950:16" pos:end="2950:29"><name pos:start="2950:16" pos:end="2950:25">ssidLength</name> <operator pos:start="2950:27" pos:end="2950:27">+</operator> <literal type="number" pos:start="2950:29" pos:end="2950:29">3</literal></expr>]</index></name> <operator pos:start="2950:32" pos:end="2950:32">=</operator> <operator pos:start="2950:34" pos:end="2950:34">(</operator><name pos:start="2950:35" pos:end="2950:39">UCHAR</name><operator pos:start="2950:40" pos:end="2950:40">)</operator><operator pos:start="2950:41" pos:end="2950:41">(</operator><name pos:start="2950:42" pos:end="2950:46">count</name> <operator pos:start="2950:48" pos:end="2950:48">&amp;</operator> <literal type="number" pos:start="2950:50" pos:end="2950:53">0xff</literal><operator pos:start="2950:54" pos:end="2950:54">)</operator></expr>;</expr_stmt>
        <if_stmt pos:start="2951:9" pos:end="2954:9"><if pos:start="2951:9" pos:end="2954:9">if <condition pos:start="2951:12" pos:end="2951:101">(<expr pos:start="2951:13" pos:end="2951:100"><call pos:start="2951:13" pos:end="2951:100"><name pos:start="2951:13" pos:end="2951:26">ws_hmac_buffer</name><argument_list pos:start="2951:27" pos:end="2951:100">(<argument pos:start="2951:28" pos:end="2951:39"><expr pos:start="2951:28" pos:end="2951:39"><name pos:start="2951:28" pos:end="2951:39">GCRY_MD_SHA1</name></expr></argument>, <argument pos:start="2951:42" pos:end="2951:47"><expr pos:start="2951:42" pos:end="2951:47"><name pos:start="2951:42" pos:end="2951:47">digest</name></expr></argument>, <argument pos:start="2951:50" pos:end="2951:55"><expr pos:start="2951:50" pos:end="2951:55"><name pos:start="2951:50" pos:end="2951:55">digest</name></expr></argument>, <argument pos:start="2951:58" pos:end="2951:80"><expr pos:start="2951:58" pos:end="2951:80"><operator pos:start="2951:58" pos:end="2951:58">(</operator><name pos:start="2951:59" pos:end="2951:65">guint32</name><operator pos:start="2951:66" pos:end="2951:66">)</operator><name pos:start="2951:67" pos:end="2951:76">ssidLength</name> <operator pos:start="2951:78" pos:end="2951:78">+</operator> <literal type="number" pos:start="2951:80" pos:end="2951:80">4</literal></expr></argument>, <argument pos:start="2951:83" pos:end="2951:89"><expr pos:start="2951:83" pos:end="2951:89"><name pos:start="2951:83" pos:end="2951:89">ppBytes</name></expr></argument>, <argument pos:start="2951:92" pos:end="2951:99"><expr pos:start="2951:92" pos:end="2951:99"><name pos:start="2951:92" pos:end="2951:99">ppLength</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block pos:start="2952:9" pos:end="2954:9">{<block_content pos:start="2953:13" pos:end="2953:46">
            <return pos:start="2953:13" pos:end="2953:46">return <expr pos:start="2953:20" pos:end="2953:45"><name pos:start="2953:20" pos:end="2953:45">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="2956:9" pos:end="2956:25">/* output = U1 */</comment>
        <expr_stmt pos:start="2957:9" pos:end="2957:35"><expr pos:start="2957:9" pos:end="2957:34"><call pos:start="2957:9" pos:end="2957:34"><name pos:start="2957:9" pos:end="2957:14">memcpy</name><argument_list pos:start="2957:15" pos:end="2957:34">(<argument pos:start="2957:16" pos:end="2957:21"><expr pos:start="2957:16" pos:end="2957:21"><name pos:start="2957:16" pos:end="2957:21">output</name></expr></argument>, <argument pos:start="2957:24" pos:end="2957:29"><expr pos:start="2957:24" pos:end="2957:29"><name pos:start="2957:24" pos:end="2957:29">digest</name></expr></argument>, <argument pos:start="2957:32" pos:end="2957:33"><expr pos:start="2957:32" pos:end="2957:33"><literal type="number" pos:start="2957:32" pos:end="2957:33">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for pos:start="2958:9" pos:end="2971:9">for <control pos:start="2958:13" pos:end="2958:40">(<init pos:start="2958:14" pos:end="2958:19"><expr pos:start="2958:14" pos:end="2958:18"><name pos:start="2958:14" pos:end="2958:14">i</name> <operator pos:start="2958:16" pos:end="2958:16">=</operator> <literal type="number" pos:start="2958:18" pos:end="2958:18">1</literal></expr>;</init> <condition pos:start="2958:21" pos:end="2958:35"><expr pos:start="2958:21" pos:end="2958:34"><name pos:start="2958:21" pos:end="2958:21">i</name> <operator pos:start="2958:23" pos:end="2958:23">&lt;</operator> <name pos:start="2958:25" pos:end="2958:34">iterations</name></expr>;</condition> <incr pos:start="2958:37" pos:end="2958:39"><expr pos:start="2958:37" pos:end="2958:39"><name pos:start="2958:37" pos:end="2958:37">i</name><operator pos:start="2958:38" pos:end="2958:39">++</operator></expr></incr>)</control>
        <block pos:start="2959:9" pos:end="2971:9">{<block_content pos:start="2961:13" pos:end="2970:13">
            <comment type="block" pos:start="2960:13" pos:end="2960:35">/* Un = PRF(P, Un-1) */</comment>
            <if_stmt pos:start="2961:13" pos:end="2964:13"><if pos:start="2961:13" pos:end="2964:13">if <condition pos:start="2961:16" pos:end="2961:98">(<expr pos:start="2961:17" pos:end="2961:97"><call pos:start="2961:17" pos:end="2961:97"><name pos:start="2961:17" pos:end="2961:30">ws_hmac_buffer</name><argument_list pos:start="2961:31" pos:end="2961:97">(<argument pos:start="2961:32" pos:end="2961:43"><expr pos:start="2961:32" pos:end="2961:43"><name pos:start="2961:32" pos:end="2961:43">GCRY_MD_SHA1</name></expr></argument>, <argument pos:start="2961:46" pos:end="2961:51"><expr pos:start="2961:46" pos:end="2961:51"><name pos:start="2961:46" pos:end="2961:51">digest</name></expr></argument>, <argument pos:start="2961:54" pos:end="2961:59"><expr pos:start="2961:54" pos:end="2961:59"><name pos:start="2961:54" pos:end="2961:59">digest</name></expr></argument>, <argument pos:start="2961:62" pos:end="2961:77"><expr pos:start="2961:62" pos:end="2961:77"><name pos:start="2961:62" pos:end="2961:77">HASH_SHA1_LENGTH</name></expr></argument>, <argument pos:start="2961:80" pos:end="2961:86"><expr pos:start="2961:80" pos:end="2961:86"><name pos:start="2961:80" pos:end="2961:86">ppBytes</name></expr></argument>, <argument pos:start="2961:89" pos:end="2961:96"><expr pos:start="2961:89" pos:end="2961:96"><name pos:start="2961:89" pos:end="2961:96">ppLength</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block pos:start="2962:13" pos:end="2964:13">{<block_content pos:start="2963:17" pos:end="2963:50">
                <return pos:start="2963:17" pos:end="2963:50">return <expr pos:start="2963:24" pos:end="2963:49"><name pos:start="2963:24" pos:end="2963:49">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="2966:13" pos:end="2966:40">/* output = output xor Un */</comment>
            <for pos:start="2967:13" pos:end="2970:13">for <control pos:start="2967:17" pos:end="2967:36">(<init pos:start="2967:18" pos:end="2967:23"><expr pos:start="2967:18" pos:end="2967:22"><name pos:start="2967:18" pos:end="2967:18">j</name> <operator pos:start="2967:20" pos:end="2967:20">=</operator> <literal type="number" pos:start="2967:22" pos:end="2967:22">0</literal></expr>;</init> <condition pos:start="2967:25" pos:end="2967:31"><expr pos:start="2967:25" pos:end="2967:30"><name pos:start="2967:25" pos:end="2967:25">j</name> <operator pos:start="2967:27" pos:end="2967:27">&lt;</operator> <literal type="number" pos:start="2967:29" pos:end="2967:30">20</literal></expr>;</condition> <incr pos:start="2967:33" pos:end="2967:35"><expr pos:start="2967:33" pos:end="2967:35"><name pos:start="2967:33" pos:end="2967:33">j</name><operator pos:start="2967:34" pos:end="2967:35">++</operator></expr></incr>)</control>
            <block pos:start="2968:13" pos:end="2970:13">{<block_content pos:start="2969:17" pos:end="2969:39">
                <expr_stmt pos:start="2969:17" pos:end="2969:39"><expr pos:start="2969:17" pos:end="2969:38"><name pos:start="2969:17" pos:end="2969:25"><name pos:start="2969:17" pos:end="2969:22">output</name><index pos:start="2969:23" pos:end="2969:25">[<expr pos:start="2969:24" pos:end="2969:24"><name pos:start="2969:24" pos:end="2969:24">j</name></expr>]</index></name> <operator pos:start="2969:27" pos:end="2969:28">^=</operator> <name pos:start="2969:30" pos:end="2969:38"><name pos:start="2969:30" pos:end="2969:35">digest</name><index pos:start="2969:36" pos:end="2969:38">[<expr pos:start="2969:37" pos:end="2969:37"><name pos:start="2969:37" pos:end="2969:37">j</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>

        <return pos:start="2973:9" pos:end="2973:40">return <expr pos:start="2973:16" pos:end="2973:39"><name pos:start="2973:16" pos:end="2973:39">DOT11DECRYPT_RET_SUCCESS</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="2976:5" pos:end="2999:5"><type pos:start="2976:5" pos:end="2976:14"><specifier pos:start="2976:5" pos:end="2976:10">static</specifier> <name pos:start="2976:12" pos:end="2976:14">INT</name></type>
    <name pos:start="2977:5" pos:end="2977:27">Dot11DecryptRsnaPwd2Psk</name><parameter_list pos:start="2977:28" pos:end="2981:22">(
        <parameter pos:start="2978:9" pos:end="2978:30"><decl pos:start="2978:9" pos:end="2978:30"><type pos:start="2978:9" pos:end="2978:30"><specifier pos:start="2978:9" pos:end="2978:13">const</specifier> <name pos:start="2978:15" pos:end="2978:18">CHAR</name> <modifier pos:start="2978:20" pos:end="2978:20">*</modifier></type><name pos:start="2978:21" pos:end="2978:30">passphrase</name></decl></parameter>,
        <parameter pos:start="2979:9" pos:end="2979:24"><decl pos:start="2979:9" pos:end="2979:24"><type pos:start="2979:9" pos:end="2979:24"><specifier pos:start="2979:9" pos:end="2979:13">const</specifier> <name pos:start="2979:15" pos:end="2979:18">CHAR</name> <modifier pos:start="2979:20" pos:end="2979:20">*</modifier></type><name pos:start="2979:21" pos:end="2979:24">ssid</name></decl></parameter>,
        <parameter pos:start="2980:9" pos:end="2980:31"><decl pos:start="2980:9" pos:end="2980:31"><type pos:start="2980:9" pos:end="2980:31"><specifier pos:start="2980:9" pos:end="2980:13">const</specifier> <name pos:start="2980:15" pos:end="2980:20">size_t</name></type> <name pos:start="2980:22" pos:end="2980:31">ssidLength</name></decl></parameter>,
        <parameter pos:start="2981:9" pos:end="2981:21"><decl pos:start="2981:9" pos:end="2981:21"><type pos:start="2981:9" pos:end="2981:21"><name pos:start="2981:9" pos:end="2981:13">UCHAR</name> <modifier pos:start="2981:15" pos:end="2981:15">*</modifier></type><name pos:start="2981:16" pos:end="2981:21">output</name></decl></parameter>)</parameter_list>
    <block pos:start="2982:5" pos:end="2999:5">{<block_content pos:start="2983:9" pos:end="2998:17">
        <decl_stmt pos:start="2983:9" pos:end="2983:33"><decl pos:start="2983:9" pos:end="2983:32"><type pos:start="2983:9" pos:end="2983:13"><name pos:start="2983:9" pos:end="2983:13">UCHAR</name></type> <name pos:start="2983:15" pos:end="2983:26"><name pos:start="2983:15" pos:end="2983:22">m_output</name><index pos:start="2983:23" pos:end="2983:26">[<expr pos:start="2983:24" pos:end="2983:25"><literal type="number" pos:start="2983:24" pos:end="2983:25">40</literal></expr>]</index></name> <init pos:start="2983:28" pos:end="2983:32">= <expr pos:start="2983:30" pos:end="2983:32"><block pos:start="2983:30" pos:end="2983:32">{<expr pos:start="2983:31" pos:end="2983:31"><literal type="number" pos:start="2983:31" pos:end="2983:31">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="2984:9" pos:end="2984:47"><decl pos:start="2984:9" pos:end="2984:46"><type pos:start="2984:9" pos:end="2984:20"><name pos:start="2984:9" pos:end="2984:18">GByteArray</name> <modifier pos:start="2984:20" pos:end="2984:20">*</modifier></type><name pos:start="2984:21" pos:end="2984:25">pp_ba</name> <init pos:start="2984:27" pos:end="2984:46">= <expr pos:start="2984:29" pos:end="2984:46"><call pos:start="2984:29" pos:end="2984:46"><name pos:start="2984:29" pos:end="2984:44">g_byte_array_new</name><argument_list pos:start="2984:45" pos:end="2984:46">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="2986:9" pos:end="2990:9"><if pos:start="2986:9" pos:end="2990:9">if <condition pos:start="2986:12" pos:end="2986:49">(<expr pos:start="2986:13" pos:end="2986:48"><operator pos:start="2986:13" pos:end="2986:13">!</operator><call pos:start="2986:14" pos:end="2986:48"><name pos:start="2986:14" pos:end="2986:29">uri_str_to_bytes</name><argument_list pos:start="2986:30" pos:end="2986:48">(<argument pos:start="2986:31" pos:end="2986:40"><expr pos:start="2986:31" pos:end="2986:40"><name pos:start="2986:31" pos:end="2986:40">passphrase</name></expr></argument>, <argument pos:start="2986:43" pos:end="2986:47"><expr pos:start="2986:43" pos:end="2986:47"><name pos:start="2986:43" pos:end="2986:47">pp_ba</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block pos:start="2987:9" pos:end="2990:9">{<block_content pos:start="2988:13" pos:end="2989:21">
            <expr_stmt pos:start="2988:13" pos:end="2988:43"><expr pos:start="2988:13" pos:end="2988:42"><call pos:start="2988:13" pos:end="2988:42"><name pos:start="2988:13" pos:end="2988:29">g_byte_array_free</name><argument_list pos:start="2988:30" pos:end="2988:42">(<argument pos:start="2988:31" pos:end="2988:35"><expr pos:start="2988:31" pos:end="2988:35"><name pos:start="2988:31" pos:end="2988:35">pp_ba</name></expr></argument>, <argument pos:start="2988:38" pos:end="2988:41"><expr pos:start="2988:38" pos:end="2988:41"><name pos:start="2988:38" pos:end="2988:41">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2989:13" pos:end="2989:21">return <expr pos:start="2989:20" pos:end="2989:20"><literal type="number" pos:start="2989:20" pos:end="2989:20">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2992:9" pos:end="2992:98"><expr pos:start="2992:9" pos:end="2992:97"><call pos:start="2992:9" pos:end="2992:97"><name pos:start="2992:9" pos:end="2992:35">Dot11DecryptRsnaPwd2PskStep</name><argument_list pos:start="2992:36" pos:end="2992:97">(<argument pos:start="2992:37" pos:end="2992:47"><expr pos:start="2992:37" pos:end="2992:47"><name pos:start="2992:37" pos:end="2992:47"><name pos:start="2992:37" pos:end="2992:41">pp_ba</name><operator pos:start="2992:42" pos:end="2992:43">-&gt;</operator><name pos:start="2992:44" pos:end="2992:47">data</name></name></expr></argument>, <argument pos:start="2992:50" pos:end="2992:59"><expr pos:start="2992:50" pos:end="2992:59"><name pos:start="2992:50" pos:end="2992:59"><name pos:start="2992:50" pos:end="2992:54">pp_ba</name><operator pos:start="2992:55" pos:end="2992:56">-&gt;</operator><name pos:start="2992:57" pos:end="2992:59">len</name></name></expr></argument>, <argument pos:start="2992:62" pos:end="2992:65"><expr pos:start="2992:62" pos:end="2992:65"><name pos:start="2992:62" pos:end="2992:65">ssid</name></expr></argument>, <argument pos:start="2992:68" pos:end="2992:77"><expr pos:start="2992:68" pos:end="2992:77"><name pos:start="2992:68" pos:end="2992:77">ssidLength</name></expr></argument>, <argument pos:start="2992:80" pos:end="2992:83"><expr pos:start="2992:80" pos:end="2992:83"><literal type="number" pos:start="2992:80" pos:end="2992:83">4096</literal></expr></argument>, <argument pos:start="2992:86" pos:end="2992:86"><expr pos:start="2992:86" pos:end="2992:86"><literal type="number" pos:start="2992:86" pos:end="2992:86">1</literal></expr></argument>, <argument pos:start="2992:89" pos:end="2992:96"><expr pos:start="2992:89" pos:end="2992:96"><name pos:start="2992:89" pos:end="2992:96">m_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2993:9" pos:end="2993:103"><expr pos:start="2993:9" pos:end="2993:102"><call pos:start="2993:9" pos:end="2993:102"><name pos:start="2993:9" pos:end="2993:35">Dot11DecryptRsnaPwd2PskStep</name><argument_list pos:start="2993:36" pos:end="2993:102">(<argument pos:start="2993:37" pos:end="2993:47"><expr pos:start="2993:37" pos:end="2993:47"><name pos:start="2993:37" pos:end="2993:47"><name pos:start="2993:37" pos:end="2993:41">pp_ba</name><operator pos:start="2993:42" pos:end="2993:43">-&gt;</operator><name pos:start="2993:44" pos:end="2993:47">data</name></name></expr></argument>, <argument pos:start="2993:50" pos:end="2993:59"><expr pos:start="2993:50" pos:end="2993:59"><name pos:start="2993:50" pos:end="2993:59"><name pos:start="2993:50" pos:end="2993:54">pp_ba</name><operator pos:start="2993:55" pos:end="2993:56">-&gt;</operator><name pos:start="2993:57" pos:end="2993:59">len</name></name></expr></argument>, <argument pos:start="2993:62" pos:end="2993:65"><expr pos:start="2993:62" pos:end="2993:65"><name pos:start="2993:62" pos:end="2993:65">ssid</name></expr></argument>, <argument pos:start="2993:68" pos:end="2993:77"><expr pos:start="2993:68" pos:end="2993:77"><name pos:start="2993:68" pos:end="2993:77">ssidLength</name></expr></argument>, <argument pos:start="2993:80" pos:end="2993:83"><expr pos:start="2993:80" pos:end="2993:83"><literal type="number" pos:start="2993:80" pos:end="2993:83">4096</literal></expr></argument>, <argument pos:start="2993:86" pos:end="2993:86"><expr pos:start="2993:86" pos:end="2993:86"><literal type="number" pos:start="2993:86" pos:end="2993:86">2</literal></expr></argument>, <argument pos:start="2993:89" pos:end="2993:101"><expr pos:start="2993:89" pos:end="2993:101"><operator pos:start="2993:89" pos:end="2993:89">&amp;</operator><name pos:start="2993:90" pos:end="2993:101"><name pos:start="2993:90" pos:end="2993:97">m_output</name><index pos:start="2993:98" pos:end="2993:101">[<expr pos:start="2993:99" pos:end="2993:100"><literal type="number" pos:start="2993:99" pos:end="2993:100">20</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2995:9" pos:end="2995:63"><expr pos:start="2995:9" pos:end="2995:62"><call pos:start="2995:9" pos:end="2995:62"><name pos:start="2995:9" pos:end="2995:14">memcpy</name><argument_list pos:start="2995:15" pos:end="2995:62">(<argument pos:start="2995:16" pos:end="2995:21"><expr pos:start="2995:16" pos:end="2995:21"><name pos:start="2995:16" pos:end="2995:21">output</name></expr></argument>, <argument pos:start="2995:24" pos:end="2995:31"><expr pos:start="2995:24" pos:end="2995:31"><name pos:start="2995:24" pos:end="2995:31">m_output</name></expr></argument>, <argument pos:start="2995:34" pos:end="2995:61"><expr pos:start="2995:34" pos:end="2995:61"><name pos:start="2995:34" pos:end="2995:61">DOT11DECRYPT_WPA_PWD_PSK_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2996:9" pos:end="2996:39"><expr pos:start="2996:9" pos:end="2996:38"><call pos:start="2996:9" pos:end="2996:38"><name pos:start="2996:9" pos:end="2996:25">g_byte_array_free</name><argument_list pos:start="2996:26" pos:end="2996:38">(<argument pos:start="2996:27" pos:end="2996:31"><expr pos:start="2996:27" pos:end="2996:31"><name pos:start="2996:27" pos:end="2996:31">pp_ba</name></expr></argument>, <argument pos:start="2996:34" pos:end="2996:37"><expr pos:start="2996:34" pos:end="2996:37"><name pos:start="2996:34" pos:end="2996:37">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="2998:9" pos:end="2998:17">return <expr pos:start="2998:16" pos:end="2998:16"><literal type="number" pos:start="2998:16" pos:end="2998:16">0</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" pos:start="3001:5" pos:end="3004:7">/*
     * Returns the decryption_key_t struct given a string describing the key.
     * Returns NULL if the input_string cannot be parsed.
     */</comment>
    <function pos:start="3005:5" pos:end="3239:5"><type pos:start="3005:5" pos:end="3005:22"><name pos:start="3005:5" pos:end="3005:20">decryption_key_t</name> <modifier pos:start="3005:22" pos:end="3005:22">*</modifier></type>
    <name pos:start="3006:5" pos:end="3006:20">parse_key_string</name><parameter_list pos:start="3006:21" pos:end="3006:58">(<parameter pos:start="3006:22" pos:end="3006:40"><decl pos:start="3006:22" pos:end="3006:40"><type pos:start="3006:22" pos:end="3006:40"><name pos:start="3006:22" pos:end="3006:26">gchar</name> <modifier pos:start="3006:28" pos:end="3006:28">*</modifier></type><name pos:start="3006:29" pos:end="3006:40">input_string</name></decl></parameter>, <parameter pos:start="3006:43" pos:end="3006:57"><decl pos:start="3006:43" pos:end="3006:57"><type pos:start="3006:43" pos:end="3006:57"><name pos:start="3006:43" pos:end="3006:48">guint8</name></type> <name pos:start="3006:50" pos:end="3006:57">key_type</name></decl></parameter>)</parameter_list>
    <block pos:start="3007:5" pos:end="3239:5">{<block_content pos:start="3008:9" pos:end="3238:20">
        <decl_stmt pos:start="3008:9" pos:end="3008:29"><decl pos:start="3008:9" pos:end="3008:18"><type pos:start="3008:9" pos:end="3008:15"><name pos:start="3008:9" pos:end="3008:13">gchar</name> <modifier pos:start="3008:15" pos:end="3008:15">*</modifier></type><name pos:start="3008:16" pos:end="3008:18">key</name></decl>, <decl pos:start="3008:21" pos:end="3008:28"><type ref="prev" pos:start="3008:9" pos:end="3008:15"><modifier pos:start="3008:21" pos:end="3008:21">*</modifier></type><name pos:start="3008:22" pos:end="3008:28">tmp_str</name></decl>;</decl_stmt>
        <decl_stmt pos:start="3009:9" pos:end="3009:20"><decl pos:start="3009:9" pos:end="3009:19"><type pos:start="3009:9" pos:end="3009:15"><name pos:start="3009:9" pos:end="3009:13">gchar</name> <modifier pos:start="3009:15" pos:end="3009:15">*</modifier></type><name pos:start="3009:16" pos:end="3009:19">ssid</name></decl>;</decl_stmt>

        <decl_stmt pos:start="3011:9" pos:end="3011:35"><decl pos:start="3011:9" pos:end="3011:34"><type pos:start="3011:9" pos:end="3011:17"><name pos:start="3011:9" pos:end="3011:15">GString</name> <modifier pos:start="3011:17" pos:end="3011:17">*</modifier></type><name pos:start="3011:18" pos:end="3011:27">key_string</name> <init pos:start="3011:29" pos:end="3011:34">= <expr pos:start="3011:31" pos:end="3011:34"><name pos:start="3011:31" pos:end="3011:34">NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="3012:9" pos:end="3012:44"><decl pos:start="3012:9" pos:end="3012:34"><type pos:start="3012:9" pos:end="3012:20"><name pos:start="3012:9" pos:end="3012:18">GByteArray</name> <modifier pos:start="3012:20" pos:end="3012:20">*</modifier></type><name pos:start="3012:21" pos:end="3012:27">ssid_ba</name> <init pos:start="3012:29" pos:end="3012:34">= <expr pos:start="3012:31" pos:end="3012:34"><name pos:start="3012:31" pos:end="3012:34">NULL</name></expr></init></decl>, <decl pos:start="3012:37" pos:end="3012:43"><type ref="prev" pos:start="3012:9" pos:end="3012:20"><modifier pos:start="3012:37" pos:end="3012:37">*</modifier></type><name pos:start="3012:38" pos:end="3012:43">key_ba</name></decl>;</decl_stmt>
        <decl_stmt pos:start="3013:9" pos:end="3013:21"><decl pos:start="3013:9" pos:end="3013:20"><type pos:start="3013:9" pos:end="3013:16"><name pos:start="3013:9" pos:end="3013:16">gboolean</name></type> <name pos:start="3013:18" pos:end="3013:20">res</name></decl>;</decl_stmt>

        <decl_stmt pos:start="3015:9" pos:end="3015:23"><decl pos:start="3015:9" pos:end="3015:22"><type pos:start="3015:9" pos:end="3015:16"><name pos:start="3015:9" pos:end="3015:13">gchar</name> <modifier pos:start="3015:15" pos:end="3015:15">*</modifier><modifier pos:start="3015:16" pos:end="3015:16">*</modifier></type><name pos:start="3015:17" pos:end="3015:22">tokens</name></decl>;</decl_stmt>
        <decl_stmt pos:start="3016:9" pos:end="3016:20"><decl pos:start="3016:9" pos:end="3016:19"><type pos:start="3016:9" pos:end="3016:13"><name pos:start="3016:9" pos:end="3016:13">guint</name></type> <name pos:start="3016:15" pos:end="3016:15">n</name> <init pos:start="3016:17" pos:end="3016:19">= <expr pos:start="3016:19" pos:end="3016:19"><literal type="number" pos:start="3016:19" pos:end="3016:19">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="3017:9" pos:end="3017:29"><decl pos:start="3017:9" pos:end="3017:28"><type pos:start="3017:9" pos:end="3017:26"><name pos:start="3017:9" pos:end="3017:24">decryption_key_t</name> <modifier pos:start="3017:26" pos:end="3017:26">*</modifier></type><name pos:start="3017:27" pos:end="3017:28">dk</name></decl>;</decl_stmt>

        <if_stmt pos:start="3019:9" pos:end="3020:24"><if pos:start="3019:9" pos:end="3020:24">if <condition pos:start="3019:12" pos:end="3019:33">(<expr pos:start="3019:13" pos:end="3019:32"><name pos:start="3019:13" pos:end="3019:24">input_string</name> <operator pos:start="3019:26" pos:end="3019:27">==</operator> <name pos:start="3019:29" pos:end="3019:32">NULL</name></expr>)</condition><block type="pseudo" pos:start="3020:13" pos:end="3020:24"><block_content pos:start="3020:13" pos:end="3020:24">
            <return pos:start="3020:13" pos:end="3020:24">return <expr pos:start="3020:20" pos:end="3020:23"><name pos:start="3020:20" pos:end="3020:23">NULL</name></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block" pos:start="3022:9" pos:end="3028:11">/*
         * Parse the input_string. WEP and WPA will be just a string
         * of hexadecimal characters (if key is wrong, null will be
         * returned...).
         * WPA-PWD should be in the form
         * &lt;key data&gt;[:&lt;ssid&gt;]
         */</comment>

        <switch pos:start="3030:9" pos:end="3235:9">switch <condition pos:start="3030:16" pos:end="3030:25">(<expr pos:start="3030:17" pos:end="3030:24"><name pos:start="3030:17" pos:end="3030:24">key_type</name></expr>)</condition>
        <block pos:start="3031:9" pos:end="3235:9">{<block_content pos:start="3032:9" pos:end="3234:9">
        <case pos:start="3032:9" pos:end="3032:39">case <expr pos:start="3032:14" pos:end="3032:38"><name pos:start="3032:14" pos:end="3032:38">DOT11DECRYPT_KEY_TYPE_WEP</name></expr>:</case>
        <case pos:start="3033:9" pos:end="3033:42">case <expr pos:start="3033:14" pos:end="3033:41"><name pos:start="3033:14" pos:end="3033:41">DOT11DECRYPT_KEY_TYPE_WEP_40</name></expr>:</case>
        <case pos:start="3034:9" pos:end="3034:43">case <expr pos:start="3034:14" pos:end="3034:42"><name pos:start="3034:14" pos:end="3034:42">DOT11DECRYPT_KEY_TYPE_WEP_104</name></expr>:</case>

            <expr_stmt pos:start="3036:13" pos:end="3036:40"><expr pos:start="3036:13" pos:end="3036:39"><name pos:start="3036:13" pos:end="3036:18">key_ba</name> <operator pos:start="3036:20" pos:end="3036:20">=</operator> <call pos:start="3036:22" pos:end="3036:39"><name pos:start="3036:22" pos:end="3036:37">g_byte_array_new</name><argument_list pos:start="3036:38" pos:end="3036:39">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3037:13" pos:end="3037:64"><expr pos:start="3037:13" pos:end="3037:63"><name pos:start="3037:13" pos:end="3037:15">res</name> <operator pos:start="3037:17" pos:end="3037:17">=</operator> <call pos:start="3037:19" pos:end="3037:63"><name pos:start="3037:19" pos:end="3037:34">hex_str_to_bytes</name><argument_list pos:start="3037:35" pos:end="3037:63">(<argument pos:start="3037:36" pos:end="3037:47"><expr pos:start="3037:36" pos:end="3037:47"><name pos:start="3037:36" pos:end="3037:47">input_string</name></expr></argument>, <argument pos:start="3037:50" pos:end="3037:55"><expr pos:start="3037:50" pos:end="3037:55"><name pos:start="3037:50" pos:end="3037:55">key_ba</name></expr></argument>, <argument pos:start="3037:58" pos:end="3037:62"><expr pos:start="3037:58" pos:end="3037:62"><name pos:start="3037:58" pos:end="3037:62">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="3039:13" pos:end="3057:13"><if pos:start="3039:13" pos:end="3057:13">if <condition pos:start="3039:16" pos:end="3039:39">(<expr pos:start="3039:17" pos:end="3039:38"><name pos:start="3039:17" pos:end="3039:19">res</name> <operator pos:start="3039:21" pos:end="3039:22">&amp;&amp;</operator> <name pos:start="3039:24" pos:end="3039:34"><name pos:start="3039:24" pos:end="3039:29">key_ba</name><operator pos:start="3039:30" pos:end="3039:31">-&gt;</operator><name pos:start="3039:32" pos:end="3039:34">len</name></name> <operator pos:start="3039:36" pos:end="3039:36">&gt;</operator> <literal type="number" pos:start="3039:38" pos:end="3039:38">0</literal></expr>)</condition>
            <block pos:start="3040:13" pos:end="3057:13">{<block_content pos:start="3043:17" pos:end="3056:26">
                <comment type="block" pos:start="3041:17" pos:end="3041:76">/* Key is correct! It was probably an 'old style' WEP key */</comment>
                <comment type="block" pos:start="3042:17" pos:end="3042:81">/* Create the decryption_key_t structure, fill it and return it*/</comment>
                <expr_stmt pos:start="3043:17" pos:end="3043:48"><expr pos:start="3043:17" pos:end="3043:47"><name pos:start="3043:17" pos:end="3043:18">dk</name> <operator pos:start="3043:20" pos:end="3043:20">=</operator> <call pos:start="3043:22" pos:end="3043:47"><name pos:start="3043:22" pos:end="3043:26">g_new</name><argument_list pos:start="3043:27" pos:end="3043:47">(<argument pos:start="3043:28" pos:end="3043:43"><expr pos:start="3043:28" pos:end="3043:43"><name pos:start="3043:28" pos:end="3043:43">decryption_key_t</name></expr></argument>, <argument pos:start="3043:46" pos:end="3043:46"><expr pos:start="3043:46" pos:end="3043:46"><literal type="number" pos:start="3043:46" pos:end="3043:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3045:17" pos:end="3045:53"><expr pos:start="3045:17" pos:end="3045:52"><name pos:start="3045:17" pos:end="3045:24"><name pos:start="3045:17" pos:end="3045:18">dk</name><operator pos:start="3045:19" pos:end="3045:20">-&gt;</operator><name pos:start="3045:21" pos:end="3045:24">type</name></name> <operator pos:start="3045:26" pos:end="3045:26">=</operator> <name pos:start="3045:28" pos:end="3045:52">DOT11DECRYPT_KEY_TYPE_WEP</name></expr>;</expr_stmt>
                <comment type="block" pos:start="3046:17" pos:end="3047:50">/* XXX - The current key handling code in the GUI requires
                 * no separators and lower case */</comment>
                <expr_stmt pos:start="3048:17" pos:end="3048:72"><expr pos:start="3048:17" pos:end="3048:71"><name pos:start="3048:17" pos:end="3048:23">tmp_str</name> <operator pos:start="3048:25" pos:end="3048:25">=</operator> <call pos:start="3048:27" pos:end="3048:71"><name pos:start="3048:27" pos:end="3048:38">bytes_to_str</name><argument_list pos:start="3048:39" pos:end="3048:71">(<argument pos:start="3048:40" pos:end="3048:43"><expr pos:start="3048:40" pos:end="3048:43"><name pos:start="3048:40" pos:end="3048:43">NULL</name></expr></argument>, <argument pos:start="3048:46" pos:end="3048:57"><expr pos:start="3048:46" pos:end="3048:57"><name pos:start="3048:46" pos:end="3048:57"><name pos:start="3048:46" pos:end="3048:51">key_ba</name><operator pos:start="3048:52" pos:end="3048:53">-&gt;</operator><name pos:start="3048:54" pos:end="3048:57">data</name></name></expr></argument>, <argument pos:start="3048:60" pos:end="3048:70"><expr pos:start="3048:60" pos:end="3048:70"><name pos:start="3048:60" pos:end="3048:70"><name pos:start="3048:60" pos:end="3048:65">key_ba</name><operator pos:start="3048:66" pos:end="3048:67">-&gt;</operator><name pos:start="3048:68" pos:end="3048:70">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3049:17" pos:end="3049:48"><expr pos:start="3049:17" pos:end="3049:47"><name pos:start="3049:17" pos:end="3049:23"><name pos:start="3049:17" pos:end="3049:18">dk</name><operator pos:start="3049:19" pos:end="3049:20">-&gt;</operator><name pos:start="3049:21" pos:end="3049:23">key</name></name> <operator pos:start="3049:25" pos:end="3049:25">=</operator> <call pos:start="3049:27" pos:end="3049:47"><name pos:start="3049:27" pos:end="3049:38">g_string_new</name><argument_list pos:start="3049:39" pos:end="3049:47">(<argument pos:start="3049:40" pos:end="3049:46"><expr pos:start="3049:40" pos:end="3049:46"><name pos:start="3049:40" pos:end="3049:46">tmp_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3050:17" pos:end="3050:45"><expr pos:start="3050:17" pos:end="3050:44"><call pos:start="3050:17" pos:end="3050:44"><name pos:start="3050:17" pos:end="3050:35">g_string_ascii_down</name><argument_list pos:start="3050:36" pos:end="3050:44">(<argument pos:start="3050:37" pos:end="3050:43"><expr pos:start="3050:37" pos:end="3050:43"><name pos:start="3050:37" pos:end="3050:43"><name pos:start="3050:37" pos:end="3050:38">dk</name><operator pos:start="3050:39" pos:end="3050:40">-&gt;</operator><name pos:start="3050:41" pos:end="3050:43">key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3051:17" pos:end="3051:43"><expr pos:start="3051:17" pos:end="3051:42"><name pos:start="3051:17" pos:end="3051:24"><name pos:start="3051:17" pos:end="3051:18">dk</name><operator pos:start="3051:19" pos:end="3051:20">-&gt;</operator><name pos:start="3051:21" pos:end="3051:24">bits</name></name> <operator pos:start="3051:26" pos:end="3051:26">=</operator> <name pos:start="3051:28" pos:end="3051:38"><name pos:start="3051:28" pos:end="3051:33">key_ba</name><operator pos:start="3051:34" pos:end="3051:35">-&gt;</operator><name pos:start="3051:36" pos:end="3051:38">len</name></name> <operator pos:start="3051:40" pos:end="3051:40">*</operator> <literal type="number" pos:start="3051:42" pos:end="3051:42">8</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="3052:17" pos:end="3052:32"><expr pos:start="3052:17" pos:end="3052:31"><name pos:start="3052:17" pos:end="3052:24"><name pos:start="3052:17" pos:end="3052:18">dk</name><operator pos:start="3052:19" pos:end="3052:20">-&gt;</operator><name pos:start="3052:21" pos:end="3052:24">ssid</name></name> <operator pos:start="3052:26" pos:end="3052:26">=</operator> <name pos:start="3052:28" pos:end="3052:31">NULL</name></expr>;</expr_stmt>

                <expr_stmt pos:start="3054:17" pos:end="3054:41"><expr pos:start="3054:17" pos:end="3054:40"><call pos:start="3054:17" pos:end="3054:40"><name pos:start="3054:17" pos:end="3054:25">wmem_free</name><argument_list pos:start="3054:26" pos:end="3054:40">(<argument pos:start="3054:27" pos:end="3054:30"><expr pos:start="3054:27" pos:end="3054:30"><name pos:start="3054:27" pos:end="3054:30">NULL</name></expr></argument>, <argument pos:start="3054:33" pos:end="3054:39"><expr pos:start="3054:33" pos:end="3054:39"><name pos:start="3054:33" pos:end="3054:39">tmp_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3055:17" pos:end="3055:48"><expr pos:start="3055:17" pos:end="3055:47"><call pos:start="3055:17" pos:end="3055:47"><name pos:start="3055:17" pos:end="3055:33">g_byte_array_free</name><argument_list pos:start="3055:34" pos:end="3055:47">(<argument pos:start="3055:35" pos:end="3055:40"><expr pos:start="3055:35" pos:end="3055:40"><name pos:start="3055:35" pos:end="3055:40">key_ba</name></expr></argument>, <argument pos:start="3055:43" pos:end="3055:46"><expr pos:start="3055:43" pos:end="3055:46"><name pos:start="3055:43" pos:end="3055:46">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3056:17" pos:end="3056:26">return <expr pos:start="3056:24" pos:end="3056:25"><name pos:start="3056:24" pos:end="3056:25">dk</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="3059:13" pos:end="3059:34">/* Key doesn't work */</comment>
            <expr_stmt pos:start="3060:13" pos:end="3060:44"><expr pos:start="3060:13" pos:end="3060:43"><call pos:start="3060:13" pos:end="3060:43"><name pos:start="3060:13" pos:end="3060:29">g_byte_array_free</name><argument_list pos:start="3060:30" pos:end="3060:43">(<argument pos:start="3060:31" pos:end="3060:36"><expr pos:start="3060:31" pos:end="3060:36"><name pos:start="3060:31" pos:end="3060:36">key_ba</name></expr></argument>, <argument pos:start="3060:39" pos:end="3060:42"><expr pos:start="3060:39" pos:end="3060:42"><name pos:start="3060:39" pos:end="3060:42">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="3061:13" pos:end="3061:24">return <expr pos:start="3061:20" pos:end="3061:23"><name pos:start="3061:20" pos:end="3061:23">NULL</name></expr>;</return>

        <case pos:start="3063:9" pos:end="3063:43">case <expr pos:start="3063:14" pos:end="3063:42"><name pos:start="3063:14" pos:end="3063:42">DOT11DECRYPT_KEY_TYPE_WPA_PWD</name></expr>:</case>

            <expr_stmt pos:start="3065:13" pos:end="3065:54"><expr pos:start="3065:13" pos:end="3065:53"><name pos:start="3065:13" pos:end="3065:18">tokens</name> <operator pos:start="3065:20" pos:end="3065:20">=</operator> <call pos:start="3065:22" pos:end="3065:53"><name pos:start="3065:22" pos:end="3065:31">g_strsplit</name><argument_list pos:start="3065:32" pos:end="3065:53">(<argument pos:start="3065:33" pos:end="3065:44"><expr pos:start="3065:33" pos:end="3065:44"><name pos:start="3065:33" pos:end="3065:44">input_string</name></expr></argument>, <argument pos:start="3065:47" pos:end="3065:49"><expr pos:start="3065:47" pos:end="3065:49"><literal type="string" pos:start="3065:47" pos:end="3065:49">":"</literal></expr></argument>, <argument pos:start="3065:52" pos:end="3065:52"><expr pos:start="3065:52" pos:end="3065:52"><literal type="number" pos:start="3065:52" pos:end="3065:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="3067:13" pos:end="3067:65">/* Tokens is a null termiated array of strings ... */</comment>
            <while pos:start="3068:13" pos:end="3069:20">while <condition pos:start="3068:19" pos:end="3068:37">(<expr pos:start="3068:20" pos:end="3068:36"><name pos:start="3068:20" pos:end="3068:28"><name pos:start="3068:20" pos:end="3068:25">tokens</name><index pos:start="3068:26" pos:end="3068:28">[<expr pos:start="3068:27" pos:end="3068:27"><name pos:start="3068:27" pos:end="3068:27">n</name></expr>]</index></name> <operator pos:start="3068:30" pos:end="3068:31">!=</operator> <name pos:start="3068:33" pos:end="3068:36">NULL</name></expr>)</condition><block type="pseudo" pos:start="3069:17" pos:end="3069:20"><block_content pos:start="3069:17" pos:end="3069:20">
                <expr_stmt pos:start="3069:17" pos:end="3069:20"><expr pos:start="3069:17" pos:end="3069:19"><name pos:start="3069:17" pos:end="3069:17">n</name><operator pos:start="3069:18" pos:end="3069:19">++</operator></expr>;</expr_stmt></block_content></block></while>

            <if_stmt pos:start="3071:13" pos:end="3076:13"><if pos:start="3071:13" pos:end="3076:13">if <condition pos:start="3071:16" pos:end="3071:22">(<expr pos:start="3071:17" pos:end="3071:21"><name pos:start="3071:17" pos:end="3071:17">n</name> <operator pos:start="3071:19" pos:end="3071:19">&lt;</operator> <literal type="number" pos:start="3071:21" pos:end="3071:21">1</literal></expr>)</condition>
            <block pos:start="3072:13" pos:end="3076:13">{<block_content pos:start="3074:17" pos:end="3075:28">
                <comment type="block" pos:start="3073:17" pos:end="3073:47">/* Free the array of strings */</comment>
                <expr_stmt pos:start="3074:17" pos:end="3074:35"><expr pos:start="3074:17" pos:end="3074:34"><call pos:start="3074:17" pos:end="3074:34"><name pos:start="3074:17" pos:end="3074:26">g_strfreev</name><argument_list pos:start="3074:27" pos:end="3074:34">(<argument pos:start="3074:28" pos:end="3074:33"><expr pos:start="3074:28" pos:end="3074:33"><name pos:start="3074:28" pos:end="3074:33">tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3075:17" pos:end="3075:28">return <expr pos:start="3075:24" pos:end="3075:27"><name pos:start="3075:24" pos:end="3075:27">NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="3078:13" pos:end="3080:15">/*
             * The first token is the key
             */</comment>
            <expr_stmt pos:start="3081:13" pos:end="3081:38"><expr pos:start="3081:13" pos:end="3081:37"><name pos:start="3081:13" pos:end="3081:15">key</name> <operator pos:start="3081:17" pos:end="3081:17">=</operator> <call pos:start="3081:19" pos:end="3081:37"><name pos:start="3081:19" pos:end="3081:26">g_strdup</name><argument_list pos:start="3081:27" pos:end="3081:37">(<argument pos:start="3081:28" pos:end="3081:36"><expr pos:start="3081:28" pos:end="3081:36"><name pos:start="3081:28" pos:end="3081:36"><name pos:start="3081:28" pos:end="3081:33">tokens</name><index pos:start="3081:34" pos:end="3081:36">[<expr pos:start="3081:35" pos:end="3081:35"><literal type="number" pos:start="3081:35" pos:end="3081:35">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3083:13" pos:end="3083:24"><expr pos:start="3083:13" pos:end="3083:23"><name pos:start="3083:13" pos:end="3083:16">ssid</name> <operator pos:start="3083:18" pos:end="3083:18">=</operator> <name pos:start="3083:20" pos:end="3083:23">NULL</name></expr>;</expr_stmt>
            <comment type="block" pos:start="3084:13" pos:end="3084:83">/* Maybe there is a second token (an ssid, if everything else is ok) */</comment>
            <if_stmt pos:start="3085:13" pos:end="3088:13"><if pos:start="3085:13" pos:end="3088:13">if <condition pos:start="3085:16" pos:end="3085:23">(<expr pos:start="3085:17" pos:end="3085:22"><name pos:start="3085:17" pos:end="3085:17">n</name> <operator pos:start="3085:19" pos:end="3085:20">&gt;=</operator> <literal type="number" pos:start="3085:22" pos:end="3085:22">2</literal></expr>)</condition>
            <block pos:start="3086:13" pos:end="3088:13">{<block_content pos:start="3087:17" pos:end="3087:43">
                <expr_stmt pos:start="3087:17" pos:end="3087:43"><expr pos:start="3087:17" pos:end="3087:42"><name pos:start="3087:17" pos:end="3087:20">ssid</name> <operator pos:start="3087:22" pos:end="3087:22">=</operator> <call pos:start="3087:24" pos:end="3087:42"><name pos:start="3087:24" pos:end="3087:31">g_strdup</name><argument_list pos:start="3087:32" pos:end="3087:42">(<argument pos:start="3087:33" pos:end="3087:41"><expr pos:start="3087:33" pos:end="3087:41"><name pos:start="3087:33" pos:end="3087:41"><name pos:start="3087:33" pos:end="3087:38">tokens</name><index pos:start="3087:39" pos:end="3087:41">[<expr pos:start="3087:40" pos:end="3087:40"><literal type="number" pos:start="3087:40" pos:end="3087:40">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="3090:13" pos:end="3090:37">/* Create a new string */</comment>
            <expr_stmt pos:start="3091:13" pos:end="3091:43"><expr pos:start="3091:13" pos:end="3091:42"><name pos:start="3091:13" pos:end="3091:22">key_string</name> <operator pos:start="3091:24" pos:end="3091:24">=</operator> <call pos:start="3091:26" pos:end="3091:42"><name pos:start="3091:26" pos:end="3091:37">g_string_new</name><argument_list pos:start="3091:38" pos:end="3091:42">(<argument pos:start="3091:39" pos:end="3091:41"><expr pos:start="3091:39" pos:end="3091:41"><name pos:start="3091:39" pos:end="3091:41">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3092:13" pos:end="3092:27"><expr pos:start="3092:13" pos:end="3092:26"><name pos:start="3092:13" pos:end="3092:19">ssid_ba</name> <operator pos:start="3092:21" pos:end="3092:21">=</operator> <name pos:start="3092:23" pos:end="3092:26">NULL</name></expr>;</expr_stmt>

            <comment type="block" pos:start="3094:13" pos:end="3094:83">/* Two (or more) tokens mean that the user entered a WPA-PWD key ... */</comment>
            <if_stmt pos:start="3095:13" pos:end="3105:13"><if pos:start="3095:13" pos:end="3105:13">if <condition pos:start="3095:16" pos:end="3095:107">(<expr pos:start="3095:17" pos:end="3095:106"><operator pos:start="3095:17" pos:end="3095:17">(</operator><operator pos:start="3095:18" pos:end="3095:18">(</operator><name pos:start="3095:19" pos:end="3095:33"><name pos:start="3095:19" pos:end="3095:28">key_string</name><operator pos:start="3095:29" pos:end="3095:30">-&gt;</operator><name pos:start="3095:31" pos:end="3095:33">len</name></name><operator pos:start="3095:34" pos:end="3095:34">)</operator> <operator pos:start="3095:36" pos:end="3095:36">&gt;</operator> <name pos:start="3095:38" pos:end="3095:58">WPA_KEY_MAX_CHAR_SIZE</name><operator pos:start="3095:59" pos:end="3095:59">)</operator> <operator pos:start="3095:61" pos:end="3095:62">||</operator> <operator pos:start="3095:64" pos:end="3095:64">(</operator><operator pos:start="3095:65" pos:end="3095:65">(</operator><name pos:start="3095:66" pos:end="3095:80"><name pos:start="3095:66" pos:end="3095:75">key_string</name><operator pos:start="3095:76" pos:end="3095:77">-&gt;</operator><name pos:start="3095:78" pos:end="3095:80">len</name></name><operator pos:start="3095:81" pos:end="3095:81">)</operator> <operator pos:start="3095:83" pos:end="3095:83">&lt;</operator> <name pos:start="3095:85" pos:end="3095:105">WPA_KEY_MIN_CHAR_SIZE</name><operator pos:start="3095:106" pos:end="3095:106">)</operator></expr>)</condition>
            <block pos:start="3096:13" pos:end="3105:13">{<block_content pos:start="3097:17" pos:end="3104:28">
                <expr_stmt pos:start="3097:17" pos:end="3097:48"><expr pos:start="3097:17" pos:end="3097:47"><call pos:start="3097:17" pos:end="3097:47"><name pos:start="3097:17" pos:end="3097:29">g_string_free</name><argument_list pos:start="3097:30" pos:end="3097:47">(<argument pos:start="3097:31" pos:end="3097:40"><expr pos:start="3097:31" pos:end="3097:40"><name pos:start="3097:31" pos:end="3097:40">key_string</name></expr></argument>, <argument pos:start="3097:43" pos:end="3097:46"><expr pos:start="3097:43" pos:end="3097:46"><name pos:start="3097:43" pos:end="3097:46">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3099:17" pos:end="3099:28"><expr pos:start="3099:17" pos:end="3099:27"><call pos:start="3099:17" pos:end="3099:27"><name pos:start="3099:17" pos:end="3099:22">g_free</name><argument_list pos:start="3099:23" pos:end="3099:27">(<argument pos:start="3099:24" pos:end="3099:26"><expr pos:start="3099:24" pos:end="3099:26"><name pos:start="3099:24" pos:end="3099:26">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3100:17" pos:end="3100:29"><expr pos:start="3100:17" pos:end="3100:28"><call pos:start="3100:17" pos:end="3100:28"><name pos:start="3100:17" pos:end="3100:22">g_free</name><argument_list pos:start="3100:23" pos:end="3100:28">(<argument pos:start="3100:24" pos:end="3100:27"><expr pos:start="3100:24" pos:end="3100:27"><name pos:start="3100:24" pos:end="3100:27">ssid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="3102:17" pos:end="3102:47">/* Free the array of strings */</comment>
                <expr_stmt pos:start="3103:17" pos:end="3103:35"><expr pos:start="3103:17" pos:end="3103:34"><call pos:start="3103:17" pos:end="3103:34"><name pos:start="3103:17" pos:end="3103:26">g_strfreev</name><argument_list pos:start="3103:27" pos:end="3103:34">(<argument pos:start="3103:28" pos:end="3103:33"><expr pos:start="3103:28" pos:end="3103:33"><name pos:start="3103:28" pos:end="3103:33">tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3104:17" pos:end="3104:28">return <expr pos:start="3104:24" pos:end="3104:27"><name pos:start="3104:24" pos:end="3104:27">NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="3107:13" pos:end="3133:13"><if pos:start="3107:13" pos:end="3133:13">if <condition pos:start="3107:16" pos:end="3107:29">(<expr pos:start="3107:17" pos:end="3107:28"><name pos:start="3107:17" pos:end="3107:20">ssid</name> <operator pos:start="3107:22" pos:end="3107:23">!=</operator> <name pos:start="3107:25" pos:end="3107:28">NULL</name></expr>)</condition> <comment type="block" pos:start="3107:31" pos:end="3107:102">/* more than two tokens found, means that the user specified the ssid */</comment>
            <block pos:start="3108:13" pos:end="3133:13">{<block_content pos:start="3109:17" pos:end="3132:17">
                <expr_stmt pos:start="3109:17" pos:end="3109:45"><expr pos:start="3109:17" pos:end="3109:44"><name pos:start="3109:17" pos:end="3109:23">ssid_ba</name> <operator pos:start="3109:25" pos:end="3109:25">=</operator> <call pos:start="3109:27" pos:end="3109:44"><name pos:start="3109:27" pos:end="3109:42">g_byte_array_new</name><argument_list pos:start="3109:43" pos:end="3109:44">()</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="3110:17" pos:end="3119:17"><if pos:start="3110:17" pos:end="3119:17">if <condition pos:start="3110:20" pos:end="3110:53">(<expr pos:start="3110:21" pos:end="3110:52"><operator pos:start="3110:21" pos:end="3110:21">!</operator><call pos:start="3110:22" pos:end="3110:52"><name pos:start="3110:22" pos:end="3110:37">uri_str_to_bytes</name><argument_list pos:start="3110:38" pos:end="3110:52">(<argument pos:start="3110:39" pos:end="3110:42"><expr pos:start="3110:39" pos:end="3110:42"><name pos:start="3110:39" pos:end="3110:42">ssid</name></expr></argument>, <argument pos:start="3110:45" pos:end="3110:51"><expr pos:start="3110:45" pos:end="3110:51"><name pos:start="3110:45" pos:end="3110:51">ssid_ba</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block pos:start="3111:17" pos:end="3119:17">{<block_content pos:start="3112:21" pos:end="3118:32">
                    <expr_stmt pos:start="3112:21" pos:end="3112:52"><expr pos:start="3112:21" pos:end="3112:51"><call pos:start="3112:21" pos:end="3112:51"><name pos:start="3112:21" pos:end="3112:33">g_string_free</name><argument_list pos:start="3112:34" pos:end="3112:51">(<argument pos:start="3112:35" pos:end="3112:44"><expr pos:start="3112:35" pos:end="3112:44"><name pos:start="3112:35" pos:end="3112:44">key_string</name></expr></argument>, <argument pos:start="3112:47" pos:end="3112:50"><expr pos:start="3112:47" pos:end="3112:50"><name pos:start="3112:47" pos:end="3112:50">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="3113:21" pos:end="3113:53"><expr pos:start="3113:21" pos:end="3113:52"><call pos:start="3113:21" pos:end="3113:52"><name pos:start="3113:21" pos:end="3113:37">g_byte_array_free</name><argument_list pos:start="3113:38" pos:end="3113:52">(<argument pos:start="3113:39" pos:end="3113:45"><expr pos:start="3113:39" pos:end="3113:45"><name pos:start="3113:39" pos:end="3113:45">ssid_ba</name></expr></argument>, <argument pos:start="3113:48" pos:end="3113:51"><expr pos:start="3113:48" pos:end="3113:51"><name pos:start="3113:48" pos:end="3113:51">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="3114:21" pos:end="3114:32"><expr pos:start="3114:21" pos:end="3114:31"><call pos:start="3114:21" pos:end="3114:31"><name pos:start="3114:21" pos:end="3114:26">g_free</name><argument_list pos:start="3114:27" pos:end="3114:31">(<argument pos:start="3114:28" pos:end="3114:30"><expr pos:start="3114:28" pos:end="3114:30"><name pos:start="3114:28" pos:end="3114:30">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="3115:21" pos:end="3115:33"><expr pos:start="3115:21" pos:end="3115:32"><call pos:start="3115:21" pos:end="3115:32"><name pos:start="3115:21" pos:end="3115:26">g_free</name><argument_list pos:start="3115:27" pos:end="3115:32">(<argument pos:start="3115:28" pos:end="3115:31"><expr pos:start="3115:28" pos:end="3115:31"><name pos:start="3115:28" pos:end="3115:31">ssid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="block" pos:start="3116:21" pos:end="3116:51">/* Free the array of strings */</comment>
                    <expr_stmt pos:start="3117:21" pos:end="3117:39"><expr pos:start="3117:21" pos:end="3117:38"><call pos:start="3117:21" pos:end="3117:38"><name pos:start="3117:21" pos:end="3117:30">g_strfreev</name><argument_list pos:start="3117:31" pos:end="3117:38">(<argument pos:start="3117:32" pos:end="3117:37"><expr pos:start="3117:32" pos:end="3117:37"><name pos:start="3117:32" pos:end="3117:37">tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:start="3118:21" pos:end="3118:32">return <expr pos:start="3118:28" pos:end="3118:31"><name pos:start="3118:28" pos:end="3118:31">NULL</name></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="3121:17" pos:end="3132:17"><if pos:start="3121:17" pos:end="3132:17">if <condition pos:start="3121:20" pos:end="3121:58">(<expr pos:start="3121:21" pos:end="3121:57"><name pos:start="3121:21" pos:end="3121:32"><name pos:start="3121:21" pos:end="3121:27">ssid_ba</name><operator pos:start="3121:28" pos:end="3121:29">-&gt;</operator><name pos:start="3121:30" pos:end="3121:32">len</name></name> <operator pos:start="3121:34" pos:end="3121:34">&gt;</operator> <name pos:start="3121:36" pos:end="3121:57">WPA_SSID_MAX_CHAR_SIZE</name></expr>)</condition>
                <block pos:start="3122:17" pos:end="3132:17">{<block_content pos:start="3123:21" pos:end="3131:32">
                    <expr_stmt pos:start="3123:21" pos:end="3123:52"><expr pos:start="3123:21" pos:end="3123:51"><call pos:start="3123:21" pos:end="3123:51"><name pos:start="3123:21" pos:end="3123:33">g_string_free</name><argument_list pos:start="3123:34" pos:end="3123:51">(<argument pos:start="3123:35" pos:end="3123:44"><expr pos:start="3123:35" pos:end="3123:44"><name pos:start="3123:35" pos:end="3123:44">key_string</name></expr></argument>, <argument pos:start="3123:47" pos:end="3123:50"><expr pos:start="3123:47" pos:end="3123:50"><name pos:start="3123:47" pos:end="3123:50">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="3124:21" pos:end="3124:53"><expr pos:start="3124:21" pos:end="3124:52"><call pos:start="3124:21" pos:end="3124:52"><name pos:start="3124:21" pos:end="3124:37">g_byte_array_free</name><argument_list pos:start="3124:38" pos:end="3124:52">(<argument pos:start="3124:39" pos:end="3124:45"><expr pos:start="3124:39" pos:end="3124:45"><name pos:start="3124:39" pos:end="3124:45">ssid_ba</name></expr></argument>, <argument pos:start="3124:48" pos:end="3124:51"><expr pos:start="3124:48" pos:end="3124:51"><name pos:start="3124:48" pos:end="3124:51">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3126:21" pos:end="3126:32"><expr pos:start="3126:21" pos:end="3126:31"><call pos:start="3126:21" pos:end="3126:31"><name pos:start="3126:21" pos:end="3126:26">g_free</name><argument_list pos:start="3126:27" pos:end="3126:31">(<argument pos:start="3126:28" pos:end="3126:30"><expr pos:start="3126:28" pos:end="3126:30"><name pos:start="3126:28" pos:end="3126:30">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="3127:21" pos:end="3127:33"><expr pos:start="3127:21" pos:end="3127:32"><call pos:start="3127:21" pos:end="3127:32"><name pos:start="3127:21" pos:end="3127:26">g_free</name><argument_list pos:start="3127:27" pos:end="3127:32">(<argument pos:start="3127:28" pos:end="3127:31"><expr pos:start="3127:28" pos:end="3127:31"><name pos:start="3127:28" pos:end="3127:31">ssid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="3129:21" pos:end="3129:51">/* Free the array of strings */</comment>
                    <expr_stmt pos:start="3130:21" pos:end="3130:39"><expr pos:start="3130:21" pos:end="3130:38"><call pos:start="3130:21" pos:end="3130:38"><name pos:start="3130:21" pos:end="3130:30">g_strfreev</name><argument_list pos:start="3130:31" pos:end="3130:38">(<argument pos:start="3130:32" pos:end="3130:37"><expr pos:start="3130:32" pos:end="3130:37"><name pos:start="3130:32" pos:end="3130:37">tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:start="3131:21" pos:end="3131:32">return <expr pos:start="3131:28" pos:end="3131:31"><name pos:start="3131:28" pos:end="3131:31">NULL</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="3135:13" pos:end="3135:72">/* Key was correct!!! Create the new decryption_key_t ... */</comment>
            <expr_stmt pos:start="3136:13" pos:end="3136:44"><expr pos:start="3136:13" pos:end="3136:43"><name pos:start="3136:13" pos:end="3136:14">dk</name> <operator pos:start="3136:16" pos:end="3136:16">=</operator> <call pos:start="3136:18" pos:end="3136:43"><name pos:start="3136:18" pos:end="3136:22">g_new</name><argument_list pos:start="3136:23" pos:end="3136:43">(<argument pos:start="3136:24" pos:end="3136:39"><expr pos:start="3136:24" pos:end="3136:39"><name pos:start="3136:24" pos:end="3136:39">decryption_key_t</name></expr></argument>, <argument pos:start="3136:42" pos:end="3136:42"><expr pos:start="3136:42" pos:end="3136:42"><literal type="number" pos:start="3136:42" pos:end="3136:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3138:13" pos:end="3138:53"><expr pos:start="3138:13" pos:end="3138:52"><name pos:start="3138:13" pos:end="3138:20"><name pos:start="3138:13" pos:end="3138:14">dk</name><operator pos:start="3138:15" pos:end="3138:16">-&gt;</operator><name pos:start="3138:17" pos:end="3138:20">type</name></name> <operator pos:start="3138:22" pos:end="3138:22">=</operator> <name pos:start="3138:24" pos:end="3138:52">DOT11DECRYPT_KEY_TYPE_WPA_PWD</name></expr>;</expr_stmt>
            <expr_stmt pos:start="3139:13" pos:end="3139:40"><expr pos:start="3139:13" pos:end="3139:39"><name pos:start="3139:13" pos:end="3139:19"><name pos:start="3139:13" pos:end="3139:14">dk</name><operator pos:start="3139:15" pos:end="3139:16">-&gt;</operator><name pos:start="3139:17" pos:end="3139:19">key</name></name> <operator pos:start="3139:21" pos:end="3139:21">=</operator> <call pos:start="3139:23" pos:end="3139:39"><name pos:start="3139:23" pos:end="3139:34">g_string_new</name><argument_list pos:start="3139:35" pos:end="3139:39">(<argument pos:start="3139:36" pos:end="3139:38"><expr pos:start="3139:36" pos:end="3139:38"><name pos:start="3139:36" pos:end="3139:38">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3140:13" pos:end="3140:27"><expr pos:start="3140:13" pos:end="3140:26"><name pos:start="3140:13" pos:end="3140:20"><name pos:start="3140:13" pos:end="3140:14">dk</name><operator pos:start="3140:15" pos:end="3140:16">-&gt;</operator><name pos:start="3140:17" pos:end="3140:20">bits</name></name> <operator pos:start="3140:22" pos:end="3140:22">=</operator> <literal type="number" pos:start="3140:24" pos:end="3140:26">256</literal></expr>;</expr_stmt>                     <comment type="block" pos:start="3140:49" pos:end="3140:135">/* This is the length of the array pf bytes that will be generated using key+ssid ...*/</comment>
            <expr_stmt pos:start="3141:13" pos:end="3141:47"><expr pos:start="3141:13" pos:end="3141:46"><name pos:start="3141:13" pos:end="3141:20"><name pos:start="3141:13" pos:end="3141:14">dk</name><operator pos:start="3141:15" pos:end="3141:16">-&gt;</operator><name pos:start="3141:17" pos:end="3141:20">ssid</name></name> <operator pos:start="3141:22" pos:end="3141:22">=</operator> <call pos:start="3141:24" pos:end="3141:46"><name pos:start="3141:24" pos:end="3141:37">byte_array_dup</name><argument_list pos:start="3141:38" pos:end="3141:46">(<argument pos:start="3141:39" pos:end="3141:45"><expr pos:start="3141:39" pos:end="3141:45"><name pos:start="3141:39" pos:end="3141:45">ssid_ba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="3141:49" pos:end="3141:77">/* NULL if ssid_ba is NULL */</comment>

            <expr_stmt pos:start="3143:13" pos:end="3143:44"><expr pos:start="3143:13" pos:end="3143:43"><call pos:start="3143:13" pos:end="3143:43"><name pos:start="3143:13" pos:end="3143:25">g_string_free</name><argument_list pos:start="3143:26" pos:end="3143:43">(<argument pos:start="3143:27" pos:end="3143:36"><expr pos:start="3143:27" pos:end="3143:36"><name pos:start="3143:27" pos:end="3143:36">key_string</name></expr></argument>, <argument pos:start="3143:39" pos:end="3143:42"><expr pos:start="3143:39" pos:end="3143:42"><name pos:start="3143:39" pos:end="3143:42">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3144:13" pos:end="3145:49"><if pos:start="3144:13" pos:end="3145:49">if <condition pos:start="3144:16" pos:end="3144:32">(<expr pos:start="3144:17" pos:end="3144:31"><name pos:start="3144:17" pos:end="3144:23">ssid_ba</name> <operator pos:start="3144:25" pos:end="3144:26">!=</operator> <name pos:start="3144:28" pos:end="3144:31">NULL</name></expr>)</condition><block type="pseudo" pos:start="3145:17" pos:end="3145:49"><block_content pos:start="3145:17" pos:end="3145:49">
                <expr_stmt pos:start="3145:17" pos:end="3145:49"><expr pos:start="3145:17" pos:end="3145:48"><call pos:start="3145:17" pos:end="3145:48"><name pos:start="3145:17" pos:end="3145:33">g_byte_array_free</name><argument_list pos:start="3145:34" pos:end="3145:48">(<argument pos:start="3145:35" pos:end="3145:41"><expr pos:start="3145:35" pos:end="3145:41"><name pos:start="3145:35" pos:end="3145:41">ssid_ba</name></expr></argument>, <argument pos:start="3145:44" pos:end="3145:47"><expr pos:start="3145:44" pos:end="3145:47"><name pos:start="3145:44" pos:end="3145:47">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="3147:13" pos:end="3147:24"><expr pos:start="3147:13" pos:end="3147:23"><call pos:start="3147:13" pos:end="3147:23"><name pos:start="3147:13" pos:end="3147:18">g_free</name><argument_list pos:start="3147:19" pos:end="3147:23">(<argument pos:start="3147:20" pos:end="3147:22"><expr pos:start="3147:20" pos:end="3147:22"><name pos:start="3147:20" pos:end="3147:22">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3148:13" pos:end="3148:25"><expr pos:start="3148:13" pos:end="3148:24"><call pos:start="3148:13" pos:end="3148:24"><name pos:start="3148:13" pos:end="3148:18">g_free</name><argument_list pos:start="3148:19" pos:end="3148:24">(<argument pos:start="3148:20" pos:end="3148:23"><expr pos:start="3148:20" pos:end="3148:23"><name pos:start="3148:20" pos:end="3148:23">ssid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="3150:13" pos:end="3150:43">/* Free the array of strings */</comment>
            <expr_stmt pos:start="3151:13" pos:end="3151:31"><expr pos:start="3151:13" pos:end="3151:30"><call pos:start="3151:13" pos:end="3151:30"><name pos:start="3151:13" pos:end="3151:22">g_strfreev</name><argument_list pos:start="3151:23" pos:end="3151:30">(<argument pos:start="3151:24" pos:end="3151:29"><expr pos:start="3151:24" pos:end="3151:29"><name pos:start="3151:24" pos:end="3151:29">tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="3152:13" pos:end="3152:22">return <expr pos:start="3152:20" pos:end="3152:21"><name pos:start="3152:20" pos:end="3152:21">dk</name></expr>;</return>

        <case pos:start="3154:9" pos:end="3154:43">case <expr pos:start="3154:14" pos:end="3154:42"><name pos:start="3154:14" pos:end="3154:42">DOT11DECRYPT_KEY_TYPE_WPA_PSK</name></expr>:</case>

            <expr_stmt pos:start="3156:13" pos:end="3156:40"><expr pos:start="3156:13" pos:end="3156:39"><name pos:start="3156:13" pos:end="3156:18">key_ba</name> <operator pos:start="3156:20" pos:end="3156:20">=</operator> <call pos:start="3156:22" pos:end="3156:39"><name pos:start="3156:22" pos:end="3156:37">g_byte_array_new</name><argument_list pos:start="3156:38" pos:end="3156:39">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3157:13" pos:end="3157:64"><expr pos:start="3157:13" pos:end="3157:63"><name pos:start="3157:13" pos:end="3157:15">res</name> <operator pos:start="3157:17" pos:end="3157:17">=</operator> <call pos:start="3157:19" pos:end="3157:63"><name pos:start="3157:19" pos:end="3157:34">hex_str_to_bytes</name><argument_list pos:start="3157:35" pos:end="3157:63">(<argument pos:start="3157:36" pos:end="3157:47"><expr pos:start="3157:36" pos:end="3157:47"><name pos:start="3157:36" pos:end="3157:47">input_string</name></expr></argument>, <argument pos:start="3157:50" pos:end="3157:55"><expr pos:start="3157:50" pos:end="3157:55"><name pos:start="3157:50" pos:end="3157:55">key_ba</name></expr></argument>, <argument pos:start="3157:58" pos:end="3157:62"><expr pos:start="3157:58" pos:end="3157:62"><name pos:start="3157:58" pos:end="3157:62">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="3159:13" pos:end="3159:86">/* Two tokens means that the user should have entered a WPA-BIN key ... */</comment>
            <if_stmt pos:start="3160:13" pos:end="3167:13"><if pos:start="3160:13" pos:end="3167:13">if <condition pos:start="3160:16" pos:end="3161:70">(<expr pos:start="3160:17" pos:end="3161:69"><operator pos:start="3160:17" pos:end="3160:17">!</operator><name pos:start="3160:18" pos:end="3160:20">res</name> <operator pos:start="3160:22" pos:end="3160:23">||</operator> <operator pos:start="3160:25" pos:end="3160:25">(</operator><name pos:start="3160:26" pos:end="3160:36"><name pos:start="3160:26" pos:end="3160:31">key_ba</name><operator pos:start="3160:32" pos:end="3160:33">-&gt;</operator><name pos:start="3160:34" pos:end="3160:36">len</name></name> <operator pos:start="3160:38" pos:end="3160:39">!=</operator> <name pos:start="3160:41" pos:end="3160:68">DOT11DECRYPT_WPA_PWD_PSK_LEN</name> <operator pos:start="3160:70" pos:end="3160:71">&amp;&amp;</operator>
                         <name pos:start="3161:26" pos:end="3161:36"><name pos:start="3161:26" pos:end="3161:31">key_ba</name><operator pos:start="3161:32" pos:end="3161:33">-&gt;</operator><name pos:start="3161:34" pos:end="3161:36">len</name></name> <operator pos:start="3161:38" pos:end="3161:39">!=</operator> <name pos:start="3161:41" pos:end="3161:68">DOT11DECRYPT_WPA_PMK_MAX_LEN</name><operator pos:start="3161:69" pos:end="3161:69">)</operator></expr>)</condition>
            <block pos:start="3162:13" pos:end="3167:13">{<block_content pos:start="3163:17" pos:end="3166:28">
                <expr_stmt pos:start="3163:17" pos:end="3163:48"><expr pos:start="3163:17" pos:end="3163:47"><call pos:start="3163:17" pos:end="3163:47"><name pos:start="3163:17" pos:end="3163:33">g_byte_array_free</name><argument_list pos:start="3163:34" pos:end="3163:47">(<argument pos:start="3163:35" pos:end="3163:40"><expr pos:start="3163:35" pos:end="3163:40"><name pos:start="3163:35" pos:end="3163:40">key_ba</name></expr></argument>, <argument pos:start="3163:43" pos:end="3163:46"><expr pos:start="3163:43" pos:end="3163:46"><name pos:start="3163:43" pos:end="3163:46">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="3165:17" pos:end="3165:50">/* No ssid has been created ... */</comment>
                <return pos:start="3166:17" pos:end="3166:28">return <expr pos:start="3166:24" pos:end="3166:27"><name pos:start="3166:24" pos:end="3166:27">NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="3169:13" pos:end="3169:72">/* Key was correct!!! Create the new decryption_key_t ... */</comment>
            <expr_stmt pos:start="3170:13" pos:end="3170:44"><expr pos:start="3170:13" pos:end="3170:43"><name pos:start="3170:13" pos:end="3170:14">dk</name> <operator pos:start="3170:16" pos:end="3170:16">=</operator> <call pos:start="3170:18" pos:end="3170:43"><name pos:start="3170:18" pos:end="3170:22">g_new</name><argument_list pos:start="3170:23" pos:end="3170:43">(<argument pos:start="3170:24" pos:end="3170:39"><expr pos:start="3170:24" pos:end="3170:39"><name pos:start="3170:24" pos:end="3170:39">decryption_key_t</name></expr></argument>, <argument pos:start="3170:42" pos:end="3170:42"><expr pos:start="3170:42" pos:end="3170:42"><literal type="number" pos:start="3170:42" pos:end="3170:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3172:13" pos:end="3172:53"><expr pos:start="3172:13" pos:end="3172:52"><name pos:start="3172:13" pos:end="3172:20"><name pos:start="3172:13" pos:end="3172:14">dk</name><operator pos:start="3172:15" pos:end="3172:16">-&gt;</operator><name pos:start="3172:17" pos:end="3172:20">type</name></name> <operator pos:start="3172:22" pos:end="3172:22">=</operator> <name pos:start="3172:24" pos:end="3172:52">DOT11DECRYPT_KEY_TYPE_WPA_PSK</name></expr>;</expr_stmt>
            <expr_stmt pos:start="3173:13" pos:end="3173:49"><expr pos:start="3173:13" pos:end="3173:48"><name pos:start="3173:13" pos:end="3173:19"><name pos:start="3173:13" pos:end="3173:14">dk</name><operator pos:start="3173:15" pos:end="3173:16">-&gt;</operator><name pos:start="3173:17" pos:end="3173:19">key</name></name> <operator pos:start="3173:21" pos:end="3173:21">=</operator> <call pos:start="3173:23" pos:end="3173:48"><name pos:start="3173:23" pos:end="3173:34">g_string_new</name><argument_list pos:start="3173:35" pos:end="3173:48">(<argument pos:start="3173:36" pos:end="3173:47"><expr pos:start="3173:36" pos:end="3173:47"><name pos:start="3173:36" pos:end="3173:47">input_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3174:13" pos:end="3174:47"><expr pos:start="3174:13" pos:end="3174:46"><name pos:start="3174:13" pos:end="3174:20"><name pos:start="3174:13" pos:end="3174:14">dk</name><operator pos:start="3174:15" pos:end="3174:16">-&gt;</operator><name pos:start="3174:17" pos:end="3174:20">bits</name></name> <operator pos:start="3174:22" pos:end="3174:22">=</operator> <operator pos:start="3174:24" pos:end="3174:24">(</operator><name pos:start="3174:25" pos:end="3174:29">guint</name><operator pos:start="3174:30" pos:end="3174:30">)</operator><name pos:start="3174:31" pos:end="3174:42"><name pos:start="3174:31" pos:end="3174:32">dk</name><operator pos:start="3174:33" pos:end="3174:34">-&gt;</operator><name pos:start="3174:35" pos:end="3174:37">key</name><operator pos:start="3174:38" pos:end="3174:39">-&gt;</operator><name pos:start="3174:40" pos:end="3174:42">len</name></name> <operator pos:start="3174:44" pos:end="3174:44">*</operator> <literal type="number" pos:start="3174:46" pos:end="3174:46">4</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="3175:13" pos:end="3175:28"><expr pos:start="3175:13" pos:end="3175:27"><name pos:start="3175:13" pos:end="3175:20"><name pos:start="3175:13" pos:end="3175:14">dk</name><operator pos:start="3175:15" pos:end="3175:16">-&gt;</operator><name pos:start="3175:17" pos:end="3175:20">ssid</name></name> <operator pos:start="3175:22" pos:end="3175:22">=</operator> <name pos:start="3175:24" pos:end="3175:27">NULL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="3177:13" pos:end="3177:44"><expr pos:start="3177:13" pos:end="3177:43"><call pos:start="3177:13" pos:end="3177:43"><name pos:start="3177:13" pos:end="3177:29">g_byte_array_free</name><argument_list pos:start="3177:30" pos:end="3177:43">(<argument pos:start="3177:31" pos:end="3177:36"><expr pos:start="3177:31" pos:end="3177:36"><name pos:start="3177:31" pos:end="3177:36">key_ba</name></expr></argument>, <argument pos:start="3177:39" pos:end="3177:42"><expr pos:start="3177:39" pos:end="3177:42"><name pos:start="3177:39" pos:end="3177:42">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="3178:13" pos:end="3178:22">return <expr pos:start="3178:20" pos:end="3178:21"><name pos:start="3178:20" pos:end="3178:21">dk</name></expr>;</return>

        <case pos:start="3180:9" pos:end="3180:38">case <expr pos:start="3180:14" pos:end="3180:37"><name pos:start="3180:14" pos:end="3180:37">DOT11DECRYPT_KEY_TYPE_TK</name></expr>:</case>
        <block pos:start="3181:9" pos:end="3215:9">{<block_content pos:start="3183:13" pos:end="3214:22">
            <comment type="block" pos:start="3182:13" pos:end="3182:75">/* From IEEE 802.11-2016 Table 12-4 Cipher suite key lengths */</comment>
            <decl_stmt pos:start="3183:13" pos:end="3188:14"><decl pos:start="3183:13" pos:end="3188:13"><type pos:start="3183:13" pos:end="3183:31"><specifier pos:start="3183:13" pos:end="3183:18">static</specifier> <specifier pos:start="3183:20" pos:end="3183:24">const</specifier> <name pos:start="3183:26" pos:end="3183:31">guint8</name></type> <name pos:start="3183:33" pos:end="3183:53"><name pos:start="3183:33" pos:end="3183:51">allowed_key_lengths</name><index pos:start="3183:52" pos:end="3183:53">[]</index></name> <init pos:start="3183:55" pos:end="3188:13">= <expr pos:start="3183:57" pos:end="3188:13"><block pos:start="3183:57" pos:end="3188:13">{
                <comment type="line" pos:start="3184:17" pos:end="3184:53">// TBD          40 / 8,  /* WEP-40 */</comment>
                <comment type="line" pos:start="3185:17" pos:end="3185:54">// TBD          104 / 8, /* WEP-104 */</comment>
                <expr pos:start="3186:17" pos:end="3186:23"><literal type="number" pos:start="3186:17" pos:end="3186:19">256</literal> <operator pos:start="3186:21" pos:end="3186:21">/</operator> <literal type="number" pos:start="3186:23" pos:end="3186:23">8</literal></expr>, <comment type="block" pos:start="3186:26" pos:end="3186:55">/* TKIP, GCMP-256, CCMP-256 */</comment>
                <expr pos:start="3187:17" pos:end="3187:23"><literal type="number" pos:start="3187:17" pos:end="3187:19">128</literal> <operator pos:start="3187:21" pos:end="3187:21">/</operator> <literal type="number" pos:start="3187:23" pos:end="3187:23">8</literal></expr>, <comment type="block" pos:start="3187:26" pos:end="3187:49">/* CCMP-128, GCMP-128 */</comment>
            }</block></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="3189:13" pos:end="3189:43"><decl pos:start="3189:13" pos:end="3189:42"><type pos:start="3189:13" pos:end="3189:20"><name pos:start="3189:13" pos:end="3189:20">gboolean</name></type> <name pos:start="3189:22" pos:end="3189:34">key_length_ok</name> <init pos:start="3189:36" pos:end="3189:42">= <expr pos:start="3189:38" pos:end="3189:42"><name pos:start="3189:38" pos:end="3189:42">FALSE</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="3191:13" pos:end="3191:40"><expr pos:start="3191:13" pos:end="3191:39"><name pos:start="3191:13" pos:end="3191:18">key_ba</name> <operator pos:start="3191:20" pos:end="3191:20">=</operator> <call pos:start="3191:22" pos:end="3191:39"><name pos:start="3191:22" pos:end="3191:37">g_byte_array_new</name><argument_list pos:start="3191:38" pos:end="3191:39">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3192:13" pos:end="3192:64"><expr pos:start="3192:13" pos:end="3192:63"><name pos:start="3192:13" pos:end="3192:15">res</name> <operator pos:start="3192:17" pos:end="3192:17">=</operator> <call pos:start="3192:19" pos:end="3192:63"><name pos:start="3192:19" pos:end="3192:34">hex_str_to_bytes</name><argument_list pos:start="3192:35" pos:end="3192:63">(<argument pos:start="3192:36" pos:end="3192:47"><expr pos:start="3192:36" pos:end="3192:47"><name pos:start="3192:36" pos:end="3192:47">input_string</name></expr></argument>, <argument pos:start="3192:50" pos:end="3192:55"><expr pos:start="3192:50" pos:end="3192:55"><name pos:start="3192:50" pos:end="3192:55">key_ba</name></expr></argument>, <argument pos:start="3192:58" pos:end="3192:62"><expr pos:start="3192:58" pos:end="3192:62"><name pos:start="3192:58" pos:end="3192:62">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="3194:13" pos:end="3201:13">for <control pos:start="3194:17" pos:end="3194:68">(<init pos:start="3194:18" pos:end="3194:30"><decl pos:start="3194:18" pos:end="3194:29"><type pos:start="3194:18" pos:end="3194:23"><name pos:start="3194:18" pos:end="3194:23">size_t</name></type> <name pos:start="3194:25" pos:end="3194:25">i</name> <init pos:start="3194:27" pos:end="3194:29">= <expr pos:start="3194:29" pos:end="3194:29"><literal type="number" pos:start="3194:29" pos:end="3194:29">0</literal></expr></init></decl>;</init> <condition pos:start="3194:32" pos:end="3194:63"><expr pos:start="3194:32" pos:end="3194:62"><name pos:start="3194:32" pos:end="3194:32">i</name> <operator pos:start="3194:34" pos:end="3194:34">&lt;</operator> <sizeof pos:start="3194:36" pos:end="3194:62">sizeof<argument_list pos:start="3194:42" pos:end="3194:62">(<argument pos:start="3194:43" pos:end="3194:61"><expr pos:start="3194:43" pos:end="3194:61"><name pos:start="3194:43" pos:end="3194:61">allowed_key_lengths</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr pos:start="3194:65" pos:end="3194:67"><expr pos:start="3194:65" pos:end="3194:67"><name pos:start="3194:65" pos:end="3194:65">i</name><operator pos:start="3194:66" pos:end="3194:67">++</operator></expr></incr>)</control>
            <block pos:start="3195:13" pos:end="3201:13">{<block_content pos:start="3196:17" pos:end="3200:17">
                <if_stmt pos:start="3196:17" pos:end="3200:17"><if pos:start="3196:17" pos:end="3200:17">if <condition pos:start="3196:20" pos:end="3196:58">(<expr pos:start="3196:21" pos:end="3196:57"><name pos:start="3196:21" pos:end="3196:31"><name pos:start="3196:21" pos:end="3196:26">key_ba</name><operator pos:start="3196:27" pos:end="3196:28">-&gt;</operator><name pos:start="3196:29" pos:end="3196:31">len</name></name> <operator pos:start="3196:33" pos:end="3196:34">==</operator> <name pos:start="3196:36" pos:end="3196:57"><name pos:start="3196:36" pos:end="3196:54">allowed_key_lengths</name><index pos:start="3196:55" pos:end="3196:57">[<expr pos:start="3196:56" pos:end="3196:56"><name pos:start="3196:56" pos:end="3196:56">i</name></expr>]</index></name></expr>)</condition>
                <block pos:start="3197:17" pos:end="3200:17">{<block_content pos:start="3198:21" pos:end="3199:26">
                    <expr_stmt pos:start="3198:21" pos:end="3198:41"><expr pos:start="3198:21" pos:end="3198:40"><name pos:start="3198:21" pos:end="3198:33">key_length_ok</name> <operator pos:start="3198:35" pos:end="3198:35">=</operator> <name pos:start="3198:37" pos:end="3198:40">TRUE</name></expr>;</expr_stmt>
                    <break pos:start="3199:21" pos:end="3199:26">break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <if_stmt pos:start="3202:13" pos:end="3206:13"><if pos:start="3202:13" pos:end="3206:13">if <condition pos:start="3202:16" pos:end="3202:39">(<expr pos:start="3202:17" pos:end="3202:38"><operator pos:start="3202:17" pos:end="3202:17">!</operator><name pos:start="3202:18" pos:end="3202:20">res</name> <operator pos:start="3202:22" pos:end="3202:23">||</operator> <operator pos:start="3202:25" pos:end="3202:25">!</operator><name pos:start="3202:26" pos:end="3202:38">key_length_ok</name></expr>)</condition>
            <block pos:start="3203:13" pos:end="3206:13">{<block_content pos:start="3204:17" pos:end="3205:28">
                <expr_stmt pos:start="3204:17" pos:end="3204:48"><expr pos:start="3204:17" pos:end="3204:47"><call pos:start="3204:17" pos:end="3204:47"><name pos:start="3204:17" pos:end="3204:33">g_byte_array_free</name><argument_list pos:start="3204:34" pos:end="3204:47">(<argument pos:start="3204:35" pos:end="3204:40"><expr pos:start="3204:35" pos:end="3204:40"><name pos:start="3204:35" pos:end="3204:40">key_ba</name></expr></argument>, <argument pos:start="3204:43" pos:end="3204:46"><expr pos:start="3204:43" pos:end="3204:46"><name pos:start="3204:43" pos:end="3204:46">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3205:17" pos:end="3205:28">return <expr pos:start="3205:24" pos:end="3205:27"><name pos:start="3205:24" pos:end="3205:27">NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="3207:13" pos:end="3207:44"><expr pos:start="3207:13" pos:end="3207:43"><name pos:start="3207:13" pos:end="3207:14">dk</name> <operator pos:start="3207:16" pos:end="3207:16">=</operator> <call pos:start="3207:18" pos:end="3207:43"><name pos:start="3207:18" pos:end="3207:22">g_new</name><argument_list pos:start="3207:23" pos:end="3207:43">(<argument pos:start="3207:24" pos:end="3207:39"><expr pos:start="3207:24" pos:end="3207:39"><name pos:start="3207:24" pos:end="3207:39">decryption_key_t</name></expr></argument>, <argument pos:start="3207:42" pos:end="3207:42"><expr pos:start="3207:42" pos:end="3207:42"><literal type="number" pos:start="3207:42" pos:end="3207:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3208:13" pos:end="3208:48"><expr pos:start="3208:13" pos:end="3208:47"><name pos:start="3208:13" pos:end="3208:20"><name pos:start="3208:13" pos:end="3208:14">dk</name><operator pos:start="3208:15" pos:end="3208:16">-&gt;</operator><name pos:start="3208:17" pos:end="3208:20">type</name></name> <operator pos:start="3208:22" pos:end="3208:22">=</operator> <name pos:start="3208:24" pos:end="3208:47">DOT11DECRYPT_KEY_TYPE_TK</name></expr>;</expr_stmt>
            <expr_stmt pos:start="3209:13" pos:end="3209:49"><expr pos:start="3209:13" pos:end="3209:48"><name pos:start="3209:13" pos:end="3209:19"><name pos:start="3209:13" pos:end="3209:14">dk</name><operator pos:start="3209:15" pos:end="3209:16">-&gt;</operator><name pos:start="3209:17" pos:end="3209:19">key</name></name> <operator pos:start="3209:21" pos:end="3209:21">=</operator> <call pos:start="3209:23" pos:end="3209:48"><name pos:start="3209:23" pos:end="3209:34">g_string_new</name><argument_list pos:start="3209:35" pos:end="3209:48">(<argument pos:start="3209:36" pos:end="3209:47"><expr pos:start="3209:36" pos:end="3209:47"><name pos:start="3209:36" pos:end="3209:47">input_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3210:13" pos:end="3210:47"><expr pos:start="3210:13" pos:end="3210:46"><name pos:start="3210:13" pos:end="3210:20"><name pos:start="3210:13" pos:end="3210:14">dk</name><operator pos:start="3210:15" pos:end="3210:16">-&gt;</operator><name pos:start="3210:17" pos:end="3210:20">bits</name></name> <operator pos:start="3210:22" pos:end="3210:22">=</operator> <operator pos:start="3210:24" pos:end="3210:24">(</operator><name pos:start="3210:25" pos:end="3210:29">guint</name><operator pos:start="3210:30" pos:end="3210:30">)</operator><name pos:start="3210:31" pos:end="3210:42"><name pos:start="3210:31" pos:end="3210:32">dk</name><operator pos:start="3210:33" pos:end="3210:34">-&gt;</operator><name pos:start="3210:35" pos:end="3210:37">key</name><operator pos:start="3210:38" pos:end="3210:39">-&gt;</operator><name pos:start="3210:40" pos:end="3210:42">len</name></name> <operator pos:start="3210:44" pos:end="3210:44">*</operator> <literal type="number" pos:start="3210:46" pos:end="3210:46">4</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="3211:13" pos:end="3211:28"><expr pos:start="3211:13" pos:end="3211:27"><name pos:start="3211:13" pos:end="3211:20"><name pos:start="3211:13" pos:end="3211:14">dk</name><operator pos:start="3211:15" pos:end="3211:16">-&gt;</operator><name pos:start="3211:17" pos:end="3211:20">ssid</name></name> <operator pos:start="3211:22" pos:end="3211:22">=</operator> <name pos:start="3211:24" pos:end="3211:27">NULL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="3213:13" pos:end="3213:44"><expr pos:start="3213:13" pos:end="3213:43"><call pos:start="3213:13" pos:end="3213:43"><name pos:start="3213:13" pos:end="3213:29">g_byte_array_free</name><argument_list pos:start="3213:30" pos:end="3213:43">(<argument pos:start="3213:31" pos:end="3213:36"><expr pos:start="3213:31" pos:end="3213:36"><name pos:start="3213:31" pos:end="3213:36">key_ba</name></expr></argument>, <argument pos:start="3213:39" pos:end="3213:42"><expr pos:start="3213:39" pos:end="3213:42"><name pos:start="3213:39" pos:end="3213:42">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="3214:13" pos:end="3214:22">return <expr pos:start="3214:20" pos:end="3214:21"><name pos:start="3214:20" pos:end="3214:21">dk</name></expr>;</return>
        </block_content>}</block>
        <case pos:start="3216:9" pos:end="3216:39">case <expr pos:start="3216:14" pos:end="3216:38"><name pos:start="3216:14" pos:end="3216:38">DOT11DECRYPT_KEY_TYPE_MSK</name></expr>:</case>
        <block pos:start="3217:9" pos:end="3234:9">{<block_content pos:start="3218:13" pos:end="3233:22">
            <expr_stmt pos:start="3218:13" pos:end="3218:40"><expr pos:start="3218:13" pos:end="3218:39"><name pos:start="3218:13" pos:end="3218:18">key_ba</name> <operator pos:start="3218:20" pos:end="3218:20">=</operator> <call pos:start="3218:22" pos:end="3218:39"><name pos:start="3218:22" pos:end="3218:37">g_byte_array_new</name><argument_list pos:start="3218:38" pos:end="3218:39">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3219:13" pos:end="3219:64"><expr pos:start="3219:13" pos:end="3219:63"><name pos:start="3219:13" pos:end="3219:15">res</name> <operator pos:start="3219:17" pos:end="3219:17">=</operator> <call pos:start="3219:19" pos:end="3219:63"><name pos:start="3219:19" pos:end="3219:34">hex_str_to_bytes</name><argument_list pos:start="3219:35" pos:end="3219:63">(<argument pos:start="3219:36" pos:end="3219:47"><expr pos:start="3219:36" pos:end="3219:47"><name pos:start="3219:36" pos:end="3219:47">input_string</name></expr></argument>, <argument pos:start="3219:50" pos:end="3219:55"><expr pos:start="3219:50" pos:end="3219:55"><name pos:start="3219:50" pos:end="3219:55">key_ba</name></expr></argument>, <argument pos:start="3219:58" pos:end="3219:62"><expr pos:start="3219:58" pos:end="3219:62"><name pos:start="3219:58" pos:end="3219:62">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="3221:13" pos:end="3226:13"><if pos:start="3221:13" pos:end="3226:13">if <condition pos:start="3221:16" pos:end="3222:55">(<expr pos:start="3221:17" pos:end="3222:54"><operator pos:start="3221:17" pos:end="3221:17">!</operator><name pos:start="3221:18" pos:end="3221:20">res</name> <operator pos:start="3221:22" pos:end="3221:23">||</operator> <name pos:start="3221:25" pos:end="3221:35"><name pos:start="3221:25" pos:end="3221:30">key_ba</name><operator pos:start="3221:31" pos:end="3221:32">-&gt;</operator><name pos:start="3221:33" pos:end="3221:35">len</name></name> <operator pos:start="3221:37" pos:end="3221:37">&lt;</operator> <name pos:start="3221:39" pos:end="3221:62">DOT11DECRYPT_MSK_MIN_LEN</name> <operator pos:start="3221:64" pos:end="3221:65">||</operator>
                <name pos:start="3222:17" pos:end="3222:27"><name pos:start="3222:17" pos:end="3222:22">key_ba</name><operator pos:start="3222:23" pos:end="3222:24">-&gt;</operator><name pos:start="3222:25" pos:end="3222:27">len</name></name> <operator pos:start="3222:29" pos:end="3222:29">&gt;</operator> <name pos:start="3222:31" pos:end="3222:54">DOT11DECRYPT_MSK_MAX_LEN</name></expr>)</condition>
            <block pos:start="3223:13" pos:end="3226:13">{<block_content pos:start="3224:17" pos:end="3225:28">
                <expr_stmt pos:start="3224:17" pos:end="3224:48"><expr pos:start="3224:17" pos:end="3224:47"><call pos:start="3224:17" pos:end="3224:47"><name pos:start="3224:17" pos:end="3224:33">g_byte_array_free</name><argument_list pos:start="3224:34" pos:end="3224:47">(<argument pos:start="3224:35" pos:end="3224:40"><expr pos:start="3224:35" pos:end="3224:40"><name pos:start="3224:35" pos:end="3224:40">key_ba</name></expr></argument>, <argument pos:start="3224:43" pos:end="3224:46"><expr pos:start="3224:43" pos:end="3224:46"><name pos:start="3224:43" pos:end="3224:46">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3225:17" pos:end="3225:28">return <expr pos:start="3225:24" pos:end="3225:27"><name pos:start="3225:24" pos:end="3225:27">NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="3227:13" pos:end="3227:44"><expr pos:start="3227:13" pos:end="3227:43"><name pos:start="3227:13" pos:end="3227:14">dk</name> <operator pos:start="3227:16" pos:end="3227:16">=</operator> <call pos:start="3227:18" pos:end="3227:43"><name pos:start="3227:18" pos:end="3227:22">g_new</name><argument_list pos:start="3227:23" pos:end="3227:43">(<argument pos:start="3227:24" pos:end="3227:39"><expr pos:start="3227:24" pos:end="3227:39"><name pos:start="3227:24" pos:end="3227:39">decryption_key_t</name></expr></argument>, <argument pos:start="3227:42" pos:end="3227:42"><expr pos:start="3227:42" pos:end="3227:42"><literal type="number" pos:start="3227:42" pos:end="3227:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3228:13" pos:end="3228:49"><expr pos:start="3228:13" pos:end="3228:48"><name pos:start="3228:13" pos:end="3228:20"><name pos:start="3228:13" pos:end="3228:14">dk</name><operator pos:start="3228:15" pos:end="3228:16">-&gt;</operator><name pos:start="3228:17" pos:end="3228:20">type</name></name> <operator pos:start="3228:22" pos:end="3228:22">=</operator> <name pos:start="3228:24" pos:end="3228:48">DOT11DECRYPT_KEY_TYPE_MSK</name></expr>;</expr_stmt>
            <expr_stmt pos:start="3229:13" pos:end="3229:49"><expr pos:start="3229:13" pos:end="3229:48"><name pos:start="3229:13" pos:end="3229:19"><name pos:start="3229:13" pos:end="3229:14">dk</name><operator pos:start="3229:15" pos:end="3229:16">-&gt;</operator><name pos:start="3229:17" pos:end="3229:19">key</name></name> <operator pos:start="3229:21" pos:end="3229:21">=</operator> <call pos:start="3229:23" pos:end="3229:48"><name pos:start="3229:23" pos:end="3229:34">g_string_new</name><argument_list pos:start="3229:35" pos:end="3229:48">(<argument pos:start="3229:36" pos:end="3229:47"><expr pos:start="3229:36" pos:end="3229:47"><name pos:start="3229:36" pos:end="3229:47">input_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3230:13" pos:end="3230:47"><expr pos:start="3230:13" pos:end="3230:46"><name pos:start="3230:13" pos:end="3230:20"><name pos:start="3230:13" pos:end="3230:14">dk</name><operator pos:start="3230:15" pos:end="3230:16">-&gt;</operator><name pos:start="3230:17" pos:end="3230:20">bits</name></name> <operator pos:start="3230:22" pos:end="3230:22">=</operator> <operator pos:start="3230:24" pos:end="3230:24">(</operator><name pos:start="3230:25" pos:end="3230:29">guint</name><operator pos:start="3230:30" pos:end="3230:30">)</operator><name pos:start="3230:31" pos:end="3230:42"><name pos:start="3230:31" pos:end="3230:32">dk</name><operator pos:start="3230:33" pos:end="3230:34">-&gt;</operator><name pos:start="3230:35" pos:end="3230:37">key</name><operator pos:start="3230:38" pos:end="3230:39">-&gt;</operator><name pos:start="3230:40" pos:end="3230:42">len</name></name> <operator pos:start="3230:44" pos:end="3230:44">*</operator> <literal type="number" pos:start="3230:46" pos:end="3230:46">4</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="3231:13" pos:end="3231:28"><expr pos:start="3231:13" pos:end="3231:27"><name pos:start="3231:13" pos:end="3231:20"><name pos:start="3231:13" pos:end="3231:14">dk</name><operator pos:start="3231:15" pos:end="3231:16">-&gt;</operator><name pos:start="3231:17" pos:end="3231:20">ssid</name></name> <operator pos:start="3231:22" pos:end="3231:22">=</operator> <name pos:start="3231:24" pos:end="3231:27">NULL</name></expr>;</expr_stmt>
            <expr_stmt pos:start="3232:13" pos:end="3232:44"><expr pos:start="3232:13" pos:end="3232:43"><call pos:start="3232:13" pos:end="3232:43"><name pos:start="3232:13" pos:end="3232:29">g_byte_array_free</name><argument_list pos:start="3232:30" pos:end="3232:43">(<argument pos:start="3232:31" pos:end="3232:36"><expr pos:start="3232:31" pos:end="3232:36"><name pos:start="3232:31" pos:end="3232:36">key_ba</name></expr></argument>, <argument pos:start="3232:39" pos:end="3232:42"><expr pos:start="3232:39" pos:end="3232:42"><name pos:start="3232:39" pos:end="3232:42">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="3233:13" pos:end="3233:22">return <expr pos:start="3233:20" pos:end="3233:21"><name pos:start="3233:20" pos:end="3233:21">dk</name></expr>;</return>
        </block_content>}</block>
        </block_content>}</block></switch>

        <comment type="block" pos:start="3237:9" pos:end="3237:32">/* Type not supported */</comment>
        <return pos:start="3238:9" pos:end="3238:20">return <expr pos:start="3238:16" pos:end="3238:19"><name pos:start="3238:16" pos:end="3238:19">NULL</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="3241:5" pos:end="3249:5"><type pos:start="3241:5" pos:end="3241:8"><name pos:start="3241:5" pos:end="3241:8">void</name></type>
    <name pos:start="3242:5" pos:end="3242:19">free_key_string</name><parameter_list pos:start="3242:20" pos:end="3242:41">(<parameter pos:start="3242:21" pos:end="3242:40"><decl pos:start="3242:21" pos:end="3242:40"><type pos:start="3242:21" pos:end="3242:38"><name pos:start="3242:21" pos:end="3242:36">decryption_key_t</name> <modifier pos:start="3242:38" pos:end="3242:38">*</modifier></type><name pos:start="3242:39" pos:end="3242:40">dk</name></decl></parameter>)</parameter_list>
    <block pos:start="3243:5" pos:end="3249:5">{<block_content pos:start="3244:9" pos:end="3248:19">
        <if_stmt pos:start="3244:9" pos:end="3245:41"><if pos:start="3244:9" pos:end="3245:41">if <condition pos:start="3244:12" pos:end="3244:20">(<expr pos:start="3244:13" pos:end="3244:19"><name pos:start="3244:13" pos:end="3244:19"><name pos:start="3244:13" pos:end="3244:14">dk</name><operator pos:start="3244:15" pos:end="3244:16">-&gt;</operator><name pos:start="3244:17" pos:end="3244:19">key</name></name></expr>)</condition><block type="pseudo" pos:start="3245:13" pos:end="3245:41"><block_content pos:start="3245:13" pos:end="3245:41">
            <expr_stmt pos:start="3245:13" pos:end="3245:41"><expr pos:start="3245:13" pos:end="3245:40"><call pos:start="3245:13" pos:end="3245:40"><name pos:start="3245:13" pos:end="3245:25">g_string_free</name><argument_list pos:start="3245:26" pos:end="3245:40">(<argument pos:start="3245:27" pos:end="3245:33"><expr pos:start="3245:27" pos:end="3245:33"><name pos:start="3245:27" pos:end="3245:33"><name pos:start="3245:27" pos:end="3245:28">dk</name><operator pos:start="3245:29" pos:end="3245:30">-&gt;</operator><name pos:start="3245:31" pos:end="3245:33">key</name></name></expr></argument>, <argument pos:start="3245:36" pos:end="3245:39"><expr pos:start="3245:36" pos:end="3245:39"><name pos:start="3245:36" pos:end="3245:39">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="3246:9" pos:end="3247:46"><if pos:start="3246:9" pos:end="3247:46">if <condition pos:start="3246:12" pos:end="3246:21">(<expr pos:start="3246:13" pos:end="3246:20"><name pos:start="3246:13" pos:end="3246:20"><name pos:start="3246:13" pos:end="3246:14">dk</name><operator pos:start="3246:15" pos:end="3246:16">-&gt;</operator><name pos:start="3246:17" pos:end="3246:20">ssid</name></name></expr>)</condition><block type="pseudo" pos:start="3247:13" pos:end="3247:46"><block_content pos:start="3247:13" pos:end="3247:46">
            <expr_stmt pos:start="3247:13" pos:end="3247:46"><expr pos:start="3247:13" pos:end="3247:45"><call pos:start="3247:13" pos:end="3247:45"><name pos:start="3247:13" pos:end="3247:29">g_byte_array_free</name><argument_list pos:start="3247:30" pos:end="3247:45">(<argument pos:start="3247:31" pos:end="3247:38"><expr pos:start="3247:31" pos:end="3247:38"><name pos:start="3247:31" pos:end="3247:38"><name pos:start="3247:31" pos:end="3247:32">dk</name><operator pos:start="3247:33" pos:end="3247:34">-&gt;</operator><name pos:start="3247:35" pos:end="3247:38">ssid</name></name></expr></argument>, <argument pos:start="3247:41" pos:end="3247:44"><expr pos:start="3247:41" pos:end="3247:44"><name pos:start="3247:41" pos:end="3247:44">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="3248:9" pos:end="3248:19"><expr pos:start="3248:9" pos:end="3248:18"><call pos:start="3248:9" pos:end="3248:18"><name pos:start="3248:9" pos:end="3248:14">g_free</name><argument_list pos:start="3248:15" pos:end="3248:18">(<argument pos:start="3248:16" pos:end="3248:17"><expr pos:start="3248:16" pos:end="3248:17"><name pos:start="3248:16" pos:end="3248:17">dk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function pos:start="3251:5" pos:end="3375:0"><type pos:start="3251:5" pos:end="3251:14"><specifier pos:start="3251:5" pos:end="3251:10">static</specifier> <name pos:start="3251:12" pos:end="3251:14">INT</name></type>
    <name pos:start="3252:5" pos:end="3252:29">Dot11DecryptTDLSDeriveKey</name><parameter_list pos:start="3252:30" pos:end="3259:22">(
        <parameter pos:start="3253:9" pos:end="3253:40"><decl pos:start="3253:9" pos:end="3253:40"><type pos:start="3253:9" pos:end="3253:40"><name pos:start="3253:9" pos:end="3253:37">PDOT11DECRYPT_SEC_ASSOCIATION</name></type> <name pos:start="3253:39" pos:end="3253:40">sa</name></decl></parameter>,
        <parameter pos:start="3254:9" pos:end="3254:26"><decl pos:start="3254:9" pos:end="3254:26"><type pos:start="3254:9" pos:end="3254:26"><specifier pos:start="3254:9" pos:end="3254:13">const</specifier> <name pos:start="3254:15" pos:end="3254:20">guint8</name> <modifier pos:start="3254:22" pos:end="3254:22">*</modifier></type><name pos:start="3254:23" pos:end="3254:26">data</name></decl></parameter>,
        <parameter pos:start="3255:9" pos:end="3255:25"><decl pos:start="3255:9" pos:end="3255:25"><type pos:start="3255:9" pos:end="3255:25"><name pos:start="3255:9" pos:end="3255:13">guint</name></type> <name pos:start="3255:15" pos:end="3255:25">offset_rsne</name></decl></parameter>,
        <parameter pos:start="3256:9" pos:end="3256:24"><decl pos:start="3256:9" pos:end="3256:24"><type pos:start="3256:9" pos:end="3256:24"><name pos:start="3256:9" pos:end="3256:13">guint</name></type> <name pos:start="3256:15" pos:end="3256:24">offset_fte</name></decl></parameter>,
        <parameter pos:start="3257:9" pos:end="3257:28"><decl pos:start="3257:9" pos:end="3257:28"><type pos:start="3257:9" pos:end="3257:28"><name pos:start="3257:9" pos:end="3257:13">guint</name></type> <name pos:start="3257:15" pos:end="3257:28">offset_timeout</name></decl></parameter>,
        <parameter pos:start="3258:9" pos:end="3258:25"><decl pos:start="3258:9" pos:end="3258:25"><type pos:start="3258:9" pos:end="3258:25"><name pos:start="3258:9" pos:end="3258:13">guint</name></type> <name pos:start="3258:15" pos:end="3258:25">offset_link</name></decl></parameter>,
        <parameter pos:start="3259:9" pos:end="3259:21"><decl pos:start="3259:9" pos:end="3259:21"><type pos:start="3259:9" pos:end="3259:21"><name pos:start="3259:9" pos:end="3259:14">guint8</name></type> <name pos:start="3259:16" pos:end="3259:21">action</name></decl></parameter>)</parameter_list>
    <block pos:start="3260:5" pos:end="3375:0">{<block_content pos:start="3262:9" pos:end="3371:40">

        <decl_stmt pos:start="3262:9" pos:end="3262:35"><decl pos:start="3262:9" pos:end="3262:34"><type pos:start="3262:9" pos:end="3262:20"><name pos:start="3262:9" pos:end="3262:20">gcry_md_hd_t</name></type> <name pos:start="3262:22" pos:end="3262:34">sha256_handle</name></decl>;</decl_stmt>
        <decl_stmt pos:start="3263:9" pos:end="3263:33"><decl pos:start="3263:9" pos:end="3263:32"><type pos:start="3263:9" pos:end="3263:20"><name pos:start="3263:9" pos:end="3263:20">gcry_md_hd_t</name></type> <name pos:start="3263:22" pos:end="3263:32">hmac_handle</name></decl>;</decl_stmt>
        <decl_stmt pos:start="3264:9" pos:end="3264:70"><decl pos:start="3264:9" pos:end="3264:28"><type pos:start="3264:9" pos:end="3264:22"><specifier pos:start="3264:9" pos:end="3264:13">const</specifier> <name pos:start="3264:15" pos:end="3264:20">guint8</name> <modifier pos:start="3264:22" pos:end="3264:22">*</modifier></type><name pos:start="3264:23" pos:end="3264:28">snonce</name></decl>, <decl pos:start="3264:31" pos:end="3264:37"><type ref="prev" pos:start="3264:9" pos:end="3264:22"><modifier pos:start="3264:31" pos:end="3264:31">*</modifier></type><name pos:start="3264:32" pos:end="3264:37">anonce</name></decl>, <decl pos:start="3264:40" pos:end="3264:49"><type ref="prev" pos:start="3264:9" pos:end="3264:22"><modifier pos:start="3264:40" pos:end="3264:40">*</modifier></type><name pos:start="3264:41" pos:end="3264:49">initiator</name></decl>, <decl pos:start="3264:52" pos:end="3264:61"><type ref="prev" pos:start="3264:9" pos:end="3264:22"><modifier pos:start="3264:52" pos:end="3264:52">*</modifier></type><name pos:start="3264:53" pos:end="3264:61">responder</name></decl>, <decl pos:start="3264:64" pos:end="3264:69"><type ref="prev" pos:start="3264:9" pos:end="3264:22"><modifier pos:start="3264:64" pos:end="3264:64">*</modifier></type><name pos:start="3264:65" pos:end="3264:69">bssid</name></decl>;</decl_stmt>
        <decl_stmt pos:start="3265:9" pos:end="3265:29"><decl pos:start="3265:9" pos:end="3265:28"><type pos:start="3265:9" pos:end="3265:14"><name pos:start="3265:9" pos:end="3265:14">guint8</name></type> <name pos:start="3265:16" pos:end="3265:28"><name pos:start="3265:16" pos:end="3265:24">key_input</name><index pos:start="3265:25" pos:end="3265:28">[<expr pos:start="3265:26" pos:end="3265:27"><literal type="number" pos:start="3265:26" pos:end="3265:27">32</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="3266:9" pos:end="3266:45"><decl pos:start="3266:9" pos:end="3266:22"><type pos:start="3266:9" pos:end="3266:14"><name pos:start="3266:9" pos:end="3266:14">guint8</name></type> <name pos:start="3266:16" pos:end="3266:22"><name pos:start="3266:16" pos:end="3266:18">mic</name><index pos:start="3266:19" pos:end="3266:22">[<expr pos:start="3266:20" pos:end="3266:21"><literal type="number" pos:start="3266:20" pos:end="3266:21">16</literal></expr>]</index></name></decl>, <decl pos:start="3266:25" pos:end="3266:44"><type ref="prev" pos:start="3266:9" pos:end="3266:14"/><name pos:start="3266:25" pos:end="3266:31">seq_num</name> <init pos:start="3266:33" pos:end="3266:44">= <expr pos:start="3266:35" pos:end="3266:44"><name pos:start="3266:35" pos:end="3266:40">action</name> <operator pos:start="3266:42" pos:end="3266:42">+</operator> <literal type="number" pos:start="3266:44" pos:end="3266:44">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="3267:9" pos:end="3267:31"><decl pos:start="3267:9" pos:end="3267:30"><type pos:start="3267:9" pos:end="3267:14"><name pos:start="3267:9" pos:end="3267:14">guint8</name></type> <name pos:start="3267:16" pos:end="3267:24"><name pos:start="3267:16" pos:end="3267:20">zeros</name><index pos:start="3267:21" pos:end="3267:24">[<expr pos:start="3267:22" pos:end="3267:23"><literal type="number" pos:start="3267:22" pos:end="3267:23">16</literal></expr>]</index></name> <init pos:start="3267:26" pos:end="3267:30">= <expr pos:start="3267:28" pos:end="3267:30"><block pos:start="3267:28" pos:end="3267:30">{<expr pos:start="3267:29" pos:end="3267:29"><literal type="number" pos:start="3267:29" pos:end="3267:29">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="3268:9" pos:end="3268:34"><decl pos:start="3268:9" pos:end="3268:33"><type pos:start="3268:9" pos:end="3268:21"><name pos:start="3268:9" pos:end="3268:21">gcry_mac_hd_t</name></type> <name pos:start="3268:23" pos:end="3268:33">cmac_handle</name></decl>;</decl_stmt>
        <decl_stmt pos:start="3269:9" pos:end="3269:29"><decl pos:start="3269:9" pos:end="3269:28"><type pos:start="3269:9" pos:end="3269:14"><name pos:start="3269:9" pos:end="3269:14">size_t</name></type> <name pos:start="3269:16" pos:end="3269:23">cmac_len</name> <init pos:start="3269:25" pos:end="3269:28">= <expr pos:start="3269:27" pos:end="3269:28"><literal type="number" pos:start="3269:27" pos:end="3269:28">16</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="3270:9" pos:end="3270:30"><decl pos:start="3270:9" pos:end="3270:29"><type pos:start="3270:9" pos:end="3270:14"><name pos:start="3270:9" pos:end="3270:14">size_t</name></type> <name pos:start="3270:16" pos:end="3270:29">cmac_write_len</name></decl>;</decl_stmt>

        <comment type="block" pos:start="3272:9" pos:end="3272:27">/* Get key input */</comment>
        <expr_stmt pos:start="3273:9" pos:end="3273:40"><expr pos:start="3273:9" pos:end="3273:39"><name pos:start="3273:9" pos:end="3273:14">anonce</name> <operator pos:start="3273:16" pos:end="3273:16">=</operator> <operator pos:start="3273:18" pos:end="3273:18">&amp;</operator><name pos:start="3273:19" pos:end="3273:39"><name pos:start="3273:19" pos:end="3273:22">data</name><index pos:start="3273:23" pos:end="3273:39">[<expr pos:start="3273:24" pos:end="3273:38"><name pos:start="3273:24" pos:end="3273:33">offset_fte</name> <operator pos:start="3273:35" pos:end="3273:35">+</operator> <literal type="number" pos:start="3273:37" pos:end="3273:38">20</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="3274:9" pos:end="3274:40"><expr pos:start="3274:9" pos:end="3274:39"><name pos:start="3274:9" pos:end="3274:14">snonce</name> <operator pos:start="3274:16" pos:end="3274:16">=</operator> <operator pos:start="3274:18" pos:end="3274:18">&amp;</operator><name pos:start="3274:19" pos:end="3274:39"><name pos:start="3274:19" pos:end="3274:22">data</name><index pos:start="3274:23" pos:end="3274:39">[<expr pos:start="3274:24" pos:end="3274:38"><name pos:start="3274:24" pos:end="3274:33">offset_fte</name> <operator pos:start="3274:35" pos:end="3274:35">+</operator> <literal type="number" pos:start="3274:37" pos:end="3274:38">52</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="3276:9" pos:end="3276:56"><expr pos:start="3276:9" pos:end="3276:55"><call pos:start="3276:9" pos:end="3276:55"><name pos:start="3276:9" pos:end="3276:20">gcry_md_open</name><argument_list pos:start="3276:21" pos:end="3276:55">(<argument pos:start="3276:22" pos:end="3276:35"><expr pos:start="3276:22" pos:end="3276:35"><operator pos:start="3276:22" pos:end="3276:22">&amp;</operator><name pos:start="3276:23" pos:end="3276:35">sha256_handle</name></expr></argument>, <argument pos:start="3276:38" pos:end="3276:51"><expr pos:start="3276:38" pos:end="3276:51"><name pos:start="3276:38" pos:end="3276:51">GCRY_MD_SHA256</name></expr></argument>, <argument pos:start="3276:54" pos:end="3276:54"><expr pos:start="3276:54" pos:end="3276:54"><literal type="number" pos:start="3276:54" pos:end="3276:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="3277:9" pos:end="3286:9"><if pos:start="3277:9" pos:end="3281:9">if <condition pos:start="3277:12" pos:end="3277:67">(<expr pos:start="3277:13" pos:end="3277:66"><call pos:start="3277:13" pos:end="3277:62"><name pos:start="3277:13" pos:end="3277:18">memcmp</name><argument_list pos:start="3277:19" pos:end="3277:62">(<argument pos:start="3277:20" pos:end="3277:25"><expr pos:start="3277:20" pos:end="3277:25"><name pos:start="3277:20" pos:end="3277:25">anonce</name></expr></argument>, <argument pos:start="3277:28" pos:end="3277:33"><expr pos:start="3277:28" pos:end="3277:33"><name pos:start="3277:28" pos:end="3277:33">snonce</name></expr></argument>, <argument pos:start="3277:36" pos:end="3277:61"><expr pos:start="3277:36" pos:end="3277:61"><name pos:start="3277:36" pos:end="3277:61">DOT11DECRYPT_WPA_NONCE_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="3277:64" pos:end="3277:64">&lt;</operator> <literal type="number" pos:start="3277:66" pos:end="3277:66">0</literal></expr>)</condition>
        <block pos:start="3278:9" pos:end="3281:9">{<block_content pos:start="3279:13" pos:end="3280:77">
            <expr_stmt pos:start="3279:13" pos:end="3279:77"><expr pos:start="3279:13" pos:end="3279:76"><call pos:start="3279:13" pos:end="3279:76"><name pos:start="3279:13" pos:end="3279:25">gcry_md_write</name><argument_list pos:start="3279:26" pos:end="3279:76">(<argument pos:start="3279:27" pos:end="3279:39"><expr pos:start="3279:27" pos:end="3279:39"><name pos:start="3279:27" pos:end="3279:39">sha256_handle</name></expr></argument>, <argument pos:start="3279:42" pos:end="3279:47"><expr pos:start="3279:42" pos:end="3279:47"><name pos:start="3279:42" pos:end="3279:47">anonce</name></expr></argument>, <argument pos:start="3279:50" pos:end="3279:75"><expr pos:start="3279:50" pos:end="3279:75"><name pos:start="3279:50" pos:end="3279:75">DOT11DECRYPT_WPA_NONCE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3280:13" pos:end="3280:77"><expr pos:start="3280:13" pos:end="3280:76"><call pos:start="3280:13" pos:end="3280:76"><name pos:start="3280:13" pos:end="3280:25">gcry_md_write</name><argument_list pos:start="3280:26" pos:end="3280:76">(<argument pos:start="3280:27" pos:end="3280:39"><expr pos:start="3280:27" pos:end="3280:39"><name pos:start="3280:27" pos:end="3280:39">sha256_handle</name></expr></argument>, <argument pos:start="3280:42" pos:end="3280:47"><expr pos:start="3280:42" pos:end="3280:47"><name pos:start="3280:42" pos:end="3280:47">snonce</name></expr></argument>, <argument pos:start="3280:50" pos:end="3280:75"><expr pos:start="3280:50" pos:end="3280:75"><name pos:start="3280:50" pos:end="3280:75">DOT11DECRYPT_WPA_NONCE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else pos:start="3282:9" pos:end="3286:9">else
        <block pos:start="3283:9" pos:end="3286:9">{<block_content pos:start="3284:13" pos:end="3285:77">
            <expr_stmt pos:start="3284:13" pos:end="3284:77"><expr pos:start="3284:13" pos:end="3284:76"><call pos:start="3284:13" pos:end="3284:76"><name pos:start="3284:13" pos:end="3284:25">gcry_md_write</name><argument_list pos:start="3284:26" pos:end="3284:76">(<argument pos:start="3284:27" pos:end="3284:39"><expr pos:start="3284:27" pos:end="3284:39"><name pos:start="3284:27" pos:end="3284:39">sha256_handle</name></expr></argument>, <argument pos:start="3284:42" pos:end="3284:47"><expr pos:start="3284:42" pos:end="3284:47"><name pos:start="3284:42" pos:end="3284:47">snonce</name></expr></argument>, <argument pos:start="3284:50" pos:end="3284:75"><expr pos:start="3284:50" pos:end="3284:75"><name pos:start="3284:50" pos:end="3284:75">DOT11DECRYPT_WPA_NONCE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3285:13" pos:end="3285:77"><expr pos:start="3285:13" pos:end="3285:76"><call pos:start="3285:13" pos:end="3285:76"><name pos:start="3285:13" pos:end="3285:25">gcry_md_write</name><argument_list pos:start="3285:26" pos:end="3285:76">(<argument pos:start="3285:27" pos:end="3285:39"><expr pos:start="3285:27" pos:end="3285:39"><name pos:start="3285:27" pos:end="3285:39">sha256_handle</name></expr></argument>, <argument pos:start="3285:42" pos:end="3285:47"><expr pos:start="3285:42" pos:end="3285:47"><name pos:start="3285:42" pos:end="3285:47">anonce</name></expr></argument>, <argument pos:start="3285:50" pos:end="3285:75"><expr pos:start="3285:50" pos:end="3285:75"><name pos:start="3285:50" pos:end="3285:75">DOT11DECRYPT_WPA_NONCE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt pos:start="3287:9" pos:end="3287:62"><expr pos:start="3287:9" pos:end="3287:61"><call pos:start="3287:9" pos:end="3287:61"><name pos:start="3287:9" pos:end="3287:14">memcpy</name><argument_list pos:start="3287:15" pos:end="3287:61">(<argument pos:start="3287:16" pos:end="3287:24"><expr pos:start="3287:16" pos:end="3287:24"><name pos:start="3287:16" pos:end="3287:24">key_input</name></expr></argument>, <argument pos:start="3287:27" pos:end="3287:56"><expr pos:start="3287:27" pos:end="3287:56"><call pos:start="3287:27" pos:end="3287:56"><name pos:start="3287:27" pos:end="3287:38">gcry_md_read</name><argument_list pos:start="3287:39" pos:end="3287:56">(<argument pos:start="3287:40" pos:end="3287:52"><expr pos:start="3287:40" pos:end="3287:52"><name pos:start="3287:40" pos:end="3287:52">sha256_handle</name></expr></argument>, <argument pos:start="3287:55" pos:end="3287:55"><expr pos:start="3287:55" pos:end="3287:55"><literal type="number" pos:start="3287:55" pos:end="3287:55">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="3287:59" pos:end="3287:60"><expr pos:start="3287:59" pos:end="3287:60"><literal type="number" pos:start="3287:59" pos:end="3287:60">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3288:9" pos:end="3288:37"><expr pos:start="3288:9" pos:end="3288:36"><call pos:start="3288:9" pos:end="3288:36"><name pos:start="3288:9" pos:end="3288:21">gcry_md_close</name><argument_list pos:start="3288:22" pos:end="3288:36">(<argument pos:start="3288:23" pos:end="3288:35"><expr pos:start="3288:23" pos:end="3288:35"><name pos:start="3288:23" pos:end="3288:35">sha256_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="3290:9" pos:end="3290:24">/* Derive key */</comment>
        <expr_stmt pos:start="3291:9" pos:end="3291:39"><expr pos:start="3291:9" pos:end="3291:38"><name pos:start="3291:9" pos:end="3291:13">bssid</name> <operator pos:start="3291:15" pos:end="3291:15">=</operator> <operator pos:start="3291:17" pos:end="3291:17">&amp;</operator><name pos:start="3291:18" pos:end="3291:38"><name pos:start="3291:18" pos:end="3291:21">data</name><index pos:start="3291:22" pos:end="3291:38">[<expr pos:start="3291:23" pos:end="3291:37"><name pos:start="3291:23" pos:end="3291:33">offset_link</name> <operator pos:start="3291:35" pos:end="3291:35">+</operator> <literal type="number" pos:start="3291:37" pos:end="3291:37">2</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="3292:9" pos:end="3292:43"><expr pos:start="3292:9" pos:end="3292:42"><name pos:start="3292:9" pos:end="3292:17">initiator</name> <operator pos:start="3292:19" pos:end="3292:19">=</operator> <operator pos:start="3292:21" pos:end="3292:21">&amp;</operator><name pos:start="3292:22" pos:end="3292:42"><name pos:start="3292:22" pos:end="3292:25">data</name><index pos:start="3292:26" pos:end="3292:42">[<expr pos:start="3292:27" pos:end="3292:41"><name pos:start="3292:27" pos:end="3292:37">offset_link</name> <operator pos:start="3292:39" pos:end="3292:39">+</operator> <literal type="number" pos:start="3292:41" pos:end="3292:41">8</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="3293:9" pos:end="3293:44"><expr pos:start="3293:9" pos:end="3293:43"><name pos:start="3293:9" pos:end="3293:17">responder</name> <operator pos:start="3293:19" pos:end="3293:19">=</operator> <operator pos:start="3293:21" pos:end="3293:21">&amp;</operator><name pos:start="3293:22" pos:end="3293:43"><name pos:start="3293:22" pos:end="3293:25">data</name><index pos:start="3293:26" pos:end="3293:43">[<expr pos:start="3293:27" pos:end="3293:42"><name pos:start="3293:27" pos:end="3293:37">offset_link</name> <operator pos:start="3293:39" pos:end="3293:39">+</operator> <literal type="number" pos:start="3293:41" pos:end="3293:42">14</literal></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt pos:start="3294:9" pos:end="3297:9"><if pos:start="3294:9" pos:end="3297:9">if <condition pos:start="3294:12" pos:end="3294:74">(<expr pos:start="3294:13" pos:end="3294:73"><call pos:start="3294:13" pos:end="3294:73"><name pos:start="3294:13" pos:end="3294:24">gcry_md_open</name><argument_list pos:start="3294:25" pos:end="3294:73">(<argument pos:start="3294:26" pos:end="3294:37"><expr pos:start="3294:26" pos:end="3294:37"><operator pos:start="3294:26" pos:end="3294:26">&amp;</operator><name pos:start="3294:27" pos:end="3294:37">hmac_handle</name></expr></argument>, <argument pos:start="3294:40" pos:end="3294:53"><expr pos:start="3294:40" pos:end="3294:53"><name pos:start="3294:40" pos:end="3294:53">GCRY_MD_SHA256</name></expr></argument>, <argument pos:start="3294:56" pos:end="3294:72"><expr pos:start="3294:56" pos:end="3294:72"><name pos:start="3294:56" pos:end="3294:72">GCRY_MD_FLAG_HMAC</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block pos:start="3295:9" pos:end="3297:9">{<block_content pos:start="3296:13" pos:end="3296:46">
            <return pos:start="3296:13" pos:end="3296:46">return <expr pos:start="3296:20" pos:end="3296:45"><name pos:start="3296:20" pos:end="3296:45">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="3298:9" pos:end="3302:9"><if pos:start="3298:9" pos:end="3302:9">if <condition pos:start="3298:12" pos:end="3298:55">(<expr pos:start="3298:13" pos:end="3298:54"><call pos:start="3298:13" pos:end="3298:54"><name pos:start="3298:13" pos:end="3298:26">gcry_md_setkey</name><argument_list pos:start="3298:27" pos:end="3298:54">(<argument pos:start="3298:28" pos:end="3298:38"><expr pos:start="3298:28" pos:end="3298:38"><name pos:start="3298:28" pos:end="3298:38">hmac_handle</name></expr></argument>, <argument pos:start="3298:41" pos:end="3298:49"><expr pos:start="3298:41" pos:end="3298:49"><name pos:start="3298:41" pos:end="3298:49">key_input</name></expr></argument>, <argument pos:start="3298:52" pos:end="3298:53"><expr pos:start="3298:52" pos:end="3298:53"><literal type="number" pos:start="3298:52" pos:end="3298:53">32</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block pos:start="3299:9" pos:end="3302:9">{<block_content pos:start="3300:13" pos:end="3301:46">
            <expr_stmt pos:start="3300:13" pos:end="3300:39"><expr pos:start="3300:13" pos:end="3300:38"><call pos:start="3300:13" pos:end="3300:38"><name pos:start="3300:13" pos:end="3300:25">gcry_md_close</name><argument_list pos:start="3300:26" pos:end="3300:38">(<argument pos:start="3300:27" pos:end="3300:37"><expr pos:start="3300:27" pos:end="3300:37"><name pos:start="3300:27" pos:end="3300:37">hmac_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="3301:13" pos:end="3301:46">return <expr pos:start="3301:20" pos:end="3301:45"><name pos:start="3301:20" pos:end="3301:45">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="3303:9" pos:end="3303:37"><expr pos:start="3303:9" pos:end="3303:36"><call pos:start="3303:9" pos:end="3303:36"><name pos:start="3303:9" pos:end="3303:20">gcry_md_putc</name><argument_list pos:start="3303:21" pos:end="3303:36">(<argument pos:start="3303:22" pos:end="3303:32"><expr pos:start="3303:22" pos:end="3303:32"><name pos:start="3303:22" pos:end="3303:32">hmac_handle</name></expr></argument>, <argument pos:start="3303:35" pos:end="3303:35"><expr pos:start="3303:35" pos:end="3303:35"><literal type="number" pos:start="3303:35" pos:end="3303:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3304:9" pos:end="3304:37"><expr pos:start="3304:9" pos:end="3304:36"><call pos:start="3304:9" pos:end="3304:36"><name pos:start="3304:9" pos:end="3304:20">gcry_md_putc</name><argument_list pos:start="3304:21" pos:end="3304:36">(<argument pos:start="3304:22" pos:end="3304:32"><expr pos:start="3304:22" pos:end="3304:32"><name pos:start="3304:22" pos:end="3304:32">hmac_handle</name></expr></argument>, <argument pos:start="3304:35" pos:end="3304:35"><expr pos:start="3304:35" pos:end="3304:35"><literal type="number" pos:start="3304:35" pos:end="3304:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3305:9" pos:end="3305:50"><expr pos:start="3305:9" pos:end="3305:49"><call pos:start="3305:9" pos:end="3305:49"><name pos:start="3305:9" pos:end="3305:21">gcry_md_write</name><argument_list pos:start="3305:22" pos:end="3305:49">(<argument pos:start="3305:23" pos:end="3305:33"><expr pos:start="3305:23" pos:end="3305:33"><name pos:start="3305:23" pos:end="3305:33">hmac_handle</name></expr></argument>, <argument pos:start="3305:36" pos:end="3305:45"><expr pos:start="3305:36" pos:end="3305:45"><literal type="string" pos:start="3305:36" pos:end="3305:45">"TDLS PMK"</literal></expr></argument>, <argument pos:start="3305:48" pos:end="3305:48"><expr pos:start="3305:48" pos:end="3305:48"><literal type="number" pos:start="3305:48" pos:end="3305:48">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="3306:9" pos:end="3315:9"><if pos:start="3306:9" pos:end="3310:9">if <condition pos:start="3306:12" pos:end="3306:67">(<expr pos:start="3306:13" pos:end="3306:66"><call pos:start="3306:13" pos:end="3306:62"><name pos:start="3306:13" pos:end="3306:18">memcmp</name><argument_list pos:start="3306:19" pos:end="3306:62">(<argument pos:start="3306:20" pos:end="3306:28"><expr pos:start="3306:20" pos:end="3306:28"><name pos:start="3306:20" pos:end="3306:28">initiator</name></expr></argument>, <argument pos:start="3306:31" pos:end="3306:39"><expr pos:start="3306:31" pos:end="3306:39"><name pos:start="3306:31" pos:end="3306:39">responder</name></expr></argument>, <argument pos:start="3306:42" pos:end="3306:61"><expr pos:start="3306:42" pos:end="3306:61"><name pos:start="3306:42" pos:end="3306:61">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="3306:64" pos:end="3306:64">&lt;</operator> <literal type="number" pos:start="3306:66" pos:end="3306:66">0</literal></expr>)</condition>
        <block pos:start="3307:9" pos:end="3310:9">{<block_content pos:start="3308:13" pos:end="3309:72">
            <expr_stmt pos:start="3308:13" pos:end="3308:72"><expr pos:start="3308:13" pos:end="3308:71"><call pos:start="3308:13" pos:end="3308:71"><name pos:start="3308:13" pos:end="3308:25">gcry_md_write</name><argument_list pos:start="3308:26" pos:end="3308:71">(<argument pos:start="3308:27" pos:end="3308:37"><expr pos:start="3308:27" pos:end="3308:37"><name pos:start="3308:27" pos:end="3308:37">hmac_handle</name></expr></argument>, <argument pos:start="3308:40" pos:end="3308:48"><expr pos:start="3308:40" pos:end="3308:48"><name pos:start="3308:40" pos:end="3308:48">initiator</name></expr></argument>, <argument pos:start="3308:51" pos:end="3308:70"><expr pos:start="3308:51" pos:end="3308:70"><name pos:start="3308:51" pos:end="3308:70">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3309:13" pos:end="3309:72"><expr pos:start="3309:13" pos:end="3309:71"><call pos:start="3309:13" pos:end="3309:71"><name pos:start="3309:13" pos:end="3309:25">gcry_md_write</name><argument_list pos:start="3309:26" pos:end="3309:71">(<argument pos:start="3309:27" pos:end="3309:37"><expr pos:start="3309:27" pos:end="3309:37"><name pos:start="3309:27" pos:end="3309:37">hmac_handle</name></expr></argument>, <argument pos:start="3309:40" pos:end="3309:48"><expr pos:start="3309:40" pos:end="3309:48"><name pos:start="3309:40" pos:end="3309:48">responder</name></expr></argument>, <argument pos:start="3309:51" pos:end="3309:70"><expr pos:start="3309:51" pos:end="3309:70"><name pos:start="3309:51" pos:end="3309:70">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else pos:start="3311:9" pos:end="3315:9">else
        <block pos:start="3312:9" pos:end="3315:9">{<block_content pos:start="3313:13" pos:end="3314:72">
            <expr_stmt pos:start="3313:13" pos:end="3313:72"><expr pos:start="3313:13" pos:end="3313:71"><call pos:start="3313:13" pos:end="3313:71"><name pos:start="3313:13" pos:end="3313:25">gcry_md_write</name><argument_list pos:start="3313:26" pos:end="3313:71">(<argument pos:start="3313:27" pos:end="3313:37"><expr pos:start="3313:27" pos:end="3313:37"><name pos:start="3313:27" pos:end="3313:37">hmac_handle</name></expr></argument>, <argument pos:start="3313:40" pos:end="3313:48"><expr pos:start="3313:40" pos:end="3313:48"><name pos:start="3313:40" pos:end="3313:48">responder</name></expr></argument>, <argument pos:start="3313:51" pos:end="3313:70"><expr pos:start="3313:51" pos:end="3313:70"><name pos:start="3313:51" pos:end="3313:70">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3314:13" pos:end="3314:72"><expr pos:start="3314:13" pos:end="3314:71"><call pos:start="3314:13" pos:end="3314:71"><name pos:start="3314:13" pos:end="3314:25">gcry_md_write</name><argument_list pos:start="3314:26" pos:end="3314:71">(<argument pos:start="3314:27" pos:end="3314:37"><expr pos:start="3314:27" pos:end="3314:37"><name pos:start="3314:27" pos:end="3314:37">hmac_handle</name></expr></argument>, <argument pos:start="3314:40" pos:end="3314:48"><expr pos:start="3314:40" pos:end="3314:48"><name pos:start="3314:40" pos:end="3314:48">initiator</name></expr></argument>, <argument pos:start="3314:51" pos:end="3314:70"><expr pos:start="3314:51" pos:end="3314:70"><name pos:start="3314:51" pos:end="3314:70">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt pos:start="3316:9" pos:end="3316:64"><expr pos:start="3316:9" pos:end="3316:63"><call pos:start="3316:9" pos:end="3316:63"><name pos:start="3316:9" pos:end="3316:21">gcry_md_write</name><argument_list pos:start="3316:22" pos:end="3316:63">(<argument pos:start="3316:23" pos:end="3316:33"><expr pos:start="3316:23" pos:end="3316:33"><name pos:start="3316:23" pos:end="3316:33">hmac_handle</name></expr></argument>, <argument pos:start="3316:36" pos:end="3316:40"><expr pos:start="3316:36" pos:end="3316:40"><name pos:start="3316:36" pos:end="3316:40">bssid</name></expr></argument>, <argument pos:start="3316:43" pos:end="3316:62"><expr pos:start="3316:43" pos:end="3316:62"><name pos:start="3316:43" pos:end="3316:62">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3317:9" pos:end="3317:37"><expr pos:start="3317:9" pos:end="3317:36"><call pos:start="3317:9" pos:end="3317:36"><name pos:start="3317:9" pos:end="3317:20">gcry_md_putc</name><argument_list pos:start="3317:21" pos:end="3317:36">(<argument pos:start="3317:22" pos:end="3317:32"><expr pos:start="3317:22" pos:end="3317:32"><name pos:start="3317:22" pos:end="3317:32">hmac_handle</name></expr></argument>, <argument pos:start="3317:35" pos:end="3317:35"><expr pos:start="3317:35" pos:end="3317:35"><literal type="number" pos:start="3317:35" pos:end="3317:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3318:9" pos:end="3318:37"><expr pos:start="3318:9" pos:end="3318:36"><call pos:start="3318:9" pos:end="3318:36"><name pos:start="3318:9" pos:end="3318:20">gcry_md_putc</name><argument_list pos:start="3318:21" pos:end="3318:36">(<argument pos:start="3318:22" pos:end="3318:32"><expr pos:start="3318:22" pos:end="3318:32"><name pos:start="3318:22" pos:end="3318:32">hmac_handle</name></expr></argument>, <argument pos:start="3318:35" pos:end="3318:35"><expr pos:start="3318:35" pos:end="3318:35"><literal type="number" pos:start="3318:35" pos:end="3318:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3319:9" pos:end="3319:60"><expr pos:start="3319:9" pos:end="3319:59"><call pos:start="3319:9" pos:end="3319:59"><name pos:start="3319:9" pos:end="3319:14">memcpy</name><argument_list pos:start="3319:15" pos:end="3319:59">(<argument pos:start="3319:16" pos:end="3319:24"><expr pos:start="3319:16" pos:end="3319:24"><name pos:start="3319:16" pos:end="3319:24">key_input</name></expr></argument>, <argument pos:start="3319:27" pos:end="3319:54"><expr pos:start="3319:27" pos:end="3319:54"><call pos:start="3319:27" pos:end="3319:54"><name pos:start="3319:27" pos:end="3319:38">gcry_md_read</name><argument_list pos:start="3319:39" pos:end="3319:54">(<argument pos:start="3319:40" pos:end="3319:50"><expr pos:start="3319:40" pos:end="3319:50"><name pos:start="3319:40" pos:end="3319:50">hmac_handle</name></expr></argument>, <argument pos:start="3319:53" pos:end="3319:53"><expr pos:start="3319:53" pos:end="3319:53"><literal type="number" pos:start="3319:53" pos:end="3319:53">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="3319:57" pos:end="3319:58"><expr pos:start="3319:57" pos:end="3319:58"><literal type="number" pos:start="3319:57" pos:end="3319:58">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3320:9" pos:end="3320:35"><expr pos:start="3320:9" pos:end="3320:34"><call pos:start="3320:9" pos:end="3320:34"><name pos:start="3320:9" pos:end="3320:21">gcry_md_close</name><argument_list pos:start="3320:22" pos:end="3320:34">(<argument pos:start="3320:23" pos:end="3320:33"><expr pos:start="3320:23" pos:end="3320:33"><name pos:start="3320:23" pos:end="3320:33">hmac_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="3322:9" pos:end="3322:23">/* Check MIC */</comment>
        <if_stmt pos:start="3323:9" pos:end="3326:9"><if pos:start="3323:9" pos:end="3326:9">if <condition pos:start="3323:12" pos:end="3323:68">(<expr pos:start="3323:13" pos:end="3323:67"><call pos:start="3323:13" pos:end="3323:67"><name pos:start="3323:13" pos:end="3323:25">gcry_mac_open</name><argument_list pos:start="3323:26" pos:end="3323:67">(<argument pos:start="3323:27" pos:end="3323:38"><expr pos:start="3323:27" pos:end="3323:38"><operator pos:start="3323:27" pos:end="3323:27">&amp;</operator><name pos:start="3323:28" pos:end="3323:38">cmac_handle</name></expr></argument>, <argument pos:start="3323:41" pos:end="3323:57"><expr pos:start="3323:41" pos:end="3323:57"><name pos:start="3323:41" pos:end="3323:57">GCRY_MAC_CMAC_AES</name></expr></argument>, <argument pos:start="3323:60" pos:end="3323:60"><expr pos:start="3323:60" pos:end="3323:60"><literal type="number" pos:start="3323:60" pos:end="3323:60">0</literal></expr></argument>, <argument pos:start="3323:63" pos:end="3323:66"><expr pos:start="3323:63" pos:end="3323:66"><name pos:start="3323:63" pos:end="3323:66">NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block pos:start="3324:9" pos:end="3326:9">{<block_content pos:start="3325:13" pos:end="3325:46">
            <return pos:start="3325:13" pos:end="3325:46">return <expr pos:start="3325:20" pos:end="3325:45"><name pos:start="3325:20" pos:end="3325:45">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="3327:9" pos:end="3331:9"><if pos:start="3327:9" pos:end="3331:9">if <condition pos:start="3327:12" pos:end="3327:56">(<expr pos:start="3327:13" pos:end="3327:55"><call pos:start="3327:13" pos:end="3327:55"><name pos:start="3327:13" pos:end="3327:27">gcry_mac_setkey</name><argument_list pos:start="3327:28" pos:end="3327:55">(<argument pos:start="3327:29" pos:end="3327:39"><expr pos:start="3327:29" pos:end="3327:39"><name pos:start="3327:29" pos:end="3327:39">cmac_handle</name></expr></argument>, <argument pos:start="3327:42" pos:end="3327:50"><expr pos:start="3327:42" pos:end="3327:50"><name pos:start="3327:42" pos:end="3327:50">key_input</name></expr></argument>, <argument pos:start="3327:53" pos:end="3327:54"><expr pos:start="3327:53" pos:end="3327:54"><literal type="number" pos:start="3327:53" pos:end="3327:54">16</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block pos:start="3328:9" pos:end="3331:9">{<block_content pos:start="3329:13" pos:end="3330:46">
            <expr_stmt pos:start="3329:13" pos:end="3329:40"><expr pos:start="3329:13" pos:end="3329:39"><call pos:start="3329:13" pos:end="3329:39"><name pos:start="3329:13" pos:end="3329:26">gcry_mac_close</name><argument_list pos:start="3329:27" pos:end="3329:39">(<argument pos:start="3329:28" pos:end="3329:38"><expr pos:start="3329:28" pos:end="3329:38"><name pos:start="3329:28" pos:end="3329:38">cmac_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="3330:13" pos:end="3330:46">return <expr pos:start="3330:20" pos:end="3330:45"><name pos:start="3330:20" pos:end="3330:45">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="3332:9" pos:end="3332:69"><expr pos:start="3332:9" pos:end="3332:68"><call pos:start="3332:9" pos:end="3332:68"><name pos:start="3332:9" pos:end="3332:22">gcry_mac_write</name><argument_list pos:start="3332:23" pos:end="3332:68">(<argument pos:start="3332:24" pos:end="3332:34"><expr pos:start="3332:24" pos:end="3332:34"><name pos:start="3332:24" pos:end="3332:34">cmac_handle</name></expr></argument>, <argument pos:start="3332:37" pos:end="3332:45"><expr pos:start="3332:37" pos:end="3332:45"><name pos:start="3332:37" pos:end="3332:45">initiator</name></expr></argument>, <argument pos:start="3332:48" pos:end="3332:67"><expr pos:start="3332:48" pos:end="3332:67"><name pos:start="3332:48" pos:end="3332:67">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3333:9" pos:end="3333:69"><expr pos:start="3333:9" pos:end="3333:68"><call pos:start="3333:9" pos:end="3333:68"><name pos:start="3333:9" pos:end="3333:22">gcry_mac_write</name><argument_list pos:start="3333:23" pos:end="3333:68">(<argument pos:start="3333:24" pos:end="3333:34"><expr pos:start="3333:24" pos:end="3333:34"><name pos:start="3333:24" pos:end="3333:34">cmac_handle</name></expr></argument>, <argument pos:start="3333:37" pos:end="3333:45"><expr pos:start="3333:37" pos:end="3333:45"><name pos:start="3333:37" pos:end="3333:45">responder</name></expr></argument>, <argument pos:start="3333:48" pos:end="3333:67"><expr pos:start="3333:48" pos:end="3333:67"><name pos:start="3333:48" pos:end="3333:67">DOT11DECRYPT_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3334:9" pos:end="3334:49"><expr pos:start="3334:9" pos:end="3334:48"><call pos:start="3334:9" pos:end="3334:48"><name pos:start="3334:9" pos:end="3334:22">gcry_mac_write</name><argument_list pos:start="3334:23" pos:end="3334:48">(<argument pos:start="3334:24" pos:end="3334:34"><expr pos:start="3334:24" pos:end="3334:34"><name pos:start="3334:24" pos:end="3334:34">cmac_handle</name></expr></argument>, <argument pos:start="3334:37" pos:end="3334:44"><expr pos:start="3334:37" pos:end="3334:44"><operator pos:start="3334:37" pos:end="3334:37">&amp;</operator><name pos:start="3334:38" pos:end="3334:44">seq_num</name></expr></argument>, <argument pos:start="3334:47" pos:end="3334:47"><expr pos:start="3334:47" pos:end="3334:47"><literal type="number" pos:start="3334:47" pos:end="3334:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3335:9" pos:end="3335:83"><expr pos:start="3335:9" pos:end="3335:82"><call pos:start="3335:9" pos:end="3335:82"><name pos:start="3335:9" pos:end="3335:22">gcry_mac_write</name><argument_list pos:start="3335:23" pos:end="3335:82">(<argument pos:start="3335:24" pos:end="3335:34"><expr pos:start="3335:24" pos:end="3335:34"><name pos:start="3335:24" pos:end="3335:34">cmac_handle</name></expr></argument>, <argument pos:start="3335:37" pos:end="3335:54"><expr pos:start="3335:37" pos:end="3335:54"><operator pos:start="3335:37" pos:end="3335:37">&amp;</operator><name pos:start="3335:38" pos:end="3335:54"><name pos:start="3335:38" pos:end="3335:41">data</name><index pos:start="3335:42" pos:end="3335:54">[<expr pos:start="3335:43" pos:end="3335:53"><name pos:start="3335:43" pos:end="3335:53">offset_link</name></expr>]</index></name></expr></argument>, <argument pos:start="3335:57" pos:end="3335:81"><expr pos:start="3335:57" pos:end="3335:81"><name pos:start="3335:57" pos:end="3335:77"><name pos:start="3335:57" pos:end="3335:60">data</name><index pos:start="3335:61" pos:end="3335:77">[<expr pos:start="3335:62" pos:end="3335:76"><name pos:start="3335:62" pos:end="3335:72">offset_link</name> <operator pos:start="3335:74" pos:end="3335:74">+</operator> <literal type="number" pos:start="3335:76" pos:end="3335:76">1</literal></expr>]</index></name> <operator pos:start="3335:79" pos:end="3335:79">+</operator> <literal type="number" pos:start="3335:81" pos:end="3335:81">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3336:9" pos:end="3336:83"><expr pos:start="3336:9" pos:end="3336:82"><call pos:start="3336:9" pos:end="3336:82"><name pos:start="3336:9" pos:end="3336:22">gcry_mac_write</name><argument_list pos:start="3336:23" pos:end="3336:82">(<argument pos:start="3336:24" pos:end="3336:34"><expr pos:start="3336:24" pos:end="3336:34"><name pos:start="3336:24" pos:end="3336:34">cmac_handle</name></expr></argument>, <argument pos:start="3336:37" pos:end="3336:54"><expr pos:start="3336:37" pos:end="3336:54"><operator pos:start="3336:37" pos:end="3336:37">&amp;</operator><name pos:start="3336:38" pos:end="3336:54"><name pos:start="3336:38" pos:end="3336:41">data</name><index pos:start="3336:42" pos:end="3336:54">[<expr pos:start="3336:43" pos:end="3336:53"><name pos:start="3336:43" pos:end="3336:53">offset_rsne</name></expr>]</index></name></expr></argument>, <argument pos:start="3336:57" pos:end="3336:81"><expr pos:start="3336:57" pos:end="3336:81"><name pos:start="3336:57" pos:end="3336:77"><name pos:start="3336:57" pos:end="3336:60">data</name><index pos:start="3336:61" pos:end="3336:77">[<expr pos:start="3336:62" pos:end="3336:76"><name pos:start="3336:62" pos:end="3336:72">offset_rsne</name> <operator pos:start="3336:74" pos:end="3336:74">+</operator> <literal type="number" pos:start="3336:76" pos:end="3336:76">1</literal></expr>]</index></name> <operator pos:start="3336:79" pos:end="3336:79">+</operator> <literal type="number" pos:start="3336:81" pos:end="3336:81">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3337:9" pos:end="3337:89"><expr pos:start="3337:9" pos:end="3337:88"><call pos:start="3337:9" pos:end="3337:88"><name pos:start="3337:9" pos:end="3337:22">gcry_mac_write</name><argument_list pos:start="3337:23" pos:end="3337:88">(<argument pos:start="3337:24" pos:end="3337:34"><expr pos:start="3337:24" pos:end="3337:34"><name pos:start="3337:24" pos:end="3337:34">cmac_handle</name></expr></argument>, <argument pos:start="3337:37" pos:end="3337:57"><expr pos:start="3337:37" pos:end="3337:57"><operator pos:start="3337:37" pos:end="3337:37">&amp;</operator><name pos:start="3337:38" pos:end="3337:57"><name pos:start="3337:38" pos:end="3337:41">data</name><index pos:start="3337:42" pos:end="3337:57">[<expr pos:start="3337:43" pos:end="3337:56"><name pos:start="3337:43" pos:end="3337:56">offset_timeout</name></expr>]</index></name></expr></argument>, <argument pos:start="3337:60" pos:end="3337:87"><expr pos:start="3337:60" pos:end="3337:87"><name pos:start="3337:60" pos:end="3337:83"><name pos:start="3337:60" pos:end="3337:63">data</name><index pos:start="3337:64" pos:end="3337:83">[<expr pos:start="3337:65" pos:end="3337:82"><name pos:start="3337:65" pos:end="3337:78">offset_timeout</name> <operator pos:start="3337:80" pos:end="3337:80">+</operator> <literal type="number" pos:start="3337:82" pos:end="3337:82">1</literal></expr>]</index></name> <operator pos:start="3337:85" pos:end="3337:85">+</operator> <literal type="number" pos:start="3337:87" pos:end="3337:87">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3338:9" pos:end="3338:58"><expr pos:start="3338:9" pos:end="3338:57"><call pos:start="3338:9" pos:end="3338:57"><name pos:start="3338:9" pos:end="3338:22">gcry_mac_write</name><argument_list pos:start="3338:23" pos:end="3338:57">(<argument pos:start="3338:24" pos:end="3338:34"><expr pos:start="3338:24" pos:end="3338:34"><name pos:start="3338:24" pos:end="3338:34">cmac_handle</name></expr></argument>, <argument pos:start="3338:37" pos:end="3338:53"><expr pos:start="3338:37" pos:end="3338:53"><operator pos:start="3338:37" pos:end="3338:37">&amp;</operator><name pos:start="3338:38" pos:end="3338:53"><name pos:start="3338:38" pos:end="3338:41">data</name><index pos:start="3338:42" pos:end="3338:53">[<expr pos:start="3338:43" pos:end="3338:52"><name pos:start="3338:43" pos:end="3338:52">offset_fte</name></expr>]</index></name></expr></argument>, <argument pos:start="3338:56" pos:end="3338:56"><expr pos:start="3338:56" pos:end="3338:56"><literal type="number" pos:start="3338:56" pos:end="3338:56">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3339:9" pos:end="3339:47"><expr pos:start="3339:9" pos:end="3339:46"><call pos:start="3339:9" pos:end="3339:46"><name pos:start="3339:9" pos:end="3339:22">gcry_mac_write</name><argument_list pos:start="3339:23" pos:end="3339:46">(<argument pos:start="3339:24" pos:end="3339:34"><expr pos:start="3339:24" pos:end="3339:34"><name pos:start="3339:24" pos:end="3339:34">cmac_handle</name></expr></argument>, <argument pos:start="3339:37" pos:end="3339:41"><expr pos:start="3339:37" pos:end="3339:41"><name pos:start="3339:37" pos:end="3339:41">zeros</name></expr></argument>, <argument pos:start="3339:44" pos:end="3339:45"><expr pos:start="3339:44" pos:end="3339:45"><literal type="number" pos:start="3339:44" pos:end="3339:45">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3340:9" pos:end="3340:50"><expr pos:start="3340:9" pos:end="3340:49"><name pos:start="3340:9" pos:end="3340:22">cmac_write_len</name> <operator pos:start="3340:24" pos:end="3340:24">=</operator> <name pos:start="3340:26" pos:end="3340:45"><name pos:start="3340:26" pos:end="3340:29">data</name><index pos:start="3340:30" pos:end="3340:45">[<expr pos:start="3340:31" pos:end="3340:44"><name pos:start="3340:31" pos:end="3340:40">offset_fte</name> <operator pos:start="3340:42" pos:end="3340:42">+</operator> <literal type="number" pos:start="3340:44" pos:end="3340:44">1</literal></expr>]</index></name> <operator pos:start="3340:47" pos:end="3340:47">+</operator> <literal type="number" pos:start="3340:49" pos:end="3340:49">2</literal></expr>;</expr_stmt>
        <if_stmt pos:start="3341:9" pos:end="3346:9"><if pos:start="3341:9" pos:end="3346:9">if <condition pos:start="3341:12" pos:end="3341:32">(<expr pos:start="3341:13" pos:end="3341:31"><name pos:start="3341:13" pos:end="3341:26">cmac_write_len</name> <operator pos:start="3341:28" pos:end="3341:28">&lt;</operator> <literal type="number" pos:start="3341:30" pos:end="3341:31">20</literal></expr>)</condition>
        <block pos:start="3342:9" pos:end="3346:9">{<block_content pos:start="3343:13" pos:end="3345:46">
            <expr_stmt pos:start="3343:13" pos:end="3343:38"><expr pos:start="3343:13" pos:end="3343:37"><call pos:start="3343:13" pos:end="3343:37"><name pos:start="3343:13" pos:end="3343:22">ws_warning</name><argument_list pos:start="3343:23" pos:end="3343:37">(<argument pos:start="3343:24" pos:end="3343:36"><expr pos:start="3343:24" pos:end="3343:36"><literal type="string" pos:start="3343:24" pos:end="3343:36">"Bad MAC len"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3344:13" pos:end="3344:40"><expr pos:start="3344:13" pos:end="3344:39"><call pos:start="3344:13" pos:end="3344:39"><name pos:start="3344:13" pos:end="3344:26">gcry_mac_close</name><argument_list pos:start="3344:27" pos:end="3344:39">(<argument pos:start="3344:28" pos:end="3344:38"><expr pos:start="3344:28" pos:end="3344:38"><name pos:start="3344:28" pos:end="3344:38">cmac_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="3345:13" pos:end="3345:46">return <expr pos:start="3345:20" pos:end="3345:45"><name pos:start="3345:20" pos:end="3345:45">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="3347:9" pos:end="3347:81"><expr pos:start="3347:9" pos:end="3347:80"><call pos:start="3347:9" pos:end="3347:80"><name pos:start="3347:9" pos:end="3347:22">gcry_mac_write</name><argument_list pos:start="3347:23" pos:end="3347:80">(<argument pos:start="3347:24" pos:end="3347:34"><expr pos:start="3347:24" pos:end="3347:34"><name pos:start="3347:24" pos:end="3347:34">cmac_handle</name></expr></argument>, <argument pos:start="3347:37" pos:end="3347:58"><expr pos:start="3347:37" pos:end="3347:58"><operator pos:start="3347:37" pos:end="3347:37">&amp;</operator><name pos:start="3347:38" pos:end="3347:58"><name pos:start="3347:38" pos:end="3347:41">data</name><index pos:start="3347:42" pos:end="3347:58">[<expr pos:start="3347:43" pos:end="3347:57"><name pos:start="3347:43" pos:end="3347:52">offset_fte</name> <operator pos:start="3347:54" pos:end="3347:54">+</operator> <literal type="number" pos:start="3347:56" pos:end="3347:57">20</literal></expr>]</index></name></expr></argument>, <argument pos:start="3347:61" pos:end="3347:79"><expr pos:start="3347:61" pos:end="3347:79"><name pos:start="3347:61" pos:end="3347:74">cmac_write_len</name> <operator pos:start="3347:76" pos:end="3347:76">-</operator> <literal type="number" pos:start="3347:78" pos:end="3347:79">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="3348:9" pos:end="3353:9"><if pos:start="3348:9" pos:end="3353:9">if <condition pos:start="3348:12" pos:end="3348:75">(<expr pos:start="3348:13" pos:end="3348:74"><call pos:start="3348:13" pos:end="3348:54"><name pos:start="3348:13" pos:end="3348:25">gcry_mac_read</name><argument_list pos:start="3348:26" pos:end="3348:54">(<argument pos:start="3348:27" pos:end="3348:37"><expr pos:start="3348:27" pos:end="3348:37"><name pos:start="3348:27" pos:end="3348:37">cmac_handle</name></expr></argument>, <argument pos:start="3348:40" pos:end="3348:42"><expr pos:start="3348:40" pos:end="3348:42"><name pos:start="3348:40" pos:end="3348:42">mic</name></expr></argument>, <argument pos:start="3348:45" pos:end="3348:53"><expr pos:start="3348:45" pos:end="3348:53"><operator pos:start="3348:45" pos:end="3348:45">&amp;</operator><name pos:start="3348:46" pos:end="3348:53">cmac_len</name></expr></argument>)</argument_list></call> <operator pos:start="3348:56" pos:end="3348:57">!=</operator> <name pos:start="3348:59" pos:end="3348:74">GPG_ERR_NO_ERROR</name></expr>)</condition>
        <block pos:start="3349:9" pos:end="3353:9">{<block_content pos:start="3350:13" pos:end="3352:46">
            <expr_stmt pos:start="3350:13" pos:end="3350:41"><expr pos:start="3350:13" pos:end="3350:40"><call pos:start="3350:13" pos:end="3350:40"><name pos:start="3350:13" pos:end="3350:22">ws_warning</name><argument_list pos:start="3350:23" pos:end="3350:40">(<argument pos:start="3350:24" pos:end="3350:39"><expr pos:start="3350:24" pos:end="3350:39"><literal type="string" pos:start="3350:24" pos:end="3350:39">"MAC read error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3351:13" pos:end="3351:40"><expr pos:start="3351:13" pos:end="3351:39"><call pos:start="3351:13" pos:end="3351:39"><name pos:start="3351:13" pos:end="3351:26">gcry_mac_close</name><argument_list pos:start="3351:27" pos:end="3351:39">(<argument pos:start="3351:28" pos:end="3351:38"><expr pos:start="3351:28" pos:end="3351:38"><name pos:start="3351:28" pos:end="3351:38">cmac_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="3352:13" pos:end="3352:46">return <expr pos:start="3352:20" pos:end="3352:45"><name pos:start="3352:20" pos:end="3352:45">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="3354:9" pos:end="3359:9"><if pos:start="3354:9" pos:end="3359:9">if <condition pos:start="3354:12" pos:end="3354:51">(<expr pos:start="3354:13" pos:end="3354:50"><call pos:start="3354:13" pos:end="3354:50"><name pos:start="3354:13" pos:end="3354:18">memcmp</name><argument_list pos:start="3354:19" pos:end="3354:50">(<argument pos:start="3354:20" pos:end="3354:22"><expr pos:start="3354:20" pos:end="3354:22"><name pos:start="3354:20" pos:end="3354:22">mic</name></expr></argument>, <argument pos:start="3354:25" pos:end="3354:45"><expr pos:start="3354:25" pos:end="3354:45"><operator pos:start="3354:25" pos:end="3354:25">&amp;</operator><name pos:start="3354:26" pos:end="3354:45"><name pos:start="3354:26" pos:end="3354:29">data</name><index pos:start="3354:30" pos:end="3354:45">[<expr pos:start="3354:31" pos:end="3354:44"><name pos:start="3354:31" pos:end="3354:40">offset_fte</name> <operator pos:start="3354:42" pos:end="3354:42">+</operator> <literal type="number" pos:start="3354:44" pos:end="3354:44">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="3354:48" pos:end="3354:49"><expr pos:start="3354:48" pos:end="3354:49"><literal type="number" pos:start="3354:48" pos:end="3354:49">16</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block pos:start="3355:9" pos:end="3359:9">{<block_content pos:start="3356:13" pos:end="3358:46">
            <expr_stmt pos:start="3356:13" pos:end="3356:48"><expr pos:start="3356:13" pos:end="3356:47"><call pos:start="3356:13" pos:end="3356:47"><name pos:start="3356:13" pos:end="3356:20">ws_debug</name><argument_list pos:start="3356:21" pos:end="3356:47">(<argument pos:start="3356:22" pos:end="3356:46"><expr pos:start="3356:22" pos:end="3356:46"><literal type="string" pos:start="3356:22" pos:end="3356:46">"MIC verification failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3357:13" pos:end="3357:40"><expr pos:start="3357:13" pos:end="3357:39"><call pos:start="3357:13" pos:end="3357:39"><name pos:start="3357:13" pos:end="3357:26">gcry_mac_close</name><argument_list pos:start="3357:27" pos:end="3357:39">(<argument pos:start="3357:28" pos:end="3357:38"><expr pos:start="3357:28" pos:end="3357:38"><name pos:start="3357:28" pos:end="3357:38">cmac_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="3358:13" pos:end="3358:46">return <expr pos:start="3358:20" pos:end="3358:45"><name pos:start="3358:20" pos:end="3358:45">DOT11DECRYPT_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="3360:9" pos:end="3360:36"><expr pos:start="3360:9" pos:end="3360:35"><call pos:start="3360:9" pos:end="3360:35"><name pos:start="3360:9" pos:end="3360:22">gcry_mac_close</name><argument_list pos:start="3360:23" pos:end="3360:35">(<argument pos:start="3360:24" pos:end="3360:34"><expr pos:start="3360:24" pos:end="3360:34"><name pos:start="3360:24" pos:end="3360:34">cmac_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="3361:9" pos:end="3361:49">/* TODO support other akm and ciphers? */</comment>
        <expr_stmt pos:start="3362:9" pos:end="3362:24"><expr pos:start="3362:9" pos:end="3362:23"><name pos:start="3362:9" pos:end="3362:19"><name pos:start="3362:9" pos:end="3362:10">sa</name><operator pos:start="3362:11" pos:end="3362:12">-&gt;</operator><name pos:start="3362:13" pos:end="3362:15">wpa</name><operator pos:start="3362:16" pos:end="3362:16">.</operator><name pos:start="3362:17" pos:end="3362:19">akm</name></name> <operator pos:start="3362:21" pos:end="3362:21">=</operator> <literal type="number" pos:start="3362:23" pos:end="3362:23">2</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="3363:9" pos:end="3363:27"><expr pos:start="3363:9" pos:end="3363:26"><name pos:start="3363:9" pos:end="3363:22"><name pos:start="3363:9" pos:end="3363:10">sa</name><operator pos:start="3363:11" pos:end="3363:12">-&gt;</operator><name pos:start="3363:13" pos:end="3363:15">wpa</name><operator pos:start="3363:16" pos:end="3363:16">.</operator><name pos:start="3363:17" pos:end="3363:22">cipher</name></name> <operator pos:start="3363:24" pos:end="3363:24">=</operator> <literal type="number" pos:start="3363:26" pos:end="3363:26">4</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="3364:9" pos:end="3364:81"><expr pos:start="3364:9" pos:end="3364:80"><name pos:start="3364:9" pos:end="3364:23"><name pos:start="3364:9" pos:end="3364:10">sa</name><operator pos:start="3364:11" pos:end="3364:12">-&gt;</operator><name pos:start="3364:13" pos:end="3364:15">wpa</name><operator pos:start="3364:16" pos:end="3364:16">.</operator><name pos:start="3364:17" pos:end="3364:23">ptk_len</name></name> <operator pos:start="3364:25" pos:end="3364:25">=</operator> <call pos:start="3364:27" pos:end="3364:76"><name pos:start="3364:27" pos:end="3364:47">Dot11DecryptGetPtkLen</name><argument_list pos:start="3364:48" pos:end="3364:76">(<argument pos:start="3364:49" pos:end="3364:59"><expr pos:start="3364:49" pos:end="3364:59"><name pos:start="3364:49" pos:end="3364:59"><name pos:start="3364:49" pos:end="3364:50">sa</name><operator pos:start="3364:51" pos:end="3364:52">-&gt;</operator><name pos:start="3364:53" pos:end="3364:55">wpa</name><operator pos:start="3364:56" pos:end="3364:56">.</operator><name pos:start="3364:57" pos:end="3364:59">akm</name></name></expr></argument>, <argument pos:start="3364:62" pos:end="3364:75"><expr pos:start="3364:62" pos:end="3364:75"><name pos:start="3364:62" pos:end="3364:75"><name pos:start="3364:62" pos:end="3364:63">sa</name><operator pos:start="3364:64" pos:end="3364:65">-&gt;</operator><name pos:start="3364:66" pos:end="3364:68">wpa</name><operator pos:start="3364:69" pos:end="3364:69">.</operator><name pos:start="3364:70" pos:end="3364:75">cipher</name></name></expr></argument>)</argument_list></call> <operator pos:start="3364:78" pos:end="3364:78">/</operator> <literal type="number" pos:start="3364:80" pos:end="3364:80">8</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="3365:9" pos:end="3366:73"><expr pos:start="3365:9" pos:end="3366:72"><call pos:start="3365:9" pos:end="3366:72"><name pos:start="3365:9" pos:end="3365:14">memcpy</name><argument_list pos:start="3365:15" pos:end="3366:72">(<argument pos:start="3365:16" pos:end="3365:124"><expr pos:start="3365:16" pos:end="3365:124"><operator pos:start="3365:16" pos:end="3365:16">(</operator><name pos:start="3365:17" pos:end="3365:27"><name pos:start="3365:17" pos:end="3365:18">sa</name><operator pos:start="3365:19" pos:end="3365:20">-&gt;</operator><name pos:start="3365:21" pos:end="3365:23">wpa</name><operator pos:start="3365:24" pos:end="3365:24">.</operator><name pos:start="3365:25" pos:end="3365:27">ptk</name></name> <operator pos:start="3365:29" pos:end="3365:29">+</operator> <operator pos:start="3365:31" pos:end="3365:31">(</operator><operator pos:start="3365:32" pos:end="3365:32">(</operator><operator pos:start="3365:33" pos:end="3365:33">(</operator><operator pos:start="3365:34" pos:end="3365:34">(</operator><operator pos:start="3365:35" pos:end="3365:35">(</operator><literal type="number" pos:start="3365:36" pos:end="3365:36">0</literal><operator pos:start="3365:37" pos:end="3365:37">)</operator> <operator pos:start="3365:39" pos:end="3365:39">+</operator> <call pos:start="3365:41" pos:end="3365:74"><name pos:start="3365:41" pos:end="3365:61">Dot11DecryptGetKckLen</name><argument_list pos:start="3365:62" pos:end="3365:74">(<argument pos:start="3365:63" pos:end="3365:73"><expr pos:start="3365:63" pos:end="3365:73"><name pos:start="3365:63" pos:end="3365:73"><name pos:start="3365:63" pos:end="3365:64">sa</name><operator pos:start="3365:65" pos:end="3365:66">-&gt;</operator><name pos:start="3365:67" pos:end="3365:69">wpa</name><operator pos:start="3365:70" pos:end="3365:70">.</operator><name pos:start="3365:71" pos:end="3365:73">akm</name></name></expr></argument>)</argument_list></call> <operator pos:start="3365:76" pos:end="3365:76">/</operator> <literal type="number" pos:start="3365:78" pos:end="3365:78">8</literal><operator pos:start="3365:79" pos:end="3365:79">)</operator><operator pos:start="3365:80" pos:end="3365:80">)</operator> <operator pos:start="3365:82" pos:end="3365:82">+</operator> <call pos:start="3365:84" pos:end="3365:117"><name pos:start="3365:84" pos:end="3365:104">Dot11DecryptGetKekLen</name><argument_list pos:start="3365:105" pos:end="3365:117">(<argument pos:start="3365:106" pos:end="3365:116"><expr pos:start="3365:106" pos:end="3365:116"><name pos:start="3365:106" pos:end="3365:116"><name pos:start="3365:106" pos:end="3365:107">sa</name><operator pos:start="3365:108" pos:end="3365:109">-&gt;</operator><name pos:start="3365:110" pos:end="3365:112">wpa</name><operator pos:start="3365:113" pos:end="3365:113">.</operator><name pos:start="3365:114" pos:end="3365:116">akm</name></name></expr></argument>)</argument_list></call> <operator pos:start="3365:119" pos:end="3365:119">/</operator> <literal type="number" pos:start="3365:121" pos:end="3365:121">8</literal><operator pos:start="3365:122" pos:end="3365:122">)</operator><operator pos:start="3365:123" pos:end="3365:123">)</operator><operator pos:start="3365:124" pos:end="3365:124">)</operator></expr></argument>,
               <argument pos:start="3366:16" pos:end="3366:29"><expr pos:start="3366:16" pos:end="3366:29"><name pos:start="3366:16" pos:end="3366:24">key_input</name> <operator pos:start="3366:26" pos:end="3366:26">+</operator> <literal type="number" pos:start="3366:28" pos:end="3366:29">16</literal></expr></argument>, <argument pos:start="3366:32" pos:end="3366:71"><expr pos:start="3366:32" pos:end="3366:71"><call pos:start="3366:32" pos:end="3366:67"><name pos:start="3366:32" pos:end="3366:51">Dot11DecryptGetTkLen</name><argument_list pos:start="3366:52" pos:end="3366:67">(<argument pos:start="3366:53" pos:end="3366:66"><expr pos:start="3366:53" pos:end="3366:66"><name pos:start="3366:53" pos:end="3366:66"><name pos:start="3366:53" pos:end="3366:54">sa</name><operator pos:start="3366:55" pos:end="3366:56">-&gt;</operator><name pos:start="3366:57" pos:end="3366:59">wpa</name><operator pos:start="3366:60" pos:end="3366:60">.</operator><name pos:start="3366:61" pos:end="3366:66">cipher</name></name></expr></argument>)</argument_list></call> <operator pos:start="3366:69" pos:end="3366:69">/</operator> <literal type="number" pos:start="3366:71" pos:end="3366:71">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3367:9" pos:end="3367:66"><expr pos:start="3367:9" pos:end="3367:65"><call pos:start="3367:9" pos:end="3367:65"><name pos:start="3367:9" pos:end="3367:14">memcpy</name><argument_list pos:start="3367:15" pos:end="3367:65">(<argument pos:start="3367:16" pos:end="3367:28"><expr pos:start="3367:16" pos:end="3367:28"><name pos:start="3367:16" pos:end="3367:28"><name pos:start="3367:16" pos:end="3367:17">sa</name><operator pos:start="3367:18" pos:end="3367:19">-&gt;</operator><name pos:start="3367:20" pos:end="3367:22">wpa</name><operator pos:start="3367:23" pos:end="3367:23">.</operator><name pos:start="3367:24" pos:end="3367:28">nonce</name></name></expr></argument>, <argument pos:start="3367:31" pos:end="3367:36"><expr pos:start="3367:31" pos:end="3367:36"><name pos:start="3367:31" pos:end="3367:36">snonce</name></expr></argument>, <argument pos:start="3367:39" pos:end="3367:64"><expr pos:start="3367:39" pos:end="3367:64"><name pos:start="3367:39" pos:end="3367:64">DOT11DECRYPT_WPA_NONCE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3368:9" pos:end="3368:28"><expr pos:start="3368:9" pos:end="3368:27"><name pos:start="3368:9" pos:end="3368:20"><name pos:start="3368:9" pos:end="3368:10">sa</name><operator pos:start="3368:11" pos:end="3368:12">-&gt;</operator><name pos:start="3368:13" pos:end="3368:20">validKey</name></name> <operator pos:start="3368:22" pos:end="3368:22">=</operator> <name pos:start="3368:24" pos:end="3368:27">TRUE</name></expr>;</expr_stmt>
        <expr_stmt pos:start="3369:9" pos:end="3369:28"><expr pos:start="3369:9" pos:end="3369:27"><name pos:start="3369:9" pos:end="3369:23"><name pos:start="3369:9" pos:end="3369:10">sa</name><operator pos:start="3369:11" pos:end="3369:12">-&gt;</operator><name pos:start="3369:13" pos:end="3369:15">wpa</name><operator pos:start="3369:16" pos:end="3369:16">.</operator><name pos:start="3369:17" pos:end="3369:23">key_ver</name></name> <operator pos:start="3369:25" pos:end="3369:25">=</operator> <literal type="number" pos:start="3369:27" pos:end="3369:27">2</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="3370:9" pos:end="3370:33"><expr pos:start="3370:9" pos:end="3370:32"><call pos:start="3370:9" pos:end="3370:32"><name pos:start="3370:9" pos:end="3370:16">ws_debug</name><argument_list pos:start="3370:17" pos:end="3370:32">(<argument pos:start="3370:18" pos:end="3370:31"><expr pos:start="3370:18" pos:end="3370:31"><literal type="string" pos:start="3370:18" pos:end="3370:31">"MIC verified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="3371:9" pos:end="3371:40">return <expr pos:start="3371:16" pos:end="3371:39"><name pos:start="3371:16" pos:end="3371:39">DOT11DECRYPT_RET_SUCCESS</name></expr>;</return>
    </block_content>}</block></function>

<cpp:ifdef pos:start="3374:1" pos:end="3374:18">#<cpp:directive pos:start="3374:2" pos:end="3374:6">ifdef</cpp:directive> <name pos:start="3374:8" pos:end="3374:18">__cplusplus</name></cpp:ifdef>
</block_content>}</block></extern>
<cpp:endif pos:start="3376:1" pos:end="3376:6">#<cpp:directive pos:start="3376:2" pos:end="3376:6">endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen" pos:start="3378:1" pos:end="3378:78">/****************************************************************************/</comment>

<comment type="block" pos:start="3380:1" pos:end="3391:3">/*
 * Editor modelines
 *
 * Local Variables:
 * c-basic-offset: 4
 * tab-width: 8
 * indent-tabs-mode: nil
 * End:
 *
 * ex: set shiftwidth=4 tabstop=8 expandtab:
 * :indentSize=4:tabSize=8:noTabs=true:
 */</comment>
</unit>