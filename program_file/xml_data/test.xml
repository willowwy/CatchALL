<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="program_file/pre_data\test.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="33:3">/* airpdcap.c
 *
 * Copyright (c) 2006 CACE Technologies, Davis (California)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the project nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * Alternatively, this software may be distributed under the terms of the
 * GNU General Public License ("GPL") version 2 as published by the Free
 * Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */</comment>

<comment type="block" pos:start="35:1" pos:end="40:3">/*
 * The files matching airpcap*.[ch] were originally developed as part of
 * Wireshark's support for AirPcap adapters. However, they've been used
 * for general 802.11 decryption for quite some time. It might make sense
 * to rename them accordingly.
 */</comment>

<comment type="block" format="doxygen" pos:start="42:1" pos:end="42:78">/****************************************************************************/</comment>
<comment type="block" pos:start="43:1" pos:end="43:78">/*      File includes                                                       */</comment>

<cpp:include pos:start="45:1" pos:end="45:19">#<cpp:directive pos:start="45:2" pos:end="45:8">include</cpp:directive> <cpp:file pos:start="45:10" pos:end="45:19">"config.h"</cpp:file></cpp:include>

<cpp:include pos:start="47:1" pos:end="47:17">#<cpp:directive pos:start="47:2" pos:end="47:8">include</cpp:directive> <cpp:file pos:start="47:10" pos:end="47:17">&lt;glib.h&gt;</cpp:file></cpp:include>

<cpp:include pos:start="49:1" pos:end="49:25">#<cpp:directive pos:start="49:2" pos:end="49:8">include</cpp:directive> <cpp:file pos:start="49:10" pos:end="49:25">&lt;wsutil/crc32.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="50:1" pos:end="50:23">#<cpp:directive pos:start="50:2" pos:end="50:8">include</cpp:directive> <cpp:file pos:start="50:10" pos:end="50:23">&lt;wsutil/rc4.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="51:1" pos:end="51:24">#<cpp:directive pos:start="51:2" pos:end="51:8">include</cpp:directive> <cpp:file pos:start="51:10" pos:end="51:24">&lt;wsutil/sha1.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="52:1" pos:end="52:24">#<cpp:directive pos:start="52:2" pos:end="52:8">include</cpp:directive> <cpp:file pos:start="52:10" pos:end="52:24">&lt;wsutil/sha2.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="53:1" pos:end="53:23">#<cpp:directive pos:start="53:2" pos:end="53:8">include</cpp:directive> <cpp:file pos:start="53:10" pos:end="53:23">&lt;wsutil/md5.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="54:1" pos:end="54:24">#<cpp:directive pos:start="54:2" pos:end="54:8">include</cpp:directive> <cpp:file pos:start="54:10" pos:end="54:24">&lt;wsutil/pint.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="55:1" pos:end="55:23">#<cpp:directive pos:start="55:2" pos:end="55:8">include</cpp:directive> <cpp:file pos:start="55:10" pos:end="55:23">&lt;wsutil/aes.h&gt;</cpp:file></cpp:include>

<cpp:include pos:start="57:1" pos:end="57:24">#<cpp:directive pos:start="57:2" pos:end="57:8">include</cpp:directive> <cpp:file pos:start="57:10" pos:end="57:24">&lt;epan/tvbuff.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="58:1" pos:end="58:24">#<cpp:directive pos:start="58:2" pos:end="58:8">include</cpp:directive> <cpp:file pos:start="58:10" pos:end="58:24">&lt;epan/to_str.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="59:1" pos:end="59:25">#<cpp:directive pos:start="59:2" pos:end="59:8">include</cpp:directive> <cpp:file pos:start="59:10" pos:end="59:25">&lt;epan/strutil.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="60:1" pos:end="60:41">#<cpp:directive pos:start="60:2" pos:end="60:8">include</cpp:directive> <cpp:file pos:start="60:10" pos:end="60:41">&lt;epan/crypt/airpdcap_rijndael.h&gt;</cpp:file></cpp:include>

<cpp:include pos:start="62:1" pos:end="62:28">#<cpp:directive pos:start="62:2" pos:end="62:8">include</cpp:directive> <cpp:file pos:start="62:10" pos:end="62:28">"airpdcap_system.h"</cpp:file></cpp:include>
<cpp:include pos:start="63:1" pos:end="63:25">#<cpp:directive pos:start="63:2" pos:end="63:8">include</cpp:directive> <cpp:file pos:start="63:10" pos:end="63:25">"airpdcap_int.h"</cpp:file></cpp:include>

<cpp:include pos:start="65:1" pos:end="65:27">#<cpp:directive pos:start="65:2" pos:end="65:8">include</cpp:directive> <cpp:file pos:start="65:10" pos:end="65:27">"airpdcap_debug.h"</cpp:file></cpp:include>

<cpp:include pos:start="67:1" pos:end="67:24">#<cpp:directive pos:start="67:2" pos:end="67:8">include</cpp:directive> <cpp:file pos:start="67:10" pos:end="67:24">"wep-wpadefs.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen" pos:start="69:1" pos:end="69:78">/****************************************************************************/</comment>

<comment type="block" format="doxygen" pos:start="71:1" pos:end="71:78">/****************************************************************************/</comment>
<comment type="block" pos:start="72:1" pos:end="72:82">/*      Constant definitions                                                    */</comment>

<comment type="block" pos:start="74:1" pos:end="74:82">/*      EAPOL definitions                                                       */</comment>
<comment type="block" format="doxygen" pos:start="75:1" pos:end="78:3">/**
 * Length of the EAPOL-Key key confirmation key (KCK) used to calculate
 * MIC over EAPOL frame and validate an EAPOL packet (128 bits)
 */</comment>
<cpp:define pos:start="79:1" pos:end="79:31">#<cpp:directive pos:start="79:2" pos:end="79:7">define</cpp:directive> <cpp:macro pos:start="79:9" pos:end="79:28"><name pos:start="79:9" pos:end="79:28">AIRPDCAP_WPA_KCK_LEN</name></cpp:macro> <cpp:value pos:start="79:30" pos:end="79:31">16</cpp:value></cpp:define>
<comment type="block" format="doxygen" pos:start="80:1" pos:end="82:3">/**
 *Offset of the Key MIC in the EAPOL packet body
 */</comment>
<cpp:define pos:start="83:1" pos:end="83:37">#<cpp:directive pos:start="83:2" pos:end="83:7">define</cpp:directive> <cpp:macro pos:start="83:9" pos:end="83:34"><name pos:start="83:9" pos:end="83:34">AIRPDCAP_WPA_MICKEY_OFFSET</name></cpp:macro> <cpp:value pos:start="83:36" pos:end="83:37">77</cpp:value></cpp:define>
<comment type="block" format="doxygen" pos:start="84:1" pos:end="87:3">/**
 * Maximum length of the EAPOL packet (it depends on the maximum MAC
 * frame size)
 */</comment>
<cpp:define pos:start="88:1" pos:end="88:39">#<cpp:directive pos:start="88:2" pos:end="88:7">define</cpp:directive> <cpp:macro pos:start="88:9" pos:end="88:34"><name pos:start="88:9" pos:end="88:34">AIRPDCAP_WPA_MAX_EAPOL_LEN</name></cpp:macro> <cpp:value pos:start="88:36" pos:end="88:39">4095</cpp:value></cpp:define>
<comment type="block" format="doxygen" pos:start="89:1" pos:end="95:3">/**
 * EAPOL Key Descriptor Version 1, used for all EAPOL-Key frames to and
 * from a STA when neither the group nor pairwise ciphers are CCMP for
 * Key Descriptor 1.
 * @note
 * Defined in 802.11i-2004, page 78
 */</comment>
<cpp:define pos:start="96:1" pos:end="96:39">#<cpp:directive pos:start="96:2" pos:end="96:7">define</cpp:directive> <cpp:macro pos:start="96:9" pos:end="96:37"><name pos:start="96:9" pos:end="96:37">AIRPDCAP_WPA_KEY_VER_NOT_CCMP</name></cpp:macro> <cpp:value pos:start="96:39" pos:end="96:39">1</cpp:value></cpp:define>
<comment type="block" format="doxygen" pos:start="97:1" pos:end="103:3">/**
 * EAPOL Key Descriptor Version 2, used for all EAPOL-Key frames to and
 * from a STA when either the pairwise or the group cipher is AES-CCMP
 * for Key Descriptor 2.
 * /note
 * Defined in 802.11i-2004, page 78
 */</comment>
<cpp:define pos:start="104:1" pos:end="104:39">#<cpp:directive pos:start="104:2" pos:end="104:7">define</cpp:directive> <cpp:macro pos:start="104:9" pos:end="104:37"><name pos:start="104:9" pos:end="104:37">AIRPDCAP_WPA_KEY_VER_AES_CCMP</name></cpp:macro> <cpp:value pos:start="104:39" pos:end="104:39">2</cpp:value></cpp:define>

<comment type="block" format="doxygen" pos:start="106:1" pos:end="106:80">/** Define EAPOL Key Descriptor type values:  use 254 for WPA and 2 for WPA2 **/</comment>
<cpp:define pos:start="107:1" pos:end="107:43">#<cpp:directive pos:start="107:2" pos:end="107:7">define</cpp:directive> <cpp:macro pos:start="107:9" pos:end="107:39"><name pos:start="107:9" pos:end="107:39">AIRPDCAP_RSN_WPA_KEY_DESCRIPTOR</name></cpp:macro> <cpp:value pos:start="107:41" pos:end="107:43">254</cpp:value></cpp:define>
<cpp:define pos:start="108:1" pos:end="108:42">#<cpp:directive pos:start="108:2" pos:end="108:7">define</cpp:directive> <cpp:macro pos:start="108:9" pos:end="108:40"><name pos:start="108:9" pos:end="108:40">AIRPDCAP_RSN_WPA2_KEY_DESCRIPTOR</name></cpp:macro> <cpp:value pos:start="108:42" pos:end="108:42">2</cpp:value></cpp:define>

<comment type="block" format="doxygen" pos:start="110:1" pos:end="110:78">/****************************************************************************/</comment>

<comment type="block" format="doxygen" pos:start="112:1" pos:end="112:78">/****************************************************************************/</comment>
<comment type="block" pos:start="113:1" pos:end="113:82">/*      Macro definitions                                                       */</comment>

<decl_stmt pos:start="115:1" pos:end="128:0"><decl pos:start="115:1" pos:end="115:36"><type pos:start="115:1" pos:end="115:19"><specifier pos:start="115:1" pos:end="115:6">extern</specifier> <specifier pos:start="115:8" pos:end="115:12">const</specifier> <name pos:start="115:14" pos:end="115:19">UINT32</name></type> <name pos:start="115:21" pos:end="115:36"><name pos:start="115:21" pos:end="115:31">crc32_table</name><index pos:start="115:32" pos:end="115:36">[<expr pos:start="115:33" pos:end="115:35"><literal type="number" pos:start="115:33" pos:end="115:35">256</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:define pos:start="116:1" pos:end="116:74">#<cpp:directive pos:start="116:2" pos:end="116:7">define</cpp:directive> <cpp:macro pos:start="116:9" pos:end="116:20"><name pos:start="116:9" pos:end="116:11">CRC</name><parameter_list pos:start="116:12" pos:end="116:20">(<parameter pos:start="116:13" pos:end="116:15"><type pos:start="116:13" pos:end="116:15"><name pos:start="116:13" pos:end="116:15">crc</name></type></parameter>, <parameter pos:start="116:18" pos:end="116:19"><type pos:start="116:18" pos:end="116:19"><name pos:start="116:18" pos:end="116:19">ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="116:22" pos:end="116:74">(crc = (crc &gt;&gt; 8) ^ crc32_table[(crc ^ (ch)) &amp; 0xff])</cpp:value></cpp:define>

<cpp:define pos:start="118:1" pos:end="118:39">#<cpp:directive pos:start="118:2" pos:end="118:7">define</cpp:directive> <cpp:macro pos:start="118:9" pos:end="118:28"><name pos:start="118:9" pos:end="118:23">AIRPDCAP_GET_TK</name><parameter_list pos:start="118:24" pos:end="118:28">(<parameter pos:start="118:25" pos:end="118:27"><type pos:start="118:25" pos:end="118:27"><name pos:start="118:25" pos:end="118:27">ptk</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="118:30" pos:end="118:39">(ptk + 32)</cpp:value></cpp:define>

<comment type="block" format="doxygen" pos:start="120:1" pos:end="120:78">/****************************************************************************/</comment>

<comment type="block" format="doxygen" pos:start="122:1" pos:end="122:78">/****************************************************************************/</comment>
<comment type="block" pos:start="123:1" pos:end="123:82">/*      Type definitions                                                        */</comment>

<comment type="block" pos:start="125:1" pos:end="125:82">/*      Internal function prototype declarations                                */</comment>

<cpp:ifdef pos:start="127:1" pos:end="127:18">#<cpp:directive pos:start="127:2" pos:end="127:6">ifdef</cpp:directive> <name pos:start="127:8" pos:end="127:18">__cplusplus</name></cpp:ifdef>
<extern pos:start="128:1" pos:end="278:0">extern <literal type="string" pos:start="128:8" pos:end="128:10">"C"</literal>
<block pos:start="129:1" pos:end="278:0">{<block_content pos:start="144:5" pos:end="269:0">
<cpp:endif pos:start="130:1" pos:end="130:6">#<cpp:directive pos:start="130:2" pos:end="130:6">endif</cpp:directive></cpp:endif>

    <comment type="block" format="doxygen" pos:start="132:5" pos:end="143:7">/**
     * It is a step of the PBKDF2 (specifically the PKCS #5 v2.0) defined in
     * the RFC 2898 to derive a key (used as PMK in WPA)
     * @param ppbytes [IN] pointer to a password (sequence of between 8 and
     * 63 ASCII encoded characters)
     * @param ssid [IN] pointer to the SSID string encoded in max 32 ASCII
     * encoded characters
     * @param iterations [IN] times to hash the password (4096 for WPA)
     * @param count [IN] ???
     * @param output [OUT] pointer to a preallocated buffer of
     * SHA1_DIGEST_LEN characters that will contain a part of the key
     */</comment>
    <function_decl pos:start="144:5" pos:end="151:23"><type pos:start="144:5" pos:end="144:14"><specifier pos:start="144:5" pos:end="144:10">static</specifier> <name pos:start="144:12" pos:end="144:14">INT</name></type> <name pos:start="144:16" pos:end="144:38">AirPDcapRsnaPwd2PskStep</name><parameter_list pos:start="144:39" pos:end="151:22">(
        <parameter pos:start="145:9" pos:end="145:29"><decl pos:start="145:9" pos:end="145:29"><type pos:start="145:9" pos:end="145:29"><specifier pos:start="145:9" pos:end="145:13">const</specifier> <name pos:start="145:15" pos:end="145:20">guint8</name> <modifier pos:start="145:22" pos:end="145:22">*</modifier></type><name pos:start="145:23" pos:end="145:29">ppbytes</name></decl></parameter>,
        <parameter pos:start="146:9" pos:end="146:30"><decl pos:start="146:9" pos:end="146:30"><type pos:start="146:9" pos:end="146:30"><specifier pos:start="146:9" pos:end="146:13">const</specifier> <name pos:start="146:15" pos:end="146:19">guint</name></type> <name pos:start="146:21" pos:end="146:30">passLength</name></decl></parameter>,
        <parameter pos:start="147:9" pos:end="147:24"><decl pos:start="147:9" pos:end="147:24"><type pos:start="147:9" pos:end="147:24"><specifier pos:start="147:9" pos:end="147:13">const</specifier> <name pos:start="147:15" pos:end="147:18">CHAR</name> <modifier pos:start="147:20" pos:end="147:20">*</modifier></type><name pos:start="147:21" pos:end="147:24">ssid</name></decl></parameter>,
        <parameter pos:start="148:9" pos:end="148:31"><decl pos:start="148:9" pos:end="148:31"><type pos:start="148:9" pos:end="148:31"><specifier pos:start="148:9" pos:end="148:13">const</specifier> <name pos:start="148:15" pos:end="148:20">size_t</name></type> <name pos:start="148:22" pos:end="148:31">ssidLength</name></decl></parameter>,
        <parameter pos:start="149:9" pos:end="149:28"><decl pos:start="149:9" pos:end="149:28"><type pos:start="149:9" pos:end="149:28"><specifier pos:start="149:9" pos:end="149:13">const</specifier> <name pos:start="149:15" pos:end="149:17">INT</name></type> <name pos:start="149:19" pos:end="149:28">iterations</name></decl></parameter>,
        <parameter pos:start="150:9" pos:end="150:23"><decl pos:start="150:9" pos:end="150:23"><type pos:start="150:9" pos:end="150:23"><specifier pos:start="150:9" pos:end="150:13">const</specifier> <name pos:start="150:15" pos:end="150:17">INT</name></type> <name pos:start="150:19" pos:end="150:23">count</name></decl></parameter>,
        <parameter pos:start="151:9" pos:end="151:21"><decl pos:start="151:9" pos:end="151:21"><type pos:start="151:9" pos:end="151:21"><name pos:start="151:9" pos:end="151:13">UCHAR</name> <modifier pos:start="151:15" pos:end="151:15">*</modifier></type><name pos:start="151:16" pos:end="151:21">output</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="doxygen" pos:start="153:5" pos:end="164:7">/**
     * It calculates the passphrase-to-PSK mapping reccomanded for use with
     * RSNAs. This implementation uses the PBKDF2 method defined in the RFC
     * 2898.
     * @param passphrase [IN] pointer to a password (sequence of between 8 and
     * 63 ASCII encoded characters)
     * @param ssid [IN] pointer to the SSID string encoded in max 32 ASCII
     * encoded characters
     * @param output [OUT] calculated PSK (to use as PMK in WPA)
     * @note
     * Described in 802.11i-2004, page 165
     */</comment>
    <function_decl pos:start="165:5" pos:end="169:23"><type pos:start="165:5" pos:end="165:14"><specifier pos:start="165:5" pos:end="165:10">static</specifier> <name pos:start="165:12" pos:end="165:14">INT</name></type> <name pos:start="165:16" pos:end="165:34">AirPDcapRsnaPwd2Psk</name><parameter_list pos:start="165:35" pos:end="169:22">(
        <parameter pos:start="166:9" pos:end="166:30"><decl pos:start="166:9" pos:end="166:30"><type pos:start="166:9" pos:end="166:30"><specifier pos:start="166:9" pos:end="166:13">const</specifier> <name pos:start="166:15" pos:end="166:18">CHAR</name> <modifier pos:start="166:20" pos:end="166:20">*</modifier></type><name pos:start="166:21" pos:end="166:30">passphrase</name></decl></parameter>,
        <parameter pos:start="167:9" pos:end="167:24"><decl pos:start="167:9" pos:end="167:24"><type pos:start="167:9" pos:end="167:24"><specifier pos:start="167:9" pos:end="167:13">const</specifier> <name pos:start="167:15" pos:end="167:18">CHAR</name> <modifier pos:start="167:20" pos:end="167:20">*</modifier></type><name pos:start="167:21" pos:end="167:24">ssid</name></decl></parameter>,
        <parameter pos:start="168:9" pos:end="168:31"><decl pos:start="168:9" pos:end="168:31"><type pos:start="168:9" pos:end="168:31"><specifier pos:start="168:9" pos:end="168:13">const</specifier> <name pos:start="168:15" pos:end="168:20">size_t</name></type> <name pos:start="168:22" pos:end="168:31">ssidLength</name></decl></parameter>,
        <parameter pos:start="169:9" pos:end="169:21"><decl pos:start="169:9" pos:end="169:21"><type pos:start="169:9" pos:end="169:21"><name pos:start="169:9" pos:end="169:13">UCHAR</name> <modifier pos:start="169:15" pos:end="169:15">*</modifier></type><name pos:start="169:16" pos:end="169:21">output</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="171:5" pos:end="177:20"><type pos:start="171:5" pos:end="171:14"><specifier pos:start="171:5" pos:end="171:10">static</specifier> <name pos:start="171:12" pos:end="171:14">INT</name></type> <name pos:start="171:16" pos:end="171:30">AirPDcapRsnaMng</name><parameter_list pos:start="171:31" pos:end="177:19">(
        <parameter pos:start="172:9" pos:end="172:27"><decl pos:start="172:9" pos:end="172:27"><type pos:start="172:9" pos:end="172:27"><name pos:start="172:9" pos:end="172:13">UCHAR</name> <modifier pos:start="172:15" pos:end="172:15">*</modifier></type><name pos:start="172:16" pos:end="172:27">decrypt_data</name></decl></parameter>,
        <parameter pos:start="173:9" pos:end="173:28"><decl pos:start="173:9" pos:end="173:28"><type pos:start="173:9" pos:end="173:28"><name pos:start="173:9" pos:end="173:13">guint</name></type> <name pos:start="173:15" pos:end="173:28">mac_header_len</name></decl></parameter>,
        <parameter pos:start="174:9" pos:end="174:26"><decl pos:start="174:9" pos:end="174:26"><type pos:start="174:9" pos:end="174:26"><name pos:start="174:9" pos:end="174:13">guint</name> <modifier pos:start="174:15" pos:end="174:15">*</modifier></type><name pos:start="174:16" pos:end="174:26">decrypt_len</name></decl></parameter>,
        <parameter pos:start="175:9" pos:end="175:30"><decl pos:start="175:9" pos:end="175:30"><type pos:start="175:9" pos:end="175:30"><name pos:start="175:9" pos:end="175:26">PAIRPDCAP_KEY_ITEM</name></type> <name pos:start="175:28" pos:end="175:30">key</name></decl></parameter>,
        <parameter pos:start="176:9" pos:end="176:36"><decl pos:start="176:9" pos:end="176:36"><type pos:start="176:9" pos:end="176:36"><name pos:start="176:9" pos:end="176:32">AIRPDCAP_SEC_ASSOCIATION</name> <modifier pos:start="176:34" pos:end="176:34">*</modifier></type><name pos:start="176:35" pos:end="176:36">sa</name></decl></parameter>,
        <parameter pos:start="177:9" pos:end="177:18"><decl pos:start="177:9" pos:end="177:18"><type pos:start="177:9" pos:end="177:18"><name pos:start="177:9" pos:end="177:11">INT</name></type> <name pos:start="177:13" pos:end="177:18">offset</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="179:5" pos:end="186:20"><type pos:start="179:5" pos:end="179:14"><specifier pos:start="179:5" pos:end="179:10">static</specifier> <name pos:start="179:12" pos:end="179:14">INT</name></type> <name pos:start="179:16" pos:end="179:29">AirPDcapWepMng</name><parameter_list pos:start="179:30" pos:end="186:19">(
        <parameter pos:start="180:9" pos:end="180:29"><decl pos:start="180:9" pos:end="180:29"><type pos:start="180:9" pos:end="180:29"><name pos:start="180:9" pos:end="180:25">PAIRPDCAP_CONTEXT</name></type> <name pos:start="180:27" pos:end="180:29">ctx</name></decl></parameter>,
        <parameter pos:start="181:9" pos:end="181:27"><decl pos:start="181:9" pos:end="181:27"><type pos:start="181:9" pos:end="181:27"><name pos:start="181:9" pos:end="181:13">UCHAR</name> <modifier pos:start="181:15" pos:end="181:15">*</modifier></type><name pos:start="181:16" pos:end="181:27">decrypt_data</name></decl></parameter>,
        <parameter pos:start="182:9" pos:end="182:28"><decl pos:start="182:9" pos:end="182:28"><type pos:start="182:9" pos:end="182:28"><name pos:start="182:9" pos:end="182:13">guint</name></type> <name pos:start="182:15" pos:end="182:28">mac_header_len</name></decl></parameter>,
        <parameter pos:start="183:9" pos:end="183:26"><decl pos:start="183:9" pos:end="183:26"><type pos:start="183:9" pos:end="183:26"><name pos:start="183:9" pos:end="183:13">guint</name> <modifier pos:start="183:15" pos:end="183:15">*</modifier></type><name pos:start="183:16" pos:end="183:26">decrypt_len</name></decl></parameter>,
        <parameter pos:start="184:9" pos:end="184:30"><decl pos:start="184:9" pos:end="184:30"><type pos:start="184:9" pos:end="184:30"><name pos:start="184:9" pos:end="184:26">PAIRPDCAP_KEY_ITEM</name></type> <name pos:start="184:28" pos:end="184:30">key</name></decl></parameter>,
        <parameter pos:start="185:9" pos:end="185:36"><decl pos:start="185:9" pos:end="185:36"><type pos:start="185:9" pos:end="185:36"><name pos:start="185:9" pos:end="185:32">AIRPDCAP_SEC_ASSOCIATION</name> <modifier pos:start="185:34" pos:end="185:34">*</modifier></type><name pos:start="185:35" pos:end="185:36">sa</name></decl></parameter>,
        <parameter pos:start="186:9" pos:end="186:18"><decl pos:start="186:9" pos:end="186:18"><type pos:start="186:9" pos:end="186:18"><name pos:start="186:9" pos:end="186:11">INT</name></type> <name pos:start="186:13" pos:end="186:18">offset</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="188:5" pos:end="193:29"><type pos:start="188:5" pos:end="188:14"><specifier pos:start="188:5" pos:end="188:10">static</specifier> <name pos:start="188:12" pos:end="188:14">INT</name></type> <name pos:start="188:16" pos:end="188:38">AirPDcapRsna4WHandshake</name><parameter_list pos:start="188:39" pos:end="193:28">(
        <parameter pos:start="189:9" pos:end="189:29"><decl pos:start="189:9" pos:end="189:29"><type pos:start="189:9" pos:end="189:29"><name pos:start="189:9" pos:end="189:25">PAIRPDCAP_CONTEXT</name></type> <name pos:start="189:27" pos:end="189:29">ctx</name></decl></parameter>,
        <parameter pos:start="190:9" pos:end="190:25"><decl pos:start="190:9" pos:end="190:25"><type pos:start="190:9" pos:end="190:25"><specifier pos:start="190:9" pos:end="190:13">const</specifier> <name pos:start="190:15" pos:end="190:19">UCHAR</name> <modifier pos:start="190:21" pos:end="190:21">*</modifier></type><name pos:start="190:22" pos:end="190:25">data</name></decl></parameter>,
        <parameter pos:start="191:9" pos:end="191:36"><decl pos:start="191:9" pos:end="191:36"><type pos:start="191:9" pos:end="191:36"><name pos:start="191:9" pos:end="191:32">AIRPDCAP_SEC_ASSOCIATION</name> <modifier pos:start="191:34" pos:end="191:34">*</modifier></type><name pos:start="191:35" pos:end="191:36">sa</name></decl></parameter>,
        <parameter pos:start="192:9" pos:end="192:18"><decl pos:start="192:9" pos:end="192:18"><type pos:start="192:9" pos:end="192:18"><name pos:start="192:9" pos:end="192:11">INT</name></type> <name pos:start="192:13" pos:end="192:18">offset</name></decl></parameter>,
        <parameter pos:start="193:9" pos:end="193:27"><decl pos:start="193:9" pos:end="193:27"><type pos:start="193:9" pos:end="193:27"><specifier pos:start="193:9" pos:end="193:13">const</specifier> <name pos:start="193:15" pos:end="193:19">guint</name></type> <name pos:start="193:21" pos:end="193:27">tot_len</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="block" format="doxygen" pos:start="194:5" pos:end="203:7">/**
     * It checks whether the specified key is corrected or not.
     * @note
     * For a standard WEP key the length will be changed to the standard
     * length, and the type changed in a generic WEP key.
     * @param key [IN] pointer to the key to validate
     * @return
     * - TRUE: the key contains valid fields and values
     * - FALSE: the key has some invalid field or value
     */</comment>
    <function_decl pos:start="204:5" pos:end="205:32"><type pos:start="204:5" pos:end="204:14"><specifier pos:start="204:5" pos:end="204:10">static</specifier> <name pos:start="204:12" pos:end="204:14">INT</name></type> <name pos:start="204:16" pos:end="204:34">AirPDcapValidateKey</name><parameter_list pos:start="204:35" pos:end="205:31">(
        <parameter pos:start="205:9" pos:end="205:30"><decl pos:start="205:9" pos:end="205:30"><type pos:start="205:9" pos:end="205:26"><name pos:start="205:9" pos:end="205:26">PAIRPDCAP_KEY_ITEM</name></type> <name pos:start="205:28" pos:end="205:30">key</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="207:5" pos:end="211:24"><type pos:start="207:5" pos:end="207:14"><specifier pos:start="207:5" pos:end="207:10">static</specifier> <name pos:start="207:12" pos:end="207:14">INT</name></type> <name pos:start="207:16" pos:end="207:35">AirPDcapRsnaMicCheck</name><parameter_list pos:start="207:36" pos:end="211:23">(
        <parameter pos:start="208:9" pos:end="208:20"><decl pos:start="208:9" pos:end="208:20"><type pos:start="208:9" pos:end="208:20"><name pos:start="208:9" pos:end="208:13">UCHAR</name> <modifier pos:start="208:15" pos:end="208:15">*</modifier></type><name pos:start="208:16" pos:end="208:20">eapol</name></decl></parameter>,
        <parameter pos:start="209:9" pos:end="209:24"><decl pos:start="209:9" pos:end="209:24"><type pos:start="209:9" pos:end="209:24"><name pos:start="209:9" pos:end="209:14">USHORT</name></type> <name pos:start="209:16" pos:end="209:24">eapol_len</name></decl></parameter>,
        <parameter pos:start="210:9" pos:end="210:39"><decl pos:start="210:9" pos:end="210:39"><type pos:start="210:9" pos:end="210:17"><name pos:start="210:9" pos:end="210:13">UCHAR</name></type> <name pos:start="210:15" pos:end="210:39"><name pos:start="210:15" pos:end="210:17">KCK</name><index pos:start="210:18" pos:end="210:39">[<expr pos:start="210:19" pos:end="210:38"><name pos:start="210:19" pos:end="210:38">AIRPDCAP_WPA_KCK_LEN</name></expr>]</index></name></decl></parameter>,
        <parameter pos:start="211:9" pos:end="211:22"><decl pos:start="211:9" pos:end="211:22"><type pos:start="211:9" pos:end="211:22"><name pos:start="211:9" pos:end="211:14">USHORT</name></type> <name pos:start="211:16" pos:end="211:22">key_ver</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="doxygen" pos:start="213:5" pos:end="220:7">/**
     * @param ctx [IN] pointer to the current context
     * @param id [IN] id of the association (composed by BSSID and MAC of
     * the station)
     * @return
     * - index of the Security Association structure if found
     * - -1, if the specified addresses pair BSSID-STA MAC has not been found
     */</comment>
    <function_decl pos:start="221:5" pos:end="223:41"><type pos:start="221:5" pos:end="221:14"><specifier pos:start="221:5" pos:end="221:10">static</specifier> <name pos:start="221:12" pos:end="221:14">INT</name></type> <name pos:start="221:16" pos:end="221:28">AirPDcapGetSa</name><parameter_list pos:start="221:29" pos:end="223:40">(
        <parameter pos:start="222:9" pos:end="222:29"><decl pos:start="222:9" pos:end="222:29"><type pos:start="222:9" pos:end="222:29"><name pos:start="222:9" pos:end="222:25">PAIRPDCAP_CONTEXT</name></type> <name pos:start="222:27" pos:end="222:29">ctx</name></decl></parameter>,
        <parameter pos:start="223:9" pos:end="223:39"><decl pos:start="223:9" pos:end="223:39"><type pos:start="223:9" pos:end="223:39"><name pos:start="223:9" pos:end="223:35">AIRPDCAP_SEC_ASSOCIATION_ID</name> <modifier pos:start="223:37" pos:end="223:37">*</modifier></type><name pos:start="223:38" pos:end="223:39">id</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="225:5" pos:end="227:41"><type pos:start="225:5" pos:end="225:14"><specifier pos:start="225:5" pos:end="225:10">static</specifier> <name pos:start="225:12" pos:end="225:14">INT</name></type> <name pos:start="225:16" pos:end="225:30">AirPDcapStoreSa</name><parameter_list pos:start="225:31" pos:end="227:40">(
        <parameter pos:start="226:9" pos:end="226:29"><decl pos:start="226:9" pos:end="226:29"><type pos:start="226:9" pos:end="226:29"><name pos:start="226:9" pos:end="226:25">PAIRPDCAP_CONTEXT</name></type> <name pos:start="226:27" pos:end="226:29">ctx</name></decl></parameter>,
        <parameter pos:start="227:9" pos:end="227:39"><decl pos:start="227:9" pos:end="227:39"><type pos:start="227:9" pos:end="227:39"><name pos:start="227:9" pos:end="227:35">AIRPDCAP_SEC_ASSOCIATION_ID</name> <modifier pos:start="227:37" pos:end="227:37">*</modifier></type><name pos:start="227:38" pos:end="227:39">id</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="229:5" pos:end="231:41"><type pos:start="229:5" pos:end="229:14"><specifier pos:start="229:5" pos:end="229:10">static</specifier> <name pos:start="229:12" pos:end="229:14">INT</name></type> <name pos:start="229:16" pos:end="229:35">AirPDcapGetSaAddress</name><parameter_list pos:start="229:36" pos:end="231:40">(
        <parameter pos:start="230:9" pos:end="230:45"><decl pos:start="230:9" pos:end="230:45"><type pos:start="230:9" pos:end="230:45"><specifier pos:start="230:9" pos:end="230:13">const</specifier> <name pos:start="230:15" pos:end="230:38">AIRPDCAP_MAC_FRAME_ADDR4</name> <modifier pos:start="230:40" pos:end="230:40">*</modifier></type><name pos:start="230:41" pos:end="230:45">frame</name></decl></parameter>,
        <parameter pos:start="231:9" pos:end="231:39"><decl pos:start="231:9" pos:end="231:39"><type pos:start="231:9" pos:end="231:39"><name pos:start="231:9" pos:end="231:35">AIRPDCAP_SEC_ASSOCIATION_ID</name> <modifier pos:start="231:37" pos:end="231:37">*</modifier></type><name pos:start="231:38" pos:end="231:39">id</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="233:5" pos:end="234:47"><type pos:start="233:5" pos:end="233:24"><specifier pos:start="233:5" pos:end="233:10">static</specifier> <specifier pos:start="233:12" pos:end="233:16">const</specifier> <name pos:start="233:18" pos:end="233:22">UCHAR</name> <modifier pos:start="233:24" pos:end="233:24">*</modifier></type><name pos:start="233:25" pos:end="233:45">AirPDcapGetStaAddress</name><parameter_list pos:start="233:46" pos:end="234:46">(
        <parameter pos:start="234:9" pos:end="234:45"><decl pos:start="234:9" pos:end="234:45"><type pos:start="234:9" pos:end="234:40"><specifier pos:start="234:9" pos:end="234:13">const</specifier> <name pos:start="234:15" pos:end="234:38">AIRPDCAP_MAC_FRAME_ADDR4</name> <modifier pos:start="234:40" pos:end="234:40">*</modifier></type><name pos:start="234:41" pos:end="234:45">frame</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="236:5" pos:end="237:47"><type pos:start="236:5" pos:end="236:24"><specifier pos:start="236:5" pos:end="236:10">static</specifier> <specifier pos:start="236:12" pos:end="236:16">const</specifier> <name pos:start="236:18" pos:end="236:22">UCHAR</name> <modifier pos:start="236:24" pos:end="236:24">*</modifier></type><name pos:start="236:25" pos:end="236:47">AirPDcapGetBssidAddress</name><parameter_list pos:start="236:48" pos:end="237:46">(
        <parameter pos:start="237:9" pos:end="237:45"><decl pos:start="237:9" pos:end="237:45"><type pos:start="237:9" pos:end="237:40"><specifier pos:start="237:9" pos:end="237:13">const</specifier> <name pos:start="237:15" pos:end="237:38">AIRPDCAP_MAC_FRAME_ADDR4</name> <modifier pos:start="237:40" pos:end="237:40">*</modifier></type><name pos:start="237:41" pos:end="237:45">frame</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="239:5" pos:end="244:20"><type pos:start="239:5" pos:end="239:15"><specifier pos:start="239:5" pos:end="239:10">static</specifier> <name pos:start="239:12" pos:end="239:15">void</name></type> <name pos:start="239:17" pos:end="239:32">AirPDcapRsnaPrfX</name><parameter_list pos:start="239:33" pos:end="244:19">(
        <parameter pos:start="240:9" pos:end="240:36"><decl pos:start="240:9" pos:end="240:36"><type pos:start="240:9" pos:end="240:36"><name pos:start="240:9" pos:end="240:32">AIRPDCAP_SEC_ASSOCIATION</name> <modifier pos:start="240:34" pos:end="240:34">*</modifier></type><name pos:start="240:35" pos:end="240:36">sa</name></decl></parameter>,
        <parameter pos:start="241:9" pos:end="241:27"><decl pos:start="241:9" pos:end="241:27"><type pos:start="241:9" pos:end="241:23"><specifier pos:start="241:9" pos:end="241:13">const</specifier> <name pos:start="241:15" pos:end="241:19">UCHAR</name></type> <name pos:start="241:21" pos:end="241:27"><name pos:start="241:21" pos:end="241:23">pmk</name><index pos:start="241:24" pos:end="241:27">[<expr pos:start="241:25" pos:end="241:26"><literal type="number" pos:start="241:25" pos:end="241:26">32</literal></expr>]</index></name></decl></parameter>,
        <parameter pos:start="242:9" pos:end="242:30"><decl pos:start="242:9" pos:end="242:30"><type pos:start="242:9" pos:end="242:26"><specifier pos:start="242:9" pos:end="242:13">const</specifier> <name pos:start="242:15" pos:end="242:19">UCHAR</name></type> <name pos:start="242:21" pos:end="242:30"><name pos:start="242:21" pos:end="242:26">snonce</name><index pos:start="242:27" pos:end="242:30">[<expr pos:start="242:28" pos:end="242:29"><literal type="number" pos:start="242:28" pos:end="242:29">32</literal></expr>]</index></name></decl></parameter>,
        <parameter pos:start="243:9" pos:end="243:19"><decl pos:start="243:9" pos:end="243:19"><type pos:start="243:9" pos:end="243:19"><specifier pos:start="243:9" pos:end="243:13">const</specifier> <name pos:start="243:15" pos:end="243:17">INT</name></type> <name pos:start="243:19" pos:end="243:19">x</name></decl></parameter>, <comment type="block" pos:start="243:22" pos:end="243:63">/*      for TKIP 512, for CCMP 384      */</comment>
        <parameter pos:start="244:9" pos:end="244:18"><decl pos:start="244:9" pos:end="244:18"><type pos:start="244:9" pos:end="244:18"><name pos:start="244:9" pos:end="244:13">UCHAR</name> <modifier pos:start="244:15" pos:end="244:15">*</modifier></type><name pos:start="244:16" pos:end="244:18">ptk</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="doxygen" pos:start="246:5" pos:end="258:7">/**
     * @param sa  [IN/OUT] pointer to SA that will hold the key
     * @param data [IN] Frame
     * @param offset_rsne [IN] RSNE IE offset in the frame
     * @param offset_fte [IN] Fast BSS Transition IE offset in the frame
     * @param offset_timeout [IN] Timeout Interval IE offset in the frame
     * @param offset_link [IN] Link Identifier IE offset in the frame
     * @param action [IN] Tdls Action code (response or confirm)
     *
     * @return
     *  AIRPDCAP_RET_SUCCESS if Key has been sucessfully derived (and MIC verified)
     *  AIRPDCAP_RET_UNSUCCESS otherwise
     */</comment>
    <function_decl pos:start="259:5" pos:end="269:0"><type pos:start="259:5" pos:end="259:14"><specifier pos:start="259:5" pos:end="259:10">static</specifier> <name pos:start="259:12" pos:end="259:14">INT</name></type>
    <name pos:start="260:5" pos:end="260:25">AirPDcapTDLSDeriveKey</name><parameter_list pos:start="260:26" pos:end="267:22">(
        <parameter pos:start="261:9" pos:end="261:36"><decl pos:start="261:9" pos:end="261:36"><type pos:start="261:9" pos:end="261:36"><name pos:start="261:9" pos:end="261:33">PAIRPDCAP_SEC_ASSOCIATION</name></type> <name pos:start="261:35" pos:end="261:36">sa</name></decl></parameter>,
        <parameter pos:start="262:9" pos:end="262:26"><decl pos:start="262:9" pos:end="262:26"><type pos:start="262:9" pos:end="262:26"><specifier pos:start="262:9" pos:end="262:13">const</specifier> <name pos:start="262:15" pos:end="262:20">guint8</name> <modifier pos:start="262:22" pos:end="262:22">*</modifier></type><name pos:start="262:23" pos:end="262:26">data</name></decl></parameter>,
        <parameter pos:start="263:9" pos:end="263:25"><decl pos:start="263:9" pos:end="263:25"><type pos:start="263:9" pos:end="263:25"><name pos:start="263:9" pos:end="263:13">guint</name></type> <name pos:start="263:15" pos:end="263:25">offset_rsne</name></decl></parameter>,
        <parameter pos:start="264:9" pos:end="264:24"><decl pos:start="264:9" pos:end="264:24"><type pos:start="264:9" pos:end="264:24"><name pos:start="264:9" pos:end="264:13">guint</name></type> <name pos:start="264:15" pos:end="264:24">offset_fte</name></decl></parameter>,
        <parameter pos:start="265:9" pos:end="265:28"><decl pos:start="265:9" pos:end="265:28"><type pos:start="265:9" pos:end="265:28"><name pos:start="265:9" pos:end="265:13">guint</name></type> <name pos:start="265:15" pos:end="265:28">offset_timeout</name></decl></parameter>,
        <parameter pos:start="266:9" pos:end="266:25"><decl pos:start="266:9" pos:end="266:25"><type pos:start="266:9" pos:end="266:25"><name pos:start="266:9" pos:end="266:13">guint</name></type> <name pos:start="266:15" pos:end="266:25">offset_link</name></decl></parameter>,
        <parameter pos:start="267:9" pos:end="267:21"><decl pos:start="267:9" pos:end="267:21"><type pos:start="267:9" pos:end="267:21"><name pos:start="267:9" pos:end="267:14">guint8</name></type> <name pos:start="267:16" pos:end="267:21">action</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifdef pos:start="268:1" pos:end="268:18">#<cpp:directive pos:start="268:2" pos:end="268:6">ifdef</cpp:directive> <name pos:start="268:8" pos:end="268:18">__cplusplus</name></cpp:ifdef>
</block_content>}</block></extern>
<cpp:endif pos:start="270:1" pos:end="270:6">#<cpp:directive pos:start="270:2" pos:end="270:6">endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen" pos:start="272:1" pos:end="272:78">/****************************************************************************/</comment>

<comment type="block" format="doxygen" pos:start="274:1" pos:end="274:78">/****************************************************************************/</comment>
<comment type="block" pos:start="275:1" pos:end="275:82">/* Exported function definitions                                                */</comment>

<cpp:ifdef pos:start="277:1" pos:end="277:18">#<cpp:directive pos:start="277:2" pos:end="277:6">ifdef</cpp:directive> <name pos:start="277:8" pos:end="277:18">__cplusplus</name></cpp:ifdef>
<extern pos:start="278:1" pos:end="1168:0">extern <literal type="string" pos:start="278:8" pos:end="278:10">"C"</literal>
<block pos:start="279:1" pos:end="1168:0">{<block_content pos:start="282:5" pos:end="1159:0">
<cpp:endif pos:start="280:1" pos:end="280:6">#<cpp:directive pos:start="280:2" pos:end="280:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="282:5" pos:end="289:0"><decl pos:start="282:5" pos:end="282:71"><type pos:start="282:5" pos:end="282:16"><specifier pos:start="282:5" pos:end="282:9">const</specifier> <name pos:start="282:11" pos:end="282:16">guint8</name></type> <name pos:start="282:18" pos:end="282:32"><name pos:start="282:18" pos:end="282:30">broadcast_mac</name><index pos:start="282:31" pos:end="282:32">[]</index></name> <init pos:start="282:34" pos:end="282:71">= <expr pos:start="282:36" pos:end="282:71"><block pos:start="282:36" pos:end="282:71">{<expr pos:start="282:37" pos:end="282:40"><literal type="number" pos:start="282:37" pos:end="282:40">0xFF</literal></expr>, <expr pos:start="282:43" pos:end="282:46"><literal type="number" pos:start="282:43" pos:end="282:46">0xFF</literal></expr>, <expr pos:start="282:49" pos:end="282:52"><literal type="number" pos:start="282:49" pos:end="282:52">0xFF</literal></expr>, <expr pos:start="282:55" pos:end="282:58"><literal type="number" pos:start="282:55" pos:end="282:58">0xFF</literal></expr>, <expr pos:start="282:61" pos:end="282:64"><literal type="number" pos:start="282:61" pos:end="282:64">0xFF</literal></expr>, <expr pos:start="282:67" pos:end="282:70"><literal type="number" pos:start="282:67" pos:end="282:70">0xFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define pos:start="284:1" pos:end="284:25">#<cpp:directive pos:start="284:2" pos:end="284:7">define</cpp:directive> <cpp:macro pos:start="284:9" pos:end="284:22"><name pos:start="284:9" pos:end="284:22">EAPKEY_MIC_LEN</name></cpp:macro> <cpp:value pos:start="284:24" pos:end="284:25">16</cpp:value></cpp:define> <comment type="block" pos:start="284:27" pos:end="284:90">/* length of the MIC key for EAPoL_Key packet's MIC using MD5 */</comment>
<cpp:define pos:start="285:1" pos:end="285:20">#<cpp:directive pos:start="285:2" pos:end="285:7">define</cpp:directive> <cpp:macro pos:start="285:9" pos:end="285:17"><name pos:start="285:9" pos:end="285:17">NONCE_LEN</name></cpp:macro> <cpp:value pos:start="285:19" pos:end="285:20">32</cpp:value></cpp:define>

<cpp:define pos:start="287:1" pos:end="287:29">#<cpp:directive pos:start="287:2" pos:end="287:7">define</cpp:directive> <cpp:macro pos:start="287:9" pos:end="287:26"><name pos:start="287:9" pos:end="287:26">TKIP_GROUP_KEY_LEN</name></cpp:macro> <cpp:value pos:start="287:28" pos:end="287:29">32</cpp:value></cpp:define>
<cpp:define pos:start="288:1" pos:end="288:29">#<cpp:directive pos:start="288:2" pos:end="288:7">define</cpp:directive> <cpp:macro pos:start="288:9" pos:end="288:26"><name pos:start="288:9" pos:end="288:26">CCMP_GROUP_KEY_LEN</name></cpp:macro> <cpp:value pos:start="288:28" pos:end="288:29">16</cpp:value></cpp:define>

    <typedef pos:start="290:5" pos:end="308:0">typedef <type pos:start="290:13" pos:end="302:5"><struct pos:start="290:13" pos:end="302:5">struct
    <block pos:start="291:5" pos:end="302:5">{
        <decl_stmt pos:start="292:9" pos:end="292:20"><decl pos:start="292:9" pos:end="292:19"><type pos:start="292:9" pos:end="292:14"><name pos:start="292:9" pos:end="292:14">guint8</name></type> <name pos:start="292:16" pos:end="292:19">type</name></decl>;</decl_stmt>
        <decl_stmt pos:start="293:9" pos:end="293:34"><decl pos:start="293:9" pos:end="293:33"><type pos:start="293:9" pos:end="293:14"><name pos:start="293:9" pos:end="293:14">guint8</name></type> <name pos:start="293:16" pos:end="293:33"><name pos:start="293:16" pos:end="293:30">key_information</name><index pos:start="293:31" pos:end="293:33">[<expr pos:start="293:32" pos:end="293:32"><literal type="number" pos:start="293:32" pos:end="293:32">2</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block" pos:start="293:36" pos:end="293:85">/* Make this an array to avoid alignment issues */</comment>
        <decl_stmt pos:start="294:9" pos:end="294:29"><decl pos:start="294:9" pos:end="294:28"><type pos:start="294:9" pos:end="294:14"><name pos:start="294:9" pos:end="294:14">guint8</name></type> <name pos:start="294:16" pos:end="294:28"><name pos:start="294:16" pos:end="294:25">key_length</name><index pos:start="294:26" pos:end="294:28">[<expr pos:start="294:27" pos:end="294:27"><literal type="number" pos:start="294:27" pos:end="294:27">2</literal></expr>]</index></name></decl>;</decl_stmt>      <comment type="block" pos:start="294:36" pos:end="294:85">/* Make this an array to avoid alignment issues */</comment>
        <decl_stmt pos:start="295:9" pos:end="295:33"><decl pos:start="295:9" pos:end="295:32"><type pos:start="295:9" pos:end="295:14"><name pos:start="295:9" pos:end="295:14">guint8</name></type> <name pos:start="295:16" pos:end="295:32"><name pos:start="295:16" pos:end="295:29">replay_counter</name><index pos:start="295:30" pos:end="295:32">[<expr pos:start="295:31" pos:end="295:31"><literal type="number" pos:start="295:31" pos:end="295:31">8</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="296:9" pos:end="296:36"><decl pos:start="296:9" pos:end="296:35"><type pos:start="296:9" pos:end="296:14"><name pos:start="296:9" pos:end="296:14">guint8</name></type> <name pos:start="296:16" pos:end="296:35"><name pos:start="296:16" pos:end="296:24">key_nonce</name><index pos:start="296:25" pos:end="296:35">[<expr pos:start="296:26" pos:end="296:34"><name pos:start="296:26" pos:end="296:34">NONCE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="297:9" pos:end="297:26"><decl pos:start="297:9" pos:end="297:25"><type pos:start="297:9" pos:end="297:14"><name pos:start="297:9" pos:end="297:14">guint8</name></type> <name pos:start="297:16" pos:end="297:25"><name pos:start="297:16" pos:end="297:21">key_iv</name><index pos:start="297:22" pos:end="297:25">[<expr pos:start="297:23" pos:end="297:24"><literal type="number" pos:start="297:23" pos:end="297:24">16</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="298:9" pos:end="298:39"><decl pos:start="298:9" pos:end="298:38"><type pos:start="298:9" pos:end="298:14"><name pos:start="298:9" pos:end="298:14">guint8</name></type> <name pos:start="298:16" pos:end="298:38"><name pos:start="298:16" pos:end="298:35">key_sequence_counter</name><index pos:start="298:36" pos:end="298:38">[<expr pos:start="298:37" pos:end="298:37"><literal type="number" pos:start="298:37" pos:end="298:37">8</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block" pos:start="298:41" pos:end="298:65">/* also called the RSC */</comment>
        <decl_stmt pos:start="299:9" pos:end="299:25"><decl pos:start="299:9" pos:end="299:24"><type pos:start="299:9" pos:end="299:14"><name pos:start="299:9" pos:end="299:14">guint8</name></type> <name pos:start="299:16" pos:end="299:24"><name pos:start="299:16" pos:end="299:21">key_id</name><index pos:start="299:22" pos:end="299:24">[<expr pos:start="299:23" pos:end="299:23"><literal type="number" pos:start="299:23" pos:end="299:23">8</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="300:9" pos:end="300:39"><decl pos:start="300:9" pos:end="300:38"><type pos:start="300:9" pos:end="300:14"><name pos:start="300:9" pos:end="300:14">guint8</name></type> <name pos:start="300:16" pos:end="300:38"><name pos:start="300:16" pos:end="300:22">key_mic</name><index pos:start="300:23" pos:end="300:38">[<expr pos:start="300:24" pos:end="300:37"><name pos:start="300:24" pos:end="300:37">EAPKEY_MIC_LEN</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="301:9" pos:end="301:31"><decl pos:start="301:9" pos:end="301:30"><type pos:start="301:9" pos:end="301:14"><name pos:start="301:9" pos:end="301:14">guint8</name></type> <name pos:start="301:16" pos:end="301:30"><name pos:start="301:16" pos:end="301:27">key_data_len</name><index pos:start="301:28" pos:end="301:30">[<expr pos:start="301:29" pos:end="301:29"><literal type="number" pos:start="301:29" pos:end="301:29">2</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block" pos:start="301:33" pos:end="301:102">/* Make this an array rather than a U16 to avoid alignment shifting */</comment>
    }</block></struct></type> <name pos:start="302:7" pos:end="302:19">EAPOL_RSN_KEY</name><operator pos:start="302:20" pos:end="302:20">,</operator> *<name pos:start="302:23" pos:end="302:37">P_EAPOL_RSN_KEY</name>;</typedef>

<comment type="block" pos:start="304:1" pos:end="304:73">/* Minimum possible key data size (at least one GTK KDE with CCMP key) */</comment>
<cpp:define pos:start="305:1" pos:end="305:48">#<cpp:directive pos:start="305:2" pos:end="305:7">define</cpp:directive> <cpp:macro pos:start="305:9" pos:end="305:25"><name pos:start="305:9" pos:end="305:25">GROUP_KEY_MIN_LEN</name></cpp:macro> <cpp:value pos:start="305:27" pos:end="305:48">8 + CCMP_GROUP_KEY_LEN</cpp:value></cpp:define>
<comment type="block" pos:start="306:1" pos:end="306:77">/* Minimum possible group key msg size (group key msg using CCMP as cipher)*/</comment>
<cpp:define pos:start="307:1" pos:end="307:75">#<cpp:directive pos:start="307:2" pos:end="307:7">define</cpp:directive> <cpp:macro pos:start="307:9" pos:end="307:33"><name pos:start="307:9" pos:end="307:33">GROUP_KEY_PAYLOAD_LEN_MIN</name></cpp:macro> <cpp:value pos:start="307:35" pos:end="307:75">sizeof(EAPOL_RSN_KEY) + GROUP_KEY_MIN_LEN</cpp:value></cpp:define>

    <comment type="block" pos:start="309:5" pos:end="309:49">/* XXX - what if this doesn't get the key? */</comment>
    <function pos:start="310:5" pos:end="488:5"><type pos:start="310:5" pos:end="310:14"><specifier pos:start="310:5" pos:end="310:10">static</specifier> <name pos:start="310:12" pos:end="310:14">INT</name></type>
    <name pos:start="311:5" pos:end="311:34">AirPDcapDecryptWPABroadcastKey</name><parameter_list pos:start="311:35" pos:end="311:135">(<parameter pos:start="311:36" pos:end="311:63"><decl pos:start="311:36" pos:end="311:63"><type pos:start="311:36" pos:end="311:63"><specifier pos:start="311:36" pos:end="311:40">const</specifier> <name pos:start="311:42" pos:end="311:54">EAPOL_RSN_KEY</name> <modifier pos:start="311:56" pos:end="311:56">*</modifier></type><name pos:start="311:57" pos:end="311:63">pEAPKey</name></decl></parameter>, <parameter pos:start="311:66" pos:end="311:87"><decl pos:start="311:66" pos:end="311:87"><type pos:start="311:66" pos:end="311:87"><name pos:start="311:66" pos:end="311:71">guint8</name> <modifier pos:start="311:73" pos:end="311:73">*</modifier></type><name pos:start="311:74" pos:end="311:87">decryption_key</name></decl></parameter>, <parameter pos:start="311:90" pos:end="311:117"><decl pos:start="311:90" pos:end="311:117"><type pos:start="311:90" pos:end="311:117"><name pos:start="311:90" pos:end="311:114">PAIRPDCAP_SEC_ASSOCIATION</name></type> <name pos:start="311:116" pos:end="311:117">sa</name></decl></parameter>, <parameter pos:start="311:120" pos:end="311:134"><decl pos:start="311:120" pos:end="311:134"><type pos:start="311:120" pos:end="311:134"><name pos:start="311:120" pos:end="311:124">guint</name></type> <name pos:start="311:126" pos:end="311:134">eapol_len</name></decl></parameter>)</parameter_list>
    <block pos:start="312:5" pos:end="488:5">{<block_content pos:start="313:9" pos:end="487:46">
        <decl_stmt pos:start="313:9" pos:end="313:27"><decl pos:start="313:9" pos:end="313:26"><type pos:start="313:9" pos:end="313:14"><name pos:start="313:9" pos:end="313:14">guint8</name></type> <name pos:start="313:16" pos:end="313:26">key_version</name></decl>;</decl_stmt>
        <decl_stmt pos:start="314:9" pos:end="314:25"><decl pos:start="314:9" pos:end="314:24"><type pos:start="314:9" pos:end="314:16"><name pos:start="314:9" pos:end="314:14">guint8</name> <modifier pos:start="314:16" pos:end="314:16">*</modifier></type><name pos:start="314:17" pos:end="314:24">key_data</name></decl>;</decl_stmt>
        <decl_stmt pos:start="315:9" pos:end="315:31"><decl pos:start="315:9" pos:end="315:30"><type pos:start="315:9" pos:end="315:16"><name pos:start="315:9" pos:end="315:14">guint8</name> <modifier pos:start="315:16" pos:end="315:16">*</modifier></type><name pos:start="315:17" pos:end="315:30">szEncryptedKey</name></decl>;</decl_stmt>
        <decl_stmt pos:start="316:9" pos:end="316:34"><decl pos:start="316:9" pos:end="316:33"><type pos:start="316:9" pos:end="316:15"><name pos:start="316:9" pos:end="316:15">guint16</name></type> <name pos:start="316:17" pos:end="316:29">key_bytes_len</name> <init pos:start="316:31" pos:end="316:33">= <expr pos:start="316:33" pos:end="316:33"><literal type="number" pos:start="316:33" pos:end="316:33">0</literal></expr></init></decl>;</decl_stmt>          <comment type="block" pos:start="316:45" pos:end="316:84">/* Length of the total key data field */</comment>
        <decl_stmt pos:start="317:9" pos:end="317:24"><decl pos:start="317:9" pos:end="317:23"><type pos:start="317:9" pos:end="317:15"><name pos:start="317:9" pos:end="317:15">guint16</name></type> <name pos:start="317:17" pos:end="317:23">key_len</name></decl>;</decl_stmt>                    <comment type="block" pos:start="317:45" pos:end="317:73">/* Actual group key length */</comment>
        <decl_stmt pos:start="318:9" pos:end="318:43"><decl pos:start="318:9" pos:end="318:42"><type pos:start="318:9" pos:end="318:32"><specifier pos:start="318:9" pos:end="318:14">static</specifier> <name pos:start="318:16" pos:end="318:32">AIRPDCAP_KEY_ITEM</name></type> <name pos:start="318:34" pos:end="318:42">dummy_key</name></decl>;</decl_stmt> <comment type="block" pos:start="318:45" pos:end="318:106">/* needed in case AirPDcapRsnaMng() wants the key structure */</comment>
        <decl_stmt pos:start="319:9" pos:end="319:41"><decl pos:start="319:9" pos:end="319:40"><type pos:start="319:9" pos:end="319:34"><name pos:start="319:9" pos:end="319:32">AIRPDCAP_SEC_ASSOCIATION</name> <modifier pos:start="319:34" pos:end="319:34">*</modifier></type><name pos:start="319:35" pos:end="319:40">tmp_sa</name></decl>;</decl_stmt>

        <comment type="block" pos:start="321:9" pos:end="321:148">/* We skip verifying the MIC of the key. If we were implementing a WPA supplicant we'd want to verify, but for a sniffer it's not needed. */</comment>

        <comment type="block" pos:start="323:9" pos:end="323:89">/* Preparation for decrypting the group key -  determine group key data length */</comment>
        <comment type="block" pos:start="324:9" pos:end="324:81">/* depending on whether the pairwise key is TKIP or AES encryption key */</comment>
        <expr_stmt pos:start="325:9" pos:end="325:78"><expr pos:start="325:9" pos:end="325:77"><name pos:start="325:9" pos:end="325:19">key_version</name> <operator pos:start="325:21" pos:end="325:21">=</operator> <call pos:start="325:23" pos:end="325:77"><name pos:start="325:23" pos:end="325:48">AIRPDCAP_EAP_KEY_DESCR_VER</name><argument_list pos:start="325:49" pos:end="325:77">(<argument pos:start="325:50" pos:end="325:76"><expr pos:start="325:50" pos:end="325:76"><name pos:start="325:50" pos:end="325:76"><name pos:start="325:50" pos:end="325:56">pEAPKey</name><operator pos:start="325:57" pos:end="325:58">-&gt;</operator><name pos:start="325:59" pos:end="325:73">key_information</name><index pos:start="325:74" pos:end="325:76">[<expr pos:start="325:75" pos:end="325:75"><literal type="number" pos:start="325:75" pos:end="325:75">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="326:9" pos:end="341:9"><if pos:start="326:9" pos:end="330:9">if <condition pos:start="326:12" pos:end="326:57">(<expr pos:start="326:13" pos:end="326:56"><name pos:start="326:13" pos:end="326:23">key_version</name> <operator pos:start="326:25" pos:end="326:26">==</operator> <name pos:start="326:28" pos:end="326:56">AIRPDCAP_WPA_KEY_VER_NOT_CCMP</name></expr>)</condition>
        <block pos:start="327:9" pos:end="330:9">{<block_content pos:start="329:13" pos:end="329:57">
            <comment type="block" pos:start="328:13" pos:end="328:22">/* TKIP */</comment>
            <expr_stmt pos:start="329:13" pos:end="329:57"><expr pos:start="329:13" pos:end="329:56"><name pos:start="329:13" pos:end="329:25">key_bytes_len</name> <operator pos:start="329:27" pos:end="329:27">=</operator> <call pos:start="329:29" pos:end="329:56"><name pos:start="329:29" pos:end="329:35">pntoh16</name><argument_list pos:start="329:36" pos:end="329:56">(<argument pos:start="329:37" pos:end="329:55"><expr pos:start="329:37" pos:end="329:55"><name pos:start="329:37" pos:end="329:55"><name pos:start="329:37" pos:end="329:43">pEAPKey</name><operator pos:start="329:44" pos:end="329:45">-&gt;</operator><name pos:start="329:46" pos:end="329:55">key_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif" pos:start="331:9" pos:end="341:9">else if <condition pos:start="331:17" pos:end="331:62">(<expr pos:start="331:18" pos:end="331:61"><name pos:start="331:18" pos:end="331:28">key_version</name> <operator pos:start="331:30" pos:end="331:31">==</operator> <name pos:start="331:33" pos:end="331:61">AIRPDCAP_WPA_KEY_VER_AES_CCMP</name></expr>)</condition>
        <block pos:start="332:9" pos:end="341:9">{<block_content pos:start="334:13" pos:end="340:13">
            <comment type="block" pos:start="333:13" pos:end="333:21">/* AES */</comment>
            <expr_stmt pos:start="334:13" pos:end="334:59"><expr pos:start="334:13" pos:end="334:58"><name pos:start="334:13" pos:end="334:25">key_bytes_len</name> <operator pos:start="334:27" pos:end="334:27">=</operator> <call pos:start="334:29" pos:end="334:58"><name pos:start="334:29" pos:end="334:35">pntoh16</name><argument_list pos:start="334:36" pos:end="334:58">(<argument pos:start="334:37" pos:end="334:57"><expr pos:start="334:37" pos:end="334:57"><name pos:start="334:37" pos:end="334:57"><name pos:start="334:37" pos:end="334:43">pEAPKey</name><operator pos:start="334:44" pos:end="334:45">-&gt;</operator><name pos:start="334:46" pos:end="334:57">key_data_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="336:13" pos:end="336:64">/* AES keys must be at least 128 bits = 16 bytes. */</comment>
            <if_stmt pos:start="337:13" pos:end="340:13"><if pos:start="337:13" pos:end="340:13">if <condition pos:start="337:16" pos:end="337:35">(<expr pos:start="337:17" pos:end="337:34"><name pos:start="337:17" pos:end="337:29">key_bytes_len</name> <operator pos:start="337:31" pos:end="337:31">&lt;</operator> <literal type="number" pos:start="337:33" pos:end="337:34">16</literal></expr>)</condition>
            <block pos:start="338:13" pos:end="340:13">{<block_content pos:start="339:17" pos:end="339:55">
                <return pos:start="339:17" pos:end="339:55">return <expr pos:start="339:24" pos:end="339:54"><name pos:start="339:24" pos:end="339:54">AIRPDCAP_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="343:9" pos:end="346:9"><if pos:start="343:9" pos:end="346:9">if <condition pos:start="343:12" pos:end="343:99">(<expr pos:start="343:13" pos:end="343:98"><name pos:start="343:13" pos:end="343:64"><name pos:start="343:13" pos:end="343:25">key_bytes_len</name> <argument_list type="generic" pos:start="343:27" pos:end="343:64">&lt; <argument pos:start="343:29" pos:end="343:62"><expr pos:start="343:29" pos:end="343:62"><name pos:start="343:29" pos:end="343:45">GROUP_KEY_MIN_LEN</name> <operator pos:start="343:47" pos:end="343:48">||</operator> <name pos:start="343:50" pos:end="343:62">key_bytes_len</name></expr></argument> &gt;</argument_list></name> <name pos:start="343:66" pos:end="343:74">eapol_len</name> <operator pos:start="343:76" pos:end="343:76">-</operator> <sizeof pos:start="343:78" pos:end="343:98">sizeof<argument_list pos:start="343:84" pos:end="343:98">(<argument pos:start="343:85" pos:end="343:97"><expr pos:start="343:85" pos:end="343:97"><name pos:start="343:85" pos:end="343:97">EAPOL_RSN_KEY</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
        <block pos:start="344:9" pos:end="346:9">{<block_content pos:start="345:13" pos:end="345:51">
            <return pos:start="345:13" pos:end="345:51">return <expr pos:start="345:20" pos:end="345:50"><name pos:start="345:20" pos:end="345:50">AIRPDCAP_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="348:9" pos:end="348:87">/* Encrypted key is in the information element field of the EAPOL key packet */</comment>
        <expr_stmt pos:start="349:9" pos:end="349:61"><expr pos:start="349:9" pos:end="349:60"><name pos:start="349:9" pos:end="349:16">key_data</name> <operator pos:start="349:18" pos:end="349:18">=</operator> <operator pos:start="349:20" pos:end="349:20">(</operator><name pos:start="349:21" pos:end="349:26">guint8</name> <operator pos:start="349:28" pos:end="349:28">*</operator><operator pos:start="349:29" pos:end="349:29">)</operator><name pos:start="349:30" pos:end="349:36">pEAPKey</name> <operator pos:start="349:38" pos:end="349:38">+</operator> <sizeof pos:start="349:40" pos:end="349:60">sizeof<argument_list pos:start="349:46" pos:end="349:60">(<argument pos:start="349:47" pos:end="349:59"><expr pos:start="349:47" pos:end="349:59"><name pos:start="349:47" pos:end="349:59">EAPOL_RSN_KEY</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt pos:start="350:9" pos:end="350:69"><expr pos:start="350:9" pos:end="350:68"><name pos:start="350:9" pos:end="350:22">szEncryptedKey</name> <operator pos:start="350:24" pos:end="350:24">=</operator> <operator pos:start="350:26" pos:end="350:26">(</operator><name pos:start="350:27" pos:end="350:32">guint8</name> <operator pos:start="350:34" pos:end="350:34">*</operator><operator pos:start="350:35" pos:end="350:35">)</operator><call pos:start="350:36" pos:end="350:68"><name pos:start="350:36" pos:end="350:43">g_memdup</name><argument_list pos:start="350:44" pos:end="350:68">(<argument pos:start="350:45" pos:end="350:52"><expr pos:start="350:45" pos:end="350:52"><name pos:start="350:45" pos:end="350:52">key_data</name></expr></argument>, <argument pos:start="350:55" pos:end="350:67"><expr pos:start="350:55" pos:end="350:67"><name pos:start="350:55" pos:end="350:67">key_bytes_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="352:9" pos:end="352:78"><expr pos:start="352:9" pos:end="352:77"><call pos:start="352:9" pos:end="352:77"><name pos:start="352:9" pos:end="352:18">DEBUG_DUMP</name><argument_list pos:start="352:19" pos:end="352:77">(<argument pos:start="352:20" pos:end="352:45"><expr pos:start="352:20" pos:end="352:45"><literal type="string" pos:start="352:20" pos:end="352:45">"Encrypted Broadcast key:"</literal></expr></argument>, <argument pos:start="352:48" pos:end="352:61"><expr pos:start="352:48" pos:end="352:61"><name pos:start="352:48" pos:end="352:61">szEncryptedKey</name></expr></argument>, <argument pos:start="352:64" pos:end="352:76"><expr pos:start="352:64" pos:end="352:76"><name pos:start="352:64" pos:end="352:76">key_bytes_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="353:9" pos:end="353:50"><expr pos:start="353:9" pos:end="353:49"><call pos:start="353:9" pos:end="353:49"><name pos:start="353:9" pos:end="353:18">DEBUG_DUMP</name><argument_list pos:start="353:19" pos:end="353:49">(<argument pos:start="353:20" pos:end="353:27"><expr pos:start="353:20" pos:end="353:27"><literal type="string" pos:start="353:20" pos:end="353:27">"KeyIV:"</literal></expr></argument>, <argument pos:start="353:30" pos:end="353:44"><expr pos:start="353:30" pos:end="353:44"><name pos:start="353:30" pos:end="353:44"><name pos:start="353:30" pos:end="353:36">pEAPKey</name><operator pos:start="353:37" pos:end="353:38">-&gt;</operator><name pos:start="353:39" pos:end="353:44">key_iv</name></name></expr></argument>, <argument pos:start="353:47" pos:end="353:48"><expr pos:start="353:47" pos:end="353:48"><literal type="number" pos:start="353:47" pos:end="353:48">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="354:9" pos:end="354:58"><expr pos:start="354:9" pos:end="354:57"><call pos:start="354:9" pos:end="354:57"><name pos:start="354:9" pos:end="354:18">DEBUG_DUMP</name><argument_list pos:start="354:19" pos:end="354:57">(<argument pos:start="354:20" pos:end="354:36"><expr pos:start="354:20" pos:end="354:36"><literal type="string" pos:start="354:20" pos:end="354:36">"decryption_key:"</literal></expr></argument>, <argument pos:start="354:39" pos:end="354:52"><expr pos:start="354:39" pos:end="354:52"><name pos:start="354:39" pos:end="354:52">decryption_key</name></expr></argument>, <argument pos:start="354:55" pos:end="354:56"><expr pos:start="354:55" pos:end="354:56"><literal type="number" pos:start="354:55" pos:end="354:56">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="356:9" pos:end="356:42">/* We are rekeying, save old sa */</comment>
        <expr_stmt pos:start="357:9" pos:end="357:88"><expr pos:start="357:9" pos:end="357:87"><name pos:start="357:9" pos:end="357:14">tmp_sa</name> <operator pos:start="357:16" pos:end="357:16">=</operator> <operator pos:start="357:18" pos:end="357:18">(</operator><name pos:start="357:19" pos:end="357:42">AIRPDCAP_SEC_ASSOCIATION</name> <operator pos:start="357:44" pos:end="357:44">*</operator><operator pos:start="357:45" pos:end="357:45">)</operator><call pos:start="357:46" pos:end="357:87"><name pos:start="357:46" pos:end="357:53">g_malloc</name><argument_list pos:start="357:54" pos:end="357:87">(<argument pos:start="357:55" pos:end="357:86"><expr pos:start="357:55" pos:end="357:86"><sizeof pos:start="357:55" pos:end="357:86">sizeof<argument_list pos:start="357:61" pos:end="357:86">(<argument pos:start="357:62" pos:end="357:85"><expr pos:start="357:62" pos:end="357:85"><name pos:start="357:62" pos:end="357:85">AIRPDCAP_SEC_ASSOCIATION</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="358:9" pos:end="358:61"><expr pos:start="358:9" pos:end="358:60"><call pos:start="358:9" pos:end="358:60"><name pos:start="358:9" pos:end="358:14">memcpy</name><argument_list pos:start="358:15" pos:end="358:60">(<argument pos:start="358:16" pos:end="358:21"><expr pos:start="358:16" pos:end="358:21"><name pos:start="358:16" pos:end="358:21">tmp_sa</name></expr></argument>, <argument pos:start="358:24" pos:end="358:25"><expr pos:start="358:24" pos:end="358:25"><name pos:start="358:24" pos:end="358:25">sa</name></expr></argument>, <argument pos:start="358:28" pos:end="358:59"><expr pos:start="358:28" pos:end="358:59"><sizeof pos:start="358:28" pos:end="358:59">sizeof<argument_list pos:start="358:34" pos:end="358:59">(<argument pos:start="358:35" pos:end="358:58"><expr pos:start="358:35" pos:end="358:58"><name pos:start="358:35" pos:end="358:58">AIRPDCAP_SEC_ASSOCIATION</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="359:9" pos:end="359:26"><expr pos:start="359:9" pos:end="359:25"><name pos:start="359:9" pos:end="359:16"><name pos:start="359:9" pos:end="359:10">sa</name><operator pos:start="359:11" pos:end="359:12">-&gt;</operator><name pos:start="359:13" pos:end="359:16">next</name></name> <operator pos:start="359:18" pos:end="359:18">=</operator> <name pos:start="359:20" pos:end="359:25">tmp_sa</name></expr>;</expr_stmt>

        <comment type="block" pos:start="361:9" pos:end="361:109">/* As we have no concept of the prior association request at this point, we need to deduce the     */</comment>
        <comment type="block" pos:start="362:9" pos:end="362:109">/* group key cipher from the length of the key bytes. In WPA this is straightforward as the        */</comment>
        <comment type="block" pos:start="363:9" pos:end="363:109">/* keybytes just contain the GTK, and the GTK is only in the group handshake, NOT the M3.          */</comment>
        <comment type="block" pos:start="364:9" pos:end="364:109">/* In WPA2 its a little more tricky as the M3 keybytes contain an RSN_IE, but the group handshake  */</comment>
        <comment type="block" pos:start="365:9" pos:end="365:109">/* does not. Also there are other (variable length) items in the keybytes which we need to account */</comment>
        <comment type="block" pos:start="366:9" pos:end="366:109">/* for to determine the true key length, and thus the group cipher.                                */</comment>

        <if_stmt pos:start="368:9" pos:end="465:9"><if pos:start="368:9" pos:end="392:9">if <condition pos:start="368:12" pos:end="368:57">(<expr pos:start="368:13" pos:end="368:56"><name pos:start="368:13" pos:end="368:23">key_version</name> <operator pos:start="368:25" pos:end="368:26">==</operator> <name pos:start="368:28" pos:end="368:56">AIRPDCAP_WPA_KEY_VER_NOT_CCMP</name></expr>)</condition>
        <block pos:start="369:9" pos:end="392:9">{<block_content pos:start="370:13" pos:end="391:65">
            <decl_stmt pos:start="370:13" pos:end="370:31"><decl pos:start="370:13" pos:end="370:30"><type pos:start="370:13" pos:end="370:18"><name pos:start="370:13" pos:end="370:18">guint8</name></type> <name pos:start="370:20" pos:end="370:30"><name pos:start="370:20" pos:end="370:26">new_key</name><index pos:start="370:27" pos:end="370:30">[<expr pos:start="370:28" pos:end="370:29"><literal type="number" pos:start="370:28" pos:end="370:29">32</literal></expr>]</index></name></decl>;</decl_stmt>
            <decl_stmt pos:start="371:13" pos:end="371:30"><decl pos:start="371:13" pos:end="371:29"><type pos:start="371:13" pos:end="371:18"><name pos:start="371:13" pos:end="371:18">guint8</name></type> <name pos:start="371:20" pos:end="371:29"><name pos:start="371:20" pos:end="371:24">dummy</name><index pos:start="371:25" pos:end="371:29">[<expr pos:start="371:26" pos:end="371:28"><literal type="number" pos:start="371:26" pos:end="371:28">256</literal></expr>]</index></name></decl>;</decl_stmt>
            <comment type="block" pos:start="372:13" pos:end="372:26">/* TKIP key */</comment>
            <comment type="block" pos:start="373:13" pos:end="373:78">/* Per 802.11i, Draft 3.0 spec, section 8.5.2, p. 97, line 4-8, */</comment>
            <comment type="block" pos:start="374:13" pos:end="374:126">/* group key is decrypted using RC4.  Concatenate the IV with the 16 byte EK (PTK+16) to get the decryption key */</comment>

            <decl_stmt pos:start="376:13" pos:end="376:39"><decl pos:start="376:13" pos:end="376:38"><type pos:start="376:13" pos:end="376:28"><name pos:start="376:13" pos:end="376:28">rc4_state_struct</name></type> <name pos:start="376:30" pos:end="376:38">rc4_state</name></decl>;</decl_stmt>

            <comment type="block" pos:start="378:13" pos:end="378:105">/* The WPA group key just contains the GTK bytes so deducing the type is straightforward   */</comment>
            <comment type="block" pos:start="379:13" pos:end="379:105">/* Note - WPA M3 doesn't contain a group key so we'll only be here for the group handshake */</comment>
            <expr_stmt pos:start="380:13" pos:end="380:132"><expr pos:start="380:13" pos:end="380:131"><name pos:start="380:13" pos:end="380:27"><name pos:start="380:13" pos:end="380:14">sa</name><operator pos:start="380:15" pos:end="380:16">-&gt;</operator><name pos:start="380:17" pos:end="380:19">wpa</name><operator pos:start="380:20" pos:end="380:20">.</operator><name pos:start="380:21" pos:end="380:27">key_ver</name></name> <operator pos:start="380:29" pos:end="380:29">=</operator> <ternary pos:start="380:31" pos:end="380:131"><condition pos:start="380:31" pos:end="380:69"><expr pos:start="380:31" pos:end="380:67"><operator pos:start="380:31" pos:end="380:31">(</operator><name pos:start="380:32" pos:end="380:44">key_bytes_len</name> <operator pos:start="380:46" pos:end="380:47">&gt;=</operator> <name pos:start="380:49" pos:end="380:66">TKIP_GROUP_KEY_LEN</name><operator pos:start="380:67" pos:end="380:67">)</operator></expr> ?</condition><then pos:start="380:71" pos:end="380:99"> <expr pos:start="380:71" pos:end="380:99"><name pos:start="380:71" pos:end="380:99">AIRPDCAP_WPA_KEY_VER_NOT_CCMP</name></expr> </then><else pos:start="380:101" pos:end="380:131">: <expr pos:start="380:103" pos:end="380:131"><name pos:start="380:103" pos:end="380:131">AIRPDCAP_WPA_KEY_VER_AES_CCMP</name></expr></else></ternary></expr>;</expr_stmt>

            <comment type="block" pos:start="382:13" pos:end="382:92">/* Build the full decryption key based on the IV and part of the pairwise key */</comment>
            <expr_stmt pos:start="383:13" pos:end="383:49"><expr pos:start="383:13" pos:end="383:48"><call pos:start="383:13" pos:end="383:48"><name pos:start="383:13" pos:end="383:18">memcpy</name><argument_list pos:start="383:19" pos:end="383:48">(<argument pos:start="383:20" pos:end="383:26"><expr pos:start="383:20" pos:end="383:26"><name pos:start="383:20" pos:end="383:26">new_key</name></expr></argument>, <argument pos:start="383:29" pos:end="383:43"><expr pos:start="383:29" pos:end="383:43"><name pos:start="383:29" pos:end="383:43"><name pos:start="383:29" pos:end="383:35">pEAPKey</name><operator pos:start="383:36" pos:end="383:37">-&gt;</operator><name pos:start="383:38" pos:end="383:43">key_iv</name></name></expr></argument>, <argument pos:start="383:46" pos:end="383:47"><expr pos:start="383:46" pos:end="383:47"><literal type="number" pos:start="383:46" pos:end="383:47">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="384:13" pos:end="384:53"><expr pos:start="384:13" pos:end="384:52"><call pos:start="384:13" pos:end="384:52"><name pos:start="384:13" pos:end="384:18">memcpy</name><argument_list pos:start="384:19" pos:end="384:52">(<argument pos:start="384:20" pos:end="384:31"><expr pos:start="384:20" pos:end="384:31"><name pos:start="384:20" pos:end="384:26">new_key</name> <operator pos:start="384:28" pos:end="384:28">+</operator> <literal type="number" pos:start="384:30" pos:end="384:31">16</literal></expr></argument>, <argument pos:start="384:34" pos:end="384:47"><expr pos:start="384:34" pos:end="384:47"><name pos:start="384:34" pos:end="384:47">decryption_key</name></expr></argument>, <argument pos:start="384:50" pos:end="384:51"><expr pos:start="384:50" pos:end="384:51"><literal type="number" pos:start="384:50" pos:end="384:51">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="385:13" pos:end="385:52"><expr pos:start="385:13" pos:end="385:51"><call pos:start="385:13" pos:end="385:51"><name pos:start="385:13" pos:end="385:22">DEBUG_DUMP</name><argument_list pos:start="385:23" pos:end="385:51">(<argument pos:start="385:24" pos:end="385:37"><expr pos:start="385:24" pos:end="385:37"><literal type="string" pos:start="385:24" pos:end="385:37">"FullDecrKey:"</literal></expr></argument>, <argument pos:start="385:40" pos:end="385:46"><expr pos:start="385:40" pos:end="385:46"><name pos:start="385:40" pos:end="385:46">new_key</name></expr></argument>, <argument pos:start="385:49" pos:end="385:50"><expr pos:start="385:49" pos:end="385:50"><literal type="number" pos:start="385:49" pos:end="385:50">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="387:13" pos:end="387:65"><expr pos:start="387:13" pos:end="387:64"><call pos:start="387:13" pos:end="387:64"><name pos:start="387:13" pos:end="387:26">crypt_rc4_init</name><argument_list pos:start="387:27" pos:end="387:64">(<argument pos:start="387:28" pos:end="387:37"><expr pos:start="387:28" pos:end="387:37"><operator pos:start="387:28" pos:end="387:28">&amp;</operator><name pos:start="387:29" pos:end="387:37">rc4_state</name></expr></argument>, <argument pos:start="387:40" pos:end="387:46"><expr pos:start="387:40" pos:end="387:46"><name pos:start="387:40" pos:end="387:46">new_key</name></expr></argument>, <argument pos:start="387:49" pos:end="387:63"><expr pos:start="387:49" pos:end="387:63"><sizeof pos:start="387:49" pos:end="387:63">sizeof<argument_list pos:start="387:55" pos:end="387:63">(<argument pos:start="387:56" pos:end="387:62"><expr pos:start="387:56" pos:end="387:62"><name pos:start="387:56" pos:end="387:62">new_key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="389:13" pos:end="389:101">/* Do dummy 256 iterations of the RC4 algorithm (per 802.11i, Draft 3.0, p. 97 line 6) */</comment>
            <expr_stmt pos:start="390:13" pos:end="390:46"><expr pos:start="390:13" pos:end="390:45"><call pos:start="390:13" pos:end="390:45"><name pos:start="390:13" pos:end="390:21">crypt_rc4</name><argument_list pos:start="390:22" pos:end="390:45">(<argument pos:start="390:23" pos:end="390:32"><expr pos:start="390:23" pos:end="390:32"><operator pos:start="390:23" pos:end="390:23">&amp;</operator><name pos:start="390:24" pos:end="390:32">rc4_state</name></expr></argument>, <argument pos:start="390:35" pos:end="390:39"><expr pos:start="390:35" pos:end="390:39"><name pos:start="390:35" pos:end="390:39">dummy</name></expr></argument>, <argument pos:start="390:42" pos:end="390:44"><expr pos:start="390:42" pos:end="390:44"><literal type="number" pos:start="390:42" pos:end="390:44">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="391:13" pos:end="391:65"><expr pos:start="391:13" pos:end="391:64"><call pos:start="391:13" pos:end="391:64"><name pos:start="391:13" pos:end="391:21">crypt_rc4</name><argument_list pos:start="391:22" pos:end="391:64">(<argument pos:start="391:23" pos:end="391:32"><expr pos:start="391:23" pos:end="391:32"><operator pos:start="391:23" pos:end="391:23">&amp;</operator><name pos:start="391:24" pos:end="391:32">rc4_state</name></expr></argument>, <argument pos:start="391:35" pos:end="391:48"><expr pos:start="391:35" pos:end="391:48"><name pos:start="391:35" pos:end="391:48">szEncryptedKey</name></expr></argument>, <argument pos:start="391:51" pos:end="391:63"><expr pos:start="391:51" pos:end="391:63"><name pos:start="391:51" pos:end="391:63">key_bytes_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif" pos:start="393:9" pos:end="465:9">else if <condition pos:start="393:17" pos:end="393:62">(<expr pos:start="393:18" pos:end="393:61"><name pos:start="393:18" pos:end="393:28">key_version</name> <operator pos:start="393:30" pos:end="393:31">==</operator> <name pos:start="393:33" pos:end="393:61">AIRPDCAP_WPA_KEY_VER_AES_CCMP</name></expr>)</condition>
        <block pos:start="394:9" pos:end="465:9">{<block_content pos:start="397:13" pos:end="464:35">
            <comment type="block" pos:start="395:13" pos:end="395:30">/* AES CCMP key */</comment>

            <decl_stmt pos:start="397:13" pos:end="397:29"><decl pos:start="397:13" pos:end="397:28"><type pos:start="397:13" pos:end="397:18"><name pos:start="397:13" pos:end="397:18">guint8</name></type> <name pos:start="397:20" pos:end="397:28">key_found</name></decl>;</decl_stmt>
            <decl_stmt pos:start="398:13" pos:end="398:30"><decl pos:start="398:13" pos:end="398:29"><type pos:start="398:13" pos:end="398:18"><name pos:start="398:13" pos:end="398:18">guint8</name></type> <name pos:start="398:20" pos:end="398:29">key_length</name></decl>;</decl_stmt>
            <decl_stmt pos:start="399:13" pos:end="399:30"><decl pos:start="399:13" pos:end="399:29"><type pos:start="399:13" pos:end="399:19"><name pos:start="399:13" pos:end="399:19">guint16</name></type> <name pos:start="399:21" pos:end="399:29">key_index</name></decl>;</decl_stmt>
            <decl_stmt pos:start="400:13" pos:end="400:35"><decl pos:start="400:13" pos:end="400:34"><type pos:start="400:13" pos:end="400:20"><name pos:start="400:13" pos:end="400:18">guint8</name> <modifier pos:start="400:20" pos:end="400:20">*</modifier></type><name pos:start="400:21" pos:end="400:34">decrypted_data</name></decl>;</decl_stmt>

            <comment type="block" pos:start="402:13" pos:end="402:71">/* Unwrap the key; the result is key_bytes_len in length */</comment>
            <expr_stmt pos:start="403:13" pos:end="403:91"><expr pos:start="403:13" pos:end="403:90"><name pos:start="403:13" pos:end="403:26">decrypted_data</name> <operator pos:start="403:28" pos:end="403:28">=</operator> <call pos:start="403:30" pos:end="403:90"><name pos:start="403:30" pos:end="403:39">AES_unwrap</name><argument_list pos:start="403:40" pos:end="403:90">(<argument pos:start="403:41" pos:end="403:54"><expr pos:start="403:41" pos:end="403:54"><name pos:start="403:41" pos:end="403:54">decryption_key</name></expr></argument>, <argument pos:start="403:57" pos:end="403:58"><expr pos:start="403:57" pos:end="403:58"><literal type="number" pos:start="403:57" pos:end="403:58">16</literal></expr></argument>, <argument pos:start="403:61" pos:end="403:74"><expr pos:start="403:61" pos:end="403:74"><name pos:start="403:61" pos:end="403:74">szEncryptedKey</name></expr></argument>, <argument pos:start="403:77" pos:end="403:89"><expr pos:start="403:77" pos:end="403:89"><name pos:start="403:77" pos:end="403:89">key_bytes_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="405:13" pos:end="408:68">/* With WPA2 what we get after Broadcast Key decryption is an actual RSN structure.
               The key itself is stored as a GTK KDE
               WPA2 IE (1 byte) id = 0xdd, length (1 byte), GTK OUI (4 bytes), key index (1 byte) and 1 reserved byte. Thus we have to
               pass pointer to the actual key with 8 bytes offset */</comment>

            <expr_stmt pos:start="410:13" pos:end="410:30"><expr pos:start="410:13" pos:end="410:29"><name pos:start="410:13" pos:end="410:21">key_found</name> <operator pos:start="410:23" pos:end="410:23">=</operator> <name pos:start="410:25" pos:end="410:29">FALSE</name></expr>;</expr_stmt>
            <expr_stmt pos:start="411:13" pos:end="411:26"><expr pos:start="411:13" pos:end="411:25"><name pos:start="411:13" pos:end="411:21">key_index</name> <operator pos:start="411:23" pos:end="411:23">=</operator> <literal type="number" pos:start="411:25" pos:end="411:25">0</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="413:13" pos:end="413:55">/* Parse Key data until we found GTK KDE */</comment>
            <comment type="block" pos:start="414:13" pos:end="414:39">/* GTK KDE = 00-0F-AC 01 */</comment>
            <while pos:start="415:13" pos:end="435:13">while <condition pos:start="415:19" pos:end="415:65">(<expr pos:start="415:20" pos:end="415:64"><name pos:start="415:20" pos:end="415:28">key_index</name> <operator pos:start="415:30" pos:end="415:30">&lt;</operator> <operator pos:start="415:32" pos:end="415:32">(</operator><name pos:start="415:33" pos:end="415:45">key_bytes_len</name> <operator pos:start="415:47" pos:end="415:47">-</operator> <literal type="number" pos:start="415:49" pos:end="415:49">6</literal><operator pos:start="415:50" pos:end="415:50">)</operator> <operator pos:start="415:52" pos:end="415:53">&amp;&amp;</operator> <operator pos:start="415:55" pos:end="415:55">!</operator><name pos:start="415:56" pos:end="415:64">key_found</name></expr>)</condition>
            <block pos:start="416:13" pos:end="435:13">{<block_content pos:start="417:17" pos:end="434:17">
                <decl_stmt pos:start="417:17" pos:end="417:30"><decl pos:start="417:17" pos:end="417:29"><type pos:start="417:17" pos:end="417:22"><name pos:start="417:17" pos:end="417:22">guint8</name></type> <name pos:start="417:24" pos:end="417:29">rsn_id</name></decl>;</decl_stmt>
                <decl_stmt pos:start="418:17" pos:end="418:29"><decl pos:start="418:17" pos:end="418:28"><type pos:start="418:17" pos:end="418:23"><name pos:start="418:17" pos:end="418:23">guint32</name></type> <name pos:start="418:25" pos:end="418:28">type</name></decl>;</decl_stmt>

                <comment type="block" pos:start="420:17" pos:end="420:32">/* Get RSN ID */</comment>
                <expr_stmt pos:start="421:17" pos:end="421:51"><expr pos:start="421:17" pos:end="421:50"><name pos:start="421:17" pos:end="421:22">rsn_id</name> <operator pos:start="421:24" pos:end="421:24">=</operator> <name pos:start="421:26" pos:end="421:50"><name pos:start="421:26" pos:end="421:39">decrypted_data</name><index pos:start="421:40" pos:end="421:50">[<expr pos:start="421:41" pos:end="421:49"><name pos:start="421:41" pos:end="421:49">key_index</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt pos:start="422:17" pos:end="425:57"><expr pos:start="422:17" pos:end="425:56"><name pos:start="422:17" pos:end="422:20">type</name> <operator pos:start="422:22" pos:end="422:22">=</operator> <operator pos:start="422:24" pos:end="422:24">(</operator><operator pos:start="422:25" pos:end="422:25">(</operator><name pos:start="422:26" pos:end="422:54"><name pos:start="422:26" pos:end="422:39">decrypted_data</name><index pos:start="422:40" pos:end="422:54">[<expr pos:start="422:41" pos:end="422:53"><name pos:start="422:41" pos:end="422:49">key_index</name> <operator pos:start="422:51" pos:end="422:51">+</operator> <literal type="number" pos:start="422:53" pos:end="422:53">2</literal></expr>]</index></name> <operator pos:start="422:56" pos:end="422:57">&lt;&lt;</operator> <literal type="number" pos:start="422:59" pos:end="422:60">24</literal><operator pos:start="422:61" pos:end="422:61">)</operator> <operator pos:start="422:63" pos:end="422:63">+</operator>
                        <operator pos:start="423:25" pos:end="423:25">(</operator><name pos:start="423:26" pos:end="423:54"><name pos:start="423:26" pos:end="423:39">decrypted_data</name><index pos:start="423:40" pos:end="423:54">[<expr pos:start="423:41" pos:end="423:53"><name pos:start="423:41" pos:end="423:49">key_index</name> <operator pos:start="423:51" pos:end="423:51">+</operator> <literal type="number" pos:start="423:53" pos:end="423:53">3</literal></expr>]</index></name> <operator pos:start="423:56" pos:end="423:57">&lt;&lt;</operator> <literal type="number" pos:start="423:59" pos:end="423:60">16</literal><operator pos:start="423:61" pos:end="423:61">)</operator> <operator pos:start="423:63" pos:end="423:63">+</operator>
                        <operator pos:start="424:25" pos:end="424:25">(</operator><name pos:start="424:26" pos:end="424:54"><name pos:start="424:26" pos:end="424:39">decrypted_data</name><index pos:start="424:40" pos:end="424:54">[<expr pos:start="424:41" pos:end="424:53"><name pos:start="424:41" pos:end="424:49">key_index</name> <operator pos:start="424:51" pos:end="424:51">+</operator> <literal type="number" pos:start="424:53" pos:end="424:53">4</literal></expr>]</index></name> <operator pos:start="424:56" pos:end="424:57">&lt;&lt;</operator> <literal type="number" pos:start="424:59" pos:end="424:59">8</literal><operator pos:start="424:60" pos:end="424:60">)</operator> <operator pos:start="424:62" pos:end="424:62">+</operator>
                        <operator pos:start="425:25" pos:end="425:25">(</operator><name pos:start="425:26" pos:end="425:54"><name pos:start="425:26" pos:end="425:39">decrypted_data</name><index pos:start="425:40" pos:end="425:54">[<expr pos:start="425:41" pos:end="425:53"><name pos:start="425:41" pos:end="425:49">key_index</name> <operator pos:start="425:51" pos:end="425:51">+</operator> <literal type="number" pos:start="425:53" pos:end="425:53">5</literal></expr>]</index></name><operator pos:start="425:55" pos:end="425:55">)</operator><operator pos:start="425:56" pos:end="425:56">)</operator></expr>;</expr_stmt>

                <if_stmt pos:start="427:17" pos:end="434:17"><if pos:start="427:17" pos:end="430:17">if <condition pos:start="427:20" pos:end="427:57">(<expr pos:start="427:21" pos:end="427:56"><name pos:start="427:21" pos:end="427:26">rsn_id</name> <operator pos:start="427:28" pos:end="427:29">==</operator> <literal type="number" pos:start="427:31" pos:end="427:34">0xdd</literal> <operator pos:start="427:36" pos:end="427:37">&amp;&amp;</operator> <name pos:start="427:39" pos:end="427:42">type</name> <operator pos:start="427:44" pos:end="427:45">==</operator> <literal type="number" pos:start="427:47" pos:end="427:56">0x000fac01</literal></expr>)</condition>
                <block pos:start="428:17" pos:end="430:17">{<block_content pos:start="429:21" pos:end="429:37">
                    <expr_stmt pos:start="429:21" pos:end="429:37"><expr pos:start="429:21" pos:end="429:36"><name pos:start="429:21" pos:end="429:29">key_found</name> <operator pos:start="429:31" pos:end="429:31">=</operator> <name pos:start="429:33" pos:end="429:36">TRUE</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else pos:start="431:17" pos:end="434:17">else
                <block pos:start="432:17" pos:end="434:17">{<block_content pos:start="433:21" pos:end="433:67">
                    <expr_stmt pos:start="433:21" pos:end="433:67"><expr pos:start="433:21" pos:end="433:66"><name pos:start="433:21" pos:end="433:29">key_index</name> <operator pos:start="433:31" pos:end="433:32">+=</operator> <name pos:start="433:34" pos:end="433:62"><name pos:start="433:34" pos:end="433:47">decrypted_data</name><index pos:start="433:48" pos:end="433:62">[<expr pos:start="433:49" pos:end="433:61"><name pos:start="433:49" pos:end="433:57">key_index</name> <operator pos:start="433:59" pos:end="433:59">+</operator> <literal type="number" pos:start="433:61" pos:end="433:61">1</literal></expr>]</index></name> <operator pos:start="433:64" pos:end="433:64">+</operator> <literal type="number" pos:start="433:66" pos:end="433:66">2</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></while>

            <if_stmt pos:start="437:13" pos:end="457:13"><if pos:start="437:13" pos:end="451:13">if <condition pos:start="437:16" pos:end="437:26">(<expr pos:start="437:17" pos:end="437:25"><name pos:start="437:17" pos:end="437:25">key_found</name></expr>)</condition>
            <block pos:start="438:13" pos:end="451:13">{<block_content pos:start="439:17" pos:end="450:83">
                <expr_stmt pos:start="439:17" pos:end="439:63"><expr pos:start="439:17" pos:end="439:62"><name pos:start="439:17" pos:end="439:26">key_length</name> <operator pos:start="439:28" pos:end="439:28">=</operator> <name pos:start="439:30" pos:end="439:58"><name pos:start="439:30" pos:end="439:43">decrypted_data</name><index pos:start="439:44" pos:end="439:58">[<expr pos:start="439:45" pos:end="439:57"><name pos:start="439:45" pos:end="439:53">key_index</name> <operator pos:start="439:55" pos:end="439:55">+</operator> <literal type="number" pos:start="439:57" pos:end="439:57">1</literal></expr>]</index></name> <operator pos:start="439:60" pos:end="439:60">-</operator> <literal type="number" pos:start="439:62" pos:end="439:62">6</literal></expr>;</expr_stmt>

                <if_stmt pos:start="441:17" pos:end="447:17"><if pos:start="441:17" pos:end="447:17">if <condition pos:start="441:20" pos:end="442:63">(<expr pos:start="441:21" pos:end="442:62"><name pos:start="441:21" pos:end="441:29">key_index</name> <operator pos:start="441:31" pos:end="441:31">+</operator> <literal type="number" pos:start="441:33" pos:end="441:33">8</literal> <operator pos:start="441:35" pos:end="441:36">&gt;=</operator> <name pos:start="441:38" pos:end="441:50">key_bytes_len</name> <operator pos:start="441:52" pos:end="441:53">||</operator>
                    <name pos:start="442:21" pos:end="442:30">key_length</name> <operator pos:start="442:32" pos:end="442:32">&gt;</operator> <name pos:start="442:34" pos:end="442:46">key_bytes_len</name> <operator pos:start="442:48" pos:end="442:48">-</operator> <name pos:start="442:50" pos:end="442:58">key_index</name> <operator pos:start="442:60" pos:end="442:60">-</operator> <literal type="number" pos:start="442:62" pos:end="442:62">8</literal></expr>)</condition>
                <block pos:start="443:17" pos:end="447:17">{<block_content pos:start="444:21" pos:end="446:59">
                    <expr_stmt pos:start="444:21" pos:end="444:43"><expr pos:start="444:21" pos:end="444:42"><call pos:start="444:21" pos:end="444:42"><name pos:start="444:21" pos:end="444:26">g_free</name><argument_list pos:start="444:27" pos:end="444:42">(<argument pos:start="444:28" pos:end="444:41"><expr pos:start="444:28" pos:end="444:41"><name pos:start="444:28" pos:end="444:41">decrypted_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="445:21" pos:end="445:43"><expr pos:start="445:21" pos:end="445:42"><call pos:start="445:21" pos:end="445:42"><name pos:start="445:21" pos:end="445:26">g_free</name><argument_list pos:start="445:27" pos:end="445:42">(<argument pos:start="445:28" pos:end="445:41"><expr pos:start="445:28" pos:end="445:41"><name pos:start="445:28" pos:end="445:41">szEncryptedKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:start="446:21" pos:end="446:59">return <expr pos:start="446:28" pos:end="446:58"><name pos:start="446:28" pos:end="446:58">AIRPDCAP_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="449:17" pos:end="449:102">/* Skip over the GTK header info, and don't copy past the end of the encrypted data */</comment>
                <expr_stmt pos:start="450:17" pos:end="450:83"><expr pos:start="450:17" pos:end="450:82"><call pos:start="450:17" pos:end="450:82"><name pos:start="450:17" pos:end="450:22">memcpy</name><argument_list pos:start="450:23" pos:end="450:82">(<argument pos:start="450:24" pos:end="450:37"><expr pos:start="450:24" pos:end="450:37"><name pos:start="450:24" pos:end="450:37">szEncryptedKey</name></expr></argument>, <argument pos:start="450:40" pos:end="450:69"><expr pos:start="450:40" pos:end="450:69"><name pos:start="450:40" pos:end="450:53">decrypted_data</name> <operator pos:start="450:55" pos:end="450:55">+</operator> <name pos:start="450:57" pos:end="450:65">key_index</name> <operator pos:start="450:67" pos:end="450:67">+</operator> <literal type="number" pos:start="450:69" pos:end="450:69">8</literal></expr></argument>, <argument pos:start="450:72" pos:end="450:81"><expr pos:start="450:72" pos:end="450:81"><name pos:start="450:72" pos:end="450:81">key_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else pos:start="452:13" pos:end="457:13">else
            <block pos:start="453:13" pos:end="457:13">{<block_content pos:start="454:17" pos:end="456:55">
                <expr_stmt pos:start="454:17" pos:end="454:39"><expr pos:start="454:17" pos:end="454:38"><call pos:start="454:17" pos:end="454:38"><name pos:start="454:17" pos:end="454:22">g_free</name><argument_list pos:start="454:23" pos:end="454:38">(<argument pos:start="454:24" pos:end="454:37"><expr pos:start="454:24" pos:end="454:37"><name pos:start="454:24" pos:end="454:37">decrypted_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="455:17" pos:end="455:39"><expr pos:start="455:17" pos:end="455:38"><call pos:start="455:17" pos:end="455:38"><name pos:start="455:17" pos:end="455:22">g_free</name><argument_list pos:start="455:23" pos:end="455:38">(<argument pos:start="455:24" pos:end="455:37"><expr pos:start="455:24" pos:end="455:37"><name pos:start="455:24" pos:end="455:37">szEncryptedKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="456:17" pos:end="456:55">return <expr pos:start="456:24" pos:end="456:54"><name pos:start="456:24" pos:end="456:54">AIRPDCAP_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="459:13" pos:end="462:64"><if pos:start="459:13" pos:end="460:64">if <condition pos:start="459:16" pos:end="459:49">(<expr pos:start="459:17" pos:end="459:48"><name pos:start="459:17" pos:end="459:26">key_length</name> <operator pos:start="459:28" pos:end="459:29">==</operator> <name pos:start="459:31" pos:end="459:48">TKIP_GROUP_KEY_LEN</name></expr>)</condition><block type="pseudo" pos:start="460:17" pos:end="460:64"><block_content pos:start="460:17" pos:end="460:64">
                <expr_stmt pos:start="460:17" pos:end="460:64"><expr pos:start="460:17" pos:end="460:63"><name pos:start="460:17" pos:end="460:31"><name pos:start="460:17" pos:end="460:18">sa</name><operator pos:start="460:19" pos:end="460:20">-&gt;</operator><name pos:start="460:21" pos:end="460:23">wpa</name><operator pos:start="460:24" pos:end="460:24">.</operator><name pos:start="460:25" pos:end="460:31">key_ver</name></name> <operator pos:start="460:33" pos:end="460:33">=</operator> <name pos:start="460:35" pos:end="460:63">AIRPDCAP_WPA_KEY_VER_NOT_CCMP</name></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="461:13" pos:end="462:64">else<block type="pseudo" pos:start="462:17" pos:end="462:64"><block_content pos:start="462:17" pos:end="462:64">
                <expr_stmt pos:start="462:17" pos:end="462:64"><expr pos:start="462:17" pos:end="462:63"><name pos:start="462:17" pos:end="462:31"><name pos:start="462:17" pos:end="462:18">sa</name><operator pos:start="462:19" pos:end="462:20">-&gt;</operator><name pos:start="462:21" pos:end="462:23">wpa</name><operator pos:start="462:24" pos:end="462:24">.</operator><name pos:start="462:25" pos:end="462:31">key_ver</name></name> <operator pos:start="462:33" pos:end="462:33">=</operator> <name pos:start="462:35" pos:end="462:63">AIRPDCAP_WPA_KEY_VER_AES_CCMP</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="464:13" pos:end="464:35"><expr pos:start="464:13" pos:end="464:34"><call pos:start="464:13" pos:end="464:34"><name pos:start="464:13" pos:end="464:18">g_free</name><argument_list pos:start="464:19" pos:end="464:34">(<argument pos:start="464:20" pos:end="464:33"><expr pos:start="464:20" pos:end="464:33"><name pos:start="464:20" pos:end="464:33">decrypted_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="467:9" pos:end="467:111"><expr pos:start="467:9" pos:end="467:110"><name pos:start="467:9" pos:end="467:15">key_len</name> <operator pos:start="467:17" pos:end="467:17">=</operator> <ternary pos:start="467:19" pos:end="467:110"><condition pos:start="467:19" pos:end="467:70"><expr pos:start="467:19" pos:end="467:68"><operator pos:start="467:19" pos:end="467:19">(</operator><name pos:start="467:20" pos:end="467:34"><name pos:start="467:20" pos:end="467:21">sa</name><operator pos:start="467:22" pos:end="467:23">-&gt;</operator><name pos:start="467:24" pos:end="467:26">wpa</name><operator pos:start="467:27" pos:end="467:27">.</operator><name pos:start="467:28" pos:end="467:34">key_ver</name></name> <operator pos:start="467:36" pos:end="467:37">==</operator> <name pos:start="467:39" pos:end="467:67">AIRPDCAP_WPA_KEY_VER_NOT_CCMP</name><operator pos:start="467:68" pos:end="467:68">)</operator></expr> ?</condition><then pos:start="467:72" pos:end="467:89"> <expr pos:start="467:72" pos:end="467:89"><name pos:start="467:72" pos:end="467:89">TKIP_GROUP_KEY_LEN</name></expr> </then><else pos:start="467:91" pos:end="467:110">: <expr pos:start="467:93" pos:end="467:110"><name pos:start="467:93" pos:end="467:110">CCMP_GROUP_KEY_LEN</name></expr></else></ternary></expr>;</expr_stmt>
        <if_stmt pos:start="468:9" pos:end="473:9"><if pos:start="468:9" pos:end="473:9">if <condition pos:start="468:12" pos:end="468:36">(<expr pos:start="468:13" pos:end="468:35"><name pos:start="468:13" pos:end="468:19">key_len</name> <operator pos:start="468:21" pos:end="468:21">&gt;</operator> <name pos:start="468:23" pos:end="468:35">key_bytes_len</name></expr>)</condition>
        <block pos:start="469:9" pos:end="473:9">{<block_content pos:start="471:13" pos:end="472:51">
            <comment type="block" pos:start="470:13" pos:end="470:99">/* the key required for this protocol is longer than the key that we just calculated */</comment>
            <expr_stmt pos:start="471:13" pos:end="471:35"><expr pos:start="471:13" pos:end="471:34"><call pos:start="471:13" pos:end="471:34"><name pos:start="471:13" pos:end="471:18">g_free</name><argument_list pos:start="471:19" pos:end="471:34">(<argument pos:start="471:20" pos:end="471:33"><expr pos:start="471:20" pos:end="471:33"><name pos:start="471:20" pos:end="471:33">szEncryptedKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="472:13" pos:end="472:51">return <expr pos:start="472:20" pos:end="472:50"><name pos:start="472:20" pos:end="472:50">AIRPDCAP_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="475:9" pos:end="475:72">/* Decrypted key is now in szEncryptedKey with len of key_len */</comment>
        <expr_stmt pos:start="476:9" pos:end="476:62"><expr pos:start="476:9" pos:end="476:61"><call pos:start="476:9" pos:end="476:61"><name pos:start="476:9" pos:end="476:18">DEBUG_DUMP</name><argument_list pos:start="476:19" pos:end="476:61">(<argument pos:start="476:20" pos:end="476:35"><expr pos:start="476:20" pos:end="476:35"><literal type="string" pos:start="476:20" pos:end="476:35">"Broadcast key:"</literal></expr></argument>, <argument pos:start="476:38" pos:end="476:51"><expr pos:start="476:38" pos:end="476:51"><name pos:start="476:38" pos:end="476:51">szEncryptedKey</name></expr></argument>, <argument pos:start="476:54" pos:end="476:60"><expr pos:start="476:54" pos:end="476:60"><name pos:start="476:54" pos:end="476:60">key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="478:9" pos:end="478:59">/* Load the proper key material info into the SA */</comment>
        <expr_stmt pos:start="479:9" pos:end="479:29"><expr pos:start="479:9" pos:end="479:28"><name pos:start="479:9" pos:end="479:15"><name pos:start="479:9" pos:end="479:10">sa</name><operator pos:start="479:11" pos:end="479:12">-&gt;</operator><name pos:start="479:13" pos:end="479:15">key</name></name> <operator pos:start="479:17" pos:end="479:17">=</operator> <operator pos:start="479:19" pos:end="479:19">&amp;</operator><name pos:start="479:20" pos:end="479:28">dummy_key</name></expr>;</expr_stmt> <comment type="block" pos:start="479:31" pos:end="479:169">/* we just need key to be not null because it is checked in AirPDcapRsnaMng().  The WPA key materials are actually in the .wpa structure */</comment>
        <expr_stmt pos:start="480:9" pos:end="480:28"><expr pos:start="480:9" pos:end="480:27"><name pos:start="480:9" pos:end="480:20"><name pos:start="480:9" pos:end="480:10">sa</name><operator pos:start="480:11" pos:end="480:12">-&gt;</operator><name pos:start="480:13" pos:end="480:20">validKey</name></name> <operator pos:start="480:22" pos:end="480:22">=</operator> <name pos:start="480:24" pos:end="480:27">TRUE</name></expr>;</expr_stmt>

        <comment type="block" pos:start="482:9" pos:end="482:149">/* Since this is a GTK and its size is only 32 bytes (vs. the 64 byte size of a PTK), we fake it and put it in at a 32-byte offset so the  */</comment>
        <comment type="block" pos:start="483:9" pos:end="483:153">/* AirPDcapRsnaMng() function will extract the right piece of the GTK for decryption. (The first 16 bytes of the GTK are used for decryption.) */</comment>
        <expr_stmt pos:start="484:9" pos:end="484:52"><expr pos:start="484:9" pos:end="484:51"><call pos:start="484:9" pos:end="484:51"><name pos:start="484:9" pos:end="484:14">memset</name><argument_list pos:start="484:15" pos:end="484:51">(<argument pos:start="484:16" pos:end="484:26"><expr pos:start="484:16" pos:end="484:26"><name pos:start="484:16" pos:end="484:26"><name pos:start="484:16" pos:end="484:17">sa</name><operator pos:start="484:18" pos:end="484:19">-&gt;</operator><name pos:start="484:20" pos:end="484:22">wpa</name><operator pos:start="484:23" pos:end="484:23">.</operator><name pos:start="484:24" pos:end="484:26">ptk</name></name></expr></argument>, <argument pos:start="484:29" pos:end="484:29"><expr pos:start="484:29" pos:end="484:29"><literal type="number" pos:start="484:29" pos:end="484:29">0</literal></expr></argument>, <argument pos:start="484:32" pos:end="484:50"><expr pos:start="484:32" pos:end="484:50"><sizeof pos:start="484:32" pos:end="484:50">sizeof<argument_list pos:start="484:38" pos:end="484:50">(<argument pos:start="484:39" pos:end="484:49"><expr pos:start="484:39" pos:end="484:49"><name pos:start="484:39" pos:end="484:49"><name pos:start="484:39" pos:end="484:40">sa</name><operator pos:start="484:41" pos:end="484:42">-&gt;</operator><name pos:start="484:43" pos:end="484:45">wpa</name><operator pos:start="484:46" pos:end="484:46">.</operator><name pos:start="484:47" pos:end="484:49">ptk</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="485:9" pos:end="485:58"><expr pos:start="485:9" pos:end="485:57"><call pos:start="485:9" pos:end="485:57"><name pos:start="485:9" pos:end="485:14">memcpy</name><argument_list pos:start="485:15" pos:end="485:57">(<argument pos:start="485:16" pos:end="485:31"><expr pos:start="485:16" pos:end="485:31"><name pos:start="485:16" pos:end="485:26"><name pos:start="485:16" pos:end="485:17">sa</name><operator pos:start="485:18" pos:end="485:19">-&gt;</operator><name pos:start="485:20" pos:end="485:22">wpa</name><operator pos:start="485:23" pos:end="485:23">.</operator><name pos:start="485:24" pos:end="485:26">ptk</name></name> <operator pos:start="485:28" pos:end="485:28">+</operator> <literal type="number" pos:start="485:30" pos:end="485:31">32</literal></expr></argument>, <argument pos:start="485:34" pos:end="485:47"><expr pos:start="485:34" pos:end="485:47"><name pos:start="485:34" pos:end="485:47">szEncryptedKey</name></expr></argument>, <argument pos:start="485:50" pos:end="485:56"><expr pos:start="485:50" pos:end="485:56"><name pos:start="485:50" pos:end="485:56">key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="486:9" pos:end="486:31"><expr pos:start="486:9" pos:end="486:30"><call pos:start="486:9" pos:end="486:30"><name pos:start="486:9" pos:end="486:14">g_free</name><argument_list pos:start="486:15" pos:end="486:30">(<argument pos:start="486:16" pos:end="486:29"><expr pos:start="486:16" pos:end="486:29"><name pos:start="486:16" pos:end="486:29">szEncryptedKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="487:9" pos:end="487:46">return <expr pos:start="487:16" pos:end="487:45"><name pos:start="487:16" pos:end="487:45">AIRPDCAP_RET_SUCCESS_HANDSHAKE</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" pos:start="490:5" pos:end="490:79">/* Return a pointer the the requested SA. If it doesn't exist create it. */</comment>
    <function pos:start="491:5" pos:end="509:5"><type pos:start="491:5" pos:end="491:36"><specifier pos:start="491:5" pos:end="491:10">static</specifier> <name pos:start="491:12" pos:end="491:36">PAIRPDCAP_SEC_ASSOCIATION</name></type>
    <name pos:start="492:5" pos:end="492:20">AirPDcapGetSaPtr</name><parameter_list pos:start="492:21" pos:end="494:40">(
        <parameter pos:start="493:9" pos:end="493:29"><decl pos:start="493:9" pos:end="493:29"><type pos:start="493:9" pos:end="493:29"><name pos:start="493:9" pos:end="493:25">PAIRPDCAP_CONTEXT</name></type> <name pos:start="493:27" pos:end="493:29">ctx</name></decl></parameter>,
        <parameter pos:start="494:9" pos:end="494:39"><decl pos:start="494:9" pos:end="494:39"><type pos:start="494:9" pos:end="494:39"><name pos:start="494:9" pos:end="494:35">AIRPDCAP_SEC_ASSOCIATION_ID</name> <modifier pos:start="494:37" pos:end="494:37">*</modifier></type><name pos:start="494:38" pos:end="494:39">id</name></decl></parameter>)</parameter_list>
    <block pos:start="495:5" pos:end="509:5">{<block_content pos:start="496:9" pos:end="508:34">
        <decl_stmt pos:start="496:9" pos:end="496:21"><decl pos:start="496:9" pos:end="496:20"><type pos:start="496:9" pos:end="496:11"><name pos:start="496:9" pos:end="496:11">int</name></type> <name pos:start="496:13" pos:end="496:20">sa_index</name></decl>;</decl_stmt>

        <comment type="block" pos:start="498:9" pos:end="498:86">/* search for a cached Security Association for supplied BSSID and STA MAC  */</comment>
        <if_stmt pos:start="499:9" pos:end="506:9"><if pos:start="499:9" pos:end="506:9">if <condition pos:start="499:12" pos:end="499:54">(<expr pos:start="499:13" pos:end="499:53"><operator pos:start="499:13" pos:end="499:13">(</operator><name pos:start="499:14" pos:end="499:21">sa_index</name> <operator pos:start="499:23" pos:end="499:23">=</operator> <call pos:start="499:25" pos:end="499:46"><name pos:start="499:25" pos:end="499:37">AirPDcapGetSa</name><argument_list pos:start="499:38" pos:end="499:46">(<argument pos:start="499:39" pos:end="499:41"><expr pos:start="499:39" pos:end="499:41"><name pos:start="499:39" pos:end="499:41">ctx</name></expr></argument>, <argument pos:start="499:44" pos:end="499:45"><expr pos:start="499:44" pos:end="499:45"><name pos:start="499:44" pos:end="499:45">id</name></expr></argument>)</argument_list></call><operator pos:start="499:47" pos:end="499:47">)</operator> <operator pos:start="499:49" pos:end="499:50">==</operator> <operator pos:start="499:52" pos:end="499:52">-</operator><literal type="number" pos:start="499:53" pos:end="499:53">1</literal></expr>)</condition>
        <block pos:start="500:9" pos:end="506:9">{<block_content pos:start="502:13" pos:end="505:13">
            <comment type="block" pos:start="501:13" pos:end="501:86">/* create a new Security Association if it doesn't currently exist      */</comment>
            <if_stmt pos:start="502:13" pos:end="505:13"><if pos:start="502:13" pos:end="505:13">if <condition pos:start="502:16" pos:end="502:60">(<expr pos:start="502:17" pos:end="502:59"><operator pos:start="502:17" pos:end="502:17">(</operator><name pos:start="502:18" pos:end="502:25">sa_index</name> <operator pos:start="502:27" pos:end="502:27">=</operator> <call pos:start="502:29" pos:end="502:52"><name pos:start="502:29" pos:end="502:43">AirPDcapStoreSa</name><argument_list pos:start="502:44" pos:end="502:52">(<argument pos:start="502:45" pos:end="502:47"><expr pos:start="502:45" pos:end="502:47"><name pos:start="502:45" pos:end="502:47">ctx</name></expr></argument>, <argument pos:start="502:50" pos:end="502:51"><expr pos:start="502:50" pos:end="502:51"><name pos:start="502:50" pos:end="502:51">id</name></expr></argument>)</argument_list></call><operator pos:start="502:53" pos:end="502:53">)</operator> <operator pos:start="502:55" pos:end="502:56">==</operator> <operator pos:start="502:58" pos:end="502:58">-</operator><literal type="number" pos:start="502:59" pos:end="502:59">1</literal></expr>)</condition>
            <block pos:start="503:13" pos:end="505:13">{<block_content pos:start="504:17" pos:end="504:28">
                <return pos:start="504:17" pos:end="504:28">return <expr pos:start="504:24" pos:end="504:27"><name pos:start="504:24" pos:end="504:27">NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="507:9" pos:end="507:54">/* get the Security Association structure   */</comment>
        <return pos:start="508:9" pos:end="508:34">return <expr pos:start="508:16" pos:end="508:33"><operator pos:start="508:16" pos:end="508:16">&amp;</operator><name pos:start="508:17" pos:end="508:33"><name pos:start="508:17" pos:end="508:19">ctx</name><operator pos:start="508:20" pos:end="508:21">-&gt;</operator><name pos:start="508:22" pos:end="508:23">sa</name><index pos:start="508:24" pos:end="508:33">[<expr pos:start="508:25" pos:end="508:32"><name pos:start="508:25" pos:end="508:32">sa_index</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="511:5" pos:end="781:5"><type pos:start="511:5" pos:end="511:14"><specifier pos:start="511:5" pos:end="511:10">static</specifier> <name pos:start="511:12" pos:end="511:14">INT</name></type> <name pos:start="511:16" pos:end="511:34">AirPDcapScanForKeys</name><parameter_list pos:start="511:35" pos:end="516:39">(
        <parameter pos:start="512:9" pos:end="512:29"><decl pos:start="512:9" pos:end="512:29"><type pos:start="512:9" pos:end="512:29"><name pos:start="512:9" pos:end="512:25">PAIRPDCAP_CONTEXT</name></type> <name pos:start="512:27" pos:end="512:29">ctx</name></decl></parameter>,
        <parameter pos:start="513:9" pos:end="513:26"><decl pos:start="513:9" pos:end="513:26"><type pos:start="513:9" pos:end="513:26"><specifier pos:start="513:9" pos:end="513:13">const</specifier> <name pos:start="513:15" pos:end="513:20">guint8</name> <modifier pos:start="513:22" pos:end="513:22">*</modifier></type><name pos:start="513:23" pos:end="513:26">data</name></decl></parameter>,
        <parameter pos:start="514:9" pos:end="514:34"><decl pos:start="514:9" pos:end="514:34"><type pos:start="514:9" pos:end="514:34"><specifier pos:start="514:9" pos:end="514:13">const</specifier> <name pos:start="514:15" pos:end="514:19">guint</name></type> <name pos:start="514:21" pos:end="514:34">mac_header_len</name></decl></parameter>,
        <parameter pos:start="515:9" pos:end="515:27"><decl pos:start="515:9" pos:end="515:27"><type pos:start="515:9" pos:end="515:27"><specifier pos:start="515:9" pos:end="515:13">const</specifier> <name pos:start="515:15" pos:end="515:19">guint</name></type> <name pos:start="515:21" pos:end="515:27">tot_len</name></decl></parameter>,
        <parameter pos:start="516:9" pos:end="516:38"><decl pos:start="516:9" pos:end="516:38"><type pos:start="516:9" pos:end="516:38"><name pos:start="516:9" pos:end="516:35">AIRPDCAP_SEC_ASSOCIATION_ID</name></type> <name pos:start="516:37" pos:end="516:38">id</name></decl></parameter>)</parameter_list>
    <block pos:start="517:5" pos:end="781:5">{<block_content pos:start="518:9" pos:end="780:47">
        <decl_stmt pos:start="518:9" pos:end="518:26"><decl pos:start="518:9" pos:end="518:25"><type pos:start="518:9" pos:end="518:21"><specifier pos:start="518:9" pos:end="518:13">const</specifier> <name pos:start="518:15" pos:end="518:19">UCHAR</name> <modifier pos:start="518:21" pos:end="518:21">*</modifier></type><name pos:start="518:22" pos:end="518:25">addr</name></decl>;</decl_stmt>
        <decl_stmt pos:start="519:9" pos:end="519:25"><decl pos:start="519:9" pos:end="519:24"><type pos:start="519:9" pos:end="519:13"><name pos:start="519:9" pos:end="519:13">guint</name></type> <name pos:start="519:15" pos:end="519:24">bodyLength</name></decl>;</decl_stmt>
        <decl_stmt pos:start="520:9" pos:end="520:41"><decl pos:start="520:9" pos:end="520:40"><type pos:start="520:9" pos:end="520:33"><name pos:start="520:9" pos:end="520:33">PAIRPDCAP_SEC_ASSOCIATION</name></type> <name pos:start="520:35" pos:end="520:40">sta_sa</name></decl>;</decl_stmt>
        <decl_stmt pos:start="521:9" pos:end="521:37"><decl pos:start="521:9" pos:end="521:36"><type pos:start="521:9" pos:end="521:33"><name pos:start="521:9" pos:end="521:33">PAIRPDCAP_SEC_ASSOCIATION</name></type> <name pos:start="521:35" pos:end="521:36">sa</name></decl>;</decl_stmt>
        <decl_stmt pos:start="522:9" pos:end="522:25"><decl pos:start="522:9" pos:end="522:24"><type pos:start="522:9" pos:end="522:13"><name pos:start="522:9" pos:end="522:13">guint</name></type> <name pos:start="522:15" pos:end="522:20">offset</name> <init pos:start="522:22" pos:end="522:24">= <expr pos:start="522:24" pos:end="522:24"><literal type="number" pos:start="522:24" pos:end="522:24">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="523:9" pos:end="529:10"><decl pos:start="523:9" pos:end="529:9"><type pos:start="523:9" pos:end="523:20"><specifier pos:start="523:9" pos:end="523:13">const</specifier> <name pos:start="523:15" pos:end="523:20">guint8</name></type> <name pos:start="523:22" pos:end="523:35"><name pos:start="523:22" pos:end="523:33">dot1x_header</name><index pos:start="523:34" pos:end="523:35">[]</index></name> <init pos:start="523:37" pos:end="529:9">= <expr pos:start="523:39" pos:end="529:9"><block pos:start="523:39" pos:end="529:9">{
            <expr pos:start="524:13" pos:end="524:16"><literal type="number" pos:start="524:13" pos:end="524:16">0xAA</literal></expr>,             <comment type="block" pos:start="524:31" pos:end="524:45">/* DSAP=SNAP */</comment>
            <expr pos:start="525:13" pos:end="525:16"><literal type="number" pos:start="525:13" pos:end="525:16">0xAA</literal></expr>,             <comment type="block" pos:start="525:31" pos:end="525:45">/* SSAP=SNAP */</comment>
            <expr pos:start="526:13" pos:end="526:16"><literal type="number" pos:start="526:13" pos:end="526:16">0x03</literal></expr>,             <comment type="block" pos:start="526:31" pos:end="526:66">/* Control field=Unnumbered frame */</comment>
            <expr pos:start="527:13" pos:end="527:16"><literal type="number" pos:start="527:13" pos:end="527:16">0x00</literal></expr>, <expr pos:start="527:19" pos:end="527:22"><literal type="number" pos:start="527:19" pos:end="527:22">0x00</literal></expr>, <expr pos:start="527:25" pos:end="527:28"><literal type="number" pos:start="527:25" pos:end="527:28">0x00</literal></expr>, <comment type="block" pos:start="527:31" pos:end="527:62">/* Org. code=encaps. Ethernet */</comment>
            <expr pos:start="528:13" pos:end="528:16"><literal type="number" pos:start="528:13" pos:end="528:16">0x88</literal></expr>, <expr pos:start="528:19" pos:end="528:22"><literal type="number" pos:start="528:19" pos:end="528:22">0x8E</literal></expr>        <comment type="block" pos:start="528:31" pos:end="528:63">/* Type: 802.1X authentication */</comment>
        }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="530:9" pos:end="536:10"><decl pos:start="530:9" pos:end="536:9"><type pos:start="530:9" pos:end="530:20"><specifier pos:start="530:9" pos:end="530:13">const</specifier> <name pos:start="530:15" pos:end="530:20">guint8</name></type> <name pos:start="530:22" pos:end="530:38"><name pos:start="530:22" pos:end="530:36">bt_dot1x_header</name><index pos:start="530:37" pos:end="530:38">[]</index></name> <init pos:start="530:40" pos:end="536:9">= <expr pos:start="530:42" pos:end="536:9"><block pos:start="530:42" pos:end="536:9">{
            <expr pos:start="531:13" pos:end="531:16"><literal type="number" pos:start="531:13" pos:end="531:16">0xAA</literal></expr>,             <comment type="block" pos:start="531:31" pos:end="531:45">/* DSAP=SNAP */</comment>
            <expr pos:start="532:13" pos:end="532:16"><literal type="number" pos:start="532:13" pos:end="532:16">0xAA</literal></expr>,             <comment type="block" pos:start="532:31" pos:end="532:45">/* SSAP=SNAP */</comment>
            <expr pos:start="533:13" pos:end="533:16"><literal type="number" pos:start="533:13" pos:end="533:16">0x03</literal></expr>,             <comment type="block" pos:start="533:31" pos:end="533:66">/* Control field=Unnumbered frame */</comment>
            <expr pos:start="534:13" pos:end="534:16"><literal type="number" pos:start="534:13" pos:end="534:16">0x00</literal></expr>, <expr pos:start="534:19" pos:end="534:22"><literal type="number" pos:start="534:19" pos:end="534:22">0x19</literal></expr>, <expr pos:start="534:25" pos:end="534:28"><literal type="number" pos:start="534:25" pos:end="534:28">0x58</literal></expr>, <comment type="block" pos:start="534:31" pos:end="534:59">/* Org. code=Bluetooth SIG */</comment>
            <expr pos:start="535:13" pos:end="535:16"><literal type="number" pos:start="535:13" pos:end="535:16">0x00</literal></expr>, <expr pos:start="535:19" pos:end="535:22"><literal type="number" pos:start="535:19" pos:end="535:22">0x03</literal></expr>        <comment type="block" pos:start="535:31" pos:end="535:60">/* Type: Bluetooth Security */</comment>
        }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="537:9" pos:end="545:10"><decl pos:start="537:9" pos:end="545:9"><type pos:start="537:9" pos:end="537:20"><specifier pos:start="537:9" pos:end="537:13">const</specifier> <name pos:start="537:15" pos:end="537:20">guint8</name></type> <name pos:start="537:22" pos:end="537:34"><name pos:start="537:22" pos:end="537:32">tdls_header</name><index pos:start="537:33" pos:end="537:34">[]</index></name> <init pos:start="537:36" pos:end="545:9">= <expr pos:start="537:38" pos:end="545:9"><block pos:start="537:38" pos:end="545:9">{
            <expr pos:start="538:13" pos:end="538:16"><literal type="number" pos:start="538:13" pos:end="538:16">0xAA</literal></expr>,             <comment type="block" pos:start="538:31" pos:end="538:45">/* DSAP=SNAP */</comment>
            <expr pos:start="539:13" pos:end="539:16"><literal type="number" pos:start="539:13" pos:end="539:16">0xAA</literal></expr>,             <comment type="block" pos:start="539:31" pos:end="539:45">/* SSAP=SNAP */</comment>
            <expr pos:start="540:13" pos:end="540:16"><literal type="number" pos:start="540:13" pos:end="540:16">0x03</literal></expr>,             <comment type="block" pos:start="540:31" pos:end="540:66">/* Control field=Unnumbered frame */</comment>
            <expr pos:start="541:13" pos:end="541:16"><literal type="number" pos:start="541:13" pos:end="541:16">0x00</literal></expr>, <expr pos:start="541:19" pos:end="541:22"><literal type="number" pos:start="541:19" pos:end="541:22">0x00</literal></expr>, <expr pos:start="541:25" pos:end="541:28"><literal type="number" pos:start="541:25" pos:end="541:28">0x00</literal></expr>, <comment type="block" pos:start="541:31" pos:end="541:62">/* Org. code=encaps. Ethernet */</comment>
            <expr pos:start="542:13" pos:end="542:16"><literal type="number" pos:start="542:13" pos:end="542:16">0x89</literal></expr>, <expr pos:start="542:19" pos:end="542:22"><literal type="number" pos:start="542:19" pos:end="542:22">0x0D</literal></expr>,       <comment type="block" pos:start="542:31" pos:end="542:78">/* Type: 802.11 - Fast Roaming Remote Request */</comment>
            <expr pos:start="543:13" pos:end="543:16"><literal type="number" pos:start="543:13" pos:end="543:16">0x02</literal></expr>,             <comment type="block" pos:start="543:31" pos:end="543:54">/* Payload Type: TDLS */</comment>
            <expr pos:start="544:13" pos:end="544:16"><literal type="number" pos:start="544:13" pos:end="544:16">0X0C</literal></expr>              <comment type="block" pos:start="544:31" pos:end="544:57">/* Action Category: TDLS */</comment>
        }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="547:9" pos:end="550:0"><decl pos:start="547:9" pos:end="547:36"><type pos:start="547:9" pos:end="547:29"><specifier pos:start="547:9" pos:end="547:13">const</specifier> <name pos:start="547:15" pos:end="547:27">EAPOL_RSN_KEY</name> <modifier pos:start="547:29" pos:end="547:29">*</modifier></type><name pos:start="547:30" pos:end="547:36">pEAPKey</name></decl>;</decl_stmt>
<cpp:ifdef pos:start="548:1" pos:end="548:13">#<cpp:directive pos:start="548:2" pos:end="548:6">ifdef</cpp:directive> <name pos:start="548:8" pos:end="548:13">_DEBUG</name></cpp:ifdef>
<cpp:define pos:start="549:1" pos:end="549:22">#<cpp:directive pos:start="549:2" pos:end="549:7">define</cpp:directive> <cpp:macro pos:start="549:9" pos:end="549:18"><name pos:start="549:9" pos:end="549:18">MSGBUF_LEN</name></cpp:macro> <cpp:value pos:start="549:20" pos:end="549:22">255</cpp:value></cpp:define>
        <decl_stmt pos:start="550:9" pos:end="552:0"><decl pos:start="550:9" pos:end="550:31"><type pos:start="550:9" pos:end="550:12"><name pos:start="550:9" pos:end="550:12">CHAR</name></type> <name pos:start="550:14" pos:end="550:31"><name pos:start="550:14" pos:end="550:19">msgbuf</name><index pos:start="550:20" pos:end="550:31">[<expr pos:start="550:21" pos:end="550:30"><name pos:start="550:21" pos:end="550:30">MSGBUF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif pos:start="551:1" pos:end="551:6">#<cpp:directive pos:start="551:2" pos:end="551:6">endif</cpp:directive></cpp:endif>
        <expr_stmt pos:start="552:9" pos:end="552:58"><expr pos:start="552:9" pos:end="552:57"><call pos:start="552:9" pos:end="552:57"><name pos:start="552:9" pos:end="552:34">AIRPDCAP_DEBUG_TRACE_START</name><argument_list pos:start="552:35" pos:end="552:57">(<argument pos:start="552:36" pos:end="552:56"><expr pos:start="552:36" pos:end="552:56"><literal type="string" pos:start="552:36" pos:end="552:56">"AirPDcapScanForKeys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="554:9" pos:end="554:45">/* cache offset in the packet data */</comment>
        <expr_stmt pos:start="555:9" pos:end="555:32"><expr pos:start="555:9" pos:end="555:31"><name pos:start="555:9" pos:end="555:14">offset</name> <operator pos:start="555:16" pos:end="555:16">=</operator> <name pos:start="555:18" pos:end="555:31">mac_header_len</name></expr>;</expr_stmt>

        <comment type="block" pos:start="557:9" pos:end="557:118">/* check if the packet has an LLC header and the packet is 802.1X authentication (IEEE 802.1X-2004, pg. 24) */</comment>
        <if_stmt pos:start="558:9" pos:end="777:9"><if pos:start="558:9" pos:end="662:9">if <condition pos:start="558:12" pos:end="558:106">(<expr pos:start="558:13" pos:end="558:105"><call pos:start="558:13" pos:end="558:50"><name pos:start="558:13" pos:end="558:18">memcmp</name><argument_list pos:start="558:19" pos:end="558:50">(<argument pos:start="558:20" pos:end="558:32"><expr pos:start="558:20" pos:end="558:32"><name pos:start="558:20" pos:end="558:23">data</name> <operator pos:start="558:25" pos:end="558:25">+</operator> <name pos:start="558:27" pos:end="558:32">offset</name></expr></argument>, <argument pos:start="558:35" pos:end="558:46"><expr pos:start="558:35" pos:end="558:46"><name pos:start="558:35" pos:end="558:46">dot1x_header</name></expr></argument>, <argument pos:start="558:49" pos:end="558:49"><expr pos:start="558:49" pos:end="558:49"><literal type="number" pos:start="558:49" pos:end="558:49">8</literal></expr></argument>)</argument_list></call> <operator pos:start="558:52" pos:end="558:53">==</operator> <literal type="number" pos:start="558:55" pos:end="558:55">0</literal> <operator pos:start="558:57" pos:end="558:58">||</operator> <call pos:start="558:60" pos:end="558:100"><name pos:start="558:60" pos:end="558:65">memcmp</name><argument_list pos:start="558:66" pos:end="558:100">(<argument pos:start="558:67" pos:end="558:79"><expr pos:start="558:67" pos:end="558:79"><name pos:start="558:67" pos:end="558:70">data</name> <operator pos:start="558:72" pos:end="558:72">+</operator> <name pos:start="558:74" pos:end="558:79">offset</name></expr></argument>, <argument pos:start="558:82" pos:end="558:96"><expr pos:start="558:82" pos:end="558:96"><name pos:start="558:82" pos:end="558:96">bt_dot1x_header</name></expr></argument>, <argument pos:start="558:99" pos:end="558:99"><expr pos:start="558:99" pos:end="558:99"><literal type="number" pos:start="558:99" pos:end="558:99">8</literal></expr></argument>)</argument_list></call> <operator pos:start="558:102" pos:end="558:103">==</operator> <literal type="number" pos:start="558:105" pos:end="558:105">0</literal></expr>)</condition>
        <block pos:start="559:9" pos:end="662:9">{<block_content pos:start="561:13" pos:end="661:109">

            <expr_stmt pos:start="561:13" pos:end="561:117"><expr pos:start="561:13" pos:end="561:116"><call pos:start="561:13" pos:end="561:116"><name pos:start="561:13" pos:end="561:37">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="561:38" pos:end="561:116">(<argument pos:start="561:39" pos:end="561:59"><expr pos:start="561:39" pos:end="561:59"><literal type="string" pos:start="561:39" pos:end="561:59">"AirPDcapScanForKeys"</literal></expr></argument>, <argument pos:start="561:62" pos:end="561:91"><expr pos:start="561:62" pos:end="561:91"><literal type="string" pos:start="561:62" pos:end="561:91">"Authentication: EAPOL packet"</literal></expr></argument>, <argument pos:start="561:94" pos:end="561:115"><expr pos:start="561:94" pos:end="561:115"><name pos:start="561:94" pos:end="561:115">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="563:13" pos:end="563:33">/* skip LLC header */</comment>
            <expr_stmt pos:start="564:13" pos:end="564:24"><expr pos:start="564:13" pos:end="564:23"><name pos:start="564:13" pos:end="564:18">offset</name> <operator pos:start="564:20" pos:end="564:21">+=</operator> <literal type="number" pos:start="564:23" pos:end="564:23">8</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="566:13" pos:end="566:86">/* check if the packet is a EAPOL-Key (0x03) (IEEE 802.1X-2004, pg. 25) */</comment>
            <if_stmt pos:start="567:13" pos:end="571:13"><if pos:start="567:13" pos:end="571:13">if <condition pos:start="567:16" pos:end="567:38">(<expr pos:start="567:17" pos:end="567:37"><name pos:start="567:17" pos:end="567:32"><name pos:start="567:17" pos:end="567:20">data</name><index pos:start="567:21" pos:end="567:32">[<expr pos:start="567:22" pos:end="567:31"><name pos:start="567:22" pos:end="567:27">offset</name> <operator pos:start="567:29" pos:end="567:29">+</operator> <literal type="number" pos:start="567:31" pos:end="567:31">1</literal></expr>]</index></name> <operator pos:start="567:34" pos:end="567:35">!=</operator> <literal type="number" pos:start="567:37" pos:end="567:37">3</literal></expr>)</condition>
            <block pos:start="568:13" pos:end="571:13">{<block_content pos:start="569:17" pos:end="570:55">
                <expr_stmt pos:start="569:17" pos:end="569:106"><expr pos:start="569:17" pos:end="569:105"><call pos:start="569:17" pos:end="569:105"><name pos:start="569:17" pos:end="569:41">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="569:42" pos:end="569:105">(<argument pos:start="569:43" pos:end="569:63"><expr pos:start="569:43" pos:end="569:63"><literal type="string" pos:start="569:43" pos:end="569:63">"AirPDcapScanForKeys"</literal></expr></argument>, <argument pos:start="569:66" pos:end="569:80"><expr pos:start="569:66" pos:end="569:80"><literal type="string" pos:start="569:66" pos:end="569:80">"Not EAPOL-Key"</literal></expr></argument>, <argument pos:start="569:83" pos:end="569:104"><expr pos:start="569:83" pos:end="569:104"><name pos:start="569:83" pos:end="569:104">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="570:17" pos:end="570:55">return <expr pos:start="570:24" pos:end="570:54"><name pos:start="570:24" pos:end="570:54">AIRPDCAP_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="573:13" pos:end="573:74">/* get and check the body length (IEEE 802.1X-2004, pg. 25) */</comment>
            <expr_stmt pos:start="574:13" pos:end="574:52"><expr pos:start="574:13" pos:end="574:51"><name pos:start="574:13" pos:end="574:22">bodyLength</name> <operator pos:start="574:24" pos:end="574:24">=</operator> <call pos:start="574:26" pos:end="574:51"><name pos:start="574:26" pos:end="574:32">pntoh16</name><argument_list pos:start="574:33" pos:end="574:51">(<argument pos:start="574:34" pos:end="574:50"><expr pos:start="574:34" pos:end="574:50"><name pos:start="574:34" pos:end="574:37">data</name> <operator pos:start="574:39" pos:end="574:39">+</operator> <name pos:start="574:41" pos:end="574:46">offset</name> <operator pos:start="574:48" pos:end="574:48">+</operator> <literal type="number" pos:start="574:50" pos:end="574:50">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="575:13" pos:end="579:13"><if pos:start="575:13" pos:end="579:13">if <condition pos:start="575:16" pos:end="575:52">(<expr pos:start="575:17" pos:end="575:51"><operator pos:start="575:17" pos:end="575:17">(</operator><name pos:start="575:18" pos:end="575:24">tot_len</name> <operator pos:start="575:26" pos:end="575:26">-</operator> <name pos:start="575:28" pos:end="575:33">offset</name> <operator pos:start="575:35" pos:end="575:35">-</operator> <literal type="number" pos:start="575:37" pos:end="575:37">4</literal><operator pos:start="575:38" pos:end="575:38">)</operator> <operator pos:start="575:40" pos:end="575:40">&lt;</operator> <name pos:start="575:42" pos:end="575:51">bodyLength</name></expr>)</condition>
            <block pos:start="576:13" pos:end="579:13">{<block_content pos:start="577:17" pos:end="578:55"> <comment type="block" pos:start="576:15" pos:end="576:109">/* Only check if frame is long enough for eapol header, ignore tailing garbage, see bug 9065 */</comment>
                <expr_stmt pos:start="577:17" pos:end="577:113"><expr pos:start="577:17" pos:end="577:112"><call pos:start="577:17" pos:end="577:112"><name pos:start="577:17" pos:end="577:41">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="577:42" pos:end="577:112">(<argument pos:start="577:43" pos:end="577:63"><expr pos:start="577:43" pos:end="577:63"><literal type="string" pos:start="577:43" pos:end="577:63">"AirPDcapScanForKeys"</literal></expr></argument>, <argument pos:start="577:66" pos:end="577:87"><expr pos:start="577:66" pos:end="577:87"><literal type="string" pos:start="577:66" pos:end="577:87">"EAPOL body too short"</literal></expr></argument>, <argument pos:start="577:90" pos:end="577:111"><expr pos:start="577:90" pos:end="577:111"><name pos:start="577:90" pos:end="577:111">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="578:17" pos:end="578:55">return <expr pos:start="578:24" pos:end="578:54"><name pos:start="578:24" pos:end="578:54">AIRPDCAP_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="581:13" pos:end="581:70">/* skip EAPOL MPDU and go to the first byte of the body */</comment>
            <expr_stmt pos:start="582:13" pos:end="582:24"><expr pos:start="582:13" pos:end="582:23"><name pos:start="582:13" pos:end="582:18">offset</name> <operator pos:start="582:20" pos:end="582:21">+=</operator> <literal type="number" pos:start="582:23" pos:end="582:23">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="584:13" pos:end="584:61"><expr pos:start="584:13" pos:end="584:60"><name pos:start="584:13" pos:end="584:19">pEAPKey</name> <operator pos:start="584:21" pos:end="584:21">=</operator> <operator pos:start="584:23" pos:end="584:23">(</operator><specifier pos:start="584:24" pos:end="584:28">const</specifier> <name pos:start="584:30" pos:end="584:42">EAPOL_RSN_KEY</name> <operator pos:start="584:44" pos:end="584:44">*</operator><operator pos:start="584:45" pos:end="584:45">)</operator><operator pos:start="584:46" pos:end="584:46">(</operator><name pos:start="584:47" pos:end="584:50">data</name> <operator pos:start="584:52" pos:end="584:52">+</operator> <name pos:start="584:54" pos:end="584:59">offset</name><operator pos:start="584:60" pos:end="584:60">)</operator></expr>;</expr_stmt>

            <comment type="block" pos:start="586:13" pos:end="586:86">/* check if the key descriptor type is valid (IEEE 802.1X-2004, pg. 27) */</comment>
            <if_stmt pos:start="587:13" pos:end="593:13"><if pos:start="587:13" pos:end="593:13">if <condition pos:start="587:16" pos:end="589:65">(<comment type="block" pos:start="587:17" pos:end="587:41">/*pEAPKey-&gt;type!=0x1 &amp;&amp;*/</comment>                                <comment type="block" pos:start="587:74" pos:end="587:115">/* RC4 Key Descriptor Type (deprecated) */</comment>
                    <expr pos:start="588:21" pos:end="589:64"><name pos:start="588:21" pos:end="588:33"><name pos:start="588:21" pos:end="588:27">pEAPKey</name><operator pos:start="588:28" pos:end="588:29">-&gt;</operator><name pos:start="588:30" pos:end="588:33">type</name></name> <operator pos:start="588:35" pos:end="588:36">!=</operator> <name pos:start="588:38" pos:end="588:69">AIRPDCAP_RSN_WPA2_KEY_DESCRIPTOR</name> <operator pos:start="588:71" pos:end="588:72">&amp;&amp;</operator> <comment type="block" pos:start="588:74" pos:end="588:118">/* IEEE 802.11 Key Descriptor Type  (WPA2) */</comment>
                <name pos:start="589:17" pos:end="589:29"><name pos:start="589:17" pos:end="589:23">pEAPKey</name><operator pos:start="589:24" pos:end="589:25">-&gt;</operator><name pos:start="589:26" pos:end="589:29">type</name></name> <operator pos:start="589:31" pos:end="589:32">!=</operator> <name pos:start="589:34" pos:end="589:64">AIRPDCAP_RSN_WPA_KEY_DESCRIPTOR</name></expr>)</condition>        <comment type="block" pos:start="589:74" pos:end="589:123">/* 254 = RSN_KEY_DESCRIPTOR - WPA,              */</comment>
            <block pos:start="590:13" pos:end="593:13">{<block_content pos:start="591:17" pos:end="592:55">
                <expr_stmt pos:start="591:17" pos:end="591:122"><expr pos:start="591:17" pos:end="591:121"><call pos:start="591:17" pos:end="591:121"><name pos:start="591:17" pos:end="591:41">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="591:42" pos:end="591:121">(<argument pos:start="591:43" pos:end="591:63"><expr pos:start="591:43" pos:end="591:63"><literal type="string" pos:start="591:43" pos:end="591:63">"AirPDcapScanForKeys"</literal></expr></argument>, <argument pos:start="591:66" pos:end="591:96"><expr pos:start="591:66" pos:end="591:96"><literal type="string" pos:start="591:66" pos:end="591:96">"Not valid key descriptor type"</literal></expr></argument>, <argument pos:start="591:99" pos:end="591:120"><expr pos:start="591:99" pos:end="591:120"><name pos:start="591:99" pos:end="591:120">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="592:17" pos:end="592:55">return <expr pos:start="592:24" pos:end="592:54"><name pos:start="592:24" pos:end="592:54">AIRPDCAP_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="595:13" pos:end="595:44">/* start with descriptor body */</comment>
            <expr_stmt pos:start="596:13" pos:end="596:24"><expr pos:start="596:13" pos:end="596:23"><name pos:start="596:13" pos:end="596:18">offset</name> <operator pos:start="596:20" pos:end="596:21">+=</operator> <literal type="number" pos:start="596:23" pos:end="596:23">1</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="598:13" pos:end="598:83">/* search for a cached Security Association for current BSSID and AP */</comment>
            <expr_stmt pos:start="599:13" pos:end="599:44"><expr pos:start="599:13" pos:end="599:43"><name pos:start="599:13" pos:end="599:14">sa</name> <operator pos:start="599:16" pos:end="599:16">=</operator> <call pos:start="599:18" pos:end="599:43"><name pos:start="599:18" pos:end="599:33">AirPDcapGetSaPtr</name><argument_list pos:start="599:34" pos:end="599:43">(<argument pos:start="599:35" pos:end="599:37"><expr pos:start="599:35" pos:end="599:37"><name pos:start="599:35" pos:end="599:37">ctx</name></expr></argument>, <argument pos:start="599:40" pos:end="599:42"><expr pos:start="599:40" pos:end="599:42"><operator pos:start="599:40" pos:end="599:40">&amp;</operator><name pos:start="599:41" pos:end="599:42">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="600:13" pos:end="604:13"><if pos:start="600:13" pos:end="604:13">if <condition pos:start="600:16" pos:end="600:27">(<expr pos:start="600:17" pos:end="600:26"><name pos:start="600:17" pos:end="600:18">sa</name> <operator pos:start="600:20" pos:end="600:21">==</operator> <name pos:start="600:23" pos:end="600:26">NULL</name></expr>)</condition>
            <block pos:start="601:13" pos:end="604:13">{<block_content pos:start="602:17" pos:end="603:45">
                <expr_stmt pos:start="602:17" pos:end="602:114"><expr pos:start="602:17" pos:end="602:113"><call pos:start="602:17" pos:end="602:113"><name pos:start="602:17" pos:end="602:41">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="602:42" pos:end="602:113">(<argument pos:start="602:43" pos:end="602:63"><expr pos:start="602:43" pos:end="602:63"><literal type="string" pos:start="602:43" pos:end="602:63">"AirPDcapScanForKeys"</literal></expr></argument>, <argument pos:start="602:66" pos:end="602:88"><expr pos:start="602:66" pos:end="602:88"><literal type="string" pos:start="602:66" pos:end="602:88">"No SA for BSSID found"</literal></expr></argument>, <argument pos:start="602:91" pos:end="602:112"><expr pos:start="602:91" pos:end="602:112"><name pos:start="602:91" pos:end="602:112">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="603:17" pos:end="603:45">return <expr pos:start="603:24" pos:end="603:44"><name pos:start="603:24" pos:end="603:44">AIRPDCAP_RET_REQ_DATA</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="606:13" pos:end="606:60">/* It could be a Pairwise Key exchange, check */</comment>
            <if_stmt pos:start="607:13" pos:end="608:54"><if pos:start="607:13" pos:end="608:54">if <condition pos:start="607:16" pos:end="607:106">(<expr pos:start="607:17" pos:end="607:105"><call pos:start="607:17" pos:end="607:71"><name pos:start="607:17" pos:end="607:39">AirPDcapRsna4WHandshake</name><argument_list pos:start="607:40" pos:end="607:71">(<argument pos:start="607:41" pos:end="607:43"><expr pos:start="607:41" pos:end="607:43"><name pos:start="607:41" pos:end="607:43">ctx</name></expr></argument>, <argument pos:start="607:46" pos:end="607:49"><expr pos:start="607:46" pos:end="607:49"><name pos:start="607:46" pos:end="607:49">data</name></expr></argument>, <argument pos:start="607:52" pos:end="607:53"><expr pos:start="607:52" pos:end="607:53"><name pos:start="607:52" pos:end="607:53">sa</name></expr></argument>, <argument pos:start="607:56" pos:end="607:61"><expr pos:start="607:56" pos:end="607:61"><name pos:start="607:56" pos:end="607:61">offset</name></expr></argument>, <argument pos:start="607:64" pos:end="607:70"><expr pos:start="607:64" pos:end="607:70"><name pos:start="607:64" pos:end="607:70">tot_len</name></expr></argument>)</argument_list></call> <operator pos:start="607:73" pos:end="607:74">==</operator> <name pos:start="607:76" pos:end="607:105">AIRPDCAP_RET_SUCCESS_HANDSHAKE</name></expr>)</condition><block type="pseudo" pos:start="608:17" pos:end="608:54"><block_content pos:start="608:17" pos:end="608:54">
                <return pos:start="608:17" pos:end="608:54">return <expr pos:start="608:24" pos:end="608:53"><name pos:start="608:24" pos:end="608:53">AIRPDCAP_RET_SUCCESS_HANDSHAKE</name></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="610:13" pos:end="614:13"><if pos:start="610:13" pos:end="614:13">if <condition pos:start="610:16" pos:end="610:69">(<expr pos:start="610:17" pos:end="610:68"><name pos:start="610:17" pos:end="610:30">mac_header_len</name> <operator pos:start="610:32" pos:end="610:32">+</operator> <name pos:start="610:34" pos:end="610:58">GROUP_KEY_PAYLOAD_LEN_MIN</name> <operator pos:start="610:60" pos:end="610:60">&gt;</operator> <name pos:start="610:62" pos:end="610:68">tot_len</name></expr>)</condition>
            <block pos:start="611:13" pos:end="614:13">{<block_content pos:start="612:17" pos:end="613:55">
                <expr_stmt pos:start="612:17" pos:end="612:124"><expr pos:start="612:17" pos:end="612:123"><call pos:start="612:17" pos:end="612:123"><name pos:start="612:17" pos:end="612:41">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="612:42" pos:end="612:123">(<argument pos:start="612:43" pos:end="612:63"><expr pos:start="612:43" pos:end="612:63"><literal type="string" pos:start="612:43" pos:end="612:63">"AirPDcapScanForKeys"</literal></expr></argument>, <argument pos:start="612:66" pos:end="612:98"><expr pos:start="612:66" pos:end="612:98"><literal type="string" pos:start="612:66" pos:end="612:98">"Message too short for Group Key"</literal></expr></argument>, <argument pos:start="612:101" pos:end="612:122"><expr pos:start="612:101" pos:end="612:122"><name pos:start="612:101" pos:end="612:122">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="613:17" pos:end="613:55">return <expr pos:start="613:24" pos:end="613:54"><name pos:start="613:24" pos:end="613:54">AIRPDCAP_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="616:13" pos:end="616:85">/* Verify the bitfields: Key = 0(groupwise) Mic = 1 Ack = 1 Secure = 1 */</comment>
            <if_stmt pos:start="617:13" pos:end="625:13"><if pos:start="617:13" pos:end="625:13">if <condition pos:start="617:16" pos:end="620:52">(<expr pos:start="617:17" pos:end="620:51"><call pos:start="617:17" pos:end="617:50"><name pos:start="617:17" pos:end="617:32">AIRPDCAP_EAP_KEY</name><argument_list pos:start="617:33" pos:end="617:50">(<argument pos:start="617:34" pos:end="617:49"><expr pos:start="617:34" pos:end="617:49"><name pos:start="617:34" pos:end="617:49"><name pos:start="617:34" pos:end="617:37">data</name><index pos:start="617:38" pos:end="617:49">[<expr pos:start="617:39" pos:end="617:48"><name pos:start="617:39" pos:end="617:44">offset</name> <operator pos:start="617:46" pos:end="617:46">+</operator> <literal type="number" pos:start="617:48" pos:end="617:48">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="617:52" pos:end="617:53">!=</operator> <literal type="number" pos:start="617:55" pos:end="617:55">0</literal> <operator pos:start="617:57" pos:end="617:58">||</operator>
                <call pos:start="618:17" pos:end="618:50"><name pos:start="618:17" pos:end="618:32">AIRPDCAP_EAP_ACK</name><argument_list pos:start="618:33" pos:end="618:50">(<argument pos:start="618:34" pos:end="618:49"><expr pos:start="618:34" pos:end="618:49"><name pos:start="618:34" pos:end="618:49"><name pos:start="618:34" pos:end="618:37">data</name><index pos:start="618:38" pos:end="618:49">[<expr pos:start="618:39" pos:end="618:48"><name pos:start="618:39" pos:end="618:44">offset</name> <operator pos:start="618:46" pos:end="618:46">+</operator> <literal type="number" pos:start="618:48" pos:end="618:48">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="618:52" pos:end="618:53">!=</operator> <literal type="number" pos:start="618:55" pos:end="618:55">1</literal> <operator pos:start="618:57" pos:end="618:58">||</operator>
                <call pos:start="619:17" pos:end="619:46"><name pos:start="619:17" pos:end="619:32">AIRPDCAP_EAP_MIC</name><argument_list pos:start="619:33" pos:end="619:46">(<argument pos:start="619:34" pos:end="619:45"><expr pos:start="619:34" pos:end="619:45"><name pos:start="619:34" pos:end="619:45"><name pos:start="619:34" pos:end="619:37">data</name><index pos:start="619:38" pos:end="619:45">[<expr pos:start="619:39" pos:end="619:44"><name pos:start="619:39" pos:end="619:44">offset</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="619:48" pos:end="619:49">!=</operator> <literal type="number" pos:start="619:51" pos:end="619:51">1</literal> <operator pos:start="619:53" pos:end="619:54">||</operator>
                <call pos:start="620:17" pos:end="620:46"><name pos:start="620:17" pos:end="620:32">AIRPDCAP_EAP_SEC</name><argument_list pos:start="620:33" pos:end="620:46">(<argument pos:start="620:34" pos:end="620:45"><expr pos:start="620:34" pos:end="620:45"><name pos:start="620:34" pos:end="620:45"><name pos:start="620:34" pos:end="620:37">data</name><index pos:start="620:38" pos:end="620:45">[<expr pos:start="620:39" pos:end="620:44"><name pos:start="620:39" pos:end="620:44">offset</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="620:48" pos:end="620:49">!=</operator> <literal type="number" pos:start="620:51" pos:end="620:51">1</literal></expr>)</condition>
            <block pos:start="621:13" pos:end="625:13">{<block_content pos:start="623:17" pos:end="624:55">

                <expr_stmt pos:start="623:17" pos:end="623:132"><expr pos:start="623:17" pos:end="623:131"><call pos:start="623:17" pos:end="623:131"><name pos:start="623:17" pos:end="623:41">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="623:42" pos:end="623:131">(<argument pos:start="623:43" pos:end="623:63"><expr pos:start="623:43" pos:end="623:63"><literal type="string" pos:start="623:43" pos:end="623:63">"AirPDcapScanForKeys"</literal></expr></argument>, <argument pos:start="623:66" pos:end="623:106"><expr pos:start="623:66" pos:end="623:106"><literal type="string" pos:start="623:66" pos:end="623:106">"Key bitfields not correct for Group Key"</literal></expr></argument>, <argument pos:start="623:109" pos:end="623:130"><expr pos:start="623:109" pos:end="623:130"><name pos:start="623:109" pos:end="623:130">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="624:17" pos:end="624:55">return <expr pos:start="624:24" pos:end="624:54"><name pos:start="624:24" pos:end="624:54">AIRPDCAP_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="627:13" pos:end="627:95">/* force STA address to be the broadcast MAC so we create an SA for the groupkey */</comment>
            <expr_stmt pos:start="628:13" pos:end="628:60"><expr pos:start="628:13" pos:end="628:59"><call pos:start="628:13" pos:end="628:59"><name pos:start="628:13" pos:end="628:18">memcpy</name><argument_list pos:start="628:19" pos:end="628:59">(<argument pos:start="628:20" pos:end="628:25"><expr pos:start="628:20" pos:end="628:25"><name pos:start="628:20" pos:end="628:25"><name pos:start="628:20" pos:end="628:21">id</name><operator pos:start="628:22" pos:end="628:22">.</operator><name pos:start="628:23" pos:end="628:25">sta</name></name></expr></argument>, <argument pos:start="628:28" pos:end="628:40"><expr pos:start="628:28" pos:end="628:40"><name pos:start="628:28" pos:end="628:40">broadcast_mac</name></expr></argument>, <argument pos:start="628:43" pos:end="628:58"><expr pos:start="628:43" pos:end="628:58"><name pos:start="628:43" pos:end="628:58">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="630:13" pos:end="630:85">/* get the Security Association structure for the broadcast MAC and AP */</comment>
            <expr_stmt pos:start="631:13" pos:end="631:44"><expr pos:start="631:13" pos:end="631:43"><name pos:start="631:13" pos:end="631:14">sa</name> <operator pos:start="631:16" pos:end="631:16">=</operator> <call pos:start="631:18" pos:end="631:43"><name pos:start="631:18" pos:end="631:33">AirPDcapGetSaPtr</name><argument_list pos:start="631:34" pos:end="631:43">(<argument pos:start="631:35" pos:end="631:37"><expr pos:start="631:35" pos:end="631:37"><name pos:start="631:35" pos:end="631:37">ctx</name></expr></argument>, <argument pos:start="631:40" pos:end="631:42"><expr pos:start="631:40" pos:end="631:42"><operator pos:start="631:40" pos:end="631:40">&amp;</operator><name pos:start="631:41" pos:end="631:42">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="632:13" pos:end="635:13"><if pos:start="632:13" pos:end="635:13">if <condition pos:start="632:16" pos:end="632:27">(<expr pos:start="632:17" pos:end="632:26"><name pos:start="632:17" pos:end="632:18">sa</name> <operator pos:start="632:20" pos:end="632:21">==</operator> <name pos:start="632:23" pos:end="632:26">NULL</name></expr>)</condition>
            <block pos:start="633:13" pos:end="635:13">{<block_content pos:start="634:17" pos:end="634:45">
                <return pos:start="634:17" pos:end="634:45">return <expr pos:start="634:24" pos:end="634:44"><name pos:start="634:24" pos:end="634:44">AIRPDCAP_RET_REQ_DATA</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="637:13" pos:end="637:97">/* Get the SA for the STA, since we need its pairwise key to decrpyt the group key */</comment>

            <comment type="block" pos:start="639:13" pos:end="639:33">/* get STA address */</comment>
            <if_stmt pos:start="640:13" pos:end="652:13"><if pos:start="640:13" pos:end="647:13">if <condition pos:start="640:16" pos:end="640:97">(<expr pos:start="640:17" pos:end="640:96"><operator pos:start="640:17" pos:end="640:17">(</operator><name pos:start="640:18" pos:end="640:21">addr</name> <operator pos:start="640:23" pos:end="640:23">=</operator> <call pos:start="640:25" pos:end="640:87"><name pos:start="640:25" pos:end="640:45">AirPDcapGetStaAddress</name><argument_list pos:start="640:46" pos:end="640:87">(<argument pos:start="640:47" pos:end="640:86"><expr pos:start="640:47" pos:end="640:86"><operator pos:start="640:47" pos:end="640:47">(</operator><specifier pos:start="640:48" pos:end="640:52">const</specifier> <name pos:start="640:54" pos:end="640:77">AIRPDCAP_MAC_FRAME_ADDR4</name> <operator pos:start="640:79" pos:end="640:79">*</operator><operator pos:start="640:80" pos:end="640:80">)</operator><operator pos:start="640:81" pos:end="640:81">(</operator><name pos:start="640:82" pos:end="640:85">data</name><operator pos:start="640:86" pos:end="640:86">)</operator></expr></argument>)</argument_list></call><operator pos:start="640:88" pos:end="640:88">)</operator> <operator pos:start="640:90" pos:end="640:91">!=</operator> <name pos:start="640:93" pos:end="640:96">NULL</name></expr>)</condition>
            <block pos:start="641:13" pos:end="647:13">{<block_content pos:start="642:17" pos:end="646:97">
                <expr_stmt pos:start="642:17" pos:end="644:0"><expr pos:start="642:17" pos:end="642:54"><call pos:start="642:17" pos:end="642:54"><name pos:start="642:17" pos:end="642:22">memcpy</name><argument_list pos:start="642:23" pos:end="642:54">(<argument pos:start="642:24" pos:end="642:29"><expr pos:start="642:24" pos:end="642:29"><name pos:start="642:24" pos:end="642:29"><name pos:start="642:24" pos:end="642:25">id</name><operator pos:start="642:26" pos:end="642:26">.</operator><name pos:start="642:27" pos:end="642:29">sta</name></name></expr></argument>, <argument pos:start="642:32" pos:end="642:35"><expr pos:start="642:32" pos:end="642:35"><name pos:start="642:32" pos:end="642:35">addr</name></expr></argument>, <argument pos:start="642:38" pos:end="642:53"><expr pos:start="642:38" pos:end="642:53"><name pos:start="642:38" pos:end="642:53">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="643:1" pos:end="643:13">#<cpp:directive pos:start="643:2" pos:end="643:6">ifdef</cpp:directive> <name pos:start="643:8" pos:end="643:13">_DEBUG</name></cpp:ifdef>
                <expr_stmt pos:start="644:17" pos:end="646:0"><expr pos:start="644:17" pos:end="644:149"><call pos:start="644:17" pos:end="644:149"><name pos:start="644:17" pos:end="644:26">g_snprintf</name><argument_list pos:start="644:27" pos:end="644:149">(<argument pos:start="644:28" pos:end="644:33"><expr pos:start="644:28" pos:end="644:33"><name pos:start="644:28" pos:end="644:33">msgbuf</name></expr></argument>, <argument pos:start="644:36" pos:end="644:45"><expr pos:start="644:36" pos:end="644:45"><name pos:start="644:36" pos:end="644:45">MSGBUF_LEN</name></expr></argument>, <argument pos:start="644:48" pos:end="644:82"><expr pos:start="644:48" pos:end="644:82"><literal type="string" pos:start="644:48" pos:end="644:82">"ST_MAC: %2X.%2X.%2X.%2X.%2X.%2X\t"</literal></expr></argument>, <argument pos:start="644:85" pos:end="644:93"><expr pos:start="644:85" pos:end="644:93"><name pos:start="644:85" pos:end="644:93"><name pos:start="644:85" pos:end="644:86">id</name><operator pos:start="644:87" pos:end="644:87">.</operator><name pos:start="644:88" pos:end="644:90">sta</name><index pos:start="644:91" pos:end="644:93">[<expr pos:start="644:92" pos:end="644:92"><literal type="number" pos:start="644:92" pos:end="644:92">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="644:96" pos:end="644:104"><expr pos:start="644:96" pos:end="644:104"><name pos:start="644:96" pos:end="644:104"><name pos:start="644:96" pos:end="644:97">id</name><operator pos:start="644:98" pos:end="644:98">.</operator><name pos:start="644:99" pos:end="644:101">sta</name><index pos:start="644:102" pos:end="644:104">[<expr pos:start="644:103" pos:end="644:103"><literal type="number" pos:start="644:103" pos:end="644:103">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="644:107" pos:end="644:115"><expr pos:start="644:107" pos:end="644:115"><name pos:start="644:107" pos:end="644:115"><name pos:start="644:107" pos:end="644:108">id</name><operator pos:start="644:109" pos:end="644:109">.</operator><name pos:start="644:110" pos:end="644:112">sta</name><index pos:start="644:113" pos:end="644:115">[<expr pos:start="644:114" pos:end="644:114"><literal type="number" pos:start="644:114" pos:end="644:114">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="644:118" pos:end="644:126"><expr pos:start="644:118" pos:end="644:126"><name pos:start="644:118" pos:end="644:126"><name pos:start="644:118" pos:end="644:119">id</name><operator pos:start="644:120" pos:end="644:120">.</operator><name pos:start="644:121" pos:end="644:123">sta</name><index pos:start="644:124" pos:end="644:126">[<expr pos:start="644:125" pos:end="644:125"><literal type="number" pos:start="644:125" pos:end="644:125">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="644:129" pos:end="644:137"><expr pos:start="644:129" pos:end="644:137"><name pos:start="644:129" pos:end="644:137"><name pos:start="644:129" pos:end="644:130">id</name><operator pos:start="644:131" pos:end="644:131">.</operator><name pos:start="644:132" pos:end="644:134">sta</name><index pos:start="644:135" pos:end="644:137">[<expr pos:start="644:136" pos:end="644:136"><literal type="number" pos:start="644:136" pos:end="644:136">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="644:140" pos:end="644:148"><expr pos:start="644:140" pos:end="644:148"><name pos:start="644:140" pos:end="644:148"><name pos:start="644:140" pos:end="644:141">id</name><operator pos:start="644:142" pos:end="644:142">.</operator><name pos:start="644:143" pos:end="644:145">sta</name><index pos:start="644:146" pos:end="644:148">[<expr pos:start="644:147" pos:end="644:147"><literal type="number" pos:start="644:147" pos:end="644:147">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="645:1" pos:end="645:6">#<cpp:directive pos:start="645:2" pos:end="645:6">endif</cpp:directive></cpp:endif>
                <expr_stmt pos:start="646:17" pos:end="646:97"><expr pos:start="646:17" pos:end="646:96"><call pos:start="646:17" pos:end="646:96"><name pos:start="646:17" pos:end="646:41">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="646:42" pos:end="646:96">(<argument pos:start="646:43" pos:end="646:63"><expr pos:start="646:43" pos:end="646:63"><literal type="string" pos:start="646:43" pos:end="646:63">"AirPDcapScanForKeys"</literal></expr></argument>, <argument pos:start="646:66" pos:end="646:71"><expr pos:start="646:66" pos:end="646:71"><name pos:start="646:66" pos:end="646:71">msgbuf</name></expr></argument>, <argument pos:start="646:74" pos:end="646:95"><expr pos:start="646:74" pos:end="646:95"><name pos:start="646:74" pos:end="646:95">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else pos:start="648:13" pos:end="652:13">else
            <block pos:start="649:13" pos:end="652:13">{<block_content pos:start="650:17" pos:end="651:45">
                <expr_stmt pos:start="650:17" pos:end="650:105"><expr pos:start="650:17" pos:end="650:104"><call pos:start="650:17" pos:end="650:104"><name pos:start="650:17" pos:end="650:41">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="650:42" pos:end="650:104">(<argument pos:start="650:43" pos:end="650:63"><expr pos:start="650:43" pos:end="650:63"><literal type="string" pos:start="650:43" pos:end="650:63">"AirPDcapScanForKeys"</literal></expr></argument>, <argument pos:start="650:66" pos:end="650:79"><expr pos:start="650:66" pos:end="650:79"><literal type="string" pos:start="650:66" pos:end="650:79">"SA not found"</literal></expr></argument>, <argument pos:start="650:82" pos:end="650:103"><expr pos:start="650:82" pos:end="650:103"><name pos:start="650:82" pos:end="650:103">AIRPDCAP_DEBUG_LEVEL_5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="651:17" pos:end="651:45">return <expr pos:start="651:24" pos:end="651:44"><name pos:start="651:24" pos:end="651:44">AIRPDCAP_RET_REQ_DATA</name></expr>;</return>
            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="654:13" pos:end="654:48"><expr pos:start="654:13" pos:end="654:47"><name pos:start="654:13" pos:end="654:18">sta_sa</name> <operator pos:start="654:20" pos:end="654:20">=</operator> <call pos:start="654:22" pos:end="654:47"><name pos:start="654:22" pos:end="654:37">AirPDcapGetSaPtr</name><argument_list pos:start="654:38" pos:end="654:47">(<argument pos:start="654:39" pos:end="654:41"><expr pos:start="654:39" pos:end="654:41"><name pos:start="654:39" pos:end="654:41">ctx</name></expr></argument>, <argument pos:start="654:44" pos:end="654:46"><expr pos:start="654:44" pos:end="654:46"><operator pos:start="654:44" pos:end="654:44">&amp;</operator><name pos:start="654:45" pos:end="654:46">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="655:13" pos:end="658:13"><if pos:start="655:13" pos:end="658:13">if <condition pos:start="655:16" pos:end="655:31">(<expr pos:start="655:17" pos:end="655:30"><name pos:start="655:17" pos:end="655:22">sta_sa</name> <operator pos:start="655:24" pos:end="655:25">==</operator> <name pos:start="655:27" pos:end="655:30">NULL</name></expr>)</condition>
            <block pos:start="656:13" pos:end="658:13">{<block_content pos:start="657:17" pos:end="657:45">
                <return pos:start="657:17" pos:end="657:45">return <expr pos:start="657:24" pos:end="657:44"><name pos:start="657:24" pos:end="657:44">AIRPDCAP_RET_REQ_DATA</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="660:13" pos:end="660:71">/* Try to extract the group key and install it in the SA */</comment>
            <return pos:start="661:13" pos:end="661:109">return <expr pos:start="661:20" pos:end="661:108"><operator pos:start="661:20" pos:end="661:20">(</operator><call pos:start="661:21" pos:end="661:107"><name pos:start="661:21" pos:end="661:50">AirPDcapDecryptWPABroadcastKey</name><argument_list pos:start="661:51" pos:end="661:107">(<argument pos:start="661:52" pos:end="661:58"><expr pos:start="661:52" pos:end="661:58"><name pos:start="661:52" pos:end="661:58">pEAPKey</name></expr></argument>, <argument pos:start="661:61" pos:end="661:80"><expr pos:start="661:61" pos:end="661:80"><name pos:start="661:61" pos:end="661:75"><name pos:start="661:61" pos:end="661:66">sta_sa</name><operator pos:start="661:67" pos:end="661:68">-&gt;</operator><name pos:start="661:69" pos:end="661:71">wpa</name><operator pos:start="661:72" pos:end="661:72">.</operator><name pos:start="661:73" pos:end="661:75">ptk</name></name> <operator pos:start="661:77" pos:end="661:77">+</operator> <literal type="number" pos:start="661:79" pos:end="661:80">16</literal></expr></argument>, <argument pos:start="661:83" pos:end="661:84"><expr pos:start="661:83" pos:end="661:84"><name pos:start="661:83" pos:end="661:84">sa</name></expr></argument>, <argument pos:start="661:87" pos:end="661:106"><expr pos:start="661:87" pos:end="661:106"><name pos:start="661:87" pos:end="661:93">tot_len</name> <operator pos:start="661:95" pos:end="661:95">-</operator> <name pos:start="661:97" pos:end="661:102">offset</name> <operator pos:start="661:104" pos:end="661:104">+</operator> <literal type="number" pos:start="661:106" pos:end="661:106">1</literal></expr></argument>)</argument_list></call><operator pos:start="661:108" pos:end="661:108">)</operator></expr>;</return>
        </block_content>}</block></if>
        <if type="elseif" pos:start="663:9" pos:end="773:9">else if <condition pos:start="663:17" pos:end="663:61">(<expr pos:start="663:18" pos:end="663:60"><call pos:start="663:18" pos:end="663:55"><name pos:start="663:18" pos:end="663:23">memcmp</name><argument_list pos:start="663:24" pos:end="663:55">(<argument pos:start="663:25" pos:end="663:37"><expr pos:start="663:25" pos:end="663:37"><name pos:start="663:25" pos:end="663:28">data</name> <operator pos:start="663:30" pos:end="663:30">+</operator> <name pos:start="663:32" pos:end="663:37">offset</name></expr></argument>, <argument pos:start="663:40" pos:end="663:50"><expr pos:start="663:40" pos:end="663:50"><name pos:start="663:40" pos:end="663:50">tdls_header</name></expr></argument>, <argument pos:start="663:53" pos:end="663:54"><expr pos:start="663:53" pos:end="663:54"><literal type="number" pos:start="663:53" pos:end="663:54">10</literal></expr></argument>)</argument_list></call> <operator pos:start="663:57" pos:end="663:58">==</operator> <literal type="number" pos:start="663:60" pos:end="663:60">0</literal></expr>)</condition>
        <block pos:start="664:9" pos:end="773:9">{<block_content pos:start="665:13" pos:end="772:13">
            <decl_stmt pos:start="665:13" pos:end="665:48"><decl pos:start="665:13" pos:end="665:35"><type pos:start="665:13" pos:end="665:26"><specifier pos:start="665:13" pos:end="665:17">const</specifier> <name pos:start="665:19" pos:end="665:24">guint8</name> <modifier pos:start="665:26" pos:end="665:26">*</modifier></type><name pos:start="665:27" pos:end="665:35">initiator</name></decl>, <decl pos:start="665:38" pos:end="665:47"><type ref="prev" pos:start="665:13" pos:end="665:26"><modifier pos:start="665:38" pos:end="665:38">*</modifier></type><name pos:start="665:39" pos:end="665:47">responder</name></decl>;</decl_stmt>
            <decl_stmt pos:start="666:13" pos:end="666:26"><decl pos:start="666:13" pos:end="666:25"><type pos:start="666:13" pos:end="666:18"><name pos:start="666:13" pos:end="666:18">guint8</name></type> <name pos:start="666:20" pos:end="666:25">action</name></decl>;</decl_stmt>
            <decl_stmt pos:start="667:13" pos:end="667:95"><decl pos:start="667:13" pos:end="667:24"><type pos:start="667:13" pos:end="667:17"><name pos:start="667:13" pos:end="667:17">guint</name></type> <name pos:start="667:19" pos:end="667:24">status</name></decl>, <decl pos:start="667:27" pos:end="667:41"><type ref="prev" pos:start="667:13" pos:end="667:17"/><name pos:start="667:27" pos:end="667:37">offset_rsne</name> <init pos:start="667:39" pos:end="667:41">= <expr pos:start="667:41" pos:end="667:41"><literal type="number" pos:start="667:41" pos:end="667:41">0</literal></expr></init></decl>, <decl pos:start="667:44" pos:end="667:57"><type ref="prev" pos:start="667:13" pos:end="667:17"/><name pos:start="667:44" pos:end="667:53">offset_fte</name> <init pos:start="667:55" pos:end="667:57">= <expr pos:start="667:57" pos:end="667:57"><literal type="number" pos:start="667:57" pos:end="667:57">0</literal></expr></init></decl>, <decl pos:start="667:60" pos:end="667:74"><type ref="prev" pos:start="667:13" pos:end="667:17"/><name pos:start="667:60" pos:end="667:70">offset_link</name> <init pos:start="667:72" pos:end="667:74">= <expr pos:start="667:74" pos:end="667:74"><literal type="number" pos:start="667:74" pos:end="667:74">0</literal></expr></init></decl>, <decl pos:start="667:77" pos:end="667:94"><type ref="prev" pos:start="667:13" pos:end="667:17"/><name pos:start="667:77" pos:end="667:90">offset_timeout</name> <init pos:start="667:92" pos:end="667:94">= <expr pos:start="667:94" pos:end="667:94"><literal type="number" pos:start="667:94" pos:end="667:94">0</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="668:13" pos:end="668:122"><expr pos:start="668:13" pos:end="668:121"><call pos:start="668:13" pos:end="668:121"><name pos:start="668:13" pos:end="668:37">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="668:38" pos:end="668:121">(<argument pos:start="668:39" pos:end="668:59"><expr pos:start="668:39" pos:end="668:59"><literal type="string" pos:start="668:39" pos:end="668:59">"AirPDcapScanForKeys"</literal></expr></argument>, <argument pos:start="668:62" pos:end="668:96"><expr pos:start="668:62" pos:end="668:96"><literal type="string" pos:start="668:62" pos:end="668:96">"Authentication: TDLS Action Frame"</literal></expr></argument>, <argument pos:start="668:99" pos:end="668:120"><expr pos:start="668:99" pos:end="668:120"><name pos:start="668:99" pos:end="668:120">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="670:13" pos:end="670:33">/* skip LLC header */</comment>
            <expr_stmt pos:start="671:13" pos:end="671:25"><expr pos:start="671:13" pos:end="671:24"><name pos:start="671:13" pos:end="671:18">offset</name> <operator pos:start="671:20" pos:end="671:21">+=</operator> <literal type="number" pos:start="671:23" pos:end="671:24">10</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="673:13" pos:end="673:67">/* check if the packet is a TDLS response or confirm */</comment>
            <expr_stmt pos:start="674:13" pos:end="674:34"><expr pos:start="674:13" pos:end="674:33"><name pos:start="674:13" pos:end="674:18">action</name> <operator pos:start="674:20" pos:end="674:20">=</operator> <name pos:start="674:22" pos:end="674:33"><name pos:start="674:22" pos:end="674:25">data</name><index pos:start="674:26" pos:end="674:33">[<expr pos:start="674:27" pos:end="674:32"><name pos:start="674:27" pos:end="674:32">offset</name></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt pos:start="675:13" pos:end="679:13"><if pos:start="675:13" pos:end="679:13">if <condition pos:start="675:16" pos:end="675:43">(<expr pos:start="675:17" pos:end="675:42"><name pos:start="675:17" pos:end="675:22">action</name> <operator pos:start="675:24" pos:end="675:25">!=</operator> <literal type="number" pos:start="675:27" pos:end="675:27">1</literal> <operator pos:start="675:29" pos:end="675:30">&amp;&amp;</operator> <name pos:start="675:32" pos:end="675:37">action</name> <operator pos:start="675:39" pos:end="675:40">!=</operator> <literal type="number" pos:start="675:42" pos:end="675:42">2</literal></expr>)</condition>
            <block pos:start="676:13" pos:end="679:13">{<block_content pos:start="677:17" pos:end="678:55">
                <expr_stmt pos:start="677:17" pos:end="677:117"><expr pos:start="677:17" pos:end="677:116"><call pos:start="677:17" pos:end="677:116"><name pos:start="677:17" pos:end="677:41">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="677:42" pos:end="677:116">(<argument pos:start="677:43" pos:end="677:63"><expr pos:start="677:43" pos:end="677:63"><literal type="string" pos:start="677:43" pos:end="677:63">"AirPDcapScanForKeys"</literal></expr></argument>, <argument pos:start="677:66" pos:end="677:91"><expr pos:start="677:66" pos:end="677:91"><literal type="string" pos:start="677:66" pos:end="677:91">"Not Response nor confirm"</literal></expr></argument>, <argument pos:start="677:94" pos:end="677:115"><expr pos:start="677:94" pos:end="677:115"><name pos:start="677:94" pos:end="677:115">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="678:17" pos:end="678:55">return <expr pos:start="678:24" pos:end="678:54"><name pos:start="678:24" pos:end="678:54">AIRPDCAP_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="681:13" pos:end="681:30">/* check status */</comment>
            <expr_stmt pos:start="682:13" pos:end="682:21"><expr pos:start="682:13" pos:end="682:20"><name pos:start="682:13" pos:end="682:18">offset</name><operator pos:start="682:19" pos:end="682:20">++</operator></expr>;</expr_stmt>
            <expr_stmt pos:start="683:13" pos:end="683:44"><expr pos:start="683:13" pos:end="683:43"><name pos:start="683:13" pos:end="683:18">status</name> <operator pos:start="683:20" pos:end="683:20">=</operator> <call pos:start="683:22" pos:end="683:43"><name pos:start="683:22" pos:end="683:28">pntoh16</name><argument_list pos:start="683:29" pos:end="683:43">(<argument pos:start="683:30" pos:end="683:42"><expr pos:start="683:30" pos:end="683:42"><name pos:start="683:30" pos:end="683:33">data</name> <operator pos:start="683:35" pos:end="683:35">+</operator> <name pos:start="683:37" pos:end="683:42">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="684:13" pos:end="688:13"><if pos:start="684:13" pos:end="688:13">if <condition pos:start="684:16" pos:end="684:28">(<expr pos:start="684:17" pos:end="684:27"><name pos:start="684:17" pos:end="684:22">status</name> <operator pos:start="684:24" pos:end="684:25">!=</operator> <literal type="number" pos:start="684:27" pos:end="684:27">0</literal></expr>)</condition>
            <block pos:start="685:13" pos:end="688:13">{<block_content pos:start="686:17" pos:end="687:55">
                <expr_stmt pos:start="686:17" pos:end="686:119"><expr pos:start="686:17" pos:end="686:118"><call pos:start="686:17" pos:end="686:118"><name pos:start="686:17" pos:end="686:41">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="686:42" pos:end="686:118">(<argument pos:start="686:43" pos:end="686:63"><expr pos:start="686:43" pos:end="686:63"><literal type="string" pos:start="686:43" pos:end="686:63">"AirPDcapScanForKeys"</literal></expr></argument>, <argument pos:start="686:66" pos:end="686:93"><expr pos:start="686:66" pos:end="686:93"><literal type="string" pos:start="686:66" pos:end="686:93">"TDLS setup not successfull"</literal></expr></argument>, <argument pos:start="686:96" pos:end="686:117"><expr pos:start="686:96" pos:end="686:117"><name pos:start="686:96" pos:end="686:117">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="687:17" pos:end="687:55">return <expr pos:start="687:24" pos:end="687:54"><name pos:start="687:24" pos:end="687:54">AIRPDCAP_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="690:13" pos:end="690:43">/* skip Token + capabilities */</comment>
            <expr_stmt pos:start="691:13" pos:end="691:24"><expr pos:start="691:13" pos:end="691:23"><name pos:start="691:13" pos:end="691:18">offset</name> <operator pos:start="691:20" pos:end="691:21">+=</operator> <literal type="number" pos:start="691:23" pos:end="691:23">5</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="693:13" pos:end="693:95">/* search for RSN, Fast BSS Transition, Link Identifier and Timeout Interval IEs */</comment>

            <while pos:start="695:13" pos:end="719:13">while <condition pos:start="695:19" pos:end="695:42">(<expr pos:start="695:20" pos:end="695:41"><name pos:start="695:20" pos:end="695:25">offset</name> <operator pos:start="695:27" pos:end="695:27">&lt;</operator> <operator pos:start="695:29" pos:end="695:29">(</operator><name pos:start="695:30" pos:end="695:36">tot_len</name> <operator pos:start="695:38" pos:end="695:38">-</operator> <literal type="number" pos:start="695:40" pos:end="695:40">2</literal><operator pos:start="695:41" pos:end="695:41">)</operator></expr>)</condition>
            <block pos:start="696:13" pos:end="719:13">{<block_content pos:start="697:17" pos:end="718:47">
                <if_stmt pos:start="697:17" pos:end="712:17"><if pos:start="697:17" pos:end="700:17">if <condition pos:start="697:20" pos:end="697:39">(<expr pos:start="697:21" pos:end="697:38"><name pos:start="697:21" pos:end="697:32"><name pos:start="697:21" pos:end="697:24">data</name><index pos:start="697:25" pos:end="697:32">[<expr pos:start="697:26" pos:end="697:31"><name pos:start="697:26" pos:end="697:31">offset</name></expr>]</index></name> <operator pos:start="697:34" pos:end="697:35">==</operator> <literal type="number" pos:start="697:37" pos:end="697:38">48</literal></expr>)</condition>
                <block pos:start="698:17" pos:end="700:17">{<block_content pos:start="699:21" pos:end="699:41">
                    <expr_stmt pos:start="699:21" pos:end="699:41"><expr pos:start="699:21" pos:end="699:40"><name pos:start="699:21" pos:end="699:31">offset_rsne</name> <operator pos:start="699:33" pos:end="699:33">=</operator> <name pos:start="699:35" pos:end="699:40">offset</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif" pos:start="701:17" pos:end="704:17">else if <condition pos:start="701:25" pos:end="701:44">(<expr pos:start="701:26" pos:end="701:43"><name pos:start="701:26" pos:end="701:37"><name pos:start="701:26" pos:end="701:29">data</name><index pos:start="701:30" pos:end="701:37">[<expr pos:start="701:31" pos:end="701:36"><name pos:start="701:31" pos:end="701:36">offset</name></expr>]</index></name> <operator pos:start="701:39" pos:end="701:40">==</operator> <literal type="number" pos:start="701:42" pos:end="701:43">55</literal></expr>)</condition>
                <block pos:start="702:17" pos:end="704:17">{<block_content pos:start="703:21" pos:end="703:40">
                    <expr_stmt pos:start="703:21" pos:end="703:40"><expr pos:start="703:21" pos:end="703:39"><name pos:start="703:21" pos:end="703:30">offset_fte</name> <operator pos:start="703:32" pos:end="703:32">=</operator> <name pos:start="703:34" pos:end="703:39">offset</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif" pos:start="705:17" pos:end="708:17">else if <condition pos:start="705:25" pos:end="705:44">(<expr pos:start="705:26" pos:end="705:43"><name pos:start="705:26" pos:end="705:37"><name pos:start="705:26" pos:end="705:29">data</name><index pos:start="705:30" pos:end="705:37">[<expr pos:start="705:31" pos:end="705:36"><name pos:start="705:31" pos:end="705:36">offset</name></expr>]</index></name> <operator pos:start="705:39" pos:end="705:40">==</operator> <literal type="number" pos:start="705:42" pos:end="705:43">56</literal></expr>)</condition>
                <block pos:start="706:17" pos:end="708:17">{<block_content pos:start="707:21" pos:end="707:44">
                    <expr_stmt pos:start="707:21" pos:end="707:44"><expr pos:start="707:21" pos:end="707:43"><name pos:start="707:21" pos:end="707:34">offset_timeout</name> <operator pos:start="707:36" pos:end="707:36">=</operator> <name pos:start="707:38" pos:end="707:43">offset</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif" pos:start="709:17" pos:end="712:17">else if <condition pos:start="709:25" pos:end="709:45">(<expr pos:start="709:26" pos:end="709:44"><name pos:start="709:26" pos:end="709:37"><name pos:start="709:26" pos:end="709:29">data</name><index pos:start="709:30" pos:end="709:37">[<expr pos:start="709:31" pos:end="709:36"><name pos:start="709:31" pos:end="709:36">offset</name></expr>]</index></name> <operator pos:start="709:39" pos:end="709:40">==</operator> <literal type="number" pos:start="709:42" pos:end="709:44">101</literal></expr>)</condition>
                <block pos:start="710:17" pos:end="712:17">{<block_content pos:start="711:21" pos:end="711:41">
                    <expr_stmt pos:start="711:21" pos:end="711:41"><expr pos:start="711:21" pos:end="711:40"><name pos:start="711:21" pos:end="711:31">offset_link</name> <operator pos:start="711:33" pos:end="711:33">=</operator> <name pos:start="711:35" pos:end="711:40">offset</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="714:17" pos:end="717:17"><if pos:start="714:17" pos:end="717:17">if <condition pos:start="714:20" pos:end="714:60">(<expr pos:start="714:21" pos:end="714:59"><name pos:start="714:21" pos:end="714:27">tot_len</name> <operator pos:start="714:29" pos:end="714:29">&lt;</operator> <name pos:start="714:31" pos:end="714:36">offset</name> <operator pos:start="714:38" pos:end="714:38">+</operator> <name pos:start="714:40" pos:end="714:55"><name pos:start="714:40" pos:end="714:43">data</name><index pos:start="714:44" pos:end="714:55">[<expr pos:start="714:45" pos:end="714:54"><name pos:start="714:45" pos:end="714:50">offset</name> <operator pos:start="714:52" pos:end="714:52">+</operator> <literal type="number" pos:start="714:54" pos:end="714:54">1</literal></expr>]</index></name> <operator pos:start="714:57" pos:end="714:57">+</operator> <literal type="number" pos:start="714:59" pos:end="714:59">2</literal></expr>)</condition>
                <block pos:start="715:17" pos:end="717:17">{<block_content pos:start="716:21" pos:end="716:59">
                    <return pos:start="716:21" pos:end="716:59">return <expr pos:start="716:28" pos:end="716:58"><name pos:start="716:28" pos:end="716:58">AIRPDCAP_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt pos:start="718:17" pos:end="718:47"><expr pos:start="718:17" pos:end="718:46"><name pos:start="718:17" pos:end="718:22">offset</name> <operator pos:start="718:24" pos:end="718:25">+=</operator> <name pos:start="718:27" pos:end="718:42"><name pos:start="718:27" pos:end="718:30">data</name><index pos:start="718:31" pos:end="718:42">[<expr pos:start="718:32" pos:end="718:41"><name pos:start="718:32" pos:end="718:37">offset</name> <operator pos:start="718:39" pos:end="718:39">+</operator> <literal type="number" pos:start="718:41" pos:end="718:41">1</literal></expr>]</index></name> <operator pos:start="718:44" pos:end="718:44">+</operator> <literal type="number" pos:start="718:46" pos:end="718:46">2</literal></expr>;</expr_stmt>
            </block_content>}</block></while>

            <if_stmt pos:start="721:13" pos:end="726:13"><if pos:start="721:13" pos:end="726:13">if <condition pos:start="721:16" pos:end="722:56">(<expr pos:start="721:17" pos:end="722:55"><name pos:start="721:17" pos:end="721:27">offset_rsne</name> <operator pos:start="721:29" pos:end="721:30">==</operator> <literal type="number" pos:start="721:32" pos:end="721:32">0</literal> <operator pos:start="721:34" pos:end="721:35">||</operator> <name pos:start="721:37" pos:end="721:46">offset_fte</name> <operator pos:start="721:48" pos:end="721:49">==</operator> <literal type="number" pos:start="721:51" pos:end="721:51">0</literal> <operator pos:start="721:53" pos:end="721:54">||</operator>
                <name pos:start="722:17" pos:end="722:30">offset_timeout</name> <operator pos:start="722:32" pos:end="722:33">==</operator> <literal type="number" pos:start="722:35" pos:end="722:35">0</literal> <operator pos:start="722:37" pos:end="722:38">||</operator> <name pos:start="722:40" pos:end="722:50">offset_link</name> <operator pos:start="722:52" pos:end="722:53">==</operator> <literal type="number" pos:start="722:55" pos:end="722:55">0</literal></expr>)</condition>
            <block pos:start="723:13" pos:end="726:13">{<block_content pos:start="724:17" pos:end="725:55">
                <expr_stmt pos:start="724:17" pos:end="724:122"><expr pos:start="724:17" pos:end="724:121"><call pos:start="724:17" pos:end="724:121"><name pos:start="724:17" pos:end="724:41">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="724:42" pos:end="724:121">(<argument pos:start="724:43" pos:end="724:63"><expr pos:start="724:43" pos:end="724:63"><literal type="string" pos:start="724:43" pos:end="724:63">"AirPDcapScanForKeys"</literal></expr></argument>, <argument pos:start="724:66" pos:end="724:96"><expr pos:start="724:66" pos:end="724:96"><literal type="string" pos:start="724:66" pos:end="724:96">"Cannot Find all necessary IEs"</literal></expr></argument>, <argument pos:start="724:99" pos:end="724:120"><expr pos:start="724:99" pos:end="724:120"><name pos:start="724:99" pos:end="724:120">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="725:17" pos:end="725:55">return <expr pos:start="725:24" pos:end="725:54"><name pos:start="725:24" pos:end="725:54">AIRPDCAP_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="728:13" pos:end="728:134"><expr pos:start="728:13" pos:end="728:133"><call pos:start="728:13" pos:end="728:133"><name pos:start="728:13" pos:end="728:37">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="728:38" pos:end="728:133">(<argument pos:start="728:39" pos:end="728:59"><expr pos:start="728:39" pos:end="728:59"><literal type="string" pos:start="728:39" pos:end="728:59">"AirPDcapScanForKeys"</literal></expr></argument>, <argument pos:start="728:62" pos:end="728:108"><expr pos:start="728:62" pos:end="728:108"><literal type="string" pos:start="728:62" pos:end="728:108">"Found RSNE/Fast BSS/Timeout Interval/Link IEs"</literal></expr></argument>, <argument pos:start="728:111" pos:end="728:132"><expr pos:start="728:111" pos:end="728:132"><name pos:start="728:111" pos:end="728:132">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="730:13" pos:end="730:96">/* Will create a Security Association between 2 STA. Need to get both MAC address */</comment>
            <expr_stmt pos:start="731:13" pos:end="731:47"><expr pos:start="731:13" pos:end="731:46"><name pos:start="731:13" pos:end="731:21">initiator</name> <operator pos:start="731:23" pos:end="731:23">=</operator> <operator pos:start="731:25" pos:end="731:25">&amp;</operator><name pos:start="731:26" pos:end="731:46"><name pos:start="731:26" pos:end="731:29">data</name><index pos:start="731:30" pos:end="731:46">[<expr pos:start="731:31" pos:end="731:45"><name pos:start="731:31" pos:end="731:41">offset_link</name> <operator pos:start="731:43" pos:end="731:43">+</operator> <literal type="number" pos:start="731:45" pos:end="731:45">8</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt pos:start="732:13" pos:end="732:48"><expr pos:start="732:13" pos:end="732:47"><name pos:start="732:13" pos:end="732:21">responder</name> <operator pos:start="732:23" pos:end="732:23">=</operator> <operator pos:start="732:25" pos:end="732:25">&amp;</operator><name pos:start="732:26" pos:end="732:47"><name pos:start="732:26" pos:end="732:29">data</name><index pos:start="732:30" pos:end="732:47">[<expr pos:start="732:31" pos:end="732:46"><name pos:start="732:31" pos:end="732:41">offset_link</name> <operator pos:start="732:43" pos:end="732:43">+</operator> <literal type="number" pos:start="732:45" pos:end="732:46">14</literal></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="734:13" pos:end="743:13"><if pos:start="734:13" pos:end="738:13">if <condition pos:start="734:16" pos:end="734:67">(<expr pos:start="734:17" pos:end="734:66"><call pos:start="734:17" pos:end="734:62"><name pos:start="734:17" pos:end="734:22">memcmp</name><argument_list pos:start="734:23" pos:end="734:62">(<argument pos:start="734:24" pos:end="734:32"><expr pos:start="734:24" pos:end="734:32"><name pos:start="734:24" pos:end="734:32">initiator</name></expr></argument>, <argument pos:start="734:35" pos:end="734:43"><expr pos:start="734:35" pos:end="734:43"><name pos:start="734:35" pos:end="734:43">responder</name></expr></argument>, <argument pos:start="734:46" pos:end="734:61"><expr pos:start="734:46" pos:end="734:61"><name pos:start="734:46" pos:end="734:61">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="734:64" pos:end="734:64">&lt;</operator> <literal type="number" pos:start="734:66" pos:end="734:66">0</literal></expr>)</condition>
            <block pos:start="735:13" pos:end="738:13">{<block_content pos:start="736:17" pos:end="737:62">
                <expr_stmt pos:start="736:17" pos:end="736:60"><expr pos:start="736:17" pos:end="736:59"><call pos:start="736:17" pos:end="736:59"><name pos:start="736:17" pos:end="736:22">memcpy</name><argument_list pos:start="736:23" pos:end="736:59">(<argument pos:start="736:24" pos:end="736:29"><expr pos:start="736:24" pos:end="736:29"><name pos:start="736:24" pos:end="736:29"><name pos:start="736:24" pos:end="736:25">id</name><operator pos:start="736:26" pos:end="736:26">.</operator><name pos:start="736:27" pos:end="736:29">sta</name></name></expr></argument>, <argument pos:start="736:32" pos:end="736:40"><expr pos:start="736:32" pos:end="736:40"><name pos:start="736:32" pos:end="736:40">initiator</name></expr></argument>, <argument pos:start="736:43" pos:end="736:58"><expr pos:start="736:43" pos:end="736:58"><name pos:start="736:43" pos:end="736:58">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="737:17" pos:end="737:62"><expr pos:start="737:17" pos:end="737:61"><call pos:start="737:17" pos:end="737:61"><name pos:start="737:17" pos:end="737:22">memcpy</name><argument_list pos:start="737:23" pos:end="737:61">(<argument pos:start="737:24" pos:end="737:31"><expr pos:start="737:24" pos:end="737:31"><name pos:start="737:24" pos:end="737:31"><name pos:start="737:24" pos:end="737:25">id</name><operator pos:start="737:26" pos:end="737:26">.</operator><name pos:start="737:27" pos:end="737:31">bssid</name></name></expr></argument>, <argument pos:start="737:34" pos:end="737:42"><expr pos:start="737:34" pos:end="737:42"><name pos:start="737:34" pos:end="737:42">responder</name></expr></argument>, <argument pos:start="737:45" pos:end="737:60"><expr pos:start="737:45" pos:end="737:60"><name pos:start="737:45" pos:end="737:60">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else pos:start="739:13" pos:end="743:13">else
            <block pos:start="740:13" pos:end="743:13">{<block_content pos:start="741:17" pos:end="742:62">
                <expr_stmt pos:start="741:17" pos:end="741:60"><expr pos:start="741:17" pos:end="741:59"><call pos:start="741:17" pos:end="741:59"><name pos:start="741:17" pos:end="741:22">memcpy</name><argument_list pos:start="741:23" pos:end="741:59">(<argument pos:start="741:24" pos:end="741:29"><expr pos:start="741:24" pos:end="741:29"><name pos:start="741:24" pos:end="741:29"><name pos:start="741:24" pos:end="741:25">id</name><operator pos:start="741:26" pos:end="741:26">.</operator><name pos:start="741:27" pos:end="741:29">sta</name></name></expr></argument>, <argument pos:start="741:32" pos:end="741:40"><expr pos:start="741:32" pos:end="741:40"><name pos:start="741:32" pos:end="741:40">responder</name></expr></argument>, <argument pos:start="741:43" pos:end="741:58"><expr pos:start="741:43" pos:end="741:58"><name pos:start="741:43" pos:end="741:58">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="742:17" pos:end="742:62"><expr pos:start="742:17" pos:end="742:61"><call pos:start="742:17" pos:end="742:61"><name pos:start="742:17" pos:end="742:22">memcpy</name><argument_list pos:start="742:23" pos:end="742:61">(<argument pos:start="742:24" pos:end="742:31"><expr pos:start="742:24" pos:end="742:31"><name pos:start="742:24" pos:end="742:31"><name pos:start="742:24" pos:end="742:25">id</name><operator pos:start="742:26" pos:end="742:26">.</operator><name pos:start="742:27" pos:end="742:31">bssid</name></name></expr></argument>, <argument pos:start="742:34" pos:end="742:42"><expr pos:start="742:34" pos:end="742:42"><name pos:start="742:34" pos:end="742:42">initiator</name></expr></argument>, <argument pos:start="742:45" pos:end="742:60"><expr pos:start="742:45" pos:end="742:60"><name pos:start="742:45" pos:end="742:60">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="745:13" pos:end="745:44"><expr pos:start="745:13" pos:end="745:43"><name pos:start="745:13" pos:end="745:14">sa</name> <operator pos:start="745:16" pos:end="745:16">=</operator> <call pos:start="745:18" pos:end="745:43"><name pos:start="745:18" pos:end="745:33">AirPDcapGetSaPtr</name><argument_list pos:start="745:34" pos:end="745:43">(<argument pos:start="745:35" pos:end="745:37"><expr pos:start="745:35" pos:end="745:37"><name pos:start="745:35" pos:end="745:37">ctx</name></expr></argument>, <argument pos:start="745:40" pos:end="745:42"><expr pos:start="745:40" pos:end="745:42"><operator pos:start="745:40" pos:end="745:40">&amp;</operator><name pos:start="745:41" pos:end="745:42">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="746:13" pos:end="749:13"><if pos:start="746:13" pos:end="749:13">if <condition pos:start="746:16" pos:end="746:27">(<expr pos:start="746:17" pos:end="746:26"><name pos:start="746:17" pos:end="746:18">sa</name> <operator pos:start="746:20" pos:end="746:21">==</operator> <name pos:start="746:23" pos:end="746:26">NULL</name></expr>)</condition>
            <block pos:start="747:13" pos:end="749:13">{<block_content pos:start="748:17" pos:end="748:45">
                <return pos:start="748:17" pos:end="748:45">return <expr pos:start="748:24" pos:end="748:44"><name pos:start="748:24" pos:end="748:44">AIRPDCAP_RET_REQ_DATA</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="751:13" pos:end="766:13"><if pos:start="751:13" pos:end="766:13">if <condition pos:start="751:16" pos:end="751:29">(<expr pos:start="751:17" pos:end="751:28"><name pos:start="751:17" pos:end="751:28"><name pos:start="751:17" pos:end="751:18">sa</name><operator pos:start="751:19" pos:end="751:20">-&gt;</operator><name pos:start="751:21" pos:end="751:28">validKey</name></name></expr>)</condition>
            <block pos:start="752:13" pos:end="766:13">{<block_content pos:start="753:17" pos:end="765:17">
                <if_stmt pos:start="753:17" pos:end="765:17"><if pos:start="753:17" pos:end="757:17">if <condition pos:start="753:20" pos:end="753:95">(<expr pos:start="753:21" pos:end="753:94"><call pos:start="753:21" pos:end="753:89"><name pos:start="753:21" pos:end="753:26">memcmp</name><argument_list pos:start="753:27" pos:end="753:89">(<argument pos:start="753:28" pos:end="753:40"><expr pos:start="753:28" pos:end="753:40"><name pos:start="753:28" pos:end="753:40"><name pos:start="753:28" pos:end="753:29">sa</name><operator pos:start="753:30" pos:end="753:31">-&gt;</operator><name pos:start="753:32" pos:end="753:34">wpa</name><operator pos:start="753:35" pos:end="753:35">.</operator><name pos:start="753:36" pos:end="753:40">nonce</name></name></expr></argument>, <argument pos:start="753:43" pos:end="753:64"><expr pos:start="753:43" pos:end="753:64"><name pos:start="753:43" pos:end="753:46">data</name> <operator pos:start="753:48" pos:end="753:48">+</operator> <name pos:start="753:50" pos:end="753:59">offset_fte</name> <operator pos:start="753:61" pos:end="753:61">+</operator> <literal type="number" pos:start="753:63" pos:end="753:64">52</literal></expr></argument>, <argument pos:start="753:67" pos:end="753:88"><expr pos:start="753:67" pos:end="753:88"><name pos:start="753:67" pos:end="753:88">AIRPDCAP_WPA_NONCE_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="753:91" pos:end="753:92">==</operator> <literal type="number" pos:start="753:94" pos:end="753:94">0</literal></expr>)</condition>
                <block pos:start="754:17" pos:end="757:17">{<block_content pos:start="756:21" pos:end="756:58">
                    <comment type="block" pos:start="755:21" pos:end="755:92">/* Already have valid key for this SA, no need to redo key derivation */</comment>
                    <return pos:start="756:21" pos:end="756:58">return <expr pos:start="756:28" pos:end="756:57"><name pos:start="756:28" pos:end="756:57">AIRPDCAP_RET_SUCCESS_HANDSHAKE</name></expr>;</return>
                </block_content>}</block></if>
                <else pos:start="758:17" pos:end="765:17">else
                <block pos:start="759:17" pos:end="765:17">{<block_content pos:start="761:21" pos:end="764:41">
                    <comment type="block" pos:start="760:21" pos:end="760:95">/* We are opening a new session with the same two STA, save previous sa  */</comment>
                    <decl_stmt pos:start="761:21" pos:end="761:90"><decl pos:start="761:21" pos:end="761:89"><type pos:start="761:21" pos:end="761:46"><name pos:start="761:21" pos:end="761:44">AIRPDCAP_SEC_ASSOCIATION</name> <modifier pos:start="761:46" pos:end="761:46">*</modifier></type><name pos:start="761:47" pos:end="761:52">tmp_sa</name> <init pos:start="761:54" pos:end="761:89">= <expr pos:start="761:56" pos:end="761:89"><call pos:start="761:56" pos:end="761:89"><name pos:start="761:56" pos:end="761:60">g_new</name><argument_list pos:start="761:61" pos:end="761:89">(<argument pos:start="761:62" pos:end="761:85"><expr pos:start="761:62" pos:end="761:85"><name pos:start="761:62" pos:end="761:85">AIRPDCAP_SEC_ASSOCIATION</name></expr></argument>, <argument pos:start="761:88" pos:end="761:88"><expr pos:start="761:88" pos:end="761:88"><literal type="number" pos:start="761:88" pos:end="761:88">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt pos:start="762:21" pos:end="762:73"><expr pos:start="762:21" pos:end="762:72"><call pos:start="762:21" pos:end="762:72"><name pos:start="762:21" pos:end="762:26">memcpy</name><argument_list pos:start="762:27" pos:end="762:72">(<argument pos:start="762:28" pos:end="762:33"><expr pos:start="762:28" pos:end="762:33"><name pos:start="762:28" pos:end="762:33">tmp_sa</name></expr></argument>, <argument pos:start="762:36" pos:end="762:37"><expr pos:start="762:36" pos:end="762:37"><name pos:start="762:36" pos:end="762:37">sa</name></expr></argument>, <argument pos:start="762:40" pos:end="762:71"><expr pos:start="762:40" pos:end="762:71"><sizeof pos:start="762:40" pos:end="762:71">sizeof<argument_list pos:start="762:46" pos:end="762:71">(<argument pos:start="762:47" pos:end="762:70"><expr pos:start="762:47" pos:end="762:70"><name pos:start="762:47" pos:end="762:70">AIRPDCAP_SEC_ASSOCIATION</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="763:21" pos:end="763:38"><expr pos:start="763:21" pos:end="763:37"><name pos:start="763:21" pos:end="763:28"><name pos:start="763:21" pos:end="763:22">sa</name><operator pos:start="763:23" pos:end="763:24">-&gt;</operator><name pos:start="763:25" pos:end="763:28">next</name></name> <operator pos:start="763:30" pos:end="763:30">=</operator> <name pos:start="763:32" pos:end="763:37">tmp_sa</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="764:21" pos:end="764:41"><expr pos:start="764:21" pos:end="764:40"><name pos:start="764:21" pos:end="764:32"><name pos:start="764:21" pos:end="764:22">sa</name><operator pos:start="764:23" pos:end="764:24">-&gt;</operator><name pos:start="764:25" pos:end="764:32">validKey</name></name> <operator pos:start="764:34" pos:end="764:34">=</operator> <name pos:start="764:36" pos:end="764:40">FALSE</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="768:13" pos:end="772:13"><if pos:start="768:13" pos:end="772:13">if <condition pos:start="768:16" pos:end="768:134">(<expr pos:start="768:17" pos:end="768:133"><call pos:start="768:17" pos:end="768:109"><name pos:start="768:17" pos:end="768:37">AirPDcapTDLSDeriveKey</name><argument_list pos:start="768:38" pos:end="768:109">(<argument pos:start="768:39" pos:end="768:40"><expr pos:start="768:39" pos:end="768:40"><name pos:start="768:39" pos:end="768:40">sa</name></expr></argument>, <argument pos:start="768:43" pos:end="768:46"><expr pos:start="768:43" pos:end="768:46"><name pos:start="768:43" pos:end="768:46">data</name></expr></argument>, <argument pos:start="768:49" pos:end="768:59"><expr pos:start="768:49" pos:end="768:59"><name pos:start="768:49" pos:end="768:59">offset_rsne</name></expr></argument>, <argument pos:start="768:62" pos:end="768:71"><expr pos:start="768:62" pos:end="768:71"><name pos:start="768:62" pos:end="768:71">offset_fte</name></expr></argument>, <argument pos:start="768:74" pos:end="768:87"><expr pos:start="768:74" pos:end="768:87"><name pos:start="768:74" pos:end="768:87">offset_timeout</name></expr></argument>, <argument pos:start="768:90" pos:end="768:100"><expr pos:start="768:90" pos:end="768:100"><name pos:start="768:90" pos:end="768:100">offset_link</name></expr></argument>, <argument pos:start="768:103" pos:end="768:108"><expr pos:start="768:103" pos:end="768:108"><name pos:start="768:103" pos:end="768:108">action</name></expr></argument>)</argument_list></call> <operator pos:start="768:111" pos:end="768:112">==</operator> <name pos:start="768:114" pos:end="768:133">AIRPDCAP_RET_SUCCESS</name></expr>)</condition>
            <block pos:start="769:13" pos:end="772:13">{<block_content pos:start="770:17" pos:end="771:54">
                <expr_stmt pos:start="770:17" pos:end="770:64"><expr pos:start="770:17" pos:end="770:63"><call pos:start="770:17" pos:end="770:63"><name pos:start="770:17" pos:end="770:40">AIRPDCAP_DEBUG_TRACE_END</name><argument_list pos:start="770:41" pos:end="770:63">(<argument pos:start="770:42" pos:end="770:62"><expr pos:start="770:42" pos:end="770:62"><literal type="string" pos:start="770:42" pos:end="770:62">"AirPDcapScanForKeys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="771:17" pos:end="771:54">return <expr pos:start="771:24" pos:end="771:53"><name pos:start="771:24" pos:end="771:53">AIRPDCAP_RET_SUCCESS_HANDSHAKE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else pos:start="774:9" pos:end="777:9">else
        <block pos:start="775:9" pos:end="777:9">{<block_content pos:start="776:13" pos:end="776:118">
            <expr_stmt pos:start="776:13" pos:end="776:118"><expr pos:start="776:13" pos:end="776:117"><call pos:start="776:13" pos:end="776:117"><name pos:start="776:13" pos:end="776:37">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="776:38" pos:end="776:117">(<argument pos:start="776:39" pos:end="776:59"><expr pos:start="776:39" pos:end="776:59"><literal type="string" pos:start="776:39" pos:end="776:59">"AirPDcapScanForKeys"</literal></expr></argument>, <argument pos:start="776:62" pos:end="776:92"><expr pos:start="776:62" pos:end="776:92"><literal type="string" pos:start="776:62" pos:end="776:92">"Skipping: not an EAPOL packet"</literal></expr></argument>, <argument pos:start="776:95" pos:end="776:116"><expr pos:start="776:95" pos:end="776:116"><name pos:start="776:95" pos:end="776:116">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="779:9" pos:end="779:56"><expr pos:start="779:9" pos:end="779:55"><call pos:start="779:9" pos:end="779:55"><name pos:start="779:9" pos:end="779:32">AIRPDCAP_DEBUG_TRACE_END</name><argument_list pos:start="779:33" pos:end="779:55">(<argument pos:start="779:34" pos:end="779:54"><expr pos:start="779:34" pos:end="779:54"><literal type="string" pos:start="779:34" pos:end="779:54">"AirPDcapScanForKeys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="780:9" pos:end="780:47">return <expr pos:start="780:16" pos:end="780:46"><name pos:start="780:16" pos:end="780:46">AIRPDCAP_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="783:5" pos:end="943:5"><type pos:start="783:5" pos:end="783:7"><name pos:start="783:5" pos:end="783:7">INT</name></type> <name pos:start="783:9" pos:end="783:29">AirPDcapPacketProcess</name><parameter_list pos:start="783:30" pos:end="791:31">(
        <parameter pos:start="784:9" pos:end="784:29"><decl pos:start="784:9" pos:end="784:29"><type pos:start="784:9" pos:end="784:29"><name pos:start="784:9" pos:end="784:25">PAIRPDCAP_CONTEXT</name></type> <name pos:start="784:27" pos:end="784:29">ctx</name></decl></parameter>,
        <parameter pos:start="785:9" pos:end="785:26"><decl pos:start="785:9" pos:end="785:26"><type pos:start="785:9" pos:end="785:26"><specifier pos:start="785:9" pos:end="785:13">const</specifier> <name pos:start="785:15" pos:end="785:20">guint8</name> <modifier pos:start="785:22" pos:end="785:22">*</modifier></type><name pos:start="785:23" pos:end="785:26">data</name></decl></parameter>,
        <parameter pos:start="786:9" pos:end="786:34"><decl pos:start="786:9" pos:end="786:34"><type pos:start="786:9" pos:end="786:34"><specifier pos:start="786:9" pos:end="786:13">const</specifier> <name pos:start="786:15" pos:end="786:19">guint</name></type> <name pos:start="786:21" pos:end="786:34">mac_header_len</name></decl></parameter>,
        <parameter pos:start="787:9" pos:end="787:27"><decl pos:start="787:9" pos:end="787:27"><type pos:start="787:9" pos:end="787:27"><specifier pos:start="787:9" pos:end="787:13">const</specifier> <name pos:start="787:15" pos:end="787:19">guint</name></type> <name pos:start="787:21" pos:end="787:27">tot_len</name></decl></parameter>,
        <parameter pos:start="788:9" pos:end="788:27"><decl pos:start="788:9" pos:end="788:27"><type pos:start="788:9" pos:end="788:27"><name pos:start="788:9" pos:end="788:13">UCHAR</name> <modifier pos:start="788:15" pos:end="788:15">*</modifier></type><name pos:start="788:16" pos:end="788:27">decrypt_data</name></decl></parameter>,
        <parameter pos:start="789:9" pos:end="789:26"><decl pos:start="789:9" pos:end="789:26"><type pos:start="789:9" pos:end="789:26"><name pos:start="789:9" pos:end="789:13">guint</name> <modifier pos:start="789:15" pos:end="789:15">*</modifier></type><name pos:start="789:16" pos:end="789:26">decrypt_len</name></decl></parameter>,
        <parameter pos:start="790:9" pos:end="790:30"><decl pos:start="790:9" pos:end="790:30"><type pos:start="790:9" pos:end="790:30"><name pos:start="790:9" pos:end="790:26">PAIRPDCAP_KEY_ITEM</name></type> <name pos:start="790:28" pos:end="790:30">key</name></decl></parameter>,
        <parameter pos:start="791:9" pos:end="791:30"><decl pos:start="791:9" pos:end="791:30"><type pos:start="791:9" pos:end="791:30"><name pos:start="791:9" pos:end="791:16">gboolean</name></type> <name pos:start="791:18" pos:end="791:30">scanHandshake</name></decl></parameter>)</parameter_list>
    <block pos:start="792:5" pos:end="943:5">{<block_content pos:start="793:9" pos:end="942:38">
        <decl_stmt pos:start="793:9" pos:end="793:39"><decl pos:start="793:9" pos:end="793:38"><type pos:start="793:9" pos:end="793:35"><name pos:start="793:9" pos:end="793:35">AIRPDCAP_SEC_ASSOCIATION_ID</name></type> <name pos:start="793:37" pos:end="793:38">id</name></decl>;</decl_stmt>
        <decl_stmt pos:start="794:9" pos:end="794:44"><decl pos:start="794:9" pos:end="794:43"><type pos:start="794:9" pos:end="794:13"><name pos:start="794:9" pos:end="794:13">UCHAR</name></type> <name pos:start="794:15" pos:end="794:43"><name pos:start="794:15" pos:end="794:22">tmp_data</name><index pos:start="794:23" pos:end="794:43">[<expr pos:start="794:24" pos:end="794:42"><name pos:start="794:24" pos:end="794:42">AIRPDCAP_MAX_CAPLEN</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="795:9" pos:end="799:0"><decl pos:start="795:9" pos:end="795:21"><type pos:start="795:9" pos:end="795:13"><name pos:start="795:9" pos:end="795:13">guint</name></type> <name pos:start="795:15" pos:end="795:21">tmp_len</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="797:1" pos:end="797:13">#<cpp:directive pos:start="797:2" pos:end="797:6">ifdef</cpp:directive> <name pos:start="797:8" pos:end="797:13">_DEBUG</name></cpp:ifdef>
<cpp:define pos:start="798:1" pos:end="798:22">#<cpp:directive pos:start="798:2" pos:end="798:7">define</cpp:directive> <cpp:macro pos:start="798:9" pos:end="798:18"><name pos:start="798:9" pos:end="798:18">MSGBUF_LEN</name></cpp:macro> <cpp:value pos:start="798:20" pos:end="798:22">255</cpp:value></cpp:define>
        <decl_stmt pos:start="799:9" pos:end="801:0"><decl pos:start="799:9" pos:end="799:31"><type pos:start="799:9" pos:end="799:12"><name pos:start="799:9" pos:end="799:12">CHAR</name></type> <name pos:start="799:14" pos:end="799:31"><name pos:start="799:14" pos:end="799:19">msgbuf</name><index pos:start="799:20" pos:end="799:31">[<expr pos:start="799:21" pos:end="799:30"><name pos:start="799:21" pos:end="799:30">MSGBUF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif pos:start="800:1" pos:end="800:6">#<cpp:directive pos:start="800:2" pos:end="800:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="802:9" pos:end="802:60"><expr pos:start="802:9" pos:end="802:59"><call pos:start="802:9" pos:end="802:59"><name pos:start="802:9" pos:end="802:34">AIRPDCAP_DEBUG_TRACE_START</name><argument_list pos:start="802:35" pos:end="802:59">(<argument pos:start="802:36" pos:end="802:58"><expr pos:start="802:36" pos:end="802:58"><literal type="string" pos:start="802:36" pos:end="802:58">"AirPDcapPacketProcess"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="804:9" pos:end="809:9"><if pos:start="804:9" pos:end="809:9">if <condition pos:start="804:12" pos:end="804:24">(<expr pos:start="804:13" pos:end="804:23"><name pos:start="804:13" pos:end="804:15">ctx</name> <operator pos:start="804:17" pos:end="804:18">==</operator> <name pos:start="804:20" pos:end="804:23">NULL</name></expr>)</condition>
        <block pos:start="805:9" pos:end="809:9">{<block_content pos:start="806:13" pos:end="808:41">
            <expr_stmt pos:start="806:13" pos:end="806:103"><expr pos:start="806:13" pos:end="806:102"><call pos:start="806:13" pos:end="806:102"><name pos:start="806:13" pos:end="806:37">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="806:38" pos:end="806:102">(<argument pos:start="806:39" pos:end="806:61"><expr pos:start="806:39" pos:end="806:61"><literal type="string" pos:start="806:39" pos:end="806:61">"AirPDcapPacketProcess"</literal></expr></argument>, <argument pos:start="806:64" pos:end="806:77"><expr pos:start="806:64" pos:end="806:77"><literal type="string" pos:start="806:64" pos:end="806:77">"NULL context"</literal></expr></argument>, <argument pos:start="806:80" pos:end="806:101"><expr pos:start="806:80" pos:end="806:101"><name pos:start="806:80" pos:end="806:101">AIRPDCAP_DEBUG_LEVEL_5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="807:13" pos:end="807:62"><expr pos:start="807:13" pos:end="807:61"><call pos:start="807:13" pos:end="807:61"><name pos:start="807:13" pos:end="807:36">AIRPDCAP_DEBUG_TRACE_END</name><argument_list pos:start="807:37" pos:end="807:61">(<argument pos:start="807:38" pos:end="807:60"><expr pos:start="807:38" pos:end="807:60"><literal type="string" pos:start="807:38" pos:end="807:60">"AirPDcapPacketProcess"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="808:13" pos:end="808:41">return <expr pos:start="808:20" pos:end="808:40"><name pos:start="808:20" pos:end="808:40">AIRPDCAP_RET_REQ_DATA</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="810:9" pos:end="815:9"><if pos:start="810:9" pos:end="815:9">if <condition pos:start="810:12" pos:end="810:41">(<expr pos:start="810:13" pos:end="810:40"><name pos:start="810:13" pos:end="810:16">data</name> <operator pos:start="810:18" pos:end="810:19">==</operator> <name pos:start="810:21" pos:end="810:24">NULL</name> <operator pos:start="810:26" pos:end="810:27">||</operator> <name pos:start="810:29" pos:end="810:35">tot_len</name> <operator pos:start="810:37" pos:end="810:38">==</operator> <literal type="number" pos:start="810:40" pos:end="810:40">0</literal></expr>)</condition>
        <block pos:start="811:9" pos:end="815:9">{<block_content pos:start="812:13" pos:end="814:41">
            <expr_stmt pos:start="812:13" pos:end="812:112"><expr pos:start="812:13" pos:end="812:111"><call pos:start="812:13" pos:end="812:111"><name pos:start="812:13" pos:end="812:37">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="812:38" pos:end="812:111">(<argument pos:start="812:39" pos:end="812:61"><expr pos:start="812:39" pos:end="812:61"><literal type="string" pos:start="812:39" pos:end="812:61">"AirPDcapPacketProcess"</literal></expr></argument>, <argument pos:start="812:64" pos:end="812:86"><expr pos:start="812:64" pos:end="812:86"><literal type="string" pos:start="812:64" pos:end="812:86">"NULL data or length=0"</literal></expr></argument>, <argument pos:start="812:89" pos:end="812:110"><expr pos:start="812:89" pos:end="812:110"><name pos:start="812:89" pos:end="812:110">AIRPDCAP_DEBUG_LEVEL_5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="813:13" pos:end="813:62"><expr pos:start="813:13" pos:end="813:61"><call pos:start="813:13" pos:end="813:61"><name pos:start="813:13" pos:end="813:36">AIRPDCAP_DEBUG_TRACE_END</name><argument_list pos:start="813:37" pos:end="813:61">(<argument pos:start="813:38" pos:end="813:60"><expr pos:start="813:38" pos:end="813:60"><literal type="string" pos:start="813:38" pos:end="813:60">"AirPDcapPacketProcess"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="814:13" pos:end="814:41">return <expr pos:start="814:20" pos:end="814:40"><name pos:start="814:20" pos:end="814:40">AIRPDCAP_RET_REQ_DATA</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="817:9" pos:end="817:69">/* check if the packet is of data or robust managment type */</comment>
        <if_stmt pos:start="818:9" pos:end="826:9"><if pos:start="818:9" pos:end="826:9">if <condition pos:start="818:12" pos:end="822:72">(<expr pos:start="818:13" pos:end="822:71"><operator pos:start="818:13" pos:end="818:13">!</operator><operator pos:start="818:14" pos:end="818:14">(</operator><operator pos:start="818:15" pos:end="818:15">(</operator><call pos:start="818:16" pos:end="818:37"><name pos:start="818:16" pos:end="818:28">AIRPDCAP_TYPE</name><argument_list pos:start="818:29" pos:end="818:37">(<argument pos:start="818:30" pos:end="818:36"><expr pos:start="818:30" pos:end="818:36"><name pos:start="818:30" pos:end="818:36"><name pos:start="818:30" pos:end="818:33">data</name><index pos:start="818:34" pos:end="818:36">[<expr pos:start="818:35" pos:end="818:35"><literal type="number" pos:start="818:35" pos:end="818:35">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="818:39" pos:end="818:40">==</operator> <name pos:start="818:42" pos:end="818:59">AIRPDCAP_TYPE_DATA</name><operator pos:start="818:60" pos:end="818:60">)</operator> <operator pos:start="818:62" pos:end="818:63">||</operator>
              <operator pos:start="819:15" pos:end="819:15">(</operator><call pos:start="819:16" pos:end="819:37"><name pos:start="819:16" pos:end="819:28">AIRPDCAP_TYPE</name><argument_list pos:start="819:29" pos:end="819:37">(<argument pos:start="819:30" pos:end="819:36"><expr pos:start="819:30" pos:end="819:36"><name pos:start="819:30" pos:end="819:36"><name pos:start="819:30" pos:end="819:33">data</name><index pos:start="819:34" pos:end="819:36">[<expr pos:start="819:35" pos:end="819:35"><literal type="number" pos:start="819:35" pos:end="819:35">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="819:39" pos:end="819:40">==</operator> <name pos:start="819:42" pos:end="819:65">AIRPDCAP_TYPE_MANAGEMENT</name> <operator pos:start="819:67" pos:end="819:68">&amp;&amp;</operator>
               <operator pos:start="820:16" pos:end="820:16">(</operator><call pos:start="820:17" pos:end="820:41"><name pos:start="820:17" pos:end="820:32">AIRPDCAP_SUBTYPE</name><argument_list pos:start="820:33" pos:end="820:41">(<argument pos:start="820:34" pos:end="820:40"><expr pos:start="820:34" pos:end="820:40"><name pos:start="820:34" pos:end="820:40"><name pos:start="820:34" pos:end="820:37">data</name><index pos:start="820:38" pos:end="820:40">[<expr pos:start="820:39" pos:end="820:39"><literal type="number" pos:start="820:39" pos:end="820:39">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="820:43" pos:end="820:44">==</operator> <name pos:start="820:46" pos:end="820:68">AIRPDCAP_SUBTYPE_DISASS</name> <operator pos:start="820:70" pos:end="820:71">||</operator>
                <call pos:start="821:17" pos:end="821:41"><name pos:start="821:17" pos:end="821:32">AIRPDCAP_SUBTYPE</name><argument_list pos:start="821:33" pos:end="821:41">(<argument pos:start="821:34" pos:end="821:40"><expr pos:start="821:34" pos:end="821:40"><name pos:start="821:34" pos:end="821:40"><name pos:start="821:34" pos:end="821:37">data</name><index pos:start="821:38" pos:end="821:40">[<expr pos:start="821:39" pos:end="821:39"><literal type="number" pos:start="821:39" pos:end="821:39">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="821:43" pos:end="821:44">==</operator> <name pos:start="821:46" pos:end="821:78">AIRPDCAP_SUBTYPE_DEAUTHENTICATION</name> <operator pos:start="821:80" pos:end="821:81">||</operator>
                <call pos:start="822:17" pos:end="822:41"><name pos:start="822:17" pos:end="822:32">AIRPDCAP_SUBTYPE</name><argument_list pos:start="822:33" pos:end="822:41">(<argument pos:start="822:34" pos:end="822:40"><expr pos:start="822:34" pos:end="822:40"><name pos:start="822:34" pos:end="822:40"><name pos:start="822:34" pos:end="822:37">data</name><index pos:start="822:38" pos:end="822:40">[<expr pos:start="822:39" pos:end="822:39"><literal type="number" pos:start="822:39" pos:end="822:39">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="822:43" pos:end="822:44">==</operator> <name pos:start="822:46" pos:end="822:68">AIRPDCAP_SUBTYPE_ACTION</name><operator pos:start="822:69" pos:end="822:69">)</operator><operator pos:start="822:70" pos:end="822:70">)</operator><operator pos:start="822:71" pos:end="822:71">)</operator></expr>)</condition>
        <block pos:start="823:9" pos:end="826:9">{<block_content pos:start="824:13" pos:end="825:40">
            <expr_stmt pos:start="824:13" pos:end="824:122"><expr pos:start="824:13" pos:end="824:121"><call pos:start="824:13" pos:end="824:121"><name pos:start="824:13" pos:end="824:37">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="824:38" pos:end="824:121">(<argument pos:start="824:39" pos:end="824:61"><expr pos:start="824:39" pos:end="824:61"><literal type="string" pos:start="824:39" pos:end="824:61">"AirPDcapPacketProcess"</literal></expr></argument>, <argument pos:start="824:64" pos:end="824:96"><expr pos:start="824:64" pos:end="824:96"><literal type="string" pos:start="824:64" pos:end="824:96">"not data nor robust mgmt packet"</literal></expr></argument>, <argument pos:start="824:99" pos:end="824:120"><expr pos:start="824:99" pos:end="824:120"><name pos:start="824:99" pos:end="824:120">AIRPDCAP_DEBUG_LEVEL_5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="825:13" pos:end="825:40">return <expr pos:start="825:20" pos:end="825:39"><name pos:start="825:20" pos:end="825:39">AIRPDCAP_RET_NO_DATA</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="828:9" pos:end="828:92">/* check correct packet size, to avoid wrong elaboration of encryption algorithms */</comment>
        <if_stmt pos:start="829:9" pos:end="833:9"><if pos:start="829:9" pos:end="833:9">if <condition pos:start="829:12" pos:end="829:76">(<expr pos:start="829:13" pos:end="829:75"><name pos:start="829:13" pos:end="829:19">tot_len</name> <operator pos:start="829:21" pos:end="829:21">&lt;</operator> <operator pos:start="829:23" pos:end="829:23">(</operator><name pos:start="829:24" pos:end="829:27">UINT</name><operator pos:start="829:28" pos:end="829:28">)</operator><operator pos:start="829:29" pos:end="829:29">(</operator><name pos:start="829:30" pos:end="829:43">mac_header_len</name> <operator pos:start="829:45" pos:end="829:45">+</operator> <name pos:start="829:47" pos:end="829:74">AIRPDCAP_CRYPTED_DATA_MINLEN</name><operator pos:start="829:75" pos:end="829:75">)</operator></expr>)</condition>
        <block pos:start="830:9" pos:end="833:9">{<block_content pos:start="831:13" pos:end="832:48">
            <expr_stmt pos:start="831:13" pos:end="831:114"><expr pos:start="831:13" pos:end="831:113"><call pos:start="831:13" pos:end="831:113"><name pos:start="831:13" pos:end="831:37">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="831:38" pos:end="831:113">(<argument pos:start="831:39" pos:end="831:61"><expr pos:start="831:39" pos:end="831:61"><literal type="string" pos:start="831:39" pos:end="831:61">"AirPDcapPacketProcess"</literal></expr></argument>, <argument pos:start="831:64" pos:end="831:88"><expr pos:start="831:64" pos:end="831:88"><literal type="string" pos:start="831:64" pos:end="831:88">"minimum length violated"</literal></expr></argument>, <argument pos:start="831:91" pos:end="831:112"><expr pos:start="831:91" pos:end="831:112"><name pos:start="831:91" pos:end="831:112">AIRPDCAP_DEBUG_LEVEL_5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="832:13" pos:end="832:48">return <expr pos:start="832:20" pos:end="832:47"><name pos:start="832:20" pos:end="832:47">AIRPDCAP_RET_WRONG_DATA_SIZE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="835:9" pos:end="835:71">/* Assume that the decrypt_data field is at least this size. */</comment>
        <if_stmt pos:start="836:9" pos:end="840:9"><if pos:start="836:9" pos:end="840:9">if <condition pos:start="836:12" pos:end="836:42">(<expr pos:start="836:13" pos:end="836:41"><name pos:start="836:13" pos:end="836:19">tot_len</name> <operator pos:start="836:21" pos:end="836:21">&gt;</operator> <name pos:start="836:23" pos:end="836:41">AIRPDCAP_MAX_CAPLEN</name></expr>)</condition>
        <block pos:start="837:9" pos:end="840:9">{<block_content pos:start="838:13" pos:end="839:42">
            <expr_stmt pos:start="838:13" pos:end="838:107"><expr pos:start="838:13" pos:end="838:106"><call pos:start="838:13" pos:end="838:106"><name pos:start="838:13" pos:end="838:37">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="838:38" pos:end="838:106">(<argument pos:start="838:39" pos:end="838:61"><expr pos:start="838:39" pos:end="838:61"><literal type="string" pos:start="838:39" pos:end="838:61">"AirPDcapPacketProcess"</literal></expr></argument>, <argument pos:start="838:64" pos:end="838:81"><expr pos:start="838:64" pos:end="838:81"><literal type="string" pos:start="838:64" pos:end="838:81">"length too large"</literal></expr></argument>, <argument pos:start="838:84" pos:end="838:105"><expr pos:start="838:84" pos:end="838:105"><name pos:start="838:84" pos:end="838:105">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="839:13" pos:end="839:42">return <expr pos:start="839:20" pos:end="839:41"><name pos:start="839:20" pos:end="839:41">AIRPDCAP_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="842:9" pos:end="842:35">/* get STA/BSSID address */</comment>
        <if_stmt pos:start="843:9" pos:end="847:9"><if pos:start="843:9" pos:end="847:9">if <condition pos:start="843:12" pos:end="843:104">(<expr pos:start="843:13" pos:end="843:103"><call pos:start="843:13" pos:end="843:79"><name pos:start="843:13" pos:end="843:32">AirPDcapGetSaAddress</name><argument_list pos:start="843:33" pos:end="843:79">(<argument pos:start="843:34" pos:end="843:73"><expr pos:start="843:34" pos:end="843:73"><operator pos:start="843:34" pos:end="843:34">(</operator><specifier pos:start="843:35" pos:end="843:39">const</specifier> <name pos:start="843:41" pos:end="843:64">AIRPDCAP_MAC_FRAME_ADDR4</name> <operator pos:start="843:66" pos:end="843:66">*</operator><operator pos:start="843:67" pos:end="843:67">)</operator><operator pos:start="843:68" pos:end="843:68">(</operator><name pos:start="843:69" pos:end="843:72">data</name><operator pos:start="843:73" pos:end="843:73">)</operator></expr></argument>, <argument pos:start="843:76" pos:end="843:78"><expr pos:start="843:76" pos:end="843:78"><operator pos:start="843:76" pos:end="843:76">&amp;</operator><name pos:start="843:77" pos:end="843:78">id</name></expr></argument>)</argument_list></call> <operator pos:start="843:81" pos:end="843:82">!=</operator> <name pos:start="843:84" pos:end="843:103">AIRPDCAP_RET_SUCCESS</name></expr>)</condition>
        <block pos:start="844:9" pos:end="847:9">{<block_content pos:start="845:13" pos:end="846:41">
            <expr_stmt pos:start="845:13" pos:end="845:110"><expr pos:start="845:13" pos:end="845:109"><call pos:start="845:13" pos:end="845:109"><name pos:start="845:13" pos:end="845:37">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="845:38" pos:end="845:109">(<argument pos:start="845:39" pos:end="845:61"><expr pos:start="845:39" pos:end="845:61"><literal type="string" pos:start="845:39" pos:end="845:61">"AirPDcapPacketProcess"</literal></expr></argument>, <argument pos:start="845:64" pos:end="845:84"><expr pos:start="845:64" pos:end="845:84"><literal type="string" pos:start="845:64" pos:end="845:84">"STA/BSSID not found"</literal></expr></argument>, <argument pos:start="845:87" pos:end="845:108"><expr pos:start="845:87" pos:end="845:108"><name pos:start="845:87" pos:end="845:108">AIRPDCAP_DEBUG_LEVEL_5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="846:13" pos:end="846:41">return <expr pos:start="846:20" pos:end="846:40"><name pos:start="846:20" pos:end="846:40">AIRPDCAP_RET_REQ_DATA</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="849:9" pos:end="849:85">/* check if data is encrypted (use the WEP bit in the Frame Control field) */</comment>
        <if_stmt pos:start="850:9" pos:end="941:9"><if pos:start="850:9" pos:end="859:9">if <condition pos:start="850:12" pos:end="850:39">(<expr pos:start="850:13" pos:end="850:38"><call pos:start="850:13" pos:end="850:33"><name pos:start="850:13" pos:end="850:24">AIRPDCAP_WEP</name><argument_list pos:start="850:25" pos:end="850:33">(<argument pos:start="850:26" pos:end="850:32"><expr pos:start="850:26" pos:end="850:32"><name pos:start="850:26" pos:end="850:32"><name pos:start="850:26" pos:end="850:29">data</name><index pos:start="850:30" pos:end="850:32">[<expr pos:start="850:31" pos:end="850:31"><literal type="number" pos:start="850:31" pos:end="850:31">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="850:35" pos:end="850:36">==</operator> <literal type="number" pos:start="850:38" pos:end="850:38">0</literal></expr>)</condition>
        <block pos:start="851:9" pos:end="859:9">{<block_content pos:start="852:13" pos:end="858:50">
            <if_stmt pos:start="852:13" pos:end="857:13"><if pos:start="852:13" pos:end="857:13">if <condition pos:start="852:16" pos:end="852:30">(<expr pos:start="852:17" pos:end="852:29"><name pos:start="852:17" pos:end="852:29">scanHandshake</name></expr>)</condition>
            <block pos:start="853:13" pos:end="857:13">{<block_content pos:start="855:17" pos:end="856:85">
                <comment type="block" pos:start="854:17" pos:end="854:105">/* data is sent in cleartext, check if is an authentication message or end the process */</comment>
                <expr_stmt pos:start="855:17" pos:end="855:111"><expr pos:start="855:17" pos:end="855:110"><call pos:start="855:17" pos:end="855:110"><name pos:start="855:17" pos:end="855:41">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="855:42" pos:end="855:110">(<argument pos:start="855:43" pos:end="855:65"><expr pos:start="855:43" pos:end="855:65"><literal type="string" pos:start="855:43" pos:end="855:65">"AirPDcapPacketProcess"</literal></expr></argument>, <argument pos:start="855:68" pos:end="855:85"><expr pos:start="855:68" pos:end="855:85"><literal type="string" pos:start="855:68" pos:end="855:85">"Unencrypted data"</literal></expr></argument>, <argument pos:start="855:88" pos:end="855:109"><expr pos:start="855:88" pos:end="855:109"><name pos:start="855:88" pos:end="855:109">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="856:17" pos:end="856:85">return <expr pos:start="856:24" pos:end="856:84"><operator pos:start="856:24" pos:end="856:24">(</operator><call pos:start="856:25" pos:end="856:83"><name pos:start="856:25" pos:end="856:43">AirPDcapScanForKeys</name><argument_list pos:start="856:44" pos:end="856:83">(<argument pos:start="856:45" pos:end="856:47"><expr pos:start="856:45" pos:end="856:47"><name pos:start="856:45" pos:end="856:47">ctx</name></expr></argument>, <argument pos:start="856:50" pos:end="856:53"><expr pos:start="856:50" pos:end="856:53"><name pos:start="856:50" pos:end="856:53">data</name></expr></argument>, <argument pos:start="856:56" pos:end="856:69"><expr pos:start="856:56" pos:end="856:69"><name pos:start="856:56" pos:end="856:69">mac_header_len</name></expr></argument>, <argument pos:start="856:72" pos:end="856:78"><expr pos:start="856:72" pos:end="856:78"><name pos:start="856:72" pos:end="856:78">tot_len</name></expr></argument>, <argument pos:start="856:81" pos:end="856:82"><expr pos:start="856:81" pos:end="856:82"><name pos:start="856:81" pos:end="856:82">id</name></expr></argument>)</argument_list></call><operator pos:start="856:84" pos:end="856:84">)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return pos:start="858:13" pos:end="858:50">return <expr pos:start="858:20" pos:end="858:49"><name pos:start="858:20" pos:end="858:49">AIRPDCAP_RET_NO_DATA_ENCRYPTED</name></expr>;</return>
        </block_content>}</block></if>
        <else pos:start="860:9" pos:end="941:9">else
        <block pos:start="861:9" pos:end="941:9">{<block_content pos:start="862:13" pos:end="940:13">
            <decl_stmt pos:start="862:13" pos:end="862:41"><decl pos:start="862:13" pos:end="862:40"><type pos:start="862:13" pos:end="862:37"><name pos:start="862:13" pos:end="862:37">PAIRPDCAP_SEC_ASSOCIATION</name></type> <name pos:start="862:39" pos:end="862:40">sa</name></decl>;</decl_stmt>
            <decl_stmt pos:start="863:13" pos:end="863:27"><decl pos:start="863:13" pos:end="863:26"><type pos:start="863:13" pos:end="863:15"><name pos:start="863:13" pos:end="863:15">int</name></type> <name pos:start="863:17" pos:end="863:22">offset</name> <init pos:start="863:24" pos:end="863:26">= <expr pos:start="863:26" pos:end="863:26"><literal type="number" pos:start="863:26" pos:end="863:26">0</literal></expr></init></decl>;</decl_stmt>

            <comment type="block" pos:start="865:13" pos:end="865:75">/* get the Security Association structure for the STA and AP */</comment>
            <expr_stmt pos:start="866:13" pos:end="866:44"><expr pos:start="866:13" pos:end="866:43"><name pos:start="866:13" pos:end="866:14">sa</name> <operator pos:start="866:16" pos:end="866:16">=</operator> <call pos:start="866:18" pos:end="866:43"><name pos:start="866:18" pos:end="866:33">AirPDcapGetSaPtr</name><argument_list pos:start="866:34" pos:end="866:43">(<argument pos:start="866:35" pos:end="866:37"><expr pos:start="866:35" pos:end="866:37"><name pos:start="866:35" pos:end="866:37">ctx</name></expr></argument>, <argument pos:start="866:40" pos:end="866:42"><expr pos:start="866:40" pos:end="866:42"><operator pos:start="866:40" pos:end="866:40">&amp;</operator><name pos:start="866:41" pos:end="866:42">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="867:13" pos:end="870:13"><if pos:start="867:13" pos:end="870:13">if <condition pos:start="867:16" pos:end="867:27">(<expr pos:start="867:17" pos:end="867:26"><name pos:start="867:17" pos:end="867:18">sa</name> <operator pos:start="867:20" pos:end="867:21">==</operator> <name pos:start="867:23" pos:end="867:26">NULL</name></expr>)</condition>
            <block pos:start="868:13" pos:end="870:13">{<block_content pos:start="869:17" pos:end="869:45">
                <return pos:start="869:17" pos:end="869:45">return <expr pos:start="869:24" pos:end="869:44"><name pos:start="869:24" pos:end="869:44">AIRPDCAP_RET_REQ_DATA</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="872:13" pos:end="872:75">/* cache offset in the packet data (to scan encryption data) */</comment>
            <expr_stmt pos:start="873:13" pos:end="873:36"><expr pos:start="873:13" pos:end="873:35"><name pos:start="873:13" pos:end="873:18">offset</name> <operator pos:start="873:20" pos:end="873:20">=</operator> <name pos:start="873:22" pos:end="873:35">mac_header_len</name></expr>;</expr_stmt>

            <if_stmt pos:start="875:13" pos:end="880:13"><if pos:start="875:13" pos:end="880:13">if <condition pos:start="875:16" pos:end="875:37">(<expr pos:start="875:17" pos:end="875:36"><name pos:start="875:17" pos:end="875:28">decrypt_data</name> <operator pos:start="875:30" pos:end="875:31">==</operator> <name pos:start="875:33" pos:end="875:36">NULL</name></expr>)</condition>
            <block pos:start="876:13" pos:end="880:13">{<block_content pos:start="877:17" pos:end="879:39">
                <expr_stmt pos:start="877:17" pos:end="877:123"><expr pos:start="877:17" pos:end="877:122"><call pos:start="877:17" pos:end="877:122"><name pos:start="877:17" pos:end="877:41">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="877:42" pos:end="877:122">(<argument pos:start="877:43" pos:end="877:65"><expr pos:start="877:43" pos:end="877:65"><literal type="string" pos:start="877:43" pos:end="877:65">"AirPDcapPacketProcess"</literal></expr></argument>, <argument pos:start="877:68" pos:end="877:97"><expr pos:start="877:68" pos:end="877:97"><literal type="string" pos:start="877:68" pos:end="877:97">"no decrypt buffer, use local"</literal></expr></argument>, <argument pos:start="877:100" pos:end="877:121"><expr pos:start="877:100" pos:end="877:121"><name pos:start="877:100" pos:end="877:121">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="878:17" pos:end="878:40"><expr pos:start="878:17" pos:end="878:39"><name pos:start="878:17" pos:end="878:28">decrypt_data</name> <operator pos:start="878:30" pos:end="878:30">=</operator> <name pos:start="878:32" pos:end="878:39">tmp_data</name></expr>;</expr_stmt>
                <expr_stmt pos:start="879:17" pos:end="879:39"><expr pos:start="879:17" pos:end="879:38"><name pos:start="879:17" pos:end="879:27">decrypt_len</name> <operator pos:start="879:29" pos:end="879:29">=</operator> <operator pos:start="879:31" pos:end="879:31">&amp;</operator><name pos:start="879:32" pos:end="879:38">tmp_len</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="882:13" pos:end="882:54">/* create new header and data to modify */</comment>
            <expr_stmt pos:start="883:13" pos:end="883:35"><expr pos:start="883:13" pos:end="883:34"><operator pos:start="883:13" pos:end="883:13">*</operator><name pos:start="883:14" pos:end="883:24">decrypt_len</name> <operator pos:start="883:26" pos:end="883:26">=</operator> <name pos:start="883:28" pos:end="883:34">tot_len</name></expr>;</expr_stmt>
            <expr_stmt pos:start="884:13" pos:end="884:53"><expr pos:start="884:13" pos:end="884:52"><call pos:start="884:13" pos:end="884:52"><name pos:start="884:13" pos:end="884:18">memcpy</name><argument_list pos:start="884:19" pos:end="884:52">(<argument pos:start="884:20" pos:end="884:31"><expr pos:start="884:20" pos:end="884:31"><name pos:start="884:20" pos:end="884:31">decrypt_data</name></expr></argument>, <argument pos:start="884:34" pos:end="884:37"><expr pos:start="884:34" pos:end="884:37"><name pos:start="884:34" pos:end="884:37">data</name></expr></argument>, <argument pos:start="884:40" pos:end="884:51"><expr pos:start="884:40" pos:end="884:51"><operator pos:start="884:40" pos:end="884:40">*</operator><name pos:start="884:41" pos:end="884:51">decrypt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="886:13" pos:end="886:32">/* encrypted data */</comment>
            <expr_stmt pos:start="887:13" pos:end="887:105"><expr pos:start="887:13" pos:end="887:104"><call pos:start="887:13" pos:end="887:104"><name pos:start="887:13" pos:end="887:37">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="887:38" pos:end="887:104">(<argument pos:start="887:39" pos:end="887:61"><expr pos:start="887:39" pos:end="887:61"><literal type="string" pos:start="887:39" pos:end="887:61">"AirPDcapPacketProcess"</literal></expr></argument>, <argument pos:start="887:64" pos:end="887:79"><expr pos:start="887:64" pos:end="887:79"><literal type="string" pos:start="887:64" pos:end="887:79">"Encrypted data"</literal></expr></argument>, <argument pos:start="887:82" pos:end="887:103"><expr pos:start="887:82" pos:end="887:103"><name pos:start="887:82" pos:end="887:103">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="889:13" pos:end="889:97">/* check the Extension IV to distinguish between WEP encryption and WPA encryption */</comment>
            <comment type="block" pos:start="890:13" pos:end="890:73">/* refer to IEEE 802.11i-2004, 8.2.1.2, pag.35 for WEP,    */</comment>
            <comment type="block" pos:start="891:13" pos:end="891:73">/*          IEEE 802.11i-2004, 8.3.2.2, pag. 45 for TKIP,  */</comment>
            <comment type="block" pos:start="892:13" pos:end="892:73">/*          IEEE 802.11i-2004, 8.3.3.2, pag. 57 for CCMP   */</comment>
            <if_stmt pos:start="893:13" pos:end="940:13"><if pos:start="893:13" pos:end="897:13">if <condition pos:start="893:16" pos:end="893:54">(<expr pos:start="893:17" pos:end="893:53"><call pos:start="893:17" pos:end="893:48"><name pos:start="893:17" pos:end="893:30">AIRPDCAP_EXTIV</name><argument_list pos:start="893:31" pos:end="893:48">(<argument pos:start="893:32" pos:end="893:47"><expr pos:start="893:32" pos:end="893:47"><name pos:start="893:32" pos:end="893:47"><name pos:start="893:32" pos:end="893:35">data</name><index pos:start="893:36" pos:end="893:47">[<expr pos:start="893:37" pos:end="893:46"><name pos:start="893:37" pos:end="893:42">offset</name> <operator pos:start="893:44" pos:end="893:44">+</operator> <literal type="number" pos:start="893:46" pos:end="893:46">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="893:50" pos:end="893:51">==</operator> <literal type="number" pos:start="893:53" pos:end="893:53">0</literal></expr>)</condition>
            <block pos:start="894:13" pos:end="897:13">{<block_content pos:start="895:17" pos:end="896:103">
                <expr_stmt pos:start="895:17" pos:end="895:109"><expr pos:start="895:17" pos:end="895:108"><call pos:start="895:17" pos:end="895:108"><name pos:start="895:17" pos:end="895:41">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="895:42" pos:end="895:108">(<argument pos:start="895:43" pos:end="895:65"><expr pos:start="895:43" pos:end="895:65"><literal type="string" pos:start="895:43" pos:end="895:65">"AirPDcapPacketProcess"</literal></expr></argument>, <argument pos:start="895:68" pos:end="895:83"><expr pos:start="895:68" pos:end="895:83"><literal type="string" pos:start="895:68" pos:end="895:83">"WEP encryption"</literal></expr></argument>, <argument pos:start="895:86" pos:end="895:107"><expr pos:start="895:86" pos:end="895:107"><name pos:start="895:86" pos:end="895:107">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="896:17" pos:end="896:103">return <expr pos:start="896:24" pos:end="896:102"><call pos:start="896:24" pos:end="896:102"><name pos:start="896:24" pos:end="896:37">AirPDcapWepMng</name><argument_list pos:start="896:38" pos:end="896:102">(<argument pos:start="896:39" pos:end="896:41"><expr pos:start="896:39" pos:end="896:41"><name pos:start="896:39" pos:end="896:41">ctx</name></expr></argument>, <argument pos:start="896:44" pos:end="896:55"><expr pos:start="896:44" pos:end="896:55"><name pos:start="896:44" pos:end="896:55">decrypt_data</name></expr></argument>, <argument pos:start="896:58" pos:end="896:71"><expr pos:start="896:58" pos:end="896:71"><name pos:start="896:58" pos:end="896:71">mac_header_len</name></expr></argument>, <argument pos:start="896:74" pos:end="896:84"><expr pos:start="896:74" pos:end="896:84"><name pos:start="896:74" pos:end="896:84">decrypt_len</name></expr></argument>, <argument pos:start="896:87" pos:end="896:89"><expr pos:start="896:87" pos:end="896:89"><name pos:start="896:87" pos:end="896:89">key</name></expr></argument>, <argument pos:start="896:92" pos:end="896:93"><expr pos:start="896:92" pos:end="896:93"><name pos:start="896:92" pos:end="896:93">sa</name></expr></argument>, <argument pos:start="896:96" pos:end="896:101"><expr pos:start="896:96" pos:end="896:101"><name pos:start="896:96" pos:end="896:101">offset</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if>
            <else pos:start="898:13" pos:end="940:13">else
            <block pos:start="899:13" pos:end="940:13">{<block_content pos:start="900:17" pos:end="939:17">
                <expr_stmt pos:start="900:17" pos:end="900:118"><expr pos:start="900:17" pos:end="900:117"><call pos:start="900:17" pos:end="900:117"><name pos:start="900:17" pos:end="900:41">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="900:42" pos:end="900:117">(<argument pos:start="900:43" pos:end="900:65"><expr pos:start="900:43" pos:end="900:65"><literal type="string" pos:start="900:43" pos:end="900:65">"AirPDcapPacketProcess"</literal></expr></argument>, <argument pos:start="900:68" pos:end="900:92"><expr pos:start="900:68" pos:end="900:92"><literal type="string" pos:start="900:68" pos:end="900:92">"TKIP or CCMP encryption"</literal></expr></argument>, <argument pos:start="900:95" pos:end="900:116"><expr pos:start="900:95" pos:end="900:116"><name pos:start="900:95" pos:end="900:116">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="902:17" pos:end="905:66">/* If index &gt;= 1, then use the group key.  This will not work if the AP is using
                   more than one group key simultaneously.  I've not seen this in practice, however.
                   Usually an AP will rotate between the two key index values of 1 and 2 whenever
                   it needs to change the group key to be used. */</comment>
                <if_stmt pos:start="906:17" pos:end="923:17"><if pos:start="906:17" pos:end="923:17">if <condition pos:start="906:20" pos:end="906:62">(<expr pos:start="906:21" pos:end="906:61"><call pos:start="906:21" pos:end="906:56"><name pos:start="906:21" pos:end="906:38">AIRPDCAP_KEY_INDEX</name><argument_list pos:start="906:39" pos:end="906:56">(<argument pos:start="906:40" pos:end="906:55"><expr pos:start="906:40" pos:end="906:55"><name pos:start="906:40" pos:end="906:55"><name pos:start="906:40" pos:end="906:43">data</name><index pos:start="906:44" pos:end="906:55">[<expr pos:start="906:45" pos:end="906:54"><name pos:start="906:45" pos:end="906:50">offset</name> <operator pos:start="906:52" pos:end="906:52">+</operator> <literal type="number" pos:start="906:54" pos:end="906:54">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="906:58" pos:end="906:59">&gt;=</operator> <literal type="number" pos:start="906:61" pos:end="906:61">1</literal></expr>)</condition>
                <block pos:start="907:17" pos:end="923:17">{<block_content pos:start="909:21" pos:end="922:53">

                    <expr_stmt pos:start="909:21" pos:end="909:154"><expr pos:start="909:21" pos:end="909:153"><call pos:start="909:21" pos:end="909:153"><name pos:start="909:21" pos:end="909:45">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="909:46" pos:end="909:153">(<argument pos:start="909:47" pos:end="909:69"><expr pos:start="909:47" pos:end="909:69"><literal type="string" pos:start="909:47" pos:end="909:69">"AirPDcapPacketProcess"</literal></expr></argument>, <argument pos:start="909:72" pos:end="909:128"><expr pos:start="909:72" pos:end="909:128"><literal type="string" pos:start="909:72" pos:end="909:128">"The key index &gt;= 1. This is encrypted with a group key."</literal></expr></argument>, <argument pos:start="909:131" pos:end="909:152"><expr pos:start="909:131" pos:end="909:152"><name pos:start="909:131" pos:end="909:152">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="911:21" pos:end="911:95">/* force STA address to broadcast MAC so we load the SA for the groupkey */</comment>
                    <expr_stmt pos:start="912:21" pos:end="915:0"><expr pos:start="912:21" pos:end="912:67"><call pos:start="912:21" pos:end="912:67"><name pos:start="912:21" pos:end="912:26">memcpy</name><argument_list pos:start="912:27" pos:end="912:67">(<argument pos:start="912:28" pos:end="912:33"><expr pos:start="912:28" pos:end="912:33"><name pos:start="912:28" pos:end="912:33"><name pos:start="912:28" pos:end="912:29">id</name><operator pos:start="912:30" pos:end="912:30">.</operator><name pos:start="912:31" pos:end="912:33">sta</name></name></expr></argument>, <argument pos:start="912:36" pos:end="912:48"><expr pos:start="912:36" pos:end="912:48"><name pos:start="912:36" pos:end="912:48">broadcast_mac</name></expr></argument>, <argument pos:start="912:51" pos:end="912:66"><expr pos:start="912:51" pos:end="912:66"><name pos:start="912:51" pos:end="912:66">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="914:1" pos:end="914:13">#<cpp:directive pos:start="914:2" pos:end="914:6">ifdef</cpp:directive> <name pos:start="914:8" pos:end="914:13">_DEBUG</name></cpp:ifdef>
                    <expr_stmt pos:start="915:21" pos:end="915:154"><expr pos:start="915:21" pos:end="915:153"><call pos:start="915:21" pos:end="915:153"><name pos:start="915:21" pos:end="915:30">g_snprintf</name><argument_list pos:start="915:31" pos:end="915:153">(<argument pos:start="915:32" pos:end="915:37"><expr pos:start="915:32" pos:end="915:37"><name pos:start="915:32" pos:end="915:37">msgbuf</name></expr></argument>, <argument pos:start="915:40" pos:end="915:49"><expr pos:start="915:40" pos:end="915:49"><name pos:start="915:40" pos:end="915:49">MSGBUF_LEN</name></expr></argument>, <argument pos:start="915:52" pos:end="915:86"><expr pos:start="915:52" pos:end="915:86"><literal type="string" pos:start="915:52" pos:end="915:86">"ST_MAC: %2X.%2X.%2X.%2X.%2X.%2X\t"</literal></expr></argument>, <argument pos:start="915:89" pos:end="915:97"><expr pos:start="915:89" pos:end="915:97"><name pos:start="915:89" pos:end="915:97"><name pos:start="915:89" pos:end="915:90">id</name><operator pos:start="915:91" pos:end="915:91">.</operator><name pos:start="915:92" pos:end="915:94">sta</name><index pos:start="915:95" pos:end="915:97">[<expr pos:start="915:96" pos:end="915:96"><literal type="number" pos:start="915:96" pos:end="915:96">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="915:100" pos:end="915:108"><expr pos:start="915:100" pos:end="915:108"><name pos:start="915:100" pos:end="915:108"><name pos:start="915:100" pos:end="915:101">id</name><operator pos:start="915:102" pos:end="915:102">.</operator><name pos:start="915:103" pos:end="915:105">sta</name><index pos:start="915:106" pos:end="915:108">[<expr pos:start="915:107" pos:end="915:107"><literal type="number" pos:start="915:107" pos:end="915:107">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="915:111" pos:end="915:119"><expr pos:start="915:111" pos:end="915:119"><name pos:start="915:111" pos:end="915:119"><name pos:start="915:111" pos:end="915:112">id</name><operator pos:start="915:113" pos:end="915:113">.</operator><name pos:start="915:114" pos:end="915:116">sta</name><index pos:start="915:117" pos:end="915:119">[<expr pos:start="915:118" pos:end="915:118"><literal type="number" pos:start="915:118" pos:end="915:118">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="915:122" pos:end="915:130"><expr pos:start="915:122" pos:end="915:130"><name pos:start="915:122" pos:end="915:130"><name pos:start="915:122" pos:end="915:123">id</name><operator pos:start="915:124" pos:end="915:124">.</operator><name pos:start="915:125" pos:end="915:127">sta</name><index pos:start="915:128" pos:end="915:130">[<expr pos:start="915:129" pos:end="915:129"><literal type="number" pos:start="915:129" pos:end="915:129">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="915:133" pos:end="915:141"><expr pos:start="915:133" pos:end="915:141"><name pos:start="915:133" pos:end="915:141"><name pos:start="915:133" pos:end="915:134">id</name><operator pos:start="915:135" pos:end="915:135">.</operator><name pos:start="915:136" pos:end="915:138">sta</name><index pos:start="915:139" pos:end="915:141">[<expr pos:start="915:140" pos:end="915:140"><literal type="number" pos:start="915:140" pos:end="915:140">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="915:144" pos:end="915:152"><expr pos:start="915:144" pos:end="915:152"><name pos:start="915:144" pos:end="915:152"><name pos:start="915:144" pos:end="915:145">id</name><operator pos:start="915:146" pos:end="915:146">.</operator><name pos:start="915:147" pos:end="915:149">sta</name><index pos:start="915:150" pos:end="915:152">[<expr pos:start="915:151" pos:end="915:151"><literal type="number" pos:start="915:151" pos:end="915:151">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="916:21" pos:end="918:0"><expr pos:start="916:21" pos:end="916:102"><call pos:start="916:21" pos:end="916:102"><name pos:start="916:21" pos:end="916:45">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="916:46" pos:end="916:102">(<argument pos:start="916:47" pos:end="916:69"><expr pos:start="916:47" pos:end="916:69"><literal type="string" pos:start="916:47" pos:end="916:69">"AirPDcapPacketProcess"</literal></expr></argument>, <argument pos:start="916:72" pos:end="916:77"><expr pos:start="916:72" pos:end="916:77"><name pos:start="916:72" pos:end="916:77">msgbuf</name></expr></argument>, <argument pos:start="916:80" pos:end="916:101"><expr pos:start="916:80" pos:end="916:101"><name pos:start="916:80" pos:end="916:101">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="917:1" pos:end="917:6">#<cpp:directive pos:start="917:2" pos:end="917:6">endif</cpp:directive></cpp:endif>

                    <comment type="block" pos:start="919:21" pos:end="919:102">/* search for a cached Security Association for current BSSID and broadcast MAC */</comment>
                    <expr_stmt pos:start="920:21" pos:end="920:52"><expr pos:start="920:21" pos:end="920:51"><name pos:start="920:21" pos:end="920:22">sa</name> <operator pos:start="920:24" pos:end="920:24">=</operator> <call pos:start="920:26" pos:end="920:51"><name pos:start="920:26" pos:end="920:41">AirPDcapGetSaPtr</name><argument_list pos:start="920:42" pos:end="920:51">(<argument pos:start="920:43" pos:end="920:45"><expr pos:start="920:43" pos:end="920:45"><name pos:start="920:43" pos:end="920:45">ctx</name></expr></argument>, <argument pos:start="920:48" pos:end="920:50"><expr pos:start="920:48" pos:end="920:50"><operator pos:start="920:48" pos:end="920:48">&amp;</operator><name pos:start="920:49" pos:end="920:50">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="921:21" pos:end="922:53"><if pos:start="921:21" pos:end="922:53">if <condition pos:start="921:24" pos:end="921:35">(<expr pos:start="921:25" pos:end="921:34"><name pos:start="921:25" pos:end="921:26">sa</name> <operator pos:start="921:28" pos:end="921:29">==</operator> <name pos:start="921:31" pos:end="921:34">NULL</name></expr>)</condition><block type="pseudo" pos:start="922:25" pos:end="922:53"><block_content pos:start="922:25" pos:end="922:53">
                        <return pos:start="922:25" pos:end="922:53">return <expr pos:start="922:32" pos:end="922:52"><name pos:start="922:32" pos:end="922:52">AIRPDCAP_RET_REQ_DATA</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="925:17" pos:end="925:65">/* Decrypt the packet using the appropriate SA */</comment>
                <if_stmt pos:start="926:17" pos:end="939:17"><if pos:start="926:17" pos:end="939:17">if <condition pos:start="926:20" pos:end="926:120">(<expr pos:start="926:21" pos:end="926:119"><call pos:start="926:21" pos:end="926:95"><name pos:start="926:21" pos:end="926:35">AirPDcapRsnaMng</name><argument_list pos:start="926:36" pos:end="926:95">(<argument pos:start="926:37" pos:end="926:48"><expr pos:start="926:37" pos:end="926:48"><name pos:start="926:37" pos:end="926:48">decrypt_data</name></expr></argument>, <argument pos:start="926:51" pos:end="926:64"><expr pos:start="926:51" pos:end="926:64"><name pos:start="926:51" pos:end="926:64">mac_header_len</name></expr></argument>, <argument pos:start="926:67" pos:end="926:77"><expr pos:start="926:67" pos:end="926:77"><name pos:start="926:67" pos:end="926:77">decrypt_len</name></expr></argument>, <argument pos:start="926:80" pos:end="926:82"><expr pos:start="926:80" pos:end="926:82"><name pos:start="926:80" pos:end="926:82">key</name></expr></argument>, <argument pos:start="926:85" pos:end="926:86"><expr pos:start="926:85" pos:end="926:86"><name pos:start="926:85" pos:end="926:86">sa</name></expr></argument>, <argument pos:start="926:89" pos:end="926:94"><expr pos:start="926:89" pos:end="926:94"><name pos:start="926:89" pos:end="926:94">offset</name></expr></argument>)</argument_list></call> <operator pos:start="926:97" pos:end="926:98">==</operator> <name pos:start="926:100" pos:end="926:119">AIRPDCAP_RET_SUCCESS</name></expr>)</condition>
                <block pos:start="927:17" pos:end="939:17">{<block_content pos:start="931:21" pos:end="938:21">
                    <comment type="block" pos:start="928:21" pos:end="930:132">/* If we successfully decrypted a packet, scan it to see if it contains a key handshake.
                       The group key handshake could be sent at any time the AP wants to change the key (such as when
                       it is using key rotation) and it also could be a rekey for the Pairwise key. So we must scan every packet. */</comment>
                    <if_stmt pos:start="931:21" pos:end="938:21"><if pos:start="931:21" pos:end="934:21">if <condition pos:start="931:24" pos:end="931:38">(<expr pos:start="931:25" pos:end="931:37"><name pos:start="931:25" pos:end="931:37">scanHandshake</name></expr>)</condition>
                    <block pos:start="932:21" pos:end="934:21">{<block_content pos:start="933:25" pos:end="933:106">
                        <return pos:start="933:25" pos:end="933:106">return <expr pos:start="933:32" pos:end="933:105"><operator pos:start="933:32" pos:end="933:32">(</operator><call pos:start="933:33" pos:end="933:104"><name pos:start="933:33" pos:end="933:51">AirPDcapScanForKeys</name><argument_list pos:start="933:52" pos:end="933:104">(<argument pos:start="933:53" pos:end="933:55"><expr pos:start="933:53" pos:end="933:55"><name pos:start="933:53" pos:end="933:55">ctx</name></expr></argument>, <argument pos:start="933:58" pos:end="933:69"><expr pos:start="933:58" pos:end="933:69"><name pos:start="933:58" pos:end="933:69">decrypt_data</name></expr></argument>, <argument pos:start="933:72" pos:end="933:85"><expr pos:start="933:72" pos:end="933:85"><name pos:start="933:72" pos:end="933:85">mac_header_len</name></expr></argument>, <argument pos:start="933:88" pos:end="933:99"><expr pos:start="933:88" pos:end="933:99"><operator pos:start="933:88" pos:end="933:88">*</operator><name pos:start="933:89" pos:end="933:99">decrypt_len</name></expr></argument>, <argument pos:start="933:102" pos:end="933:103"><expr pos:start="933:102" pos:end="933:103"><name pos:start="933:102" pos:end="933:103">id</name></expr></argument>)</argument_list></call><operator pos:start="933:105" pos:end="933:105">)</operator></expr>;</return>
                    </block_content>}</block></if>
                    <else pos:start="935:21" pos:end="938:21">else
                    <block pos:start="936:21" pos:end="938:21">{<block_content pos:start="937:25" pos:end="937:52">
                        <return pos:start="937:25" pos:end="937:52">return <expr pos:start="937:32" pos:end="937:51"><name pos:start="937:32" pos:end="937:51">AIRPDCAP_RET_SUCCESS</name></expr>;</return>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <return pos:start="942:9" pos:end="942:38">return <expr pos:start="942:16" pos:end="942:37"><name pos:start="942:16" pos:end="942:37">AIRPDCAP_RET_UNSUCCESS</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="945:5" pos:end="1004:5"><type pos:start="945:5" pos:end="945:7"><name pos:start="945:5" pos:end="945:7">INT</name></type> <name pos:start="945:9" pos:end="945:23">AirPDcapSetKeys</name><parameter_list pos:start="945:24" pos:end="948:29">(
        <parameter pos:start="946:9" pos:end="946:29"><decl pos:start="946:9" pos:end="946:29"><type pos:start="946:9" pos:end="946:29"><name pos:start="946:9" pos:end="946:25">PAIRPDCAP_CONTEXT</name></type> <name pos:start="946:27" pos:end="946:29">ctx</name></decl></parameter>,
        <parameter pos:start="947:9" pos:end="947:32"><decl pos:start="947:9" pos:end="947:32"><type pos:start="947:9" pos:end="947:30"><name pos:start="947:9" pos:end="947:25">AIRPDCAP_KEY_ITEM</name></type> <name pos:start="947:27" pos:end="947:32"><name pos:start="947:27" pos:end="947:30">keys</name><index pos:start="947:31" pos:end="947:32">[]</index></name></decl></parameter>,
        <parameter pos:start="948:9" pos:end="948:28"><decl pos:start="948:9" pos:end="948:28"><type pos:start="948:9" pos:end="948:28"><specifier pos:start="948:9" pos:end="948:13">const</specifier> <name pos:start="948:15" pos:end="948:20">size_t</name></type> <name pos:start="948:22" pos:end="948:28">keys_nr</name></decl></parameter>)</parameter_list>
    <block pos:start="949:5" pos:end="1004:5">{<block_content pos:start="950:9" pos:end="1003:23">
        <decl_stmt pos:start="950:9" pos:end="950:14"><decl pos:start="950:9" pos:end="950:13"><type pos:start="950:9" pos:end="950:11"><name pos:start="950:9" pos:end="950:11">INT</name></type> <name pos:start="950:13" pos:end="950:13">i</name></decl>;</decl_stmt>
        <decl_stmt pos:start="951:9" pos:end="951:20"><decl pos:start="951:9" pos:end="951:19"><type pos:start="951:9" pos:end="951:11"><name pos:start="951:9" pos:end="951:11">INT</name></type> <name pos:start="951:13" pos:end="951:19">success</name></decl>;</decl_stmt>
        <expr_stmt pos:start="952:9" pos:end="952:54"><expr pos:start="952:9" pos:end="952:53"><call pos:start="952:9" pos:end="952:53"><name pos:start="952:9" pos:end="952:34">AIRPDCAP_DEBUG_TRACE_START</name><argument_list pos:start="952:35" pos:end="952:53">(<argument pos:start="952:36" pos:end="952:52"><expr pos:start="952:36" pos:end="952:52"><literal type="string" pos:start="952:36" pos:end="952:52">"AirPDcapSetKeys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="954:9" pos:end="959:9"><if pos:start="954:9" pos:end="959:9">if <condition pos:start="954:12" pos:end="954:40">(<expr pos:start="954:13" pos:end="954:39"><name pos:start="954:13" pos:end="954:15">ctx</name> <operator pos:start="954:17" pos:end="954:18">==</operator> <name pos:start="954:20" pos:end="954:23">NULL</name> <operator pos:start="954:25" pos:end="954:26">||</operator> <name pos:start="954:28" pos:end="954:31">keys</name> <operator pos:start="954:33" pos:end="954:34">==</operator> <name pos:start="954:36" pos:end="954:39">NULL</name></expr>)</condition>
        <block pos:start="955:9" pos:end="959:9">{<block_content pos:start="956:13" pos:end="958:21">
            <expr_stmt pos:start="956:13" pos:end="956:116"><expr pos:start="956:13" pos:end="956:115"><call pos:start="956:13" pos:end="956:115"><name pos:start="956:13" pos:end="956:37">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="956:38" pos:end="956:115">(<argument pos:start="956:39" pos:end="956:55"><expr pos:start="956:39" pos:end="956:55"><literal type="string" pos:start="956:39" pos:end="956:55">"AirPDcapSetKeys"</literal></expr></argument>, <argument pos:start="956:58" pos:end="956:90"><expr pos:start="956:58" pos:end="956:90"><literal type="string" pos:start="956:58" pos:end="956:90">"NULL context or NULL keys array"</literal></expr></argument>, <argument pos:start="956:93" pos:end="956:114"><expr pos:start="956:93" pos:end="956:114"><name pos:start="956:93" pos:end="956:114">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="957:13" pos:end="957:56"><expr pos:start="957:13" pos:end="957:55"><call pos:start="957:13" pos:end="957:55"><name pos:start="957:13" pos:end="957:36">AIRPDCAP_DEBUG_TRACE_END</name><argument_list pos:start="957:37" pos:end="957:55">(<argument pos:start="957:38" pos:end="957:54"><expr pos:start="957:38" pos:end="957:54"><literal type="string" pos:start="957:38" pos:end="957:54">"AirPDcapSetKeys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="958:13" pos:end="958:21">return <expr pos:start="958:20" pos:end="958:20"><literal type="number" pos:start="958:20" pos:end="958:20">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="961:9" pos:end="966:9"><if pos:start="961:9" pos:end="966:9">if <condition pos:start="961:12" pos:end="961:43">(<expr pos:start="961:13" pos:end="961:42"><name pos:start="961:13" pos:end="961:19">keys_nr</name> <operator pos:start="961:21" pos:end="961:21">&gt;</operator> <name pos:start="961:23" pos:end="961:42">AIRPDCAP_MAX_KEYS_NR</name></expr>)</condition>
        <block pos:start="962:9" pos:end="966:9">{<block_content pos:start="963:13" pos:end="965:21">
            <expr_stmt pos:start="963:13" pos:end="963:117"><expr pos:start="963:13" pos:end="963:116"><call pos:start="963:13" pos:end="963:116"><name pos:start="963:13" pos:end="963:37">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="963:38" pos:end="963:116">(<argument pos:start="963:39" pos:end="963:55"><expr pos:start="963:39" pos:end="963:55"><literal type="string" pos:start="963:39" pos:end="963:55">"AirPDcapSetKeys"</literal></expr></argument>, <argument pos:start="963:58" pos:end="963:91"><expr pos:start="963:58" pos:end="963:91"><literal type="string" pos:start="963:58" pos:end="963:91">"Keys number greater than maximum"</literal></expr></argument>, <argument pos:start="963:94" pos:end="963:115"><expr pos:start="963:94" pos:end="963:115"><name pos:start="963:94" pos:end="963:115">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="964:13" pos:end="964:56"><expr pos:start="964:13" pos:end="964:55"><call pos:start="964:13" pos:end="964:55"><name pos:start="964:13" pos:end="964:36">AIRPDCAP_DEBUG_TRACE_END</name><argument_list pos:start="964:37" pos:end="964:55">(<argument pos:start="964:38" pos:end="964:54"><expr pos:start="964:38" pos:end="964:54"><literal type="string" pos:start="964:38" pos:end="964:54">"AirPDcapSetKeys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="965:13" pos:end="965:21">return <expr pos:start="965:20" pos:end="965:20"><literal type="number" pos:start="965:20" pos:end="965:20">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="968:9" pos:end="968:66">/* clean key and SA collections before setting new ones */</comment>
        <expr_stmt pos:start="969:9" pos:end="969:33"><expr pos:start="969:9" pos:end="969:32"><call pos:start="969:9" pos:end="969:32"><name pos:start="969:9" pos:end="969:27">AirPDcapInitContext</name><argument_list pos:start="969:28" pos:end="969:32">(<argument pos:start="969:29" pos:end="969:31"><expr pos:start="969:29" pos:end="969:31"><name pos:start="969:29" pos:end="969:31">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="971:9" pos:end="971:35">/* check and insert keys */</comment>
        <for pos:start="972:9" pos:end="998:9">for <control pos:start="972:13" pos:end="972:55">(<init pos:start="972:14" pos:end="972:32"><expr pos:start="972:14" pos:end="972:18"><name pos:start="972:14" pos:end="972:14">i</name> <operator pos:start="972:16" pos:end="972:16">=</operator> <literal type="number" pos:start="972:18" pos:end="972:18">0</literal></expr><operator pos:start="972:19" pos:end="972:19">,</operator> <expr pos:start="972:21" pos:end="972:31"><name pos:start="972:21" pos:end="972:27">success</name> <operator pos:start="972:29" pos:end="972:29">=</operator> <literal type="number" pos:start="972:31" pos:end="972:31">0</literal></expr>;</init> <condition pos:start="972:34" pos:end="972:50"><expr pos:start="972:34" pos:end="972:49"><name pos:start="972:34" pos:end="972:34">i</name> <operator pos:start="972:36" pos:end="972:36">&lt;</operator> <operator pos:start="972:38" pos:end="972:38">(</operator><name pos:start="972:39" pos:end="972:41">INT</name><operator pos:start="972:42" pos:end="972:42">)</operator><name pos:start="972:43" pos:end="972:49">keys_nr</name></expr>;</condition> <incr pos:start="972:52" pos:end="972:54"><expr pos:start="972:52" pos:end="972:54"><name pos:start="972:52" pos:end="972:52">i</name><operator pos:start="972:53" pos:end="972:54">++</operator></expr></incr>)</control>
        <block pos:start="973:9" pos:end="998:9">{<block_content pos:start="974:13" pos:end="997:13">
            <if_stmt pos:start="974:13" pos:end="997:13"><if pos:start="974:13" pos:end="997:13">if <condition pos:start="974:16" pos:end="974:54">(<expr pos:start="974:17" pos:end="974:53"><call pos:start="974:17" pos:end="974:45"><name pos:start="974:17" pos:end="974:35">AirPDcapValidateKey</name><argument_list pos:start="974:36" pos:end="974:45">(<argument pos:start="974:37" pos:end="974:44"><expr pos:start="974:37" pos:end="974:44"><name pos:start="974:37" pos:end="974:40">keys</name> <operator pos:start="974:42" pos:end="974:42">+</operator> <name pos:start="974:44" pos:end="974:44">i</name></expr></argument>)</argument_list></call> <operator pos:start="974:47" pos:end="974:48">==</operator> <name pos:start="974:50" pos:end="974:53">TRUE</name></expr>)</condition>
            <block pos:start="975:13" pos:end="997:13">{<block_content pos:start="976:17" pos:end="996:26">
                <if_stmt pos:start="976:17" pos:end="995:0"><if pos:start="976:17" pos:end="982:0">if <condition pos:start="976:20" pos:end="976:65">(<expr pos:start="976:21" pos:end="976:64"><name pos:start="976:21" pos:end="976:27"><name pos:start="976:21" pos:end="976:24">keys</name><index pos:start="976:25" pos:end="976:27">[<expr pos:start="976:26" pos:end="976:26"><name pos:start="976:26" pos:end="976:26">i</name></expr>]</index></name><operator pos:start="976:28" pos:end="976:28">.</operator><name pos:start="976:29" pos:end="976:35">KeyType</name> <operator pos:start="976:37" pos:end="976:38">==</operator> <name pos:start="976:40" pos:end="976:64">AIRPDCAP_KEY_TYPE_WPA_PWD</name></expr>)</condition>
                <block pos:start="977:17" pos:end="982:0">{<block_content pos:start="978:21" pos:end="979:140">
                    <expr_stmt pos:start="978:21" pos:end="978:110"><expr pos:start="978:21" pos:end="978:109"><call pos:start="978:21" pos:end="978:109"><name pos:start="978:21" pos:end="978:45">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="978:46" pos:end="978:109">(<argument pos:start="978:47" pos:end="978:63"><expr pos:start="978:47" pos:end="978:63"><literal type="string" pos:start="978:47" pos:end="978:63">"AirPDcapSetKeys"</literal></expr></argument>, <argument pos:start="978:66" pos:end="978:84"><expr pos:start="978:66" pos:end="978:84"><literal type="string" pos:start="978:66" pos:end="978:84">"Set a WPA-PWD key"</literal></expr></argument>, <argument pos:start="978:87" pos:end="978:108"><expr pos:start="978:87" pos:end="978:108"><name pos:start="978:87" pos:end="978:108">AIRPDCAP_DEBUG_LEVEL_4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="979:21" pos:end="979:140"><expr pos:start="979:21" pos:end="979:139"><call pos:start="979:21" pos:end="979:139"><name pos:start="979:21" pos:end="979:39">AirPDcapRsnaPwd2Psk</name><argument_list pos:start="979:40" pos:end="979:139">(<argument pos:start="979:41" pos:end="979:66"><expr pos:start="979:41" pos:end="979:66"><name pos:start="979:41" pos:end="979:47"><name pos:start="979:41" pos:end="979:44">keys</name><index pos:start="979:45" pos:end="979:47">[<expr pos:start="979:46" pos:end="979:46"><name pos:start="979:46" pos:end="979:46">i</name></expr>]</index></name><operator pos:start="979:48" pos:end="979:48">.</operator><name pos:start="979:49" pos:end="979:66"><name pos:start="979:49" pos:end="979:55">UserPwd</name><operator pos:start="979:56" pos:end="979:56">.</operator><name pos:start="979:57" pos:end="979:66">Passphrase</name></name></expr></argument>, <argument pos:start="979:69" pos:end="979:88"><expr pos:start="979:69" pos:end="979:88"><name pos:start="979:69" pos:end="979:75"><name pos:start="979:69" pos:end="979:72">keys</name><index pos:start="979:73" pos:end="979:75">[<expr pos:start="979:74" pos:end="979:74"><name pos:start="979:74" pos:end="979:74">i</name></expr>]</index></name><operator pos:start="979:76" pos:end="979:76">.</operator><name pos:start="979:77" pos:end="979:88"><name pos:start="979:77" pos:end="979:83">UserPwd</name><operator pos:start="979:84" pos:end="979:84">.</operator><name pos:start="979:85" pos:end="979:88">Ssid</name></name></expr></argument>, <argument pos:start="979:91" pos:end="979:113"><expr pos:start="979:91" pos:end="979:113"><name pos:start="979:91" pos:end="979:97"><name pos:start="979:91" pos:end="979:94">keys</name><index pos:start="979:95" pos:end="979:97">[<expr pos:start="979:96" pos:end="979:96"><name pos:start="979:96" pos:end="979:96">i</name></expr>]</index></name><operator pos:start="979:98" pos:end="979:98">.</operator><name pos:start="979:99" pos:end="979:113"><name pos:start="979:99" pos:end="979:105">UserPwd</name><operator pos:start="979:106" pos:end="979:106">.</operator><name pos:start="979:107" pos:end="979:113">SsidLen</name></name></expr></argument>, <argument pos:start="979:116" pos:end="979:138"><expr pos:start="979:116" pos:end="979:138"><name pos:start="979:116" pos:end="979:122"><name pos:start="979:116" pos:end="979:119">keys</name><index pos:start="979:120" pos:end="979:122">[<expr pos:start="979:121" pos:end="979:121"><name pos:start="979:121" pos:end="979:121">i</name></expr>]</index></name><operator pos:start="979:123" pos:end="979:123">.</operator><name pos:start="979:124" pos:end="979:138"><name pos:start="979:124" pos:end="979:130">KeyData</name><operator pos:start="979:131" pos:end="979:131">.</operator><name pos:start="979:132" pos:end="979:134">Wpa</name><operator pos:start="979:135" pos:end="979:135">.</operator><name pos:start="979:136" pos:end="979:138">Psk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
<cpp:ifdef pos:start="981:1" pos:end="981:13">#<cpp:directive pos:start="981:2" pos:end="981:6">ifdef</cpp:directive> <name pos:start="981:8" pos:end="981:13">_DEBUG</name></cpp:ifdef>
                <if type="elseif" pos:start="982:17" pos:end="985:17">else if <condition pos:start="982:25" pos:end="982:70">(<expr pos:start="982:26" pos:end="982:69"><name pos:start="982:26" pos:end="982:32"><name pos:start="982:26" pos:end="982:29">keys</name><index pos:start="982:30" pos:end="982:32">[<expr pos:start="982:31" pos:end="982:31"><name pos:start="982:31" pos:end="982:31">i</name></expr>]</index></name><operator pos:start="982:33" pos:end="982:33">.</operator><name pos:start="982:34" pos:end="982:40">KeyType</name> <operator pos:start="982:42" pos:end="982:43">==</operator> <name pos:start="982:45" pos:end="982:69">AIRPDCAP_KEY_TYPE_WPA_PMK</name></expr>)</condition>
                <block pos:start="983:17" pos:end="985:17">{<block_content pos:start="984:21" pos:end="984:110">
                    <expr_stmt pos:start="984:21" pos:end="984:110"><expr pos:start="984:21" pos:end="984:109"><call pos:start="984:21" pos:end="984:109"><name pos:start="984:21" pos:end="984:45">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="984:46" pos:end="984:109">(<argument pos:start="984:47" pos:end="984:63"><expr pos:start="984:47" pos:end="984:63"><literal type="string" pos:start="984:47" pos:end="984:63">"AirPDcapSetKeys"</literal></expr></argument>, <argument pos:start="984:66" pos:end="984:84"><expr pos:start="984:66" pos:end="984:84"><literal type="string" pos:start="984:66" pos:end="984:84">"Set a WPA-PMK key"</literal></expr></argument>, <argument pos:start="984:87" pos:end="984:108"><expr pos:start="984:87" pos:end="984:108"><name pos:start="984:87" pos:end="984:108">AIRPDCAP_DEBUG_LEVEL_4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif" pos:start="986:17" pos:end="989:17">else if <condition pos:start="986:25" pos:end="986:66">(<expr pos:start="986:26" pos:end="986:65"><name pos:start="986:26" pos:end="986:32"><name pos:start="986:26" pos:end="986:29">keys</name><index pos:start="986:30" pos:end="986:32">[<expr pos:start="986:31" pos:end="986:31"><name pos:start="986:31" pos:end="986:31">i</name></expr>]</index></name><operator pos:start="986:33" pos:end="986:33">.</operator><name pos:start="986:34" pos:end="986:40">KeyType</name> <operator pos:start="986:42" pos:end="986:43">==</operator> <name pos:start="986:45" pos:end="986:65">AIRPDCAP_KEY_TYPE_WEP</name></expr>)</condition>
                <block pos:start="987:17" pos:end="989:17">{<block_content pos:start="988:21" pos:end="988:106">
                    <expr_stmt pos:start="988:21" pos:end="988:106"><expr pos:start="988:21" pos:end="988:105"><call pos:start="988:21" pos:end="988:105"><name pos:start="988:21" pos:end="988:45">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="988:46" pos:end="988:105">(<argument pos:start="988:47" pos:end="988:63"><expr pos:start="988:47" pos:end="988:63"><literal type="string" pos:start="988:47" pos:end="988:63">"AirPDcapSetKeys"</literal></expr></argument>, <argument pos:start="988:66" pos:end="988:80"><expr pos:start="988:66" pos:end="988:80"><literal type="string" pos:start="988:66" pos:end="988:80">"Set a WEP key"</literal></expr></argument>, <argument pos:start="988:83" pos:end="988:104"><expr pos:start="988:83" pos:end="988:104"><name pos:start="988:83" pos:end="988:104">AIRPDCAP_DEBUG_LEVEL_4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else pos:start="990:17" pos:end="995:0">else
                <block pos:start="991:17" pos:end="995:0">{<block_content pos:start="992:21" pos:end="992:102">
                    <expr_stmt pos:start="992:21" pos:end="992:102"><expr pos:start="992:21" pos:end="992:101"><call pos:start="992:21" pos:end="992:101"><name pos:start="992:21" pos:end="992:45">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="992:46" pos:end="992:101">(<argument pos:start="992:47" pos:end="992:63"><expr pos:start="992:47" pos:end="992:63"><literal type="string" pos:start="992:47" pos:end="992:63">"AirPDcapSetKeys"</literal></expr></argument>, <argument pos:start="992:66" pos:end="992:76"><expr pos:start="992:66" pos:end="992:76"><literal type="string" pos:start="992:66" pos:end="992:76">"Set a key"</literal></expr></argument>, <argument pos:start="992:79" pos:end="992:100"><expr pos:start="992:79" pos:end="992:100"><name pos:start="992:79" pos:end="992:100">AIRPDCAP_DEBUG_LEVEL_4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
<cpp:endif pos:start="994:1" pos:end="994:6">#<cpp:directive pos:start="994:2" pos:end="994:6">endif</cpp:directive></cpp:endif>
                <expr_stmt pos:start="995:17" pos:end="995:71"><expr pos:start="995:17" pos:end="995:70"><call pos:start="995:17" pos:end="995:70"><name pos:start="995:17" pos:end="995:22">memcpy</name><argument_list pos:start="995:23" pos:end="995:70">(<argument pos:start="995:24" pos:end="995:42"><expr pos:start="995:24" pos:end="995:42"><operator pos:start="995:24" pos:end="995:24">&amp;</operator><name pos:start="995:25" pos:end="995:42"><name pos:start="995:25" pos:end="995:27">ctx</name><operator pos:start="995:28" pos:end="995:29">-&gt;</operator><name pos:start="995:30" pos:end="995:33">keys</name><index pos:start="995:34" pos:end="995:42">[<expr pos:start="995:35" pos:end="995:41"><name pos:start="995:35" pos:end="995:41">success</name></expr>]</index></name></expr></argument>, <argument pos:start="995:45" pos:end="995:52"><expr pos:start="995:45" pos:end="995:52"><operator pos:start="995:45" pos:end="995:45">&amp;</operator><name pos:start="995:46" pos:end="995:52"><name pos:start="995:46" pos:end="995:49">keys</name><index pos:start="995:50" pos:end="995:52">[<expr pos:start="995:51" pos:end="995:51"><name pos:start="995:51" pos:end="995:51">i</name></expr>]</index></name></expr></argument>, <argument pos:start="995:55" pos:end="995:69"><expr pos:start="995:55" pos:end="995:69"><sizeof pos:start="995:55" pos:end="995:69">sizeof<argument_list pos:start="995:61" pos:end="995:69">(<argument pos:start="995:62" pos:end="995:68"><expr pos:start="995:62" pos:end="995:68"><name pos:start="995:62" pos:end="995:68"><name pos:start="995:62" pos:end="995:65">keys</name><index pos:start="995:66" pos:end="995:68">[<expr pos:start="995:67" pos:end="995:67"><name pos:start="995:67" pos:end="995:67">i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="996:17" pos:end="996:26"><expr pos:start="996:17" pos:end="996:25"><name pos:start="996:17" pos:end="996:23">success</name><operator pos:start="996:24" pos:end="996:25">++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <expr_stmt pos:start="1000:9" pos:end="1000:31"><expr pos:start="1000:9" pos:end="1000:30"><name pos:start="1000:9" pos:end="1000:20"><name pos:start="1000:9" pos:end="1000:11">ctx</name><operator pos:start="1000:12" pos:end="1000:13">-&gt;</operator><name pos:start="1000:14" pos:end="1000:20">keys_nr</name></name> <operator pos:start="1000:22" pos:end="1000:22">=</operator> <name pos:start="1000:24" pos:end="1000:30">success</name></expr>;</expr_stmt>

        <expr_stmt pos:start="1002:9" pos:end="1002:52"><expr pos:start="1002:9" pos:end="1002:51"><call pos:start="1002:9" pos:end="1002:51"><name pos:start="1002:9" pos:end="1002:32">AIRPDCAP_DEBUG_TRACE_END</name><argument_list pos:start="1002:33" pos:end="1002:51">(<argument pos:start="1002:34" pos:end="1002:50"><expr pos:start="1002:34" pos:end="1002:50"><literal type="string" pos:start="1002:34" pos:end="1002:50">"AirPDcapSetKeys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1003:9" pos:end="1003:23">return <expr pos:start="1003:16" pos:end="1003:22"><name pos:start="1003:16" pos:end="1003:22">success</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="1006:5" pos:end="1025:5"><type pos:start="1006:5" pos:end="1006:15"><specifier pos:start="1006:5" pos:end="1006:10">static</specifier> <name pos:start="1006:12" pos:end="1006:15">void</name></type>
    <name pos:start="1007:5" pos:end="1007:21">AirPDcapCleanKeys</name><parameter_list pos:start="1007:22" pos:end="1008:30">(
        <parameter pos:start="1008:9" pos:end="1008:29"><decl pos:start="1008:9" pos:end="1008:29"><type pos:start="1008:9" pos:end="1008:25"><name pos:start="1008:9" pos:end="1008:25">PAIRPDCAP_CONTEXT</name></type> <name pos:start="1008:27" pos:end="1008:29">ctx</name></decl></parameter>)</parameter_list>
    <block pos:start="1009:5" pos:end="1025:5">{<block_content pos:start="1010:9" pos:end="1024:54">
        <expr_stmt pos:start="1010:9" pos:end="1010:56"><expr pos:start="1010:9" pos:end="1010:55"><call pos:start="1010:9" pos:end="1010:55"><name pos:start="1010:9" pos:end="1010:34">AIRPDCAP_DEBUG_TRACE_START</name><argument_list pos:start="1010:35" pos:end="1010:55">(<argument pos:start="1010:36" pos:end="1010:54"><expr pos:start="1010:36" pos:end="1010:54"><literal type="string" pos:start="1010:36" pos:end="1010:54">"AirPDcapCleanKeys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1012:9" pos:end="1017:9"><if pos:start="1012:9" pos:end="1017:9">if <condition pos:start="1012:12" pos:end="1012:24">(<expr pos:start="1012:13" pos:end="1012:23"><name pos:start="1012:13" pos:end="1012:15">ctx</name> <operator pos:start="1012:17" pos:end="1012:18">==</operator> <name pos:start="1012:20" pos:end="1012:23">NULL</name></expr>)</condition>
        <block pos:start="1013:9" pos:end="1017:9">{<block_content pos:start="1014:13" pos:end="1016:19">
            <expr_stmt pos:start="1014:13" pos:end="1014:99"><expr pos:start="1014:13" pos:end="1014:98"><call pos:start="1014:13" pos:end="1014:98"><name pos:start="1014:13" pos:end="1014:37">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1014:38" pos:end="1014:98">(<argument pos:start="1014:39" pos:end="1014:57"><expr pos:start="1014:39" pos:end="1014:57"><literal type="string" pos:start="1014:39" pos:end="1014:57">"AirPDcapCleanKeys"</literal></expr></argument>, <argument pos:start="1014:60" pos:end="1014:73"><expr pos:start="1014:60" pos:end="1014:73"><literal type="string" pos:start="1014:60" pos:end="1014:73">"NULL context"</literal></expr></argument>, <argument pos:start="1014:76" pos:end="1014:97"><expr pos:start="1014:76" pos:end="1014:97"><name pos:start="1014:76" pos:end="1014:97">AIRPDCAP_DEBUG_LEVEL_5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1015:13" pos:end="1015:58"><expr pos:start="1015:13" pos:end="1015:57"><call pos:start="1015:13" pos:end="1015:57"><name pos:start="1015:13" pos:end="1015:36">AIRPDCAP_DEBUG_TRACE_END</name><argument_list pos:start="1015:37" pos:end="1015:57">(<argument pos:start="1015:38" pos:end="1015:56"><expr pos:start="1015:38" pos:end="1015:56"><literal type="string" pos:start="1015:38" pos:end="1015:56">"AirPDcapCleanKeys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1016:13" pos:end="1016:19">return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="1019:9" pos:end="1019:79"><expr pos:start="1019:9" pos:end="1019:78"><call pos:start="1019:9" pos:end="1019:78"><name pos:start="1019:9" pos:end="1019:14">memset</name><argument_list pos:start="1019:15" pos:end="1019:78">(<argument pos:start="1019:16" pos:end="1019:24"><expr pos:start="1019:16" pos:end="1019:24"><name pos:start="1019:16" pos:end="1019:24"><name pos:start="1019:16" pos:end="1019:18">ctx</name><operator pos:start="1019:19" pos:end="1019:20">-&gt;</operator><name pos:start="1019:21" pos:end="1019:24">keys</name></name></expr></argument>, <argument pos:start="1019:27" pos:end="1019:27"><expr pos:start="1019:27" pos:end="1019:27"><literal type="number" pos:start="1019:27" pos:end="1019:27">0</literal></expr></argument>, <argument pos:start="1019:30" pos:end="1019:77"><expr pos:start="1019:30" pos:end="1019:77"><sizeof pos:start="1019:30" pos:end="1019:54">sizeof<argument_list pos:start="1019:36" pos:end="1019:54">(<argument pos:start="1019:37" pos:end="1019:53"><expr pos:start="1019:37" pos:end="1019:53"><name pos:start="1019:37" pos:end="1019:53">AIRPDCAP_KEY_ITEM</name></expr></argument>)</argument_list></sizeof> <operator pos:start="1019:56" pos:end="1019:56">*</operator> <name pos:start="1019:58" pos:end="1019:77">AIRPDCAP_MAX_KEYS_NR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1021:9" pos:end="1021:25"><expr pos:start="1021:9" pos:end="1021:24"><name pos:start="1021:9" pos:end="1021:20"><name pos:start="1021:9" pos:end="1021:11">ctx</name><operator pos:start="1021:12" pos:end="1021:13">-&gt;</operator><name pos:start="1021:14" pos:end="1021:20">keys_nr</name></name> <operator pos:start="1021:22" pos:end="1021:22">=</operator> <literal type="number" pos:start="1021:24" pos:end="1021:24">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1023:9" pos:end="1023:107"><expr pos:start="1023:9" pos:end="1023:106"><call pos:start="1023:9" pos:end="1023:106"><name pos:start="1023:9" pos:end="1023:33">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1023:34" pos:end="1023:106">(<argument pos:start="1023:35" pos:end="1023:53"><expr pos:start="1023:35" pos:end="1023:53"><literal type="string" pos:start="1023:35" pos:end="1023:53">"AirPDcapCleanKeys"</literal></expr></argument>, <argument pos:start="1023:56" pos:end="1023:81"><expr pos:start="1023:56" pos:end="1023:81"><literal type="string" pos:start="1023:56" pos:end="1023:81">"Keys collection cleaned!"</literal></expr></argument>, <argument pos:start="1023:84" pos:end="1023:105"><expr pos:start="1023:84" pos:end="1023:105"><name pos:start="1023:84" pos:end="1023:105">AIRPDCAP_DEBUG_LEVEL_5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1024:9" pos:end="1024:54"><expr pos:start="1024:9" pos:end="1024:53"><call pos:start="1024:9" pos:end="1024:53"><name pos:start="1024:9" pos:end="1024:32">AIRPDCAP_DEBUG_TRACE_END</name><argument_list pos:start="1024:33" pos:end="1024:53">(<argument pos:start="1024:34" pos:end="1024:52"><expr pos:start="1024:34" pos:end="1024:52"><literal type="string" pos:start="1024:34" pos:end="1024:52">"AirPDcapCleanKeys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function pos:start="1027:5" pos:end="1037:5"><type pos:start="1027:5" pos:end="1027:15"><specifier pos:start="1027:5" pos:end="1027:10">static</specifier> <name pos:start="1027:12" pos:end="1027:15">void</name></type>
    <name pos:start="1028:5" pos:end="1028:26">AirPDcapRecurseCleanSA</name><parameter_list pos:start="1028:27" pos:end="1029:37">(
        <parameter pos:start="1029:9" pos:end="1029:36"><decl pos:start="1029:9" pos:end="1029:36"><type pos:start="1029:9" pos:end="1029:33"><name pos:start="1029:9" pos:end="1029:33">PAIRPDCAP_SEC_ASSOCIATION</name></type> <name pos:start="1029:35" pos:end="1029:36">sa</name></decl></parameter>)</parameter_list>
    <block pos:start="1030:5" pos:end="1037:5">{<block_content pos:start="1031:9" pos:end="1036:9">
        <if_stmt pos:start="1031:9" pos:end="1036:9"><if pos:start="1031:9" pos:end="1036:9">if <condition pos:start="1031:12" pos:end="1031:29">(<expr pos:start="1031:13" pos:end="1031:28"><name pos:start="1031:13" pos:end="1031:20"><name pos:start="1031:13" pos:end="1031:14">sa</name><operator pos:start="1031:15" pos:end="1031:16">-&gt;</operator><name pos:start="1031:17" pos:end="1031:20">next</name></name> <operator pos:start="1031:22" pos:end="1031:23">!=</operator> <name pos:start="1031:25" pos:end="1031:28">NULL</name></expr>)</condition>
        <block pos:start="1032:9" pos:end="1036:9">{<block_content pos:start="1033:13" pos:end="1035:28">
            <expr_stmt pos:start="1033:13" pos:end="1033:45"><expr pos:start="1033:13" pos:end="1033:44"><call pos:start="1033:13" pos:end="1033:44"><name pos:start="1033:13" pos:end="1033:34">AirPDcapRecurseCleanSA</name><argument_list pos:start="1033:35" pos:end="1033:44">(<argument pos:start="1033:36" pos:end="1033:43"><expr pos:start="1033:36" pos:end="1033:43"><name pos:start="1033:36" pos:end="1033:43"><name pos:start="1033:36" pos:end="1033:37">sa</name><operator pos:start="1033:38" pos:end="1033:39">-&gt;</operator><name pos:start="1033:40" pos:end="1033:43">next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1034:13" pos:end="1034:29"><expr pos:start="1034:13" pos:end="1034:28"><call pos:start="1034:13" pos:end="1034:28"><name pos:start="1034:13" pos:end="1034:18">g_free</name><argument_list pos:start="1034:19" pos:end="1034:28">(<argument pos:start="1034:20" pos:end="1034:27"><expr pos:start="1034:20" pos:end="1034:27"><name pos:start="1034:20" pos:end="1034:27"><name pos:start="1034:20" pos:end="1034:21">sa</name><operator pos:start="1034:22" pos:end="1034:23">-&gt;</operator><name pos:start="1034:24" pos:end="1034:27">next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1035:13" pos:end="1035:28"><expr pos:start="1035:13" pos:end="1035:27"><name pos:start="1035:13" pos:end="1035:20"><name pos:start="1035:13" pos:end="1035:14">sa</name><operator pos:start="1035:15" pos:end="1035:16">-&gt;</operator><name pos:start="1035:17" pos:end="1035:20">next</name></name> <operator pos:start="1035:22" pos:end="1035:22">=</operator> <name pos:start="1035:24" pos:end="1035:27">NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function pos:start="1039:5" pos:end="1051:5"><type pos:start="1039:5" pos:end="1039:15"><specifier pos:start="1039:5" pos:end="1039:10">static</specifier> <name pos:start="1039:12" pos:end="1039:15">void</name></type>
    <name pos:start="1040:5" pos:end="1040:25">AirPDcapCleanSecAssoc</name><parameter_list pos:start="1040:26" pos:end="1041:30">(
        <parameter pos:start="1041:9" pos:end="1041:29"><decl pos:start="1041:9" pos:end="1041:29"><type pos:start="1041:9" pos:end="1041:25"><name pos:start="1041:9" pos:end="1041:25">PAIRPDCAP_CONTEXT</name></type> <name pos:start="1041:27" pos:end="1041:29">ctx</name></decl></parameter>)</parameter_list>
    <block pos:start="1042:5" pos:end="1051:5">{<block_content pos:start="1043:9" pos:end="1050:9">
        <decl_stmt pos:start="1043:9" pos:end="1043:38"><decl pos:start="1043:9" pos:end="1043:37"><type pos:start="1043:9" pos:end="1043:33"><name pos:start="1043:9" pos:end="1043:33">PAIRPDCAP_SEC_ASSOCIATION</name></type> <name pos:start="1043:35" pos:end="1043:37">psa</name></decl>;</decl_stmt>
        <decl_stmt pos:start="1044:9" pos:end="1044:14"><decl pos:start="1044:9" pos:end="1044:13"><type pos:start="1044:9" pos:end="1044:11"><name pos:start="1044:9" pos:end="1044:11">int</name></type> <name pos:start="1044:13" pos:end="1044:13">i</name></decl>;</decl_stmt>

        <for pos:start="1046:9" pos:end="1050:9">for <control pos:start="1046:13" pos:end="1046:84">(<init pos:start="1046:14" pos:end="1046:34"><expr pos:start="1046:14" pos:end="1046:26"><name pos:start="1046:14" pos:end="1046:16">psa</name> <operator pos:start="1046:18" pos:end="1046:18">=</operator> <name pos:start="1046:20" pos:end="1046:26"><name pos:start="1046:20" pos:end="1046:22">ctx</name><operator pos:start="1046:23" pos:end="1046:24">-&gt;</operator><name pos:start="1046:25" pos:end="1046:26">sa</name></name></expr><operator pos:start="1046:27" pos:end="1046:27">,</operator> <expr pos:start="1046:29" pos:end="1046:33"><name pos:start="1046:29" pos:end="1046:29">i</name> <operator pos:start="1046:31" pos:end="1046:31">=</operator> <literal type="number" pos:start="1046:33" pos:end="1046:33">0</literal></expr>;</init> <condition pos:start="1046:36" pos:end="1046:72"><expr pos:start="1046:36" pos:end="1046:71"><name pos:start="1046:36" pos:end="1046:36">i</name> <operator pos:start="1046:38" pos:end="1046:38">&lt;</operator> <name pos:start="1046:40" pos:end="1046:71">AIRPDCAP_MAX_SEC_ASSOCIATIONS_NR</name></expr>;</condition> <incr pos:start="1046:74" pos:end="1046:83"><expr pos:start="1046:74" pos:end="1046:76"><name pos:start="1046:74" pos:end="1046:74">i</name><operator pos:start="1046:75" pos:end="1046:76">++</operator></expr><operator pos:start="1046:77" pos:end="1046:77">,</operator> <expr pos:start="1046:79" pos:end="1046:83"><name pos:start="1046:79" pos:end="1046:81">psa</name><operator pos:start="1046:82" pos:end="1046:83">++</operator></expr></incr>)</control>
        <block pos:start="1047:9" pos:end="1050:9">{<block_content pos:start="1049:13" pos:end="1049:40">
            <comment type="block" pos:start="1048:13" pos:end="1048:57">/* To iterate is human, to recurse, divine */</comment>
            <expr_stmt pos:start="1049:13" pos:end="1049:40"><expr pos:start="1049:13" pos:end="1049:39"><call pos:start="1049:13" pos:end="1049:39"><name pos:start="1049:13" pos:end="1049:34">AirPDcapRecurseCleanSA</name><argument_list pos:start="1049:35" pos:end="1049:39">(<argument pos:start="1049:36" pos:end="1049:38"><expr pos:start="1049:36" pos:end="1049:38"><name pos:start="1049:36" pos:end="1049:38">psa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function pos:start="1053:5" pos:end="1086:5"><type pos:start="1053:5" pos:end="1053:7"><name pos:start="1053:5" pos:end="1053:7">INT</name></type> <name pos:start="1053:9" pos:end="1053:23">AirPDcapGetKeys</name><parameter_list pos:start="1053:24" pos:end="1056:29">(
        <parameter pos:start="1054:9" pos:end="1054:35"><decl pos:start="1054:9" pos:end="1054:35"><type pos:start="1054:9" pos:end="1054:35"><specifier pos:start="1054:9" pos:end="1054:13">const</specifier> <name pos:start="1054:15" pos:end="1054:31">PAIRPDCAP_CONTEXT</name></type> <name pos:start="1054:33" pos:end="1054:35">ctx</name></decl></parameter>,
        <parameter pos:start="1055:9" pos:end="1055:32"><decl pos:start="1055:9" pos:end="1055:32"><type pos:start="1055:9" pos:end="1055:30"><name pos:start="1055:9" pos:end="1055:25">AIRPDCAP_KEY_ITEM</name></type> <name pos:start="1055:27" pos:end="1055:32"><name pos:start="1055:27" pos:end="1055:30">keys</name><index pos:start="1055:31" pos:end="1055:32">[]</index></name></decl></parameter>,
        <parameter pos:start="1056:9" pos:end="1056:28"><decl pos:start="1056:9" pos:end="1056:28"><type pos:start="1056:9" pos:end="1056:28"><specifier pos:start="1056:9" pos:end="1056:13">const</specifier> <name pos:start="1056:15" pos:end="1056:20">size_t</name></type> <name pos:start="1056:22" pos:end="1056:28">keys_nr</name></decl></parameter>)</parameter_list>
    <block pos:start="1057:5" pos:end="1086:5">{<block_content pos:start="1058:9" pos:end="1085:9">
        <decl_stmt pos:start="1058:9" pos:end="1058:15"><decl pos:start="1058:9" pos:end="1058:14"><type pos:start="1058:9" pos:end="1058:12"><name pos:start="1058:9" pos:end="1058:12">UINT</name></type> <name pos:start="1058:14" pos:end="1058:14">i</name></decl>;</decl_stmt>
        <decl_stmt pos:start="1059:9" pos:end="1059:15"><decl pos:start="1059:9" pos:end="1059:14"><type pos:start="1059:9" pos:end="1059:12"><name pos:start="1059:9" pos:end="1059:12">UINT</name></type> <name pos:start="1059:14" pos:end="1059:14">j</name></decl>;</decl_stmt>
        <expr_stmt pos:start="1060:9" pos:end="1060:54"><expr pos:start="1060:9" pos:end="1060:53"><call pos:start="1060:9" pos:end="1060:53"><name pos:start="1060:9" pos:end="1060:34">AIRPDCAP_DEBUG_TRACE_START</name><argument_list pos:start="1060:35" pos:end="1060:53">(<argument pos:start="1060:36" pos:end="1060:52"><expr pos:start="1060:36" pos:end="1060:52"><literal type="string" pos:start="1060:36" pos:end="1060:52">"AirPDcapGetKeys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1062:9" pos:end="1085:9"><if pos:start="1062:9" pos:end="1067:9">if <condition pos:start="1062:12" pos:end="1062:24">(<expr pos:start="1062:13" pos:end="1062:23"><name pos:start="1062:13" pos:end="1062:15">ctx</name> <operator pos:start="1062:17" pos:end="1062:18">==</operator> <name pos:start="1062:20" pos:end="1062:23">NULL</name></expr>)</condition>
        <block pos:start="1063:9" pos:end="1067:9">{<block_content pos:start="1064:13" pos:end="1066:21">
            <expr_stmt pos:start="1064:13" pos:end="1064:97"><expr pos:start="1064:13" pos:end="1064:96"><call pos:start="1064:13" pos:end="1064:96"><name pos:start="1064:13" pos:end="1064:37">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1064:38" pos:end="1064:96">(<argument pos:start="1064:39" pos:end="1064:55"><expr pos:start="1064:39" pos:end="1064:55"><literal type="string" pos:start="1064:39" pos:end="1064:55">"AirPDcapGetKeys"</literal></expr></argument>, <argument pos:start="1064:58" pos:end="1064:71"><expr pos:start="1064:58" pos:end="1064:71"><literal type="string" pos:start="1064:58" pos:end="1064:71">"NULL context"</literal></expr></argument>, <argument pos:start="1064:74" pos:end="1064:95"><expr pos:start="1064:74" pos:end="1064:95"><name pos:start="1064:74" pos:end="1064:95">AIRPDCAP_DEBUG_LEVEL_5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1065:13" pos:end="1065:56"><expr pos:start="1065:13" pos:end="1065:55"><call pos:start="1065:13" pos:end="1065:55"><name pos:start="1065:13" pos:end="1065:36">AIRPDCAP_DEBUG_TRACE_END</name><argument_list pos:start="1065:37" pos:end="1065:55">(<argument pos:start="1065:38" pos:end="1065:54"><expr pos:start="1065:38" pos:end="1065:54"><literal type="string" pos:start="1065:38" pos:end="1065:54">"AirPDcapGetKeys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1066:13" pos:end="1066:21">return <expr pos:start="1066:20" pos:end="1066:20"><literal type="number" pos:start="1066:20" pos:end="1066:20">0</literal></expr>;</return>
        </block_content>}</block></if>
        <if type="elseif" pos:start="1068:9" pos:end="1073:9">else if <condition pos:start="1068:17" pos:end="1068:30">(<expr pos:start="1068:18" pos:end="1068:29"><name pos:start="1068:18" pos:end="1068:21">keys</name> <operator pos:start="1068:23" pos:end="1068:24">==</operator> <name pos:start="1068:26" pos:end="1068:29">NULL</name></expr>)</condition>
        <block pos:start="1069:9" pos:end="1073:9">{<block_content pos:start="1070:13" pos:end="1072:37">
            <expr_stmt pos:start="1070:13" pos:end="1070:100"><expr pos:start="1070:13" pos:end="1070:99"><call pos:start="1070:13" pos:end="1070:99"><name pos:start="1070:13" pos:end="1070:37">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1070:38" pos:end="1070:99">(<argument pos:start="1070:39" pos:end="1070:55"><expr pos:start="1070:39" pos:end="1070:55"><literal type="string" pos:start="1070:39" pos:end="1070:55">"AirPDcapGetKeys"</literal></expr></argument>, <argument pos:start="1070:58" pos:end="1070:74"><expr pos:start="1070:58" pos:end="1070:74"><literal type="string" pos:start="1070:58" pos:end="1070:74">"NULL keys array"</literal></expr></argument>, <argument pos:start="1070:77" pos:end="1070:98"><expr pos:start="1070:77" pos:end="1070:98"><name pos:start="1070:77" pos:end="1070:98">AIRPDCAP_DEBUG_LEVEL_5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1071:13" pos:end="1071:56"><expr pos:start="1071:13" pos:end="1071:55"><call pos:start="1071:13" pos:end="1071:55"><name pos:start="1071:13" pos:end="1071:36">AIRPDCAP_DEBUG_TRACE_END</name><argument_list pos:start="1071:37" pos:end="1071:55">(<argument pos:start="1071:38" pos:end="1071:54"><expr pos:start="1071:38" pos:end="1071:54"><literal type="string" pos:start="1071:38" pos:end="1071:54">"AirPDcapGetKeys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1072:13" pos:end="1072:37">return <expr pos:start="1072:20" pos:end="1072:36"><operator pos:start="1072:20" pos:end="1072:20">(</operator><name pos:start="1072:21" pos:end="1072:23">INT</name><operator pos:start="1072:24" pos:end="1072:24">)</operator><name pos:start="1072:25" pos:end="1072:36"><name pos:start="1072:25" pos:end="1072:27">ctx</name><operator pos:start="1072:28" pos:end="1072:29">-&gt;</operator><name pos:start="1072:30" pos:end="1072:36">keys_nr</name></name></expr>;</return>
        </block_content>}</block></if>
        <else pos:start="1074:9" pos:end="1085:9">else
        <block pos:start="1075:9" pos:end="1085:9">{<block_content pos:start="1076:13" pos:end="1084:21">
            <for pos:start="1076:13" pos:end="1081:13">for <control pos:start="1076:17" pos:end="1076:96">(<init pos:start="1076:18" pos:end="1076:30"><expr pos:start="1076:18" pos:end="1076:22"><name pos:start="1076:18" pos:end="1076:18">i</name> <operator pos:start="1076:20" pos:end="1076:20">=</operator> <literal type="number" pos:start="1076:22" pos:end="1076:22">0</literal></expr><operator pos:start="1076:23" pos:end="1076:23">,</operator> <expr pos:start="1076:25" pos:end="1076:29"><name pos:start="1076:25" pos:end="1076:25">j</name> <operator pos:start="1076:27" pos:end="1076:27">=</operator> <literal type="number" pos:start="1076:29" pos:end="1076:29">0</literal></expr>;</init> <condition pos:start="1076:32" pos:end="1076:91"><expr pos:start="1076:32" pos:end="1076:90"><name pos:start="1076:32" pos:end="1076:32">i</name> <operator pos:start="1076:34" pos:end="1076:34">&lt;</operator> <name pos:start="1076:36" pos:end="1076:47"><name pos:start="1076:36" pos:end="1076:38">ctx</name><operator pos:start="1076:39" pos:end="1076:40">-&gt;</operator><name pos:start="1076:41" pos:end="1076:47">keys_nr</name></name> <operator pos:start="1076:49" pos:end="1076:50">&amp;&amp;</operator> <name pos:start="1076:52" pos:end="1076:52">i</name> <operator pos:start="1076:54" pos:end="1076:54">&lt;</operator> <name pos:start="1076:56" pos:end="1076:62">keys_nr</name> <operator pos:start="1076:64" pos:end="1076:65">&amp;&amp;</operator> <name pos:start="1076:67" pos:end="1076:67">i</name> <operator pos:start="1076:69" pos:end="1076:69">&lt;</operator> <name pos:start="1076:71" pos:end="1076:90">AIRPDCAP_MAX_KEYS_NR</name></expr>;</condition> <incr pos:start="1076:93" pos:end="1076:95"><expr pos:start="1076:93" pos:end="1076:95"><name pos:start="1076:93" pos:end="1076:93">i</name><operator pos:start="1076:94" pos:end="1076:95">++</operator></expr></incr>)</control>
            <block pos:start="1077:13" pos:end="1081:13">{<block_content pos:start="1078:17" pos:end="1080:98">
                <expr_stmt pos:start="1078:17" pos:end="1078:65"><expr pos:start="1078:17" pos:end="1078:64"><call pos:start="1078:17" pos:end="1078:64"><name pos:start="1078:17" pos:end="1078:22">memcpy</name><argument_list pos:start="1078:23" pos:end="1078:64">(<argument pos:start="1078:24" pos:end="1078:31"><expr pos:start="1078:24" pos:end="1078:31"><operator pos:start="1078:24" pos:end="1078:24">&amp;</operator><name pos:start="1078:25" pos:end="1078:31"><name pos:start="1078:25" pos:end="1078:28">keys</name><index pos:start="1078:29" pos:end="1078:31">[<expr pos:start="1078:30" pos:end="1078:30"><name pos:start="1078:30" pos:end="1078:30">j</name></expr>]</index></name></expr></argument>, <argument pos:start="1078:34" pos:end="1078:46"><expr pos:start="1078:34" pos:end="1078:46"><operator pos:start="1078:34" pos:end="1078:34">&amp;</operator><name pos:start="1078:35" pos:end="1078:46"><name pos:start="1078:35" pos:end="1078:37">ctx</name><operator pos:start="1078:38" pos:end="1078:39">-&gt;</operator><name pos:start="1078:40" pos:end="1078:43">keys</name><index pos:start="1078:44" pos:end="1078:46">[<expr pos:start="1078:45" pos:end="1078:45"><name pos:start="1078:45" pos:end="1078:45">i</name></expr>]</index></name></expr></argument>, <argument pos:start="1078:49" pos:end="1078:63"><expr pos:start="1078:49" pos:end="1078:63"><sizeof pos:start="1078:49" pos:end="1078:63">sizeof<argument_list pos:start="1078:55" pos:end="1078:63">(<argument pos:start="1078:56" pos:end="1078:62"><expr pos:start="1078:56" pos:end="1078:62"><name pos:start="1078:56" pos:end="1078:62"><name pos:start="1078:56" pos:end="1078:59">keys</name><index pos:start="1078:60" pos:end="1078:62">[<expr pos:start="1078:61" pos:end="1078:61"><name pos:start="1078:61" pos:end="1078:61">j</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1079:17" pos:end="1079:20"><expr pos:start="1079:17" pos:end="1079:19"><name pos:start="1079:17" pos:end="1079:17">j</name><operator pos:start="1079:18" pos:end="1079:19">++</operator></expr>;</expr_stmt>
                <expr_stmt pos:start="1080:17" pos:end="1080:98"><expr pos:start="1080:17" pos:end="1080:97"><call pos:start="1080:17" pos:end="1080:97"><name pos:start="1080:17" pos:end="1080:41">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1080:42" pos:end="1080:97">(<argument pos:start="1080:43" pos:end="1080:59"><expr pos:start="1080:43" pos:end="1080:59"><literal type="string" pos:start="1080:43" pos:end="1080:59">"AirPDcapGetKeys"</literal></expr></argument>, <argument pos:start="1080:62" pos:end="1080:72"><expr pos:start="1080:62" pos:end="1080:72"><literal type="string" pos:start="1080:62" pos:end="1080:72">"Got a key"</literal></expr></argument>, <argument pos:start="1080:75" pos:end="1080:96"><expr pos:start="1080:75" pos:end="1080:96"><name pos:start="1080:75" pos:end="1080:96">AIRPDCAP_DEBUG_LEVEL_5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <expr_stmt pos:start="1083:13" pos:end="1083:56"><expr pos:start="1083:13" pos:end="1083:55"><call pos:start="1083:13" pos:end="1083:55"><name pos:start="1083:13" pos:end="1083:36">AIRPDCAP_DEBUG_TRACE_END</name><argument_list pos:start="1083:37" pos:end="1083:55">(<argument pos:start="1083:38" pos:end="1083:54"><expr pos:start="1083:38" pos:end="1083:54"><literal type="string" pos:start="1083:38" pos:end="1083:54">"AirPDcapGetKeys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1084:13" pos:end="1084:21">return <expr pos:start="1084:20" pos:end="1084:20"><name pos:start="1084:20" pos:end="1084:20">j</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" pos:start="1088:5" pos:end="1093:7">/*
     * XXX - This won't be reliable if a packet containing SSID "B" shows
     * up in the middle of a 4-way handshake for SSID "A".
     * We should probably use a small array or hash table to keep multiple
     * SSIDs.
     */</comment>
    <function pos:start="1094:5" pos:end="1106:5"><type pos:start="1094:5" pos:end="1094:7"><name pos:start="1094:5" pos:end="1094:7">INT</name></type> <name pos:start="1094:9" pos:end="1094:27">AirPDcapSetLastSSID</name><parameter_list pos:start="1094:28" pos:end="1097:28">(
        <parameter pos:start="1095:9" pos:end="1095:29"><decl pos:start="1095:9" pos:end="1095:29"><type pos:start="1095:9" pos:end="1095:29"><name pos:start="1095:9" pos:end="1095:25">PAIRPDCAP_CONTEXT</name></type> <name pos:start="1095:27" pos:end="1095:29">ctx</name></decl></parameter>,
        <parameter pos:start="1096:9" pos:end="1096:22"><decl pos:start="1096:9" pos:end="1096:22"><type pos:start="1096:9" pos:end="1096:22"><name pos:start="1096:9" pos:end="1096:12">CHAR</name> <modifier pos:start="1096:14" pos:end="1096:14">*</modifier></type><name pos:start="1096:15" pos:end="1096:22">pkt_ssid</name></decl></parameter>,
        <parameter pos:start="1097:9" pos:end="1097:27"><decl pos:start="1097:9" pos:end="1097:27"><type pos:start="1097:9" pos:end="1097:27"><name pos:start="1097:9" pos:end="1097:14">size_t</name></type> <name pos:start="1097:16" pos:end="1097:27">pkt_ssid_len</name></decl></parameter>)</parameter_list>
    <block pos:start="1098:5" pos:end="1106:5">{<block_content pos:start="1099:9" pos:end="1105:36">
        <if_stmt pos:start="1099:9" pos:end="1100:42"><if pos:start="1099:9" pos:end="1100:42">if <condition pos:start="1099:12" pos:end="1099:86">(<expr pos:start="1099:13" pos:end="1099:85"><operator pos:start="1099:13" pos:end="1099:13">!</operator><name pos:start="1099:14" pos:end="1099:16">ctx</name> <operator pos:start="1099:18" pos:end="1099:19">||</operator> <operator pos:start="1099:21" pos:end="1099:21">!</operator><name pos:start="1099:22" pos:end="1099:29">pkt_ssid</name> <operator pos:start="1099:31" pos:end="1099:32">||</operator> <name pos:start="1099:34" pos:end="1099:67"><name pos:start="1099:34" pos:end="1099:45">pkt_ssid_len</name> <argument_list type="generic" pos:start="1099:47" pos:end="1099:67">&lt; <argument pos:start="1099:49" pos:end="1099:65"><expr pos:start="1099:49" pos:end="1099:65"><literal type="number" pos:start="1099:49" pos:end="1099:49">1</literal> <operator pos:start="1099:51" pos:end="1099:52">||</operator> <name pos:start="1099:54" pos:end="1099:65">pkt_ssid_len</name></expr></argument> &gt;</argument_list></name> <name pos:start="1099:69" pos:end="1099:85">WPA_SSID_MAX_SIZE</name></expr>)</condition><block type="pseudo" pos:start="1100:13" pos:end="1100:42"><block_content pos:start="1100:13" pos:end="1100:42">
            <return pos:start="1100:13" pos:end="1100:42">return <expr pos:start="1100:20" pos:end="1100:41"><name pos:start="1100:20" pos:end="1100:41">AIRPDCAP_RET_UNSUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1102:9" pos:end="1102:54"><expr pos:start="1102:9" pos:end="1102:53"><call pos:start="1102:9" pos:end="1102:53"><name pos:start="1102:9" pos:end="1102:14">memcpy</name><argument_list pos:start="1102:15" pos:end="1102:53">(<argument pos:start="1102:16" pos:end="1102:28"><expr pos:start="1102:16" pos:end="1102:28"><name pos:start="1102:16" pos:end="1102:28"><name pos:start="1102:16" pos:end="1102:18">ctx</name><operator pos:start="1102:19" pos:end="1102:20">-&gt;</operator><name pos:start="1102:21" pos:end="1102:28">pkt_ssid</name></name></expr></argument>, <argument pos:start="1102:31" pos:end="1102:38"><expr pos:start="1102:31" pos:end="1102:38"><name pos:start="1102:31" pos:end="1102:38">pkt_ssid</name></expr></argument>, <argument pos:start="1102:41" pos:end="1102:52"><expr pos:start="1102:41" pos:end="1102:52"><name pos:start="1102:41" pos:end="1102:52">pkt_ssid_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1103:9" pos:end="1103:41"><expr pos:start="1103:9" pos:end="1103:40"><name pos:start="1103:9" pos:end="1103:25"><name pos:start="1103:9" pos:end="1103:11">ctx</name><operator pos:start="1103:12" pos:end="1103:13">-&gt;</operator><name pos:start="1103:14" pos:end="1103:25">pkt_ssid_len</name></name> <operator pos:start="1103:27" pos:end="1103:27">=</operator> <name pos:start="1103:29" pos:end="1103:40">pkt_ssid_len</name></expr>;</expr_stmt>

        <return pos:start="1105:9" pos:end="1105:36">return <expr pos:start="1105:16" pos:end="1105:35"><name pos:start="1105:16" pos:end="1105:35">AIRPDCAP_RET_SUCCESS</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="1108:5" pos:end="1132:5"><type pos:start="1108:5" pos:end="1108:7"><name pos:start="1108:5" pos:end="1108:7">INT</name></type> <name pos:start="1108:9" pos:end="1108:27">AirPDcapInitContext</name><parameter_list pos:start="1108:28" pos:end="1109:30">(
        <parameter pos:start="1109:9" pos:end="1109:29"><decl pos:start="1109:9" pos:end="1109:29"><type pos:start="1109:9" pos:end="1109:25"><name pos:start="1109:9" pos:end="1109:25">PAIRPDCAP_CONTEXT</name></type> <name pos:start="1109:27" pos:end="1109:29">ctx</name></decl></parameter>)</parameter_list>
    <block pos:start="1110:5" pos:end="1132:5">{<block_content pos:start="1111:9" pos:end="1131:36">
        <expr_stmt pos:start="1111:9" pos:end="1111:58"><expr pos:start="1111:9" pos:end="1111:57"><call pos:start="1111:9" pos:end="1111:57"><name pos:start="1111:9" pos:end="1111:34">AIRPDCAP_DEBUG_TRACE_START</name><argument_list pos:start="1111:35" pos:end="1111:57">(<argument pos:start="1111:36" pos:end="1111:56"><expr pos:start="1111:36" pos:end="1111:56"><literal type="string" pos:start="1111:36" pos:end="1111:56">"AirPDcapInitContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1113:9" pos:end="1118:9"><if pos:start="1113:9" pos:end="1118:9">if <condition pos:start="1113:12" pos:end="1113:24">(<expr pos:start="1113:13" pos:end="1113:23"><name pos:start="1113:13" pos:end="1113:15">ctx</name> <operator pos:start="1113:17" pos:end="1113:18">==</operator> <name pos:start="1113:20" pos:end="1113:23">NULL</name></expr>)</condition>
        <block pos:start="1114:9" pos:end="1118:9">{<block_content pos:start="1115:13" pos:end="1117:42">
            <expr_stmt pos:start="1115:13" pos:end="1115:101"><expr pos:start="1115:13" pos:end="1115:100"><call pos:start="1115:13" pos:end="1115:100"><name pos:start="1115:13" pos:end="1115:37">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1115:38" pos:end="1115:100">(<argument pos:start="1115:39" pos:end="1115:59"><expr pos:start="1115:39" pos:end="1115:59"><literal type="string" pos:start="1115:39" pos:end="1115:59">"AirPDcapInitContext"</literal></expr></argument>, <argument pos:start="1115:62" pos:end="1115:75"><expr pos:start="1115:62" pos:end="1115:75"><literal type="string" pos:start="1115:62" pos:end="1115:75">"NULL context"</literal></expr></argument>, <argument pos:start="1115:78" pos:end="1115:99"><expr pos:start="1115:78" pos:end="1115:99"><name pos:start="1115:78" pos:end="1115:99">AIRPDCAP_DEBUG_LEVEL_5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1116:13" pos:end="1116:60"><expr pos:start="1116:13" pos:end="1116:59"><call pos:start="1116:13" pos:end="1116:59"><name pos:start="1116:13" pos:end="1116:36">AIRPDCAP_DEBUG_TRACE_END</name><argument_list pos:start="1116:37" pos:end="1116:59">(<argument pos:start="1116:38" pos:end="1116:58"><expr pos:start="1116:38" pos:end="1116:58"><literal type="string" pos:start="1116:38" pos:end="1116:58">"AirPDcapInitContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1117:13" pos:end="1117:42">return <expr pos:start="1117:20" pos:end="1117:41"><name pos:start="1117:20" pos:end="1117:41">AIRPDCAP_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="1120:9" pos:end="1120:31"><expr pos:start="1120:9" pos:end="1120:30"><call pos:start="1120:9" pos:end="1120:30"><name pos:start="1120:9" pos:end="1120:25">AirPDcapCleanKeys</name><argument_list pos:start="1120:26" pos:end="1120:30">(<argument pos:start="1120:27" pos:end="1120:29"><expr pos:start="1120:27" pos:end="1120:29"><name pos:start="1120:27" pos:end="1120:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1122:9" pos:end="1122:34"><expr pos:start="1122:9" pos:end="1122:33"><name pos:start="1122:9" pos:end="1122:29"><name pos:start="1122:9" pos:end="1122:11">ctx</name><operator pos:start="1122:12" pos:end="1122:13">-&gt;</operator><name pos:start="1122:14" pos:end="1122:29">first_free_index</name></name> <operator pos:start="1122:31" pos:end="1122:31">=</operator> <literal type="number" pos:start="1122:33" pos:end="1122:33">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1123:9" pos:end="1123:24"><expr pos:start="1123:9" pos:end="1123:23"><name pos:start="1123:9" pos:end="1123:18"><name pos:start="1123:9" pos:end="1123:11">ctx</name><operator pos:start="1123:12" pos:end="1123:13">-&gt;</operator><name pos:start="1123:14" pos:end="1123:18">index</name></name> <operator pos:start="1123:20" pos:end="1123:20">=</operator> <operator pos:start="1123:22" pos:end="1123:22">-</operator><literal type="number" pos:start="1123:23" pos:end="1123:23">1</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1124:9" pos:end="1124:27"><expr pos:start="1124:9" pos:end="1124:26"><name pos:start="1124:9" pos:end="1124:21"><name pos:start="1124:9" pos:end="1124:11">ctx</name><operator pos:start="1124:12" pos:end="1124:13">-&gt;</operator><name pos:start="1124:14" pos:end="1124:21">sa_index</name></name> <operator pos:start="1124:23" pos:end="1124:23">=</operator> <operator pos:start="1124:25" pos:end="1124:25">-</operator><literal type="number" pos:start="1124:26" pos:end="1124:26">1</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1125:9" pos:end="1125:30"><expr pos:start="1125:9" pos:end="1125:29"><name pos:start="1125:9" pos:end="1125:25"><name pos:start="1125:9" pos:end="1125:11">ctx</name><operator pos:start="1125:12" pos:end="1125:13">-&gt;</operator><name pos:start="1125:14" pos:end="1125:25">pkt_ssid_len</name></name> <operator pos:start="1125:27" pos:end="1125:27">=</operator> <literal type="number" pos:start="1125:29" pos:end="1125:29">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1127:9" pos:end="1127:96"><expr pos:start="1127:9" pos:end="1127:95"><call pos:start="1127:9" pos:end="1127:95"><name pos:start="1127:9" pos:end="1127:14">memset</name><argument_list pos:start="1127:15" pos:end="1127:95">(<argument pos:start="1127:16" pos:end="1127:22"><expr pos:start="1127:16" pos:end="1127:22"><name pos:start="1127:16" pos:end="1127:22"><name pos:start="1127:16" pos:end="1127:18">ctx</name><operator pos:start="1127:19" pos:end="1127:20">-&gt;</operator><name pos:start="1127:21" pos:end="1127:22">sa</name></name></expr></argument>, <argument pos:start="1127:25" pos:end="1127:25"><expr pos:start="1127:25" pos:end="1127:25"><literal type="number" pos:start="1127:25" pos:end="1127:25">0</literal></expr></argument>, <argument pos:start="1127:28" pos:end="1127:94"><expr pos:start="1127:28" pos:end="1127:94"><name pos:start="1127:28" pos:end="1127:59">AIRPDCAP_MAX_SEC_ASSOCIATIONS_NR</name> <operator pos:start="1127:61" pos:end="1127:61">*</operator> <sizeof pos:start="1127:63" pos:end="1127:94">sizeof<argument_list pos:start="1127:69" pos:end="1127:94">(<argument pos:start="1127:70" pos:end="1127:93"><expr pos:start="1127:70" pos:end="1127:93"><name pos:start="1127:70" pos:end="1127:93">AIRPDCAP_SEC_ASSOCIATION</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1129:9" pos:end="1129:105"><expr pos:start="1129:9" pos:end="1129:104"><call pos:start="1129:9" pos:end="1129:104"><name pos:start="1129:9" pos:end="1129:33">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1129:34" pos:end="1129:104">(<argument pos:start="1129:35" pos:end="1129:55"><expr pos:start="1129:35" pos:end="1129:55"><literal type="string" pos:start="1129:35" pos:end="1129:55">"AirPDcapInitContext"</literal></expr></argument>, <argument pos:start="1129:58" pos:end="1129:79"><expr pos:start="1129:58" pos:end="1129:79"><literal type="string" pos:start="1129:58" pos:end="1129:79">"Context initialized!"</literal></expr></argument>, <argument pos:start="1129:82" pos:end="1129:103"><expr pos:start="1129:82" pos:end="1129:103"><name pos:start="1129:82" pos:end="1129:103">AIRPDCAP_DEBUG_LEVEL_5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1130:9" pos:end="1130:56"><expr pos:start="1130:9" pos:end="1130:55"><call pos:start="1130:9" pos:end="1130:55"><name pos:start="1130:9" pos:end="1130:32">AIRPDCAP_DEBUG_TRACE_END</name><argument_list pos:start="1130:33" pos:end="1130:55">(<argument pos:start="1130:34" pos:end="1130:54"><expr pos:start="1130:34" pos:end="1130:54"><literal type="string" pos:start="1130:34" pos:end="1130:54">"AirPDcapInitContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1131:9" pos:end="1131:36">return <expr pos:start="1131:16" pos:end="1131:35"><name pos:start="1131:16" pos:end="1131:35">AIRPDCAP_RET_SUCCESS</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="1134:5" pos:end="1159:0"><type pos:start="1134:5" pos:end="1134:7"><name pos:start="1134:5" pos:end="1134:7">INT</name></type> <name pos:start="1134:9" pos:end="1134:30">AirPDcapDestroyContext</name><parameter_list pos:start="1134:31" pos:end="1135:30">(
        <parameter pos:start="1135:9" pos:end="1135:29"><decl pos:start="1135:9" pos:end="1135:29"><type pos:start="1135:9" pos:end="1135:25"><name pos:start="1135:9" pos:end="1135:25">PAIRPDCAP_CONTEXT</name></type> <name pos:start="1135:27" pos:end="1135:29">ctx</name></decl></parameter>)</parameter_list>
    <block pos:start="1136:5" pos:end="1159:0">{<block_content pos:start="1137:9" pos:end="1155:36">
        <expr_stmt pos:start="1137:9" pos:end="1137:61"><expr pos:start="1137:9" pos:end="1137:60"><call pos:start="1137:9" pos:end="1137:60"><name pos:start="1137:9" pos:end="1137:34">AIRPDCAP_DEBUG_TRACE_START</name><argument_list pos:start="1137:35" pos:end="1137:60">(<argument pos:start="1137:36" pos:end="1137:59"><expr pos:start="1137:36" pos:end="1137:59"><literal type="string" pos:start="1137:36" pos:end="1137:59">"AirPDcapDestroyContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1139:9" pos:end="1144:9"><if pos:start="1139:9" pos:end="1144:9">if <condition pos:start="1139:12" pos:end="1139:24">(<expr pos:start="1139:13" pos:end="1139:23"><name pos:start="1139:13" pos:end="1139:15">ctx</name> <operator pos:start="1139:17" pos:end="1139:18">==</operator> <name pos:start="1139:20" pos:end="1139:23">NULL</name></expr>)</condition>
        <block pos:start="1140:9" pos:end="1144:9">{<block_content pos:start="1141:13" pos:end="1143:42">
            <expr_stmt pos:start="1141:13" pos:end="1141:104"><expr pos:start="1141:13" pos:end="1141:103"><call pos:start="1141:13" pos:end="1141:103"><name pos:start="1141:13" pos:end="1141:37">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1141:38" pos:end="1141:103">(<argument pos:start="1141:39" pos:end="1141:62"><expr pos:start="1141:39" pos:end="1141:62"><literal type="string" pos:start="1141:39" pos:end="1141:62">"AirPDcapDestroyContext"</literal></expr></argument>, <argument pos:start="1141:65" pos:end="1141:78"><expr pos:start="1141:65" pos:end="1141:78"><literal type="string" pos:start="1141:65" pos:end="1141:78">"NULL context"</literal></expr></argument>, <argument pos:start="1141:81" pos:end="1141:102"><expr pos:start="1141:81" pos:end="1141:102"><name pos:start="1141:81" pos:end="1141:102">AIRPDCAP_DEBUG_LEVEL_5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1142:13" pos:end="1142:63"><expr pos:start="1142:13" pos:end="1142:62"><call pos:start="1142:13" pos:end="1142:62"><name pos:start="1142:13" pos:end="1142:36">AIRPDCAP_DEBUG_TRACE_END</name><argument_list pos:start="1142:37" pos:end="1142:62">(<argument pos:start="1142:38" pos:end="1142:61"><expr pos:start="1142:38" pos:end="1142:61"><literal type="string" pos:start="1142:38" pos:end="1142:61">"AirPDcapDestroyContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1143:13" pos:end="1143:42">return <expr pos:start="1143:20" pos:end="1143:41"><name pos:start="1143:20" pos:end="1143:41">AIRPDCAP_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="1146:9" pos:end="1146:31"><expr pos:start="1146:9" pos:end="1146:30"><call pos:start="1146:9" pos:end="1146:30"><name pos:start="1146:9" pos:end="1146:25">AirPDcapCleanKeys</name><argument_list pos:start="1146:26" pos:end="1146:30">(<argument pos:start="1146:27" pos:end="1146:29"><expr pos:start="1146:27" pos:end="1146:29"><name pos:start="1146:27" pos:end="1146:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1147:9" pos:end="1147:35"><expr pos:start="1147:9" pos:end="1147:34"><call pos:start="1147:9" pos:end="1147:34"><name pos:start="1147:9" pos:end="1147:29">AirPDcapCleanSecAssoc</name><argument_list pos:start="1147:30" pos:end="1147:34">(<argument pos:start="1147:31" pos:end="1147:33"><expr pos:start="1147:31" pos:end="1147:33"><name pos:start="1147:31" pos:end="1147:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1149:9" pos:end="1149:34"><expr pos:start="1149:9" pos:end="1149:33"><name pos:start="1149:9" pos:end="1149:29"><name pos:start="1149:9" pos:end="1149:11">ctx</name><operator pos:start="1149:12" pos:end="1149:13">-&gt;</operator><name pos:start="1149:14" pos:end="1149:29">first_free_index</name></name> <operator pos:start="1149:31" pos:end="1149:31">=</operator> <literal type="number" pos:start="1149:33" pos:end="1149:33">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1150:9" pos:end="1150:24"><expr pos:start="1150:9" pos:end="1150:23"><name pos:start="1150:9" pos:end="1150:18"><name pos:start="1150:9" pos:end="1150:11">ctx</name><operator pos:start="1150:12" pos:end="1150:13">-&gt;</operator><name pos:start="1150:14" pos:end="1150:18">index</name></name> <operator pos:start="1150:20" pos:end="1150:20">=</operator> <operator pos:start="1150:22" pos:end="1150:22">-</operator><literal type="number" pos:start="1150:23" pos:end="1150:23">1</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1151:9" pos:end="1151:27"><expr pos:start="1151:9" pos:end="1151:26"><name pos:start="1151:9" pos:end="1151:21"><name pos:start="1151:9" pos:end="1151:11">ctx</name><operator pos:start="1151:12" pos:end="1151:13">-&gt;</operator><name pos:start="1151:14" pos:end="1151:21">sa_index</name></name> <operator pos:start="1151:23" pos:end="1151:23">=</operator> <operator pos:start="1151:25" pos:end="1151:25">-</operator><literal type="number" pos:start="1151:26" pos:end="1151:26">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1153:9" pos:end="1153:106"><expr pos:start="1153:9" pos:end="1153:105"><call pos:start="1153:9" pos:end="1153:105"><name pos:start="1153:9" pos:end="1153:33">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1153:34" pos:end="1153:105">(<argument pos:start="1153:35" pos:end="1153:58"><expr pos:start="1153:35" pos:end="1153:58"><literal type="string" pos:start="1153:35" pos:end="1153:58">"AirPDcapDestroyContext"</literal></expr></argument>, <argument pos:start="1153:61" pos:end="1153:80"><expr pos:start="1153:61" pos:end="1153:80"><literal type="string" pos:start="1153:61" pos:end="1153:80">"Context destroyed!"</literal></expr></argument>, <argument pos:start="1153:83" pos:end="1153:104"><expr pos:start="1153:83" pos:end="1153:104"><name pos:start="1153:83" pos:end="1153:104">AIRPDCAP_DEBUG_LEVEL_5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1154:9" pos:end="1154:59"><expr pos:start="1154:9" pos:end="1154:58"><call pos:start="1154:9" pos:end="1154:58"><name pos:start="1154:9" pos:end="1154:32">AIRPDCAP_DEBUG_TRACE_END</name><argument_list pos:start="1154:33" pos:end="1154:58">(<argument pos:start="1154:34" pos:end="1154:57"><expr pos:start="1154:34" pos:end="1154:57"><literal type="string" pos:start="1154:34" pos:end="1154:57">"AirPDcapDestroyContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1155:9" pos:end="1155:36">return <expr pos:start="1155:16" pos:end="1155:35"><name pos:start="1155:16" pos:end="1155:35">AIRPDCAP_RET_SUCCESS</name></expr>;</return>
    </block_content>}</block></function>

<cpp:ifdef pos:start="1158:1" pos:end="1158:18">#<cpp:directive pos:start="1158:2" pos:end="1158:6">ifdef</cpp:directive> <name pos:start="1158:8" pos:end="1158:18">__cplusplus</name></cpp:ifdef>
</block_content>}</block></extern>
<cpp:endif pos:start="1160:1" pos:end="1160:6">#<cpp:directive pos:start="1160:2" pos:end="1160:6">endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen" pos:start="1162:1" pos:end="1162:78">/****************************************************************************/</comment>

<comment type="block" format="doxygen" pos:start="1164:1" pos:end="1164:78">/****************************************************************************/</comment>
<comment type="block" pos:start="1165:1" pos:end="1165:75">/* Internal function definitions                                         */</comment>

<cpp:ifdef pos:start="1167:1" pos:end="1167:18">#<cpp:directive pos:start="1167:2" pos:end="1167:6">ifdef</cpp:directive> <name pos:start="1167:8" pos:end="1167:18">__cplusplus</name></cpp:ifdef>
<extern pos:start="1168:1" pos:end="2406:0">extern <literal type="string" pos:start="1168:8" pos:end="1168:10">"C"</literal>
<block pos:start="1169:1" pos:end="2406:0">{<block_content pos:start="1172:5" pos:end="2404:0">
<cpp:endif pos:start="1170:1" pos:end="1170:6">#<cpp:directive pos:start="1170:2" pos:end="1170:6">endif</cpp:directive></cpp:endif>

    <function pos:start="1172:5" pos:end="1283:5"><type pos:start="1172:5" pos:end="1172:14"><specifier pos:start="1172:5" pos:end="1172:10">static</specifier> <name pos:start="1172:12" pos:end="1172:14">INT</name></type>
    <name pos:start="1173:5" pos:end="1173:19">AirPDcapRsnaMng</name><parameter_list pos:start="1173:20" pos:end="1179:19">(
        <parameter pos:start="1174:9" pos:end="1174:27"><decl pos:start="1174:9" pos:end="1174:27"><type pos:start="1174:9" pos:end="1174:27"><name pos:start="1174:9" pos:end="1174:13">UCHAR</name> <modifier pos:start="1174:15" pos:end="1174:15">*</modifier></type><name pos:start="1174:16" pos:end="1174:27">decrypt_data</name></decl></parameter>,
        <parameter pos:start="1175:9" pos:end="1175:28"><decl pos:start="1175:9" pos:end="1175:28"><type pos:start="1175:9" pos:end="1175:28"><name pos:start="1175:9" pos:end="1175:13">guint</name></type> <name pos:start="1175:15" pos:end="1175:28">mac_header_len</name></decl></parameter>,
        <parameter pos:start="1176:9" pos:end="1176:26"><decl pos:start="1176:9" pos:end="1176:26"><type pos:start="1176:9" pos:end="1176:26"><name pos:start="1176:9" pos:end="1176:13">guint</name> <modifier pos:start="1176:15" pos:end="1176:15">*</modifier></type><name pos:start="1176:16" pos:end="1176:26">decrypt_len</name></decl></parameter>,
        <parameter pos:start="1177:9" pos:end="1177:30"><decl pos:start="1177:9" pos:end="1177:30"><type pos:start="1177:9" pos:end="1177:30"><name pos:start="1177:9" pos:end="1177:26">PAIRPDCAP_KEY_ITEM</name></type> <name pos:start="1177:28" pos:end="1177:30">key</name></decl></parameter>,
        <parameter pos:start="1178:9" pos:end="1178:36"><decl pos:start="1178:9" pos:end="1178:36"><type pos:start="1178:9" pos:end="1178:36"><name pos:start="1178:9" pos:end="1178:32">AIRPDCAP_SEC_ASSOCIATION</name> <modifier pos:start="1178:34" pos:end="1178:34">*</modifier></type><name pos:start="1178:35" pos:end="1178:36">sa</name></decl></parameter>,
        <parameter pos:start="1179:9" pos:end="1179:18"><decl pos:start="1179:9" pos:end="1179:18"><type pos:start="1179:9" pos:end="1179:18"><name pos:start="1179:9" pos:end="1179:11">INT</name></type> <name pos:start="1179:13" pos:end="1179:18">offset</name></decl></parameter>)</parameter_list>
    <block pos:start="1180:5" pos:end="1283:5">{<block_content pos:start="1181:9" pos:end="1282:36">
        <decl_stmt pos:start="1181:9" pos:end="1181:26"><decl pos:start="1181:9" pos:end="1181:25"><type pos:start="1181:9" pos:end="1181:11"><name pos:start="1181:9" pos:end="1181:11">INT</name></type> <name pos:start="1181:13" pos:end="1181:21">ret_value</name> <init pos:start="1181:23" pos:end="1181:25">= <expr pos:start="1181:25" pos:end="1181:25"><literal type="number" pos:start="1181:25" pos:end="1181:25">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="1182:9" pos:end="1182:24"><decl pos:start="1182:9" pos:end="1182:23"><type pos:start="1182:9" pos:end="1182:15"><name pos:start="1182:9" pos:end="1182:13">UCHAR</name> <modifier pos:start="1182:15" pos:end="1182:15">*</modifier></type><name pos:start="1182:16" pos:end="1182:23">try_data</name></decl>;</decl_stmt>
        <decl_stmt pos:start="1183:9" pos:end="1183:42"><decl pos:start="1183:9" pos:end="1183:41"><type pos:start="1183:9" pos:end="1183:13"><name pos:start="1183:9" pos:end="1183:13">guint</name></type> <name pos:start="1183:15" pos:end="1183:26">try_data_len</name> <init pos:start="1183:28" pos:end="1183:41">= <expr pos:start="1183:30" pos:end="1183:41"><operator pos:start="1183:30" pos:end="1183:30">*</operator><name pos:start="1183:31" pos:end="1183:41">decrypt_len</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="1185:9" pos:end="1189:9"><if pos:start="1185:9" pos:end="1189:9">if <condition pos:start="1185:12" pos:end="1185:40">(<expr pos:start="1185:13" pos:end="1185:39"><operator pos:start="1185:13" pos:end="1185:13">*</operator><name pos:start="1185:14" pos:end="1185:24">decrypt_len</name> <operator pos:start="1185:26" pos:end="1185:26">&gt;</operator> <name pos:start="1185:28" pos:end="1185:39">try_data_len</name></expr>)</condition>
        <block pos:start="1186:9" pos:end="1189:9">{<block_content pos:start="1187:13" pos:end="1188:42">
            <expr_stmt pos:start="1187:13" pos:end="1187:110"><expr pos:start="1187:13" pos:end="1187:109"><call pos:start="1187:13" pos:end="1187:109"><name pos:start="1187:13" pos:end="1187:37">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1187:38" pos:end="1187:109">(<argument pos:start="1187:39" pos:end="1187:55"><expr pos:start="1187:39" pos:end="1187:55"><literal type="string" pos:start="1187:39" pos:end="1187:55">"AirPDcapRsnaMng"</literal></expr></argument>, <argument pos:start="1187:58" pos:end="1187:84"><expr pos:start="1187:58" pos:end="1187:84"><literal type="string" pos:start="1187:58" pos:end="1187:84">"Invalid decryption length"</literal></expr></argument>, <argument pos:start="1187:87" pos:end="1187:108"><expr pos:start="1187:87" pos:end="1187:108"><name pos:start="1187:87" pos:end="1187:108">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1188:13" pos:end="1188:42">return <expr pos:start="1188:20" pos:end="1188:41"><name pos:start="1188:20" pos:end="1188:41">AIRPDCAP_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1191:9" pos:end="1191:60">/* allocate a temp buffer for the decryption loop */</comment>
        <expr_stmt pos:start="1192:9" pos:end="1192:51"><expr pos:start="1192:9" pos:end="1192:50"><name pos:start="1192:9" pos:end="1192:16">try_data</name> <operator pos:start="1192:18" pos:end="1192:18">=</operator> <operator pos:start="1192:20" pos:end="1192:20">(</operator><name pos:start="1192:21" pos:end="1192:25">UCHAR</name> <operator pos:start="1192:27" pos:end="1192:27">*</operator><operator pos:start="1192:28" pos:end="1192:28">)</operator><call pos:start="1192:29" pos:end="1192:50"><name pos:start="1192:29" pos:end="1192:36">g_malloc</name><argument_list pos:start="1192:37" pos:end="1192:50">(<argument pos:start="1192:38" pos:end="1192:49"><expr pos:start="1192:38" pos:end="1192:49"><name pos:start="1192:38" pos:end="1192:49">try_data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1194:9" pos:end="1194:40">/* start of loop added by GCS */</comment>
        <for pos:start="1195:9" pos:end="1240:9">for <control pos:start="1195:13" pos:end="1195:49">(<comment type="block" pos:start="1195:14" pos:end="1195:21">/* sa */</comment><init pos:start="1195:22" pos:end="1195:22">;</init> <condition pos:start="1195:24" pos:end="1195:34"><expr pos:start="1195:24" pos:end="1195:33"><name pos:start="1195:24" pos:end="1195:25">sa</name> <operator pos:start="1195:27" pos:end="1195:28">!=</operator> <name pos:start="1195:30" pos:end="1195:33">NULL</name></expr>;</condition> <incr pos:start="1195:36" pos:end="1195:48"><expr pos:start="1195:36" pos:end="1195:48"><name pos:start="1195:36" pos:end="1195:37">sa</name> <operator pos:start="1195:39" pos:end="1195:39">=</operator> <name pos:start="1195:41" pos:end="1195:48"><name pos:start="1195:41" pos:end="1195:42">sa</name><operator pos:start="1195:43" pos:end="1195:44">-&gt;</operator><name pos:start="1195:45" pos:end="1195:48">next</name></name></expr></incr>)</control>
        <block pos:start="1196:9" pos:end="1240:9">{<block_content pos:start="1198:13" pos:end="1239:13">

            <if_stmt pos:start="1198:13" pos:end="1202:13"><if pos:start="1198:13" pos:end="1202:13">if <condition pos:start="1198:16" pos:end="1198:38">(<expr pos:start="1198:17" pos:end="1198:37"><name pos:start="1198:17" pos:end="1198:28"><name pos:start="1198:17" pos:end="1198:18">sa</name><operator pos:start="1198:19" pos:end="1198:20">-&gt;</operator><name pos:start="1198:21" pos:end="1198:28">validKey</name></name> <operator pos:start="1198:30" pos:end="1198:31">==</operator> <name pos:start="1198:33" pos:end="1198:37">FALSE</name></expr>)</condition>
            <block pos:start="1199:13" pos:end="1202:13">{<block_content pos:start="1200:17" pos:end="1201:25">
                <expr_stmt pos:start="1200:17" pos:end="1200:106"><expr pos:start="1200:17" pos:end="1200:105"><call pos:start="1200:17" pos:end="1200:105"><name pos:start="1200:17" pos:end="1200:41">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1200:42" pos:end="1200:105">(<argument pos:start="1200:43" pos:end="1200:59"><expr pos:start="1200:43" pos:end="1200:59"><literal type="string" pos:start="1200:43" pos:end="1200:59">"AirPDcapRsnaMng"</literal></expr></argument>, <argument pos:start="1200:62" pos:end="1200:80"><expr pos:start="1200:62" pos:end="1200:80"><literal type="string" pos:start="1200:62" pos:end="1200:80">"Key not yet valid"</literal></expr></argument>, <argument pos:start="1200:83" pos:end="1200:104"><expr pos:start="1200:83" pos:end="1200:104"><name pos:start="1200:83" pos:end="1200:104">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue pos:start="1201:17" pos:end="1201:25">continue;</continue>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="1204:13" pos:end="1204:60">/* copy the encrypted data into a temp buffer */</comment>
            <expr_stmt pos:start="1205:13" pos:end="1205:57"><expr pos:start="1205:13" pos:end="1205:56"><call pos:start="1205:13" pos:end="1205:56"><name pos:start="1205:13" pos:end="1205:18">memcpy</name><argument_list pos:start="1205:19" pos:end="1205:56">(<argument pos:start="1205:20" pos:end="1205:27"><expr pos:start="1205:20" pos:end="1205:27"><name pos:start="1205:20" pos:end="1205:27">try_data</name></expr></argument>, <argument pos:start="1205:30" pos:end="1205:41"><expr pos:start="1205:30" pos:end="1205:41"><name pos:start="1205:30" pos:end="1205:41">decrypt_data</name></expr></argument>, <argument pos:start="1205:44" pos:end="1205:55"><expr pos:start="1205:44" pos:end="1205:55"><operator pos:start="1205:44" pos:end="1205:44">*</operator><name pos:start="1205:45" pos:end="1205:55">decrypt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1207:13" pos:end="1239:13"><if pos:start="1207:13" pos:end="1225:13">if <condition pos:start="1207:16" pos:end="1207:37">(<expr pos:start="1207:17" pos:end="1207:36"><name pos:start="1207:17" pos:end="1207:31"><name pos:start="1207:17" pos:end="1207:18">sa</name><operator pos:start="1207:19" pos:end="1207:20">-&gt;</operator><name pos:start="1207:21" pos:end="1207:23">wpa</name><operator pos:start="1207:24" pos:end="1207:24">.</operator><name pos:start="1207:25" pos:end="1207:31">key_ver</name></name> <operator pos:start="1207:33" pos:end="1207:34">==</operator> <literal type="number" pos:start="1207:36" pos:end="1207:36">1</literal></expr>)</condition>
            <block pos:start="1208:13" pos:end="1225:13">{<block_content pos:start="1210:17" pos:end="1224:22">
                <comment type="block" pos:start="1209:17" pos:end="1209:102">/* CCMP -&gt; HMAC-MD5 is the EAPOL-Key MIC, RC4 is the EAPOL-Key encryption algorithm */</comment>
                <expr_stmt pos:start="1210:17" pos:end="1210:93"><expr pos:start="1210:17" pos:end="1210:92"><call pos:start="1210:17" pos:end="1210:92"><name pos:start="1210:17" pos:end="1210:41">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1210:42" pos:end="1210:92">(<argument pos:start="1210:43" pos:end="1210:59"><expr pos:start="1210:43" pos:end="1210:59"><literal type="string" pos:start="1210:43" pos:end="1210:59">"AirPDcapRsnaMng"</literal></expr></argument>, <argument pos:start="1210:62" pos:end="1210:67"><expr pos:start="1210:62" pos:end="1210:67"><literal type="string" pos:start="1210:62" pos:end="1210:67">"TKIP"</literal></expr></argument>, <argument pos:start="1210:70" pos:end="1210:91"><expr pos:start="1210:70" pos:end="1210:91"><name pos:start="1210:70" pos:end="1210:91">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1211:17" pos:end="1211:51"><expr pos:start="1211:17" pos:end="1211:50"><call pos:start="1211:17" pos:end="1211:50"><name pos:start="1211:17" pos:end="1211:26">DEBUG_DUMP</name><argument_list pos:start="1211:27" pos:end="1211:50">(<argument pos:start="1211:28" pos:end="1211:32"><expr pos:start="1211:28" pos:end="1211:32"><literal type="string" pos:start="1211:28" pos:end="1211:32">"ptk"</literal></expr></argument>, <argument pos:start="1211:35" pos:end="1211:45"><expr pos:start="1211:35" pos:end="1211:45"><name pos:start="1211:35" pos:end="1211:45"><name pos:start="1211:35" pos:end="1211:36">sa</name><operator pos:start="1211:37" pos:end="1211:38">-&gt;</operator><name pos:start="1211:39" pos:end="1211:41">wpa</name><operator pos:start="1211:42" pos:end="1211:42">.</operator><name pos:start="1211:43" pos:end="1211:45">ptk</name></name></expr></argument>, <argument pos:start="1211:48" pos:end="1211:49"><expr pos:start="1211:48" pos:end="1211:49"><literal type="number" pos:start="1211:48" pos:end="1211:49">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1212:17" pos:end="1212:81"><expr pos:start="1212:17" pos:end="1212:80"><call pos:start="1212:17" pos:end="1212:80"><name pos:start="1212:17" pos:end="1212:26">DEBUG_DUMP</name><argument_list pos:start="1212:27" pos:end="1212:80">(<argument pos:start="1212:28" pos:end="1212:45"><expr pos:start="1212:28" pos:end="1212:45"><literal type="string" pos:start="1212:28" pos:end="1212:45">"ptk portion used"</literal></expr></argument>, <argument pos:start="1212:48" pos:end="1212:75"><expr pos:start="1212:48" pos:end="1212:75"><call pos:start="1212:48" pos:end="1212:75"><name pos:start="1212:48" pos:end="1212:62">AIRPDCAP_GET_TK</name><argument_list pos:start="1212:63" pos:end="1212:75">(<argument pos:start="1212:64" pos:end="1212:74"><expr pos:start="1212:64" pos:end="1212:74"><name pos:start="1212:64" pos:end="1212:74"><name pos:start="1212:64" pos:end="1212:65">sa</name><operator pos:start="1212:66" pos:end="1212:67">-&gt;</operator><name pos:start="1212:68" pos:end="1212:70">wpa</name><operator pos:start="1212:71" pos:end="1212:71">.</operator><name pos:start="1212:72" pos:end="1212:74">ptk</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1212:78" pos:end="1212:79"><expr pos:start="1212:78" pos:end="1212:79"><literal type="number" pos:start="1212:78" pos:end="1212:79">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1214:17" pos:end="1214:151"><expr pos:start="1214:17" pos:end="1214:150"><name pos:start="1214:17" pos:end="1214:25">ret_value</name> <operator pos:start="1214:27" pos:end="1214:27">=</operator> <call pos:start="1214:29" pos:end="1214:150"><name pos:start="1214:29" pos:end="1214:47">AirPDcapTkipDecrypt</name><argument_list pos:start="1214:48" pos:end="1214:150">(<argument pos:start="1214:49" pos:end="1214:65"><expr pos:start="1214:49" pos:end="1214:65"><name pos:start="1214:49" pos:end="1214:56">try_data</name> <operator pos:start="1214:58" pos:end="1214:58">+</operator> <name pos:start="1214:60" pos:end="1214:65">offset</name></expr></argument>, <argument pos:start="1214:68" pos:end="1214:88"><expr pos:start="1214:68" pos:end="1214:88"><operator pos:start="1214:68" pos:end="1214:68">*</operator><name pos:start="1214:69" pos:end="1214:79">decrypt_len</name> <operator pos:start="1214:81" pos:end="1214:81">-</operator> <name pos:start="1214:83" pos:end="1214:88">offset</name></expr></argument>, <argument pos:start="1214:91" pos:end="1214:119"><expr pos:start="1214:91" pos:end="1214:119"><name pos:start="1214:91" pos:end="1214:98">try_data</name> <operator pos:start="1214:100" pos:end="1214:100">+</operator> <name pos:start="1214:102" pos:end="1214:119">AIRPDCAP_TA_OFFSET</name></expr></argument>, <argument pos:start="1214:122" pos:end="1214:149"><expr pos:start="1214:122" pos:end="1214:149"><call pos:start="1214:122" pos:end="1214:149"><name pos:start="1214:122" pos:end="1214:136">AIRPDCAP_GET_TK</name><argument_list pos:start="1214:137" pos:end="1214:149">(<argument pos:start="1214:138" pos:end="1214:148"><expr pos:start="1214:138" pos:end="1214:148"><name pos:start="1214:138" pos:end="1214:148"><name pos:start="1214:138" pos:end="1214:139">sa</name><operator pos:start="1214:140" pos:end="1214:141">-&gt;</operator><name pos:start="1214:142" pos:end="1214:144">wpa</name><operator pos:start="1214:145" pos:end="1214:145">.</operator><name pos:start="1214:146" pos:end="1214:148">ptk</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="1215:17" pos:end="1219:17"><if pos:start="1215:17" pos:end="1219:17">if <condition pos:start="1215:20" pos:end="1215:30">(<expr pos:start="1215:21" pos:end="1215:29"><name pos:start="1215:21" pos:end="1215:29">ret_value</name></expr>)</condition>
                <block pos:start="1216:17" pos:end="1219:17">{<block_content pos:start="1217:21" pos:end="1218:29">
                    <expr_stmt pos:start="1217:21" pos:end="1217:105"><expr pos:start="1217:21" pos:end="1217:104"><call pos:start="1217:21" pos:end="1217:104"><name pos:start="1217:21" pos:end="1217:45">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1217:46" pos:end="1217:104">(<argument pos:start="1217:47" pos:end="1217:63"><expr pos:start="1217:47" pos:end="1217:63"><literal type="string" pos:start="1217:47" pos:end="1217:63">"AirPDcapRsnaMng"</literal></expr></argument>, <argument pos:start="1217:66" pos:end="1217:79"><expr pos:start="1217:66" pos:end="1217:79"><literal type="string" pos:start="1217:66" pos:end="1217:79">"TKIP failed!"</literal></expr></argument>, <argument pos:start="1217:82" pos:end="1217:103"><expr pos:start="1217:82" pos:end="1217:103"><name pos:start="1217:82" pos:end="1217:103">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue pos:start="1218:21" pos:end="1218:29">continue;</continue>
                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1221:17" pos:end="1221:106"><expr pos:start="1221:17" pos:end="1221:105"><call pos:start="1221:17" pos:end="1221:105"><name pos:start="1221:17" pos:end="1221:41">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1221:42" pos:end="1221:105">(<argument pos:start="1221:43" pos:end="1221:59"><expr pos:start="1221:43" pos:end="1221:59"><literal type="string" pos:start="1221:43" pos:end="1221:59">"AirPDcapRsnaMng"</literal></expr></argument>, <argument pos:start="1221:62" pos:end="1221:80"><expr pos:start="1221:62" pos:end="1221:80"><literal type="string" pos:start="1221:62" pos:end="1221:80">"TKIP DECRYPTED!!!"</literal></expr></argument>, <argument pos:start="1221:83" pos:end="1221:104"><expr pos:start="1221:83" pos:end="1221:104"><name pos:start="1221:83" pos:end="1221:104">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block" pos:start="1222:17" pos:end="1222:81">/* remove MIC (8bytes) and ICV (4bytes) from the end of packet */</comment>
                <expr_stmt pos:start="1223:17" pos:end="1223:35"><expr pos:start="1223:17" pos:end="1223:34"><operator pos:start="1223:17" pos:end="1223:17">*</operator><name pos:start="1223:18" pos:end="1223:28">decrypt_len</name> <operator pos:start="1223:30" pos:end="1223:31">-=</operator> <literal type="number" pos:start="1223:33" pos:end="1223:34">12</literal></expr>;</expr_stmt>
                <break pos:start="1224:17" pos:end="1224:22">break;</break>
            </block_content>}</block></if>
            <else pos:start="1226:13" pos:end="1239:13">else
            <block pos:start="1227:13" pos:end="1239:13">{<block_content pos:start="1229:17" pos:end="1238:22">
                <comment type="block" pos:start="1228:17" pos:end="1228:124">/* AES-CCMP -&gt; HMAC-SHA1-128 is the EAPOL-Key MIC, AES wep_key wrap is the EAPOL-Key encryption algorithm */</comment>
                <expr_stmt pos:start="1229:17" pos:end="1229:93"><expr pos:start="1229:17" pos:end="1229:92"><call pos:start="1229:17" pos:end="1229:92"><name pos:start="1229:17" pos:end="1229:41">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1229:42" pos:end="1229:92">(<argument pos:start="1229:43" pos:end="1229:59"><expr pos:start="1229:43" pos:end="1229:59"><literal type="string" pos:start="1229:43" pos:end="1229:59">"AirPDcapRsnaMng"</literal></expr></argument>, <argument pos:start="1229:62" pos:end="1229:67"><expr pos:start="1229:62" pos:end="1229:67"><literal type="string" pos:start="1229:62" pos:end="1229:67">"CCMP"</literal></expr></argument>, <argument pos:start="1229:70" pos:end="1229:91"><expr pos:start="1229:70" pos:end="1229:91"><name pos:start="1229:70" pos:end="1229:91">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1231:17" pos:end="1231:123"><expr pos:start="1231:17" pos:end="1231:122"><name pos:start="1231:17" pos:end="1231:25">ret_value</name> <operator pos:start="1231:27" pos:end="1231:27">=</operator> <call pos:start="1231:29" pos:end="1231:122"><name pos:start="1231:29" pos:end="1231:47">AirPDcapCcmpDecrypt</name><argument_list pos:start="1231:48" pos:end="1231:122">(<argument pos:start="1231:49" pos:end="1231:56"><expr pos:start="1231:49" pos:end="1231:56"><name pos:start="1231:49" pos:end="1231:56">try_data</name></expr></argument>, <argument pos:start="1231:59" pos:end="1231:72"><expr pos:start="1231:59" pos:end="1231:72"><name pos:start="1231:59" pos:end="1231:72">mac_header_len</name></expr></argument>, <argument pos:start="1231:75" pos:end="1231:91"><expr pos:start="1231:75" pos:end="1231:91"><operator pos:start="1231:75" pos:end="1231:75">(</operator><name pos:start="1231:76" pos:end="1231:78">INT</name><operator pos:start="1231:79" pos:end="1231:79">)</operator><operator pos:start="1231:80" pos:end="1231:80">*</operator><name pos:start="1231:81" pos:end="1231:91">decrypt_len</name></expr></argument>, <argument pos:start="1231:94" pos:end="1231:121"><expr pos:start="1231:94" pos:end="1231:121"><call pos:start="1231:94" pos:end="1231:121"><name pos:start="1231:94" pos:end="1231:108">AIRPDCAP_GET_TK</name><argument_list pos:start="1231:109" pos:end="1231:121">(<argument pos:start="1231:110" pos:end="1231:120"><expr pos:start="1231:110" pos:end="1231:120"><name pos:start="1231:110" pos:end="1231:120"><name pos:start="1231:110" pos:end="1231:111">sa</name><operator pos:start="1231:112" pos:end="1231:113">-&gt;</operator><name pos:start="1231:114" pos:end="1231:116">wpa</name><operator pos:start="1231:117" pos:end="1231:117">.</operator><name pos:start="1231:118" pos:end="1231:120">ptk</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="1232:17" pos:end="1233:29"><if pos:start="1232:17" pos:end="1233:29">if <condition pos:start="1232:20" pos:end="1232:30">(<expr pos:start="1232:21" pos:end="1232:29"><name pos:start="1232:21" pos:end="1232:29">ret_value</name></expr>)</condition><block type="pseudo" pos:start="1233:21" pos:end="1233:29"><block_content pos:start="1233:21" pos:end="1233:29">
                    <continue pos:start="1233:21" pos:end="1233:29">continue;</continue></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1235:17" pos:end="1235:106"><expr pos:start="1235:17" pos:end="1235:105"><call pos:start="1235:17" pos:end="1235:105"><name pos:start="1235:17" pos:end="1235:41">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1235:42" pos:end="1235:105">(<argument pos:start="1235:43" pos:end="1235:59"><expr pos:start="1235:43" pos:end="1235:59"><literal type="string" pos:start="1235:43" pos:end="1235:59">"AirPDcapRsnaMng"</literal></expr></argument>, <argument pos:start="1235:62" pos:end="1235:80"><expr pos:start="1235:62" pos:end="1235:80"><literal type="string" pos:start="1235:62" pos:end="1235:80">"CCMP DECRYPTED!!!"</literal></expr></argument>, <argument pos:start="1235:83" pos:end="1235:104"><expr pos:start="1235:83" pos:end="1235:104"><name pos:start="1235:83" pos:end="1235:104">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block" pos:start="1236:17" pos:end="1236:64">/* remove MIC (8bytes) from the end of packet */</comment>
                <expr_stmt pos:start="1237:17" pos:end="1237:34"><expr pos:start="1237:17" pos:end="1237:33"><operator pos:start="1237:17" pos:end="1237:17">*</operator><name pos:start="1237:18" pos:end="1237:28">decrypt_len</name> <operator pos:start="1237:30" pos:end="1237:31">-=</operator> <literal type="number" pos:start="1237:33" pos:end="1237:33">8</literal></expr>;</expr_stmt>
                <break pos:start="1238:17" pos:end="1238:22">break;</break>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        <comment type="block" pos:start="1241:9" pos:end="1241:25">/* end of loop */</comment>

        <comment type="block" pos:start="1243:9" pos:end="1243:37">/* none of the keys worked */</comment>
        <if_stmt pos:start="1244:9" pos:end="1248:9"><if pos:start="1244:9" pos:end="1248:9">if <condition pos:start="1244:12" pos:end="1244:23">(<expr pos:start="1244:13" pos:end="1244:22"><name pos:start="1244:13" pos:end="1244:14">sa</name> <operator pos:start="1244:16" pos:end="1244:17">==</operator> <name pos:start="1244:19" pos:end="1244:22">NULL</name></expr>)</condition>
        <block pos:start="1245:9" pos:end="1248:9">{<block_content pos:start="1246:13" pos:end="1247:29">
            <expr_stmt pos:start="1246:13" pos:end="1246:29"><expr pos:start="1246:13" pos:end="1246:28"><call pos:start="1246:13" pos:end="1246:28"><name pos:start="1246:13" pos:end="1246:18">g_free</name><argument_list pos:start="1246:19" pos:end="1246:28">(<argument pos:start="1246:20" pos:end="1246:27"><expr pos:start="1246:20" pos:end="1246:27"><name pos:start="1246:20" pos:end="1246:27">try_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1247:13" pos:end="1247:29">return <expr pos:start="1247:20" pos:end="1247:28"><name pos:start="1247:20" pos:end="1247:28">ret_value</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="1250:9" pos:end="1255:9"><if pos:start="1250:9" pos:end="1255:9">if <condition pos:start="1250:12" pos:end="1250:60">(<expr pos:start="1250:13" pos:end="1250:59"><operator pos:start="1250:13" pos:end="1250:13">*</operator><name pos:start="1250:14" pos:end="1250:24">decrypt_len</name> <operator pos:start="1250:26" pos:end="1250:26">&gt;</operator> <name pos:start="1250:28" pos:end="1250:39">try_data_len</name> <operator pos:start="1250:41" pos:end="1250:42">||</operator> <operator pos:start="1250:44" pos:end="1250:44">*</operator><name pos:start="1250:45" pos:end="1250:55">decrypt_len</name> <operator pos:start="1250:57" pos:end="1250:57">&lt;</operator> <literal type="number" pos:start="1250:59" pos:end="1250:59">8</literal></expr>)</condition>
        <block pos:start="1251:9" pos:end="1255:9">{<block_content pos:start="1252:13" pos:end="1254:42">
            <expr_stmt pos:start="1252:13" pos:end="1252:110"><expr pos:start="1252:13" pos:end="1252:109"><call pos:start="1252:13" pos:end="1252:109"><name pos:start="1252:13" pos:end="1252:37">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1252:38" pos:end="1252:109">(<argument pos:start="1252:39" pos:end="1252:55"><expr pos:start="1252:39" pos:end="1252:55"><literal type="string" pos:start="1252:39" pos:end="1252:55">"AirPDcapRsnaMng"</literal></expr></argument>, <argument pos:start="1252:58" pos:end="1252:84"><expr pos:start="1252:58" pos:end="1252:84"><literal type="string" pos:start="1252:58" pos:end="1252:84">"Invalid decryption length"</literal></expr></argument>, <argument pos:start="1252:87" pos:end="1252:108"><expr pos:start="1252:87" pos:end="1252:108"><name pos:start="1252:87" pos:end="1252:108">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1253:13" pos:end="1253:29"><expr pos:start="1253:13" pos:end="1253:28"><call pos:start="1253:13" pos:end="1253:28"><name pos:start="1253:13" pos:end="1253:18">g_free</name><argument_list pos:start="1253:19" pos:end="1253:28">(<argument pos:start="1253:20" pos:end="1253:27"><expr pos:start="1253:20" pos:end="1253:27"><name pos:start="1253:20" pos:end="1253:27">try_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1254:13" pos:end="1254:42">return <expr pos:start="1254:20" pos:end="1254:41"><name pos:start="1254:20" pos:end="1254:41">AIRPDCAP_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1257:9" pos:end="1257:64">/* copy the decrypted data into the decrypt buffer GCS*/</comment>
        <expr_stmt pos:start="1258:9" pos:end="1258:53"><expr pos:start="1258:9" pos:end="1258:52"><call pos:start="1258:9" pos:end="1258:52"><name pos:start="1258:9" pos:end="1258:14">memcpy</name><argument_list pos:start="1258:15" pos:end="1258:52">(<argument pos:start="1258:16" pos:end="1258:27"><expr pos:start="1258:16" pos:end="1258:27"><name pos:start="1258:16" pos:end="1258:27">decrypt_data</name></expr></argument>, <argument pos:start="1258:30" pos:end="1258:37"><expr pos:start="1258:30" pos:end="1258:37"><name pos:start="1258:30" pos:end="1258:37">try_data</name></expr></argument>, <argument pos:start="1258:40" pos:end="1258:51"><expr pos:start="1258:40" pos:end="1258:51"><operator pos:start="1258:40" pos:end="1258:40">*</operator><name pos:start="1258:41" pos:end="1258:51">decrypt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1259:9" pos:end="1259:25"><expr pos:start="1259:9" pos:end="1259:24"><call pos:start="1259:9" pos:end="1259:24"><name pos:start="1259:9" pos:end="1259:14">g_free</name><argument_list pos:start="1259:15" pos:end="1259:24">(<argument pos:start="1259:16" pos:end="1259:23"><expr pos:start="1259:16" pos:end="1259:23"><name pos:start="1259:16" pos:end="1259:23">try_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1261:9" pos:end="1261:35">/* remove protection bit */</comment>
        <expr_stmt pos:start="1262:9" pos:end="1262:32"><expr pos:start="1262:9" pos:end="1262:31"><name pos:start="1262:9" pos:end="1262:23"><name pos:start="1262:9" pos:end="1262:20">decrypt_data</name><index pos:start="1262:21" pos:end="1262:23">[<expr pos:start="1262:22" pos:end="1262:22"><literal type="number" pos:start="1262:22" pos:end="1262:22">1</literal></expr>]</index></name> <operator pos:start="1262:25" pos:end="1262:26">&amp;=</operator> <literal type="number" pos:start="1262:28" pos:end="1262:31">0xBF</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="1264:9" pos:end="1264:37">/* remove TKIP/CCMP header */</comment>
        <expr_stmt pos:start="1265:9" pos:end="1265:32"><expr pos:start="1265:9" pos:end="1265:31"><name pos:start="1265:9" pos:end="1265:14">offset</name> <operator pos:start="1265:16" pos:end="1265:16">=</operator> <name pos:start="1265:18" pos:end="1265:31">mac_header_len</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1266:9" pos:end="1266:26"><expr pos:start="1266:9" pos:end="1266:25"><operator pos:start="1266:9" pos:end="1266:9">*</operator><name pos:start="1266:10" pos:end="1266:20">decrypt_len</name> <operator pos:start="1266:22" pos:end="1266:23">-=</operator> <literal type="number" pos:start="1266:25" pos:end="1266:25">8</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1267:9" pos:end="1267:89"><expr pos:start="1267:9" pos:end="1267:88"><call pos:start="1267:9" pos:end="1267:88"><name pos:start="1267:9" pos:end="1267:15">memmove</name><argument_list pos:start="1267:16" pos:end="1267:88">(<argument pos:start="1267:17" pos:end="1267:37"><expr pos:start="1267:17" pos:end="1267:37"><name pos:start="1267:17" pos:end="1267:28">decrypt_data</name> <operator pos:start="1267:30" pos:end="1267:30">+</operator> <name pos:start="1267:32" pos:end="1267:37">offset</name></expr></argument>, <argument pos:start="1267:40" pos:end="1267:64"><expr pos:start="1267:40" pos:end="1267:64"><name pos:start="1267:40" pos:end="1267:51">decrypt_data</name> <operator pos:start="1267:53" pos:end="1267:53">+</operator> <name pos:start="1267:55" pos:end="1267:60">offset</name> <operator pos:start="1267:62" pos:end="1267:62">+</operator> <literal type="number" pos:start="1267:64" pos:end="1267:64">8</literal></expr></argument>, <argument pos:start="1267:67" pos:end="1267:87"><expr pos:start="1267:67" pos:end="1267:87"><operator pos:start="1267:67" pos:end="1267:67">*</operator><name pos:start="1267:68" pos:end="1267:78">decrypt_len</name> <operator pos:start="1267:80" pos:end="1267:80">-</operator> <name pos:start="1267:82" pos:end="1267:87">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1269:9" pos:end="1280:9"><if pos:start="1269:9" pos:end="1280:9">if <condition pos:start="1269:12" pos:end="1269:24">(<expr pos:start="1269:13" pos:end="1269:23"><name pos:start="1269:13" pos:end="1269:15">key</name> <operator pos:start="1269:17" pos:end="1269:18">!=</operator> <name pos:start="1269:20" pos:end="1269:23">NULL</name></expr>)</condition>
        <block pos:start="1270:9" pos:end="1280:9">{<block_content pos:start="1271:13" pos:end="1279:54">
            <if_stmt pos:start="1271:13" pos:end="1274:58"><if pos:start="1271:13" pos:end="1272:64">if <condition pos:start="1271:16" pos:end="1271:32">(<expr pos:start="1271:17" pos:end="1271:31"><name pos:start="1271:17" pos:end="1271:23"><name pos:start="1271:17" pos:end="1271:18">sa</name><operator pos:start="1271:19" pos:end="1271:20">-&gt;</operator><name pos:start="1271:21" pos:end="1271:23">key</name></name> <operator pos:start="1271:25" pos:end="1271:26">!=</operator> <name pos:start="1271:28" pos:end="1271:31">NULL</name></expr>)</condition><block type="pseudo" pos:start="1272:17" pos:end="1272:64"><block_content pos:start="1272:17" pos:end="1272:64">
                <expr_stmt pos:start="1272:17" pos:end="1272:64"><expr pos:start="1272:17" pos:end="1272:63"><call pos:start="1272:17" pos:end="1272:63"><name pos:start="1272:17" pos:end="1272:22">memcpy</name><argument_list pos:start="1272:23" pos:end="1272:63">(<argument pos:start="1272:24" pos:end="1272:26"><expr pos:start="1272:24" pos:end="1272:26"><name pos:start="1272:24" pos:end="1272:26">key</name></expr></argument>, <argument pos:start="1272:29" pos:end="1272:35"><expr pos:start="1272:29" pos:end="1272:35"><name pos:start="1272:29" pos:end="1272:35"><name pos:start="1272:29" pos:end="1272:30">sa</name><operator pos:start="1272:31" pos:end="1272:32">-&gt;</operator><name pos:start="1272:33" pos:end="1272:35">key</name></name></expr></argument>, <argument pos:start="1272:38" pos:end="1272:62"><expr pos:start="1272:38" pos:end="1272:62"><sizeof pos:start="1272:38" pos:end="1272:62">sizeof<argument_list pos:start="1272:44" pos:end="1272:62">(<argument pos:start="1272:45" pos:end="1272:61"><expr pos:start="1272:45" pos:end="1272:61"><name pos:start="1272:45" pos:end="1272:61">AIRPDCAP_KEY_ITEM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="1273:13" pos:end="1274:58">else<block type="pseudo" pos:start="1274:17" pos:end="1274:58"><block_content pos:start="1274:17" pos:end="1274:58">
                <expr_stmt pos:start="1274:17" pos:end="1274:58"><expr pos:start="1274:17" pos:end="1274:57"><call pos:start="1274:17" pos:end="1274:57"><name pos:start="1274:17" pos:end="1274:22">memset</name><argument_list pos:start="1274:23" pos:end="1274:57">(<argument pos:start="1274:24" pos:end="1274:26"><expr pos:start="1274:24" pos:end="1274:26"><name pos:start="1274:24" pos:end="1274:26">key</name></expr></argument>, <argument pos:start="1274:29" pos:end="1274:29"><expr pos:start="1274:29" pos:end="1274:29"><literal type="number" pos:start="1274:29" pos:end="1274:29">0</literal></expr></argument>, <argument pos:start="1274:32" pos:end="1274:56"><expr pos:start="1274:32" pos:end="1274:56"><sizeof pos:start="1274:32" pos:end="1274:56">sizeof<argument_list pos:start="1274:38" pos:end="1274:56">(<argument pos:start="1274:39" pos:end="1274:55"><expr pos:start="1274:39" pos:end="1274:55"><name pos:start="1274:39" pos:end="1274:55">AIRPDCAP_KEY_ITEM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt pos:start="1275:13" pos:end="1275:76"><expr pos:start="1275:13" pos:end="1275:75"><call pos:start="1275:13" pos:end="1275:75"><name pos:start="1275:13" pos:end="1275:18">memcpy</name><argument_list pos:start="1275:19" pos:end="1275:75">(<argument pos:start="1275:20" pos:end="1275:39"><expr pos:start="1275:20" pos:end="1275:39"><name pos:start="1275:20" pos:end="1275:39"><name pos:start="1275:20" pos:end="1275:22">key</name><operator pos:start="1275:23" pos:end="1275:24">-&gt;</operator><name pos:start="1275:25" pos:end="1275:31">KeyData</name><operator pos:start="1275:32" pos:end="1275:32">.</operator><name pos:start="1275:33" pos:end="1275:35">Wpa</name><operator pos:start="1275:36" pos:end="1275:36">.</operator><name pos:start="1275:37" pos:end="1275:39">Ptk</name></name></expr></argument>, <argument pos:start="1275:42" pos:end="1275:52"><expr pos:start="1275:42" pos:end="1275:52"><name pos:start="1275:42" pos:end="1275:52"><name pos:start="1275:42" pos:end="1275:43">sa</name><operator pos:start="1275:44" pos:end="1275:45">-&gt;</operator><name pos:start="1275:46" pos:end="1275:48">wpa</name><operator pos:start="1275:49" pos:end="1275:49">.</operator><name pos:start="1275:50" pos:end="1275:52">ptk</name></name></expr></argument>, <argument pos:start="1275:55" pos:end="1275:74"><expr pos:start="1275:55" pos:end="1275:74"><name pos:start="1275:55" pos:end="1275:74">AIRPDCAP_WPA_PTK_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="1275:78" pos:end="1275:144">/* copy the PTK to the key structure for future use by wireshark */</comment>
            <if_stmt pos:start="1276:13" pos:end="1279:54"><if pos:start="1276:13" pos:end="1277:54">if <condition pos:start="1276:16" pos:end="1276:65">(<expr pos:start="1276:17" pos:end="1276:64"><name pos:start="1276:17" pos:end="1276:31"><name pos:start="1276:17" pos:end="1276:18">sa</name><operator pos:start="1276:19" pos:end="1276:20">-&gt;</operator><name pos:start="1276:21" pos:end="1276:23">wpa</name><operator pos:start="1276:24" pos:end="1276:24">.</operator><name pos:start="1276:25" pos:end="1276:31">key_ver</name></name> <operator pos:start="1276:33" pos:end="1276:34">==</operator> <name pos:start="1276:36" pos:end="1276:64">AIRPDCAP_WPA_KEY_VER_NOT_CCMP</name></expr>)</condition><block type="pseudo" pos:start="1277:17" pos:end="1277:54"><block_content pos:start="1277:17" pos:end="1277:54">
                <expr_stmt pos:start="1277:17" pos:end="1277:54"><expr pos:start="1277:17" pos:end="1277:53"><name pos:start="1277:17" pos:end="1277:28"><name pos:start="1277:17" pos:end="1277:19">key</name><operator pos:start="1277:20" pos:end="1277:21">-&gt;</operator><name pos:start="1277:22" pos:end="1277:28">KeyType</name></name> <operator pos:start="1277:30" pos:end="1277:30">=</operator> <name pos:start="1277:32" pos:end="1277:53">AIRPDCAP_KEY_TYPE_TKIP</name></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif" pos:start="1278:13" pos:end="1279:54">else if <condition pos:start="1278:21" pos:end="1278:70">(<expr pos:start="1278:22" pos:end="1278:69"><name pos:start="1278:22" pos:end="1278:36"><name pos:start="1278:22" pos:end="1278:23">sa</name><operator pos:start="1278:24" pos:end="1278:25">-&gt;</operator><name pos:start="1278:26" pos:end="1278:28">wpa</name><operator pos:start="1278:29" pos:end="1278:29">.</operator><name pos:start="1278:30" pos:end="1278:36">key_ver</name></name> <operator pos:start="1278:38" pos:end="1278:39">==</operator> <name pos:start="1278:41" pos:end="1278:69">AIRPDCAP_WPA_KEY_VER_AES_CCMP</name></expr>)</condition><block type="pseudo" pos:start="1279:17" pos:end="1279:54"><block_content pos:start="1279:17" pos:end="1279:54">
                <expr_stmt pos:start="1279:17" pos:end="1279:54"><expr pos:start="1279:17" pos:end="1279:53"><name pos:start="1279:17" pos:end="1279:28"><name pos:start="1279:17" pos:end="1279:19">key</name><operator pos:start="1279:20" pos:end="1279:21">-&gt;</operator><name pos:start="1279:22" pos:end="1279:28">KeyType</name></name> <operator pos:start="1279:30" pos:end="1279:30">=</operator> <name pos:start="1279:32" pos:end="1279:53">AIRPDCAP_KEY_TYPE_CCMP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <return pos:start="1282:9" pos:end="1282:36">return <expr pos:start="1282:16" pos:end="1282:35"><name pos:start="1282:16" pos:end="1282:35">AIRPDCAP_RET_SUCCESS</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="1285:5" pos:end="1402:5"><type pos:start="1285:5" pos:end="1285:14"><specifier pos:start="1285:5" pos:end="1285:10">static</specifier> <name pos:start="1285:12" pos:end="1285:14">INT</name></type>
    <name pos:start="1286:5" pos:end="1286:18">AirPDcapWepMng</name><parameter_list pos:start="1286:19" pos:end="1293:19">(
        <parameter pos:start="1287:9" pos:end="1287:29"><decl pos:start="1287:9" pos:end="1287:29"><type pos:start="1287:9" pos:end="1287:29"><name pos:start="1287:9" pos:end="1287:25">PAIRPDCAP_CONTEXT</name></type> <name pos:start="1287:27" pos:end="1287:29">ctx</name></decl></parameter>,
        <parameter pos:start="1288:9" pos:end="1288:27"><decl pos:start="1288:9" pos:end="1288:27"><type pos:start="1288:9" pos:end="1288:27"><name pos:start="1288:9" pos:end="1288:13">UCHAR</name> <modifier pos:start="1288:15" pos:end="1288:15">*</modifier></type><name pos:start="1288:16" pos:end="1288:27">decrypt_data</name></decl></parameter>,
        <parameter pos:start="1289:9" pos:end="1289:28"><decl pos:start="1289:9" pos:end="1289:28"><type pos:start="1289:9" pos:end="1289:28"><name pos:start="1289:9" pos:end="1289:13">guint</name></type> <name pos:start="1289:15" pos:end="1289:28">mac_header_len</name></decl></parameter>,
        <parameter pos:start="1290:9" pos:end="1290:26"><decl pos:start="1290:9" pos:end="1290:26"><type pos:start="1290:9" pos:end="1290:26"><name pos:start="1290:9" pos:end="1290:13">guint</name> <modifier pos:start="1290:15" pos:end="1290:15">*</modifier></type><name pos:start="1290:16" pos:end="1290:26">decrypt_len</name></decl></parameter>,
        <parameter pos:start="1291:9" pos:end="1291:30"><decl pos:start="1291:9" pos:end="1291:30"><type pos:start="1291:9" pos:end="1291:30"><name pos:start="1291:9" pos:end="1291:26">PAIRPDCAP_KEY_ITEM</name></type> <name pos:start="1291:28" pos:end="1291:30">key</name></decl></parameter>,
        <parameter pos:start="1292:9" pos:end="1292:36"><decl pos:start="1292:9" pos:end="1292:36"><type pos:start="1292:9" pos:end="1292:36"><name pos:start="1292:9" pos:end="1292:32">AIRPDCAP_SEC_ASSOCIATION</name> <modifier pos:start="1292:34" pos:end="1292:34">*</modifier></type><name pos:start="1292:35" pos:end="1292:36">sa</name></decl></parameter>,
        <parameter pos:start="1293:9" pos:end="1293:18"><decl pos:start="1293:9" pos:end="1293:18"><type pos:start="1293:9" pos:end="1293:18"><name pos:start="1293:9" pos:end="1293:11">INT</name></type> <name pos:start="1293:13" pos:end="1293:18">offset</name></decl></parameter>)</parameter_list>
    <block pos:start="1294:5" pos:end="1402:5">{<block_content pos:start="1295:9" pos:end="1401:36">
        <decl_stmt pos:start="1295:9" pos:end="1295:68"><decl pos:start="1295:9" pos:end="1295:67"><type pos:start="1295:9" pos:end="1295:13"><name pos:start="1295:9" pos:end="1295:13">UCHAR</name></type> <name pos:start="1295:15" pos:end="1295:67"><name pos:start="1295:15" pos:end="1295:21">wep_key</name><index pos:start="1295:22" pos:end="1295:67">[<expr pos:start="1295:23" pos:end="1295:66"><name pos:start="1295:23" pos:end="1295:45">AIRPDCAP_WEP_KEY_MAXLEN</name> <operator pos:start="1295:47" pos:end="1295:47">+</operator> <name pos:start="1295:49" pos:end="1295:66">AIRPDCAP_WEP_IVLEN</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="1296:9" pos:end="1296:22"><decl pos:start="1296:9" pos:end="1296:21"><type pos:start="1296:9" pos:end="1296:14"><name pos:start="1296:9" pos:end="1296:14">size_t</name></type> <name pos:start="1296:16" pos:end="1296:21">keylen</name></decl>;</decl_stmt>
        <decl_stmt pos:start="1297:9" pos:end="1297:26"><decl pos:start="1297:9" pos:end="1297:25"><type pos:start="1297:9" pos:end="1297:11"><name pos:start="1297:9" pos:end="1297:11">INT</name></type> <name pos:start="1297:13" pos:end="1297:21">ret_value</name> <init pos:start="1297:23" pos:end="1297:25">= <expr pos:start="1297:25" pos:end="1297:25"><literal type="number" pos:start="1297:25" pos:end="1297:25">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="1298:9" pos:end="1298:22"><decl pos:start="1298:9" pos:end="1298:21"><type pos:start="1298:9" pos:end="1298:11"><name pos:start="1298:9" pos:end="1298:11">INT</name></type> <name pos:start="1298:13" pos:end="1298:21">key_index</name></decl>;</decl_stmt>
        <decl_stmt pos:start="1299:9" pos:end="1299:35"><decl pos:start="1299:9" pos:end="1299:34"><type pos:start="1299:9" pos:end="1299:27"><name pos:start="1299:9" pos:end="1299:25">AIRPDCAP_KEY_ITEM</name> <modifier pos:start="1299:27" pos:end="1299:27">*</modifier></type><name pos:start="1299:28" pos:end="1299:34">tmp_key</name></decl>;</decl_stmt>
        <decl_stmt pos:start="1300:9" pos:end="1300:31"><decl pos:start="1300:9" pos:end="1300:30"><type pos:start="1300:9" pos:end="1300:13"><name pos:start="1300:9" pos:end="1300:13">UINT8</name></type> <name pos:start="1300:15" pos:end="1300:22">useCache</name> <init pos:start="1300:24" pos:end="1300:30">= <expr pos:start="1300:26" pos:end="1300:30"><name pos:start="1300:26" pos:end="1300:30">FALSE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="1301:9" pos:end="1301:24"><decl pos:start="1301:9" pos:end="1301:23"><type pos:start="1301:9" pos:end="1301:15"><name pos:start="1301:9" pos:end="1301:13">UCHAR</name> <modifier pos:start="1301:15" pos:end="1301:15">*</modifier></type><name pos:start="1301:16" pos:end="1301:23">try_data</name></decl>;</decl_stmt>
        <decl_stmt pos:start="1302:9" pos:end="1302:42"><decl pos:start="1302:9" pos:end="1302:41"><type pos:start="1302:9" pos:end="1302:13"><name pos:start="1302:9" pos:end="1302:13">guint</name></type> <name pos:start="1302:15" pos:end="1302:26">try_data_len</name> <init pos:start="1302:28" pos:end="1302:41">= <expr pos:start="1302:30" pos:end="1302:41"><operator pos:start="1302:30" pos:end="1302:30">*</operator><name pos:start="1302:31" pos:end="1302:41">decrypt_len</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="1304:9" pos:end="1304:51"><expr pos:start="1304:9" pos:end="1304:50"><name pos:start="1304:9" pos:end="1304:16">try_data</name> <operator pos:start="1304:18" pos:end="1304:18">=</operator> <operator pos:start="1304:20" pos:end="1304:20">(</operator><name pos:start="1304:21" pos:end="1304:25">UCHAR</name> <operator pos:start="1304:27" pos:end="1304:27">*</operator><operator pos:start="1304:28" pos:end="1304:28">)</operator><call pos:start="1304:29" pos:end="1304:50"><name pos:start="1304:29" pos:end="1304:36">g_malloc</name><argument_list pos:start="1304:37" pos:end="1304:50">(<argument pos:start="1304:38" pos:end="1304:49"><expr pos:start="1304:38" pos:end="1304:49"><name pos:start="1304:38" pos:end="1304:49">try_data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1306:9" pos:end="1307:28"><if pos:start="1306:9" pos:end="1307:28">if <condition pos:start="1306:12" pos:end="1306:28">(<expr pos:start="1306:13" pos:end="1306:27"><name pos:start="1306:13" pos:end="1306:19"><name pos:start="1306:13" pos:end="1306:14">sa</name><operator pos:start="1306:15" pos:end="1306:16">-&gt;</operator><name pos:start="1306:17" pos:end="1306:19">key</name></name> <operator pos:start="1306:21" pos:end="1306:22">!=</operator> <name pos:start="1306:24" pos:end="1306:27">NULL</name></expr>)</condition><block type="pseudo" pos:start="1307:13" pos:end="1307:28"><block_content pos:start="1307:13" pos:end="1307:28">
            <expr_stmt pos:start="1307:13" pos:end="1307:28"><expr pos:start="1307:13" pos:end="1307:27"><name pos:start="1307:13" pos:end="1307:20">useCache</name> <operator pos:start="1307:22" pos:end="1307:22">=</operator> <name pos:start="1307:24" pos:end="1307:27">TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <for pos:start="1309:9" pos:end="1376:9">for <control pos:start="1309:13" pos:end="1309:71">(<init pos:start="1309:14" pos:end="1309:27"><expr pos:start="1309:14" pos:end="1309:26"><name pos:start="1309:14" pos:end="1309:22">key_index</name> <operator pos:start="1309:24" pos:end="1309:24">=</operator> <literal type="number" pos:start="1309:26" pos:end="1309:26">0</literal></expr>;</init> <condition pos:start="1309:29" pos:end="1309:58"><expr pos:start="1309:29" pos:end="1309:57"><name pos:start="1309:29" pos:end="1309:37">key_index</name> <operator pos:start="1309:39" pos:end="1309:39">&lt;</operator> <operator pos:start="1309:41" pos:end="1309:41">(</operator><name pos:start="1309:42" pos:end="1309:44">INT</name><operator pos:start="1309:45" pos:end="1309:45">)</operator><name pos:start="1309:46" pos:end="1309:57"><name pos:start="1309:46" pos:end="1309:48">ctx</name><operator pos:start="1309:49" pos:end="1309:50">-&gt;</operator><name pos:start="1309:51" pos:end="1309:57">keys_nr</name></name></expr>;</condition> <incr pos:start="1309:60" pos:end="1309:70"><expr pos:start="1309:60" pos:end="1309:70"><name pos:start="1309:60" pos:end="1309:68">key_index</name><operator pos:start="1309:69" pos:end="1309:70">++</operator></expr></incr>)</control>
        <block pos:start="1310:9" pos:end="1376:9">{<block_content pos:start="1312:13" pos:end="1375:13">
            <comment type="block" pos:start="1311:13" pos:end="1311:53">/* use the cached one, or try all keys */</comment>
            <if_stmt pos:start="1312:13" pos:end="1328:13"><if pos:start="1312:13" pos:end="1315:13">if <condition pos:start="1312:16" pos:end="1312:26">(<expr pos:start="1312:17" pos:end="1312:25"><operator pos:start="1312:17" pos:end="1312:17">!</operator><name pos:start="1312:18" pos:end="1312:25">useCache</name></expr>)</condition>
            <block pos:start="1313:13" pos:end="1315:13">{<block_content pos:start="1314:17" pos:end="1314:48">
                <expr_stmt pos:start="1314:17" pos:end="1314:48"><expr pos:start="1314:17" pos:end="1314:47"><name pos:start="1314:17" pos:end="1314:23">tmp_key</name> <operator pos:start="1314:25" pos:end="1314:25">=</operator> <operator pos:start="1314:27" pos:end="1314:27">&amp;</operator><name pos:start="1314:28" pos:end="1314:47"><name pos:start="1314:28" pos:end="1314:30">ctx</name><operator pos:start="1314:31" pos:end="1314:32">-&gt;</operator><name pos:start="1314:33" pos:end="1314:36">keys</name><index pos:start="1314:37" pos:end="1314:47">[<expr pos:start="1314:38" pos:end="1314:46"><name pos:start="1314:38" pos:end="1314:46">key_index</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else pos:start="1316:13" pos:end="1328:13">else
            <block pos:start="1317:13" pos:end="1328:13">{<block_content pos:start="1318:17" pos:end="1327:17">
                <if_stmt pos:start="1318:17" pos:end="1327:17"><if pos:start="1318:17" pos:end="1322:17">if <condition pos:start="1318:20" pos:end="1318:81">(<expr pos:start="1318:21" pos:end="1318:80"><name pos:start="1318:21" pos:end="1318:27"><name pos:start="1318:21" pos:end="1318:22">sa</name><operator pos:start="1318:23" pos:end="1318:24">-&gt;</operator><name pos:start="1318:25" pos:end="1318:27">key</name></name> <operator pos:start="1318:29" pos:end="1318:30">!=</operator> <name pos:start="1318:32" pos:end="1318:35">NULL</name> <operator pos:start="1318:37" pos:end="1318:38">&amp;&amp;</operator> <name pos:start="1318:40" pos:end="1318:55"><name pos:start="1318:40" pos:end="1318:41">sa</name><operator pos:start="1318:42" pos:end="1318:43">-&gt;</operator><name pos:start="1318:44" pos:end="1318:46">key</name><operator pos:start="1318:47" pos:end="1318:48">-&gt;</operator><name pos:start="1318:49" pos:end="1318:55">KeyType</name></name> <operator pos:start="1318:57" pos:end="1318:58">==</operator> <name pos:start="1318:60" pos:end="1318:80">AIRPDCAP_KEY_TYPE_WEP</name></expr>)</condition>
                <block pos:start="1319:17" pos:end="1322:17">{<block_content pos:start="1320:21" pos:end="1321:38">
                    <expr_stmt pos:start="1320:21" pos:end="1320:113"><expr pos:start="1320:21" pos:end="1320:112"><call pos:start="1320:21" pos:end="1320:112"><name pos:start="1320:21" pos:end="1320:45">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1320:46" pos:end="1320:112">(<argument pos:start="1320:47" pos:end="1320:62"><expr pos:start="1320:47" pos:end="1320:62"><literal type="string" pos:start="1320:47" pos:end="1320:62">"AirPDcapWepMng"</literal></expr></argument>, <argument pos:start="1320:65" pos:end="1320:87"><expr pos:start="1320:65" pos:end="1320:87"><literal type="string" pos:start="1320:65" pos:end="1320:87">"Try cached WEP key..."</literal></expr></argument>, <argument pos:start="1320:90" pos:end="1320:111"><expr pos:start="1320:90" pos:end="1320:111"><name pos:start="1320:90" pos:end="1320:111">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1321:21" pos:end="1321:38"><expr pos:start="1321:21" pos:end="1321:37"><name pos:start="1321:21" pos:end="1321:27">tmp_key</name> <operator pos:start="1321:29" pos:end="1321:29">=</operator> <name pos:start="1321:31" pos:end="1321:37"><name pos:start="1321:31" pos:end="1321:32">sa</name><operator pos:start="1321:33" pos:end="1321:34">-&gt;</operator><name pos:start="1321:35" pos:end="1321:37">key</name></name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else pos:start="1323:17" pos:end="1327:17">else
                <block pos:start="1324:17" pos:end="1327:17">{<block_content pos:start="1325:21" pos:end="1326:52">
                    <expr_stmt pos:start="1325:21" pos:end="1325:139"><expr pos:start="1325:21" pos:end="1325:138"><call pos:start="1325:21" pos:end="1325:138"><name pos:start="1325:21" pos:end="1325:45">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1325:46" pos:end="1325:138">(<argument pos:start="1325:47" pos:end="1325:62"><expr pos:start="1325:47" pos:end="1325:62"><literal type="string" pos:start="1325:47" pos:end="1325:62">"AirPDcapWepMng"</literal></expr></argument>, <argument pos:start="1325:65" pos:end="1325:113"><expr pos:start="1325:65" pos:end="1325:113"><literal type="string" pos:start="1325:65" pos:end="1325:113">"Cached key is not valid, try another WEP key..."</literal></expr></argument>, <argument pos:start="1325:116" pos:end="1325:137"><expr pos:start="1325:116" pos:end="1325:137"><name pos:start="1325:116" pos:end="1325:137">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1326:21" pos:end="1326:52"><expr pos:start="1326:21" pos:end="1326:51"><name pos:start="1326:21" pos:end="1326:27">tmp_key</name> <operator pos:start="1326:29" pos:end="1326:29">=</operator> <operator pos:start="1326:31" pos:end="1326:31">&amp;</operator><name pos:start="1326:32" pos:end="1326:51"><name pos:start="1326:32" pos:end="1326:34">ctx</name><operator pos:start="1326:35" pos:end="1326:36">-&gt;</operator><name pos:start="1326:37" pos:end="1326:40">keys</name><index pos:start="1326:41" pos:end="1326:51">[<expr pos:start="1326:42" pos:end="1326:50"><name pos:start="1326:42" pos:end="1326:50">key_index</name></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="block" pos:start="1330:13" pos:end="1330:49">/* obviously, try only WEP keys... */</comment>
            <if_stmt pos:start="1331:13" pos:end="1350:13"><if pos:start="1331:13" pos:end="1350:13">if <condition pos:start="1331:16" pos:end="1331:58">(<expr pos:start="1331:17" pos:end="1331:57"><name pos:start="1331:17" pos:end="1331:32"><name pos:start="1331:17" pos:end="1331:23">tmp_key</name><operator pos:start="1331:24" pos:end="1331:25">-&gt;</operator><name pos:start="1331:26" pos:end="1331:32">KeyType</name></name> <operator pos:start="1331:34" pos:end="1331:35">==</operator> <name pos:start="1331:37" pos:end="1331:57">AIRPDCAP_KEY_TYPE_WEP</name></expr>)</condition>
            <block pos:start="1332:13" pos:end="1350:13">{<block_content pos:start="1333:17" pos:end="1349:65">
                <expr_stmt pos:start="1333:17" pos:end="1333:102"><expr pos:start="1333:17" pos:end="1333:101"><call pos:start="1333:17" pos:end="1333:101"><name pos:start="1333:17" pos:end="1333:41">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1333:42" pos:end="1333:101">(<argument pos:start="1333:43" pos:end="1333:58"><expr pos:start="1333:43" pos:end="1333:58"><literal type="string" pos:start="1333:43" pos:end="1333:58">"AirPDcapWepMng"</literal></expr></argument>, <argument pos:start="1333:61" pos:end="1333:76"><expr pos:start="1333:61" pos:end="1333:76"><literal type="string" pos:start="1333:61" pos:end="1333:76">"Try WEP key..."</literal></expr></argument>, <argument pos:start="1333:79" pos:end="1333:100"><expr pos:start="1333:79" pos:end="1333:100"><name pos:start="1333:79" pos:end="1333:100">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1335:17" pos:end="1335:52"><expr pos:start="1335:17" pos:end="1335:51"><call pos:start="1335:17" pos:end="1335:51"><name pos:start="1335:17" pos:end="1335:22">memset</name><argument_list pos:start="1335:23" pos:end="1335:51">(<argument pos:start="1335:24" pos:end="1335:30"><expr pos:start="1335:24" pos:end="1335:30"><name pos:start="1335:24" pos:end="1335:30">wep_key</name></expr></argument>, <argument pos:start="1335:33" pos:end="1335:33"><expr pos:start="1335:33" pos:end="1335:33"><literal type="number" pos:start="1335:33" pos:end="1335:33">0</literal></expr></argument>, <argument pos:start="1335:36" pos:end="1335:50"><expr pos:start="1335:36" pos:end="1335:50"><sizeof pos:start="1335:36" pos:end="1335:50">sizeof<argument_list pos:start="1335:42" pos:end="1335:50">(<argument pos:start="1335:43" pos:end="1335:49"><expr pos:start="1335:43" pos:end="1335:49"><name pos:start="1335:43" pos:end="1335:49">wep_key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1336:17" pos:end="1336:61"><expr pos:start="1336:17" pos:end="1336:60"><call pos:start="1336:17" pos:end="1336:60"><name pos:start="1336:17" pos:end="1336:22">memcpy</name><argument_list pos:start="1336:23" pos:end="1336:60">(<argument pos:start="1336:24" pos:end="1336:31"><expr pos:start="1336:24" pos:end="1336:31"><name pos:start="1336:24" pos:end="1336:31">try_data</name></expr></argument>, <argument pos:start="1336:34" pos:end="1336:45"><expr pos:start="1336:34" pos:end="1336:45"><name pos:start="1336:34" pos:end="1336:45">decrypt_data</name></expr></argument>, <argument pos:start="1336:48" pos:end="1336:59"><expr pos:start="1336:48" pos:end="1336:59"><operator pos:start="1336:48" pos:end="1336:48">*</operator><name pos:start="1336:49" pos:end="1336:59">decrypt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="1338:17" pos:end="1338:138">/* Costruct the WEP seed: copy the IV in first 3 bytes and then the WEP key (refer to 802-11i-2004, 8.2.1.4.3, pag. 36) */</comment>
                <expr_stmt pos:start="1339:17" pos:end="1339:79"><expr pos:start="1339:17" pos:end="1339:78"><call pos:start="1339:17" pos:end="1339:78"><name pos:start="1339:17" pos:end="1339:22">memcpy</name><argument_list pos:start="1339:23" pos:end="1339:78">(<argument pos:start="1339:24" pos:end="1339:30"><expr pos:start="1339:24" pos:end="1339:30"><name pos:start="1339:24" pos:end="1339:30">wep_key</name></expr></argument>, <argument pos:start="1339:33" pos:end="1339:57"><expr pos:start="1339:33" pos:end="1339:57"><name pos:start="1339:33" pos:end="1339:40">try_data</name> <operator pos:start="1339:42" pos:end="1339:42">+</operator> <name pos:start="1339:44" pos:end="1339:57">mac_header_len</name></expr></argument>, <argument pos:start="1339:60" pos:end="1339:77"><expr pos:start="1339:60" pos:end="1339:77"><name pos:start="1339:60" pos:end="1339:77">AIRPDCAP_WEP_IVLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1340:17" pos:end="1340:56"><expr pos:start="1340:17" pos:end="1340:55"><name pos:start="1340:17" pos:end="1340:22">keylen</name> <operator pos:start="1340:24" pos:end="1340:24">=</operator> <name pos:start="1340:26" pos:end="1340:55"><name pos:start="1340:26" pos:end="1340:32">tmp_key</name><operator pos:start="1340:33" pos:end="1340:34">-&gt;</operator><name pos:start="1340:35" pos:end="1340:41">KeyData</name><operator pos:start="1340:42" pos:end="1340:42">.</operator><name pos:start="1340:43" pos:end="1340:45">Wep</name><operator pos:start="1340:46" pos:end="1340:46">.</operator><name pos:start="1340:47" pos:end="1340:55">WepKeyLen</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="1341:17" pos:end="1341:90"><expr pos:start="1341:17" pos:end="1341:89"><call pos:start="1341:17" pos:end="1341:89"><name pos:start="1341:17" pos:end="1341:22">memcpy</name><argument_list pos:start="1341:23" pos:end="1341:89">(<argument pos:start="1341:24" pos:end="1341:51"><expr pos:start="1341:24" pos:end="1341:51"><name pos:start="1341:24" pos:end="1341:30">wep_key</name> <operator pos:start="1341:32" pos:end="1341:32">+</operator> <name pos:start="1341:34" pos:end="1341:51">AIRPDCAP_WEP_IVLEN</name></expr></argument>, <argument pos:start="1341:54" pos:end="1341:80"><expr pos:start="1341:54" pos:end="1341:80"><name pos:start="1341:54" pos:end="1341:80"><name pos:start="1341:54" pos:end="1341:60">tmp_key</name><operator pos:start="1341:61" pos:end="1341:62">-&gt;</operator><name pos:start="1341:63" pos:end="1341:69">KeyData</name><operator pos:start="1341:70" pos:end="1341:70">.</operator><name pos:start="1341:71" pos:end="1341:73">Wep</name><operator pos:start="1341:74" pos:end="1341:74">.</operator><name pos:start="1341:75" pos:end="1341:80">WepKey</name></name></expr></argument>, <argument pos:start="1341:83" pos:end="1341:88"><expr pos:start="1341:83" pos:end="1341:88"><name pos:start="1341:83" pos:end="1341:88">keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1343:17" pos:end="1346:142"><expr pos:start="1343:17" pos:end="1346:141"><name pos:start="1343:17" pos:end="1343:25">ret_value</name> <operator pos:start="1343:27" pos:end="1343:27">=</operator> <call pos:start="1343:29" pos:end="1346:141"><name pos:start="1343:29" pos:end="1343:46">AirPDcapWepDecrypt</name><argument_list pos:start="1343:47" pos:end="1346:141">(<argument pos:start="1343:48" pos:end="1343:54"><expr pos:start="1343:48" pos:end="1343:54"><name pos:start="1343:48" pos:end="1343:54">wep_key</name></expr></argument>,
                                               <argument pos:start="1344:48" pos:end="1344:74"><expr pos:start="1344:48" pos:end="1344:74"><name pos:start="1344:48" pos:end="1344:53">keylen</name> <operator pos:start="1344:55" pos:end="1344:55">+</operator> <name pos:start="1344:57" pos:end="1344:74">AIRPDCAP_WEP_IVLEN</name></expr></argument>,
                                               <argument pos:start="1345:48" pos:end="1345:117"><expr pos:start="1345:48" pos:end="1345:117"><name pos:start="1345:48" pos:end="1345:55">try_data</name> <operator pos:start="1345:57" pos:end="1345:57">+</operator> <operator pos:start="1345:59" pos:end="1345:59">(</operator><name pos:start="1345:60" pos:end="1345:73">mac_header_len</name> <operator pos:start="1345:75" pos:end="1345:75">+</operator> <name pos:start="1345:77" pos:end="1345:94">AIRPDCAP_WEP_IVLEN</name> <operator pos:start="1345:96" pos:end="1345:96">+</operator> <name pos:start="1345:98" pos:end="1345:116">AIRPDCAP_WEP_KIDLEN</name><operator pos:start="1345:117" pos:end="1345:117">)</operator></expr></argument>,
                                               <argument pos:start="1346:48" pos:end="1346:140"><expr pos:start="1346:48" pos:end="1346:140"><operator pos:start="1346:48" pos:end="1346:48">*</operator><name pos:start="1346:49" pos:end="1346:59">decrypt_len</name> <operator pos:start="1346:61" pos:end="1346:61">-</operator> <operator pos:start="1346:63" pos:end="1346:63">(</operator><name pos:start="1346:64" pos:end="1346:77">mac_header_len</name> <operator pos:start="1346:79" pos:end="1346:79">+</operator> <name pos:start="1346:81" pos:end="1346:98">AIRPDCAP_WEP_IVLEN</name> <operator pos:start="1346:100" pos:end="1346:100">+</operator> <name pos:start="1346:102" pos:end="1346:120">AIRPDCAP_WEP_KIDLEN</name> <operator pos:start="1346:122" pos:end="1346:122">+</operator> <name pos:start="1346:124" pos:end="1346:139">AIRPDCAP_CRC_LEN</name><operator pos:start="1346:140" pos:end="1346:140">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1348:17" pos:end="1349:65"><if pos:start="1348:17" pos:end="1349:65">if <condition pos:start="1348:20" pos:end="1348:54">(<expr pos:start="1348:21" pos:end="1348:53"><name pos:start="1348:21" pos:end="1348:29">ret_value</name> <operator pos:start="1348:31" pos:end="1348:32">==</operator> <name pos:start="1348:34" pos:end="1348:53">AIRPDCAP_RET_SUCCESS</name></expr>)</condition><block type="pseudo" pos:start="1349:21" pos:end="1349:65"><block_content pos:start="1349:21" pos:end="1349:65">
                    <expr_stmt pos:start="1349:21" pos:end="1349:65"><expr pos:start="1349:21" pos:end="1349:64"><call pos:start="1349:21" pos:end="1349:64"><name pos:start="1349:21" pos:end="1349:26">memcpy</name><argument_list pos:start="1349:27" pos:end="1349:64">(<argument pos:start="1349:28" pos:end="1349:39"><expr pos:start="1349:28" pos:end="1349:39"><name pos:start="1349:28" pos:end="1349:39">decrypt_data</name></expr></argument>, <argument pos:start="1349:42" pos:end="1349:49"><expr pos:start="1349:42" pos:end="1349:49"><name pos:start="1349:42" pos:end="1349:49">try_data</name></expr></argument>, <argument pos:start="1349:52" pos:end="1349:63"><expr pos:start="1349:52" pos:end="1349:63"><operator pos:start="1349:52" pos:end="1349:52">*</operator><name pos:start="1349:53" pos:end="1349:63">decrypt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="1352:13" pos:end="1375:13"><if pos:start="1352:13" pos:end="1365:13">if <condition pos:start="1352:16" pos:end="1352:72">(<expr pos:start="1352:17" pos:end="1352:71"><operator pos:start="1352:17" pos:end="1352:17">!</operator><name pos:start="1352:18" pos:end="1352:26">ret_value</name> <operator pos:start="1352:28" pos:end="1352:29">&amp;&amp;</operator> <name pos:start="1352:31" pos:end="1352:46"><name pos:start="1352:31" pos:end="1352:37">tmp_key</name><operator pos:start="1352:38" pos:end="1352:39">-&gt;</operator><name pos:start="1352:40" pos:end="1352:46">KeyType</name></name> <operator pos:start="1352:48" pos:end="1352:49">==</operator> <name pos:start="1352:51" pos:end="1352:71">AIRPDCAP_KEY_TYPE_WEP</name></expr>)</condition>
            <block pos:start="1353:13" pos:end="1365:13">{<block_content pos:start="1356:17" pos:end="1364:22">
                <comment type="block" pos:start="1354:17" pos:end="1354:90">/* the tried key is the correct one, cached in the Security Association */</comment>

                <expr_stmt pos:start="1356:17" pos:end="1356:34"><expr pos:start="1356:17" pos:end="1356:33"><name pos:start="1356:17" pos:end="1356:23"><name pos:start="1356:17" pos:end="1356:18">sa</name><operator pos:start="1356:19" pos:end="1356:20">-&gt;</operator><name pos:start="1356:21" pos:end="1356:23">key</name></name> <operator pos:start="1356:25" pos:end="1356:25">=</operator> <name pos:start="1356:27" pos:end="1356:33">tmp_key</name></expr>;</expr_stmt>

                <if_stmt pos:start="1358:17" pos:end="1362:17"><if pos:start="1358:17" pos:end="1362:17">if <condition pos:start="1358:20" pos:end="1358:32">(<expr pos:start="1358:21" pos:end="1358:31"><name pos:start="1358:21" pos:end="1358:23">key</name> <operator pos:start="1358:25" pos:end="1358:26">!=</operator> <name pos:start="1358:28" pos:end="1358:31">NULL</name></expr>)</condition>
                <block pos:start="1359:17" pos:end="1362:17">{<block_content pos:start="1360:21" pos:end="1361:57">
                    <expr_stmt pos:start="1360:21" pos:end="1360:68"><expr pos:start="1360:21" pos:end="1360:67"><call pos:start="1360:21" pos:end="1360:67"><name pos:start="1360:21" pos:end="1360:26">memcpy</name><argument_list pos:start="1360:27" pos:end="1360:67">(<argument pos:start="1360:28" pos:end="1360:30"><expr pos:start="1360:28" pos:end="1360:30"><name pos:start="1360:28" pos:end="1360:30">key</name></expr></argument>, <argument pos:start="1360:33" pos:end="1360:39"><expr pos:start="1360:33" pos:end="1360:39"><name pos:start="1360:33" pos:end="1360:39"><name pos:start="1360:33" pos:end="1360:34">sa</name><operator pos:start="1360:35" pos:end="1360:36">-&gt;</operator><name pos:start="1360:37" pos:end="1360:39">key</name></name></expr></argument>, <argument pos:start="1360:42" pos:end="1360:66"><expr pos:start="1360:42" pos:end="1360:66"><sizeof pos:start="1360:42" pos:end="1360:66">sizeof<argument_list pos:start="1360:48" pos:end="1360:66">(<argument pos:start="1360:49" pos:end="1360:65"><expr pos:start="1360:49" pos:end="1360:65"><name pos:start="1360:49" pos:end="1360:65">AIRPDCAP_KEY_ITEM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1361:21" pos:end="1361:57"><expr pos:start="1361:21" pos:end="1361:56"><name pos:start="1361:21" pos:end="1361:32"><name pos:start="1361:21" pos:end="1361:23">key</name><operator pos:start="1361:24" pos:end="1361:25">-&gt;</operator><name pos:start="1361:26" pos:end="1361:32">KeyType</name></name> <operator pos:start="1361:34" pos:end="1361:34">=</operator> <name pos:start="1361:36" pos:end="1361:56">AIRPDCAP_KEY_TYPE_WEP</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <break pos:start="1364:17" pos:end="1364:22">break;</break>
            </block_content>}</block></if>
            <else pos:start="1366:13" pos:end="1375:13">else
            <block pos:start="1367:13" pos:end="1375:13">{<block_content pos:start="1370:17" pos:end="1374:17">
                <comment type="block" pos:start="1368:17" pos:end="1368:66">/* the cached key was not valid, try other keys */</comment>

                <if_stmt pos:start="1370:17" pos:end="1374:17"><if pos:start="1370:17" pos:end="1374:17">if <condition pos:start="1370:20" pos:end="1370:37">(<expr pos:start="1370:21" pos:end="1370:36"><name pos:start="1370:21" pos:end="1370:28">useCache</name> <operator pos:start="1370:30" pos:end="1370:31">==</operator> <name pos:start="1370:33" pos:end="1370:36">TRUE</name></expr>)</condition>
                <block pos:start="1371:17" pos:end="1374:17">{<block_content pos:start="1372:21" pos:end="1373:32">
                    <expr_stmt pos:start="1372:21" pos:end="1372:37"><expr pos:start="1372:21" pos:end="1372:36"><name pos:start="1372:21" pos:end="1372:28">useCache</name> <operator pos:start="1372:30" pos:end="1372:30">=</operator> <name pos:start="1372:32" pos:end="1372:36">FALSE</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="1373:21" pos:end="1373:32"><expr pos:start="1373:21" pos:end="1373:31"><name pos:start="1373:21" pos:end="1373:29">key_index</name><operator pos:start="1373:30" pos:end="1373:31">--</operator></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

        <expr_stmt pos:start="1378:9" pos:end="1378:25"><expr pos:start="1378:9" pos:end="1378:24"><call pos:start="1378:9" pos:end="1378:24"><name pos:start="1378:9" pos:end="1378:14">g_free</name><argument_list pos:start="1378:15" pos:end="1378:24">(<argument pos:start="1378:16" pos:end="1378:23"><expr pos:start="1378:16" pos:end="1378:23"><name pos:start="1378:16" pos:end="1378:23">try_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1379:9" pos:end="1380:42"><if pos:start="1379:9" pos:end="1380:42">if <condition pos:start="1379:12" pos:end="1379:22">(<expr pos:start="1379:13" pos:end="1379:21"><name pos:start="1379:13" pos:end="1379:21">ret_value</name></expr>)</condition><block type="pseudo" pos:start="1380:13" pos:end="1380:42"><block_content pos:start="1380:13" pos:end="1380:42">
            <return pos:start="1380:13" pos:end="1380:42">return <expr pos:start="1380:20" pos:end="1380:41"><name pos:start="1380:20" pos:end="1380:41">AIRPDCAP_RET_UNSUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1382:9" pos:end="1382:96"><expr pos:start="1382:9" pos:end="1382:95"><call pos:start="1382:9" pos:end="1382:95"><name pos:start="1382:9" pos:end="1382:33">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1382:34" pos:end="1382:95">(<argument pos:start="1382:35" pos:end="1382:50"><expr pos:start="1382:35" pos:end="1382:50"><literal type="string" pos:start="1382:35" pos:end="1382:50">"AirPDcapWepMng"</literal></expr></argument>, <argument pos:start="1382:53" pos:end="1382:70"><expr pos:start="1382:53" pos:end="1382:70"><literal type="string" pos:start="1382:53" pos:end="1382:70">"WEP DECRYPTED!!!"</literal></expr></argument>, <argument pos:start="1382:73" pos:end="1382:94"><expr pos:start="1382:73" pos:end="1382:94"><name pos:start="1382:73" pos:end="1382:94">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1384:9" pos:end="1384:56">/* remove ICV (4bytes) from the end of packet */</comment>
        <expr_stmt pos:start="1385:9" pos:end="1385:26"><expr pos:start="1385:9" pos:end="1385:25"><operator pos:start="1385:9" pos:end="1385:9">*</operator><name pos:start="1385:10" pos:end="1385:20">decrypt_len</name> <operator pos:start="1385:22" pos:end="1385:23">-=</operator> <literal type="number" pos:start="1385:25" pos:end="1385:25">4</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1387:9" pos:end="1391:9"><if pos:start="1387:9" pos:end="1391:9">if <condition pos:start="1387:12" pos:end="1387:29">(<expr pos:start="1387:13" pos:end="1387:28"><operator pos:start="1387:13" pos:end="1387:13">*</operator><name pos:start="1387:14" pos:end="1387:24">decrypt_len</name> <operator pos:start="1387:26" pos:end="1387:26">&lt;</operator> <literal type="number" pos:start="1387:28" pos:end="1387:28">4</literal></expr>)</condition>
        <block pos:start="1388:9" pos:end="1391:9">{<block_content pos:start="1389:13" pos:end="1390:42">
            <expr_stmt pos:start="1389:13" pos:end="1389:111"><expr pos:start="1389:13" pos:end="1389:110"><call pos:start="1389:13" pos:end="1389:110"><name pos:start="1389:13" pos:end="1389:37">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1389:38" pos:end="1389:110">(<argument pos:start="1389:39" pos:end="1389:54"><expr pos:start="1389:39" pos:end="1389:54"><literal type="string" pos:start="1389:39" pos:end="1389:54">"AirPDcapWepMng"</literal></expr></argument>, <argument pos:start="1389:57" pos:end="1389:85"><expr pos:start="1389:57" pos:end="1389:85"><literal type="string" pos:start="1389:57" pos:end="1389:85">"Decryption length too short"</literal></expr></argument>, <argument pos:start="1389:88" pos:end="1389:109"><expr pos:start="1389:88" pos:end="1389:109"><name pos:start="1389:88" pos:end="1389:109">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1390:13" pos:end="1390:42">return <expr pos:start="1390:20" pos:end="1390:41"><name pos:start="1390:20" pos:end="1390:41">AIRPDCAP_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1393:9" pos:end="1393:35">/* remove protection bit */</comment>
        <expr_stmt pos:start="1394:9" pos:end="1394:32"><expr pos:start="1394:9" pos:end="1394:31"><name pos:start="1394:9" pos:end="1394:23"><name pos:start="1394:9" pos:end="1394:20">decrypt_data</name><index pos:start="1394:21" pos:end="1394:23">[<expr pos:start="1394:22" pos:end="1394:22"><literal type="number" pos:start="1394:22" pos:end="1394:22">1</literal></expr>]</index></name> <operator pos:start="1394:25" pos:end="1394:26">&amp;=</operator> <literal type="number" pos:start="1394:28" pos:end="1394:31">0xBF</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="1396:9" pos:end="1396:30">/* remove IC header */</comment>
        <expr_stmt pos:start="1397:9" pos:end="1397:32"><expr pos:start="1397:9" pos:end="1397:31"><name pos:start="1397:9" pos:end="1397:14">offset</name> <operator pos:start="1397:16" pos:end="1397:16">=</operator> <name pos:start="1397:18" pos:end="1397:31">mac_header_len</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1398:9" pos:end="1398:26"><expr pos:start="1398:9" pos:end="1398:25"><operator pos:start="1398:9" pos:end="1398:9">*</operator><name pos:start="1398:10" pos:end="1398:20">decrypt_len</name> <operator pos:start="1398:22" pos:end="1398:23">-=</operator> <literal type="number" pos:start="1398:25" pos:end="1398:25">4</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1399:9" pos:end="1399:128"><expr pos:start="1399:9" pos:end="1399:127"><call pos:start="1399:9" pos:end="1399:127"><name pos:start="1399:9" pos:end="1399:15">memmove</name><argument_list pos:start="1399:16" pos:end="1399:127">(<argument pos:start="1399:17" pos:end="1399:37"><expr pos:start="1399:17" pos:end="1399:37"><name pos:start="1399:17" pos:end="1399:28">decrypt_data</name> <operator pos:start="1399:30" pos:end="1399:30">+</operator> <name pos:start="1399:32" pos:end="1399:37">offset</name></expr></argument>, <argument pos:start="1399:40" pos:end="1399:103"><expr pos:start="1399:40" pos:end="1399:103"><name pos:start="1399:40" pos:end="1399:51">decrypt_data</name> <operator pos:start="1399:53" pos:end="1399:53">+</operator> <name pos:start="1399:55" pos:end="1399:60">offset</name> <operator pos:start="1399:62" pos:end="1399:62">+</operator> <name pos:start="1399:64" pos:end="1399:81">AIRPDCAP_WEP_IVLEN</name> <operator pos:start="1399:83" pos:end="1399:83">+</operator> <name pos:start="1399:85" pos:end="1399:103">AIRPDCAP_WEP_KIDLEN</name></expr></argument>, <argument pos:start="1399:106" pos:end="1399:126"><expr pos:start="1399:106" pos:end="1399:126"><operator pos:start="1399:106" pos:end="1399:106">*</operator><name pos:start="1399:107" pos:end="1399:117">decrypt_len</name> <operator pos:start="1399:119" pos:end="1399:119">-</operator> <name pos:start="1399:121" pos:end="1399:126">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="1401:9" pos:end="1401:36">return <expr pos:start="1401:16" pos:end="1401:35"><name pos:start="1401:16" pos:end="1401:35">AIRPDCAP_RET_SUCCESS</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" pos:start="1404:5" pos:end="1404:52">/* Refer to IEEE 802.11i-2004, 8.5.3, pag. 85 */</comment>
    <function pos:start="1405:5" pos:end="1647:5"><type pos:start="1405:5" pos:end="1405:14"><specifier pos:start="1405:5" pos:end="1405:10">static</specifier> <name pos:start="1405:12" pos:end="1405:14">INT</name></type>
    <name pos:start="1406:5" pos:end="1406:27">AirPDcapRsna4WHandshake</name><parameter_list pos:start="1406:28" pos:end="1411:28">(
        <parameter pos:start="1407:9" pos:end="1407:29"><decl pos:start="1407:9" pos:end="1407:29"><type pos:start="1407:9" pos:end="1407:29"><name pos:start="1407:9" pos:end="1407:25">PAIRPDCAP_CONTEXT</name></type> <name pos:start="1407:27" pos:end="1407:29">ctx</name></decl></parameter>,
        <parameter pos:start="1408:9" pos:end="1408:25"><decl pos:start="1408:9" pos:end="1408:25"><type pos:start="1408:9" pos:end="1408:25"><specifier pos:start="1408:9" pos:end="1408:13">const</specifier> <name pos:start="1408:15" pos:end="1408:19">UCHAR</name> <modifier pos:start="1408:21" pos:end="1408:21">*</modifier></type><name pos:start="1408:22" pos:end="1408:25">data</name></decl></parameter>,
        <parameter pos:start="1409:9" pos:end="1409:36"><decl pos:start="1409:9" pos:end="1409:36"><type pos:start="1409:9" pos:end="1409:36"><name pos:start="1409:9" pos:end="1409:32">AIRPDCAP_SEC_ASSOCIATION</name> <modifier pos:start="1409:34" pos:end="1409:34">*</modifier></type><name pos:start="1409:35" pos:end="1409:36">sa</name></decl></parameter>,
        <parameter pos:start="1410:9" pos:end="1410:18"><decl pos:start="1410:9" pos:end="1410:18"><type pos:start="1410:9" pos:end="1410:18"><name pos:start="1410:9" pos:end="1410:11">INT</name></type> <name pos:start="1410:13" pos:end="1410:18">offset</name></decl></parameter>,
        <parameter pos:start="1411:9" pos:end="1411:27"><decl pos:start="1411:9" pos:end="1411:27"><type pos:start="1411:9" pos:end="1411:27"><specifier pos:start="1411:9" pos:end="1411:13">const</specifier> <name pos:start="1411:15" pos:end="1411:19">guint</name></type> <name pos:start="1411:21" pos:end="1411:27">tot_len</name></decl></parameter>)</parameter_list>
    <block pos:start="1412:5" pos:end="1647:5">{<block_content pos:start="1413:9" pos:end="1646:47">
        <decl_stmt pos:start="1413:9" pos:end="1413:58"><decl pos:start="1413:9" pos:end="1413:34"><type pos:start="1413:9" pos:end="1413:27"><name pos:start="1413:9" pos:end="1413:25">AIRPDCAP_KEY_ITEM</name> <modifier pos:start="1413:27" pos:end="1413:27">*</modifier></type><name pos:start="1413:28" pos:end="1413:34">tmp_key</name></decl>, <decl pos:start="1413:37" pos:end="1413:48"><type ref="prev" pos:start="1413:9" pos:end="1413:27"><modifier pos:start="1413:37" pos:end="1413:37">*</modifier></type><name pos:start="1413:38" pos:end="1413:48">tmp_pkt_key</name></decl>, <decl pos:start="1413:51" pos:end="1413:57"><type ref="prev" pos:start="1413:9" pos:end="1413:27"/><name pos:start="1413:51" pos:end="1413:57">pkt_key</name></decl>;</decl_stmt>
        <decl_stmt pos:start="1414:9" pos:end="1414:41"><decl pos:start="1414:9" pos:end="1414:40"><type pos:start="1414:9" pos:end="1414:34"><name pos:start="1414:9" pos:end="1414:32">AIRPDCAP_SEC_ASSOCIATION</name> <modifier pos:start="1414:34" pos:end="1414:34">*</modifier></type><name pos:start="1414:35" pos:end="1414:40">tmp_sa</name></decl>;</decl_stmt>
        <decl_stmt pos:start="1415:9" pos:end="1415:22"><decl pos:start="1415:9" pos:end="1415:21"><type pos:start="1415:9" pos:end="1415:11"><name pos:start="1415:9" pos:end="1415:11">INT</name></type> <name pos:start="1415:13" pos:end="1415:21">key_index</name></decl>;</decl_stmt>
        <decl_stmt pos:start="1416:9" pos:end="1416:26"><decl pos:start="1416:9" pos:end="1416:25"><type pos:start="1416:9" pos:end="1416:11"><name pos:start="1416:9" pos:end="1416:11">INT</name></type> <name pos:start="1416:13" pos:end="1416:21">ret_value</name> <init pos:start="1416:23" pos:end="1416:25">= <expr pos:start="1416:25" pos:end="1416:25"><literal type="number" pos:start="1416:25" pos:end="1416:25">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="1417:9" pos:end="1417:31"><decl pos:start="1417:9" pos:end="1417:30"><type pos:start="1417:9" pos:end="1417:13"><name pos:start="1417:9" pos:end="1417:13">UCHAR</name></type> <name pos:start="1417:15" pos:end="1417:22">useCache</name> <init pos:start="1417:24" pos:end="1417:30">= <expr pos:start="1417:26" pos:end="1417:30"><name pos:start="1417:26" pos:end="1417:30">FALSE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="1418:9" pos:end="1418:44"><decl pos:start="1418:9" pos:end="1418:43"><type pos:start="1418:9" pos:end="1418:13"><name pos:start="1418:9" pos:end="1418:13">UCHAR</name></type> <name pos:start="1418:15" pos:end="1418:43"><name pos:start="1418:15" pos:end="1418:19">eapol</name><index pos:start="1418:20" pos:end="1418:43">[<expr pos:start="1418:21" pos:end="1418:42"><name pos:start="1418:21" pos:end="1418:42">AIRPDCAP_EAPOL_MAX_LEN</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="1419:9" pos:end="1419:25"><decl pos:start="1419:9" pos:end="1419:24"><type pos:start="1419:9" pos:end="1419:14"><name pos:start="1419:9" pos:end="1419:14">USHORT</name></type> <name pos:start="1419:16" pos:end="1419:24">eapol_len</name></decl>;</decl_stmt>

        <if_stmt pos:start="1421:9" pos:end="1422:28"><if pos:start="1421:9" pos:end="1422:28">if <condition pos:start="1421:12" pos:end="1421:28">(<expr pos:start="1421:13" pos:end="1421:27"><name pos:start="1421:13" pos:end="1421:19"><name pos:start="1421:13" pos:end="1421:14">sa</name><operator pos:start="1421:15" pos:end="1421:16">-&gt;</operator><name pos:start="1421:17" pos:end="1421:19">key</name></name> <operator pos:start="1421:21" pos:end="1421:22">!=</operator> <name pos:start="1421:24" pos:end="1421:27">NULL</name></expr>)</condition><block type="pseudo" pos:start="1422:13" pos:end="1422:28"><block_content pos:start="1422:13" pos:end="1422:28">
            <expr_stmt pos:start="1422:13" pos:end="1422:28"><expr pos:start="1422:13" pos:end="1422:27"><name pos:start="1422:13" pos:end="1422:20">useCache</name> <operator pos:start="1422:22" pos:end="1422:22">=</operator> <name pos:start="1422:24" pos:end="1422:27">TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block" pos:start="1424:9" pos:end="1424:90">/* a 4-way handshake packet use a Pairwise key type (IEEE 802.11i-2004, pg. 79) */</comment>
        <if_stmt pos:start="1425:9" pos:end="1429:9"><if pos:start="1425:9" pos:end="1429:9">if <condition pos:start="1425:12" pos:end="1425:52">(<expr pos:start="1425:13" pos:end="1425:51"><call pos:start="1425:13" pos:end="1425:46"><name pos:start="1425:13" pos:end="1425:28">AIRPDCAP_EAP_KEY</name><argument_list pos:start="1425:29" pos:end="1425:46">(<argument pos:start="1425:30" pos:end="1425:45"><expr pos:start="1425:30" pos:end="1425:45"><name pos:start="1425:30" pos:end="1425:45"><name pos:start="1425:30" pos:end="1425:33">data</name><index pos:start="1425:34" pos:end="1425:45">[<expr pos:start="1425:35" pos:end="1425:44"><name pos:start="1425:35" pos:end="1425:40">offset</name> <operator pos:start="1425:42" pos:end="1425:42">+</operator> <literal type="number" pos:start="1425:44" pos:end="1425:44">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="1425:48" pos:end="1425:49">!=</operator> <literal type="number" pos:start="1425:51" pos:end="1425:51">1</literal></expr>)</condition>
        <block pos:start="1426:9" pos:end="1429:9">{<block_content pos:start="1427:13" pos:end="1428:51">
            <expr_stmt pos:start="1427:13" pos:end="1427:124"><expr pos:start="1427:13" pos:end="1427:123"><call pos:start="1427:13" pos:end="1427:123"><name pos:start="1427:13" pos:end="1427:37">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1427:38" pos:end="1427:123">(<argument pos:start="1427:39" pos:end="1427:63"><expr pos:start="1427:39" pos:end="1427:63"><literal type="string" pos:start="1427:39" pos:end="1427:63">"AirPDcapRsna4WHandshake"</literal></expr></argument>, <argument pos:start="1427:66" pos:end="1427:98"><expr pos:start="1427:66" pos:end="1427:98"><literal type="string" pos:start="1427:66" pos:end="1427:98">"Group/STAKey message (not used)"</literal></expr></argument>, <argument pos:start="1427:101" pos:end="1427:122"><expr pos:start="1427:101" pos:end="1427:122"><name pos:start="1427:101" pos:end="1427:122">AIRPDCAP_DEBUG_LEVEL_5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1428:13" pos:end="1428:51">return <expr pos:start="1428:20" pos:end="1428:50"><name pos:start="1428:20" pos:end="1428:50">AIRPDCAP_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1431:9" pos:end="1431:28">/* TODO timeouts? */</comment>

        <comment type="block" pos:start="1433:9" pos:end="1433:37">/* TODO consider key-index */</comment>

        <comment type="block" pos:start="1435:9" pos:end="1435:46">/* TODO considera Deauthentications */</comment>

        <expr_stmt pos:start="1437:9" pos:end="1437:107"><expr pos:start="1437:9" pos:end="1437:106"><call pos:start="1437:9" pos:end="1437:106"><name pos:start="1437:9" pos:end="1437:33">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1437:34" pos:end="1437:106">(<argument pos:start="1437:35" pos:end="1437:59"><expr pos:start="1437:35" pos:end="1437:59"><literal type="string" pos:start="1437:35" pos:end="1437:59">"AirPDcapRsna4WHandshake"</literal></expr></argument>, <argument pos:start="1437:62" pos:end="1437:81"><expr pos:start="1437:62" pos:end="1437:81"><literal type="string" pos:start="1437:62" pos:end="1437:81">"4-way handshake..."</literal></expr></argument>, <argument pos:start="1437:84" pos:end="1437:105"><expr pos:start="1437:84" pos:end="1437:105"><name pos:start="1437:84" pos:end="1437:105">AIRPDCAP_DEBUG_LEVEL_5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1439:9" pos:end="1439:128">/* manage 4-way handshake packets; this step completes the 802.1X authentication process (IEEE 802.11i-2004, pag. 85) */</comment>

        <comment type="block" pos:start="1441:9" pos:end="1441:128">/* message 1: Authenticator-&gt;Supplicant (Sec=0, Mic=0, Ack=1, Inst=0, Key=1(pairwise), KeyRSC=0, Nonce=ANonce, MIC=0) */</comment>
        <if_stmt pos:start="1442:9" pos:end="1471:9"><if pos:start="1442:9" pos:end="1471:9">if <condition pos:start="1442:12" pos:end="1444:48">(<expr pos:start="1442:13" pos:end="1444:47"><call pos:start="1442:13" pos:end="1442:47"><name pos:start="1442:13" pos:end="1442:29">AIRPDCAP_EAP_INST</name><argument_list pos:start="1442:30" pos:end="1442:47">(<argument pos:start="1442:31" pos:end="1442:46"><expr pos:start="1442:31" pos:end="1442:46"><name pos:start="1442:31" pos:end="1442:46"><name pos:start="1442:31" pos:end="1442:34">data</name><index pos:start="1442:35" pos:end="1442:46">[<expr pos:start="1442:36" pos:end="1442:45"><name pos:start="1442:36" pos:end="1442:41">offset</name> <operator pos:start="1442:43" pos:end="1442:43">+</operator> <literal type="number" pos:start="1442:45" pos:end="1442:45">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="1442:49" pos:end="1442:50">==</operator> <literal type="number" pos:start="1442:52" pos:end="1442:52">0</literal> <operator pos:start="1442:54" pos:end="1442:55">&amp;&amp;</operator>
            <call pos:start="1443:13" pos:end="1443:46"><name pos:start="1443:13" pos:end="1443:28">AIRPDCAP_EAP_ACK</name><argument_list pos:start="1443:29" pos:end="1443:46">(<argument pos:start="1443:30" pos:end="1443:45"><expr pos:start="1443:30" pos:end="1443:45"><name pos:start="1443:30" pos:end="1443:45"><name pos:start="1443:30" pos:end="1443:33">data</name><index pos:start="1443:34" pos:end="1443:45">[<expr pos:start="1443:35" pos:end="1443:44"><name pos:start="1443:35" pos:end="1443:40">offset</name> <operator pos:start="1443:42" pos:end="1443:42">+</operator> <literal type="number" pos:start="1443:44" pos:end="1443:44">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="1443:48" pos:end="1443:49">==</operator> <literal type="number" pos:start="1443:51" pos:end="1443:51">1</literal> <operator pos:start="1443:53" pos:end="1443:54">&amp;&amp;</operator>
            <call pos:start="1444:13" pos:end="1444:42"><name pos:start="1444:13" pos:end="1444:28">AIRPDCAP_EAP_MIC</name><argument_list pos:start="1444:29" pos:end="1444:42">(<argument pos:start="1444:30" pos:end="1444:41"><expr pos:start="1444:30" pos:end="1444:41"><name pos:start="1444:30" pos:end="1444:41"><name pos:start="1444:30" pos:end="1444:33">data</name><index pos:start="1444:34" pos:end="1444:41">[<expr pos:start="1444:35" pos:end="1444:40"><name pos:start="1444:35" pos:end="1444:40">offset</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="1444:44" pos:end="1444:45">==</operator> <literal type="number" pos:start="1444:47" pos:end="1444:47">0</literal></expr>)</condition>
        <block pos:start="1445:9" pos:end="1471:9">{<block_content pos:start="1446:13" pos:end="1470:50">
            <expr_stmt pos:start="1446:13" pos:end="1446:118"><expr pos:start="1446:13" pos:end="1446:117"><call pos:start="1446:13" pos:end="1446:117"><name pos:start="1446:13" pos:end="1446:37">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1446:38" pos:end="1446:117">(<argument pos:start="1446:39" pos:end="1446:63"><expr pos:start="1446:39" pos:end="1446:63"><literal type="string" pos:start="1446:39" pos:end="1446:63">"AirPDcapRsna4WHandshake"</literal></expr></argument>, <argument pos:start="1446:66" pos:end="1446:92"><expr pos:start="1446:66" pos:end="1446:92"><literal type="string" pos:start="1446:66" pos:end="1446:92">"4-way handshake message 1"</literal></expr></argument>, <argument pos:start="1446:95" pos:end="1446:116"><expr pos:start="1446:95" pos:end="1446:116"><name pos:start="1446:95" pos:end="1446:116">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="1448:13" pos:end="1448:129">/* On reception of Message 1, the Supplicant determines whether the Key Replay Counter field value has been        */</comment>
            <comment type="block" pos:start="1449:13" pos:end="1449:129">/* used before with the current PMKSA. If the Key Replay Counter field value is less than or equal to the current  */</comment>
            <comment type="block" pos:start="1450:13" pos:end="1450:129">/* local value, the Supplicant discards the message.                                                               */</comment>
            <comment type="block" pos:start="1451:13" pos:end="1451:129">/* -&gt; not checked, the Authenticator will be send another Message 1 (hopefully!)                                   */</comment>

            <comment type="block" pos:start="1453:13" pos:end="1453:104">/* This saves the sa since we are reauthenticating which will overwrite our current sa GCS*/</comment>
            <if_stmt pos:start="1454:13" pos:end="1460:13"><if pos:start="1454:13" pos:end="1460:13">if <condition pos:start="1454:16" pos:end="1454:35">(<expr pos:start="1454:17" pos:end="1454:34"><name pos:start="1454:17" pos:end="1454:29"><name pos:start="1454:17" pos:end="1454:18">sa</name><operator pos:start="1454:19" pos:end="1454:20">-&gt;</operator><name pos:start="1454:21" pos:end="1454:29">handshake</name></name> <operator pos:start="1454:31" pos:end="1454:32">&gt;=</operator> <literal type="number" pos:start="1454:34" pos:end="1454:34">2</literal></expr>)</condition>
            <block pos:start="1455:13" pos:end="1460:13">{<block_content pos:start="1456:17" pos:end="1459:34">
                <expr_stmt pos:start="1456:17" pos:end="1456:60"><expr pos:start="1456:17" pos:end="1456:59"><name pos:start="1456:17" pos:end="1456:22">tmp_sa</name> <operator pos:start="1456:24" pos:end="1456:24">=</operator> <call pos:start="1456:26" pos:end="1456:59"><name pos:start="1456:26" pos:end="1456:30">g_new</name><argument_list pos:start="1456:31" pos:end="1456:59">(<argument pos:start="1456:32" pos:end="1456:55"><expr pos:start="1456:32" pos:end="1456:55"><name pos:start="1456:32" pos:end="1456:55">AIRPDCAP_SEC_ASSOCIATION</name></expr></argument>, <argument pos:start="1456:58" pos:end="1456:58"><expr pos:start="1456:58" pos:end="1456:58"><literal type="number" pos:start="1456:58" pos:end="1456:58">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1457:17" pos:end="1457:69"><expr pos:start="1457:17" pos:end="1457:68"><call pos:start="1457:17" pos:end="1457:68"><name pos:start="1457:17" pos:end="1457:22">memcpy</name><argument_list pos:start="1457:23" pos:end="1457:68">(<argument pos:start="1457:24" pos:end="1457:29"><expr pos:start="1457:24" pos:end="1457:29"><name pos:start="1457:24" pos:end="1457:29">tmp_sa</name></expr></argument>, <argument pos:start="1457:32" pos:end="1457:33"><expr pos:start="1457:32" pos:end="1457:33"><name pos:start="1457:32" pos:end="1457:33">sa</name></expr></argument>, <argument pos:start="1457:36" pos:end="1457:67"><expr pos:start="1457:36" pos:end="1457:67"><sizeof pos:start="1457:36" pos:end="1457:67">sizeof<argument_list pos:start="1457:42" pos:end="1457:67">(<argument pos:start="1457:43" pos:end="1457:66"><expr pos:start="1457:43" pos:end="1457:66"><name pos:start="1457:43" pos:end="1457:66">AIRPDCAP_SEC_ASSOCIATION</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1458:17" pos:end="1458:37"><expr pos:start="1458:17" pos:end="1458:36"><name pos:start="1458:17" pos:end="1458:28"><name pos:start="1458:17" pos:end="1458:18">sa</name><operator pos:start="1458:19" pos:end="1458:20">-&gt;</operator><name pos:start="1458:21" pos:end="1458:28">validKey</name></name> <operator pos:start="1458:30" pos:end="1458:30">=</operator> <name pos:start="1458:32" pos:end="1458:36">FALSE</name></expr>;</expr_stmt>
                <expr_stmt pos:start="1459:17" pos:end="1459:34"><expr pos:start="1459:17" pos:end="1459:33"><name pos:start="1459:17" pos:end="1459:24"><name pos:start="1459:17" pos:end="1459:18">sa</name><operator pos:start="1459:19" pos:end="1459:20">-&gt;</operator><name pos:start="1459:21" pos:end="1459:24">next</name></name> <operator pos:start="1459:26" pos:end="1459:26">=</operator> <name pos:start="1459:28" pos:end="1459:33">tmp_sa</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="1462:13" pos:end="1462:105">/* save ANonce (from authenticator) to derive the PTK with the SNonce (from the 2 message) */</comment>
            <expr_stmt pos:start="1463:13" pos:end="1463:58"><expr pos:start="1463:13" pos:end="1463:57"><call pos:start="1463:13" pos:end="1463:57"><name pos:start="1463:13" pos:end="1463:18">memcpy</name><argument_list pos:start="1463:19" pos:end="1463:57">(<argument pos:start="1463:20" pos:end="1463:32"><expr pos:start="1463:20" pos:end="1463:32"><name pos:start="1463:20" pos:end="1463:32"><name pos:start="1463:20" pos:end="1463:21">sa</name><operator pos:start="1463:22" pos:end="1463:23">-&gt;</operator><name pos:start="1463:24" pos:end="1463:26">wpa</name><operator pos:start="1463:27" pos:end="1463:27">.</operator><name pos:start="1463:28" pos:end="1463:32">nonce</name></name></expr></argument>, <argument pos:start="1463:35" pos:end="1463:52"><expr pos:start="1463:35" pos:end="1463:52"><name pos:start="1463:35" pos:end="1463:38">data</name> <operator pos:start="1463:40" pos:end="1463:40">+</operator> <name pos:start="1463:42" pos:end="1463:47">offset</name> <operator pos:start="1463:49" pos:end="1463:49">+</operator> <literal type="number" pos:start="1463:51" pos:end="1463:52">12</literal></expr></argument>, <argument pos:start="1463:55" pos:end="1463:56"><expr pos:start="1463:55" pos:end="1463:56"><literal type="number" pos:start="1463:55" pos:end="1463:56">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="1465:13" pos:end="1465:104">/* get the Key Descriptor Version (to select algorithm used in decryption -CCMP or TKIP-) */</comment>
            <expr_stmt pos:start="1466:13" pos:end="1466:75"><expr pos:start="1466:13" pos:end="1466:74"><name pos:start="1466:13" pos:end="1466:27"><name pos:start="1466:13" pos:end="1466:14">sa</name><operator pos:start="1466:15" pos:end="1466:16">-&gt;</operator><name pos:start="1466:17" pos:end="1466:19">wpa</name><operator pos:start="1466:20" pos:end="1466:20">.</operator><name pos:start="1466:21" pos:end="1466:27">key_ver</name></name> <operator pos:start="1466:29" pos:end="1466:29">=</operator> <call pos:start="1466:31" pos:end="1466:74"><name pos:start="1466:31" pos:end="1466:56">AIRPDCAP_EAP_KEY_DESCR_VER</name><argument_list pos:start="1466:57" pos:end="1466:74">(<argument pos:start="1466:58" pos:end="1466:73"><expr pos:start="1466:58" pos:end="1466:73"><name pos:start="1466:58" pos:end="1466:73"><name pos:start="1466:58" pos:end="1466:61">data</name><index pos:start="1466:62" pos:end="1466:73">[<expr pos:start="1466:63" pos:end="1466:72"><name pos:start="1466:63" pos:end="1466:68">offset</name> <operator pos:start="1466:70" pos:end="1466:70">+</operator> <literal type="number" pos:start="1466:72" pos:end="1466:72">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1468:13" pos:end="1468:30"><expr pos:start="1468:13" pos:end="1468:29"><name pos:start="1468:13" pos:end="1468:25"><name pos:start="1468:13" pos:end="1468:14">sa</name><operator pos:start="1468:15" pos:end="1468:16">-&gt;</operator><name pos:start="1468:17" pos:end="1468:25">handshake</name></name> <operator pos:start="1468:27" pos:end="1468:27">=</operator> <literal type="number" pos:start="1468:29" pos:end="1468:29">1</literal></expr>;</expr_stmt>

            <return pos:start="1470:13" pos:end="1470:50">return <expr pos:start="1470:20" pos:end="1470:49"><name pos:start="1470:20" pos:end="1470:49">AIRPDCAP_RET_SUCCESS_HANDSHAKE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1473:9" pos:end="1473:147">/* message 2|4: Supplicant-&gt;Authenticator (Sec=0|1, Mic=1, Ack=0, Inst=0, Key=1(pairwise), KeyRSC=0, Nonce=SNonce|0, MIC=MIC(KCK,EAPOL)) */</comment>
        <if_stmt pos:start="1474:9" pos:end="1610:9"><if pos:start="1474:9" pos:end="1610:9">if <condition pos:start="1474:12" pos:end="1476:48">(<expr pos:start="1474:13" pos:end="1476:47"><call pos:start="1474:13" pos:end="1474:47"><name pos:start="1474:13" pos:end="1474:29">AIRPDCAP_EAP_INST</name><argument_list pos:start="1474:30" pos:end="1474:47">(<argument pos:start="1474:31" pos:end="1474:46"><expr pos:start="1474:31" pos:end="1474:46"><name pos:start="1474:31" pos:end="1474:46"><name pos:start="1474:31" pos:end="1474:34">data</name><index pos:start="1474:35" pos:end="1474:46">[<expr pos:start="1474:36" pos:end="1474:45"><name pos:start="1474:36" pos:end="1474:41">offset</name> <operator pos:start="1474:43" pos:end="1474:43">+</operator> <literal type="number" pos:start="1474:45" pos:end="1474:45">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="1474:49" pos:end="1474:50">==</operator> <literal type="number" pos:start="1474:52" pos:end="1474:52">0</literal> <operator pos:start="1474:54" pos:end="1474:55">&amp;&amp;</operator>
            <call pos:start="1475:13" pos:end="1475:46"><name pos:start="1475:13" pos:end="1475:28">AIRPDCAP_EAP_ACK</name><argument_list pos:start="1475:29" pos:end="1475:46">(<argument pos:start="1475:30" pos:end="1475:45"><expr pos:start="1475:30" pos:end="1475:45"><name pos:start="1475:30" pos:end="1475:45"><name pos:start="1475:30" pos:end="1475:33">data</name><index pos:start="1475:34" pos:end="1475:45">[<expr pos:start="1475:35" pos:end="1475:44"><name pos:start="1475:35" pos:end="1475:40">offset</name> <operator pos:start="1475:42" pos:end="1475:42">+</operator> <literal type="number" pos:start="1475:44" pos:end="1475:44">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="1475:48" pos:end="1475:49">==</operator> <literal type="number" pos:start="1475:51" pos:end="1475:51">0</literal> <operator pos:start="1475:53" pos:end="1475:54">&amp;&amp;</operator>
            <call pos:start="1476:13" pos:end="1476:42"><name pos:start="1476:13" pos:end="1476:28">AIRPDCAP_EAP_MIC</name><argument_list pos:start="1476:29" pos:end="1476:42">(<argument pos:start="1476:30" pos:end="1476:41"><expr pos:start="1476:30" pos:end="1476:41"><name pos:start="1476:30" pos:end="1476:41"><name pos:start="1476:30" pos:end="1476:33">data</name><index pos:start="1476:34" pos:end="1476:41">[<expr pos:start="1476:35" pos:end="1476:40"><name pos:start="1476:35" pos:end="1476:40">offset</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="1476:44" pos:end="1476:45">==</operator> <literal type="number" pos:start="1476:47" pos:end="1476:47">1</literal></expr>)</condition>
        <block pos:start="1477:9" pos:end="1610:9">{<block_content pos:start="1479:13" pos:end="1609:13">
            <comment type="block" pos:start="1478:13" pos:end="1478:126">/* Check key data length to differentiate between message 2 or 4, same as in epan/dissectors/packet-ieee80211.c */</comment>
            <if_stmt pos:start="1479:13" pos:end="1609:13"><if pos:start="1479:13" pos:end="1591:13">if <condition pos:start="1479:16" pos:end="1479:44">(<expr pos:start="1479:17" pos:end="1479:43"><call pos:start="1479:17" pos:end="1479:43"><name pos:start="1479:17" pos:end="1479:23">pntoh16</name><argument_list pos:start="1479:24" pos:end="1479:43">(<argument pos:start="1479:25" pos:end="1479:42"><expr pos:start="1479:25" pos:end="1479:42"><name pos:start="1479:25" pos:end="1479:28">data</name> <operator pos:start="1479:30" pos:end="1479:30">+</operator> <name pos:start="1479:32" pos:end="1479:37">offset</name> <operator pos:start="1479:39" pos:end="1479:39">+</operator> <literal type="number" pos:start="1479:41" pos:end="1479:42">92</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block pos:start="1480:13" pos:end="1591:13">{<block_content pos:start="1482:17" pos:end="1590:54">
                <comment type="block" pos:start="1481:17" pos:end="1481:31">/* message 2 */</comment>
                <expr_stmt pos:start="1482:17" pos:end="1482:122"><expr pos:start="1482:17" pos:end="1482:121"><call pos:start="1482:17" pos:end="1482:121"><name pos:start="1482:17" pos:end="1482:41">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1482:42" pos:end="1482:121">(<argument pos:start="1482:43" pos:end="1482:67"><expr pos:start="1482:43" pos:end="1482:67"><literal type="string" pos:start="1482:43" pos:end="1482:67">"AirPDcapRsna4WHandshake"</literal></expr></argument>, <argument pos:start="1482:70" pos:end="1482:96"><expr pos:start="1482:70" pos:end="1482:96"><literal type="string" pos:start="1482:70" pos:end="1482:96">"4-way handshake message 2"</literal></expr></argument>, <argument pos:start="1482:99" pos:end="1482:120"><expr pos:start="1482:99" pos:end="1482:120"><name pos:start="1482:99" pos:end="1482:120">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="1484:17" pos:end="1484:120">/* On reception of Message 2, the Authenticator checks that the key replay counter corresponds to the */</comment>
                <comment type="block" pos:start="1485:17" pos:end="1485:120">/* outstanding Message 1. If not, it silently discards the message.                                   */</comment>
                <comment type="block" pos:start="1486:17" pos:end="1486:120">/* If the calculated MIC does not match the MIC that the Supplicant included in the EAPOL-Key frame,  */</comment>
                <comment type="block" pos:start="1487:17" pos:end="1487:120">/* the Authenticator silently discards Message 2.                                                     */</comment>
                <comment type="block" pos:start="1488:17" pos:end="1488:120">/* -&gt; not checked; the Supplicant will send another message 2 (hopefully!)                            */</comment>

                <comment type="block" pos:start="1490:17" pos:end="1490:48">/* now you can derive the PTK */</comment>
                <for pos:start="1491:17" pos:end="1579:17">for <control pos:start="1491:21" pos:end="1491:91">(<init pos:start="1491:22" pos:end="1491:35"><expr pos:start="1491:22" pos:end="1491:34"><name pos:start="1491:22" pos:end="1491:30">key_index</name> <operator pos:start="1491:32" pos:end="1491:32">=</operator> <literal type="number" pos:start="1491:34" pos:end="1491:34">0</literal></expr>;</init> <condition pos:start="1491:37" pos:end="1491:78"><expr pos:start="1491:37" pos:end="1491:77"><name pos:start="1491:37" pos:end="1491:45">key_index</name> <operator pos:start="1491:47" pos:end="1491:47">&lt;</operator> <operator pos:start="1491:49" pos:end="1491:49">(</operator><name pos:start="1491:50" pos:end="1491:52">INT</name><operator pos:start="1491:53" pos:end="1491:53">)</operator><name pos:start="1491:54" pos:end="1491:65"><name pos:start="1491:54" pos:end="1491:56">ctx</name><operator pos:start="1491:57" pos:end="1491:58">-&gt;</operator><name pos:start="1491:59" pos:end="1491:65">keys_nr</name></name> <operator pos:start="1491:67" pos:end="1491:68">||</operator> <name pos:start="1491:70" pos:end="1491:77">useCache</name></expr>;</condition> <incr pos:start="1491:80" pos:end="1491:90"><expr pos:start="1491:80" pos:end="1491:90"><name pos:start="1491:80" pos:end="1491:88">key_index</name><operator pos:start="1491:89" pos:end="1491:90">++</operator></expr></incr>)</control>
                <block pos:start="1492:17" pos:end="1579:17">{<block_content pos:start="1494:21" pos:end="1578:21">
                    <comment type="block" pos:start="1493:21" pos:end="1493:61">/* use the cached one, or try all keys */</comment>
                    <if_stmt pos:start="1494:21" pos:end="1515:21"><if pos:start="1494:21" pos:end="1498:21">if <condition pos:start="1494:24" pos:end="1494:34">(<expr pos:start="1494:25" pos:end="1494:33"><operator pos:start="1494:25" pos:end="1494:25">!</operator><name pos:start="1494:26" pos:end="1494:33">useCache</name></expr>)</condition>
                    <block pos:start="1495:21" pos:end="1498:21">{<block_content pos:start="1496:25" pos:end="1497:56">
                        <expr_stmt pos:start="1496:25" pos:end="1496:119"><expr pos:start="1496:25" pos:end="1496:118"><call pos:start="1496:25" pos:end="1496:118"><name pos:start="1496:25" pos:end="1496:49">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1496:50" pos:end="1496:118">(<argument pos:start="1496:51" pos:end="1496:75"><expr pos:start="1496:51" pos:end="1496:75"><literal type="string" pos:start="1496:51" pos:end="1496:75">"AirPDcapRsna4WHandshake"</literal></expr></argument>, <argument pos:start="1496:78" pos:end="1496:93"><expr pos:start="1496:78" pos:end="1496:93"><literal type="string" pos:start="1496:78" pos:end="1496:93">"Try WPA key..."</literal></expr></argument>, <argument pos:start="1496:96" pos:end="1496:117"><expr pos:start="1496:96" pos:end="1496:117"><name pos:start="1496:96" pos:end="1496:117">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1497:25" pos:end="1497:56"><expr pos:start="1497:25" pos:end="1497:55"><name pos:start="1497:25" pos:end="1497:31">tmp_key</name> <operator pos:start="1497:33" pos:end="1497:33">=</operator> <operator pos:start="1497:35" pos:end="1497:35">&amp;</operator><name pos:start="1497:36" pos:end="1497:55"><name pos:start="1497:36" pos:end="1497:38">ctx</name><operator pos:start="1497:39" pos:end="1497:40">-&gt;</operator><name pos:start="1497:41" pos:end="1497:44">keys</name><index pos:start="1497:45" pos:end="1497:55">[<expr pos:start="1497:46" pos:end="1497:54"><name pos:start="1497:46" pos:end="1497:54">key_index</name></expr>]</index></name></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else pos:start="1499:21" pos:end="1515:21">else
                    <block pos:start="1500:21" pos:end="1515:21">{<block_content pos:start="1502:25" pos:end="1514:25">
                        <comment type="block" pos:start="1501:25" pos:end="1501:108">/* there is a cached key in the security association, if it's a WPA key try it... */</comment>
                        <if_stmt pos:start="1502:25" pos:end="1514:25"><if pos:start="1502:25" pos:end="1509:25">if <condition pos:start="1502:28" pos:end="1505:76">(<expr pos:start="1502:29" pos:end="1505:75"><name pos:start="1502:29" pos:end="1502:35"><name pos:start="1502:29" pos:end="1502:30">sa</name><operator pos:start="1502:31" pos:end="1502:32">-&gt;</operator><name pos:start="1502:33" pos:end="1502:35">key</name></name> <operator pos:start="1502:37" pos:end="1502:38">!=</operator> <name pos:start="1502:40" pos:end="1502:43">NULL</name> <operator pos:start="1502:45" pos:end="1502:46">&amp;&amp;</operator>
                            <operator pos:start="1503:29" pos:end="1503:29">(</operator><name pos:start="1503:30" pos:end="1503:45"><name pos:start="1503:30" pos:end="1503:31">sa</name><operator pos:start="1503:32" pos:end="1503:33">-&gt;</operator><name pos:start="1503:34" pos:end="1503:36">key</name><operator pos:start="1503:37" pos:end="1503:38">-&gt;</operator><name pos:start="1503:39" pos:end="1503:45">KeyType</name></name> <operator pos:start="1503:47" pos:end="1503:48">==</operator> <name pos:start="1503:50" pos:end="1503:74">AIRPDCAP_KEY_TYPE_WPA_PWD</name> <operator pos:start="1503:76" pos:end="1503:77">||</operator>
                             <name pos:start="1504:30" pos:end="1504:45"><name pos:start="1504:30" pos:end="1504:31">sa</name><operator pos:start="1504:32" pos:end="1504:33">-&gt;</operator><name pos:start="1504:34" pos:end="1504:36">key</name><operator pos:start="1504:37" pos:end="1504:38">-&gt;</operator><name pos:start="1504:39" pos:end="1504:45">KeyType</name></name> <operator pos:start="1504:47" pos:end="1504:48">==</operator> <name pos:start="1504:50" pos:end="1504:74">AIRPDCAP_KEY_TYPE_WPA_PSK</name> <operator pos:start="1504:76" pos:end="1504:77">||</operator>
                             <name pos:start="1505:30" pos:end="1505:45"><name pos:start="1505:30" pos:end="1505:31">sa</name><operator pos:start="1505:32" pos:end="1505:33">-&gt;</operator><name pos:start="1505:34" pos:end="1505:36">key</name><operator pos:start="1505:37" pos:end="1505:38">-&gt;</operator><name pos:start="1505:39" pos:end="1505:45">KeyType</name></name> <operator pos:start="1505:47" pos:end="1505:48">==</operator> <name pos:start="1505:50" pos:end="1505:74">AIRPDCAP_KEY_TYPE_WPA_PMK</name><operator pos:start="1505:75" pos:end="1505:75">)</operator></expr>)</condition>
                        <block pos:start="1506:25" pos:end="1509:25">{<block_content pos:start="1507:29" pos:end="1508:46">
                            <expr_stmt pos:start="1507:29" pos:end="1507:130"><expr pos:start="1507:29" pos:end="1507:129"><call pos:start="1507:29" pos:end="1507:129"><name pos:start="1507:29" pos:end="1507:53">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1507:54" pos:end="1507:129">(<argument pos:start="1507:55" pos:end="1507:79"><expr pos:start="1507:55" pos:end="1507:79"><literal type="string" pos:start="1507:55" pos:end="1507:79">"AirPDcapRsna4WHandshake"</literal></expr></argument>, <argument pos:start="1507:82" pos:end="1507:104"><expr pos:start="1507:82" pos:end="1507:104"><literal type="string" pos:start="1507:82" pos:end="1507:104">"Try cached WPA key..."</literal></expr></argument>, <argument pos:start="1507:107" pos:end="1507:128"><expr pos:start="1507:107" pos:end="1507:128"><name pos:start="1507:107" pos:end="1507:128">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt pos:start="1508:29" pos:end="1508:46"><expr pos:start="1508:29" pos:end="1508:45"><name pos:start="1508:29" pos:end="1508:35">tmp_key</name> <operator pos:start="1508:37" pos:end="1508:37">=</operator> <name pos:start="1508:39" pos:end="1508:45"><name pos:start="1508:39" pos:end="1508:40">sa</name><operator pos:start="1508:41" pos:end="1508:42">-&gt;</operator><name pos:start="1508:43" pos:end="1508:45">key</name></name></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <else pos:start="1510:25" pos:end="1514:25">else
                        <block pos:start="1511:25" pos:end="1514:25">{<block_content pos:start="1512:29" pos:end="1513:60">
                            <expr_stmt pos:start="1512:29" pos:end="1512:154"><expr pos:start="1512:29" pos:end="1512:153"><call pos:start="1512:29" pos:end="1512:153"><name pos:start="1512:29" pos:end="1512:53">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1512:54" pos:end="1512:153">(<argument pos:start="1512:55" pos:end="1512:79"><expr pos:start="1512:55" pos:end="1512:79"><literal type="string" pos:start="1512:55" pos:end="1512:79">"AirPDcapRsna4WHandshake"</literal></expr></argument>, <argument pos:start="1512:82" pos:end="1512:128"><expr pos:start="1512:82" pos:end="1512:128"><literal type="string" pos:start="1512:82" pos:end="1512:128">"Cached key is of a wrong type, try WPA key..."</literal></expr></argument>, <argument pos:start="1512:131" pos:end="1512:152"><expr pos:start="1512:131" pos:end="1512:152"><name pos:start="1512:131" pos:end="1512:152">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt pos:start="1513:29" pos:end="1513:60"><expr pos:start="1513:29" pos:end="1513:59"><name pos:start="1513:29" pos:end="1513:35">tmp_key</name> <operator pos:start="1513:37" pos:end="1513:37">=</operator> <operator pos:start="1513:39" pos:end="1513:39">&amp;</operator><name pos:start="1513:40" pos:end="1513:59"><name pos:start="1513:40" pos:end="1513:42">ctx</name><operator pos:start="1513:43" pos:end="1513:44">-&gt;</operator><name pos:start="1513:45" pos:end="1513:48">keys</name><index pos:start="1513:49" pos:end="1513:59">[<expr pos:start="1513:50" pos:end="1513:58"><name pos:start="1513:50" pos:end="1513:58">key_index</name></expr>]</index></name></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></else></if_stmt>

                    <comment type="block" pos:start="1517:21" pos:end="1517:57">/* obviously, try only WPA keys... */</comment>
                    <if_stmt pos:start="1518:21" pos:end="1557:21"><if pos:start="1518:21" pos:end="1557:21">if <condition pos:start="1518:24" pos:end="1520:70">(<expr pos:start="1518:25" pos:end="1520:69"><name pos:start="1518:25" pos:end="1518:40"><name pos:start="1518:25" pos:end="1518:31">tmp_key</name><operator pos:start="1518:32" pos:end="1518:33">-&gt;</operator><name pos:start="1518:34" pos:end="1518:40">KeyType</name></name> <operator pos:start="1518:42" pos:end="1518:43">==</operator> <name pos:start="1518:45" pos:end="1518:69">AIRPDCAP_KEY_TYPE_WPA_PWD</name> <operator pos:start="1518:71" pos:end="1518:72">||</operator>
                        <name pos:start="1519:25" pos:end="1519:40"><name pos:start="1519:25" pos:end="1519:31">tmp_key</name><operator pos:start="1519:32" pos:end="1519:33">-&gt;</operator><name pos:start="1519:34" pos:end="1519:40">KeyType</name></name> <operator pos:start="1519:42" pos:end="1519:43">==</operator> <name pos:start="1519:45" pos:end="1519:69">AIRPDCAP_KEY_TYPE_WPA_PSK</name> <operator pos:start="1519:71" pos:end="1519:72">||</operator>
                        <name pos:start="1520:25" pos:end="1520:40"><name pos:start="1520:25" pos:end="1520:31">tmp_key</name><operator pos:start="1520:32" pos:end="1520:33">-&gt;</operator><name pos:start="1520:34" pos:end="1520:40">KeyType</name></name> <operator pos:start="1520:42" pos:end="1520:43">==</operator> <name pos:start="1520:45" pos:end="1520:69">AIRPDCAP_KEY_TYPE_WPA_PMK</name></expr>)</condition>
                    <block pos:start="1521:21" pos:end="1557:21">{<block_content pos:start="1522:25" pos:end="1550:103">
                        <if_stmt pos:start="1522:25" pos:end="1535:25"><if pos:start="1522:25" pos:end="1531:25">if <condition pos:start="1522:28" pos:end="1522:182">(<expr pos:start="1522:29" pos:end="1522:181"><name pos:start="1522:29" pos:end="1522:44"><name pos:start="1522:29" pos:end="1522:35">tmp_key</name><operator pos:start="1522:36" pos:end="1522:37">-&gt;</operator><name pos:start="1522:38" pos:end="1522:44">KeyType</name></name> <operator pos:start="1522:46" pos:end="1522:47">==</operator> <name pos:start="1522:49" pos:end="1522:73">AIRPDCAP_KEY_TYPE_WPA_PWD</name> <operator pos:start="1522:75" pos:end="1522:76">&amp;&amp;</operator> <name pos:start="1522:78" pos:end="1522:101"><name pos:start="1522:78" pos:end="1522:84">tmp_key</name><operator pos:start="1522:85" pos:end="1522:86">-&gt;</operator><name pos:start="1522:87" pos:end="1522:93">UserPwd</name><operator pos:start="1522:94" pos:end="1522:94">.</operator><name pos:start="1522:95" pos:end="1522:101">SsidLen</name></name> <operator pos:start="1522:103" pos:end="1522:104">==</operator> <literal type="number" pos:start="1522:106" pos:end="1522:106">0</literal> <operator pos:start="1522:108" pos:end="1522:109">&amp;&amp;</operator> <name pos:start="1522:111" pos:end="1522:127"><name pos:start="1522:111" pos:end="1522:113">ctx</name><operator pos:start="1522:114" pos:end="1522:115">-&gt;</operator><name pos:start="1522:116" pos:end="1522:127">pkt_ssid_len</name></name> <operator pos:start="1522:129" pos:end="1522:129">&gt;</operator> <literal type="number" pos:start="1522:131" pos:end="1522:131">0</literal> <operator pos:start="1522:133" pos:end="1522:134">&amp;&amp;</operator> <name pos:start="1522:136" pos:end="1522:152"><name pos:start="1522:136" pos:end="1522:138">ctx</name><operator pos:start="1522:139" pos:end="1522:140">-&gt;</operator><name pos:start="1522:141" pos:end="1522:152">pkt_ssid_len</name></name> <operator pos:start="1522:154" pos:end="1522:155">&lt;=</operator> <name pos:start="1522:157" pos:end="1522:181">AIRPDCAP_WPA_SSID_MAX_LEN</name></expr>)</condition>
                        <block pos:start="1523:25" pos:end="1531:25">{<block_content pos:start="1525:29" pos:end="1530:51">
                            <comment type="block" pos:start="1524:29" pos:end="1524:90">/* We have a "wildcard" SSID.  Use the one from the packet. */</comment>
                            <expr_stmt pos:start="1525:29" pos:end="1525:71"><expr pos:start="1525:29" pos:end="1525:70"><call pos:start="1525:29" pos:end="1525:70"><name pos:start="1525:29" pos:end="1525:34">memcpy</name><argument_list pos:start="1525:35" pos:end="1525:70">(<argument pos:start="1525:36" pos:end="1525:43"><expr pos:start="1525:36" pos:end="1525:43"><operator pos:start="1525:36" pos:end="1525:36">&amp;</operator><name pos:start="1525:37" pos:end="1525:43">pkt_key</name></expr></argument>, <argument pos:start="1525:46" pos:end="1525:52"><expr pos:start="1525:46" pos:end="1525:52"><name pos:start="1525:46" pos:end="1525:52">tmp_key</name></expr></argument>, <argument pos:start="1525:55" pos:end="1525:69"><expr pos:start="1525:55" pos:end="1525:69"><sizeof pos:start="1525:55" pos:end="1525:69">sizeof<argument_list pos:start="1525:61" pos:end="1525:69">(<argument pos:start="1525:62" pos:end="1525:68"><expr pos:start="1525:62" pos:end="1525:68"><name pos:start="1525:62" pos:end="1525:68">pkt_key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt pos:start="1526:29" pos:end="1526:92"><expr pos:start="1526:29" pos:end="1526:91"><call pos:start="1526:29" pos:end="1526:91"><name pos:start="1526:29" pos:end="1526:34">memcpy</name><argument_list pos:start="1526:35" pos:end="1526:91">(<argument pos:start="1526:36" pos:end="1526:56"><expr pos:start="1526:36" pos:end="1526:56"><operator pos:start="1526:36" pos:end="1526:36">&amp;</operator><name pos:start="1526:37" pos:end="1526:56"><name pos:start="1526:37" pos:end="1526:43">pkt_key</name><operator pos:start="1526:44" pos:end="1526:44">.</operator><name pos:start="1526:45" pos:end="1526:51">UserPwd</name><operator pos:start="1526:52" pos:end="1526:52">.</operator><name pos:start="1526:53" pos:end="1526:56">Ssid</name></name></expr></argument>, <argument pos:start="1526:59" pos:end="1526:71"><expr pos:start="1526:59" pos:end="1526:71"><name pos:start="1526:59" pos:end="1526:71"><name pos:start="1526:59" pos:end="1526:61">ctx</name><operator pos:start="1526:62" pos:end="1526:63">-&gt;</operator><name pos:start="1526:64" pos:end="1526:71">pkt_ssid</name></name></expr></argument>, <argument pos:start="1526:74" pos:end="1526:90"><expr pos:start="1526:74" pos:end="1526:90"><name pos:start="1526:74" pos:end="1526:90"><name pos:start="1526:74" pos:end="1526:76">ctx</name><operator pos:start="1526:77" pos:end="1526:78">-&gt;</operator><name pos:start="1526:79" pos:end="1526:90">pkt_ssid_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt pos:start="1527:29" pos:end="1527:72"><expr pos:start="1527:29" pos:end="1527:71"><name pos:start="1527:29" pos:end="1527:51"><name pos:start="1527:29" pos:end="1527:35">pkt_key</name><operator pos:start="1527:36" pos:end="1527:36">.</operator><name pos:start="1527:37" pos:end="1527:43">UserPwd</name><operator pos:start="1527:44" pos:end="1527:44">.</operator><name pos:start="1527:45" pos:end="1527:51">SsidLen</name></name> <operator pos:start="1527:53" pos:end="1527:53">=</operator> <name pos:start="1527:55" pos:end="1527:71"><name pos:start="1527:55" pos:end="1527:57">ctx</name><operator pos:start="1527:58" pos:end="1527:59">-&gt;</operator><name pos:start="1527:60" pos:end="1527:71">pkt_ssid_len</name></name></expr>;</expr_stmt>
                            <expr_stmt pos:start="1528:29" pos:end="1529:98"><expr pos:start="1528:29" pos:end="1529:97"><call pos:start="1528:29" pos:end="1529:97"><name pos:start="1528:29" pos:end="1528:47">AirPDcapRsnaPwd2Psk</name><argument_list pos:start="1528:48" pos:end="1529:97">(<argument pos:start="1528:49" pos:end="1528:74"><expr pos:start="1528:49" pos:end="1528:74"><name pos:start="1528:49" pos:end="1528:74"><name pos:start="1528:49" pos:end="1528:55">pkt_key</name><operator pos:start="1528:56" pos:end="1528:56">.</operator><name pos:start="1528:57" pos:end="1528:63">UserPwd</name><operator pos:start="1528:64" pos:end="1528:64">.</operator><name pos:start="1528:65" pos:end="1528:74">Passphrase</name></name></expr></argument>, <argument pos:start="1528:77" pos:end="1528:96"><expr pos:start="1528:77" pos:end="1528:96"><name pos:start="1528:77" pos:end="1528:96"><name pos:start="1528:77" pos:end="1528:83">pkt_key</name><operator pos:start="1528:84" pos:end="1528:84">.</operator><name pos:start="1528:85" pos:end="1528:91">UserPwd</name><operator pos:start="1528:92" pos:end="1528:92">.</operator><name pos:start="1528:93" pos:end="1528:96">Ssid</name></name></expr></argument>,
                                                <argument pos:start="1529:49" pos:end="1529:71"><expr pos:start="1529:49" pos:end="1529:71"><name pos:start="1529:49" pos:end="1529:71"><name pos:start="1529:49" pos:end="1529:55">pkt_key</name><operator pos:start="1529:56" pos:end="1529:56">.</operator><name pos:start="1529:57" pos:end="1529:63">UserPwd</name><operator pos:start="1529:64" pos:end="1529:64">.</operator><name pos:start="1529:65" pos:end="1529:71">SsidLen</name></name></expr></argument>, <argument pos:start="1529:74" pos:end="1529:96"><expr pos:start="1529:74" pos:end="1529:96"><name pos:start="1529:74" pos:end="1529:96"><name pos:start="1529:74" pos:end="1529:80">pkt_key</name><operator pos:start="1529:81" pos:end="1529:81">.</operator><name pos:start="1529:82" pos:end="1529:88">KeyData</name><operator pos:start="1529:89" pos:end="1529:89">.</operator><name pos:start="1529:90" pos:end="1529:92">Wpa</name><operator pos:start="1529:93" pos:end="1529:93">.</operator><name pos:start="1529:94" pos:end="1529:96">Psk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt pos:start="1530:29" pos:end="1530:51"><expr pos:start="1530:29" pos:end="1530:50"><name pos:start="1530:29" pos:end="1530:39">tmp_pkt_key</name> <operator pos:start="1530:41" pos:end="1530:41">=</operator> <operator pos:start="1530:43" pos:end="1530:43">&amp;</operator><name pos:start="1530:44" pos:end="1530:50">pkt_key</name></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <else pos:start="1532:25" pos:end="1535:25">else
                        <block pos:start="1533:25" pos:end="1535:25">{<block_content pos:start="1534:29" pos:end="1534:50">
                            <expr_stmt pos:start="1534:29" pos:end="1534:50"><expr pos:start="1534:29" pos:end="1534:49"><name pos:start="1534:29" pos:end="1534:39">tmp_pkt_key</name> <operator pos:start="1534:41" pos:end="1534:41">=</operator> <name pos:start="1534:43" pos:end="1534:49">tmp_key</name></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>

                        <comment type="block" pos:start="1537:25" pos:end="1537:89">/* derive the PTK from the BSSID, STA MAC, PMK, SNonce, ANonce */</comment>
                        <expr_stmt pos:start="1538:25" pos:end="1542:54"><expr pos:start="1538:25" pos:end="1542:53"><call pos:start="1538:25" pos:end="1542:53"><name pos:start="1538:25" pos:end="1538:40">AirPDcapRsnaPrfX</name><argument_list pos:start="1538:41" pos:end="1542:53">(<argument pos:start="1538:42" pos:end="1538:43"><expr pos:start="1538:42" pos:end="1538:43"><name pos:start="1538:42" pos:end="1538:43">sa</name></expr></argument>,                           <comment type="block" pos:start="1538:72" pos:end="1538:116">/* authenticator nonce, bssid, station mac */</comment>
                                         <argument pos:start="1539:42" pos:end="1539:69"><expr pos:start="1539:42" pos:end="1539:69"><name pos:start="1539:42" pos:end="1539:69"><name pos:start="1539:42" pos:end="1539:52">tmp_pkt_key</name><operator pos:start="1539:53" pos:end="1539:54">-&gt;</operator><name pos:start="1539:55" pos:end="1539:61">KeyData</name><operator pos:start="1539:62" pos:end="1539:62">.</operator><name pos:start="1539:63" pos:end="1539:65">Wpa</name><operator pos:start="1539:66" pos:end="1539:66">.</operator><name pos:start="1539:67" pos:end="1539:69">Psk</name></name></expr></argument>, <comment type="block" pos:start="1539:72" pos:end="1539:87">/* PSK == PMK */</comment>
                                         <argument pos:start="1540:42" pos:end="1540:59"><expr pos:start="1540:42" pos:end="1540:59"><name pos:start="1540:42" pos:end="1540:45">data</name> <operator pos:start="1540:47" pos:end="1540:47">+</operator> <name pos:start="1540:49" pos:end="1540:54">offset</name> <operator pos:start="1540:56" pos:end="1540:56">+</operator> <literal type="number" pos:start="1540:58" pos:end="1540:59">12</literal></expr></argument>,           <comment type="block" pos:start="1540:72" pos:end="1540:93">/* supplicant nonce */</comment>
                                         <argument pos:start="1541:42" pos:end="1541:44"><expr pos:start="1541:42" pos:end="1541:44"><literal type="number" pos:start="1541:42" pos:end="1541:44">512</literal></expr></argument>,
                                         <argument pos:start="1542:42" pos:end="1542:52"><expr pos:start="1542:42" pos:end="1542:52"><name pos:start="1542:42" pos:end="1542:52"><name pos:start="1542:42" pos:end="1542:43">sa</name><operator pos:start="1542:44" pos:end="1542:45">-&gt;</operator><name pos:start="1542:46" pos:end="1542:48">wpa</name><operator pos:start="1542:49" pos:end="1542:49">.</operator><name pos:start="1542:50" pos:end="1542:52">ptk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="block" pos:start="1544:25" pos:end="1544:136">/* verify the MIC (compare the MIC in the packet included in this message with a MIC calculated with the PTK) */</comment>
                        <expr_stmt pos:start="1545:25" pos:end="1545:67"><expr pos:start="1545:25" pos:end="1545:66"><name pos:start="1545:25" pos:end="1545:33">eapol_len</name> <operator pos:start="1545:35" pos:end="1545:35">=</operator> <call pos:start="1545:37" pos:end="1545:62"><name pos:start="1545:37" pos:end="1545:43">pntoh16</name><argument_list pos:start="1545:44" pos:end="1545:62">(<argument pos:start="1545:45" pos:end="1545:61"><expr pos:start="1545:45" pos:end="1545:61"><name pos:start="1545:45" pos:end="1545:48">data</name> <operator pos:start="1545:50" pos:end="1545:50">+</operator> <name pos:start="1545:52" pos:end="1545:57">offset</name> <operator pos:start="1545:59" pos:end="1545:59">-</operator> <literal type="number" pos:start="1545:61" pos:end="1545:61">3</literal></expr></argument>)</argument_list></call> <operator pos:start="1545:64" pos:end="1545:64">+</operator> <literal type="number" pos:start="1545:66" pos:end="1545:66">4</literal></expr>;</expr_stmt>
                        <expr_stmt pos:start="1546:25" pos:end="1546:132"><expr pos:start="1546:25" pos:end="1546:131"><call pos:start="1546:25" pos:end="1546:131"><name pos:start="1546:25" pos:end="1546:30">memcpy</name><argument_list pos:start="1546:31" pos:end="1546:131">(<argument pos:start="1546:32" pos:end="1546:36"><expr pos:start="1546:32" pos:end="1546:36"><name pos:start="1546:32" pos:end="1546:36">eapol</name></expr></argument>, <argument pos:start="1546:39" pos:end="1546:55"><expr pos:start="1546:39" pos:end="1546:55"><operator pos:start="1546:39" pos:end="1546:39">&amp;</operator><name pos:start="1546:40" pos:end="1546:55"><name pos:start="1546:40" pos:end="1546:43">data</name><index pos:start="1546:44" pos:end="1546:55">[<expr pos:start="1546:45" pos:end="1546:54"><name pos:start="1546:45" pos:end="1546:50">offset</name> <operator pos:start="1546:52" pos:end="1546:52">-</operator> <literal type="number" pos:start="1546:54" pos:end="1546:54">5</literal></expr>]</index></name></expr></argument>, <argument pos:start="1546:58" pos:end="1546:130"><expr pos:start="1546:58" pos:end="1546:130"><operator pos:start="1546:58" pos:end="1546:58">(</operator><ternary pos:start="1546:59" pos:end="1546:129"><condition pos:start="1546:59" pos:end="1546:94"><expr pos:start="1546:59" pos:end="1546:92"><name pos:start="1546:59" pos:end="1546:67">eapol_len</name> <operator pos:start="1546:69" pos:end="1546:69">&lt;</operator> <name pos:start="1546:71" pos:end="1546:92">AIRPDCAP_EAPOL_MAX_LEN</name></expr> ?</condition><then pos:start="1546:96" pos:end="1546:104"> <expr pos:start="1546:96" pos:end="1546:104"><name pos:start="1546:96" pos:end="1546:104">eapol_len</name></expr> </then><else pos:start="1546:106" pos:end="1546:129">: <expr pos:start="1546:108" pos:end="1546:129"><name pos:start="1546:108" pos:end="1546:129">AIRPDCAP_EAPOL_MAX_LEN</name></expr></else></ternary><operator pos:start="1546:130" pos:end="1546:130">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1547:25" pos:end="1550:103"><expr pos:start="1547:25" pos:end="1550:102"><name pos:start="1547:25" pos:end="1547:33">ret_value</name> <operator pos:start="1547:35" pos:end="1547:35">=</operator> <call pos:start="1547:37" pos:end="1550:102"><name pos:start="1547:37" pos:end="1547:56">AirPDcapRsnaMicCheck</name><argument_list pos:start="1547:57" pos:end="1550:102">(<argument pos:start="1547:58" pos:end="1547:62"><expr pos:start="1547:58" pos:end="1547:62"><name pos:start="1547:58" pos:end="1547:62">eapol</name></expr></argument>,                                         <comment type="block" pos:start="1547:105" pos:end="1547:140">/*      eapol frame (header also) */</comment>
                                                         <argument pos:start="1548:58" pos:end="1548:66"><expr pos:start="1548:58" pos:end="1548:66"><name pos:start="1548:58" pos:end="1548:66">eapol_len</name></expr></argument>,                                     <comment type="block" pos:start="1548:105" pos:end="1548:140">/*      eapol frame length        */</comment>
                                                         <argument pos:start="1549:58" pos:end="1549:68"><expr pos:start="1549:58" pos:end="1549:68"><name pos:start="1549:58" pos:end="1549:68"><name pos:start="1549:58" pos:end="1549:59">sa</name><operator pos:start="1549:60" pos:end="1549:61">-&gt;</operator><name pos:start="1549:62" pos:end="1549:64">wpa</name><operator pos:start="1549:65" pos:end="1549:65">.</operator><name pos:start="1549:66" pos:end="1549:68">ptk</name></name></expr></argument>,                                   <comment type="block" pos:start="1549:105" pos:end="1549:140">/*      Key Confirmation Key      */</comment>
                                                         <argument pos:start="1550:58" pos:end="1550:101"><expr pos:start="1550:58" pos:end="1550:101"><call pos:start="1550:58" pos:end="1550:101"><name pos:start="1550:58" pos:end="1550:83">AIRPDCAP_EAP_KEY_DESCR_VER</name><argument_list pos:start="1550:84" pos:end="1550:101">(<argument pos:start="1550:85" pos:end="1550:100"><expr pos:start="1550:85" pos:end="1550:100"><name pos:start="1550:85" pos:end="1550:100"><name pos:start="1550:85" pos:end="1550:88">data</name><index pos:start="1550:89" pos:end="1550:100">[<expr pos:start="1550:90" pos:end="1550:99"><name pos:start="1550:90" pos:end="1550:95">offset</name> <operator pos:start="1550:97" pos:end="1550:97">+</operator> <literal type="number" pos:start="1550:99" pos:end="1550:99">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="1550:105" pos:end="1550:140">/*  EAPOL-Key description version */</comment>

                        <comment type="block" pos:start="1552:25" pos:end="1552:131">/* If the MIC is valid, the Authenticator checks that the RSN information element bit-wise matches       */</comment>
                        <comment type="block" pos:start="1553:25" pos:end="1553:131">/* that from the (Re)Association Request message.                                                        */</comment>
                        <comment type="block" pos:start="1554:25" pos:end="1554:136">/*              i) TODO If these are not exactly the same, the Authenticator uses MLME-DEAUTHENTICATE.request */</comment>
                        <comment type="block" pos:start="1555:25" pos:end="1555:131">/* primitive to terminate the association.                                                               */</comment>
                        <comment type="block" pos:start="1556:25" pos:end="1556:131">/*              ii) If they do match bit-wise, the Authenticator constructs Message 3.                   */</comment>
                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="1559:21" pos:end="1578:21"><if pos:start="1559:21" pos:end="1568:21">if <condition pos:start="1559:24" pos:end="1562:72">(<expr pos:start="1559:25" pos:end="1562:71"><operator pos:start="1559:25" pos:end="1559:25">!</operator><name pos:start="1559:26" pos:end="1559:34">ret_value</name> <operator pos:start="1559:36" pos:end="1559:37">&amp;&amp;</operator>
                        <operator pos:start="1560:25" pos:end="1560:25">(</operator><name pos:start="1560:26" pos:end="1560:41"><name pos:start="1560:26" pos:end="1560:32">tmp_key</name><operator pos:start="1560:33" pos:end="1560:34">-&gt;</operator><name pos:start="1560:35" pos:end="1560:41">KeyType</name></name> <operator pos:start="1560:43" pos:end="1560:44">==</operator> <name pos:start="1560:46" pos:end="1560:70">AIRPDCAP_KEY_TYPE_WPA_PWD</name> <operator pos:start="1560:72" pos:end="1560:73">||</operator>
                         <name pos:start="1561:26" pos:end="1561:41"><name pos:start="1561:26" pos:end="1561:32">tmp_key</name><operator pos:start="1561:33" pos:end="1561:34">-&gt;</operator><name pos:start="1561:35" pos:end="1561:41">KeyType</name></name> <operator pos:start="1561:43" pos:end="1561:44">==</operator> <name pos:start="1561:46" pos:end="1561:70">AIRPDCAP_KEY_TYPE_WPA_PSK</name> <operator pos:start="1561:72" pos:end="1561:73">||</operator>
                         <name pos:start="1562:26" pos:end="1562:41"><name pos:start="1562:26" pos:end="1562:32">tmp_key</name><operator pos:start="1562:33" pos:end="1562:34">-&gt;</operator><name pos:start="1562:35" pos:end="1562:41">KeyType</name></name> <operator pos:start="1562:43" pos:end="1562:44">==</operator> <name pos:start="1562:46" pos:end="1562:70">AIRPDCAP_KEY_TYPE_WPA_PMK</name><operator pos:start="1562:71" pos:end="1562:71">)</operator></expr>)</condition>
                    <block pos:start="1563:21" pos:end="1568:21">{<block_content pos:start="1566:25" pos:end="1567:30">
                        <comment type="block" pos:start="1564:25" pos:end="1564:102">/* the temporary key is the correct one, cached in the Security Association */</comment>

                        <expr_stmt pos:start="1566:25" pos:end="1566:42"><expr pos:start="1566:25" pos:end="1566:41"><name pos:start="1566:25" pos:end="1566:31"><name pos:start="1566:25" pos:end="1566:26">sa</name><operator pos:start="1566:27" pos:end="1566:28">-&gt;</operator><name pos:start="1566:29" pos:end="1566:31">key</name></name> <operator pos:start="1566:33" pos:end="1566:33">=</operator> <name pos:start="1566:35" pos:end="1566:41">tmp_key</name></expr>;</expr_stmt>
                        <break pos:start="1567:25" pos:end="1567:30">break;</break>
                    </block_content>}</block></if>
                    <else pos:start="1569:21" pos:end="1578:21">else
                    <block pos:start="1570:21" pos:end="1578:21">{<block_content pos:start="1573:25" pos:end="1577:25">
                        <comment type="block" pos:start="1571:25" pos:end="1571:74">/* the cached key was not valid, try other keys */</comment>

                        <if_stmt pos:start="1573:25" pos:end="1577:25"><if pos:start="1573:25" pos:end="1577:25">if <condition pos:start="1573:28" pos:end="1573:45">(<expr pos:start="1573:29" pos:end="1573:44"><name pos:start="1573:29" pos:end="1573:36">useCache</name> <operator pos:start="1573:38" pos:end="1573:39">==</operator> <name pos:start="1573:41" pos:end="1573:44">TRUE</name></expr>)</condition>
                        <block pos:start="1574:25" pos:end="1577:25">{<block_content pos:start="1575:29" pos:end="1576:40">
                            <expr_stmt pos:start="1575:29" pos:end="1575:45"><expr pos:start="1575:29" pos:end="1575:44"><name pos:start="1575:29" pos:end="1575:36">useCache</name> <operator pos:start="1575:38" pos:end="1575:38">=</operator> <name pos:start="1575:40" pos:end="1575:44">FALSE</name></expr>;</expr_stmt>
                            <expr_stmt pos:start="1576:29" pos:end="1576:40"><expr pos:start="1576:29" pos:end="1576:39"><name pos:start="1576:29" pos:end="1576:37">key_index</name><operator pos:start="1576:38" pos:end="1576:39">--</operator></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></for>

                <if_stmt pos:start="1581:17" pos:end="1585:17"><if pos:start="1581:17" pos:end="1585:17">if <condition pos:start="1581:20" pos:end="1581:30">(<expr pos:start="1581:21" pos:end="1581:29"><name pos:start="1581:21" pos:end="1581:29">ret_value</name></expr>)</condition>
                <block pos:start="1582:17" pos:end="1585:17">{<block_content pos:start="1583:21" pos:end="1584:59">
                    <expr_stmt pos:start="1583:21" pos:end="1583:122"><expr pos:start="1583:21" pos:end="1583:121"><call pos:start="1583:21" pos:end="1583:121"><name pos:start="1583:21" pos:end="1583:45">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1583:46" pos:end="1583:121">(<argument pos:start="1583:47" pos:end="1583:71"><expr pos:start="1583:47" pos:end="1583:71"><literal type="string" pos:start="1583:47" pos:end="1583:71">"AirPDcapRsna4WHandshake"</literal></expr></argument>, <argument pos:start="1583:74" pos:end="1583:96"><expr pos:start="1583:74" pos:end="1583:96"><literal type="string" pos:start="1583:74" pos:end="1583:96">"handshake step failed"</literal></expr></argument>, <argument pos:start="1583:99" pos:end="1583:120"><expr pos:start="1583:99" pos:end="1583:120"><name pos:start="1583:99" pos:end="1583:120">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:start="1584:21" pos:end="1584:59">return <expr pos:start="1584:28" pos:end="1584:58"><name pos:start="1584:28" pos:end="1584:58">AIRPDCAP_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1587:17" pos:end="1587:34"><expr pos:start="1587:17" pos:end="1587:33"><name pos:start="1587:17" pos:end="1587:29"><name pos:start="1587:17" pos:end="1587:18">sa</name><operator pos:start="1587:19" pos:end="1587:20">-&gt;</operator><name pos:start="1587:21" pos:end="1587:29">handshake</name></name> <operator pos:start="1587:31" pos:end="1587:31">=</operator> <literal type="number" pos:start="1587:33" pos:end="1587:33">2</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="1588:17" pos:end="1588:36"><expr pos:start="1588:17" pos:end="1588:35"><name pos:start="1588:17" pos:end="1588:28"><name pos:start="1588:17" pos:end="1588:18">sa</name><operator pos:start="1588:19" pos:end="1588:20">-&gt;</operator><name pos:start="1588:21" pos:end="1588:28">validKey</name></name> <operator pos:start="1588:30" pos:end="1588:30">=</operator> <name pos:start="1588:32" pos:end="1588:35">TRUE</name></expr>;</expr_stmt> <comment type="block" pos:start="1588:38" pos:end="1588:125">/* we can use the key to decode, even if we have not captured the other eapol packets */</comment>

                <return pos:start="1590:17" pos:end="1590:54">return <expr pos:start="1590:24" pos:end="1590:53"><name pos:start="1590:24" pos:end="1590:53">AIRPDCAP_RET_SUCCESS_HANDSHAKE</name></expr>;</return>
            </block_content>}</block></if>
            <else pos:start="1592:13" pos:end="1609:13">else
            <block pos:start="1593:13" pos:end="1609:13">{<block_content pos:start="1604:17" pos:end="1608:54">
                <comment type="block" pos:start="1594:17" pos:end="1594:31">/* message 4 */</comment>

                <comment type="block" pos:start="1596:17" pos:end="1596:109">/* TODO "Note that when the 4-Way Handshake is first used Message 4 is sent in the clear." */</comment>

                <comment type="block" pos:start="1598:17" pos:end="1598:123">/* TODO check MIC and Replay Counter                                                                     */</comment>
                <comment type="block" pos:start="1599:17" pos:end="1599:123">/* On reception of Message 4, the Authenticator verifies that the Key Replay Counter field value is one  */</comment>
                <comment type="block" pos:start="1600:17" pos:end="1600:123">/* that it used on this 4-Way Handshake; if it is not, it silently discards the message.                 */</comment>
                <comment type="block" pos:start="1601:17" pos:end="1601:123">/* If the calculated MIC does not match the MIC that the Supplicant included in the EAPOL-Key frame, the */</comment>
                <comment type="block" pos:start="1602:17" pos:end="1602:123">/* Authenticator silently discards Message 4.                                                            */</comment>

                <expr_stmt pos:start="1604:17" pos:end="1604:122"><expr pos:start="1604:17" pos:end="1604:121"><call pos:start="1604:17" pos:end="1604:121"><name pos:start="1604:17" pos:end="1604:41">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1604:42" pos:end="1604:121">(<argument pos:start="1604:43" pos:end="1604:67"><expr pos:start="1604:43" pos:end="1604:67"><literal type="string" pos:start="1604:43" pos:end="1604:67">"AirPDcapRsna4WHandshake"</literal></expr></argument>, <argument pos:start="1604:70" pos:end="1604:96"><expr pos:start="1604:70" pos:end="1604:96"><literal type="string" pos:start="1604:70" pos:end="1604:96">"4-way handshake message 4"</literal></expr></argument>, <argument pos:start="1604:99" pos:end="1604:120"><expr pos:start="1604:99" pos:end="1604:120"><name pos:start="1604:99" pos:end="1604:120">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1606:17" pos:end="1606:34"><expr pos:start="1606:17" pos:end="1606:33"><name pos:start="1606:17" pos:end="1606:29"><name pos:start="1606:17" pos:end="1606:18">sa</name><operator pos:start="1606:19" pos:end="1606:20">-&gt;</operator><name pos:start="1606:21" pos:end="1606:29">handshake</name></name> <operator pos:start="1606:31" pos:end="1606:31">=</operator> <literal type="number" pos:start="1606:33" pos:end="1606:33">4</literal></expr>;</expr_stmt>

                <return pos:start="1608:17" pos:end="1608:54">return <expr pos:start="1608:24" pos:end="1608:53"><name pos:start="1608:24" pos:end="1608:53">AIRPDCAP_RET_SUCCESS_HANDSHAKE</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1612:9" pos:end="1612:132">/* message 3: Authenticator-&gt;Supplicant (Sec=1, Mic=1, Ack=1, Inst=0/1, Key=1(pairwise), KeyRSC=???, Nonce=ANonce, MIC=1) */</comment>
        <if_stmt pos:start="1613:9" pos:end="1644:9"><if pos:start="1613:9" pos:end="1644:9">if <condition pos:start="1613:12" pos:end="1614:48">(<expr pos:start="1613:13" pos:end="1614:47"><call pos:start="1613:13" pos:end="1613:46"><name pos:start="1613:13" pos:end="1613:28">AIRPDCAP_EAP_ACK</name><argument_list pos:start="1613:29" pos:end="1613:46">(<argument pos:start="1613:30" pos:end="1613:45"><expr pos:start="1613:30" pos:end="1613:45"><name pos:start="1613:30" pos:end="1613:45"><name pos:start="1613:30" pos:end="1613:33">data</name><index pos:start="1613:34" pos:end="1613:45">[<expr pos:start="1613:35" pos:end="1613:44"><name pos:start="1613:35" pos:end="1613:40">offset</name> <operator pos:start="1613:42" pos:end="1613:42">+</operator> <literal type="number" pos:start="1613:44" pos:end="1613:44">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="1613:48" pos:end="1613:49">==</operator> <literal type="number" pos:start="1613:51" pos:end="1613:51">1</literal> <operator pos:start="1613:53" pos:end="1613:54">&amp;&amp;</operator>
            <call pos:start="1614:13" pos:end="1614:42"><name pos:start="1614:13" pos:end="1614:28">AIRPDCAP_EAP_MIC</name><argument_list pos:start="1614:29" pos:end="1614:42">(<argument pos:start="1614:30" pos:end="1614:41"><expr pos:start="1614:30" pos:end="1614:41"><name pos:start="1614:30" pos:end="1614:41"><name pos:start="1614:30" pos:end="1614:33">data</name><index pos:start="1614:34" pos:end="1614:41">[<expr pos:start="1614:35" pos:end="1614:40"><name pos:start="1614:35" pos:end="1614:40">offset</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="1614:44" pos:end="1614:45">==</operator> <literal type="number" pos:start="1614:47" pos:end="1614:47">1</literal></expr>)</condition>
        <block pos:start="1615:9" pos:end="1644:9">{<block_content pos:start="1616:13" pos:end="1643:13">
            <decl_stmt pos:start="1616:13" pos:end="1616:41"><decl pos:start="1616:13" pos:end="1616:40"><type pos:start="1616:13" pos:end="1616:33"><specifier pos:start="1616:13" pos:end="1616:17">const</specifier> <name pos:start="1616:19" pos:end="1616:31">EAPOL_RSN_KEY</name> <modifier pos:start="1616:33" pos:end="1616:33">*</modifier></type><name pos:start="1616:34" pos:end="1616:40">pEAPKey</name></decl>;</decl_stmt>
            <expr_stmt pos:start="1617:13" pos:end="1617:118"><expr pos:start="1617:13" pos:end="1617:117"><call pos:start="1617:13" pos:end="1617:117"><name pos:start="1617:13" pos:end="1617:37">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1617:38" pos:end="1617:117">(<argument pos:start="1617:39" pos:end="1617:63"><expr pos:start="1617:39" pos:end="1617:63"><literal type="string" pos:start="1617:39" pos:end="1617:63">"AirPDcapRsna4WHandshake"</literal></expr></argument>, <argument pos:start="1617:66" pos:end="1617:92"><expr pos:start="1617:66" pos:end="1617:92"><literal type="string" pos:start="1617:66" pos:end="1617:92">"4-way handshake message 3"</literal></expr></argument>, <argument pos:start="1617:95" pos:end="1617:116"><expr pos:start="1617:95" pos:end="1617:116"><name pos:start="1617:95" pos:end="1617:116">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="1619:13" pos:end="1619:125">/* On reception of Message 3, the Supplicant silently discards the message if the Key Replay Counter field     */</comment>
            <comment type="block" pos:start="1620:13" pos:end="1620:125">/* value has already been used or if the ANonce value in Message 3 differs from the ANonce value in Message 1. */</comment>
            <comment type="block" pos:start="1621:13" pos:end="1621:125">/* -&gt; not checked, the Authenticator will send another message 3 (hopefully!)                                  */</comment>

            <comment type="block" pos:start="1623:13" pos:end="1623:42">/* TODO check page 88 (RNS) */</comment>

            <comment type="block" pos:start="1625:13" pos:end="1626:119">/* If using WPA2 PSK, message 3 will contain an RSN for the group key (GTK KDE).
               In order to properly support decrypting WPA2-PSK packets, we need to parse this to get the group key. */</comment>
            <expr_stmt pos:start="1627:13" pos:end="1627:67"><expr pos:start="1627:13" pos:end="1627:66"><name pos:start="1627:13" pos:end="1627:19">pEAPKey</name> <operator pos:start="1627:21" pos:end="1627:21">=</operator> <operator pos:start="1627:23" pos:end="1627:23">(</operator><specifier pos:start="1627:24" pos:end="1627:28">const</specifier> <name pos:start="1627:30" pos:end="1627:42">EAPOL_RSN_KEY</name> <operator pos:start="1627:44" pos:end="1627:44">*</operator><operator pos:start="1627:45" pos:end="1627:45">)</operator><operator pos:start="1627:46" pos:end="1627:46">(</operator><operator pos:start="1627:47" pos:end="1627:47">&amp;</operator><operator pos:start="1627:48" pos:end="1627:48">(</operator><name pos:start="1627:49" pos:end="1627:64"><name pos:start="1627:49" pos:end="1627:52">data</name><index pos:start="1627:53" pos:end="1627:64">[<expr pos:start="1627:54" pos:end="1627:63"><name pos:start="1627:54" pos:end="1627:59">offset</name> <operator pos:start="1627:61" pos:end="1627:61">-</operator> <literal type="number" pos:start="1627:63" pos:end="1627:63">1</literal></expr>]</index></name><operator pos:start="1627:65" pos:end="1627:65">)</operator><operator pos:start="1627:66" pos:end="1627:66">)</operator></expr>;</expr_stmt>
            <if_stmt pos:start="1628:13" pos:end="1643:13"><if pos:start="1628:13" pos:end="1643:13">if <condition pos:start="1628:16" pos:end="1628:66">(<expr pos:start="1628:17" pos:end="1628:65"><name pos:start="1628:17" pos:end="1628:29"><name pos:start="1628:17" pos:end="1628:23">pEAPKey</name><operator pos:start="1628:24" pos:end="1628:25">-&gt;</operator><name pos:start="1628:26" pos:end="1628:29">type</name></name> <operator pos:start="1628:31" pos:end="1628:32">==</operator> <name pos:start="1628:34" pos:end="1628:65">AIRPDCAP_RSN_WPA2_KEY_DESCRIPTOR</name></expr>)</condition>
            <block pos:start="1629:13" pos:end="1643:13">{<block_content pos:start="1630:17" pos:end="1642:119">
                <decl_stmt pos:start="1630:17" pos:end="1630:55"><decl pos:start="1630:17" pos:end="1630:54"><type pos:start="1630:17" pos:end="1630:41"><name pos:start="1630:17" pos:end="1630:41">PAIRPDCAP_SEC_ASSOCIATION</name></type> <name pos:start="1630:43" pos:end="1630:54">broadcast_sa</name></decl>;</decl_stmt>
                <decl_stmt pos:start="1631:17" pos:end="1631:47"><decl pos:start="1631:17" pos:end="1631:46"><type pos:start="1631:17" pos:end="1631:43"><name pos:start="1631:17" pos:end="1631:43">AIRPDCAP_SEC_ASSOCIATION_ID</name></type> <name pos:start="1631:45" pos:end="1631:46">id</name></decl>;</decl_stmt>

                <comment type="block" pos:start="1633:17" pos:end="1633:61">/* Get broadcacst SA for the current BSSID */</comment>
                <expr_stmt pos:start="1634:17" pos:end="1634:64"><expr pos:start="1634:17" pos:end="1634:63"><call pos:start="1634:17" pos:end="1634:63"><name pos:start="1634:17" pos:end="1634:22">memcpy</name><argument_list pos:start="1634:23" pos:end="1634:63">(<argument pos:start="1634:24" pos:end="1634:29"><expr pos:start="1634:24" pos:end="1634:29"><name pos:start="1634:24" pos:end="1634:29"><name pos:start="1634:24" pos:end="1634:25">id</name><operator pos:start="1634:26" pos:end="1634:26">.</operator><name pos:start="1634:27" pos:end="1634:29">sta</name></name></expr></argument>, <argument pos:start="1634:32" pos:end="1634:44"><expr pos:start="1634:32" pos:end="1634:44"><name pos:start="1634:32" pos:end="1634:44">broadcast_mac</name></expr></argument>, <argument pos:start="1634:47" pos:end="1634:62"><expr pos:start="1634:47" pos:end="1634:62"><name pos:start="1634:47" pos:end="1634:62">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1635:17" pos:end="1635:67"><expr pos:start="1635:17" pos:end="1635:66"><call pos:start="1635:17" pos:end="1635:66"><name pos:start="1635:17" pos:end="1635:22">memcpy</name><argument_list pos:start="1635:23" pos:end="1635:66">(<argument pos:start="1635:24" pos:end="1635:31"><expr pos:start="1635:24" pos:end="1635:31"><name pos:start="1635:24" pos:end="1635:31"><name pos:start="1635:24" pos:end="1635:25">id</name><operator pos:start="1635:26" pos:end="1635:26">.</operator><name pos:start="1635:27" pos:end="1635:31">bssid</name></name></expr></argument>, <argument pos:start="1635:34" pos:end="1635:47"><expr pos:start="1635:34" pos:end="1635:47"><name pos:start="1635:34" pos:end="1635:47"><name pos:start="1635:34" pos:end="1635:35">sa</name><operator pos:start="1635:36" pos:end="1635:37">-&gt;</operator><name pos:start="1635:38" pos:end="1635:41">saId</name><operator pos:start="1635:42" pos:end="1635:42">.</operator><name pos:start="1635:43" pos:end="1635:47">bssid</name></name></expr></argument>, <argument pos:start="1635:50" pos:end="1635:65"><expr pos:start="1635:50" pos:end="1635:65"><name pos:start="1635:50" pos:end="1635:65">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1636:17" pos:end="1636:58"><expr pos:start="1636:17" pos:end="1636:57"><name pos:start="1636:17" pos:end="1636:28">broadcast_sa</name> <operator pos:start="1636:30" pos:end="1636:30">=</operator> <call pos:start="1636:32" pos:end="1636:57"><name pos:start="1636:32" pos:end="1636:47">AirPDcapGetSaPtr</name><argument_list pos:start="1636:48" pos:end="1636:57">(<argument pos:start="1636:49" pos:end="1636:51"><expr pos:start="1636:49" pos:end="1636:51"><name pos:start="1636:49" pos:end="1636:51">ctx</name></expr></argument>, <argument pos:start="1636:54" pos:end="1636:56"><expr pos:start="1636:54" pos:end="1636:56"><operator pos:start="1636:54" pos:end="1636:54">&amp;</operator><name pos:start="1636:55" pos:end="1636:56">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1638:17" pos:end="1641:17"><if pos:start="1638:17" pos:end="1641:17">if <condition pos:start="1638:20" pos:end="1638:41">(<expr pos:start="1638:21" pos:end="1638:40"><name pos:start="1638:21" pos:end="1638:32">broadcast_sa</name> <operator pos:start="1638:34" pos:end="1638:35">==</operator> <name pos:start="1638:37" pos:end="1638:40">NULL</name></expr>)</condition>
                <block pos:start="1639:17" pos:end="1641:17">{<block_content pos:start="1640:21" pos:end="1640:49">
                    <return pos:start="1640:21" pos:end="1640:49">return <expr pos:start="1640:28" pos:end="1640:48"><name pos:start="1640:28" pos:end="1640:48">AIRPDCAP_RET_REQ_DATA</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <return pos:start="1642:17" pos:end="1642:119">return <expr pos:start="1642:24" pos:end="1642:118"><operator pos:start="1642:24" pos:end="1642:24">(</operator><call pos:start="1642:25" pos:end="1642:117"><name pos:start="1642:25" pos:end="1642:54">AirPDcapDecryptWPABroadcastKey</name><argument_list pos:start="1642:55" pos:end="1642:117">(<argument pos:start="1642:56" pos:end="1642:62"><expr pos:start="1642:56" pos:end="1642:62"><name pos:start="1642:56" pos:end="1642:62">pEAPKey</name></expr></argument>, <argument pos:start="1642:65" pos:end="1642:80"><expr pos:start="1642:65" pos:end="1642:80"><name pos:start="1642:65" pos:end="1642:75"><name pos:start="1642:65" pos:end="1642:66">sa</name><operator pos:start="1642:67" pos:end="1642:68">-&gt;</operator><name pos:start="1642:69" pos:end="1642:71">wpa</name><operator pos:start="1642:72" pos:end="1642:72">.</operator><name pos:start="1642:73" pos:end="1642:75">ptk</name></name> <operator pos:start="1642:77" pos:end="1642:77">+</operator> <literal type="number" pos:start="1642:79" pos:end="1642:80">16</literal></expr></argument>, <argument pos:start="1642:83" pos:end="1642:94"><expr pos:start="1642:83" pos:end="1642:94"><name pos:start="1642:83" pos:end="1642:94">broadcast_sa</name></expr></argument>, <argument pos:start="1642:97" pos:end="1642:116"><expr pos:start="1642:97" pos:end="1642:116"><name pos:start="1642:97" pos:end="1642:103">tot_len</name> <operator pos:start="1642:105" pos:end="1642:105">-</operator> <name pos:start="1642:107" pos:end="1642:112">offset</name> <operator pos:start="1642:114" pos:end="1642:114">+</operator> <literal type="number" pos:start="1642:116" pos:end="1642:116">1</literal></expr></argument>)</argument_list></call><operator pos:start="1642:118" pos:end="1642:118">)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <return pos:start="1646:9" pos:end="1646:47">return <expr pos:start="1646:16" pos:end="1646:46"><name pos:start="1646:16" pos:end="1646:46">AIRPDCAP_RET_NO_VALID_HANDSHAKE</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="1649:5" pos:end="1681:5"><type pos:start="1649:5" pos:end="1649:14"><specifier pos:start="1649:5" pos:end="1649:10">static</specifier> <name pos:start="1649:12" pos:end="1649:14">INT</name></type>
    <name pos:start="1650:5" pos:end="1650:24">AirPDcapRsnaMicCheck</name><parameter_list pos:start="1650:25" pos:end="1654:23">(
        <parameter pos:start="1651:9" pos:end="1651:20"><decl pos:start="1651:9" pos:end="1651:20"><type pos:start="1651:9" pos:end="1651:20"><name pos:start="1651:9" pos:end="1651:13">UCHAR</name> <modifier pos:start="1651:15" pos:end="1651:15">*</modifier></type><name pos:start="1651:16" pos:end="1651:20">eapol</name></decl></parameter>,
        <parameter pos:start="1652:9" pos:end="1652:24"><decl pos:start="1652:9" pos:end="1652:24"><type pos:start="1652:9" pos:end="1652:24"><name pos:start="1652:9" pos:end="1652:14">USHORT</name></type> <name pos:start="1652:16" pos:end="1652:24">eapol_len</name></decl></parameter>,
        <parameter pos:start="1653:9" pos:end="1653:39"><decl pos:start="1653:9" pos:end="1653:39"><type pos:start="1653:9" pos:end="1653:17"><name pos:start="1653:9" pos:end="1653:13">UCHAR</name></type> <name pos:start="1653:15" pos:end="1653:39"><name pos:start="1653:15" pos:end="1653:17">KCK</name><index pos:start="1653:18" pos:end="1653:39">[<expr pos:start="1653:19" pos:end="1653:38"><name pos:start="1653:19" pos:end="1653:38">AIRPDCAP_WPA_KCK_LEN</name></expr>]</index></name></decl></parameter>,
        <parameter pos:start="1654:9" pos:end="1654:22"><decl pos:start="1654:9" pos:end="1654:22"><type pos:start="1654:9" pos:end="1654:22"><name pos:start="1654:9" pos:end="1654:14">USHORT</name></type> <name pos:start="1654:16" pos:end="1654:22">key_ver</name></decl></parameter>)</parameter_list>
    <block pos:start="1655:5" pos:end="1681:5">{<block_content pos:start="1656:9" pos:end="1680:59">
        <decl_stmt pos:start="1656:9" pos:end="1656:43"><decl pos:start="1656:9" pos:end="1656:42"><type pos:start="1656:9" pos:end="1656:13"><name pos:start="1656:9" pos:end="1656:13">UCHAR</name></type> <name pos:start="1656:15" pos:end="1656:42"><name pos:start="1656:15" pos:end="1656:17">mic</name><index pos:start="1656:18" pos:end="1656:42">[<expr pos:start="1656:19" pos:end="1656:41"><name pos:start="1656:19" pos:end="1656:41">AIRPDCAP_WPA_MICKEY_LEN</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="1657:9" pos:end="1657:24"><decl pos:start="1657:9" pos:end="1657:23"><type pos:start="1657:9" pos:end="1657:13"><name pos:start="1657:9" pos:end="1657:13">UCHAR</name></type> <name pos:start="1657:15" pos:end="1657:23"><name pos:start="1657:15" pos:end="1657:19">c_mic</name><index pos:start="1657:20" pos:end="1657:23">[<expr pos:start="1657:21" pos:end="1657:22"><literal type="number" pos:start="1657:21" pos:end="1657:22">20</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block" pos:start="1657:26" pos:end="1657:82">/* MIC 16 byte, the HMAC-SHA1 use a buffer of 20 bytes */</comment>

        <comment type="block" pos:start="1659:9" pos:end="1659:48">/* copy the MIC from the EAPOL packet */</comment>
        <expr_stmt pos:start="1660:9" pos:end="1660:85"><expr pos:start="1660:9" pos:end="1660:84"><call pos:start="1660:9" pos:end="1660:84"><name pos:start="1660:9" pos:end="1660:14">memcpy</name><argument_list pos:start="1660:15" pos:end="1660:84">(<argument pos:start="1660:16" pos:end="1660:18"><expr pos:start="1660:16" pos:end="1660:18"><name pos:start="1660:16" pos:end="1660:18">mic</name></expr></argument>, <argument pos:start="1660:21" pos:end="1660:58"><expr pos:start="1660:21" pos:end="1660:58"><name pos:start="1660:21" pos:end="1660:25">eapol</name> <operator pos:start="1660:27" pos:end="1660:27">+</operator> <name pos:start="1660:29" pos:end="1660:54">AIRPDCAP_WPA_MICKEY_OFFSET</name> <operator pos:start="1660:56" pos:end="1660:56">+</operator> <literal type="number" pos:start="1660:58" pos:end="1660:58">4</literal></expr></argument>, <argument pos:start="1660:61" pos:end="1660:83"><expr pos:start="1660:61" pos:end="1660:83"><name pos:start="1660:61" pos:end="1660:83">AIRPDCAP_WPA_MICKEY_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1662:9" pos:end="1662:73">/* set to 0 the MIC in the EAPOL packet (to calculate the MIC) */</comment>
        <expr_stmt pos:start="1663:9" pos:end="1663:83"><expr pos:start="1663:9" pos:end="1663:82"><call pos:start="1663:9" pos:end="1663:82"><name pos:start="1663:9" pos:end="1663:14">memset</name><argument_list pos:start="1663:15" pos:end="1663:82">(<argument pos:start="1663:16" pos:end="1663:53"><expr pos:start="1663:16" pos:end="1663:53"><name pos:start="1663:16" pos:end="1663:20">eapol</name> <operator pos:start="1663:22" pos:end="1663:22">+</operator> <name pos:start="1663:24" pos:end="1663:49">AIRPDCAP_WPA_MICKEY_OFFSET</name> <operator pos:start="1663:51" pos:end="1663:51">+</operator> <literal type="number" pos:start="1663:53" pos:end="1663:53">4</literal></expr></argument>, <argument pos:start="1663:56" pos:end="1663:56"><expr pos:start="1663:56" pos:end="1663:56"><literal type="number" pos:start="1663:56" pos:end="1663:56">0</literal></expr></argument>, <argument pos:start="1663:59" pos:end="1663:81"><expr pos:start="1663:59" pos:end="1663:81"><name pos:start="1663:59" pos:end="1663:81">AIRPDCAP_WPA_MICKEY_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1665:9" pos:end="1677:42"><if pos:start="1665:9" pos:end="1669:9">if <condition pos:start="1665:12" pos:end="1665:53">(<expr pos:start="1665:13" pos:end="1665:52"><name pos:start="1665:13" pos:end="1665:19">key_ver</name> <operator pos:start="1665:21" pos:end="1665:22">==</operator> <name pos:start="1665:24" pos:end="1665:52">AIRPDCAP_WPA_KEY_VER_NOT_CCMP</name></expr>)</condition>
        <block pos:start="1666:9" pos:end="1669:9">{<block_content pos:start="1668:13" pos:end="1668:73">
            <comment type="block" pos:start="1667:13" pos:end="1667:52">/* use HMAC-MD5 for the EAPOL-Key MIC */</comment>
            <expr_stmt pos:start="1668:13" pos:end="1668:73"><expr pos:start="1668:13" pos:end="1668:72"><call pos:start="1668:13" pos:end="1668:72"><name pos:start="1668:13" pos:end="1668:20">md5_hmac</name><argument_list pos:start="1668:21" pos:end="1668:72">(<argument pos:start="1668:22" pos:end="1668:26"><expr pos:start="1668:22" pos:end="1668:26"><name pos:start="1668:22" pos:end="1668:26">eapol</name></expr></argument>, <argument pos:start="1668:29" pos:end="1668:37"><expr pos:start="1668:29" pos:end="1668:37"><name pos:start="1668:29" pos:end="1668:37">eapol_len</name></expr></argument>, <argument pos:start="1668:40" pos:end="1668:42"><expr pos:start="1668:40" pos:end="1668:42"><name pos:start="1668:40" pos:end="1668:42">KCK</name></expr></argument>, <argument pos:start="1668:45" pos:end="1668:64"><expr pos:start="1668:45" pos:end="1668:64"><name pos:start="1668:45" pos:end="1668:64">AIRPDCAP_WPA_KCK_LEN</name></expr></argument>, <argument pos:start="1668:67" pos:end="1668:71"><expr pos:start="1668:67" pos:end="1668:71"><name pos:start="1668:67" pos:end="1668:71">c_mic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif" pos:start="1670:9" pos:end="1674:9">else if <condition pos:start="1670:17" pos:end="1670:58">(<expr pos:start="1670:18" pos:end="1670:57"><name pos:start="1670:18" pos:end="1670:24">key_ver</name> <operator pos:start="1670:26" pos:end="1670:27">==</operator> <name pos:start="1670:29" pos:end="1670:57">AIRPDCAP_WPA_KEY_VER_AES_CCMP</name></expr>)</condition>
        <block pos:start="1671:9" pos:end="1674:9">{<block_content pos:start="1673:13" pos:end="1673:74">
            <comment type="block" pos:start="1672:13" pos:end="1672:57">/* use HMAC-SHA1-128 for the EAPOL-Key MIC */</comment>
            <expr_stmt pos:start="1673:13" pos:end="1673:74"><expr pos:start="1673:13" pos:end="1673:73"><call pos:start="1673:13" pos:end="1673:73"><name pos:start="1673:13" pos:end="1673:21">sha1_hmac</name><argument_list pos:start="1673:22" pos:end="1673:73">(<argument pos:start="1673:23" pos:end="1673:25"><expr pos:start="1673:23" pos:end="1673:25"><name pos:start="1673:23" pos:end="1673:25">KCK</name></expr></argument>, <argument pos:start="1673:28" pos:end="1673:47"><expr pos:start="1673:28" pos:end="1673:47"><name pos:start="1673:28" pos:end="1673:47">AIRPDCAP_WPA_KCK_LEN</name></expr></argument>, <argument pos:start="1673:50" pos:end="1673:54"><expr pos:start="1673:50" pos:end="1673:54"><name pos:start="1673:50" pos:end="1673:54">eapol</name></expr></argument>, <argument pos:start="1673:57" pos:end="1673:65"><expr pos:start="1673:57" pos:end="1673:65"><name pos:start="1673:57" pos:end="1673:65">eapol_len</name></expr></argument>, <argument pos:start="1673:68" pos:end="1673:72"><expr pos:start="1673:68" pos:end="1673:72"><name pos:start="1673:68" pos:end="1673:72">c_mic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else pos:start="1675:9" pos:end="1677:42">else<block type="pseudo" pos:start="1677:13" pos:end="1677:42"><block_content pos:start="1677:13" pos:end="1677:42">
            <comment type="block" pos:start="1676:13" pos:end="1676:55">/* key descriptor version not recognized */</comment>
            <return pos:start="1677:13" pos:end="1677:42">return <expr pos:start="1677:20" pos:end="1677:41"><name pos:start="1677:20" pos:end="1677:41">AIRPDCAP_RET_UNSUCCESS</name></expr>;</return></block_content></block></else></if_stmt>

        <comment type="block" pos:start="1679:9" pos:end="1679:89">/* compare calculated MIC with the Key MIC and return result (0 means success) */</comment>
        <return pos:start="1680:9" pos:end="1680:59">return <expr pos:start="1680:16" pos:end="1680:58"><call pos:start="1680:16" pos:end="1680:58"><name pos:start="1680:16" pos:end="1680:21">memcmp</name><argument_list pos:start="1680:22" pos:end="1680:58">(<argument pos:start="1680:23" pos:end="1680:25"><expr pos:start="1680:23" pos:end="1680:25"><name pos:start="1680:23" pos:end="1680:25">mic</name></expr></argument>, <argument pos:start="1680:28" pos:end="1680:32"><expr pos:start="1680:28" pos:end="1680:32"><name pos:start="1680:28" pos:end="1680:32">c_mic</name></expr></argument>, <argument pos:start="1680:35" pos:end="1680:57"><expr pos:start="1680:35" pos:end="1680:57"><name pos:start="1680:35" pos:end="1680:57">AIRPDCAP_WPA_MICKEY_LEN</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="1683:5" pos:end="1752:5"><type pos:start="1683:5" pos:end="1683:14"><specifier pos:start="1683:5" pos:end="1683:10">static</specifier> <name pos:start="1683:12" pos:end="1683:14">INT</name></type>
    <name pos:start="1684:5" pos:end="1684:23">AirPDcapValidateKey</name><parameter_list pos:start="1684:24" pos:end="1685:31">(
        <parameter pos:start="1685:9" pos:end="1685:30"><decl pos:start="1685:9" pos:end="1685:30"><type pos:start="1685:9" pos:end="1685:26"><name pos:start="1685:9" pos:end="1685:26">PAIRPDCAP_KEY_ITEM</name></type> <name pos:start="1685:28" pos:end="1685:30">key</name></decl></parameter>)</parameter_list>
    <block pos:start="1686:5" pos:end="1752:5">{<block_content pos:start="1687:9" pos:end="1751:19">
        <decl_stmt pos:start="1687:9" pos:end="1687:19"><decl pos:start="1687:9" pos:end="1687:18"><type pos:start="1687:9" pos:end="1687:14"><name pos:start="1687:9" pos:end="1687:14">size_t</name></type> <name pos:start="1687:16" pos:end="1687:18">len</name></decl>;</decl_stmt>
        <decl_stmt pos:start="1688:9" pos:end="1688:25"><decl pos:start="1688:9" pos:end="1688:24"><type pos:start="1688:9" pos:end="1688:13"><name pos:start="1688:9" pos:end="1688:13">UCHAR</name></type> <name pos:start="1688:15" pos:end="1688:17">ret</name> <init pos:start="1688:19" pos:end="1688:24">= <expr pos:start="1688:21" pos:end="1688:24"><name pos:start="1688:21" pos:end="1688:24">TRUE</name></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="1689:9" pos:end="1689:58"><expr pos:start="1689:9" pos:end="1689:57"><call pos:start="1689:9" pos:end="1689:57"><name pos:start="1689:9" pos:end="1689:34">AIRPDCAP_DEBUG_TRACE_START</name><argument_list pos:start="1689:35" pos:end="1689:57">(<argument pos:start="1689:36" pos:end="1689:56"><expr pos:start="1689:36" pos:end="1689:56"><literal type="string" pos:start="1689:36" pos:end="1689:56">"AirPDcapValidateKey"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1691:9" pos:end="1696:9"><if pos:start="1691:9" pos:end="1696:9">if <condition pos:start="1691:12" pos:end="1691:24">(<expr pos:start="1691:13" pos:end="1691:23"><name pos:start="1691:13" pos:end="1691:15">key</name> <operator pos:start="1691:17" pos:end="1691:18">==</operator> <name pos:start="1691:20" pos:end="1691:23">NULL</name></expr>)</condition>
        <block pos:start="1692:9" pos:end="1696:9">{<block_content pos:start="1693:13" pos:end="1695:25">
            <expr_stmt pos:start="1693:13" pos:end="1693:97"><expr pos:start="1693:13" pos:end="1693:96"><call pos:start="1693:13" pos:end="1693:96"><name pos:start="1693:13" pos:end="1693:37">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1693:38" pos:end="1693:96">(<argument pos:start="1693:39" pos:end="1693:59"><expr pos:start="1693:39" pos:end="1693:59"><literal type="string" pos:start="1693:39" pos:end="1693:59">"AirPDcapValidateKey"</literal></expr></argument>, <argument pos:start="1693:62" pos:end="1693:71"><expr pos:start="1693:62" pos:end="1693:71"><literal type="string" pos:start="1693:62" pos:end="1693:71">"NULL key"</literal></expr></argument>, <argument pos:start="1693:74" pos:end="1693:95"><expr pos:start="1693:74" pos:end="1693:95"><name pos:start="1693:74" pos:end="1693:95">AIRPDCAP_DEBUG_LEVEL_5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1694:13" pos:end="1694:62"><expr pos:start="1694:13" pos:end="1694:61"><call pos:start="1694:13" pos:end="1694:61"><name pos:start="1694:13" pos:end="1694:38">AIRPDCAP_DEBUG_TRACE_START</name><argument_list pos:start="1694:39" pos:end="1694:61">(<argument pos:start="1694:40" pos:end="1694:60"><expr pos:start="1694:40" pos:end="1694:60"><literal type="string" pos:start="1694:40" pos:end="1694:60">"AirPDcapValidateKey"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1695:13" pos:end="1695:25">return <expr pos:start="1695:20" pos:end="1695:24"><name pos:start="1695:20" pos:end="1695:24">FALSE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <switch pos:start="1698:9" pos:end="1748:9">switch <condition pos:start="1698:16" pos:end="1698:29">(<expr pos:start="1698:17" pos:end="1698:28"><name pos:start="1698:17" pos:end="1698:28"><name pos:start="1698:17" pos:end="1698:19">key</name><operator pos:start="1698:20" pos:end="1698:21">-&gt;</operator><name pos:start="1698:22" pos:end="1698:28">KeyType</name></name></expr>)</condition>
        <block pos:start="1699:9" pos:end="1748:9">{<block_content pos:start="1700:9" pos:end="1747:24">
        <case pos:start="1700:9" pos:end="1700:35">case <expr pos:start="1700:14" pos:end="1700:34"><name pos:start="1700:14" pos:end="1700:34">AIRPDCAP_KEY_TYPE_WEP</name></expr>:</case>
            <comment type="block" pos:start="1701:13" pos:end="1701:39">/* check key size limits */</comment>
            <expr_stmt pos:start="1702:13" pos:end="1702:45"><expr pos:start="1702:13" pos:end="1702:44"><name pos:start="1702:13" pos:end="1702:15">len</name> <operator pos:start="1702:17" pos:end="1702:17">=</operator> <name pos:start="1702:19" pos:end="1702:44"><name pos:start="1702:19" pos:end="1702:21">key</name><operator pos:start="1702:22" pos:end="1702:23">-&gt;</operator><name pos:start="1702:24" pos:end="1702:30">KeyData</name><operator pos:start="1702:31" pos:end="1702:31">.</operator><name pos:start="1702:32" pos:end="1702:34">Wep</name><operator pos:start="1702:35" pos:end="1702:35">.</operator><name pos:start="1702:36" pos:end="1702:44">WepKeyLen</name></name></expr>;</expr_stmt>
            <if_stmt pos:start="1703:13" pos:end="1707:13"><if pos:start="1703:13" pos:end="1707:13">if <condition pos:start="1703:16" pos:end="1703:79">(<expr pos:start="1703:17" pos:end="1703:78"><name pos:start="1703:17" pos:end="1703:54"><name pos:start="1703:17" pos:end="1703:19">len</name> <argument_list type="generic" pos:start="1703:21" pos:end="1703:54">&lt; <argument pos:start="1703:23" pos:end="1703:52"><expr pos:start="1703:23" pos:end="1703:52"><name pos:start="1703:23" pos:end="1703:45">AIRPDCAP_WEP_KEY_MINLEN</name> <operator pos:start="1703:47" pos:end="1703:48">||</operator> <name pos:start="1703:50" pos:end="1703:52">len</name></expr></argument> &gt;</argument_list></name> <name pos:start="1703:56" pos:end="1703:78">AIRPDCAP_WEP_KEY_MAXLEN</name></expr>)</condition>
            <block pos:start="1704:13" pos:end="1707:13">{<block_content pos:start="1705:17" pos:end="1706:28">
                <expr_stmt pos:start="1705:17" pos:end="1705:125"><expr pos:start="1705:17" pos:end="1705:124"><call pos:start="1705:17" pos:end="1705:124"><name pos:start="1705:17" pos:end="1705:41">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1705:42" pos:end="1705:124">(<argument pos:start="1705:43" pos:end="1705:63"><expr pos:start="1705:43" pos:end="1705:63"><literal type="string" pos:start="1705:43" pos:end="1705:63">"AirPDcapValidateKey"</literal></expr></argument>, <argument pos:start="1705:66" pos:end="1705:99"><expr pos:start="1705:66" pos:end="1705:99"><literal type="string" pos:start="1705:66" pos:end="1705:99">"WEP key: key length not accepted"</literal></expr></argument>, <argument pos:start="1705:102" pos:end="1705:123"><expr pos:start="1705:102" pos:end="1705:123"><name pos:start="1705:102" pos:end="1705:123">AIRPDCAP_DEBUG_LEVEL_5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1706:17" pos:end="1706:28"><expr pos:start="1706:17" pos:end="1706:27"><name pos:start="1706:17" pos:end="1706:19">ret</name> <operator pos:start="1706:21" pos:end="1706:21">=</operator> <name pos:start="1706:23" pos:end="1706:27">FALSE</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break pos:start="1708:13" pos:end="1708:18">break;</break>

        <case pos:start="1710:9" pos:end="1710:38">case <expr pos:start="1710:14" pos:end="1710:37"><name pos:start="1710:14" pos:end="1710:37">AIRPDCAP_KEY_TYPE_WEP_40</name></expr>:</case>
            <comment type="block" pos:start="1711:13" pos:end="1711:72">/* set the standard length and use a generic WEP key type */</comment>
            <expr_stmt pos:start="1712:13" pos:end="1712:65"><expr pos:start="1712:13" pos:end="1712:64"><name pos:start="1712:13" pos:end="1712:38"><name pos:start="1712:13" pos:end="1712:15">key</name><operator pos:start="1712:16" pos:end="1712:17">-&gt;</operator><name pos:start="1712:18" pos:end="1712:24">KeyData</name><operator pos:start="1712:25" pos:end="1712:25">.</operator><name pos:start="1712:26" pos:end="1712:28">Wep</name><operator pos:start="1712:29" pos:end="1712:29">.</operator><name pos:start="1712:30" pos:end="1712:38">WepKeyLen</name></name> <operator pos:start="1712:40" pos:end="1712:40">=</operator> <name pos:start="1712:42" pos:end="1712:64">AIRPDCAP_WEP_40_KEY_LEN</name></expr>;</expr_stmt>
            <expr_stmt pos:start="1713:13" pos:end="1713:49"><expr pos:start="1713:13" pos:end="1713:48"><name pos:start="1713:13" pos:end="1713:24"><name pos:start="1713:13" pos:end="1713:15">key</name><operator pos:start="1713:16" pos:end="1713:17">-&gt;</operator><name pos:start="1713:18" pos:end="1713:24">KeyType</name></name> <operator pos:start="1713:26" pos:end="1713:26">=</operator> <name pos:start="1713:28" pos:end="1713:48">AIRPDCAP_KEY_TYPE_WEP</name></expr>;</expr_stmt>
            <break pos:start="1714:13" pos:end="1714:18">break;</break>

        <case pos:start="1716:9" pos:end="1716:39">case <expr pos:start="1716:14" pos:end="1716:38"><name pos:start="1716:14" pos:end="1716:38">AIRPDCAP_KEY_TYPE_WEP_104</name></expr>:</case>
            <comment type="block" pos:start="1717:13" pos:end="1717:72">/* set the standard length and use a generic WEP key type */</comment>
            <expr_stmt pos:start="1718:13" pos:end="1718:66"><expr pos:start="1718:13" pos:end="1718:65"><name pos:start="1718:13" pos:end="1718:38"><name pos:start="1718:13" pos:end="1718:15">key</name><operator pos:start="1718:16" pos:end="1718:17">-&gt;</operator><name pos:start="1718:18" pos:end="1718:24">KeyData</name><operator pos:start="1718:25" pos:end="1718:25">.</operator><name pos:start="1718:26" pos:end="1718:28">Wep</name><operator pos:start="1718:29" pos:end="1718:29">.</operator><name pos:start="1718:30" pos:end="1718:38">WepKeyLen</name></name> <operator pos:start="1718:40" pos:end="1718:40">=</operator> <name pos:start="1718:42" pos:end="1718:65">AIRPDCAP_WEP_104_KEY_LEN</name></expr>;</expr_stmt>
            <expr_stmt pos:start="1719:13" pos:end="1719:49"><expr pos:start="1719:13" pos:end="1719:48"><name pos:start="1719:13" pos:end="1719:24"><name pos:start="1719:13" pos:end="1719:15">key</name><operator pos:start="1719:16" pos:end="1719:17">-&gt;</operator><name pos:start="1719:18" pos:end="1719:24">KeyType</name></name> <operator pos:start="1719:26" pos:end="1719:26">=</operator> <name pos:start="1719:28" pos:end="1719:48">AIRPDCAP_KEY_TYPE_WEP</name></expr>;</expr_stmt>
            <break pos:start="1720:13" pos:end="1720:18">break;</break>

        <case pos:start="1722:9" pos:end="1722:39">case <expr pos:start="1722:14" pos:end="1722:38"><name pos:start="1722:14" pos:end="1722:38">AIRPDCAP_KEY_TYPE_WPA_PWD</name></expr>:</case>
            <comment type="block" pos:start="1723:13" pos:end="1723:55">/* check passphrase and SSID size limits */</comment>
            <expr_stmt pos:start="1724:13" pos:end="1724:50"><expr pos:start="1724:13" pos:end="1724:49"><name pos:start="1724:13" pos:end="1724:15">len</name> <operator pos:start="1724:17" pos:end="1724:17">=</operator> <call pos:start="1724:19" pos:end="1724:49"><name pos:start="1724:19" pos:end="1724:24">strlen</name><argument_list pos:start="1724:25" pos:end="1724:49">(<argument pos:start="1724:26" pos:end="1724:48"><expr pos:start="1724:26" pos:end="1724:48"><name pos:start="1724:26" pos:end="1724:48"><name pos:start="1724:26" pos:end="1724:28">key</name><operator pos:start="1724:29" pos:end="1724:30">-&gt;</operator><name pos:start="1724:31" pos:end="1724:37">UserPwd</name><operator pos:start="1724:38" pos:end="1724:38">.</operator><name pos:start="1724:39" pos:end="1724:48">Passphrase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1725:13" pos:end="1729:13"><if pos:start="1725:13" pos:end="1729:13">if <condition pos:start="1725:16" pos:end="1725:95">(<expr pos:start="1725:17" pos:end="1725:94"><name pos:start="1725:17" pos:end="1725:62"><name pos:start="1725:17" pos:end="1725:19">len</name> <argument_list type="generic" pos:start="1725:21" pos:end="1725:62">&lt; <argument pos:start="1725:23" pos:end="1725:60"><expr pos:start="1725:23" pos:end="1725:60"><name pos:start="1725:23" pos:end="1725:53">AIRPDCAP_WPA_PASSPHRASE_MIN_LEN</name> <operator pos:start="1725:55" pos:end="1725:56">||</operator> <name pos:start="1725:58" pos:end="1725:60">len</name></expr></argument> &gt;</argument_list></name> <name pos:start="1725:64" pos:end="1725:94">AIRPDCAP_WPA_PASSPHRASE_MAX_LEN</name></expr>)</condition>
            <block pos:start="1726:13" pos:end="1729:13">{<block_content pos:start="1727:17" pos:end="1728:28">
                <expr_stmt pos:start="1727:17" pos:end="1727:136"><expr pos:start="1727:17" pos:end="1727:135"><call pos:start="1727:17" pos:end="1727:135"><name pos:start="1727:17" pos:end="1727:41">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1727:42" pos:end="1727:135">(<argument pos:start="1727:43" pos:end="1727:63"><expr pos:start="1727:43" pos:end="1727:63"><literal type="string" pos:start="1727:43" pos:end="1727:63">"AirPDcapValidateKey"</literal></expr></argument>, <argument pos:start="1727:66" pos:end="1727:110"><expr pos:start="1727:66" pos:end="1727:110"><literal type="string" pos:start="1727:66" pos:end="1727:110">"WPA-PWD key: passphrase length not accepted"</literal></expr></argument>, <argument pos:start="1727:113" pos:end="1727:134"><expr pos:start="1727:113" pos:end="1727:134"><name pos:start="1727:113" pos:end="1727:134">AIRPDCAP_DEBUG_LEVEL_5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1728:17" pos:end="1728:28"><expr pos:start="1728:17" pos:end="1728:27"><name pos:start="1728:17" pos:end="1728:19">ret</name> <operator pos:start="1728:21" pos:end="1728:21">=</operator> <name pos:start="1728:23" pos:end="1728:27">FALSE</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="1731:13" pos:end="1731:39"><expr pos:start="1731:13" pos:end="1731:38"><name pos:start="1731:13" pos:end="1731:15">len</name> <operator pos:start="1731:17" pos:end="1731:17">=</operator> <name pos:start="1731:19" pos:end="1731:38"><name pos:start="1731:19" pos:end="1731:21">key</name><operator pos:start="1731:22" pos:end="1731:23">-&gt;</operator><name pos:start="1731:24" pos:end="1731:30">UserPwd</name><operator pos:start="1731:31" pos:end="1731:31">.</operator><name pos:start="1731:32" pos:end="1731:38">SsidLen</name></name></expr>;</expr_stmt>
            <if_stmt pos:start="1732:13" pos:end="1736:13"><if pos:start="1732:13" pos:end="1736:13">if <condition pos:start="1732:16" pos:end="1732:48">(<expr pos:start="1732:17" pos:end="1732:47"><name pos:start="1732:17" pos:end="1732:19">len</name> <operator pos:start="1732:21" pos:end="1732:21">&gt;</operator> <name pos:start="1732:23" pos:end="1732:47">AIRPDCAP_WPA_SSID_MAX_LEN</name></expr>)</condition>
            <block pos:start="1733:13" pos:end="1736:13">{<block_content pos:start="1734:17" pos:end="1735:28">
                <expr_stmt pos:start="1734:17" pos:end="1734:130"><expr pos:start="1734:17" pos:end="1734:129"><call pos:start="1734:17" pos:end="1734:129"><name pos:start="1734:17" pos:end="1734:41">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1734:42" pos:end="1734:129">(<argument pos:start="1734:43" pos:end="1734:63"><expr pos:start="1734:43" pos:end="1734:63"><literal type="string" pos:start="1734:43" pos:end="1734:63">"AirPDcapValidateKey"</literal></expr></argument>, <argument pos:start="1734:66" pos:end="1734:104"><expr pos:start="1734:66" pos:end="1734:104"><literal type="string" pos:start="1734:66" pos:end="1734:104">"WPA-PWD key: ssid length not accepted"</literal></expr></argument>, <argument pos:start="1734:107" pos:end="1734:128"><expr pos:start="1734:107" pos:end="1734:128"><name pos:start="1734:107" pos:end="1734:128">AIRPDCAP_DEBUG_LEVEL_5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1735:17" pos:end="1735:28"><expr pos:start="1735:17" pos:end="1735:27"><name pos:start="1735:17" pos:end="1735:19">ret</name> <operator pos:start="1735:21" pos:end="1735:21">=</operator> <name pos:start="1735:23" pos:end="1735:27">FALSE</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break pos:start="1738:13" pos:end="1738:18">break;</break>

        <case pos:start="1740:9" pos:end="1740:39">case <expr pos:start="1740:14" pos:end="1740:38"><name pos:start="1740:14" pos:end="1740:38">AIRPDCAP_KEY_TYPE_WPA_PSK</name></expr>:</case>
            <break pos:start="1741:13" pos:end="1741:18">break;</break>

        <case pos:start="1743:9" pos:end="1743:39">case <expr pos:start="1743:14" pos:end="1743:38"><name pos:start="1743:14" pos:end="1743:38">AIRPDCAP_KEY_TYPE_WPA_PMK</name></expr>:</case>
            <break pos:start="1744:13" pos:end="1744:18">break;</break>

        <default pos:start="1746:9" pos:end="1746:16">default:</default>
            <expr_stmt pos:start="1747:13" pos:end="1747:24"><expr pos:start="1747:13" pos:end="1747:23"><name pos:start="1747:13" pos:end="1747:15">ret</name> <operator pos:start="1747:17" pos:end="1747:17">=</operator> <name pos:start="1747:19" pos:end="1747:23">FALSE</name></expr>;</expr_stmt>
        </block_content>}</block></switch>

        <expr_stmt pos:start="1750:9" pos:end="1750:56"><expr pos:start="1750:9" pos:end="1750:55"><call pos:start="1750:9" pos:end="1750:55"><name pos:start="1750:9" pos:end="1750:32">AIRPDCAP_DEBUG_TRACE_END</name><argument_list pos:start="1750:33" pos:end="1750:55">(<argument pos:start="1750:34" pos:end="1750:54"><expr pos:start="1750:34" pos:end="1750:54"><literal type="string" pos:start="1750:34" pos:end="1750:54">"AirPDcapValidateKey"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1751:9" pos:end="1751:19">return <expr pos:start="1751:16" pos:end="1751:18"><name pos:start="1751:16" pos:end="1751:18">ret</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="1754:5" pos:end="1778:5"><type pos:start="1754:5" pos:end="1754:14"><specifier pos:start="1754:5" pos:end="1754:10">static</specifier> <name pos:start="1754:12" pos:end="1754:14">INT</name></type>
    <name pos:start="1755:5" pos:end="1755:17">AirPDcapGetSa</name><parameter_list pos:start="1755:18" pos:end="1757:40">(
        <parameter pos:start="1756:9" pos:end="1756:29"><decl pos:start="1756:9" pos:end="1756:29"><type pos:start="1756:9" pos:end="1756:29"><name pos:start="1756:9" pos:end="1756:25">PAIRPDCAP_CONTEXT</name></type> <name pos:start="1756:27" pos:end="1756:29">ctx</name></decl></parameter>,
        <parameter pos:start="1757:9" pos:end="1757:39"><decl pos:start="1757:9" pos:end="1757:39"><type pos:start="1757:9" pos:end="1757:39"><name pos:start="1757:9" pos:end="1757:35">AIRPDCAP_SEC_ASSOCIATION_ID</name> <modifier pos:start="1757:37" pos:end="1757:37">*</modifier></type><name pos:start="1757:38" pos:end="1757:39">id</name></decl></parameter>)</parameter_list>
    <block pos:start="1758:5" pos:end="1778:5">{<block_content pos:start="1759:9" pos:end="1777:18">
        <decl_stmt pos:start="1759:9" pos:end="1759:21"><decl pos:start="1759:9" pos:end="1759:20"><type pos:start="1759:9" pos:end="1759:11"><name pos:start="1759:9" pos:end="1759:11">INT</name></type> <name pos:start="1759:13" pos:end="1759:20">sa_index</name></decl>;</decl_stmt>
        <if_stmt pos:start="1760:9" pos:end="1775:9"><if pos:start="1760:9" pos:end="1775:9">if <condition pos:start="1760:12" pos:end="1760:32">(<expr pos:start="1760:13" pos:end="1760:31"><name pos:start="1760:13" pos:end="1760:25"><name pos:start="1760:13" pos:end="1760:15">ctx</name><operator pos:start="1760:16" pos:end="1760:17">-&gt;</operator><name pos:start="1760:18" pos:end="1760:25">sa_index</name></name> <operator pos:start="1760:27" pos:end="1760:28">!=</operator> <operator pos:start="1760:30" pos:end="1760:30">-</operator><literal type="number" pos:start="1760:31" pos:end="1760:31">1</literal></expr>)</condition>
        <block pos:start="1761:9" pos:end="1775:9">{<block_content pos:start="1764:13" pos:end="1774:13">
            <comment type="block" pos:start="1762:13" pos:end="1762:83">/* at least one association was stored                               */</comment>
            <comment type="block" pos:start="1763:13" pos:end="1763:83">/* search for the association from sa_index to 0 (most recent added) */</comment>
            <for pos:start="1764:13" pos:end="1774:13">for <control pos:start="1764:17" pos:end="1764:69">(<init pos:start="1764:18" pos:end="1764:42"><expr pos:start="1764:18" pos:end="1764:41"><name pos:start="1764:18" pos:end="1764:25">sa_index</name> <operator pos:start="1764:27" pos:end="1764:27">=</operator> <name pos:start="1764:29" pos:end="1764:41"><name pos:start="1764:29" pos:end="1764:31">ctx</name><operator pos:start="1764:32" pos:end="1764:33">-&gt;</operator><name pos:start="1764:34" pos:end="1764:41">sa_index</name></name></expr>;</init> <condition pos:start="1764:44" pos:end="1764:57"><expr pos:start="1764:44" pos:end="1764:56"><name pos:start="1764:44" pos:end="1764:51">sa_index</name> <operator pos:start="1764:53" pos:end="1764:54">&gt;=</operator> <literal type="number" pos:start="1764:56" pos:end="1764:56">0</literal></expr>;</condition> <incr pos:start="1764:59" pos:end="1764:68"><expr pos:start="1764:59" pos:end="1764:68"><name pos:start="1764:59" pos:end="1764:66">sa_index</name><operator pos:start="1764:67" pos:end="1764:68">--</operator></expr></incr>)</control>
            <block pos:start="1765:13" pos:end="1774:13">{<block_content pos:start="1766:17" pos:end="1773:17">
                <if_stmt pos:start="1766:17" pos:end="1773:17"><if pos:start="1766:17" pos:end="1773:17">if <condition pos:start="1766:20" pos:end="1766:43">(<expr pos:start="1766:21" pos:end="1766:42"><name pos:start="1766:21" pos:end="1766:37"><name pos:start="1766:21" pos:end="1766:23">ctx</name><operator pos:start="1766:24" pos:end="1766:25">-&gt;</operator><name pos:start="1766:26" pos:end="1766:27">sa</name><index pos:start="1766:28" pos:end="1766:37">[<expr pos:start="1766:29" pos:end="1766:36"><name pos:start="1766:29" pos:end="1766:36">sa_index</name></expr>]</index></name><operator pos:start="1766:38" pos:end="1766:38">.</operator><name pos:start="1766:39" pos:end="1766:42">used</name></expr>)</condition>
                <block pos:start="1767:17" pos:end="1773:17">{<block_content pos:start="1768:21" pos:end="1772:21">
                    <if_stmt pos:start="1768:21" pos:end="1772:21"><if pos:start="1768:21" pos:end="1772:21">if <condition pos:start="1768:24" pos:end="1768:104">(<expr pos:start="1768:25" pos:end="1768:103"><call pos:start="1768:25" pos:end="1768:98"><name pos:start="1768:25" pos:end="1768:30">memcmp</name><argument_list pos:start="1768:31" pos:end="1768:98">(<argument pos:start="1768:32" pos:end="1768:33"><expr pos:start="1768:32" pos:end="1768:33"><name pos:start="1768:32" pos:end="1768:33">id</name></expr></argument>, <argument pos:start="1768:36" pos:end="1768:60"><expr pos:start="1768:36" pos:end="1768:60"><operator pos:start="1768:36" pos:end="1768:36">&amp;</operator><operator pos:start="1768:37" pos:end="1768:37">(</operator><name pos:start="1768:38" pos:end="1768:54"><name pos:start="1768:38" pos:end="1768:40">ctx</name><operator pos:start="1768:41" pos:end="1768:42">-&gt;</operator><name pos:start="1768:43" pos:end="1768:44">sa</name><index pos:start="1768:45" pos:end="1768:54">[<expr pos:start="1768:46" pos:end="1768:53"><name pos:start="1768:46" pos:end="1768:53">sa_index</name></expr>]</index></name><operator pos:start="1768:55" pos:end="1768:55">.</operator><name pos:start="1768:56" pos:end="1768:59">saId</name><operator pos:start="1768:60" pos:end="1768:60">)</operator></expr></argument>, <argument pos:start="1768:63" pos:end="1768:97"><expr pos:start="1768:63" pos:end="1768:97"><sizeof pos:start="1768:63" pos:end="1768:97">sizeof<argument_list pos:start="1768:69" pos:end="1768:97">(<argument pos:start="1768:70" pos:end="1768:96"><expr pos:start="1768:70" pos:end="1768:96"><name pos:start="1768:70" pos:end="1768:96">AIRPDCAP_SEC_ASSOCIATION_ID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="1768:100" pos:end="1768:101">==</operator> <literal type="number" pos:start="1768:103" pos:end="1768:103">0</literal></expr>)</condition>
                    <block pos:start="1769:21" pos:end="1772:21">{<block_content pos:start="1770:25" pos:end="1771:40">
                        <expr_stmt pos:start="1770:25" pos:end="1770:46"><expr pos:start="1770:25" pos:end="1770:45"><name pos:start="1770:25" pos:end="1770:34"><name pos:start="1770:25" pos:end="1770:27">ctx</name><operator pos:start="1770:28" pos:end="1770:29">-&gt;</operator><name pos:start="1770:30" pos:end="1770:34">index</name></name> <operator pos:start="1770:36" pos:end="1770:36">=</operator> <name pos:start="1770:38" pos:end="1770:45">sa_index</name></expr>;</expr_stmt>
                        <return pos:start="1771:25" pos:end="1771:40">return <expr pos:start="1771:32" pos:end="1771:39"><name pos:start="1771:32" pos:end="1771:39">sa_index</name></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <return pos:start="1777:9" pos:end="1777:18">return <expr pos:start="1777:16" pos:end="1777:17"><operator pos:start="1777:16" pos:end="1777:16">-</operator><literal type="number" pos:start="1777:17" pos:end="1777:17">1</literal></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="1780:5" pos:end="1829:5"><type pos:start="1780:5" pos:end="1780:14"><specifier pos:start="1780:5" pos:end="1780:10">static</specifier> <name pos:start="1780:12" pos:end="1780:14">INT</name></type>
    <name pos:start="1781:5" pos:end="1781:19">AirPDcapStoreSa</name><parameter_list pos:start="1781:20" pos:end="1783:40">(
        <parameter pos:start="1782:9" pos:end="1782:29"><decl pos:start="1782:9" pos:end="1782:29"><type pos:start="1782:9" pos:end="1782:29"><name pos:start="1782:9" pos:end="1782:25">PAIRPDCAP_CONTEXT</name></type> <name pos:start="1782:27" pos:end="1782:29">ctx</name></decl></parameter>,
        <parameter pos:start="1783:9" pos:end="1783:39"><decl pos:start="1783:9" pos:end="1783:39"><type pos:start="1783:9" pos:end="1783:39"><name pos:start="1783:9" pos:end="1783:35">AIRPDCAP_SEC_ASSOCIATION_ID</name> <modifier pos:start="1783:37" pos:end="1783:37">*</modifier></type><name pos:start="1783:38" pos:end="1783:39">id</name></decl></parameter>)</parameter_list>
    <block pos:start="1784:5" pos:end="1829:5">{<block_content pos:start="1785:9" pos:end="1828:26">
        <decl_stmt pos:start="1785:9" pos:end="1785:22"><decl pos:start="1785:9" pos:end="1785:21"><type pos:start="1785:9" pos:end="1785:11"><name pos:start="1785:9" pos:end="1785:11">INT</name></type> <name pos:start="1785:13" pos:end="1785:21">last_free</name></decl>;</decl_stmt>
        <if_stmt pos:start="1786:9" pos:end="1790:9"><if pos:start="1786:9" pos:end="1790:9">if <condition pos:start="1786:12" pos:end="1786:70">(<expr pos:start="1786:13" pos:end="1786:69"><name pos:start="1786:13" pos:end="1786:33"><name pos:start="1786:13" pos:end="1786:15">ctx</name><operator pos:start="1786:16" pos:end="1786:17">-&gt;</operator><name pos:start="1786:18" pos:end="1786:33">first_free_index</name></name> <operator pos:start="1786:35" pos:end="1786:36">&gt;=</operator> <name pos:start="1786:38" pos:end="1786:69">AIRPDCAP_MAX_SEC_ASSOCIATIONS_NR</name></expr>)</condition>
        <block pos:start="1787:9" pos:end="1790:9">{<block_content pos:start="1789:13" pos:end="1789:22">
            <comment type="block" pos:start="1788:13" pos:end="1788:60">/* there is no empty space available. FAILURE */</comment>
            <return pos:start="1789:13" pos:end="1789:22">return <expr pos:start="1789:20" pos:end="1789:21"><operator pos:start="1789:20" pos:end="1789:20">-</operator><literal type="number" pos:start="1789:21" pos:end="1789:21">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="1791:9" pos:end="1808:9"><if pos:start="1791:9" pos:end="1808:9">if <condition pos:start="1791:12" pos:end="1791:48">(<expr pos:start="1791:13" pos:end="1791:47"><name pos:start="1791:13" pos:end="1791:42"><name pos:start="1791:13" pos:end="1791:15">ctx</name><operator pos:start="1791:16" pos:end="1791:17">-&gt;</operator><name pos:start="1791:18" pos:end="1791:19">sa</name><index pos:start="1791:20" pos:end="1791:42">[<expr pos:start="1791:21" pos:end="1791:41"><name pos:start="1791:21" pos:end="1791:41"><name pos:start="1791:21" pos:end="1791:23">ctx</name><operator pos:start="1791:24" pos:end="1791:25">-&gt;</operator><name pos:start="1791:26" pos:end="1791:41">first_free_index</name></name></expr>]</index></name><operator pos:start="1791:43" pos:end="1791:43">.</operator><name pos:start="1791:44" pos:end="1791:47">used</name></expr>)</condition>
        <block pos:start="1792:9" pos:end="1808:9">{<block_content pos:start="1796:13" pos:end="1807:46">
            <comment type="block" pos:start="1793:13" pos:end="1793:117">/* last addition was in the middle of the array (and the first_free_index was just incremented by 1)   */</comment>
            <comment type="block" pos:start="1794:13" pos:end="1794:117">/* search for a free space from the first_free_index to AIRPDCAP_STA_INFOS_NR (to avoid free blocks in */</comment>
            <comment type="block" pos:start="1795:13" pos:end="1795:117">/*              the middle)                                                                            */</comment>
            <for pos:start="1796:13" pos:end="1798:26">for <control pos:start="1796:17" pos:end="1796:110">(<init pos:start="1796:18" pos:end="1796:51"><expr pos:start="1796:18" pos:end="1796:50"><name pos:start="1796:18" pos:end="1796:26">last_free</name> <operator pos:start="1796:28" pos:end="1796:28">=</operator> <name pos:start="1796:30" pos:end="1796:50"><name pos:start="1796:30" pos:end="1796:32">ctx</name><operator pos:start="1796:33" pos:end="1796:34">-&gt;</operator><name pos:start="1796:35" pos:end="1796:50">first_free_index</name></name></expr>;</init> <condition pos:start="1796:53" pos:end="1796:97"><expr pos:start="1796:53" pos:end="1796:96"><name pos:start="1796:53" pos:end="1796:61">last_free</name> <operator pos:start="1796:63" pos:end="1796:63">&lt;</operator> <name pos:start="1796:65" pos:end="1796:96">AIRPDCAP_MAX_SEC_ASSOCIATIONS_NR</name></expr>;</condition> <incr pos:start="1796:99" pos:end="1796:109"><expr pos:start="1796:99" pos:end="1796:109"><name pos:start="1796:99" pos:end="1796:107">last_free</name><operator pos:start="1796:108" pos:end="1796:109">++</operator></expr></incr>)</control><block type="pseudo" pos:start="1797:17" pos:end="1798:26"><block_content pos:start="1797:17" pos:end="1798:26">
                <if_stmt pos:start="1797:17" pos:end="1798:26"><if pos:start="1797:17" pos:end="1798:26">if <condition pos:start="1797:20" pos:end="1797:45">(<expr pos:start="1797:21" pos:end="1797:44"><operator pos:start="1797:21" pos:end="1797:21">!</operator><name pos:start="1797:22" pos:end="1797:39"><name pos:start="1797:22" pos:end="1797:24">ctx</name><operator pos:start="1797:25" pos:end="1797:26">-&gt;</operator><name pos:start="1797:27" pos:end="1797:28">sa</name><index pos:start="1797:29" pos:end="1797:39">[<expr pos:start="1797:30" pos:end="1797:38"><name pos:start="1797:30" pos:end="1797:38">last_free</name></expr>]</index></name><operator pos:start="1797:40" pos:end="1797:40">.</operator><name pos:start="1797:41" pos:end="1797:44">used</name></expr>)</condition><block type="pseudo" pos:start="1798:21" pos:end="1798:26"><block_content pos:start="1798:21" pos:end="1798:26">
                    <break pos:start="1798:21" pos:end="1798:26">break;</break></block_content></block></if></if_stmt></block_content></block></for>

            <if_stmt pos:start="1800:13" pos:end="1804:13"><if pos:start="1800:13" pos:end="1804:13">if <condition pos:start="1800:16" pos:end="1800:62">(<expr pos:start="1800:17" pos:end="1800:61"><name pos:start="1800:17" pos:end="1800:25">last_free</name> <operator pos:start="1800:27" pos:end="1800:28">&gt;=</operator> <name pos:start="1800:30" pos:end="1800:61">AIRPDCAP_MAX_SEC_ASSOCIATIONS_NR</name></expr>)</condition>
            <block pos:start="1801:13" pos:end="1804:13">{<block_content pos:start="1803:17" pos:end="1803:26">
                <comment type="block" pos:start="1802:17" pos:end="1802:64">/* there is no empty space available. FAILURE */</comment>
                <return pos:start="1803:17" pos:end="1803:26">return <expr pos:start="1803:24" pos:end="1803:25"><operator pos:start="1803:24" pos:end="1803:24">-</operator><literal type="number" pos:start="1803:25" pos:end="1803:25">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="1806:13" pos:end="1806:46">/* store first free space index */</comment>
            <expr_stmt pos:start="1807:13" pos:end="1807:46"><expr pos:start="1807:13" pos:end="1807:45"><name pos:start="1807:13" pos:end="1807:33"><name pos:start="1807:13" pos:end="1807:15">ctx</name><operator pos:start="1807:16" pos:end="1807:17">-&gt;</operator><name pos:start="1807:18" pos:end="1807:33">first_free_index</name></name> <operator pos:start="1807:35" pos:end="1807:35">=</operator> <name pos:start="1807:37" pos:end="1807:45">last_free</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1810:9" pos:end="1810:27">/* use this info */</comment>
        <expr_stmt pos:start="1811:9" pos:end="1811:43"><expr pos:start="1811:9" pos:end="1811:42"><name pos:start="1811:9" pos:end="1811:18"><name pos:start="1811:9" pos:end="1811:11">ctx</name><operator pos:start="1811:12" pos:end="1811:13">-&gt;</operator><name pos:start="1811:14" pos:end="1811:18">index</name></name> <operator pos:start="1811:20" pos:end="1811:20">=</operator> <name pos:start="1811:22" pos:end="1811:42"><name pos:start="1811:22" pos:end="1811:24">ctx</name><operator pos:start="1811:25" pos:end="1811:26">-&gt;</operator><name pos:start="1811:27" pos:end="1811:42">first_free_index</name></name></expr>;</expr_stmt>

        <comment type="block" pos:start="1813:9" pos:end="1813:38">/* reset the info structure */</comment>
        <expr_stmt pos:start="1814:9" pos:end="1814:74"><expr pos:start="1814:9" pos:end="1814:73"><call pos:start="1814:9" pos:end="1814:73"><name pos:start="1814:9" pos:end="1814:14">memset</name><argument_list pos:start="1814:15" pos:end="1814:73">(<argument pos:start="1814:16" pos:end="1814:35"><expr pos:start="1814:16" pos:end="1814:35"><name pos:start="1814:16" pos:end="1814:22"><name pos:start="1814:16" pos:end="1814:18">ctx</name><operator pos:start="1814:19" pos:end="1814:20">-&gt;</operator><name pos:start="1814:21" pos:end="1814:22">sa</name></name> <operator pos:start="1814:24" pos:end="1814:24">+</operator> <name pos:start="1814:26" pos:end="1814:35"><name pos:start="1814:26" pos:end="1814:28">ctx</name><operator pos:start="1814:29" pos:end="1814:30">-&gt;</operator><name pos:start="1814:31" pos:end="1814:35">index</name></name></expr></argument>, <argument pos:start="1814:38" pos:end="1814:38"><expr pos:start="1814:38" pos:end="1814:38"><literal type="number" pos:start="1814:38" pos:end="1814:38">0</literal></expr></argument>, <argument pos:start="1814:41" pos:end="1814:72"><expr pos:start="1814:41" pos:end="1814:72"><sizeof pos:start="1814:41" pos:end="1814:72">sizeof<argument_list pos:start="1814:47" pos:end="1814:72">(<argument pos:start="1814:48" pos:end="1814:71"><expr pos:start="1814:48" pos:end="1814:71"><name pos:start="1814:48" pos:end="1814:71">AIRPDCAP_SEC_ASSOCIATION</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1816:9" pos:end="1816:37"><expr pos:start="1816:9" pos:end="1816:36"><name pos:start="1816:9" pos:end="1816:27"><name pos:start="1816:9" pos:end="1816:11">ctx</name><operator pos:start="1816:12" pos:end="1816:13">-&gt;</operator><name pos:start="1816:14" pos:end="1816:15">sa</name><index pos:start="1816:16" pos:end="1816:27">[<expr pos:start="1816:17" pos:end="1816:26"><name pos:start="1816:17" pos:end="1816:26"><name pos:start="1816:17" pos:end="1816:19">ctx</name><operator pos:start="1816:20" pos:end="1816:21">-&gt;</operator><name pos:start="1816:22" pos:end="1816:26">index</name></name></expr>]</index></name><operator pos:start="1816:28" pos:end="1816:28">.</operator><name pos:start="1816:29" pos:end="1816:32">used</name> <operator pos:start="1816:34" pos:end="1816:34">=</operator> <literal type="number" pos:start="1816:36" pos:end="1816:36">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="1818:9" pos:end="1818:36">/* set the info structure */</comment>
        <expr_stmt pos:start="1819:9" pos:end="1819:85"><expr pos:start="1819:9" pos:end="1819:84"><call pos:start="1819:9" pos:end="1819:84"><name pos:start="1819:9" pos:end="1819:14">memcpy</name><argument_list pos:start="1819:15" pos:end="1819:84">(<argument pos:start="1819:16" pos:end="1819:42"><expr pos:start="1819:16" pos:end="1819:42"><operator pos:start="1819:16" pos:end="1819:16">&amp;</operator><operator pos:start="1819:17" pos:end="1819:17">(</operator><name pos:start="1819:18" pos:end="1819:36"><name pos:start="1819:18" pos:end="1819:20">ctx</name><operator pos:start="1819:21" pos:end="1819:22">-&gt;</operator><name pos:start="1819:23" pos:end="1819:24">sa</name><index pos:start="1819:25" pos:end="1819:36">[<expr pos:start="1819:26" pos:end="1819:35"><name pos:start="1819:26" pos:end="1819:35"><name pos:start="1819:26" pos:end="1819:28">ctx</name><operator pos:start="1819:29" pos:end="1819:30">-&gt;</operator><name pos:start="1819:31" pos:end="1819:35">index</name></name></expr>]</index></name><operator pos:start="1819:37" pos:end="1819:37">.</operator><name pos:start="1819:38" pos:end="1819:41">saId</name><operator pos:start="1819:42" pos:end="1819:42">)</operator></expr></argument>, <argument pos:start="1819:45" pos:end="1819:46"><expr pos:start="1819:45" pos:end="1819:46"><name pos:start="1819:45" pos:end="1819:46">id</name></expr></argument>, <argument pos:start="1819:49" pos:end="1819:83"><expr pos:start="1819:49" pos:end="1819:83"><sizeof pos:start="1819:49" pos:end="1819:83">sizeof<argument_list pos:start="1819:55" pos:end="1819:83">(<argument pos:start="1819:56" pos:end="1819:82"><expr pos:start="1819:56" pos:end="1819:82"><name pos:start="1819:56" pos:end="1819:82">AIRPDCAP_SEC_ASSOCIATION_ID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1821:9" pos:end="1821:61">/* increment by 1 the first_free_index (heuristic) */</comment>
        <expr_stmt pos:start="1822:9" pos:end="1822:32"><expr pos:start="1822:9" pos:end="1822:31"><name pos:start="1822:9" pos:end="1822:29"><name pos:start="1822:9" pos:end="1822:11">ctx</name><operator pos:start="1822:12" pos:end="1822:13">-&gt;</operator><name pos:start="1822:14" pos:end="1822:29">first_free_index</name></name><operator pos:start="1822:30" pos:end="1822:31">++</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="1824:9" pos:end="1824:77">/* set the sa_index if the added index is greater the the sa_index */</comment>
        <if_stmt pos:start="1825:9" pos:end="1826:39"><if pos:start="1825:9" pos:end="1826:39">if <condition pos:start="1825:12" pos:end="1825:39">(<expr pos:start="1825:13" pos:end="1825:38"><name pos:start="1825:13" pos:end="1825:22"><name pos:start="1825:13" pos:end="1825:15">ctx</name><operator pos:start="1825:16" pos:end="1825:17">-&gt;</operator><name pos:start="1825:18" pos:end="1825:22">index</name></name> <operator pos:start="1825:24" pos:end="1825:24">&gt;</operator> <name pos:start="1825:26" pos:end="1825:38"><name pos:start="1825:26" pos:end="1825:28">ctx</name><operator pos:start="1825:29" pos:end="1825:30">-&gt;</operator><name pos:start="1825:31" pos:end="1825:38">sa_index</name></name></expr>)</condition><block type="pseudo" pos:start="1826:13" pos:end="1826:39"><block_content pos:start="1826:13" pos:end="1826:39">
            <expr_stmt pos:start="1826:13" pos:end="1826:39"><expr pos:start="1826:13" pos:end="1826:38"><name pos:start="1826:13" pos:end="1826:25"><name pos:start="1826:13" pos:end="1826:15">ctx</name><operator pos:start="1826:16" pos:end="1826:17">-&gt;</operator><name pos:start="1826:18" pos:end="1826:25">sa_index</name></name> <operator pos:start="1826:27" pos:end="1826:27">=</operator> <name pos:start="1826:29" pos:end="1826:38"><name pos:start="1826:29" pos:end="1826:31">ctx</name><operator pos:start="1826:32" pos:end="1826:33">-&gt;</operator><name pos:start="1826:34" pos:end="1826:38">index</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return pos:start="1828:9" pos:end="1828:26">return <expr pos:start="1828:16" pos:end="1828:25"><name pos:start="1828:16" pos:end="1828:25"><name pos:start="1828:16" pos:end="1828:18">ctx</name><operator pos:start="1828:19" pos:end="1828:20">-&gt;</operator><name pos:start="1828:21" pos:end="1828:25">index</name></name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="1831:5" pos:end="1893:5"><type pos:start="1831:5" pos:end="1831:14"><specifier pos:start="1831:5" pos:end="1831:10">static</specifier> <name pos:start="1831:12" pos:end="1831:14">INT</name></type>
    <name pos:start="1832:5" pos:end="1832:24">AirPDcapGetSaAddress</name><parameter_list pos:start="1832:25" pos:end="1834:40">(
        <parameter pos:start="1833:9" pos:end="1833:45"><decl pos:start="1833:9" pos:end="1833:45"><type pos:start="1833:9" pos:end="1833:45"><specifier pos:start="1833:9" pos:end="1833:13">const</specifier> <name pos:start="1833:15" pos:end="1833:38">AIRPDCAP_MAC_FRAME_ADDR4</name> <modifier pos:start="1833:40" pos:end="1833:40">*</modifier></type><name pos:start="1833:41" pos:end="1833:45">frame</name></decl></parameter>,
        <parameter pos:start="1834:9" pos:end="1834:39"><decl pos:start="1834:9" pos:end="1834:39"><type pos:start="1834:9" pos:end="1834:39"><name pos:start="1834:9" pos:end="1834:35">AIRPDCAP_SEC_ASSOCIATION_ID</name> <modifier pos:start="1834:37" pos:end="1834:37">*</modifier></type><name pos:start="1834:38" pos:end="1834:39">id</name></decl></parameter>)</parameter_list>
    <block pos:start="1835:5" pos:end="1893:5">{<block_content pos:start="1838:9" pos:end="1892:36">
<cpp:ifdef pos:start="1836:1" pos:end="1836:13">#<cpp:directive pos:start="1836:2" pos:end="1836:6">ifdef</cpp:directive> <name pos:start="1836:8" pos:end="1836:13">_DEBUG</name></cpp:ifdef>
<cpp:define pos:start="1837:1" pos:end="1837:22">#<cpp:directive pos:start="1837:2" pos:end="1837:7">define</cpp:directive> <cpp:macro pos:start="1837:9" pos:end="1837:18"><name pos:start="1837:9" pos:end="1837:18">MSGBUF_LEN</name></cpp:macro> <cpp:value pos:start="1837:20" pos:end="1837:22">255</cpp:value></cpp:define>
        <decl_stmt pos:start="1838:9" pos:end="1840:0"><decl pos:start="1838:9" pos:end="1838:31"><type pos:start="1838:9" pos:end="1838:12"><name pos:start="1838:9" pos:end="1838:12">CHAR</name></type> <name pos:start="1838:14" pos:end="1838:31"><name pos:start="1838:14" pos:end="1838:19">msgbuf</name><index pos:start="1838:20" pos:end="1838:31">[<expr pos:start="1838:21" pos:end="1838:30"><name pos:start="1838:21" pos:end="1838:30">MSGBUF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif pos:start="1839:1" pos:end="1839:6">#<cpp:directive pos:start="1839:2" pos:end="1839:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="1841:9" pos:end="1884:0"><if pos:start="1841:9" pos:end="1858:9">if <condition pos:start="1841:12" pos:end="1844:72">(<expr pos:start="1841:13" pos:end="1844:71"><operator pos:start="1841:13" pos:end="1841:13">(</operator><call pos:start="1841:14" pos:end="1841:40"><name pos:start="1841:14" pos:end="1841:26">AIRPDCAP_TYPE</name><argument_list pos:start="1841:27" pos:end="1841:40">(<argument pos:start="1841:28" pos:end="1841:39"><expr pos:start="1841:28" pos:end="1841:39"><name pos:start="1841:28" pos:end="1841:39"><name pos:start="1841:28" pos:end="1841:32">frame</name><operator pos:start="1841:33" pos:end="1841:34">-&gt;</operator><name pos:start="1841:35" pos:end="1841:36">fc</name><index pos:start="1841:37" pos:end="1841:39">[<expr pos:start="1841:38" pos:end="1841:38"><literal type="number" pos:start="1841:38" pos:end="1841:38">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="1841:42" pos:end="1841:43">==</operator> <name pos:start="1841:45" pos:end="1841:62">AIRPDCAP_TYPE_DATA</name><operator pos:start="1841:63" pos:end="1841:63">)</operator> <operator pos:start="1841:65" pos:end="1841:66">&amp;&amp;</operator>
            <operator pos:start="1842:13" pos:end="1842:13">(</operator><call pos:start="1842:14" pos:end="1842:43"><name pos:start="1842:14" pos:end="1842:29">AIRPDCAP_DS_BITS</name><argument_list pos:start="1842:30" pos:end="1842:43">(<argument pos:start="1842:31" pos:end="1842:42"><expr pos:start="1842:31" pos:end="1842:42"><name pos:start="1842:31" pos:end="1842:42"><name pos:start="1842:31" pos:end="1842:35">frame</name><operator pos:start="1842:36" pos:end="1842:37">-&gt;</operator><name pos:start="1842:38" pos:end="1842:39">fc</name><index pos:start="1842:40" pos:end="1842:42">[<expr pos:start="1842:41" pos:end="1842:41"><literal type="number" pos:start="1842:41" pos:end="1842:41">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="1842:45" pos:end="1842:46">==</operator> <literal type="number" pos:start="1842:48" pos:end="1842:48">0</literal><operator pos:start="1842:49" pos:end="1842:49">)</operator> <operator pos:start="1842:51" pos:end="1842:52">&amp;&amp;</operator>
            <operator pos:start="1843:13" pos:end="1843:13">(</operator><call pos:start="1843:14" pos:end="1843:65"><name pos:start="1843:14" pos:end="1843:19">memcmp</name><argument_list pos:start="1843:20" pos:end="1843:65">(<argument pos:start="1843:21" pos:end="1843:32"><expr pos:start="1843:21" pos:end="1843:32"><name pos:start="1843:21" pos:end="1843:32"><name pos:start="1843:21" pos:end="1843:25">frame</name><operator pos:start="1843:26" pos:end="1843:27">-&gt;</operator><name pos:start="1843:28" pos:end="1843:32">addr2</name></name></expr></argument>, <argument pos:start="1843:35" pos:end="1843:46"><expr pos:start="1843:35" pos:end="1843:46"><name pos:start="1843:35" pos:end="1843:46"><name pos:start="1843:35" pos:end="1843:39">frame</name><operator pos:start="1843:40" pos:end="1843:41">-&gt;</operator><name pos:start="1843:42" pos:end="1843:46">addr3</name></name></expr></argument>, <argument pos:start="1843:49" pos:end="1843:64"><expr pos:start="1843:49" pos:end="1843:64"><name pos:start="1843:49" pos:end="1843:64">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="1843:67" pos:end="1843:68">!=</operator> <literal type="number" pos:start="1843:70" pos:end="1843:70">0</literal><operator pos:start="1843:71" pos:end="1843:71">)</operator> <operator pos:start="1843:73" pos:end="1843:74">&amp;&amp;</operator>
            <operator pos:start="1844:13" pos:end="1844:13">(</operator><call pos:start="1844:14" pos:end="1844:65"><name pos:start="1844:14" pos:end="1844:19">memcmp</name><argument_list pos:start="1844:20" pos:end="1844:65">(<argument pos:start="1844:21" pos:end="1844:32"><expr pos:start="1844:21" pos:end="1844:32"><name pos:start="1844:21" pos:end="1844:32"><name pos:start="1844:21" pos:end="1844:25">frame</name><operator pos:start="1844:26" pos:end="1844:27">-&gt;</operator><name pos:start="1844:28" pos:end="1844:32">addr1</name></name></expr></argument>, <argument pos:start="1844:35" pos:end="1844:46"><expr pos:start="1844:35" pos:end="1844:46"><name pos:start="1844:35" pos:end="1844:46"><name pos:start="1844:35" pos:end="1844:39">frame</name><operator pos:start="1844:40" pos:end="1844:41">-&gt;</operator><name pos:start="1844:42" pos:end="1844:46">addr3</name></name></expr></argument>, <argument pos:start="1844:49" pos:end="1844:64"><expr pos:start="1844:49" pos:end="1844:64"><name pos:start="1844:49" pos:end="1844:64">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="1844:67" pos:end="1844:68">!=</operator> <literal type="number" pos:start="1844:70" pos:end="1844:70">0</literal><operator pos:start="1844:71" pos:end="1844:71">)</operator></expr>)</condition>
        <block pos:start="1845:9" pos:end="1858:9">{<block_content pos:start="1848:13" pos:end="1857:13">
            <comment type="block" pos:start="1846:13" pos:end="1847:68">/* DATA frame with fromDS=0 ToDS=0 and neither RA or SA is BSSID
               =&gt; TDLS traffic. Use highest MAC address for bssid */</comment>
            <if_stmt pos:start="1848:13" pos:end="1857:13"><if pos:start="1848:13" pos:end="1852:13">if <condition pos:start="1848:16" pos:end="1848:73">(<expr pos:start="1848:17" pos:end="1848:72"><call pos:start="1848:17" pos:end="1848:68"><name pos:start="1848:17" pos:end="1848:22">memcmp</name><argument_list pos:start="1848:23" pos:end="1848:68">(<argument pos:start="1848:24" pos:end="1848:35"><expr pos:start="1848:24" pos:end="1848:35"><name pos:start="1848:24" pos:end="1848:35"><name pos:start="1848:24" pos:end="1848:28">frame</name><operator pos:start="1848:29" pos:end="1848:30">-&gt;</operator><name pos:start="1848:31" pos:end="1848:35">addr1</name></name></expr></argument>, <argument pos:start="1848:38" pos:end="1848:49"><expr pos:start="1848:38" pos:end="1848:49"><name pos:start="1848:38" pos:end="1848:49"><name pos:start="1848:38" pos:end="1848:42">frame</name><operator pos:start="1848:43" pos:end="1848:44">-&gt;</operator><name pos:start="1848:45" pos:end="1848:49">addr2</name></name></expr></argument>, <argument pos:start="1848:52" pos:end="1848:67"><expr pos:start="1848:52" pos:end="1848:67"><name pos:start="1848:52" pos:end="1848:67">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="1848:70" pos:end="1848:70">&lt;</operator> <literal type="number" pos:start="1848:72" pos:end="1848:72">0</literal></expr>)</condition>
            <block pos:start="1849:13" pos:end="1852:13">{<block_content pos:start="1850:17" pos:end="1851:66">
                <expr_stmt pos:start="1850:17" pos:end="1850:64"><expr pos:start="1850:17" pos:end="1850:63"><call pos:start="1850:17" pos:end="1850:63"><name pos:start="1850:17" pos:end="1850:22">memcpy</name><argument_list pos:start="1850:23" pos:end="1850:63">(<argument pos:start="1850:24" pos:end="1850:30"><expr pos:start="1850:24" pos:end="1850:30"><name pos:start="1850:24" pos:end="1850:30"><name pos:start="1850:24" pos:end="1850:25">id</name><operator pos:start="1850:26" pos:end="1850:27">-&gt;</operator><name pos:start="1850:28" pos:end="1850:30">sta</name></name></expr></argument>, <argument pos:start="1850:33" pos:end="1850:44"><expr pos:start="1850:33" pos:end="1850:44"><name pos:start="1850:33" pos:end="1850:44"><name pos:start="1850:33" pos:end="1850:37">frame</name><operator pos:start="1850:38" pos:end="1850:39">-&gt;</operator><name pos:start="1850:40" pos:end="1850:44">addr1</name></name></expr></argument>, <argument pos:start="1850:47" pos:end="1850:62"><expr pos:start="1850:47" pos:end="1850:62"><name pos:start="1850:47" pos:end="1850:62">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1851:17" pos:end="1851:66"><expr pos:start="1851:17" pos:end="1851:65"><call pos:start="1851:17" pos:end="1851:65"><name pos:start="1851:17" pos:end="1851:22">memcpy</name><argument_list pos:start="1851:23" pos:end="1851:65">(<argument pos:start="1851:24" pos:end="1851:32"><expr pos:start="1851:24" pos:end="1851:32"><name pos:start="1851:24" pos:end="1851:32"><name pos:start="1851:24" pos:end="1851:25">id</name><operator pos:start="1851:26" pos:end="1851:27">-&gt;</operator><name pos:start="1851:28" pos:end="1851:32">bssid</name></name></expr></argument>, <argument pos:start="1851:35" pos:end="1851:46"><expr pos:start="1851:35" pos:end="1851:46"><name pos:start="1851:35" pos:end="1851:46"><name pos:start="1851:35" pos:end="1851:39">frame</name><operator pos:start="1851:40" pos:end="1851:41">-&gt;</operator><name pos:start="1851:42" pos:end="1851:46">addr2</name></name></expr></argument>, <argument pos:start="1851:49" pos:end="1851:64"><expr pos:start="1851:49" pos:end="1851:64"><name pos:start="1851:49" pos:end="1851:64">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else pos:start="1853:13" pos:end="1857:13">else
            <block pos:start="1854:13" pos:end="1857:13">{<block_content pos:start="1855:17" pos:end="1856:66">
                <expr_stmt pos:start="1855:17" pos:end="1855:64"><expr pos:start="1855:17" pos:end="1855:63"><call pos:start="1855:17" pos:end="1855:63"><name pos:start="1855:17" pos:end="1855:22">memcpy</name><argument_list pos:start="1855:23" pos:end="1855:63">(<argument pos:start="1855:24" pos:end="1855:30"><expr pos:start="1855:24" pos:end="1855:30"><name pos:start="1855:24" pos:end="1855:30"><name pos:start="1855:24" pos:end="1855:25">id</name><operator pos:start="1855:26" pos:end="1855:27">-&gt;</operator><name pos:start="1855:28" pos:end="1855:30">sta</name></name></expr></argument>, <argument pos:start="1855:33" pos:end="1855:44"><expr pos:start="1855:33" pos:end="1855:44"><name pos:start="1855:33" pos:end="1855:44"><name pos:start="1855:33" pos:end="1855:37">frame</name><operator pos:start="1855:38" pos:end="1855:39">-&gt;</operator><name pos:start="1855:40" pos:end="1855:44">addr2</name></name></expr></argument>, <argument pos:start="1855:47" pos:end="1855:62"><expr pos:start="1855:47" pos:end="1855:62"><name pos:start="1855:47" pos:end="1855:62">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1856:17" pos:end="1856:66"><expr pos:start="1856:17" pos:end="1856:65"><call pos:start="1856:17" pos:end="1856:65"><name pos:start="1856:17" pos:end="1856:22">memcpy</name><argument_list pos:start="1856:23" pos:end="1856:65">(<argument pos:start="1856:24" pos:end="1856:32"><expr pos:start="1856:24" pos:end="1856:32"><name pos:start="1856:24" pos:end="1856:32"><name pos:start="1856:24" pos:end="1856:25">id</name><operator pos:start="1856:26" pos:end="1856:27">-&gt;</operator><name pos:start="1856:28" pos:end="1856:32">bssid</name></name></expr></argument>, <argument pos:start="1856:35" pos:end="1856:46"><expr pos:start="1856:35" pos:end="1856:46"><name pos:start="1856:35" pos:end="1856:46"><name pos:start="1856:35" pos:end="1856:39">frame</name><operator pos:start="1856:40" pos:end="1856:41">-&gt;</operator><name pos:start="1856:42" pos:end="1856:46">addr1</name></name></expr></argument>, <argument pos:start="1856:49" pos:end="1856:64"><expr pos:start="1856:49" pos:end="1856:64"><name pos:start="1856:49" pos:end="1856:64">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else pos:start="1859:9" pos:end="1884:0">else
        <block pos:start="1860:9" pos:end="1884:0">{<block_content pos:start="1861:13" pos:end="1880:13">
            <decl_stmt pos:start="1861:13" pos:end="1861:30"><decl pos:start="1861:13" pos:end="1861:29"><type pos:start="1861:13" pos:end="1861:25"><specifier pos:start="1861:13" pos:end="1861:17">const</specifier> <name pos:start="1861:19" pos:end="1861:23">UCHAR</name> <modifier pos:start="1861:25" pos:end="1861:25">*</modifier></type><name pos:start="1861:26" pos:end="1861:29">addr</name></decl>;</decl_stmt>

            <comment type="block" pos:start="1863:13" pos:end="1863:52">/* Normal Case: SA between STA and AP */</comment>
            <if_stmt pos:start="1864:13" pos:end="1871:13"><if pos:start="1864:13" pos:end="1867:13">if <condition pos:start="1864:16" pos:end="1864:64">(<expr pos:start="1864:17" pos:end="1864:63"><operator pos:start="1864:17" pos:end="1864:17">(</operator><name pos:start="1864:18" pos:end="1864:21">addr</name> <operator pos:start="1864:23" pos:end="1864:23">=</operator> <call pos:start="1864:25" pos:end="1864:54"><name pos:start="1864:25" pos:end="1864:47">AirPDcapGetBssidAddress</name><argument_list pos:start="1864:48" pos:end="1864:54">(<argument pos:start="1864:49" pos:end="1864:53"><expr pos:start="1864:49" pos:end="1864:53"><name pos:start="1864:49" pos:end="1864:53">frame</name></expr></argument>)</argument_list></call><operator pos:start="1864:55" pos:end="1864:55">)</operator> <operator pos:start="1864:57" pos:end="1864:58">!=</operator> <name pos:start="1864:60" pos:end="1864:63">NULL</name></expr>)</condition>
            <block pos:start="1865:13" pos:end="1867:13">{<block_content pos:start="1866:17" pos:end="1866:58">
                <expr_stmt pos:start="1866:17" pos:end="1866:58"><expr pos:start="1866:17" pos:end="1866:57"><call pos:start="1866:17" pos:end="1866:57"><name pos:start="1866:17" pos:end="1866:22">memcpy</name><argument_list pos:start="1866:23" pos:end="1866:57">(<argument pos:start="1866:24" pos:end="1866:32"><expr pos:start="1866:24" pos:end="1866:32"><name pos:start="1866:24" pos:end="1866:32"><name pos:start="1866:24" pos:end="1866:25">id</name><operator pos:start="1866:26" pos:end="1866:27">-&gt;</operator><name pos:start="1866:28" pos:end="1866:32">bssid</name></name></expr></argument>, <argument pos:start="1866:35" pos:end="1866:38"><expr pos:start="1866:35" pos:end="1866:38"><name pos:start="1866:35" pos:end="1866:38">addr</name></expr></argument>, <argument pos:start="1866:41" pos:end="1866:56"><expr pos:start="1866:41" pos:end="1866:56"><name pos:start="1866:41" pos:end="1866:56">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else pos:start="1868:13" pos:end="1871:13">else
            <block pos:start="1869:13" pos:end="1871:13">{<block_content pos:start="1870:17" pos:end="1870:46">
                <return pos:start="1870:17" pos:end="1870:46">return <expr pos:start="1870:24" pos:end="1870:45"><name pos:start="1870:24" pos:end="1870:45">AIRPDCAP_RET_UNSUCCESS</name></expr>;</return>
            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="1873:13" pos:end="1880:13"><if pos:start="1873:13" pos:end="1876:13">if <condition pos:start="1873:16" pos:end="1873:62">(<expr pos:start="1873:17" pos:end="1873:61"><operator pos:start="1873:17" pos:end="1873:17">(</operator><name pos:start="1873:18" pos:end="1873:21">addr</name> <operator pos:start="1873:23" pos:end="1873:23">=</operator> <call pos:start="1873:25" pos:end="1873:52"><name pos:start="1873:25" pos:end="1873:45">AirPDcapGetStaAddress</name><argument_list pos:start="1873:46" pos:end="1873:52">(<argument pos:start="1873:47" pos:end="1873:51"><expr pos:start="1873:47" pos:end="1873:51"><name pos:start="1873:47" pos:end="1873:51">frame</name></expr></argument>)</argument_list></call><operator pos:start="1873:53" pos:end="1873:53">)</operator> <operator pos:start="1873:55" pos:end="1873:56">!=</operator> <name pos:start="1873:58" pos:end="1873:61">NULL</name></expr>)</condition>
            <block pos:start="1874:13" pos:end="1876:13">{<block_content pos:start="1875:17" pos:end="1875:56">
                <expr_stmt pos:start="1875:17" pos:end="1875:56"><expr pos:start="1875:17" pos:end="1875:55"><call pos:start="1875:17" pos:end="1875:55"><name pos:start="1875:17" pos:end="1875:22">memcpy</name><argument_list pos:start="1875:23" pos:end="1875:55">(<argument pos:start="1875:24" pos:end="1875:30"><expr pos:start="1875:24" pos:end="1875:30"><name pos:start="1875:24" pos:end="1875:30"><name pos:start="1875:24" pos:end="1875:25">id</name><operator pos:start="1875:26" pos:end="1875:27">-&gt;</operator><name pos:start="1875:28" pos:end="1875:30">sta</name></name></expr></argument>, <argument pos:start="1875:33" pos:end="1875:36"><expr pos:start="1875:33" pos:end="1875:36"><name pos:start="1875:33" pos:end="1875:36">addr</name></expr></argument>, <argument pos:start="1875:39" pos:end="1875:54"><expr pos:start="1875:39" pos:end="1875:54"><name pos:start="1875:39" pos:end="1875:54">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else pos:start="1877:13" pos:end="1880:13">else
            <block pos:start="1878:13" pos:end="1880:13">{<block_content pos:start="1879:17" pos:end="1879:46">
                <return pos:start="1879:17" pos:end="1879:46">return <expr pos:start="1879:24" pos:end="1879:45"><name pos:start="1879:24" pos:end="1879:45">AIRPDCAP_RET_UNSUCCESS</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

<cpp:ifdef pos:start="1883:1" pos:end="1883:13">#<cpp:directive pos:start="1883:2" pos:end="1883:6">ifdef</cpp:directive> <name pos:start="1883:8" pos:end="1883:13">_DEBUG</name></cpp:ifdef>
        <expr_stmt pos:start="1884:9" pos:end="1885:103"><expr pos:start="1884:9" pos:end="1885:102"><call pos:start="1884:9" pos:end="1885:102"><name pos:start="1884:9" pos:end="1884:18">g_snprintf</name><argument_list pos:start="1884:19" pos:end="1885:102">(<argument pos:start="1884:20" pos:end="1884:25"><expr pos:start="1884:20" pos:end="1884:25"><name pos:start="1884:20" pos:end="1884:25">msgbuf</name></expr></argument>, <argument pos:start="1884:28" pos:end="1884:37"><expr pos:start="1884:28" pos:end="1884:37"><name pos:start="1884:28" pos:end="1884:37">MSGBUF_LEN</name></expr></argument>, <argument pos:start="1884:40" pos:end="1884:83"><expr pos:start="1884:40" pos:end="1884:83"><literal type="string" pos:start="1884:40" pos:end="1884:83">"BSSID_MAC: %02X.%02X.%02X.%02X.%02X.%02X\t"</literal></expr></argument>,
                   <argument pos:start="1885:20" pos:end="1885:31"><expr pos:start="1885:20" pos:end="1885:31"><name pos:start="1885:20" pos:end="1885:31"><name pos:start="1885:20" pos:end="1885:21">id</name><operator pos:start="1885:22" pos:end="1885:23">-&gt;</operator><name pos:start="1885:24" pos:end="1885:28">bssid</name><index pos:start="1885:29" pos:end="1885:31">[<expr pos:start="1885:30" pos:end="1885:30"><literal type="number" pos:start="1885:30" pos:end="1885:30">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1885:34" pos:end="1885:45"><expr pos:start="1885:34" pos:end="1885:45"><name pos:start="1885:34" pos:end="1885:45"><name pos:start="1885:34" pos:end="1885:35">id</name><operator pos:start="1885:36" pos:end="1885:37">-&gt;</operator><name pos:start="1885:38" pos:end="1885:42">bssid</name><index pos:start="1885:43" pos:end="1885:45">[<expr pos:start="1885:44" pos:end="1885:44"><literal type="number" pos:start="1885:44" pos:end="1885:44">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1885:48" pos:end="1885:59"><expr pos:start="1885:48" pos:end="1885:59"><name pos:start="1885:48" pos:end="1885:59"><name pos:start="1885:48" pos:end="1885:49">id</name><operator pos:start="1885:50" pos:end="1885:51">-&gt;</operator><name pos:start="1885:52" pos:end="1885:56">bssid</name><index pos:start="1885:57" pos:end="1885:59">[<expr pos:start="1885:58" pos:end="1885:58"><literal type="number" pos:start="1885:58" pos:end="1885:58">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="1885:62" pos:end="1885:73"><expr pos:start="1885:62" pos:end="1885:73"><name pos:start="1885:62" pos:end="1885:73"><name pos:start="1885:62" pos:end="1885:63">id</name><operator pos:start="1885:64" pos:end="1885:65">-&gt;</operator><name pos:start="1885:66" pos:end="1885:70">bssid</name><index pos:start="1885:71" pos:end="1885:73">[<expr pos:start="1885:72" pos:end="1885:72"><literal type="number" pos:start="1885:72" pos:end="1885:72">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="1885:76" pos:end="1885:87"><expr pos:start="1885:76" pos:end="1885:87"><name pos:start="1885:76" pos:end="1885:87"><name pos:start="1885:76" pos:end="1885:77">id</name><operator pos:start="1885:78" pos:end="1885:79">-&gt;</operator><name pos:start="1885:80" pos:end="1885:84">bssid</name><index pos:start="1885:85" pos:end="1885:87">[<expr pos:start="1885:86" pos:end="1885:86"><literal type="number" pos:start="1885:86" pos:end="1885:86">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="1885:90" pos:end="1885:101"><expr pos:start="1885:90" pos:end="1885:101"><name pos:start="1885:90" pos:end="1885:101"><name pos:start="1885:90" pos:end="1885:91">id</name><operator pos:start="1885:92" pos:end="1885:93">-&gt;</operator><name pos:start="1885:94" pos:end="1885:98">bssid</name><index pos:start="1885:99" pos:end="1885:101">[<expr pos:start="1885:100" pos:end="1885:100"><literal type="number" pos:start="1885:100" pos:end="1885:100">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1886:9" pos:end="1886:90"><expr pos:start="1886:9" pos:end="1886:89"><call pos:start="1886:9" pos:end="1886:89"><name pos:start="1886:9" pos:end="1886:33">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1886:34" pos:end="1886:89">(<argument pos:start="1886:35" pos:end="1886:56"><expr pos:start="1886:35" pos:end="1886:56"><literal type="string" pos:start="1886:35" pos:end="1886:56">"AirPDcapGetSaAddress"</literal></expr></argument>, <argument pos:start="1886:59" pos:end="1886:64"><expr pos:start="1886:59" pos:end="1886:64"><name pos:start="1886:59" pos:end="1886:64">msgbuf</name></expr></argument>, <argument pos:start="1886:67" pos:end="1886:88"><expr pos:start="1886:67" pos:end="1886:88"><name pos:start="1886:67" pos:end="1886:88">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1887:9" pos:end="1888:91"><expr pos:start="1887:9" pos:end="1888:90"><call pos:start="1887:9" pos:end="1888:90"><name pos:start="1887:9" pos:end="1887:18">g_snprintf</name><argument_list pos:start="1887:19" pos:end="1888:90">(<argument pos:start="1887:20" pos:end="1887:25"><expr pos:start="1887:20" pos:end="1887:25"><name pos:start="1887:20" pos:end="1887:25">msgbuf</name></expr></argument>, <argument pos:start="1887:28" pos:end="1887:37"><expr pos:start="1887:28" pos:end="1887:37"><name pos:start="1887:28" pos:end="1887:37">MSGBUF_LEN</name></expr></argument>, <argument pos:start="1887:40" pos:end="1887:81"><expr pos:start="1887:40" pos:end="1887:81"><literal type="string" pos:start="1887:40" pos:end="1887:81">"STA_MAC: %02X.%02X.%02X.%02X.%02X.%02X\t"</literal></expr></argument>,
                   <argument pos:start="1888:20" pos:end="1888:29"><expr pos:start="1888:20" pos:end="1888:29"><name pos:start="1888:20" pos:end="1888:29"><name pos:start="1888:20" pos:end="1888:21">id</name><operator pos:start="1888:22" pos:end="1888:23">-&gt;</operator><name pos:start="1888:24" pos:end="1888:26">sta</name><index pos:start="1888:27" pos:end="1888:29">[<expr pos:start="1888:28" pos:end="1888:28"><literal type="number" pos:start="1888:28" pos:end="1888:28">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1888:32" pos:end="1888:41"><expr pos:start="1888:32" pos:end="1888:41"><name pos:start="1888:32" pos:end="1888:41"><name pos:start="1888:32" pos:end="1888:33">id</name><operator pos:start="1888:34" pos:end="1888:35">-&gt;</operator><name pos:start="1888:36" pos:end="1888:38">sta</name><index pos:start="1888:39" pos:end="1888:41">[<expr pos:start="1888:40" pos:end="1888:40"><literal type="number" pos:start="1888:40" pos:end="1888:40">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1888:44" pos:end="1888:53"><expr pos:start="1888:44" pos:end="1888:53"><name pos:start="1888:44" pos:end="1888:53"><name pos:start="1888:44" pos:end="1888:45">id</name><operator pos:start="1888:46" pos:end="1888:47">-&gt;</operator><name pos:start="1888:48" pos:end="1888:50">sta</name><index pos:start="1888:51" pos:end="1888:53">[<expr pos:start="1888:52" pos:end="1888:52"><literal type="number" pos:start="1888:52" pos:end="1888:52">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="1888:56" pos:end="1888:65"><expr pos:start="1888:56" pos:end="1888:65"><name pos:start="1888:56" pos:end="1888:65"><name pos:start="1888:56" pos:end="1888:57">id</name><operator pos:start="1888:58" pos:end="1888:59">-&gt;</operator><name pos:start="1888:60" pos:end="1888:62">sta</name><index pos:start="1888:63" pos:end="1888:65">[<expr pos:start="1888:64" pos:end="1888:64"><literal type="number" pos:start="1888:64" pos:end="1888:64">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="1888:68" pos:end="1888:77"><expr pos:start="1888:68" pos:end="1888:77"><name pos:start="1888:68" pos:end="1888:77"><name pos:start="1888:68" pos:end="1888:69">id</name><operator pos:start="1888:70" pos:end="1888:71">-&gt;</operator><name pos:start="1888:72" pos:end="1888:74">sta</name><index pos:start="1888:75" pos:end="1888:77">[<expr pos:start="1888:76" pos:end="1888:76"><literal type="number" pos:start="1888:76" pos:end="1888:76">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="1888:80" pos:end="1888:89"><expr pos:start="1888:80" pos:end="1888:89"><name pos:start="1888:80" pos:end="1888:89"><name pos:start="1888:80" pos:end="1888:81">id</name><operator pos:start="1888:82" pos:end="1888:83">-&gt;</operator><name pos:start="1888:84" pos:end="1888:86">sta</name><index pos:start="1888:87" pos:end="1888:89">[<expr pos:start="1888:88" pos:end="1888:88"><literal type="number" pos:start="1888:88" pos:end="1888:88">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1889:9" pos:end="1891:0"><expr pos:start="1889:9" pos:end="1889:89"><call pos:start="1889:9" pos:end="1889:89"><name pos:start="1889:9" pos:end="1889:33">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="1889:34" pos:end="1889:89">(<argument pos:start="1889:35" pos:end="1889:56"><expr pos:start="1889:35" pos:end="1889:56"><literal type="string" pos:start="1889:35" pos:end="1889:56">"AirPDcapGetSaAddress"</literal></expr></argument>, <argument pos:start="1889:59" pos:end="1889:64"><expr pos:start="1889:59" pos:end="1889:64"><name pos:start="1889:59" pos:end="1889:64">msgbuf</name></expr></argument>, <argument pos:start="1889:67" pos:end="1889:88"><expr pos:start="1889:67" pos:end="1889:88"><name pos:start="1889:67" pos:end="1889:88">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1890:1" pos:end="1890:6">#<cpp:directive pos:start="1890:2" pos:end="1890:6">endif</cpp:directive></cpp:endif>

        <return pos:start="1892:9" pos:end="1892:36">return <expr pos:start="1892:16" pos:end="1892:35"><name pos:start="1892:16" pos:end="1892:35">AIRPDCAP_RET_SUCCESS</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" pos:start="1895:5" pos:end="1905:7">/*
     * AirPDcapGetBssidAddress() and AirPDcapGetBssidAddress() are used for
     * key caching.  In each case, it's more important to return a value than
     * to return a _correct_ value, so we fudge addresses in some cases, e.g.
     * the BSSID in bridged connections.
     * FromDS    ToDS   Sta      BSSID
     * 0         0      addr1/2  addr3
     * 0         1      addr2    addr1
     * 1         0      addr1    addr2
     * 1         1      addr2    addr1
     */</comment>

    <function pos:start="1907:5" pos:end="1931:5"><type pos:start="1907:5" pos:end="1907:24"><specifier pos:start="1907:5" pos:end="1907:10">static</specifier> <specifier pos:start="1907:12" pos:end="1907:16">const</specifier> <name pos:start="1907:18" pos:end="1907:22">UCHAR</name> <modifier pos:start="1907:24" pos:end="1907:24">*</modifier></type>
    <name pos:start="1908:5" pos:end="1908:25">AirPDcapGetStaAddress</name><parameter_list pos:start="1908:26" pos:end="1909:46">(
        <parameter pos:start="1909:9" pos:end="1909:45"><decl pos:start="1909:9" pos:end="1909:45"><type pos:start="1909:9" pos:end="1909:40"><specifier pos:start="1909:9" pos:end="1909:13">const</specifier> <name pos:start="1909:15" pos:end="1909:38">AIRPDCAP_MAC_FRAME_ADDR4</name> <modifier pos:start="1909:40" pos:end="1909:40">*</modifier></type><name pos:start="1909:41" pos:end="1909:45">frame</name></decl></parameter>)</parameter_list>
    <block pos:start="1910:5" pos:end="1931:5">{<block_content pos:start="1911:9" pos:end="1930:9">
        <switch pos:start="1911:9" pos:end="1930:9">switch <condition pos:start="1911:16" pos:end="1911:47">(<expr pos:start="1911:17" pos:end="1911:46"><call pos:start="1911:17" pos:end="1911:46"><name pos:start="1911:17" pos:end="1911:32">AIRPDCAP_DS_BITS</name><argument_list pos:start="1911:33" pos:end="1911:46">(<argument pos:start="1911:34" pos:end="1911:45"><expr pos:start="1911:34" pos:end="1911:45"><name pos:start="1911:34" pos:end="1911:45"><name pos:start="1911:34" pos:end="1911:38">frame</name><operator pos:start="1911:39" pos:end="1911:40">-&gt;</operator><name pos:start="1911:41" pos:end="1911:42">fc</name><index pos:start="1911:43" pos:end="1911:45">[<expr pos:start="1911:44" pos:end="1911:44"><literal type="number" pos:start="1911:44" pos:end="1911:44">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block pos:start="1912:9" pos:end="1930:9">{<block_content pos:start="1913:9" pos:end="1929:24"> <comment type="block" pos:start="1912:11" pos:end="1912:44">/* Bit 1 = FromDS, bit 0 = ToDS */</comment>
        <case pos:start="1913:9" pos:end="1913:15">case <expr pos:start="1913:14" pos:end="1913:14"><literal type="number" pos:start="1913:14" pos:end="1913:14">0</literal></expr>:</case>
            <if_stmt pos:start="1914:13" pos:end="1917:36"><if pos:start="1914:13" pos:end="1915:36">if <condition pos:start="1914:16" pos:end="1914:74">(<expr pos:start="1914:17" pos:end="1914:73"><call pos:start="1914:17" pos:end="1914:68"><name pos:start="1914:17" pos:end="1914:22">memcmp</name><argument_list pos:start="1914:23" pos:end="1914:68">(<argument pos:start="1914:24" pos:end="1914:35"><expr pos:start="1914:24" pos:end="1914:35"><name pos:start="1914:24" pos:end="1914:35"><name pos:start="1914:24" pos:end="1914:28">frame</name><operator pos:start="1914:29" pos:end="1914:30">-&gt;</operator><name pos:start="1914:31" pos:end="1914:35">addr2</name></name></expr></argument>, <argument pos:start="1914:38" pos:end="1914:49"><expr pos:start="1914:38" pos:end="1914:49"><name pos:start="1914:38" pos:end="1914:49"><name pos:start="1914:38" pos:end="1914:42">frame</name><operator pos:start="1914:43" pos:end="1914:44">-&gt;</operator><name pos:start="1914:45" pos:end="1914:49">addr3</name></name></expr></argument>, <argument pos:start="1914:52" pos:end="1914:67"><expr pos:start="1914:52" pos:end="1914:67"><name pos:start="1914:52" pos:end="1914:67">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="1914:70" pos:end="1914:71">==</operator> <literal type="number" pos:start="1914:73" pos:end="1914:73">0</literal></expr>)</condition><block type="pseudo" pos:start="1915:17" pos:end="1915:36"><block_content pos:start="1915:17" pos:end="1915:36">
                <return pos:start="1915:17" pos:end="1915:36">return <expr pos:start="1915:24" pos:end="1915:35"><name pos:start="1915:24" pos:end="1915:35"><name pos:start="1915:24" pos:end="1915:28">frame</name><operator pos:start="1915:29" pos:end="1915:30">-&gt;</operator><name pos:start="1915:31" pos:end="1915:35">addr1</name></name></expr>;</return></block_content></block></if>
            <else pos:start="1916:13" pos:end="1917:36">else<block type="pseudo" pos:start="1917:17" pos:end="1917:36"><block_content pos:start="1917:17" pos:end="1917:36">
                <return pos:start="1917:17" pos:end="1917:36">return <expr pos:start="1917:24" pos:end="1917:35"><name pos:start="1917:24" pos:end="1917:35"><name pos:start="1917:24" pos:end="1917:28">frame</name><operator pos:start="1917:29" pos:end="1917:30">-&gt;</operator><name pos:start="1917:31" pos:end="1917:35">addr2</name></name></expr>;</return></block_content></block></else></if_stmt>
        <case pos:start="1918:9" pos:end="1918:15">case <expr pos:start="1918:14" pos:end="1918:14"><literal type="number" pos:start="1918:14" pos:end="1918:14">1</literal></expr>:</case>
            <return pos:start="1919:13" pos:end="1919:32">return <expr pos:start="1919:20" pos:end="1919:31"><name pos:start="1919:20" pos:end="1919:31"><name pos:start="1919:20" pos:end="1919:24">frame</name><operator pos:start="1919:25" pos:end="1919:26">-&gt;</operator><name pos:start="1919:27" pos:end="1919:31">addr2</name></name></expr>;</return>
        <case pos:start="1920:9" pos:end="1920:15">case <expr pos:start="1920:14" pos:end="1920:14"><literal type="number" pos:start="1920:14" pos:end="1920:14">2</literal></expr>:</case>
            <return pos:start="1921:13" pos:end="1921:32">return <expr pos:start="1921:20" pos:end="1921:31"><name pos:start="1921:20" pos:end="1921:31"><name pos:start="1921:20" pos:end="1921:24">frame</name><operator pos:start="1921:25" pos:end="1921:26">-&gt;</operator><name pos:start="1921:27" pos:end="1921:31">addr1</name></name></expr>;</return>
        <case pos:start="1922:9" pos:end="1922:15">case <expr pos:start="1922:14" pos:end="1922:14"><literal type="number" pos:start="1922:14" pos:end="1922:14">3</literal></expr>:</case>
            <if_stmt pos:start="1923:13" pos:end="1926:36"><if pos:start="1923:13" pos:end="1924:36">if <condition pos:start="1923:16" pos:end="1923:73">(<expr pos:start="1923:17" pos:end="1923:72"><call pos:start="1923:17" pos:end="1923:68"><name pos:start="1923:17" pos:end="1923:22">memcmp</name><argument_list pos:start="1923:23" pos:end="1923:68">(<argument pos:start="1923:24" pos:end="1923:35"><expr pos:start="1923:24" pos:end="1923:35"><name pos:start="1923:24" pos:end="1923:35"><name pos:start="1923:24" pos:end="1923:28">frame</name><operator pos:start="1923:29" pos:end="1923:30">-&gt;</operator><name pos:start="1923:31" pos:end="1923:35">addr1</name></name></expr></argument>, <argument pos:start="1923:38" pos:end="1923:49"><expr pos:start="1923:38" pos:end="1923:49"><name pos:start="1923:38" pos:end="1923:49"><name pos:start="1923:38" pos:end="1923:42">frame</name><operator pos:start="1923:43" pos:end="1923:44">-&gt;</operator><name pos:start="1923:45" pos:end="1923:49">addr2</name></name></expr></argument>, <argument pos:start="1923:52" pos:end="1923:67"><expr pos:start="1923:52" pos:end="1923:67"><name pos:start="1923:52" pos:end="1923:67">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="1923:70" pos:end="1923:70">&lt;</operator> <literal type="number" pos:start="1923:72" pos:end="1923:72">0</literal></expr>)</condition><block type="pseudo" pos:start="1924:17" pos:end="1924:36"><block_content pos:start="1924:17" pos:end="1924:36">
                <return pos:start="1924:17" pos:end="1924:36">return <expr pos:start="1924:24" pos:end="1924:35"><name pos:start="1924:24" pos:end="1924:35"><name pos:start="1924:24" pos:end="1924:28">frame</name><operator pos:start="1924:29" pos:end="1924:30">-&gt;</operator><name pos:start="1924:31" pos:end="1924:35">addr1</name></name></expr>;</return></block_content></block></if>
            <else pos:start="1925:13" pos:end="1926:36">else<block type="pseudo" pos:start="1926:17" pos:end="1926:36"><block_content pos:start="1926:17" pos:end="1926:36">
                <return pos:start="1926:17" pos:end="1926:36">return <expr pos:start="1926:24" pos:end="1926:35"><name pos:start="1926:24" pos:end="1926:35"><name pos:start="1926:24" pos:end="1926:28">frame</name><operator pos:start="1926:29" pos:end="1926:30">-&gt;</operator><name pos:start="1926:31" pos:end="1926:35">addr2</name></name></expr>;</return></block_content></block></else></if_stmt>

        <default pos:start="1928:9" pos:end="1928:16">default:</default>
            <return pos:start="1929:13" pos:end="1929:24">return <expr pos:start="1929:20" pos:end="1929:23"><name pos:start="1929:20" pos:end="1929:23">NULL</name></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function pos:start="1933:5" pos:end="1954:5"><type pos:start="1933:5" pos:end="1933:24"><specifier pos:start="1933:5" pos:end="1933:10">static</specifier> <specifier pos:start="1933:12" pos:end="1933:16">const</specifier> <name pos:start="1933:18" pos:end="1933:22">UCHAR</name> <modifier pos:start="1933:24" pos:end="1933:24">*</modifier></type>
    <name pos:start="1934:5" pos:end="1934:27">AirPDcapGetBssidAddress</name><parameter_list pos:start="1934:28" pos:end="1935:46">(
        <parameter pos:start="1935:9" pos:end="1935:45"><decl pos:start="1935:9" pos:end="1935:45"><type pos:start="1935:9" pos:end="1935:40"><specifier pos:start="1935:9" pos:end="1935:13">const</specifier> <name pos:start="1935:15" pos:end="1935:38">AIRPDCAP_MAC_FRAME_ADDR4</name> <modifier pos:start="1935:40" pos:end="1935:40">*</modifier></type><name pos:start="1935:41" pos:end="1935:45">frame</name></decl></parameter>)</parameter_list>
    <block pos:start="1936:5" pos:end="1954:5">{<block_content pos:start="1937:9" pos:end="1953:9">
        <switch pos:start="1937:9" pos:end="1953:9">switch <condition pos:start="1937:16" pos:end="1937:47">(<expr pos:start="1937:17" pos:end="1937:46"><call pos:start="1937:17" pos:end="1937:46"><name pos:start="1937:17" pos:end="1937:32">AIRPDCAP_DS_BITS</name><argument_list pos:start="1937:33" pos:end="1937:46">(<argument pos:start="1937:34" pos:end="1937:45"><expr pos:start="1937:34" pos:end="1937:45"><name pos:start="1937:34" pos:end="1937:45"><name pos:start="1937:34" pos:end="1937:38">frame</name><operator pos:start="1937:39" pos:end="1937:40">-&gt;</operator><name pos:start="1937:41" pos:end="1937:42">fc</name><index pos:start="1937:43" pos:end="1937:45">[<expr pos:start="1937:44" pos:end="1937:44"><literal type="number" pos:start="1937:44" pos:end="1937:44">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block pos:start="1938:9" pos:end="1953:9">{<block_content pos:start="1939:9" pos:end="1952:24"> <comment type="block" pos:start="1938:11" pos:end="1938:44">/* Bit 1 = FromDS, bit 0 = ToDS */</comment>
        <case pos:start="1939:9" pos:end="1939:15">case <expr pos:start="1939:14" pos:end="1939:14"><literal type="number" pos:start="1939:14" pos:end="1939:14">0</literal></expr>:</case>
            <return pos:start="1940:13" pos:end="1940:32">return <expr pos:start="1940:20" pos:end="1940:31"><name pos:start="1940:20" pos:end="1940:31"><name pos:start="1940:20" pos:end="1940:24">frame</name><operator pos:start="1940:25" pos:end="1940:26">-&gt;</operator><name pos:start="1940:27" pos:end="1940:31">addr3</name></name></expr>;</return>
        <case pos:start="1941:9" pos:end="1941:15">case <expr pos:start="1941:14" pos:end="1941:14"><literal type="number" pos:start="1941:14" pos:end="1941:14">1</literal></expr>:</case>
            <return pos:start="1942:13" pos:end="1942:32">return <expr pos:start="1942:20" pos:end="1942:31"><name pos:start="1942:20" pos:end="1942:31"><name pos:start="1942:20" pos:end="1942:24">frame</name><operator pos:start="1942:25" pos:end="1942:26">-&gt;</operator><name pos:start="1942:27" pos:end="1942:31">addr1</name></name></expr>;</return>
        <case pos:start="1943:9" pos:end="1943:15">case <expr pos:start="1943:14" pos:end="1943:14"><literal type="number" pos:start="1943:14" pos:end="1943:14">2</literal></expr>:</case>
            <return pos:start="1944:13" pos:end="1944:32">return <expr pos:start="1944:20" pos:end="1944:31"><name pos:start="1944:20" pos:end="1944:31"><name pos:start="1944:20" pos:end="1944:24">frame</name><operator pos:start="1944:25" pos:end="1944:26">-&gt;</operator><name pos:start="1944:27" pos:end="1944:31">addr2</name></name></expr>;</return>
        <case pos:start="1945:9" pos:end="1945:15">case <expr pos:start="1945:14" pos:end="1945:14"><literal type="number" pos:start="1945:14" pos:end="1945:14">3</literal></expr>:</case>
            <if_stmt pos:start="1946:13" pos:end="1949:36"><if pos:start="1946:13" pos:end="1947:36">if <condition pos:start="1946:16" pos:end="1946:73">(<expr pos:start="1946:17" pos:end="1946:72"><call pos:start="1946:17" pos:end="1946:68"><name pos:start="1946:17" pos:end="1946:22">memcmp</name><argument_list pos:start="1946:23" pos:end="1946:68">(<argument pos:start="1946:24" pos:end="1946:35"><expr pos:start="1946:24" pos:end="1946:35"><name pos:start="1946:24" pos:end="1946:35"><name pos:start="1946:24" pos:end="1946:28">frame</name><operator pos:start="1946:29" pos:end="1946:30">-&gt;</operator><name pos:start="1946:31" pos:end="1946:35">addr1</name></name></expr></argument>, <argument pos:start="1946:38" pos:end="1946:49"><expr pos:start="1946:38" pos:end="1946:49"><name pos:start="1946:38" pos:end="1946:49"><name pos:start="1946:38" pos:end="1946:42">frame</name><operator pos:start="1946:43" pos:end="1946:44">-&gt;</operator><name pos:start="1946:45" pos:end="1946:49">addr2</name></name></expr></argument>, <argument pos:start="1946:52" pos:end="1946:67"><expr pos:start="1946:52" pos:end="1946:67"><name pos:start="1946:52" pos:end="1946:67">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="1946:70" pos:end="1946:70">&gt;</operator> <literal type="number" pos:start="1946:72" pos:end="1946:72">0</literal></expr>)</condition><block type="pseudo" pos:start="1947:17" pos:end="1947:36"><block_content pos:start="1947:17" pos:end="1947:36">
                <return pos:start="1947:17" pos:end="1947:36">return <expr pos:start="1947:24" pos:end="1947:35"><name pos:start="1947:24" pos:end="1947:35"><name pos:start="1947:24" pos:end="1947:28">frame</name><operator pos:start="1947:29" pos:end="1947:30">-&gt;</operator><name pos:start="1947:31" pos:end="1947:35">addr1</name></name></expr>;</return></block_content></block></if>
            <else pos:start="1948:13" pos:end="1949:36">else<block type="pseudo" pos:start="1949:17" pos:end="1949:36"><block_content pos:start="1949:17" pos:end="1949:36">
                <return pos:start="1949:17" pos:end="1949:36">return <expr pos:start="1949:24" pos:end="1949:35"><name pos:start="1949:24" pos:end="1949:35"><name pos:start="1949:24" pos:end="1949:28">frame</name><operator pos:start="1949:29" pos:end="1949:30">-&gt;</operator><name pos:start="1949:31" pos:end="1949:35">addr2</name></name></expr>;</return></block_content></block></else></if_stmt>

        <default pos:start="1951:9" pos:end="1951:16">default:</default>
            <return pos:start="1952:13" pos:end="1952:24">return <expr pos:start="1952:20" pos:end="1952:23"><name pos:start="1952:20" pos:end="1952:23">NULL</name></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" pos:start="1956:5" pos:end="1957:41">/* Function used to derive the PTK. Refer to IEEE 802.11I-2004, pag. 74
     * and IEEE 802.11i-2004, pag. 164 */</comment>
    <function pos:start="1958:5" pos:end="2012:0"><type pos:start="1958:5" pos:end="1958:15"><specifier pos:start="1958:5" pos:end="1958:10">static</specifier> <name pos:start="1958:12" pos:end="1958:15">void</name></type>
    <name pos:start="1959:5" pos:end="1959:20">AirPDcapRsnaPrfX</name><parameter_list pos:start="1959:21" pos:end="1964:19">(
        <parameter pos:start="1960:9" pos:end="1960:36"><decl pos:start="1960:9" pos:end="1960:36"><type pos:start="1960:9" pos:end="1960:36"><name pos:start="1960:9" pos:end="1960:32">AIRPDCAP_SEC_ASSOCIATION</name> <modifier pos:start="1960:34" pos:end="1960:34">*</modifier></type><name pos:start="1960:35" pos:end="1960:36">sa</name></decl></parameter>,
        <parameter pos:start="1961:9" pos:end="1961:27"><decl pos:start="1961:9" pos:end="1961:27"><type pos:start="1961:9" pos:end="1961:23"><specifier pos:start="1961:9" pos:end="1961:13">const</specifier> <name pos:start="1961:15" pos:end="1961:19">UCHAR</name></type> <name pos:start="1961:21" pos:end="1961:27"><name pos:start="1961:21" pos:end="1961:23">pmk</name><index pos:start="1961:24" pos:end="1961:27">[<expr pos:start="1961:25" pos:end="1961:26"><literal type="number" pos:start="1961:25" pos:end="1961:26">32</literal></expr>]</index></name></decl></parameter>,
        <parameter pos:start="1962:9" pos:end="1962:30"><decl pos:start="1962:9" pos:end="1962:30"><type pos:start="1962:9" pos:end="1962:26"><specifier pos:start="1962:9" pos:end="1962:13">const</specifier> <name pos:start="1962:15" pos:end="1962:19">UCHAR</name></type> <name pos:start="1962:21" pos:end="1962:30"><name pos:start="1962:21" pos:end="1962:26">snonce</name><index pos:start="1962:27" pos:end="1962:30">[<expr pos:start="1962:28" pos:end="1962:29"><literal type="number" pos:start="1962:28" pos:end="1962:29">32</literal></expr>]</index></name></decl></parameter>,
        <parameter pos:start="1963:9" pos:end="1963:19"><decl pos:start="1963:9" pos:end="1963:19"><type pos:start="1963:9" pos:end="1963:19"><specifier pos:start="1963:9" pos:end="1963:13">const</specifier> <name pos:start="1963:15" pos:end="1963:17">INT</name></type> <name pos:start="1963:19" pos:end="1963:19">x</name></decl></parameter>, <comment type="block" pos:start="1963:22" pos:end="1963:58">/*      for TKIP 512, for CCMP 384 */</comment>
        <parameter pos:start="1964:9" pos:end="1964:18"><decl pos:start="1964:9" pos:end="1964:18"><type pos:start="1964:9" pos:end="1964:18"><name pos:start="1964:9" pos:end="1964:13">UCHAR</name> <modifier pos:start="1964:15" pos:end="1964:15">*</modifier></type><name pos:start="1964:16" pos:end="1964:18">ptk</name></decl></parameter>)</parameter_list>
    <block pos:start="1965:5" pos:end="2012:0">{<block_content pos:start="1966:9" pos:end="2008:35">
        <decl_stmt pos:start="1966:9" pos:end="1966:16"><decl pos:start="1966:9" pos:end="1966:15"><type pos:start="1966:9" pos:end="1966:13"><name pos:start="1966:9" pos:end="1966:13">UINT8</name></type> <name pos:start="1966:15" pos:end="1966:15">i</name></decl>;</decl_stmt>
        <decl_stmt pos:start="1967:9" pos:end="1967:21"><decl pos:start="1967:9" pos:end="1967:20"><type pos:start="1967:9" pos:end="1967:13"><name pos:start="1967:9" pos:end="1967:13">UCHAR</name></type> <name pos:start="1967:15" pos:end="1967:20"><name pos:start="1967:15" pos:end="1967:15">R</name><index pos:start="1967:16" pos:end="1967:20">[<expr pos:start="1967:17" pos:end="1967:19"><literal type="number" pos:start="1967:17" pos:end="1967:19">100</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="1968:9" pos:end="1968:54"><decl pos:start="1968:9" pos:end="1968:53"><type pos:start="1968:9" pos:end="1968:11"><name pos:start="1968:9" pos:end="1968:11">INT</name></type> <name pos:start="1968:13" pos:end="1968:18">offset</name> <init pos:start="1968:20" pos:end="1968:53">= <expr pos:start="1968:22" pos:end="1968:53"><sizeof pos:start="1968:22" pos:end="1968:53">sizeof<argument_list pos:start="1968:28" pos:end="1968:53">(<argument pos:start="1968:29" pos:end="1968:52"><expr pos:start="1968:29" pos:end="1968:52"><literal type="string" pos:start="1968:29" pos:end="1968:52">"Pairwise key expansion"</literal></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="1969:9" pos:end="1969:25"><decl pos:start="1969:9" pos:end="1969:24"><type pos:start="1969:9" pos:end="1969:13"><name pos:start="1969:9" pos:end="1969:13">UCHAR</name></type> <name pos:start="1969:15" pos:end="1969:24"><name pos:start="1969:15" pos:end="1969:20">output</name><index pos:start="1969:21" pos:end="1969:24">[<expr pos:start="1969:22" pos:end="1969:23"><literal type="number" pos:start="1969:22" pos:end="1969:23">80</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block" pos:start="1969:27" pos:end="1969:56">/* allow for sha1 overflow. */</comment>

        <expr_stmt pos:start="1971:9" pos:end="1971:26"><expr pos:start="1971:9" pos:end="1971:25"><call pos:start="1971:9" pos:end="1971:25"><name pos:start="1971:9" pos:end="1971:14">memset</name><argument_list pos:start="1971:15" pos:end="1971:25">(<argument pos:start="1971:16" pos:end="1971:16"><expr pos:start="1971:16" pos:end="1971:16"><name pos:start="1971:16" pos:end="1971:16">R</name></expr></argument>, <argument pos:start="1971:19" pos:end="1971:19"><expr pos:start="1971:19" pos:end="1971:19"><literal type="number" pos:start="1971:19" pos:end="1971:19">0</literal></expr></argument>, <argument pos:start="1971:22" pos:end="1971:24"><expr pos:start="1971:22" pos:end="1971:24"><literal type="number" pos:start="1971:22" pos:end="1971:24">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1973:9" pos:end="1973:52"><expr pos:start="1973:9" pos:end="1973:51"><call pos:start="1973:9" pos:end="1973:51"><name pos:start="1973:9" pos:end="1973:14">memcpy</name><argument_list pos:start="1973:15" pos:end="1973:51">(<argument pos:start="1973:16" pos:end="1973:16"><expr pos:start="1973:16" pos:end="1973:16"><name pos:start="1973:16" pos:end="1973:16">R</name></expr></argument>, <argument pos:start="1973:19" pos:end="1973:42"><expr pos:start="1973:19" pos:end="1973:42"><literal type="string" pos:start="1973:19" pos:end="1973:42">"Pairwise key expansion"</literal></expr></argument>, <argument pos:start="1973:45" pos:end="1973:50"><expr pos:start="1973:45" pos:end="1973:50"><name pos:start="1973:45" pos:end="1973:50">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1975:9" pos:end="1975:42">/* Min(AA, SPA) || Max(AA, SPA) */</comment>
        <if_stmt pos:start="1976:9" pos:end="1985:9"><if pos:start="1976:9" pos:end="1980:9">if <condition pos:start="1976:12" pos:end="1976:71">(<expr pos:start="1976:13" pos:end="1976:70"><call pos:start="1976:13" pos:end="1976:66"><name pos:start="1976:13" pos:end="1976:18">memcmp</name><argument_list pos:start="1976:19" pos:end="1976:66">(<argument pos:start="1976:20" pos:end="1976:31"><expr pos:start="1976:20" pos:end="1976:31"><name pos:start="1976:20" pos:end="1976:31"><name pos:start="1976:20" pos:end="1976:21">sa</name><operator pos:start="1976:22" pos:end="1976:23">-&gt;</operator><name pos:start="1976:24" pos:end="1976:27">saId</name><operator pos:start="1976:28" pos:end="1976:28">.</operator><name pos:start="1976:29" pos:end="1976:31">sta</name></name></expr></argument>, <argument pos:start="1976:34" pos:end="1976:47"><expr pos:start="1976:34" pos:end="1976:47"><name pos:start="1976:34" pos:end="1976:47"><name pos:start="1976:34" pos:end="1976:35">sa</name><operator pos:start="1976:36" pos:end="1976:37">-&gt;</operator><name pos:start="1976:38" pos:end="1976:41">saId</name><operator pos:start="1976:42" pos:end="1976:42">.</operator><name pos:start="1976:43" pos:end="1976:47">bssid</name></name></expr></argument>, <argument pos:start="1976:50" pos:end="1976:65"><expr pos:start="1976:50" pos:end="1976:65"><name pos:start="1976:50" pos:end="1976:65">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="1976:68" pos:end="1976:68">&lt;</operator> <literal type="number" pos:start="1976:70" pos:end="1976:70">0</literal></expr>)</condition>
        <block pos:start="1977:9" pos:end="1980:9">{<block_content pos:start="1978:13" pos:end="1979:84">
            <expr_stmt pos:start="1978:13" pos:end="1978:63"><expr pos:start="1978:13" pos:end="1978:62"><call pos:start="1978:13" pos:end="1978:62"><name pos:start="1978:13" pos:end="1978:18">memcpy</name><argument_list pos:start="1978:19" pos:end="1978:62">(<argument pos:start="1978:20" pos:end="1978:29"><expr pos:start="1978:20" pos:end="1978:29"><name pos:start="1978:20" pos:end="1978:20">R</name> <operator pos:start="1978:22" pos:end="1978:22">+</operator> <name pos:start="1978:24" pos:end="1978:29">offset</name></expr></argument>, <argument pos:start="1978:32" pos:end="1978:43"><expr pos:start="1978:32" pos:end="1978:43"><name pos:start="1978:32" pos:end="1978:43"><name pos:start="1978:32" pos:end="1978:33">sa</name><operator pos:start="1978:34" pos:end="1978:35">-&gt;</operator><name pos:start="1978:36" pos:end="1978:39">saId</name><operator pos:start="1978:40" pos:end="1978:40">.</operator><name pos:start="1978:41" pos:end="1978:43">sta</name></name></expr></argument>, <argument pos:start="1978:46" pos:end="1978:61"><expr pos:start="1978:46" pos:end="1978:61"><name pos:start="1978:46" pos:end="1978:61">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1979:13" pos:end="1979:84"><expr pos:start="1979:13" pos:end="1979:83"><call pos:start="1979:13" pos:end="1979:83"><name pos:start="1979:13" pos:end="1979:18">memcpy</name><argument_list pos:start="1979:19" pos:end="1979:83">(<argument pos:start="1979:20" pos:end="1979:48"><expr pos:start="1979:20" pos:end="1979:48"><name pos:start="1979:20" pos:end="1979:20">R</name> <operator pos:start="1979:22" pos:end="1979:22">+</operator> <name pos:start="1979:24" pos:end="1979:29">offset</name> <operator pos:start="1979:31" pos:end="1979:31">+</operator> <name pos:start="1979:33" pos:end="1979:48">AIRPDCAP_MAC_LEN</name></expr></argument>, <argument pos:start="1979:51" pos:end="1979:64"><expr pos:start="1979:51" pos:end="1979:64"><name pos:start="1979:51" pos:end="1979:64"><name pos:start="1979:51" pos:end="1979:52">sa</name><operator pos:start="1979:53" pos:end="1979:54">-&gt;</operator><name pos:start="1979:55" pos:end="1979:58">saId</name><operator pos:start="1979:59" pos:end="1979:59">.</operator><name pos:start="1979:60" pos:end="1979:64">bssid</name></name></expr></argument>, <argument pos:start="1979:67" pos:end="1979:82"><expr pos:start="1979:67" pos:end="1979:82"><name pos:start="1979:67" pos:end="1979:82">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else pos:start="1981:9" pos:end="1985:9">else
        <block pos:start="1982:9" pos:end="1985:9">{<block_content pos:start="1983:13" pos:end="1984:82">
            <expr_stmt pos:start="1983:13" pos:end="1983:65"><expr pos:start="1983:13" pos:end="1983:64"><call pos:start="1983:13" pos:end="1983:64"><name pos:start="1983:13" pos:end="1983:18">memcpy</name><argument_list pos:start="1983:19" pos:end="1983:64">(<argument pos:start="1983:20" pos:end="1983:29"><expr pos:start="1983:20" pos:end="1983:29"><name pos:start="1983:20" pos:end="1983:20">R</name> <operator pos:start="1983:22" pos:end="1983:22">+</operator> <name pos:start="1983:24" pos:end="1983:29">offset</name></expr></argument>, <argument pos:start="1983:32" pos:end="1983:45"><expr pos:start="1983:32" pos:end="1983:45"><name pos:start="1983:32" pos:end="1983:45"><name pos:start="1983:32" pos:end="1983:33">sa</name><operator pos:start="1983:34" pos:end="1983:35">-&gt;</operator><name pos:start="1983:36" pos:end="1983:39">saId</name><operator pos:start="1983:40" pos:end="1983:40">.</operator><name pos:start="1983:41" pos:end="1983:45">bssid</name></name></expr></argument>, <argument pos:start="1983:48" pos:end="1983:63"><expr pos:start="1983:48" pos:end="1983:63"><name pos:start="1983:48" pos:end="1983:63">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1984:13" pos:end="1984:82"><expr pos:start="1984:13" pos:end="1984:81"><call pos:start="1984:13" pos:end="1984:81"><name pos:start="1984:13" pos:end="1984:18">memcpy</name><argument_list pos:start="1984:19" pos:end="1984:81">(<argument pos:start="1984:20" pos:end="1984:48"><expr pos:start="1984:20" pos:end="1984:48"><name pos:start="1984:20" pos:end="1984:20">R</name> <operator pos:start="1984:22" pos:end="1984:22">+</operator> <name pos:start="1984:24" pos:end="1984:29">offset</name> <operator pos:start="1984:31" pos:end="1984:31">+</operator> <name pos:start="1984:33" pos:end="1984:48">AIRPDCAP_MAC_LEN</name></expr></argument>, <argument pos:start="1984:51" pos:end="1984:62"><expr pos:start="1984:51" pos:end="1984:62"><name pos:start="1984:51" pos:end="1984:62"><name pos:start="1984:51" pos:end="1984:52">sa</name><operator pos:start="1984:53" pos:end="1984:54">-&gt;</operator><name pos:start="1984:55" pos:end="1984:58">saId</name><operator pos:start="1984:59" pos:end="1984:59">.</operator><name pos:start="1984:60" pos:end="1984:62">sta</name></name></expr></argument>, <argument pos:start="1984:65" pos:end="1984:80"><expr pos:start="1984:65" pos:end="1984:80"><name pos:start="1984:65" pos:end="1984:80">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1987:9" pos:end="1987:39"><expr pos:start="1987:9" pos:end="1987:38"><name pos:start="1987:9" pos:end="1987:14">offset</name> <operator pos:start="1987:16" pos:end="1987:17">+=</operator> <name pos:start="1987:19" pos:end="1987:34">AIRPDCAP_MAC_LEN</name> <operator pos:start="1987:36" pos:end="1987:36">*</operator> <literal type="number" pos:start="1987:38" pos:end="1987:38">2</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="1989:9" pos:end="1989:54">/* Min(ANonce,SNonce) || Max(ANonce,SNonce) */</comment>
        <if_stmt pos:start="1990:9" pos:end="1999:9"><if pos:start="1990:9" pos:end="1994:9">if <condition pos:start="1990:12" pos:end="1990:50">(<expr pos:start="1990:13" pos:end="1990:49"><call pos:start="1990:13" pos:end="1990:45"><name pos:start="1990:13" pos:end="1990:18">memcmp</name><argument_list pos:start="1990:19" pos:end="1990:45">(<argument pos:start="1990:20" pos:end="1990:25"><expr pos:start="1990:20" pos:end="1990:25"><name pos:start="1990:20" pos:end="1990:25">snonce</name></expr></argument>, <argument pos:start="1990:28" pos:end="1990:40"><expr pos:start="1990:28" pos:end="1990:40"><name pos:start="1990:28" pos:end="1990:40"><name pos:start="1990:28" pos:end="1990:29">sa</name><operator pos:start="1990:30" pos:end="1990:31">-&gt;</operator><name pos:start="1990:32" pos:end="1990:34">wpa</name><operator pos:start="1990:35" pos:end="1990:35">.</operator><name pos:start="1990:36" pos:end="1990:40">nonce</name></name></expr></argument>, <argument pos:start="1990:43" pos:end="1990:44"><expr pos:start="1990:43" pos:end="1990:44"><literal type="number" pos:start="1990:43" pos:end="1990:44">32</literal></expr></argument>)</argument_list></call> <operator pos:start="1990:47" pos:end="1990:47">&lt;</operator> <literal type="number" pos:start="1990:49" pos:end="1990:49">0</literal></expr>)</condition>
        <block pos:start="1991:9" pos:end="1994:9">{<block_content pos:start="1992:13" pos:end="1993:55">
            <expr_stmt pos:start="1992:13" pos:end="1992:43"><expr pos:start="1992:13" pos:end="1992:42"><call pos:start="1992:13" pos:end="1992:42"><name pos:start="1992:13" pos:end="1992:18">memcpy</name><argument_list pos:start="1992:19" pos:end="1992:42">(<argument pos:start="1992:20" pos:end="1992:29"><expr pos:start="1992:20" pos:end="1992:29"><name pos:start="1992:20" pos:end="1992:20">R</name> <operator pos:start="1992:22" pos:end="1992:22">+</operator> <name pos:start="1992:24" pos:end="1992:29">offset</name></expr></argument>, <argument pos:start="1992:32" pos:end="1992:37"><expr pos:start="1992:32" pos:end="1992:37"><name pos:start="1992:32" pos:end="1992:37">snonce</name></expr></argument>, <argument pos:start="1992:40" pos:end="1992:41"><expr pos:start="1992:40" pos:end="1992:41"><literal type="number" pos:start="1992:40" pos:end="1992:41">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1993:13" pos:end="1993:55"><expr pos:start="1993:13" pos:end="1993:54"><call pos:start="1993:13" pos:end="1993:54"><name pos:start="1993:13" pos:end="1993:18">memcpy</name><argument_list pos:start="1993:19" pos:end="1993:54">(<argument pos:start="1993:20" pos:end="1993:34"><expr pos:start="1993:20" pos:end="1993:34"><name pos:start="1993:20" pos:end="1993:20">R</name> <operator pos:start="1993:22" pos:end="1993:22">+</operator> <name pos:start="1993:24" pos:end="1993:29">offset</name> <operator pos:start="1993:31" pos:end="1993:31">+</operator> <literal type="number" pos:start="1993:33" pos:end="1993:34">32</literal></expr></argument>, <argument pos:start="1993:37" pos:end="1993:49"><expr pos:start="1993:37" pos:end="1993:49"><name pos:start="1993:37" pos:end="1993:49"><name pos:start="1993:37" pos:end="1993:38">sa</name><operator pos:start="1993:39" pos:end="1993:40">-&gt;</operator><name pos:start="1993:41" pos:end="1993:43">wpa</name><operator pos:start="1993:44" pos:end="1993:44">.</operator><name pos:start="1993:45" pos:end="1993:49">nonce</name></name></expr></argument>, <argument pos:start="1993:52" pos:end="1993:53"><expr pos:start="1993:52" pos:end="1993:53"><literal type="number" pos:start="1993:52" pos:end="1993:53">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else pos:start="1995:9" pos:end="1999:9">else
        <block pos:start="1996:9" pos:end="1999:9">{<block_content pos:start="1997:13" pos:end="1998:48">
            <expr_stmt pos:start="1997:13" pos:end="1997:50"><expr pos:start="1997:13" pos:end="1997:49"><call pos:start="1997:13" pos:end="1997:49"><name pos:start="1997:13" pos:end="1997:18">memcpy</name><argument_list pos:start="1997:19" pos:end="1997:49">(<argument pos:start="1997:20" pos:end="1997:29"><expr pos:start="1997:20" pos:end="1997:29"><name pos:start="1997:20" pos:end="1997:20">R</name> <operator pos:start="1997:22" pos:end="1997:22">+</operator> <name pos:start="1997:24" pos:end="1997:29">offset</name></expr></argument>, <argument pos:start="1997:32" pos:end="1997:44"><expr pos:start="1997:32" pos:end="1997:44"><name pos:start="1997:32" pos:end="1997:44"><name pos:start="1997:32" pos:end="1997:33">sa</name><operator pos:start="1997:34" pos:end="1997:35">-&gt;</operator><name pos:start="1997:36" pos:end="1997:38">wpa</name><operator pos:start="1997:39" pos:end="1997:39">.</operator><name pos:start="1997:40" pos:end="1997:44">nonce</name></name></expr></argument>, <argument pos:start="1997:47" pos:end="1997:48"><expr pos:start="1997:47" pos:end="1997:48"><literal type="number" pos:start="1997:47" pos:end="1997:48">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1998:13" pos:end="1998:48"><expr pos:start="1998:13" pos:end="1998:47"><call pos:start="1998:13" pos:end="1998:47"><name pos:start="1998:13" pos:end="1998:18">memcpy</name><argument_list pos:start="1998:19" pos:end="1998:47">(<argument pos:start="1998:20" pos:end="1998:34"><expr pos:start="1998:20" pos:end="1998:34"><name pos:start="1998:20" pos:end="1998:20">R</name> <operator pos:start="1998:22" pos:end="1998:22">+</operator> <name pos:start="1998:24" pos:end="1998:29">offset</name> <operator pos:start="1998:31" pos:end="1998:31">+</operator> <literal type="number" pos:start="1998:33" pos:end="1998:34">32</literal></expr></argument>, <argument pos:start="1998:37" pos:end="1998:42"><expr pos:start="1998:37" pos:end="1998:42"><name pos:start="1998:37" pos:end="1998:42">snonce</name></expr></argument>, <argument pos:start="1998:45" pos:end="1998:46"><expr pos:start="1998:45" pos:end="1998:46"><literal type="number" pos:start="1998:45" pos:end="1998:46">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="2001:9" pos:end="2001:25"><expr pos:start="2001:9" pos:end="2001:24"><name pos:start="2001:9" pos:end="2001:14">offset</name> <operator pos:start="2001:16" pos:end="2001:17">+=</operator> <literal type="number" pos:start="2001:19" pos:end="2001:20">32</literal> <operator pos:start="2001:22" pos:end="2001:22">*</operator> <literal type="number" pos:start="2001:24" pos:end="2001:24">2</literal></expr>;</expr_stmt>

        <for pos:start="2003:9" pos:end="2007:9">for <control pos:start="2003:13" pos:end="2003:45">(<init pos:start="2003:14" pos:end="2003:19"><expr pos:start="2003:14" pos:end="2003:18"><name pos:start="2003:14" pos:end="2003:14">i</name> <operator pos:start="2003:16" pos:end="2003:16">=</operator> <literal type="number" pos:start="2003:18" pos:end="2003:18">0</literal></expr>;</init> <condition pos:start="2003:21" pos:end="2003:40"><expr pos:start="2003:21" pos:end="2003:39"><name pos:start="2003:21" pos:end="2003:21">i</name> <operator pos:start="2003:23" pos:end="2003:23">&lt;</operator> <operator pos:start="2003:25" pos:end="2003:25">(</operator><name pos:start="2003:26" pos:end="2003:26">x</name> <operator pos:start="2003:28" pos:end="2003:28">+</operator> <literal type="number" pos:start="2003:30" pos:end="2003:32">159</literal><operator pos:start="2003:33" pos:end="2003:33">)</operator> <operator pos:start="2003:35" pos:end="2003:35">/</operator> <literal type="number" pos:start="2003:37" pos:end="2003:39">160</literal></expr>;</condition> <incr pos:start="2003:42" pos:end="2003:44"><expr pos:start="2003:42" pos:end="2003:44"><name pos:start="2003:42" pos:end="2003:42">i</name><operator pos:start="2003:43" pos:end="2003:44">++</operator></expr></incr>)</control>
        <block pos:start="2004:9" pos:end="2007:9">{<block_content pos:start="2005:13" pos:end="2006:56">
            <expr_stmt pos:start="2005:13" pos:end="2005:26"><expr pos:start="2005:13" pos:end="2005:25"><name pos:start="2005:13" pos:end="2005:21"><name pos:start="2005:13" pos:end="2005:13">R</name><index pos:start="2005:14" pos:end="2005:21">[<expr pos:start="2005:15" pos:end="2005:20"><name pos:start="2005:15" pos:end="2005:20">offset</name></expr>]</index></name> <operator pos:start="2005:23" pos:end="2005:23">=</operator> <name pos:start="2005:25" pos:end="2005:25">i</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2006:13" pos:end="2006:56"><expr pos:start="2006:13" pos:end="2006:55"><call pos:start="2006:13" pos:end="2006:55"><name pos:start="2006:13" pos:end="2006:21">sha1_hmac</name><argument_list pos:start="2006:22" pos:end="2006:55">(<argument pos:start="2006:23" pos:end="2006:25"><expr pos:start="2006:23" pos:end="2006:25"><name pos:start="2006:23" pos:end="2006:25">pmk</name></expr></argument>, <argument pos:start="2006:28" pos:end="2006:29"><expr pos:start="2006:28" pos:end="2006:29"><literal type="number" pos:start="2006:28" pos:end="2006:29">32</literal></expr></argument>, <argument pos:start="2006:32" pos:end="2006:32"><expr pos:start="2006:32" pos:end="2006:32"><name pos:start="2006:32" pos:end="2006:32">R</name></expr></argument>, <argument pos:start="2006:35" pos:end="2006:37"><expr pos:start="2006:35" pos:end="2006:37"><literal type="number" pos:start="2006:35" pos:end="2006:37">100</literal></expr></argument>, <argument pos:start="2006:40" pos:end="2006:54"><expr pos:start="2006:40" pos:end="2006:54"><operator pos:start="2006:40" pos:end="2006:40">&amp;</operator><name pos:start="2006:41" pos:end="2006:54"><name pos:start="2006:41" pos:end="2006:46">output</name><index pos:start="2006:47" pos:end="2006:54">[<expr pos:start="2006:48" pos:end="2006:53"><literal type="number" pos:start="2006:48" pos:end="2006:49">20</literal> <operator pos:start="2006:51" pos:end="2006:51">*</operator> <name pos:start="2006:53" pos:end="2006:53">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt pos:start="2008:9" pos:end="2008:35"><expr pos:start="2008:9" pos:end="2008:34"><call pos:start="2008:9" pos:end="2008:34"><name pos:start="2008:9" pos:end="2008:14">memcpy</name><argument_list pos:start="2008:15" pos:end="2008:34">(<argument pos:start="2008:16" pos:end="2008:18"><expr pos:start="2008:16" pos:end="2008:18"><name pos:start="2008:16" pos:end="2008:18">ptk</name></expr></argument>, <argument pos:start="2008:21" pos:end="2008:26"><expr pos:start="2008:21" pos:end="2008:26"><name pos:start="2008:21" pos:end="2008:26">output</name></expr></argument>, <argument pos:start="2008:29" pos:end="2008:33"><expr pos:start="2008:29" pos:end="2008:33"><name pos:start="2008:29" pos:end="2008:29">x</name> <operator pos:start="2008:31" pos:end="2008:31">/</operator> <literal type="number" pos:start="2008:33" pos:end="2008:33">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

<cpp:define pos:start="2011:1" pos:end="2011:26">#<cpp:directive pos:start="2011:2" pos:end="2011:7">define</cpp:directive> <cpp:macro pos:start="2011:9" pos:end="2011:23"><name pos:start="2011:9" pos:end="2011:23">MAX_SSID_LENGTH</name></cpp:macro> <cpp:value pos:start="2011:25" pos:end="2011:26">32</cpp:value></cpp:define> <comment type="block" pos:start="2011:28" pos:end="2011:52">/* maximum SSID length */</comment>

    <function pos:start="2013:5" pos:end="2060:5"><type pos:start="2013:5" pos:end="2013:14"><specifier pos:start="2013:5" pos:end="2013:10">static</specifier> <name pos:start="2013:12" pos:end="2013:14">INT</name></type>
    <name pos:start="2014:5" pos:end="2014:27">AirPDcapRsnaPwd2PskStep</name><parameter_list pos:start="2014:28" pos:end="2021:22">(
        <parameter pos:start="2015:9" pos:end="2015:29"><decl pos:start="2015:9" pos:end="2015:29"><type pos:start="2015:9" pos:end="2015:29"><specifier pos:start="2015:9" pos:end="2015:13">const</specifier> <name pos:start="2015:15" pos:end="2015:20">guint8</name> <modifier pos:start="2015:22" pos:end="2015:22">*</modifier></type><name pos:start="2015:23" pos:end="2015:29">ppBytes</name></decl></parameter>,
        <parameter pos:start="2016:9" pos:end="2016:28"><decl pos:start="2016:9" pos:end="2016:28"><type pos:start="2016:9" pos:end="2016:28"><specifier pos:start="2016:9" pos:end="2016:13">const</specifier> <name pos:start="2016:15" pos:end="2016:19">guint</name></type> <name pos:start="2016:21" pos:end="2016:28">ppLength</name></decl></parameter>,
        <parameter pos:start="2017:9" pos:end="2017:24"><decl pos:start="2017:9" pos:end="2017:24"><type pos:start="2017:9" pos:end="2017:24"><specifier pos:start="2017:9" pos:end="2017:13">const</specifier> <name pos:start="2017:15" pos:end="2017:18">CHAR</name> <modifier pos:start="2017:20" pos:end="2017:20">*</modifier></type><name pos:start="2017:21" pos:end="2017:24">ssid</name></decl></parameter>,
        <parameter pos:start="2018:9" pos:end="2018:31"><decl pos:start="2018:9" pos:end="2018:31"><type pos:start="2018:9" pos:end="2018:31"><specifier pos:start="2018:9" pos:end="2018:13">const</specifier> <name pos:start="2018:15" pos:end="2018:20">size_t</name></type> <name pos:start="2018:22" pos:end="2018:31">ssidLength</name></decl></parameter>,
        <parameter pos:start="2019:9" pos:end="2019:28"><decl pos:start="2019:9" pos:end="2019:28"><type pos:start="2019:9" pos:end="2019:28"><specifier pos:start="2019:9" pos:end="2019:13">const</specifier> <name pos:start="2019:15" pos:end="2019:17">INT</name></type> <name pos:start="2019:19" pos:end="2019:28">iterations</name></decl></parameter>,
        <parameter pos:start="2020:9" pos:end="2020:23"><decl pos:start="2020:9" pos:end="2020:23"><type pos:start="2020:9" pos:end="2020:23"><specifier pos:start="2020:9" pos:end="2020:13">const</specifier> <name pos:start="2020:15" pos:end="2020:17">INT</name></type> <name pos:start="2020:19" pos:end="2020:23">count</name></decl></parameter>,
        <parameter pos:start="2021:9" pos:end="2021:21"><decl pos:start="2021:9" pos:end="2021:21"><type pos:start="2021:9" pos:end="2021:21"><name pos:start="2021:9" pos:end="2021:13">UCHAR</name> <modifier pos:start="2021:15" pos:end="2021:15">*</modifier></type><name pos:start="2021:16" pos:end="2021:21">output</name></decl></parameter>)</parameter_list>
    <block pos:start="2022:5" pos:end="2060:5">{<block_content pos:start="2023:9" pos:end="2059:36">
        <decl_stmt pos:start="2023:9" pos:end="2023:42"><decl pos:start="2023:9" pos:end="2023:41"><type pos:start="2023:9" pos:end="2023:13"><name pos:start="2023:9" pos:end="2023:13">UCHAR</name></type> <name pos:start="2023:15" pos:end="2023:41"><name pos:start="2023:15" pos:end="2023:20">digest</name><index pos:start="2023:21" pos:end="2023:41">[<expr pos:start="2023:22" pos:end="2023:40"><name pos:start="2023:22" pos:end="2023:36">MAX_SSID_LENGTH</name> <operator pos:start="2023:38" pos:end="2023:38">+</operator> <literal type="number" pos:start="2023:40" pos:end="2023:40">4</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block" pos:start="2023:44" pos:end="2023:75">/* SSID plus 4 bytes of count */</comment>
        <decl_stmt pos:start="2024:9" pos:end="2024:39"><decl pos:start="2024:9" pos:end="2024:38"><type pos:start="2024:9" pos:end="2024:13"><name pos:start="2024:9" pos:end="2024:13">UCHAR</name></type> <name pos:start="2024:15" pos:end="2024:38"><name pos:start="2024:15" pos:end="2024:21">digest1</name><index pos:start="2024:22" pos:end="2024:38">[<expr pos:start="2024:23" pos:end="2024:37"><name pos:start="2024:23" pos:end="2024:37">SHA1_DIGEST_LEN</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="2025:9" pos:end="2025:17"><decl pos:start="2025:9" pos:end="2025:13"><type pos:start="2025:9" pos:end="2025:11"><name pos:start="2025:9" pos:end="2025:11">INT</name></type> <name pos:start="2025:13" pos:end="2025:13">i</name></decl>, <decl pos:start="2025:16" pos:end="2025:16"><type ref="prev" pos:start="2025:9" pos:end="2025:11"/><name pos:start="2025:16" pos:end="2025:16">j</name></decl>;</decl_stmt>

        <if_stmt pos:start="2027:9" pos:end="2031:9"><if pos:start="2027:9" pos:end="2031:9">if <condition pos:start="2027:12" pos:end="2027:41">(<expr pos:start="2027:13" pos:end="2027:40"><name pos:start="2027:13" pos:end="2027:22">ssidLength</name> <operator pos:start="2027:24" pos:end="2027:24">&gt;</operator> <name pos:start="2027:26" pos:end="2027:40">MAX_SSID_LENGTH</name></expr>)</condition>
        <block pos:start="2028:9" pos:end="2031:9">{<block_content pos:start="2030:13" pos:end="2030:42">
            <comment type="block" pos:start="2029:13" pos:end="2029:42">/* This "should not happen" */</comment>
            <return pos:start="2030:13" pos:end="2030:42">return <expr pos:start="2030:20" pos:end="2030:41"><name pos:start="2030:20" pos:end="2030:41">AIRPDCAP_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2033:9" pos:end="2033:41"><expr pos:start="2033:9" pos:end="2033:40"><call pos:start="2033:9" pos:end="2033:40"><name pos:start="2033:9" pos:end="2033:14">memset</name><argument_list pos:start="2033:15" pos:end="2033:40">(<argument pos:start="2033:16" pos:end="2033:21"><expr pos:start="2033:16" pos:end="2033:21"><name pos:start="2033:16" pos:end="2033:21">digest</name></expr></argument>, <argument pos:start="2033:24" pos:end="2033:24"><expr pos:start="2033:24" pos:end="2033:24"><literal type="number" pos:start="2033:24" pos:end="2033:24">0</literal></expr></argument>, <argument pos:start="2033:27" pos:end="2033:39"><expr pos:start="2033:27" pos:end="2033:39"><sizeof pos:start="2033:27" pos:end="2033:39">sizeof <name pos:start="2033:34" pos:end="2033:39">digest</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2034:9" pos:end="2034:43"><expr pos:start="2034:9" pos:end="2034:42"><call pos:start="2034:9" pos:end="2034:42"><name pos:start="2034:9" pos:end="2034:14">memset</name><argument_list pos:start="2034:15" pos:end="2034:42">(<argument pos:start="2034:16" pos:end="2034:22"><expr pos:start="2034:16" pos:end="2034:22"><name pos:start="2034:16" pos:end="2034:22">digest1</name></expr></argument>, <argument pos:start="2034:25" pos:end="2034:25"><expr pos:start="2034:25" pos:end="2034:25"><literal type="number" pos:start="2034:25" pos:end="2034:25">0</literal></expr></argument>, <argument pos:start="2034:28" pos:end="2034:41"><expr pos:start="2034:28" pos:end="2034:41"><sizeof pos:start="2034:28" pos:end="2034:41">sizeof <name pos:start="2034:35" pos:end="2034:41">digest1</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="2036:9" pos:end="2036:38">/* U1 = PRF(P, S || INT(i)) */</comment>
        <expr_stmt pos:start="2037:9" pos:end="2037:41"><expr pos:start="2037:9" pos:end="2037:40"><call pos:start="2037:9" pos:end="2037:40"><name pos:start="2037:9" pos:end="2037:14">memcpy</name><argument_list pos:start="2037:15" pos:end="2037:40">(<argument pos:start="2037:16" pos:end="2037:21"><expr pos:start="2037:16" pos:end="2037:21"><name pos:start="2037:16" pos:end="2037:21">digest</name></expr></argument>, <argument pos:start="2037:24" pos:end="2037:27"><expr pos:start="2037:24" pos:end="2037:27"><name pos:start="2037:24" pos:end="2037:27">ssid</name></expr></argument>, <argument pos:start="2037:30" pos:end="2037:39"><expr pos:start="2037:30" pos:end="2037:39"><name pos:start="2037:30" pos:end="2037:39">ssidLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2038:9" pos:end="2038:59"><expr pos:start="2038:9" pos:end="2038:58"><name pos:start="2038:9" pos:end="2038:26"><name pos:start="2038:9" pos:end="2038:14">digest</name><index pos:start="2038:15" pos:end="2038:26">[<expr pos:start="2038:16" pos:end="2038:25"><name pos:start="2038:16" pos:end="2038:25">ssidLength</name></expr>]</index></name> <operator pos:start="2038:28" pos:end="2038:28">=</operator> <operator pos:start="2038:30" pos:end="2038:30">(</operator><name pos:start="2038:31" pos:end="2038:35">UCHAR</name><operator pos:start="2038:36" pos:end="2038:36">)</operator><operator pos:start="2038:37" pos:end="2038:37">(</operator><operator pos:start="2038:38" pos:end="2038:38">(</operator><name pos:start="2038:39" pos:end="2038:43">count</name> <operator pos:start="2038:45" pos:end="2038:46">&gt;&gt;</operator> <literal type="number" pos:start="2038:48" pos:end="2038:49">24</literal><operator pos:start="2038:50" pos:end="2038:50">)</operator> <operator pos:start="2038:52" pos:end="2038:52">&amp;</operator> <literal type="number" pos:start="2038:54" pos:end="2038:57">0xff</literal><operator pos:start="2038:58" pos:end="2038:58">)</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="2039:9" pos:end="2039:63"><expr pos:start="2039:9" pos:end="2039:62"><name pos:start="2039:9" pos:end="2039:30"><name pos:start="2039:9" pos:end="2039:14">digest</name><index pos:start="2039:15" pos:end="2039:30">[<expr pos:start="2039:16" pos:end="2039:29"><name pos:start="2039:16" pos:end="2039:25">ssidLength</name> <operator pos:start="2039:27" pos:end="2039:27">+</operator> <literal type="number" pos:start="2039:29" pos:end="2039:29">1</literal></expr>]</index></name> <operator pos:start="2039:32" pos:end="2039:32">=</operator> <operator pos:start="2039:34" pos:end="2039:34">(</operator><name pos:start="2039:35" pos:end="2039:39">UCHAR</name><operator pos:start="2039:40" pos:end="2039:40">)</operator><operator pos:start="2039:41" pos:end="2039:41">(</operator><operator pos:start="2039:42" pos:end="2039:42">(</operator><name pos:start="2039:43" pos:end="2039:47">count</name> <operator pos:start="2039:49" pos:end="2039:50">&gt;&gt;</operator> <literal type="number" pos:start="2039:52" pos:end="2039:53">16</literal><operator pos:start="2039:54" pos:end="2039:54">)</operator> <operator pos:start="2039:56" pos:end="2039:56">&amp;</operator> <literal type="number" pos:start="2039:58" pos:end="2039:61">0xff</literal><operator pos:start="2039:62" pos:end="2039:62">)</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="2040:9" pos:end="2040:62"><expr pos:start="2040:9" pos:end="2040:61"><name pos:start="2040:9" pos:end="2040:30"><name pos:start="2040:9" pos:end="2040:14">digest</name><index pos:start="2040:15" pos:end="2040:30">[<expr pos:start="2040:16" pos:end="2040:29"><name pos:start="2040:16" pos:end="2040:25">ssidLength</name> <operator pos:start="2040:27" pos:end="2040:27">+</operator> <literal type="number" pos:start="2040:29" pos:end="2040:29">2</literal></expr>]</index></name> <operator pos:start="2040:32" pos:end="2040:32">=</operator> <operator pos:start="2040:34" pos:end="2040:34">(</operator><name pos:start="2040:35" pos:end="2040:39">UCHAR</name><operator pos:start="2040:40" pos:end="2040:40">)</operator><operator pos:start="2040:41" pos:end="2040:41">(</operator><operator pos:start="2040:42" pos:end="2040:42">(</operator><name pos:start="2040:43" pos:end="2040:47">count</name> <operator pos:start="2040:49" pos:end="2040:50">&gt;&gt;</operator> <literal type="number" pos:start="2040:52" pos:end="2040:52">8</literal><operator pos:start="2040:53" pos:end="2040:53">)</operator> <operator pos:start="2040:55" pos:end="2040:55">&amp;</operator> <literal type="number" pos:start="2040:57" pos:end="2040:60">0xff</literal><operator pos:start="2040:61" pos:end="2040:61">)</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="2041:9" pos:end="2041:55"><expr pos:start="2041:9" pos:end="2041:54"><name pos:start="2041:9" pos:end="2041:30"><name pos:start="2041:9" pos:end="2041:14">digest</name><index pos:start="2041:15" pos:end="2041:30">[<expr pos:start="2041:16" pos:end="2041:29"><name pos:start="2041:16" pos:end="2041:25">ssidLength</name> <operator pos:start="2041:27" pos:end="2041:27">+</operator> <literal type="number" pos:start="2041:29" pos:end="2041:29">3</literal></expr>]</index></name> <operator pos:start="2041:32" pos:end="2041:32">=</operator> <operator pos:start="2041:34" pos:end="2041:34">(</operator><name pos:start="2041:35" pos:end="2041:39">UCHAR</name><operator pos:start="2041:40" pos:end="2041:40">)</operator><operator pos:start="2041:41" pos:end="2041:41">(</operator><name pos:start="2041:42" pos:end="2041:46">count</name> <operator pos:start="2041:48" pos:end="2041:48">&amp;</operator> <literal type="number" pos:start="2041:50" pos:end="2041:53">0xff</literal><operator pos:start="2041:54" pos:end="2041:54">)</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="2042:9" pos:end="2042:79"><expr pos:start="2042:9" pos:end="2042:78"><call pos:start="2042:9" pos:end="2042:78"><name pos:start="2042:9" pos:end="2042:17">sha1_hmac</name><argument_list pos:start="2042:18" pos:end="2042:78">(<argument pos:start="2042:19" pos:end="2042:25"><expr pos:start="2042:19" pos:end="2042:25"><name pos:start="2042:19" pos:end="2042:25">ppBytes</name></expr></argument>, <argument pos:start="2042:28" pos:end="2042:35"><expr pos:start="2042:28" pos:end="2042:35"><name pos:start="2042:28" pos:end="2042:35">ppLength</name></expr></argument>, <argument pos:start="2042:38" pos:end="2042:43"><expr pos:start="2042:38" pos:end="2042:43"><name pos:start="2042:38" pos:end="2042:43">digest</name></expr></argument>, <argument pos:start="2042:46" pos:end="2042:68"><expr pos:start="2042:46" pos:end="2042:68"><operator pos:start="2042:46" pos:end="2042:46">(</operator><name pos:start="2042:47" pos:end="2042:53">guint32</name><operator pos:start="2042:54" pos:end="2042:54">)</operator><name pos:start="2042:55" pos:end="2042:64">ssidLength</name> <operator pos:start="2042:66" pos:end="2042:66">+</operator> <literal type="number" pos:start="2042:68" pos:end="2042:68">4</literal></expr></argument>, <argument pos:start="2042:71" pos:end="2042:77"><expr pos:start="2042:71" pos:end="2042:77"><name pos:start="2042:71" pos:end="2042:77">digest1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="2044:9" pos:end="2044:25">/* output = U1 */</comment>
        <expr_stmt pos:start="2045:9" pos:end="2045:49"><expr pos:start="2045:9" pos:end="2045:48"><call pos:start="2045:9" pos:end="2045:48"><name pos:start="2045:9" pos:end="2045:14">memcpy</name><argument_list pos:start="2045:15" pos:end="2045:48">(<argument pos:start="2045:16" pos:end="2045:21"><expr pos:start="2045:16" pos:end="2045:21"><name pos:start="2045:16" pos:end="2045:21">output</name></expr></argument>, <argument pos:start="2045:24" pos:end="2045:30"><expr pos:start="2045:24" pos:end="2045:30"><name pos:start="2045:24" pos:end="2045:30">digest1</name></expr></argument>, <argument pos:start="2045:33" pos:end="2045:47"><expr pos:start="2045:33" pos:end="2045:47"><name pos:start="2045:33" pos:end="2045:47">SHA1_DIGEST_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for pos:start="2046:9" pos:end="2057:9">for <control pos:start="2046:13" pos:end="2046:40">(<init pos:start="2046:14" pos:end="2046:19"><expr pos:start="2046:14" pos:end="2046:18"><name pos:start="2046:14" pos:end="2046:14">i</name> <operator pos:start="2046:16" pos:end="2046:16">=</operator> <literal type="number" pos:start="2046:18" pos:end="2046:18">1</literal></expr>;</init> <condition pos:start="2046:21" pos:end="2046:35"><expr pos:start="2046:21" pos:end="2046:34"><name pos:start="2046:21" pos:end="2046:21">i</name> <operator pos:start="2046:23" pos:end="2046:23">&lt;</operator> <name pos:start="2046:25" pos:end="2046:34">iterations</name></expr>;</condition> <incr pos:start="2046:37" pos:end="2046:39"><expr pos:start="2046:37" pos:end="2046:39"><name pos:start="2046:37" pos:end="2046:37">i</name><operator pos:start="2046:38" pos:end="2046:39">++</operator></expr></incr>)</control>
        <block pos:start="2047:9" pos:end="2057:9">{<block_content pos:start="2049:13" pos:end="2056:13">
            <comment type="block" pos:start="2048:13" pos:end="2048:35">/* Un = PRF(P, Un-1) */</comment>
            <expr_stmt pos:start="2049:13" pos:end="2049:75"><expr pos:start="2049:13" pos:end="2049:74"><call pos:start="2049:13" pos:end="2049:74"><name pos:start="2049:13" pos:end="2049:21">sha1_hmac</name><argument_list pos:start="2049:22" pos:end="2049:74">(<argument pos:start="2049:23" pos:end="2049:29"><expr pos:start="2049:23" pos:end="2049:29"><name pos:start="2049:23" pos:end="2049:29">ppBytes</name></expr></argument>, <argument pos:start="2049:32" pos:end="2049:39"><expr pos:start="2049:32" pos:end="2049:39"><name pos:start="2049:32" pos:end="2049:39">ppLength</name></expr></argument>, <argument pos:start="2049:42" pos:end="2049:48"><expr pos:start="2049:42" pos:end="2049:48"><name pos:start="2049:42" pos:end="2049:48">digest1</name></expr></argument>, <argument pos:start="2049:51" pos:end="2049:65"><expr pos:start="2049:51" pos:end="2049:65"><name pos:start="2049:51" pos:end="2049:65">SHA1_DIGEST_LEN</name></expr></argument>, <argument pos:start="2049:68" pos:end="2049:73"><expr pos:start="2049:68" pos:end="2049:73"><name pos:start="2049:68" pos:end="2049:73">digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2051:13" pos:end="2051:53"><expr pos:start="2051:13" pos:end="2051:52"><call pos:start="2051:13" pos:end="2051:52"><name pos:start="2051:13" pos:end="2051:18">memcpy</name><argument_list pos:start="2051:19" pos:end="2051:52">(<argument pos:start="2051:20" pos:end="2051:26"><expr pos:start="2051:20" pos:end="2051:26"><name pos:start="2051:20" pos:end="2051:26">digest1</name></expr></argument>, <argument pos:start="2051:29" pos:end="2051:34"><expr pos:start="2051:29" pos:end="2051:34"><name pos:start="2051:29" pos:end="2051:34">digest</name></expr></argument>, <argument pos:start="2051:37" pos:end="2051:51"><expr pos:start="2051:37" pos:end="2051:51"><name pos:start="2051:37" pos:end="2051:51">SHA1_DIGEST_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="2052:13" pos:end="2052:40">/* output = output xor Un */</comment>
            <for pos:start="2053:13" pos:end="2056:13">for <control pos:start="2053:17" pos:end="2053:49">(<init pos:start="2053:18" pos:end="2053:23"><expr pos:start="2053:18" pos:end="2053:22"><name pos:start="2053:18" pos:end="2053:18">j</name> <operator pos:start="2053:20" pos:end="2053:20">=</operator> <literal type="number" pos:start="2053:22" pos:end="2053:22">0</literal></expr>;</init> <condition pos:start="2053:25" pos:end="2053:44"><expr pos:start="2053:25" pos:end="2053:43"><name pos:start="2053:25" pos:end="2053:25">j</name> <operator pos:start="2053:27" pos:end="2053:27">&lt;</operator> <name pos:start="2053:29" pos:end="2053:43">SHA1_DIGEST_LEN</name></expr>;</condition> <incr pos:start="2053:46" pos:end="2053:48"><expr pos:start="2053:46" pos:end="2053:48"><name pos:start="2053:46" pos:end="2053:46">j</name><operator pos:start="2053:47" pos:end="2053:48">++</operator></expr></incr>)</control>
            <block pos:start="2054:13" pos:end="2056:13">{<block_content pos:start="2055:17" pos:end="2055:39">
                <expr_stmt pos:start="2055:17" pos:end="2055:39"><expr pos:start="2055:17" pos:end="2055:38"><name pos:start="2055:17" pos:end="2055:25"><name pos:start="2055:17" pos:end="2055:22">output</name><index pos:start="2055:23" pos:end="2055:25">[<expr pos:start="2055:24" pos:end="2055:24"><name pos:start="2055:24" pos:end="2055:24">j</name></expr>]</index></name> <operator pos:start="2055:27" pos:end="2055:28">^=</operator> <name pos:start="2055:30" pos:end="2055:38"><name pos:start="2055:30" pos:end="2055:35">digest</name><index pos:start="2055:36" pos:end="2055:38">[<expr pos:start="2055:37" pos:end="2055:37"><name pos:start="2055:37" pos:end="2055:37">j</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>

        <return pos:start="2059:9" pos:end="2059:36">return <expr pos:start="2059:16" pos:end="2059:35"><name pos:start="2059:16" pos:end="2059:35">AIRPDCAP_RET_SUCCESS</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="2062:5" pos:end="2087:5"><type pos:start="2062:5" pos:end="2062:14"><specifier pos:start="2062:5" pos:end="2062:10">static</specifier> <name pos:start="2062:12" pos:end="2062:14">INT</name></type>
    <name pos:start="2063:5" pos:end="2063:23">AirPDcapRsnaPwd2Psk</name><parameter_list pos:start="2063:24" pos:end="2067:22">(
        <parameter pos:start="2064:9" pos:end="2064:30"><decl pos:start="2064:9" pos:end="2064:30"><type pos:start="2064:9" pos:end="2064:30"><specifier pos:start="2064:9" pos:end="2064:13">const</specifier> <name pos:start="2064:15" pos:end="2064:18">CHAR</name> <modifier pos:start="2064:20" pos:end="2064:20">*</modifier></type><name pos:start="2064:21" pos:end="2064:30">passphrase</name></decl></parameter>,
        <parameter pos:start="2065:9" pos:end="2065:24"><decl pos:start="2065:9" pos:end="2065:24"><type pos:start="2065:9" pos:end="2065:24"><specifier pos:start="2065:9" pos:end="2065:13">const</specifier> <name pos:start="2065:15" pos:end="2065:18">CHAR</name> <modifier pos:start="2065:20" pos:end="2065:20">*</modifier></type><name pos:start="2065:21" pos:end="2065:24">ssid</name></decl></parameter>,
        <parameter pos:start="2066:9" pos:end="2066:31"><decl pos:start="2066:9" pos:end="2066:31"><type pos:start="2066:9" pos:end="2066:31"><specifier pos:start="2066:9" pos:end="2066:13">const</specifier> <name pos:start="2066:15" pos:end="2066:20">size_t</name></type> <name pos:start="2066:22" pos:end="2066:31">ssidLength</name></decl></parameter>,
        <parameter pos:start="2067:9" pos:end="2067:21"><decl pos:start="2067:9" pos:end="2067:21"><type pos:start="2067:9" pos:end="2067:21"><name pos:start="2067:9" pos:end="2067:13">UCHAR</name> <modifier pos:start="2067:15" pos:end="2067:15">*</modifier></type><name pos:start="2067:16" pos:end="2067:21">output</name></decl></parameter>)</parameter_list>
    <block pos:start="2068:5" pos:end="2087:5">{<block_content pos:start="2069:9" pos:end="2086:17">
        <decl_stmt pos:start="2069:9" pos:end="2069:44"><decl pos:start="2069:9" pos:end="2069:43"><type pos:start="2069:9" pos:end="2069:13"><name pos:start="2069:9" pos:end="2069:13">UCHAR</name></type> <name pos:start="2069:15" pos:end="2069:43"><name pos:start="2069:15" pos:end="2069:22">m_output</name><index pos:start="2069:23" pos:end="2069:43">[<expr pos:start="2069:24" pos:end="2069:42"><literal type="number" pos:start="2069:24" pos:end="2069:24">2</literal> <operator pos:start="2069:26" pos:end="2069:26">*</operator> <name pos:start="2069:28" pos:end="2069:42">SHA1_DIGEST_LEN</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="2070:9" pos:end="2070:47"><decl pos:start="2070:9" pos:end="2070:46"><type pos:start="2070:9" pos:end="2070:20"><name pos:start="2070:9" pos:end="2070:18">GByteArray</name> <modifier pos:start="2070:20" pos:end="2070:20">*</modifier></type><name pos:start="2070:21" pos:end="2070:25">pp_ba</name> <init pos:start="2070:27" pos:end="2070:46">= <expr pos:start="2070:29" pos:end="2070:46"><call pos:start="2070:29" pos:end="2070:46"><name pos:start="2070:29" pos:end="2070:44">g_byte_array_new</name><argument_list pos:start="2070:45" pos:end="2070:46">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="2072:9" pos:end="2072:49"><expr pos:start="2072:9" pos:end="2072:48"><call pos:start="2072:9" pos:end="2072:48"><name pos:start="2072:9" pos:end="2072:14">memset</name><argument_list pos:start="2072:15" pos:end="2072:48">(<argument pos:start="2072:16" pos:end="2072:23"><expr pos:start="2072:16" pos:end="2072:23"><name pos:start="2072:16" pos:end="2072:23">m_output</name></expr></argument>, <argument pos:start="2072:26" pos:end="2072:26"><expr pos:start="2072:26" pos:end="2072:26"><literal type="number" pos:start="2072:26" pos:end="2072:26">0</literal></expr></argument>, <argument pos:start="2072:29" pos:end="2072:47"><expr pos:start="2072:29" pos:end="2072:47"><literal type="number" pos:start="2072:29" pos:end="2072:29">2</literal> <operator pos:start="2072:31" pos:end="2072:31">*</operator> <name pos:start="2072:33" pos:end="2072:47">SHA1_DIGEST_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2074:9" pos:end="2078:9"><if pos:start="2074:9" pos:end="2078:9">if <condition pos:start="2074:12" pos:end="2074:49">(<expr pos:start="2074:13" pos:end="2074:48"><operator pos:start="2074:13" pos:end="2074:13">!</operator><call pos:start="2074:14" pos:end="2074:48"><name pos:start="2074:14" pos:end="2074:29">uri_str_to_bytes</name><argument_list pos:start="2074:30" pos:end="2074:48">(<argument pos:start="2074:31" pos:end="2074:40"><expr pos:start="2074:31" pos:end="2074:40"><name pos:start="2074:31" pos:end="2074:40">passphrase</name></expr></argument>, <argument pos:start="2074:43" pos:end="2074:47"><expr pos:start="2074:43" pos:end="2074:47"><name pos:start="2074:43" pos:end="2074:47">pp_ba</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block pos:start="2075:9" pos:end="2078:9">{<block_content pos:start="2076:13" pos:end="2077:21">
            <expr_stmt pos:start="2076:13" pos:end="2076:43"><expr pos:start="2076:13" pos:end="2076:42"><call pos:start="2076:13" pos:end="2076:42"><name pos:start="2076:13" pos:end="2076:29">g_byte_array_free</name><argument_list pos:start="2076:30" pos:end="2076:42">(<argument pos:start="2076:31" pos:end="2076:35"><expr pos:start="2076:31" pos:end="2076:35"><name pos:start="2076:31" pos:end="2076:35">pp_ba</name></expr></argument>, <argument pos:start="2076:38" pos:end="2076:41"><expr pos:start="2076:38" pos:end="2076:41"><name pos:start="2076:38" pos:end="2076:41">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2077:13" pos:end="2077:21">return <expr pos:start="2077:20" pos:end="2077:20"><literal type="number" pos:start="2077:20" pos:end="2077:20">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2080:9" pos:end="2080:94"><expr pos:start="2080:9" pos:end="2080:93"><call pos:start="2080:9" pos:end="2080:93"><name pos:start="2080:9" pos:end="2080:31">AirPDcapRsnaPwd2PskStep</name><argument_list pos:start="2080:32" pos:end="2080:93">(<argument pos:start="2080:33" pos:end="2080:43"><expr pos:start="2080:33" pos:end="2080:43"><name pos:start="2080:33" pos:end="2080:43"><name pos:start="2080:33" pos:end="2080:37">pp_ba</name><operator pos:start="2080:38" pos:end="2080:39">-&gt;</operator><name pos:start="2080:40" pos:end="2080:43">data</name></name></expr></argument>, <argument pos:start="2080:46" pos:end="2080:55"><expr pos:start="2080:46" pos:end="2080:55"><name pos:start="2080:46" pos:end="2080:55"><name pos:start="2080:46" pos:end="2080:50">pp_ba</name><operator pos:start="2080:51" pos:end="2080:52">-&gt;</operator><name pos:start="2080:53" pos:end="2080:55">len</name></name></expr></argument>, <argument pos:start="2080:58" pos:end="2080:61"><expr pos:start="2080:58" pos:end="2080:61"><name pos:start="2080:58" pos:end="2080:61">ssid</name></expr></argument>, <argument pos:start="2080:64" pos:end="2080:73"><expr pos:start="2080:64" pos:end="2080:73"><name pos:start="2080:64" pos:end="2080:73">ssidLength</name></expr></argument>, <argument pos:start="2080:76" pos:end="2080:79"><expr pos:start="2080:76" pos:end="2080:79"><literal type="number" pos:start="2080:76" pos:end="2080:79">4096</literal></expr></argument>, <argument pos:start="2080:82" pos:end="2080:82"><expr pos:start="2080:82" pos:end="2080:82"><literal type="number" pos:start="2080:82" pos:end="2080:82">1</literal></expr></argument>, <argument pos:start="2080:85" pos:end="2080:92"><expr pos:start="2080:85" pos:end="2080:92"><name pos:start="2080:85" pos:end="2080:92">m_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2081:9" pos:end="2081:112"><expr pos:start="2081:9" pos:end="2081:111"><call pos:start="2081:9" pos:end="2081:111"><name pos:start="2081:9" pos:end="2081:31">AirPDcapRsnaPwd2PskStep</name><argument_list pos:start="2081:32" pos:end="2081:111">(<argument pos:start="2081:33" pos:end="2081:43"><expr pos:start="2081:33" pos:end="2081:43"><name pos:start="2081:33" pos:end="2081:43"><name pos:start="2081:33" pos:end="2081:37">pp_ba</name><operator pos:start="2081:38" pos:end="2081:39">-&gt;</operator><name pos:start="2081:40" pos:end="2081:43">data</name></name></expr></argument>, <argument pos:start="2081:46" pos:end="2081:55"><expr pos:start="2081:46" pos:end="2081:55"><name pos:start="2081:46" pos:end="2081:55"><name pos:start="2081:46" pos:end="2081:50">pp_ba</name><operator pos:start="2081:51" pos:end="2081:52">-&gt;</operator><name pos:start="2081:53" pos:end="2081:55">len</name></name></expr></argument>, <argument pos:start="2081:58" pos:end="2081:61"><expr pos:start="2081:58" pos:end="2081:61"><name pos:start="2081:58" pos:end="2081:61">ssid</name></expr></argument>, <argument pos:start="2081:64" pos:end="2081:73"><expr pos:start="2081:64" pos:end="2081:73"><name pos:start="2081:64" pos:end="2081:73">ssidLength</name></expr></argument>, <argument pos:start="2081:76" pos:end="2081:79"><expr pos:start="2081:76" pos:end="2081:79"><literal type="number" pos:start="2081:76" pos:end="2081:79">4096</literal></expr></argument>, <argument pos:start="2081:82" pos:end="2081:82"><expr pos:start="2081:82" pos:end="2081:82"><literal type="number" pos:start="2081:82" pos:end="2081:82">2</literal></expr></argument>, <argument pos:start="2081:85" pos:end="2081:110"><expr pos:start="2081:85" pos:end="2081:110"><operator pos:start="2081:85" pos:end="2081:85">&amp;</operator><name pos:start="2081:86" pos:end="2081:110"><name pos:start="2081:86" pos:end="2081:93">m_output</name><index pos:start="2081:94" pos:end="2081:110">[<expr pos:start="2081:95" pos:end="2081:109"><name pos:start="2081:95" pos:end="2081:109">SHA1_DIGEST_LEN</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2083:9" pos:end="2083:55"><expr pos:start="2083:9" pos:end="2083:54"><call pos:start="2083:9" pos:end="2083:54"><name pos:start="2083:9" pos:end="2083:14">memcpy</name><argument_list pos:start="2083:15" pos:end="2083:54">(<argument pos:start="2083:16" pos:end="2083:21"><expr pos:start="2083:16" pos:end="2083:21"><name pos:start="2083:16" pos:end="2083:21">output</name></expr></argument>, <argument pos:start="2083:24" pos:end="2083:31"><expr pos:start="2083:24" pos:end="2083:31"><name pos:start="2083:24" pos:end="2083:31">m_output</name></expr></argument>, <argument pos:start="2083:34" pos:end="2083:53"><expr pos:start="2083:34" pos:end="2083:53"><name pos:start="2083:34" pos:end="2083:53">AIRPDCAP_WPA_PSK_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2084:9" pos:end="2084:39"><expr pos:start="2084:9" pos:end="2084:38"><call pos:start="2084:9" pos:end="2084:38"><name pos:start="2084:9" pos:end="2084:25">g_byte_array_free</name><argument_list pos:start="2084:26" pos:end="2084:38">(<argument pos:start="2084:27" pos:end="2084:31"><expr pos:start="2084:27" pos:end="2084:31"><name pos:start="2084:27" pos:end="2084:31">pp_ba</name></expr></argument>, <argument pos:start="2084:34" pos:end="2084:37"><expr pos:start="2084:34" pos:end="2084:37"><name pos:start="2084:34" pos:end="2084:37">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="2086:9" pos:end="2086:17">return <expr pos:start="2086:16" pos:end="2086:16"><literal type="number" pos:start="2086:16" pos:end="2086:16">0</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" pos:start="2089:5" pos:end="2092:7">/*
     * Returns the decryption_key_t struct given a string describing the key.
     * Returns NULL if the input_string cannot be parsed.
     */</comment>
    <function pos:start="2093:5" pos:end="2271:5"><type pos:start="2093:5" pos:end="2093:22"><name pos:start="2093:5" pos:end="2093:20">decryption_key_t</name> <modifier pos:start="2093:22" pos:end="2093:22">*</modifier></type>
    <name pos:start="2094:5" pos:end="2094:20">parse_key_string</name><parameter_list pos:start="2094:21" pos:end="2094:58">(<parameter pos:start="2094:22" pos:end="2094:40"><decl pos:start="2094:22" pos:end="2094:40"><type pos:start="2094:22" pos:end="2094:40"><name pos:start="2094:22" pos:end="2094:26">gchar</name> <modifier pos:start="2094:28" pos:end="2094:28">*</modifier></type><name pos:start="2094:29" pos:end="2094:40">input_string</name></decl></parameter>, <parameter pos:start="2094:43" pos:end="2094:57"><decl pos:start="2094:43" pos:end="2094:57"><type pos:start="2094:43" pos:end="2094:57"><name pos:start="2094:43" pos:end="2094:48">guint8</name></type> <name pos:start="2094:50" pos:end="2094:57">key_type</name></decl></parameter>)</parameter_list>
    <block pos:start="2095:5" pos:end="2271:5">{<block_content pos:start="2096:9" pos:end="2270:20">
        <decl_stmt pos:start="2096:9" pos:end="2096:29"><decl pos:start="2096:9" pos:end="2096:18"><type pos:start="2096:9" pos:end="2096:15"><name pos:start="2096:9" pos:end="2096:13">gchar</name> <modifier pos:start="2096:15" pos:end="2096:15">*</modifier></type><name pos:start="2096:16" pos:end="2096:18">key</name></decl>, <decl pos:start="2096:21" pos:end="2096:28"><type ref="prev" pos:start="2096:9" pos:end="2096:15"><modifier pos:start="2096:21" pos:end="2096:21">*</modifier></type><name pos:start="2096:22" pos:end="2096:28">tmp_str</name></decl>;</decl_stmt>
        <decl_stmt pos:start="2097:9" pos:end="2097:20"><decl pos:start="2097:9" pos:end="2097:19"><type pos:start="2097:9" pos:end="2097:15"><name pos:start="2097:9" pos:end="2097:13">gchar</name> <modifier pos:start="2097:15" pos:end="2097:15">*</modifier></type><name pos:start="2097:16" pos:end="2097:19">ssid</name></decl>;</decl_stmt>

        <decl_stmt pos:start="2099:9" pos:end="2099:35"><decl pos:start="2099:9" pos:end="2099:34"><type pos:start="2099:9" pos:end="2099:17"><name pos:start="2099:9" pos:end="2099:15">GString</name> <modifier pos:start="2099:17" pos:end="2099:17">*</modifier></type><name pos:start="2099:18" pos:end="2099:27">key_string</name> <init pos:start="2099:29" pos:end="2099:34">= <expr pos:start="2099:31" pos:end="2099:34"><name pos:start="2099:31" pos:end="2099:34">NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="2100:9" pos:end="2100:44"><decl pos:start="2100:9" pos:end="2100:34"><type pos:start="2100:9" pos:end="2100:20"><name pos:start="2100:9" pos:end="2100:18">GByteArray</name> <modifier pos:start="2100:20" pos:end="2100:20">*</modifier></type><name pos:start="2100:21" pos:end="2100:27">ssid_ba</name> <init pos:start="2100:29" pos:end="2100:34">= <expr pos:start="2100:31" pos:end="2100:34"><name pos:start="2100:31" pos:end="2100:34">NULL</name></expr></init></decl>, <decl pos:start="2100:37" pos:end="2100:43"><type ref="prev" pos:start="2100:9" pos:end="2100:20"><modifier pos:start="2100:37" pos:end="2100:37">*</modifier></type><name pos:start="2100:38" pos:end="2100:43">key_ba</name></decl>;</decl_stmt>
        <decl_stmt pos:start="2101:9" pos:end="2101:21"><decl pos:start="2101:9" pos:end="2101:20"><type pos:start="2101:9" pos:end="2101:16"><name pos:start="2101:9" pos:end="2101:16">gboolean</name></type> <name pos:start="2101:18" pos:end="2101:20">res</name></decl>;</decl_stmt>

        <decl_stmt pos:start="2103:9" pos:end="2103:23"><decl pos:start="2103:9" pos:end="2103:22"><type pos:start="2103:9" pos:end="2103:16"><name pos:start="2103:9" pos:end="2103:13">gchar</name> <modifier pos:start="2103:15" pos:end="2103:15">*</modifier><modifier pos:start="2103:16" pos:end="2103:16">*</modifier></type><name pos:start="2103:17" pos:end="2103:22">tokens</name></decl>;</decl_stmt>
        <decl_stmt pos:start="2104:9" pos:end="2104:20"><decl pos:start="2104:9" pos:end="2104:19"><type pos:start="2104:9" pos:end="2104:13"><name pos:start="2104:9" pos:end="2104:13">guint</name></type> <name pos:start="2104:15" pos:end="2104:15">n</name> <init pos:start="2104:17" pos:end="2104:19">= <expr pos:start="2104:19" pos:end="2104:19"><literal type="number" pos:start="2104:19" pos:end="2104:19">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="2105:9" pos:end="2105:29"><decl pos:start="2105:9" pos:end="2105:28"><type pos:start="2105:9" pos:end="2105:26"><name pos:start="2105:9" pos:end="2105:24">decryption_key_t</name> <modifier pos:start="2105:26" pos:end="2105:26">*</modifier></type><name pos:start="2105:27" pos:end="2105:28">dk</name></decl>;</decl_stmt>

        <if_stmt pos:start="2107:9" pos:end="2108:24"><if pos:start="2107:9" pos:end="2108:24">if <condition pos:start="2107:12" pos:end="2107:33">(<expr pos:start="2107:13" pos:end="2107:32"><name pos:start="2107:13" pos:end="2107:24">input_string</name> <operator pos:start="2107:26" pos:end="2107:27">==</operator> <name pos:start="2107:29" pos:end="2107:32">NULL</name></expr>)</condition><block type="pseudo" pos:start="2108:13" pos:end="2108:24"><block_content pos:start="2108:13" pos:end="2108:24">
            <return pos:start="2108:13" pos:end="2108:24">return <expr pos:start="2108:20" pos:end="2108:23"><name pos:start="2108:20" pos:end="2108:23">NULL</name></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block" pos:start="2110:9" pos:end="2116:11">/*
         * Parse the input_string. WEP and WPA will be just a string
         * of hexadecimal characters (if key is wrong, null will be
         * returned...).
         * WPA-PWD should be in the form
         * &lt;key data&gt;[:&lt;ssid&gt;]
         */</comment>

        <switch pos:start="2118:9" pos:end="2267:9">switch <condition pos:start="2118:16" pos:end="2118:25">(<expr pos:start="2118:17" pos:end="2118:24"><name pos:start="2118:17" pos:end="2118:24">key_type</name></expr>)</condition>
        <block pos:start="2119:9" pos:end="2267:9">{<block_content pos:start="2120:9" pos:end="2266:22">
        <case pos:start="2120:9" pos:end="2120:35">case <expr pos:start="2120:14" pos:end="2120:34"><name pos:start="2120:14" pos:end="2120:34">AIRPDCAP_KEY_TYPE_WEP</name></expr>:</case>
        <case pos:start="2121:9" pos:end="2121:38">case <expr pos:start="2121:14" pos:end="2121:37"><name pos:start="2121:14" pos:end="2121:37">AIRPDCAP_KEY_TYPE_WEP_40</name></expr>:</case>
        <case pos:start="2122:9" pos:end="2122:39">case <expr pos:start="2122:14" pos:end="2122:38"><name pos:start="2122:14" pos:end="2122:38">AIRPDCAP_KEY_TYPE_WEP_104</name></expr>:</case>

            <expr_stmt pos:start="2124:13" pos:end="2124:40"><expr pos:start="2124:13" pos:end="2124:39"><name pos:start="2124:13" pos:end="2124:18">key_ba</name> <operator pos:start="2124:20" pos:end="2124:20">=</operator> <call pos:start="2124:22" pos:end="2124:39"><name pos:start="2124:22" pos:end="2124:37">g_byte_array_new</name><argument_list pos:start="2124:38" pos:end="2124:39">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2125:13" pos:end="2125:64"><expr pos:start="2125:13" pos:end="2125:63"><name pos:start="2125:13" pos:end="2125:15">res</name> <operator pos:start="2125:17" pos:end="2125:17">=</operator> <call pos:start="2125:19" pos:end="2125:63"><name pos:start="2125:19" pos:end="2125:34">hex_str_to_bytes</name><argument_list pos:start="2125:35" pos:end="2125:63">(<argument pos:start="2125:36" pos:end="2125:47"><expr pos:start="2125:36" pos:end="2125:47"><name pos:start="2125:36" pos:end="2125:47">input_string</name></expr></argument>, <argument pos:start="2125:50" pos:end="2125:55"><expr pos:start="2125:50" pos:end="2125:55"><name pos:start="2125:50" pos:end="2125:55">key_ba</name></expr></argument>, <argument pos:start="2125:58" pos:end="2125:62"><expr pos:start="2125:58" pos:end="2125:62"><name pos:start="2125:58" pos:end="2125:62">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2127:13" pos:end="2145:13"><if pos:start="2127:13" pos:end="2145:13">if <condition pos:start="2127:16" pos:end="2127:39">(<expr pos:start="2127:17" pos:end="2127:38"><name pos:start="2127:17" pos:end="2127:19">res</name> <operator pos:start="2127:21" pos:end="2127:22">&amp;&amp;</operator> <name pos:start="2127:24" pos:end="2127:34"><name pos:start="2127:24" pos:end="2127:29">key_ba</name><operator pos:start="2127:30" pos:end="2127:31">-&gt;</operator><name pos:start="2127:32" pos:end="2127:34">len</name></name> <operator pos:start="2127:36" pos:end="2127:36">&gt;</operator> <literal type="number" pos:start="2127:38" pos:end="2127:38">0</literal></expr>)</condition>
            <block pos:start="2128:13" pos:end="2145:13">{<block_content pos:start="2131:17" pos:end="2144:26">
                <comment type="block" pos:start="2129:17" pos:end="2129:76">/* Key is correct! It was probably an 'old style' WEP key */</comment>
                <comment type="block" pos:start="2130:17" pos:end="2130:81">/* Create the decryption_key_t structure, fill it and return it*/</comment>
                <expr_stmt pos:start="2131:17" pos:end="2131:76"><expr pos:start="2131:17" pos:end="2131:75"><name pos:start="2131:17" pos:end="2131:18">dk</name> <operator pos:start="2131:20" pos:end="2131:20">=</operator> <operator pos:start="2131:22" pos:end="2131:22">(</operator><name pos:start="2131:23" pos:end="2131:38">decryption_key_t</name> <operator pos:start="2131:40" pos:end="2131:40">*</operator><operator pos:start="2131:41" pos:end="2131:41">)</operator><call pos:start="2131:42" pos:end="2131:75"><name pos:start="2131:42" pos:end="2131:49">g_malloc</name><argument_list pos:start="2131:50" pos:end="2131:75">(<argument pos:start="2131:51" pos:end="2131:74"><expr pos:start="2131:51" pos:end="2131:74"><sizeof pos:start="2131:51" pos:end="2131:74">sizeof<argument_list pos:start="2131:57" pos:end="2131:74">(<argument pos:start="2131:58" pos:end="2131:73"><expr pos:start="2131:58" pos:end="2131:73"><name pos:start="2131:58" pos:end="2131:73">decryption_key_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2133:17" pos:end="2133:49"><expr pos:start="2133:17" pos:end="2133:48"><name pos:start="2133:17" pos:end="2133:24"><name pos:start="2133:17" pos:end="2133:18">dk</name><operator pos:start="2133:19" pos:end="2133:20">-&gt;</operator><name pos:start="2133:21" pos:end="2133:24">type</name></name> <operator pos:start="2133:26" pos:end="2133:26">=</operator> <name pos:start="2133:28" pos:end="2133:48">AIRPDCAP_KEY_TYPE_WEP</name></expr>;</expr_stmt>
                <comment type="block" pos:start="2134:17" pos:end="2135:50">/* XXX - The current key handling code in the GUI requires
                 * no separators and lower case */</comment>
                <expr_stmt pos:start="2136:17" pos:end="2136:72"><expr pos:start="2136:17" pos:end="2136:71"><name pos:start="2136:17" pos:end="2136:23">tmp_str</name> <operator pos:start="2136:25" pos:end="2136:25">=</operator> <call pos:start="2136:27" pos:end="2136:71"><name pos:start="2136:27" pos:end="2136:38">bytes_to_str</name><argument_list pos:start="2136:39" pos:end="2136:71">(<argument pos:start="2136:40" pos:end="2136:43"><expr pos:start="2136:40" pos:end="2136:43"><name pos:start="2136:40" pos:end="2136:43">NULL</name></expr></argument>, <argument pos:start="2136:46" pos:end="2136:57"><expr pos:start="2136:46" pos:end="2136:57"><name pos:start="2136:46" pos:end="2136:57"><name pos:start="2136:46" pos:end="2136:51">key_ba</name><operator pos:start="2136:52" pos:end="2136:53">-&gt;</operator><name pos:start="2136:54" pos:end="2136:57">data</name></name></expr></argument>, <argument pos:start="2136:60" pos:end="2136:70"><expr pos:start="2136:60" pos:end="2136:70"><name pos:start="2136:60" pos:end="2136:70"><name pos:start="2136:60" pos:end="2136:65">key_ba</name><operator pos:start="2136:66" pos:end="2136:67">-&gt;</operator><name pos:start="2136:68" pos:end="2136:70">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2137:17" pos:end="2137:48"><expr pos:start="2137:17" pos:end="2137:47"><name pos:start="2137:17" pos:end="2137:23"><name pos:start="2137:17" pos:end="2137:18">dk</name><operator pos:start="2137:19" pos:end="2137:20">-&gt;</operator><name pos:start="2137:21" pos:end="2137:23">key</name></name> <operator pos:start="2137:25" pos:end="2137:25">=</operator> <call pos:start="2137:27" pos:end="2137:47"><name pos:start="2137:27" pos:end="2137:38">g_string_new</name><argument_list pos:start="2137:39" pos:end="2137:47">(<argument pos:start="2137:40" pos:end="2137:46"><expr pos:start="2137:40" pos:end="2137:46"><name pos:start="2137:40" pos:end="2137:46">tmp_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2138:17" pos:end="2138:45"><expr pos:start="2138:17" pos:end="2138:44"><call pos:start="2138:17" pos:end="2138:44"><name pos:start="2138:17" pos:end="2138:35">g_string_ascii_down</name><argument_list pos:start="2138:36" pos:end="2138:44">(<argument pos:start="2138:37" pos:end="2138:43"><expr pos:start="2138:37" pos:end="2138:43"><name pos:start="2138:37" pos:end="2138:43"><name pos:start="2138:37" pos:end="2138:38">dk</name><operator pos:start="2138:39" pos:end="2138:40">-&gt;</operator><name pos:start="2138:41" pos:end="2138:43">key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2139:17" pos:end="2139:43"><expr pos:start="2139:17" pos:end="2139:42"><name pos:start="2139:17" pos:end="2139:24"><name pos:start="2139:17" pos:end="2139:18">dk</name><operator pos:start="2139:19" pos:end="2139:20">-&gt;</operator><name pos:start="2139:21" pos:end="2139:24">bits</name></name> <operator pos:start="2139:26" pos:end="2139:26">=</operator> <name pos:start="2139:28" pos:end="2139:38"><name pos:start="2139:28" pos:end="2139:33">key_ba</name><operator pos:start="2139:34" pos:end="2139:35">-&gt;</operator><name pos:start="2139:36" pos:end="2139:38">len</name></name> <operator pos:start="2139:40" pos:end="2139:40">*</operator> <literal type="number" pos:start="2139:42" pos:end="2139:42">8</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="2140:17" pos:end="2140:32"><expr pos:start="2140:17" pos:end="2140:31"><name pos:start="2140:17" pos:end="2140:24"><name pos:start="2140:17" pos:end="2140:18">dk</name><operator pos:start="2140:19" pos:end="2140:20">-&gt;</operator><name pos:start="2140:21" pos:end="2140:24">ssid</name></name> <operator pos:start="2140:26" pos:end="2140:26">=</operator> <name pos:start="2140:28" pos:end="2140:31">NULL</name></expr>;</expr_stmt>

                <expr_stmt pos:start="2142:17" pos:end="2142:41"><expr pos:start="2142:17" pos:end="2142:40"><call pos:start="2142:17" pos:end="2142:40"><name pos:start="2142:17" pos:end="2142:25">wmem_free</name><argument_list pos:start="2142:26" pos:end="2142:40">(<argument pos:start="2142:27" pos:end="2142:30"><expr pos:start="2142:27" pos:end="2142:30"><name pos:start="2142:27" pos:end="2142:30">NULL</name></expr></argument>, <argument pos:start="2142:33" pos:end="2142:39"><expr pos:start="2142:33" pos:end="2142:39"><name pos:start="2142:33" pos:end="2142:39">tmp_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2143:17" pos:end="2143:48"><expr pos:start="2143:17" pos:end="2143:47"><call pos:start="2143:17" pos:end="2143:47"><name pos:start="2143:17" pos:end="2143:33">g_byte_array_free</name><argument_list pos:start="2143:34" pos:end="2143:47">(<argument pos:start="2143:35" pos:end="2143:40"><expr pos:start="2143:35" pos:end="2143:40"><name pos:start="2143:35" pos:end="2143:40">key_ba</name></expr></argument>, <argument pos:start="2143:43" pos:end="2143:46"><expr pos:start="2143:43" pos:end="2143:46"><name pos:start="2143:43" pos:end="2143:46">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="2144:17" pos:end="2144:26">return <expr pos:start="2144:24" pos:end="2144:25"><name pos:start="2144:24" pos:end="2144:25">dk</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="2147:13" pos:end="2147:34">/* Key doesn't work */</comment>
            <expr_stmt pos:start="2148:13" pos:end="2148:44"><expr pos:start="2148:13" pos:end="2148:43"><call pos:start="2148:13" pos:end="2148:43"><name pos:start="2148:13" pos:end="2148:29">g_byte_array_free</name><argument_list pos:start="2148:30" pos:end="2148:43">(<argument pos:start="2148:31" pos:end="2148:36"><expr pos:start="2148:31" pos:end="2148:36"><name pos:start="2148:31" pos:end="2148:36">key_ba</name></expr></argument>, <argument pos:start="2148:39" pos:end="2148:42"><expr pos:start="2148:39" pos:end="2148:42"><name pos:start="2148:39" pos:end="2148:42">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2149:13" pos:end="2149:24">return <expr pos:start="2149:20" pos:end="2149:23"><name pos:start="2149:20" pos:end="2149:23">NULL</name></expr>;</return>

        <case pos:start="2151:9" pos:end="2151:39">case <expr pos:start="2151:14" pos:end="2151:38"><name pos:start="2151:14" pos:end="2151:38">AIRPDCAP_KEY_TYPE_WPA_PWD</name></expr>:</case>

            <expr_stmt pos:start="2153:13" pos:end="2153:54"><expr pos:start="2153:13" pos:end="2153:53"><name pos:start="2153:13" pos:end="2153:18">tokens</name> <operator pos:start="2153:20" pos:end="2153:20">=</operator> <call pos:start="2153:22" pos:end="2153:53"><name pos:start="2153:22" pos:end="2153:31">g_strsplit</name><argument_list pos:start="2153:32" pos:end="2153:53">(<argument pos:start="2153:33" pos:end="2153:44"><expr pos:start="2153:33" pos:end="2153:44"><name pos:start="2153:33" pos:end="2153:44">input_string</name></expr></argument>, <argument pos:start="2153:47" pos:end="2153:49"><expr pos:start="2153:47" pos:end="2153:49"><literal type="string" pos:start="2153:47" pos:end="2153:49">":"</literal></expr></argument>, <argument pos:start="2153:52" pos:end="2153:52"><expr pos:start="2153:52" pos:end="2153:52"><literal type="number" pos:start="2153:52" pos:end="2153:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="2155:13" pos:end="2155:65">/* Tokens is a null termiated array of strings ... */</comment>
            <while pos:start="2156:13" pos:end="2157:20">while <condition pos:start="2156:19" pos:end="2156:37">(<expr pos:start="2156:20" pos:end="2156:36"><name pos:start="2156:20" pos:end="2156:28"><name pos:start="2156:20" pos:end="2156:25">tokens</name><index pos:start="2156:26" pos:end="2156:28">[<expr pos:start="2156:27" pos:end="2156:27"><name pos:start="2156:27" pos:end="2156:27">n</name></expr>]</index></name> <operator pos:start="2156:30" pos:end="2156:31">!=</operator> <name pos:start="2156:33" pos:end="2156:36">NULL</name></expr>)</condition><block type="pseudo" pos:start="2157:17" pos:end="2157:20"><block_content pos:start="2157:17" pos:end="2157:20">
                <expr_stmt pos:start="2157:17" pos:end="2157:20"><expr pos:start="2157:17" pos:end="2157:19"><name pos:start="2157:17" pos:end="2157:17">n</name><operator pos:start="2157:18" pos:end="2157:19">++</operator></expr>;</expr_stmt></block_content></block></while>

            <if_stmt pos:start="2159:13" pos:end="2164:13"><if pos:start="2159:13" pos:end="2164:13">if <condition pos:start="2159:16" pos:end="2159:22">(<expr pos:start="2159:17" pos:end="2159:21"><name pos:start="2159:17" pos:end="2159:17">n</name> <operator pos:start="2159:19" pos:end="2159:19">&lt;</operator> <literal type="number" pos:start="2159:21" pos:end="2159:21">1</literal></expr>)</condition>
            <block pos:start="2160:13" pos:end="2164:13">{<block_content pos:start="2162:17" pos:end="2163:28">
                <comment type="block" pos:start="2161:17" pos:end="2161:47">/* Free the array of strings */</comment>
                <expr_stmt pos:start="2162:17" pos:end="2162:35"><expr pos:start="2162:17" pos:end="2162:34"><call pos:start="2162:17" pos:end="2162:34"><name pos:start="2162:17" pos:end="2162:26">g_strfreev</name><argument_list pos:start="2162:27" pos:end="2162:34">(<argument pos:start="2162:28" pos:end="2162:33"><expr pos:start="2162:28" pos:end="2162:33"><name pos:start="2162:28" pos:end="2162:33">tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="2163:17" pos:end="2163:28">return <expr pos:start="2163:24" pos:end="2163:27"><name pos:start="2163:24" pos:end="2163:27">NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="2166:13" pos:end="2168:15">/*
             * The first token is the key
             */</comment>
            <expr_stmt pos:start="2169:13" pos:end="2169:38"><expr pos:start="2169:13" pos:end="2169:37"><name pos:start="2169:13" pos:end="2169:15">key</name> <operator pos:start="2169:17" pos:end="2169:17">=</operator> <call pos:start="2169:19" pos:end="2169:37"><name pos:start="2169:19" pos:end="2169:26">g_strdup</name><argument_list pos:start="2169:27" pos:end="2169:37">(<argument pos:start="2169:28" pos:end="2169:36"><expr pos:start="2169:28" pos:end="2169:36"><name pos:start="2169:28" pos:end="2169:36"><name pos:start="2169:28" pos:end="2169:33">tokens</name><index pos:start="2169:34" pos:end="2169:36">[<expr pos:start="2169:35" pos:end="2169:35"><literal type="number" pos:start="2169:35" pos:end="2169:35">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2171:13" pos:end="2171:24"><expr pos:start="2171:13" pos:end="2171:23"><name pos:start="2171:13" pos:end="2171:16">ssid</name> <operator pos:start="2171:18" pos:end="2171:18">=</operator> <name pos:start="2171:20" pos:end="2171:23">NULL</name></expr>;</expr_stmt>
            <comment type="block" pos:start="2172:13" pos:end="2172:83">/* Maybe there is a second token (an ssid, if everything else is ok) */</comment>
            <if_stmt pos:start="2173:13" pos:end="2176:13"><if pos:start="2173:13" pos:end="2176:13">if <condition pos:start="2173:16" pos:end="2173:23">(<expr pos:start="2173:17" pos:end="2173:22"><name pos:start="2173:17" pos:end="2173:17">n</name> <operator pos:start="2173:19" pos:end="2173:20">&gt;=</operator> <literal type="number" pos:start="2173:22" pos:end="2173:22">2</literal></expr>)</condition>
            <block pos:start="2174:13" pos:end="2176:13">{<block_content pos:start="2175:17" pos:end="2175:43">
                <expr_stmt pos:start="2175:17" pos:end="2175:43"><expr pos:start="2175:17" pos:end="2175:42"><name pos:start="2175:17" pos:end="2175:20">ssid</name> <operator pos:start="2175:22" pos:end="2175:22">=</operator> <call pos:start="2175:24" pos:end="2175:42"><name pos:start="2175:24" pos:end="2175:31">g_strdup</name><argument_list pos:start="2175:32" pos:end="2175:42">(<argument pos:start="2175:33" pos:end="2175:41"><expr pos:start="2175:33" pos:end="2175:41"><name pos:start="2175:33" pos:end="2175:41"><name pos:start="2175:33" pos:end="2175:38">tokens</name><index pos:start="2175:39" pos:end="2175:41">[<expr pos:start="2175:40" pos:end="2175:40"><literal type="number" pos:start="2175:40" pos:end="2175:40">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="2178:13" pos:end="2178:37">/* Create a new string */</comment>
            <expr_stmt pos:start="2179:13" pos:end="2179:43"><expr pos:start="2179:13" pos:end="2179:42"><name pos:start="2179:13" pos:end="2179:22">key_string</name> <operator pos:start="2179:24" pos:end="2179:24">=</operator> <call pos:start="2179:26" pos:end="2179:42"><name pos:start="2179:26" pos:end="2179:37">g_string_new</name><argument_list pos:start="2179:38" pos:end="2179:42">(<argument pos:start="2179:39" pos:end="2179:41"><expr pos:start="2179:39" pos:end="2179:41"><name pos:start="2179:39" pos:end="2179:41">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2180:13" pos:end="2180:27"><expr pos:start="2180:13" pos:end="2180:26"><name pos:start="2180:13" pos:end="2180:19">ssid_ba</name> <operator pos:start="2180:21" pos:end="2180:21">=</operator> <name pos:start="2180:23" pos:end="2180:26">NULL</name></expr>;</expr_stmt>

            <comment type="block" pos:start="2182:13" pos:end="2182:83">/* Two (or more) tokens mean that the user entered a WPA-PWD key ... */</comment>
            <if_stmt pos:start="2183:13" pos:end="2193:13"><if pos:start="2183:13" pos:end="2193:13">if <condition pos:start="2183:16" pos:end="2183:107">(<expr pos:start="2183:17" pos:end="2183:106"><operator pos:start="2183:17" pos:end="2183:17">(</operator><operator pos:start="2183:18" pos:end="2183:18">(</operator><name pos:start="2183:19" pos:end="2183:33"><name pos:start="2183:19" pos:end="2183:28">key_string</name><operator pos:start="2183:29" pos:end="2183:30">-&gt;</operator><name pos:start="2183:31" pos:end="2183:33">len</name></name><operator pos:start="2183:34" pos:end="2183:34">)</operator> <operator pos:start="2183:36" pos:end="2183:36">&gt;</operator> <name pos:start="2183:38" pos:end="2183:58">WPA_KEY_MAX_CHAR_SIZE</name><operator pos:start="2183:59" pos:end="2183:59">)</operator> <operator pos:start="2183:61" pos:end="2183:62">||</operator> <operator pos:start="2183:64" pos:end="2183:64">(</operator><operator pos:start="2183:65" pos:end="2183:65">(</operator><name pos:start="2183:66" pos:end="2183:80"><name pos:start="2183:66" pos:end="2183:75">key_string</name><operator pos:start="2183:76" pos:end="2183:77">-&gt;</operator><name pos:start="2183:78" pos:end="2183:80">len</name></name><operator pos:start="2183:81" pos:end="2183:81">)</operator> <operator pos:start="2183:83" pos:end="2183:83">&lt;</operator> <name pos:start="2183:85" pos:end="2183:105">WPA_KEY_MIN_CHAR_SIZE</name><operator pos:start="2183:106" pos:end="2183:106">)</operator></expr>)</condition>
            <block pos:start="2184:13" pos:end="2193:13">{<block_content pos:start="2185:17" pos:end="2192:28">
                <expr_stmt pos:start="2185:17" pos:end="2185:48"><expr pos:start="2185:17" pos:end="2185:47"><call pos:start="2185:17" pos:end="2185:47"><name pos:start="2185:17" pos:end="2185:29">g_string_free</name><argument_list pos:start="2185:30" pos:end="2185:47">(<argument pos:start="2185:31" pos:end="2185:40"><expr pos:start="2185:31" pos:end="2185:40"><name pos:start="2185:31" pos:end="2185:40">key_string</name></expr></argument>, <argument pos:start="2185:43" pos:end="2185:46"><expr pos:start="2185:43" pos:end="2185:46"><name pos:start="2185:43" pos:end="2185:46">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2187:17" pos:end="2187:28"><expr pos:start="2187:17" pos:end="2187:27"><call pos:start="2187:17" pos:end="2187:27"><name pos:start="2187:17" pos:end="2187:22">g_free</name><argument_list pos:start="2187:23" pos:end="2187:27">(<argument pos:start="2187:24" pos:end="2187:26"><expr pos:start="2187:24" pos:end="2187:26"><name pos:start="2187:24" pos:end="2187:26">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2188:17" pos:end="2188:29"><expr pos:start="2188:17" pos:end="2188:28"><call pos:start="2188:17" pos:end="2188:28"><name pos:start="2188:17" pos:end="2188:22">g_free</name><argument_list pos:start="2188:23" pos:end="2188:28">(<argument pos:start="2188:24" pos:end="2188:27"><expr pos:start="2188:24" pos:end="2188:27"><name pos:start="2188:24" pos:end="2188:27">ssid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="2190:17" pos:end="2190:47">/* Free the array of strings */</comment>
                <expr_stmt pos:start="2191:17" pos:end="2191:35"><expr pos:start="2191:17" pos:end="2191:34"><call pos:start="2191:17" pos:end="2191:34"><name pos:start="2191:17" pos:end="2191:26">g_strfreev</name><argument_list pos:start="2191:27" pos:end="2191:34">(<argument pos:start="2191:28" pos:end="2191:33"><expr pos:start="2191:28" pos:end="2191:33"><name pos:start="2191:28" pos:end="2191:33">tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="2192:17" pos:end="2192:28">return <expr pos:start="2192:24" pos:end="2192:27"><name pos:start="2192:24" pos:end="2192:27">NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="2195:13" pos:end="2221:13"><if pos:start="2195:13" pos:end="2221:13">if <condition pos:start="2195:16" pos:end="2195:29">(<expr pos:start="2195:17" pos:end="2195:28"><name pos:start="2195:17" pos:end="2195:20">ssid</name> <operator pos:start="2195:22" pos:end="2195:23">!=</operator> <name pos:start="2195:25" pos:end="2195:28">NULL</name></expr>)</condition> <comment type="block" pos:start="2195:31" pos:end="2195:102">/* more than two tokens found, means that the user specified the ssid */</comment>
            <block pos:start="2196:13" pos:end="2221:13">{<block_content pos:start="2197:17" pos:end="2220:17">
                <expr_stmt pos:start="2197:17" pos:end="2197:45"><expr pos:start="2197:17" pos:end="2197:44"><name pos:start="2197:17" pos:end="2197:23">ssid_ba</name> <operator pos:start="2197:25" pos:end="2197:25">=</operator> <call pos:start="2197:27" pos:end="2197:44"><name pos:start="2197:27" pos:end="2197:42">g_byte_array_new</name><argument_list pos:start="2197:43" pos:end="2197:44">()</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="2198:17" pos:end="2207:17"><if pos:start="2198:17" pos:end="2207:17">if <condition pos:start="2198:20" pos:end="2198:53">(<expr pos:start="2198:21" pos:end="2198:52"><operator pos:start="2198:21" pos:end="2198:21">!</operator><call pos:start="2198:22" pos:end="2198:52"><name pos:start="2198:22" pos:end="2198:37">uri_str_to_bytes</name><argument_list pos:start="2198:38" pos:end="2198:52">(<argument pos:start="2198:39" pos:end="2198:42"><expr pos:start="2198:39" pos:end="2198:42"><name pos:start="2198:39" pos:end="2198:42">ssid</name></expr></argument>, <argument pos:start="2198:45" pos:end="2198:51"><expr pos:start="2198:45" pos:end="2198:51"><name pos:start="2198:45" pos:end="2198:51">ssid_ba</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block pos:start="2199:17" pos:end="2207:17">{<block_content pos:start="2200:21" pos:end="2206:32">
                    <expr_stmt pos:start="2200:21" pos:end="2200:52"><expr pos:start="2200:21" pos:end="2200:51"><call pos:start="2200:21" pos:end="2200:51"><name pos:start="2200:21" pos:end="2200:33">g_string_free</name><argument_list pos:start="2200:34" pos:end="2200:51">(<argument pos:start="2200:35" pos:end="2200:44"><expr pos:start="2200:35" pos:end="2200:44"><name pos:start="2200:35" pos:end="2200:44">key_string</name></expr></argument>, <argument pos:start="2200:47" pos:end="2200:50"><expr pos:start="2200:47" pos:end="2200:50"><name pos:start="2200:47" pos:end="2200:50">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2201:21" pos:end="2201:53"><expr pos:start="2201:21" pos:end="2201:52"><call pos:start="2201:21" pos:end="2201:52"><name pos:start="2201:21" pos:end="2201:37">g_byte_array_free</name><argument_list pos:start="2201:38" pos:end="2201:52">(<argument pos:start="2201:39" pos:end="2201:45"><expr pos:start="2201:39" pos:end="2201:45"><name pos:start="2201:39" pos:end="2201:45">ssid_ba</name></expr></argument>, <argument pos:start="2201:48" pos:end="2201:51"><expr pos:start="2201:48" pos:end="2201:51"><name pos:start="2201:48" pos:end="2201:51">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2202:21" pos:end="2202:32"><expr pos:start="2202:21" pos:end="2202:31"><call pos:start="2202:21" pos:end="2202:31"><name pos:start="2202:21" pos:end="2202:26">g_free</name><argument_list pos:start="2202:27" pos:end="2202:31">(<argument pos:start="2202:28" pos:end="2202:30"><expr pos:start="2202:28" pos:end="2202:30"><name pos:start="2202:28" pos:end="2202:30">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2203:21" pos:end="2203:33"><expr pos:start="2203:21" pos:end="2203:32"><call pos:start="2203:21" pos:end="2203:32"><name pos:start="2203:21" pos:end="2203:26">g_free</name><argument_list pos:start="2203:27" pos:end="2203:32">(<argument pos:start="2203:28" pos:end="2203:31"><expr pos:start="2203:28" pos:end="2203:31"><name pos:start="2203:28" pos:end="2203:31">ssid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="block" pos:start="2204:21" pos:end="2204:51">/* Free the array of strings */</comment>
                    <expr_stmt pos:start="2205:21" pos:end="2205:39"><expr pos:start="2205:21" pos:end="2205:38"><call pos:start="2205:21" pos:end="2205:38"><name pos:start="2205:21" pos:end="2205:30">g_strfreev</name><argument_list pos:start="2205:31" pos:end="2205:38">(<argument pos:start="2205:32" pos:end="2205:37"><expr pos:start="2205:32" pos:end="2205:37"><name pos:start="2205:32" pos:end="2205:37">tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:start="2206:21" pos:end="2206:32">return <expr pos:start="2206:28" pos:end="2206:31"><name pos:start="2206:28" pos:end="2206:31">NULL</name></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="2209:17" pos:end="2220:17"><if pos:start="2209:17" pos:end="2220:17">if <condition pos:start="2209:20" pos:end="2209:58">(<expr pos:start="2209:21" pos:end="2209:57"><name pos:start="2209:21" pos:end="2209:32"><name pos:start="2209:21" pos:end="2209:27">ssid_ba</name><operator pos:start="2209:28" pos:end="2209:29">-&gt;</operator><name pos:start="2209:30" pos:end="2209:32">len</name></name> <operator pos:start="2209:34" pos:end="2209:34">&gt;</operator> <name pos:start="2209:36" pos:end="2209:57">WPA_SSID_MAX_CHAR_SIZE</name></expr>)</condition>
                <block pos:start="2210:17" pos:end="2220:17">{<block_content pos:start="2211:21" pos:end="2219:32">
                    <expr_stmt pos:start="2211:21" pos:end="2211:52"><expr pos:start="2211:21" pos:end="2211:51"><call pos:start="2211:21" pos:end="2211:51"><name pos:start="2211:21" pos:end="2211:33">g_string_free</name><argument_list pos:start="2211:34" pos:end="2211:51">(<argument pos:start="2211:35" pos:end="2211:44"><expr pos:start="2211:35" pos:end="2211:44"><name pos:start="2211:35" pos:end="2211:44">key_string</name></expr></argument>, <argument pos:start="2211:47" pos:end="2211:50"><expr pos:start="2211:47" pos:end="2211:50"><name pos:start="2211:47" pos:end="2211:50">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2212:21" pos:end="2212:53"><expr pos:start="2212:21" pos:end="2212:52"><call pos:start="2212:21" pos:end="2212:52"><name pos:start="2212:21" pos:end="2212:37">g_byte_array_free</name><argument_list pos:start="2212:38" pos:end="2212:52">(<argument pos:start="2212:39" pos:end="2212:45"><expr pos:start="2212:39" pos:end="2212:45"><name pos:start="2212:39" pos:end="2212:45">ssid_ba</name></expr></argument>, <argument pos:start="2212:48" pos:end="2212:51"><expr pos:start="2212:48" pos:end="2212:51"><name pos:start="2212:48" pos:end="2212:51">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2214:21" pos:end="2214:32"><expr pos:start="2214:21" pos:end="2214:31"><call pos:start="2214:21" pos:end="2214:31"><name pos:start="2214:21" pos:end="2214:26">g_free</name><argument_list pos:start="2214:27" pos:end="2214:31">(<argument pos:start="2214:28" pos:end="2214:30"><expr pos:start="2214:28" pos:end="2214:30"><name pos:start="2214:28" pos:end="2214:30">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2215:21" pos:end="2215:33"><expr pos:start="2215:21" pos:end="2215:32"><call pos:start="2215:21" pos:end="2215:32"><name pos:start="2215:21" pos:end="2215:26">g_free</name><argument_list pos:start="2215:27" pos:end="2215:32">(<argument pos:start="2215:28" pos:end="2215:31"><expr pos:start="2215:28" pos:end="2215:31"><name pos:start="2215:28" pos:end="2215:31">ssid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="2217:21" pos:end="2217:51">/* Free the array of strings */</comment>
                    <expr_stmt pos:start="2218:21" pos:end="2218:39"><expr pos:start="2218:21" pos:end="2218:38"><call pos:start="2218:21" pos:end="2218:38"><name pos:start="2218:21" pos:end="2218:30">g_strfreev</name><argument_list pos:start="2218:31" pos:end="2218:38">(<argument pos:start="2218:32" pos:end="2218:37"><expr pos:start="2218:32" pos:end="2218:37"><name pos:start="2218:32" pos:end="2218:37">tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:start="2219:21" pos:end="2219:32">return <expr pos:start="2219:28" pos:end="2219:31"><name pos:start="2219:28" pos:end="2219:31">NULL</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="2223:13" pos:end="2223:72">/* Key was correct!!! Create the new decryption_key_t ... */</comment>
            <expr_stmt pos:start="2224:13" pos:end="2224:72"><expr pos:start="2224:13" pos:end="2224:71"><name pos:start="2224:13" pos:end="2224:14">dk</name> <operator pos:start="2224:16" pos:end="2224:16">=</operator> <operator pos:start="2224:18" pos:end="2224:18">(</operator><name pos:start="2224:19" pos:end="2224:34">decryption_key_t</name> <operator pos:start="2224:36" pos:end="2224:36">*</operator><operator pos:start="2224:37" pos:end="2224:37">)</operator><call pos:start="2224:38" pos:end="2224:71"><name pos:start="2224:38" pos:end="2224:45">g_malloc</name><argument_list pos:start="2224:46" pos:end="2224:71">(<argument pos:start="2224:47" pos:end="2224:70"><expr pos:start="2224:47" pos:end="2224:70"><sizeof pos:start="2224:47" pos:end="2224:70">sizeof<argument_list pos:start="2224:53" pos:end="2224:70">(<argument pos:start="2224:54" pos:end="2224:69"><expr pos:start="2224:54" pos:end="2224:69"><name pos:start="2224:54" pos:end="2224:69">decryption_key_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2226:13" pos:end="2226:49"><expr pos:start="2226:13" pos:end="2226:48"><name pos:start="2226:13" pos:end="2226:20"><name pos:start="2226:13" pos:end="2226:14">dk</name><operator pos:start="2226:15" pos:end="2226:16">-&gt;</operator><name pos:start="2226:17" pos:end="2226:20">type</name></name> <operator pos:start="2226:22" pos:end="2226:22">=</operator> <name pos:start="2226:24" pos:end="2226:48">AIRPDCAP_KEY_TYPE_WPA_PWD</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2227:13" pos:end="2227:40"><expr pos:start="2227:13" pos:end="2227:39"><name pos:start="2227:13" pos:end="2227:19"><name pos:start="2227:13" pos:end="2227:14">dk</name><operator pos:start="2227:15" pos:end="2227:16">-&gt;</operator><name pos:start="2227:17" pos:end="2227:19">key</name></name> <operator pos:start="2227:21" pos:end="2227:21">=</operator> <call pos:start="2227:23" pos:end="2227:39"><name pos:start="2227:23" pos:end="2227:34">g_string_new</name><argument_list pos:start="2227:35" pos:end="2227:39">(<argument pos:start="2227:36" pos:end="2227:38"><expr pos:start="2227:36" pos:end="2227:38"><name pos:start="2227:36" pos:end="2227:38">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2228:13" pos:end="2228:27"><expr pos:start="2228:13" pos:end="2228:26"><name pos:start="2228:13" pos:end="2228:20"><name pos:start="2228:13" pos:end="2228:14">dk</name><operator pos:start="2228:15" pos:end="2228:16">-&gt;</operator><name pos:start="2228:17" pos:end="2228:20">bits</name></name> <operator pos:start="2228:22" pos:end="2228:22">=</operator> <literal type="number" pos:start="2228:24" pos:end="2228:26">256</literal></expr>;</expr_stmt>                     <comment type="block" pos:start="2228:49" pos:end="2228:135">/* This is the length of the array pf bytes that will be generated using key+ssid ...*/</comment>
            <expr_stmt pos:start="2229:13" pos:end="2229:47"><expr pos:start="2229:13" pos:end="2229:46"><name pos:start="2229:13" pos:end="2229:20"><name pos:start="2229:13" pos:end="2229:14">dk</name><operator pos:start="2229:15" pos:end="2229:16">-&gt;</operator><name pos:start="2229:17" pos:end="2229:20">ssid</name></name> <operator pos:start="2229:22" pos:end="2229:22">=</operator> <call pos:start="2229:24" pos:end="2229:46"><name pos:start="2229:24" pos:end="2229:37">byte_array_dup</name><argument_list pos:start="2229:38" pos:end="2229:46">(<argument pos:start="2229:39" pos:end="2229:45"><expr pos:start="2229:39" pos:end="2229:45"><name pos:start="2229:39" pos:end="2229:45">ssid_ba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="2229:49" pos:end="2229:77">/* NULL if ssid_ba is NULL */</comment>

            <expr_stmt pos:start="2231:13" pos:end="2231:44"><expr pos:start="2231:13" pos:end="2231:43"><call pos:start="2231:13" pos:end="2231:43"><name pos:start="2231:13" pos:end="2231:25">g_string_free</name><argument_list pos:start="2231:26" pos:end="2231:43">(<argument pos:start="2231:27" pos:end="2231:36"><expr pos:start="2231:27" pos:end="2231:36"><name pos:start="2231:27" pos:end="2231:36">key_string</name></expr></argument>, <argument pos:start="2231:39" pos:end="2231:42"><expr pos:start="2231:39" pos:end="2231:42"><name pos:start="2231:39" pos:end="2231:42">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2232:13" pos:end="2233:49"><if pos:start="2232:13" pos:end="2233:49">if <condition pos:start="2232:16" pos:end="2232:32">(<expr pos:start="2232:17" pos:end="2232:31"><name pos:start="2232:17" pos:end="2232:23">ssid_ba</name> <operator pos:start="2232:25" pos:end="2232:26">!=</operator> <name pos:start="2232:28" pos:end="2232:31">NULL</name></expr>)</condition><block type="pseudo" pos:start="2233:17" pos:end="2233:49"><block_content pos:start="2233:17" pos:end="2233:49">
                <expr_stmt pos:start="2233:17" pos:end="2233:49"><expr pos:start="2233:17" pos:end="2233:48"><call pos:start="2233:17" pos:end="2233:48"><name pos:start="2233:17" pos:end="2233:33">g_byte_array_free</name><argument_list pos:start="2233:34" pos:end="2233:48">(<argument pos:start="2233:35" pos:end="2233:41"><expr pos:start="2233:35" pos:end="2233:41"><name pos:start="2233:35" pos:end="2233:41">ssid_ba</name></expr></argument>, <argument pos:start="2233:44" pos:end="2233:47"><expr pos:start="2233:44" pos:end="2233:47"><name pos:start="2233:44" pos:end="2233:47">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2235:13" pos:end="2235:24"><expr pos:start="2235:13" pos:end="2235:23"><call pos:start="2235:13" pos:end="2235:23"><name pos:start="2235:13" pos:end="2235:18">g_free</name><argument_list pos:start="2235:19" pos:end="2235:23">(<argument pos:start="2235:20" pos:end="2235:22"><expr pos:start="2235:20" pos:end="2235:22"><name pos:start="2235:20" pos:end="2235:22">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2236:13" pos:end="2237:29"><if pos:start="2236:13" pos:end="2237:29">if <condition pos:start="2236:16" pos:end="2236:29">(<expr pos:start="2236:17" pos:end="2236:28"><name pos:start="2236:17" pos:end="2236:20">ssid</name> <operator pos:start="2236:22" pos:end="2236:23">!=</operator> <name pos:start="2236:25" pos:end="2236:28">NULL</name></expr>)</condition><block type="pseudo" pos:start="2237:17" pos:end="2237:29"><block_content pos:start="2237:17" pos:end="2237:29">
                <expr_stmt pos:start="2237:17" pos:end="2237:29"><expr pos:start="2237:17" pos:end="2237:28"><call pos:start="2237:17" pos:end="2237:28"><name pos:start="2237:17" pos:end="2237:22">g_free</name><argument_list pos:start="2237:23" pos:end="2237:28">(<argument pos:start="2237:24" pos:end="2237:27"><expr pos:start="2237:24" pos:end="2237:27"><name pos:start="2237:24" pos:end="2237:27">ssid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="block" pos:start="2239:13" pos:end="2239:43">/* Free the array of strings */</comment>
            <expr_stmt pos:start="2240:13" pos:end="2240:31"><expr pos:start="2240:13" pos:end="2240:30"><call pos:start="2240:13" pos:end="2240:30"><name pos:start="2240:13" pos:end="2240:22">g_strfreev</name><argument_list pos:start="2240:23" pos:end="2240:30">(<argument pos:start="2240:24" pos:end="2240:29"><expr pos:start="2240:24" pos:end="2240:29"><name pos:start="2240:24" pos:end="2240:29">tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2241:13" pos:end="2241:22">return <expr pos:start="2241:20" pos:end="2241:21"><name pos:start="2241:20" pos:end="2241:21">dk</name></expr>;</return>

        <case pos:start="2243:9" pos:end="2243:39">case <expr pos:start="2243:14" pos:end="2243:38"><name pos:start="2243:14" pos:end="2243:38">AIRPDCAP_KEY_TYPE_WPA_PSK</name></expr>:</case>

            <expr_stmt pos:start="2245:13" pos:end="2245:40"><expr pos:start="2245:13" pos:end="2245:39"><name pos:start="2245:13" pos:end="2245:18">key_ba</name> <operator pos:start="2245:20" pos:end="2245:20">=</operator> <call pos:start="2245:22" pos:end="2245:39"><name pos:start="2245:22" pos:end="2245:37">g_byte_array_new</name><argument_list pos:start="2245:38" pos:end="2245:39">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2246:13" pos:end="2246:64"><expr pos:start="2246:13" pos:end="2246:63"><name pos:start="2246:13" pos:end="2246:15">res</name> <operator pos:start="2246:17" pos:end="2246:17">=</operator> <call pos:start="2246:19" pos:end="2246:63"><name pos:start="2246:19" pos:end="2246:34">hex_str_to_bytes</name><argument_list pos:start="2246:35" pos:end="2246:63">(<argument pos:start="2246:36" pos:end="2246:47"><expr pos:start="2246:36" pos:end="2246:47"><name pos:start="2246:36" pos:end="2246:47">input_string</name></expr></argument>, <argument pos:start="2246:50" pos:end="2246:55"><expr pos:start="2246:50" pos:end="2246:55"><name pos:start="2246:50" pos:end="2246:55">key_ba</name></expr></argument>, <argument pos:start="2246:58" pos:end="2246:62"><expr pos:start="2246:58" pos:end="2246:62"><name pos:start="2246:58" pos:end="2246:62">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="2248:13" pos:end="2248:86">/* Two tokens means that the user should have entered a WPA-BIN key ... */</comment>
            <if_stmt pos:start="2249:13" pos:end="2255:13"><if pos:start="2249:13" pos:end="2255:13">if <condition pos:start="2249:16" pos:end="2249:60">(<expr pos:start="2249:17" pos:end="2249:59"><operator pos:start="2249:17" pos:end="2249:17">!</operator><name pos:start="2249:18" pos:end="2249:20">res</name> <operator pos:start="2249:22" pos:end="2249:23">||</operator> <operator pos:start="2249:25" pos:end="2249:25">(</operator><operator pos:start="2249:26" pos:end="2249:26">(</operator><name pos:start="2249:27" pos:end="2249:37"><name pos:start="2249:27" pos:end="2249:32">key_ba</name><operator pos:start="2249:33" pos:end="2249:34">-&gt;</operator><name pos:start="2249:35" pos:end="2249:37">len</name></name><operator pos:start="2249:38" pos:end="2249:38">)</operator> <operator pos:start="2249:40" pos:end="2249:41">!=</operator> <name pos:start="2249:43" pos:end="2249:58">WPA_PSK_KEY_SIZE</name><operator pos:start="2249:59" pos:end="2249:59">)</operator></expr>)</condition>
            <block pos:start="2250:13" pos:end="2255:13">{<block_content pos:start="2251:17" pos:end="2254:28">
                <expr_stmt pos:start="2251:17" pos:end="2251:48"><expr pos:start="2251:17" pos:end="2251:47"><call pos:start="2251:17" pos:end="2251:47"><name pos:start="2251:17" pos:end="2251:33">g_byte_array_free</name><argument_list pos:start="2251:34" pos:end="2251:47">(<argument pos:start="2251:35" pos:end="2251:40"><expr pos:start="2251:35" pos:end="2251:40"><name pos:start="2251:35" pos:end="2251:40">key_ba</name></expr></argument>, <argument pos:start="2251:43" pos:end="2251:46"><expr pos:start="2251:43" pos:end="2251:46"><name pos:start="2251:43" pos:end="2251:46">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="2253:17" pos:end="2253:50">/* No ssid has been created ... */</comment>
                <return pos:start="2254:17" pos:end="2254:28">return <expr pos:start="2254:24" pos:end="2254:27"><name pos:start="2254:24" pos:end="2254:27">NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="2257:13" pos:end="2257:72">/* Key was correct!!! Create the new decryption_key_t ... */</comment>
            <expr_stmt pos:start="2258:13" pos:end="2258:72"><expr pos:start="2258:13" pos:end="2258:71"><name pos:start="2258:13" pos:end="2258:14">dk</name> <operator pos:start="2258:16" pos:end="2258:16">=</operator> <operator pos:start="2258:18" pos:end="2258:18">(</operator><name pos:start="2258:19" pos:end="2258:34">decryption_key_t</name> <operator pos:start="2258:36" pos:end="2258:36">*</operator><operator pos:start="2258:37" pos:end="2258:37">)</operator><call pos:start="2258:38" pos:end="2258:71"><name pos:start="2258:38" pos:end="2258:45">g_malloc</name><argument_list pos:start="2258:46" pos:end="2258:71">(<argument pos:start="2258:47" pos:end="2258:70"><expr pos:start="2258:47" pos:end="2258:70"><sizeof pos:start="2258:47" pos:end="2258:70">sizeof<argument_list pos:start="2258:53" pos:end="2258:70">(<argument pos:start="2258:54" pos:end="2258:69"><expr pos:start="2258:54" pos:end="2258:69"><name pos:start="2258:54" pos:end="2258:69">decryption_key_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2260:13" pos:end="2260:49"><expr pos:start="2260:13" pos:end="2260:48"><name pos:start="2260:13" pos:end="2260:20"><name pos:start="2260:13" pos:end="2260:14">dk</name><operator pos:start="2260:15" pos:end="2260:16">-&gt;</operator><name pos:start="2260:17" pos:end="2260:20">type</name></name> <operator pos:start="2260:22" pos:end="2260:22">=</operator> <name pos:start="2260:24" pos:end="2260:48">AIRPDCAP_KEY_TYPE_WPA_PSK</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2261:13" pos:end="2261:49"><expr pos:start="2261:13" pos:end="2261:48"><name pos:start="2261:13" pos:end="2261:19"><name pos:start="2261:13" pos:end="2261:14">dk</name><operator pos:start="2261:15" pos:end="2261:16">-&gt;</operator><name pos:start="2261:17" pos:end="2261:19">key</name></name> <operator pos:start="2261:21" pos:end="2261:21">=</operator> <call pos:start="2261:23" pos:end="2261:48"><name pos:start="2261:23" pos:end="2261:34">g_string_new</name><argument_list pos:start="2261:35" pos:end="2261:48">(<argument pos:start="2261:36" pos:end="2261:47"><expr pos:start="2261:36" pos:end="2261:47"><name pos:start="2261:36" pos:end="2261:47">input_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2262:13" pos:end="2262:47"><expr pos:start="2262:13" pos:end="2262:46"><name pos:start="2262:13" pos:end="2262:20"><name pos:start="2262:13" pos:end="2262:14">dk</name><operator pos:start="2262:15" pos:end="2262:16">-&gt;</operator><name pos:start="2262:17" pos:end="2262:20">bits</name></name> <operator pos:start="2262:22" pos:end="2262:22">=</operator> <operator pos:start="2262:24" pos:end="2262:24">(</operator><name pos:start="2262:25" pos:end="2262:29">guint</name><operator pos:start="2262:30" pos:end="2262:30">)</operator><name pos:start="2262:31" pos:end="2262:42"><name pos:start="2262:31" pos:end="2262:32">dk</name><operator pos:start="2262:33" pos:end="2262:34">-&gt;</operator><name pos:start="2262:35" pos:end="2262:37">key</name><operator pos:start="2262:38" pos:end="2262:39">-&gt;</operator><name pos:start="2262:40" pos:end="2262:42">len</name></name> <operator pos:start="2262:44" pos:end="2262:44">*</operator> <literal type="number" pos:start="2262:46" pos:end="2262:46">4</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="2263:13" pos:end="2263:28"><expr pos:start="2263:13" pos:end="2263:27"><name pos:start="2263:13" pos:end="2263:20"><name pos:start="2263:13" pos:end="2263:14">dk</name><operator pos:start="2263:15" pos:end="2263:16">-&gt;</operator><name pos:start="2263:17" pos:end="2263:20">ssid</name></name> <operator pos:start="2263:22" pos:end="2263:22">=</operator> <name pos:start="2263:24" pos:end="2263:27">NULL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="2265:13" pos:end="2265:44"><expr pos:start="2265:13" pos:end="2265:43"><call pos:start="2265:13" pos:end="2265:43"><name pos:start="2265:13" pos:end="2265:29">g_byte_array_free</name><argument_list pos:start="2265:30" pos:end="2265:43">(<argument pos:start="2265:31" pos:end="2265:36"><expr pos:start="2265:31" pos:end="2265:36"><name pos:start="2265:31" pos:end="2265:36">key_ba</name></expr></argument>, <argument pos:start="2265:39" pos:end="2265:42"><expr pos:start="2265:39" pos:end="2265:42"><name pos:start="2265:39" pos:end="2265:42">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2266:13" pos:end="2266:22">return <expr pos:start="2266:20" pos:end="2266:21"><name pos:start="2266:20" pos:end="2266:21">dk</name></expr>;</return>
        </block_content>}</block></switch>

        <comment type="block" pos:start="2269:9" pos:end="2269:32">/* Type not supported */</comment>
        <return pos:start="2270:9" pos:end="2270:20">return <expr pos:start="2270:16" pos:end="2270:19"><name pos:start="2270:16" pos:end="2270:19">NULL</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="2273:5" pos:end="2281:5"><type pos:start="2273:5" pos:end="2273:8"><name pos:start="2273:5" pos:end="2273:8">void</name></type>
    <name pos:start="2274:5" pos:end="2274:19">free_key_string</name><parameter_list pos:start="2274:20" pos:end="2274:41">(<parameter pos:start="2274:21" pos:end="2274:40"><decl pos:start="2274:21" pos:end="2274:40"><type pos:start="2274:21" pos:end="2274:38"><name pos:start="2274:21" pos:end="2274:36">decryption_key_t</name> <modifier pos:start="2274:38" pos:end="2274:38">*</modifier></type><name pos:start="2274:39" pos:end="2274:40">dk</name></decl></parameter>)</parameter_list>
    <block pos:start="2275:5" pos:end="2281:5">{<block_content pos:start="2276:9" pos:end="2280:19">
        <if_stmt pos:start="2276:9" pos:end="2277:41"><if pos:start="2276:9" pos:end="2277:41">if <condition pos:start="2276:12" pos:end="2276:20">(<expr pos:start="2276:13" pos:end="2276:19"><name pos:start="2276:13" pos:end="2276:19"><name pos:start="2276:13" pos:end="2276:14">dk</name><operator pos:start="2276:15" pos:end="2276:16">-&gt;</operator><name pos:start="2276:17" pos:end="2276:19">key</name></name></expr>)</condition><block type="pseudo" pos:start="2277:13" pos:end="2277:41"><block_content pos:start="2277:13" pos:end="2277:41">
            <expr_stmt pos:start="2277:13" pos:end="2277:41"><expr pos:start="2277:13" pos:end="2277:40"><call pos:start="2277:13" pos:end="2277:40"><name pos:start="2277:13" pos:end="2277:25">g_string_free</name><argument_list pos:start="2277:26" pos:end="2277:40">(<argument pos:start="2277:27" pos:end="2277:33"><expr pos:start="2277:27" pos:end="2277:33"><name pos:start="2277:27" pos:end="2277:33"><name pos:start="2277:27" pos:end="2277:28">dk</name><operator pos:start="2277:29" pos:end="2277:30">-&gt;</operator><name pos:start="2277:31" pos:end="2277:33">key</name></name></expr></argument>, <argument pos:start="2277:36" pos:end="2277:39"><expr pos:start="2277:36" pos:end="2277:39"><name pos:start="2277:36" pos:end="2277:39">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="2278:9" pos:end="2279:46"><if pos:start="2278:9" pos:end="2279:46">if <condition pos:start="2278:12" pos:end="2278:21">(<expr pos:start="2278:13" pos:end="2278:20"><name pos:start="2278:13" pos:end="2278:20"><name pos:start="2278:13" pos:end="2278:14">dk</name><operator pos:start="2278:15" pos:end="2278:16">-&gt;</operator><name pos:start="2278:17" pos:end="2278:20">ssid</name></name></expr>)</condition><block type="pseudo" pos:start="2279:13" pos:end="2279:46"><block_content pos:start="2279:13" pos:end="2279:46">
            <expr_stmt pos:start="2279:13" pos:end="2279:46"><expr pos:start="2279:13" pos:end="2279:45"><call pos:start="2279:13" pos:end="2279:45"><name pos:start="2279:13" pos:end="2279:29">g_byte_array_free</name><argument_list pos:start="2279:30" pos:end="2279:45">(<argument pos:start="2279:31" pos:end="2279:38"><expr pos:start="2279:31" pos:end="2279:38"><name pos:start="2279:31" pos:end="2279:38"><name pos:start="2279:31" pos:end="2279:32">dk</name><operator pos:start="2279:33" pos:end="2279:34">-&gt;</operator><name pos:start="2279:35" pos:end="2279:38">ssid</name></name></expr></argument>, <argument pos:start="2279:41" pos:end="2279:44"><expr pos:start="2279:41" pos:end="2279:44"><name pos:start="2279:41" pos:end="2279:44">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2280:9" pos:end="2280:19"><expr pos:start="2280:9" pos:end="2280:18"><call pos:start="2280:9" pos:end="2280:18"><name pos:start="2280:9" pos:end="2280:14">g_free</name><argument_list pos:start="2280:15" pos:end="2280:18">(<argument pos:start="2280:16" pos:end="2280:17"><expr pos:start="2280:16" pos:end="2280:17"><name pos:start="2280:16" pos:end="2280:17">dk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" pos:start="2283:5" pos:end="2286:7">/*
     * Returns a newly allocated string representing the given decryption_key_t
     * struct, or NULL if something is wrong...
     */</comment>
    <function pos:start="2287:5" pos:end="2315:5"><type pos:start="2287:5" pos:end="2287:11"><name pos:start="2287:5" pos:end="2287:9">gchar</name> <modifier pos:start="2287:11" pos:end="2287:11">*</modifier></type>
    <name pos:start="2288:5" pos:end="2288:18">get_key_string</name><parameter_list pos:start="2288:19" pos:end="2288:40">(<parameter pos:start="2288:20" pos:end="2288:39"><decl pos:start="2288:20" pos:end="2288:39"><type pos:start="2288:20" pos:end="2288:37"><name pos:start="2288:20" pos:end="2288:35">decryption_key_t</name> <modifier pos:start="2288:37" pos:end="2288:37">*</modifier></type><name pos:start="2288:38" pos:end="2288:39">dk</name></decl></parameter>)</parameter_list>
    <block pos:start="2289:5" pos:end="2315:5">{<block_content pos:start="2290:9" pos:end="2314:29">
        <decl_stmt pos:start="2290:9" pos:end="2290:36"><decl pos:start="2290:9" pos:end="2290:35"><type pos:start="2290:9" pos:end="2290:15"><name pos:start="2290:9" pos:end="2290:13">gchar</name> <modifier pos:start="2290:15" pos:end="2290:15">*</modifier></type><name pos:start="2290:16" pos:end="2290:28">output_string</name> <init pos:start="2290:30" pos:end="2290:35">= <expr pos:start="2290:32" pos:end="2290:35"><name pos:start="2290:32" pos:end="2290:35">NULL</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="2292:9" pos:end="2293:24"><if pos:start="2292:9" pos:end="2293:24">if <condition pos:start="2292:12" pos:end="2292:42">(<expr pos:start="2292:13" pos:end="2292:41"><name pos:start="2292:13" pos:end="2292:14">dk</name> <operator pos:start="2292:16" pos:end="2292:17">==</operator> <name pos:start="2292:19" pos:end="2292:22">NULL</name> <operator pos:start="2292:24" pos:end="2292:25">||</operator> <name pos:start="2292:27" pos:end="2292:33"><name pos:start="2292:27" pos:end="2292:28">dk</name><operator pos:start="2292:29" pos:end="2292:30">-&gt;</operator><name pos:start="2292:31" pos:end="2292:33">key</name></name> <operator pos:start="2292:35" pos:end="2292:36">==</operator> <name pos:start="2292:38" pos:end="2292:41">NULL</name></expr>)</condition><block type="pseudo" pos:start="2293:13" pos:end="2293:24"><block_content pos:start="2293:13" pos:end="2293:24">
            <return pos:start="2293:13" pos:end="2293:24">return <expr pos:start="2293:20" pos:end="2293:23"><name pos:start="2293:20" pos:end="2293:23">NULL</name></expr>;</return></block_content></block></if></if_stmt>

        <switch pos:start="2295:9" pos:end="2312:9">switch <condition pos:start="2295:16" pos:end="2295:25">(<expr pos:start="2295:17" pos:end="2295:24"><name pos:start="2295:17" pos:end="2295:24"><name pos:start="2295:17" pos:end="2295:18">dk</name><operator pos:start="2295:19" pos:end="2295:20">-&gt;</operator><name pos:start="2295:21" pos:end="2295:24">type</name></name></expr>)</condition>
        <block pos:start="2296:9" pos:end="2312:9">{<block_content pos:start="2297:9" pos:end="2311:24">
        <case pos:start="2297:9" pos:end="2297:35">case <expr pos:start="2297:14" pos:end="2297:34"><name pos:start="2297:14" pos:end="2297:34">AIRPDCAP_KEY_TYPE_WEP</name></expr>:</case>
            <expr_stmt pos:start="2298:13" pos:end="2298:51"><expr pos:start="2298:13" pos:end="2298:50"><name pos:start="2298:13" pos:end="2298:25">output_string</name> <operator pos:start="2298:27" pos:end="2298:27">=</operator> <call pos:start="2298:29" pos:end="2298:50"><name pos:start="2298:29" pos:end="2298:36">g_strdup</name><argument_list pos:start="2298:37" pos:end="2298:50">(<argument pos:start="2298:38" pos:end="2298:49"><expr pos:start="2298:38" pos:end="2298:49"><name pos:start="2298:38" pos:end="2298:49"><name pos:start="2298:38" pos:end="2298:39">dk</name><operator pos:start="2298:40" pos:end="2298:41">-&gt;</operator><name pos:start="2298:42" pos:end="2298:44">key</name><operator pos:start="2298:45" pos:end="2298:46">-&gt;</operator><name pos:start="2298:47" pos:end="2298:49">str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="2299:13" pos:end="2299:18">break;</break>
        <case pos:start="2300:9" pos:end="2300:39">case <expr pos:start="2300:14" pos:end="2300:38"><name pos:start="2300:14" pos:end="2300:38">AIRPDCAP_KEY_TYPE_WPA_PWD</name></expr>:</case>
            <if_stmt pos:start="2301:13" pos:end="2305:89"><if pos:start="2301:13" pos:end="2302:55">if <condition pos:start="2301:16" pos:end="2301:33">(<expr pos:start="2301:17" pos:end="2301:32"><name pos:start="2301:17" pos:end="2301:24"><name pos:start="2301:17" pos:end="2301:18">dk</name><operator pos:start="2301:19" pos:end="2301:20">-&gt;</operator><name pos:start="2301:21" pos:end="2301:24">ssid</name></name> <operator pos:start="2301:26" pos:end="2301:27">==</operator> <name pos:start="2301:29" pos:end="2301:32">NULL</name></expr>)</condition><block type="pseudo" pos:start="2302:17" pos:end="2302:55"><block_content pos:start="2302:17" pos:end="2302:55">
                <expr_stmt pos:start="2302:17" pos:end="2302:55"><expr pos:start="2302:17" pos:end="2302:54"><name pos:start="2302:17" pos:end="2302:29">output_string</name> <operator pos:start="2302:31" pos:end="2302:31">=</operator> <call pos:start="2302:33" pos:end="2302:54"><name pos:start="2302:33" pos:end="2302:40">g_strdup</name><argument_list pos:start="2302:41" pos:end="2302:54">(<argument pos:start="2302:42" pos:end="2302:53"><expr pos:start="2302:42" pos:end="2302:53"><name pos:start="2302:42" pos:end="2302:53"><name pos:start="2302:42" pos:end="2302:43">dk</name><operator pos:start="2302:44" pos:end="2302:45">-&gt;</operator><name pos:start="2302:46" pos:end="2302:48">key</name><operator pos:start="2302:49" pos:end="2302:50">-&gt;</operator><name pos:start="2302:51" pos:end="2302:53">str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="2303:13" pos:end="2305:89">else<block type="pseudo" pos:start="2304:17" pos:end="2305:89"><block_content pos:start="2304:17" pos:end="2305:89">
                <expr_stmt pos:start="2304:17" pos:end="2305:89"><expr pos:start="2304:17" pos:end="2305:88"><name pos:start="2304:17" pos:end="2304:29">output_string</name> <operator pos:start="2304:31" pos:end="2304:31">=</operator> <call pos:start="2304:33" pos:end="2305:88"><name pos:start="2304:33" pos:end="2304:47">g_strdup_printf</name><argument_list pos:start="2304:48" pos:end="2305:88">(<argument pos:start="2304:49" pos:end="2304:55"><expr pos:start="2304:49" pos:end="2304:55"><literal type="string" pos:start="2304:49" pos:end="2304:55">"%s:%s"</literal></expr></argument>,
                                                <argument pos:start="2305:49" pos:end="2305:60"><expr pos:start="2305:49" pos:end="2305:60"><name pos:start="2305:49" pos:end="2305:60"><name pos:start="2305:49" pos:end="2305:50">dk</name><operator pos:start="2305:51" pos:end="2305:52">-&gt;</operator><name pos:start="2305:53" pos:end="2305:55">key</name><operator pos:start="2305:56" pos:end="2305:57">-&gt;</operator><name pos:start="2305:58" pos:end="2305:60">str</name></name></expr></argument>, <argument pos:start="2305:63" pos:end="2305:87"><expr pos:start="2305:63" pos:end="2305:87"><call pos:start="2305:63" pos:end="2305:87"><name pos:start="2305:63" pos:end="2305:72">format_uri</name><argument_list pos:start="2305:73" pos:end="2305:87">(<argument pos:start="2305:74" pos:end="2305:81"><expr pos:start="2305:74" pos:end="2305:81"><name pos:start="2305:74" pos:end="2305:81"><name pos:start="2305:74" pos:end="2305:75">dk</name><operator pos:start="2305:76" pos:end="2305:77">-&gt;</operator><name pos:start="2305:78" pos:end="2305:81">ssid</name></name></expr></argument>, <argument pos:start="2305:84" pos:end="2305:86"><expr pos:start="2305:84" pos:end="2305:86"><literal type="string" pos:start="2305:84" pos:end="2305:86">":"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <break pos:start="2306:13" pos:end="2306:18">break;</break>
        <case pos:start="2307:9" pos:end="2307:39">case <expr pos:start="2307:14" pos:end="2307:38"><name pos:start="2307:14" pos:end="2307:38">AIRPDCAP_KEY_TYPE_WPA_PMK</name></expr>:</case>
            <expr_stmt pos:start="2308:13" pos:end="2308:51"><expr pos:start="2308:13" pos:end="2308:50"><name pos:start="2308:13" pos:end="2308:25">output_string</name> <operator pos:start="2308:27" pos:end="2308:27">=</operator> <call pos:start="2308:29" pos:end="2308:50"><name pos:start="2308:29" pos:end="2308:36">g_strdup</name><argument_list pos:start="2308:37" pos:end="2308:50">(<argument pos:start="2308:38" pos:end="2308:49"><expr pos:start="2308:38" pos:end="2308:49"><name pos:start="2308:38" pos:end="2308:49"><name pos:start="2308:38" pos:end="2308:39">dk</name><operator pos:start="2308:40" pos:end="2308:41">-&gt;</operator><name pos:start="2308:42" pos:end="2308:44">key</name><operator pos:start="2308:45" pos:end="2308:46">-&gt;</operator><name pos:start="2308:47" pos:end="2308:49">str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="2309:13" pos:end="2309:18">break;</break>
        <default pos:start="2310:9" pos:end="2310:16">default:</default>
            <return pos:start="2311:13" pos:end="2311:24">return <expr pos:start="2311:20" pos:end="2311:23"><name pos:start="2311:20" pos:end="2311:23">NULL</name></expr>;</return>
        </block_content>}</block></switch>

        <return pos:start="2314:9" pos:end="2314:29">return <expr pos:start="2314:16" pos:end="2314:28"><name pos:start="2314:16" pos:end="2314:28">output_string</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="2317:5" pos:end="2404:0"><type pos:start="2317:5" pos:end="2317:14"><specifier pos:start="2317:5" pos:end="2317:10">static</specifier> <name pos:start="2317:12" pos:end="2317:14">INT</name></type>
    <name pos:start="2318:5" pos:end="2318:25">AirPDcapTDLSDeriveKey</name><parameter_list pos:start="2318:26" pos:end="2325:22">(
        <parameter pos:start="2319:9" pos:end="2319:36"><decl pos:start="2319:9" pos:end="2319:36"><type pos:start="2319:9" pos:end="2319:36"><name pos:start="2319:9" pos:end="2319:33">PAIRPDCAP_SEC_ASSOCIATION</name></type> <name pos:start="2319:35" pos:end="2319:36">sa</name></decl></parameter>,
        <parameter pos:start="2320:9" pos:end="2320:26"><decl pos:start="2320:9" pos:end="2320:26"><type pos:start="2320:9" pos:end="2320:26"><specifier pos:start="2320:9" pos:end="2320:13">const</specifier> <name pos:start="2320:15" pos:end="2320:20">guint8</name> <modifier pos:start="2320:22" pos:end="2320:22">*</modifier></type><name pos:start="2320:23" pos:end="2320:26">data</name></decl></parameter>,
        <parameter pos:start="2321:9" pos:end="2321:25"><decl pos:start="2321:9" pos:end="2321:25"><type pos:start="2321:9" pos:end="2321:25"><name pos:start="2321:9" pos:end="2321:13">guint</name></type> <name pos:start="2321:15" pos:end="2321:25">offset_rsne</name></decl></parameter>,
        <parameter pos:start="2322:9" pos:end="2322:24"><decl pos:start="2322:9" pos:end="2322:24"><type pos:start="2322:9" pos:end="2322:24"><name pos:start="2322:9" pos:end="2322:13">guint</name></type> <name pos:start="2322:15" pos:end="2322:24">offset_fte</name></decl></parameter>,
        <parameter pos:start="2323:9" pos:end="2323:28"><decl pos:start="2323:9" pos:end="2323:28"><type pos:start="2323:9" pos:end="2323:28"><name pos:start="2323:9" pos:end="2323:13">guint</name></type> <name pos:start="2323:15" pos:end="2323:28">offset_timeout</name></decl></parameter>,
        <parameter pos:start="2324:9" pos:end="2324:25"><decl pos:start="2324:9" pos:end="2324:25"><type pos:start="2324:9" pos:end="2324:25"><name pos:start="2324:9" pos:end="2324:13">guint</name></type> <name pos:start="2324:15" pos:end="2324:25">offset_link</name></decl></parameter>,
        <parameter pos:start="2325:9" pos:end="2325:21"><decl pos:start="2325:9" pos:end="2325:21"><type pos:start="2325:9" pos:end="2325:21"><name pos:start="2325:9" pos:end="2325:14">guint8</name></type> <name pos:start="2325:16" pos:end="2325:21">action</name></decl></parameter>)</parameter_list>
    <block pos:start="2326:5" pos:end="2404:0">{<block_content pos:start="2328:9" pos:end="2400:36">

        <decl_stmt pos:start="2328:9" pos:end="2328:36"><decl pos:start="2328:9" pos:end="2328:35"><type pos:start="2328:9" pos:end="2328:27"><name pos:start="2328:9" pos:end="2328:27">sha256_hmac_context</name></type> <name pos:start="2328:29" pos:end="2328:35">sha_ctx</name></decl>;</decl_stmt>
        <decl_stmt pos:start="2329:9" pos:end="2329:29"><decl pos:start="2329:9" pos:end="2329:28"><type pos:start="2329:9" pos:end="2329:20"><name pos:start="2329:9" pos:end="2329:20">aes_cmac_ctx</name></type> <name pos:start="2329:22" pos:end="2329:28">aes_ctx</name></decl>;</decl_stmt>
        <decl_stmt pos:start="2330:9" pos:end="2330:70"><decl pos:start="2330:9" pos:end="2330:28"><type pos:start="2330:9" pos:end="2330:22"><specifier pos:start="2330:9" pos:end="2330:13">const</specifier> <name pos:start="2330:15" pos:end="2330:20">guint8</name> <modifier pos:start="2330:22" pos:end="2330:22">*</modifier></type><name pos:start="2330:23" pos:end="2330:28">snonce</name></decl>, <decl pos:start="2330:31" pos:end="2330:37"><type ref="prev" pos:start="2330:9" pos:end="2330:22"><modifier pos:start="2330:31" pos:end="2330:31">*</modifier></type><name pos:start="2330:32" pos:end="2330:37">anonce</name></decl>, <decl pos:start="2330:40" pos:end="2330:49"><type ref="prev" pos:start="2330:9" pos:end="2330:22"><modifier pos:start="2330:40" pos:end="2330:40">*</modifier></type><name pos:start="2330:41" pos:end="2330:49">initiator</name></decl>, <decl pos:start="2330:52" pos:end="2330:61"><type ref="prev" pos:start="2330:9" pos:end="2330:22"><modifier pos:start="2330:52" pos:end="2330:52">*</modifier></type><name pos:start="2330:53" pos:end="2330:61">responder</name></decl>, <decl pos:start="2330:64" pos:end="2330:69"><type ref="prev" pos:start="2330:9" pos:end="2330:22"><modifier pos:start="2330:64" pos:end="2330:64">*</modifier></type><name pos:start="2330:65" pos:end="2330:69">bssid</name></decl>;</decl_stmt>
        <decl_stmt pos:start="2331:9" pos:end="2331:44"><decl pos:start="2331:9" pos:end="2331:43"><type pos:start="2331:9" pos:end="2331:14"><name pos:start="2331:9" pos:end="2331:14">guint8</name></type> <name pos:start="2331:16" pos:end="2331:43"><name pos:start="2331:16" pos:end="2331:24">key_input</name><index pos:start="2331:25" pos:end="2331:43">[<expr pos:start="2331:26" pos:end="2331:42"><name pos:start="2331:26" pos:end="2331:42">SHA256_DIGEST_LEN</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="2332:9" pos:end="2332:65"><decl pos:start="2332:9" pos:end="2332:22"><type pos:start="2332:9" pos:end="2332:14"><name pos:start="2332:9" pos:end="2332:14">guint8</name></type> <name pos:start="2332:16" pos:end="2332:22"><name pos:start="2332:16" pos:end="2332:18">mic</name><index pos:start="2332:19" pos:end="2332:22">[<expr pos:start="2332:20" pos:end="2332:21"><literal type="number" pos:start="2332:20" pos:end="2332:21">16</literal></expr>]</index></name></decl>, <decl pos:start="2332:25" pos:end="2332:31"><type ref="prev" pos:start="2332:9" pos:end="2332:14"/><name pos:start="2332:25" pos:end="2332:31"><name pos:start="2332:25" pos:end="2332:28">iter</name><index pos:start="2332:29" pos:end="2332:31">[<expr pos:start="2332:30" pos:end="2332:30"><literal type="number" pos:start="2332:30" pos:end="2332:30">2</literal></expr>]</index></name></decl>, <decl pos:start="2332:34" pos:end="2332:42"><type ref="prev" pos:start="2332:9" pos:end="2332:14"/><name pos:start="2332:34" pos:end="2332:42"><name pos:start="2332:34" pos:end="2332:39">length</name><index pos:start="2332:40" pos:end="2332:42">[<expr pos:start="2332:41" pos:end="2332:41"><literal type="number" pos:start="2332:41" pos:end="2332:41">2</literal></expr>]</index></name></decl>, <decl pos:start="2332:45" pos:end="2332:64"><type ref="prev" pos:start="2332:9" pos:end="2332:14"/><name pos:start="2332:45" pos:end="2332:51">seq_num</name> <init pos:start="2332:53" pos:end="2332:64">= <expr pos:start="2332:55" pos:end="2332:64"><name pos:start="2332:55" pos:end="2332:60">action</name> <operator pos:start="2332:62" pos:end="2332:62">+</operator> <literal type="number" pos:start="2332:64" pos:end="2332:64">1</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="2334:9" pos:end="2334:27">/* Get key input */</comment>
        <expr_stmt pos:start="2335:9" pos:end="2335:40"><expr pos:start="2335:9" pos:end="2335:39"><name pos:start="2335:9" pos:end="2335:14">anonce</name> <operator pos:start="2335:16" pos:end="2335:16">=</operator> <operator pos:start="2335:18" pos:end="2335:18">&amp;</operator><name pos:start="2335:19" pos:end="2335:39"><name pos:start="2335:19" pos:end="2335:22">data</name><index pos:start="2335:23" pos:end="2335:39">[<expr pos:start="2335:24" pos:end="2335:38"><name pos:start="2335:24" pos:end="2335:33">offset_fte</name> <operator pos:start="2335:35" pos:end="2335:35">+</operator> <literal type="number" pos:start="2335:37" pos:end="2335:38">20</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="2336:9" pos:end="2336:40"><expr pos:start="2336:9" pos:end="2336:39"><name pos:start="2336:9" pos:end="2336:14">snonce</name> <operator pos:start="2336:16" pos:end="2336:16">=</operator> <operator pos:start="2336:18" pos:end="2336:18">&amp;</operator><name pos:start="2336:19" pos:end="2336:39"><name pos:start="2336:19" pos:end="2336:22">data</name><index pos:start="2336:23" pos:end="2336:39">[<expr pos:start="2336:24" pos:end="2336:38"><name pos:start="2336:24" pos:end="2336:33">offset_fte</name> <operator pos:start="2336:35" pos:end="2336:35">+</operator> <literal type="number" pos:start="2336:37" pos:end="2336:38">52</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="2337:9" pos:end="2337:38"><expr pos:start="2337:9" pos:end="2337:37"><call pos:start="2337:9" pos:end="2337:37"><name pos:start="2337:9" pos:end="2337:21">sha256_starts</name><argument_list pos:start="2337:22" pos:end="2337:37">(<argument pos:start="2337:23" pos:end="2337:36"><expr pos:start="2337:23" pos:end="2337:36"><operator pos:start="2337:23" pos:end="2337:23">&amp;</operator><operator pos:start="2337:24" pos:end="2337:24">(</operator><name pos:start="2337:25" pos:end="2337:35"><name pos:start="2337:25" pos:end="2337:31">sha_ctx</name><operator pos:start="2337:32" pos:end="2337:32">.</operator><name pos:start="2337:33" pos:end="2337:35">ctx</name></name><operator pos:start="2337:36" pos:end="2337:36">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2338:9" pos:end="2347:9"><if pos:start="2338:9" pos:end="2342:9">if <condition pos:start="2338:12" pos:end="2338:63">(<expr pos:start="2338:13" pos:end="2338:62"><call pos:start="2338:13" pos:end="2338:58"><name pos:start="2338:13" pos:end="2338:18">memcmp</name><argument_list pos:start="2338:19" pos:end="2338:58">(<argument pos:start="2338:20" pos:end="2338:25"><expr pos:start="2338:20" pos:end="2338:25"><name pos:start="2338:20" pos:end="2338:25">anonce</name></expr></argument>, <argument pos:start="2338:28" pos:end="2338:33"><expr pos:start="2338:28" pos:end="2338:33"><name pos:start="2338:28" pos:end="2338:33">snonce</name></expr></argument>, <argument pos:start="2338:36" pos:end="2338:57"><expr pos:start="2338:36" pos:end="2338:57"><name pos:start="2338:36" pos:end="2338:57">AIRPDCAP_WPA_NONCE_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="2338:60" pos:end="2338:60">&lt;</operator> <literal type="number" pos:start="2338:62" pos:end="2338:62">0</literal></expr>)</condition>
        <block pos:start="2339:9" pos:end="2342:9">{<block_content pos:start="2340:13" pos:end="2341:74">
            <expr_stmt pos:start="2340:13" pos:end="2340:74"><expr pos:start="2340:13" pos:end="2340:73"><call pos:start="2340:13" pos:end="2340:73"><name pos:start="2340:13" pos:end="2340:25">sha256_update</name><argument_list pos:start="2340:26" pos:end="2340:73">(<argument pos:start="2340:27" pos:end="2340:40"><expr pos:start="2340:27" pos:end="2340:40"><operator pos:start="2340:27" pos:end="2340:27">&amp;</operator><operator pos:start="2340:28" pos:end="2340:28">(</operator><name pos:start="2340:29" pos:end="2340:39"><name pos:start="2340:29" pos:end="2340:35">sha_ctx</name><operator pos:start="2340:36" pos:end="2340:36">.</operator><name pos:start="2340:37" pos:end="2340:39">ctx</name></name><operator pos:start="2340:40" pos:end="2340:40">)</operator></expr></argument>, <argument pos:start="2340:43" pos:end="2340:48"><expr pos:start="2340:43" pos:end="2340:48"><name pos:start="2340:43" pos:end="2340:48">anonce</name></expr></argument>, <argument pos:start="2340:51" pos:end="2340:72"><expr pos:start="2340:51" pos:end="2340:72"><name pos:start="2340:51" pos:end="2340:72">AIRPDCAP_WPA_NONCE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2341:13" pos:end="2341:74"><expr pos:start="2341:13" pos:end="2341:73"><call pos:start="2341:13" pos:end="2341:73"><name pos:start="2341:13" pos:end="2341:25">sha256_update</name><argument_list pos:start="2341:26" pos:end="2341:73">(<argument pos:start="2341:27" pos:end="2341:40"><expr pos:start="2341:27" pos:end="2341:40"><operator pos:start="2341:27" pos:end="2341:27">&amp;</operator><operator pos:start="2341:28" pos:end="2341:28">(</operator><name pos:start="2341:29" pos:end="2341:39"><name pos:start="2341:29" pos:end="2341:35">sha_ctx</name><operator pos:start="2341:36" pos:end="2341:36">.</operator><name pos:start="2341:37" pos:end="2341:39">ctx</name></name><operator pos:start="2341:40" pos:end="2341:40">)</operator></expr></argument>, <argument pos:start="2341:43" pos:end="2341:48"><expr pos:start="2341:43" pos:end="2341:48"><name pos:start="2341:43" pos:end="2341:48">snonce</name></expr></argument>, <argument pos:start="2341:51" pos:end="2341:72"><expr pos:start="2341:51" pos:end="2341:72"><name pos:start="2341:51" pos:end="2341:72">AIRPDCAP_WPA_NONCE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else pos:start="2343:9" pos:end="2347:9">else
        <block pos:start="2344:9" pos:end="2347:9">{<block_content pos:start="2345:13" pos:end="2346:74">
            <expr_stmt pos:start="2345:13" pos:end="2345:74"><expr pos:start="2345:13" pos:end="2345:73"><call pos:start="2345:13" pos:end="2345:73"><name pos:start="2345:13" pos:end="2345:25">sha256_update</name><argument_list pos:start="2345:26" pos:end="2345:73">(<argument pos:start="2345:27" pos:end="2345:40"><expr pos:start="2345:27" pos:end="2345:40"><operator pos:start="2345:27" pos:end="2345:27">&amp;</operator><operator pos:start="2345:28" pos:end="2345:28">(</operator><name pos:start="2345:29" pos:end="2345:39"><name pos:start="2345:29" pos:end="2345:35">sha_ctx</name><operator pos:start="2345:36" pos:end="2345:36">.</operator><name pos:start="2345:37" pos:end="2345:39">ctx</name></name><operator pos:start="2345:40" pos:end="2345:40">)</operator></expr></argument>, <argument pos:start="2345:43" pos:end="2345:48"><expr pos:start="2345:43" pos:end="2345:48"><name pos:start="2345:43" pos:end="2345:48">snonce</name></expr></argument>, <argument pos:start="2345:51" pos:end="2345:72"><expr pos:start="2345:51" pos:end="2345:72"><name pos:start="2345:51" pos:end="2345:72">AIRPDCAP_WPA_NONCE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2346:13" pos:end="2346:74"><expr pos:start="2346:13" pos:end="2346:73"><call pos:start="2346:13" pos:end="2346:73"><name pos:start="2346:13" pos:end="2346:25">sha256_update</name><argument_list pos:start="2346:26" pos:end="2346:73">(<argument pos:start="2346:27" pos:end="2346:40"><expr pos:start="2346:27" pos:end="2346:40"><operator pos:start="2346:27" pos:end="2346:27">&amp;</operator><operator pos:start="2346:28" pos:end="2346:28">(</operator><name pos:start="2346:29" pos:end="2346:39"><name pos:start="2346:29" pos:end="2346:35">sha_ctx</name><operator pos:start="2346:36" pos:end="2346:36">.</operator><name pos:start="2346:37" pos:end="2346:39">ctx</name></name><operator pos:start="2346:40" pos:end="2346:40">)</operator></expr></argument>, <argument pos:start="2346:43" pos:end="2346:48"><expr pos:start="2346:43" pos:end="2346:48"><name pos:start="2346:43" pos:end="2346:48">anonce</name></expr></argument>, <argument pos:start="2346:51" pos:end="2346:72"><expr pos:start="2346:51" pos:end="2346:72"><name pos:start="2346:51" pos:end="2346:72">AIRPDCAP_WPA_NONCE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt pos:start="2348:9" pos:end="2348:49"><expr pos:start="2348:9" pos:end="2348:48"><call pos:start="2348:9" pos:end="2348:48"><name pos:start="2348:9" pos:end="2348:21">sha256_finish</name><argument_list pos:start="2348:22" pos:end="2348:48">(<argument pos:start="2348:23" pos:end="2348:36"><expr pos:start="2348:23" pos:end="2348:36"><operator pos:start="2348:23" pos:end="2348:23">&amp;</operator><operator pos:start="2348:24" pos:end="2348:24">(</operator><name pos:start="2348:25" pos:end="2348:35"><name pos:start="2348:25" pos:end="2348:31">sha_ctx</name><operator pos:start="2348:32" pos:end="2348:32">.</operator><name pos:start="2348:33" pos:end="2348:35">ctx</name></name><operator pos:start="2348:36" pos:end="2348:36">)</operator></expr></argument>, <argument pos:start="2348:39" pos:end="2348:47"><expr pos:start="2348:39" pos:end="2348:47"><name pos:start="2348:39" pos:end="2348:47">key_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="2350:9" pos:end="2350:24">/* Derive key */</comment>
        <expr_stmt pos:start="2351:9" pos:end="2351:39"><expr pos:start="2351:9" pos:end="2351:38"><name pos:start="2351:9" pos:end="2351:13">bssid</name> <operator pos:start="2351:15" pos:end="2351:15">=</operator> <operator pos:start="2351:17" pos:end="2351:17">&amp;</operator><name pos:start="2351:18" pos:end="2351:38"><name pos:start="2351:18" pos:end="2351:21">data</name><index pos:start="2351:22" pos:end="2351:38">[<expr pos:start="2351:23" pos:end="2351:37"><name pos:start="2351:23" pos:end="2351:33">offset_link</name> <operator pos:start="2351:35" pos:end="2351:35">+</operator> <literal type="number" pos:start="2351:37" pos:end="2351:37">2</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="2352:9" pos:end="2352:43"><expr pos:start="2352:9" pos:end="2352:42"><name pos:start="2352:9" pos:end="2352:17">initiator</name> <operator pos:start="2352:19" pos:end="2352:19">=</operator> <operator pos:start="2352:21" pos:end="2352:21">&amp;</operator><name pos:start="2352:22" pos:end="2352:42"><name pos:start="2352:22" pos:end="2352:25">data</name><index pos:start="2352:26" pos:end="2352:42">[<expr pos:start="2352:27" pos:end="2352:41"><name pos:start="2352:27" pos:end="2352:37">offset_link</name> <operator pos:start="2352:39" pos:end="2352:39">+</operator> <literal type="number" pos:start="2352:41" pos:end="2352:41">8</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="2353:9" pos:end="2353:44"><expr pos:start="2353:9" pos:end="2353:43"><name pos:start="2353:9" pos:end="2353:17">responder</name> <operator pos:start="2353:19" pos:end="2353:19">=</operator> <operator pos:start="2353:21" pos:end="2353:21">&amp;</operator><name pos:start="2353:22" pos:end="2353:43"><name pos:start="2353:22" pos:end="2353:25">data</name><index pos:start="2353:26" pos:end="2353:43">[<expr pos:start="2353:27" pos:end="2353:42"><name pos:start="2353:27" pos:end="2353:37">offset_link</name> <operator pos:start="2353:39" pos:end="2353:39">+</operator> <literal type="number" pos:start="2353:41" pos:end="2353:42">14</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="2354:9" pos:end="2354:67"><expr pos:start="2354:9" pos:end="2354:66"><call pos:start="2354:9" pos:end="2354:66"><name pos:start="2354:9" pos:end="2354:26">sha256_hmac_starts</name><argument_list pos:start="2354:27" pos:end="2354:66">(<argument pos:start="2354:28" pos:end="2354:35"><expr pos:start="2354:28" pos:end="2354:35"><operator pos:start="2354:28" pos:end="2354:28">&amp;</operator><name pos:start="2354:29" pos:end="2354:35">sha_ctx</name></expr></argument>, <argument pos:start="2354:38" pos:end="2354:46"><expr pos:start="2354:38" pos:end="2354:46"><name pos:start="2354:38" pos:end="2354:46">key_input</name></expr></argument>, <argument pos:start="2354:49" pos:end="2354:65"><expr pos:start="2354:49" pos:end="2354:65"><name pos:start="2354:49" pos:end="2354:65">SHA256_DIGEST_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2355:9" pos:end="2355:20"><expr pos:start="2355:9" pos:end="2355:19"><name pos:start="2355:9" pos:end="2355:15"><name pos:start="2355:9" pos:end="2355:12">iter</name><index pos:start="2355:13" pos:end="2355:15">[<expr pos:start="2355:14" pos:end="2355:14"><literal type="number" pos:start="2355:14" pos:end="2355:14">0</literal></expr>]</index></name> <operator pos:start="2355:17" pos:end="2355:17">=</operator> <literal type="number" pos:start="2355:19" pos:end="2355:19">1</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="2356:9" pos:end="2356:20"><expr pos:start="2356:9" pos:end="2356:19"><name pos:start="2356:9" pos:end="2356:15"><name pos:start="2356:9" pos:end="2356:12">iter</name><index pos:start="2356:13" pos:end="2356:15">[<expr pos:start="2356:14" pos:end="2356:14"><literal type="number" pos:start="2356:14" pos:end="2356:14">1</literal></expr>]</index></name> <operator pos:start="2356:17" pos:end="2356:17">=</operator> <literal type="number" pos:start="2356:19" pos:end="2356:19">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="2357:9" pos:end="2357:63"><expr pos:start="2357:9" pos:end="2357:62"><call pos:start="2357:9" pos:end="2357:62"><name pos:start="2357:9" pos:end="2357:26">sha256_hmac_update</name><argument_list pos:start="2357:27" pos:end="2357:62">(<argument pos:start="2357:28" pos:end="2357:35"><expr pos:start="2357:28" pos:end="2357:35"><operator pos:start="2357:28" pos:end="2357:28">&amp;</operator><name pos:start="2357:29" pos:end="2357:35">sha_ctx</name></expr></argument>, <argument pos:start="2357:38" pos:end="2357:58"><expr pos:start="2357:38" pos:end="2357:58"><operator pos:start="2357:38" pos:end="2357:38">(</operator><specifier pos:start="2357:39" pos:end="2357:43">const</specifier> <name pos:start="2357:45" pos:end="2357:50">guint8</name> <operator pos:start="2357:52" pos:end="2357:52">*</operator><operator pos:start="2357:53" pos:end="2357:53">)</operator><operator pos:start="2357:54" pos:end="2357:54">&amp;</operator><name pos:start="2357:55" pos:end="2357:58">iter</name></expr></argument>, <argument pos:start="2357:61" pos:end="2357:61"><expr pos:start="2357:61" pos:end="2357:61"><literal type="number" pos:start="2357:61" pos:end="2357:61">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2358:9" pos:end="2358:52"><expr pos:start="2358:9" pos:end="2358:51"><call pos:start="2358:9" pos:end="2358:51"><name pos:start="2358:9" pos:end="2358:26">sha256_hmac_update</name><argument_list pos:start="2358:27" pos:end="2358:51">(<argument pos:start="2358:28" pos:end="2358:35"><expr pos:start="2358:28" pos:end="2358:35"><operator pos:start="2358:28" pos:end="2358:28">&amp;</operator><name pos:start="2358:29" pos:end="2358:35">sha_ctx</name></expr></argument>, <argument pos:start="2358:38" pos:end="2358:47"><expr pos:start="2358:38" pos:end="2358:47"><literal type="string" pos:start="2358:38" pos:end="2358:47">"TDLS PMK"</literal></expr></argument>, <argument pos:start="2358:50" pos:end="2358:50"><expr pos:start="2358:50" pos:end="2358:50"><literal type="number" pos:start="2358:50" pos:end="2358:50">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2359:9" pos:end="2368:9"><if pos:start="2359:9" pos:end="2363:9">if <condition pos:start="2359:12" pos:end="2359:63">(<expr pos:start="2359:13" pos:end="2359:62"><call pos:start="2359:13" pos:end="2359:58"><name pos:start="2359:13" pos:end="2359:18">memcmp</name><argument_list pos:start="2359:19" pos:end="2359:58">(<argument pos:start="2359:20" pos:end="2359:28"><expr pos:start="2359:20" pos:end="2359:28"><name pos:start="2359:20" pos:end="2359:28">initiator</name></expr></argument>, <argument pos:start="2359:31" pos:end="2359:39"><expr pos:start="2359:31" pos:end="2359:39"><name pos:start="2359:31" pos:end="2359:39">responder</name></expr></argument>, <argument pos:start="2359:42" pos:end="2359:57"><expr pos:start="2359:42" pos:end="2359:57"><name pos:start="2359:42" pos:end="2359:57">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="2359:60" pos:end="2359:60">&lt;</operator> <literal type="number" pos:start="2359:62" pos:end="2359:62">0</literal></expr>)</condition>
        <block pos:start="2360:9" pos:end="2363:9">{<block_content pos:start="2361:13" pos:end="2362:70">
            <expr_stmt pos:start="2361:13" pos:end="2361:70"><expr pos:start="2361:13" pos:end="2361:69"><call pos:start="2361:13" pos:end="2361:69"><name pos:start="2361:13" pos:end="2361:30">sha256_hmac_update</name><argument_list pos:start="2361:31" pos:end="2361:69">(<argument pos:start="2361:32" pos:end="2361:39"><expr pos:start="2361:32" pos:end="2361:39"><operator pos:start="2361:32" pos:end="2361:32">&amp;</operator><name pos:start="2361:33" pos:end="2361:39">sha_ctx</name></expr></argument>, <argument pos:start="2361:42" pos:end="2361:50"><expr pos:start="2361:42" pos:end="2361:50"><name pos:start="2361:42" pos:end="2361:50">initiator</name></expr></argument>, <argument pos:start="2361:53" pos:end="2361:68"><expr pos:start="2361:53" pos:end="2361:68"><name pos:start="2361:53" pos:end="2361:68">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2362:13" pos:end="2362:70"><expr pos:start="2362:13" pos:end="2362:69"><call pos:start="2362:13" pos:end="2362:69"><name pos:start="2362:13" pos:end="2362:30">sha256_hmac_update</name><argument_list pos:start="2362:31" pos:end="2362:69">(<argument pos:start="2362:32" pos:end="2362:39"><expr pos:start="2362:32" pos:end="2362:39"><operator pos:start="2362:32" pos:end="2362:32">&amp;</operator><name pos:start="2362:33" pos:end="2362:39">sha_ctx</name></expr></argument>, <argument pos:start="2362:42" pos:end="2362:50"><expr pos:start="2362:42" pos:end="2362:50"><name pos:start="2362:42" pos:end="2362:50">responder</name></expr></argument>, <argument pos:start="2362:53" pos:end="2362:68"><expr pos:start="2362:53" pos:end="2362:68"><name pos:start="2362:53" pos:end="2362:68">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else pos:start="2364:9" pos:end="2368:9">else
        <block pos:start="2365:9" pos:end="2368:9">{<block_content pos:start="2366:13" pos:end="2367:70">
            <expr_stmt pos:start="2366:13" pos:end="2366:70"><expr pos:start="2366:13" pos:end="2366:69"><call pos:start="2366:13" pos:end="2366:69"><name pos:start="2366:13" pos:end="2366:30">sha256_hmac_update</name><argument_list pos:start="2366:31" pos:end="2366:69">(<argument pos:start="2366:32" pos:end="2366:39"><expr pos:start="2366:32" pos:end="2366:39"><operator pos:start="2366:32" pos:end="2366:32">&amp;</operator><name pos:start="2366:33" pos:end="2366:39">sha_ctx</name></expr></argument>, <argument pos:start="2366:42" pos:end="2366:50"><expr pos:start="2366:42" pos:end="2366:50"><name pos:start="2366:42" pos:end="2366:50">responder</name></expr></argument>, <argument pos:start="2366:53" pos:end="2366:68"><expr pos:start="2366:53" pos:end="2366:68"><name pos:start="2366:53" pos:end="2366:68">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2367:13" pos:end="2367:70"><expr pos:start="2367:13" pos:end="2367:69"><call pos:start="2367:13" pos:end="2367:69"><name pos:start="2367:13" pos:end="2367:30">sha256_hmac_update</name><argument_list pos:start="2367:31" pos:end="2367:69">(<argument pos:start="2367:32" pos:end="2367:39"><expr pos:start="2367:32" pos:end="2367:39"><operator pos:start="2367:32" pos:end="2367:32">&amp;</operator><name pos:start="2367:33" pos:end="2367:39">sha_ctx</name></expr></argument>, <argument pos:start="2367:42" pos:end="2367:50"><expr pos:start="2367:42" pos:end="2367:50"><name pos:start="2367:42" pos:end="2367:50">initiator</name></expr></argument>, <argument pos:start="2367:53" pos:end="2367:68"><expr pos:start="2367:53" pos:end="2367:68"><name pos:start="2367:53" pos:end="2367:68">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt pos:start="2369:9" pos:end="2369:62"><expr pos:start="2369:9" pos:end="2369:61"><call pos:start="2369:9" pos:end="2369:61"><name pos:start="2369:9" pos:end="2369:26">sha256_hmac_update</name><argument_list pos:start="2369:27" pos:end="2369:61">(<argument pos:start="2369:28" pos:end="2369:35"><expr pos:start="2369:28" pos:end="2369:35"><operator pos:start="2369:28" pos:end="2369:28">&amp;</operator><name pos:start="2369:29" pos:end="2369:35">sha_ctx</name></expr></argument>, <argument pos:start="2369:38" pos:end="2369:42"><expr pos:start="2369:38" pos:end="2369:42"><name pos:start="2369:38" pos:end="2369:42">bssid</name></expr></argument>, <argument pos:start="2369:45" pos:end="2369:60"><expr pos:start="2369:45" pos:end="2369:60"><name pos:start="2369:45" pos:end="2369:60">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2370:9" pos:end="2370:31"><expr pos:start="2370:9" pos:end="2370:30"><name pos:start="2370:9" pos:end="2370:17"><name pos:start="2370:9" pos:end="2370:14">length</name><index pos:start="2370:15" pos:end="2370:17">[<expr pos:start="2370:16" pos:end="2370:16"><literal type="number" pos:start="2370:16" pos:end="2370:16">0</literal></expr>]</index></name> <operator pos:start="2370:19" pos:end="2370:19">=</operator> <literal type="number" pos:start="2370:21" pos:end="2370:23">256</literal> <operator pos:start="2370:25" pos:end="2370:25">&amp;</operator> <literal type="number" pos:start="2370:27" pos:end="2370:30">0xff</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="2371:9" pos:end="2371:38"><expr pos:start="2371:9" pos:end="2371:37"><name pos:start="2371:9" pos:end="2371:17"><name pos:start="2371:9" pos:end="2371:14">length</name><index pos:start="2371:15" pos:end="2371:17">[<expr pos:start="2371:16" pos:end="2371:16"><literal type="number" pos:start="2371:16" pos:end="2371:16">1</literal></expr>]</index></name> <operator pos:start="2371:19" pos:end="2371:19">=</operator> <operator pos:start="2371:21" pos:end="2371:21">(</operator><literal type="number" pos:start="2371:22" pos:end="2371:24">256</literal> <operator pos:start="2371:26" pos:end="2371:27">&gt;&gt;</operator> <literal type="number" pos:start="2371:29" pos:end="2371:29">8</literal><operator pos:start="2371:30" pos:end="2371:30">)</operator> <operator pos:start="2371:32" pos:end="2371:32">&amp;</operator> <literal type="number" pos:start="2371:34" pos:end="2371:37">0xff</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="2372:9" pos:end="2372:65"><expr pos:start="2372:9" pos:end="2372:64"><call pos:start="2372:9" pos:end="2372:64"><name pos:start="2372:9" pos:end="2372:26">sha256_hmac_update</name><argument_list pos:start="2372:27" pos:end="2372:64">(<argument pos:start="2372:28" pos:end="2372:35"><expr pos:start="2372:28" pos:end="2372:35"><operator pos:start="2372:28" pos:end="2372:28">&amp;</operator><name pos:start="2372:29" pos:end="2372:35">sha_ctx</name></expr></argument>, <argument pos:start="2372:38" pos:end="2372:60"><expr pos:start="2372:38" pos:end="2372:60"><operator pos:start="2372:38" pos:end="2372:38">(</operator><specifier pos:start="2372:39" pos:end="2372:43">const</specifier> <name pos:start="2372:45" pos:end="2372:50">guint8</name> <operator pos:start="2372:52" pos:end="2372:52">*</operator><operator pos:start="2372:53" pos:end="2372:53">)</operator><operator pos:start="2372:54" pos:end="2372:54">&amp;</operator><name pos:start="2372:55" pos:end="2372:60">length</name></expr></argument>, <argument pos:start="2372:63" pos:end="2372:63"><expr pos:start="2372:63" pos:end="2372:63"><literal type="number" pos:start="2372:63" pos:end="2372:63">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2373:9" pos:end="2373:48"><expr pos:start="2373:9" pos:end="2373:47"><call pos:start="2373:9" pos:end="2373:47"><name pos:start="2373:9" pos:end="2373:26">sha256_hmac_finish</name><argument_list pos:start="2373:27" pos:end="2373:47">(<argument pos:start="2373:28" pos:end="2373:35"><expr pos:start="2373:28" pos:end="2373:35"><operator pos:start="2373:28" pos:end="2373:28">&amp;</operator><name pos:start="2373:29" pos:end="2373:35">sha_ctx</name></expr></argument>, <argument pos:start="2373:38" pos:end="2373:46"><expr pos:start="2373:38" pos:end="2373:46"><name pos:start="2373:38" pos:end="2373:46">key_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="2375:9" pos:end="2375:23">/* Check MIC */</comment>
        <expr_stmt pos:start="2376:9" pos:end="2376:57"><expr pos:start="2376:9" pos:end="2376:56"><call pos:start="2376:9" pos:end="2376:56"><name pos:start="2376:9" pos:end="2376:31">aes_cmac_encrypt_starts</name><argument_list pos:start="2376:32" pos:end="2376:56">(<argument pos:start="2376:33" pos:end="2376:40"><expr pos:start="2376:33" pos:end="2376:40"><operator pos:start="2376:33" pos:end="2376:33">&amp;</operator><name pos:start="2376:34" pos:end="2376:40">aes_ctx</name></expr></argument>, <argument pos:start="2376:43" pos:end="2376:51"><expr pos:start="2376:43" pos:end="2376:51"><name pos:start="2376:43" pos:end="2376:51">key_input</name></expr></argument>, <argument pos:start="2376:54" pos:end="2376:55"><expr pos:start="2376:54" pos:end="2376:55"><literal type="number" pos:start="2376:54" pos:end="2376:55">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2377:9" pos:end="2377:71"><expr pos:start="2377:9" pos:end="2377:70"><call pos:start="2377:9" pos:end="2377:70"><name pos:start="2377:9" pos:end="2377:31">aes_cmac_encrypt_update</name><argument_list pos:start="2377:32" pos:end="2377:70">(<argument pos:start="2377:33" pos:end="2377:40"><expr pos:start="2377:33" pos:end="2377:40"><operator pos:start="2377:33" pos:end="2377:33">&amp;</operator><name pos:start="2377:34" pos:end="2377:40">aes_ctx</name></expr></argument>, <argument pos:start="2377:43" pos:end="2377:51"><expr pos:start="2377:43" pos:end="2377:51"><name pos:start="2377:43" pos:end="2377:51">initiator</name></expr></argument>, <argument pos:start="2377:54" pos:end="2377:69"><expr pos:start="2377:54" pos:end="2377:69"><name pos:start="2377:54" pos:end="2377:69">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2378:9" pos:end="2378:71"><expr pos:start="2378:9" pos:end="2378:70"><call pos:start="2378:9" pos:end="2378:70"><name pos:start="2378:9" pos:end="2378:31">aes_cmac_encrypt_update</name><argument_list pos:start="2378:32" pos:end="2378:70">(<argument pos:start="2378:33" pos:end="2378:40"><expr pos:start="2378:33" pos:end="2378:40"><operator pos:start="2378:33" pos:end="2378:33">&amp;</operator><name pos:start="2378:34" pos:end="2378:40">aes_ctx</name></expr></argument>, <argument pos:start="2378:43" pos:end="2378:51"><expr pos:start="2378:43" pos:end="2378:51"><name pos:start="2378:43" pos:end="2378:51">responder</name></expr></argument>, <argument pos:start="2378:54" pos:end="2378:69"><expr pos:start="2378:54" pos:end="2378:69"><name pos:start="2378:54" pos:end="2378:69">AIRPDCAP_MAC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2379:9" pos:end="2379:55"><expr pos:start="2379:9" pos:end="2379:54"><call pos:start="2379:9" pos:end="2379:54"><name pos:start="2379:9" pos:end="2379:31">aes_cmac_encrypt_update</name><argument_list pos:start="2379:32" pos:end="2379:54">(<argument pos:start="2379:33" pos:end="2379:40"><expr pos:start="2379:33" pos:end="2379:40"><operator pos:start="2379:33" pos:end="2379:33">&amp;</operator><name pos:start="2379:34" pos:end="2379:40">aes_ctx</name></expr></argument>, <argument pos:start="2379:43" pos:end="2379:50"><expr pos:start="2379:43" pos:end="2379:50"><operator pos:start="2379:43" pos:end="2379:43">&amp;</operator><name pos:start="2379:44" pos:end="2379:50">seq_num</name></expr></argument>, <argument pos:start="2379:53" pos:end="2379:53"><expr pos:start="2379:53" pos:end="2379:53"><literal type="number" pos:start="2379:53" pos:end="2379:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2380:9" pos:end="2380:89"><expr pos:start="2380:9" pos:end="2380:88"><call pos:start="2380:9" pos:end="2380:88"><name pos:start="2380:9" pos:end="2380:31">aes_cmac_encrypt_update</name><argument_list pos:start="2380:32" pos:end="2380:88">(<argument pos:start="2380:33" pos:end="2380:40"><expr pos:start="2380:33" pos:end="2380:40"><operator pos:start="2380:33" pos:end="2380:33">&amp;</operator><name pos:start="2380:34" pos:end="2380:40">aes_ctx</name></expr></argument>, <argument pos:start="2380:43" pos:end="2380:60"><expr pos:start="2380:43" pos:end="2380:60"><operator pos:start="2380:43" pos:end="2380:43">&amp;</operator><name pos:start="2380:44" pos:end="2380:60"><name pos:start="2380:44" pos:end="2380:47">data</name><index pos:start="2380:48" pos:end="2380:60">[<expr pos:start="2380:49" pos:end="2380:59"><name pos:start="2380:49" pos:end="2380:59">offset_link</name></expr>]</index></name></expr></argument>, <argument pos:start="2380:63" pos:end="2380:87"><expr pos:start="2380:63" pos:end="2380:87"><name pos:start="2380:63" pos:end="2380:83"><name pos:start="2380:63" pos:end="2380:66">data</name><index pos:start="2380:67" pos:end="2380:83">[<expr pos:start="2380:68" pos:end="2380:82"><name pos:start="2380:68" pos:end="2380:78">offset_link</name> <operator pos:start="2380:80" pos:end="2380:80">+</operator> <literal type="number" pos:start="2380:82" pos:end="2380:82">1</literal></expr>]</index></name> <operator pos:start="2380:85" pos:end="2380:85">+</operator> <literal type="number" pos:start="2380:87" pos:end="2380:87">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2381:9" pos:end="2381:89"><expr pos:start="2381:9" pos:end="2381:88"><call pos:start="2381:9" pos:end="2381:88"><name pos:start="2381:9" pos:end="2381:31">aes_cmac_encrypt_update</name><argument_list pos:start="2381:32" pos:end="2381:88">(<argument pos:start="2381:33" pos:end="2381:40"><expr pos:start="2381:33" pos:end="2381:40"><operator pos:start="2381:33" pos:end="2381:33">&amp;</operator><name pos:start="2381:34" pos:end="2381:40">aes_ctx</name></expr></argument>, <argument pos:start="2381:43" pos:end="2381:60"><expr pos:start="2381:43" pos:end="2381:60"><operator pos:start="2381:43" pos:end="2381:43">&amp;</operator><name pos:start="2381:44" pos:end="2381:60"><name pos:start="2381:44" pos:end="2381:47">data</name><index pos:start="2381:48" pos:end="2381:60">[<expr pos:start="2381:49" pos:end="2381:59"><name pos:start="2381:49" pos:end="2381:59">offset_rsne</name></expr>]</index></name></expr></argument>, <argument pos:start="2381:63" pos:end="2381:87"><expr pos:start="2381:63" pos:end="2381:87"><name pos:start="2381:63" pos:end="2381:83"><name pos:start="2381:63" pos:end="2381:66">data</name><index pos:start="2381:67" pos:end="2381:83">[<expr pos:start="2381:68" pos:end="2381:82"><name pos:start="2381:68" pos:end="2381:78">offset_rsne</name> <operator pos:start="2381:80" pos:end="2381:80">+</operator> <literal type="number" pos:start="2381:82" pos:end="2381:82">1</literal></expr>]</index></name> <operator pos:start="2381:85" pos:end="2381:85">+</operator> <literal type="number" pos:start="2381:87" pos:end="2381:87">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2382:9" pos:end="2382:95"><expr pos:start="2382:9" pos:end="2382:94"><call pos:start="2382:9" pos:end="2382:94"><name pos:start="2382:9" pos:end="2382:31">aes_cmac_encrypt_update</name><argument_list pos:start="2382:32" pos:end="2382:94">(<argument pos:start="2382:33" pos:end="2382:40"><expr pos:start="2382:33" pos:end="2382:40"><operator pos:start="2382:33" pos:end="2382:33">&amp;</operator><name pos:start="2382:34" pos:end="2382:40">aes_ctx</name></expr></argument>, <argument pos:start="2382:43" pos:end="2382:63"><expr pos:start="2382:43" pos:end="2382:63"><operator pos:start="2382:43" pos:end="2382:43">&amp;</operator><name pos:start="2382:44" pos:end="2382:63"><name pos:start="2382:44" pos:end="2382:47">data</name><index pos:start="2382:48" pos:end="2382:63">[<expr pos:start="2382:49" pos:end="2382:62"><name pos:start="2382:49" pos:end="2382:62">offset_timeout</name></expr>]</index></name></expr></argument>, <argument pos:start="2382:66" pos:end="2382:93"><expr pos:start="2382:66" pos:end="2382:93"><name pos:start="2382:66" pos:end="2382:89"><name pos:start="2382:66" pos:end="2382:69">data</name><index pos:start="2382:70" pos:end="2382:89">[<expr pos:start="2382:71" pos:end="2382:88"><name pos:start="2382:71" pos:end="2382:84">offset_timeout</name> <operator pos:start="2382:86" pos:end="2382:86">+</operator> <literal type="number" pos:start="2382:88" pos:end="2382:88">1</literal></expr>]</index></name> <operator pos:start="2382:91" pos:end="2382:91">+</operator> <literal type="number" pos:start="2382:93" pos:end="2382:93">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2383:9" pos:end="2383:64"><expr pos:start="2383:9" pos:end="2383:63"><call pos:start="2383:9" pos:end="2383:63"><name pos:start="2383:9" pos:end="2383:31">aes_cmac_encrypt_update</name><argument_list pos:start="2383:32" pos:end="2383:63">(<argument pos:start="2383:33" pos:end="2383:40"><expr pos:start="2383:33" pos:end="2383:40"><operator pos:start="2383:33" pos:end="2383:33">&amp;</operator><name pos:start="2383:34" pos:end="2383:40">aes_ctx</name></expr></argument>, <argument pos:start="2383:43" pos:end="2383:59"><expr pos:start="2383:43" pos:end="2383:59"><operator pos:start="2383:43" pos:end="2383:43">&amp;</operator><name pos:start="2383:44" pos:end="2383:59"><name pos:start="2383:44" pos:end="2383:47">data</name><index pos:start="2383:48" pos:end="2383:59">[<expr pos:start="2383:49" pos:end="2383:58"><name pos:start="2383:49" pos:end="2383:58">offset_fte</name></expr>]</index></name></expr></argument>, <argument pos:start="2383:62" pos:end="2383:62"><expr pos:start="2383:62" pos:end="2383:62"><literal type="number" pos:start="2383:62" pos:end="2383:62">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2384:9" pos:end="2384:27"><expr pos:start="2384:9" pos:end="2384:26"><call pos:start="2384:9" pos:end="2384:26"><name pos:start="2384:9" pos:end="2384:14">memset</name><argument_list pos:start="2384:15" pos:end="2384:26">(<argument pos:start="2384:16" pos:end="2384:18"><expr pos:start="2384:16" pos:end="2384:18"><name pos:start="2384:16" pos:end="2384:18">mic</name></expr></argument>, <argument pos:start="2384:21" pos:end="2384:21"><expr pos:start="2384:21" pos:end="2384:21"><literal type="number" pos:start="2384:21" pos:end="2384:21">0</literal></expr></argument>, <argument pos:start="2384:24" pos:end="2384:25"><expr pos:start="2384:24" pos:end="2384:25"><literal type="number" pos:start="2384:24" pos:end="2384:25">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2385:9" pos:end="2385:51"><expr pos:start="2385:9" pos:end="2385:50"><call pos:start="2385:9" pos:end="2385:50"><name pos:start="2385:9" pos:end="2385:31">aes_cmac_encrypt_update</name><argument_list pos:start="2385:32" pos:end="2385:50">(<argument pos:start="2385:33" pos:end="2385:40"><expr pos:start="2385:33" pos:end="2385:40"><operator pos:start="2385:33" pos:end="2385:33">&amp;</operator><name pos:start="2385:34" pos:end="2385:40">aes_ctx</name></expr></argument>, <argument pos:start="2385:43" pos:end="2385:45"><expr pos:start="2385:43" pos:end="2385:45"><name pos:start="2385:43" pos:end="2385:45">mic</name></expr></argument>, <argument pos:start="2385:48" pos:end="2385:49"><expr pos:start="2385:48" pos:end="2385:49"><literal type="number" pos:start="2385:48" pos:end="2385:49">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2386:9" pos:end="2386:97"><expr pos:start="2386:9" pos:end="2386:96"><call pos:start="2386:9" pos:end="2386:96"><name pos:start="2386:9" pos:end="2386:31">aes_cmac_encrypt_update</name><argument_list pos:start="2386:32" pos:end="2386:96">(<argument pos:start="2386:33" pos:end="2386:40"><expr pos:start="2386:33" pos:end="2386:40"><operator pos:start="2386:33" pos:end="2386:33">&amp;</operator><name pos:start="2386:34" pos:end="2386:40">aes_ctx</name></expr></argument>, <argument pos:start="2386:43" pos:end="2386:64"><expr pos:start="2386:43" pos:end="2386:64"><operator pos:start="2386:43" pos:end="2386:43">&amp;</operator><name pos:start="2386:44" pos:end="2386:64"><name pos:start="2386:44" pos:end="2386:47">data</name><index pos:start="2386:48" pos:end="2386:64">[<expr pos:start="2386:49" pos:end="2386:63"><name pos:start="2386:49" pos:end="2386:58">offset_fte</name> <operator pos:start="2386:60" pos:end="2386:60">+</operator> <literal type="number" pos:start="2386:62" pos:end="2386:63">20</literal></expr>]</index></name></expr></argument>, <argument pos:start="2386:67" pos:end="2386:95"><expr pos:start="2386:67" pos:end="2386:95"><name pos:start="2386:67" pos:end="2386:86"><name pos:start="2386:67" pos:end="2386:70">data</name><index pos:start="2386:71" pos:end="2386:86">[<expr pos:start="2386:72" pos:end="2386:85"><name pos:start="2386:72" pos:end="2386:81">offset_fte</name> <operator pos:start="2386:83" pos:end="2386:83">+</operator> <literal type="number" pos:start="2386:85" pos:end="2386:85">1</literal></expr>]</index></name> <operator pos:start="2386:88" pos:end="2386:88">+</operator> <literal type="number" pos:start="2386:90" pos:end="2386:92">2</literal> <operator pos:start="2386:92" pos:end="2386:92">-</operator> <literal type="number" pos:start="2386:94" pos:end="2386:95">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2387:9" pos:end="2387:47"><expr pos:start="2387:9" pos:end="2387:46"><call pos:start="2387:9" pos:end="2387:46"><name pos:start="2387:9" pos:end="2387:31">aes_cmac_encrypt_finish</name><argument_list pos:start="2387:32" pos:end="2387:46">(<argument pos:start="2387:33" pos:end="2387:40"><expr pos:start="2387:33" pos:end="2387:40"><operator pos:start="2387:33" pos:end="2387:33">&amp;</operator><name pos:start="2387:34" pos:end="2387:40">aes_ctx</name></expr></argument>, <argument pos:start="2387:43" pos:end="2387:45"><expr pos:start="2387:43" pos:end="2387:45"><name pos:start="2387:43" pos:end="2387:45">mic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2389:9" pos:end="2393:9"><if pos:start="2389:9" pos:end="2393:9">if <condition pos:start="2389:12" pos:end="2389:51">(<expr pos:start="2389:13" pos:end="2389:50"><call pos:start="2389:13" pos:end="2389:50"><name pos:start="2389:13" pos:end="2389:18">memcmp</name><argument_list pos:start="2389:19" pos:end="2389:50">(<argument pos:start="2389:20" pos:end="2389:22"><expr pos:start="2389:20" pos:end="2389:22"><name pos:start="2389:20" pos:end="2389:22">mic</name></expr></argument>, <argument pos:start="2389:25" pos:end="2389:45"><expr pos:start="2389:25" pos:end="2389:45"><operator pos:start="2389:25" pos:end="2389:25">&amp;</operator><name pos:start="2389:26" pos:end="2389:45"><name pos:start="2389:26" pos:end="2389:29">data</name><index pos:start="2389:30" pos:end="2389:45">[<expr pos:start="2389:31" pos:end="2389:44"><name pos:start="2389:31" pos:end="2389:40">offset_fte</name> <operator pos:start="2389:42" pos:end="2389:42">+</operator> <literal type="number" pos:start="2389:44" pos:end="2389:44">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="2389:48" pos:end="2389:49"><expr pos:start="2389:48" pos:end="2389:49"><literal type="number" pos:start="2389:48" pos:end="2389:49">16</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block pos:start="2390:9" pos:end="2393:9">{<block_content pos:start="2391:13" pos:end="2392:42">
            <expr_stmt pos:start="2391:13" pos:end="2391:114"><expr pos:start="2391:13" pos:end="2391:113"><call pos:start="2391:13" pos:end="2391:113"><name pos:start="2391:13" pos:end="2391:37">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="2391:38" pos:end="2391:113">(<argument pos:start="2391:39" pos:end="2391:61"><expr pos:start="2391:39" pos:end="2391:61"><literal type="string" pos:start="2391:39" pos:end="2391:61">"AirPDcapTDLSDeriveKey"</literal></expr></argument>, <argument pos:start="2391:64" pos:end="2391:88"><expr pos:start="2391:64" pos:end="2391:88"><literal type="string" pos:start="2391:64" pos:end="2391:88">"MIC verification failed"</literal></expr></argument>, <argument pos:start="2391:91" pos:end="2391:112"><expr pos:start="2391:91" pos:end="2391:112"><name pos:start="2391:91" pos:end="2391:112">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2392:13" pos:end="2392:42">return <expr pos:start="2392:20" pos:end="2392:41"><name pos:start="2392:20" pos:end="2392:41">AIRPDCAP_RET_UNSUCCESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2395:9" pos:end="2395:65"><expr pos:start="2395:9" pos:end="2395:64"><call pos:start="2395:9" pos:end="2395:64"><name pos:start="2395:9" pos:end="2395:14">memcpy</name><argument_list pos:start="2395:15" pos:end="2395:64">(<argument pos:start="2395:16" pos:end="2395:43"><expr pos:start="2395:16" pos:end="2395:43"><call pos:start="2395:16" pos:end="2395:43"><name pos:start="2395:16" pos:end="2395:30">AIRPDCAP_GET_TK</name><argument_list pos:start="2395:31" pos:end="2395:43">(<argument pos:start="2395:32" pos:end="2395:42"><expr pos:start="2395:32" pos:end="2395:42"><name pos:start="2395:32" pos:end="2395:42"><name pos:start="2395:32" pos:end="2395:33">sa</name><operator pos:start="2395:34" pos:end="2395:35">-&gt;</operator><name pos:start="2395:36" pos:end="2395:38">wpa</name><operator pos:start="2395:39" pos:end="2395:39">.</operator><name pos:start="2395:40" pos:end="2395:42">ptk</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2395:46" pos:end="2395:59"><expr pos:start="2395:46" pos:end="2395:59"><operator pos:start="2395:46" pos:end="2395:46">&amp;</operator><name pos:start="2395:47" pos:end="2395:59"><name pos:start="2395:47" pos:end="2395:55">key_input</name><index pos:start="2395:56" pos:end="2395:59">[<expr pos:start="2395:57" pos:end="2395:58"><literal type="number" pos:start="2395:57" pos:end="2395:58">16</literal></expr>]</index></name></expr></argument>, <argument pos:start="2395:62" pos:end="2395:63"><expr pos:start="2395:62" pos:end="2395:63"><literal type="number" pos:start="2395:62" pos:end="2395:63">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2396:9" pos:end="2396:62"><expr pos:start="2396:9" pos:end="2396:61"><call pos:start="2396:9" pos:end="2396:61"><name pos:start="2396:9" pos:end="2396:14">memcpy</name><argument_list pos:start="2396:15" pos:end="2396:61">(<argument pos:start="2396:16" pos:end="2396:28"><expr pos:start="2396:16" pos:end="2396:28"><name pos:start="2396:16" pos:end="2396:28"><name pos:start="2396:16" pos:end="2396:17">sa</name><operator pos:start="2396:18" pos:end="2396:19">-&gt;</operator><name pos:start="2396:20" pos:end="2396:22">wpa</name><operator pos:start="2396:23" pos:end="2396:23">.</operator><name pos:start="2396:24" pos:end="2396:28">nonce</name></name></expr></argument>, <argument pos:start="2396:31" pos:end="2396:36"><expr pos:start="2396:31" pos:end="2396:36"><name pos:start="2396:31" pos:end="2396:36">snonce</name></expr></argument>, <argument pos:start="2396:39" pos:end="2396:60"><expr pos:start="2396:39" pos:end="2396:60"><name pos:start="2396:39" pos:end="2396:60">AIRPDCAP_WPA_NONCE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2397:9" pos:end="2397:28"><expr pos:start="2397:9" pos:end="2397:27"><name pos:start="2397:9" pos:end="2397:20"><name pos:start="2397:9" pos:end="2397:10">sa</name><operator pos:start="2397:11" pos:end="2397:12">-&gt;</operator><name pos:start="2397:13" pos:end="2397:20">validKey</name></name> <operator pos:start="2397:22" pos:end="2397:22">=</operator> <name pos:start="2397:24" pos:end="2397:27">TRUE</name></expr>;</expr_stmt>
        <expr_stmt pos:start="2398:9" pos:end="2398:56"><expr pos:start="2398:9" pos:end="2398:55"><name pos:start="2398:9" pos:end="2398:23"><name pos:start="2398:9" pos:end="2398:10">sa</name><operator pos:start="2398:11" pos:end="2398:12">-&gt;</operator><name pos:start="2398:13" pos:end="2398:15">wpa</name><operator pos:start="2398:16" pos:end="2398:16">.</operator><name pos:start="2398:17" pos:end="2398:23">key_ver</name></name> <operator pos:start="2398:25" pos:end="2398:25">=</operator> <name pos:start="2398:27" pos:end="2398:55">AIRPDCAP_WPA_KEY_VER_AES_CCMP</name></expr>;</expr_stmt>
        <expr_stmt pos:start="2399:9" pos:end="2399:99"><expr pos:start="2399:9" pos:end="2399:98"><call pos:start="2399:9" pos:end="2399:98"><name pos:start="2399:9" pos:end="2399:33">AIRPDCAP_DEBUG_PRINT_LINE</name><argument_list pos:start="2399:34" pos:end="2399:98">(<argument pos:start="2399:35" pos:end="2399:57"><expr pos:start="2399:35" pos:end="2399:57"><literal type="string" pos:start="2399:35" pos:end="2399:57">"AirPDcapTDLSDeriveKey"</literal></expr></argument>, <argument pos:start="2399:60" pos:end="2399:73"><expr pos:start="2399:60" pos:end="2399:73"><literal type="string" pos:start="2399:60" pos:end="2399:73">"MIC verified"</literal></expr></argument>, <argument pos:start="2399:76" pos:end="2399:97"><expr pos:start="2399:76" pos:end="2399:97"><name pos:start="2399:76" pos:end="2399:97">AIRPDCAP_DEBUG_LEVEL_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2400:9" pos:end="2400:36">return <expr pos:start="2400:16" pos:end="2400:35"><name pos:start="2400:16" pos:end="2400:35">AIRPDCAP_RET_SUCCESS</name></expr>;</return>
    </block_content>}</block></function>

<cpp:ifdef pos:start="2403:1" pos:end="2403:18">#<cpp:directive pos:start="2403:2" pos:end="2403:6">ifdef</cpp:directive> <name pos:start="2403:8" pos:end="2403:18">__cplusplus</name></cpp:ifdef>
</block_content>}</block></extern>
<cpp:endif pos:start="2405:1" pos:end="2405:6">#<cpp:directive pos:start="2405:2" pos:end="2405:6">endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen" pos:start="2407:1" pos:end="2407:78">/****************************************************************************/</comment>

<comment type="block" pos:start="2409:1" pos:end="2420:3">/*
 * Editor modelines
 *
 * Local Variables:
 * c-basic-offset: 4
 * tab-width: 8
 * indent-tabs-mode: nil
 * End:
 *
 * ex: set shiftwidth=4 tabstop=8 expandtab:
 * :indentSize=4:tabSize=8:noTabs=true:
 */</comment>
</unit>
