<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="program_file/code_data\test.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="5:3">/*
 * Process version 2 NFSACL requests.
 *
 * Copyright (C) 2002-2003 Andreas Gruenbacher &lt;agruen@suse.de&gt;
 */</comment>

<cpp:include pos:start="7:1" pos:end="7:17">#<cpp:directive pos:start="7:2" pos:end="7:8">include</cpp:directive> <cpp:file pos:start="7:10" pos:end="7:17">"nfsd.h"</cpp:file></cpp:include>
<comment type="block" pos:start="8:1" pos:end="8:40">/* FIXME: nfsacl.h is a broken header */</comment>
<cpp:include pos:start="9:1" pos:end="9:25">#<cpp:directive pos:start="9:2" pos:end="9:8">include</cpp:directive> <cpp:file pos:start="9:10" pos:end="9:25">&lt;linux/nfsacl.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="10:1" pos:end="10:22">#<cpp:directive pos:start="10:2" pos:end="10:8">include</cpp:directive> <cpp:file pos:start="10:10" pos:end="10:22">&lt;linux/gfp.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="11:1" pos:end="11:18">#<cpp:directive pos:start="11:2" pos:end="11:8">include</cpp:directive> <cpp:file pos:start="11:10" pos:end="11:18">"cache.h"</cpp:file></cpp:include>
<cpp:include pos:start="12:1" pos:end="12:17">#<cpp:directive pos:start="12:2" pos:end="12:8">include</cpp:directive> <cpp:file pos:start="12:10" pos:end="12:17">"xdr3.h"</cpp:file></cpp:include>
<cpp:include pos:start="13:1" pos:end="13:16">#<cpp:directive pos:start="13:2" pos:end="13:8">include</cpp:directive> <cpp:file pos:start="13:10" pos:end="13:16">"vfs.h"</cpp:file></cpp:include>

<cpp:define pos:start="15:1" pos:end="15:52">#<cpp:directive pos:start="15:2" pos:end="15:7">define</cpp:directive> <cpp:macro pos:start="15:9" pos:end="15:24"><name pos:start="15:9" pos:end="15:24">NFSDDBG_FACILITY</name></cpp:macro>		<cpp:value pos:start="15:41" pos:end="15:52">NFSDDBG_PROC</cpp:value></cpp:define>
<cpp:define pos:start="16:1" pos:end="16:69">#<cpp:directive pos:start="16:2" pos:end="16:7">define</cpp:directive> <cpp:macro pos:start="16:9" pos:end="16:25"><name pos:start="16:9" pos:end="16:21">RETURN_STATUS</name><parameter_list pos:start="16:22" pos:end="16:25">(<parameter pos:start="16:23" pos:end="16:24"><type pos:start="16:23" pos:end="16:24"><name pos:start="16:23" pos:end="16:24">st</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value pos:start="16:33" pos:end="16:69">{ resp-&gt;status = (st); return (st); }</cpp:value></cpp:define>

<comment type="block" pos:start="18:1" pos:end="20:3">/*
 * NULL call.
 */</comment>
<function pos:start="21:1" pos:end="25:1"><type pos:start="21:1" pos:end="21:13"><specifier pos:start="21:1" pos:end="21:6">static</specifier> <name pos:start="21:8" pos:end="21:13">__be32</name></type>
<name pos:start="22:1" pos:end="22:17">nfsacld_proc_null</name><parameter_list pos:start="22:18" pos:end="22:65">(<parameter pos:start="22:19" pos:end="22:40"><decl pos:start="22:19" pos:end="22:40"><type pos:start="22:19" pos:end="22:40"><name pos:start="22:19" pos:end="22:33"><name pos:start="22:19" pos:end="22:24">struct</name> <name pos:start="22:26" pos:end="22:33">svc_rqst</name></name> <modifier pos:start="22:35" pos:end="22:35">*</modifier></type><name pos:start="22:36" pos:end="22:40">rqstp</name></decl></parameter>, <parameter pos:start="22:43" pos:end="22:52"><decl pos:start="22:43" pos:end="22:52"><type pos:start="22:43" pos:end="22:52"><name pos:start="22:43" pos:end="22:46">void</name> <modifier pos:start="22:48" pos:end="22:48">*</modifier></type><name pos:start="22:49" pos:end="22:52">argp</name></decl></parameter>, <parameter pos:start="22:55" pos:end="22:64"><decl pos:start="22:55" pos:end="22:64"><type pos:start="22:55" pos:end="22:64"><name pos:start="22:55" pos:end="22:58">void</name> <modifier pos:start="22:60" pos:end="22:60">*</modifier></type><name pos:start="22:61" pos:end="22:64">resp</name></decl></parameter>)</parameter_list>
<block pos:start="23:1" pos:end="25:1">{<block_content pos:start="24:9" pos:end="24:22">
	<return pos:start="24:9" pos:end="24:22">return <expr pos:start="24:16" pos:end="24:21"><name pos:start="24:16" pos:end="24:21">nfs_ok</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="27:1" pos:end="29:3">/*
 * Get the Access and/or Default ACL of a file.
 */</comment>
<function pos:start="30:1" pos:end="85:1"><type pos:start="30:1" pos:end="30:13"><specifier pos:start="30:1" pos:end="30:6">static</specifier> <name pos:start="30:8" pos:end="30:13">__be32</name></type> <name pos:start="30:15" pos:end="30:33">nfsacld_proc_getacl</name><parameter_list pos:start="30:34" pos:end="31:76">(<parameter pos:start="30:35" pos:end="30:57"><decl pos:start="30:35" pos:end="30:57"><type pos:start="30:35" pos:end="30:57"><name pos:start="30:35" pos:end="30:49"><name pos:start="30:35" pos:end="30:40">struct</name> <name pos:start="30:42" pos:end="30:49">svc_rqst</name></name> <modifier pos:start="30:51" pos:end="30:51">*</modifier></type> <name pos:start="30:53" pos:end="30:57">rqstp</name></decl></parameter>,
		<parameter pos:start="31:17" pos:end="31:45"><decl pos:start="31:17" pos:end="31:45"><type pos:start="31:17" pos:end="31:45"><name pos:start="31:17" pos:end="31:39"><name pos:start="31:17" pos:end="31:22">struct</name> <name pos:start="31:24" pos:end="31:39">nfsd3_getaclargs</name></name> <modifier pos:start="31:41" pos:end="31:41">*</modifier></type><name pos:start="31:42" pos:end="31:45">argp</name></decl></parameter>, <parameter pos:start="31:48" pos:end="31:75"><decl pos:start="31:48" pos:end="31:75"><type pos:start="31:48" pos:end="31:75"><name pos:start="31:48" pos:end="31:69"><name pos:start="31:48" pos:end="31:53">struct</name> <name pos:start="31:55" pos:end="31:69">nfsd3_getaclres</name></name> <modifier pos:start="31:71" pos:end="31:71">*</modifier></type><name pos:start="31:72" pos:end="31:75">resp</name></decl></parameter>)</parameter_list>
<block pos:start="32:1" pos:end="85:1">{<block_content pos:start="33:9" pos:end="84:30">
	<decl_stmt pos:start="33:9" pos:end="33:30"><decl pos:start="33:9" pos:end="33:29"><type pos:start="33:9" pos:end="33:26"><name pos:start="33:9" pos:end="33:24"><name pos:start="33:9" pos:end="33:14">struct</name> <name pos:start="33:16" pos:end="33:24">posix_acl</name></name> <modifier pos:start="33:26" pos:end="33:26">*</modifier></type><name pos:start="33:27" pos:end="33:29">acl</name></decl>;</decl_stmt>
	<decl_stmt pos:start="34:9" pos:end="34:28"><decl pos:start="34:9" pos:end="34:27"><type pos:start="34:9" pos:end="34:22"><name pos:start="34:9" pos:end="34:20"><name pos:start="34:9" pos:end="34:14">struct</name> <name pos:start="34:16" pos:end="34:20">inode</name></name> <modifier pos:start="34:22" pos:end="34:22">*</modifier></type><name pos:start="34:23" pos:end="34:27">inode</name></decl>;</decl_stmt>
	<decl_stmt pos:start="35:9" pos:end="35:19"><decl pos:start="35:9" pos:end="35:18"><type pos:start="35:9" pos:end="35:16"><name pos:start="35:9" pos:end="35:14">svc_fh</name> <modifier pos:start="35:16" pos:end="35:16">*</modifier></type><name pos:start="35:17" pos:end="35:18">fh</name></decl>;</decl_stmt>
	<decl_stmt pos:start="36:9" pos:end="36:26"><decl pos:start="36:9" pos:end="36:25"><type pos:start="36:9" pos:end="36:14"><name pos:start="36:9" pos:end="36:14">__be32</name></type> <name pos:start="36:16" pos:end="36:21">nfserr</name> <init pos:start="36:23" pos:end="36:25">= <expr pos:start="36:25" pos:end="36:25"><literal type="number" pos:start="36:25" pos:end="36:25">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt pos:start="38:9" pos:end="38:67"><expr pos:start="38:9" pos:end="38:66"><call pos:start="38:9" pos:end="38:66"><name pos:start="38:9" pos:end="38:15">dprintk</name><argument_list pos:start="38:16" pos:end="38:66">(<argument pos:start="38:17" pos:end="38:43"><expr pos:start="38:17" pos:end="38:43"><literal type="string" pos:start="38:17" pos:end="38:43">"nfsd: GETACL(2acl)   %s\n"</literal></expr></argument>, <argument pos:start="38:46" pos:end="38:65"><expr pos:start="38:46" pos:end="38:65"><call pos:start="38:46" pos:end="38:65"><name pos:start="38:46" pos:end="38:54">SVCFH_fmt</name><argument_list pos:start="38:55" pos:end="38:65">(<argument pos:start="38:56" pos:end="38:64"><expr pos:start="38:56" pos:end="38:64"><operator pos:start="38:56" pos:end="38:56">&amp;</operator><name pos:start="38:57" pos:end="38:64"><name pos:start="38:57" pos:end="38:60">argp</name><operator pos:start="38:61" pos:end="38:62">-&gt;</operator><name pos:start="38:63" pos:end="38:64">fh</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="40:9" pos:end="40:43"><expr pos:start="40:9" pos:end="40:42"><name pos:start="40:9" pos:end="40:10">fh</name> <operator pos:start="40:12" pos:end="40:12">=</operator> <call pos:start="40:14" pos:end="40:42"><name pos:start="40:14" pos:end="40:20">fh_copy</name><argument_list pos:start="40:21" pos:end="40:42">(<argument pos:start="40:22" pos:end="40:30"><expr pos:start="40:22" pos:end="40:30"><operator pos:start="40:22" pos:end="40:22">&amp;</operator><name pos:start="40:23" pos:end="40:30"><name pos:start="40:23" pos:end="40:26">resp</name><operator pos:start="40:27" pos:end="40:28">-&gt;</operator><name pos:start="40:29" pos:end="40:30">fh</name></name></expr></argument>, <argument pos:start="40:33" pos:end="40:41"><expr pos:start="40:33" pos:end="40:41"><operator pos:start="40:33" pos:end="40:33">&amp;</operator><name pos:start="40:34" pos:end="40:41"><name pos:start="40:34" pos:end="40:37">argp</name><operator pos:start="40:38" pos:end="40:39">-&gt;</operator><name pos:start="40:40" pos:end="40:41">fh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="41:9" pos:end="41:62"><expr pos:start="41:9" pos:end="41:61"><name pos:start="41:9" pos:end="41:14">nfserr</name> <operator pos:start="41:16" pos:end="41:16">=</operator> <call pos:start="41:18" pos:end="41:61"><name pos:start="41:18" pos:end="41:26">fh_verify</name><argument_list pos:start="41:27" pos:end="41:61">(<argument pos:start="41:28" pos:end="41:32"><expr pos:start="41:28" pos:end="41:32"><name pos:start="41:28" pos:end="41:32">rqstp</name></expr></argument>, <argument pos:start="41:35" pos:end="41:43"><expr pos:start="41:35" pos:end="41:43"><operator pos:start="41:35" pos:end="41:35">&amp;</operator><name pos:start="41:36" pos:end="41:43"><name pos:start="41:36" pos:end="41:39">resp</name><operator pos:start="41:40" pos:end="41:41">-&gt;</operator><name pos:start="41:42" pos:end="41:43">fh</name></name></expr></argument>, <argument pos:start="41:46" pos:end="41:46"><expr pos:start="41:46" pos:end="41:46"><literal type="number" pos:start="41:46" pos:end="41:46">0</literal></expr></argument>, <argument pos:start="41:49" pos:end="41:60"><expr pos:start="41:49" pos:end="41:60"><name pos:start="41:49" pos:end="41:60">NFSD_MAY_NOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="42:9" pos:end="43:38"><if pos:start="42:9" pos:end="43:38">if <condition pos:start="42:12" pos:end="42:19">(<expr pos:start="42:13" pos:end="42:18"><name pos:start="42:13" pos:end="42:18">nfserr</name></expr>)</condition><block type="pseudo" pos:start="43:17" pos:end="43:38"><block_content pos:start="43:17" pos:end="43:38">
		<expr_stmt pos:start="43:17" pos:end="43:38"><expr pos:start="43:17" pos:end="43:37"><call pos:start="43:17" pos:end="43:37"><name pos:start="43:17" pos:end="43:29">RETURN_STATUS</name><argument_list pos:start="43:30" pos:end="43:37">(<argument pos:start="43:31" pos:end="43:36"><expr pos:start="43:31" pos:end="43:36"><name pos:start="43:31" pos:end="43:36">nfserr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt pos:start="45:9" pos:end="45:39"><expr pos:start="45:9" pos:end="45:38"><name pos:start="45:9" pos:end="45:13">inode</name> <operator pos:start="45:15" pos:end="45:15">=</operator> <call pos:start="45:17" pos:end="45:38"><name pos:start="45:17" pos:end="45:23">d_inode</name><argument_list pos:start="45:24" pos:end="45:38">(<argument pos:start="45:25" pos:end="45:37"><expr pos:start="45:25" pos:end="45:37"><name pos:start="45:25" pos:end="45:37"><name pos:start="45:25" pos:end="45:26">fh</name><operator pos:start="45:27" pos:end="45:28">-&gt;</operator><name pos:start="45:29" pos:end="45:37">fh_dentry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="47:9" pos:end="48:44"><if pos:start="47:9" pos:end="48:44">if <condition pos:start="47:12" pos:end="47:39">(<expr pos:start="47:13" pos:end="47:38"><name pos:start="47:13" pos:end="47:22"><name pos:start="47:13" pos:end="47:16">argp</name><operator pos:start="47:17" pos:end="47:18">-&gt;</operator><name pos:start="47:19" pos:end="47:22">mask</name></name> <operator pos:start="47:24" pos:end="47:24">&amp;</operator> <operator pos:start="47:26" pos:end="47:26">~</operator><name pos:start="47:27" pos:end="47:38">NFS_ACL_MASK</name></expr>)</condition><block type="pseudo" pos:start="48:17" pos:end="48:44"><block_content pos:start="48:17" pos:end="48:44">
		<expr_stmt pos:start="48:17" pos:end="48:44"><expr pos:start="48:17" pos:end="48:43"><call pos:start="48:17" pos:end="48:43"><name pos:start="48:17" pos:end="48:29">RETURN_STATUS</name><argument_list pos:start="48:30" pos:end="48:43">(<argument pos:start="48:31" pos:end="48:42"><expr pos:start="48:31" pos:end="48:42"><name pos:start="48:31" pos:end="48:42">nfserr_inval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt pos:start="49:9" pos:end="49:32"><expr pos:start="49:9" pos:end="49:31"><name pos:start="49:9" pos:end="49:18"><name pos:start="49:9" pos:end="49:12">resp</name><operator pos:start="49:13" pos:end="49:14">-&gt;</operator><name pos:start="49:15" pos:end="49:18">mask</name></name> <operator pos:start="49:20" pos:end="49:20">=</operator> <name pos:start="49:22" pos:end="49:31"><name pos:start="49:22" pos:end="49:25">argp</name><operator pos:start="49:26" pos:end="49:27">-&gt;</operator><name pos:start="49:28" pos:end="49:31">mask</name></name></expr>;</expr_stmt>

	<expr_stmt pos:start="51:9" pos:end="51:45"><expr pos:start="51:9" pos:end="51:44"><name pos:start="51:9" pos:end="51:14">nfserr</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <call pos:start="51:18" pos:end="51:44"><name pos:start="51:18" pos:end="51:27">fh_getattr</name><argument_list pos:start="51:28" pos:end="51:44">(<argument pos:start="51:29" pos:end="51:30"><expr pos:start="51:29" pos:end="51:30"><name pos:start="51:29" pos:end="51:30">fh</name></expr></argument>, <argument pos:start="51:33" pos:end="51:43"><expr pos:start="51:33" pos:end="51:43"><operator pos:start="51:33" pos:end="51:33">&amp;</operator><name pos:start="51:34" pos:end="51:43"><name pos:start="51:34" pos:end="51:37">resp</name><operator pos:start="51:38" pos:end="51:39">-&gt;</operator><name pos:start="51:40" pos:end="51:43">stat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="52:9" pos:end="53:38"><if pos:start="52:9" pos:end="53:38">if <condition pos:start="52:12" pos:end="52:19">(<expr pos:start="52:13" pos:end="52:18"><name pos:start="52:13" pos:end="52:18">nfserr</name></expr>)</condition><block type="pseudo" pos:start="53:17" pos:end="53:38"><block_content pos:start="53:17" pos:end="53:38">
		<expr_stmt pos:start="53:17" pos:end="53:38"><expr pos:start="53:17" pos:end="53:37"><call pos:start="53:17" pos:end="53:37"><name pos:start="53:17" pos:end="53:29">RETURN_STATUS</name><argument_list pos:start="53:30" pos:end="53:37">(<argument pos:start="53:31" pos:end="53:36"><expr pos:start="53:31" pos:end="53:36"><name pos:start="53:31" pos:end="53:36">nfserr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt pos:start="55:9" pos:end="66:9"><if pos:start="55:9" pos:end="66:9">if <condition pos:start="55:12" pos:end="55:46">(<expr pos:start="55:13" pos:end="55:45"><name pos:start="55:13" pos:end="55:22"><name pos:start="55:13" pos:end="55:16">resp</name><operator pos:start="55:17" pos:end="55:18">-&gt;</operator><name pos:start="55:19" pos:end="55:22">mask</name></name> <operator pos:start="55:24" pos:end="55:24">&amp;</operator> <operator pos:start="55:26" pos:end="55:26">(</operator><name pos:start="55:27" pos:end="55:33">NFS_ACL</name><operator pos:start="55:34" pos:end="55:34">|</operator><name pos:start="55:35" pos:end="55:44">NFS_ACLCNT</name><operator pos:start="55:45" pos:end="55:45">)</operator></expr>)</condition> <block pos:start="55:48" pos:end="66:9">{<block_content pos:start="56:17" pos:end="65:39">
		<expr_stmt pos:start="56:17" pos:end="56:54"><expr pos:start="56:17" pos:end="56:53"><name pos:start="56:17" pos:end="56:19">acl</name> <operator pos:start="56:21" pos:end="56:21">=</operator> <call pos:start="56:23" pos:end="56:53"><name pos:start="56:23" pos:end="56:29">get_acl</name><argument_list pos:start="56:30" pos:end="56:53">(<argument pos:start="56:31" pos:end="56:35"><expr pos:start="56:31" pos:end="56:35"><name pos:start="56:31" pos:end="56:35">inode</name></expr></argument>, <argument pos:start="56:38" pos:end="56:52"><expr pos:start="56:38" pos:end="56:52"><name pos:start="56:38" pos:end="56:52">ACL_TYPE_ACCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt pos:start="57:17" pos:end="60:17"><if pos:start="57:17" pos:end="60:17">if <condition pos:start="57:20" pos:end="57:32">(<expr pos:start="57:21" pos:end="57:31"><name pos:start="57:21" pos:end="57:23">acl</name> <operator pos:start="57:25" pos:end="57:26">==</operator> <name pos:start="57:28" pos:end="57:31">NULL</name></expr>)</condition> <block pos:start="57:34" pos:end="60:17">{<block_content pos:start="59:25" pos:end="59:77">
			<comment type="block" pos:start="58:25" pos:end="58:70">/* Solaris returns the inode's minimum ACL. */</comment>
			<expr_stmt pos:start="59:25" pos:end="59:77"><expr pos:start="59:25" pos:end="59:76"><name pos:start="59:25" pos:end="59:27">acl</name> <operator pos:start="59:29" pos:end="59:29">=</operator> <call pos:start="59:31" pos:end="59:76"><name pos:start="59:31" pos:end="59:49">posix_acl_from_mode</name><argument_list pos:start="59:50" pos:end="59:76">(<argument pos:start="59:51" pos:end="59:63"><expr pos:start="59:51" pos:end="59:63"><name pos:start="59:51" pos:end="59:63"><name pos:start="59:51" pos:end="59:55">inode</name><operator pos:start="59:56" pos:end="59:57">-&gt;</operator><name pos:start="59:58" pos:end="59:63">i_mode</name></name></expr></argument>, <argument pos:start="59:66" pos:end="59:75"><expr pos:start="59:66" pos:end="59:75"><name pos:start="59:66" pos:end="59:75">GFP_KERNEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt pos:start="61:17" pos:end="64:17"><if pos:start="61:17" pos:end="64:17">if <condition pos:start="61:20" pos:end="61:32">(<expr pos:start="61:21" pos:end="61:31"><call pos:start="61:21" pos:end="61:31"><name pos:start="61:21" pos:end="61:26">IS_ERR</name><argument_list pos:start="61:27" pos:end="61:31">(<argument pos:start="61:28" pos:end="61:30"><expr pos:start="61:28" pos:end="61:30"><name pos:start="61:28" pos:end="61:30">acl</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:34" pos:end="64:17">{<block_content pos:start="62:25" pos:end="63:34">
			<expr_stmt pos:start="62:25" pos:end="62:56"><expr pos:start="62:25" pos:end="62:55"><name pos:start="62:25" pos:end="62:30">nfserr</name> <operator pos:start="62:32" pos:end="62:32">=</operator> <call pos:start="62:34" pos:end="62:55"><name pos:start="62:34" pos:end="62:41">nfserrno</name><argument_list pos:start="62:42" pos:end="62:55">(<argument pos:start="62:43" pos:end="62:54"><expr pos:start="62:43" pos:end="62:54"><call pos:start="62:43" pos:end="62:54"><name pos:start="62:43" pos:end="62:49">PTR_ERR</name><argument_list pos:start="62:50" pos:end="62:54">(<argument pos:start="62:51" pos:end="62:53"><expr pos:start="62:51" pos:end="62:53"><name pos:start="62:51" pos:end="62:53">acl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto pos:start="63:25" pos:end="63:34">goto <name pos:start="63:30" pos:end="63:33">fail</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt pos:start="65:17" pos:end="65:39"><expr pos:start="65:17" pos:end="65:38"><name pos:start="65:17" pos:end="65:32"><name pos:start="65:17" pos:end="65:20">resp</name><operator pos:start="65:21" pos:end="65:22">-&gt;</operator><name pos:start="65:23" pos:end="65:32">acl_access</name></name> <operator pos:start="65:34" pos:end="65:34">=</operator> <name pos:start="65:36" pos:end="65:38">acl</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt pos:start="67:9" pos:end="76:9"><if pos:start="67:9" pos:end="76:9">if <condition pos:start="67:12" pos:end="67:50">(<expr pos:start="67:13" pos:end="67:49"><name pos:start="67:13" pos:end="67:22"><name pos:start="67:13" pos:end="67:16">resp</name><operator pos:start="67:17" pos:end="67:18">-&gt;</operator><name pos:start="67:19" pos:end="67:22">mask</name></name> <operator pos:start="67:24" pos:end="67:24">&amp;</operator> <operator pos:start="67:26" pos:end="67:26">(</operator><name pos:start="67:27" pos:end="67:35">NFS_DFACL</name><operator pos:start="67:36" pos:end="67:36">|</operator><name pos:start="67:37" pos:end="67:48">NFS_DFACLCNT</name><operator pos:start="67:49" pos:end="67:49">)</operator></expr>)</condition> <block pos:start="67:52" pos:end="76:9">{<block_content pos:start="70:17" pos:end="75:40">
		<comment type="block" pos:start="68:17" pos:end="69:41">/* Check how Solaris handles requests for the Default ACL
		   of a non-directory! */</comment>
		<expr_stmt pos:start="70:17" pos:end="70:55"><expr pos:start="70:17" pos:end="70:54"><name pos:start="70:17" pos:end="70:19">acl</name> <operator pos:start="70:21" pos:end="70:21">=</operator> <call pos:start="70:23" pos:end="70:54"><name pos:start="70:23" pos:end="70:29">get_acl</name><argument_list pos:start="70:30" pos:end="70:54">(<argument pos:start="70:31" pos:end="70:35"><expr pos:start="70:31" pos:end="70:35"><name pos:start="70:31" pos:end="70:35">inode</name></expr></argument>, <argument pos:start="70:38" pos:end="70:53"><expr pos:start="70:38" pos:end="70:53"><name pos:start="70:38" pos:end="70:53">ACL_TYPE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt pos:start="71:17" pos:end="74:17"><if pos:start="71:17" pos:end="74:17">if <condition pos:start="71:20" pos:end="71:32">(<expr pos:start="71:21" pos:end="71:31"><call pos:start="71:21" pos:end="71:31"><name pos:start="71:21" pos:end="71:26">IS_ERR</name><argument_list pos:start="71:27" pos:end="71:31">(<argument pos:start="71:28" pos:end="71:30"><expr pos:start="71:28" pos:end="71:30"><name pos:start="71:28" pos:end="71:30">acl</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="71:34" pos:end="74:17">{<block_content pos:start="72:25" pos:end="73:34">
			<expr_stmt pos:start="72:25" pos:end="72:56"><expr pos:start="72:25" pos:end="72:55"><name pos:start="72:25" pos:end="72:30">nfserr</name> <operator pos:start="72:32" pos:end="72:32">=</operator> <call pos:start="72:34" pos:end="72:55"><name pos:start="72:34" pos:end="72:41">nfserrno</name><argument_list pos:start="72:42" pos:end="72:55">(<argument pos:start="72:43" pos:end="72:54"><expr pos:start="72:43" pos:end="72:54"><call pos:start="72:43" pos:end="72:54"><name pos:start="72:43" pos:end="72:49">PTR_ERR</name><argument_list pos:start="72:50" pos:end="72:54">(<argument pos:start="72:51" pos:end="72:53"><expr pos:start="72:51" pos:end="72:53"><name pos:start="72:51" pos:end="72:53">acl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto pos:start="73:25" pos:end="73:34">goto <name pos:start="73:30" pos:end="73:33">fail</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt pos:start="75:17" pos:end="75:40"><expr pos:start="75:17" pos:end="75:39"><name pos:start="75:17" pos:end="75:33"><name pos:start="75:17" pos:end="75:20">resp</name><operator pos:start="75:21" pos:end="75:22">-&gt;</operator><name pos:start="75:23" pos:end="75:33">acl_default</name></name> <operator pos:start="75:35" pos:end="75:35">=</operator> <name pos:start="75:37" pos:end="75:39">acl</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block" pos:start="78:9" pos:end="78:79">/* resp-&gt;acl_{access,default} are released in nfssvc_release_getacl. */</comment>
	<expr_stmt pos:start="79:9" pos:end="79:25"><expr pos:start="79:9" pos:end="79:24"><call pos:start="79:9" pos:end="79:24"><name pos:start="79:9" pos:end="79:21">RETURN_STATUS</name><argument_list pos:start="79:22" pos:end="79:24">(<argument pos:start="79:23" pos:end="79:23"><expr pos:start="79:23" pos:end="79:23"><literal type="number" pos:start="79:23" pos:end="79:23">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="81:1" pos:end="81:5"><name pos:start="81:1" pos:end="81:4">fail</name>:</label>
	<expr_stmt pos:start="82:9" pos:end="82:44"><expr pos:start="82:9" pos:end="82:43"><call pos:start="82:9" pos:end="82:43"><name pos:start="82:9" pos:end="82:25">posix_acl_release</name><argument_list pos:start="82:26" pos:end="82:43">(<argument pos:start="82:27" pos:end="82:42"><expr pos:start="82:27" pos:end="82:42"><name pos:start="82:27" pos:end="82:42"><name pos:start="82:27" pos:end="82:30">resp</name><operator pos:start="82:31" pos:end="82:32">-&gt;</operator><name pos:start="82:33" pos:end="82:42">acl_access</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="83:9" pos:end="83:45"><expr pos:start="83:9" pos:end="83:44"><call pos:start="83:9" pos:end="83:44"><name pos:start="83:9" pos:end="83:25">posix_acl_release</name><argument_list pos:start="83:26" pos:end="83:44">(<argument pos:start="83:27" pos:end="83:43"><expr pos:start="83:27" pos:end="83:43"><name pos:start="83:27" pos:end="83:43"><name pos:start="83:27" pos:end="83:30">resp</name><operator pos:start="83:31" pos:end="83:32">-&gt;</operator><name pos:start="83:33" pos:end="83:43">acl_default</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="84:9" pos:end="84:30"><expr pos:start="84:9" pos:end="84:29"><call pos:start="84:9" pos:end="84:29"><name pos:start="84:9" pos:end="84:21">RETURN_STATUS</name><argument_list pos:start="84:22" pos:end="84:29">(<argument pos:start="84:23" pos:end="84:28"><expr pos:start="84:23" pos:end="84:28"><name pos:start="84:23" pos:end="84:28">nfserr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="87:1" pos:end="89:3">/*
 * Set the Access and/or Default ACL of a file.
 */</comment>
<function pos:start="90:1" pos:end="139:1"><type pos:start="90:1" pos:end="90:13"><specifier pos:start="90:1" pos:end="90:6">static</specifier> <name pos:start="90:8" pos:end="90:13">__be32</name></type> <name pos:start="90:15" pos:end="90:33">nfsacld_proc_setacl</name><parameter_list pos:start="90:34" pos:end="92:43">(<parameter pos:start="90:35" pos:end="90:57"><decl pos:start="90:35" pos:end="90:57"><type pos:start="90:35" pos:end="90:57"><name pos:start="90:35" pos:end="90:49"><name pos:start="90:35" pos:end="90:40">struct</name> <name pos:start="90:42" pos:end="90:49">svc_rqst</name></name> <modifier pos:start="90:51" pos:end="90:51">*</modifier></type> <name pos:start="90:53" pos:end="90:57">rqstp</name></decl></parameter>,
		<parameter pos:start="91:17" pos:end="91:45"><decl pos:start="91:17" pos:end="91:45"><type pos:start="91:17" pos:end="91:45"><name pos:start="91:17" pos:end="91:39"><name pos:start="91:17" pos:end="91:22">struct</name> <name pos:start="91:24" pos:end="91:39">nfsd3_setaclargs</name></name> <modifier pos:start="91:41" pos:end="91:41">*</modifier></type><name pos:start="91:42" pos:end="91:45">argp</name></decl></parameter>,
		<parameter pos:start="92:17" pos:end="92:42"><decl pos:start="92:17" pos:end="92:42"><type pos:start="92:17" pos:end="92:42"><name pos:start="92:17" pos:end="92:36"><name pos:start="92:17" pos:end="92:22">struct</name> <name pos:start="92:24" pos:end="92:36">nfsd_attrstat</name></name> <modifier pos:start="92:38" pos:end="92:38">*</modifier></type><name pos:start="92:39" pos:end="92:42">resp</name></decl></parameter>)</parameter_list>
<block pos:start="93:1" pos:end="139:1">{<block_content pos:start="94:9" pos:end="138:17">
	<decl_stmt pos:start="94:9" pos:end="94:28"><decl pos:start="94:9" pos:end="94:27"><type pos:start="94:9" pos:end="94:22"><name pos:start="94:9" pos:end="94:20"><name pos:start="94:9" pos:end="94:14">struct</name> <name pos:start="94:16" pos:end="94:20">inode</name></name> <modifier pos:start="94:22" pos:end="94:22">*</modifier></type><name pos:start="94:23" pos:end="94:27">inode</name></decl>;</decl_stmt>
	<decl_stmt pos:start="95:9" pos:end="95:19"><decl pos:start="95:9" pos:end="95:18"><type pos:start="95:9" pos:end="95:16"><name pos:start="95:9" pos:end="95:14">svc_fh</name> <modifier pos:start="95:16" pos:end="95:16">*</modifier></type><name pos:start="95:17" pos:end="95:18">fh</name></decl>;</decl_stmt>
	<decl_stmt pos:start="96:9" pos:end="96:26"><decl pos:start="96:9" pos:end="96:25"><type pos:start="96:9" pos:end="96:14"><name pos:start="96:9" pos:end="96:14">__be32</name></type> <name pos:start="96:16" pos:end="96:21">nfserr</name> <init pos:start="96:23" pos:end="96:25">= <expr pos:start="96:25" pos:end="96:25"><literal type="number" pos:start="96:25" pos:end="96:25">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt pos:start="97:9" pos:end="97:18"><decl pos:start="97:9" pos:end="97:17"><type pos:start="97:9" pos:end="97:11"><name pos:start="97:9" pos:end="97:11">int</name></type> <name pos:start="97:13" pos:end="97:17">error</name></decl>;</decl_stmt>

	<expr_stmt pos:start="99:9" pos:end="99:67"><expr pos:start="99:9" pos:end="99:66"><call pos:start="99:9" pos:end="99:66"><name pos:start="99:9" pos:end="99:15">dprintk</name><argument_list pos:start="99:16" pos:end="99:66">(<argument pos:start="99:17" pos:end="99:43"><expr pos:start="99:17" pos:end="99:43"><literal type="string" pos:start="99:17" pos:end="99:43">"nfsd: SETACL(2acl)   %s\n"</literal></expr></argument>, <argument pos:start="99:46" pos:end="99:65"><expr pos:start="99:46" pos:end="99:65"><call pos:start="99:46" pos:end="99:65"><name pos:start="99:46" pos:end="99:54">SVCFH_fmt</name><argument_list pos:start="99:55" pos:end="99:65">(<argument pos:start="99:56" pos:end="99:64"><expr pos:start="99:56" pos:end="99:64"><operator pos:start="99:56" pos:end="99:56">&amp;</operator><name pos:start="99:57" pos:end="99:64"><name pos:start="99:57" pos:end="99:60">argp</name><operator pos:start="99:61" pos:end="99:62">-&gt;</operator><name pos:start="99:63" pos:end="99:64">fh</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="101:9" pos:end="101:43"><expr pos:start="101:9" pos:end="101:42"><name pos:start="101:9" pos:end="101:10">fh</name> <operator pos:start="101:12" pos:end="101:12">=</operator> <call pos:start="101:14" pos:end="101:42"><name pos:start="101:14" pos:end="101:20">fh_copy</name><argument_list pos:start="101:21" pos:end="101:42">(<argument pos:start="101:22" pos:end="101:30"><expr pos:start="101:22" pos:end="101:30"><operator pos:start="101:22" pos:end="101:22">&amp;</operator><name pos:start="101:23" pos:end="101:30"><name pos:start="101:23" pos:end="101:26">resp</name><operator pos:start="101:27" pos:end="101:28">-&gt;</operator><name pos:start="101:29" pos:end="101:30">fh</name></name></expr></argument>, <argument pos:start="101:33" pos:end="101:41"><expr pos:start="101:33" pos:end="101:41"><operator pos:start="101:33" pos:end="101:33">&amp;</operator><name pos:start="101:34" pos:end="101:41"><name pos:start="101:34" pos:end="101:37">argp</name><operator pos:start="101:38" pos:end="101:39">-&gt;</operator><name pos:start="101:40" pos:end="101:41">fh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="102:9" pos:end="102:64"><expr pos:start="102:9" pos:end="102:63"><name pos:start="102:9" pos:end="102:14">nfserr</name> <operator pos:start="102:16" pos:end="102:16">=</operator> <call pos:start="102:18" pos:end="102:63"><name pos:start="102:18" pos:end="102:26">fh_verify</name><argument_list pos:start="102:27" pos:end="102:63">(<argument pos:start="102:28" pos:end="102:32"><expr pos:start="102:28" pos:end="102:32"><name pos:start="102:28" pos:end="102:32">rqstp</name></expr></argument>, <argument pos:start="102:35" pos:end="102:43"><expr pos:start="102:35" pos:end="102:43"><operator pos:start="102:35" pos:end="102:35">&amp;</operator><name pos:start="102:36" pos:end="102:43"><name pos:start="102:36" pos:end="102:39">resp</name><operator pos:start="102:40" pos:end="102:41">-&gt;</operator><name pos:start="102:42" pos:end="102:43">fh</name></name></expr></argument>, <argument pos:start="102:46" pos:end="102:46"><expr pos:start="102:46" pos:end="102:46"><literal type="number" pos:start="102:46" pos:end="102:46">0</literal></expr></argument>, <argument pos:start="102:49" pos:end="102:62"><expr pos:start="102:49" pos:end="102:62"><name pos:start="102:49" pos:end="102:62">NFSD_MAY_SATTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="103:9" pos:end="104:25"><if pos:start="103:9" pos:end="104:25">if <condition pos:start="103:12" pos:end="103:19">(<expr pos:start="103:13" pos:end="103:18"><name pos:start="103:13" pos:end="103:18">nfserr</name></expr>)</condition><block type="pseudo" pos:start="104:17" pos:end="104:25"><block_content pos:start="104:17" pos:end="104:25">
		<goto pos:start="104:17" pos:end="104:25">goto <name pos:start="104:22" pos:end="104:24">out</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt pos:start="106:9" pos:end="106:39"><expr pos:start="106:9" pos:end="106:38"><name pos:start="106:9" pos:end="106:13">inode</name> <operator pos:start="106:15" pos:end="106:15">=</operator> <call pos:start="106:17" pos:end="106:38"><name pos:start="106:17" pos:end="106:23">d_inode</name><argument_list pos:start="106:24" pos:end="106:38">(<argument pos:start="106:25" pos:end="106:37"><expr pos:start="106:25" pos:end="106:37"><name pos:start="106:25" pos:end="106:37"><name pos:start="106:25" pos:end="106:26">fh</name><operator pos:start="106:27" pos:end="106:28">-&gt;</operator><name pos:start="106:29" pos:end="106:37">fh_dentry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="108:9" pos:end="108:34"><expr pos:start="108:9" pos:end="108:33"><name pos:start="108:9" pos:end="108:13">error</name> <operator pos:start="108:15" pos:end="108:15">=</operator> <call pos:start="108:17" pos:end="108:33"><name pos:start="108:17" pos:end="108:29">fh_want_write</name><argument_list pos:start="108:30" pos:end="108:33">(<argument pos:start="108:31" pos:end="108:32"><expr pos:start="108:31" pos:end="108:32"><name pos:start="108:31" pos:end="108:32">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="109:9" pos:end="110:31"><if pos:start="109:9" pos:end="110:31">if <condition pos:start="109:12" pos:end="109:18">(<expr pos:start="109:13" pos:end="109:17"><name pos:start="109:13" pos:end="109:17">error</name></expr>)</condition><block type="pseudo" pos:start="110:17" pos:end="110:31"><block_content pos:start="110:17" pos:end="110:31">
		<goto pos:start="110:17" pos:end="110:31">goto <name pos:start="110:22" pos:end="110:30">out_errno</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt pos:start="112:9" pos:end="112:20"><expr pos:start="112:9" pos:end="112:19"><call pos:start="112:9" pos:end="112:19"><name pos:start="112:9" pos:end="112:15">fh_lock</name><argument_list pos:start="112:16" pos:end="112:19">(<argument pos:start="112:17" pos:end="112:18"><expr pos:start="112:17" pos:end="112:18"><name pos:start="112:17" pos:end="112:18">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="114:9" pos:end="114:72"><expr pos:start="114:9" pos:end="114:71"><name pos:start="114:9" pos:end="114:13">error</name> <operator pos:start="114:15" pos:end="114:15">=</operator> <call pos:start="114:17" pos:end="114:71"><name pos:start="114:17" pos:end="114:29">set_posix_acl</name><argument_list pos:start="114:30" pos:end="114:71">(<argument pos:start="114:31" pos:end="114:35"><expr pos:start="114:31" pos:end="114:35"><name pos:start="114:31" pos:end="114:35">inode</name></expr></argument>, <argument pos:start="114:38" pos:end="114:52"><expr pos:start="114:38" pos:end="114:52"><name pos:start="114:38" pos:end="114:52">ACL_TYPE_ACCESS</name></expr></argument>, <argument pos:start="114:55" pos:end="114:70"><expr pos:start="114:55" pos:end="114:70"><name pos:start="114:55" pos:end="114:70"><name pos:start="114:55" pos:end="114:58">argp</name><operator pos:start="114:59" pos:end="114:60">-&gt;</operator><name pos:start="114:61" pos:end="114:70">acl_access</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="115:9" pos:end="116:35"><if pos:start="115:9" pos:end="116:35">if <condition pos:start="115:12" pos:end="115:18">(<expr pos:start="115:13" pos:end="115:17"><name pos:start="115:13" pos:end="115:17">error</name></expr>)</condition><block type="pseudo" pos:start="116:17" pos:end="116:35"><block_content pos:start="116:17" pos:end="116:35">
		<goto pos:start="116:17" pos:end="116:35">goto <name pos:start="116:22" pos:end="116:34">out_drop_lock</name>;</goto></block_content></block></if></if_stmt>
	<expr_stmt pos:start="117:9" pos:end="117:74"><expr pos:start="117:9" pos:end="117:73"><name pos:start="117:9" pos:end="117:13">error</name> <operator pos:start="117:15" pos:end="117:15">=</operator> <call pos:start="117:17" pos:end="117:73"><name pos:start="117:17" pos:end="117:29">set_posix_acl</name><argument_list pos:start="117:30" pos:end="117:73">(<argument pos:start="117:31" pos:end="117:35"><expr pos:start="117:31" pos:end="117:35"><name pos:start="117:31" pos:end="117:35">inode</name></expr></argument>, <argument pos:start="117:38" pos:end="117:53"><expr pos:start="117:38" pos:end="117:53"><name pos:start="117:38" pos:end="117:53">ACL_TYPE_DEFAULT</name></expr></argument>, <argument pos:start="117:56" pos:end="117:72"><expr pos:start="117:56" pos:end="117:72"><name pos:start="117:56" pos:end="117:72"><name pos:start="117:56" pos:end="117:59">argp</name><operator pos:start="117:60" pos:end="117:61">-&gt;</operator><name pos:start="117:62" pos:end="117:72">acl_default</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="118:9" pos:end="119:35"><if pos:start="118:9" pos:end="119:35">if <condition pos:start="118:12" pos:end="118:18">(<expr pos:start="118:13" pos:end="118:17"><name pos:start="118:13" pos:end="118:17">error</name></expr>)</condition><block type="pseudo" pos:start="119:17" pos:end="119:35"><block_content pos:start="119:17" pos:end="119:35">
		<goto pos:start="119:17" pos:end="119:35">goto <name pos:start="119:22" pos:end="119:34">out_drop_lock</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt pos:start="121:9" pos:end="121:22"><expr pos:start="121:9" pos:end="121:21"><call pos:start="121:9" pos:end="121:21"><name pos:start="121:9" pos:end="121:17">fh_unlock</name><argument_list pos:start="121:18" pos:end="121:21">(<argument pos:start="121:19" pos:end="121:20"><expr pos:start="121:19" pos:end="121:20"><name pos:start="121:19" pos:end="121:20">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="123:9" pos:end="123:26"><expr pos:start="123:9" pos:end="123:25"><call pos:start="123:9" pos:end="123:25"><name pos:start="123:9" pos:end="123:21">fh_drop_write</name><argument_list pos:start="123:22" pos:end="123:25">(<argument pos:start="123:23" pos:end="123:24"><expr pos:start="123:23" pos:end="123:24"><name pos:start="123:23" pos:end="123:24">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="125:9" pos:end="125:45"><expr pos:start="125:9" pos:end="125:44"><name pos:start="125:9" pos:end="125:14">nfserr</name> <operator pos:start="125:16" pos:end="125:16">=</operator> <call pos:start="125:18" pos:end="125:44"><name pos:start="125:18" pos:end="125:27">fh_getattr</name><argument_list pos:start="125:28" pos:end="125:44">(<argument pos:start="125:29" pos:end="125:30"><expr pos:start="125:29" pos:end="125:30"><name pos:start="125:29" pos:end="125:30">fh</name></expr></argument>, <argument pos:start="125:33" pos:end="125:43"><expr pos:start="125:33" pos:end="125:43"><operator pos:start="125:33" pos:end="125:33">&amp;</operator><name pos:start="125:34" pos:end="125:43"><name pos:start="125:34" pos:end="125:37">resp</name><operator pos:start="125:38" pos:end="125:39">-&gt;</operator><name pos:start="125:40" pos:end="125:43">stat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="127:1" pos:end="127:4"><name pos:start="127:1" pos:end="127:3">out</name>:</label>
	<comment type="block" pos:start="128:9" pos:end="129:39">/* argp-&gt;acl_{access,default} may have been allocated in
	   nfssvc_decode_setaclargs. */</comment>
	<expr_stmt pos:start="130:9" pos:end="130:44"><expr pos:start="130:9" pos:end="130:43"><call pos:start="130:9" pos:end="130:43"><name pos:start="130:9" pos:end="130:25">posix_acl_release</name><argument_list pos:start="130:26" pos:end="130:43">(<argument pos:start="130:27" pos:end="130:42"><expr pos:start="130:27" pos:end="130:42"><name pos:start="130:27" pos:end="130:42"><name pos:start="130:27" pos:end="130:30">argp</name><operator pos:start="130:31" pos:end="130:32">-&gt;</operator><name pos:start="130:33" pos:end="130:42">acl_access</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="131:9" pos:end="131:45"><expr pos:start="131:9" pos:end="131:44"><call pos:start="131:9" pos:end="131:44"><name pos:start="131:9" pos:end="131:25">posix_acl_release</name><argument_list pos:start="131:26" pos:end="131:44">(<argument pos:start="131:27" pos:end="131:43"><expr pos:start="131:27" pos:end="131:43"><name pos:start="131:27" pos:end="131:43"><name pos:start="131:27" pos:end="131:30">argp</name><operator pos:start="131:31" pos:end="131:32">-&gt;</operator><name pos:start="131:33" pos:end="131:43">acl_default</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="132:9" pos:end="132:22">return <expr pos:start="132:16" pos:end="132:21"><name pos:start="132:16" pos:end="132:21">nfserr</name></expr>;</return>
<label pos:start="133:1" pos:end="133:14"><name pos:start="133:1" pos:end="133:13">out_drop_lock</name>:</label>
	<expr_stmt pos:start="134:9" pos:end="134:22"><expr pos:start="134:9" pos:end="134:21"><call pos:start="134:9" pos:end="134:21"><name pos:start="134:9" pos:end="134:17">fh_unlock</name><argument_list pos:start="134:18" pos:end="134:21">(<argument pos:start="134:19" pos:end="134:20"><expr pos:start="134:19" pos:end="134:20"><name pos:start="134:19" pos:end="134:20">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="135:9" pos:end="135:26"><expr pos:start="135:9" pos:end="135:25"><call pos:start="135:9" pos:end="135:25"><name pos:start="135:9" pos:end="135:21">fh_drop_write</name><argument_list pos:start="135:22" pos:end="135:25">(<argument pos:start="135:23" pos:end="135:24"><expr pos:start="135:23" pos:end="135:24"><name pos:start="135:23" pos:end="135:24">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label pos:start="136:1" pos:end="136:10"><name pos:start="136:1" pos:end="136:9">out_errno</name>:</label>
	<expr_stmt pos:start="137:9" pos:end="137:33"><expr pos:start="137:9" pos:end="137:32"><name pos:start="137:9" pos:end="137:14">nfserr</name> <operator pos:start="137:16" pos:end="137:16">=</operator> <call pos:start="137:18" pos:end="137:32"><name pos:start="137:18" pos:end="137:25">nfserrno</name><argument_list pos:start="137:26" pos:end="137:32">(<argument pos:start="137:27" pos:end="137:31"><expr pos:start="137:27" pos:end="137:31"><name pos:start="137:27" pos:end="137:31">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<goto pos:start="138:9" pos:end="138:17">goto <name pos:start="138:14" pos:end="138:16">out</name>;</goto>
</block_content>}</block></function>

<comment type="block" pos:start="141:1" pos:end="143:3">/*
 * Check file attributes
 */</comment>
<function pos:start="144:1" pos:end="156:1"><type pos:start="144:1" pos:end="144:13"><specifier pos:start="144:1" pos:end="144:6">static</specifier> <name pos:start="144:8" pos:end="144:13">__be32</name></type> <name pos:start="144:15" pos:end="144:34">nfsacld_proc_getattr</name><parameter_list pos:start="144:35" pos:end="145:70">(<parameter pos:start="144:36" pos:end="144:58"><decl pos:start="144:36" pos:end="144:58"><type pos:start="144:36" pos:end="144:58"><name pos:start="144:36" pos:end="144:50"><name pos:start="144:36" pos:end="144:41">struct</name> <name pos:start="144:43" pos:end="144:50">svc_rqst</name></name> <modifier pos:start="144:52" pos:end="144:52">*</modifier></type> <name pos:start="144:54" pos:end="144:58">rqstp</name></decl></parameter>,
		<parameter pos:start="145:17" pos:end="145:41"><decl pos:start="145:17" pos:end="145:41"><type pos:start="145:17" pos:end="145:41"><name pos:start="145:17" pos:end="145:35"><name pos:start="145:17" pos:end="145:22">struct</name> <name pos:start="145:24" pos:end="145:35">nfsd_fhandle</name></name> <modifier pos:start="145:37" pos:end="145:37">*</modifier></type><name pos:start="145:38" pos:end="145:41">argp</name></decl></parameter>, <parameter pos:start="145:44" pos:end="145:69"><decl pos:start="145:44" pos:end="145:69"><type pos:start="145:44" pos:end="145:69"><name pos:start="145:44" pos:end="145:63"><name pos:start="145:44" pos:end="145:49">struct</name> <name pos:start="145:51" pos:end="145:63">nfsd_attrstat</name></name> <modifier pos:start="145:65" pos:end="145:65">*</modifier></type><name pos:start="145:66" pos:end="145:69">resp</name></decl></parameter>)</parameter_list>
<block pos:start="146:1" pos:end="156:1">{<block_content pos:start="147:9" pos:end="155:22">
	<decl_stmt pos:start="147:9" pos:end="147:22"><decl pos:start="147:9" pos:end="147:21"><type pos:start="147:9" pos:end="147:14"><name pos:start="147:9" pos:end="147:14">__be32</name></type> <name pos:start="147:16" pos:end="147:21">nfserr</name></decl>;</decl_stmt>
	<expr_stmt pos:start="148:9" pos:end="148:61"><expr pos:start="148:9" pos:end="148:60"><call pos:start="148:9" pos:end="148:60"><name pos:start="148:9" pos:end="148:15">dprintk</name><argument_list pos:start="148:16" pos:end="148:60">(<argument pos:start="148:17" pos:end="148:37"><expr pos:start="148:17" pos:end="148:37"><literal type="string" pos:start="148:17" pos:end="148:37">"nfsd: GETATTR  %s\n"</literal></expr></argument>, <argument pos:start="148:40" pos:end="148:59"><expr pos:start="148:40" pos:end="148:59"><call pos:start="148:40" pos:end="148:59"><name pos:start="148:40" pos:end="148:48">SVCFH_fmt</name><argument_list pos:start="148:49" pos:end="148:59">(<argument pos:start="148:50" pos:end="148:58"><expr pos:start="148:50" pos:end="148:58"><operator pos:start="148:50" pos:end="148:50">&amp;</operator><name pos:start="148:51" pos:end="148:58"><name pos:start="148:51" pos:end="148:54">argp</name><operator pos:start="148:55" pos:end="148:56">-&gt;</operator><name pos:start="148:57" pos:end="148:58">fh</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="150:9" pos:end="150:38"><expr pos:start="150:9" pos:end="150:37"><call pos:start="150:9" pos:end="150:37"><name pos:start="150:9" pos:end="150:15">fh_copy</name><argument_list pos:start="150:16" pos:end="150:37">(<argument pos:start="150:17" pos:end="150:25"><expr pos:start="150:17" pos:end="150:25"><operator pos:start="150:17" pos:end="150:17">&amp;</operator><name pos:start="150:18" pos:end="150:25"><name pos:start="150:18" pos:end="150:21">resp</name><operator pos:start="150:22" pos:end="150:23">-&gt;</operator><name pos:start="150:24" pos:end="150:25">fh</name></name></expr></argument>, <argument pos:start="150:28" pos:end="150:36"><expr pos:start="150:28" pos:end="150:36"><operator pos:start="150:28" pos:end="150:28">&amp;</operator><name pos:start="150:29" pos:end="150:36"><name pos:start="150:29" pos:end="150:32">argp</name><operator pos:start="150:33" pos:end="150:34">-&gt;</operator><name pos:start="150:35" pos:end="150:36">fh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="151:9" pos:end="151:62"><expr pos:start="151:9" pos:end="151:61"><name pos:start="151:9" pos:end="151:14">nfserr</name> <operator pos:start="151:16" pos:end="151:16">=</operator> <call pos:start="151:18" pos:end="151:61"><name pos:start="151:18" pos:end="151:26">fh_verify</name><argument_list pos:start="151:27" pos:end="151:61">(<argument pos:start="151:28" pos:end="151:32"><expr pos:start="151:28" pos:end="151:32"><name pos:start="151:28" pos:end="151:32">rqstp</name></expr></argument>, <argument pos:start="151:35" pos:end="151:43"><expr pos:start="151:35" pos:end="151:43"><operator pos:start="151:35" pos:end="151:35">&amp;</operator><name pos:start="151:36" pos:end="151:43"><name pos:start="151:36" pos:end="151:39">resp</name><operator pos:start="151:40" pos:end="151:41">-&gt;</operator><name pos:start="151:42" pos:end="151:43">fh</name></name></expr></argument>, <argument pos:start="151:46" pos:end="151:46"><expr pos:start="151:46" pos:end="151:46"><literal type="number" pos:start="151:46" pos:end="151:46">0</literal></expr></argument>, <argument pos:start="151:49" pos:end="151:60"><expr pos:start="151:49" pos:end="151:60"><name pos:start="151:49" pos:end="151:60">NFSD_MAY_NOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="152:9" pos:end="153:30"><if pos:start="152:9" pos:end="153:30">if <condition pos:start="152:12" pos:end="152:19">(<expr pos:start="152:13" pos:end="152:18"><name pos:start="152:13" pos:end="152:18">nfserr</name></expr>)</condition><block type="pseudo" pos:start="153:17" pos:end="153:30"><block_content pos:start="153:17" pos:end="153:30">
		<return pos:start="153:17" pos:end="153:30">return <expr pos:start="153:24" pos:end="153:29"><name pos:start="153:24" pos:end="153:29">nfserr</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt pos:start="154:9" pos:end="154:52"><expr pos:start="154:9" pos:end="154:51"><name pos:start="154:9" pos:end="154:14">nfserr</name> <operator pos:start="154:16" pos:end="154:16">=</operator> <call pos:start="154:18" pos:end="154:51"><name pos:start="154:18" pos:end="154:27">fh_getattr</name><argument_list pos:start="154:28" pos:end="154:51">(<argument pos:start="154:29" pos:end="154:37"><expr pos:start="154:29" pos:end="154:37"><operator pos:start="154:29" pos:end="154:29">&amp;</operator><name pos:start="154:30" pos:end="154:37"><name pos:start="154:30" pos:end="154:33">resp</name><operator pos:start="154:34" pos:end="154:35">-&gt;</operator><name pos:start="154:36" pos:end="154:37">fh</name></name></expr></argument>, <argument pos:start="154:40" pos:end="154:50"><expr pos:start="154:40" pos:end="154:50"><operator pos:start="154:40" pos:end="154:40">&amp;</operator><name pos:start="154:41" pos:end="154:50"><name pos:start="154:41" pos:end="154:44">resp</name><operator pos:start="154:45" pos:end="154:46">-&gt;</operator><name pos:start="154:47" pos:end="154:50">stat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="155:9" pos:end="155:22">return <expr pos:start="155:16" pos:end="155:21"><name pos:start="155:16" pos:end="155:21">nfserr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="158:1" pos:end="160:3">/*
 * Check file access
 */</comment>
<function pos:start="161:1" pos:end="177:1"><type pos:start="161:1" pos:end="161:13"><specifier pos:start="161:1" pos:end="161:6">static</specifier> <name pos:start="161:8" pos:end="161:13">__be32</name></type> <name pos:start="161:15" pos:end="161:33">nfsacld_proc_access</name><parameter_list pos:start="161:34" pos:end="162:45">(<parameter pos:start="161:35" pos:end="161:56"><decl pos:start="161:35" pos:end="161:56"><type pos:start="161:35" pos:end="161:56"><name pos:start="161:35" pos:end="161:49"><name pos:start="161:35" pos:end="161:40">struct</name> <name pos:start="161:42" pos:end="161:49">svc_rqst</name></name> <modifier pos:start="161:51" pos:end="161:51">*</modifier></type><name pos:start="161:52" pos:end="161:56">rqstp</name></decl></parameter>, <parameter pos:start="161:59" pos:end="161:87"><decl pos:start="161:59" pos:end="161:87"><type pos:start="161:59" pos:end="161:87"><name pos:start="161:59" pos:end="161:81"><name pos:start="161:59" pos:end="161:64">struct</name> <name pos:start="161:66" pos:end="161:81">nfsd3_accessargs</name></name> <modifier pos:start="161:83" pos:end="161:83">*</modifier></type><name pos:start="161:84" pos:end="161:87">argp</name></decl></parameter>,
		<parameter pos:start="162:17" pos:end="162:44"><decl pos:start="162:17" pos:end="162:44"><type pos:start="162:17" pos:end="162:44"><name pos:start="162:17" pos:end="162:38"><name pos:start="162:17" pos:end="162:22">struct</name> <name pos:start="162:24" pos:end="162:38">nfsd3_accessres</name></name> <modifier pos:start="162:40" pos:end="162:40">*</modifier></type><name pos:start="162:41" pos:end="162:44">resp</name></decl></parameter>)</parameter_list>
<block pos:start="163:1" pos:end="177:1">{<block_content pos:start="164:9" pos:end="176:22">
	<decl_stmt pos:start="164:9" pos:end="164:22"><decl pos:start="164:9" pos:end="164:21"><type pos:start="164:9" pos:end="164:14"><name pos:start="164:9" pos:end="164:14">__be32</name></type> <name pos:start="164:16" pos:end="164:21">nfserr</name></decl>;</decl_stmt>

	<expr_stmt pos:start="166:9" pos:end="168:38"><expr pos:start="166:9" pos:end="168:37"><call pos:start="166:9" pos:end="168:37"><name pos:start="166:9" pos:end="166:15">dprintk</name><argument_list pos:start="166:16" pos:end="168:37">(<argument pos:start="166:17" pos:end="166:48"><expr pos:start="166:17" pos:end="166:48"><literal type="string" pos:start="166:17" pos:end="166:48">"nfsd: ACCESS(2acl)   %s 0x%x\n"</literal></expr></argument>,
			<argument pos:start="167:25" pos:end="167:44"><expr pos:start="167:25" pos:end="167:44"><call pos:start="167:25" pos:end="167:44"><name pos:start="167:25" pos:end="167:33">SVCFH_fmt</name><argument_list pos:start="167:34" pos:end="167:44">(<argument pos:start="167:35" pos:end="167:43"><expr pos:start="167:35" pos:end="167:43"><operator pos:start="167:35" pos:end="167:35">&amp;</operator><name pos:start="167:36" pos:end="167:43"><name pos:start="167:36" pos:end="167:39">argp</name><operator pos:start="167:40" pos:end="167:41">-&gt;</operator><name pos:start="167:42" pos:end="167:43">fh</name></name></expr></argument>)</argument_list></call></expr></argument>,
			<argument pos:start="168:25" pos:end="168:36"><expr pos:start="168:25" pos:end="168:36"><name pos:start="168:25" pos:end="168:36"><name pos:start="168:25" pos:end="168:28">argp</name><operator pos:start="168:29" pos:end="168:30">-&gt;</operator><name pos:start="168:31" pos:end="168:36">access</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="170:9" pos:end="170:38"><expr pos:start="170:9" pos:end="170:37"><call pos:start="170:9" pos:end="170:37"><name pos:start="170:9" pos:end="170:15">fh_copy</name><argument_list pos:start="170:16" pos:end="170:37">(<argument pos:start="170:17" pos:end="170:25"><expr pos:start="170:17" pos:end="170:25"><operator pos:start="170:17" pos:end="170:17">&amp;</operator><name pos:start="170:18" pos:end="170:25"><name pos:start="170:18" pos:end="170:21">resp</name><operator pos:start="170:22" pos:end="170:23">-&gt;</operator><name pos:start="170:24" pos:end="170:25">fh</name></name></expr></argument>, <argument pos:start="170:28" pos:end="170:36"><expr pos:start="170:28" pos:end="170:36"><operator pos:start="170:28" pos:end="170:28">&amp;</operator><name pos:start="170:29" pos:end="170:36"><name pos:start="170:29" pos:end="170:32">argp</name><operator pos:start="170:33" pos:end="170:34">-&gt;</operator><name pos:start="170:35" pos:end="170:36">fh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="171:9" pos:end="171:36"><expr pos:start="171:9" pos:end="171:35"><name pos:start="171:9" pos:end="171:20"><name pos:start="171:9" pos:end="171:12">resp</name><operator pos:start="171:13" pos:end="171:14">-&gt;</operator><name pos:start="171:15" pos:end="171:20">access</name></name> <operator pos:start="171:22" pos:end="171:22">=</operator> <name pos:start="171:24" pos:end="171:35"><name pos:start="171:24" pos:end="171:27">argp</name><operator pos:start="171:28" pos:end="171:29">-&gt;</operator><name pos:start="171:30" pos:end="171:35">access</name></name></expr>;</expr_stmt>
	<expr_stmt pos:start="172:9" pos:end="172:68"><expr pos:start="172:9" pos:end="172:67"><name pos:start="172:9" pos:end="172:14">nfserr</name> <operator pos:start="172:16" pos:end="172:16">=</operator> <call pos:start="172:18" pos:end="172:67"><name pos:start="172:18" pos:end="172:28">nfsd_access</name><argument_list pos:start="172:29" pos:end="172:67">(<argument pos:start="172:30" pos:end="172:34"><expr pos:start="172:30" pos:end="172:34"><name pos:start="172:30" pos:end="172:34">rqstp</name></expr></argument>, <argument pos:start="172:37" pos:end="172:45"><expr pos:start="172:37" pos:end="172:45"><operator pos:start="172:37" pos:end="172:37">&amp;</operator><name pos:start="172:38" pos:end="172:45"><name pos:start="172:38" pos:end="172:41">resp</name><operator pos:start="172:42" pos:end="172:43">-&gt;</operator><name pos:start="172:44" pos:end="172:45">fh</name></name></expr></argument>, <argument pos:start="172:48" pos:end="172:60"><expr pos:start="172:48" pos:end="172:60"><operator pos:start="172:48" pos:end="172:48">&amp;</operator><name pos:start="172:49" pos:end="172:60"><name pos:start="172:49" pos:end="172:52">resp</name><operator pos:start="172:53" pos:end="172:54">-&gt;</operator><name pos:start="172:55" pos:end="172:60">access</name></name></expr></argument>, <argument pos:start="172:63" pos:end="172:66"><expr pos:start="172:63" pos:end="172:66"><name pos:start="172:63" pos:end="172:66">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="173:9" pos:end="174:30"><if pos:start="173:9" pos:end="174:30">if <condition pos:start="173:12" pos:end="173:19">(<expr pos:start="173:13" pos:end="173:18"><name pos:start="173:13" pos:end="173:18">nfserr</name></expr>)</condition><block type="pseudo" pos:start="174:17" pos:end="174:30"><block_content pos:start="174:17" pos:end="174:30">
		<return pos:start="174:17" pos:end="174:30">return <expr pos:start="174:24" pos:end="174:29"><name pos:start="174:24" pos:end="174:29">nfserr</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt pos:start="175:9" pos:end="175:52"><expr pos:start="175:9" pos:end="175:51"><name pos:start="175:9" pos:end="175:14">nfserr</name> <operator pos:start="175:16" pos:end="175:16">=</operator> <call pos:start="175:18" pos:end="175:51"><name pos:start="175:18" pos:end="175:27">fh_getattr</name><argument_list pos:start="175:28" pos:end="175:51">(<argument pos:start="175:29" pos:end="175:37"><expr pos:start="175:29" pos:end="175:37"><operator pos:start="175:29" pos:end="175:29">&amp;</operator><name pos:start="175:30" pos:end="175:37"><name pos:start="175:30" pos:end="175:33">resp</name><operator pos:start="175:34" pos:end="175:35">-&gt;</operator><name pos:start="175:36" pos:end="175:37">fh</name></name></expr></argument>, <argument pos:start="175:40" pos:end="175:50"><expr pos:start="175:40" pos:end="175:50"><operator pos:start="175:40" pos:end="175:40">&amp;</operator><name pos:start="175:41" pos:end="175:50"><name pos:start="175:41" pos:end="175:44">resp</name><operator pos:start="175:45" pos:end="175:46">-&gt;</operator><name pos:start="175:47" pos:end="175:50">stat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="176:9" pos:end="176:22">return <expr pos:start="176:16" pos:end="176:21"><name pos:start="176:16" pos:end="176:21">nfserr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="179:1" pos:end="181:3">/*
 * XDR decode functions
 */</comment>
<function pos:start="182:1" pos:end="191:1"><type pos:start="182:1" pos:end="182:10"><specifier pos:start="182:1" pos:end="182:6">static</specifier> <name pos:start="182:8" pos:end="182:10">int</name></type> <name pos:start="182:12" pos:end="182:38">nfsaclsvc_decode_getaclargs</name><parameter_list pos:start="182:39" pos:end="183:46">(<parameter pos:start="182:40" pos:end="182:61"><decl pos:start="182:40" pos:end="182:61"><type pos:start="182:40" pos:end="182:61"><name pos:start="182:40" pos:end="182:54"><name pos:start="182:40" pos:end="182:45">struct</name> <name pos:start="182:47" pos:end="182:54">svc_rqst</name></name> <modifier pos:start="182:56" pos:end="182:56">*</modifier></type><name pos:start="182:57" pos:end="182:61">rqstp</name></decl></parameter>, <parameter pos:start="182:64" pos:end="182:72"><decl pos:start="182:64" pos:end="182:72"><type pos:start="182:64" pos:end="182:72"><name pos:start="182:64" pos:end="182:69">__be32</name> <modifier pos:start="182:71" pos:end="182:71">*</modifier></type><name pos:start="182:72" pos:end="182:72">p</name></decl></parameter>,
		<parameter pos:start="183:17" pos:end="183:45"><decl pos:start="183:17" pos:end="183:45"><type pos:start="183:17" pos:end="183:45"><name pos:start="183:17" pos:end="183:39"><name pos:start="183:17" pos:end="183:22">struct</name> <name pos:start="183:24" pos:end="183:39">nfsd3_getaclargs</name></name> <modifier pos:start="183:41" pos:end="183:41">*</modifier></type><name pos:start="183:42" pos:end="183:45">argp</name></decl></parameter>)</parameter_list>
<block pos:start="184:1" pos:end="191:1">{<block_content pos:start="185:9" pos:end="190:43">
	<expr_stmt pos:start="185:9" pos:end="185:44"><expr pos:start="185:9" pos:end="185:43"><name pos:start="185:9" pos:end="185:9">p</name> <operator pos:start="185:11" pos:end="185:11">=</operator> <call pos:start="185:13" pos:end="185:43"><name pos:start="185:13" pos:end="185:29">nfs2svc_decode_fh</name><argument_list pos:start="185:30" pos:end="185:43">(<argument pos:start="185:31" pos:end="185:31"><expr pos:start="185:31" pos:end="185:31"><name pos:start="185:31" pos:end="185:31">p</name></expr></argument>, <argument pos:start="185:34" pos:end="185:42"><expr pos:start="185:34" pos:end="185:42"><operator pos:start="185:34" pos:end="185:34">&amp;</operator><name pos:start="185:35" pos:end="185:42"><name pos:start="185:35" pos:end="185:38">argp</name><operator pos:start="185:39" pos:end="185:40">-&gt;</operator><name pos:start="185:41" pos:end="185:42">fh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="186:9" pos:end="187:25"><if pos:start="186:9" pos:end="187:25">if <condition pos:start="186:12" pos:end="186:15">(<expr pos:start="186:13" pos:end="186:14"><operator pos:start="186:13" pos:end="186:13">!</operator><name pos:start="186:14" pos:end="186:14">p</name></expr>)</condition><block type="pseudo" pos:start="187:17" pos:end="187:25"><block_content pos:start="187:17" pos:end="187:25">
		<return pos:start="187:17" pos:end="187:25">return <expr pos:start="187:24" pos:end="187:24"><literal type="number" pos:start="187:24" pos:end="187:24">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt pos:start="188:9" pos:end="188:31"><expr pos:start="188:9" pos:end="188:30"><name pos:start="188:9" pos:end="188:18"><name pos:start="188:9" pos:end="188:12">argp</name><operator pos:start="188:13" pos:end="188:14">-&gt;</operator><name pos:start="188:15" pos:end="188:18">mask</name></name> <operator pos:start="188:20" pos:end="188:20">=</operator> <call pos:start="188:22" pos:end="188:30"><name pos:start="188:22" pos:end="188:26">ntohl</name><argument_list pos:start="188:27" pos:end="188:30">(<argument pos:start="188:28" pos:end="188:29"><expr pos:start="188:28" pos:end="188:29"><operator pos:start="188:28" pos:end="188:28">*</operator><name pos:start="188:29" pos:end="188:29">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="188:33" pos:end="188:36"><expr pos:start="188:33" pos:end="188:35"><name pos:start="188:33" pos:end="188:33">p</name><operator pos:start="188:34" pos:end="188:35">++</operator></expr>;</expr_stmt>

	<return pos:start="190:9" pos:end="190:43">return <expr pos:start="190:16" pos:end="190:42"><call pos:start="190:16" pos:end="190:42"><name pos:start="190:16" pos:end="190:32">xdr_argsize_check</name><argument_list pos:start="190:33" pos:end="190:42">(<argument pos:start="190:34" pos:end="190:38"><expr pos:start="190:34" pos:end="190:38"><name pos:start="190:34" pos:end="190:38">rqstp</name></expr></argument>, <argument pos:start="190:41" pos:end="190:41"><expr pos:start="190:41" pos:end="190:41"><name pos:start="190:41" pos:end="190:41">p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function pos:start="194:1" pos:end="218:1"><type pos:start="194:1" pos:end="194:10"><specifier pos:start="194:1" pos:end="194:6">static</specifier> <name pos:start="194:8" pos:end="194:10">int</name></type> <name pos:start="194:12" pos:end="194:38">nfsaclsvc_decode_setaclargs</name><parameter_list pos:start="194:39" pos:end="195:46">(<parameter pos:start="194:40" pos:end="194:61"><decl pos:start="194:40" pos:end="194:61"><type pos:start="194:40" pos:end="194:61"><name pos:start="194:40" pos:end="194:54"><name pos:start="194:40" pos:end="194:45">struct</name> <name pos:start="194:47" pos:end="194:54">svc_rqst</name></name> <modifier pos:start="194:56" pos:end="194:56">*</modifier></type><name pos:start="194:57" pos:end="194:61">rqstp</name></decl></parameter>, <parameter pos:start="194:64" pos:end="194:72"><decl pos:start="194:64" pos:end="194:72"><type pos:start="194:64" pos:end="194:72"><name pos:start="194:64" pos:end="194:69">__be32</name> <modifier pos:start="194:71" pos:end="194:71">*</modifier></type><name pos:start="194:72" pos:end="194:72">p</name></decl></parameter>,
		<parameter pos:start="195:17" pos:end="195:45"><decl pos:start="195:17" pos:end="195:45"><type pos:start="195:17" pos:end="195:45"><name pos:start="195:17" pos:end="195:39"><name pos:start="195:17" pos:end="195:22">struct</name> <name pos:start="195:24" pos:end="195:39">nfsd3_setaclargs</name></name> <modifier pos:start="195:41" pos:end="195:41">*</modifier></type><name pos:start="195:42" pos:end="195:45">argp</name></decl></parameter>)</parameter_list>
<block pos:start="196:1" pos:end="218:1">{<block_content pos:start="197:9" pos:end="217:23">
	<decl_stmt pos:start="197:9" pos:end="197:47"><decl pos:start="197:9" pos:end="197:46"><type pos:start="197:9" pos:end="197:21"><name pos:start="197:9" pos:end="197:19"><name pos:start="197:9" pos:end="197:14">struct</name> <name pos:start="197:16" pos:end="197:19">kvec</name></name> <modifier pos:start="197:21" pos:end="197:21">*</modifier></type><name pos:start="197:22" pos:end="197:25">head</name> <init pos:start="197:27" pos:end="197:46">= <expr pos:start="197:29" pos:end="197:46"><name pos:start="197:29" pos:end="197:46"><name pos:start="197:29" pos:end="197:33">rqstp</name><operator pos:start="197:34" pos:end="197:35">-&gt;</operator><name pos:start="197:36" pos:end="197:41">rq_arg</name><operator pos:start="197:42" pos:end="197:42">.</operator><name pos:start="197:43" pos:end="197:46">head</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt pos:start="198:9" pos:end="198:26"><decl pos:start="198:9" pos:end="198:25"><type pos:start="198:9" pos:end="198:20"><name pos:start="198:9" pos:end="198:16">unsigned</name> <name pos:start="198:18" pos:end="198:20">int</name></type> <name pos:start="198:22" pos:end="198:25">base</name></decl>;</decl_stmt>
	<decl_stmt pos:start="199:9" pos:end="199:14"><decl pos:start="199:9" pos:end="199:13"><type pos:start="199:9" pos:end="199:11"><name pos:start="199:9" pos:end="199:11">int</name></type> <name pos:start="199:13" pos:end="199:13">n</name></decl>;</decl_stmt>

	<expr_stmt pos:start="201:9" pos:end="201:44"><expr pos:start="201:9" pos:end="201:43"><name pos:start="201:9" pos:end="201:9">p</name> <operator pos:start="201:11" pos:end="201:11">=</operator> <call pos:start="201:13" pos:end="201:43"><name pos:start="201:13" pos:end="201:29">nfs2svc_decode_fh</name><argument_list pos:start="201:30" pos:end="201:43">(<argument pos:start="201:31" pos:end="201:31"><expr pos:start="201:31" pos:end="201:31"><name pos:start="201:31" pos:end="201:31">p</name></expr></argument>, <argument pos:start="201:34" pos:end="201:42"><expr pos:start="201:34" pos:end="201:42"><operator pos:start="201:34" pos:end="201:34">&amp;</operator><name pos:start="201:35" pos:end="201:42"><name pos:start="201:35" pos:end="201:38">argp</name><operator pos:start="201:39" pos:end="201:40">-&gt;</operator><name pos:start="201:41" pos:end="201:42">fh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="202:9" pos:end="203:25"><if pos:start="202:9" pos:end="203:25">if <condition pos:start="202:12" pos:end="202:15">(<expr pos:start="202:13" pos:end="202:14"><operator pos:start="202:13" pos:end="202:13">!</operator><name pos:start="202:14" pos:end="202:14">p</name></expr>)</condition><block type="pseudo" pos:start="203:17" pos:end="203:25"><block_content pos:start="203:17" pos:end="203:25">
		<return pos:start="203:17" pos:end="203:25">return <expr pos:start="203:24" pos:end="203:24"><literal type="number" pos:start="203:24" pos:end="203:24">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt pos:start="204:9" pos:end="204:33"><expr pos:start="204:9" pos:end="204:32"><name pos:start="204:9" pos:end="204:18"><name pos:start="204:9" pos:end="204:12">argp</name><operator pos:start="204:13" pos:end="204:14">-&gt;</operator><name pos:start="204:15" pos:end="204:18">mask</name></name> <operator pos:start="204:20" pos:end="204:20">=</operator> <call pos:start="204:22" pos:end="204:32"><name pos:start="204:22" pos:end="204:26">ntohl</name><argument_list pos:start="204:27" pos:end="204:32">(<argument pos:start="204:28" pos:end="204:31"><expr pos:start="204:28" pos:end="204:31"><operator pos:start="204:28" pos:end="204:28">*</operator><name pos:start="204:29" pos:end="204:29">p</name><operator pos:start="204:30" pos:end="204:31">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="205:9" pos:end="207:25"><if pos:start="205:9" pos:end="207:25">if <condition pos:start="205:12" pos:end="206:41">(<expr pos:start="205:13" pos:end="206:40"><name pos:start="205:13" pos:end="205:22"><name pos:start="205:13" pos:end="205:16">argp</name><operator pos:start="205:17" pos:end="205:18">-&gt;</operator><name pos:start="205:19" pos:end="205:22">mask</name></name> <operator pos:start="205:24" pos:end="205:24">&amp;</operator> <operator pos:start="205:26" pos:end="205:26">~</operator><name pos:start="205:27" pos:end="205:38">NFS_ACL_MASK</name> <operator pos:start="205:40" pos:end="205:41">||</operator>
	    <operator pos:start="206:13" pos:end="206:13">!</operator><call pos:start="206:14" pos:end="206:40"><name pos:start="206:14" pos:end="206:30">xdr_argsize_check</name><argument_list pos:start="206:31" pos:end="206:40">(<argument pos:start="206:32" pos:end="206:36"><expr pos:start="206:32" pos:end="206:36"><name pos:start="206:32" pos:end="206:36">rqstp</name></expr></argument>, <argument pos:start="206:39" pos:end="206:39"><expr pos:start="206:39" pos:end="206:39"><name pos:start="206:39" pos:end="206:39">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="207:17" pos:end="207:25"><block_content pos:start="207:17" pos:end="207:25">
		<return pos:start="207:17" pos:end="207:25">return <expr pos:start="207:24" pos:end="207:24"><literal type="number" pos:start="207:24" pos:end="207:24">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt pos:start="209:9" pos:end="209:50"><expr pos:start="209:9" pos:end="209:49"><name pos:start="209:9" pos:end="209:12">base</name> <operator pos:start="209:14" pos:end="209:14">=</operator> <operator pos:start="209:16" pos:end="209:16">(</operator><name pos:start="209:17" pos:end="209:20">char</name> <operator pos:start="209:22" pos:end="209:22">*</operator><operator pos:start="209:23" pos:end="209:23">)</operator><name pos:start="209:24" pos:end="209:24">p</name> <operator pos:start="209:26" pos:end="209:26">-</operator> <operator pos:start="209:28" pos:end="209:28">(</operator><name pos:start="209:29" pos:end="209:32">char</name> <operator pos:start="209:34" pos:end="209:34">*</operator><operator pos:start="209:35" pos:end="209:35">)</operator><name pos:start="209:36" pos:end="209:49"><name pos:start="209:36" pos:end="209:39">head</name><operator pos:start="209:40" pos:end="209:41">-&gt;</operator><name pos:start="209:42" pos:end="209:49">iov_base</name></name></expr>;</expr_stmt>
	<expr_stmt pos:start="210:9" pos:end="212:52"><expr pos:start="210:9" pos:end="212:51"><name pos:start="210:9" pos:end="210:9">n</name> <operator pos:start="210:11" pos:end="210:11">=</operator> <call pos:start="210:13" pos:end="212:51"><name pos:start="210:13" pos:end="210:25">nfsacl_decode</name><argument_list pos:start="210:26" pos:end="212:51">(<argument pos:start="210:27" pos:end="210:40"><expr pos:start="210:27" pos:end="210:40"><operator pos:start="210:27" pos:end="210:27">&amp;</operator><name pos:start="210:28" pos:end="210:40"><name pos:start="210:28" pos:end="210:32">rqstp</name><operator pos:start="210:33" pos:end="210:34">-&gt;</operator><name pos:start="210:35" pos:end="210:40">rq_arg</name></name></expr></argument>, <argument pos:start="210:43" pos:end="210:46"><expr pos:start="210:43" pos:end="210:46"><name pos:start="210:43" pos:end="210:46">base</name></expr></argument>, <argument pos:start="210:49" pos:end="210:52"><expr pos:start="210:49" pos:end="210:52"><name pos:start="210:49" pos:end="210:52">NULL</name></expr></argument>,
			  <argument pos:start="211:27" pos:end="212:50"><expr pos:start="211:27" pos:end="212:50"><ternary pos:start="211:27" pos:end="212:50"><condition pos:start="211:27" pos:end="211:50"><expr pos:start="211:27" pos:end="211:48"><operator pos:start="211:27" pos:end="211:27">(</operator><name pos:start="211:28" pos:end="211:37"><name pos:start="211:28" pos:end="211:31">argp</name><operator pos:start="211:32" pos:end="211:33">-&gt;</operator><name pos:start="211:34" pos:end="211:37">mask</name></name> <operator pos:start="211:39" pos:end="211:39">&amp;</operator> <name pos:start="211:41" pos:end="211:47">NFS_ACL</name><operator pos:start="211:48" pos:end="211:48">)</operator></expr> ?</condition><then pos:start="212:27" pos:end="212:43">
			  <expr pos:start="212:27" pos:end="212:43"><operator pos:start="212:27" pos:end="212:27">&amp;</operator><name pos:start="212:28" pos:end="212:43"><name pos:start="212:28" pos:end="212:31">argp</name><operator pos:start="212:32" pos:end="212:33">-&gt;</operator><name pos:start="212:34" pos:end="212:43">acl_access</name></name></expr> </then><else pos:start="212:45" pos:end="212:50">: <expr pos:start="212:47" pos:end="212:50"><name pos:start="212:47" pos:end="212:50">NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="213:9" pos:end="216:61"><if pos:start="213:9" pos:end="216:61">if <condition pos:start="213:12" pos:end="213:18">(<expr pos:start="213:13" pos:end="213:17"><name pos:start="213:13" pos:end="213:13">n</name> <operator pos:start="213:15" pos:end="213:15">&gt;</operator> <literal type="number" pos:start="213:17" pos:end="213:17">0</literal></expr>)</condition><block type="pseudo" pos:start="214:17" pos:end="216:61"><block_content pos:start="214:17" pos:end="216:61">
		<expr_stmt pos:start="214:17" pos:end="216:61"><expr pos:start="214:17" pos:end="216:60"><name pos:start="214:17" pos:end="214:17">n</name> <operator pos:start="214:19" pos:end="214:19">=</operator> <call pos:start="214:21" pos:end="216:60"><name pos:start="214:21" pos:end="214:33">nfsacl_decode</name><argument_list pos:start="214:34" pos:end="216:60">(<argument pos:start="214:35" pos:end="214:48"><expr pos:start="214:35" pos:end="214:48"><operator pos:start="214:35" pos:end="214:35">&amp;</operator><name pos:start="214:36" pos:end="214:48"><name pos:start="214:36" pos:end="214:40">rqstp</name><operator pos:start="214:41" pos:end="214:42">-&gt;</operator><name pos:start="214:43" pos:end="214:48">rq_arg</name></name></expr></argument>, <argument pos:start="214:51" pos:end="214:58"><expr pos:start="214:51" pos:end="214:58"><name pos:start="214:51" pos:end="214:54">base</name> <operator pos:start="214:56" pos:end="214:56">+</operator> <name pos:start="214:58" pos:end="214:58">n</name></expr></argument>, <argument pos:start="214:61" pos:end="214:64"><expr pos:start="214:61" pos:end="214:64"><name pos:start="214:61" pos:end="214:64">NULL</name></expr></argument>,
				  <argument pos:start="215:35" pos:end="216:59"><expr pos:start="215:35" pos:end="216:59"><ternary pos:start="215:35" pos:end="216:59"><condition pos:start="215:35" pos:end="215:60"><expr pos:start="215:35" pos:end="215:58"><operator pos:start="215:35" pos:end="215:35">(</operator><name pos:start="215:36" pos:end="215:45"><name pos:start="215:36" pos:end="215:39">argp</name><operator pos:start="215:40" pos:end="215:41">-&gt;</operator><name pos:start="215:42" pos:end="215:45">mask</name></name> <operator pos:start="215:47" pos:end="215:47">&amp;</operator> <name pos:start="215:49" pos:end="215:57">NFS_DFACL</name><operator pos:start="215:58" pos:end="215:58">)</operator></expr> ?</condition><then pos:start="216:35" pos:end="216:52">
				  <expr pos:start="216:35" pos:end="216:52"><operator pos:start="216:35" pos:end="216:35">&amp;</operator><name pos:start="216:36" pos:end="216:52"><name pos:start="216:36" pos:end="216:39">argp</name><operator pos:start="216:40" pos:end="216:41">-&gt;</operator><name pos:start="216:42" pos:end="216:52">acl_default</name></name></expr> </then><else pos:start="216:54" pos:end="216:59">: <expr pos:start="216:56" pos:end="216:59"><name pos:start="216:56" pos:end="216:59">NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return pos:start="217:9" pos:end="217:23">return <expr pos:start="217:16" pos:end="217:22"><operator pos:start="217:16" pos:end="217:16">(</operator><name pos:start="217:17" pos:end="217:17">n</name> <operator pos:start="217:19" pos:end="217:19">&gt;</operator> <literal type="number" pos:start="217:21" pos:end="217:21">0</literal><operator pos:start="217:22" pos:end="217:22">)</operator></expr>;</return>
</block_content>}</block></function>

<function pos:start="220:1" pos:end="227:1"><type pos:start="220:1" pos:end="220:10"><specifier pos:start="220:1" pos:end="220:6">static</specifier> <name pos:start="220:8" pos:end="220:10">int</name></type> <name pos:start="220:12" pos:end="220:39">nfsaclsvc_decode_fhandleargs</name><parameter_list pos:start="220:40" pos:end="221:42">(<parameter pos:start="220:41" pos:end="220:62"><decl pos:start="220:41" pos:end="220:62"><type pos:start="220:41" pos:end="220:62"><name pos:start="220:41" pos:end="220:55"><name pos:start="220:41" pos:end="220:46">struct</name> <name pos:start="220:48" pos:end="220:55">svc_rqst</name></name> <modifier pos:start="220:57" pos:end="220:57">*</modifier></type><name pos:start="220:58" pos:end="220:62">rqstp</name></decl></parameter>, <parameter pos:start="220:65" pos:end="220:73"><decl pos:start="220:65" pos:end="220:73"><type pos:start="220:65" pos:end="220:73"><name pos:start="220:65" pos:end="220:70">__be32</name> <modifier pos:start="220:72" pos:end="220:72">*</modifier></type><name pos:start="220:73" pos:end="220:73">p</name></decl></parameter>,
		<parameter pos:start="221:17" pos:end="221:41"><decl pos:start="221:17" pos:end="221:41"><type pos:start="221:17" pos:end="221:41"><name pos:start="221:17" pos:end="221:35"><name pos:start="221:17" pos:end="221:22">struct</name> <name pos:start="221:24" pos:end="221:35">nfsd_fhandle</name></name> <modifier pos:start="221:37" pos:end="221:37">*</modifier></type><name pos:start="221:38" pos:end="221:41">argp</name></decl></parameter>)</parameter_list>
<block pos:start="222:1" pos:end="227:1">{<block_content pos:start="223:9" pos:end="226:43">
	<expr_stmt pos:start="223:9" pos:end="223:44"><expr pos:start="223:9" pos:end="223:43"><name pos:start="223:9" pos:end="223:9">p</name> <operator pos:start="223:11" pos:end="223:11">=</operator> <call pos:start="223:13" pos:end="223:43"><name pos:start="223:13" pos:end="223:29">nfs2svc_decode_fh</name><argument_list pos:start="223:30" pos:end="223:43">(<argument pos:start="223:31" pos:end="223:31"><expr pos:start="223:31" pos:end="223:31"><name pos:start="223:31" pos:end="223:31">p</name></expr></argument>, <argument pos:start="223:34" pos:end="223:42"><expr pos:start="223:34" pos:end="223:42"><operator pos:start="223:34" pos:end="223:34">&amp;</operator><name pos:start="223:35" pos:end="223:42"><name pos:start="223:35" pos:end="223:38">argp</name><operator pos:start="223:39" pos:end="223:40">-&gt;</operator><name pos:start="223:41" pos:end="223:42">fh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="224:9" pos:end="225:25"><if pos:start="224:9" pos:end="225:25">if <condition pos:start="224:12" pos:end="224:15">(<expr pos:start="224:13" pos:end="224:14"><operator pos:start="224:13" pos:end="224:13">!</operator><name pos:start="224:14" pos:end="224:14">p</name></expr>)</condition><block type="pseudo" pos:start="225:17" pos:end="225:25"><block_content pos:start="225:17" pos:end="225:25">
		<return pos:start="225:17" pos:end="225:25">return <expr pos:start="225:24" pos:end="225:24"><literal type="number" pos:start="225:24" pos:end="225:24">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<return pos:start="226:9" pos:end="226:43">return <expr pos:start="226:16" pos:end="226:42"><call pos:start="226:16" pos:end="226:42"><name pos:start="226:16" pos:end="226:32">xdr_argsize_check</name><argument_list pos:start="226:33" pos:end="226:42">(<argument pos:start="226:34" pos:end="226:38"><expr pos:start="226:34" pos:end="226:38"><name pos:start="226:34" pos:end="226:38">rqstp</name></expr></argument>, <argument pos:start="226:41" pos:end="226:41"><expr pos:start="226:41" pos:end="226:41"><name pos:start="226:41" pos:end="226:41">p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function pos:start="229:1" pos:end="238:1"><type pos:start="229:1" pos:end="229:10"><specifier pos:start="229:1" pos:end="229:6">static</specifier> <name pos:start="229:8" pos:end="229:10">int</name></type> <name pos:start="229:12" pos:end="229:38">nfsaclsvc_decode_accessargs</name><parameter_list pos:start="229:39" pos:end="230:46">(<parameter pos:start="229:40" pos:end="229:61"><decl pos:start="229:40" pos:end="229:61"><type pos:start="229:40" pos:end="229:61"><name pos:start="229:40" pos:end="229:54"><name pos:start="229:40" pos:end="229:45">struct</name> <name pos:start="229:47" pos:end="229:54">svc_rqst</name></name> <modifier pos:start="229:56" pos:end="229:56">*</modifier></type><name pos:start="229:57" pos:end="229:61">rqstp</name></decl></parameter>, <parameter pos:start="229:64" pos:end="229:72"><decl pos:start="229:64" pos:end="229:72"><type pos:start="229:64" pos:end="229:72"><name pos:start="229:64" pos:end="229:69">__be32</name> <modifier pos:start="229:71" pos:end="229:71">*</modifier></type><name pos:start="229:72" pos:end="229:72">p</name></decl></parameter>,
		<parameter pos:start="230:17" pos:end="230:45"><decl pos:start="230:17" pos:end="230:45"><type pos:start="230:17" pos:end="230:45"><name pos:start="230:17" pos:end="230:39"><name pos:start="230:17" pos:end="230:22">struct</name> <name pos:start="230:24" pos:end="230:39">nfsd3_accessargs</name></name> <modifier pos:start="230:41" pos:end="230:41">*</modifier></type><name pos:start="230:42" pos:end="230:45">argp</name></decl></parameter>)</parameter_list>
<block pos:start="231:1" pos:end="238:1">{<block_content pos:start="232:9" pos:end="237:43">
	<expr_stmt pos:start="232:9" pos:end="232:44"><expr pos:start="232:9" pos:end="232:43"><name pos:start="232:9" pos:end="232:9">p</name> <operator pos:start="232:11" pos:end="232:11">=</operator> <call pos:start="232:13" pos:end="232:43"><name pos:start="232:13" pos:end="232:29">nfs2svc_decode_fh</name><argument_list pos:start="232:30" pos:end="232:43">(<argument pos:start="232:31" pos:end="232:31"><expr pos:start="232:31" pos:end="232:31"><name pos:start="232:31" pos:end="232:31">p</name></expr></argument>, <argument pos:start="232:34" pos:end="232:42"><expr pos:start="232:34" pos:end="232:42"><operator pos:start="232:34" pos:end="232:34">&amp;</operator><name pos:start="232:35" pos:end="232:42"><name pos:start="232:35" pos:end="232:38">argp</name><operator pos:start="232:39" pos:end="232:40">-&gt;</operator><name pos:start="232:41" pos:end="232:42">fh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="233:9" pos:end="234:25"><if pos:start="233:9" pos:end="234:25">if <condition pos:start="233:12" pos:end="233:15">(<expr pos:start="233:13" pos:end="233:14"><operator pos:start="233:13" pos:end="233:13">!</operator><name pos:start="233:14" pos:end="233:14">p</name></expr>)</condition><block type="pseudo" pos:start="234:17" pos:end="234:25"><block_content pos:start="234:17" pos:end="234:25">
		<return pos:start="234:17" pos:end="234:25">return <expr pos:start="234:24" pos:end="234:24"><literal type="number" pos:start="234:24" pos:end="234:24">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt pos:start="235:9" pos:end="235:35"><expr pos:start="235:9" pos:end="235:34"><name pos:start="235:9" pos:end="235:20"><name pos:start="235:9" pos:end="235:12">argp</name><operator pos:start="235:13" pos:end="235:14">-&gt;</operator><name pos:start="235:15" pos:end="235:20">access</name></name> <operator pos:start="235:22" pos:end="235:22">=</operator> <call pos:start="235:24" pos:end="235:34"><name pos:start="235:24" pos:end="235:28">ntohl</name><argument_list pos:start="235:29" pos:end="235:34">(<argument pos:start="235:30" pos:end="235:33"><expr pos:start="235:30" pos:end="235:33"><operator pos:start="235:30" pos:end="235:30">*</operator><name pos:start="235:31" pos:end="235:31">p</name><operator pos:start="235:32" pos:end="235:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="237:9" pos:end="237:43">return <expr pos:start="237:16" pos:end="237:42"><call pos:start="237:16" pos:end="237:42"><name pos:start="237:16" pos:end="237:32">xdr_argsize_check</name><argument_list pos:start="237:33" pos:end="237:42">(<argument pos:start="237:34" pos:end="237:38"><expr pos:start="237:34" pos:end="237:38"><name pos:start="237:34" pos:end="237:38">rqstp</name></expr></argument>, <argument pos:start="237:41" pos:end="237:41"><expr pos:start="237:41" pos:end="237:41"><name pos:start="237:41" pos:end="237:41">p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="240:1" pos:end="242:3">/*
 * XDR encode functions
 */</comment>

<comment type="block" pos:start="244:1" pos:end="247:3">/*
 * There must be an encoding function for void results so svc_process
 * will work properly.
 */</comment>
<function pos:start="248:1" pos:end="251:1"><type pos:start="248:1" pos:end="248:10"><specifier pos:start="248:1" pos:end="248:6">static</specifier> <name pos:start="248:8" pos:end="248:10">int</name></type> <name pos:start="248:12" pos:end="248:35">nfsaclsvc_encode_voidres</name><parameter_list pos:start="248:36" pos:end="248:83">(<parameter pos:start="248:37" pos:end="248:58"><decl pos:start="248:37" pos:end="248:58"><type pos:start="248:37" pos:end="248:58"><name pos:start="248:37" pos:end="248:51"><name pos:start="248:37" pos:end="248:42">struct</name> <name pos:start="248:44" pos:end="248:51">svc_rqst</name></name> <modifier pos:start="248:53" pos:end="248:53">*</modifier></type><name pos:start="248:54" pos:end="248:58">rqstp</name></decl></parameter>, <parameter pos:start="248:61" pos:end="248:69"><decl pos:start="248:61" pos:end="248:69"><type pos:start="248:61" pos:end="248:69"><name pos:start="248:61" pos:end="248:66">__be32</name> <modifier pos:start="248:68" pos:end="248:68">*</modifier></type><name pos:start="248:69" pos:end="248:69">p</name></decl></parameter>, <parameter pos:start="248:72" pos:end="248:82"><decl pos:start="248:72" pos:end="248:82"><type pos:start="248:72" pos:end="248:82"><name pos:start="248:72" pos:end="248:75">void</name> <modifier pos:start="248:77" pos:end="248:77">*</modifier></type><name pos:start="248:78" pos:end="248:82">dummy</name></decl></parameter>)</parameter_list>
<block pos:start="249:1" pos:end="251:1">{<block_content pos:start="250:9" pos:end="250:43">
	<return pos:start="250:9" pos:end="250:43">return <expr pos:start="250:16" pos:end="250:42"><call pos:start="250:16" pos:end="250:42"><name pos:start="250:16" pos:end="250:32">xdr_ressize_check</name><argument_list pos:start="250:33" pos:end="250:42">(<argument pos:start="250:34" pos:end="250:38"><expr pos:start="250:34" pos:end="250:38"><name pos:start="250:34" pos:end="250:38">rqstp</name></expr></argument>, <argument pos:start="250:41" pos:end="250:41"><expr pos:start="250:41" pos:end="250:41"><name pos:start="250:41" pos:end="250:41">p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="253:1" pos:end="253:12">/* GETACL */</comment>
<function pos:start="254:1" pos:end="297:1"><type pos:start="254:1" pos:end="254:10"><specifier pos:start="254:1" pos:end="254:6">static</specifier> <name pos:start="254:8" pos:end="254:10">int</name></type> <name pos:start="254:12" pos:end="254:37">nfsaclsvc_encode_getaclres</name><parameter_list pos:start="254:38" pos:end="255:45">(<parameter pos:start="254:39" pos:end="254:60"><decl pos:start="254:39" pos:end="254:60"><type pos:start="254:39" pos:end="254:60"><name pos:start="254:39" pos:end="254:53"><name pos:start="254:39" pos:end="254:44">struct</name> <name pos:start="254:46" pos:end="254:53">svc_rqst</name></name> <modifier pos:start="254:55" pos:end="254:55">*</modifier></type><name pos:start="254:56" pos:end="254:60">rqstp</name></decl></parameter>, <parameter pos:start="254:63" pos:end="254:71"><decl pos:start="254:63" pos:end="254:71"><type pos:start="254:63" pos:end="254:71"><name pos:start="254:63" pos:end="254:68">__be32</name> <modifier pos:start="254:70" pos:end="254:70">*</modifier></type><name pos:start="254:71" pos:end="254:71">p</name></decl></parameter>,
		<parameter pos:start="255:17" pos:end="255:44"><decl pos:start="255:17" pos:end="255:44"><type pos:start="255:17" pos:end="255:44"><name pos:start="255:17" pos:end="255:38"><name pos:start="255:17" pos:end="255:22">struct</name> <name pos:start="255:24" pos:end="255:38">nfsd3_getaclres</name></name> <modifier pos:start="255:40" pos:end="255:40">*</modifier></type><name pos:start="255:41" pos:end="255:44">resp</name></decl></parameter>)</parameter_list>
<block pos:start="256:1" pos:end="297:1">{<block_content pos:start="257:9" pos:end="296:23">
	<decl_stmt pos:start="257:9" pos:end="257:51"><decl pos:start="257:9" pos:end="257:50"><type pos:start="257:9" pos:end="257:23"><name pos:start="257:9" pos:end="257:21"><name pos:start="257:9" pos:end="257:14">struct</name> <name pos:start="257:16" pos:end="257:21">dentry</name></name> <modifier pos:start="257:23" pos:end="257:23">*</modifier></type><name pos:start="257:24" pos:end="257:29">dentry</name> <init pos:start="257:31" pos:end="257:50">= <expr pos:start="257:33" pos:end="257:50"><name pos:start="257:33" pos:end="257:50"><name pos:start="257:33" pos:end="257:36">resp</name><operator pos:start="257:37" pos:end="257:38">-&gt;</operator><name pos:start="257:39" pos:end="257:40">fh</name><operator pos:start="257:41" pos:end="257:41">.</operator><name pos:start="257:42" pos:end="257:50">fh_dentry</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt pos:start="258:9" pos:end="258:28"><decl pos:start="258:9" pos:end="258:27"><type pos:start="258:9" pos:end="258:22"><name pos:start="258:9" pos:end="258:20"><name pos:start="258:9" pos:end="258:14">struct</name> <name pos:start="258:16" pos:end="258:20">inode</name></name> <modifier pos:start="258:22" pos:end="258:22">*</modifier></type><name pos:start="258:23" pos:end="258:27">inode</name></decl>;</decl_stmt>
	<decl_stmt pos:start="259:9" pos:end="259:47"><decl pos:start="259:9" pos:end="259:46"><type pos:start="259:9" pos:end="259:21"><name pos:start="259:9" pos:end="259:19"><name pos:start="259:9" pos:end="259:14">struct</name> <name pos:start="259:16" pos:end="259:19">kvec</name></name> <modifier pos:start="259:21" pos:end="259:21">*</modifier></type><name pos:start="259:22" pos:end="259:25">head</name> <init pos:start="259:27" pos:end="259:46">= <expr pos:start="259:29" pos:end="259:46"><name pos:start="259:29" pos:end="259:46"><name pos:start="259:29" pos:end="259:33">rqstp</name><operator pos:start="259:34" pos:end="259:35">-&gt;</operator><name pos:start="259:36" pos:end="259:41">rq_res</name><operator pos:start="259:42" pos:end="259:42">.</operator><name pos:start="259:43" pos:end="259:46">head</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt pos:start="260:9" pos:end="260:26"><decl pos:start="260:9" pos:end="260:25"><type pos:start="260:9" pos:end="260:20"><name pos:start="260:9" pos:end="260:16">unsigned</name> <name pos:start="260:18" pos:end="260:20">int</name></type> <name pos:start="260:22" pos:end="260:25">base</name></decl>;</decl_stmt>
	<decl_stmt pos:start="261:9" pos:end="261:14"><decl pos:start="261:9" pos:end="261:13"><type pos:start="261:9" pos:end="261:11"><name pos:start="261:9" pos:end="261:11">int</name></type> <name pos:start="261:13" pos:end="261:13">n</name></decl>;</decl_stmt>
	<decl_stmt pos:start="262:9" pos:end="262:14"><decl pos:start="262:9" pos:end="262:13"><type pos:start="262:9" pos:end="262:11"><name pos:start="262:9" pos:end="262:11">int</name></type> <name pos:start="262:13" pos:end="262:13">w</name></decl>;</decl_stmt>

	<comment type="block" pos:start="264:9" pos:end="268:11">/*
	 * Since this is version 2, the check for nfserr in
	 * nfsd_dispatch actually ensures the following cannot happen.
	 * However, it seems fragile to depend on that.
	 */</comment>
	<if_stmt pos:start="269:9" pos:end="270:25"><if pos:start="269:9" pos:end="270:25">if <condition pos:start="269:12" pos:end="269:59">(<expr pos:start="269:13" pos:end="269:58"><name pos:start="269:13" pos:end="269:18">dentry</name> <operator pos:start="269:20" pos:end="269:21">==</operator> <name pos:start="269:23" pos:end="269:26">NULL</name> <operator pos:start="269:28" pos:end="269:29">||</operator> <call pos:start="269:31" pos:end="269:58"><name pos:start="269:31" pos:end="269:50">d_really_is_negative</name><argument_list pos:start="269:51" pos:end="269:58">(<argument pos:start="269:52" pos:end="269:57"><expr pos:start="269:52" pos:end="269:57"><name pos:start="269:52" pos:end="269:57">dentry</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="270:17" pos:end="270:25"><block_content pos:start="270:17" pos:end="270:25">
		<return pos:start="270:17" pos:end="270:25">return <expr pos:start="270:24" pos:end="270:24"><literal type="number" pos:start="270:24" pos:end="270:24">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt pos:start="271:9" pos:end="271:32"><expr pos:start="271:9" pos:end="271:31"><name pos:start="271:9" pos:end="271:13">inode</name> <operator pos:start="271:15" pos:end="271:15">=</operator> <call pos:start="271:17" pos:end="271:31"><name pos:start="271:17" pos:end="271:23">d_inode</name><argument_list pos:start="271:24" pos:end="271:31">(<argument pos:start="271:25" pos:end="271:30"><expr pos:start="271:25" pos:end="271:30"><name pos:start="271:25" pos:end="271:30">dentry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="273:9" pos:end="273:67"><expr pos:start="273:9" pos:end="273:66"><name pos:start="273:9" pos:end="273:9">p</name> <operator pos:start="273:11" pos:end="273:11">=</operator> <call pos:start="273:13" pos:end="273:66"><name pos:start="273:13" pos:end="273:32">nfs2svc_encode_fattr</name><argument_list pos:start="273:33" pos:end="273:66">(<argument pos:start="273:34" pos:end="273:38"><expr pos:start="273:34" pos:end="273:38"><name pos:start="273:34" pos:end="273:38">rqstp</name></expr></argument>, <argument pos:start="273:41" pos:end="273:41"><expr pos:start="273:41" pos:end="273:41"><name pos:start="273:41" pos:end="273:41">p</name></expr></argument>, <argument pos:start="273:44" pos:end="273:52"><expr pos:start="273:44" pos:end="273:52"><operator pos:start="273:44" pos:end="273:44">&amp;</operator><name pos:start="273:45" pos:end="273:52"><name pos:start="273:45" pos:end="273:48">resp</name><operator pos:start="273:49" pos:end="273:50">-&gt;</operator><name pos:start="273:51" pos:end="273:52">fh</name></name></expr></argument>, <argument pos:start="273:55" pos:end="273:65"><expr pos:start="273:55" pos:end="273:65"><operator pos:start="273:55" pos:end="273:55">&amp;</operator><name pos:start="273:56" pos:end="273:65"><name pos:start="273:56" pos:end="273:59">resp</name><operator pos:start="273:60" pos:end="273:61">-&gt;</operator><name pos:start="273:62" pos:end="273:65">stat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="274:9" pos:end="274:33"><expr pos:start="274:9" pos:end="274:32"><operator pos:start="274:9" pos:end="274:9">*</operator><name pos:start="274:10" pos:end="274:10">p</name><operator pos:start="274:11" pos:end="274:12">++</operator> <operator pos:start="274:14" pos:end="274:14">=</operator> <call pos:start="274:16" pos:end="274:32"><name pos:start="274:16" pos:end="274:20">htonl</name><argument_list pos:start="274:21" pos:end="274:32">(<argument pos:start="274:22" pos:end="274:31"><expr pos:start="274:22" pos:end="274:31"><name pos:start="274:22" pos:end="274:31"><name pos:start="274:22" pos:end="274:25">resp</name><operator pos:start="274:26" pos:end="274:27">-&gt;</operator><name pos:start="274:28" pos:end="274:31">mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="275:9" pos:end="276:25"><if pos:start="275:9" pos:end="276:25">if <condition pos:start="275:12" pos:end="275:41">(<expr pos:start="275:13" pos:end="275:40"><operator pos:start="275:13" pos:end="275:13">!</operator><call pos:start="275:14" pos:end="275:40"><name pos:start="275:14" pos:end="275:30">xdr_ressize_check</name><argument_list pos:start="275:31" pos:end="275:40">(<argument pos:start="275:32" pos:end="275:36"><expr pos:start="275:32" pos:end="275:36"><name pos:start="275:32" pos:end="275:36">rqstp</name></expr></argument>, <argument pos:start="275:39" pos:end="275:39"><expr pos:start="275:39" pos:end="275:39"><name pos:start="275:39" pos:end="275:39">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="276:17" pos:end="276:25"><block_content pos:start="276:17" pos:end="276:25">
		<return pos:start="276:17" pos:end="276:25">return <expr pos:start="276:24" pos:end="276:24"><literal type="number" pos:start="276:24" pos:end="276:24">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt pos:start="277:9" pos:end="277:50"><expr pos:start="277:9" pos:end="277:49"><name pos:start="277:9" pos:end="277:12">base</name> <operator pos:start="277:14" pos:end="277:14">=</operator> <operator pos:start="277:16" pos:end="277:16">(</operator><name pos:start="277:17" pos:end="277:20">char</name> <operator pos:start="277:22" pos:end="277:22">*</operator><operator pos:start="277:23" pos:end="277:23">)</operator><name pos:start="277:24" pos:end="277:24">p</name> <operator pos:start="277:26" pos:end="277:26">-</operator> <operator pos:start="277:28" pos:end="277:28">(</operator><name pos:start="277:29" pos:end="277:32">char</name> <operator pos:start="277:34" pos:end="277:34">*</operator><operator pos:start="277:35" pos:end="277:35">)</operator><name pos:start="277:36" pos:end="277:49"><name pos:start="277:36" pos:end="277:39">head</name><operator pos:start="277:40" pos:end="277:41">-&gt;</operator><name pos:start="277:42" pos:end="277:49">iov_base</name></name></expr>;</expr_stmt>

	<expr_stmt pos:start="279:9" pos:end="281:69"><expr pos:start="279:9" pos:end="281:68"><name pos:start="279:9" pos:end="279:30"><name pos:start="279:9" pos:end="279:13">rqstp</name><operator pos:start="279:14" pos:end="279:15">-&gt;</operator><name pos:start="279:16" pos:end="279:21">rq_res</name><operator pos:start="279:22" pos:end="279:22">.</operator><name pos:start="279:23" pos:end="279:30">page_len</name></name> <operator pos:start="279:32" pos:end="279:32">=</operator> <name pos:start="279:34" pos:end="279:34">w</name> <operator pos:start="279:36" pos:end="279:36">=</operator> <call pos:start="279:38" pos:end="281:68"><name pos:start="279:38" pos:end="279:48">nfsacl_size</name><argument_list pos:start="279:49" pos:end="281:68">(
		<argument pos:start="280:17" pos:end="280:67"><expr pos:start="280:17" pos:end="280:67"><ternary pos:start="280:17" pos:end="280:67"><condition pos:start="280:17" pos:end="280:42"><expr pos:start="280:17" pos:end="280:38"><operator pos:start="280:17" pos:end="280:17">(</operator><name pos:start="280:18" pos:end="280:27"><name pos:start="280:18" pos:end="280:21">resp</name><operator pos:start="280:22" pos:end="280:23">-&gt;</operator><name pos:start="280:24" pos:end="280:27">mask</name></name> <operator pos:start="280:29" pos:end="280:29">&amp;</operator> <name pos:start="280:31" pos:end="280:37">NFS_ACL</name><operator pos:start="280:38" pos:end="280:38">)</operator></expr>   ?</condition><then pos:start="280:44" pos:end="280:59"> <expr pos:start="280:44" pos:end="280:59"><name pos:start="280:44" pos:end="280:59"><name pos:start="280:44" pos:end="280:47">resp</name><operator pos:start="280:48" pos:end="280:49">-&gt;</operator><name pos:start="280:50" pos:end="280:59">acl_access</name></name></expr>  </then><else pos:start="280:62" pos:end="280:67">: <expr pos:start="280:64" pos:end="280:67"><name pos:start="280:64" pos:end="280:67">NULL</name></expr></else></ternary></expr></argument>,
		<argument pos:start="281:17" pos:end="281:67"><expr pos:start="281:17" pos:end="281:67"><ternary pos:start="281:17" pos:end="281:67"><condition pos:start="281:17" pos:end="281:42"><expr pos:start="281:17" pos:end="281:40"><operator pos:start="281:17" pos:end="281:17">(</operator><name pos:start="281:18" pos:end="281:27"><name pos:start="281:18" pos:end="281:21">resp</name><operator pos:start="281:22" pos:end="281:23">-&gt;</operator><name pos:start="281:24" pos:end="281:27">mask</name></name> <operator pos:start="281:29" pos:end="281:29">&amp;</operator> <name pos:start="281:31" pos:end="281:39">NFS_DFACL</name><operator pos:start="281:40" pos:end="281:40">)</operator></expr> ?</condition><then pos:start="281:44" pos:end="281:60"> <expr pos:start="281:44" pos:end="281:60"><name pos:start="281:44" pos:end="281:60"><name pos:start="281:44" pos:end="281:47">resp</name><operator pos:start="281:48" pos:end="281:49">-&gt;</operator><name pos:start="281:50" pos:end="281:60">acl_default</name></name></expr> </then><else pos:start="281:62" pos:end="281:67">: <expr pos:start="281:64" pos:end="281:67"><name pos:start="281:64" pos:end="281:67">NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while pos:start="282:9" pos:end="286:9">while <condition pos:start="282:15" pos:end="282:21">(<expr pos:start="282:16" pos:end="282:20"><name pos:start="282:16" pos:end="282:16">w</name> <operator pos:start="282:18" pos:end="282:18">&gt;</operator> <literal type="number" pos:start="282:20" pos:end="282:20">0</literal></expr>)</condition> <block pos:start="282:23" pos:end="286:9">{<block_content pos:start="283:17" pos:end="285:31">
		<if_stmt pos:start="283:17" pos:end="284:33"><if pos:start="283:17" pos:end="284:33">if <condition pos:start="283:20" pos:end="283:46">(<expr pos:start="283:21" pos:end="283:45"><operator pos:start="283:21" pos:end="283:21">!</operator><operator pos:start="283:22" pos:end="283:22">*</operator><operator pos:start="283:23" pos:end="283:23">(</operator><name pos:start="283:24" pos:end="283:42"><name pos:start="283:24" pos:end="283:28">rqstp</name><operator pos:start="283:29" pos:end="283:30">-&gt;</operator><name pos:start="283:31" pos:end="283:42">rq_next_page</name></name><operator pos:start="283:43" pos:end="283:44">++</operator><operator pos:start="283:45" pos:end="283:45">)</operator></expr>)</condition><block type="pseudo" pos:start="284:25" pos:end="284:33"><block_content pos:start="284:25" pos:end="284:33">
			<return pos:start="284:25" pos:end="284:33">return <expr pos:start="284:32" pos:end="284:32"><literal type="number" pos:start="284:32" pos:end="284:32">0</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt pos:start="285:17" pos:end="285:31"><expr pos:start="285:17" pos:end="285:30"><name pos:start="285:17" pos:end="285:17">w</name> <operator pos:start="285:19" pos:end="285:20">-=</operator> <name pos:start="285:22" pos:end="285:30">PAGE_SIZE</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt pos:start="288:9" pos:end="290:51"><expr pos:start="288:9" pos:end="290:50"><name pos:start="288:9" pos:end="288:9">n</name> <operator pos:start="288:11" pos:end="288:11">=</operator> <call pos:start="288:13" pos:end="290:50"><name pos:start="288:13" pos:end="288:25">nfsacl_encode</name><argument_list pos:start="288:26" pos:end="290:50">(<argument pos:start="288:27" pos:end="288:40"><expr pos:start="288:27" pos:end="288:40"><operator pos:start="288:27" pos:end="288:27">&amp;</operator><name pos:start="288:28" pos:end="288:40"><name pos:start="288:28" pos:end="288:32">rqstp</name><operator pos:start="288:33" pos:end="288:34">-&gt;</operator><name pos:start="288:35" pos:end="288:40">rq_res</name></name></expr></argument>, <argument pos:start="288:43" pos:end="288:46"><expr pos:start="288:43" pos:end="288:46"><name pos:start="288:43" pos:end="288:46">base</name></expr></argument>, <argument pos:start="288:49" pos:end="288:53"><expr pos:start="288:49" pos:end="288:53"><name pos:start="288:49" pos:end="288:53">inode</name></expr></argument>,
			  <argument pos:start="289:27" pos:end="289:42"><expr pos:start="289:27" pos:end="289:42"><name pos:start="289:27" pos:end="289:42"><name pos:start="289:27" pos:end="289:30">resp</name><operator pos:start="289:31" pos:end="289:32">-&gt;</operator><name pos:start="289:33" pos:end="289:42">acl_access</name></name></expr></argument>,
			  <argument pos:start="290:27" pos:end="290:46"><expr pos:start="290:27" pos:end="290:46"><name pos:start="290:27" pos:end="290:36"><name pos:start="290:27" pos:end="290:30">resp</name><operator pos:start="290:31" pos:end="290:32">-&gt;</operator><name pos:start="290:33" pos:end="290:36">mask</name></name> <operator pos:start="290:38" pos:end="290:38">&amp;</operator> <name pos:start="290:40" pos:end="290:46">NFS_ACL</name></expr></argument>, <argument pos:start="290:49" pos:end="290:49"><expr pos:start="290:49" pos:end="290:49"><literal type="number" pos:start="290:49" pos:end="290:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="291:9" pos:end="295:51"><if pos:start="291:9" pos:end="295:51">if <condition pos:start="291:12" pos:end="291:18">(<expr pos:start="291:13" pos:end="291:17"><name pos:start="291:13" pos:end="291:13">n</name> <operator pos:start="291:15" pos:end="291:15">&gt;</operator> <literal type="number" pos:start="291:17" pos:end="291:17">0</literal></expr>)</condition><block type="pseudo" pos:start="292:17" pos:end="295:51"><block_content pos:start="292:17" pos:end="295:51">
		<expr_stmt pos:start="292:17" pos:end="295:51"><expr pos:start="292:17" pos:end="295:50"><name pos:start="292:17" pos:end="292:17">n</name> <operator pos:start="292:19" pos:end="292:19">=</operator> <call pos:start="292:21" pos:end="295:50"><name pos:start="292:21" pos:end="292:33">nfsacl_encode</name><argument_list pos:start="292:34" pos:end="295:50">(<argument pos:start="292:35" pos:end="292:48"><expr pos:start="292:35" pos:end="292:48"><operator pos:start="292:35" pos:end="292:35">&amp;</operator><name pos:start="292:36" pos:end="292:48"><name pos:start="292:36" pos:end="292:40">rqstp</name><operator pos:start="292:41" pos:end="292:42">-&gt;</operator><name pos:start="292:43" pos:end="292:48">rq_res</name></name></expr></argument>, <argument pos:start="292:51" pos:end="292:58"><expr pos:start="292:51" pos:end="292:58"><name pos:start="292:51" pos:end="292:54">base</name> <operator pos:start="292:56" pos:end="292:56">+</operator> <name pos:start="292:58" pos:end="292:58">n</name></expr></argument>, <argument pos:start="292:61" pos:end="292:65"><expr pos:start="292:61" pos:end="292:65"><name pos:start="292:61" pos:end="292:65">inode</name></expr></argument>,
				  <argument pos:start="293:35" pos:end="293:51"><expr pos:start="293:35" pos:end="293:51"><name pos:start="293:35" pos:end="293:51"><name pos:start="293:35" pos:end="293:38">resp</name><operator pos:start="293:39" pos:end="293:40">-&gt;</operator><name pos:start="293:41" pos:end="293:51">acl_default</name></name></expr></argument>,
				  <argument pos:start="294:35" pos:end="294:56"><expr pos:start="294:35" pos:end="294:56"><name pos:start="294:35" pos:end="294:44"><name pos:start="294:35" pos:end="294:38">resp</name><operator pos:start="294:39" pos:end="294:40">-&gt;</operator><name pos:start="294:41" pos:end="294:44">mask</name></name> <operator pos:start="294:46" pos:end="294:46">&amp;</operator> <name pos:start="294:48" pos:end="294:56">NFS_DFACL</name></expr></argument>,
				  <argument pos:start="295:35" pos:end="295:49"><expr pos:start="295:35" pos:end="295:49"><name pos:start="295:35" pos:end="295:49">NFS_ACL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return pos:start="296:9" pos:end="296:23">return <expr pos:start="296:16" pos:end="296:22"><operator pos:start="296:16" pos:end="296:16">(</operator><name pos:start="296:17" pos:end="296:17">n</name> <operator pos:start="296:19" pos:end="296:19">&gt;</operator> <literal type="number" pos:start="296:21" pos:end="296:21">0</literal><operator pos:start="296:22" pos:end="296:22">)</operator></expr>;</return>
</block_content>}</block></function>

<function pos:start="299:1" pos:end="304:1"><type pos:start="299:1" pos:end="299:10"><specifier pos:start="299:1" pos:end="299:6">static</specifier> <name pos:start="299:8" pos:end="299:10">int</name></type> <name pos:start="299:12" pos:end="299:39">nfsaclsvc_encode_attrstatres</name><parameter_list pos:start="299:40" pos:end="300:43">(<parameter pos:start="299:41" pos:end="299:62"><decl pos:start="299:41" pos:end="299:62"><type pos:start="299:41" pos:end="299:62"><name pos:start="299:41" pos:end="299:55"><name pos:start="299:41" pos:end="299:46">struct</name> <name pos:start="299:48" pos:end="299:55">svc_rqst</name></name> <modifier pos:start="299:57" pos:end="299:57">*</modifier></type><name pos:start="299:58" pos:end="299:62">rqstp</name></decl></parameter>, <parameter pos:start="299:65" pos:end="299:73"><decl pos:start="299:65" pos:end="299:73"><type pos:start="299:65" pos:end="299:73"><name pos:start="299:65" pos:end="299:70">__be32</name> <modifier pos:start="299:72" pos:end="299:72">*</modifier></type><name pos:start="299:73" pos:end="299:73">p</name></decl></parameter>,
		<parameter pos:start="300:17" pos:end="300:42"><decl pos:start="300:17" pos:end="300:42"><type pos:start="300:17" pos:end="300:42"><name pos:start="300:17" pos:end="300:36"><name pos:start="300:17" pos:end="300:22">struct</name> <name pos:start="300:24" pos:end="300:36">nfsd_attrstat</name></name> <modifier pos:start="300:38" pos:end="300:38">*</modifier></type><name pos:start="300:39" pos:end="300:42">resp</name></decl></parameter>)</parameter_list>
<block pos:start="301:1" pos:end="304:1">{<block_content pos:start="302:9" pos:end="303:43">
	<expr_stmt pos:start="302:9" pos:end="302:67"><expr pos:start="302:9" pos:end="302:66"><name pos:start="302:9" pos:end="302:9">p</name> <operator pos:start="302:11" pos:end="302:11">=</operator> <call pos:start="302:13" pos:end="302:66"><name pos:start="302:13" pos:end="302:32">nfs2svc_encode_fattr</name><argument_list pos:start="302:33" pos:end="302:66">(<argument pos:start="302:34" pos:end="302:38"><expr pos:start="302:34" pos:end="302:38"><name pos:start="302:34" pos:end="302:38">rqstp</name></expr></argument>, <argument pos:start="302:41" pos:end="302:41"><expr pos:start="302:41" pos:end="302:41"><name pos:start="302:41" pos:end="302:41">p</name></expr></argument>, <argument pos:start="302:44" pos:end="302:52"><expr pos:start="302:44" pos:end="302:52"><operator pos:start="302:44" pos:end="302:44">&amp;</operator><name pos:start="302:45" pos:end="302:52"><name pos:start="302:45" pos:end="302:48">resp</name><operator pos:start="302:49" pos:end="302:50">-&gt;</operator><name pos:start="302:51" pos:end="302:52">fh</name></name></expr></argument>, <argument pos:start="302:55" pos:end="302:65"><expr pos:start="302:55" pos:end="302:65"><operator pos:start="302:55" pos:end="302:55">&amp;</operator><name pos:start="302:56" pos:end="302:65"><name pos:start="302:56" pos:end="302:59">resp</name><operator pos:start="302:60" pos:end="302:61">-&gt;</operator><name pos:start="302:62" pos:end="302:65">stat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="303:9" pos:end="303:43">return <expr pos:start="303:16" pos:end="303:42"><call pos:start="303:16" pos:end="303:42"><name pos:start="303:16" pos:end="303:32">xdr_ressize_check</name><argument_list pos:start="303:33" pos:end="303:42">(<argument pos:start="303:34" pos:end="303:38"><expr pos:start="303:34" pos:end="303:38"><name pos:start="303:34" pos:end="303:38">rqstp</name></expr></argument>, <argument pos:start="303:41" pos:end="303:41"><expr pos:start="303:41" pos:end="303:41"><name pos:start="303:41" pos:end="303:41">p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="306:1" pos:end="306:12">/* ACCESS */</comment>
<function pos:start="307:1" pos:end="313:1"><type pos:start="307:1" pos:end="307:10"><specifier pos:start="307:1" pos:end="307:6">static</specifier> <name pos:start="307:8" pos:end="307:10">int</name></type> <name pos:start="307:12" pos:end="307:37">nfsaclsvc_encode_accessres</name><parameter_list pos:start="307:38" pos:end="308:45">(<parameter pos:start="307:39" pos:end="307:60"><decl pos:start="307:39" pos:end="307:60"><type pos:start="307:39" pos:end="307:60"><name pos:start="307:39" pos:end="307:53"><name pos:start="307:39" pos:end="307:44">struct</name> <name pos:start="307:46" pos:end="307:53">svc_rqst</name></name> <modifier pos:start="307:55" pos:end="307:55">*</modifier></type><name pos:start="307:56" pos:end="307:60">rqstp</name></decl></parameter>, <parameter pos:start="307:63" pos:end="307:71"><decl pos:start="307:63" pos:end="307:71"><type pos:start="307:63" pos:end="307:71"><name pos:start="307:63" pos:end="307:68">__be32</name> <modifier pos:start="307:70" pos:end="307:70">*</modifier></type><name pos:start="307:71" pos:end="307:71">p</name></decl></parameter>,
		<parameter pos:start="308:17" pos:end="308:44"><decl pos:start="308:17" pos:end="308:44"><type pos:start="308:17" pos:end="308:44"><name pos:start="308:17" pos:end="308:38"><name pos:start="308:17" pos:end="308:22">struct</name> <name pos:start="308:24" pos:end="308:38">nfsd3_accessres</name></name> <modifier pos:start="308:40" pos:end="308:40">*</modifier></type><name pos:start="308:41" pos:end="308:44">resp</name></decl></parameter>)</parameter_list>
<block pos:start="309:1" pos:end="313:1">{<block_content pos:start="310:9" pos:end="312:43">
	<expr_stmt pos:start="310:9" pos:end="310:67"><expr pos:start="310:9" pos:end="310:66"><name pos:start="310:9" pos:end="310:9">p</name> <operator pos:start="310:11" pos:end="310:11">=</operator> <call pos:start="310:13" pos:end="310:66"><name pos:start="310:13" pos:end="310:32">nfs2svc_encode_fattr</name><argument_list pos:start="310:33" pos:end="310:66">(<argument pos:start="310:34" pos:end="310:38"><expr pos:start="310:34" pos:end="310:38"><name pos:start="310:34" pos:end="310:38">rqstp</name></expr></argument>, <argument pos:start="310:41" pos:end="310:41"><expr pos:start="310:41" pos:end="310:41"><name pos:start="310:41" pos:end="310:41">p</name></expr></argument>, <argument pos:start="310:44" pos:end="310:52"><expr pos:start="310:44" pos:end="310:52"><operator pos:start="310:44" pos:end="310:44">&amp;</operator><name pos:start="310:45" pos:end="310:52"><name pos:start="310:45" pos:end="310:48">resp</name><operator pos:start="310:49" pos:end="310:50">-&gt;</operator><name pos:start="310:51" pos:end="310:52">fh</name></name></expr></argument>, <argument pos:start="310:55" pos:end="310:65"><expr pos:start="310:55" pos:end="310:65"><operator pos:start="310:55" pos:end="310:55">&amp;</operator><name pos:start="310:56" pos:end="310:65"><name pos:start="310:56" pos:end="310:59">resp</name><operator pos:start="310:60" pos:end="310:61">-&gt;</operator><name pos:start="310:62" pos:end="310:65">stat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="311:9" pos:end="311:35"><expr pos:start="311:9" pos:end="311:34"><operator pos:start="311:9" pos:end="311:9">*</operator><name pos:start="311:10" pos:end="311:10">p</name><operator pos:start="311:11" pos:end="311:12">++</operator> <operator pos:start="311:14" pos:end="311:14">=</operator> <call pos:start="311:16" pos:end="311:34"><name pos:start="311:16" pos:end="311:20">htonl</name><argument_list pos:start="311:21" pos:end="311:34">(<argument pos:start="311:22" pos:end="311:33"><expr pos:start="311:22" pos:end="311:33"><name pos:start="311:22" pos:end="311:33"><name pos:start="311:22" pos:end="311:25">resp</name><operator pos:start="311:26" pos:end="311:27">-&gt;</operator><name pos:start="311:28" pos:end="311:33">access</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="312:9" pos:end="312:43">return <expr pos:start="312:16" pos:end="312:42"><call pos:start="312:16" pos:end="312:42"><name pos:start="312:16" pos:end="312:32">xdr_ressize_check</name><argument_list pos:start="312:33" pos:end="312:42">(<argument pos:start="312:34" pos:end="312:38"><expr pos:start="312:34" pos:end="312:38"><name pos:start="312:34" pos:end="312:38">rqstp</name></expr></argument>, <argument pos:start="312:41" pos:end="312:41"><expr pos:start="312:41" pos:end="312:41"><name pos:start="312:41" pos:end="312:41">p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="315:1" pos:end="317:3">/*
 * XDR release functions
 */</comment>
<function pos:start="318:1" pos:end="325:1"><type pos:start="318:1" pos:end="318:10"><specifier pos:start="318:1" pos:end="318:6">static</specifier> <name pos:start="318:8" pos:end="318:10">int</name></type> <name pos:start="318:12" pos:end="318:35">nfsaclsvc_release_getacl</name><parameter_list pos:start="318:36" pos:end="319:45">(<parameter pos:start="318:37" pos:end="318:58"><decl pos:start="318:37" pos:end="318:58"><type pos:start="318:37" pos:end="318:58"><name pos:start="318:37" pos:end="318:51"><name pos:start="318:37" pos:end="318:42">struct</name> <name pos:start="318:44" pos:end="318:51">svc_rqst</name></name> <modifier pos:start="318:53" pos:end="318:53">*</modifier></type><name pos:start="318:54" pos:end="318:58">rqstp</name></decl></parameter>, <parameter pos:start="318:61" pos:end="318:69"><decl pos:start="318:61" pos:end="318:69"><type pos:start="318:61" pos:end="318:69"><name pos:start="318:61" pos:end="318:66">__be32</name> <modifier pos:start="318:68" pos:end="318:68">*</modifier></type><name pos:start="318:69" pos:end="318:69">p</name></decl></parameter>,
		<parameter pos:start="319:17" pos:end="319:44"><decl pos:start="319:17" pos:end="319:44"><type pos:start="319:17" pos:end="319:44"><name pos:start="319:17" pos:end="319:38"><name pos:start="319:17" pos:end="319:22">struct</name> <name pos:start="319:24" pos:end="319:38">nfsd3_getaclres</name></name> <modifier pos:start="319:40" pos:end="319:40">*</modifier></type><name pos:start="319:41" pos:end="319:44">resp</name></decl></parameter>)</parameter_list>
<block pos:start="320:1" pos:end="325:1">{<block_content pos:start="321:9" pos:end="324:17">
	<expr_stmt pos:start="321:9" pos:end="321:26"><expr pos:start="321:9" pos:end="321:25"><call pos:start="321:9" pos:end="321:25"><name pos:start="321:9" pos:end="321:14">fh_put</name><argument_list pos:start="321:15" pos:end="321:25">(<argument pos:start="321:16" pos:end="321:24"><expr pos:start="321:16" pos:end="321:24"><operator pos:start="321:16" pos:end="321:16">&amp;</operator><name pos:start="321:17" pos:end="321:24"><name pos:start="321:17" pos:end="321:20">resp</name><operator pos:start="321:21" pos:end="321:22">-&gt;</operator><name pos:start="321:23" pos:end="321:24">fh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="322:9" pos:end="322:44"><expr pos:start="322:9" pos:end="322:43"><call pos:start="322:9" pos:end="322:43"><name pos:start="322:9" pos:end="322:25">posix_acl_release</name><argument_list pos:start="322:26" pos:end="322:43">(<argument pos:start="322:27" pos:end="322:42"><expr pos:start="322:27" pos:end="322:42"><name pos:start="322:27" pos:end="322:42"><name pos:start="322:27" pos:end="322:30">resp</name><operator pos:start="322:31" pos:end="322:32">-&gt;</operator><name pos:start="322:33" pos:end="322:42">acl_access</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="323:9" pos:end="323:45"><expr pos:start="323:9" pos:end="323:44"><call pos:start="323:9" pos:end="323:44"><name pos:start="323:9" pos:end="323:25">posix_acl_release</name><argument_list pos:start="323:26" pos:end="323:44">(<argument pos:start="323:27" pos:end="323:43"><expr pos:start="323:27" pos:end="323:43"><name pos:start="323:27" pos:end="323:43"><name pos:start="323:27" pos:end="323:30">resp</name><operator pos:start="323:31" pos:end="323:32">-&gt;</operator><name pos:start="323:33" pos:end="323:43">acl_default</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="324:9" pos:end="324:17">return <expr pos:start="324:16" pos:end="324:16"><literal type="number" pos:start="324:16" pos:end="324:16">1</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="327:1" pos:end="332:1"><type pos:start="327:1" pos:end="327:10"><specifier pos:start="327:1" pos:end="327:6">static</specifier> <name pos:start="327:8" pos:end="327:10">int</name></type> <name pos:start="327:12" pos:end="327:37">nfsaclsvc_release_attrstat</name><parameter_list pos:start="327:38" pos:end="328:43">(<parameter pos:start="327:39" pos:end="327:60"><decl pos:start="327:39" pos:end="327:60"><type pos:start="327:39" pos:end="327:60"><name pos:start="327:39" pos:end="327:53"><name pos:start="327:39" pos:end="327:44">struct</name> <name pos:start="327:46" pos:end="327:53">svc_rqst</name></name> <modifier pos:start="327:55" pos:end="327:55">*</modifier></type><name pos:start="327:56" pos:end="327:60">rqstp</name></decl></parameter>, <parameter pos:start="327:63" pos:end="327:71"><decl pos:start="327:63" pos:end="327:71"><type pos:start="327:63" pos:end="327:71"><name pos:start="327:63" pos:end="327:68">__be32</name> <modifier pos:start="327:70" pos:end="327:70">*</modifier></type><name pos:start="327:71" pos:end="327:71">p</name></decl></parameter>,
		<parameter pos:start="328:17" pos:end="328:42"><decl pos:start="328:17" pos:end="328:42"><type pos:start="328:17" pos:end="328:42"><name pos:start="328:17" pos:end="328:36"><name pos:start="328:17" pos:end="328:22">struct</name> <name pos:start="328:24" pos:end="328:36">nfsd_attrstat</name></name> <modifier pos:start="328:38" pos:end="328:38">*</modifier></type><name pos:start="328:39" pos:end="328:42">resp</name></decl></parameter>)</parameter_list>
<block pos:start="329:1" pos:end="332:1">{<block_content pos:start="330:9" pos:end="331:17">
	<expr_stmt pos:start="330:9" pos:end="330:26"><expr pos:start="330:9" pos:end="330:25"><call pos:start="330:9" pos:end="330:25"><name pos:start="330:9" pos:end="330:14">fh_put</name><argument_list pos:start="330:15" pos:end="330:25">(<argument pos:start="330:16" pos:end="330:24"><expr pos:start="330:16" pos:end="330:24"><operator pos:start="330:16" pos:end="330:16">&amp;</operator><name pos:start="330:17" pos:end="330:24"><name pos:start="330:17" pos:end="330:20">resp</name><operator pos:start="330:21" pos:end="330:22">-&gt;</operator><name pos:start="330:23" pos:end="330:24">fh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="331:9" pos:end="331:17">return <expr pos:start="331:16" pos:end="331:16"><literal type="number" pos:start="331:16" pos:end="331:16">1</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="334:1" pos:end="346:0"><type pos:start="334:1" pos:end="334:10"><specifier pos:start="334:1" pos:end="334:6">static</specifier> <name pos:start="334:8" pos:end="334:10">int</name></type> <name pos:start="334:12" pos:end="334:35">nfsaclsvc_release_access</name><parameter_list pos:start="334:36" pos:end="335:44">(<parameter pos:start="334:37" pos:end="334:58"><decl pos:start="334:37" pos:end="334:58"><type pos:start="334:37" pos:end="334:58"><name pos:start="334:37" pos:end="334:51"><name pos:start="334:37" pos:end="334:42">struct</name> <name pos:start="334:44" pos:end="334:51">svc_rqst</name></name> <modifier pos:start="334:53" pos:end="334:53">*</modifier></type><name pos:start="334:54" pos:end="334:58">rqstp</name></decl></parameter>, <parameter pos:start="334:61" pos:end="334:69"><decl pos:start="334:61" pos:end="334:69"><type pos:start="334:61" pos:end="334:69"><name pos:start="334:61" pos:end="334:66">__be32</name> <modifier pos:start="334:68" pos:end="334:68">*</modifier></type><name pos:start="334:69" pos:end="334:69">p</name></decl></parameter>,
               <parameter pos:start="335:16" pos:end="335:43"><decl pos:start="335:16" pos:end="335:43"><type pos:start="335:16" pos:end="335:43"><name pos:start="335:16" pos:end="335:37"><name pos:start="335:16" pos:end="335:21">struct</name> <name pos:start="335:23" pos:end="335:37">nfsd3_accessres</name></name> <modifier pos:start="335:39" pos:end="335:39">*</modifier></type><name pos:start="335:40" pos:end="335:43">resp</name></decl></parameter>)</parameter_list>
<block pos:start="336:1" pos:end="346:0">{<block_content pos:start="337:8" pos:end="338:16">
       <expr_stmt pos:start="337:8" pos:end="337:25"><expr pos:start="337:8" pos:end="337:24"><call pos:start="337:8" pos:end="337:24"><name pos:start="337:8" pos:end="337:13">fh_put</name><argument_list pos:start="337:14" pos:end="337:24">(<argument pos:start="337:15" pos:end="337:23"><expr pos:start="337:15" pos:end="337:23"><operator pos:start="337:15" pos:end="337:15">&amp;</operator><name pos:start="337:16" pos:end="337:23"><name pos:start="337:16" pos:end="337:19">resp</name><operator pos:start="337:20" pos:end="337:21">-&gt;</operator><name pos:start="337:22" pos:end="337:23">fh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return pos:start="338:8" pos:end="338:16">return <expr pos:start="338:15" pos:end="338:15"><literal type="number" pos:start="338:15" pos:end="338:15">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define pos:start="341:1" pos:end="341:44">#<cpp:directive pos:start="341:2" pos:end="341:7">define</cpp:directive> <cpp:macro pos:start="341:9" pos:end="341:33"><name pos:start="341:9" pos:end="341:33">nfsaclsvc_decode_voidargs</name></cpp:macro>	<cpp:value pos:start="341:41" pos:end="341:44">NULL</cpp:value></cpp:define>
<cpp:define pos:start="342:1" pos:end="342:44">#<cpp:directive pos:start="342:2" pos:end="342:7">define</cpp:directive> <cpp:macro pos:start="342:9" pos:end="342:30"><name pos:start="342:9" pos:end="342:30">nfsaclsvc_release_void</name></cpp:macro>		<cpp:value pos:start="342:41" pos:end="342:44">NULL</cpp:value></cpp:define>
<cpp:define pos:start="343:1" pos:end="343:44">#<cpp:directive pos:start="343:2" pos:end="343:7">define</cpp:directive> <cpp:macro pos:start="343:9" pos:end="343:25"><name pos:start="343:9" pos:end="343:25">nfsd3_fhandleargs</name></cpp:macro>	<cpp:value pos:start="343:33" pos:end="343:44">nfsd_fhandle</cpp:value></cpp:define>
<cpp:define pos:start="344:1" pos:end="344:45">#<cpp:directive pos:start="344:2" pos:end="344:7">define</cpp:directive> <cpp:macro pos:start="344:9" pos:end="344:25"><name pos:start="344:9" pos:end="344:25">nfsd3_attrstatres</name></cpp:macro>	<cpp:value pos:start="344:33" pos:end="344:45">nfsd_attrstat</cpp:value></cpp:define>
<cpp:define pos:start="345:1" pos:end="345:46">#<cpp:directive pos:start="345:2" pos:end="345:7">define</cpp:directive> <cpp:macro pos:start="345:9" pos:end="345:21"><name pos:start="345:9" pos:end="345:21">nfsd3_voidres</name></cpp:macro>		<cpp:value pos:start="345:33" pos:end="345:46">nfsd3_voidargs</cpp:value></cpp:define>
<struct pos:start="346:1" pos:end="364:0">struct <name pos:start="346:8" pos:end="346:21">nfsd3_voidargs</name> <block pos:start="346:23" pos:end="346:36">{ <decl_stmt pos:start="346:25" pos:end="346:34"><decl pos:start="346:25" pos:end="346:33"><type pos:start="346:25" pos:end="346:27"><name pos:start="346:25" pos:end="346:27">int</name></type> <name pos:start="346:29" pos:end="346:33">dummy</name></decl>;</decl_stmt> }</block>;</struct>

<cpp:define pos:start="348:1" pos:end="358:2">#<cpp:directive pos:start="348:2" pos:end="348:7">define</cpp:directive> <cpp:macro pos:start="348:9" pos:end="348:53"><name pos:start="348:9" pos:end="348:12">PROC</name><parameter_list pos:start="348:13" pos:end="348:53">(<parameter pos:start="348:14" pos:end="348:17"><type pos:start="348:14" pos:end="348:17"><name pos:start="348:14" pos:end="348:17">name</name></type></parameter>, <parameter pos:start="348:20" pos:end="348:23"><type pos:start="348:20" pos:end="348:23"><name pos:start="348:20" pos:end="348:23">argt</name></type></parameter>, <parameter pos:start="348:26" pos:end="348:29"><type pos:start="348:26" pos:end="348:29"><name pos:start="348:26" pos:end="348:29">rest</name></type></parameter>, <parameter pos:start="348:32" pos:end="348:35"><type pos:start="348:32" pos:end="348:35"><name pos:start="348:32" pos:end="348:35">relt</name></type></parameter>, <parameter pos:start="348:38" pos:end="348:42"><type pos:start="348:38" pos:end="348:42"><name pos:start="348:38" pos:end="348:42">cache</name></type></parameter>, <parameter pos:start="348:45" pos:end="348:52"><type pos:start="348:45" pos:end="348:52"><name pos:start="348:45" pos:end="348:52">respsize</name></type></parameter>)</parameter_list></cpp:macro>	\
 <cpp:value pos:start="349:2" pos:end="358:2">{ (svc_procfunc) nfsacld_proc_##name,		\
   (kxdrproc_t) nfsaclsvc_decode_##argt##args,	\
   (kxdrproc_t) nfsaclsvc_encode_##rest##res,	\
   (kxdrproc_t) nfsaclsvc_release_##relt,		\
   sizeof(struct nfsd3_##argt##args),		\
   sizeof(struct nfsd3_##rest##res),		\
   0,						\
   cache,					\
   respsize,					\
 }</cpp:value></cpp:define>

<cpp:define pos:start="360:1" pos:end="360:12">#<cpp:directive pos:start="360:2" pos:end="360:7">define</cpp:directive> <cpp:macro pos:start="360:9" pos:end="360:10"><name pos:start="360:9" pos:end="360:10">ST</name></cpp:macro> <cpp:value pos:start="360:12" pos:end="360:12">1</cpp:value></cpp:define>		<comment type="block" pos:start="360:25" pos:end="360:35">/* status*/</comment>
<cpp:define pos:start="361:1" pos:end="361:13">#<cpp:directive pos:start="361:2" pos:end="361:7">define</cpp:directive> <cpp:macro pos:start="361:9" pos:end="361:10"><name pos:start="361:9" pos:end="361:10">AT</name></cpp:macro> <cpp:value pos:start="361:12" pos:end="361:13">21</cpp:value></cpp:define>		<comment type="block" pos:start="361:25" pos:end="361:40">/* attributes */</comment>
<cpp:define pos:start="362:1" pos:end="362:18">#<cpp:directive pos:start="362:2" pos:end="362:7">define</cpp:directive> <cpp:macro pos:start="362:9" pos:end="362:11"><name pos:start="362:9" pos:end="362:11">pAT</name></cpp:macro> <cpp:value pos:start="362:13" pos:end="362:18">(1+AT)</cpp:value></cpp:define>	<comment type="block" pos:start="362:25" pos:end="362:59">/* post attributes - conditional */</comment>
<cpp:define pos:start="363:1" pos:end="363:37">#<cpp:directive pos:start="363:2" pos:end="363:7">define</cpp:directive> <cpp:macro pos:start="363:9" pos:end="363:11"><name pos:start="363:9" pos:end="363:11">ACL</name></cpp:macro> <cpp:value pos:start="363:13" pos:end="363:37">(1+NFS_ACL_MAX_ENTRIES*3)</cpp:value></cpp:define>  <comment type="block" pos:start="363:40" pos:end="363:64">/* Access Control List */</comment>

<decl_stmt pos:start="365:1" pos:end="371:2"><decl pos:start="365:1" pos:end="371:1"><type pos:start="365:1" pos:end="365:27"><specifier pos:start="365:1" pos:end="365:6">static</specifier> <name pos:start="365:8" pos:end="365:27"><name pos:start="365:8" pos:end="365:13">struct</name> <name pos:start="365:15" pos:end="365:27">svc_procedure</name></name></type>		<name pos:start="365:41" pos:end="365:62"><name pos:start="365:41" pos:end="365:60">nfsd_acl_procedures2</name><index pos:start="365:61" pos:end="365:62">[]</index></name> <init pos:start="365:64" pos:end="371:1">= <expr pos:start="365:66" pos:end="371:1"><block pos:start="365:66" pos:end="371:1">{
  <expr pos:start="366:3" pos:end="366:73"><call pos:start="366:3" pos:end="366:73"><name pos:start="366:3" pos:end="366:6">PROC</name><argument_list pos:start="366:7" pos:end="366:73">(<argument pos:start="366:8" pos:end="366:11"><expr pos:start="366:8" pos:end="366:11"><name pos:start="366:8" pos:end="366:11">null</name></expr></argument>,	<argument pos:start="366:17" pos:end="366:20"><expr pos:start="366:17" pos:end="366:20"><name pos:start="366:17" pos:end="366:20">void</name></expr></argument>,		<argument pos:start="366:33" pos:end="366:36"><expr pos:start="366:33" pos:end="366:36"><name pos:start="366:33" pos:end="366:36">void</name></expr></argument>,		<argument pos:start="366:49" pos:end="366:52"><expr pos:start="366:49" pos:end="366:52"><name pos:start="366:49" pos:end="366:52">void</name></expr></argument>,	  <argument pos:start="366:59" pos:end="366:68"><expr pos:start="366:59" pos:end="366:68"><name pos:start="366:59" pos:end="366:68">RC_NOCACHE</name></expr></argument>, <argument pos:start="366:71" pos:end="366:72"><expr pos:start="366:71" pos:end="366:72"><name pos:start="366:71" pos:end="366:72">ST</name></expr></argument>)</argument_list></call></expr>,
  <expr pos:start="367:3" pos:end="367:85"><call pos:start="367:3" pos:end="367:85"><name pos:start="367:3" pos:end="367:6">PROC</name><argument_list pos:start="367:7" pos:end="367:85">(<argument pos:start="367:8" pos:end="367:13"><expr pos:start="367:8" pos:end="367:13"><name pos:start="367:8" pos:end="367:13">getacl</name></expr></argument>,	<argument pos:start="367:17" pos:end="367:22"><expr pos:start="367:17" pos:end="367:22"><name pos:start="367:17" pos:end="367:22">getacl</name></expr></argument>,		<argument pos:start="367:33" pos:end="367:38"><expr pos:start="367:33" pos:end="367:38"><name pos:start="367:33" pos:end="367:38">getacl</name></expr></argument>,		<argument pos:start="367:49" pos:end="367:54"><expr pos:start="367:49" pos:end="367:54"><name pos:start="367:49" pos:end="367:54">getacl</name></expr></argument>,	  <argument pos:start="367:59" pos:end="367:68"><expr pos:start="367:59" pos:end="367:68"><name pos:start="367:59" pos:end="367:68">RC_NOCACHE</name></expr></argument>, <argument pos:start="367:71" pos:end="367:84"><expr pos:start="367:71" pos:end="367:84"><name pos:start="367:71" pos:end="367:72">ST</name><operator pos:start="367:73" pos:end="367:73">+</operator><literal type="number" pos:start="367:74" pos:end="367:75">1</literal><operator pos:start="367:75" pos:end="367:75">+</operator><literal type="number" pos:start="367:76" pos:end="367:76">2</literal><operator pos:start="367:77" pos:end="367:77">*</operator><operator pos:start="367:78" pos:end="367:78">(</operator><literal type="number" pos:start="367:79" pos:end="367:80">1</literal><operator pos:start="367:80" pos:end="367:80">+</operator><name pos:start="367:81" pos:end="367:83">ACL</name><operator pos:start="367:84" pos:end="367:84">)</operator></expr></argument>)</argument_list></call></expr>,
  <expr pos:start="368:3" pos:end="368:76"><call pos:start="368:3" pos:end="368:76"><name pos:start="368:3" pos:end="368:6">PROC</name><argument_list pos:start="368:7" pos:end="368:76">(<argument pos:start="368:8" pos:end="368:13"><expr pos:start="368:8" pos:end="368:13"><name pos:start="368:8" pos:end="368:13">setacl</name></expr></argument>,	<argument pos:start="368:17" pos:end="368:22"><expr pos:start="368:17" pos:end="368:22"><name pos:start="368:17" pos:end="368:22">setacl</name></expr></argument>,		<argument pos:start="368:33" pos:end="368:40"><expr pos:start="368:33" pos:end="368:40"><name pos:start="368:33" pos:end="368:40">attrstat</name></expr></argument>,	<argument pos:start="368:49" pos:end="368:56"><expr pos:start="368:49" pos:end="368:56"><name pos:start="368:49" pos:end="368:56">attrstat</name></expr></argument>, <argument pos:start="368:59" pos:end="368:68"><expr pos:start="368:59" pos:end="368:68"><name pos:start="368:59" pos:end="368:68">RC_NOCACHE</name></expr></argument>, <argument pos:start="368:71" pos:end="368:75"><expr pos:start="368:71" pos:end="368:75"><name pos:start="368:71" pos:end="368:72">ST</name><operator pos:start="368:73" pos:end="368:73">+</operator><name pos:start="368:74" pos:end="368:75">AT</name></expr></argument>)</argument_list></call></expr>,
  <expr pos:start="369:3" pos:end="369:76"><call pos:start="369:3" pos:end="369:76"><name pos:start="369:3" pos:end="369:6">PROC</name><argument_list pos:start="369:7" pos:end="369:76">(<argument pos:start="369:8" pos:end="369:14"><expr pos:start="369:8" pos:end="369:14"><name pos:start="369:8" pos:end="369:14">getattr</name></expr></argument>, <argument pos:start="369:17" pos:end="369:23"><expr pos:start="369:17" pos:end="369:23"><name pos:start="369:17" pos:end="369:23">fhandle</name></expr></argument>,	<argument pos:start="369:33" pos:end="369:40"><expr pos:start="369:33" pos:end="369:40"><name pos:start="369:33" pos:end="369:40">attrstat</name></expr></argument>,	<argument pos:start="369:49" pos:end="369:56"><expr pos:start="369:49" pos:end="369:56"><name pos:start="369:49" pos:end="369:56">attrstat</name></expr></argument>, <argument pos:start="369:59" pos:end="369:68"><expr pos:start="369:59" pos:end="369:68"><name pos:start="369:59" pos:end="369:68">RC_NOCACHE</name></expr></argument>, <argument pos:start="369:71" pos:end="369:75"><expr pos:start="369:71" pos:end="369:75"><name pos:start="369:71" pos:end="369:72">ST</name><operator pos:start="369:73" pos:end="369:73">+</operator><name pos:start="369:74" pos:end="369:75">AT</name></expr></argument>)</argument_list></call></expr>,
  <expr pos:start="370:3" pos:end="370:78"><call pos:start="370:3" pos:end="370:78"><name pos:start="370:3" pos:end="370:6">PROC</name><argument_list pos:start="370:7" pos:end="370:78">(<argument pos:start="370:8" pos:end="370:13"><expr pos:start="370:8" pos:end="370:13"><name pos:start="370:8" pos:end="370:13">access</name></expr></argument>,	<argument pos:start="370:17" pos:end="370:22"><expr pos:start="370:17" pos:end="370:22"><name pos:start="370:17" pos:end="370:22">access</name></expr></argument>,		<argument pos:start="370:33" pos:end="370:38"><expr pos:start="370:33" pos:end="370:38"><name pos:start="370:33" pos:end="370:38">access</name></expr></argument>,		<argument pos:start="370:49" pos:end="370:54"><expr pos:start="370:49" pos:end="370:54"><name pos:start="370:49" pos:end="370:54">access</name></expr></argument>,   <argument pos:start="370:59" pos:end="370:68"><expr pos:start="370:59" pos:end="370:68"><name pos:start="370:59" pos:end="370:68">RC_NOCACHE</name></expr></argument>, <argument pos:start="370:71" pos:end="370:77"><expr pos:start="370:71" pos:end="370:77"><name pos:start="370:71" pos:end="370:72">ST</name><operator pos:start="370:73" pos:end="370:73">+</operator><name pos:start="370:74" pos:end="370:75">AT</name><operator pos:start="370:76" pos:end="370:76">+</operator><literal type="number" pos:start="370:77" pos:end="370:77">1</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt pos:start="373:1" pos:end="380:2"><decl pos:start="373:1" pos:end="380:1"><type pos:start="373:1" pos:end="373:18"><name pos:start="373:1" pos:end="373:18"><name pos:start="373:1" pos:end="373:6">struct</name> <name pos:start="373:8" pos:end="373:18">svc_version</name></name></type>	<name pos:start="373:25" pos:end="373:41">nfsd_acl_version2</name> <init pos:start="373:43" pos:end="380:1">= <expr pos:start="373:45" pos:end="380:1"><block pos:start="373:45" pos:end="380:1">{
		<expr pos:start="374:17" pos:end="374:35"><operator pos:start="374:17" pos:end="374:17">.</operator><name pos:start="374:18" pos:end="374:24">vs_vers</name>	<operator pos:start="374:33" pos:end="374:33">=</operator> <literal type="number" pos:start="374:35" pos:end="374:35">2</literal></expr>,
		<expr pos:start="375:17" pos:end="375:35"><operator pos:start="375:17" pos:end="375:17">.</operator><name pos:start="375:18" pos:end="375:25">vs_nproc</name>	<operator pos:start="375:33" pos:end="375:33">=</operator> <literal type="number" pos:start="375:35" pos:end="375:35">5</literal></expr>,
		<expr pos:start="376:17" pos:end="376:54"><operator pos:start="376:17" pos:end="376:17">.</operator><name pos:start="376:18" pos:end="376:24">vs_proc</name>	<operator pos:start="376:33" pos:end="376:33">=</operator> <name pos:start="376:35" pos:end="376:54">nfsd_acl_procedures2</name></expr>,
		<expr pos:start="377:17" pos:end="377:47"><operator pos:start="377:17" pos:end="377:17">.</operator><name pos:start="377:18" pos:end="377:28">vs_dispatch</name>	<operator pos:start="377:33" pos:end="377:33">=</operator> <name pos:start="377:35" pos:end="377:47">nfsd_dispatch</name></expr>,
		<expr pos:start="378:17" pos:end="378:50"><operator pos:start="378:17" pos:end="378:17">.</operator><name pos:start="378:18" pos:end="378:27">vs_xdrsize</name>	<operator pos:start="378:33" pos:end="378:33">=</operator> <name pos:start="378:35" pos:end="378:50">NFS3_SVC_XDRSIZE</name></expr>,
		<expr pos:start="379:17" pos:end="379:35"><operator pos:start="379:17" pos:end="379:17">.</operator><name pos:start="379:18" pos:end="379:26">vs_hidden</name>	<operator pos:start="379:33" pos:end="379:33">=</operator> <literal type="number" pos:start="379:35" pos:end="379:35">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
