<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="program_file/pre_data\FFmpeg\cmdutils.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="20:3">/*
 * Various utilities for command line tools
 * Copyright (c) 2000-2003 Fabrice Bellard
 *
 * This file is part of FFmpeg.
 *
 * FFmpeg is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * FFmpeg is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with FFmpeg; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */</comment>

<cpp:include pos:start="22:1" pos:end="22:19">#<cpp:directive pos:start="22:2" pos:end="22:8">include</cpp:directive> <cpp:file pos:start="22:10" pos:end="22:19">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="23:1" pos:end="23:19">#<cpp:directive pos:start="23:2" pos:end="23:8">include</cpp:directive> <cpp:file pos:start="23:10" pos:end="23:19">&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="24:1" pos:end="24:19">#<cpp:directive pos:start="24:2" pos:end="24:8">include</cpp:directive> <cpp:file pos:start="24:10" pos:end="24:19">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="25:1" pos:end="25:18">#<cpp:directive pos:start="25:2" pos:end="25:8">include</cpp:directive> <cpp:file pos:start="25:10" pos:end="25:18">&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="26:1" pos:end="26:17">#<cpp:directive pos:start="26:2" pos:end="26:8">include</cpp:directive> <cpp:file pos:start="26:10" pos:end="26:17">&lt;math.h&gt;</cpp:file></cpp:include>

<comment type="block" pos:start="28:1" pos:end="30:55">/* Include only the enabled headers since some compilers (namely, Sun
   Studio) will not omit unused inline functions and create undefined
   references to libraries that are not being built. */</comment>

<cpp:include pos:start="32:1" pos:end="32:19">#<cpp:directive pos:start="32:2" pos:end="32:8">include</cpp:directive> <cpp:file pos:start="32:10" pos:end="32:19">"config.h"</cpp:file></cpp:include>
<cpp:include pos:start="33:1" pos:end="33:27">#<cpp:directive pos:start="33:2" pos:end="33:8">include</cpp:directive> <cpp:file pos:start="33:10" pos:end="33:27">"compat/va_copy.h"</cpp:file></cpp:include>
<cpp:include pos:start="34:1" pos:end="34:33">#<cpp:directive pos:start="34:2" pos:end="34:8">include</cpp:directive> <cpp:file pos:start="34:10" pos:end="34:33">"libavformat/avformat.h"</cpp:file></cpp:include>
<cpp:include pos:start="35:1" pos:end="35:33">#<cpp:directive pos:start="35:2" pos:end="35:8">include</cpp:directive> <cpp:file pos:start="35:10" pos:end="35:33">"libavfilter/avfilter.h"</cpp:file></cpp:include>
<cpp:include pos:start="36:1" pos:end="36:33">#<cpp:directive pos:start="36:2" pos:end="36:8">include</cpp:directive> <cpp:file pos:start="36:10" pos:end="36:33">"libavdevice/avdevice.h"</cpp:file></cpp:include>
<cpp:include pos:start="37:1" pos:end="37:37">#<cpp:directive pos:start="37:2" pos:end="37:8">include</cpp:directive> <cpp:file pos:start="37:10" pos:end="37:37">"libavresample/avresample.h"</cpp:file></cpp:include>
<cpp:include pos:start="38:1" pos:end="38:31">#<cpp:directive pos:start="38:2" pos:end="38:8">include</cpp:directive> <cpp:file pos:start="38:10" pos:end="38:31">"libswscale/swscale.h"</cpp:file></cpp:include>
<cpp:include pos:start="39:1" pos:end="39:37">#<cpp:directive pos:start="39:2" pos:end="39:8">include</cpp:directive> <cpp:file pos:start="39:10" pos:end="39:37">"libswresample/swresample.h"</cpp:file></cpp:include>
<cpp:include pos:start="40:1" pos:end="40:36">#<cpp:directive pos:start="40:2" pos:end="40:8">include</cpp:directive> <cpp:file pos:start="40:10" pos:end="40:36">"libpostproc/postprocess.h"</cpp:file></cpp:include>
<cpp:include pos:start="41:1" pos:end="41:31">#<cpp:directive pos:start="41:2" pos:end="41:8">include</cpp:directive> <cpp:file pos:start="41:10" pos:end="41:31">"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include pos:start="42:1" pos:end="42:31">#<cpp:directive pos:start="42:2" pos:end="42:8">include</cpp:directive> <cpp:file pos:start="42:10" pos:end="42:31">"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include pos:start="43:1" pos:end="43:29">#<cpp:directive pos:start="43:2" pos:end="43:8">include</cpp:directive> <cpp:file pos:start="43:10" pos:end="43:29">"libavutil/bprint.h"</cpp:file></cpp:include>
<cpp:include pos:start="44:1" pos:end="44:30">#<cpp:directive pos:start="44:2" pos:end="44:8">include</cpp:directive> <cpp:file pos:start="44:10" pos:end="44:30">"libavutil/display.h"</cpp:file></cpp:include>
<cpp:include pos:start="45:1" pos:end="45:34">#<cpp:directive pos:start="45:2" pos:end="45:8">include</cpp:directive> <cpp:file pos:start="45:10" pos:end="45:34">"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include pos:start="46:1" pos:end="46:31">#<cpp:directive pos:start="46:2" pos:end="46:8">include</cpp:directive> <cpp:file pos:start="46:10" pos:end="46:31">"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include pos:start="47:1" pos:end="47:27">#<cpp:directive pos:start="47:2" pos:end="47:8">include</cpp:directive> <cpp:file pos:start="47:10" pos:end="47:27">"libavutil/libm.h"</cpp:file></cpp:include>
<cpp:include pos:start="48:1" pos:end="48:33">#<cpp:directive pos:start="48:2" pos:end="48:8">include</cpp:directive> <cpp:file pos:start="48:10" pos:end="48:33">"libavutil/parseutils.h"</cpp:file></cpp:include>
<cpp:include pos:start="49:1" pos:end="49:30">#<cpp:directive pos:start="49:2" pos:end="49:8">include</cpp:directive> <cpp:file pos:start="49:10" pos:end="49:30">"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include pos:start="50:1" pos:end="50:27">#<cpp:directive pos:start="50:2" pos:end="50:8">include</cpp:directive> <cpp:file pos:start="50:10" pos:end="50:27">"libavutil/eval.h"</cpp:file></cpp:include>
<cpp:include pos:start="51:1" pos:end="51:27">#<cpp:directive pos:start="51:2" pos:end="51:8">include</cpp:directive> <cpp:file pos:start="51:10" pos:end="51:27">"libavutil/dict.h"</cpp:file></cpp:include>
<cpp:include pos:start="52:1" pos:end="52:26">#<cpp:directive pos:start="52:2" pos:end="52:8">include</cpp:directive> <cpp:file pos:start="52:10" pos:end="52:26">"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include pos:start="53:1" pos:end="53:26">#<cpp:directive pos:start="53:2" pos:end="53:8">include</cpp:directive> <cpp:file pos:start="53:10" pos:end="53:26">"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include pos:start="54:1" pos:end="54:32">#<cpp:directive pos:start="54:2" pos:end="54:8">include</cpp:directive> <cpp:file pos:start="54:10" pos:end="54:32">"libavutil/ffversion.h"</cpp:file></cpp:include>
<cpp:include pos:start="55:1" pos:end="55:30">#<cpp:directive pos:start="55:2" pos:end="55:8">include</cpp:directive> <cpp:file pos:start="55:10" pos:end="55:30">"libavutil/version.h"</cpp:file></cpp:include>
<cpp:include pos:start="56:1" pos:end="56:21">#<cpp:directive pos:start="56:2" pos:end="56:8">include</cpp:directive> <cpp:file pos:start="56:10" pos:end="56:21">"cmdutils.h"</cpp:file></cpp:include>
<cpp:if pos:start="57:1" pos:end="57:18">#<cpp:directive pos:start="57:2" pos:end="57:3">if</cpp:directive> <expr pos:start="57:5" pos:end="57:18"><name pos:start="57:5" pos:end="57:18">CONFIG_NETWORK</name></expr></cpp:if>
<cpp:include pos:start="58:1" pos:end="58:32">#<cpp:directive pos:start="58:2" pos:end="58:8">include</cpp:directive> <cpp:file pos:start="58:10" pos:end="58:32">"libavformat/network.h"</cpp:file></cpp:include>
<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="60:1" pos:end="60:23">#<cpp:directive pos:start="60:2" pos:end="60:3">if</cpp:directive> <expr pos:start="60:5" pos:end="60:23"><name pos:start="60:5" pos:end="60:23">HAVE_SYS_RESOURCE_H</name></expr></cpp:if>
<cpp:include pos:start="61:1" pos:end="61:21">#<cpp:directive pos:start="61:2" pos:end="61:8">include</cpp:directive> <cpp:file pos:start="61:10" pos:end="61:21">&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="62:1" pos:end="62:25">#<cpp:directive pos:start="62:2" pos:end="62:8">include</cpp:directive> <cpp:file pos:start="62:10" pos:end="62:25">&lt;sys/resource.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:start="63:1" pos:end="63:6">#<cpp:directive pos:start="63:2" pos:end="63:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="64:1" pos:end="64:13">#<cpp:directive pos:start="64:2" pos:end="64:6">ifdef</cpp:directive> <name pos:start="64:8" pos:end="64:13">_WIN32</name></cpp:ifdef>
<cpp:include pos:start="65:1" pos:end="65:20">#<cpp:directive pos:start="65:2" pos:end="65:8">include</cpp:directive> <cpp:file pos:start="65:10" pos:end="65:20">&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:start="66:1" pos:end="66:6">#<cpp:directive pos:start="66:2" pos:end="66:6">endif</cpp:directive></cpp:endif>

<function_decl pos:start="68:1" pos:end="68:40"><type pos:start="68:1" pos:end="68:10"><specifier pos:start="68:1" pos:end="68:6">static</specifier> <name pos:start="68:8" pos:end="68:10">int</name></type> <name pos:start="68:12" pos:end="68:22">init_report</name><parameter_list pos:start="68:23" pos:end="68:39">(<parameter pos:start="68:24" pos:end="68:38"><decl pos:start="68:24" pos:end="68:38"><type pos:start="68:24" pos:end="68:35"><specifier pos:start="68:24" pos:end="68:28">const</specifier> <name pos:start="68:30" pos:end="68:33">char</name> <modifier pos:start="68:35" pos:end="68:35">*</modifier></type><name pos:start="68:36" pos:end="68:38">env</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt pos:start="70:1" pos:end="70:23"><decl pos:start="70:1" pos:end="70:22"><type pos:start="70:1" pos:end="70:14"><name pos:start="70:1" pos:end="70:12">AVDictionary</name> <modifier pos:start="70:14" pos:end="70:14">*</modifier></type><name pos:start="70:15" pos:end="70:22">sws_dict</name></decl>;</decl_stmt>
<decl_stmt pos:start="71:1" pos:end="71:23"><decl pos:start="71:1" pos:end="71:22"><type pos:start="71:1" pos:end="71:14"><name pos:start="71:1" pos:end="71:12">AVDictionary</name> <modifier pos:start="71:14" pos:end="71:14">*</modifier></type><name pos:start="71:15" pos:end="71:22">swr_opts</name></decl>;</decl_stmt>
<decl_stmt pos:start="72:1" pos:end="72:55"><decl pos:start="72:1" pos:end="72:25"><type pos:start="72:1" pos:end="72:14"><name pos:start="72:1" pos:end="72:12">AVDictionary</name> <modifier pos:start="72:14" pos:end="72:14">*</modifier></type><name pos:start="72:15" pos:end="72:25">format_opts</name></decl>, <decl pos:start="72:28" pos:end="72:38"><type ref="prev" pos:start="72:1" pos:end="72:14"><modifier pos:start="72:28" pos:end="72:28">*</modifier></type><name pos:start="72:29" pos:end="72:38">codec_opts</name></decl>, <decl pos:start="72:41" pos:end="72:54"><type ref="prev" pos:start="72:1" pos:end="72:14"><modifier pos:start="72:41" pos:end="72:41">*</modifier></type><name pos:start="72:42" pos:end="72:54">resample_opts</name></decl>;</decl_stmt>

<decl_stmt pos:start="74:1" pos:end="74:25"><decl pos:start="74:1" pos:end="74:24"><type pos:start="74:1" pos:end="74:13"><specifier pos:start="74:1" pos:end="74:6">static</specifier> <name pos:start="74:8" pos:end="74:11">FILE</name> <modifier pos:start="74:13" pos:end="74:13">*</modifier></type><name pos:start="74:14" pos:end="74:24">report_file</name></decl>;</decl_stmt>
<decl_stmt pos:start="75:1" pos:end="75:44"><decl pos:start="75:1" pos:end="75:43"><type pos:start="75:1" pos:end="75:10"><specifier pos:start="75:1" pos:end="75:6">static</specifier> <name pos:start="75:8" pos:end="75:10">int</name></type> <name pos:start="75:12" pos:end="75:28">report_file_level</name> <init pos:start="75:30" pos:end="75:43">= <expr pos:start="75:32" pos:end="75:43"><name pos:start="75:32" pos:end="75:43">AV_LOG_DEBUG</name></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="76:1" pos:end="76:20"><decl pos:start="76:1" pos:end="76:19"><type pos:start="76:1" pos:end="76:3"><name pos:start="76:1" pos:end="76:3">int</name></type> <name pos:start="76:5" pos:end="76:15">hide_banner</name> <init pos:start="76:17" pos:end="76:19">= <expr pos:start="76:19" pos:end="76:19"><literal type="number" pos:start="76:19" pos:end="76:19">0</literal></expr></init></decl>;</decl_stmt>

<enum pos:start="78:1" pos:end="82:2">enum <name pos:start="78:6" pos:end="78:21">show_muxdemuxers</name> <block pos:start="78:23" pos:end="82:1">{
    <decl pos:start="79:5" pos:end="79:16"><name pos:start="79:5" pos:end="79:16">SHOW_DEFAULT</name></decl>,
    <decl pos:start="80:5" pos:end="80:17"><name pos:start="80:5" pos:end="80:17">SHOW_DEMUXERS</name></decl>,
    <decl pos:start="81:5" pos:end="81:15"><name pos:start="81:5" pos:end="81:15">SHOW_MUXERS</name></decl>,
}</block>;</enum>

<function pos:start="84:1" pos:end="87:1"><type pos:start="84:1" pos:end="84:4"><name pos:start="84:1" pos:end="84:4">void</name></type> <name pos:start="84:6" pos:end="84:14">init_opts</name><parameter_list pos:start="84:15" pos:end="84:20">(<parameter pos:start="84:16" pos:end="84:19"><decl pos:start="84:16" pos:end="84:19"><type pos:start="84:16" pos:end="84:19"><name pos:start="84:16" pos:end="84:19">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="85:1" pos:end="87:1">{<block_content pos:start="86:5" pos:end="86:50">
    <expr_stmt pos:start="86:5" pos:end="86:50"><expr pos:start="86:5" pos:end="86:49"><call pos:start="86:5" pos:end="86:49"><name pos:start="86:5" pos:end="86:15">av_dict_set</name><argument_list pos:start="86:16" pos:end="86:49">(<argument pos:start="86:17" pos:end="86:25"><expr pos:start="86:17" pos:end="86:25"><operator pos:start="86:17" pos:end="86:17">&amp;</operator><name pos:start="86:18" pos:end="86:25">sws_dict</name></expr></argument>, <argument pos:start="86:28" pos:end="86:34"><expr pos:start="86:28" pos:end="86:34"><literal type="string" pos:start="86:28" pos:end="86:34">"flags"</literal></expr></argument>, <argument pos:start="86:37" pos:end="86:45"><expr pos:start="86:37" pos:end="86:45"><literal type="string" pos:start="86:37" pos:end="86:45">"bicubic"</literal></expr></argument>, <argument pos:start="86:48" pos:end="86:48"><expr pos:start="86:48" pos:end="86:48"><literal type="number" pos:start="86:48" pos:end="86:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="89:1" pos:end="96:1"><type pos:start="89:1" pos:end="89:4"><name pos:start="89:1" pos:end="89:4">void</name></type> <name pos:start="89:6" pos:end="89:16">uninit_opts</name><parameter_list pos:start="89:17" pos:end="89:22">(<parameter pos:start="89:18" pos:end="89:21"><decl pos:start="89:18" pos:end="89:21"><type pos:start="89:18" pos:end="89:21"><name pos:start="89:18" pos:end="89:21">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="90:1" pos:end="96:1">{<block_content pos:start="91:5" pos:end="95:33">
    <expr_stmt pos:start="91:5" pos:end="91:28"><expr pos:start="91:5" pos:end="91:27"><call pos:start="91:5" pos:end="91:27"><name pos:start="91:5" pos:end="91:16">av_dict_free</name><argument_list pos:start="91:17" pos:end="91:27">(<argument pos:start="91:18" pos:end="91:26"><expr pos:start="91:18" pos:end="91:26"><operator pos:start="91:18" pos:end="91:18">&amp;</operator><name pos:start="91:19" pos:end="91:26">swr_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="92:5" pos:end="92:28"><expr pos:start="92:5" pos:end="92:27"><call pos:start="92:5" pos:end="92:27"><name pos:start="92:5" pos:end="92:16">av_dict_free</name><argument_list pos:start="92:17" pos:end="92:27">(<argument pos:start="92:18" pos:end="92:26"><expr pos:start="92:18" pos:end="92:26"><operator pos:start="92:18" pos:end="92:18">&amp;</operator><name pos:start="92:19" pos:end="92:26">sws_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="93:5" pos:end="93:31"><expr pos:start="93:5" pos:end="93:30"><call pos:start="93:5" pos:end="93:30"><name pos:start="93:5" pos:end="93:16">av_dict_free</name><argument_list pos:start="93:17" pos:end="93:30">(<argument pos:start="93:18" pos:end="93:29"><expr pos:start="93:18" pos:end="93:29"><operator pos:start="93:18" pos:end="93:18">&amp;</operator><name pos:start="93:19" pos:end="93:29">format_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="94:5" pos:end="94:30"><expr pos:start="94:5" pos:end="94:29"><call pos:start="94:5" pos:end="94:29"><name pos:start="94:5" pos:end="94:16">av_dict_free</name><argument_list pos:start="94:17" pos:end="94:29">(<argument pos:start="94:18" pos:end="94:28"><expr pos:start="94:18" pos:end="94:28"><operator pos:start="94:18" pos:end="94:18">&amp;</operator><name pos:start="94:19" pos:end="94:28">codec_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="95:5" pos:end="95:33"><expr pos:start="95:5" pos:end="95:32"><call pos:start="95:5" pos:end="95:32"><name pos:start="95:5" pos:end="95:16">av_dict_free</name><argument_list pos:start="95:17" pos:end="95:32">(<argument pos:start="95:18" pos:end="95:31"><expr pos:start="95:18" pos:end="95:31"><operator pos:start="95:18" pos:end="95:18">&amp;</operator><name pos:start="95:19" pos:end="95:31">resample_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="98:1" pos:end="101:1"><type pos:start="98:1" pos:end="98:4"><name pos:start="98:1" pos:end="98:4">void</name></type> <name pos:start="98:6" pos:end="98:22">log_callback_help</name><parameter_list pos:start="98:23" pos:end="98:73">(<parameter pos:start="98:24" pos:end="98:32"><decl pos:start="98:24" pos:end="98:32"><type pos:start="98:24" pos:end="98:32"><name pos:start="98:24" pos:end="98:27">void</name> <modifier pos:start="98:29" pos:end="98:29">*</modifier></type><name pos:start="98:30" pos:end="98:32">ptr</name></decl></parameter>, <parameter pos:start="98:35" pos:end="98:43"><decl pos:start="98:35" pos:end="98:43"><type pos:start="98:35" pos:end="98:43"><name pos:start="98:35" pos:end="98:37">int</name></type> <name pos:start="98:39" pos:end="98:43">level</name></decl></parameter>, <parameter pos:start="98:46" pos:end="98:60"><decl pos:start="98:46" pos:end="98:60"><type pos:start="98:46" pos:end="98:60"><specifier pos:start="98:46" pos:end="98:50">const</specifier> <name pos:start="98:52" pos:end="98:55">char</name> <modifier pos:start="98:57" pos:end="98:57">*</modifier></type><name pos:start="98:58" pos:end="98:60">fmt</name></decl></parameter>, <parameter pos:start="98:63" pos:end="98:72"><decl pos:start="98:63" pos:end="98:72"><type pos:start="98:63" pos:end="98:72"><name pos:start="98:63" pos:end="98:69">va_list</name></type> <name pos:start="98:71" pos:end="98:72">vl</name></decl></parameter>)</parameter_list>
<block pos:start="99:1" pos:end="101:1">{<block_content pos:start="100:5" pos:end="100:30">
    <expr_stmt pos:start="100:5" pos:end="100:30"><expr pos:start="100:5" pos:end="100:29"><call pos:start="100:5" pos:end="100:29"><name pos:start="100:5" pos:end="100:12">vfprintf</name><argument_list pos:start="100:13" pos:end="100:29">(<argument pos:start="100:14" pos:end="100:19"><expr pos:start="100:14" pos:end="100:19"><name pos:start="100:14" pos:end="100:19">stdout</name></expr></argument>, <argument pos:start="100:22" pos:end="100:24"><expr pos:start="100:22" pos:end="100:24"><name pos:start="100:22" pos:end="100:24">fmt</name></expr></argument>, <argument pos:start="100:27" pos:end="100:28"><expr pos:start="100:27" pos:end="100:28"><name pos:start="100:27" pos:end="100:28">vl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="103:1" pos:end="117:1"><type pos:start="103:1" pos:end="103:11"><specifier pos:start="103:1" pos:end="103:6">static</specifier> <name pos:start="103:8" pos:end="103:11">void</name></type> <name pos:start="103:13" pos:end="103:31">log_callback_report</name><parameter_list pos:start="103:32" pos:end="103:82">(<parameter pos:start="103:33" pos:end="103:41"><decl pos:start="103:33" pos:end="103:41"><type pos:start="103:33" pos:end="103:41"><name pos:start="103:33" pos:end="103:36">void</name> <modifier pos:start="103:38" pos:end="103:38">*</modifier></type><name pos:start="103:39" pos:end="103:41">ptr</name></decl></parameter>, <parameter pos:start="103:44" pos:end="103:52"><decl pos:start="103:44" pos:end="103:52"><type pos:start="103:44" pos:end="103:52"><name pos:start="103:44" pos:end="103:46">int</name></type> <name pos:start="103:48" pos:end="103:52">level</name></decl></parameter>, <parameter pos:start="103:55" pos:end="103:69"><decl pos:start="103:55" pos:end="103:69"><type pos:start="103:55" pos:end="103:69"><specifier pos:start="103:55" pos:end="103:59">const</specifier> <name pos:start="103:61" pos:end="103:64">char</name> <modifier pos:start="103:66" pos:end="103:66">*</modifier></type><name pos:start="103:67" pos:end="103:69">fmt</name></decl></parameter>, <parameter pos:start="103:72" pos:end="103:81"><decl pos:start="103:72" pos:end="103:81"><type pos:start="103:72" pos:end="103:81"><name pos:start="103:72" pos:end="103:78">va_list</name></type> <name pos:start="103:80" pos:end="103:81">vl</name></decl></parameter>)</parameter_list>
<block pos:start="104:1" pos:end="117:1">{<block_content pos:start="105:5" pos:end="116:5">
    <decl_stmt pos:start="105:5" pos:end="105:16"><decl pos:start="105:5" pos:end="105:15"><type pos:start="105:5" pos:end="105:11"><name pos:start="105:5" pos:end="105:11">va_list</name></type> <name pos:start="105:13" pos:end="105:15">vl2</name></decl>;</decl_stmt>
    <decl_stmt pos:start="106:5" pos:end="106:20"><decl pos:start="106:5" pos:end="106:19"><type pos:start="106:5" pos:end="106:8"><name pos:start="106:5" pos:end="106:8">char</name></type> <name pos:start="106:10" pos:end="106:19"><name pos:start="106:10" pos:end="106:13">line</name><index pos:start="106:14" pos:end="106:19">[<expr pos:start="106:15" pos:end="106:18"><literal type="number" pos:start="106:15" pos:end="106:18">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="107:5" pos:end="107:32"><decl pos:start="107:5" pos:end="107:31"><type pos:start="107:5" pos:end="107:14"><specifier pos:start="107:5" pos:end="107:10">static</specifier> <name pos:start="107:12" pos:end="107:14">int</name></type> <name pos:start="107:16" pos:end="107:27">print_prefix</name> <init pos:start="107:29" pos:end="107:31">= <expr pos:start="107:31" pos:end="107:31"><literal type="number" pos:start="107:31" pos:end="107:31">1</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:21"><expr pos:start="109:5" pos:end="109:20"><call pos:start="109:5" pos:end="109:20"><name pos:start="109:5" pos:end="109:11">va_copy</name><argument_list pos:start="109:12" pos:end="109:20">(<argument pos:start="109:13" pos:end="109:15"><expr pos:start="109:13" pos:end="109:15"><name pos:start="109:13" pos:end="109:15">vl2</name></expr></argument>, <argument pos:start="109:18" pos:end="109:19"><expr pos:start="109:18" pos:end="109:19"><name pos:start="109:18" pos:end="109:19">vl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="110:5" pos:end="110:49"><expr pos:start="110:5" pos:end="110:48"><call pos:start="110:5" pos:end="110:48"><name pos:start="110:5" pos:end="110:27">av_log_default_callback</name><argument_list pos:start="110:28" pos:end="110:48">(<argument pos:start="110:29" pos:end="110:31"><expr pos:start="110:29" pos:end="110:31"><name pos:start="110:29" pos:end="110:31">ptr</name></expr></argument>, <argument pos:start="110:34" pos:end="110:38"><expr pos:start="110:34" pos:end="110:38"><name pos:start="110:34" pos:end="110:38">level</name></expr></argument>, <argument pos:start="110:41" pos:end="110:43"><expr pos:start="110:41" pos:end="110:43"><name pos:start="110:41" pos:end="110:43">fmt</name></expr></argument>, <argument pos:start="110:46" pos:end="110:47"><expr pos:start="110:46" pos:end="110:47"><name pos:start="110:46" pos:end="110:47">vl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="111:5" pos:end="111:80"><expr pos:start="111:5" pos:end="111:79"><call pos:start="111:5" pos:end="111:79"><name pos:start="111:5" pos:end="111:22">av_log_format_line</name><argument_list pos:start="111:23" pos:end="111:79">(<argument pos:start="111:24" pos:end="111:26"><expr pos:start="111:24" pos:end="111:26"><name pos:start="111:24" pos:end="111:26">ptr</name></expr></argument>, <argument pos:start="111:29" pos:end="111:33"><expr pos:start="111:29" pos:end="111:33"><name pos:start="111:29" pos:end="111:33">level</name></expr></argument>, <argument pos:start="111:36" pos:end="111:38"><expr pos:start="111:36" pos:end="111:38"><name pos:start="111:36" pos:end="111:38">fmt</name></expr></argument>, <argument pos:start="111:41" pos:end="111:43"><expr pos:start="111:41" pos:end="111:43"><name pos:start="111:41" pos:end="111:43">vl2</name></expr></argument>, <argument pos:start="111:46" pos:end="111:49"><expr pos:start="111:46" pos:end="111:49"><name pos:start="111:46" pos:end="111:49">line</name></expr></argument>, <argument pos:start="111:52" pos:end="111:63"><expr pos:start="111:52" pos:end="111:63"><sizeof pos:start="111:52" pos:end="111:63">sizeof<argument_list pos:start="111:58" pos:end="111:63">(<argument pos:start="111:59" pos:end="111:62"><expr pos:start="111:59" pos:end="111:62"><name pos:start="111:59" pos:end="111:62">line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="111:66" pos:end="111:78"><expr pos:start="111:66" pos:end="111:78"><operator pos:start="111:66" pos:end="111:66">&amp;</operator><name pos:start="111:67" pos:end="111:78">print_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="112:5" pos:end="112:16"><expr pos:start="112:5" pos:end="112:15"><call pos:start="112:5" pos:end="112:15"><name pos:start="112:5" pos:end="112:10">va_end</name><argument_list pos:start="112:11" pos:end="112:15">(<argument pos:start="112:12" pos:end="112:14"><expr pos:start="112:12" pos:end="112:14"><name pos:start="112:12" pos:end="112:14">vl2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="113:5" pos:end="116:5"><if pos:start="113:5" pos:end="116:5">if <condition pos:start="113:8" pos:end="113:35">(<expr pos:start="113:9" pos:end="113:34"><name pos:start="113:9" pos:end="113:25">report_file_level</name> <operator pos:start="113:27" pos:end="113:28">&gt;=</operator> <name pos:start="113:30" pos:end="113:34">level</name></expr>)</condition> <block pos:start="113:37" pos:end="116:5">{<block_content pos:start="114:9" pos:end="115:28">
        <expr_stmt pos:start="114:9" pos:end="114:33"><expr pos:start="114:9" pos:end="114:32"><call pos:start="114:9" pos:end="114:32"><name pos:start="114:9" pos:end="114:13">fputs</name><argument_list pos:start="114:14" pos:end="114:32">(<argument pos:start="114:15" pos:end="114:18"><expr pos:start="114:15" pos:end="114:18"><name pos:start="114:15" pos:end="114:18">line</name></expr></argument>, <argument pos:start="114:21" pos:end="114:31"><expr pos:start="114:21" pos:end="114:31"><name pos:start="114:21" pos:end="114:31">report_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="115:9" pos:end="115:28"><expr pos:start="115:9" pos:end="115:27"><call pos:start="115:9" pos:end="115:27"><name pos:start="115:9" pos:end="115:14">fflush</name><argument_list pos:start="115:15" pos:end="115:27">(<argument pos:start="115:16" pos:end="115:26"><expr pos:start="115:16" pos:end="115:26"><name pos:start="115:16" pos:end="115:26">report_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function pos:start="119:1" pos:end="126:1"><type pos:start="119:1" pos:end="119:4"><name pos:start="119:1" pos:end="119:4">void</name></type> <name pos:start="119:6" pos:end="119:17">init_dynload</name><parameter_list pos:start="119:18" pos:end="119:23">(<parameter pos:start="119:19" pos:end="119:22"><decl pos:start="119:19" pos:end="119:22"><type pos:start="119:19" pos:end="119:22"><name pos:start="119:19" pos:end="119:22">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="120:1" pos:end="126:1">{<block_content pos:start="124:5" pos:end="126:0">
<cpp:ifdef pos:start="121:1" pos:end="121:13">#<cpp:directive pos:start="121:2" pos:end="121:6">ifdef</cpp:directive> <name pos:start="121:8" pos:end="121:13">_WIN32</name></cpp:ifdef>
    <comment type="block" pos:start="122:5" pos:end="123:87">/* Calling SetDllDirectory with the empty string (but not NULL) removes the
     * current working directory from the DLL search path as a security pre-caution. */</comment>
    <expr_stmt pos:start="124:5" pos:end="126:0"><expr pos:start="124:5" pos:end="124:23"><call pos:start="124:5" pos:end="124:23"><name pos:start="124:5" pos:end="124:19">SetDllDirectory</name><argument_list pos:start="124:20" pos:end="124:23">(<argument pos:start="124:21" pos:end="124:22"><expr pos:start="124:21" pos:end="124:22"><literal type="string" pos:start="124:21" pos:end="124:22">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="125:1" pos:end="125:6">#<cpp:directive pos:start="125:2" pos:end="125:6">endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function_decl pos:start="128:1" pos:end="128:37"><type pos:start="128:1" pos:end="128:11"><specifier pos:start="128:1" pos:end="128:6">static</specifier> <name pos:start="128:8" pos:end="128:11">void</name></type> (<modifier pos:start="128:14" pos:end="128:14">*</modifier><name pos:start="128:15" pos:end="128:26">program_exit</name>)<parameter_list pos:start="128:28" pos:end="128:36">(<parameter pos:start="128:29" pos:end="128:35"><decl pos:start="128:29" pos:end="128:35"><type pos:start="128:29" pos:end="128:31"><name pos:start="128:29" pos:end="128:31">int</name></type> <name pos:start="128:33" pos:end="128:35">ret</name></decl></parameter>)</parameter_list>;</function_decl>

<function pos:start="130:1" pos:end="133:1"><type pos:start="130:1" pos:end="130:4"><name pos:start="130:1" pos:end="130:4">void</name></type> <name pos:start="130:6" pos:end="130:18">register_exit</name><parameter_list pos:start="130:19" pos:end="130:39">(<parameter pos:start="130:20" pos:end="130:38"><function_decl pos:start="130:20" pos:end="130:38"><type pos:start="130:20" pos:end="130:23"><name pos:start="130:20" pos:end="130:23">void</name></type> (<modifier pos:start="130:26" pos:end="130:26">*</modifier><name pos:start="130:27" pos:end="130:28">cb</name>)<parameter_list pos:start="130:30" pos:end="130:38">(<parameter pos:start="130:31" pos:end="130:37"><decl pos:start="130:31" pos:end="130:37"><type pos:start="130:31" pos:end="130:33"><name pos:start="130:31" pos:end="130:33">int</name></type> <name pos:start="130:35" pos:end="130:37">ret</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block pos:start="131:1" pos:end="133:1">{<block_content pos:start="132:5" pos:end="132:22">
    <expr_stmt pos:start="132:5" pos:end="132:22"><expr pos:start="132:5" pos:end="132:21"><name pos:start="132:5" pos:end="132:16">program_exit</name> <operator pos:start="132:18" pos:end="132:18">=</operator> <name pos:start="132:20" pos:end="132:21">cb</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="135:1" pos:end="141:1"><type pos:start="135:1" pos:end="135:4"><name pos:start="135:1" pos:end="135:4">void</name></type> <name pos:start="135:6" pos:end="135:17">exit_program</name><parameter_list pos:start="135:18" pos:end="135:26">(<parameter pos:start="135:19" pos:end="135:25"><decl pos:start="135:19" pos:end="135:25"><type pos:start="135:19" pos:end="135:21"><name pos:start="135:19" pos:end="135:21">int</name></type> <name pos:start="135:23" pos:end="135:25">ret</name></decl></parameter>)</parameter_list>
<block pos:start="136:1" pos:end="141:1">{<block_content pos:start="137:5" pos:end="140:14">
    <if_stmt pos:start="137:5" pos:end="138:26"><if pos:start="137:5" pos:end="138:26">if <condition pos:start="137:8" pos:end="137:21">(<expr pos:start="137:9" pos:end="137:20"><name pos:start="137:9" pos:end="137:20">program_exit</name></expr>)</condition><block type="pseudo" pos:start="138:9" pos:end="138:26"><block_content pos:start="138:9" pos:end="138:26">
        <expr_stmt pos:start="138:9" pos:end="138:26"><expr pos:start="138:9" pos:end="138:25"><call pos:start="138:9" pos:end="138:25"><name pos:start="138:9" pos:end="138:20">program_exit</name><argument_list pos:start="138:21" pos:end="138:25">(<argument pos:start="138:22" pos:end="138:24"><expr pos:start="138:22" pos:end="138:24"><name pos:start="138:22" pos:end="138:24">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="140:5" pos:end="140:14"><expr pos:start="140:5" pos:end="140:13"><call pos:start="140:5" pos:end="140:13"><name pos:start="140:5" pos:end="140:8">exit</name><argument_list pos:start="140:9" pos:end="140:13">(<argument pos:start="140:10" pos:end="140:12"><expr pos:start="140:10" pos:end="140:12"><name pos:start="140:10" pos:end="140:12">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="143:1" pos:end="162:1"><type pos:start="143:1" pos:end="143:6"><name pos:start="143:1" pos:end="143:6">double</name></type> <name pos:start="143:8" pos:end="143:26">parse_number_or_die</name><parameter_list pos:start="143:27" pos:end="144:50">(<parameter pos:start="143:28" pos:end="143:46"><decl pos:start="143:28" pos:end="143:46"><type pos:start="143:28" pos:end="143:46"><specifier pos:start="143:28" pos:end="143:32">const</specifier> <name pos:start="143:34" pos:end="143:37">char</name> <modifier pos:start="143:39" pos:end="143:39">*</modifier></type><name pos:start="143:40" pos:end="143:46">context</name></decl></parameter>, <parameter pos:start="143:49" pos:end="143:66"><decl pos:start="143:49" pos:end="143:66"><type pos:start="143:49" pos:end="143:66"><specifier pos:start="143:49" pos:end="143:53">const</specifier> <name pos:start="143:55" pos:end="143:58">char</name> <modifier pos:start="143:60" pos:end="143:60">*</modifier></type><name pos:start="143:61" pos:end="143:66">numstr</name></decl></parameter>, <parameter pos:start="143:69" pos:end="143:76"><decl pos:start="143:69" pos:end="143:76"><type pos:start="143:69" pos:end="143:76"><name pos:start="143:69" pos:end="143:71">int</name></type> <name pos:start="143:73" pos:end="143:76">type</name></decl></parameter>,
                           <parameter pos:start="144:28" pos:end="144:37"><decl pos:start="144:28" pos:end="144:37"><type pos:start="144:28" pos:end="144:37"><name pos:start="144:28" pos:end="144:33">double</name></type> <name pos:start="144:35" pos:end="144:37">min</name></decl></parameter>, <parameter pos:start="144:40" pos:end="144:49"><decl pos:start="144:40" pos:end="144:49"><type pos:start="144:40" pos:end="144:49"><name pos:start="144:40" pos:end="144:45">double</name></type> <name pos:start="144:47" pos:end="144:49">max</name></decl></parameter>)</parameter_list>
<block pos:start="145:1" pos:end="162:1">{<block_content pos:start="146:5" pos:end="161:13">
    <decl_stmt pos:start="146:5" pos:end="146:15"><decl pos:start="146:5" pos:end="146:14"><type pos:start="146:5" pos:end="146:10"><name pos:start="146:5" pos:end="146:8">char</name> <modifier pos:start="146:10" pos:end="146:10">*</modifier></type><name pos:start="146:11" pos:end="146:14">tail</name></decl>;</decl_stmt>
    <decl_stmt pos:start="147:5" pos:end="147:22"><decl pos:start="147:5" pos:end="147:21"><type pos:start="147:5" pos:end="147:16"><specifier pos:start="147:5" pos:end="147:9">const</specifier> <name pos:start="147:11" pos:end="147:14">char</name> <modifier pos:start="147:16" pos:end="147:16">*</modifier></type><name pos:start="147:17" pos:end="147:21">error</name></decl>;</decl_stmt>
    <decl_stmt pos:start="148:5" pos:end="148:40"><decl pos:start="148:5" pos:end="148:39"><type pos:start="148:5" pos:end="148:10"><name pos:start="148:5" pos:end="148:10">double</name></type> <name pos:start="148:12" pos:end="148:12">d</name> <init pos:start="148:14" pos:end="148:39">= <expr pos:start="148:16" pos:end="148:39"><call pos:start="148:16" pos:end="148:39"><name pos:start="148:16" pos:end="148:24">av_strtod</name><argument_list pos:start="148:25" pos:end="148:39">(<argument pos:start="148:26" pos:end="148:31"><expr pos:start="148:26" pos:end="148:31"><name pos:start="148:26" pos:end="148:31">numstr</name></expr></argument>, <argument pos:start="148:34" pos:end="148:38"><expr pos:start="148:34" pos:end="148:38"><operator pos:start="148:34" pos:end="148:34">&amp;</operator><name pos:start="148:35" pos:end="148:38">tail</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="149:5" pos:end="158:17"><if pos:start="149:5" pos:end="150:57">if <condition pos:start="149:8" pos:end="149:14">(<expr pos:start="149:9" pos:end="149:13"><operator pos:start="149:9" pos:end="149:9">*</operator><name pos:start="149:10" pos:end="149:13">tail</name></expr>)</condition><block type="pseudo" pos:start="150:9" pos:end="150:57"><block_content pos:start="150:9" pos:end="150:57">
        <expr_stmt pos:start="150:9" pos:end="150:57"><expr pos:start="150:9" pos:end="150:56"><name pos:start="150:9" pos:end="150:13">error</name> <operator pos:start="150:15" pos:end="150:15">=</operator> <literal type="string" pos:start="150:17" pos:end="150:56">"Expected number for %s but found: %s\n"</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif" pos:start="151:5" pos:end="152:72">else if <condition pos:start="151:13" pos:end="151:32">(<expr pos:start="151:14" pos:end="151:31"><name pos:start="151:14" pos:end="151:27"><name pos:start="151:14" pos:end="151:14">d</name> <argument_list type="generic" pos:start="151:16" pos:end="151:27">&lt; <argument pos:start="151:18" pos:end="151:25"><expr pos:start="151:18" pos:end="151:25"><name pos:start="151:18" pos:end="151:20">min</name> <operator pos:start="151:22" pos:end="151:23">||</operator> <name pos:start="151:25" pos:end="151:25">d</name></expr></argument> &gt;</argument_list></name> <name pos:start="151:29" pos:end="151:31">max</name></expr>)</condition><block type="pseudo" pos:start="152:9" pos:end="152:72"><block_content pos:start="152:9" pos:end="152:72">
        <expr_stmt pos:start="152:9" pos:end="152:72"><expr pos:start="152:9" pos:end="152:71"><name pos:start="152:9" pos:end="152:13">error</name> <operator pos:start="152:15" pos:end="152:15">=</operator> <literal type="string" pos:start="152:17" pos:end="152:71">"The value for %s was %s which is not within %f - %f\n"</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif" pos:start="153:5" pos:end="154:55">else if <condition pos:start="153:13" pos:end="153:50">(<expr pos:start="153:14" pos:end="153:49"><name pos:start="153:14" pos:end="153:17">type</name> <operator pos:start="153:19" pos:end="153:20">==</operator> <name pos:start="153:22" pos:end="153:30">OPT_INT64</name> <operator pos:start="153:32" pos:end="153:33">&amp;&amp;</operator> <operator pos:start="153:35" pos:end="153:35">(</operator><name pos:start="153:36" pos:end="153:42">int64_t</name><operator pos:start="153:43" pos:end="153:43">)</operator><name pos:start="153:44" pos:end="153:44">d</name> <operator pos:start="153:46" pos:end="153:47">!=</operator> <name pos:start="153:49" pos:end="153:49">d</name></expr>)</condition><block type="pseudo" pos:start="154:9" pos:end="154:55"><block_content pos:start="154:9" pos:end="154:55">
        <expr_stmt pos:start="154:9" pos:end="154:55"><expr pos:start="154:9" pos:end="154:54"><name pos:start="154:9" pos:end="154:13">error</name> <operator pos:start="154:15" pos:end="154:15">=</operator> <literal type="string" pos:start="154:17" pos:end="154:54">"Expected int64 for %s but found %s\n"</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif" pos:start="155:5" pos:end="156:53">else if <condition pos:start="155:13" pos:end="155:44">(<expr pos:start="155:14" pos:end="155:43"><name pos:start="155:14" pos:end="155:17">type</name> <operator pos:start="155:19" pos:end="155:20">==</operator> <name pos:start="155:22" pos:end="155:28">OPT_INT</name> <operator pos:start="155:30" pos:end="155:31">&amp;&amp;</operator> <operator pos:start="155:33" pos:end="155:33">(</operator><name pos:start="155:34" pos:end="155:36">int</name><operator pos:start="155:37" pos:end="155:37">)</operator><name pos:start="155:38" pos:end="155:38">d</name> <operator pos:start="155:40" pos:end="155:41">!=</operator> <name pos:start="155:43" pos:end="155:43">d</name></expr>)</condition><block type="pseudo" pos:start="156:9" pos:end="156:53"><block_content pos:start="156:9" pos:end="156:53">
        <expr_stmt pos:start="156:9" pos:end="156:53"><expr pos:start="156:9" pos:end="156:52"><name pos:start="156:9" pos:end="156:13">error</name> <operator pos:start="156:15" pos:end="156:15">=</operator> <literal type="string" pos:start="156:17" pos:end="156:52">"Expected int for %s but found %s\n"</literal></expr>;</expr_stmt></block_content></block></if>
    <else pos:start="157:5" pos:end="158:17">else<block type="pseudo" pos:start="158:9" pos:end="158:17"><block_content pos:start="158:9" pos:end="158:17">
        <return pos:start="158:9" pos:end="158:17">return <expr pos:start="158:16" pos:end="158:16"><name pos:start="158:16" pos:end="158:16">d</name></expr>;</return></block_content></block></else></if_stmt>
    <expr_stmt pos:start="159:5" pos:end="159:65"><expr pos:start="159:5" pos:end="159:64"><call pos:start="159:5" pos:end="159:64"><name pos:start="159:5" pos:end="159:10">av_log</name><argument_list pos:start="159:11" pos:end="159:64">(<argument pos:start="159:12" pos:end="159:15"><expr pos:start="159:12" pos:end="159:15"><name pos:start="159:12" pos:end="159:15">NULL</name></expr></argument>, <argument pos:start="159:18" pos:end="159:29"><expr pos:start="159:18" pos:end="159:29"><name pos:start="159:18" pos:end="159:29">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="159:32" pos:end="159:36"><expr pos:start="159:32" pos:end="159:36"><name pos:start="159:32" pos:end="159:36">error</name></expr></argument>, <argument pos:start="159:39" pos:end="159:45"><expr pos:start="159:39" pos:end="159:45"><name pos:start="159:39" pos:end="159:45">context</name></expr></argument>, <argument pos:start="159:48" pos:end="159:53"><expr pos:start="159:48" pos:end="159:53"><name pos:start="159:48" pos:end="159:53">numstr</name></expr></argument>, <argument pos:start="159:56" pos:end="159:58"><expr pos:start="159:56" pos:end="159:58"><name pos:start="159:56" pos:end="159:58">min</name></expr></argument>, <argument pos:start="159:61" pos:end="159:63"><expr pos:start="159:61" pos:end="159:63"><name pos:start="159:61" pos:end="159:63">max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="160:5" pos:end="160:20"><expr pos:start="160:5" pos:end="160:19"><call pos:start="160:5" pos:end="160:19"><name pos:start="160:5" pos:end="160:16">exit_program</name><argument_list pos:start="160:17" pos:end="160:19">(<argument pos:start="160:18" pos:end="160:18"><expr pos:start="160:18" pos:end="160:18"><literal type="number" pos:start="160:18" pos:end="160:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="161:5" pos:end="161:13">return <expr pos:start="161:12" pos:end="161:12"><literal type="number" pos:start="161:12" pos:end="161:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="164:1" pos:end="174:1"><type pos:start="164:1" pos:end="164:7"><name pos:start="164:1" pos:end="164:7">int64_t</name></type> <name pos:start="164:9" pos:end="164:25">parse_time_or_die</name><parameter_list pos:start="164:26" pos:end="165:42">(<parameter pos:start="164:27" pos:end="164:45"><decl pos:start="164:27" pos:end="164:45"><type pos:start="164:27" pos:end="164:45"><specifier pos:start="164:27" pos:end="164:31">const</specifier> <name pos:start="164:33" pos:end="164:36">char</name> <modifier pos:start="164:38" pos:end="164:38">*</modifier></type><name pos:start="164:39" pos:end="164:45">context</name></decl></parameter>, <parameter pos:start="164:48" pos:end="164:66"><decl pos:start="164:48" pos:end="164:66"><type pos:start="164:48" pos:end="164:66"><specifier pos:start="164:48" pos:end="164:52">const</specifier> <name pos:start="164:54" pos:end="164:57">char</name> <modifier pos:start="164:59" pos:end="164:59">*</modifier></type><name pos:start="164:60" pos:end="164:66">timestr</name></decl></parameter>,
                          <parameter pos:start="165:27" pos:end="165:41"><decl pos:start="165:27" pos:end="165:41"><type pos:start="165:27" pos:end="165:41"><name pos:start="165:27" pos:end="165:29">int</name></type> <name pos:start="165:31" pos:end="165:41">is_duration</name></decl></parameter>)</parameter_list>
<block pos:start="166:1" pos:end="174:1">{<block_content pos:start="167:5" pos:end="173:14">
    <decl_stmt pos:start="167:5" pos:end="167:15"><decl pos:start="167:5" pos:end="167:14"><type pos:start="167:5" pos:end="167:11"><name pos:start="167:5" pos:end="167:11">int64_t</name></type> <name pos:start="167:13" pos:end="167:14">us</name></decl>;</decl_stmt>
    <if_stmt pos:start="168:5" pos:end="172:5"><if pos:start="168:5" pos:end="172:5">if <condition pos:start="168:8" pos:end="168:53">(<expr pos:start="168:9" pos:end="168:52"><call pos:start="168:9" pos:end="168:48"><name pos:start="168:9" pos:end="168:21">av_parse_time</name><argument_list pos:start="168:22" pos:end="168:48">(<argument pos:start="168:23" pos:end="168:25"><expr pos:start="168:23" pos:end="168:25"><operator pos:start="168:23" pos:end="168:23">&amp;</operator><name pos:start="168:24" pos:end="168:25">us</name></expr></argument>, <argument pos:start="168:28" pos:end="168:34"><expr pos:start="168:28" pos:end="168:34"><name pos:start="168:28" pos:end="168:34">timestr</name></expr></argument>, <argument pos:start="168:37" pos:end="168:47"><expr pos:start="168:37" pos:end="168:47"><name pos:start="168:37" pos:end="168:47">is_duration</name></expr></argument>)</argument_list></call> <operator pos:start="168:50" pos:end="168:50">&lt;</operator> <literal type="number" pos:start="168:52" pos:end="168:52">0</literal></expr>)</condition> <block pos:start="168:55" pos:end="172:5">{<block_content pos:start="169:9" pos:end="171:24">
        <expr_stmt pos:start="169:9" pos:end="170:68"><expr pos:start="169:9" pos:end="170:67"><call pos:start="169:9" pos:end="170:67"><name pos:start="169:9" pos:end="169:14">av_log</name><argument_list pos:start="169:15" pos:end="170:67">(<argument pos:start="169:16" pos:end="169:19"><expr pos:start="169:16" pos:end="169:19"><name pos:start="169:16" pos:end="169:19">NULL</name></expr></argument>, <argument pos:start="169:22" pos:end="169:33"><expr pos:start="169:22" pos:end="169:33"><name pos:start="169:22" pos:end="169:33">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="169:36" pos:end="169:74"><expr pos:start="169:36" pos:end="169:74"><literal type="string" pos:start="169:36" pos:end="169:74">"Invalid %s specification for %s: %s\n"</literal></expr></argument>,
               <argument pos:start="170:16" pos:end="170:48"><expr pos:start="170:16" pos:end="170:48"><ternary pos:start="170:16" pos:end="170:48"><condition pos:start="170:16" pos:end="170:28"><expr pos:start="170:16" pos:end="170:26"><name pos:start="170:16" pos:end="170:26">is_duration</name></expr> ?</condition><then pos:start="170:30" pos:end="170:39"> <expr pos:start="170:30" pos:end="170:39"><literal type="string" pos:start="170:30" pos:end="170:39">"duration"</literal></expr> </then><else pos:start="170:41" pos:end="170:48">: <expr pos:start="170:43" pos:end="170:48"><literal type="string" pos:start="170:43" pos:end="170:48">"date"</literal></expr></else></ternary></expr></argument>, <argument pos:start="170:51" pos:end="170:57"><expr pos:start="170:51" pos:end="170:57"><name pos:start="170:51" pos:end="170:57">context</name></expr></argument>, <argument pos:start="170:60" pos:end="170:66"><expr pos:start="170:60" pos:end="170:66"><name pos:start="170:60" pos:end="170:66">timestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="171:9" pos:end="171:24"><expr pos:start="171:9" pos:end="171:23"><call pos:start="171:9" pos:end="171:23"><name pos:start="171:9" pos:end="171:20">exit_program</name><argument_list pos:start="171:21" pos:end="171:23">(<argument pos:start="171:22" pos:end="171:22"><expr pos:start="171:22" pos:end="171:22"><literal type="number" pos:start="171:22" pos:end="171:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return pos:start="173:5" pos:end="173:14">return <expr pos:start="173:12" pos:end="173:13"><name pos:start="173:12" pos:end="173:13">us</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="176:1" pos:end="203:1"><type pos:start="176:1" pos:end="176:4"><name pos:start="176:1" pos:end="176:4">void</name></type> <name pos:start="176:6" pos:end="176:22">show_help_options</name><parameter_list pos:start="176:23" pos:end="177:52">(<parameter pos:start="176:24" pos:end="176:47"><decl pos:start="176:24" pos:end="176:47"><type pos:start="176:24" pos:end="176:47"><specifier pos:start="176:24" pos:end="176:28">const</specifier> <name pos:start="176:30" pos:end="176:38">OptionDef</name> <modifier pos:start="176:40" pos:end="176:40">*</modifier></type><name pos:start="176:41" pos:end="176:47">options</name></decl></parameter>, <parameter pos:start="176:50" pos:end="176:64"><decl pos:start="176:50" pos:end="176:64"><type pos:start="176:50" pos:end="176:64"><specifier pos:start="176:50" pos:end="176:54">const</specifier> <name pos:start="176:56" pos:end="176:59">char</name> <modifier pos:start="176:61" pos:end="176:61">*</modifier></type><name pos:start="176:62" pos:end="176:64">msg</name></decl></parameter>, <parameter pos:start="176:67" pos:end="176:79"><decl pos:start="176:67" pos:end="176:79"><type pos:start="176:67" pos:end="176:79"><name pos:start="176:67" pos:end="176:69">int</name></type> <name pos:start="176:71" pos:end="176:79">req_flags</name></decl></parameter>,
                       <parameter pos:start="177:24" pos:end="177:36"><decl pos:start="177:24" pos:end="177:36"><type pos:start="177:24" pos:end="177:36"><name pos:start="177:24" pos:end="177:26">int</name></type> <name pos:start="177:28" pos:end="177:36">rej_flags</name></decl></parameter>, <parameter pos:start="177:39" pos:end="177:51"><decl pos:start="177:39" pos:end="177:51"><type pos:start="177:39" pos:end="177:51"><name pos:start="177:39" pos:end="177:41">int</name></type> <name pos:start="177:43" pos:end="177:51">alt_flags</name></decl></parameter>)</parameter_list>
<block pos:start="178:1" pos:end="203:1">{<block_content pos:start="179:5" pos:end="202:17">
    <decl_stmt pos:start="179:5" pos:end="179:24"><decl pos:start="179:5" pos:end="179:23"><type pos:start="179:5" pos:end="179:21"><specifier pos:start="179:5" pos:end="179:9">const</specifier> <name pos:start="179:11" pos:end="179:19">OptionDef</name> <modifier pos:start="179:21" pos:end="179:21">*</modifier></type><name pos:start="179:22" pos:end="179:23">po</name></decl>;</decl_stmt>
    <decl_stmt pos:start="180:5" pos:end="180:14"><decl pos:start="180:5" pos:end="180:13"><type pos:start="180:5" pos:end="180:7"><name pos:start="180:5" pos:end="180:7">int</name></type> <name pos:start="180:9" pos:end="180:13">first</name></decl>;</decl_stmt>

    <expr_stmt pos:start="182:5" pos:end="182:14"><expr pos:start="182:5" pos:end="182:13"><name pos:start="182:5" pos:end="182:9">first</name> <operator pos:start="182:11" pos:end="182:11">=</operator> <literal type="number" pos:start="182:13" pos:end="182:13">1</literal></expr>;</expr_stmt>
    <for pos:start="183:5" pos:end="201:5">for <control pos:start="183:9" pos:end="183:38">(<init pos:start="183:10" pos:end="183:22"><expr pos:start="183:10" pos:end="183:21"><name pos:start="183:10" pos:end="183:11">po</name> <operator pos:start="183:13" pos:end="183:13">=</operator> <name pos:start="183:15" pos:end="183:21">options</name></expr>;</init> <condition pos:start="183:24" pos:end="183:32"><expr pos:start="183:24" pos:end="183:31"><name pos:start="183:24" pos:end="183:31"><name pos:start="183:24" pos:end="183:25">po</name><operator pos:start="183:26" pos:end="183:27">-&gt;</operator><name pos:start="183:28" pos:end="183:31">name</name></name></expr>;</condition> <incr pos:start="183:34" pos:end="183:37"><expr pos:start="183:34" pos:end="183:37"><name pos:start="183:34" pos:end="183:35">po</name><operator pos:start="183:36" pos:end="183:37">++</operator></expr></incr>)</control> <block pos:start="183:40" pos:end="201:5">{<block_content pos:start="184:9" pos:end="200:46">
        <decl_stmt pos:start="184:9" pos:end="184:21"><decl pos:start="184:9" pos:end="184:20"><type pos:start="184:9" pos:end="184:12"><name pos:start="184:9" pos:end="184:12">char</name></type> <name pos:start="184:14" pos:end="184:20"><name pos:start="184:14" pos:end="184:16">buf</name><index pos:start="184:17" pos:end="184:20">[<expr pos:start="184:18" pos:end="184:19"><literal type="number" pos:start="184:18" pos:end="184:19">64</literal></expr>]</index></name></decl>;</decl_stmt>

        <if_stmt pos:start="186:9" pos:end="189:21"><if pos:start="186:9" pos:end="189:21">if <condition pos:start="186:12" pos:end="188:36">(<expr pos:start="186:13" pos:end="188:35"><operator pos:start="186:13" pos:end="186:13">(</operator><operator pos:start="186:14" pos:end="186:14">(</operator><name pos:start="186:15" pos:end="186:23"><name pos:start="186:15" pos:end="186:16">po</name><operator pos:start="186:17" pos:end="186:18">-&gt;</operator><name pos:start="186:19" pos:end="186:23">flags</name></name> <operator pos:start="186:25" pos:end="186:25">&amp;</operator> <name pos:start="186:27" pos:end="186:35">req_flags</name><operator pos:start="186:36" pos:end="186:36">)</operator> <operator pos:start="186:38" pos:end="186:39">!=</operator> <name pos:start="186:41" pos:end="186:49">req_flags</name><operator pos:start="186:50" pos:end="186:50">)</operator> <operator pos:start="186:52" pos:end="186:53">||</operator>
            <operator pos:start="187:13" pos:end="187:13">(</operator><name pos:start="187:14" pos:end="187:22">alt_flags</name> <operator pos:start="187:24" pos:end="187:25">&amp;&amp;</operator> <operator pos:start="187:27" pos:end="187:27">!</operator><operator pos:start="187:28" pos:end="187:28">(</operator><name pos:start="187:29" pos:end="187:37"><name pos:start="187:29" pos:end="187:30">po</name><operator pos:start="187:31" pos:end="187:32">-&gt;</operator><name pos:start="187:33" pos:end="187:37">flags</name></name> <operator pos:start="187:39" pos:end="187:39">&amp;</operator> <name pos:start="187:41" pos:end="187:49">alt_flags</name><operator pos:start="187:50" pos:end="187:50">)</operator><operator pos:start="187:51" pos:end="187:51">)</operator> <operator pos:start="187:53" pos:end="187:54">||</operator>
            <operator pos:start="188:13" pos:end="188:13">(</operator><name pos:start="188:14" pos:end="188:22"><name pos:start="188:14" pos:end="188:15">po</name><operator pos:start="188:16" pos:end="188:17">-&gt;</operator><name pos:start="188:18" pos:end="188:22">flags</name></name> <operator pos:start="188:24" pos:end="188:24">&amp;</operator> <name pos:start="188:26" pos:end="188:34">rej_flags</name><operator pos:start="188:35" pos:end="188:35">)</operator></expr>)</condition><block type="pseudo" pos:start="189:13" pos:end="189:21"><block_content pos:start="189:13" pos:end="189:21">
            <continue pos:start="189:13" pos:end="189:21">continue;</continue></block_content></block></if></if_stmt>

        <if_stmt pos:start="191:9" pos:end="194:9"><if pos:start="191:9" pos:end="194:9">if <condition pos:start="191:12" pos:end="191:18">(<expr pos:start="191:13" pos:end="191:17"><name pos:start="191:13" pos:end="191:17">first</name></expr>)</condition> <block pos:start="191:20" pos:end="194:9">{<block_content pos:start="192:13" pos:end="193:22">
            <expr_stmt pos:start="192:13" pos:end="192:32"><expr pos:start="192:13" pos:end="192:31"><call pos:start="192:13" pos:end="192:31"><name pos:start="192:13" pos:end="192:18">printf</name><argument_list pos:start="192:19" pos:end="192:31">(<argument pos:start="192:20" pos:end="192:25"><expr pos:start="192:20" pos:end="192:25"><literal type="string" pos:start="192:20" pos:end="192:25">"%s\n"</literal></expr></argument>, <argument pos:start="192:28" pos:end="192:30"><expr pos:start="192:28" pos:end="192:30"><name pos:start="192:28" pos:end="192:30">msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="193:13" pos:end="193:22"><expr pos:start="193:13" pos:end="193:21"><name pos:start="193:13" pos:end="193:17">first</name> <operator pos:start="193:19" pos:end="193:19">=</operator> <literal type="number" pos:start="193:21" pos:end="193:21">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="195:9" pos:end="195:47"><expr pos:start="195:9" pos:end="195:46"><call pos:start="195:9" pos:end="195:46"><name pos:start="195:9" pos:end="195:18">av_strlcpy</name><argument_list pos:start="195:19" pos:end="195:46">(<argument pos:start="195:20" pos:end="195:22"><expr pos:start="195:20" pos:end="195:22"><name pos:start="195:20" pos:end="195:22">buf</name></expr></argument>, <argument pos:start="195:25" pos:end="195:32"><expr pos:start="195:25" pos:end="195:32"><name pos:start="195:25" pos:end="195:32"><name pos:start="195:25" pos:end="195:26">po</name><operator pos:start="195:27" pos:end="195:28">-&gt;</operator><name pos:start="195:29" pos:end="195:32">name</name></name></expr></argument>, <argument pos:start="195:35" pos:end="195:45"><expr pos:start="195:35" pos:end="195:45"><sizeof pos:start="195:35" pos:end="195:45">sizeof<argument_list pos:start="195:41" pos:end="195:45">(<argument pos:start="195:42" pos:end="195:44"><expr pos:start="195:42" pos:end="195:44"><name pos:start="195:42" pos:end="195:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="196:9" pos:end="199:9"><if pos:start="196:9" pos:end="199:9">if <condition pos:start="196:12" pos:end="196:24">(<expr pos:start="196:13" pos:end="196:23"><name pos:start="196:13" pos:end="196:23"><name pos:start="196:13" pos:end="196:14">po</name><operator pos:start="196:15" pos:end="196:16">-&gt;</operator><name pos:start="196:17" pos:end="196:23">argname</name></name></expr>)</condition> <block pos:start="196:26" pos:end="199:9">{<block_content pos:start="197:13" pos:end="198:54">
            <expr_stmt pos:start="197:13" pos:end="197:46"><expr pos:start="197:13" pos:end="197:45"><call pos:start="197:13" pos:end="197:45"><name pos:start="197:13" pos:end="197:22">av_strlcat</name><argument_list pos:start="197:23" pos:end="197:45">(<argument pos:start="197:24" pos:end="197:26"><expr pos:start="197:24" pos:end="197:26"><name pos:start="197:24" pos:end="197:26">buf</name></expr></argument>, <argument pos:start="197:29" pos:end="197:31"><expr pos:start="197:29" pos:end="197:31"><literal type="string" pos:start="197:29" pos:end="197:31">" "</literal></expr></argument>, <argument pos:start="197:34" pos:end="197:44"><expr pos:start="197:34" pos:end="197:44"><sizeof pos:start="197:34" pos:end="197:44">sizeof<argument_list pos:start="197:40" pos:end="197:44">(<argument pos:start="197:41" pos:end="197:43"><expr pos:start="197:41" pos:end="197:43"><name pos:start="197:41" pos:end="197:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="198:13" pos:end="198:54"><expr pos:start="198:13" pos:end="198:53"><call pos:start="198:13" pos:end="198:53"><name pos:start="198:13" pos:end="198:22">av_strlcat</name><argument_list pos:start="198:23" pos:end="198:53">(<argument pos:start="198:24" pos:end="198:26"><expr pos:start="198:24" pos:end="198:26"><name pos:start="198:24" pos:end="198:26">buf</name></expr></argument>, <argument pos:start="198:29" pos:end="198:39"><expr pos:start="198:29" pos:end="198:39"><name pos:start="198:29" pos:end="198:39"><name pos:start="198:29" pos:end="198:30">po</name><operator pos:start="198:31" pos:end="198:32">-&gt;</operator><name pos:start="198:33" pos:end="198:39">argname</name></name></expr></argument>, <argument pos:start="198:42" pos:end="198:52"><expr pos:start="198:42" pos:end="198:52"><sizeof pos:start="198:42" pos:end="198:52">sizeof<argument_list pos:start="198:48" pos:end="198:52">(<argument pos:start="198:49" pos:end="198:51"><expr pos:start="198:49" pos:end="198:51"><name pos:start="198:49" pos:end="198:51">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="200:9" pos:end="200:46"><expr pos:start="200:9" pos:end="200:45"><call pos:start="200:9" pos:end="200:45"><name pos:start="200:9" pos:end="200:14">printf</name><argument_list pos:start="200:15" pos:end="200:45">(<argument pos:start="200:16" pos:end="200:29"><expr pos:start="200:16" pos:end="200:29"><literal type="string" pos:start="200:16" pos:end="200:29">"-%-17s  %s\n"</literal></expr></argument>, <argument pos:start="200:32" pos:end="200:34"><expr pos:start="200:32" pos:end="200:34"><name pos:start="200:32" pos:end="200:34">buf</name></expr></argument>, <argument pos:start="200:37" pos:end="200:44"><expr pos:start="200:37" pos:end="200:44"><name pos:start="200:37" pos:end="200:44"><name pos:start="200:37" pos:end="200:38">po</name><operator pos:start="200:39" pos:end="200:40">-&gt;</operator><name pos:start="200:41" pos:end="200:44">help</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="202:5" pos:end="202:17"><expr pos:start="202:5" pos:end="202:16"><call pos:start="202:5" pos:end="202:16"><name pos:start="202:5" pos:end="202:10">printf</name><argument_list pos:start="202:11" pos:end="202:16">(<argument pos:start="202:12" pos:end="202:15"><expr pos:start="202:12" pos:end="202:15"><literal type="string" pos:start="202:12" pos:end="202:15">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="205:1" pos:end="215:1"><type pos:start="205:1" pos:end="205:4"><name pos:start="205:1" pos:end="205:4">void</name></type> <name pos:start="205:6" pos:end="205:23">show_help_children</name><parameter_list pos:start="205:24" pos:end="205:56">(<parameter pos:start="205:25" pos:end="205:44"><decl pos:start="205:25" pos:end="205:44"><type pos:start="205:25" pos:end="205:44"><specifier pos:start="205:25" pos:end="205:29">const</specifier> <name pos:start="205:31" pos:end="205:37">AVClass</name> <modifier pos:start="205:39" pos:end="205:39">*</modifier></type><name pos:start="205:40" pos:end="205:44">class</name></decl></parameter>, <parameter pos:start="205:47" pos:end="205:55"><decl pos:start="205:47" pos:end="205:55"><type pos:start="205:47" pos:end="205:55"><name pos:start="205:47" pos:end="205:49">int</name></type> <name pos:start="205:51" pos:end="205:55">flags</name></decl></parameter>)</parameter_list>
<block pos:start="206:1" pos:end="215:1">{<block_content pos:start="207:5" pos:end="214:41">
    <decl_stmt pos:start="207:5" pos:end="207:32"><decl pos:start="207:5" pos:end="207:31"><type pos:start="207:5" pos:end="207:19"><specifier pos:start="207:5" pos:end="207:9">const</specifier> <name pos:start="207:11" pos:end="207:17">AVClass</name> <modifier pos:start="207:19" pos:end="207:19">*</modifier></type><name pos:start="207:20" pos:end="207:24">child</name> <init pos:start="207:26" pos:end="207:31">= <expr pos:start="207:28" pos:end="207:31"><name pos:start="207:28" pos:end="207:31">NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="208:5" pos:end="211:5"><if pos:start="208:5" pos:end="211:5">if <condition pos:start="208:8" pos:end="208:22">(<expr pos:start="208:9" pos:end="208:21"><name pos:start="208:9" pos:end="208:21"><name pos:start="208:9" pos:end="208:13">class</name><operator pos:start="208:14" pos:end="208:15">-&gt;</operator><name pos:start="208:16" pos:end="208:21">option</name></name></expr>)</condition> <block pos:start="208:24" pos:end="211:5">{<block_content pos:start="209:9" pos:end="210:21">
        <expr_stmt pos:start="209:9" pos:end="209:45"><expr pos:start="209:9" pos:end="209:44"><call pos:start="209:9" pos:end="209:44"><name pos:start="209:9" pos:end="209:20">av_opt_show2</name><argument_list pos:start="209:21" pos:end="209:44">(<argument pos:start="209:22" pos:end="209:27"><expr pos:start="209:22" pos:end="209:27"><operator pos:start="209:22" pos:end="209:22">&amp;</operator><name pos:start="209:23" pos:end="209:27">class</name></expr></argument>, <argument pos:start="209:30" pos:end="209:33"><expr pos:start="209:30" pos:end="209:33"><name pos:start="209:30" pos:end="209:33">NULL</name></expr></argument>, <argument pos:start="209:36" pos:end="209:40"><expr pos:start="209:36" pos:end="209:40"><name pos:start="209:36" pos:end="209:40">flags</name></expr></argument>, <argument pos:start="209:43" pos:end="209:43"><expr pos:start="209:43" pos:end="209:43"><literal type="number" pos:start="209:43" pos:end="209:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="210:9" pos:end="210:21"><expr pos:start="210:9" pos:end="210:20"><call pos:start="210:9" pos:end="210:20"><name pos:start="210:9" pos:end="210:14">printf</name><argument_list pos:start="210:15" pos:end="210:20">(<argument pos:start="210:16" pos:end="210:19"><expr pos:start="210:16" pos:end="210:19"><literal type="string" pos:start="210:16" pos:end="210:19">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <while pos:start="213:5" pos:end="214:41">while <condition pos:start="213:11" pos:end="213:57">(<expr pos:start="213:12" pos:end="213:56"><name pos:start="213:12" pos:end="213:16">child</name> <operator pos:start="213:18" pos:end="213:18">=</operator> <call pos:start="213:20" pos:end="213:56"><name pos:start="213:20" pos:end="213:42">av_opt_child_class_next</name><argument_list pos:start="213:43" pos:end="213:56">(<argument pos:start="213:44" pos:end="213:48"><expr pos:start="213:44" pos:end="213:48"><name pos:start="213:44" pos:end="213:48">class</name></expr></argument>, <argument pos:start="213:51" pos:end="213:55"><expr pos:start="213:51" pos:end="213:55"><name pos:start="213:51" pos:end="213:55">child</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="214:9" pos:end="214:41"><block_content pos:start="214:9" pos:end="214:41">
        <expr_stmt pos:start="214:9" pos:end="214:41"><expr pos:start="214:9" pos:end="214:40"><call pos:start="214:9" pos:end="214:40"><name pos:start="214:9" pos:end="214:26">show_help_children</name><argument_list pos:start="214:27" pos:end="214:40">(<argument pos:start="214:28" pos:end="214:32"><expr pos:start="214:28" pos:end="214:32"><name pos:start="214:28" pos:end="214:32">child</name></expr></argument>, <argument pos:start="214:35" pos:end="214:39"><expr pos:start="214:35" pos:end="214:39"><name pos:start="214:35" pos:end="214:39">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function pos:start="217:1" pos:end="235:0"><type pos:start="217:1" pos:end="217:24"><specifier pos:start="217:1" pos:end="217:6">static</specifier> <specifier pos:start="217:8" pos:end="217:12">const</specifier> <name pos:start="217:14" pos:end="217:22">OptionDef</name> <modifier pos:start="217:24" pos:end="217:24">*</modifier></type><name pos:start="217:25" pos:end="217:35">find_option</name><parameter_list pos:start="217:36" pos:end="217:74">(<parameter pos:start="217:37" pos:end="217:55"><decl pos:start="217:37" pos:end="217:55"><type pos:start="217:37" pos:end="217:55"><specifier pos:start="217:37" pos:end="217:41">const</specifier> <name pos:start="217:43" pos:end="217:51">OptionDef</name> <modifier pos:start="217:53" pos:end="217:53">*</modifier></type><name pos:start="217:54" pos:end="217:55">po</name></decl></parameter>, <parameter pos:start="217:58" pos:end="217:73"><decl pos:start="217:58" pos:end="217:73"><type pos:start="217:58" pos:end="217:73"><specifier pos:start="217:58" pos:end="217:62">const</specifier> <name pos:start="217:64" pos:end="217:67">char</name> <modifier pos:start="217:69" pos:end="217:69">*</modifier></type><name pos:start="217:70" pos:end="217:73">name</name></decl></parameter>)</parameter_list>
<block pos:start="218:1" pos:end="235:0">{<block_content pos:start="219:5" pos:end="227:14">
    <decl_stmt pos:start="219:5" pos:end="219:38"><decl pos:start="219:5" pos:end="219:37"><type pos:start="219:5" pos:end="219:16"><specifier pos:start="219:5" pos:end="219:9">const</specifier> <name pos:start="219:11" pos:end="219:14">char</name> <modifier pos:start="219:16" pos:end="219:16">*</modifier></type><name pos:start="219:17" pos:end="219:17">p</name> <init pos:start="219:19" pos:end="219:37">= <expr pos:start="219:21" pos:end="219:37"><call pos:start="219:21" pos:end="219:37"><name pos:start="219:21" pos:end="219:26">strchr</name><argument_list pos:start="219:27" pos:end="219:37">(<argument pos:start="219:28" pos:end="219:31"><expr pos:start="219:28" pos:end="219:31"><name pos:start="219:28" pos:end="219:31">name</name></expr></argument>, <argument pos:start="219:34" pos:end="219:36"><expr pos:start="219:34" pos:end="219:36"><literal type="char" pos:start="219:34" pos:end="219:36">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="220:5" pos:end="220:42"><decl pos:start="220:5" pos:end="220:41"><type pos:start="220:5" pos:end="220:7"><name pos:start="220:5" pos:end="220:7">int</name></type> <name pos:start="220:9" pos:end="220:11">len</name> <init pos:start="220:13" pos:end="220:41">= <expr pos:start="220:15" pos:end="220:41"><ternary pos:start="220:15" pos:end="220:41"><condition pos:start="220:15" pos:end="220:17"><expr pos:start="220:15" pos:end="220:15"><name pos:start="220:15" pos:end="220:15">p</name></expr> ?</condition><then pos:start="220:19" pos:end="220:26"> <expr pos:start="220:19" pos:end="220:26"><name pos:start="220:19" pos:end="220:19">p</name> <operator pos:start="220:21" pos:end="220:21">-</operator> <name pos:start="220:23" pos:end="220:26">name</name></expr> </then><else pos:start="220:28" pos:end="220:41">: <expr pos:start="220:30" pos:end="220:41"><call pos:start="220:30" pos:end="220:41"><name pos:start="220:30" pos:end="220:35">strlen</name><argument_list pos:start="220:36" pos:end="220:41">(<argument pos:start="220:37" pos:end="220:40"><expr pos:start="220:37" pos:end="220:40"><name pos:start="220:37" pos:end="220:40">name</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <while pos:start="222:5" pos:end="226:5">while <condition pos:start="222:11" pos:end="222:20">(<expr pos:start="222:12" pos:end="222:19"><name pos:start="222:12" pos:end="222:19"><name pos:start="222:12" pos:end="222:13">po</name><operator pos:start="222:14" pos:end="222:15">-&gt;</operator><name pos:start="222:16" pos:end="222:19">name</name></name></expr>)</condition> <block pos:start="222:22" pos:end="226:5">{<block_content pos:start="223:9" pos:end="225:13">
        <if_stmt pos:start="223:9" pos:end="224:18"><if pos:start="223:9" pos:end="224:18">if <condition pos:start="223:12" pos:end="223:69">(<expr pos:start="223:13" pos:end="223:68"><operator pos:start="223:13" pos:end="223:13">!</operator><call pos:start="223:14" pos:end="223:41"><name pos:start="223:14" pos:end="223:20">strncmp</name><argument_list pos:start="223:21" pos:end="223:41">(<argument pos:start="223:22" pos:end="223:25"><expr pos:start="223:22" pos:end="223:25"><name pos:start="223:22" pos:end="223:25">name</name></expr></argument>, <argument pos:start="223:28" pos:end="223:35"><expr pos:start="223:28" pos:end="223:35"><name pos:start="223:28" pos:end="223:35"><name pos:start="223:28" pos:end="223:29">po</name><operator pos:start="223:30" pos:end="223:31">-&gt;</operator><name pos:start="223:32" pos:end="223:35">name</name></name></expr></argument>, <argument pos:start="223:38" pos:end="223:40"><expr pos:start="223:38" pos:end="223:40"><name pos:start="223:38" pos:end="223:40">len</name></expr></argument>)</argument_list></call> <operator pos:start="223:43" pos:end="223:44">&amp;&amp;</operator> <call pos:start="223:46" pos:end="223:61"><name pos:start="223:46" pos:end="223:51">strlen</name><argument_list pos:start="223:52" pos:end="223:61">(<argument pos:start="223:53" pos:end="223:60"><expr pos:start="223:53" pos:end="223:60"><name pos:start="223:53" pos:end="223:60"><name pos:start="223:53" pos:end="223:54">po</name><operator pos:start="223:55" pos:end="223:56">-&gt;</operator><name pos:start="223:57" pos:end="223:60">name</name></name></expr></argument>)</argument_list></call> <operator pos:start="223:63" pos:end="223:64">==</operator> <name pos:start="223:66" pos:end="223:68">len</name></expr>)</condition><block type="pseudo" pos:start="224:13" pos:end="224:18"><block_content pos:start="224:13" pos:end="224:18">
            <break pos:start="224:13" pos:end="224:18">break;</break></block_content></block></if></if_stmt>
        <expr_stmt pos:start="225:9" pos:end="225:13"><expr pos:start="225:9" pos:end="225:12"><name pos:start="225:9" pos:end="225:10">po</name><operator pos:start="225:11" pos:end="225:12">++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return pos:start="227:5" pos:end="227:14">return <expr pos:start="227:12" pos:end="227:13"><name pos:start="227:12" pos:end="227:13">po</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="230:1" pos:end="232:71">/* _WIN32 means using the windows libc - cygwin doesn't define that
 * by default. HAVE_COMMANDLINETOARGVW is true on cygwin, while
 * it doesn't provide the actual command line via GetCommandLineW(). */</comment>
<cpp:if pos:start="233:1" pos:end="233:46">#<cpp:directive pos:start="233:2" pos:end="233:3">if</cpp:directive> <expr pos:start="233:5" pos:end="233:46"><name pos:start="233:5" pos:end="233:27">HAVE_COMMANDLINETOARGVW</name> <operator pos:start="233:29" pos:end="233:30">&amp;&amp;</operator> <call pos:start="233:32" pos:end="233:46"><name pos:start="233:32" pos:end="233:38">defined</name><argument_list pos:start="233:39" pos:end="233:46">(<argument pos:start="233:40" pos:end="233:45"><expr pos:start="233:40" pos:end="233:45"><name pos:start="233:40" pos:end="233:45">_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include pos:start="234:1" pos:end="234:21">#<cpp:directive pos:start="234:2" pos:end="234:8">include</cpp:directive> <cpp:file pos:start="234:10" pos:end="234:21">&lt;shellapi.h&gt;</cpp:file></cpp:include>
<comment type="block" pos:start="235:1" pos:end="235:28">/* Will be leaked on exit */</comment>
<decl_stmt pos:start="236:1" pos:end="236:37"><decl pos:start="236:1" pos:end="236:36"><type pos:start="236:1" pos:end="236:13"><specifier pos:start="236:1" pos:end="236:6">static</specifier> <name pos:start="236:8" pos:end="236:11">char</name><modifier pos:start="236:12" pos:end="236:12">*</modifier><modifier pos:start="236:13" pos:end="236:13">*</modifier></type> <name pos:start="236:15" pos:end="236:29">win32_argv_utf8</name> <init pos:start="236:31" pos:end="236:36">= <expr pos:start="236:33" pos:end="236:36"><name pos:start="236:33" pos:end="236:36">NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="237:1" pos:end="237:26"><decl pos:start="237:1" pos:end="237:25"><type pos:start="237:1" pos:end="237:10"><specifier pos:start="237:1" pos:end="237:6">static</specifier> <name pos:start="237:8" pos:end="237:10">int</name></type> <name pos:start="237:12" pos:end="237:21">win32_argc</name> <init pos:start="237:23" pos:end="237:25">= <expr pos:start="237:25" pos:end="237:25"><literal type="number" pos:start="237:25" pos:end="237:25">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen" pos:start="239:1" pos:end="245:3">/**
 * Prepare command line arguments for executable.
 * For Windows - perform wide-char to UTF-8 conversion.
 * Input arguments should be main() function arguments.
 * @param argc_ptr Arguments number (including executable)
 * @param argv_ptr Arguments list.
 */</comment>
<function pos:start="246:1" pos:end="288:0"><type pos:start="246:1" pos:end="246:11"><specifier pos:start="246:1" pos:end="246:6">static</specifier> <name pos:start="246:8" pos:end="246:11">void</name></type> <name pos:start="246:13" pos:end="246:33">prepare_app_arguments</name><parameter_list pos:start="246:34" pos:end="246:66">(<parameter pos:start="246:35" pos:end="246:47"><decl pos:start="246:35" pos:end="246:47"><type pos:start="246:35" pos:end="246:47"><name pos:start="246:35" pos:end="246:37">int</name> <modifier pos:start="246:39" pos:end="246:39">*</modifier></type><name pos:start="246:40" pos:end="246:47">argc_ptr</name></decl></parameter>, <parameter pos:start="246:50" pos:end="246:65"><decl pos:start="246:50" pos:end="246:65"><type pos:start="246:50" pos:end="246:65"><name pos:start="246:50" pos:end="246:53">char</name> <modifier pos:start="246:55" pos:end="246:55">*</modifier><modifier pos:start="246:56" pos:end="246:56">*</modifier><modifier pos:start="246:57" pos:end="246:57">*</modifier></type><name pos:start="246:58" pos:end="246:65">argv_ptr</name></decl></parameter>)</parameter_list>
<block pos:start="247:1" pos:end="288:0">{<block_content pos:start="248:5" pos:end="285:32">
    <decl_stmt pos:start="248:5" pos:end="248:22"><decl pos:start="248:5" pos:end="248:21"><type pos:start="248:5" pos:end="248:10"><name pos:start="248:5" pos:end="248:8">char</name> <modifier pos:start="248:10" pos:end="248:10">*</modifier></type><name pos:start="248:11" pos:end="248:21">argstr_flat</name></decl>;</decl_stmt>
    <decl_stmt pos:start="249:5" pos:end="249:21"><decl pos:start="249:5" pos:end="249:20"><type pos:start="249:5" pos:end="249:14"><name pos:start="249:5" pos:end="249:11">wchar_t</name> <modifier pos:start="249:13" pos:end="249:13">*</modifier><modifier pos:start="249:14" pos:end="249:14">*</modifier></type><name pos:start="249:15" pos:end="249:20">argv_w</name></decl>;</decl_stmt>
    <decl_stmt pos:start="250:5" pos:end="250:36"><decl pos:start="250:5" pos:end="250:9"><type pos:start="250:5" pos:end="250:7"><name pos:start="250:5" pos:end="250:7">int</name></type> <name pos:start="250:9" pos:end="250:9">i</name></decl>, <decl pos:start="250:12" pos:end="250:23"><type ref="prev" pos:start="250:5" pos:end="250:7"/><name pos:start="250:12" pos:end="250:19">buffsize</name> <init pos:start="250:21" pos:end="250:23">= <expr pos:start="250:23" pos:end="250:23"><literal type="number" pos:start="250:23" pos:end="250:23">0</literal></expr></init></decl>, <decl pos:start="250:26" pos:end="250:35"><type ref="prev" pos:start="250:5" pos:end="250:7"/><name pos:start="250:26" pos:end="250:31">offset</name> <init pos:start="250:33" pos:end="250:35">= <expr pos:start="250:35" pos:end="250:35"><literal type="number" pos:start="250:35" pos:end="250:35">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="252:5" pos:end="256:5"><if pos:start="252:5" pos:end="256:5">if <condition pos:start="252:8" pos:end="252:24">(<expr pos:start="252:9" pos:end="252:23"><name pos:start="252:9" pos:end="252:23">win32_argv_utf8</name></expr>)</condition> <block pos:start="252:26" pos:end="256:5">{<block_content pos:start="253:9" pos:end="255:15">
        <expr_stmt pos:start="253:9" pos:end="253:31"><expr pos:start="253:9" pos:end="253:30"><operator pos:start="253:9" pos:end="253:9">*</operator><name pos:start="253:10" pos:end="253:17">argc_ptr</name> <operator pos:start="253:19" pos:end="253:19">=</operator> <name pos:start="253:21" pos:end="253:30">win32_argc</name></expr>;</expr_stmt>
        <expr_stmt pos:start="254:9" pos:end="254:36"><expr pos:start="254:9" pos:end="254:35"><operator pos:start="254:9" pos:end="254:9">*</operator><name pos:start="254:10" pos:end="254:17">argv_ptr</name> <operator pos:start="254:19" pos:end="254:19">=</operator> <name pos:start="254:21" pos:end="254:35">win32_argv_utf8</name></expr>;</expr_stmt>
        <return pos:start="255:9" pos:end="255:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="258:5" pos:end="258:19"><expr pos:start="258:5" pos:end="258:18"><name pos:start="258:5" pos:end="258:14">win32_argc</name> <operator pos:start="258:16" pos:end="258:16">=</operator> <literal type="number" pos:start="258:18" pos:end="258:18">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="259:5" pos:end="259:64"><expr pos:start="259:5" pos:end="259:63"><name pos:start="259:5" pos:end="259:10">argv_w</name> <operator pos:start="259:12" pos:end="259:12">=</operator> <call pos:start="259:14" pos:end="259:63"><name pos:start="259:14" pos:end="259:31">CommandLineToArgvW</name><argument_list pos:start="259:32" pos:end="259:63">(<argument pos:start="259:33" pos:end="259:49"><expr pos:start="259:33" pos:end="259:49"><call pos:start="259:33" pos:end="259:49"><name pos:start="259:33" pos:end="259:47">GetCommandLineW</name><argument_list pos:start="259:48" pos:end="259:49">()</argument_list></call></expr></argument>, <argument pos:start="259:52" pos:end="259:62"><expr pos:start="259:52" pos:end="259:62"><operator pos:start="259:52" pos:end="259:52">&amp;</operator><name pos:start="259:53" pos:end="259:62">win32_argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="260:5" pos:end="261:15"><if pos:start="260:5" pos:end="261:15">if <condition pos:start="260:8" pos:end="260:35">(<expr pos:start="260:9" pos:end="260:34"><name pos:start="260:9" pos:end="260:18">win32_argc</name> <operator pos:start="260:20" pos:end="260:21">&lt;=</operator> <literal type="number" pos:start="260:23" pos:end="260:23">0</literal> <operator pos:start="260:25" pos:end="260:26">||</operator> <operator pos:start="260:28" pos:end="260:28">!</operator><name pos:start="260:29" pos:end="260:34">argv_w</name></expr>)</condition><block type="pseudo" pos:start="261:9" pos:end="261:15"><block_content pos:start="261:9" pos:end="261:15">
        <return pos:start="261:9" pos:end="261:15">return;</return></block_content></block></if></if_stmt>

    <comment type="block" pos:start="263:5" pos:end="263:78">/* determine the UTF-8 buffer size (including NULL-termination symbols) */</comment>
    <for pos:start="264:5" pos:end="266:61">for <control pos:start="264:9" pos:end="264:36">(<init pos:start="264:10" pos:end="264:15"><expr pos:start="264:10" pos:end="264:14"><name pos:start="264:10" pos:end="264:10">i</name> <operator pos:start="264:12" pos:end="264:12">=</operator> <literal type="number" pos:start="264:14" pos:end="264:14">0</literal></expr>;</init> <condition pos:start="264:17" pos:end="264:31"><expr pos:start="264:17" pos:end="264:30"><name pos:start="264:17" pos:end="264:17">i</name> <operator pos:start="264:19" pos:end="264:19">&lt;</operator> <name pos:start="264:21" pos:end="264:30">win32_argc</name></expr>;</condition> <incr pos:start="264:33" pos:end="264:35"><expr pos:start="264:33" pos:end="264:35"><name pos:start="264:33" pos:end="264:33">i</name><operator pos:start="264:34" pos:end="264:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="265:9" pos:end="266:61"><block_content pos:start="265:9" pos:end="266:61">
        <expr_stmt pos:start="265:9" pos:end="266:61"><expr pos:start="265:9" pos:end="266:60"><name pos:start="265:9" pos:end="265:16">buffsize</name> <operator pos:start="265:18" pos:end="265:19">+=</operator> <call pos:start="265:21" pos:end="266:60"><name pos:start="265:21" pos:end="265:39">WideCharToMultiByte</name><argument_list pos:start="265:40" pos:end="266:60">(<argument pos:start="265:41" pos:end="265:47"><expr pos:start="265:41" pos:end="265:47"><name pos:start="265:41" pos:end="265:47">CP_UTF8</name></expr></argument>, <argument pos:start="265:50" pos:end="265:50"><expr pos:start="265:50" pos:end="265:50"><literal type="number" pos:start="265:50" pos:end="265:50">0</literal></expr></argument>, <argument pos:start="265:53" pos:end="265:61"><expr pos:start="265:53" pos:end="265:61"><name pos:start="265:53" pos:end="265:61"><name pos:start="265:53" pos:end="265:58">argv_w</name><index pos:start="265:59" pos:end="265:61">[<expr pos:start="265:60" pos:end="265:60"><name pos:start="265:60" pos:end="265:60">i</name></expr>]</index></name></expr></argument>, <argument pos:start="265:64" pos:end="265:65"><expr pos:start="265:64" pos:end="265:65"><operator pos:start="265:64" pos:end="265:64">-</operator><literal type="number" pos:start="265:65" pos:end="265:65">1</literal></expr></argument>,
                                        <argument pos:start="266:41" pos:end="266:44"><expr pos:start="266:41" pos:end="266:44"><name pos:start="266:41" pos:end="266:44">NULL</name></expr></argument>, <argument pos:start="266:47" pos:end="266:47"><expr pos:start="266:47" pos:end="266:47"><literal type="number" pos:start="266:47" pos:end="266:47">0</literal></expr></argument>, <argument pos:start="266:50" pos:end="266:53"><expr pos:start="266:50" pos:end="266:53"><name pos:start="266:50" pos:end="266:53">NULL</name></expr></argument>, <argument pos:start="266:56" pos:end="266:59"><expr pos:start="266:56" pos:end="266:59"><name pos:start="266:56" pos:end="266:59">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt pos:start="268:5" pos:end="268:79"><expr pos:start="268:5" pos:end="268:78"><name pos:start="268:5" pos:end="268:19">win32_argv_utf8</name> <operator pos:start="268:21" pos:end="268:21">=</operator> <call pos:start="268:23" pos:end="268:78"><name pos:start="268:23" pos:end="268:32">av_mallocz</name><argument_list pos:start="268:33" pos:end="268:78">(<argument pos:start="268:34" pos:end="268:77"><expr pos:start="268:34" pos:end="268:77"><sizeof pos:start="268:34" pos:end="268:47">sizeof<argument_list pos:start="268:40" pos:end="268:47">(<argument pos:start="268:41" pos:end="268:46"><expr pos:start="268:41" pos:end="268:46"><name pos:start="268:41" pos:end="268:44">char</name> <operator pos:start="268:46" pos:end="268:46">*</operator></expr></argument>)</argument_list></sizeof> <operator pos:start="268:49" pos:end="268:49">*</operator> <operator pos:start="268:51" pos:end="268:51">(</operator><name pos:start="268:52" pos:end="268:61">win32_argc</name> <operator pos:start="268:63" pos:end="268:63">+</operator> <literal type="number" pos:start="268:65" pos:end="268:65">1</literal><operator pos:start="268:66" pos:end="268:66">)</operator> <operator pos:start="268:68" pos:end="268:68">+</operator> <name pos:start="268:70" pos:end="268:77">buffsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="269:5" pos:end="269:82"><expr pos:start="269:5" pos:end="269:81"><name pos:start="269:5" pos:end="269:15">argstr_flat</name>     <operator pos:start="269:21" pos:end="269:21">=</operator> <operator pos:start="269:23" pos:end="269:23">(</operator><name pos:start="269:24" pos:end="269:27">char</name> <operator pos:start="269:29" pos:end="269:29">*</operator><operator pos:start="269:30" pos:end="269:30">)</operator><name pos:start="269:31" pos:end="269:45">win32_argv_utf8</name> <operator pos:start="269:47" pos:end="269:47">+</operator> <sizeof pos:start="269:49" pos:end="269:62">sizeof<argument_list pos:start="269:55" pos:end="269:62">(<argument pos:start="269:56" pos:end="269:61"><expr pos:start="269:56" pos:end="269:61"><name pos:start="269:56" pos:end="269:59">char</name> <operator pos:start="269:61" pos:end="269:61">*</operator></expr></argument>)</argument_list></sizeof> <operator pos:start="269:64" pos:end="269:64">*</operator> <operator pos:start="269:66" pos:end="269:66">(</operator><name pos:start="269:67" pos:end="269:76">win32_argc</name> <operator pos:start="269:78" pos:end="269:78">+</operator> <literal type="number" pos:start="269:80" pos:end="269:80">1</literal><operator pos:start="269:81" pos:end="269:81">)</operator></expr>;</expr_stmt>
    <if_stmt pos:start="270:5" pos:end="273:5"><if pos:start="270:5" pos:end="273:5">if <condition pos:start="270:8" pos:end="270:25">(<expr pos:start="270:9" pos:end="270:24"><operator pos:start="270:9" pos:end="270:9">!</operator><name pos:start="270:10" pos:end="270:24">win32_argv_utf8</name></expr>)</condition> <block pos:start="270:27" pos:end="273:5">{<block_content pos:start="271:9" pos:end="272:15">
        <expr_stmt pos:start="271:9" pos:end="271:26"><expr pos:start="271:9" pos:end="271:25"><call pos:start="271:9" pos:end="271:25"><name pos:start="271:9" pos:end="271:17">LocalFree</name><argument_list pos:start="271:18" pos:end="271:25">(<argument pos:start="271:19" pos:end="271:24"><expr pos:start="271:19" pos:end="271:24"><name pos:start="271:19" pos:end="271:24">argv_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="272:9" pos:end="272:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <for pos:start="275:5" pos:end="280:5">for <control pos:start="275:9" pos:end="275:36">(<init pos:start="275:10" pos:end="275:15"><expr pos:start="275:10" pos:end="275:14"><name pos:start="275:10" pos:end="275:10">i</name> <operator pos:start="275:12" pos:end="275:12">=</operator> <literal type="number" pos:start="275:14" pos:end="275:14">0</literal></expr>;</init> <condition pos:start="275:17" pos:end="275:31"><expr pos:start="275:17" pos:end="275:30"><name pos:start="275:17" pos:end="275:17">i</name> <operator pos:start="275:19" pos:end="275:19">&lt;</operator> <name pos:start="275:21" pos:end="275:30">win32_argc</name></expr>;</condition> <incr pos:start="275:33" pos:end="275:35"><expr pos:start="275:33" pos:end="275:35"><name pos:start="275:33" pos:end="275:33">i</name><operator pos:start="275:34" pos:end="275:35">++</operator></expr></incr>)</control> <block pos:start="275:38" pos:end="280:5">{<block_content pos:start="276:9" pos:end="279:69">
        <expr_stmt pos:start="276:9" pos:end="276:50"><expr pos:start="276:9" pos:end="276:49"><name pos:start="276:9" pos:end="276:26"><name pos:start="276:9" pos:end="276:23">win32_argv_utf8</name><index pos:start="276:24" pos:end="276:26">[<expr pos:start="276:25" pos:end="276:25"><name pos:start="276:25" pos:end="276:25">i</name></expr>]</index></name> <operator pos:start="276:28" pos:end="276:28">=</operator> <operator pos:start="276:30" pos:end="276:30">&amp;</operator><name pos:start="276:31" pos:end="276:49"><name pos:start="276:31" pos:end="276:41">argstr_flat</name><index pos:start="276:42" pos:end="276:49">[<expr pos:start="276:43" pos:end="276:48"><name pos:start="276:43" pos:end="276:48">offset</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="277:9" pos:end="279:69"><expr pos:start="277:9" pos:end="279:68"><name pos:start="277:9" pos:end="277:14">offset</name> <operator pos:start="277:16" pos:end="277:17">+=</operator> <call pos:start="277:19" pos:end="279:68"><name pos:start="277:19" pos:end="277:37">WideCharToMultiByte</name><argument_list pos:start="277:38" pos:end="279:68">(<argument pos:start="277:39" pos:end="277:45"><expr pos:start="277:39" pos:end="277:45"><name pos:start="277:39" pos:end="277:45">CP_UTF8</name></expr></argument>, <argument pos:start="277:48" pos:end="277:48"><expr pos:start="277:48" pos:end="277:48"><literal type="number" pos:start="277:48" pos:end="277:48">0</literal></expr></argument>, <argument pos:start="277:51" pos:end="277:59"><expr pos:start="277:51" pos:end="277:59"><name pos:start="277:51" pos:end="277:59"><name pos:start="277:51" pos:end="277:56">argv_w</name><index pos:start="277:57" pos:end="277:59">[<expr pos:start="277:58" pos:end="277:58"><name pos:start="277:58" pos:end="277:58">i</name></expr>]</index></name></expr></argument>, <argument pos:start="277:62" pos:end="277:63"><expr pos:start="277:62" pos:end="277:63"><operator pos:start="277:62" pos:end="277:62">-</operator><literal type="number" pos:start="277:63" pos:end="277:63">1</literal></expr></argument>,
                                      <argument pos:start="278:39" pos:end="278:58"><expr pos:start="278:39" pos:end="278:58"><operator pos:start="278:39" pos:end="278:39">&amp;</operator><name pos:start="278:40" pos:end="278:58"><name pos:start="278:40" pos:end="278:50">argstr_flat</name><index pos:start="278:51" pos:end="278:58">[<expr pos:start="278:52" pos:end="278:57"><name pos:start="278:52" pos:end="278:57">offset</name></expr>]</index></name></expr></argument>,
                                      <argument pos:start="279:39" pos:end="279:55"><expr pos:start="279:39" pos:end="279:55"><name pos:start="279:39" pos:end="279:46">buffsize</name> <operator pos:start="279:48" pos:end="279:48">-</operator> <name pos:start="279:50" pos:end="279:55">offset</name></expr></argument>, <argument pos:start="279:58" pos:end="279:61"><expr pos:start="279:58" pos:end="279:61"><name pos:start="279:58" pos:end="279:61">NULL</name></expr></argument>, <argument pos:start="279:64" pos:end="279:67"><expr pos:start="279:64" pos:end="279:67"><name pos:start="279:64" pos:end="279:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="281:5" pos:end="281:30"><expr pos:start="281:5" pos:end="281:29"><name pos:start="281:5" pos:end="281:22"><name pos:start="281:5" pos:end="281:19">win32_argv_utf8</name><index pos:start="281:20" pos:end="281:22">[<expr pos:start="281:21" pos:end="281:21"><name pos:start="281:21" pos:end="281:21">i</name></expr>]</index></name> <operator pos:start="281:24" pos:end="281:24">=</operator> <name pos:start="281:26" pos:end="281:29">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="282:5" pos:end="282:22"><expr pos:start="282:5" pos:end="282:21"><call pos:start="282:5" pos:end="282:21"><name pos:start="282:5" pos:end="282:13">LocalFree</name><argument_list pos:start="282:14" pos:end="282:21">(<argument pos:start="282:15" pos:end="282:20"><expr pos:start="282:15" pos:end="282:20"><name pos:start="282:15" pos:end="282:20">argv_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="284:5" pos:end="284:27"><expr pos:start="284:5" pos:end="284:26"><operator pos:start="284:5" pos:end="284:5">*</operator><name pos:start="284:6" pos:end="284:13">argc_ptr</name> <operator pos:start="284:15" pos:end="284:15">=</operator> <name pos:start="284:17" pos:end="284:26">win32_argc</name></expr>;</expr_stmt>
    <expr_stmt pos:start="285:5" pos:end="285:32"><expr pos:start="285:5" pos:end="285:31"><operator pos:start="285:5" pos:end="285:5">*</operator><name pos:start="285:6" pos:end="285:13">argv_ptr</name> <operator pos:start="285:15" pos:end="285:15">=</operator> <name pos:start="285:17" pos:end="285:31">win32_argv_utf8</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else pos:start="287:1" pos:end="287:5">#<cpp:directive pos:start="287:2" pos:end="287:5">else</cpp:directive></cpp:else>
<function pos:start="288:1" pos:end="293:0"><type pos:start="288:1" pos:end="288:18"><specifier pos:start="288:1" pos:end="288:6">static</specifier> <specifier pos:start="288:8" pos:end="288:13">inline</specifier> <name pos:start="288:15" pos:end="288:18">void</name></type> <name pos:start="288:20" pos:end="288:40">prepare_app_arguments</name><parameter_list pos:start="288:41" pos:end="288:73">(<parameter pos:start="288:42" pos:end="288:54"><decl pos:start="288:42" pos:end="288:54"><type pos:start="288:42" pos:end="288:54"><name pos:start="288:42" pos:end="288:44">int</name> <modifier pos:start="288:46" pos:end="288:46">*</modifier></type><name pos:start="288:47" pos:end="288:54">argc_ptr</name></decl></parameter>, <parameter pos:start="288:57" pos:end="288:72"><decl pos:start="288:57" pos:end="288:72"><type pos:start="288:57" pos:end="288:72"><name pos:start="288:57" pos:end="288:60">char</name> <modifier pos:start="288:62" pos:end="288:62">*</modifier><modifier pos:start="288:63" pos:end="288:63">*</modifier><modifier pos:start="288:64" pos:end="288:64">*</modifier></type><name pos:start="288:65" pos:end="288:72">argv_ptr</name></decl></parameter>)</parameter_list>
<block pos:start="289:1" pos:end="293:0">{<block_content>
    <comment type="block" pos:start="290:5" pos:end="290:23">/* nothing to do */</comment>
</block_content>}</block></function>
<cpp:endif pos:start="292:1" pos:end="292:6">#<cpp:directive pos:start="292:2" pos:end="292:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="292:8" pos:end="292:36">/* HAVE_COMMANDLINETOARGVW */</comment>

<function pos:start="294:1" pos:end="347:1"><type pos:start="294:1" pos:end="294:10"><specifier pos:start="294:1" pos:end="294:6">static</specifier> <name pos:start="294:8" pos:end="294:10">int</name></type> <name pos:start="294:12" pos:end="294:23">write_option</name><parameter_list pos:start="294:24" pos:end="295:40">(<parameter pos:start="294:25" pos:end="294:36"><decl pos:start="294:25" pos:end="294:36"><type pos:start="294:25" pos:end="294:36"><name pos:start="294:25" pos:end="294:28">void</name> <modifier pos:start="294:30" pos:end="294:30">*</modifier></type><name pos:start="294:31" pos:end="294:36">optctx</name></decl></parameter>, <parameter pos:start="294:39" pos:end="294:57"><decl pos:start="294:39" pos:end="294:57"><type pos:start="294:39" pos:end="294:57"><specifier pos:start="294:39" pos:end="294:43">const</specifier> <name pos:start="294:45" pos:end="294:53">OptionDef</name> <modifier pos:start="294:55" pos:end="294:55">*</modifier></type><name pos:start="294:56" pos:end="294:57">po</name></decl></parameter>, <parameter pos:start="294:60" pos:end="294:74"><decl pos:start="294:60" pos:end="294:74"><type pos:start="294:60" pos:end="294:74"><specifier pos:start="294:60" pos:end="294:64">const</specifier> <name pos:start="294:66" pos:end="294:69">char</name> <modifier pos:start="294:71" pos:end="294:71">*</modifier></type><name pos:start="294:72" pos:end="294:74">opt</name></decl></parameter>,
                        <parameter pos:start="295:25" pos:end="295:39"><decl pos:start="295:25" pos:end="295:39"><type pos:start="295:25" pos:end="295:39"><specifier pos:start="295:25" pos:end="295:29">const</specifier> <name pos:start="295:31" pos:end="295:34">char</name> <modifier pos:start="295:36" pos:end="295:36">*</modifier></type><name pos:start="295:37" pos:end="295:39">arg</name></decl></parameter>)</parameter_list>
<block pos:start="296:1" pos:end="347:1">{<block_content pos:start="299:5" pos:end="346:13">
    <comment type="block" pos:start="297:5" pos:end="298:21">/* new-style options contain an offset into optctx, old-style address of
     * a global var*/</comment>
    <decl_stmt pos:start="299:5" pos:end="300:62"><decl pos:start="299:5" pos:end="300:61"><type pos:start="299:5" pos:end="299:10"><name pos:start="299:5" pos:end="299:8">void</name> <modifier pos:start="299:10" pos:end="299:10">*</modifier></type><name pos:start="299:11" pos:end="299:13">dst</name> <init pos:start="299:15" pos:end="300:61">= <expr pos:start="299:17" pos:end="300:61"><ternary pos:start="299:17" pos:end="300:61"><condition pos:start="299:17" pos:end="299:53"><expr pos:start="299:17" pos:end="299:51"><name pos:start="299:17" pos:end="299:25"><name pos:start="299:17" pos:end="299:18">po</name><operator pos:start="299:19" pos:end="299:20">-&gt;</operator><name pos:start="299:21" pos:end="299:25">flags</name></name> <operator pos:start="299:27" pos:end="299:27">&amp;</operator> <operator pos:start="299:29" pos:end="299:29">(</operator><name pos:start="299:30" pos:end="299:39">OPT_OFFSET</name> <operator pos:start="299:41" pos:end="299:41">|</operator> <name pos:start="299:43" pos:end="299:50">OPT_SPEC</name><operator pos:start="299:51" pos:end="299:51">)</operator></expr> ?</condition><then pos:start="300:17" pos:end="300:45">
                <expr pos:start="300:17" pos:end="300:45"><operator pos:start="300:17" pos:end="300:17">(</operator><name pos:start="300:18" pos:end="300:24">uint8_t</name> <operator pos:start="300:26" pos:end="300:26">*</operator><operator pos:start="300:27" pos:end="300:27">)</operator><name pos:start="300:28" pos:end="300:33">optctx</name> <operator pos:start="300:35" pos:end="300:35">+</operator> <name pos:start="300:37" pos:end="300:45"><name pos:start="300:37" pos:end="300:38">po</name><operator pos:start="300:39" pos:end="300:40">-&gt;</operator><name pos:start="300:41" pos:end="300:41">u</name><operator pos:start="300:42" pos:end="300:42">.</operator><name pos:start="300:43" pos:end="300:45">off</name></name></expr> </then><else pos:start="300:47" pos:end="300:61">: <expr pos:start="300:49" pos:end="300:61"><name pos:start="300:49" pos:end="300:61"><name pos:start="300:49" pos:end="300:50">po</name><operator pos:start="300:51" pos:end="300:52">-&gt;</operator><name pos:start="300:53" pos:end="300:53">u</name><operator pos:start="300:54" pos:end="300:54">.</operator><name pos:start="300:55" pos:end="300:61">dst_ptr</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="301:5" pos:end="301:18"><decl pos:start="301:5" pos:end="301:17"><type pos:start="301:5" pos:end="301:9"><name pos:start="301:5" pos:end="301:7">int</name> <modifier pos:start="301:9" pos:end="301:9">*</modifier></type><name pos:start="301:10" pos:end="301:17">dstcount</name></decl>;</decl_stmt>

    <if_stmt pos:start="303:5" pos:end="315:5"><if pos:start="303:5" pos:end="315:5">if <condition pos:start="303:8" pos:end="303:29">(<expr pos:start="303:9" pos:end="303:28"><name pos:start="303:9" pos:end="303:17"><name pos:start="303:9" pos:end="303:10">po</name><operator pos:start="303:11" pos:end="303:12">-&gt;</operator><name pos:start="303:13" pos:end="303:17">flags</name></name> <operator pos:start="303:19" pos:end="303:19">&amp;</operator> <name pos:start="303:21" pos:end="303:28">OPT_SPEC</name></expr>)</condition> <block pos:start="303:31" pos:end="315:5">{<block_content pos:start="304:9" pos:end="314:38">
        <decl_stmt pos:start="304:9" pos:end="304:32"><decl pos:start="304:9" pos:end="304:31"><type pos:start="304:9" pos:end="304:23"><name pos:start="304:9" pos:end="304:20">SpecifierOpt</name> <modifier pos:start="304:22" pos:end="304:22">*</modifier><modifier pos:start="304:23" pos:end="304:23">*</modifier></type><name pos:start="304:24" pos:end="304:25">so</name> <init pos:start="304:27" pos:end="304:31">= <expr pos:start="304:29" pos:end="304:31"><name pos:start="304:29" pos:end="304:31">dst</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="305:9" pos:end="305:35"><decl pos:start="305:9" pos:end="305:34"><type pos:start="305:9" pos:end="305:14"><name pos:start="305:9" pos:end="305:12">char</name> <modifier pos:start="305:14" pos:end="305:14">*</modifier></type><name pos:start="305:15" pos:end="305:15">p</name> <init pos:start="305:17" pos:end="305:34">= <expr pos:start="305:19" pos:end="305:34"><call pos:start="305:19" pos:end="305:34"><name pos:start="305:19" pos:end="305:24">strchr</name><argument_list pos:start="305:25" pos:end="305:34">(<argument pos:start="305:26" pos:end="305:28"><expr pos:start="305:26" pos:end="305:28"><name pos:start="305:26" pos:end="305:28">opt</name></expr></argument>, <argument pos:start="305:31" pos:end="305:33"><expr pos:start="305:31" pos:end="305:33"><literal type="char" pos:start="305:31" pos:end="305:33">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="306:9" pos:end="306:18"><decl pos:start="306:9" pos:end="306:17"><type pos:start="306:9" pos:end="306:14"><name pos:start="306:9" pos:end="306:12">char</name> <modifier pos:start="306:14" pos:end="306:14">*</modifier></type><name pos:start="306:15" pos:end="306:17">str</name></decl>;</decl_stmt>

        <expr_stmt pos:start="308:9" pos:end="308:35"><expr pos:start="308:9" pos:end="308:34"><name pos:start="308:9" pos:end="308:16">dstcount</name> <operator pos:start="308:18" pos:end="308:18">=</operator> <operator pos:start="308:20" pos:end="308:20">(</operator><name pos:start="308:21" pos:end="308:23">int</name> <operator pos:start="308:25" pos:end="308:25">*</operator><operator pos:start="308:26" pos:end="308:26">)</operator><operator pos:start="308:27" pos:end="308:27">(</operator><name pos:start="308:28" pos:end="308:29">so</name> <operator pos:start="308:31" pos:end="308:31">+</operator> <literal type="number" pos:start="308:33" pos:end="308:33">1</literal><operator pos:start="308:34" pos:end="308:34">)</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="309:9" pos:end="309:69"><expr pos:start="309:9" pos:end="309:68"><operator pos:start="309:9" pos:end="309:9">*</operator><name pos:start="309:10" pos:end="309:11">so</name> <operator pos:start="309:13" pos:end="309:13">=</operator> <call pos:start="309:15" pos:end="309:68"><name pos:start="309:15" pos:end="309:24">grow_array</name><argument_list pos:start="309:25" pos:end="309:68">(<argument pos:start="309:26" pos:end="309:28"><expr pos:start="309:26" pos:end="309:28"><operator pos:start="309:26" pos:end="309:26">*</operator><name pos:start="309:27" pos:end="309:28">so</name></expr></argument>, <argument pos:start="309:31" pos:end="309:42"><expr pos:start="309:31" pos:end="309:42"><sizeof pos:start="309:31" pos:end="309:42">sizeof<argument_list pos:start="309:37" pos:end="309:42">(<argument pos:start="309:38" pos:end="309:41"><expr pos:start="309:38" pos:end="309:41"><operator pos:start="309:38" pos:end="309:38">*</operator><operator pos:start="309:39" pos:end="309:39">*</operator><name pos:start="309:40" pos:end="309:41">so</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="309:45" pos:end="309:52"><expr pos:start="309:45" pos:end="309:52"><name pos:start="309:45" pos:end="309:52">dstcount</name></expr></argument>, <argument pos:start="309:55" pos:end="309:67"><expr pos:start="309:55" pos:end="309:67"><operator pos:start="309:55" pos:end="309:55">*</operator><name pos:start="309:56" pos:end="309:63">dstcount</name> <operator pos:start="309:65" pos:end="309:65">+</operator> <literal type="number" pos:start="309:67" pos:end="309:67">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="310:9" pos:end="310:40"><expr pos:start="310:9" pos:end="310:39"><name pos:start="310:9" pos:end="310:11">str</name> <operator pos:start="310:13" pos:end="310:13">=</operator> <call pos:start="310:15" pos:end="310:39"><name pos:start="310:15" pos:end="310:23">av_strdup</name><argument_list pos:start="310:24" pos:end="310:39">(<argument pos:start="310:25" pos:end="310:38"><expr pos:start="310:25" pos:end="310:38"><ternary pos:start="310:25" pos:end="310:38"><condition pos:start="310:25" pos:end="310:27"><expr pos:start="310:25" pos:end="310:25"><name pos:start="310:25" pos:end="310:25">p</name></expr> ?</condition><then pos:start="310:29" pos:end="310:33"> <expr pos:start="310:29" pos:end="310:33"><name pos:start="310:29" pos:end="310:29">p</name> <operator pos:start="310:31" pos:end="310:31">+</operator> <literal type="number" pos:start="310:33" pos:end="310:33">1</literal></expr> </then><else pos:start="310:35" pos:end="310:38">: <expr pos:start="310:37" pos:end="310:38"><literal type="string" pos:start="310:37" pos:end="310:38">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="311:9" pos:end="312:35"><if pos:start="311:9" pos:end="312:35">if <condition pos:start="311:12" pos:end="311:17">(<expr pos:start="311:13" pos:end="311:16"><operator pos:start="311:13" pos:end="311:13">!</operator><name pos:start="311:14" pos:end="311:16">str</name></expr>)</condition><block type="pseudo" pos:start="312:13" pos:end="312:35"><block_content pos:start="312:13" pos:end="312:35">
            <return pos:start="312:13" pos:end="312:35">return <expr pos:start="312:20" pos:end="312:34"><call pos:start="312:20" pos:end="312:34"><name pos:start="312:20" pos:end="312:26">AVERROR</name><argument_list pos:start="312:27" pos:end="312:34">(<argument pos:start="312:28" pos:end="312:33"><expr pos:start="312:28" pos:end="312:33"><name pos:start="312:28" pos:end="312:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt pos:start="313:9" pos:end="313:45"><expr pos:start="313:9" pos:end="313:44"><operator pos:start="313:9" pos:end="313:9">(</operator><operator pos:start="313:10" pos:end="313:10">*</operator><name pos:start="313:11" pos:end="313:12">so</name><operator pos:start="313:13" pos:end="313:13">)</operator><index pos:start="313:14" pos:end="313:28">[<expr pos:start="313:15" pos:end="313:27"><operator pos:start="313:15" pos:end="313:15">*</operator><name pos:start="313:16" pos:end="313:23">dstcount</name> <operator pos:start="313:25" pos:end="313:25">-</operator> <literal type="number" pos:start="313:27" pos:end="313:27">1</literal></expr>]</index><operator pos:start="313:29" pos:end="313:29">.</operator><name pos:start="313:30" pos:end="313:38">specifier</name> <operator pos:start="313:40" pos:end="313:40">=</operator> <name pos:start="313:42" pos:end="313:44">str</name></expr>;</expr_stmt>
        <expr_stmt pos:start="314:9" pos:end="314:38"><expr pos:start="314:9" pos:end="314:37"><name pos:start="314:9" pos:end="314:11">dst</name> <operator pos:start="314:13" pos:end="314:13">=</operator> <operator pos:start="314:15" pos:end="314:15">&amp;</operator><operator pos:start="314:16" pos:end="314:16">(</operator><operator pos:start="314:17" pos:end="314:17">*</operator><name pos:start="314:18" pos:end="314:19">so</name><operator pos:start="314:20" pos:end="314:20">)</operator><index pos:start="314:21" pos:end="314:35">[<expr pos:start="314:22" pos:end="314:34"><operator pos:start="314:22" pos:end="314:22">*</operator><name pos:start="314:23" pos:end="314:30">dstcount</name> <operator pos:start="314:32" pos:end="314:32">-</operator> <literal type="number" pos:start="314:34" pos:end="314:34">1</literal></expr>]</index><operator pos:start="314:36" pos:end="314:36">.</operator><name pos:start="314:37" pos:end="314:37">u</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="317:5" pos:end="342:5"><if pos:start="317:5" pos:end="324:5">if <condition pos:start="317:8" pos:end="317:31">(<expr pos:start="317:9" pos:end="317:30"><name pos:start="317:9" pos:end="317:17"><name pos:start="317:9" pos:end="317:10">po</name><operator pos:start="317:11" pos:end="317:12">-&gt;</operator><name pos:start="317:13" pos:end="317:17">flags</name></name> <operator pos:start="317:19" pos:end="317:19">&amp;</operator> <name pos:start="317:21" pos:end="317:30">OPT_STRING</name></expr>)</condition> <block pos:start="317:33" pos:end="324:5">{<block_content pos:start="318:9" pos:end="323:28">
        <decl_stmt pos:start="318:9" pos:end="318:18"><decl pos:start="318:9" pos:end="318:17"><type pos:start="318:9" pos:end="318:14"><name pos:start="318:9" pos:end="318:12">char</name> <modifier pos:start="318:14" pos:end="318:14">*</modifier></type><name pos:start="318:15" pos:end="318:17">str</name></decl>;</decl_stmt>
        <expr_stmt pos:start="319:9" pos:end="319:29"><expr pos:start="319:9" pos:end="319:28"><name pos:start="319:9" pos:end="319:11">str</name> <operator pos:start="319:13" pos:end="319:13">=</operator> <call pos:start="319:15" pos:end="319:28"><name pos:start="319:15" pos:end="319:23">av_strdup</name><argument_list pos:start="319:24" pos:end="319:28">(<argument pos:start="319:25" pos:end="319:27"><expr pos:start="319:25" pos:end="319:27"><name pos:start="319:25" pos:end="319:27">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="320:9" pos:end="320:22"><expr pos:start="320:9" pos:end="320:21"><call pos:start="320:9" pos:end="320:21"><name pos:start="320:9" pos:end="320:16">av_freep</name><argument_list pos:start="320:17" pos:end="320:21">(<argument pos:start="320:18" pos:end="320:20"><expr pos:start="320:18" pos:end="320:20"><name pos:start="320:18" pos:end="320:20">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="321:9" pos:end="322:35"><if pos:start="321:9" pos:end="322:35">if <condition pos:start="321:12" pos:end="321:17">(<expr pos:start="321:13" pos:end="321:16"><operator pos:start="321:13" pos:end="321:13">!</operator><name pos:start="321:14" pos:end="321:16">str</name></expr>)</condition><block type="pseudo" pos:start="322:13" pos:end="322:35"><block_content pos:start="322:13" pos:end="322:35">
            <return pos:start="322:13" pos:end="322:35">return <expr pos:start="322:20" pos:end="322:34"><call pos:start="322:20" pos:end="322:34"><name pos:start="322:20" pos:end="322:26">AVERROR</name><argument_list pos:start="322:27" pos:end="322:34">(<argument pos:start="322:28" pos:end="322:33"><expr pos:start="322:28" pos:end="322:33"><name pos:start="322:28" pos:end="322:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt pos:start="323:9" pos:end="323:28"><expr pos:start="323:9" pos:end="323:27"><operator pos:start="323:9" pos:end="323:9">*</operator><operator pos:start="323:10" pos:end="323:10">(</operator><name pos:start="323:11" pos:end="323:14">char</name> <operator pos:start="323:16" pos:end="323:16">*</operator><operator pos:start="323:17" pos:end="323:17">*</operator><operator pos:start="323:18" pos:end="323:18">)</operator><name pos:start="323:19" pos:end="323:21">dst</name> <operator pos:start="323:23" pos:end="323:23">=</operator> <name pos:start="323:25" pos:end="323:27">str</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="324:7" pos:end="326:5">else if <condition pos:start="324:15" pos:end="324:59">(<expr pos:start="324:16" pos:end="324:58"><name pos:start="324:16" pos:end="324:24"><name pos:start="324:16" pos:end="324:17">po</name><operator pos:start="324:18" pos:end="324:19">-&gt;</operator><name pos:start="324:20" pos:end="324:24">flags</name></name> <operator pos:start="324:26" pos:end="324:26">&amp;</operator> <name pos:start="324:28" pos:end="324:35">OPT_BOOL</name> <operator pos:start="324:37" pos:end="324:38">||</operator> <name pos:start="324:40" pos:end="324:48"><name pos:start="324:40" pos:end="324:41">po</name><operator pos:start="324:42" pos:end="324:43">-&gt;</operator><name pos:start="324:44" pos:end="324:48">flags</name></name> <operator pos:start="324:50" pos:end="324:50">&amp;</operator> <name pos:start="324:52" pos:end="324:58">OPT_INT</name></expr>)</condition> <block pos:start="324:61" pos:end="326:5">{<block_content pos:start="325:9" pos:end="325:81">
        <expr_stmt pos:start="325:9" pos:end="325:81"><expr pos:start="325:9" pos:end="325:80"><operator pos:start="325:9" pos:end="325:9">*</operator><operator pos:start="325:10" pos:end="325:10">(</operator><name pos:start="325:11" pos:end="325:13">int</name> <operator pos:start="325:15" pos:end="325:15">*</operator><operator pos:start="325:16" pos:end="325:16">)</operator><name pos:start="325:17" pos:end="325:19">dst</name> <operator pos:start="325:21" pos:end="325:21">=</operator> <call pos:start="325:23" pos:end="325:80"><name pos:start="325:23" pos:end="325:41">parse_number_or_die</name><argument_list pos:start="325:42" pos:end="325:80">(<argument pos:start="325:43" pos:end="325:45"><expr pos:start="325:43" pos:end="325:45"><name pos:start="325:43" pos:end="325:45">opt</name></expr></argument>, <argument pos:start="325:48" pos:end="325:50"><expr pos:start="325:48" pos:end="325:50"><name pos:start="325:48" pos:end="325:50">arg</name></expr></argument>, <argument pos:start="325:53" pos:end="325:61"><expr pos:start="325:53" pos:end="325:61"><name pos:start="325:53" pos:end="325:61">OPT_INT64</name></expr></argument>, <argument pos:start="325:64" pos:end="325:70"><expr pos:start="325:64" pos:end="325:70"><name pos:start="325:64" pos:end="325:70">INT_MIN</name></expr></argument>, <argument pos:start="325:73" pos:end="325:79"><expr pos:start="325:73" pos:end="325:79"><name pos:start="325:73" pos:end="325:79">INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="326:7" pos:end="328:5">else if <condition pos:start="326:15" pos:end="326:37">(<expr pos:start="326:16" pos:end="326:36"><name pos:start="326:16" pos:end="326:24"><name pos:start="326:16" pos:end="326:17">po</name><operator pos:start="326:18" pos:end="326:19">-&gt;</operator><name pos:start="326:20" pos:end="326:24">flags</name></name> <operator pos:start="326:26" pos:end="326:26">&amp;</operator> <name pos:start="326:28" pos:end="326:36">OPT_INT64</name></expr>)</condition> <block pos:start="326:39" pos:end="328:5">{<block_content pos:start="327:9" pos:end="327:89">
        <expr_stmt pos:start="327:9" pos:end="327:89"><expr pos:start="327:9" pos:end="327:88"><operator pos:start="327:9" pos:end="327:9">*</operator><operator pos:start="327:10" pos:end="327:10">(</operator><name pos:start="327:11" pos:end="327:17">int64_t</name> <operator pos:start="327:19" pos:end="327:19">*</operator><operator pos:start="327:20" pos:end="327:20">)</operator><name pos:start="327:21" pos:end="327:23">dst</name> <operator pos:start="327:25" pos:end="327:25">=</operator> <call pos:start="327:27" pos:end="327:88"><name pos:start="327:27" pos:end="327:45">parse_number_or_die</name><argument_list pos:start="327:46" pos:end="327:88">(<argument pos:start="327:47" pos:end="327:49"><expr pos:start="327:47" pos:end="327:49"><name pos:start="327:47" pos:end="327:49">opt</name></expr></argument>, <argument pos:start="327:52" pos:end="327:54"><expr pos:start="327:52" pos:end="327:54"><name pos:start="327:52" pos:end="327:54">arg</name></expr></argument>, <argument pos:start="327:57" pos:end="327:65"><expr pos:start="327:57" pos:end="327:65"><name pos:start="327:57" pos:end="327:65">OPT_INT64</name></expr></argument>, <argument pos:start="327:68" pos:end="327:76"><expr pos:start="327:68" pos:end="327:76"><name pos:start="327:68" pos:end="327:76">INT64_MIN</name></expr></argument>, <argument pos:start="327:79" pos:end="327:87"><expr pos:start="327:79" pos:end="327:87"><name pos:start="327:79" pos:end="327:87">INT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="328:7" pos:end="330:5">else if <condition pos:start="328:15" pos:end="328:36">(<expr pos:start="328:16" pos:end="328:35"><name pos:start="328:16" pos:end="328:24"><name pos:start="328:16" pos:end="328:17">po</name><operator pos:start="328:18" pos:end="328:19">-&gt;</operator><name pos:start="328:20" pos:end="328:24">flags</name></name> <operator pos:start="328:26" pos:end="328:26">&amp;</operator> <name pos:start="328:28" pos:end="328:35">OPT_TIME</name></expr>)</condition> <block pos:start="328:38" pos:end="330:5">{<block_content pos:start="329:9" pos:end="329:57">
        <expr_stmt pos:start="329:9" pos:end="329:57"><expr pos:start="329:9" pos:end="329:56"><operator pos:start="329:9" pos:end="329:9">*</operator><operator pos:start="329:10" pos:end="329:10">(</operator><name pos:start="329:11" pos:end="329:17">int64_t</name> <operator pos:start="329:19" pos:end="329:19">*</operator><operator pos:start="329:20" pos:end="329:20">)</operator><name pos:start="329:21" pos:end="329:23">dst</name> <operator pos:start="329:25" pos:end="329:25">=</operator> <call pos:start="329:27" pos:end="329:56"><name pos:start="329:27" pos:end="329:43">parse_time_or_die</name><argument_list pos:start="329:44" pos:end="329:56">(<argument pos:start="329:45" pos:end="329:47"><expr pos:start="329:45" pos:end="329:47"><name pos:start="329:45" pos:end="329:47">opt</name></expr></argument>, <argument pos:start="329:50" pos:end="329:52"><expr pos:start="329:50" pos:end="329:52"><name pos:start="329:50" pos:end="329:52">arg</name></expr></argument>, <argument pos:start="329:55" pos:end="329:55"><expr pos:start="329:55" pos:end="329:55"><literal type="number" pos:start="329:55" pos:end="329:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="330:7" pos:end="332:5">else if <condition pos:start="330:15" pos:end="330:37">(<expr pos:start="330:16" pos:end="330:36"><name pos:start="330:16" pos:end="330:24"><name pos:start="330:16" pos:end="330:17">po</name><operator pos:start="330:18" pos:end="330:19">-&gt;</operator><name pos:start="330:20" pos:end="330:24">flags</name></name> <operator pos:start="330:26" pos:end="330:26">&amp;</operator> <name pos:start="330:28" pos:end="330:36">OPT_FLOAT</name></expr>)</condition> <block pos:start="330:39" pos:end="332:5">{<block_content pos:start="331:9" pos:end="331:86">
        <expr_stmt pos:start="331:9" pos:end="331:86"><expr pos:start="331:9" pos:end="331:85"><operator pos:start="331:9" pos:end="331:9">*</operator><operator pos:start="331:10" pos:end="331:10">(</operator><name pos:start="331:11" pos:end="331:15">float</name> <operator pos:start="331:17" pos:end="331:17">*</operator><operator pos:start="331:18" pos:end="331:18">)</operator><name pos:start="331:19" pos:end="331:21">dst</name> <operator pos:start="331:23" pos:end="331:23">=</operator> <call pos:start="331:25" pos:end="331:85"><name pos:start="331:25" pos:end="331:43">parse_number_or_die</name><argument_list pos:start="331:44" pos:end="331:85">(<argument pos:start="331:45" pos:end="331:47"><expr pos:start="331:45" pos:end="331:47"><name pos:start="331:45" pos:end="331:47">opt</name></expr></argument>, <argument pos:start="331:50" pos:end="331:52"><expr pos:start="331:50" pos:end="331:52"><name pos:start="331:50" pos:end="331:52">arg</name></expr></argument>, <argument pos:start="331:55" pos:end="331:63"><expr pos:start="331:55" pos:end="331:63"><name pos:start="331:55" pos:end="331:63">OPT_FLOAT</name></expr></argument>, <argument pos:start="331:66" pos:end="331:74"><expr pos:start="331:66" pos:end="331:74"><operator pos:start="331:66" pos:end="331:66">-</operator><name pos:start="331:67" pos:end="331:74">INFINITY</name></expr></argument>, <argument pos:start="331:77" pos:end="331:84"><expr pos:start="331:77" pos:end="331:84"><name pos:start="331:77" pos:end="331:84">INFINITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="332:7" pos:end="334:5">else if <condition pos:start="332:15" pos:end="332:38">(<expr pos:start="332:16" pos:end="332:37"><name pos:start="332:16" pos:end="332:24"><name pos:start="332:16" pos:end="332:17">po</name><operator pos:start="332:18" pos:end="332:19">-&gt;</operator><name pos:start="332:20" pos:end="332:24">flags</name></name> <operator pos:start="332:26" pos:end="332:26">&amp;</operator> <name pos:start="332:28" pos:end="332:37">OPT_DOUBLE</name></expr>)</condition> <block pos:start="332:40" pos:end="334:5">{<block_content pos:start="333:9" pos:end="333:88">
        <expr_stmt pos:start="333:9" pos:end="333:88"><expr pos:start="333:9" pos:end="333:87"><operator pos:start="333:9" pos:end="333:9">*</operator><operator pos:start="333:10" pos:end="333:10">(</operator><name pos:start="333:11" pos:end="333:16">double</name> <operator pos:start="333:18" pos:end="333:18">*</operator><operator pos:start="333:19" pos:end="333:19">)</operator><name pos:start="333:20" pos:end="333:22">dst</name> <operator pos:start="333:24" pos:end="333:24">=</operator> <call pos:start="333:26" pos:end="333:87"><name pos:start="333:26" pos:end="333:44">parse_number_or_die</name><argument_list pos:start="333:45" pos:end="333:87">(<argument pos:start="333:46" pos:end="333:48"><expr pos:start="333:46" pos:end="333:48"><name pos:start="333:46" pos:end="333:48">opt</name></expr></argument>, <argument pos:start="333:51" pos:end="333:53"><expr pos:start="333:51" pos:end="333:53"><name pos:start="333:51" pos:end="333:53">arg</name></expr></argument>, <argument pos:start="333:56" pos:end="333:65"><expr pos:start="333:56" pos:end="333:65"><name pos:start="333:56" pos:end="333:65">OPT_DOUBLE</name></expr></argument>, <argument pos:start="333:68" pos:end="333:76"><expr pos:start="333:68" pos:end="333:76"><operator pos:start="333:68" pos:end="333:68">-</operator><name pos:start="333:69" pos:end="333:76">INFINITY</name></expr></argument>, <argument pos:start="333:79" pos:end="333:86"><expr pos:start="333:79" pos:end="333:86"><name pos:start="333:79" pos:end="333:86">INFINITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="334:7" pos:end="342:5">else if <condition pos:start="334:15" pos:end="334:30">(<expr pos:start="334:16" pos:end="334:29"><name pos:start="334:16" pos:end="334:29"><name pos:start="334:16" pos:end="334:17">po</name><operator pos:start="334:18" pos:end="334:19">-&gt;</operator><name pos:start="334:20" pos:end="334:20">u</name><operator pos:start="334:21" pos:end="334:21">.</operator><name pos:start="334:22" pos:end="334:29">func_arg</name></name></expr>)</condition> <block pos:start="334:32" pos:end="342:5">{<block_content pos:start="335:9" pos:end="341:9">
        <decl_stmt pos:start="335:9" pos:end="335:51"><decl pos:start="335:9" pos:end="335:50"><type pos:start="335:9" pos:end="335:11"><name pos:start="335:9" pos:end="335:11">int</name></type> <name pos:start="335:13" pos:end="335:15">ret</name> <init pos:start="335:17" pos:end="335:50">= <expr pos:start="335:19" pos:end="335:50"><call pos:start="335:19" pos:end="335:50"><name pos:start="335:19" pos:end="335:32"><name pos:start="335:19" pos:end="335:20">po</name><operator pos:start="335:21" pos:end="335:22">-&gt;</operator><name pos:start="335:23" pos:end="335:23">u</name><operator pos:start="335:24" pos:end="335:24">.</operator><name pos:start="335:25" pos:end="335:32">func_arg</name></name><argument_list pos:start="335:33" pos:end="335:50">(<argument pos:start="335:34" pos:end="335:39"><expr pos:start="335:34" pos:end="335:39"><name pos:start="335:34" pos:end="335:39">optctx</name></expr></argument>, <argument pos:start="335:42" pos:end="335:44"><expr pos:start="335:42" pos:end="335:44"><name pos:start="335:42" pos:end="335:44">opt</name></expr></argument>, <argument pos:start="335:47" pos:end="335:49"><expr pos:start="335:47" pos:end="335:49"><name pos:start="335:47" pos:end="335:49">arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="336:9" pos:end="341:9"><if pos:start="336:9" pos:end="341:9">if <condition pos:start="336:12" pos:end="336:20">(<expr pos:start="336:13" pos:end="336:19"><name pos:start="336:13" pos:end="336:15">ret</name> <operator pos:start="336:17" pos:end="336:17">&lt;</operator> <literal type="number" pos:start="336:19" pos:end="336:19">0</literal></expr>)</condition> <block pos:start="336:22" pos:end="341:9">{<block_content pos:start="337:13" pos:end="340:23">
            <expr_stmt pos:start="337:13" pos:end="339:46"><expr pos:start="337:13" pos:end="339:45"><call pos:start="337:13" pos:end="339:45"><name pos:start="337:13" pos:end="337:18">av_log</name><argument_list pos:start="337:19" pos:end="339:45">(<argument pos:start="337:20" pos:end="337:23"><expr pos:start="337:20" pos:end="337:23"><name pos:start="337:20" pos:end="337:23">NULL</name></expr></argument>, <argument pos:start="337:26" pos:end="337:37"><expr pos:start="337:26" pos:end="337:37"><name pos:start="337:26" pos:end="337:37">AV_LOG_ERROR</name></expr></argument>,
                   <argument pos:start="338:20" pos:end="338:67"><expr pos:start="338:20" pos:end="338:67"><literal type="string" pos:start="338:20" pos:end="338:67">"Failed to set value '%s' for option '%s': %s\n"</literal></expr></argument>,
                   <argument pos:start="339:20" pos:end="339:22"><expr pos:start="339:20" pos:end="339:22"><name pos:start="339:20" pos:end="339:22">arg</name></expr></argument>, <argument pos:start="339:25" pos:end="339:27"><expr pos:start="339:25" pos:end="339:27"><name pos:start="339:25" pos:end="339:27">opt</name></expr></argument>, <argument pos:start="339:30" pos:end="339:44"><expr pos:start="339:30" pos:end="339:44"><call pos:start="339:30" pos:end="339:44"><name pos:start="339:30" pos:end="339:39">av_err2str</name><argument_list pos:start="339:40" pos:end="339:44">(<argument pos:start="339:41" pos:end="339:43"><expr pos:start="339:41" pos:end="339:43"><name pos:start="339:41" pos:end="339:43">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="340:13" pos:end="340:23">return <expr pos:start="340:20" pos:end="340:22"><name pos:start="340:20" pos:end="340:22">ret</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="343:5" pos:end="344:24"><if pos:start="343:5" pos:end="344:24">if <condition pos:start="343:8" pos:end="343:29">(<expr pos:start="343:9" pos:end="343:28"><name pos:start="343:9" pos:end="343:17"><name pos:start="343:9" pos:end="343:10">po</name><operator pos:start="343:11" pos:end="343:12">-&gt;</operator><name pos:start="343:13" pos:end="343:17">flags</name></name> <operator pos:start="343:19" pos:end="343:19">&amp;</operator> <name pos:start="343:21" pos:end="343:28">OPT_EXIT</name></expr>)</condition><block type="pseudo" pos:start="344:9" pos:end="344:24"><block_content pos:start="344:9" pos:end="344:24">
        <expr_stmt pos:start="344:9" pos:end="344:24"><expr pos:start="344:9" pos:end="344:23"><call pos:start="344:9" pos:end="344:23"><name pos:start="344:9" pos:end="344:20">exit_program</name><argument_list pos:start="344:21" pos:end="344:23">(<argument pos:start="344:22" pos:end="344:22"><expr pos:start="344:22" pos:end="344:22"><literal type="number" pos:start="344:22" pos:end="344:22">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="346:5" pos:end="346:13">return <expr pos:start="346:12" pos:end="346:12"><literal type="number" pos:start="346:12" pos:end="346:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="349:1" pos:end="380:1"><type pos:start="349:1" pos:end="349:3"><name pos:start="349:1" pos:end="349:3">int</name></type> <name pos:start="349:5" pos:end="349:16">parse_option</name><parameter_list pos:start="349:17" pos:end="350:42">(<parameter pos:start="349:18" pos:end="349:29"><decl pos:start="349:18" pos:end="349:29"><type pos:start="349:18" pos:end="349:29"><name pos:start="349:18" pos:end="349:21">void</name> <modifier pos:start="349:23" pos:end="349:23">*</modifier></type><name pos:start="349:24" pos:end="349:29">optctx</name></decl></parameter>, <parameter pos:start="349:32" pos:end="349:46"><decl pos:start="349:32" pos:end="349:46"><type pos:start="349:32" pos:end="349:46"><specifier pos:start="349:32" pos:end="349:36">const</specifier> <name pos:start="349:38" pos:end="349:41">char</name> <modifier pos:start="349:43" pos:end="349:43">*</modifier></type><name pos:start="349:44" pos:end="349:46">opt</name></decl></parameter>, <parameter pos:start="349:49" pos:end="349:63"><decl pos:start="349:49" pos:end="349:63"><type pos:start="349:49" pos:end="349:63"><specifier pos:start="349:49" pos:end="349:53">const</specifier> <name pos:start="349:55" pos:end="349:58">char</name> <modifier pos:start="349:60" pos:end="349:60">*</modifier></type><name pos:start="349:61" pos:end="349:63">arg</name></decl></parameter>,
                 <parameter pos:start="350:18" pos:end="350:41"><decl pos:start="350:18" pos:end="350:41"><type pos:start="350:18" pos:end="350:41"><specifier pos:start="350:18" pos:end="350:22">const</specifier> <name pos:start="350:24" pos:end="350:32">OptionDef</name> <modifier pos:start="350:34" pos:end="350:34">*</modifier></type><name pos:start="350:35" pos:end="350:41">options</name></decl></parameter>)</parameter_list>
<block pos:start="351:1" pos:end="380:1">{<block_content pos:start="352:5" pos:end="379:35">
    <decl_stmt pos:start="352:5" pos:end="352:24"><decl pos:start="352:5" pos:end="352:23"><type pos:start="352:5" pos:end="352:21"><specifier pos:start="352:5" pos:end="352:9">const</specifier> <name pos:start="352:11" pos:end="352:19">OptionDef</name> <modifier pos:start="352:21" pos:end="352:21">*</modifier></type><name pos:start="352:22" pos:end="352:23">po</name></decl>;</decl_stmt>
    <decl_stmt pos:start="353:5" pos:end="353:12"><decl pos:start="353:5" pos:end="353:11"><type pos:start="353:5" pos:end="353:7"><name pos:start="353:5" pos:end="353:7">int</name></type> <name pos:start="353:9" pos:end="353:11">ret</name></decl>;</decl_stmt>

    <expr_stmt pos:start="355:5" pos:end="355:35"><expr pos:start="355:5" pos:end="355:34"><name pos:start="355:5" pos:end="355:6">po</name> <operator pos:start="355:8" pos:end="355:8">=</operator> <call pos:start="355:10" pos:end="355:34"><name pos:start="355:10" pos:end="355:20">find_option</name><argument_list pos:start="355:21" pos:end="355:34">(<argument pos:start="355:22" pos:end="355:28"><expr pos:start="355:22" pos:end="355:28"><name pos:start="355:22" pos:end="355:28">options</name></expr></argument>, <argument pos:start="355:31" pos:end="355:33"><expr pos:start="355:31" pos:end="355:33"><name pos:start="355:31" pos:end="355:33">opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="356:5" pos:end="362:18"><if pos:start="356:5" pos:end="361:5">if <condition pos:start="356:8" pos:end="356:52">(<expr pos:start="356:9" pos:end="356:51"><operator pos:start="356:9" pos:end="356:9">!</operator><name pos:start="356:10" pos:end="356:17"><name pos:start="356:10" pos:end="356:11">po</name><operator pos:start="356:12" pos:end="356:13">-&gt;</operator><name pos:start="356:14" pos:end="356:17">name</name></name> <operator pos:start="356:19" pos:end="356:20">&amp;&amp;</operator> <name pos:start="356:22" pos:end="356:27"><name pos:start="356:22" pos:end="356:24">opt</name><index pos:start="356:25" pos:end="356:27">[<expr pos:start="356:26" pos:end="356:26"><literal type="number" pos:start="356:26" pos:end="356:26">0</literal></expr>]</index></name> <operator pos:start="356:29" pos:end="356:30">==</operator> <literal type="char" pos:start="356:32" pos:end="356:34">'n'</literal> <operator pos:start="356:36" pos:end="356:37">&amp;&amp;</operator> <name pos:start="356:39" pos:end="356:44"><name pos:start="356:39" pos:end="356:41">opt</name><index pos:start="356:42" pos:end="356:44">[<expr pos:start="356:43" pos:end="356:43"><literal type="number" pos:start="356:43" pos:end="356:43">1</literal></expr>]</index></name> <operator pos:start="356:46" pos:end="356:47">==</operator> <literal type="char" pos:start="356:49" pos:end="356:51">'o'</literal></expr>)</condition> <block pos:start="356:54" pos:end="361:5">{<block_content pos:start="358:9" pos:end="360:22">
        <comment type="block" pos:start="357:9" pos:end="357:37">/* handle 'no' bool option */</comment>
        <expr_stmt pos:start="358:9" pos:end="358:43"><expr pos:start="358:9" pos:end="358:42"><name pos:start="358:9" pos:end="358:10">po</name> <operator pos:start="358:12" pos:end="358:12">=</operator> <call pos:start="358:14" pos:end="358:42"><name pos:start="358:14" pos:end="358:24">find_option</name><argument_list pos:start="358:25" pos:end="358:42">(<argument pos:start="358:26" pos:end="358:32"><expr pos:start="358:26" pos:end="358:32"><name pos:start="358:26" pos:end="358:32">options</name></expr></argument>, <argument pos:start="358:35" pos:end="358:41"><expr pos:start="358:35" pos:end="358:41"><name pos:start="358:35" pos:end="358:37">opt</name> <operator pos:start="358:39" pos:end="358:39">+</operator> <literal type="number" pos:start="358:41" pos:end="358:41">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="359:9" pos:end="360:22"><if pos:start="359:9" pos:end="360:22">if <condition pos:start="359:12" pos:end="359:49">(<expr pos:start="359:13" pos:end="359:48"><operator pos:start="359:13" pos:end="359:13">(</operator><name pos:start="359:14" pos:end="359:21"><name pos:start="359:14" pos:end="359:15">po</name><operator pos:start="359:16" pos:end="359:17">-&gt;</operator><name pos:start="359:18" pos:end="359:21">name</name></name> <operator pos:start="359:23" pos:end="359:24">&amp;&amp;</operator> <operator pos:start="359:26" pos:end="359:26">(</operator><name pos:start="359:27" pos:end="359:35"><name pos:start="359:27" pos:end="359:28">po</name><operator pos:start="359:29" pos:end="359:30">-&gt;</operator><name pos:start="359:31" pos:end="359:35">flags</name></name> <operator pos:start="359:37" pos:end="359:37">&amp;</operator> <name pos:start="359:39" pos:end="359:46">OPT_BOOL</name><operator pos:start="359:47" pos:end="359:47">)</operator><operator pos:start="359:48" pos:end="359:48">)</operator></expr>)</condition><block type="pseudo" pos:start="360:13" pos:end="360:22"><block_content pos:start="360:13" pos:end="360:22">
            <expr_stmt pos:start="360:13" pos:end="360:22"><expr pos:start="360:13" pos:end="360:21"><name pos:start="360:13" pos:end="360:15">arg</name> <operator pos:start="360:17" pos:end="360:17">=</operator> <literal type="string" pos:start="360:19" pos:end="360:21">"0"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="361:7" pos:end="362:18">else if <condition pos:start="361:15" pos:end="361:36">(<expr pos:start="361:16" pos:end="361:35"><name pos:start="361:16" pos:end="361:24"><name pos:start="361:16" pos:end="361:17">po</name><operator pos:start="361:18" pos:end="361:19">-&gt;</operator><name pos:start="361:20" pos:end="361:24">flags</name></name> <operator pos:start="361:26" pos:end="361:26">&amp;</operator> <name pos:start="361:28" pos:end="361:35">OPT_BOOL</name></expr>)</condition><block type="pseudo" pos:start="362:9" pos:end="362:18"><block_content pos:start="362:9" pos:end="362:18">
        <expr_stmt pos:start="362:9" pos:end="362:18"><expr pos:start="362:9" pos:end="362:17"><name pos:start="362:9" pos:end="362:11">arg</name> <operator pos:start="362:13" pos:end="362:13">=</operator> <literal type="string" pos:start="362:15" pos:end="362:17">"1"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="364:5" pos:end="365:45"><if pos:start="364:5" pos:end="365:45">if <condition pos:start="364:8" pos:end="364:18">(<expr pos:start="364:9" pos:end="364:17"><operator pos:start="364:9" pos:end="364:9">!</operator><name pos:start="364:10" pos:end="364:17"><name pos:start="364:10" pos:end="364:11">po</name><operator pos:start="364:12" pos:end="364:13">-&gt;</operator><name pos:start="364:14" pos:end="364:17">name</name></name></expr>)</condition><block type="pseudo" pos:start="365:9" pos:end="365:45"><block_content pos:start="365:9" pos:end="365:45">
        <expr_stmt pos:start="365:9" pos:end="365:45"><expr pos:start="365:9" pos:end="365:44"><name pos:start="365:9" pos:end="365:10">po</name> <operator pos:start="365:12" pos:end="365:12">=</operator> <call pos:start="365:14" pos:end="365:44"><name pos:start="365:14" pos:end="365:24">find_option</name><argument_list pos:start="365:25" pos:end="365:44">(<argument pos:start="365:26" pos:end="365:32"><expr pos:start="365:26" pos:end="365:32"><name pos:start="365:26" pos:end="365:32">options</name></expr></argument>, <argument pos:start="365:35" pos:end="365:43"><expr pos:start="365:35" pos:end="365:43"><literal type="string" pos:start="365:35" pos:end="365:43">"default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="366:5" pos:end="369:5"><if pos:start="366:5" pos:end="369:5">if <condition pos:start="366:8" pos:end="366:18">(<expr pos:start="366:9" pos:end="366:17"><operator pos:start="366:9" pos:end="366:9">!</operator><name pos:start="366:10" pos:end="366:17"><name pos:start="366:10" pos:end="366:11">po</name><operator pos:start="366:12" pos:end="366:13">-&gt;</operator><name pos:start="366:14" pos:end="366:17">name</name></name></expr>)</condition> <block pos:start="366:20" pos:end="369:5">{<block_content pos:start="367:9" pos:end="368:31">
        <expr_stmt pos:start="367:9" pos:end="367:70"><expr pos:start="367:9" pos:end="367:69"><call pos:start="367:9" pos:end="367:69"><name pos:start="367:9" pos:end="367:14">av_log</name><argument_list pos:start="367:15" pos:end="367:69">(<argument pos:start="367:16" pos:end="367:19"><expr pos:start="367:16" pos:end="367:19"><name pos:start="367:16" pos:end="367:19">NULL</name></expr></argument>, <argument pos:start="367:22" pos:end="367:33"><expr pos:start="367:22" pos:end="367:33"><name pos:start="367:22" pos:end="367:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="367:36" pos:end="367:63"><expr pos:start="367:36" pos:end="367:63"><literal type="string" pos:start="367:36" pos:end="367:63">"Unrecognized option '%s'\n"</literal></expr></argument>, <argument pos:start="367:66" pos:end="367:68"><expr pos:start="367:66" pos:end="367:68"><name pos:start="367:66" pos:end="367:68">opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="368:9" pos:end="368:31">return <expr pos:start="368:16" pos:end="368:30"><call pos:start="368:16" pos:end="368:30"><name pos:start="368:16" pos:end="368:22">AVERROR</name><argument_list pos:start="368:23" pos:end="368:30">(<argument pos:start="368:24" pos:end="368:29"><expr pos:start="368:24" pos:end="368:29"><name pos:start="368:24" pos:end="368:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="370:5" pos:end="373:5"><if pos:start="370:5" pos:end="373:5">if <condition pos:start="370:8" pos:end="370:36">(<expr pos:start="370:9" pos:end="370:35"><name pos:start="370:9" pos:end="370:17"><name pos:start="370:9" pos:end="370:10">po</name><operator pos:start="370:11" pos:end="370:12">-&gt;</operator><name pos:start="370:13" pos:end="370:17">flags</name></name> <operator pos:start="370:19" pos:end="370:19">&amp;</operator> <name pos:start="370:21" pos:end="370:27">HAS_ARG</name> <operator pos:start="370:29" pos:end="370:30">&amp;&amp;</operator> <operator pos:start="370:32" pos:end="370:32">!</operator><name pos:start="370:33" pos:end="370:35">arg</name></expr>)</condition> <block pos:start="370:38" pos:end="373:5">{<block_content pos:start="371:9" pos:end="372:31">
        <expr_stmt pos:start="371:9" pos:end="371:78"><expr pos:start="371:9" pos:end="371:77"><call pos:start="371:9" pos:end="371:77"><name pos:start="371:9" pos:end="371:14">av_log</name><argument_list pos:start="371:15" pos:end="371:77">(<argument pos:start="371:16" pos:end="371:19"><expr pos:start="371:16" pos:end="371:19"><name pos:start="371:16" pos:end="371:19">NULL</name></expr></argument>, <argument pos:start="371:22" pos:end="371:33"><expr pos:start="371:22" pos:end="371:33"><name pos:start="371:22" pos:end="371:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="371:36" pos:end="371:71"><expr pos:start="371:36" pos:end="371:71"><literal type="string" pos:start="371:36" pos:end="371:71">"Missing argument for option '%s'\n"</literal></expr></argument>, <argument pos:start="371:74" pos:end="371:76"><expr pos:start="371:74" pos:end="371:76"><name pos:start="371:74" pos:end="371:76">opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="372:9" pos:end="372:31">return <expr pos:start="372:16" pos:end="372:30"><call pos:start="372:16" pos:end="372:30"><name pos:start="372:16" pos:end="372:22">AVERROR</name><argument_list pos:start="372:23" pos:end="372:30">(<argument pos:start="372:24" pos:end="372:29"><expr pos:start="372:24" pos:end="372:29"><name pos:start="372:24" pos:end="372:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="375:5" pos:end="375:45"><expr pos:start="375:5" pos:end="375:44"><name pos:start="375:5" pos:end="375:7">ret</name> <operator pos:start="375:9" pos:end="375:9">=</operator> <call pos:start="375:11" pos:end="375:44"><name pos:start="375:11" pos:end="375:22">write_option</name><argument_list pos:start="375:23" pos:end="375:44">(<argument pos:start="375:24" pos:end="375:29"><expr pos:start="375:24" pos:end="375:29"><name pos:start="375:24" pos:end="375:29">optctx</name></expr></argument>, <argument pos:start="375:32" pos:end="375:33"><expr pos:start="375:32" pos:end="375:33"><name pos:start="375:32" pos:end="375:33">po</name></expr></argument>, <argument pos:start="375:36" pos:end="375:38"><expr pos:start="375:36" pos:end="375:38"><name pos:start="375:36" pos:end="375:38">opt</name></expr></argument>, <argument pos:start="375:41" pos:end="375:43"><expr pos:start="375:41" pos:end="375:43"><name pos:start="375:41" pos:end="375:43">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="376:5" pos:end="377:19"><if pos:start="376:5" pos:end="377:19">if <condition pos:start="376:8" pos:end="376:16">(<expr pos:start="376:9" pos:end="376:15"><name pos:start="376:9" pos:end="376:11">ret</name> <operator pos:start="376:13" pos:end="376:13">&lt;</operator> <literal type="number" pos:start="376:15" pos:end="376:15">0</literal></expr>)</condition><block type="pseudo" pos:start="377:9" pos:end="377:19"><block_content pos:start="377:9" pos:end="377:19">
        <return pos:start="377:9" pos:end="377:19">return <expr pos:start="377:16" pos:end="377:18"><name pos:start="377:16" pos:end="377:18">ret</name></expr>;</return></block_content></block></if></if_stmt>

    <return pos:start="379:5" pos:end="379:35">return <expr pos:start="379:12" pos:end="379:34"><operator pos:start="379:12" pos:end="379:12">!</operator><operator pos:start="379:13" pos:end="379:13">!</operator><operator pos:start="379:14" pos:end="379:14">(</operator><name pos:start="379:15" pos:end="379:23"><name pos:start="379:15" pos:end="379:16">po</name><operator pos:start="379:17" pos:end="379:18">-&gt;</operator><name pos:start="379:19" pos:end="379:23">flags</name></name> <operator pos:start="379:25" pos:end="379:25">&amp;</operator> <name pos:start="379:27" pos:end="379:33">HAS_ARG</name><operator pos:start="379:34" pos:end="379:34">)</operator></expr>;</return>
</block_content>}</block></function>

<function pos:start="382:1" pos:end="411:1"><type pos:start="382:1" pos:end="382:4"><name pos:start="382:1" pos:end="382:4">void</name></type> <name pos:start="382:6" pos:end="382:18">parse_options</name><parameter_list pos:start="382:19" pos:end="383:67">(<parameter pos:start="382:20" pos:end="382:31"><decl pos:start="382:20" pos:end="382:31"><type pos:start="382:20" pos:end="382:31"><name pos:start="382:20" pos:end="382:23">void</name> <modifier pos:start="382:25" pos:end="382:25">*</modifier></type><name pos:start="382:26" pos:end="382:31">optctx</name></decl></parameter>, <parameter pos:start="382:34" pos:end="382:41"><decl pos:start="382:34" pos:end="382:41"><type pos:start="382:34" pos:end="382:41"><name pos:start="382:34" pos:end="382:36">int</name></type> <name pos:start="382:38" pos:end="382:41">argc</name></decl></parameter>, <parameter pos:start="382:44" pos:end="382:54"><decl pos:start="382:44" pos:end="382:54"><type pos:start="382:44" pos:end="382:54"><name pos:start="382:44" pos:end="382:47">char</name> <modifier pos:start="382:49" pos:end="382:49">*</modifier><modifier pos:start="382:50" pos:end="382:50">*</modifier></type><name pos:start="382:51" pos:end="382:54">argv</name></decl></parameter>, <parameter pos:start="382:57" pos:end="382:80"><decl pos:start="382:57" pos:end="382:80"><type pos:start="382:57" pos:end="382:80"><specifier pos:start="382:57" pos:end="382:61">const</specifier> <name pos:start="382:63" pos:end="382:71">OptionDef</name> <modifier pos:start="382:73" pos:end="382:73">*</modifier></type><name pos:start="382:74" pos:end="382:80">options</name></decl></parameter>,
                   <parameter pos:start="383:20" pos:end="383:66"><function_decl pos:start="383:20" pos:end="383:66"><type pos:start="383:20" pos:end="383:23"><name pos:start="383:20" pos:end="383:23">void</name></type> (<modifier pos:start="383:26" pos:end="383:26">*</modifier><name pos:start="383:27" pos:end="383:44">parse_arg_function</name>)<parameter_list pos:start="383:46" pos:end="383:66">(<parameter pos:start="383:47" pos:end="383:52"><decl pos:start="383:47" pos:end="383:52"><type pos:start="383:47" pos:end="383:52"><name pos:start="383:47" pos:end="383:50">void</name> <modifier pos:start="383:52" pos:end="383:52">*</modifier></type></decl></parameter>, <parameter pos:start="383:55" pos:end="383:65"><decl pos:start="383:55" pos:end="383:65"><type pos:start="383:55" pos:end="383:65"><specifier pos:start="383:55" pos:end="383:59">const</specifier> <name pos:start="383:61" pos:end="383:64">char</name><modifier pos:start="383:65" pos:end="383:65">*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block pos:start="384:1" pos:end="411:1">{<block_content pos:start="385:5" pos:end="410:5">
    <decl_stmt pos:start="385:5" pos:end="385:20"><decl pos:start="385:5" pos:end="385:19"><type pos:start="385:5" pos:end="385:16"><specifier pos:start="385:5" pos:end="385:9">const</specifier> <name pos:start="385:11" pos:end="385:14">char</name> <modifier pos:start="385:16" pos:end="385:16">*</modifier></type><name pos:start="385:17" pos:end="385:19">opt</name></decl>;</decl_stmt>
    <decl_stmt pos:start="386:5" pos:end="386:41"><decl pos:start="386:5" pos:end="386:16"><type pos:start="386:5" pos:end="386:7"><name pos:start="386:5" pos:end="386:7">int</name></type> <name pos:start="386:9" pos:end="386:16">optindex</name></decl>, <decl pos:start="386:19" pos:end="386:35"><type ref="prev" pos:start="386:5" pos:end="386:7"/><name pos:start="386:19" pos:end="386:31">handleoptions</name> <init pos:start="386:33" pos:end="386:35">= <expr pos:start="386:35" pos:end="386:35"><literal type="number" pos:start="386:35" pos:end="386:35">1</literal></expr></init></decl>, <decl pos:start="386:38" pos:end="386:40"><type ref="prev" pos:start="386:5" pos:end="386:7"/><name pos:start="386:38" pos:end="386:40">ret</name></decl>;</decl_stmt>

    <comment type="block" pos:start="388:5" pos:end="388:65">/* perform system-dependent conversions for arguments list */</comment>
    <expr_stmt pos:start="389:5" pos:end="389:40"><expr pos:start="389:5" pos:end="389:39"><call pos:start="389:5" pos:end="389:39"><name pos:start="389:5" pos:end="389:25">prepare_app_arguments</name><argument_list pos:start="389:26" pos:end="389:39">(<argument pos:start="389:27" pos:end="389:31"><expr pos:start="389:27" pos:end="389:31"><operator pos:start="389:27" pos:end="389:27">&amp;</operator><name pos:start="389:28" pos:end="389:31">argc</name></expr></argument>, <argument pos:start="389:34" pos:end="389:38"><expr pos:start="389:34" pos:end="389:38"><operator pos:start="389:34" pos:end="389:34">&amp;</operator><name pos:start="389:35" pos:end="389:38">argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="391:5" pos:end="391:23">/* parse options */</comment>
    <expr_stmt pos:start="392:5" pos:end="392:17"><expr pos:start="392:5" pos:end="392:16"><name pos:start="392:5" pos:end="392:12">optindex</name> <operator pos:start="392:14" pos:end="392:14">=</operator> <literal type="number" pos:start="392:16" pos:end="392:16">1</literal></expr>;</expr_stmt>
    <while pos:start="393:5" pos:end="410:5">while <condition pos:start="393:11" pos:end="393:27">(<expr pos:start="393:12" pos:end="393:26"><name pos:start="393:12" pos:end="393:19">optindex</name> <operator pos:start="393:21" pos:end="393:21">&lt;</operator> <name pos:start="393:23" pos:end="393:26">argc</name></expr>)</condition> <block pos:start="393:29" pos:end="410:5">{<block_content pos:start="394:9" pos:end="409:9">
        <expr_stmt pos:start="394:9" pos:end="394:31"><expr pos:start="394:9" pos:end="394:30"><name pos:start="394:9" pos:end="394:11">opt</name> <operator pos:start="394:13" pos:end="394:13">=</operator> <name pos:start="394:15" pos:end="394:30"><name pos:start="394:15" pos:end="394:18">argv</name><index pos:start="394:19" pos:end="394:30">[<expr pos:start="394:20" pos:end="394:29"><name pos:start="394:20" pos:end="394:27">optindex</name><operator pos:start="394:28" pos:end="394:29">++</operator></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="396:9" pos:end="409:9"><if pos:start="396:9" pos:end="406:9">if <condition pos:start="396:12" pos:end="396:61">(<expr pos:start="396:13" pos:end="396:60"><name pos:start="396:13" pos:end="396:25">handleoptions</name> <operator pos:start="396:27" pos:end="396:28">&amp;&amp;</operator> <name pos:start="396:30" pos:end="396:35"><name pos:start="396:30" pos:end="396:32">opt</name><index pos:start="396:33" pos:end="396:35">[<expr pos:start="396:34" pos:end="396:34"><literal type="number" pos:start="396:34" pos:end="396:34">0</literal></expr>]</index></name> <operator pos:start="396:37" pos:end="396:38">==</operator> <literal type="char" pos:start="396:40" pos:end="396:42">'-'</literal> <operator pos:start="396:44" pos:end="396:45">&amp;&amp;</operator> <name pos:start="396:47" pos:end="396:52"><name pos:start="396:47" pos:end="396:49">opt</name><index pos:start="396:50" pos:end="396:52">[<expr pos:start="396:51" pos:end="396:51"><literal type="number" pos:start="396:51" pos:end="396:51">1</literal></expr>]</index></name> <operator pos:start="396:54" pos:end="396:55">!=</operator> <literal type="char" pos:start="396:57" pos:end="396:60">'\0'</literal></expr>)</condition> <block pos:start="396:63" pos:end="406:9">{<block_content pos:start="397:13" pos:end="405:28">
            <if_stmt pos:start="397:13" pos:end="400:13"><if pos:start="397:13" pos:end="400:13">if <condition pos:start="397:16" pos:end="397:48">(<expr pos:start="397:17" pos:end="397:47"><name pos:start="397:17" pos:end="397:22"><name pos:start="397:17" pos:end="397:19">opt</name><index pos:start="397:20" pos:end="397:22">[<expr pos:start="397:21" pos:end="397:21"><literal type="number" pos:start="397:21" pos:end="397:21">1</literal></expr>]</index></name> <operator pos:start="397:24" pos:end="397:25">==</operator> <literal type="char" pos:start="397:27" pos:end="397:29">'-'</literal> <operator pos:start="397:31" pos:end="397:32">&amp;&amp;</operator> <name pos:start="397:34" pos:end="397:39"><name pos:start="397:34" pos:end="397:36">opt</name><index pos:start="397:37" pos:end="397:39">[<expr pos:start="397:38" pos:end="397:38"><literal type="number" pos:start="397:38" pos:end="397:38">2</literal></expr>]</index></name> <operator pos:start="397:41" pos:end="397:42">==</operator> <literal type="char" pos:start="397:44" pos:end="397:47">'\0'</literal></expr>)</condition> <block pos:start="397:50" pos:end="400:13">{<block_content pos:start="398:17" pos:end="399:25">
                <expr_stmt pos:start="398:17" pos:end="398:34"><expr pos:start="398:17" pos:end="398:33"><name pos:start="398:17" pos:end="398:29">handleoptions</name> <operator pos:start="398:31" pos:end="398:31">=</operator> <literal type="number" pos:start="398:33" pos:end="398:33">0</literal></expr>;</expr_stmt>
                <continue pos:start="399:17" pos:end="399:25">continue;</continue>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="401:13" pos:end="401:18"><expr pos:start="401:13" pos:end="401:17"><name pos:start="401:13" pos:end="401:15">opt</name><operator pos:start="401:16" pos:end="401:17">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="403:13" pos:end="404:32"><if pos:start="403:13" pos:end="404:32">if <condition pos:start="403:16" pos:end="403:79">(<expr pos:start="403:17" pos:end="403:78"><operator pos:start="403:17" pos:end="403:17">(</operator><name pos:start="403:18" pos:end="403:20">ret</name> <operator pos:start="403:22" pos:end="403:22">=</operator> <call pos:start="403:24" pos:end="403:73"><name pos:start="403:24" pos:end="403:35">parse_option</name><argument_list pos:start="403:36" pos:end="403:73">(<argument pos:start="403:37" pos:end="403:42"><expr pos:start="403:37" pos:end="403:42"><name pos:start="403:37" pos:end="403:42">optctx</name></expr></argument>, <argument pos:start="403:45" pos:end="403:47"><expr pos:start="403:45" pos:end="403:47"><name pos:start="403:45" pos:end="403:47">opt</name></expr></argument>, <argument pos:start="403:50" pos:end="403:63"><expr pos:start="403:50" pos:end="403:63"><name pos:start="403:50" pos:end="403:63"><name pos:start="403:50" pos:end="403:53">argv</name><index pos:start="403:54" pos:end="403:63">[<expr pos:start="403:55" pos:end="403:62"><name pos:start="403:55" pos:end="403:62">optindex</name></expr>]</index></name></expr></argument>, <argument pos:start="403:66" pos:end="403:72"><expr pos:start="403:66" pos:end="403:72"><name pos:start="403:66" pos:end="403:72">options</name></expr></argument>)</argument_list></call><operator pos:start="403:74" pos:end="403:74">)</operator> <operator pos:start="403:76" pos:end="403:76">&lt;</operator> <literal type="number" pos:start="403:78" pos:end="403:78">0</literal></expr>)</condition><block type="pseudo" pos:start="404:17" pos:end="404:32"><block_content pos:start="404:17" pos:end="404:32">
                <expr_stmt pos:start="404:17" pos:end="404:32"><expr pos:start="404:17" pos:end="404:31"><call pos:start="404:17" pos:end="404:31"><name pos:start="404:17" pos:end="404:28">exit_program</name><argument_list pos:start="404:29" pos:end="404:31">(<argument pos:start="404:30" pos:end="404:30"><expr pos:start="404:30" pos:end="404:30"><literal type="number" pos:start="404:30" pos:end="404:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="405:13" pos:end="405:28"><expr pos:start="405:13" pos:end="405:27"><name pos:start="405:13" pos:end="405:20">optindex</name> <operator pos:start="405:22" pos:end="405:23">+=</operator> <name pos:start="405:25" pos:end="405:27">ret</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="406:11" pos:end="409:9">else <block pos:start="406:16" pos:end="409:9">{<block_content pos:start="407:13" pos:end="408:48">
            <if_stmt pos:start="407:13" pos:end="408:48"><if pos:start="407:13" pos:end="408:48">if <condition pos:start="407:16" pos:end="407:35">(<expr pos:start="407:17" pos:end="407:34"><name pos:start="407:17" pos:end="407:34">parse_arg_function</name></expr>)</condition><block type="pseudo" pos:start="408:17" pos:end="408:48"><block_content pos:start="408:17" pos:end="408:48">
                <expr_stmt pos:start="408:17" pos:end="408:48"><expr pos:start="408:17" pos:end="408:47"><call pos:start="408:17" pos:end="408:47"><name pos:start="408:17" pos:end="408:34">parse_arg_function</name><argument_list pos:start="408:35" pos:end="408:47">(<argument pos:start="408:36" pos:end="408:41"><expr pos:start="408:36" pos:end="408:41"><name pos:start="408:36" pos:end="408:41">optctx</name></expr></argument>, <argument pos:start="408:44" pos:end="408:46"><expr pos:start="408:44" pos:end="408:46"><name pos:start="408:44" pos:end="408:46">opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function pos:start="413:1" pos:end="444:1"><type pos:start="413:1" pos:end="413:3"><name pos:start="413:1" pos:end="413:3">int</name></type> <name pos:start="413:5" pos:end="413:18">parse_optgroup</name><parameter_list pos:start="413:19" pos:end="413:48">(<parameter pos:start="413:20" pos:end="413:31"><decl pos:start="413:20" pos:end="413:31"><type pos:start="413:20" pos:end="413:31"><name pos:start="413:20" pos:end="413:23">void</name> <modifier pos:start="413:25" pos:end="413:25">*</modifier></type><name pos:start="413:26" pos:end="413:31">optctx</name></decl></parameter>, <parameter pos:start="413:34" pos:end="413:47"><decl pos:start="413:34" pos:end="413:47"><type pos:start="413:34" pos:end="413:47"><name pos:start="413:34" pos:end="413:44">OptionGroup</name> <modifier pos:start="413:46" pos:end="413:46">*</modifier></type><name pos:start="413:47" pos:end="413:47">g</name></decl></parameter>)</parameter_list>
<block pos:start="414:1" pos:end="444:1">{<block_content pos:start="415:5" pos:end="443:13">
    <decl_stmt pos:start="415:5" pos:end="415:15"><decl pos:start="415:5" pos:end="415:9"><type pos:start="415:5" pos:end="415:7"><name pos:start="415:5" pos:end="415:7">int</name></type> <name pos:start="415:9" pos:end="415:9">i</name></decl>, <decl pos:start="415:12" pos:end="415:14"><type ref="prev" pos:start="415:5" pos:end="415:7"/><name pos:start="415:12" pos:end="415:14">ret</name></decl>;</decl_stmt>

    <expr_stmt pos:start="417:5" pos:end="418:39"><expr pos:start="417:5" pos:end="418:38"><call pos:start="417:5" pos:end="418:38"><name pos:start="417:5" pos:end="417:10">av_log</name><argument_list pos:start="417:11" pos:end="418:38">(<argument pos:start="417:12" pos:end="417:15"><expr pos:start="417:12" pos:end="417:15"><name pos:start="417:12" pos:end="417:15">NULL</name></expr></argument>, <argument pos:start="417:18" pos:end="417:29"><expr pos:start="417:18" pos:end="417:29"><name pos:start="417:18" pos:end="417:29">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="417:32" pos:end="417:69"><expr pos:start="417:32" pos:end="417:69"><literal type="string" pos:start="417:32" pos:end="417:69">"Parsing a group of options: %s %s.\n"</literal></expr></argument>,
           <argument pos:start="418:12" pos:end="418:29"><expr pos:start="418:12" pos:end="418:29"><name pos:start="418:12" pos:end="418:29"><name pos:start="418:12" pos:end="418:12">g</name><operator pos:start="418:13" pos:end="418:14">-&gt;</operator><name pos:start="418:15" pos:end="418:23">group_def</name><operator pos:start="418:24" pos:end="418:25">-&gt;</operator><name pos:start="418:26" pos:end="418:29">name</name></name></expr></argument>, <argument pos:start="418:32" pos:end="418:37"><expr pos:start="418:32" pos:end="418:37"><name pos:start="418:32" pos:end="418:37"><name pos:start="418:32" pos:end="418:32">g</name><operator pos:start="418:33" pos:end="418:34">-&gt;</operator><name pos:start="418:35" pos:end="418:37">arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="420:5" pos:end="439:5">for <control pos:start="420:9" pos:end="420:36">(<init pos:start="420:10" pos:end="420:15"><expr pos:start="420:10" pos:end="420:14"><name pos:start="420:10" pos:end="420:10">i</name> <operator pos:start="420:12" pos:end="420:12">=</operator> <literal type="number" pos:start="420:14" pos:end="420:14">0</literal></expr>;</init> <condition pos:start="420:17" pos:end="420:31"><expr pos:start="420:17" pos:end="420:30"><name pos:start="420:17" pos:end="420:17">i</name> <operator pos:start="420:19" pos:end="420:19">&lt;</operator> <name pos:start="420:21" pos:end="420:30"><name pos:start="420:21" pos:end="420:21">g</name><operator pos:start="420:22" pos:end="420:23">-&gt;</operator><name pos:start="420:24" pos:end="420:30">nb_opts</name></name></expr>;</condition> <incr pos:start="420:33" pos:end="420:35"><expr pos:start="420:33" pos:end="420:35"><name pos:start="420:33" pos:end="420:33">i</name><operator pos:start="420:34" pos:end="420:35">++</operator></expr></incr>)</control> <block pos:start="420:38" pos:end="439:5">{<block_content pos:start="421:9" pos:end="438:23">
        <decl_stmt pos:start="421:9" pos:end="421:32"><decl pos:start="421:9" pos:end="421:31"><type pos:start="421:9" pos:end="421:16"><name pos:start="421:9" pos:end="421:14">Option</name> <modifier pos:start="421:16" pos:end="421:16">*</modifier></type><name pos:start="421:17" pos:end="421:17">o</name> <init pos:start="421:19" pos:end="421:31">= <expr pos:start="421:21" pos:end="421:31"><operator pos:start="421:21" pos:end="421:21">&amp;</operator><name pos:start="421:22" pos:end="421:31"><name pos:start="421:22" pos:end="421:22">g</name><operator pos:start="421:23" pos:end="421:24">-&gt;</operator><name pos:start="421:25" pos:end="421:28">opts</name><index pos:start="421:29" pos:end="421:31">[<expr pos:start="421:30" pos:end="421:30"><name pos:start="421:30" pos:end="421:30">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="423:9" pos:end="431:9"><if pos:start="423:9" pos:end="431:9">if <condition pos:start="423:12" pos:end="424:51">(<expr pos:start="423:13" pos:end="424:50"><name pos:start="423:13" pos:end="423:31"><name pos:start="423:13" pos:end="423:13">g</name><operator pos:start="423:14" pos:end="423:15">-&gt;</operator><name pos:start="423:16" pos:end="423:24">group_def</name><operator pos:start="423:25" pos:end="423:26">-&gt;</operator><name pos:start="423:27" pos:end="423:31">flags</name></name> <operator pos:start="423:33" pos:end="423:34">&amp;&amp;</operator>
            <operator pos:start="424:13" pos:end="424:13">!</operator><operator pos:start="424:14" pos:end="424:14">(</operator><name pos:start="424:15" pos:end="424:33"><name pos:start="424:15" pos:end="424:15">g</name><operator pos:start="424:16" pos:end="424:17">-&gt;</operator><name pos:start="424:18" pos:end="424:26">group_def</name><operator pos:start="424:27" pos:end="424:28">-&gt;</operator><name pos:start="424:29" pos:end="424:33">flags</name></name> <operator pos:start="424:35" pos:end="424:35">&amp;</operator> <name pos:start="424:37" pos:end="424:49"><name pos:start="424:37" pos:end="424:37">o</name><operator pos:start="424:38" pos:end="424:39">-&gt;</operator><name pos:start="424:40" pos:end="424:42">opt</name><operator pos:start="424:43" pos:end="424:44">-&gt;</operator><name pos:start="424:45" pos:end="424:49">flags</name></name><operator pos:start="424:50" pos:end="424:50">)</operator></expr>)</condition> <block pos:start="424:53" pos:end="431:9">{<block_content pos:start="425:13" pos:end="430:35">
            <expr_stmt pos:start="425:13" pos:end="429:47"><expr pos:start="425:13" pos:end="429:46"><call pos:start="425:13" pos:end="429:46"><name pos:start="425:13" pos:end="425:18">av_log</name><argument_list pos:start="425:19" pos:end="429:46">(<argument pos:start="425:20" pos:end="425:23"><expr pos:start="425:20" pos:end="425:23"><name pos:start="425:20" pos:end="425:23">NULL</name></expr></argument>, <argument pos:start="425:26" pos:end="425:37"><expr pos:start="425:26" pos:end="425:37"><name pos:start="425:26" pos:end="425:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="425:40" pos:end="428:42"><expr pos:start="425:40" pos:end="428:42"><literal type="string" pos:start="425:40" pos:end="425:77">"Option %s (%s) cannot be applied to "</literal>
                   <literal type="string" pos:start="426:20" pos:end="426:76">"%s %s -- you are trying to apply an input option to an "</literal>
                   <literal type="string" pos:start="427:20" pos:end="427:76">"output file or vice versa. Move this option before the "</literal>
                   <literal type="string" pos:start="428:20" pos:end="428:42">"file it belongs to.\n"</literal></expr></argument>, <argument pos:start="428:45" pos:end="428:50"><expr pos:start="428:45" pos:end="428:50"><name pos:start="428:45" pos:end="428:50"><name pos:start="428:45" pos:end="428:45">o</name><operator pos:start="428:46" pos:end="428:47">-&gt;</operator><name pos:start="428:48" pos:end="428:50">key</name></name></expr></argument>, <argument pos:start="428:53" pos:end="428:64"><expr pos:start="428:53" pos:end="428:64"><name pos:start="428:53" pos:end="428:64"><name pos:start="428:53" pos:end="428:53">o</name><operator pos:start="428:54" pos:end="428:55">-&gt;</operator><name pos:start="428:56" pos:end="428:58">opt</name><operator pos:start="428:59" pos:end="428:60">-&gt;</operator><name pos:start="428:61" pos:end="428:64">help</name></name></expr></argument>,
                   <argument pos:start="429:20" pos:end="429:37"><expr pos:start="429:20" pos:end="429:37"><name pos:start="429:20" pos:end="429:37"><name pos:start="429:20" pos:end="429:20">g</name><operator pos:start="429:21" pos:end="429:22">-&gt;</operator><name pos:start="429:23" pos:end="429:31">group_def</name><operator pos:start="429:32" pos:end="429:33">-&gt;</operator><name pos:start="429:34" pos:end="429:37">name</name></name></expr></argument>, <argument pos:start="429:40" pos:end="429:45"><expr pos:start="429:40" pos:end="429:45"><name pos:start="429:40" pos:end="429:45"><name pos:start="429:40" pos:end="429:40">g</name><operator pos:start="429:41" pos:end="429:42">-&gt;</operator><name pos:start="429:43" pos:end="429:45">arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="430:13" pos:end="430:35">return <expr pos:start="430:20" pos:end="430:34"><call pos:start="430:20" pos:end="430:34"><name pos:start="430:20" pos:end="430:26">AVERROR</name><argument_list pos:start="430:27" pos:end="430:34">(<argument pos:start="430:28" pos:end="430:33"><expr pos:start="430:28" pos:end="430:33"><name pos:start="430:28" pos:end="430:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="433:9" pos:end="434:45"><expr pos:start="433:9" pos:end="434:44"><call pos:start="433:9" pos:end="434:44"><name pos:start="433:9" pos:end="433:14">av_log</name><argument_list pos:start="433:15" pos:end="434:44">(<argument pos:start="433:16" pos:end="433:19"><expr pos:start="433:16" pos:end="433:19"><name pos:start="433:16" pos:end="433:19">NULL</name></expr></argument>, <argument pos:start="433:22" pos:end="433:33"><expr pos:start="433:22" pos:end="433:33"><name pos:start="433:22" pos:end="433:33">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="433:36" pos:end="433:80"><expr pos:start="433:36" pos:end="433:80"><literal type="string" pos:start="433:36" pos:end="433:80">"Applying option %s (%s) with argument %s.\n"</literal></expr></argument>,
               <argument pos:start="434:16" pos:end="434:21"><expr pos:start="434:16" pos:end="434:21"><name pos:start="434:16" pos:end="434:21"><name pos:start="434:16" pos:end="434:16">o</name><operator pos:start="434:17" pos:end="434:18">-&gt;</operator><name pos:start="434:19" pos:end="434:21">key</name></name></expr></argument>, <argument pos:start="434:24" pos:end="434:35"><expr pos:start="434:24" pos:end="434:35"><name pos:start="434:24" pos:end="434:35"><name pos:start="434:24" pos:end="434:24">o</name><operator pos:start="434:25" pos:end="434:26">-&gt;</operator><name pos:start="434:27" pos:end="434:29">opt</name><operator pos:start="434:30" pos:end="434:31">-&gt;</operator><name pos:start="434:32" pos:end="434:35">help</name></name></expr></argument>, <argument pos:start="434:38" pos:end="434:43"><expr pos:start="434:38" pos:end="434:43"><name pos:start="434:38" pos:end="434:43"><name pos:start="434:38" pos:end="434:38">o</name><operator pos:start="434:39" pos:end="434:40">-&gt;</operator><name pos:start="434:41" pos:end="434:43">val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="436:9" pos:end="436:59"><expr pos:start="436:9" pos:end="436:58"><name pos:start="436:9" pos:end="436:11">ret</name> <operator pos:start="436:13" pos:end="436:13">=</operator> <call pos:start="436:15" pos:end="436:58"><name pos:start="436:15" pos:end="436:26">write_option</name><argument_list pos:start="436:27" pos:end="436:58">(<argument pos:start="436:28" pos:end="436:33"><expr pos:start="436:28" pos:end="436:33"><name pos:start="436:28" pos:end="436:33">optctx</name></expr></argument>, <argument pos:start="436:36" pos:end="436:41"><expr pos:start="436:36" pos:end="436:41"><name pos:start="436:36" pos:end="436:41"><name pos:start="436:36" pos:end="436:36">o</name><operator pos:start="436:37" pos:end="436:38">-&gt;</operator><name pos:start="436:39" pos:end="436:41">opt</name></name></expr></argument>, <argument pos:start="436:44" pos:end="436:49"><expr pos:start="436:44" pos:end="436:49"><name pos:start="436:44" pos:end="436:49"><name pos:start="436:44" pos:end="436:44">o</name><operator pos:start="436:45" pos:end="436:46">-&gt;</operator><name pos:start="436:47" pos:end="436:49">key</name></name></expr></argument>, <argument pos:start="436:52" pos:end="436:57"><expr pos:start="436:52" pos:end="436:57"><name pos:start="436:52" pos:end="436:57"><name pos:start="436:52" pos:end="436:52">o</name><operator pos:start="436:53" pos:end="436:54">-&gt;</operator><name pos:start="436:55" pos:end="436:57">val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="437:9" pos:end="438:23"><if pos:start="437:9" pos:end="438:23">if <condition pos:start="437:12" pos:end="437:20">(<expr pos:start="437:13" pos:end="437:19"><name pos:start="437:13" pos:end="437:15">ret</name> <operator pos:start="437:17" pos:end="437:17">&lt;</operator> <literal type="number" pos:start="437:19" pos:end="437:19">0</literal></expr>)</condition><block type="pseudo" pos:start="438:13" pos:end="438:23"><block_content pos:start="438:13" pos:end="438:23">
            <return pos:start="438:13" pos:end="438:23">return <expr pos:start="438:20" pos:end="438:22"><name pos:start="438:20" pos:end="438:22">ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt pos:start="441:5" pos:end="441:76"><expr pos:start="441:5" pos:end="441:75"><call pos:start="441:5" pos:end="441:75"><name pos:start="441:5" pos:end="441:10">av_log</name><argument_list pos:start="441:11" pos:end="441:75">(<argument pos:start="441:12" pos:end="441:15"><expr pos:start="441:12" pos:end="441:15"><name pos:start="441:12" pos:end="441:15">NULL</name></expr></argument>, <argument pos:start="441:18" pos:end="441:29"><expr pos:start="441:18" pos:end="441:29"><name pos:start="441:18" pos:end="441:29">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="441:32" pos:end="441:74"><expr pos:start="441:32" pos:end="441:74"><literal type="string" pos:start="441:32" pos:end="441:74">"Successfully parsed a group of options.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="443:5" pos:end="443:13">return <expr pos:start="443:12" pos:end="443:12"><literal type="number" pos:start="443:12" pos:end="443:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="446:1" pos:end="470:1"><type pos:start="446:1" pos:end="446:3"><name pos:start="446:1" pos:end="446:3">int</name></type> <name pos:start="446:5" pos:end="446:17">locate_option</name><parameter_list pos:start="446:18" pos:end="447:38">(<parameter pos:start="446:19" pos:end="446:26"><decl pos:start="446:19" pos:end="446:26"><type pos:start="446:19" pos:end="446:26"><name pos:start="446:19" pos:end="446:21">int</name></type> <name pos:start="446:23" pos:end="446:26">argc</name></decl></parameter>, <parameter pos:start="446:29" pos:end="446:39"><decl pos:start="446:29" pos:end="446:39"><type pos:start="446:29" pos:end="446:39"><name pos:start="446:29" pos:end="446:32">char</name> <modifier pos:start="446:34" pos:end="446:34">*</modifier><modifier pos:start="446:35" pos:end="446:35">*</modifier></type><name pos:start="446:36" pos:end="446:39">argv</name></decl></parameter>, <parameter pos:start="446:42" pos:end="446:65"><decl pos:start="446:42" pos:end="446:65"><type pos:start="446:42" pos:end="446:65"><specifier pos:start="446:42" pos:end="446:46">const</specifier> <name pos:start="446:48" pos:end="446:56">OptionDef</name> <modifier pos:start="446:58" pos:end="446:58">*</modifier></type><name pos:start="446:59" pos:end="446:65">options</name></decl></parameter>,
                  <parameter pos:start="447:19" pos:end="447:37"><decl pos:start="447:19" pos:end="447:37"><type pos:start="447:19" pos:end="447:37"><specifier pos:start="447:19" pos:end="447:23">const</specifier> <name pos:start="447:25" pos:end="447:28">char</name> <modifier pos:start="447:30" pos:end="447:30">*</modifier></type><name pos:start="447:31" pos:end="447:37">optname</name></decl></parameter>)</parameter_list>
<block pos:start="448:1" pos:end="470:1">{<block_content pos:start="449:5" pos:end="469:13">
    <decl_stmt pos:start="449:5" pos:end="449:24"><decl pos:start="449:5" pos:end="449:23"><type pos:start="449:5" pos:end="449:21"><specifier pos:start="449:5" pos:end="449:9">const</specifier> <name pos:start="449:11" pos:end="449:19">OptionDef</name> <modifier pos:start="449:21" pos:end="449:21">*</modifier></type><name pos:start="449:22" pos:end="449:23">po</name></decl>;</decl_stmt>
    <decl_stmt pos:start="450:5" pos:end="450:10"><decl pos:start="450:5" pos:end="450:9"><type pos:start="450:5" pos:end="450:7"><name pos:start="450:5" pos:end="450:7">int</name></type> <name pos:start="450:9" pos:end="450:9">i</name></decl>;</decl_stmt>

    <for pos:start="452:5" pos:end="468:5">for <control pos:start="452:9" pos:end="452:30">(<init pos:start="452:10" pos:end="452:15"><expr pos:start="452:10" pos:end="452:14"><name pos:start="452:10" pos:end="452:10">i</name> <operator pos:start="452:12" pos:end="452:12">=</operator> <literal type="number" pos:start="452:14" pos:end="452:14">1</literal></expr>;</init> <condition pos:start="452:17" pos:end="452:25"><expr pos:start="452:17" pos:end="452:24"><name pos:start="452:17" pos:end="452:17">i</name> <operator pos:start="452:19" pos:end="452:19">&lt;</operator> <name pos:start="452:21" pos:end="452:24">argc</name></expr>;</condition> <incr pos:start="452:27" pos:end="452:29"><expr pos:start="452:27" pos:end="452:29"><name pos:start="452:27" pos:end="452:27">i</name><operator pos:start="452:28" pos:end="452:29">++</operator></expr></incr>)</control> <block pos:start="452:32" pos:end="468:5">{<block_content pos:start="453:9" pos:end="467:16">
        <decl_stmt pos:start="453:9" pos:end="453:38"><decl pos:start="453:9" pos:end="453:37"><type pos:start="453:9" pos:end="453:20"><specifier pos:start="453:9" pos:end="453:13">const</specifier> <name pos:start="453:15" pos:end="453:18">char</name> <modifier pos:start="453:20" pos:end="453:20">*</modifier></type><name pos:start="453:21" pos:end="453:27">cur_opt</name> <init pos:start="453:29" pos:end="453:37">= <expr pos:start="453:31" pos:end="453:37"><name pos:start="453:31" pos:end="453:37"><name pos:start="453:31" pos:end="453:34">argv</name><index pos:start="453:35" pos:end="453:37">[<expr pos:start="453:36" pos:end="453:36"><name pos:start="453:36" pos:end="453:36">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="455:9" pos:end="456:21"><if pos:start="455:9" pos:end="456:21">if <condition pos:start="455:12" pos:end="455:30">(<expr pos:start="455:13" pos:end="455:29"><operator pos:start="455:13" pos:end="455:13">*</operator><name pos:start="455:14" pos:end="455:20">cur_opt</name><operator pos:start="455:21" pos:end="455:22">++</operator> <operator pos:start="455:24" pos:end="455:25">!=</operator> <literal type="char" pos:start="455:27" pos:end="455:29">'-'</literal></expr>)</condition><block type="pseudo" pos:start="456:13" pos:end="456:21"><block_content pos:start="456:13" pos:end="456:21">
            <continue pos:start="456:13" pos:end="456:21">continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt pos:start="458:9" pos:end="458:43"><expr pos:start="458:9" pos:end="458:42"><name pos:start="458:9" pos:end="458:10">po</name> <operator pos:start="458:12" pos:end="458:12">=</operator> <call pos:start="458:14" pos:end="458:42"><name pos:start="458:14" pos:end="458:24">find_option</name><argument_list pos:start="458:25" pos:end="458:42">(<argument pos:start="458:26" pos:end="458:32"><expr pos:start="458:26" pos:end="458:32"><name pos:start="458:26" pos:end="458:32">options</name></expr></argument>, <argument pos:start="458:35" pos:end="458:41"><expr pos:start="458:35" pos:end="458:41"><name pos:start="458:35" pos:end="458:41">cur_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="459:9" pos:end="460:51"><if pos:start="459:9" pos:end="460:51">if <condition pos:start="459:12" pos:end="459:64">(<expr pos:start="459:13" pos:end="459:63"><operator pos:start="459:13" pos:end="459:13">!</operator><name pos:start="459:14" pos:end="459:21"><name pos:start="459:14" pos:end="459:15">po</name><operator pos:start="459:16" pos:end="459:17">-&gt;</operator><name pos:start="459:18" pos:end="459:21">name</name></name> <operator pos:start="459:23" pos:end="459:24">&amp;&amp;</operator> <name pos:start="459:26" pos:end="459:35"><name pos:start="459:26" pos:end="459:32">cur_opt</name><index pos:start="459:33" pos:end="459:35">[<expr pos:start="459:34" pos:end="459:34"><literal type="number" pos:start="459:34" pos:end="459:34">0</literal></expr>]</index></name> <operator pos:start="459:37" pos:end="459:38">==</operator> <literal type="char" pos:start="459:40" pos:end="459:42">'n'</literal> <operator pos:start="459:44" pos:end="459:45">&amp;&amp;</operator> <name pos:start="459:47" pos:end="459:56"><name pos:start="459:47" pos:end="459:53">cur_opt</name><index pos:start="459:54" pos:end="459:56">[<expr pos:start="459:55" pos:end="459:55"><literal type="number" pos:start="459:55" pos:end="459:55">1</literal></expr>]</index></name> <operator pos:start="459:58" pos:end="459:59">==</operator> <literal type="char" pos:start="459:61" pos:end="459:63">'o'</literal></expr>)</condition><block type="pseudo" pos:start="460:13" pos:end="460:51"><block_content pos:start="460:13" pos:end="460:51">
            <expr_stmt pos:start="460:13" pos:end="460:51"><expr pos:start="460:13" pos:end="460:50"><name pos:start="460:13" pos:end="460:14">po</name> <operator pos:start="460:16" pos:end="460:16">=</operator> <call pos:start="460:18" pos:end="460:50"><name pos:start="460:18" pos:end="460:28">find_option</name><argument_list pos:start="460:29" pos:end="460:50">(<argument pos:start="460:30" pos:end="460:36"><expr pos:start="460:30" pos:end="460:36"><name pos:start="460:30" pos:end="460:36">options</name></expr></argument>, <argument pos:start="460:39" pos:end="460:49"><expr pos:start="460:39" pos:end="460:49"><name pos:start="460:39" pos:end="460:45">cur_opt</name> <operator pos:start="460:47" pos:end="460:47">+</operator> <literal type="number" pos:start="460:49" pos:end="460:49">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="462:9" pos:end="464:21"><if pos:start="462:9" pos:end="464:21">if <condition pos:start="462:12" pos:end="463:54">(<expr pos:start="462:13" pos:end="463:53"><operator pos:start="462:13" pos:end="462:13">(</operator><operator pos:start="462:14" pos:end="462:14">!</operator><name pos:start="462:15" pos:end="462:22"><name pos:start="462:15" pos:end="462:16">po</name><operator pos:start="462:17" pos:end="462:18">-&gt;</operator><name pos:start="462:19" pos:end="462:22">name</name></name> <operator pos:start="462:24" pos:end="462:25">&amp;&amp;</operator> <operator pos:start="462:27" pos:end="462:27">!</operator><call pos:start="462:28" pos:end="462:51"><name pos:start="462:28" pos:end="462:33">strcmp</name><argument_list pos:start="462:34" pos:end="462:51">(<argument pos:start="462:35" pos:end="462:41"><expr pos:start="462:35" pos:end="462:41"><name pos:start="462:35" pos:end="462:41">cur_opt</name></expr></argument>, <argument pos:start="462:44" pos:end="462:50"><expr pos:start="462:44" pos:end="462:50"><name pos:start="462:44" pos:end="462:50">optname</name></expr></argument>)</argument_list></call><operator pos:start="462:52" pos:end="462:52">)</operator> <operator pos:start="462:54" pos:end="462:55">||</operator>
             <operator pos:start="463:14" pos:end="463:14">(</operator><name pos:start="463:15" pos:end="463:22"><name pos:start="463:15" pos:end="463:16">po</name><operator pos:start="463:17" pos:end="463:18">-&gt;</operator><name pos:start="463:19" pos:end="463:22">name</name></name> <operator pos:start="463:24" pos:end="463:25">&amp;&amp;</operator> <operator pos:start="463:27" pos:end="463:27">!</operator><call pos:start="463:28" pos:end="463:52"><name pos:start="463:28" pos:end="463:33">strcmp</name><argument_list pos:start="463:34" pos:end="463:52">(<argument pos:start="463:35" pos:end="463:41"><expr pos:start="463:35" pos:end="463:41"><name pos:start="463:35" pos:end="463:41">optname</name></expr></argument>, <argument pos:start="463:44" pos:end="463:51"><expr pos:start="463:44" pos:end="463:51"><name pos:start="463:44" pos:end="463:51"><name pos:start="463:44" pos:end="463:45">po</name><operator pos:start="463:46" pos:end="463:47">-&gt;</operator><name pos:start="463:48" pos:end="463:51">name</name></name></expr></argument>)</argument_list></call><operator pos:start="463:53" pos:end="463:53">)</operator></expr>)</condition><block type="pseudo" pos:start="464:13" pos:end="464:21"><block_content pos:start="464:13" pos:end="464:21">
            <return pos:start="464:13" pos:end="464:21">return <expr pos:start="464:20" pos:end="464:20"><name pos:start="464:20" pos:end="464:20">i</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="466:9" pos:end="467:16"><if pos:start="466:9" pos:end="467:16">if <condition pos:start="466:12" pos:end="466:45">(<expr pos:start="466:13" pos:end="466:44"><operator pos:start="466:13" pos:end="466:13">!</operator><name pos:start="466:14" pos:end="466:21"><name pos:start="466:14" pos:end="466:15">po</name><operator pos:start="466:16" pos:end="466:17">-&gt;</operator><name pos:start="466:18" pos:end="466:21">name</name></name> <operator pos:start="466:23" pos:end="466:24">||</operator> <name pos:start="466:26" pos:end="466:34"><name pos:start="466:26" pos:end="466:27">po</name><operator pos:start="466:28" pos:end="466:29">-&gt;</operator><name pos:start="466:30" pos:end="466:34">flags</name></name> <operator pos:start="466:36" pos:end="466:36">&amp;</operator> <name pos:start="466:38" pos:end="466:44">HAS_ARG</name></expr>)</condition><block type="pseudo" pos:start="467:13" pos:end="467:16"><block_content pos:start="467:13" pos:end="467:16">
            <expr_stmt pos:start="467:13" pos:end="467:16"><expr pos:start="467:13" pos:end="467:15"><name pos:start="467:13" pos:end="467:13">i</name><operator pos:start="467:14" pos:end="467:15">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return pos:start="469:5" pos:end="469:13">return <expr pos:start="469:12" pos:end="469:12"><literal type="number" pos:start="469:12" pos:end="469:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="472:1" pos:end="494:1"><type pos:start="472:1" pos:end="472:11"><specifier pos:start="472:1" pos:end="472:6">static</specifier> <name pos:start="472:8" pos:end="472:11">void</name></type> <name pos:start="472:13" pos:end="472:25">dump_argument</name><parameter_list pos:start="472:26" pos:end="472:40">(<parameter pos:start="472:27" pos:end="472:39"><decl pos:start="472:27" pos:end="472:39"><type pos:start="472:27" pos:end="472:38"><specifier pos:start="472:27" pos:end="472:31">const</specifier> <name pos:start="472:33" pos:end="472:36">char</name> <modifier pos:start="472:38" pos:end="472:38">*</modifier></type><name pos:start="472:39" pos:end="472:39">a</name></decl></parameter>)</parameter_list>
<block pos:start="473:1" pos:end="494:1">{<block_content pos:start="474:5" pos:end="493:28">
    <decl_stmt pos:start="474:5" pos:end="474:27"><decl pos:start="474:5" pos:end="474:26"><type pos:start="474:5" pos:end="474:25"><specifier pos:start="474:5" pos:end="474:9">const</specifier> <name pos:start="474:11" pos:end="474:18">unsigned</name> <name pos:start="474:20" pos:end="474:23">char</name> <modifier pos:start="474:25" pos:end="474:25">*</modifier></type><name pos:start="474:26" pos:end="474:26">p</name></decl>;</decl_stmt>

    <for pos:start="476:5" pos:end="479:18">for <control pos:start="476:9" pos:end="476:24">(<init pos:start="476:10" pos:end="476:15"><expr pos:start="476:10" pos:end="476:14"><name pos:start="476:10" pos:end="476:10">p</name> <operator pos:start="476:12" pos:end="476:12">=</operator> <name pos:start="476:14" pos:end="476:14">a</name></expr>;</init> <condition pos:start="476:17" pos:end="476:19"><expr pos:start="476:17" pos:end="476:18"><operator pos:start="476:17" pos:end="476:17">*</operator><name pos:start="476:18" pos:end="476:18">p</name></expr>;</condition> <incr pos:start="476:21" pos:end="476:23"><expr pos:start="476:21" pos:end="476:23"><name pos:start="476:21" pos:end="476:21">p</name><operator pos:start="476:22" pos:end="476:23">++</operator></expr></incr>)</control><block type="pseudo" pos:start="477:9" pos:end="479:18"><block_content pos:start="477:9" pos:end="479:18">
        <if_stmt pos:start="477:9" pos:end="479:18"><if pos:start="477:9" pos:end="479:18">if <condition pos:start="477:12" pos:end="478:53">(<expr pos:start="477:13" pos:end="478:52"><operator pos:start="477:13" pos:end="477:13">!</operator><operator pos:start="477:14" pos:end="477:14">(</operator><operator pos:start="477:15" pos:end="477:15">(</operator><operator pos:start="477:16" pos:end="477:16">*</operator><name pos:start="477:17" pos:end="477:17">p</name> <operator pos:start="477:19" pos:end="477:20">&gt;=</operator> <literal type="char" pos:start="477:22" pos:end="477:24">'+'</literal> <operator pos:start="477:26" pos:end="477:27">&amp;&amp;</operator> <operator pos:start="477:29" pos:end="477:29">*</operator><name pos:start="477:30" pos:end="477:30">p</name> <operator pos:start="477:32" pos:end="477:33">&lt;=</operator> <literal type="char" pos:start="477:35" pos:end="477:37">':'</literal><operator pos:start="477:38" pos:end="477:38">)</operator> <operator pos:start="477:40" pos:end="477:41">||</operator> <operator pos:start="477:43" pos:end="477:43">(</operator><operator pos:start="477:44" pos:end="477:44">*</operator><name pos:start="477:45" pos:end="477:45">p</name> <operator pos:start="477:47" pos:end="477:48">&gt;=</operator> <literal type="char" pos:start="477:50" pos:end="477:52">'@'</literal> <operator pos:start="477:54" pos:end="477:55">&amp;&amp;</operator> <operator pos:start="477:57" pos:end="477:57">*</operator><name pos:start="477:58" pos:end="477:58">p</name> <operator pos:start="477:60" pos:end="477:61">&lt;=</operator> <literal type="char" pos:start="477:63" pos:end="477:65">'Z'</literal><operator pos:start="477:66" pos:end="477:66">)</operator> <operator pos:start="477:68" pos:end="477:69">||</operator>
              <operator pos:start="478:15" pos:end="478:15">*</operator><name pos:start="478:16" pos:end="478:16">p</name> <operator pos:start="478:18" pos:end="478:19">==</operator> <literal type="char" pos:start="478:21" pos:end="478:23">'_'</literal> <operator pos:start="478:25" pos:end="478:26">||</operator> <operator pos:start="478:28" pos:end="478:28">(</operator><operator pos:start="478:29" pos:end="478:29">*</operator><name pos:start="478:30" pos:end="478:30">p</name> <operator pos:start="478:32" pos:end="478:33">&gt;=</operator> <literal type="char" pos:start="478:35" pos:end="478:37">'a'</literal> <operator pos:start="478:39" pos:end="478:40">&amp;&amp;</operator> <operator pos:start="478:42" pos:end="478:42">*</operator><name pos:start="478:43" pos:end="478:43">p</name> <operator pos:start="478:45" pos:end="478:46">&lt;=</operator> <literal type="char" pos:start="478:48" pos:end="478:50">'z'</literal><operator pos:start="478:51" pos:end="478:51">)</operator><operator pos:start="478:52" pos:end="478:52">)</operator></expr>)</condition><block type="pseudo" pos:start="479:13" pos:end="479:18"><block_content pos:start="479:13" pos:end="479:18">
            <break pos:start="479:13" pos:end="479:18">break;</break></block_content></block></if></if_stmt></block_content></block></for>
    <if_stmt pos:start="480:5" pos:end="483:5"><if pos:start="480:5" pos:end="483:5">if <condition pos:start="480:8" pos:end="480:12">(<expr pos:start="480:9" pos:end="480:11"><operator pos:start="480:9" pos:end="480:9">!</operator><operator pos:start="480:10" pos:end="480:10">*</operator><name pos:start="480:11" pos:end="480:11">p</name></expr>)</condition> <block pos:start="480:14" pos:end="483:5">{<block_content pos:start="481:9" pos:end="482:15">
        <expr_stmt pos:start="481:9" pos:end="481:30"><expr pos:start="481:9" pos:end="481:29"><call pos:start="481:9" pos:end="481:29"><name pos:start="481:9" pos:end="481:13">fputs</name><argument_list pos:start="481:14" pos:end="481:29">(<argument pos:start="481:15" pos:end="481:15"><expr pos:start="481:15" pos:end="481:15"><name pos:start="481:15" pos:end="481:15">a</name></expr></argument>, <argument pos:start="481:18" pos:end="481:28"><expr pos:start="481:18" pos:end="481:28"><name pos:start="481:18" pos:end="481:28">report_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="482:9" pos:end="482:15">return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="484:5" pos:end="484:28"><expr pos:start="484:5" pos:end="484:27"><call pos:start="484:5" pos:end="484:27"><name pos:start="484:5" pos:end="484:9">fputc</name><argument_list pos:start="484:10" pos:end="484:27">(<argument pos:start="484:11" pos:end="484:13"><expr pos:start="484:11" pos:end="484:13"><literal type="char" pos:start="484:11" pos:end="484:13">'"'</literal></expr></argument>, <argument pos:start="484:16" pos:end="484:26"><expr pos:start="484:16" pos:end="484:26"><name pos:start="484:16" pos:end="484:26">report_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="485:5" pos:end="492:5">for <control pos:start="485:9" pos:end="485:24">(<init pos:start="485:10" pos:end="485:15"><expr pos:start="485:10" pos:end="485:14"><name pos:start="485:10" pos:end="485:10">p</name> <operator pos:start="485:12" pos:end="485:12">=</operator> <name pos:start="485:14" pos:end="485:14">a</name></expr>;</init> <condition pos:start="485:17" pos:end="485:19"><expr pos:start="485:17" pos:end="485:18"><operator pos:start="485:17" pos:end="485:17">*</operator><name pos:start="485:18" pos:end="485:18">p</name></expr>;</condition> <incr pos:start="485:21" pos:end="485:23"><expr pos:start="485:21" pos:end="485:23"><name pos:start="485:21" pos:end="485:21">p</name><operator pos:start="485:22" pos:end="485:23">++</operator></expr></incr>)</control> <block pos:start="485:26" pos:end="492:5">{<block_content pos:start="486:9" pos:end="491:35">
        <if_stmt pos:start="486:9" pos:end="491:35"><if pos:start="486:9" pos:end="487:45">if <condition pos:start="486:12" pos:end="486:62">(<expr pos:start="486:13" pos:end="486:61"><operator pos:start="486:13" pos:end="486:13">*</operator><name pos:start="486:14" pos:end="486:14">p</name> <operator pos:start="486:16" pos:end="486:17">==</operator> <literal type="char" pos:start="486:19" pos:end="486:22">'\\'</literal> <operator pos:start="486:24" pos:end="486:25">||</operator> <operator pos:start="486:27" pos:end="486:27">*</operator><name pos:start="486:28" pos:end="486:28">p</name> <operator pos:start="486:30" pos:end="486:31">==</operator> <literal type="char" pos:start="486:33" pos:end="486:35">'"'</literal> <operator pos:start="486:37" pos:end="486:38">||</operator> <operator pos:start="486:40" pos:end="486:40">*</operator><name pos:start="486:41" pos:end="486:41">p</name> <operator pos:start="486:43" pos:end="486:44">==</operator> <literal type="char" pos:start="486:46" pos:end="486:48">'$'</literal> <operator pos:start="486:50" pos:end="486:51">||</operator> <operator pos:start="486:53" pos:end="486:53">*</operator><name pos:start="486:54" pos:end="486:54">p</name> <operator pos:start="486:56" pos:end="486:57">==</operator> <literal type="char" pos:start="486:59" pos:end="486:61">'`'</literal></expr>)</condition><block type="pseudo" pos:start="487:13" pos:end="487:45"><block_content pos:start="487:13" pos:end="487:45">
            <expr_stmt pos:start="487:13" pos:end="487:45"><expr pos:start="487:13" pos:end="487:44"><call pos:start="487:13" pos:end="487:44"><name pos:start="487:13" pos:end="487:19">fprintf</name><argument_list pos:start="487:20" pos:end="487:44">(<argument pos:start="487:21" pos:end="487:31"><expr pos:start="487:21" pos:end="487:31"><name pos:start="487:21" pos:end="487:31">report_file</name></expr></argument>, <argument pos:start="487:34" pos:end="487:39"><expr pos:start="487:34" pos:end="487:39"><literal type="string" pos:start="487:34" pos:end="487:39">"\\%c"</literal></expr></argument>, <argument pos:start="487:42" pos:end="487:43"><expr pos:start="487:42" pos:end="487:43"><operator pos:start="487:42" pos:end="487:42">*</operator><name pos:start="487:43" pos:end="487:43">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif" pos:start="488:9" pos:end="489:48">else if <condition pos:start="488:17" pos:end="488:38">(<expr pos:start="488:18" pos:end="488:37"><operator pos:start="488:18" pos:end="488:18">*</operator><name pos:start="488:19" pos:end="488:33"><name pos:start="488:19" pos:end="488:19">p</name> <argument_list type="generic" pos:start="488:21" pos:end="488:33">&lt; <argument pos:start="488:23" pos:end="488:31"><expr pos:start="488:23" pos:end="488:31"><literal type="char" pos:start="488:23" pos:end="488:25">' '</literal> <operator pos:start="488:27" pos:end="488:28">||</operator> <operator pos:start="488:30" pos:end="488:30">*</operator><name pos:start="488:31" pos:end="488:31">p</name></expr></argument> &gt;</argument_list></name> <literal type="char" pos:start="488:35" pos:end="488:37">'~'</literal></expr>)</condition><block type="pseudo" pos:start="489:13" pos:end="489:48"><block_content pos:start="489:13" pos:end="489:48">
            <expr_stmt pos:start="489:13" pos:end="489:48"><expr pos:start="489:13" pos:end="489:47"><call pos:start="489:13" pos:end="489:47"><name pos:start="489:13" pos:end="489:19">fprintf</name><argument_list pos:start="489:20" pos:end="489:47">(<argument pos:start="489:21" pos:end="489:31"><expr pos:start="489:21" pos:end="489:31"><name pos:start="489:21" pos:end="489:31">report_file</name></expr></argument>, <argument pos:start="489:34" pos:end="489:42"><expr pos:start="489:34" pos:end="489:42"><literal type="string" pos:start="489:34" pos:end="489:42">"\\x%02x"</literal></expr></argument>, <argument pos:start="489:45" pos:end="489:46"><expr pos:start="489:45" pos:end="489:46"><operator pos:start="489:45" pos:end="489:45">*</operator><name pos:start="489:46" pos:end="489:46">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="490:9" pos:end="491:35">else<block type="pseudo" pos:start="491:13" pos:end="491:35"><block_content pos:start="491:13" pos:end="491:35">
            <expr_stmt pos:start="491:13" pos:end="491:35"><expr pos:start="491:13" pos:end="491:34"><call pos:start="491:13" pos:end="491:34"><name pos:start="491:13" pos:end="491:17">fputc</name><argument_list pos:start="491:18" pos:end="491:34">(<argument pos:start="491:19" pos:end="491:20"><expr pos:start="491:19" pos:end="491:20"><operator pos:start="491:19" pos:end="491:19">*</operator><name pos:start="491:20" pos:end="491:20">p</name></expr></argument>, <argument pos:start="491:23" pos:end="491:33"><expr pos:start="491:23" pos:end="491:33"><name pos:start="491:23" pos:end="491:33">report_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="493:5" pos:end="493:28"><expr pos:start="493:5" pos:end="493:27"><call pos:start="493:5" pos:end="493:27"><name pos:start="493:5" pos:end="493:9">fputc</name><argument_list pos:start="493:10" pos:end="493:27">(<argument pos:start="493:11" pos:end="493:13"><expr pos:start="493:11" pos:end="493:13"><literal type="char" pos:start="493:11" pos:end="493:13">'"'</literal></expr></argument>, <argument pos:start="493:16" pos:end="493:26"><expr pos:start="493:16" pos:end="493:26"><name pos:start="493:16" pos:end="493:26">report_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="496:1" pos:end="503:1"><type pos:start="496:1" pos:end="496:11"><specifier pos:start="496:1" pos:end="496:6">static</specifier> <name pos:start="496:8" pos:end="496:11">void</name></type> <name pos:start="496:13" pos:end="496:25">check_options</name><parameter_list pos:start="496:26" pos:end="496:46">(<parameter pos:start="496:27" pos:end="496:45"><decl pos:start="496:27" pos:end="496:45"><type pos:start="496:27" pos:end="496:43"><specifier pos:start="496:27" pos:end="496:31">const</specifier> <name pos:start="496:33" pos:end="496:41">OptionDef</name> <modifier pos:start="496:43" pos:end="496:43">*</modifier></type><name pos:start="496:44" pos:end="496:45">po</name></decl></parameter>)</parameter_list>
<block pos:start="497:1" pos:end="503:1">{<block_content pos:start="498:5" pos:end="502:5">
    <while pos:start="498:5" pos:end="502:5">while <condition pos:start="498:11" pos:end="498:20">(<expr pos:start="498:12" pos:end="498:19"><name pos:start="498:12" pos:end="498:19"><name pos:start="498:12" pos:end="498:13">po</name><operator pos:start="498:14" pos:end="498:15">-&gt;</operator><name pos:start="498:16" pos:end="498:19">name</name></name></expr>)</condition> <block pos:start="498:22" pos:end="502:5">{<block_content pos:start="499:9" pos:end="501:13">
        <if_stmt pos:start="499:9" pos:end="500:61"><if pos:start="499:9" pos:end="500:61">if <condition pos:start="499:12" pos:end="499:36">(<expr pos:start="499:13" pos:end="499:35"><name pos:start="499:13" pos:end="499:21"><name pos:start="499:13" pos:end="499:14">po</name><operator pos:start="499:15" pos:end="499:16">-&gt;</operator><name pos:start="499:17" pos:end="499:21">flags</name></name> <operator pos:start="499:23" pos:end="499:23">&amp;</operator> <name pos:start="499:25" pos:end="499:35">OPT_PERFILE</name></expr>)</condition><block type="pseudo" pos:start="500:13" pos:end="500:61"><block_content pos:start="500:13" pos:end="500:61">
            <expr_stmt pos:start="500:13" pos:end="500:61"><expr pos:start="500:13" pos:end="500:60"><call pos:start="500:13" pos:end="500:60"><name pos:start="500:13" pos:end="500:22">av_assert0</name><argument_list pos:start="500:23" pos:end="500:60">(<argument pos:start="500:24" pos:end="500:59"><expr pos:start="500:24" pos:end="500:59"><name pos:start="500:24" pos:end="500:32"><name pos:start="500:24" pos:end="500:25">po</name><operator pos:start="500:26" pos:end="500:27">-&gt;</operator><name pos:start="500:28" pos:end="500:32">flags</name></name> <operator pos:start="500:34" pos:end="500:34">&amp;</operator> <operator pos:start="500:36" pos:end="500:36">(</operator><name pos:start="500:37" pos:end="500:45">OPT_INPUT</name> <operator pos:start="500:47" pos:end="500:47">|</operator> <name pos:start="500:49" pos:end="500:58">OPT_OUTPUT</name><operator pos:start="500:59" pos:end="500:59">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="501:9" pos:end="501:13"><expr pos:start="501:9" pos:end="501:12"><name pos:start="501:9" pos:end="501:10">po</name><operator pos:start="501:11" pos:end="501:12">++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function pos:start="505:1" pos:end="532:1"><type pos:start="505:1" pos:end="505:4"><name pos:start="505:1" pos:end="505:4">void</name></type> <name pos:start="505:6" pos:end="505:19">parse_loglevel</name><parameter_list pos:start="505:20" pos:end="505:68">(<parameter pos:start="505:21" pos:end="505:28"><decl pos:start="505:21" pos:end="505:28"><type pos:start="505:21" pos:end="505:28"><name pos:start="505:21" pos:end="505:23">int</name></type> <name pos:start="505:25" pos:end="505:28">argc</name></decl></parameter>, <parameter pos:start="505:31" pos:end="505:41"><decl pos:start="505:31" pos:end="505:41"><type pos:start="505:31" pos:end="505:41"><name pos:start="505:31" pos:end="505:34">char</name> <modifier pos:start="505:36" pos:end="505:36">*</modifier><modifier pos:start="505:37" pos:end="505:37">*</modifier></type><name pos:start="505:38" pos:end="505:41">argv</name></decl></parameter>, <parameter pos:start="505:44" pos:end="505:67"><decl pos:start="505:44" pos:end="505:67"><type pos:start="505:44" pos:end="505:67"><specifier pos:start="505:44" pos:end="505:48">const</specifier> <name pos:start="505:50" pos:end="505:58">OptionDef</name> <modifier pos:start="505:60" pos:end="505:60">*</modifier></type><name pos:start="505:61" pos:end="505:67">options</name></decl></parameter>)</parameter_list>
<block pos:start="506:1" pos:end="532:1">{<block_content pos:start="507:5" pos:end="531:24">
    <decl_stmt pos:start="507:5" pos:end="507:61"><decl pos:start="507:5" pos:end="507:60"><type pos:start="507:5" pos:end="507:7"><name pos:start="507:5" pos:end="507:7">int</name></type> <name pos:start="507:9" pos:end="507:11">idx</name> <init pos:start="507:13" pos:end="507:60">= <expr pos:start="507:15" pos:end="507:60"><call pos:start="507:15" pos:end="507:60"><name pos:start="507:15" pos:end="507:27">locate_option</name><argument_list pos:start="507:28" pos:end="507:60">(<argument pos:start="507:29" pos:end="507:32"><expr pos:start="507:29" pos:end="507:32"><name pos:start="507:29" pos:end="507:32">argc</name></expr></argument>, <argument pos:start="507:35" pos:end="507:38"><expr pos:start="507:35" pos:end="507:38"><name pos:start="507:35" pos:end="507:38">argv</name></expr></argument>, <argument pos:start="507:41" pos:end="507:47"><expr pos:start="507:41" pos:end="507:47"><name pos:start="507:41" pos:end="507:47">options</name></expr></argument>, <argument pos:start="507:50" pos:end="507:59"><expr pos:start="507:50" pos:end="507:59"><literal type="string" pos:start="507:50" pos:end="507:59">"loglevel"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="508:5" pos:end="508:20"><decl pos:start="508:5" pos:end="508:19"><type pos:start="508:5" pos:end="508:16"><specifier pos:start="508:5" pos:end="508:9">const</specifier> <name pos:start="508:11" pos:end="508:14">char</name> <modifier pos:start="508:16" pos:end="508:16">*</modifier></type><name pos:start="508:17" pos:end="508:19">env</name></decl>;</decl_stmt>

    <expr_stmt pos:start="510:5" pos:end="510:27"><expr pos:start="510:5" pos:end="510:26"><call pos:start="510:5" pos:end="510:26"><name pos:start="510:5" pos:end="510:17">check_options</name><argument_list pos:start="510:18" pos:end="510:26">(<argument pos:start="510:19" pos:end="510:25"><expr pos:start="510:19" pos:end="510:25"><name pos:start="510:19" pos:end="510:25">options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="512:5" pos:end="513:54"><if pos:start="512:5" pos:end="513:54">if <condition pos:start="512:8" pos:end="512:13">(<expr pos:start="512:9" pos:end="512:12"><operator pos:start="512:9" pos:end="512:9">!</operator><name pos:start="512:10" pos:end="512:12">idx</name></expr>)</condition><block type="pseudo" pos:start="513:9" pos:end="513:54"><block_content pos:start="513:9" pos:end="513:54">
        <expr_stmt pos:start="513:9" pos:end="513:54"><expr pos:start="513:9" pos:end="513:53"><name pos:start="513:9" pos:end="513:11">idx</name> <operator pos:start="513:13" pos:end="513:13">=</operator> <call pos:start="513:15" pos:end="513:53"><name pos:start="513:15" pos:end="513:27">locate_option</name><argument_list pos:start="513:28" pos:end="513:53">(<argument pos:start="513:29" pos:end="513:32"><expr pos:start="513:29" pos:end="513:32"><name pos:start="513:29" pos:end="513:32">argc</name></expr></argument>, <argument pos:start="513:35" pos:end="513:38"><expr pos:start="513:35" pos:end="513:38"><name pos:start="513:35" pos:end="513:38">argv</name></expr></argument>, <argument pos:start="513:41" pos:end="513:47"><expr pos:start="513:41" pos:end="513:47"><name pos:start="513:41" pos:end="513:47">options</name></expr></argument>, <argument pos:start="513:50" pos:end="513:52"><expr pos:start="513:50" pos:end="513:52"><literal type="string" pos:start="513:50" pos:end="513:52">"v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="514:5" pos:end="515:54"><if pos:start="514:5" pos:end="515:54">if <condition pos:start="514:8" pos:end="514:29">(<expr pos:start="514:9" pos:end="514:28"><name pos:start="514:9" pos:end="514:11">idx</name> <operator pos:start="514:13" pos:end="514:14">&amp;&amp;</operator> <name pos:start="514:16" pos:end="514:28"><name pos:start="514:16" pos:end="514:19">argv</name><index pos:start="514:20" pos:end="514:28">[<expr pos:start="514:21" pos:end="514:27"><name pos:start="514:21" pos:end="514:23">idx</name> <operator pos:start="514:25" pos:end="514:25">+</operator> <literal type="number" pos:start="514:27" pos:end="514:27">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="515:9" pos:end="515:54"><block_content pos:start="515:9" pos:end="515:54">
        <expr_stmt pos:start="515:9" pos:end="515:54"><expr pos:start="515:9" pos:end="515:53"><call pos:start="515:9" pos:end="515:53"><name pos:start="515:9" pos:end="515:20">opt_loglevel</name><argument_list pos:start="515:21" pos:end="515:53">(<argument pos:start="515:22" pos:end="515:25"><expr pos:start="515:22" pos:end="515:25"><name pos:start="515:22" pos:end="515:25">NULL</name></expr></argument>, <argument pos:start="515:28" pos:end="515:37"><expr pos:start="515:28" pos:end="515:37"><literal type="string" pos:start="515:28" pos:end="515:37">"loglevel"</literal></expr></argument>, <argument pos:start="515:40" pos:end="515:52"><expr pos:start="515:40" pos:end="515:52"><name pos:start="515:40" pos:end="515:52"><name pos:start="515:40" pos:end="515:43">argv</name><index pos:start="515:44" pos:end="515:52">[<expr pos:start="515:45" pos:end="515:51"><name pos:start="515:45" pos:end="515:47">idx</name> <operator pos:start="515:49" pos:end="515:49">+</operator> <literal type="number" pos:start="515:51" pos:end="515:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="516:5" pos:end="516:55"><expr pos:start="516:5" pos:end="516:54"><name pos:start="516:5" pos:end="516:7">idx</name> <operator pos:start="516:9" pos:end="516:9">=</operator> <call pos:start="516:11" pos:end="516:54"><name pos:start="516:11" pos:end="516:23">locate_option</name><argument_list pos:start="516:24" pos:end="516:54">(<argument pos:start="516:25" pos:end="516:28"><expr pos:start="516:25" pos:end="516:28"><name pos:start="516:25" pos:end="516:28">argc</name></expr></argument>, <argument pos:start="516:31" pos:end="516:34"><expr pos:start="516:31" pos:end="516:34"><name pos:start="516:31" pos:end="516:34">argv</name></expr></argument>, <argument pos:start="516:37" pos:end="516:43"><expr pos:start="516:37" pos:end="516:43"><name pos:start="516:37" pos:end="516:43">options</name></expr></argument>, <argument pos:start="516:46" pos:end="516:53"><expr pos:start="516:46" pos:end="516:53"><literal type="string" pos:start="516:46" pos:end="516:53">"report"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="517:5" pos:end="528:5"><if pos:start="517:5" pos:end="528:5">if <condition pos:start="517:8" pos:end="517:42">(<expr pos:start="517:9" pos:end="517:41"><operator pos:start="517:9" pos:end="517:9">(</operator><name pos:start="517:10" pos:end="517:12">env</name> <operator pos:start="517:14" pos:end="517:14">=</operator> <call pos:start="517:16" pos:end="517:33"><name pos:start="517:16" pos:end="517:21">getenv</name><argument_list pos:start="517:22" pos:end="517:33">(<argument pos:start="517:23" pos:end="517:32"><expr pos:start="517:23" pos:end="517:32"><literal type="string" pos:start="517:23" pos:end="517:32">"FFREPORT"</literal></expr></argument>)</argument_list></call><operator pos:start="517:34" pos:end="517:34">)</operator> <operator pos:start="517:36" pos:end="517:37">||</operator> <name pos:start="517:39" pos:end="517:41">idx</name></expr>)</condition> <block pos:start="517:44" pos:end="528:5">{<block_content pos:start="518:9" pos:end="527:9">
        <expr_stmt pos:start="518:9" pos:end="518:25"><expr pos:start="518:9" pos:end="518:24"><call pos:start="518:9" pos:end="518:24"><name pos:start="518:9" pos:end="518:19">init_report</name><argument_list pos:start="518:20" pos:end="518:24">(<argument pos:start="518:21" pos:end="518:23"><expr pos:start="518:21" pos:end="518:23"><name pos:start="518:21" pos:end="518:23">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="519:9" pos:end="527:9"><if pos:start="519:9" pos:end="527:9">if <condition pos:start="519:12" pos:end="519:24">(<expr pos:start="519:13" pos:end="519:23"><name pos:start="519:13" pos:end="519:23">report_file</name></expr>)</condition> <block pos:start="519:26" pos:end="527:9">{<block_content pos:start="520:13" pos:end="526:32">
            <decl_stmt pos:start="520:13" pos:end="520:18"><decl pos:start="520:13" pos:end="520:17"><type pos:start="520:13" pos:end="520:15"><name pos:start="520:13" pos:end="520:15">int</name></type> <name pos:start="520:17" pos:end="520:17">i</name></decl>;</decl_stmt>
            <expr_stmt pos:start="521:13" pos:end="521:52"><expr pos:start="521:13" pos:end="521:51"><call pos:start="521:13" pos:end="521:51"><name pos:start="521:13" pos:end="521:19">fprintf</name><argument_list pos:start="521:20" pos:end="521:51">(<argument pos:start="521:21" pos:end="521:31"><expr pos:start="521:21" pos:end="521:31"><name pos:start="521:21" pos:end="521:31">report_file</name></expr></argument>, <argument pos:start="521:34" pos:end="521:50"><expr pos:start="521:34" pos:end="521:50"><literal type="string" pos:start="521:34" pos:end="521:50">"Command line:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for pos:start="522:13" pos:end="525:13">for <control pos:start="522:17" pos:end="522:38">(<init pos:start="522:18" pos:end="522:23"><expr pos:start="522:18" pos:end="522:22"><name pos:start="522:18" pos:end="522:18">i</name> <operator pos:start="522:20" pos:end="522:20">=</operator> <literal type="number" pos:start="522:22" pos:end="522:22">0</literal></expr>;</init> <condition pos:start="522:25" pos:end="522:33"><expr pos:start="522:25" pos:end="522:32"><name pos:start="522:25" pos:end="522:25">i</name> <operator pos:start="522:27" pos:end="522:27">&lt;</operator> <name pos:start="522:29" pos:end="522:32">argc</name></expr>;</condition> <incr pos:start="522:35" pos:end="522:37"><expr pos:start="522:35" pos:end="522:37"><name pos:start="522:35" pos:end="522:35">i</name><operator pos:start="522:36" pos:end="522:37">++</operator></expr></incr>)</control> <block pos:start="522:40" pos:end="525:13">{<block_content pos:start="523:17" pos:end="524:62">
                <expr_stmt pos:start="523:17" pos:end="523:39"><expr pos:start="523:17" pos:end="523:38"><call pos:start="523:17" pos:end="523:38"><name pos:start="523:17" pos:end="523:29">dump_argument</name><argument_list pos:start="523:30" pos:end="523:38">(<argument pos:start="523:31" pos:end="523:37"><expr pos:start="523:31" pos:end="523:37"><name pos:start="523:31" pos:end="523:37"><name pos:start="523:31" pos:end="523:34">argv</name><index pos:start="523:35" pos:end="523:37">[<expr pos:start="523:36" pos:end="523:36"><name pos:start="523:36" pos:end="523:36">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="524:17" pos:end="524:62"><expr pos:start="524:17" pos:end="524:61"><call pos:start="524:17" pos:end="524:61"><name pos:start="524:17" pos:end="524:21">fputc</name><argument_list pos:start="524:22" pos:end="524:61">(<argument pos:start="524:23" pos:end="524:47"><expr pos:start="524:23" pos:end="524:47"><ternary pos:start="524:23" pos:end="524:47"><condition pos:start="524:23" pos:end="524:36"><expr pos:start="524:23" pos:end="524:34"><name pos:start="524:23" pos:end="524:23">i</name> <operator pos:start="524:25" pos:end="524:25">&lt;</operator> <name pos:start="524:27" pos:end="524:30">argc</name> <operator pos:start="524:32" pos:end="524:32">-</operator> <literal type="number" pos:start="524:34" pos:end="524:34">1</literal></expr> ?</condition><then pos:start="524:38" pos:end="524:40"> <expr pos:start="524:38" pos:end="524:40"><literal type="char" pos:start="524:38" pos:end="524:40">' '</literal></expr> </then><else pos:start="524:42" pos:end="524:47">: <expr pos:start="524:44" pos:end="524:47"><literal type="char" pos:start="524:44" pos:end="524:47">'\n'</literal></expr></else></ternary></expr></argument>, <argument pos:start="524:50" pos:end="524:60"><expr pos:start="524:50" pos:end="524:60"><name pos:start="524:50" pos:end="524:60">report_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt pos:start="526:13" pos:end="526:32"><expr pos:start="526:13" pos:end="526:31"><call pos:start="526:13" pos:end="526:31"><name pos:start="526:13" pos:end="526:18">fflush</name><argument_list pos:start="526:19" pos:end="526:31">(<argument pos:start="526:20" pos:end="526:30"><expr pos:start="526:20" pos:end="526:30"><name pos:start="526:20" pos:end="526:30">report_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="529:5" pos:end="529:60"><expr pos:start="529:5" pos:end="529:59"><name pos:start="529:5" pos:end="529:7">idx</name> <operator pos:start="529:9" pos:end="529:9">=</operator> <call pos:start="529:11" pos:end="529:59"><name pos:start="529:11" pos:end="529:23">locate_option</name><argument_list pos:start="529:24" pos:end="529:59">(<argument pos:start="529:25" pos:end="529:28"><expr pos:start="529:25" pos:end="529:28"><name pos:start="529:25" pos:end="529:28">argc</name></expr></argument>, <argument pos:start="529:31" pos:end="529:34"><expr pos:start="529:31" pos:end="529:34"><name pos:start="529:31" pos:end="529:34">argv</name></expr></argument>, <argument pos:start="529:37" pos:end="529:43"><expr pos:start="529:37" pos:end="529:43"><name pos:start="529:37" pos:end="529:43">options</name></expr></argument>, <argument pos:start="529:46" pos:end="529:58"><expr pos:start="529:46" pos:end="529:58"><literal type="string" pos:start="529:46" pos:end="529:58">"hide_banner"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="530:5" pos:end="531:24"><if pos:start="530:5" pos:end="531:24">if <condition pos:start="530:8" pos:end="530:12">(<expr pos:start="530:9" pos:end="530:11"><name pos:start="530:9" pos:end="530:11">idx</name></expr>)</condition><block type="pseudo" pos:start="531:9" pos:end="531:24"><block_content pos:start="531:9" pos:end="531:24">
        <expr_stmt pos:start="531:9" pos:end="531:24"><expr pos:start="531:9" pos:end="531:23"><name pos:start="531:9" pos:end="531:19">hide_banner</name> <operator pos:start="531:21" pos:end="531:21">=</operator> <literal type="number" pos:start="531:23" pos:end="531:23">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function pos:start="534:1" pos:end="544:0"><type pos:start="534:1" pos:end="534:23"><specifier pos:start="534:1" pos:end="534:6">static</specifier> <specifier pos:start="534:8" pos:end="534:12">const</specifier> <name pos:start="534:14" pos:end="534:21">AVOption</name> <modifier pos:start="534:23" pos:end="534:23">*</modifier></type><name pos:start="534:24" pos:end="534:31">opt_find</name><parameter_list pos:start="534:32" pos:end="535:60">(<parameter pos:start="534:33" pos:end="534:41"><decl pos:start="534:33" pos:end="534:41"><type pos:start="534:33" pos:end="534:41"><name pos:start="534:33" pos:end="534:36">void</name> <modifier pos:start="534:38" pos:end="534:38">*</modifier></type><name pos:start="534:39" pos:end="534:41">obj</name></decl></parameter>, <parameter pos:start="534:44" pos:end="534:59"><decl pos:start="534:44" pos:end="534:59"><type pos:start="534:44" pos:end="534:59"><specifier pos:start="534:44" pos:end="534:48">const</specifier> <name pos:start="534:50" pos:end="534:53">char</name> <modifier pos:start="534:55" pos:end="534:55">*</modifier></type><name pos:start="534:56" pos:end="534:59">name</name></decl></parameter>, <parameter pos:start="534:62" pos:end="534:77"><decl pos:start="534:62" pos:end="534:77"><type pos:start="534:62" pos:end="534:77"><specifier pos:start="534:62" pos:end="534:66">const</specifier> <name pos:start="534:68" pos:end="534:71">char</name> <modifier pos:start="534:73" pos:end="534:73">*</modifier></type><name pos:start="534:74" pos:end="534:77">unit</name></decl></parameter>,
                            <parameter pos:start="535:29" pos:end="535:41"><decl pos:start="535:29" pos:end="535:41"><type pos:start="535:29" pos:end="535:41"><name pos:start="535:29" pos:end="535:31">int</name></type> <name pos:start="535:33" pos:end="535:41">opt_flags</name></decl></parameter>, <parameter pos:start="535:44" pos:end="535:59"><decl pos:start="535:44" pos:end="535:59"><type pos:start="535:44" pos:end="535:59"><name pos:start="535:44" pos:end="535:46">int</name></type> <name pos:start="535:48" pos:end="535:59">search_flags</name></decl></parameter>)</parameter_list>
<block pos:start="536:1" pos:end="544:0">{<block_content pos:start="537:5" pos:end="540:13">
    <decl_stmt pos:start="537:5" pos:end="537:78"><decl pos:start="537:5" pos:end="537:77"><type pos:start="537:5" pos:end="537:20"><specifier pos:start="537:5" pos:end="537:9">const</specifier> <name pos:start="537:11" pos:end="537:18">AVOption</name> <modifier pos:start="537:20" pos:end="537:20">*</modifier></type><name pos:start="537:21" pos:end="537:21">o</name> <init pos:start="537:23" pos:end="537:77">= <expr pos:start="537:25" pos:end="537:77"><call pos:start="537:25" pos:end="537:77"><name pos:start="537:25" pos:end="537:35">av_opt_find</name><argument_list pos:start="537:36" pos:end="537:77">(<argument pos:start="537:37" pos:end="537:39"><expr pos:start="537:37" pos:end="537:39"><name pos:start="537:37" pos:end="537:39">obj</name></expr></argument>, <argument pos:start="537:42" pos:end="537:45"><expr pos:start="537:42" pos:end="537:45"><name pos:start="537:42" pos:end="537:45">name</name></expr></argument>, <argument pos:start="537:48" pos:end="537:51"><expr pos:start="537:48" pos:end="537:51"><name pos:start="537:48" pos:end="537:51">unit</name></expr></argument>, <argument pos:start="537:54" pos:end="537:62"><expr pos:start="537:54" pos:end="537:62"><name pos:start="537:54" pos:end="537:62">opt_flags</name></expr></argument>, <argument pos:start="537:65" pos:end="537:76"><expr pos:start="537:65" pos:end="537:76"><name pos:start="537:65" pos:end="537:76">search_flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="538:5" pos:end="539:20"><if pos:start="538:5" pos:end="539:20">if<condition pos:start="538:7" pos:end="538:22">(<expr pos:start="538:8" pos:end="538:21"><name pos:start="538:8" pos:end="538:8">o</name> <operator pos:start="538:10" pos:end="538:11">&amp;&amp;</operator> <operator pos:start="538:13" pos:end="538:13">!</operator><name pos:start="538:14" pos:end="538:21"><name pos:start="538:14" pos:end="538:14">o</name><operator pos:start="538:15" pos:end="538:16">-&gt;</operator><name pos:start="538:17" pos:end="538:21">flags</name></name></expr>)</condition><block type="pseudo" pos:start="539:9" pos:end="539:20"><block_content pos:start="539:9" pos:end="539:20">
        <return pos:start="539:9" pos:end="539:20">return <expr pos:start="539:16" pos:end="539:19"><name pos:start="539:16" pos:end="539:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <return pos:start="540:5" pos:end="540:13">return <expr pos:start="540:12" pos:end="540:12"><name pos:start="540:12" pos:end="540:12">o</name></expr>;</return>
</block_content>}</block></function>

<cpp:define pos:start="543:1" pos:end="543:97">#<cpp:directive pos:start="543:2" pos:end="543:7">define</cpp:directive> <cpp:macro pos:start="543:9" pos:end="543:13"><name pos:start="543:9" pos:end="543:13">FLAGS</name></cpp:macro> <cpp:value pos:start="543:15" pos:end="543:97">(o-&gt;type == AV_OPT_TYPE_FLAGS &amp;&amp; (arg[0]=='-' || arg[0]=='+')) ? AV_DICT_APPEND : 0</cpp:value></cpp:define>
<function pos:start="544:1" pos:end="634:1"><type pos:start="544:1" pos:end="544:3"><name pos:start="544:1" pos:end="544:3">int</name></type> <name pos:start="544:5" pos:end="544:15">opt_default</name><parameter_list pos:start="544:16" pos:end="544:63">(<parameter pos:start="544:17" pos:end="544:28"><decl pos:start="544:17" pos:end="544:28"><type pos:start="544:17" pos:end="544:28"><name pos:start="544:17" pos:end="544:20">void</name> <modifier pos:start="544:22" pos:end="544:22">*</modifier></type><name pos:start="544:23" pos:end="544:28">optctx</name></decl></parameter>, <parameter pos:start="544:31" pos:end="544:45"><decl pos:start="544:31" pos:end="544:45"><type pos:start="544:31" pos:end="544:45"><specifier pos:start="544:31" pos:end="544:35">const</specifier> <name pos:start="544:37" pos:end="544:40">char</name> <modifier pos:start="544:42" pos:end="544:42">*</modifier></type><name pos:start="544:43" pos:end="544:45">opt</name></decl></parameter>, <parameter pos:start="544:48" pos:end="544:62"><decl pos:start="544:48" pos:end="544:62"><type pos:start="544:48" pos:end="544:62"><specifier pos:start="544:48" pos:end="544:52">const</specifier> <name pos:start="544:54" pos:end="544:57">char</name> <modifier pos:start="544:59" pos:end="544:59">*</modifier></type><name pos:start="544:60" pos:end="544:62">arg</name></decl></parameter>)</parameter_list>
<block pos:start="545:1" pos:end="634:1">{<block_content pos:start="546:5" pos:end="633:36">
    <decl_stmt pos:start="546:5" pos:end="546:22"><decl pos:start="546:5" pos:end="546:21"><type pos:start="546:5" pos:end="546:20"><specifier pos:start="546:5" pos:end="546:9">const</specifier> <name pos:start="546:11" pos:end="546:18">AVOption</name> <modifier pos:start="546:20" pos:end="546:20">*</modifier></type><name pos:start="546:21" pos:end="546:21">o</name></decl>;</decl_stmt>
    <decl_stmt pos:start="547:5" pos:end="547:21"><decl pos:start="547:5" pos:end="547:20"><type pos:start="547:5" pos:end="547:7"><name pos:start="547:5" pos:end="547:7">int</name></type> <name pos:start="547:9" pos:end="547:16">consumed</name> <init pos:start="547:18" pos:end="547:20">= <expr pos:start="547:20" pos:end="547:20"><literal type="number" pos:start="547:20" pos:end="547:20">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="548:5" pos:end="548:27"><decl pos:start="548:5" pos:end="548:26"><type pos:start="548:5" pos:end="548:8"><name pos:start="548:5" pos:end="548:8">char</name></type> <name pos:start="548:10" pos:end="548:26"><name pos:start="548:10" pos:end="548:21">opt_stripped</name><index pos:start="548:22" pos:end="548:26">[<expr pos:start="548:23" pos:end="548:25"><literal type="number" pos:start="548:23" pos:end="548:25">128</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="549:5" pos:end="549:18"><decl pos:start="549:5" pos:end="549:17"><type pos:start="549:5" pos:end="549:16"><specifier pos:start="549:5" pos:end="549:9">const</specifier> <name pos:start="549:11" pos:end="549:14">char</name> <modifier pos:start="549:16" pos:end="549:16">*</modifier></type><name pos:start="549:17" pos:end="549:17">p</name></decl>;</decl_stmt>
    <decl_stmt pos:start="550:5" pos:end="552:0"><decl pos:start="550:5" pos:end="550:43"><type pos:start="550:5" pos:end="550:19"><specifier pos:start="550:5" pos:end="550:9">const</specifier> <name pos:start="550:11" pos:end="550:17">AVClass</name> <modifier pos:start="550:19" pos:end="550:19">*</modifier></type><name pos:start="550:20" pos:end="550:21">cc</name> <init pos:start="550:23" pos:end="550:43">= <expr pos:start="550:25" pos:end="550:43"><call pos:start="550:25" pos:end="550:43"><name pos:start="550:25" pos:end="550:41">avcodec_get_class</name><argument_list pos:start="550:42" pos:end="550:43">()</argument_list></call></expr></init></decl>, <decl pos:start="550:46" pos:end="550:71"><type ref="prev" pos:start="550:5" pos:end="550:19"><modifier pos:start="550:46" pos:end="550:46">*</modifier></type><name pos:start="550:47" pos:end="550:48">fc</name> <init pos:start="550:50" pos:end="550:71">= <expr pos:start="550:52" pos:end="550:71"><call pos:start="550:52" pos:end="550:71"><name pos:start="550:52" pos:end="550:69">avformat_get_class</name><argument_list pos:start="550:70" pos:end="550:71">()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if pos:start="551:1" pos:end="551:21">#<cpp:directive pos:start="551:2" pos:end="551:3">if</cpp:directive> <expr pos:start="551:5" pos:end="551:21"><name pos:start="551:5" pos:end="551:21">CONFIG_AVRESAMPLE</name></expr></cpp:if>
    <decl_stmt pos:start="552:5" pos:end="555:0"><decl pos:start="552:5" pos:end="552:46"><type pos:start="552:5" pos:end="552:19"><specifier pos:start="552:5" pos:end="552:9">const</specifier> <name pos:start="552:11" pos:end="552:17">AVClass</name> <modifier pos:start="552:19" pos:end="552:19">*</modifier></type><name pos:start="552:20" pos:end="552:21">rc</name> <init pos:start="552:23" pos:end="552:46">= <expr pos:start="552:25" pos:end="552:46"><call pos:start="552:25" pos:end="552:46"><name pos:start="552:25" pos:end="552:44">avresample_get_class</name><argument_list pos:start="552:45" pos:end="552:46">()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif pos:start="553:1" pos:end="553:6">#<cpp:directive pos:start="553:2" pos:end="553:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="554:1" pos:end="554:18">#<cpp:directive pos:start="554:2" pos:end="554:3">if</cpp:directive> <expr pos:start="554:5" pos:end="554:18"><name pos:start="554:5" pos:end="554:18">CONFIG_SWSCALE</name></expr></cpp:if>
    <decl_stmt pos:start="555:5" pos:end="558:0"><decl pos:start="555:5" pos:end="555:39"><type pos:start="555:5" pos:end="555:19"><specifier pos:start="555:5" pos:end="555:9">const</specifier> <name pos:start="555:11" pos:end="555:17">AVClass</name> <modifier pos:start="555:19" pos:end="555:19">*</modifier></type><name pos:start="555:20" pos:end="555:21">sc</name> <init pos:start="555:23" pos:end="555:39">= <expr pos:start="555:25" pos:end="555:39"><call pos:start="555:25" pos:end="555:39"><name pos:start="555:25" pos:end="555:37">sws_get_class</name><argument_list pos:start="555:38" pos:end="555:39">()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif pos:start="556:1" pos:end="556:6">#<cpp:directive pos:start="556:2" pos:end="556:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="557:1" pos:end="557:21">#<cpp:directive pos:start="557:2" pos:end="557:3">if</cpp:directive> <expr pos:start="557:5" pos:end="557:21"><name pos:start="557:5" pos:end="557:21">CONFIG_SWRESAMPLE</name></expr></cpp:if>
    <decl_stmt pos:start="558:5" pos:end="560:0"><decl pos:start="558:5" pos:end="558:46"><type pos:start="558:5" pos:end="558:19"><specifier pos:start="558:5" pos:end="558:9">const</specifier> <name pos:start="558:11" pos:end="558:17">AVClass</name> <modifier pos:start="558:19" pos:end="558:19">*</modifier></type><name pos:start="558:20" pos:end="558:28">swr_class</name> <init pos:start="558:30" pos:end="558:46">= <expr pos:start="558:32" pos:end="558:46"><call pos:start="558:32" pos:end="558:46"><name pos:start="558:32" pos:end="558:44">swr_get_class</name><argument_list pos:start="558:45" pos:end="558:46">()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif pos:start="559:1" pos:end="559:6">#<cpp:directive pos:start="559:2" pos:end="559:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="561:5" pos:end="562:39"><if pos:start="561:5" pos:end="562:39">if <condition pos:start="561:8" pos:end="561:56">(<expr pos:start="561:9" pos:end="561:55"><operator pos:start="561:9" pos:end="561:9">!</operator><call pos:start="561:10" pos:end="561:29"><name pos:start="561:10" pos:end="561:15">strcmp</name><argument_list pos:start="561:16" pos:end="561:29">(<argument pos:start="561:17" pos:end="561:19"><expr pos:start="561:17" pos:end="561:19"><name pos:start="561:17" pos:end="561:19">opt</name></expr></argument>, <argument pos:start="561:22" pos:end="561:28"><expr pos:start="561:22" pos:end="561:28"><literal type="string" pos:start="561:22" pos:end="561:28">"debug"</literal></expr></argument>)</argument_list></call> <operator pos:start="561:31" pos:end="561:32">||</operator> <operator pos:start="561:34" pos:end="561:34">!</operator><call pos:start="561:35" pos:end="561:55"><name pos:start="561:35" pos:end="561:40">strcmp</name><argument_list pos:start="561:41" pos:end="561:55">(<argument pos:start="561:42" pos:end="561:44"><expr pos:start="561:42" pos:end="561:44"><name pos:start="561:42" pos:end="561:44">opt</name></expr></argument>, <argument pos:start="561:47" pos:end="561:54"><expr pos:start="561:47" pos:end="561:54"><literal type="string" pos:start="561:47" pos:end="561:54">"fdebug"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="562:9" pos:end="562:39"><block_content pos:start="562:9" pos:end="562:39">
        <expr_stmt pos:start="562:9" pos:end="562:39"><expr pos:start="562:9" pos:end="562:38"><call pos:start="562:9" pos:end="562:38"><name pos:start="562:9" pos:end="562:24">av_log_set_level</name><argument_list pos:start="562:25" pos:end="562:38">(<argument pos:start="562:26" pos:end="562:37"><expr pos:start="562:26" pos:end="562:37"><name pos:start="562:26" pos:end="562:37">AV_LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="564:5" pos:end="565:30"><if pos:start="564:5" pos:end="565:30">if <condition pos:start="564:8" pos:end="564:32">(<expr pos:start="564:9" pos:end="564:31"><operator pos:start="564:9" pos:end="564:9">!</operator><operator pos:start="564:10" pos:end="564:10">(</operator><name pos:start="564:11" pos:end="564:11">p</name> <operator pos:start="564:13" pos:end="564:13">=</operator> <call pos:start="564:15" pos:end="564:30"><name pos:start="564:15" pos:end="564:20">strchr</name><argument_list pos:start="564:21" pos:end="564:30">(<argument pos:start="564:22" pos:end="564:24"><expr pos:start="564:22" pos:end="564:24"><name pos:start="564:22" pos:end="564:24">opt</name></expr></argument>, <argument pos:start="564:27" pos:end="564:29"><expr pos:start="564:27" pos:end="564:29"><literal type="char" pos:start="564:27" pos:end="564:29">':'</literal></expr></argument>)</argument_list></call><operator pos:start="564:31" pos:end="564:31">)</operator></expr>)</condition><block type="pseudo" pos:start="565:9" pos:end="565:30"><block_content pos:start="565:9" pos:end="565:30">
        <expr_stmt pos:start="565:9" pos:end="565:30"><expr pos:start="565:9" pos:end="565:29"><name pos:start="565:9" pos:end="565:9">p</name> <operator pos:start="565:11" pos:end="565:11">=</operator> <name pos:start="565:13" pos:end="565:15">opt</name> <operator pos:start="565:17" pos:end="565:17">+</operator> <call pos:start="565:19" pos:end="565:29"><name pos:start="565:19" pos:end="565:24">strlen</name><argument_list pos:start="565:25" pos:end="565:29">(<argument pos:start="565:26" pos:end="565:28"><expr pos:start="565:26" pos:end="565:28"><name pos:start="565:26" pos:end="565:28">opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="566:5" pos:end="566:76"><expr pos:start="566:5" pos:end="566:75"><call pos:start="566:5" pos:end="566:75"><name pos:start="566:5" pos:end="566:14">av_strlcpy</name><argument_list pos:start="566:15" pos:end="566:75">(<argument pos:start="566:16" pos:end="566:27"><expr pos:start="566:16" pos:end="566:27"><name pos:start="566:16" pos:end="566:27">opt_stripped</name></expr></argument>, <argument pos:start="566:30" pos:end="566:32"><expr pos:start="566:30" pos:end="566:32"><name pos:start="566:30" pos:end="566:32">opt</name></expr></argument>, <argument pos:start="566:35" pos:end="566:74"><expr pos:start="566:35" pos:end="566:74"><call pos:start="566:35" pos:end="566:74"><name pos:start="566:35" pos:end="566:39">FFMIN</name><argument_list pos:start="566:40" pos:end="566:74">(<argument pos:start="566:41" pos:end="566:60"><expr pos:start="566:41" pos:end="566:60"><sizeof pos:start="566:41" pos:end="566:60">sizeof<argument_list pos:start="566:47" pos:end="566:60">(<argument pos:start="566:48" pos:end="566:59"><expr pos:start="566:48" pos:end="566:59"><name pos:start="566:48" pos:end="566:59">opt_stripped</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="566:63" pos:end="566:73"><expr pos:start="566:63" pos:end="566:73"><name pos:start="566:63" pos:end="566:63">p</name> <operator pos:start="566:65" pos:end="566:65">-</operator> <name pos:start="566:67" pos:end="566:69">opt</name> <operator pos:start="566:71" pos:end="566:71">+</operator> <literal type="number" pos:start="566:73" pos:end="566:73">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="568:5" pos:end="574:5"><if pos:start="568:5" pos:end="574:5">if <condition pos:start="568:8" pos:end="571:72">(<expr pos:start="568:9" pos:end="571:71"><operator pos:start="568:9" pos:end="568:9">(</operator><name pos:start="568:10" pos:end="568:10">o</name> <operator pos:start="568:12" pos:end="568:12">=</operator> <call pos:start="568:14" pos:end="569:73"><name pos:start="568:14" pos:end="568:21">opt_find</name><argument_list pos:start="568:22" pos:end="569:73">(<argument pos:start="568:23" pos:end="568:25"><expr pos:start="568:23" pos:end="568:25"><operator pos:start="568:23" pos:end="568:23">&amp;</operator><name pos:start="568:24" pos:end="568:25">cc</name></expr></argument>, <argument pos:start="568:28" pos:end="568:39"><expr pos:start="568:28" pos:end="568:39"><name pos:start="568:28" pos:end="568:39">opt_stripped</name></expr></argument>, <argument pos:start="568:42" pos:end="568:45"><expr pos:start="568:42" pos:end="568:45"><name pos:start="568:42" pos:end="568:45">NULL</name></expr></argument>, <argument pos:start="568:48" pos:end="568:48"><expr pos:start="568:48" pos:end="568:48"><literal type="number" pos:start="568:48" pos:end="568:48">0</literal></expr></argument>,
                         <argument pos:start="569:26" pos:end="569:72"><expr pos:start="569:26" pos:end="569:72"><name pos:start="569:26" pos:end="569:47">AV_OPT_SEARCH_CHILDREN</name> <operator pos:start="569:49" pos:end="569:49">|</operator> <name pos:start="569:51" pos:end="569:72">AV_OPT_SEARCH_FAKE_OBJ</name></expr></argument>)</argument_list></call><operator pos:start="569:74" pos:end="569:74">)</operator> <operator pos:start="569:76" pos:end="569:77">||</operator>
        <operator pos:start="570:9" pos:end="570:9">(</operator><operator pos:start="570:10" pos:end="570:10">(</operator><name pos:start="570:11" pos:end="570:16"><name pos:start="570:11" pos:end="570:13">opt</name><index pos:start="570:14" pos:end="570:16">[<expr pos:start="570:15" pos:end="570:15"><literal type="number" pos:start="570:15" pos:end="570:15">0</literal></expr>]</index></name> <operator pos:start="570:18" pos:end="570:19">==</operator> <literal type="char" pos:start="570:21" pos:end="570:23">'v'</literal> <operator pos:start="570:25" pos:end="570:26">||</operator> <name pos:start="570:28" pos:end="570:33"><name pos:start="570:28" pos:end="570:30">opt</name><index pos:start="570:31" pos:end="570:33">[<expr pos:start="570:32" pos:end="570:32"><literal type="number" pos:start="570:32" pos:end="570:32">0</literal></expr>]</index></name> <operator pos:start="570:35" pos:end="570:36">==</operator> <literal type="char" pos:start="570:38" pos:end="570:40">'a'</literal> <operator pos:start="570:42" pos:end="570:43">||</operator> <name pos:start="570:45" pos:end="570:50"><name pos:start="570:45" pos:end="570:47">opt</name><index pos:start="570:48" pos:end="570:50">[<expr pos:start="570:49" pos:end="570:49"><literal type="number" pos:start="570:49" pos:end="570:49">0</literal></expr>]</index></name> <operator pos:start="570:52" pos:end="570:53">==</operator> <literal type="char" pos:start="570:55" pos:end="570:57">'s'</literal><operator pos:start="570:58" pos:end="570:58">)</operator> <operator pos:start="570:60" pos:end="570:61">&amp;&amp;</operator>
         <operator pos:start="571:10" pos:end="571:10">(</operator><name pos:start="571:11" pos:end="571:11">o</name> <operator pos:start="571:13" pos:end="571:13">=</operator> <call pos:start="571:15" pos:end="571:69"><name pos:start="571:15" pos:end="571:22">opt_find</name><argument_list pos:start="571:23" pos:end="571:69">(<argument pos:start="571:24" pos:end="571:26"><expr pos:start="571:24" pos:end="571:26"><operator pos:start="571:24" pos:end="571:24">&amp;</operator><name pos:start="571:25" pos:end="571:26">cc</name></expr></argument>, <argument pos:start="571:29" pos:end="571:35"><expr pos:start="571:29" pos:end="571:35"><name pos:start="571:29" pos:end="571:31">opt</name> <operator pos:start="571:33" pos:end="571:33">+</operator> <literal type="number" pos:start="571:35" pos:end="571:35">1</literal></expr></argument>, <argument pos:start="571:38" pos:end="571:41"><expr pos:start="571:38" pos:end="571:41"><name pos:start="571:38" pos:end="571:41">NULL</name></expr></argument>, <argument pos:start="571:44" pos:end="571:44"><expr pos:start="571:44" pos:end="571:44"><literal type="number" pos:start="571:44" pos:end="571:44">0</literal></expr></argument>, <argument pos:start="571:47" pos:end="571:68"><expr pos:start="571:47" pos:end="571:68"><name pos:start="571:47" pos:end="571:68">AV_OPT_SEARCH_FAKE_OBJ</name></expr></argument>)</argument_list></call><operator pos:start="571:70" pos:end="571:70">)</operator><operator pos:start="571:71" pos:end="571:71">)</operator></expr>)</condition> <block pos:start="571:74" pos:end="574:5">{<block_content pos:start="572:9" pos:end="573:21">
        <expr_stmt pos:start="572:9" pos:end="572:50"><expr pos:start="572:9" pos:end="572:49"><call pos:start="572:9" pos:end="572:49"><name pos:start="572:9" pos:end="572:19">av_dict_set</name><argument_list pos:start="572:20" pos:end="572:49">(<argument pos:start="572:21" pos:end="572:31"><expr pos:start="572:21" pos:end="572:31"><operator pos:start="572:21" pos:end="572:21">&amp;</operator><name pos:start="572:22" pos:end="572:31">codec_opts</name></expr></argument>, <argument pos:start="572:34" pos:end="572:36"><expr pos:start="572:34" pos:end="572:36"><name pos:start="572:34" pos:end="572:36">opt</name></expr></argument>, <argument pos:start="572:39" pos:end="572:41"><expr pos:start="572:39" pos:end="572:41"><name pos:start="572:39" pos:end="572:41">arg</name></expr></argument>, <argument pos:start="572:44" pos:end="572:48"><expr pos:start="572:44" pos:end="572:48"><name pos:start="572:44" pos:end="572:48">FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="573:9" pos:end="573:21"><expr pos:start="573:9" pos:end="573:20"><name pos:start="573:9" pos:end="573:16">consumed</name> <operator pos:start="573:18" pos:end="573:18">=</operator> <literal type="number" pos:start="573:20" pos:end="573:20">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="575:5" pos:end="583:0"><if pos:start="575:5" pos:end="583:0">if <condition pos:start="575:8" pos:end="576:75">(<expr pos:start="575:9" pos:end="576:74"><operator pos:start="575:9" pos:end="575:9">(</operator><name pos:start="575:10" pos:end="575:10">o</name> <operator pos:start="575:12" pos:end="575:12">=</operator> <call pos:start="575:14" pos:end="576:73"><name pos:start="575:14" pos:end="575:21">opt_find</name><argument_list pos:start="575:22" pos:end="576:73">(<argument pos:start="575:23" pos:end="575:25"><expr pos:start="575:23" pos:end="575:25"><operator pos:start="575:23" pos:end="575:23">&amp;</operator><name pos:start="575:24" pos:end="575:25">fc</name></expr></argument>, <argument pos:start="575:28" pos:end="575:30"><expr pos:start="575:28" pos:end="575:30"><name pos:start="575:28" pos:end="575:30">opt</name></expr></argument>, <argument pos:start="575:33" pos:end="575:36"><expr pos:start="575:33" pos:end="575:36"><name pos:start="575:33" pos:end="575:36">NULL</name></expr></argument>, <argument pos:start="575:39" pos:end="575:39"><expr pos:start="575:39" pos:end="575:39"><literal type="number" pos:start="575:39" pos:end="575:39">0</literal></expr></argument>,
                         <argument pos:start="576:26" pos:end="576:72"><expr pos:start="576:26" pos:end="576:72"><name pos:start="576:26" pos:end="576:47">AV_OPT_SEARCH_CHILDREN</name> <operator pos:start="576:49" pos:end="576:49">|</operator> <name pos:start="576:51" pos:end="576:72">AV_OPT_SEARCH_FAKE_OBJ</name></expr></argument>)</argument_list></call><operator pos:start="576:74" pos:end="576:74">)</operator></expr>)</condition> <block pos:start="576:77" pos:end="583:0">{<block_content pos:start="577:9" pos:end="580:21">
        <expr_stmt pos:start="577:9" pos:end="577:51"><expr pos:start="577:9" pos:end="577:50"><call pos:start="577:9" pos:end="577:50"><name pos:start="577:9" pos:end="577:19">av_dict_set</name><argument_list pos:start="577:20" pos:end="577:50">(<argument pos:start="577:21" pos:end="577:32"><expr pos:start="577:21" pos:end="577:32"><operator pos:start="577:21" pos:end="577:21">&amp;</operator><name pos:start="577:22" pos:end="577:32">format_opts</name></expr></argument>, <argument pos:start="577:35" pos:end="577:37"><expr pos:start="577:35" pos:end="577:37"><name pos:start="577:35" pos:end="577:37">opt</name></expr></argument>, <argument pos:start="577:40" pos:end="577:42"><expr pos:start="577:40" pos:end="577:42"><name pos:start="577:40" pos:end="577:42">arg</name></expr></argument>, <argument pos:start="577:45" pos:end="577:49"><expr pos:start="577:45" pos:end="577:49"><name pos:start="577:45" pos:end="577:49">FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="578:9" pos:end="579:99"><if pos:start="578:9" pos:end="579:99">if <condition pos:start="578:12" pos:end="578:21">(<expr pos:start="578:13" pos:end="578:20"><name pos:start="578:13" pos:end="578:20">consumed</name></expr>)</condition><block type="pseudo" pos:start="579:13" pos:end="579:99"><block_content pos:start="579:13" pos:end="579:99">
            <expr_stmt pos:start="579:13" pos:end="579:99"><expr pos:start="579:13" pos:end="579:98"><call pos:start="579:13" pos:end="579:98"><name pos:start="579:13" pos:end="579:18">av_log</name><argument_list pos:start="579:19" pos:end="579:98">(<argument pos:start="579:20" pos:end="579:23"><expr pos:start="579:20" pos:end="579:23"><name pos:start="579:20" pos:end="579:23">NULL</name></expr></argument>, <argument pos:start="579:26" pos:end="579:39"><expr pos:start="579:26" pos:end="579:39"><name pos:start="579:26" pos:end="579:39">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="579:42" pos:end="579:92"><expr pos:start="579:42" pos:end="579:92"><literal type="string" pos:start="579:42" pos:end="579:92">"Routing option %s to both codec and muxer layer\n"</literal></expr></argument>, <argument pos:start="579:95" pos:end="579:97"><expr pos:start="579:95" pos:end="579:97"><name pos:start="579:95" pos:end="579:97">opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="580:9" pos:end="580:21"><expr pos:start="580:9" pos:end="580:20"><name pos:start="580:9" pos:end="580:16">consumed</name> <operator pos:start="580:18" pos:end="580:18">=</operator> <literal type="number" pos:start="580:20" pos:end="580:20">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:if pos:start="582:1" pos:end="582:18">#<cpp:directive pos:start="582:2" pos:end="582:3">if</cpp:directive> <expr pos:start="582:5" pos:end="582:18"><name pos:start="582:5" pos:end="582:18">CONFIG_SWSCALE</name></expr></cpp:if>
    <if_stmt pos:start="583:5" pos:end="604:0"><if pos:start="583:5" pos:end="604:0">if <condition pos:start="583:8" pos:end="584:75">(<expr pos:start="583:9" pos:end="584:74"><operator pos:start="583:9" pos:end="583:9">!</operator><name pos:start="583:10" pos:end="583:17">consumed</name> <operator pos:start="583:19" pos:end="583:20">&amp;&amp;</operator> <operator pos:start="583:22" pos:end="583:22">(</operator><name pos:start="583:23" pos:end="583:23">o</name> <operator pos:start="583:25" pos:end="583:25">=</operator> <call pos:start="583:27" pos:end="584:73"><name pos:start="583:27" pos:end="583:34">opt_find</name><argument_list pos:start="583:35" pos:end="584:73">(<argument pos:start="583:36" pos:end="583:38"><expr pos:start="583:36" pos:end="583:38"><operator pos:start="583:36" pos:end="583:36">&amp;</operator><name pos:start="583:37" pos:end="583:38">sc</name></expr></argument>, <argument pos:start="583:41" pos:end="583:43"><expr pos:start="583:41" pos:end="583:43"><name pos:start="583:41" pos:end="583:43">opt</name></expr></argument>, <argument pos:start="583:46" pos:end="583:49"><expr pos:start="583:46" pos:end="583:49"><name pos:start="583:46" pos:end="583:49">NULL</name></expr></argument>, <argument pos:start="583:52" pos:end="583:52"><expr pos:start="583:52" pos:end="583:52"><literal type="number" pos:start="583:52" pos:end="583:52">0</literal></expr></argument>,
                         <argument pos:start="584:26" pos:end="584:72"><expr pos:start="584:26" pos:end="584:72"><name pos:start="584:26" pos:end="584:47">AV_OPT_SEARCH_CHILDREN</name> <operator pos:start="584:49" pos:end="584:49">|</operator> <name pos:start="584:51" pos:end="584:72">AV_OPT_SEARCH_FAKE_OBJ</name></expr></argument>)</argument_list></call><operator pos:start="584:74" pos:end="584:74">)</operator></expr>)</condition> <block pos:start="584:77" pos:end="604:0">{<block_content pos:start="585:9" pos:end="601:21">
        <decl_stmt pos:start="585:9" pos:end="585:53"><decl pos:start="585:9" pos:end="585:52"><type pos:start="585:9" pos:end="585:27"><name pos:start="585:9" pos:end="585:25"><name pos:start="585:9" pos:end="585:14">struct</name> <name pos:start="585:16" pos:end="585:25">SwsContext</name></name> <modifier pos:start="585:27" pos:end="585:27">*</modifier></type><name pos:start="585:28" pos:end="585:30">sws</name> <init pos:start="585:32" pos:end="585:52">= <expr pos:start="585:34" pos:end="585:52"><call pos:start="585:34" pos:end="585:52"><name pos:start="585:34" pos:end="585:50">sws_alloc_context</name><argument_list pos:start="585:51" pos:end="585:52">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="586:9" pos:end="586:47"><decl pos:start="586:9" pos:end="586:46"><type pos:start="586:9" pos:end="586:11"><name pos:start="586:9" pos:end="586:11">int</name></type> <name pos:start="586:13" pos:end="586:15">ret</name> <init pos:start="586:17" pos:end="586:46">= <expr pos:start="586:19" pos:end="586:46"><call pos:start="586:19" pos:end="586:46"><name pos:start="586:19" pos:end="586:28">av_opt_set</name><argument_list pos:start="586:29" pos:end="586:46">(<argument pos:start="586:30" pos:end="586:32"><expr pos:start="586:30" pos:end="586:32"><name pos:start="586:30" pos:end="586:32">sws</name></expr></argument>, <argument pos:start="586:35" pos:end="586:37"><expr pos:start="586:35" pos:end="586:37"><name pos:start="586:35" pos:end="586:37">opt</name></expr></argument>, <argument pos:start="586:40" pos:end="586:42"><expr pos:start="586:40" pos:end="586:42"><name pos:start="586:40" pos:end="586:42">arg</name></expr></argument>, <argument pos:start="586:45" pos:end="586:45"><expr pos:start="586:45" pos:end="586:45"><literal type="number" pos:start="586:45" pos:end="586:45">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="587:9" pos:end="587:29"><expr pos:start="587:9" pos:end="587:28"><call pos:start="587:9" pos:end="587:28"><name pos:start="587:9" pos:end="587:23">sws_freeContext</name><argument_list pos:start="587:24" pos:end="587:28">(<argument pos:start="587:25" pos:end="587:27"><expr pos:start="587:25" pos:end="587:27"><name pos:start="587:25" pos:end="587:27">sws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="588:9" pos:end="593:9"><if pos:start="588:9" pos:end="593:9">if <condition pos:start="588:12" pos:end="590:69">(<expr pos:start="588:13" pos:end="590:68"><operator pos:start="588:13" pos:end="588:13">!</operator><call pos:start="588:14" pos:end="588:32"><name pos:start="588:14" pos:end="588:19">strcmp</name><argument_list pos:start="588:20" pos:end="588:32">(<argument pos:start="588:21" pos:end="588:23"><expr pos:start="588:21" pos:end="588:23"><name pos:start="588:21" pos:end="588:23">opt</name></expr></argument>, <argument pos:start="588:26" pos:end="588:31"><expr pos:start="588:26" pos:end="588:31"><literal type="string" pos:start="588:26" pos:end="588:31">"srcw"</literal></expr></argument>)</argument_list></call> <operator pos:start="588:34" pos:end="588:35">||</operator> <operator pos:start="588:37" pos:end="588:37">!</operator><call pos:start="588:38" pos:end="588:56"><name pos:start="588:38" pos:end="588:43">strcmp</name><argument_list pos:start="588:44" pos:end="588:56">(<argument pos:start="588:45" pos:end="588:47"><expr pos:start="588:45" pos:end="588:47"><name pos:start="588:45" pos:end="588:47">opt</name></expr></argument>, <argument pos:start="588:50" pos:end="588:55"><expr pos:start="588:50" pos:end="588:55"><literal type="string" pos:start="588:50" pos:end="588:55">"srch"</literal></expr></argument>)</argument_list></call> <operator pos:start="588:58" pos:end="588:59">||</operator>
            <operator pos:start="589:13" pos:end="589:13">!</operator><call pos:start="589:14" pos:end="589:32"><name pos:start="589:14" pos:end="589:19">strcmp</name><argument_list pos:start="589:20" pos:end="589:32">(<argument pos:start="589:21" pos:end="589:23"><expr pos:start="589:21" pos:end="589:23"><name pos:start="589:21" pos:end="589:23">opt</name></expr></argument>, <argument pos:start="589:26" pos:end="589:31"><expr pos:start="589:26" pos:end="589:31"><literal type="string" pos:start="589:26" pos:end="589:31">"dstw"</literal></expr></argument>)</argument_list></call> <operator pos:start="589:34" pos:end="589:35">||</operator> <operator pos:start="589:37" pos:end="589:37">!</operator><call pos:start="589:38" pos:end="589:56"><name pos:start="589:38" pos:end="589:43">strcmp</name><argument_list pos:start="589:44" pos:end="589:56">(<argument pos:start="589:45" pos:end="589:47"><expr pos:start="589:45" pos:end="589:47"><name pos:start="589:45" pos:end="589:47">opt</name></expr></argument>, <argument pos:start="589:50" pos:end="589:55"><expr pos:start="589:50" pos:end="589:55"><literal type="string" pos:start="589:50" pos:end="589:55">"dsth"</literal></expr></argument>)</argument_list></call> <operator pos:start="589:58" pos:end="589:59">||</operator>
            <operator pos:start="590:13" pos:end="590:13">!</operator><call pos:start="590:14" pos:end="590:38"><name pos:start="590:14" pos:end="590:19">strcmp</name><argument_list pos:start="590:20" pos:end="590:38">(<argument pos:start="590:21" pos:end="590:23"><expr pos:start="590:21" pos:end="590:23"><name pos:start="590:21" pos:end="590:23">opt</name></expr></argument>, <argument pos:start="590:26" pos:end="590:37"><expr pos:start="590:26" pos:end="590:37"><literal type="string" pos:start="590:26" pos:end="590:37">"src_format"</literal></expr></argument>)</argument_list></call> <operator pos:start="590:40" pos:end="590:41">||</operator> <operator pos:start="590:43" pos:end="590:43">!</operator><call pos:start="590:44" pos:end="590:68"><name pos:start="590:44" pos:end="590:49">strcmp</name><argument_list pos:start="590:50" pos:end="590:68">(<argument pos:start="590:51" pos:end="590:53"><expr pos:start="590:51" pos:end="590:53"><name pos:start="590:51" pos:end="590:53">opt</name></expr></argument>, <argument pos:start="590:56" pos:end="590:67"><expr pos:start="590:56" pos:end="590:67"><literal type="string" pos:start="590:56" pos:end="590:67">"dst_format"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="590:71" pos:end="593:9">{<block_content pos:start="591:13" pos:end="592:35">
            <expr_stmt pos:start="591:13" pos:end="591:149"><expr pos:start="591:13" pos:end="591:148"><call pos:start="591:13" pos:end="591:148"><name pos:start="591:13" pos:end="591:18">av_log</name><argument_list pos:start="591:19" pos:end="591:148">(<argument pos:start="591:20" pos:end="591:23"><expr pos:start="591:20" pos:end="591:23"><name pos:start="591:20" pos:end="591:23">NULL</name></expr></argument>, <argument pos:start="591:26" pos:end="591:37"><expr pos:start="591:26" pos:end="591:37"><name pos:start="591:26" pos:end="591:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="591:40" pos:end="591:147"><expr pos:start="591:40" pos:end="591:147"><literal type="string" pos:start="591:40" pos:end="591:147">"Directly using swscale dimensions/format options is not supported, please use the -s or -pix_fmt options\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="592:13" pos:end="592:35">return <expr pos:start="592:20" pos:end="592:34"><call pos:start="592:20" pos:end="592:34"><name pos:start="592:20" pos:end="592:26">AVERROR</name><argument_list pos:start="592:27" pos:end="592:34">(<argument pos:start="592:28" pos:end="592:33"><expr pos:start="592:28" pos:end="592:33"><name pos:start="592:28" pos:end="592:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="594:9" pos:end="597:9"><if pos:start="594:9" pos:end="597:9">if <condition pos:start="594:12" pos:end="594:20">(<expr pos:start="594:13" pos:end="594:19"><name pos:start="594:13" pos:end="594:15">ret</name> <operator pos:start="594:17" pos:end="594:17">&lt;</operator> <literal type="number" pos:start="594:19" pos:end="594:19">0</literal></expr>)</condition> <block pos:start="594:22" pos:end="597:9">{<block_content pos:start="595:13" pos:end="596:23">
            <expr_stmt pos:start="595:13" pos:end="595:74"><expr pos:start="595:13" pos:end="595:73"><call pos:start="595:13" pos:end="595:73"><name pos:start="595:13" pos:end="595:18">av_log</name><argument_list pos:start="595:19" pos:end="595:73">(<argument pos:start="595:20" pos:end="595:23"><expr pos:start="595:20" pos:end="595:23"><name pos:start="595:20" pos:end="595:23">NULL</name></expr></argument>, <argument pos:start="595:26" pos:end="595:37"><expr pos:start="595:26" pos:end="595:37"><name pos:start="595:26" pos:end="595:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="595:40" pos:end="595:67"><expr pos:start="595:40" pos:end="595:67"><literal type="string" pos:start="595:40" pos:end="595:67">"Error setting option %s.\n"</literal></expr></argument>, <argument pos:start="595:70" pos:end="595:72"><expr pos:start="595:70" pos:end="595:72"><name pos:start="595:70" pos:end="595:72">opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="596:13" pos:end="596:23">return <expr pos:start="596:20" pos:end="596:22"><name pos:start="596:20" pos:end="596:22">ret</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="599:9" pos:end="599:48"><expr pos:start="599:9" pos:end="599:47"><call pos:start="599:9" pos:end="599:47"><name pos:start="599:9" pos:end="599:19">av_dict_set</name><argument_list pos:start="599:20" pos:end="599:47">(<argument pos:start="599:21" pos:end="599:29"><expr pos:start="599:21" pos:end="599:29"><operator pos:start="599:21" pos:end="599:21">&amp;</operator><name pos:start="599:22" pos:end="599:29">sws_dict</name></expr></argument>, <argument pos:start="599:32" pos:end="599:34"><expr pos:start="599:32" pos:end="599:34"><name pos:start="599:32" pos:end="599:34">opt</name></expr></argument>, <argument pos:start="599:37" pos:end="599:39"><expr pos:start="599:37" pos:end="599:39"><name pos:start="599:37" pos:end="599:39">arg</name></expr></argument>, <argument pos:start="599:42" pos:end="599:46"><expr pos:start="599:42" pos:end="599:46"><name pos:start="599:42" pos:end="599:46">FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="601:9" pos:end="601:21"><expr pos:start="601:9" pos:end="601:20"><name pos:start="601:9" pos:end="601:16">consumed</name> <operator pos:start="601:18" pos:end="601:18">=</operator> <literal type="number" pos:start="601:20" pos:end="601:20">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:else pos:start="603:1" pos:end="603:5">#<cpp:directive pos:start="603:2" pos:end="603:5">else</cpp:directive></cpp:else>
    <if_stmt pos:start="604:5" pos:end="610:0"><if pos:start="604:5" pos:end="610:0">if <condition pos:start="604:8" pos:end="604:47">(<expr pos:start="604:9" pos:end="604:46"><operator pos:start="604:9" pos:end="604:9">!</operator><name pos:start="604:10" pos:end="604:17">consumed</name> <operator pos:start="604:19" pos:end="604:20">&amp;&amp;</operator> <operator pos:start="604:22" pos:end="604:22">!</operator><call pos:start="604:23" pos:end="604:46"><name pos:start="604:23" pos:end="604:28">strcmp</name><argument_list pos:start="604:29" pos:end="604:46">(<argument pos:start="604:30" pos:end="604:32"><expr pos:start="604:30" pos:end="604:32"><name pos:start="604:30" pos:end="604:32">opt</name></expr></argument>, <argument pos:start="604:35" pos:end="604:45"><expr pos:start="604:35" pos:end="604:45"><literal type="string" pos:start="604:35" pos:end="604:45">"sws_flags"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="604:49" pos:end="610:0">{<block_content pos:start="605:9" pos:end="606:21">
        <expr_stmt pos:start="605:9" pos:end="605:92"><expr pos:start="605:9" pos:end="605:91"><call pos:start="605:9" pos:end="605:91"><name pos:start="605:9" pos:end="605:14">av_log</name><argument_list pos:start="605:15" pos:end="605:91">(<argument pos:start="605:16" pos:end="605:19"><expr pos:start="605:16" pos:end="605:19"><name pos:start="605:16" pos:end="605:19">NULL</name></expr></argument>, <argument pos:start="605:22" pos:end="605:35"><expr pos:start="605:22" pos:end="605:35"><name pos:start="605:22" pos:end="605:35">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="605:38" pos:end="605:80"><expr pos:start="605:38" pos:end="605:80"><literal type="string" pos:start="605:38" pos:end="605:80">"Ignoring %s %s, due to disabled swscale\n"</literal></expr></argument>, <argument pos:start="605:83" pos:end="605:85"><expr pos:start="605:83" pos:end="605:85"><name pos:start="605:83" pos:end="605:85">opt</name></expr></argument>, <argument pos:start="605:88" pos:end="605:90"><expr pos:start="605:88" pos:end="605:90"><name pos:start="605:88" pos:end="605:90">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="606:9" pos:end="606:21"><expr pos:start="606:9" pos:end="606:20"><name pos:start="606:9" pos:end="606:16">consumed</name> <operator pos:start="606:18" pos:end="606:18">=</operator> <literal type="number" pos:start="606:20" pos:end="606:20">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif pos:start="608:1" pos:end="608:6">#<cpp:directive pos:start="608:2" pos:end="608:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="609:1" pos:end="609:21">#<cpp:directive pos:start="609:2" pos:end="609:3">if</cpp:directive> <expr pos:start="609:5" pos:end="609:21"><name pos:start="609:5" pos:end="609:21">CONFIG_SWRESAMPLE</name></expr></cpp:if>
    <if_stmt pos:start="610:5" pos:end="624:0"><if pos:start="610:5" pos:end="624:0">if <condition pos:start="610:8" pos:end="611:86">(<expr pos:start="610:9" pos:end="611:85"><operator pos:start="610:9" pos:end="610:9">!</operator><name pos:start="610:10" pos:end="610:17">consumed</name> <operator pos:start="610:19" pos:end="610:20">&amp;&amp;</operator> <operator pos:start="610:22" pos:end="610:22">(</operator><name pos:start="610:23" pos:end="610:23">o</name><operator pos:start="610:24" pos:end="610:24">=</operator><call pos:start="610:25" pos:end="611:84"><name pos:start="610:25" pos:end="610:32">opt_find</name><argument_list pos:start="610:33" pos:end="611:84">(<argument pos:start="610:34" pos:end="610:43"><expr pos:start="610:34" pos:end="610:43"><operator pos:start="610:34" pos:end="610:34">&amp;</operator><name pos:start="610:35" pos:end="610:43">swr_class</name></expr></argument>, <argument pos:start="610:46" pos:end="610:48"><expr pos:start="610:46" pos:end="610:48"><name pos:start="610:46" pos:end="610:48">opt</name></expr></argument>, <argument pos:start="610:51" pos:end="610:54"><expr pos:start="610:51" pos:end="610:54"><name pos:start="610:51" pos:end="610:54">NULL</name></expr></argument>, <argument pos:start="610:57" pos:end="610:57"><expr pos:start="610:57" pos:end="610:57"><literal type="number" pos:start="610:57" pos:end="610:57">0</literal></expr></argument>,
                                    <argument pos:start="611:37" pos:end="611:83"><expr pos:start="611:37" pos:end="611:83"><name pos:start="611:37" pos:end="611:58">AV_OPT_SEARCH_CHILDREN</name> <operator pos:start="611:60" pos:end="611:60">|</operator> <name pos:start="611:62" pos:end="611:83">AV_OPT_SEARCH_FAKE_OBJ</name></expr></argument>)</argument_list></call><operator pos:start="611:85" pos:end="611:85">)</operator></expr>)</condition> <block pos:start="611:88" pos:end="624:0">{<block_content pos:start="612:9" pos:end="620:21">
        <decl_stmt pos:start="612:9" pos:end="612:45"><decl pos:start="612:9" pos:end="612:44"><type pos:start="612:9" pos:end="612:27"><name pos:start="612:9" pos:end="612:25"><name pos:start="612:9" pos:end="612:14">struct</name> <name pos:start="612:16" pos:end="612:25">SwrContext</name></name> <modifier pos:start="612:27" pos:end="612:27">*</modifier></type><name pos:start="612:28" pos:end="612:30">swr</name> <init pos:start="612:32" pos:end="612:44">= <expr pos:start="612:34" pos:end="612:44"><call pos:start="612:34" pos:end="612:44"><name pos:start="612:34" pos:end="612:42">swr_alloc</name><argument_list pos:start="612:43" pos:end="612:44">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="613:9" pos:end="613:47"><decl pos:start="613:9" pos:end="613:46"><type pos:start="613:9" pos:end="613:11"><name pos:start="613:9" pos:end="613:11">int</name></type> <name pos:start="613:13" pos:end="613:15">ret</name> <init pos:start="613:17" pos:end="613:46">= <expr pos:start="613:19" pos:end="613:46"><call pos:start="613:19" pos:end="613:46"><name pos:start="613:19" pos:end="613:28">av_opt_set</name><argument_list pos:start="613:29" pos:end="613:46">(<argument pos:start="613:30" pos:end="613:32"><expr pos:start="613:30" pos:end="613:32"><name pos:start="613:30" pos:end="613:32">swr</name></expr></argument>, <argument pos:start="613:35" pos:end="613:37"><expr pos:start="613:35" pos:end="613:37"><name pos:start="613:35" pos:end="613:37">opt</name></expr></argument>, <argument pos:start="613:40" pos:end="613:42"><expr pos:start="613:40" pos:end="613:42"><name pos:start="613:40" pos:end="613:42">arg</name></expr></argument>, <argument pos:start="613:45" pos:end="613:45"><expr pos:start="613:45" pos:end="613:45"><literal type="number" pos:start="613:45" pos:end="613:45">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="614:9" pos:end="614:23"><expr pos:start="614:9" pos:end="614:22"><call pos:start="614:9" pos:end="614:22"><name pos:start="614:9" pos:end="614:16">swr_free</name><argument_list pos:start="614:17" pos:end="614:22">(<argument pos:start="614:18" pos:end="614:21"><expr pos:start="614:18" pos:end="614:21"><operator pos:start="614:18" pos:end="614:18">&amp;</operator><name pos:start="614:19" pos:end="614:21">swr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="615:9" pos:end="618:9"><if pos:start="615:9" pos:end="618:9">if <condition pos:start="615:12" pos:end="615:20">(<expr pos:start="615:13" pos:end="615:19"><name pos:start="615:13" pos:end="615:15">ret</name> <operator pos:start="615:17" pos:end="615:17">&lt;</operator> <literal type="number" pos:start="615:19" pos:end="615:19">0</literal></expr>)</condition> <block pos:start="615:22" pos:end="618:9">{<block_content pos:start="616:13" pos:end="617:23">
            <expr_stmt pos:start="616:13" pos:end="616:74"><expr pos:start="616:13" pos:end="616:73"><call pos:start="616:13" pos:end="616:73"><name pos:start="616:13" pos:end="616:18">av_log</name><argument_list pos:start="616:19" pos:end="616:73">(<argument pos:start="616:20" pos:end="616:23"><expr pos:start="616:20" pos:end="616:23"><name pos:start="616:20" pos:end="616:23">NULL</name></expr></argument>, <argument pos:start="616:26" pos:end="616:37"><expr pos:start="616:26" pos:end="616:37"><name pos:start="616:26" pos:end="616:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="616:40" pos:end="616:67"><expr pos:start="616:40" pos:end="616:67"><literal type="string" pos:start="616:40" pos:end="616:67">"Error setting option %s.\n"</literal></expr></argument>, <argument pos:start="616:70" pos:end="616:72"><expr pos:start="616:70" pos:end="616:72"><name pos:start="616:70" pos:end="616:72">opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="617:13" pos:end="617:23">return <expr pos:start="617:20" pos:end="617:22"><name pos:start="617:20" pos:end="617:22">ret</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="619:9" pos:end="619:48"><expr pos:start="619:9" pos:end="619:47"><call pos:start="619:9" pos:end="619:47"><name pos:start="619:9" pos:end="619:19">av_dict_set</name><argument_list pos:start="619:20" pos:end="619:47">(<argument pos:start="619:21" pos:end="619:29"><expr pos:start="619:21" pos:end="619:29"><operator pos:start="619:21" pos:end="619:21">&amp;</operator><name pos:start="619:22" pos:end="619:29">swr_opts</name></expr></argument>, <argument pos:start="619:32" pos:end="619:34"><expr pos:start="619:32" pos:end="619:34"><name pos:start="619:32" pos:end="619:34">opt</name></expr></argument>, <argument pos:start="619:37" pos:end="619:39"><expr pos:start="619:37" pos:end="619:39"><name pos:start="619:37" pos:end="619:39">arg</name></expr></argument>, <argument pos:start="619:42" pos:end="619:46"><expr pos:start="619:42" pos:end="619:46"><name pos:start="619:42" pos:end="619:46">FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="620:9" pos:end="620:21"><expr pos:start="620:9" pos:end="620:20"><name pos:start="620:9" pos:end="620:16">consumed</name> <operator pos:start="620:18" pos:end="620:18">=</operator> <literal type="number" pos:start="620:20" pos:end="620:20">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif pos:start="622:1" pos:end="622:6">#<cpp:directive pos:start="622:2" pos:end="622:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="623:1" pos:end="623:21">#<cpp:directive pos:start="623:2" pos:end="623:3">if</cpp:directive> <expr pos:start="623:5" pos:end="623:21"><name pos:start="623:5" pos:end="623:21">CONFIG_AVRESAMPLE</name></expr></cpp:if>
    <if_stmt pos:start="624:5" pos:end="630:0"><if pos:start="624:5" pos:end="630:0">if <condition pos:start="624:8" pos:end="625:73">(<expr pos:start="624:9" pos:end="625:72"><operator pos:start="624:9" pos:end="624:9">(</operator><name pos:start="624:10" pos:end="624:10">o</name><operator pos:start="624:11" pos:end="624:11">=</operator><call pos:start="624:12" pos:end="625:71"><name pos:start="624:12" pos:end="624:19">opt_find</name><argument_list pos:start="624:20" pos:end="625:71">(<argument pos:start="624:21" pos:end="624:23"><expr pos:start="624:21" pos:end="624:23"><operator pos:start="624:21" pos:end="624:21">&amp;</operator><name pos:start="624:22" pos:end="624:23">rc</name></expr></argument>, <argument pos:start="624:26" pos:end="624:28"><expr pos:start="624:26" pos:end="624:28"><name pos:start="624:26" pos:end="624:28">opt</name></expr></argument>, <argument pos:start="624:31" pos:end="624:34"><expr pos:start="624:31" pos:end="624:34"><name pos:start="624:31" pos:end="624:34">NULL</name></expr></argument>, <argument pos:start="624:37" pos:end="624:37"><expr pos:start="624:37" pos:end="624:37"><literal type="number" pos:start="624:37" pos:end="624:37">0</literal></expr></argument>,
                       <argument pos:start="625:24" pos:end="625:70"><expr pos:start="625:24" pos:end="625:70"><name pos:start="625:24" pos:end="625:45">AV_OPT_SEARCH_CHILDREN</name> <operator pos:start="625:47" pos:end="625:47">|</operator> <name pos:start="625:49" pos:end="625:70">AV_OPT_SEARCH_FAKE_OBJ</name></expr></argument>)</argument_list></call><operator pos:start="625:72" pos:end="625:72">)</operator></expr>)</condition> <block pos:start="625:75" pos:end="630:0">{<block_content pos:start="626:9" pos:end="627:21">
        <expr_stmt pos:start="626:9" pos:end="626:53"><expr pos:start="626:9" pos:end="626:52"><call pos:start="626:9" pos:end="626:52"><name pos:start="626:9" pos:end="626:19">av_dict_set</name><argument_list pos:start="626:20" pos:end="626:52">(<argument pos:start="626:21" pos:end="626:34"><expr pos:start="626:21" pos:end="626:34"><operator pos:start="626:21" pos:end="626:21">&amp;</operator><name pos:start="626:22" pos:end="626:34">resample_opts</name></expr></argument>, <argument pos:start="626:37" pos:end="626:39"><expr pos:start="626:37" pos:end="626:39"><name pos:start="626:37" pos:end="626:39">opt</name></expr></argument>, <argument pos:start="626:42" pos:end="626:44"><expr pos:start="626:42" pos:end="626:44"><name pos:start="626:42" pos:end="626:44">arg</name></expr></argument>, <argument pos:start="626:47" pos:end="626:51"><expr pos:start="626:47" pos:end="626:51"><name pos:start="626:47" pos:end="626:51">FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="627:9" pos:end="627:21"><expr pos:start="627:9" pos:end="627:20"><name pos:start="627:9" pos:end="627:16">consumed</name> <operator pos:start="627:18" pos:end="627:18">=</operator> <literal type="number" pos:start="627:20" pos:end="627:20">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif pos:start="629:1" pos:end="629:6">#<cpp:directive pos:start="629:2" pos:end="629:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="631:5" pos:end="632:17"><if pos:start="631:5" pos:end="632:17">if <condition pos:start="631:8" pos:end="631:17">(<expr pos:start="631:9" pos:end="631:16"><name pos:start="631:9" pos:end="631:16">consumed</name></expr>)</condition><block type="pseudo" pos:start="632:9" pos:end="632:17"><block_content pos:start="632:9" pos:end="632:17">
        <return pos:start="632:9" pos:end="632:17">return <expr pos:start="632:16" pos:end="632:16"><literal type="number" pos:start="632:16" pos:end="632:16">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <return pos:start="633:5" pos:end="633:36">return <expr pos:start="633:12" pos:end="633:35"><name pos:start="633:12" pos:end="633:35">AVERROR_OPTION_NOT_FOUND</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="636:1" pos:end="640:3">/*
 * Check whether given option is a group separator.
 *
 * @return index of the group definition that matched or -1 if none
 */</comment>
<function pos:start="641:1" pos:end="653:1"><type pos:start="641:1" pos:end="641:10"><specifier pos:start="641:1" pos:end="641:6">static</specifier> <name pos:start="641:8" pos:end="641:10">int</name></type> <name pos:start="641:12" pos:end="641:32">match_group_separator</name><parameter_list pos:start="641:33" pos:end="642:49">(<parameter pos:start="641:34" pos:end="641:61"><decl pos:start="641:34" pos:end="641:61"><type pos:start="641:34" pos:end="641:61"><specifier pos:start="641:34" pos:end="641:38">const</specifier> <name pos:start="641:40" pos:end="641:53">OptionGroupDef</name> <modifier pos:start="641:55" pos:end="641:55">*</modifier></type><name pos:start="641:56" pos:end="641:61">groups</name></decl></parameter>, <parameter pos:start="641:64" pos:end="641:76"><decl pos:start="641:64" pos:end="641:76"><type pos:start="641:64" pos:end="641:76"><name pos:start="641:64" pos:end="641:66">int</name></type> <name pos:start="641:68" pos:end="641:76">nb_groups</name></decl></parameter>,
                                 <parameter pos:start="642:34" pos:end="642:48"><decl pos:start="642:34" pos:end="642:48"><type pos:start="642:34" pos:end="642:48"><specifier pos:start="642:34" pos:end="642:38">const</specifier> <name pos:start="642:40" pos:end="642:43">char</name> <modifier pos:start="642:45" pos:end="642:45">*</modifier></type><name pos:start="642:46" pos:end="642:48">opt</name></decl></parameter>)</parameter_list>
<block pos:start="643:1" pos:end="653:1">{<block_content pos:start="644:5" pos:end="652:14">
    <decl_stmt pos:start="644:5" pos:end="644:10"><decl pos:start="644:5" pos:end="644:9"><type pos:start="644:5" pos:end="644:7"><name pos:start="644:5" pos:end="644:7">int</name></type> <name pos:start="644:9" pos:end="644:9">i</name></decl>;</decl_stmt>

    <for pos:start="646:5" pos:end="650:5">for <control pos:start="646:9" pos:end="646:35">(<init pos:start="646:10" pos:end="646:15"><expr pos:start="646:10" pos:end="646:14"><name pos:start="646:10" pos:end="646:10">i</name> <operator pos:start="646:12" pos:end="646:12">=</operator> <literal type="number" pos:start="646:14" pos:end="646:14">0</literal></expr>;</init> <condition pos:start="646:17" pos:end="646:30"><expr pos:start="646:17" pos:end="646:29"><name pos:start="646:17" pos:end="646:17">i</name> <operator pos:start="646:19" pos:end="646:19">&lt;</operator> <name pos:start="646:21" pos:end="646:29">nb_groups</name></expr>;</condition> <incr pos:start="646:32" pos:end="646:34"><expr pos:start="646:32" pos:end="646:34"><name pos:start="646:32" pos:end="646:32">i</name><operator pos:start="646:33" pos:end="646:34">++</operator></expr></incr>)</control> <block pos:start="646:37" pos:end="650:5">{<block_content pos:start="647:9" pos:end="649:21">
        <decl_stmt pos:start="647:9" pos:end="647:45"><decl pos:start="647:9" pos:end="647:44"><type pos:start="647:9" pos:end="647:30"><specifier pos:start="647:9" pos:end="647:13">const</specifier> <name pos:start="647:15" pos:end="647:28">OptionGroupDef</name> <modifier pos:start="647:30" pos:end="647:30">*</modifier></type><name pos:start="647:31" pos:end="647:31">p</name> <init pos:start="647:33" pos:end="647:44">= <expr pos:start="647:35" pos:end="647:44"><operator pos:start="647:35" pos:end="647:35">&amp;</operator><name pos:start="647:36" pos:end="647:44"><name pos:start="647:36" pos:end="647:41">groups</name><index pos:start="647:42" pos:end="647:44">[<expr pos:start="647:43" pos:end="647:43"><name pos:start="647:43" pos:end="647:43">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="648:9" pos:end="649:21"><if pos:start="648:9" pos:end="649:21">if <condition pos:start="648:12" pos:end="648:43">(<expr pos:start="648:13" pos:end="648:42"><name pos:start="648:13" pos:end="648:18"><name pos:start="648:13" pos:end="648:13">p</name><operator pos:start="648:14" pos:end="648:15">-&gt;</operator><name pos:start="648:16" pos:end="648:18">sep</name></name> <operator pos:start="648:20" pos:end="648:21">&amp;&amp;</operator> <operator pos:start="648:23" pos:end="648:23">!</operator><call pos:start="648:24" pos:end="648:42"><name pos:start="648:24" pos:end="648:29">strcmp</name><argument_list pos:start="648:30" pos:end="648:42">(<argument pos:start="648:31" pos:end="648:36"><expr pos:start="648:31" pos:end="648:36"><name pos:start="648:31" pos:end="648:36"><name pos:start="648:31" pos:end="648:31">p</name><operator pos:start="648:32" pos:end="648:33">-&gt;</operator><name pos:start="648:34" pos:end="648:36">sep</name></name></expr></argument>, <argument pos:start="648:39" pos:end="648:41"><expr pos:start="648:39" pos:end="648:41"><name pos:start="648:39" pos:end="648:41">opt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="649:13" pos:end="649:21"><block_content pos:start="649:13" pos:end="649:21">
            <return pos:start="649:13" pos:end="649:21">return <expr pos:start="649:20" pos:end="649:20"><name pos:start="649:20" pos:end="649:20">i</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <return pos:start="652:5" pos:end="652:14">return <expr pos:start="652:12" pos:end="652:13"><operator pos:start="652:12" pos:end="652:12">-</operator><literal type="number" pos:start="652:13" pos:end="652:13">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="655:1" pos:end="660:3">/*
 * Finish parsing an option group.
 *
 * @param group_idx which group definition should this group belong to
 * @param arg argument of the group delimiting option
 */</comment>
<function pos:start="661:1" pos:end="687:1"><type pos:start="661:1" pos:end="661:11"><specifier pos:start="661:1" pos:end="661:6">static</specifier> <name pos:start="661:8" pos:end="661:11">void</name></type> <name pos:start="661:13" pos:end="661:24">finish_group</name><parameter_list pos:start="661:25" pos:end="662:41">(<parameter pos:start="661:26" pos:end="661:49"><decl pos:start="661:26" pos:end="661:49"><type pos:start="661:26" pos:end="661:49"><name pos:start="661:26" pos:end="661:43">OptionParseContext</name> <modifier pos:start="661:45" pos:end="661:45">*</modifier></type><name pos:start="661:46" pos:end="661:49">octx</name></decl></parameter>, <parameter pos:start="661:52" pos:end="661:64"><decl pos:start="661:52" pos:end="661:64"><type pos:start="661:52" pos:end="661:64"><name pos:start="661:52" pos:end="661:54">int</name></type> <name pos:start="661:56" pos:end="661:64">group_idx</name></decl></parameter>,
                         <parameter pos:start="662:26" pos:end="662:40"><decl pos:start="662:26" pos:end="662:40"><type pos:start="662:26" pos:end="662:40"><specifier pos:start="662:26" pos:end="662:30">const</specifier> <name pos:start="662:32" pos:end="662:35">char</name> <modifier pos:start="662:37" pos:end="662:37">*</modifier></type><name pos:start="662:38" pos:end="662:40">arg</name></decl></parameter>)</parameter_list>
<block pos:start="663:1" pos:end="687:1">{<block_content pos:start="664:5" pos:end="686:57">
    <decl_stmt pos:start="664:5" pos:end="664:50"><decl pos:start="664:5" pos:end="664:49"><type pos:start="664:5" pos:end="664:21"><name pos:start="664:5" pos:end="664:19">OptionGroupList</name> <modifier pos:start="664:21" pos:end="664:21">*</modifier></type><name pos:start="664:22" pos:end="664:22">l</name> <init pos:start="664:24" pos:end="664:49">= <expr pos:start="664:26" pos:end="664:49"><operator pos:start="664:26" pos:end="664:26">&amp;</operator><name pos:start="664:27" pos:end="664:49"><name pos:start="664:27" pos:end="664:30">octx</name><operator pos:start="664:31" pos:end="664:32">-&gt;</operator><name pos:start="664:33" pos:end="664:38">groups</name><index pos:start="664:39" pos:end="664:49">[<expr pos:start="664:40" pos:end="664:48"><name pos:start="664:40" pos:end="664:48">group_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="665:5" pos:end="665:19"><decl pos:start="665:5" pos:end="665:18"><type pos:start="665:5" pos:end="665:17"><name pos:start="665:5" pos:end="665:15">OptionGroup</name> <modifier pos:start="665:17" pos:end="665:17">*</modifier></type><name pos:start="665:18" pos:end="665:18">g</name></decl>;</decl_stmt>

    <expr_stmt pos:start="667:5" pos:end="667:40"><expr pos:start="667:5" pos:end="667:39"><call pos:start="667:5" pos:end="667:39"><name pos:start="667:5" pos:end="667:14">GROW_ARRAY</name><argument_list pos:start="667:15" pos:end="667:39">(<argument pos:start="667:16" pos:end="667:24"><expr pos:start="667:16" pos:end="667:24"><name pos:start="667:16" pos:end="667:24"><name pos:start="667:16" pos:end="667:16">l</name><operator pos:start="667:17" pos:end="667:18">-&gt;</operator><name pos:start="667:19" pos:end="667:24">groups</name></name></expr></argument>, <argument pos:start="667:27" pos:end="667:38"><expr pos:start="667:27" pos:end="667:38"><name pos:start="667:27" pos:end="667:38"><name pos:start="667:27" pos:end="667:27">l</name><operator pos:start="667:28" pos:end="667:29">-&gt;</operator><name pos:start="667:30" pos:end="667:38">nb_groups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="668:5" pos:end="668:37"><expr pos:start="668:5" pos:end="668:36"><name pos:start="668:5" pos:end="668:5">g</name> <operator pos:start="668:7" pos:end="668:7">=</operator> <operator pos:start="668:9" pos:end="668:9">&amp;</operator><name pos:start="668:10" pos:end="668:36"><name pos:start="668:10" pos:end="668:10">l</name><operator pos:start="668:11" pos:end="668:12">-&gt;</operator><name pos:start="668:13" pos:end="668:18">groups</name><index pos:start="668:19" pos:end="668:36">[<expr pos:start="668:20" pos:end="668:35"><name pos:start="668:20" pos:end="668:31"><name pos:start="668:20" pos:end="668:20">l</name><operator pos:start="668:21" pos:end="668:22">-&gt;</operator><name pos:start="668:23" pos:end="668:31">nb_groups</name></name> <operator pos:start="668:33" pos:end="668:33">-</operator> <literal type="number" pos:start="668:35" pos:end="668:35">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="670:5" pos:end="670:37"><expr pos:start="670:5" pos:end="670:36"><operator pos:start="670:5" pos:end="670:5">*</operator><name pos:start="670:6" pos:end="670:6">g</name>             <operator pos:start="670:20" pos:end="670:20">=</operator> <name pos:start="670:22" pos:end="670:36"><name pos:start="670:22" pos:end="670:25">octx</name><operator pos:start="670:26" pos:end="670:27">-&gt;</operator><name pos:start="670:28" pos:end="670:36">cur_group</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="671:5" pos:end="671:25"><expr pos:start="671:5" pos:end="671:24"><name pos:start="671:5" pos:end="671:10"><name pos:start="671:5" pos:end="671:5">g</name><operator pos:start="671:6" pos:end="671:7">-&gt;</operator><name pos:start="671:8" pos:end="671:10">arg</name></name>         <operator pos:start="671:20" pos:end="671:20">=</operator> <name pos:start="671:22" pos:end="671:24">arg</name></expr>;</expr_stmt>
    <expr_stmt pos:start="672:5" pos:end="672:34"><expr pos:start="672:5" pos:end="672:33"><name pos:start="672:5" pos:end="672:16"><name pos:start="672:5" pos:end="672:5">g</name><operator pos:start="672:6" pos:end="672:7">-&gt;</operator><name pos:start="672:8" pos:end="672:16">group_def</name></name>   <operator pos:start="672:20" pos:end="672:20">=</operator> <name pos:start="672:22" pos:end="672:33"><name pos:start="672:22" pos:end="672:22">l</name><operator pos:start="672:23" pos:end="672:24">-&gt;</operator><name pos:start="672:25" pos:end="672:33">group_def</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="673:5" pos:end="673:30"><expr pos:start="673:5" pos:end="673:29"><name pos:start="673:5" pos:end="673:15"><name pos:start="673:5" pos:end="673:5">g</name><operator pos:start="673:6" pos:end="673:7">-&gt;</operator><name pos:start="673:8" pos:end="673:15">sws_dict</name></name>    <operator pos:start="673:20" pos:end="673:20">=</operator> <name pos:start="673:22" pos:end="673:29">sws_dict</name></expr>;</expr_stmt>
    <expr_stmt pos:start="674:5" pos:end="674:30"><expr pos:start="674:5" pos:end="674:29"><name pos:start="674:5" pos:end="674:15"><name pos:start="674:5" pos:end="674:5">g</name><operator pos:start="674:6" pos:end="674:7">-&gt;</operator><name pos:start="674:8" pos:end="674:15">swr_opts</name></name>    <operator pos:start="674:20" pos:end="674:20">=</operator> <name pos:start="674:22" pos:end="674:29">swr_opts</name></expr>;</expr_stmt>
    <expr_stmt pos:start="675:5" pos:end="675:32"><expr pos:start="675:5" pos:end="675:31"><name pos:start="675:5" pos:end="675:17"><name pos:start="675:5" pos:end="675:5">g</name><operator pos:start="675:6" pos:end="675:7">-&gt;</operator><name pos:start="675:8" pos:end="675:17">codec_opts</name></name>  <operator pos:start="675:20" pos:end="675:20">=</operator> <name pos:start="675:22" pos:end="675:31">codec_opts</name></expr>;</expr_stmt>
    <expr_stmt pos:start="676:5" pos:end="676:33"><expr pos:start="676:5" pos:end="676:32"><name pos:start="676:5" pos:end="676:18"><name pos:start="676:5" pos:end="676:5">g</name><operator pos:start="676:6" pos:end="676:7">-&gt;</operator><name pos:start="676:8" pos:end="676:18">format_opts</name></name> <operator pos:start="676:20" pos:end="676:20">=</operator> <name pos:start="676:22" pos:end="676:32">format_opts</name></expr>;</expr_stmt>
    <expr_stmt pos:start="677:5" pos:end="677:37"><expr pos:start="677:5" pos:end="677:36"><name pos:start="677:5" pos:end="677:20"><name pos:start="677:5" pos:end="677:5">g</name><operator pos:start="677:6" pos:end="677:7">-&gt;</operator><name pos:start="677:8" pos:end="677:20">resample_opts</name></name> <operator pos:start="677:22" pos:end="677:22">=</operator> <name pos:start="677:24" pos:end="677:36">resample_opts</name></expr>;</expr_stmt>

    <expr_stmt pos:start="679:5" pos:end="679:23"><expr pos:start="679:5" pos:end="679:22"><name pos:start="679:5" pos:end="679:14">codec_opts</name>  <operator pos:start="679:17" pos:end="679:17">=</operator> <name pos:start="679:19" pos:end="679:22">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="680:5" pos:end="680:23"><expr pos:start="680:5" pos:end="680:22"><name pos:start="680:5" pos:end="680:15">format_opts</name> <operator pos:start="680:17" pos:end="680:17">=</operator> <name pos:start="680:19" pos:end="680:22">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="681:5" pos:end="681:25"><expr pos:start="681:5" pos:end="681:24"><name pos:start="681:5" pos:end="681:17">resample_opts</name> <operator pos:start="681:19" pos:end="681:19">=</operator> <name pos:start="681:21" pos:end="681:24">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="682:5" pos:end="682:23"><expr pos:start="682:5" pos:end="682:22"><name pos:start="682:5" pos:end="682:12">sws_dict</name>    <operator pos:start="682:17" pos:end="682:17">=</operator> <name pos:start="682:19" pos:end="682:22">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="683:5" pos:end="683:23"><expr pos:start="683:5" pos:end="683:22"><name pos:start="683:5" pos:end="683:12">swr_opts</name>    <operator pos:start="683:17" pos:end="683:17">=</operator> <name pos:start="683:19" pos:end="683:22">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="684:5" pos:end="684:16"><expr pos:start="684:5" pos:end="684:15"><call pos:start="684:5" pos:end="684:15"><name pos:start="684:5" pos:end="684:13">init_opts</name><argument_list pos:start="684:14" pos:end="684:15">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="686:5" pos:end="686:57"><expr pos:start="686:5" pos:end="686:56"><call pos:start="686:5" pos:end="686:56"><name pos:start="686:5" pos:end="686:10">memset</name><argument_list pos:start="686:11" pos:end="686:56">(<argument pos:start="686:12" pos:end="686:27"><expr pos:start="686:12" pos:end="686:27"><operator pos:start="686:12" pos:end="686:12">&amp;</operator><name pos:start="686:13" pos:end="686:27"><name pos:start="686:13" pos:end="686:16">octx</name><operator pos:start="686:17" pos:end="686:18">-&gt;</operator><name pos:start="686:19" pos:end="686:27">cur_group</name></name></expr></argument>, <argument pos:start="686:30" pos:end="686:30"><expr pos:start="686:30" pos:end="686:30"><literal type="number" pos:start="686:30" pos:end="686:30">0</literal></expr></argument>, <argument pos:start="686:33" pos:end="686:55"><expr pos:start="686:33" pos:end="686:55"><sizeof pos:start="686:33" pos:end="686:55">sizeof<argument_list pos:start="686:39" pos:end="686:55">(<argument pos:start="686:40" pos:end="686:54"><expr pos:start="686:40" pos:end="686:54"><name pos:start="686:40" pos:end="686:54"><name pos:start="686:40" pos:end="686:43">octx</name><operator pos:start="686:44" pos:end="686:45">-&gt;</operator><name pos:start="686:46" pos:end="686:54">cur_group</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="689:1" pos:end="691:3">/*
 * Add an option instance to currently parsed group.
 */</comment>
<function pos:start="692:1" pos:end="702:1"><type pos:start="692:1" pos:end="692:11"><specifier pos:start="692:1" pos:end="692:6">static</specifier> <name pos:start="692:8" pos:end="692:11">void</name></type> <name pos:start="692:13" pos:end="692:19">add_opt</name><parameter_list pos:start="692:20" pos:end="693:53">(<parameter pos:start="692:21" pos:end="692:44"><decl pos:start="692:21" pos:end="692:44"><type pos:start="692:21" pos:end="692:44"><name pos:start="692:21" pos:end="692:38">OptionParseContext</name> <modifier pos:start="692:40" pos:end="692:40">*</modifier></type><name pos:start="692:41" pos:end="692:44">octx</name></decl></parameter>, <parameter pos:start="692:47" pos:end="692:66"><decl pos:start="692:47" pos:end="692:66"><type pos:start="692:47" pos:end="692:66"><specifier pos:start="692:47" pos:end="692:51">const</specifier> <name pos:start="692:53" pos:end="692:61">OptionDef</name> <modifier pos:start="692:63" pos:end="692:63">*</modifier></type><name pos:start="692:64" pos:end="692:66">opt</name></decl></parameter>,
                    <parameter pos:start="693:21" pos:end="693:35"><decl pos:start="693:21" pos:end="693:35"><type pos:start="693:21" pos:end="693:35"><specifier pos:start="693:21" pos:end="693:25">const</specifier> <name pos:start="693:27" pos:end="693:30">char</name> <modifier pos:start="693:32" pos:end="693:32">*</modifier></type><name pos:start="693:33" pos:end="693:35">key</name></decl></parameter>, <parameter pos:start="693:38" pos:end="693:52"><decl pos:start="693:38" pos:end="693:52"><type pos:start="693:38" pos:end="693:52"><specifier pos:start="693:38" pos:end="693:42">const</specifier> <name pos:start="693:44" pos:end="693:47">char</name> <modifier pos:start="693:49" pos:end="693:49">*</modifier></type><name pos:start="693:50" pos:end="693:52">val</name></decl></parameter>)</parameter_list>
<block pos:start="694:1" pos:end="702:1">{<block_content pos:start="695:5" pos:end="701:38">
    <decl_stmt pos:start="695:5" pos:end="695:71"><decl pos:start="695:5" pos:end="695:70"><type pos:start="695:5" pos:end="695:7"><name pos:start="695:5" pos:end="695:7">int</name></type> <name pos:start="695:9" pos:end="695:14">global</name> <init pos:start="695:16" pos:end="695:70">= <expr pos:start="695:18" pos:end="695:70"><operator pos:start="695:18" pos:end="695:18">!</operator><operator pos:start="695:19" pos:end="695:19">(</operator><name pos:start="695:20" pos:end="695:29"><name pos:start="695:20" pos:end="695:22">opt</name><operator pos:start="695:23" pos:end="695:24">-&gt;</operator><name pos:start="695:25" pos:end="695:29">flags</name></name> <operator pos:start="695:31" pos:end="695:31">&amp;</operator> <operator pos:start="695:33" pos:end="695:33">(</operator><name pos:start="695:34" pos:end="695:44">OPT_PERFILE</name> <operator pos:start="695:46" pos:end="695:46">|</operator> <name pos:start="695:48" pos:end="695:55">OPT_SPEC</name> <operator pos:start="695:57" pos:end="695:57">|</operator> <name pos:start="695:59" pos:end="695:68">OPT_OFFSET</name><operator pos:start="695:69" pos:end="695:69">)</operator><operator pos:start="695:70" pos:end="695:70">)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="696:5" pos:end="696:68"><decl pos:start="696:5" pos:end="696:67"><type pos:start="696:5" pos:end="696:17"><name pos:start="696:5" pos:end="696:15">OptionGroup</name> <modifier pos:start="696:17" pos:end="696:17">*</modifier></type><name pos:start="696:18" pos:end="696:18">g</name> <init pos:start="696:20" pos:end="696:67">= <expr pos:start="696:22" pos:end="696:67"><ternary pos:start="696:22" pos:end="696:67"><condition pos:start="696:22" pos:end="696:29"><expr pos:start="696:22" pos:end="696:27"><name pos:start="696:22" pos:end="696:27">global</name></expr> ?</condition><then pos:start="696:31" pos:end="696:48"> <expr pos:start="696:31" pos:end="696:48"><operator pos:start="696:31" pos:end="696:31">&amp;</operator><name pos:start="696:32" pos:end="696:48"><name pos:start="696:32" pos:end="696:35">octx</name><operator pos:start="696:36" pos:end="696:37">-&gt;</operator><name pos:start="696:38" pos:end="696:48">global_opts</name></name></expr> </then><else pos:start="696:50" pos:end="696:67">: <expr pos:start="696:52" pos:end="696:67"><operator pos:start="696:52" pos:end="696:52">&amp;</operator><name pos:start="696:53" pos:end="696:67"><name pos:start="696:53" pos:end="696:56">octx</name><operator pos:start="696:57" pos:end="696:58">-&gt;</operator><name pos:start="696:59" pos:end="696:67">cur_group</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="698:5" pos:end="698:36"><expr pos:start="698:5" pos:end="698:35"><call pos:start="698:5" pos:end="698:35"><name pos:start="698:5" pos:end="698:14">GROW_ARRAY</name><argument_list pos:start="698:15" pos:end="698:35">(<argument pos:start="698:16" pos:end="698:22"><expr pos:start="698:16" pos:end="698:22"><name pos:start="698:16" pos:end="698:22"><name pos:start="698:16" pos:end="698:16">g</name><operator pos:start="698:17" pos:end="698:18">-&gt;</operator><name pos:start="698:19" pos:end="698:22">opts</name></name></expr></argument>, <argument pos:start="698:25" pos:end="698:34"><expr pos:start="698:25" pos:end="698:34"><name pos:start="698:25" pos:end="698:34"><name pos:start="698:25" pos:end="698:25">g</name><operator pos:start="698:26" pos:end="698:27">-&gt;</operator><name pos:start="698:28" pos:end="698:34">nb_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="699:5" pos:end="699:38"><expr pos:start="699:5" pos:end="699:37"><name pos:start="699:5" pos:end="699:27"><name pos:start="699:5" pos:end="699:5">g</name><operator pos:start="699:6" pos:end="699:7">-&gt;</operator><name pos:start="699:8" pos:end="699:11">opts</name><index pos:start="699:12" pos:end="699:27">[<expr pos:start="699:13" pos:end="699:26"><name pos:start="699:13" pos:end="699:22"><name pos:start="699:13" pos:end="699:13">g</name><operator pos:start="699:14" pos:end="699:15">-&gt;</operator><name pos:start="699:16" pos:end="699:22">nb_opts</name></name> <operator pos:start="699:24" pos:end="699:24">-</operator> <literal type="number" pos:start="699:26" pos:end="699:26">1</literal></expr>]</index></name><operator pos:start="699:28" pos:end="699:28">.</operator><name pos:start="699:29" pos:end="699:31">opt</name> <operator pos:start="699:33" pos:end="699:33">=</operator> <name pos:start="699:35" pos:end="699:37">opt</name></expr>;</expr_stmt>
    <expr_stmt pos:start="700:5" pos:end="700:38"><expr pos:start="700:5" pos:end="700:37"><name pos:start="700:5" pos:end="700:27"><name pos:start="700:5" pos:end="700:5">g</name><operator pos:start="700:6" pos:end="700:7">-&gt;</operator><name pos:start="700:8" pos:end="700:11">opts</name><index pos:start="700:12" pos:end="700:27">[<expr pos:start="700:13" pos:end="700:26"><name pos:start="700:13" pos:end="700:22"><name pos:start="700:13" pos:end="700:13">g</name><operator pos:start="700:14" pos:end="700:15">-&gt;</operator><name pos:start="700:16" pos:end="700:22">nb_opts</name></name> <operator pos:start="700:24" pos:end="700:24">-</operator> <literal type="number" pos:start="700:26" pos:end="700:26">1</literal></expr>]</index></name><operator pos:start="700:28" pos:end="700:28">.</operator><name pos:start="700:29" pos:end="700:31">key</name> <operator pos:start="700:33" pos:end="700:33">=</operator> <name pos:start="700:35" pos:end="700:37">key</name></expr>;</expr_stmt>
    <expr_stmt pos:start="701:5" pos:end="701:38"><expr pos:start="701:5" pos:end="701:37"><name pos:start="701:5" pos:end="701:27"><name pos:start="701:5" pos:end="701:5">g</name><operator pos:start="701:6" pos:end="701:7">-&gt;</operator><name pos:start="701:8" pos:end="701:11">opts</name><index pos:start="701:12" pos:end="701:27">[<expr pos:start="701:13" pos:end="701:26"><name pos:start="701:13" pos:end="701:22"><name pos:start="701:13" pos:end="701:13">g</name><operator pos:start="701:14" pos:end="701:15">-&gt;</operator><name pos:start="701:16" pos:end="701:22">nb_opts</name></name> <operator pos:start="701:24" pos:end="701:24">-</operator> <literal type="number" pos:start="701:26" pos:end="701:26">1</literal></expr>]</index></name><operator pos:start="701:28" pos:end="701:28">.</operator><name pos:start="701:29" pos:end="701:31">val</name> <operator pos:start="701:33" pos:end="701:33">=</operator> <name pos:start="701:35" pos:end="701:37">val</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="704:1" pos:end="724:1"><type pos:start="704:1" pos:end="704:11"><specifier pos:start="704:1" pos:end="704:6">static</specifier> <name pos:start="704:8" pos:end="704:11">void</name></type> <name pos:start="704:13" pos:end="704:30">init_parse_context</name><parameter_list pos:start="704:31" pos:end="705:75">(<parameter pos:start="704:32" pos:end="704:55"><decl pos:start="704:32" pos:end="704:55"><type pos:start="704:32" pos:end="704:55"><name pos:start="704:32" pos:end="704:49">OptionParseContext</name> <modifier pos:start="704:51" pos:end="704:51">*</modifier></type><name pos:start="704:52" pos:end="704:55">octx</name></decl></parameter>,
                               <parameter pos:start="705:32" pos:end="705:59"><decl pos:start="705:32" pos:end="705:59"><type pos:start="705:32" pos:end="705:59"><specifier pos:start="705:32" pos:end="705:36">const</specifier> <name pos:start="705:38" pos:end="705:51">OptionGroupDef</name> <modifier pos:start="705:53" pos:end="705:53">*</modifier></type><name pos:start="705:54" pos:end="705:59">groups</name></decl></parameter>, <parameter pos:start="705:62" pos:end="705:74"><decl pos:start="705:62" pos:end="705:74"><type pos:start="705:62" pos:end="705:74"><name pos:start="705:62" pos:end="705:64">int</name></type> <name pos:start="705:66" pos:end="705:74">nb_groups</name></decl></parameter>)</parameter_list>
<block pos:start="706:1" pos:end="724:1">{<block_content pos:start="707:5" pos:end="723:16">
    <decl_stmt pos:start="707:5" pos:end="707:60"><decl pos:start="707:5" pos:end="707:59"><type pos:start="707:5" pos:end="707:31"><specifier pos:start="707:5" pos:end="707:10">static</specifier> <specifier pos:start="707:12" pos:end="707:16">const</specifier> <name pos:start="707:18" pos:end="707:31">OptionGroupDef</name></type> <name pos:start="707:33" pos:end="707:44">global_group</name> <init pos:start="707:46" pos:end="707:59">= <expr pos:start="707:48" pos:end="707:59"><block pos:start="707:48" pos:end="707:59">{ <expr pos:start="707:50" pos:end="707:57"><literal type="string" pos:start="707:50" pos:end="707:57">"global"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="708:5" pos:end="708:10"><decl pos:start="708:5" pos:end="708:9"><type pos:start="708:5" pos:end="708:7"><name pos:start="708:5" pos:end="708:7">int</name></type> <name pos:start="708:9" pos:end="708:9">i</name></decl>;</decl_stmt>

    <expr_stmt pos:start="710:5" pos:end="710:35"><expr pos:start="710:5" pos:end="710:34"><call pos:start="710:5" pos:end="710:34"><name pos:start="710:5" pos:end="710:10">memset</name><argument_list pos:start="710:11" pos:end="710:34">(<argument pos:start="710:12" pos:end="710:15"><expr pos:start="710:12" pos:end="710:15"><name pos:start="710:12" pos:end="710:15">octx</name></expr></argument>, <argument pos:start="710:18" pos:end="710:18"><expr pos:start="710:18" pos:end="710:18"><literal type="number" pos:start="710:18" pos:end="710:18">0</literal></expr></argument>, <argument pos:start="710:21" pos:end="710:33"><expr pos:start="710:21" pos:end="710:33"><sizeof pos:start="710:21" pos:end="710:33">sizeof<argument_list pos:start="710:27" pos:end="710:33">(<argument pos:start="710:28" pos:end="710:32"><expr pos:start="710:28" pos:end="710:32"><operator pos:start="710:28" pos:end="710:28">*</operator><name pos:start="710:29" pos:end="710:32">octx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="712:5" pos:end="712:32"><expr pos:start="712:5" pos:end="712:31"><name pos:start="712:5" pos:end="712:19"><name pos:start="712:5" pos:end="712:8">octx</name><operator pos:start="712:9" pos:end="712:10">-&gt;</operator><name pos:start="712:11" pos:end="712:19">nb_groups</name></name> <operator pos:start="712:21" pos:end="712:21">=</operator> <name pos:start="712:23" pos:end="712:31">nb_groups</name></expr>;</expr_stmt>
    <expr_stmt pos:start="713:5" pos:end="713:79"><expr pos:start="713:5" pos:end="713:78"><name pos:start="713:5" pos:end="713:16"><name pos:start="713:5" pos:end="713:8">octx</name><operator pos:start="713:9" pos:end="713:10">-&gt;</operator><name pos:start="713:11" pos:end="713:16">groups</name></name>    <operator pos:start="713:21" pos:end="713:21">=</operator> <call pos:start="713:23" pos:end="713:78"><name pos:start="713:23" pos:end="713:38">av_mallocz_array</name><argument_list pos:start="713:39" pos:end="713:78">(<argument pos:start="713:40" pos:end="713:54"><expr pos:start="713:40" pos:end="713:54"><name pos:start="713:40" pos:end="713:54"><name pos:start="713:40" pos:end="713:43">octx</name><operator pos:start="713:44" pos:end="713:45">-&gt;</operator><name pos:start="713:46" pos:end="713:54">nb_groups</name></name></expr></argument>, <argument pos:start="713:57" pos:end="713:77"><expr pos:start="713:57" pos:end="713:77"><sizeof pos:start="713:57" pos:end="713:77">sizeof<argument_list pos:start="713:63" pos:end="713:77">(<argument pos:start="713:64" pos:end="713:76"><expr pos:start="713:64" pos:end="713:76"><operator pos:start="713:64" pos:end="713:64">*</operator><name pos:start="713:65" pos:end="713:76"><name pos:start="713:65" pos:end="713:68">octx</name><operator pos:start="713:69" pos:end="713:70">-&gt;</operator><name pos:start="713:71" pos:end="713:76">groups</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="714:5" pos:end="715:24"><if pos:start="714:5" pos:end="715:24">if <condition pos:start="714:8" pos:end="714:22">(<expr pos:start="714:9" pos:end="714:21"><operator pos:start="714:9" pos:end="714:9">!</operator><name pos:start="714:10" pos:end="714:21"><name pos:start="714:10" pos:end="714:13">octx</name><operator pos:start="714:14" pos:end="714:15">-&gt;</operator><name pos:start="714:16" pos:end="714:21">groups</name></name></expr>)</condition><block type="pseudo" pos:start="715:9" pos:end="715:24"><block_content pos:start="715:9" pos:end="715:24">
        <expr_stmt pos:start="715:9" pos:end="715:24"><expr pos:start="715:9" pos:end="715:23"><call pos:start="715:9" pos:end="715:23"><name pos:start="715:9" pos:end="715:20">exit_program</name><argument_list pos:start="715:21" pos:end="715:23">(<argument pos:start="715:22" pos:end="715:22"><expr pos:start="715:22" pos:end="715:22"><literal type="number" pos:start="715:22" pos:end="715:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="717:5" pos:end="718:47">for <control pos:start="717:9" pos:end="717:41">(<init pos:start="717:10" pos:end="717:15"><expr pos:start="717:10" pos:end="717:14"><name pos:start="717:10" pos:end="717:10">i</name> <operator pos:start="717:12" pos:end="717:12">=</operator> <literal type="number" pos:start="717:14" pos:end="717:14">0</literal></expr>;</init> <condition pos:start="717:17" pos:end="717:36"><expr pos:start="717:17" pos:end="717:35"><name pos:start="717:17" pos:end="717:17">i</name> <operator pos:start="717:19" pos:end="717:19">&lt;</operator> <name pos:start="717:21" pos:end="717:35"><name pos:start="717:21" pos:end="717:24">octx</name><operator pos:start="717:25" pos:end="717:26">-&gt;</operator><name pos:start="717:27" pos:end="717:35">nb_groups</name></name></expr>;</condition> <incr pos:start="717:38" pos:end="717:40"><expr pos:start="717:38" pos:end="717:40"><name pos:start="717:38" pos:end="717:38">i</name><operator pos:start="717:39" pos:end="717:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="718:9" pos:end="718:47"><block_content pos:start="718:9" pos:end="718:47">
        <expr_stmt pos:start="718:9" pos:end="718:47"><expr pos:start="718:9" pos:end="718:46"><name pos:start="718:9" pos:end="718:23"><name pos:start="718:9" pos:end="718:12">octx</name><operator pos:start="718:13" pos:end="718:14">-&gt;</operator><name pos:start="718:15" pos:end="718:20">groups</name><index pos:start="718:21" pos:end="718:23">[<expr pos:start="718:22" pos:end="718:22"><name pos:start="718:22" pos:end="718:22">i</name></expr>]</index></name><operator pos:start="718:24" pos:end="718:24">.</operator><name pos:start="718:25" pos:end="718:33">group_def</name> <operator pos:start="718:35" pos:end="718:35">=</operator> <operator pos:start="718:37" pos:end="718:37">&amp;</operator><name pos:start="718:38" pos:end="718:46"><name pos:start="718:38" pos:end="718:43">groups</name><index pos:start="718:44" pos:end="718:46">[<expr pos:start="718:45" pos:end="718:45"><name pos:start="718:45" pos:end="718:45">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt pos:start="720:5" pos:end="720:48"><expr pos:start="720:5" pos:end="720:47"><name pos:start="720:5" pos:end="720:31"><name pos:start="720:5" pos:end="720:8">octx</name><operator pos:start="720:9" pos:end="720:10">-&gt;</operator><name pos:start="720:11" pos:end="720:21">global_opts</name><operator pos:start="720:22" pos:end="720:22">.</operator><name pos:start="720:23" pos:end="720:31">group_def</name></name> <operator pos:start="720:33" pos:end="720:33">=</operator> <operator pos:start="720:35" pos:end="720:35">&amp;</operator><name pos:start="720:36" pos:end="720:47">global_group</name></expr>;</expr_stmt>
    <expr_stmt pos:start="721:5" pos:end="721:37"><expr pos:start="721:5" pos:end="721:36"><name pos:start="721:5" pos:end="721:25"><name pos:start="721:5" pos:end="721:8">octx</name><operator pos:start="721:9" pos:end="721:10">-&gt;</operator><name pos:start="721:11" pos:end="721:21">global_opts</name><operator pos:start="721:22" pos:end="721:22">.</operator><name pos:start="721:23" pos:end="721:25">arg</name></name>       <operator pos:start="721:33" pos:end="721:33">=</operator> <literal type="string" pos:start="721:35" pos:end="721:36">""</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="723:5" pos:end="723:16"><expr pos:start="723:5" pos:end="723:15"><call pos:start="723:5" pos:end="723:15"><name pos:start="723:5" pos:end="723:13">init_opts</name><argument_list pos:start="723:14" pos:end="723:15">()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="726:1" pos:end="750:1"><type pos:start="726:1" pos:end="726:4"><name pos:start="726:1" pos:end="726:4">void</name></type> <name pos:start="726:6" pos:end="726:25">uninit_parse_context</name><parameter_list pos:start="726:26" pos:end="726:51">(<parameter pos:start="726:27" pos:end="726:50"><decl pos:start="726:27" pos:end="726:50"><type pos:start="726:27" pos:end="726:46"><name pos:start="726:27" pos:end="726:44">OptionParseContext</name> <modifier pos:start="726:46" pos:end="726:46">*</modifier></type><name pos:start="726:47" pos:end="726:50">octx</name></decl></parameter>)</parameter_list>
<block pos:start="727:1" pos:end="750:1">{<block_content pos:start="728:5" pos:end="749:18">
    <decl_stmt pos:start="728:5" pos:end="728:13"><decl pos:start="728:5" pos:end="728:9"><type pos:start="728:5" pos:end="728:7"><name pos:start="728:5" pos:end="728:7">int</name></type> <name pos:start="728:9" pos:end="728:9">i</name></decl>, <decl pos:start="728:12" pos:end="728:12"><type ref="prev" pos:start="728:5" pos:end="728:7"/><name pos:start="728:12" pos:end="728:12">j</name></decl>;</decl_stmt>

    <for pos:start="730:5" pos:end="743:5">for <control pos:start="730:9" pos:end="730:41">(<init pos:start="730:10" pos:end="730:15"><expr pos:start="730:10" pos:end="730:14"><name pos:start="730:10" pos:end="730:10">i</name> <operator pos:start="730:12" pos:end="730:12">=</operator> <literal type="number" pos:start="730:14" pos:end="730:14">0</literal></expr>;</init> <condition pos:start="730:17" pos:end="730:36"><expr pos:start="730:17" pos:end="730:35"><name pos:start="730:17" pos:end="730:17">i</name> <operator pos:start="730:19" pos:end="730:19">&lt;</operator> <name pos:start="730:21" pos:end="730:35"><name pos:start="730:21" pos:end="730:24">octx</name><operator pos:start="730:25" pos:end="730:26">-&gt;</operator><name pos:start="730:27" pos:end="730:35">nb_groups</name></name></expr>;</condition> <incr pos:start="730:38" pos:end="730:40"><expr pos:start="730:38" pos:end="730:40"><name pos:start="730:38" pos:end="730:38">i</name><operator pos:start="730:39" pos:end="730:40">++</operator></expr></incr>)</control> <block pos:start="730:43" pos:end="743:5">{<block_content pos:start="731:9" pos:end="742:29">
        <decl_stmt pos:start="731:9" pos:end="731:46"><decl pos:start="731:9" pos:end="731:45"><type pos:start="731:9" pos:end="731:25"><name pos:start="731:9" pos:end="731:23">OptionGroupList</name> <modifier pos:start="731:25" pos:end="731:25">*</modifier></type><name pos:start="731:26" pos:end="731:26">l</name> <init pos:start="731:28" pos:end="731:45">= <expr pos:start="731:30" pos:end="731:45"><operator pos:start="731:30" pos:end="731:30">&amp;</operator><name pos:start="731:31" pos:end="731:45"><name pos:start="731:31" pos:end="731:34">octx</name><operator pos:start="731:35" pos:end="731:36">-&gt;</operator><name pos:start="731:37" pos:end="731:42">groups</name><index pos:start="731:43" pos:end="731:45">[<expr pos:start="731:44" pos:end="731:44"><name pos:start="731:44" pos:end="731:44">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <for pos:start="733:9" pos:end="741:9">for <control pos:start="733:13" pos:end="733:42">(<init pos:start="733:14" pos:end="733:19"><expr pos:start="733:14" pos:end="733:18"><name pos:start="733:14" pos:end="733:14">j</name> <operator pos:start="733:16" pos:end="733:16">=</operator> <literal type="number" pos:start="733:18" pos:end="733:18">0</literal></expr>;</init> <condition pos:start="733:21" pos:end="733:37"><expr pos:start="733:21" pos:end="733:36"><name pos:start="733:21" pos:end="733:21">j</name> <operator pos:start="733:23" pos:end="733:23">&lt;</operator> <name pos:start="733:25" pos:end="733:36"><name pos:start="733:25" pos:end="733:25">l</name><operator pos:start="733:26" pos:end="733:27">-&gt;</operator><name pos:start="733:28" pos:end="733:36">nb_groups</name></name></expr>;</condition> <incr pos:start="733:39" pos:end="733:41"><expr pos:start="733:39" pos:end="733:41"><name pos:start="733:39" pos:end="733:39">j</name><operator pos:start="733:40" pos:end="733:41">++</operator></expr></incr>)</control> <block pos:start="733:44" pos:end="741:9">{<block_content pos:start="734:13" pos:end="740:49">
            <expr_stmt pos:start="734:13" pos:end="734:41"><expr pos:start="734:13" pos:end="734:40"><call pos:start="734:13" pos:end="734:40"><name pos:start="734:13" pos:end="734:20">av_freep</name><argument_list pos:start="734:21" pos:end="734:40">(<argument pos:start="734:22" pos:end="734:39"><expr pos:start="734:22" pos:end="734:39"><operator pos:start="734:22" pos:end="734:22">&amp;</operator><name pos:start="734:23" pos:end="734:34"><name pos:start="734:23" pos:end="734:23">l</name><operator pos:start="734:24" pos:end="734:25">-&gt;</operator><name pos:start="734:26" pos:end="734:31">groups</name><index pos:start="734:32" pos:end="734:34">[<expr pos:start="734:33" pos:end="734:33"><name pos:start="734:33" pos:end="734:33">j</name></expr>]</index></name><operator pos:start="734:35" pos:end="734:35">.</operator><name pos:start="734:36" pos:end="734:39">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="735:13" pos:end="735:51"><expr pos:start="735:13" pos:end="735:50"><call pos:start="735:13" pos:end="735:50"><name pos:start="735:13" pos:end="735:24">av_dict_free</name><argument_list pos:start="735:25" pos:end="735:50">(<argument pos:start="735:26" pos:end="735:49"><expr pos:start="735:26" pos:end="735:49"><operator pos:start="735:26" pos:end="735:26">&amp;</operator><name pos:start="735:27" pos:end="735:38"><name pos:start="735:27" pos:end="735:27">l</name><operator pos:start="735:28" pos:end="735:29">-&gt;</operator><name pos:start="735:30" pos:end="735:35">groups</name><index pos:start="735:36" pos:end="735:38">[<expr pos:start="735:37" pos:end="735:37"><name pos:start="735:37" pos:end="735:37">j</name></expr>]</index></name><operator pos:start="735:39" pos:end="735:39">.</operator><name pos:start="735:40" pos:end="735:49">codec_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="736:13" pos:end="736:52"><expr pos:start="736:13" pos:end="736:51"><call pos:start="736:13" pos:end="736:51"><name pos:start="736:13" pos:end="736:24">av_dict_free</name><argument_list pos:start="736:25" pos:end="736:51">(<argument pos:start="736:26" pos:end="736:50"><expr pos:start="736:26" pos:end="736:50"><operator pos:start="736:26" pos:end="736:26">&amp;</operator><name pos:start="736:27" pos:end="736:38"><name pos:start="736:27" pos:end="736:27">l</name><operator pos:start="736:28" pos:end="736:29">-&gt;</operator><name pos:start="736:30" pos:end="736:35">groups</name><index pos:start="736:36" pos:end="736:38">[<expr pos:start="736:37" pos:end="736:37"><name pos:start="736:37" pos:end="736:37">j</name></expr>]</index></name><operator pos:start="736:39" pos:end="736:39">.</operator><name pos:start="736:40" pos:end="736:50">format_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="737:13" pos:end="737:54"><expr pos:start="737:13" pos:end="737:53"><call pos:start="737:13" pos:end="737:53"><name pos:start="737:13" pos:end="737:24">av_dict_free</name><argument_list pos:start="737:25" pos:end="737:53">(<argument pos:start="737:26" pos:end="737:52"><expr pos:start="737:26" pos:end="737:52"><operator pos:start="737:26" pos:end="737:26">&amp;</operator><name pos:start="737:27" pos:end="737:38"><name pos:start="737:27" pos:end="737:27">l</name><operator pos:start="737:28" pos:end="737:29">-&gt;</operator><name pos:start="737:30" pos:end="737:35">groups</name><index pos:start="737:36" pos:end="737:38">[<expr pos:start="737:37" pos:end="737:37"><name pos:start="737:37" pos:end="737:37">j</name></expr>]</index></name><operator pos:start="737:39" pos:end="737:39">.</operator><name pos:start="737:40" pos:end="737:52">resample_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="739:13" pos:end="739:49"><expr pos:start="739:13" pos:end="739:48"><call pos:start="739:13" pos:end="739:48"><name pos:start="739:13" pos:end="739:24">av_dict_free</name><argument_list pos:start="739:25" pos:end="739:48">(<argument pos:start="739:26" pos:end="739:47"><expr pos:start="739:26" pos:end="739:47"><operator pos:start="739:26" pos:end="739:26">&amp;</operator><name pos:start="739:27" pos:end="739:38"><name pos:start="739:27" pos:end="739:27">l</name><operator pos:start="739:28" pos:end="739:29">-&gt;</operator><name pos:start="739:30" pos:end="739:35">groups</name><index pos:start="739:36" pos:end="739:38">[<expr pos:start="739:37" pos:end="739:37"><name pos:start="739:37" pos:end="739:37">j</name></expr>]</index></name><operator pos:start="739:39" pos:end="739:39">.</operator><name pos:start="739:40" pos:end="739:47">sws_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="740:13" pos:end="740:49"><expr pos:start="740:13" pos:end="740:48"><call pos:start="740:13" pos:end="740:48"><name pos:start="740:13" pos:end="740:24">av_dict_free</name><argument_list pos:start="740:25" pos:end="740:48">(<argument pos:start="740:26" pos:end="740:47"><expr pos:start="740:26" pos:end="740:47"><operator pos:start="740:26" pos:end="740:26">&amp;</operator><name pos:start="740:27" pos:end="740:38"><name pos:start="740:27" pos:end="740:27">l</name><operator pos:start="740:28" pos:end="740:29">-&gt;</operator><name pos:start="740:30" pos:end="740:35">groups</name><index pos:start="740:36" pos:end="740:38">[<expr pos:start="740:37" pos:end="740:37"><name pos:start="740:37" pos:end="740:37">j</name></expr>]</index></name><operator pos:start="740:39" pos:end="740:39">.</operator><name pos:start="740:40" pos:end="740:47">swr_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt pos:start="742:9" pos:end="742:29"><expr pos:start="742:9" pos:end="742:28"><call pos:start="742:9" pos:end="742:28"><name pos:start="742:9" pos:end="742:16">av_freep</name><argument_list pos:start="742:17" pos:end="742:28">(<argument pos:start="742:18" pos:end="742:27"><expr pos:start="742:18" pos:end="742:27"><operator pos:start="742:18" pos:end="742:18">&amp;</operator><name pos:start="742:19" pos:end="742:27"><name pos:start="742:19" pos:end="742:19">l</name><operator pos:start="742:20" pos:end="742:21">-&gt;</operator><name pos:start="742:22" pos:end="742:27">groups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="744:5" pos:end="744:28"><expr pos:start="744:5" pos:end="744:27"><call pos:start="744:5" pos:end="744:27"><name pos:start="744:5" pos:end="744:12">av_freep</name><argument_list pos:start="744:13" pos:end="744:27">(<argument pos:start="744:14" pos:end="744:26"><expr pos:start="744:14" pos:end="744:26"><operator pos:start="744:14" pos:end="744:14">&amp;</operator><name pos:start="744:15" pos:end="744:26"><name pos:start="744:15" pos:end="744:18">octx</name><operator pos:start="744:19" pos:end="744:20">-&gt;</operator><name pos:start="744:21" pos:end="744:26">groups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="746:5" pos:end="746:36"><expr pos:start="746:5" pos:end="746:35"><call pos:start="746:5" pos:end="746:35"><name pos:start="746:5" pos:end="746:12">av_freep</name><argument_list pos:start="746:13" pos:end="746:35">(<argument pos:start="746:14" pos:end="746:34"><expr pos:start="746:14" pos:end="746:34"><operator pos:start="746:14" pos:end="746:14">&amp;</operator><name pos:start="746:15" pos:end="746:34"><name pos:start="746:15" pos:end="746:18">octx</name><operator pos:start="746:19" pos:end="746:20">-&gt;</operator><name pos:start="746:21" pos:end="746:29">cur_group</name><operator pos:start="746:30" pos:end="746:30">.</operator><name pos:start="746:31" pos:end="746:34">opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="747:5" pos:end="747:38"><expr pos:start="747:5" pos:end="747:37"><call pos:start="747:5" pos:end="747:37"><name pos:start="747:5" pos:end="747:12">av_freep</name><argument_list pos:start="747:13" pos:end="747:37">(<argument pos:start="747:14" pos:end="747:36"><expr pos:start="747:14" pos:end="747:36"><operator pos:start="747:14" pos:end="747:14">&amp;</operator><name pos:start="747:15" pos:end="747:36"><name pos:start="747:15" pos:end="747:18">octx</name><operator pos:start="747:19" pos:end="747:20">-&gt;</operator><name pos:start="747:21" pos:end="747:31">global_opts</name><operator pos:start="747:32" pos:end="747:32">.</operator><name pos:start="747:33" pos:end="747:36">opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="749:5" pos:end="749:18"><expr pos:start="749:5" pos:end="749:17"><call pos:start="749:5" pos:end="749:17"><name pos:start="749:5" pos:end="749:15">uninit_opts</name><argument_list pos:start="749:16" pos:end="749:17">()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="752:1" pos:end="856:1"><type pos:start="752:1" pos:end="752:3"><name pos:start="752:1" pos:end="752:3">int</name></type> <name pos:start="752:5" pos:end="752:21">split_commandline</name><parameter_list pos:start="752:22" pos:end="754:66">(<parameter pos:start="752:23" pos:end="752:46"><decl pos:start="752:23" pos:end="752:46"><type pos:start="752:23" pos:end="752:46"><name pos:start="752:23" pos:end="752:40">OptionParseContext</name> <modifier pos:start="752:42" pos:end="752:42">*</modifier></type><name pos:start="752:43" pos:end="752:46">octx</name></decl></parameter>, <parameter pos:start="752:49" pos:end="752:56"><decl pos:start="752:49" pos:end="752:56"><type pos:start="752:49" pos:end="752:56"><name pos:start="752:49" pos:end="752:51">int</name></type> <name pos:start="752:53" pos:end="752:56">argc</name></decl></parameter>, <parameter pos:start="752:59" pos:end="752:70"><decl pos:start="752:59" pos:end="752:70"><type pos:start="752:59" pos:end="752:68"><name pos:start="752:59" pos:end="752:62">char</name> <modifier pos:start="752:64" pos:end="752:64">*</modifier></type><name pos:start="752:65" pos:end="752:70"><name pos:start="752:65" pos:end="752:68">argv</name><index pos:start="752:69" pos:end="752:70">[]</index></name></decl></parameter>,
                      <parameter pos:start="753:23" pos:end="753:46"><decl pos:start="753:23" pos:end="753:46"><type pos:start="753:23" pos:end="753:46"><specifier pos:start="753:23" pos:end="753:27">const</specifier> <name pos:start="753:29" pos:end="753:37">OptionDef</name> <modifier pos:start="753:39" pos:end="753:39">*</modifier></type><name pos:start="753:40" pos:end="753:46">options</name></decl></parameter>,
                      <parameter pos:start="754:23" pos:end="754:50"><decl pos:start="754:23" pos:end="754:50"><type pos:start="754:23" pos:end="754:50"><specifier pos:start="754:23" pos:end="754:27">const</specifier> <name pos:start="754:29" pos:end="754:42">OptionGroupDef</name> <modifier pos:start="754:44" pos:end="754:44">*</modifier></type><name pos:start="754:45" pos:end="754:50">groups</name></decl></parameter>, <parameter pos:start="754:53" pos:end="754:65"><decl pos:start="754:53" pos:end="754:65"><type pos:start="754:53" pos:end="754:65"><name pos:start="754:53" pos:end="754:55">int</name></type> <name pos:start="754:57" pos:end="754:65">nb_groups</name></decl></parameter>)</parameter_list>
<block pos:start="755:1" pos:end="856:1">{<block_content pos:start="756:5" pos:end="855:13">
    <decl_stmt pos:start="756:5" pos:end="756:21"><decl pos:start="756:5" pos:end="756:20"><type pos:start="756:5" pos:end="756:7"><name pos:start="756:5" pos:end="756:7">int</name></type> <name pos:start="756:9" pos:end="756:16">optindex</name> <init pos:start="756:18" pos:end="756:20">= <expr pos:start="756:20" pos:end="756:20"><literal type="number" pos:start="756:20" pos:end="756:20">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="757:5" pos:end="757:22"><decl pos:start="757:5" pos:end="757:21"><type pos:start="757:5" pos:end="757:7"><name pos:start="757:5" pos:end="757:7">int</name></type> <name pos:start="757:9" pos:end="757:16">dashdash</name> <init pos:start="757:18" pos:end="757:21">= <expr pos:start="757:20" pos:end="757:21"><operator pos:start="757:20" pos:end="757:20">-</operator><literal type="number" pos:start="757:21" pos:end="757:21">2</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="759:5" pos:end="759:65">/* perform system-dependent conversions for arguments list */</comment>
    <expr_stmt pos:start="760:5" pos:end="760:40"><expr pos:start="760:5" pos:end="760:39"><call pos:start="760:5" pos:end="760:39"><name pos:start="760:5" pos:end="760:25">prepare_app_arguments</name><argument_list pos:start="760:26" pos:end="760:39">(<argument pos:start="760:27" pos:end="760:31"><expr pos:start="760:27" pos:end="760:31"><operator pos:start="760:27" pos:end="760:27">&amp;</operator><name pos:start="760:28" pos:end="760:31">argc</name></expr></argument>, <argument pos:start="760:34" pos:end="760:38"><expr pos:start="760:34" pos:end="760:38"><operator pos:start="760:34" pos:end="760:34">&amp;</operator><name pos:start="760:35" pos:end="760:38">argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="762:5" pos:end="762:48"><expr pos:start="762:5" pos:end="762:47"><call pos:start="762:5" pos:end="762:47"><name pos:start="762:5" pos:end="762:22">init_parse_context</name><argument_list pos:start="762:23" pos:end="762:47">(<argument pos:start="762:24" pos:end="762:27"><expr pos:start="762:24" pos:end="762:27"><name pos:start="762:24" pos:end="762:27">octx</name></expr></argument>, <argument pos:start="762:30" pos:end="762:35"><expr pos:start="762:30" pos:end="762:35"><name pos:start="762:30" pos:end="762:35">groups</name></expr></argument>, <argument pos:start="762:38" pos:end="762:46"><expr pos:start="762:38" pos:end="762:46"><name pos:start="762:38" pos:end="762:46">nb_groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="763:5" pos:end="763:63"><expr pos:start="763:5" pos:end="763:62"><call pos:start="763:5" pos:end="763:62"><name pos:start="763:5" pos:end="763:10">av_log</name><argument_list pos:start="763:11" pos:end="763:62">(<argument pos:start="763:12" pos:end="763:15"><expr pos:start="763:12" pos:end="763:15"><name pos:start="763:12" pos:end="763:15">NULL</name></expr></argument>, <argument pos:start="763:18" pos:end="763:29"><expr pos:start="763:18" pos:end="763:29"><name pos:start="763:18" pos:end="763:29">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="763:32" pos:end="763:61"><expr pos:start="763:32" pos:end="763:61"><literal type="string" pos:start="763:32" pos:end="763:61">"Splitting the commandline.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="765:5" pos:end="847:5">while <condition pos:start="765:11" pos:end="765:27">(<expr pos:start="765:12" pos:end="765:26"><name pos:start="765:12" pos:end="765:19">optindex</name> <operator pos:start="765:21" pos:end="765:21">&lt;</operator> <name pos:start="765:23" pos:end="765:26">argc</name></expr>)</condition> <block pos:start="765:29" pos:end="847:5">{<block_content pos:start="766:9" pos:end="846:40">
        <decl_stmt pos:start="766:9" pos:end="766:49"><decl pos:start="766:9" pos:end="766:42"><type pos:start="766:9" pos:end="766:20"><specifier pos:start="766:9" pos:end="766:13">const</specifier> <name pos:start="766:15" pos:end="766:18">char</name> <modifier pos:start="766:20" pos:end="766:20">*</modifier></type><name pos:start="766:21" pos:end="766:23">opt</name> <init pos:start="766:25" pos:end="766:42">= <expr pos:start="766:27" pos:end="766:42"><name pos:start="766:27" pos:end="766:42"><name pos:start="766:27" pos:end="766:30">argv</name><index pos:start="766:31" pos:end="766:42">[<expr pos:start="766:32" pos:end="766:41"><name pos:start="766:32" pos:end="766:39">optindex</name><operator pos:start="766:40" pos:end="766:41">++</operator></expr>]</index></name></expr></init></decl>, <decl pos:start="766:45" pos:end="766:48"><type ref="prev" pos:start="766:9" pos:end="766:20"><modifier pos:start="766:45" pos:end="766:45">*</modifier></type><name pos:start="766:46" pos:end="766:48">arg</name></decl>;</decl_stmt>
        <decl_stmt pos:start="767:9" pos:end="767:28"><decl pos:start="767:9" pos:end="767:27"><type pos:start="767:9" pos:end="767:25"><specifier pos:start="767:9" pos:end="767:13">const</specifier> <name pos:start="767:15" pos:end="767:23">OptionDef</name> <modifier pos:start="767:25" pos:end="767:25">*</modifier></type><name pos:start="767:26" pos:end="767:27">po</name></decl>;</decl_stmt>
        <decl_stmt pos:start="768:9" pos:end="768:16"><decl pos:start="768:9" pos:end="768:15"><type pos:start="768:9" pos:end="768:11"><name pos:start="768:9" pos:end="768:11">int</name></type> <name pos:start="768:13" pos:end="768:15">ret</name></decl>;</decl_stmt>

        <expr_stmt pos:start="770:9" pos:end="770:67"><expr pos:start="770:9" pos:end="770:66"><call pos:start="770:9" pos:end="770:66"><name pos:start="770:9" pos:end="770:14">av_log</name><argument_list pos:start="770:15" pos:end="770:66">(<argument pos:start="770:16" pos:end="770:19"><expr pos:start="770:16" pos:end="770:19"><name pos:start="770:16" pos:end="770:19">NULL</name></expr></argument>, <argument pos:start="770:22" pos:end="770:33"><expr pos:start="770:22" pos:end="770:33"><name pos:start="770:22" pos:end="770:33">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="770:36" pos:end="770:60"><expr pos:start="770:36" pos:end="770:60"><literal type="string" pos:start="770:36" pos:end="770:60">"Reading option '%s' ..."</literal></expr></argument>, <argument pos:start="770:63" pos:end="770:65"><expr pos:start="770:63" pos:end="770:65"><name pos:start="770:63" pos:end="770:65">opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="772:9" pos:end="775:9"><if pos:start="772:9" pos:end="775:9">if <condition pos:start="772:12" pos:end="772:54">(<expr pos:start="772:13" pos:end="772:53"><name pos:start="772:13" pos:end="772:18"><name pos:start="772:13" pos:end="772:15">opt</name><index pos:start="772:16" pos:end="772:18">[<expr pos:start="772:17" pos:end="772:17"><literal type="number" pos:start="772:17" pos:end="772:17">0</literal></expr>]</index></name> <operator pos:start="772:20" pos:end="772:21">==</operator> <literal type="char" pos:start="772:23" pos:end="772:25">'-'</literal> <operator pos:start="772:27" pos:end="772:28">&amp;&amp;</operator> <name pos:start="772:30" pos:end="772:35"><name pos:start="772:30" pos:end="772:32">opt</name><index pos:start="772:33" pos:end="772:35">[<expr pos:start="772:34" pos:end="772:34"><literal type="number" pos:start="772:34" pos:end="772:34">1</literal></expr>]</index></name> <operator pos:start="772:37" pos:end="772:38">==</operator> <literal type="char" pos:start="772:40" pos:end="772:42">'-'</literal> <operator pos:start="772:44" pos:end="772:45">&amp;&amp;</operator> <operator pos:start="772:47" pos:end="772:47">!</operator><name pos:start="772:48" pos:end="772:53"><name pos:start="772:48" pos:end="772:50">opt</name><index pos:start="772:51" pos:end="772:53">[<expr pos:start="772:52" pos:end="772:52"><literal type="number" pos:start="772:52" pos:end="772:52">2</literal></expr>]</index></name></expr>)</condition> <block pos:start="772:56" pos:end="775:9">{<block_content pos:start="773:13" pos:end="774:21">
            <expr_stmt pos:start="773:13" pos:end="773:32"><expr pos:start="773:13" pos:end="773:31"><name pos:start="773:13" pos:end="773:20">dashdash</name> <operator pos:start="773:22" pos:end="773:22">=</operator> <name pos:start="773:24" pos:end="773:31">optindex</name></expr>;</expr_stmt>
            <continue pos:start="774:13" pos:end="774:21">continue;</continue>
        </block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="776:9" pos:end="776:60">/* unnamed group separators, e.g. output filename */</comment>
        <if_stmt pos:start="777:9" pos:end="781:9"><if pos:start="777:9" pos:end="781:9">if <condition pos:start="777:12" pos:end="777:63">(<expr pos:start="777:13" pos:end="777:62"><name pos:start="777:13" pos:end="777:18"><name pos:start="777:13" pos:end="777:15">opt</name><index pos:start="777:16" pos:end="777:18">[<expr pos:start="777:17" pos:end="777:17"><literal type="number" pos:start="777:17" pos:end="777:17">0</literal></expr>]</index></name> <operator pos:start="777:20" pos:end="777:21">!=</operator> <literal type="char" pos:start="777:23" pos:end="777:25">'-'</literal> <operator pos:start="777:27" pos:end="777:28">||</operator> <operator pos:start="777:30" pos:end="777:30">!</operator><name pos:start="777:31" pos:end="777:36"><name pos:start="777:31" pos:end="777:33">opt</name><index pos:start="777:34" pos:end="777:36">[<expr pos:start="777:35" pos:end="777:35"><literal type="number" pos:start="777:35" pos:end="777:35">1</literal></expr>]</index></name> <operator pos:start="777:38" pos:end="777:39">||</operator> <name pos:start="777:41" pos:end="777:48">dashdash</name><operator pos:start="777:49" pos:end="777:49">+</operator><literal type="number" pos:start="777:50" pos:end="777:50">1</literal> <operator pos:start="777:52" pos:end="777:53">==</operator> <name pos:start="777:55" pos:end="777:62">optindex</name></expr>)</condition> <block pos:start="777:65" pos:end="781:9">{<block_content pos:start="778:13" pos:end="780:21">
            <expr_stmt pos:start="778:13" pos:end="778:39"><expr pos:start="778:13" pos:end="778:38"><call pos:start="778:13" pos:end="778:38"><name pos:start="778:13" pos:end="778:24">finish_group</name><argument_list pos:start="778:25" pos:end="778:38">(<argument pos:start="778:26" pos:end="778:29"><expr pos:start="778:26" pos:end="778:29"><name pos:start="778:26" pos:end="778:29">octx</name></expr></argument>, <argument pos:start="778:32" pos:end="778:32"><expr pos:start="778:32" pos:end="778:32"><literal type="number" pos:start="778:32" pos:end="778:32">0</literal></expr></argument>, <argument pos:start="778:35" pos:end="778:37"><expr pos:start="778:35" pos:end="778:37"><name pos:start="778:35" pos:end="778:37">opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="779:13" pos:end="779:76"><expr pos:start="779:13" pos:end="779:75"><call pos:start="779:13" pos:end="779:75"><name pos:start="779:13" pos:end="779:18">av_log</name><argument_list pos:start="779:19" pos:end="779:75">(<argument pos:start="779:20" pos:end="779:23"><expr pos:start="779:20" pos:end="779:23"><name pos:start="779:20" pos:end="779:23">NULL</name></expr></argument>, <argument pos:start="779:26" pos:end="779:37"><expr pos:start="779:26" pos:end="779:37"><name pos:start="779:26" pos:end="779:37">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="779:40" pos:end="779:58"><expr pos:start="779:40" pos:end="779:58"><literal type="string" pos:start="779:40" pos:end="779:58">" matched as %s.\n"</literal></expr></argument>, <argument pos:start="779:61" pos:end="779:74"><expr pos:start="779:61" pos:end="779:74"><name pos:start="779:61" pos:end="779:69"><name pos:start="779:61" pos:end="779:66">groups</name><index pos:start="779:67" pos:end="779:69">[<expr pos:start="779:68" pos:end="779:68"><literal type="number" pos:start="779:68" pos:end="779:68">0</literal></expr>]</index></name><operator pos:start="779:70" pos:end="779:70">.</operator><name pos:start="779:71" pos:end="779:74">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue pos:start="780:13" pos:end="780:21">continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="782:9" pos:end="792:0"><expr pos:start="782:9" pos:end="782:13"><name pos:start="782:9" pos:end="782:11">opt</name><operator pos:start="782:12" pos:end="782:13">++</operator></expr>;</expr_stmt>

<cpp:define pos:start="784:1" pos:end="791:11">#<cpp:directive pos:start="784:2" pos:end="784:7">define</cpp:directive> <cpp:macro pos:start="784:9" pos:end="784:20"><name pos:start="784:9" pos:end="784:15">GET_ARG</name><parameter_list pos:start="784:16" pos:end="784:20">(<parameter pos:start="784:17" pos:end="784:19"><type pos:start="784:17" pos:end="784:19"><name pos:start="784:17" pos:end="784:19">arg</name></type></parameter>)</parameter_list></cpp:macro>                                                           \
<cpp:value pos:start="785:1" pos:end="791:11">do {                                                                           \
    arg = argv[optindex++];                                                    \
    if (!arg) {                                                                \
        av_log(NULL, AV_LOG_ERROR, "Missing argument for option '%s'.\n", opt);\
        return AVERROR(EINVAL);                                                \
    }                                                                          \
} while (0)</cpp:value></cpp:define>

        <comment type="block" pos:start="793:9" pos:end="793:45">/* named group separators, e.g. -i */</comment>
        <if_stmt pos:start="794:9" pos:end="800:9"><if pos:start="794:9" pos:end="800:9">if <condition pos:start="794:12" pos:end="794:71">(<expr pos:start="794:13" pos:end="794:70"><operator pos:start="794:13" pos:end="794:13">(</operator><name pos:start="794:14" pos:end="794:16">ret</name> <operator pos:start="794:18" pos:end="794:18">=</operator> <call pos:start="794:20" pos:end="794:64"><name pos:start="794:20" pos:end="794:40">match_group_separator</name><argument_list pos:start="794:41" pos:end="794:64">(<argument pos:start="794:42" pos:end="794:47"><expr pos:start="794:42" pos:end="794:47"><name pos:start="794:42" pos:end="794:47">groups</name></expr></argument>, <argument pos:start="794:50" pos:end="794:58"><expr pos:start="794:50" pos:end="794:58"><name pos:start="794:50" pos:end="794:58">nb_groups</name></expr></argument>, <argument pos:start="794:61" pos:end="794:63"><expr pos:start="794:61" pos:end="794:63"><name pos:start="794:61" pos:end="794:63">opt</name></expr></argument>)</argument_list></call><operator pos:start="794:65" pos:end="794:65">)</operator> <operator pos:start="794:67" pos:end="794:68">&gt;=</operator> <literal type="number" pos:start="794:70" pos:end="794:70">0</literal></expr>)</condition> <block pos:start="794:73" pos:end="800:9">{<block_content pos:start="795:13" pos:end="799:21">
            <expr_stmt pos:start="795:13" pos:end="795:25"><expr pos:start="795:13" pos:end="795:24"><call pos:start="795:13" pos:end="795:24"><name pos:start="795:13" pos:end="795:19">GET_ARG</name><argument_list pos:start="795:20" pos:end="795:24">(<argument pos:start="795:21" pos:end="795:23"><expr pos:start="795:21" pos:end="795:23"><name pos:start="795:21" pos:end="795:23">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="796:13" pos:end="796:41"><expr pos:start="796:13" pos:end="796:40"><call pos:start="796:13" pos:end="796:40"><name pos:start="796:13" pos:end="796:24">finish_group</name><argument_list pos:start="796:25" pos:end="796:40">(<argument pos:start="796:26" pos:end="796:29"><expr pos:start="796:26" pos:end="796:29"><name pos:start="796:26" pos:end="796:29">octx</name></expr></argument>, <argument pos:start="796:32" pos:end="796:34"><expr pos:start="796:32" pos:end="796:34"><name pos:start="796:32" pos:end="796:34">ret</name></expr></argument>, <argument pos:start="796:37" pos:end="796:39"><expr pos:start="796:37" pos:end="796:39"><name pos:start="796:37" pos:end="796:39">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="797:13" pos:end="798:42"><expr pos:start="797:13" pos:end="798:41"><call pos:start="797:13" pos:end="798:41"><name pos:start="797:13" pos:end="797:18">av_log</name><argument_list pos:start="797:19" pos:end="798:41">(<argument pos:start="797:20" pos:end="797:23"><expr pos:start="797:20" pos:end="797:23"><name pos:start="797:20" pos:end="797:23">NULL</name></expr></argument>, <argument pos:start="797:26" pos:end="797:37"><expr pos:start="797:26" pos:end="797:37"><name pos:start="797:26" pos:end="797:37">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="797:40" pos:end="797:77"><expr pos:start="797:40" pos:end="797:77"><literal type="string" pos:start="797:40" pos:end="797:77">" matched as %s with argument '%s'.\n"</literal></expr></argument>,
                   <argument pos:start="798:20" pos:end="798:35"><expr pos:start="798:20" pos:end="798:35"><name pos:start="798:20" pos:end="798:30"><name pos:start="798:20" pos:end="798:25">groups</name><index pos:start="798:26" pos:end="798:30">[<expr pos:start="798:27" pos:end="798:29"><name pos:start="798:27" pos:end="798:29">ret</name></expr>]</index></name><operator pos:start="798:31" pos:end="798:31">.</operator><name pos:start="798:32" pos:end="798:35">name</name></expr></argument>, <argument pos:start="798:38" pos:end="798:40"><expr pos:start="798:38" pos:end="798:40"><name pos:start="798:38" pos:end="798:40">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue pos:start="799:13" pos:end="799:21">continue;</continue>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="802:9" pos:end="802:28">/* normal options */</comment>
        <expr_stmt pos:start="803:9" pos:end="803:39"><expr pos:start="803:9" pos:end="803:38"><name pos:start="803:9" pos:end="803:10">po</name> <operator pos:start="803:12" pos:end="803:12">=</operator> <call pos:start="803:14" pos:end="803:38"><name pos:start="803:14" pos:end="803:24">find_option</name><argument_list pos:start="803:25" pos:end="803:38">(<argument pos:start="803:26" pos:end="803:32"><expr pos:start="803:26" pos:end="803:32"><name pos:start="803:26" pos:end="803:32">options</name></expr></argument>, <argument pos:start="803:35" pos:end="803:37"><expr pos:start="803:35" pos:end="803:37"><name pos:start="803:35" pos:end="803:37">opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="804:9" pos:end="818:9"><if pos:start="804:9" pos:end="818:9">if <condition pos:start="804:12" pos:end="804:21">(<expr pos:start="804:13" pos:end="804:20"><name pos:start="804:13" pos:end="804:20"><name pos:start="804:13" pos:end="804:14">po</name><operator pos:start="804:15" pos:end="804:16">-&gt;</operator><name pos:start="804:17" pos:end="804:20">name</name></name></expr>)</condition> <block pos:start="804:23" pos:end="818:9">{<block_content pos:start="805:13" pos:end="817:21">
            <if_stmt pos:start="805:13" pos:end="812:13"><if pos:start="805:13" pos:end="808:13">if <condition pos:start="805:16" pos:end="805:37">(<expr pos:start="805:17" pos:end="805:36"><name pos:start="805:17" pos:end="805:25"><name pos:start="805:17" pos:end="805:18">po</name><operator pos:start="805:19" pos:end="805:20">-&gt;</operator><name pos:start="805:21" pos:end="805:25">flags</name></name> <operator pos:start="805:27" pos:end="805:27">&amp;</operator> <name pos:start="805:29" pos:end="805:36">OPT_EXIT</name></expr>)</condition> <block pos:start="805:39" pos:end="808:13">{<block_content pos:start="807:17" pos:end="807:39">
                <comment type="block" pos:start="806:17" pos:end="806:48">/* optional argument, e.g. -h */</comment>
                <expr_stmt pos:start="807:17" pos:end="807:39"><expr pos:start="807:17" pos:end="807:38"><name pos:start="807:17" pos:end="807:19">arg</name> <operator pos:start="807:21" pos:end="807:21">=</operator> <name pos:start="807:23" pos:end="807:38"><name pos:start="807:23" pos:end="807:26">argv</name><index pos:start="807:27" pos:end="807:38">[<expr pos:start="807:28" pos:end="807:37"><name pos:start="807:28" pos:end="807:35">optindex</name><operator pos:start="807:36" pos:end="807:37">++</operator></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif" pos:start="808:15" pos:end="810:13">else if <condition pos:start="808:23" pos:end="808:43">(<expr pos:start="808:24" pos:end="808:42"><name pos:start="808:24" pos:end="808:32"><name pos:start="808:24" pos:end="808:25">po</name><operator pos:start="808:26" pos:end="808:27">-&gt;</operator><name pos:start="808:28" pos:end="808:32">flags</name></name> <operator pos:start="808:34" pos:end="808:34">&amp;</operator> <name pos:start="808:36" pos:end="808:42">HAS_ARG</name></expr>)</condition> <block pos:start="808:45" pos:end="810:13">{<block_content pos:start="809:17" pos:end="809:29">
                <expr_stmt pos:start="809:17" pos:end="809:29"><expr pos:start="809:17" pos:end="809:28"><call pos:start="809:17" pos:end="809:28"><name pos:start="809:17" pos:end="809:23">GET_ARG</name><argument_list pos:start="809:24" pos:end="809:28">(<argument pos:start="809:25" pos:end="809:27"><expr pos:start="809:25" pos:end="809:27"><name pos:start="809:25" pos:end="809:27">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="810:15" pos:end="812:13">else <block pos:start="810:20" pos:end="812:13">{<block_content pos:start="811:17" pos:end="811:26">
                <expr_stmt pos:start="811:17" pos:end="811:26"><expr pos:start="811:17" pos:end="811:25"><name pos:start="811:17" pos:end="811:19">arg</name> <operator pos:start="811:21" pos:end="811:21">=</operator> <literal type="string" pos:start="811:23" pos:end="811:25">"1"</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="814:13" pos:end="814:40"><expr pos:start="814:13" pos:end="814:39"><call pos:start="814:13" pos:end="814:39"><name pos:start="814:13" pos:end="814:19">add_opt</name><argument_list pos:start="814:20" pos:end="814:39">(<argument pos:start="814:21" pos:end="814:24"><expr pos:start="814:21" pos:end="814:24"><name pos:start="814:21" pos:end="814:24">octx</name></expr></argument>, <argument pos:start="814:27" pos:end="814:28"><expr pos:start="814:27" pos:end="814:28"><name pos:start="814:27" pos:end="814:28">po</name></expr></argument>, <argument pos:start="814:31" pos:end="814:33"><expr pos:start="814:31" pos:end="814:33"><name pos:start="814:31" pos:end="814:33">opt</name></expr></argument>, <argument pos:start="814:36" pos:end="814:38"><expr pos:start="814:36" pos:end="814:38"><name pos:start="814:36" pos:end="814:38">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="815:13" pos:end="816:64"><expr pos:start="815:13" pos:end="816:63"><call pos:start="815:13" pos:end="816:63"><name pos:start="815:13" pos:end="815:18">av_log</name><argument_list pos:start="815:19" pos:end="816:63">(<argument pos:start="815:20" pos:end="815:23"><expr pos:start="815:20" pos:end="815:23"><name pos:start="815:20" pos:end="815:23">NULL</name></expr></argument>, <argument pos:start="815:26" pos:end="815:37"><expr pos:start="815:26" pos:end="815:37"><name pos:start="815:26" pos:end="815:37">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="815:40" pos:end="816:37"><expr pos:start="815:40" pos:end="816:37"><literal type="string" pos:start="815:40" pos:end="815:75">" matched as option '%s' (%s) with "</literal>
                   <literal type="string" pos:start="816:20" pos:end="816:37">"argument '%s'.\n"</literal></expr></argument>, <argument pos:start="816:40" pos:end="816:47"><expr pos:start="816:40" pos:end="816:47"><name pos:start="816:40" pos:end="816:47"><name pos:start="816:40" pos:end="816:41">po</name><operator pos:start="816:42" pos:end="816:43">-&gt;</operator><name pos:start="816:44" pos:end="816:47">name</name></name></expr></argument>, <argument pos:start="816:50" pos:end="816:57"><expr pos:start="816:50" pos:end="816:57"><name pos:start="816:50" pos:end="816:57"><name pos:start="816:50" pos:end="816:51">po</name><operator pos:start="816:52" pos:end="816:53">-&gt;</operator><name pos:start="816:54" pos:end="816:57">help</name></name></expr></argument>, <argument pos:start="816:60" pos:end="816:62"><expr pos:start="816:60" pos:end="816:62"><name pos:start="816:60" pos:end="816:62">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue pos:start="817:13" pos:end="817:21">continue;</continue>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="820:9" pos:end="820:23">/* AVOptions */</comment>
        <if_stmt pos:start="821:9" pos:end="833:9"><if pos:start="821:9" pos:end="833:9">if <condition pos:start="821:12" pos:end="821:27">(<expr pos:start="821:13" pos:end="821:26"><name pos:start="821:13" pos:end="821:26"><name pos:start="821:13" pos:end="821:16">argv</name><index pos:start="821:17" pos:end="821:26">[<expr pos:start="821:18" pos:end="821:25"><name pos:start="821:18" pos:end="821:25">optindex</name></expr>]</index></name></expr>)</condition> <block pos:start="821:29" pos:end="833:9">{<block_content pos:start="822:13" pos:end="832:13">
            <expr_stmt pos:start="822:13" pos:end="822:57"><expr pos:start="822:13" pos:end="822:56"><name pos:start="822:13" pos:end="822:15">ret</name> <operator pos:start="822:17" pos:end="822:17">=</operator> <call pos:start="822:19" pos:end="822:56"><name pos:start="822:19" pos:end="822:29">opt_default</name><argument_list pos:start="822:30" pos:end="822:56">(<argument pos:start="822:31" pos:end="822:34"><expr pos:start="822:31" pos:end="822:34"><name pos:start="822:31" pos:end="822:34">NULL</name></expr></argument>, <argument pos:start="822:37" pos:end="822:39"><expr pos:start="822:37" pos:end="822:39"><name pos:start="822:37" pos:end="822:39">opt</name></expr></argument>, <argument pos:start="822:42" pos:end="822:55"><expr pos:start="822:42" pos:end="822:55"><name pos:start="822:42" pos:end="822:55"><name pos:start="822:42" pos:end="822:45">argv</name><index pos:start="822:46" pos:end="822:55">[<expr pos:start="822:47" pos:end="822:54"><name pos:start="822:47" pos:end="822:54">optindex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="823:13" pos:end="832:13"><if pos:start="823:13" pos:end="828:13">if <condition pos:start="823:16" pos:end="823:25">(<expr pos:start="823:17" pos:end="823:24"><name pos:start="823:17" pos:end="823:19">ret</name> <operator pos:start="823:21" pos:end="823:22">&gt;=</operator> <literal type="number" pos:start="823:24" pos:end="823:24">0</literal></expr>)</condition> <block pos:start="823:27" pos:end="828:13">{<block_content pos:start="824:17" pos:end="827:25">
                <expr_stmt pos:start="824:17" pos:end="825:64"><expr pos:start="824:17" pos:end="825:63"><call pos:start="824:17" pos:end="825:63"><name pos:start="824:17" pos:end="824:22">av_log</name><argument_list pos:start="824:23" pos:end="825:63">(<argument pos:start="824:24" pos:end="824:27"><expr pos:start="824:24" pos:end="824:27"><name pos:start="824:24" pos:end="824:27">NULL</name></expr></argument>, <argument pos:start="824:30" pos:end="824:41"><expr pos:start="824:30" pos:end="824:41"><name pos:start="824:30" pos:end="824:41">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="824:44" pos:end="825:41"><expr pos:start="824:44" pos:end="825:41"><literal type="string" pos:start="824:44" pos:end="824:76">" matched as AVOption '%s' with "</literal>
                       <literal type="string" pos:start="825:24" pos:end="825:41">"argument '%s'.\n"</literal></expr></argument>, <argument pos:start="825:44" pos:end="825:46"><expr pos:start="825:44" pos:end="825:46"><name pos:start="825:44" pos:end="825:46">opt</name></expr></argument>, <argument pos:start="825:49" pos:end="825:62"><expr pos:start="825:49" pos:end="825:62"><name pos:start="825:49" pos:end="825:62"><name pos:start="825:49" pos:end="825:52">argv</name><index pos:start="825:53" pos:end="825:62">[<expr pos:start="825:54" pos:end="825:61"><name pos:start="825:54" pos:end="825:61">optindex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="826:17" pos:end="826:27"><expr pos:start="826:17" pos:end="826:26"><name pos:start="826:17" pos:end="826:24">optindex</name><operator pos:start="826:25" pos:end="826:26">++</operator></expr>;</expr_stmt>
                <continue pos:start="827:17" pos:end="827:25">continue;</continue>
            </block_content>}</block></if> <if type="elseif" pos:start="828:15" pos:end="832:13">else if <condition pos:start="828:23" pos:end="828:55">(<expr pos:start="828:24" pos:end="828:54"><name pos:start="828:24" pos:end="828:26">ret</name> <operator pos:start="828:28" pos:end="828:29">!=</operator> <name pos:start="828:31" pos:end="828:54">AVERROR_OPTION_NOT_FOUND</name></expr>)</condition> <block pos:start="828:57" pos:end="832:13">{<block_content pos:start="829:17" pos:end="831:27">
                <expr_stmt pos:start="829:17" pos:end="830:69"><expr pos:start="829:17" pos:end="830:68"><call pos:start="829:17" pos:end="830:68"><name pos:start="829:17" pos:end="829:22">av_log</name><argument_list pos:start="829:23" pos:end="830:68">(<argument pos:start="829:24" pos:end="829:27"><expr pos:start="829:24" pos:end="829:27"><name pos:start="829:24" pos:end="829:27">NULL</name></expr></argument>, <argument pos:start="829:30" pos:end="829:41"><expr pos:start="829:30" pos:end="829:41"><name pos:start="829:30" pos:end="829:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="829:44" pos:end="830:46"><expr pos:start="829:44" pos:end="830:46"><literal type="string" pos:start="829:44" pos:end="829:71">"Error parsing option '%s' "</literal>
                       <literal type="string" pos:start="830:24" pos:end="830:46">"with argument '%s'.\n"</literal></expr></argument>, <argument pos:start="830:49" pos:end="830:51"><expr pos:start="830:49" pos:end="830:51"><name pos:start="830:49" pos:end="830:51">opt</name></expr></argument>, <argument pos:start="830:54" pos:end="830:67"><expr pos:start="830:54" pos:end="830:67"><name pos:start="830:54" pos:end="830:67"><name pos:start="830:54" pos:end="830:57">argv</name><index pos:start="830:58" pos:end="830:67">[<expr pos:start="830:59" pos:end="830:66"><name pos:start="830:59" pos:end="830:66">optindex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="831:17" pos:end="831:27">return <expr pos:start="831:24" pos:end="831:26"><name pos:start="831:24" pos:end="831:26">ret</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="835:9" pos:end="835:36">/* boolean -nofoo options */</comment>
        <if_stmt pos:start="836:9" pos:end="843:9"><if pos:start="836:9" pos:end="843:9">if <condition pos:start="836:12" pos:end="838:45">(<expr pos:start="836:13" pos:end="838:44"><name pos:start="836:13" pos:end="836:18"><name pos:start="836:13" pos:end="836:15">opt</name><index pos:start="836:16" pos:end="836:18">[<expr pos:start="836:17" pos:end="836:17"><literal type="number" pos:start="836:17" pos:end="836:17">0</literal></expr>]</index></name> <operator pos:start="836:20" pos:end="836:21">==</operator> <literal type="char" pos:start="836:23" pos:end="836:25">'n'</literal> <operator pos:start="836:27" pos:end="836:28">&amp;&amp;</operator> <name pos:start="836:30" pos:end="836:35"><name pos:start="836:30" pos:end="836:32">opt</name><index pos:start="836:33" pos:end="836:35">[<expr pos:start="836:34" pos:end="836:34"><literal type="number" pos:start="836:34" pos:end="836:34">1</literal></expr>]</index></name> <operator pos:start="836:37" pos:end="836:38">==</operator> <literal type="char" pos:start="836:40" pos:end="836:42">'o'</literal> <operator pos:start="836:44" pos:end="836:45">&amp;&amp;</operator>
            <operator pos:start="837:13" pos:end="837:13">(</operator><name pos:start="837:14" pos:end="837:15">po</name> <operator pos:start="837:17" pos:end="837:17">=</operator> <call pos:start="837:19" pos:end="837:47"><name pos:start="837:19" pos:end="837:29">find_option</name><argument_list pos:start="837:30" pos:end="837:47">(<argument pos:start="837:31" pos:end="837:37"><expr pos:start="837:31" pos:end="837:37"><name pos:start="837:31" pos:end="837:37">options</name></expr></argument>, <argument pos:start="837:40" pos:end="837:46"><expr pos:start="837:40" pos:end="837:46"><name pos:start="837:40" pos:end="837:42">opt</name> <operator pos:start="837:44" pos:end="837:44">+</operator> <literal type="number" pos:start="837:46" pos:end="837:46">2</literal></expr></argument>)</argument_list></call><operator pos:start="837:48" pos:end="837:48">)</operator> <operator pos:start="837:50" pos:end="837:51">&amp;&amp;</operator>
            <name pos:start="838:13" pos:end="838:20"><name pos:start="838:13" pos:end="838:14">po</name><operator pos:start="838:15" pos:end="838:16">-&gt;</operator><name pos:start="838:17" pos:end="838:20">name</name></name> <operator pos:start="838:22" pos:end="838:23">&amp;&amp;</operator> <name pos:start="838:25" pos:end="838:33"><name pos:start="838:25" pos:end="838:26">po</name><operator pos:start="838:27" pos:end="838:28">-&gt;</operator><name pos:start="838:29" pos:end="838:33">flags</name></name> <operator pos:start="838:35" pos:end="838:35">&amp;</operator> <name pos:start="838:37" pos:end="838:44">OPT_BOOL</name></expr>)</condition> <block pos:start="838:47" pos:end="843:9">{<block_content pos:start="839:13" pos:end="842:21">
            <expr_stmt pos:start="839:13" pos:end="839:40"><expr pos:start="839:13" pos:end="839:39"><call pos:start="839:13" pos:end="839:39"><name pos:start="839:13" pos:end="839:19">add_opt</name><argument_list pos:start="839:20" pos:end="839:39">(<argument pos:start="839:21" pos:end="839:24"><expr pos:start="839:21" pos:end="839:24"><name pos:start="839:21" pos:end="839:24">octx</name></expr></argument>, <argument pos:start="839:27" pos:end="839:28"><expr pos:start="839:27" pos:end="839:28"><name pos:start="839:27" pos:end="839:28">po</name></expr></argument>, <argument pos:start="839:31" pos:end="839:33"><expr pos:start="839:31" pos:end="839:33"><name pos:start="839:31" pos:end="839:33">opt</name></expr></argument>, <argument pos:start="839:36" pos:end="839:38"><expr pos:start="839:36" pos:end="839:38"><literal type="string" pos:start="839:36" pos:end="839:38">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="840:13" pos:end="841:56"><expr pos:start="840:13" pos:end="841:55"><call pos:start="840:13" pos:end="841:55"><name pos:start="840:13" pos:end="840:18">av_log</name><argument_list pos:start="840:19" pos:end="841:55">(<argument pos:start="840:20" pos:end="840:23"><expr pos:start="840:20" pos:end="840:23"><name pos:start="840:20" pos:end="840:23">NULL</name></expr></argument>, <argument pos:start="840:26" pos:end="840:37"><expr pos:start="840:26" pos:end="840:37"><name pos:start="840:26" pos:end="840:37">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="840:40" pos:end="841:34"><expr pos:start="840:40" pos:end="841:34"><literal type="string" pos:start="840:40" pos:end="840:75">" matched as option '%s' (%s) with "</literal>
                   <literal type="string" pos:start="841:20" pos:end="841:34">"argument 0.\n"</literal></expr></argument>, <argument pos:start="841:37" pos:end="841:44"><expr pos:start="841:37" pos:end="841:44"><name pos:start="841:37" pos:end="841:44"><name pos:start="841:37" pos:end="841:38">po</name><operator pos:start="841:39" pos:end="841:40">-&gt;</operator><name pos:start="841:41" pos:end="841:44">name</name></name></expr></argument>, <argument pos:start="841:47" pos:end="841:54"><expr pos:start="841:47" pos:end="841:54"><name pos:start="841:47" pos:end="841:54"><name pos:start="841:47" pos:end="841:48">po</name><operator pos:start="841:49" pos:end="841:50">-&gt;</operator><name pos:start="841:51" pos:end="841:54">help</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue pos:start="842:13" pos:end="842:21">continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="845:9" pos:end="845:71"><expr pos:start="845:9" pos:end="845:70"><call pos:start="845:9" pos:end="845:70"><name pos:start="845:9" pos:end="845:14">av_log</name><argument_list pos:start="845:15" pos:end="845:70">(<argument pos:start="845:16" pos:end="845:19"><expr pos:start="845:16" pos:end="845:19"><name pos:start="845:16" pos:end="845:19">NULL</name></expr></argument>, <argument pos:start="845:22" pos:end="845:33"><expr pos:start="845:22" pos:end="845:33"><name pos:start="845:22" pos:end="845:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="845:36" pos:end="845:64"><expr pos:start="845:36" pos:end="845:64"><literal type="string" pos:start="845:36" pos:end="845:64">"Unrecognized option '%s'.\n"</literal></expr></argument>, <argument pos:start="845:67" pos:end="845:69"><expr pos:start="845:67" pos:end="845:69"><name pos:start="845:67" pos:end="845:69">opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="846:9" pos:end="846:40">return <expr pos:start="846:16" pos:end="846:39"><name pos:start="846:16" pos:end="846:39">AVERROR_OPTION_NOT_FOUND</name></expr>;</return>
    </block_content>}</block></while>

    <if_stmt pos:start="849:5" pos:end="851:33"><if pos:start="849:5" pos:end="851:33">if <condition pos:start="849:8" pos:end="849:78">(<expr pos:start="849:9" pos:end="849:77"><name pos:start="849:9" pos:end="849:31"><name pos:start="849:9" pos:end="849:12">octx</name><operator pos:start="849:13" pos:end="849:14">-&gt;</operator><name pos:start="849:15" pos:end="849:23">cur_group</name><operator pos:start="849:24" pos:end="849:24">.</operator><name pos:start="849:25" pos:end="849:31">nb_opts</name></name> <operator pos:start="849:33" pos:end="849:34">||</operator> <name pos:start="849:36" pos:end="849:45">codec_opts</name> <operator pos:start="849:47" pos:end="849:48">||</operator> <name pos:start="849:50" pos:end="849:60">format_opts</name> <operator pos:start="849:62" pos:end="849:63">||</operator> <name pos:start="849:65" pos:end="849:77">resample_opts</name></expr>)</condition><block type="pseudo" pos:start="850:9" pos:end="851:33"><block_content pos:start="850:9" pos:end="851:33">
        <expr_stmt pos:start="850:9" pos:end="851:33"><expr pos:start="850:9" pos:end="851:32"><call pos:start="850:9" pos:end="851:32"><name pos:start="850:9" pos:end="850:14">av_log</name><argument_list pos:start="850:15" pos:end="851:32">(<argument pos:start="850:16" pos:end="850:19"><expr pos:start="850:16" pos:end="850:19"><name pos:start="850:16" pos:end="850:19">NULL</name></expr></argument>, <argument pos:start="850:22" pos:end="850:35"><expr pos:start="850:22" pos:end="850:35"><name pos:start="850:22" pos:end="850:35">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="850:38" pos:end="851:31"><expr pos:start="850:38" pos:end="851:31"><literal type="string" pos:start="850:38" pos:end="850:74">"Trailing options were found on the "</literal>
               <literal type="string" pos:start="851:16" pos:end="851:31">"commandline.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="853:5" pos:end="853:72"><expr pos:start="853:5" pos:end="853:71"><call pos:start="853:5" pos:end="853:71"><name pos:start="853:5" pos:end="853:10">av_log</name><argument_list pos:start="853:11" pos:end="853:71">(<argument pos:start="853:12" pos:end="853:15"><expr pos:start="853:12" pos:end="853:15"><name pos:start="853:12" pos:end="853:15">NULL</name></expr></argument>, <argument pos:start="853:18" pos:end="853:29"><expr pos:start="853:18" pos:end="853:29"><name pos:start="853:18" pos:end="853:29">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="853:32" pos:end="853:70"><expr pos:start="853:32" pos:end="853:70"><literal type="string" pos:start="853:32" pos:end="853:70">"Finished splitting the commandline.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="855:5" pos:end="855:13">return <expr pos:start="855:12" pos:end="855:12"><literal type="number" pos:start="855:12" pos:end="855:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="858:1" pos:end="868:1"><type pos:start="858:1" pos:end="858:3"><name pos:start="858:1" pos:end="858:3">int</name></type> <name pos:start="858:5" pos:end="858:16">opt_cpuflags</name><parameter_list pos:start="858:17" pos:end="858:64">(<parameter pos:start="858:18" pos:end="858:29"><decl pos:start="858:18" pos:end="858:29"><type pos:start="858:18" pos:end="858:29"><name pos:start="858:18" pos:end="858:21">void</name> <modifier pos:start="858:23" pos:end="858:23">*</modifier></type><name pos:start="858:24" pos:end="858:29">optctx</name></decl></parameter>, <parameter pos:start="858:32" pos:end="858:46"><decl pos:start="858:32" pos:end="858:46"><type pos:start="858:32" pos:end="858:46"><specifier pos:start="858:32" pos:end="858:36">const</specifier> <name pos:start="858:38" pos:end="858:41">char</name> <modifier pos:start="858:43" pos:end="858:43">*</modifier></type><name pos:start="858:44" pos:end="858:46">opt</name></decl></parameter>, <parameter pos:start="858:49" pos:end="858:63"><decl pos:start="858:49" pos:end="858:63"><type pos:start="858:49" pos:end="858:63"><specifier pos:start="858:49" pos:end="858:53">const</specifier> <name pos:start="858:55" pos:end="858:58">char</name> <modifier pos:start="858:60" pos:end="858:60">*</modifier></type><name pos:start="858:61" pos:end="858:63">arg</name></decl></parameter>)</parameter_list>
<block pos:start="859:1" pos:end="868:1">{<block_content pos:start="860:5" pos:end="867:13">
    <decl_stmt pos:start="860:5" pos:end="860:12"><decl pos:start="860:5" pos:end="860:11"><type pos:start="860:5" pos:end="860:7"><name pos:start="860:5" pos:end="860:7">int</name></type> <name pos:start="860:9" pos:end="860:11">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="861:5" pos:end="861:40"><decl pos:start="861:5" pos:end="861:39"><type pos:start="861:5" pos:end="861:12"><name pos:start="861:5" pos:end="861:12">unsigned</name></type> <name pos:start="861:14" pos:end="861:18">flags</name> <init pos:start="861:20" pos:end="861:39">= <expr pos:start="861:22" pos:end="861:39"><call pos:start="861:22" pos:end="861:39"><name pos:start="861:22" pos:end="861:37">av_get_cpu_flags</name><argument_list pos:start="861:38" pos:end="861:39">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="863:5" pos:end="864:19"><if pos:start="863:5" pos:end="864:19">if <condition pos:start="863:8" pos:end="863:51">(<expr pos:start="863:9" pos:end="863:50"><operator pos:start="863:9" pos:end="863:9">(</operator><name pos:start="863:10" pos:end="863:12">ret</name> <operator pos:start="863:14" pos:end="863:14">=</operator> <call pos:start="863:16" pos:end="863:45"><name pos:start="863:16" pos:end="863:32">av_parse_cpu_caps</name><argument_list pos:start="863:33" pos:end="863:45">(<argument pos:start="863:34" pos:end="863:39"><expr pos:start="863:34" pos:end="863:39"><operator pos:start="863:34" pos:end="863:34">&amp;</operator><name pos:start="863:35" pos:end="863:39">flags</name></expr></argument>, <argument pos:start="863:42" pos:end="863:44"><expr pos:start="863:42" pos:end="863:44"><name pos:start="863:42" pos:end="863:44">arg</name></expr></argument>)</argument_list></call><operator pos:start="863:46" pos:end="863:46">)</operator> <operator pos:start="863:48" pos:end="863:48">&lt;</operator> <literal type="number" pos:start="863:50" pos:end="863:50">0</literal></expr>)</condition><block type="pseudo" pos:start="864:9" pos:end="864:19"><block_content pos:start="864:9" pos:end="864:19">
        <return pos:start="864:9" pos:end="864:19">return <expr pos:start="864:16" pos:end="864:18"><name pos:start="864:16" pos:end="864:18">ret</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="866:5" pos:end="866:30"><expr pos:start="866:5" pos:end="866:29"><call pos:start="866:5" pos:end="866:29"><name pos:start="866:5" pos:end="866:22">av_force_cpu_flags</name><argument_list pos:start="866:23" pos:end="866:29">(<argument pos:start="866:24" pos:end="866:28"><expr pos:start="866:24" pos:end="866:28"><name pos:start="866:24" pos:end="866:28">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="867:5" pos:end="867:13">return <expr pos:start="867:12" pos:end="867:12"><literal type="number" pos:start="867:12" pos:end="867:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="870:1" pos:end="918:1"><type pos:start="870:1" pos:end="870:3"><name pos:start="870:1" pos:end="870:3">int</name></type> <name pos:start="870:5" pos:end="870:16">opt_loglevel</name><parameter_list pos:start="870:17" pos:end="870:64">(<parameter pos:start="870:18" pos:end="870:29"><decl pos:start="870:18" pos:end="870:29"><type pos:start="870:18" pos:end="870:29"><name pos:start="870:18" pos:end="870:21">void</name> <modifier pos:start="870:23" pos:end="870:23">*</modifier></type><name pos:start="870:24" pos:end="870:29">optctx</name></decl></parameter>, <parameter pos:start="870:32" pos:end="870:46"><decl pos:start="870:32" pos:end="870:46"><type pos:start="870:32" pos:end="870:46"><specifier pos:start="870:32" pos:end="870:36">const</specifier> <name pos:start="870:38" pos:end="870:41">char</name> <modifier pos:start="870:43" pos:end="870:43">*</modifier></type><name pos:start="870:44" pos:end="870:46">opt</name></decl></parameter>, <parameter pos:start="870:49" pos:end="870:63"><decl pos:start="870:49" pos:end="870:63"><type pos:start="870:49" pos:end="870:63"><specifier pos:start="870:49" pos:end="870:53">const</specifier> <name pos:start="870:55" pos:end="870:58">char</name> <modifier pos:start="870:60" pos:end="870:60">*</modifier></type><name pos:start="870:61" pos:end="870:63">arg</name></decl></parameter>)</parameter_list>
<block pos:start="871:1" pos:end="918:1">{<block_content pos:start="872:5" pos:end="917:13">
    <struct pos:start="872:5" pos:end="882:6"><specifier pos:start="872:5" pos:end="872:9">const</specifier> struct <block pos:start="872:18" pos:end="872:49">{ <decl_stmt pos:start="872:20" pos:end="872:36"><decl pos:start="872:20" pos:end="872:35"><type pos:start="872:20" pos:end="872:31"><specifier pos:start="872:20" pos:end="872:24">const</specifier> <name pos:start="872:26" pos:end="872:29">char</name> <modifier pos:start="872:31" pos:end="872:31">*</modifier></type><name pos:start="872:32" pos:end="872:35">name</name></decl>;</decl_stmt> <decl_stmt pos:start="872:38" pos:end="872:47"><decl pos:start="872:38" pos:end="872:46"><type pos:start="872:38" pos:end="872:40"><name pos:start="872:38" pos:end="872:40">int</name></type> <name pos:start="872:42" pos:end="872:46">level</name></decl>;</decl_stmt> }</block> <decl pos:start="872:51" pos:end="882:5"><name pos:start="872:51" pos:end="872:62"><name pos:start="872:51" pos:end="872:60">log_levels</name><index pos:start="872:61" pos:end="872:62">[]</index></name> <init pos:start="872:64" pos:end="882:5">= <expr pos:start="872:66" pos:end="882:5"><block pos:start="872:66" pos:end="882:5">{
        <expr pos:start="873:9" pos:end="873:37"><block pos:start="873:9" pos:end="873:37">{ <expr pos:start="873:11" pos:end="873:17"><literal type="string" pos:start="873:11" pos:end="873:17">"quiet"</literal></expr>  , <expr pos:start="873:22" pos:end="873:33"><name pos:start="873:22" pos:end="873:33">AV_LOG_QUIET</name></expr>   }</block></expr>,
        <expr pos:start="874:9" pos:end="874:37"><block pos:start="874:9" pos:end="874:37">{ <expr pos:start="874:11" pos:end="874:17"><literal type="string" pos:start="874:11" pos:end="874:17">"panic"</literal></expr>  , <expr pos:start="874:22" pos:end="874:33"><name pos:start="874:22" pos:end="874:33">AV_LOG_PANIC</name></expr>   }</block></expr>,
        <expr pos:start="875:9" pos:end="875:37"><block pos:start="875:9" pos:end="875:37">{ <expr pos:start="875:11" pos:end="875:17"><literal type="string" pos:start="875:11" pos:end="875:17">"fatal"</literal></expr>  , <expr pos:start="875:22" pos:end="875:33"><name pos:start="875:22" pos:end="875:33">AV_LOG_FATAL</name></expr>   }</block></expr>,
        <expr pos:start="876:9" pos:end="876:37"><block pos:start="876:9" pos:end="876:37">{ <expr pos:start="876:11" pos:end="876:17"><literal type="string" pos:start="876:11" pos:end="876:17">"error"</literal></expr>  , <expr pos:start="876:22" pos:end="876:33"><name pos:start="876:22" pos:end="876:33">AV_LOG_ERROR</name></expr>   }</block></expr>,
        <expr pos:start="877:9" pos:end="877:37"><block pos:start="877:9" pos:end="877:37">{ <expr pos:start="877:11" pos:end="877:19"><literal type="string" pos:start="877:11" pos:end="877:19">"warning"</literal></expr>, <expr pos:start="877:22" pos:end="877:35"><name pos:start="877:22" pos:end="877:35">AV_LOG_WARNING</name></expr> }</block></expr>,
        <expr pos:start="878:9" pos:end="878:37"><block pos:start="878:9" pos:end="878:37">{ <expr pos:start="878:11" pos:end="878:16"><literal type="string" pos:start="878:11" pos:end="878:16">"info"</literal></expr>   , <expr pos:start="878:22" pos:end="878:32"><name pos:start="878:22" pos:end="878:32">AV_LOG_INFO</name></expr>    }</block></expr>,
        <expr pos:start="879:9" pos:end="879:37"><block pos:start="879:9" pos:end="879:37">{ <expr pos:start="879:11" pos:end="879:19"><literal type="string" pos:start="879:11" pos:end="879:19">"verbose"</literal></expr>, <expr pos:start="879:22" pos:end="879:35"><name pos:start="879:22" pos:end="879:35">AV_LOG_VERBOSE</name></expr> }</block></expr>,
        <expr pos:start="880:9" pos:end="880:37"><block pos:start="880:9" pos:end="880:37">{ <expr pos:start="880:11" pos:end="880:17"><literal type="string" pos:start="880:11" pos:end="880:17">"debug"</literal></expr>  , <expr pos:start="880:22" pos:end="880:33"><name pos:start="880:22" pos:end="880:33">AV_LOG_DEBUG</name></expr>   }</block></expr>,
        <expr pos:start="881:9" pos:end="881:37"><block pos:start="881:9" pos:end="881:37">{ <expr pos:start="881:11" pos:end="881:17"><literal type="string" pos:start="881:11" pos:end="881:17">"trace"</literal></expr>  , <expr pos:start="881:22" pos:end="881:33"><name pos:start="881:22" pos:end="881:33">AV_LOG_TRACE</name></expr>   }</block></expr>,
    }</block></expr></init></decl>;</struct>
    <decl_stmt pos:start="883:5" pos:end="883:15"><decl pos:start="883:5" pos:end="883:14"><type pos:start="883:5" pos:end="883:10"><name pos:start="883:5" pos:end="883:8">char</name> <modifier pos:start="883:10" pos:end="883:10">*</modifier></type><name pos:start="883:11" pos:end="883:14">tail</name></decl>;</decl_stmt>
    <decl_stmt pos:start="884:5" pos:end="884:14"><decl pos:start="884:5" pos:end="884:13"><type pos:start="884:5" pos:end="884:7"><name pos:start="884:5" pos:end="884:7">int</name></type> <name pos:start="884:9" pos:end="884:13">level</name></decl>;</decl_stmt>
    <decl_stmt pos:start="885:5" pos:end="885:14"><decl pos:start="885:5" pos:end="885:13"><type pos:start="885:5" pos:end="885:7"><name pos:start="885:5" pos:end="885:7">int</name></type> <name pos:start="885:9" pos:end="885:13">flags</name></decl>;</decl_stmt>
    <decl_stmt pos:start="886:5" pos:end="886:10"><decl pos:start="886:5" pos:end="886:9"><type pos:start="886:5" pos:end="886:7"><name pos:start="886:5" pos:end="886:7">int</name></type> <name pos:start="886:9" pos:end="886:9">i</name></decl>;</decl_stmt>

    <expr_stmt pos:start="888:5" pos:end="888:31"><expr pos:start="888:5" pos:end="888:30"><name pos:start="888:5" pos:end="888:9">flags</name> <operator pos:start="888:11" pos:end="888:11">=</operator> <call pos:start="888:13" pos:end="888:30"><name pos:start="888:13" pos:end="888:28">av_log_get_flags</name><argument_list pos:start="888:29" pos:end="888:30">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="889:5" pos:end="889:33"><expr pos:start="889:5" pos:end="889:32"><name pos:start="889:5" pos:end="889:8">tail</name> <operator pos:start="889:10" pos:end="889:10">=</operator> <call pos:start="889:12" pos:end="889:32"><name pos:start="889:12" pos:end="889:17">strstr</name><argument_list pos:start="889:18" pos:end="889:32">(<argument pos:start="889:19" pos:end="889:21"><expr pos:start="889:19" pos:end="889:21"><name pos:start="889:19" pos:end="889:21">arg</name></expr></argument>, <argument pos:start="889:24" pos:end="889:31"><expr pos:start="889:24" pos:end="889:31"><literal type="string" pos:start="889:24" pos:end="889:31">"repeat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="890:5" pos:end="893:38"><if pos:start="890:5" pos:end="891:39">if <condition pos:start="890:8" pos:end="890:13">(<expr pos:start="890:9" pos:end="890:12"><name pos:start="890:9" pos:end="890:12">tail</name></expr>)</condition><block type="pseudo" pos:start="891:9" pos:end="891:39"><block_content pos:start="891:9" pos:end="891:39">
        <expr_stmt pos:start="891:9" pos:end="891:39"><expr pos:start="891:9" pos:end="891:38"><name pos:start="891:9" pos:end="891:13">flags</name> <operator pos:start="891:15" pos:end="891:16">&amp;=</operator> <operator pos:start="891:18" pos:end="891:18">~</operator><name pos:start="891:19" pos:end="891:38">AV_LOG_SKIP_REPEATED</name></expr>;</expr_stmt></block_content></block></if>
    <else pos:start="892:5" pos:end="893:38">else<block type="pseudo" pos:start="893:9" pos:end="893:38"><block_content pos:start="893:9" pos:end="893:38">
        <expr_stmt pos:start="893:9" pos:end="893:38"><expr pos:start="893:9" pos:end="893:37"><name pos:start="893:9" pos:end="893:13">flags</name> <operator pos:start="893:15" pos:end="893:16">|=</operator> <name pos:start="893:18" pos:end="893:37">AV_LOG_SKIP_REPEATED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="895:5" pos:end="895:28"><expr pos:start="895:5" pos:end="895:27"><call pos:start="895:5" pos:end="895:27"><name pos:start="895:5" pos:end="895:20">av_log_set_flags</name><argument_list pos:start="895:21" pos:end="895:27">(<argument pos:start="895:22" pos:end="895:26"><expr pos:start="895:22" pos:end="895:26"><name pos:start="895:22" pos:end="895:26">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="896:5" pos:end="897:33"><if pos:start="896:5" pos:end="897:33">if <condition pos:start="896:8" pos:end="896:20">(<expr pos:start="896:9" pos:end="896:19"><name pos:start="896:9" pos:end="896:12">tail</name> <operator pos:start="896:14" pos:end="896:15">==</operator> <name pos:start="896:17" pos:end="896:19">arg</name></expr>)</condition><block type="pseudo" pos:start="897:9" pos:end="897:33"><block_content pos:start="897:9" pos:end="897:33">
        <expr_stmt pos:start="897:9" pos:end="897:33"><expr pos:start="897:9" pos:end="897:32"><name pos:start="897:9" pos:end="897:11">arg</name> <operator pos:start="897:13" pos:end="897:14">+=</operator> <literal type="number" pos:start="897:16" pos:end="897:18">6</literal> <operator pos:start="897:18" pos:end="897:18">+</operator> <operator pos:start="897:20" pos:end="897:20">(</operator><name pos:start="897:21" pos:end="897:26"><name pos:start="897:21" pos:end="897:23">arg</name><index pos:start="897:24" pos:end="897:26">[<expr pos:start="897:25" pos:end="897:25"><literal type="number" pos:start="897:25" pos:end="897:25">6</literal></expr>]</index></name><operator pos:start="897:27" pos:end="897:28">==</operator><literal type="char" pos:start="897:29" pos:end="897:31">'+'</literal><operator pos:start="897:32" pos:end="897:32">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="898:5" pos:end="899:17"><if pos:start="898:5" pos:end="899:17">if<condition pos:start="898:7" pos:end="898:21">(<expr pos:start="898:8" pos:end="898:20"><name pos:start="898:8" pos:end="898:11">tail</name> <operator pos:start="898:13" pos:end="898:14">&amp;&amp;</operator> <operator pos:start="898:16" pos:end="898:16">!</operator><operator pos:start="898:17" pos:end="898:17">*</operator><name pos:start="898:18" pos:end="898:20">arg</name></expr>)</condition><block type="pseudo" pos:start="899:9" pos:end="899:17"><block_content pos:start="899:9" pos:end="899:17">
        <return pos:start="899:9" pos:end="899:17">return <expr pos:start="899:16" pos:end="899:16"><literal type="number" pos:start="899:16" pos:end="899:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <for pos:start="901:5" pos:end="906:5">for <control pos:start="901:9" pos:end="901:52">(<init pos:start="901:10" pos:end="901:15"><expr pos:start="901:10" pos:end="901:14"><name pos:start="901:10" pos:end="901:10">i</name> <operator pos:start="901:12" pos:end="901:12">=</operator> <literal type="number" pos:start="901:14" pos:end="901:14">0</literal></expr>;</init> <condition pos:start="901:17" pos:end="901:47"><expr pos:start="901:17" pos:end="901:46"><name pos:start="901:17" pos:end="901:17">i</name> <operator pos:start="901:19" pos:end="901:19">&lt;</operator> <call pos:start="901:21" pos:end="901:46"><name pos:start="901:21" pos:end="901:34">FF_ARRAY_ELEMS</name><argument_list pos:start="901:35" pos:end="901:46">(<argument pos:start="901:36" pos:end="901:45"><expr pos:start="901:36" pos:end="901:45"><name pos:start="901:36" pos:end="901:45">log_levels</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="901:49" pos:end="901:51"><expr pos:start="901:49" pos:end="901:51"><name pos:start="901:49" pos:end="901:49">i</name><operator pos:start="901:50" pos:end="901:51">++</operator></expr></incr>)</control> <block pos:start="901:54" pos:end="906:5">{<block_content pos:start="902:9" pos:end="905:9">
        <if_stmt pos:start="902:9" pos:end="905:9"><if pos:start="902:9" pos:end="905:9">if <condition pos:start="902:12" pos:end="902:45">(<expr pos:start="902:13" pos:end="902:44"><operator pos:start="902:13" pos:end="902:13">!</operator><call pos:start="902:14" pos:end="902:44"><name pos:start="902:14" pos:end="902:19">strcmp</name><argument_list pos:start="902:20" pos:end="902:44">(<argument pos:start="902:21" pos:end="902:38"><expr pos:start="902:21" pos:end="902:38"><name pos:start="902:21" pos:end="902:33"><name pos:start="902:21" pos:end="902:30">log_levels</name><index pos:start="902:31" pos:end="902:33">[<expr pos:start="902:32" pos:end="902:32"><name pos:start="902:32" pos:end="902:32">i</name></expr>]</index></name><operator pos:start="902:34" pos:end="902:34">.</operator><name pos:start="902:35" pos:end="902:38">name</name></expr></argument>, <argument pos:start="902:41" pos:end="902:43"><expr pos:start="902:41" pos:end="902:43"><name pos:start="902:41" pos:end="902:43">arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="902:47" pos:end="905:9">{<block_content pos:start="903:13" pos:end="904:21">
            <expr_stmt pos:start="903:13" pos:end="903:50"><expr pos:start="903:13" pos:end="903:49"><call pos:start="903:13" pos:end="903:49"><name pos:start="903:13" pos:end="903:28">av_log_set_level</name><argument_list pos:start="903:29" pos:end="903:49">(<argument pos:start="903:30" pos:end="903:48"><expr pos:start="903:30" pos:end="903:48"><name pos:start="903:30" pos:end="903:42"><name pos:start="903:30" pos:end="903:39">log_levels</name><index pos:start="903:40" pos:end="903:42">[<expr pos:start="903:41" pos:end="903:41"><name pos:start="903:41" pos:end="903:41">i</name></expr>]</index></name><operator pos:start="903:43" pos:end="903:43">.</operator><name pos:start="903:44" pos:end="903:48">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="904:13" pos:end="904:21">return <expr pos:start="904:20" pos:end="904:20"><literal type="number" pos:start="904:20" pos:end="904:20">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt pos:start="908:5" pos:end="908:35"><expr pos:start="908:5" pos:end="908:34"><name pos:start="908:5" pos:end="908:9">level</name> <operator pos:start="908:11" pos:end="908:11">=</operator> <call pos:start="908:13" pos:end="908:34"><name pos:start="908:13" pos:end="908:18">strtol</name><argument_list pos:start="908:19" pos:end="908:34">(<argument pos:start="908:20" pos:end="908:22"><expr pos:start="908:20" pos:end="908:22"><name pos:start="908:20" pos:end="908:22">arg</name></expr></argument>, <argument pos:start="908:25" pos:end="908:29"><expr pos:start="908:25" pos:end="908:29"><operator pos:start="908:25" pos:end="908:25">&amp;</operator><name pos:start="908:26" pos:end="908:29">tail</name></expr></argument>, <argument pos:start="908:32" pos:end="908:33"><expr pos:start="908:32" pos:end="908:33"><literal type="number" pos:start="908:32" pos:end="908:33">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="909:5" pos:end="915:5"><if pos:start="909:5" pos:end="915:5">if <condition pos:start="909:8" pos:end="909:14">(<expr pos:start="909:9" pos:end="909:13"><operator pos:start="909:9" pos:end="909:9">*</operator><name pos:start="909:10" pos:end="909:13">tail</name></expr>)</condition> <block pos:start="909:16" pos:end="915:5">{<block_content pos:start="910:9" pos:end="914:24">
        <expr_stmt pos:start="910:9" pos:end="911:57"><expr pos:start="910:9" pos:end="911:56"><call pos:start="910:9" pos:end="911:56"><name pos:start="910:9" pos:end="910:14">av_log</name><argument_list pos:start="910:15" pos:end="911:56">(<argument pos:start="910:16" pos:end="910:19"><expr pos:start="910:16" pos:end="910:19"><name pos:start="910:16" pos:end="910:19">NULL</name></expr></argument>, <argument pos:start="910:22" pos:end="910:33"><expr pos:start="910:22" pos:end="910:33"><name pos:start="910:22" pos:end="910:33">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="910:36" pos:end="911:50"><expr pos:start="910:36" pos:end="911:50"><literal type="string" pos:start="910:36" pos:end="910:62">"Invalid loglevel \"%s\". "</literal>
               <literal type="string" pos:start="911:16" pos:end="911:50">"Possible levels are numbers or:\n"</literal></expr></argument>, <argument pos:start="911:53" pos:end="911:55"><expr pos:start="911:53" pos:end="911:55"><name pos:start="911:53" pos:end="911:55">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for pos:start="912:9" pos:end="913:71">for <control pos:start="912:13" pos:end="912:56">(<init pos:start="912:14" pos:end="912:19"><expr pos:start="912:14" pos:end="912:18"><name pos:start="912:14" pos:end="912:14">i</name> <operator pos:start="912:16" pos:end="912:16">=</operator> <literal type="number" pos:start="912:18" pos:end="912:18">0</literal></expr>;</init> <condition pos:start="912:21" pos:end="912:51"><expr pos:start="912:21" pos:end="912:50"><name pos:start="912:21" pos:end="912:21">i</name> <operator pos:start="912:23" pos:end="912:23">&lt;</operator> <call pos:start="912:25" pos:end="912:50"><name pos:start="912:25" pos:end="912:38">FF_ARRAY_ELEMS</name><argument_list pos:start="912:39" pos:end="912:50">(<argument pos:start="912:40" pos:end="912:49"><expr pos:start="912:40" pos:end="912:49"><name pos:start="912:40" pos:end="912:49">log_levels</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="912:53" pos:end="912:55"><expr pos:start="912:53" pos:end="912:55"><name pos:start="912:53" pos:end="912:53">i</name><operator pos:start="912:54" pos:end="912:55">++</operator></expr></incr>)</control><block type="pseudo" pos:start="913:13" pos:end="913:71"><block_content pos:start="913:13" pos:end="913:71">
            <expr_stmt pos:start="913:13" pos:end="913:71"><expr pos:start="913:13" pos:end="913:70"><call pos:start="913:13" pos:end="913:70"><name pos:start="913:13" pos:end="913:18">av_log</name><argument_list pos:start="913:19" pos:end="913:70">(<argument pos:start="913:20" pos:end="913:23"><expr pos:start="913:20" pos:end="913:23"><name pos:start="913:20" pos:end="913:23">NULL</name></expr></argument>, <argument pos:start="913:26" pos:end="913:37"><expr pos:start="913:26" pos:end="913:37"><name pos:start="913:26" pos:end="913:37">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="913:40" pos:end="913:49"><expr pos:start="913:40" pos:end="913:49"><literal type="string" pos:start="913:40" pos:end="913:49">"\"%s\"\n"</literal></expr></argument>, <argument pos:start="913:52" pos:end="913:69"><expr pos:start="913:52" pos:end="913:69"><name pos:start="913:52" pos:end="913:64"><name pos:start="913:52" pos:end="913:61">log_levels</name><index pos:start="913:62" pos:end="913:64">[<expr pos:start="913:63" pos:end="913:63"><name pos:start="913:63" pos:end="913:63">i</name></expr>]</index></name><operator pos:start="913:65" pos:end="913:65">.</operator><name pos:start="913:66" pos:end="913:69">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt pos:start="914:9" pos:end="914:24"><expr pos:start="914:9" pos:end="914:23"><call pos:start="914:9" pos:end="914:23"><name pos:start="914:9" pos:end="914:20">exit_program</name><argument_list pos:start="914:21" pos:end="914:23">(<argument pos:start="914:22" pos:end="914:22"><expr pos:start="914:22" pos:end="914:22"><literal type="number" pos:start="914:22" pos:end="914:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="916:5" pos:end="916:28"><expr pos:start="916:5" pos:end="916:27"><call pos:start="916:5" pos:end="916:27"><name pos:start="916:5" pos:end="916:20">av_log_set_level</name><argument_list pos:start="916:21" pos:end="916:27">(<argument pos:start="916:22" pos:end="916:26"><expr pos:start="916:22" pos:end="916:26"><name pos:start="916:22" pos:end="916:26">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="917:5" pos:end="917:13">return <expr pos:start="917:12" pos:end="917:12"><literal type="number" pos:start="917:12" pos:end="917:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="920:1" pos:end="946:1"><type pos:start="920:1" pos:end="920:11"><specifier pos:start="920:1" pos:end="920:6">static</specifier> <name pos:start="920:8" pos:end="920:11">void</name></type> <name pos:start="920:13" pos:end="920:36">expand_filename_template</name><parameter_list pos:start="920:37" pos:end="921:51">(<parameter pos:start="920:38" pos:end="920:49"><decl pos:start="920:38" pos:end="920:49"><type pos:start="920:38" pos:end="920:49"><name pos:start="920:38" pos:end="920:45">AVBPrint</name> <modifier pos:start="920:47" pos:end="920:47">*</modifier></type><name pos:start="920:48" pos:end="920:49">bp</name></decl></parameter>, <parameter pos:start="920:52" pos:end="920:71"><decl pos:start="920:52" pos:end="920:71"><type pos:start="920:52" pos:end="920:71"><specifier pos:start="920:52" pos:end="920:56">const</specifier> <name pos:start="920:58" pos:end="920:61">char</name> <modifier pos:start="920:63" pos:end="920:63">*</modifier></type><name pos:start="920:64" pos:end="920:71">template</name></decl></parameter>,
                                     <parameter pos:start="921:38" pos:end="921:50"><decl pos:start="921:38" pos:end="921:50"><type pos:start="921:38" pos:end="921:50"><name pos:start="921:38" pos:end="921:46"><name pos:start="921:38" pos:end="921:43">struct</name> <name pos:start="921:45" pos:end="921:46">tm</name></name> <modifier pos:start="921:48" pos:end="921:48">*</modifier></type><name pos:start="921:49" pos:end="921:50">tm</name></decl></parameter>)</parameter_list>
<block pos:start="922:1" pos:end="946:1">{<block_content pos:start="923:5" pos:end="945:5">
    <decl_stmt pos:start="923:5" pos:end="923:10"><decl pos:start="923:5" pos:end="923:9"><type pos:start="923:5" pos:end="923:7"><name pos:start="923:5" pos:end="923:7">int</name></type> <name pos:start="923:9" pos:end="923:9">c</name></decl>;</decl_stmt>

    <while pos:start="925:5" pos:end="945:5">while <condition pos:start="925:11" pos:end="925:31">(<expr pos:start="925:12" pos:end="925:30"><operator pos:start="925:12" pos:end="925:12">(</operator><name pos:start="925:13" pos:end="925:13">c</name> <operator pos:start="925:15" pos:end="925:15">=</operator> <operator pos:start="925:17" pos:end="925:17">*</operator><operator pos:start="925:18" pos:end="925:18">(</operator><name pos:start="925:19" pos:end="925:26">template</name><operator pos:start="925:27" pos:end="925:28">++</operator><operator pos:start="925:29" pos:end="925:29">)</operator><operator pos:start="925:30" pos:end="925:30">)</operator></expr>)</condition> <block pos:start="925:33" pos:end="945:5">{<block_content pos:start="926:9" pos:end="944:9">
        <if_stmt pos:start="926:9" pos:end="944:9"><if pos:start="926:9" pos:end="942:9">if <condition pos:start="926:12" pos:end="926:21">(<expr pos:start="926:13" pos:end="926:20"><name pos:start="926:13" pos:end="926:13">c</name> <operator pos:start="926:15" pos:end="926:16">==</operator> <literal type="char" pos:start="926:18" pos:end="926:20">'%'</literal></expr>)</condition> <block pos:start="926:23" pos:end="942:9">{<block_content pos:start="927:13" pos:end="941:13">
            <if_stmt pos:start="927:13" pos:end="928:22"><if pos:start="927:13" pos:end="928:22">if <condition pos:start="927:16" pos:end="927:37">(<expr pos:start="927:17" pos:end="927:36"><operator pos:start="927:17" pos:end="927:17">!</operator><operator pos:start="927:18" pos:end="927:18">(</operator><name pos:start="927:19" pos:end="927:19">c</name> <operator pos:start="927:21" pos:end="927:21">=</operator> <operator pos:start="927:23" pos:end="927:23">*</operator><operator pos:start="927:24" pos:end="927:24">(</operator><name pos:start="927:25" pos:end="927:32">template</name><operator pos:start="927:33" pos:end="927:34">++</operator><operator pos:start="927:35" pos:end="927:35">)</operator><operator pos:start="927:36" pos:end="927:36">)</operator></expr>)</condition><block type="pseudo" pos:start="928:17" pos:end="928:22"><block_content pos:start="928:17" pos:end="928:22">
                <break pos:start="928:17" pos:end="928:22">break;</break></block_content></block></if></if_stmt>
            <switch pos:start="929:13" pos:end="941:13">switch <condition pos:start="929:20" pos:end="929:22">(<expr pos:start="929:21" pos:end="929:21"><name pos:start="929:21" pos:end="929:21">c</name></expr>)</condition> <block pos:start="929:24" pos:end="941:13">{<block_content pos:start="930:13" pos:end="940:22">
            <case pos:start="930:13" pos:end="930:21">case <expr pos:start="930:18" pos:end="930:20"><literal type="char" pos:start="930:18" pos:end="930:20">'p'</literal></expr>:</case>
                <expr_stmt pos:start="931:17" pos:end="931:51"><expr pos:start="931:17" pos:end="931:50"><call pos:start="931:17" pos:end="931:50"><name pos:start="931:17" pos:end="931:26">av_bprintf</name><argument_list pos:start="931:27" pos:end="931:50">(<argument pos:start="931:28" pos:end="931:29"><expr pos:start="931:28" pos:end="931:29"><name pos:start="931:28" pos:end="931:29">bp</name></expr></argument>, <argument pos:start="931:32" pos:end="931:35"><expr pos:start="931:32" pos:end="931:35"><literal type="string" pos:start="931:32" pos:end="931:35">"%s"</literal></expr></argument>, <argument pos:start="931:38" pos:end="931:49"><expr pos:start="931:38" pos:end="931:49"><name pos:start="931:38" pos:end="931:49">program_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="932:17" pos:end="932:22">break;</break>
            <case pos:start="933:13" pos:end="933:21">case <expr pos:start="933:18" pos:end="933:20"><literal type="char" pos:start="933:18" pos:end="933:20">'t'</literal></expr>:</case>
                <expr_stmt pos:start="934:17" pos:end="936:64"><expr pos:start="934:17" pos:end="936:63"><call pos:start="934:17" pos:end="936:63"><name pos:start="934:17" pos:end="934:26">av_bprintf</name><argument_list pos:start="934:27" pos:end="936:63">(<argument pos:start="934:28" pos:end="934:29"><expr pos:start="934:28" pos:end="934:29"><name pos:start="934:28" pos:end="934:29">bp</name></expr></argument>, <argument pos:start="934:32" pos:end="934:58"><expr pos:start="934:32" pos:end="934:58"><literal type="string" pos:start="934:32" pos:end="934:58">"%04d%02d%02d-%02d%02d%02d"</literal></expr></argument>,
                           <argument pos:start="935:28" pos:end="935:45"><expr pos:start="935:28" pos:end="935:45"><name pos:start="935:28" pos:end="935:38"><name pos:start="935:28" pos:end="935:29">tm</name><operator pos:start="935:30" pos:end="935:31">-&gt;</operator><name pos:start="935:32" pos:end="935:38">tm_year</name></name> <operator pos:start="935:40" pos:end="935:40">+</operator> <literal type="number" pos:start="935:42" pos:end="935:45">1900</literal></expr></argument>, <argument pos:start="935:48" pos:end="935:61"><expr pos:start="935:48" pos:end="935:61"><name pos:start="935:48" pos:end="935:57"><name pos:start="935:48" pos:end="935:49">tm</name><operator pos:start="935:50" pos:end="935:51">-&gt;</operator><name pos:start="935:52" pos:end="935:57">tm_mon</name></name> <operator pos:start="935:59" pos:end="935:59">+</operator> <literal type="number" pos:start="935:61" pos:end="935:61">1</literal></expr></argument>, <argument pos:start="935:64" pos:end="935:74"><expr pos:start="935:64" pos:end="935:74"><name pos:start="935:64" pos:end="935:74"><name pos:start="935:64" pos:end="935:65">tm</name><operator pos:start="935:66" pos:end="935:67">-&gt;</operator><name pos:start="935:68" pos:end="935:74">tm_mday</name></name></expr></argument>,
                           <argument pos:start="936:28" pos:end="936:38"><expr pos:start="936:28" pos:end="936:38"><name pos:start="936:28" pos:end="936:38"><name pos:start="936:28" pos:end="936:29">tm</name><operator pos:start="936:30" pos:end="936:31">-&gt;</operator><name pos:start="936:32" pos:end="936:38">tm_hour</name></name></expr></argument>, <argument pos:start="936:41" pos:end="936:50"><expr pos:start="936:41" pos:end="936:50"><name pos:start="936:41" pos:end="936:50"><name pos:start="936:41" pos:end="936:42">tm</name><operator pos:start="936:43" pos:end="936:44">-&gt;</operator><name pos:start="936:45" pos:end="936:50">tm_min</name></name></expr></argument>, <argument pos:start="936:53" pos:end="936:62"><expr pos:start="936:53" pos:end="936:62"><name pos:start="936:53" pos:end="936:62"><name pos:start="936:53" pos:end="936:54">tm</name><operator pos:start="936:55" pos:end="936:56">-&gt;</operator><name pos:start="936:57" pos:end="936:62">tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="937:17" pos:end="937:22">break;</break>
            <case pos:start="938:13" pos:end="938:21">case <expr pos:start="938:18" pos:end="938:20"><literal type="char" pos:start="938:18" pos:end="938:20">'%'</literal></expr>:</case>
                <expr_stmt pos:start="939:17" pos:end="939:42"><expr pos:start="939:17" pos:end="939:41"><call pos:start="939:17" pos:end="939:41"><name pos:start="939:17" pos:end="939:31">av_bprint_chars</name><argument_list pos:start="939:32" pos:end="939:41">(<argument pos:start="939:33" pos:end="939:34"><expr pos:start="939:33" pos:end="939:34"><name pos:start="939:33" pos:end="939:34">bp</name></expr></argument>, <argument pos:start="939:37" pos:end="939:37"><expr pos:start="939:37" pos:end="939:37"><name pos:start="939:37" pos:end="939:37">c</name></expr></argument>, <argument pos:start="939:40" pos:end="939:40"><expr pos:start="939:40" pos:end="939:40"><literal type="number" pos:start="939:40" pos:end="939:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="940:17" pos:end="940:22">break;</break>
            </block_content>}</block></switch>
        </block_content>}</block></if> <else pos:start="942:11" pos:end="944:9">else <block pos:start="942:16" pos:end="944:9">{<block_content pos:start="943:13" pos:end="943:38">
            <expr_stmt pos:start="943:13" pos:end="943:38"><expr pos:start="943:13" pos:end="943:37"><call pos:start="943:13" pos:end="943:37"><name pos:start="943:13" pos:end="943:27">av_bprint_chars</name><argument_list pos:start="943:28" pos:end="943:37">(<argument pos:start="943:29" pos:end="943:30"><expr pos:start="943:29" pos:end="943:30"><name pos:start="943:29" pos:end="943:30">bp</name></expr></argument>, <argument pos:start="943:33" pos:end="943:33"><expr pos:start="943:33" pos:end="943:33"><name pos:start="943:33" pos:end="943:33">c</name></expr></argument>, <argument pos:start="943:36" pos:end="943:36"><expr pos:start="943:36" pos:end="943:36"><literal type="number" pos:start="943:36" pos:end="943:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function pos:start="948:1" pos:end="1017:1"><type pos:start="948:1" pos:end="948:10"><specifier pos:start="948:1" pos:end="948:6">static</specifier> <name pos:start="948:8" pos:end="948:10">int</name></type> <name pos:start="948:12" pos:end="948:22">init_report</name><parameter_list pos:start="948:23" pos:end="948:39">(<parameter pos:start="948:24" pos:end="948:38"><decl pos:start="948:24" pos:end="948:38"><type pos:start="948:24" pos:end="948:35"><specifier pos:start="948:24" pos:end="948:28">const</specifier> <name pos:start="948:30" pos:end="948:33">char</name> <modifier pos:start="948:35" pos:end="948:35">*</modifier></type><name pos:start="948:36" pos:end="948:38">env</name></decl></parameter>)</parameter_list>
<block pos:start="949:1" pos:end="1017:1">{<block_content pos:start="950:5" pos:end="1016:13">
    <decl_stmt pos:start="950:5" pos:end="950:35"><decl pos:start="950:5" pos:end="950:34"><type pos:start="950:5" pos:end="950:10"><name pos:start="950:5" pos:end="950:8">char</name> <modifier pos:start="950:10" pos:end="950:10">*</modifier></type><name pos:start="950:11" pos:end="950:27">filename_template</name> <init pos:start="950:29" pos:end="950:34">= <expr pos:start="950:31" pos:end="950:34"><name pos:start="950:31" pos:end="950:34">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="951:5" pos:end="951:20"><decl pos:start="951:5" pos:end="951:13"><type pos:start="951:5" pos:end="951:10"><name pos:start="951:5" pos:end="951:8">char</name> <modifier pos:start="951:10" pos:end="951:10">*</modifier></type><name pos:start="951:11" pos:end="951:13">key</name></decl>, <decl pos:start="951:16" pos:end="951:19"><type ref="prev" pos:start="951:5" pos:end="951:10"><modifier pos:start="951:16" pos:end="951:16">*</modifier></type><name pos:start="951:17" pos:end="951:19">val</name></decl>;</decl_stmt>
    <decl_stmt pos:start="952:5" pos:end="952:23"><decl pos:start="952:5" pos:end="952:11"><type pos:start="952:5" pos:end="952:7"><name pos:start="952:5" pos:end="952:7">int</name></type> <name pos:start="952:9" pos:end="952:11">ret</name></decl>, <decl pos:start="952:14" pos:end="952:22"><type ref="prev" pos:start="952:5" pos:end="952:7"/><name pos:start="952:14" pos:end="952:18">count</name> <init pos:start="952:20" pos:end="952:22">= <expr pos:start="952:22" pos:end="952:22"><literal type="number" pos:start="952:22" pos:end="952:22">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="953:5" pos:end="953:15"><decl pos:start="953:5" pos:end="953:14"><type pos:start="953:5" pos:end="953:10"><name pos:start="953:5" pos:end="953:10">time_t</name></type> <name pos:start="953:12" pos:end="953:14">now</name></decl>;</decl_stmt>
    <decl_stmt pos:start="954:5" pos:end="954:18"><decl pos:start="954:5" pos:end="954:17"><type pos:start="954:5" pos:end="954:15"><name pos:start="954:5" pos:end="954:13"><name pos:start="954:5" pos:end="954:10">struct</name> <name pos:start="954:12" pos:end="954:13">tm</name></name> <modifier pos:start="954:15" pos:end="954:15">*</modifier></type><name pos:start="954:16" pos:end="954:17">tm</name></decl>;</decl_stmt>
    <decl_stmt pos:start="955:5" pos:end="955:22"><decl pos:start="955:5" pos:end="955:21"><type pos:start="955:5" pos:end="955:12"><name pos:start="955:5" pos:end="955:12">AVBPrint</name></type> <name pos:start="955:14" pos:end="955:21">filename</name></decl>;</decl_stmt>

    <if_stmt pos:start="957:5" pos:end="958:17"><if pos:start="957:5" pos:end="958:17">if <condition pos:start="957:8" pos:end="957:20">(<expr pos:start="957:9" pos:end="957:19"><name pos:start="957:9" pos:end="957:19">report_file</name></expr>)</condition><block type="pseudo" pos:start="958:9" pos:end="958:17"><block_content pos:start="958:9" pos:end="958:17"> <comment type="block" pos:start="957:22" pos:end="957:41">/* already opened */</comment>
        <return pos:start="958:9" pos:end="958:17">return <expr pos:start="958:16" pos:end="958:16"><literal type="number" pos:start="958:16" pos:end="958:16">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="959:5" pos:end="959:15"><expr pos:start="959:5" pos:end="959:14"><call pos:start="959:5" pos:end="959:14"><name pos:start="959:5" pos:end="959:8">time</name><argument_list pos:start="959:9" pos:end="959:14">(<argument pos:start="959:10" pos:end="959:13"><expr pos:start="959:10" pos:end="959:13"><operator pos:start="959:10" pos:end="959:10">&amp;</operator><name pos:start="959:11" pos:end="959:13">now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="960:5" pos:end="960:25"><expr pos:start="960:5" pos:end="960:24"><name pos:start="960:5" pos:end="960:6">tm</name> <operator pos:start="960:8" pos:end="960:8">=</operator> <call pos:start="960:10" pos:end="960:24"><name pos:start="960:10" pos:end="960:18">localtime</name><argument_list pos:start="960:19" pos:end="960:24">(<argument pos:start="960:20" pos:end="960:23"><expr pos:start="960:20" pos:end="960:23"><operator pos:start="960:20" pos:end="960:20">&amp;</operator><name pos:start="960:21" pos:end="960:23">now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="962:5" pos:end="989:5">while <condition pos:start="962:11" pos:end="962:23">(<expr pos:start="962:12" pos:end="962:22"><name pos:start="962:12" pos:end="962:14">env</name> <operator pos:start="962:16" pos:end="962:17">&amp;&amp;</operator> <operator pos:start="962:19" pos:end="962:19">*</operator><name pos:start="962:20" pos:end="962:22">env</name></expr>)</condition> <block pos:start="962:25" pos:end="989:5">{<block_content pos:start="963:9" pos:end="988:21">
        <if_stmt pos:start="963:9" pos:end="969:9"><if pos:start="963:9" pos:end="969:9">if <condition pos:start="963:12" pos:end="963:76">(<expr pos:start="963:13" pos:end="963:75"><operator pos:start="963:13" pos:end="963:13">(</operator><name pos:start="963:14" pos:end="963:16">ret</name> <operator pos:start="963:18" pos:end="963:18">=</operator> <call pos:start="963:20" pos:end="963:70"><name pos:start="963:20" pos:end="963:39">av_opt_get_key_value</name><argument_list pos:start="963:40" pos:end="963:70">(<argument pos:start="963:41" pos:end="963:44"><expr pos:start="963:41" pos:end="963:44"><operator pos:start="963:41" pos:end="963:41">&amp;</operator><name pos:start="963:42" pos:end="963:44">env</name></expr></argument>, <argument pos:start="963:47" pos:end="963:49"><expr pos:start="963:47" pos:end="963:49"><literal type="string" pos:start="963:47" pos:end="963:49">"="</literal></expr></argument>, <argument pos:start="963:52" pos:end="963:54"><expr pos:start="963:52" pos:end="963:54"><literal type="string" pos:start="963:52" pos:end="963:54">":"</literal></expr></argument>, <argument pos:start="963:57" pos:end="963:57"><expr pos:start="963:57" pos:end="963:57"><literal type="number" pos:start="963:57" pos:end="963:57">0</literal></expr></argument>, <argument pos:start="963:60" pos:end="963:63"><expr pos:start="963:60" pos:end="963:63"><operator pos:start="963:60" pos:end="963:60">&amp;</operator><name pos:start="963:61" pos:end="963:63">key</name></expr></argument>, <argument pos:start="963:66" pos:end="963:69"><expr pos:start="963:66" pos:end="963:69"><operator pos:start="963:66" pos:end="963:66">&amp;</operator><name pos:start="963:67" pos:end="963:69">val</name></expr></argument>)</argument_list></call><operator pos:start="963:71" pos:end="963:71">)</operator> <operator pos:start="963:73" pos:end="963:73">&lt;</operator> <literal type="number" pos:start="963:75" pos:end="963:75">0</literal></expr>)</condition> <block pos:start="963:78" pos:end="969:9">{<block_content pos:start="964:13" pos:end="968:18">
            <if_stmt pos:start="964:13" pos:end="967:40"><if pos:start="964:13" pos:end="967:40">if <condition pos:start="964:16" pos:end="964:22">(<expr pos:start="964:17" pos:end="964:21"><name pos:start="964:17" pos:end="964:21">count</name></expr>)</condition><block type="pseudo" pos:start="965:17" pos:end="967:40"><block_content pos:start="965:17" pos:end="967:40">
                <expr_stmt pos:start="965:17" pos:end="967:40"><expr pos:start="965:17" pos:end="967:39"><call pos:start="965:17" pos:end="967:39"><name pos:start="965:17" pos:end="965:22">av_log</name><argument_list pos:start="965:23" pos:end="967:39">(<argument pos:start="965:24" pos:end="965:27"><expr pos:start="965:24" pos:end="965:27"><name pos:start="965:24" pos:end="965:27">NULL</name></expr></argument>, <argument pos:start="965:30" pos:end="965:41"><expr pos:start="965:30" pos:end="965:41"><name pos:start="965:30" pos:end="965:41">AV_LOG_ERROR</name></expr></argument>,
                       <argument pos:start="966:24" pos:end="966:76"><expr pos:start="966:24" pos:end="966:76"><literal type="string" pos:start="966:24" pos:end="966:76">"Failed to parse FFREPORT environment variable: %s\n"</literal></expr></argument>,
                       <argument pos:start="967:24" pos:end="967:38"><expr pos:start="967:24" pos:end="967:38"><call pos:start="967:24" pos:end="967:38"><name pos:start="967:24" pos:end="967:33">av_err2str</name><argument_list pos:start="967:34" pos:end="967:38">(<argument pos:start="967:35" pos:end="967:37"><expr pos:start="967:35" pos:end="967:37"><name pos:start="967:35" pos:end="967:37">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <break pos:start="968:13" pos:end="968:18">break;</break>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="970:9" pos:end="971:18"><if pos:start="970:9" pos:end="971:18">if <condition pos:start="970:12" pos:end="970:17">(<expr pos:start="970:13" pos:end="970:16"><operator pos:start="970:13" pos:end="970:13">*</operator><name pos:start="970:14" pos:end="970:16">env</name></expr>)</condition><block type="pseudo" pos:start="971:13" pos:end="971:18"><block_content pos:start="971:13" pos:end="971:18">
            <expr_stmt pos:start="971:13" pos:end="971:18"><expr pos:start="971:13" pos:end="971:17"><name pos:start="971:13" pos:end="971:15">env</name><operator pos:start="971:16" pos:end="971:17">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="972:9" pos:end="972:16"><expr pos:start="972:9" pos:end="972:15"><name pos:start="972:9" pos:end="972:13">count</name><operator pos:start="972:14" pos:end="972:15">++</operator></expr>;</expr_stmt>
        <if_stmt pos:start="973:9" pos:end="986:9"><if pos:start="973:9" pos:end="977:9">if <condition pos:start="973:12" pos:end="973:33">(<expr pos:start="973:13" pos:end="973:32"><operator pos:start="973:13" pos:end="973:13">!</operator><call pos:start="973:14" pos:end="973:32"><name pos:start="973:14" pos:end="973:19">strcmp</name><argument_list pos:start="973:20" pos:end="973:32">(<argument pos:start="973:21" pos:end="973:23"><expr pos:start="973:21" pos:end="973:23"><name pos:start="973:21" pos:end="973:23">key</name></expr></argument>, <argument pos:start="973:26" pos:end="973:31"><expr pos:start="973:26" pos:end="973:31"><literal type="string" pos:start="973:26" pos:end="973:31">"file"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="973:35" pos:end="977:9">{<block_content pos:start="974:13" pos:end="976:23">
            <expr_stmt pos:start="974:13" pos:end="974:39"><expr pos:start="974:13" pos:end="974:38"><call pos:start="974:13" pos:end="974:38"><name pos:start="974:13" pos:end="974:19">av_free</name><argument_list pos:start="974:20" pos:end="974:38">(<argument pos:start="974:21" pos:end="974:37"><expr pos:start="974:21" pos:end="974:37"><name pos:start="974:21" pos:end="974:37">filename_template</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="975:13" pos:end="975:36"><expr pos:start="975:13" pos:end="975:35"><name pos:start="975:13" pos:end="975:29">filename_template</name> <operator pos:start="975:31" pos:end="975:31">=</operator> <name pos:start="975:33" pos:end="975:35">val</name></expr>;</expr_stmt>
            <expr_stmt pos:start="976:13" pos:end="976:23"><expr pos:start="976:13" pos:end="976:22"><name pos:start="976:13" pos:end="976:15">val</name> <operator pos:start="976:17" pos:end="976:17">=</operator> <name pos:start="976:19" pos:end="976:22">NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="977:11" pos:end="984:9">else if <condition pos:start="977:19" pos:end="977:41">(<expr pos:start="977:20" pos:end="977:40"><operator pos:start="977:20" pos:end="977:20">!</operator><call pos:start="977:21" pos:end="977:40"><name pos:start="977:21" pos:end="977:26">strcmp</name><argument_list pos:start="977:27" pos:end="977:40">(<argument pos:start="977:28" pos:end="977:30"><expr pos:start="977:28" pos:end="977:30"><name pos:start="977:28" pos:end="977:30">key</name></expr></argument>, <argument pos:start="977:33" pos:end="977:39"><expr pos:start="977:33" pos:end="977:39"><literal type="string" pos:start="977:33" pos:end="977:39">"level"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="977:43" pos:end="984:9">{<block_content pos:start="978:13" pos:end="983:13">
            <decl_stmt pos:start="978:13" pos:end="978:23"><decl pos:start="978:13" pos:end="978:22"><type pos:start="978:13" pos:end="978:18"><name pos:start="978:13" pos:end="978:16">char</name> <modifier pos:start="978:18" pos:end="978:18">*</modifier></type><name pos:start="978:19" pos:end="978:22">tail</name></decl>;</decl_stmt>
            <expr_stmt pos:start="979:13" pos:end="979:55"><expr pos:start="979:13" pos:end="979:54"><name pos:start="979:13" pos:end="979:29">report_file_level</name> <operator pos:start="979:31" pos:end="979:31">=</operator> <call pos:start="979:33" pos:end="979:54"><name pos:start="979:33" pos:end="979:38">strtol</name><argument_list pos:start="979:39" pos:end="979:54">(<argument pos:start="979:40" pos:end="979:42"><expr pos:start="979:40" pos:end="979:42"><name pos:start="979:40" pos:end="979:42">val</name></expr></argument>, <argument pos:start="979:45" pos:end="979:49"><expr pos:start="979:45" pos:end="979:49"><operator pos:start="979:45" pos:end="979:45">&amp;</operator><name pos:start="979:46" pos:end="979:49">tail</name></expr></argument>, <argument pos:start="979:52" pos:end="979:53"><expr pos:start="979:52" pos:end="979:53"><literal type="number" pos:start="979:52" pos:end="979:53">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="980:13" pos:end="983:13"><if pos:start="980:13" pos:end="983:13">if <condition pos:start="980:16" pos:end="980:22">(<expr pos:start="980:17" pos:end="980:21"><operator pos:start="980:17" pos:end="980:17">*</operator><name pos:start="980:18" pos:end="980:21">tail</name></expr>)</condition> <block pos:start="980:24" pos:end="983:13">{<block_content pos:start="981:17" pos:end="982:32">
                <expr_stmt pos:start="981:17" pos:end="981:74"><expr pos:start="981:17" pos:end="981:73"><call pos:start="981:17" pos:end="981:73"><name pos:start="981:17" pos:end="981:22">av_log</name><argument_list pos:start="981:23" pos:end="981:73">(<argument pos:start="981:24" pos:end="981:27"><expr pos:start="981:24" pos:end="981:27"><name pos:start="981:24" pos:end="981:27">NULL</name></expr></argument>, <argument pos:start="981:30" pos:end="981:41"><expr pos:start="981:30" pos:end="981:41"><name pos:start="981:30" pos:end="981:41">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="981:44" pos:end="981:72"><expr pos:start="981:44" pos:end="981:72"><literal type="string" pos:start="981:44" pos:end="981:72">"Invalid report file level\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="982:17" pos:end="982:32"><expr pos:start="982:17" pos:end="982:31"><call pos:start="982:17" pos:end="982:31"><name pos:start="982:17" pos:end="982:28">exit_program</name><argument_list pos:start="982:29" pos:end="982:31">(<argument pos:start="982:30" pos:end="982:30"><expr pos:start="982:30" pos:end="982:30"><literal type="number" pos:start="982:30" pos:end="982:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else pos:start="984:11" pos:end="986:9">else <block pos:start="984:16" pos:end="986:9">{<block_content pos:start="985:13" pos:end="985:78">
            <expr_stmt pos:start="985:13" pos:end="985:78"><expr pos:start="985:13" pos:end="985:77"><call pos:start="985:13" pos:end="985:77"><name pos:start="985:13" pos:end="985:18">av_log</name><argument_list pos:start="985:19" pos:end="985:77">(<argument pos:start="985:20" pos:end="985:23"><expr pos:start="985:20" pos:end="985:23"><name pos:start="985:20" pos:end="985:23">NULL</name></expr></argument>, <argument pos:start="985:26" pos:end="985:37"><expr pos:start="985:26" pos:end="985:37"><name pos:start="985:26" pos:end="985:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="985:40" pos:end="985:71"><expr pos:start="985:40" pos:end="985:71"><literal type="string" pos:start="985:40" pos:end="985:71">"Unknown key '%s' in FFREPORT\n"</literal></expr></argument>, <argument pos:start="985:74" pos:end="985:76"><expr pos:start="985:74" pos:end="985:76"><name pos:start="985:74" pos:end="985:76">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt pos:start="987:9" pos:end="987:21"><expr pos:start="987:9" pos:end="987:20"><call pos:start="987:9" pos:end="987:20"><name pos:start="987:9" pos:end="987:15">av_free</name><argument_list pos:start="987:16" pos:end="987:20">(<argument pos:start="987:17" pos:end="987:19"><expr pos:start="987:17" pos:end="987:19"><name pos:start="987:17" pos:end="987:19">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="988:9" pos:end="988:21"><expr pos:start="988:9" pos:end="988:20"><call pos:start="988:9" pos:end="988:20"><name pos:start="988:9" pos:end="988:15">av_free</name><argument_list pos:start="988:16" pos:end="988:20">(<argument pos:start="988:17" pos:end="988:19"><expr pos:start="988:17" pos:end="988:19"><name pos:start="988:17" pos:end="988:19">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt pos:start="991:5" pos:end="991:36"><expr pos:start="991:5" pos:end="991:35"><call pos:start="991:5" pos:end="991:35"><name pos:start="991:5" pos:end="991:18">av_bprint_init</name><argument_list pos:start="991:19" pos:end="991:35">(<argument pos:start="991:20" pos:end="991:28"><expr pos:start="991:20" pos:end="991:28"><operator pos:start="991:20" pos:end="991:20">&amp;</operator><name pos:start="991:21" pos:end="991:28">filename</name></expr></argument>, <argument pos:start="991:31" pos:end="991:31"><expr pos:start="991:31" pos:end="991:31"><literal type="number" pos:start="991:31" pos:end="991:31">0</literal></expr></argument>, <argument pos:start="991:34" pos:end="991:34"><expr pos:start="991:34" pos:end="991:34"><literal type="number" pos:start="991:34" pos:end="991:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="992:5" pos:end="993:79"><expr pos:start="992:5" pos:end="993:78"><call pos:start="992:5" pos:end="993:78"><name pos:start="992:5" pos:end="992:28">expand_filename_template</name><argument_list pos:start="992:29" pos:end="993:78">(<argument pos:start="992:30" pos:end="992:38"><expr pos:start="992:30" pos:end="992:38"><operator pos:start="992:30" pos:end="992:30">&amp;</operator><name pos:start="992:31" pos:end="992:38">filename</name></expr></argument>,
                             <argument pos:start="993:30" pos:end="993:73"><expr pos:start="993:30" pos:end="993:73"><call pos:start="993:30" pos:end="993:73"><name pos:start="993:30" pos:end="993:41">av_x_if_null</name><argument_list pos:start="993:42" pos:end="993:73">(<argument pos:start="993:43" pos:end="993:59"><expr pos:start="993:43" pos:end="993:59"><name pos:start="993:43" pos:end="993:59">filename_template</name></expr></argument>, <argument pos:start="993:62" pos:end="993:72"><expr pos:start="993:62" pos:end="993:72"><literal type="string" pos:start="993:62" pos:end="993:72">"%p-%t.log"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="993:76" pos:end="993:77"><expr pos:start="993:76" pos:end="993:77"><name pos:start="993:76" pos:end="993:77">tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="994:5" pos:end="994:31"><expr pos:start="994:5" pos:end="994:30"><call pos:start="994:5" pos:end="994:30"><name pos:start="994:5" pos:end="994:11">av_free</name><argument_list pos:start="994:12" pos:end="994:30">(<argument pos:start="994:13" pos:end="994:29"><expr pos:start="994:13" pos:end="994:29"><name pos:start="994:13" pos:end="994:29">filename_template</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="995:5" pos:end="998:5"><if pos:start="995:5" pos:end="998:5">if <condition pos:start="995:8" pos:end="995:42">(<expr pos:start="995:9" pos:end="995:41"><operator pos:start="995:9" pos:end="995:9">!</operator><call pos:start="995:10" pos:end="995:41"><name pos:start="995:10" pos:end="995:30">av_bprint_is_complete</name><argument_list pos:start="995:31" pos:end="995:41">(<argument pos:start="995:32" pos:end="995:40"><expr pos:start="995:32" pos:end="995:40"><operator pos:start="995:32" pos:end="995:32">&amp;</operator><name pos:start="995:33" pos:end="995:40">filename</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="995:44" pos:end="998:5">{<block_content pos:start="996:9" pos:end="997:31">
        <expr_stmt pos:start="996:9" pos:end="996:80"><expr pos:start="996:9" pos:end="996:79"><call pos:start="996:9" pos:end="996:79"><name pos:start="996:9" pos:end="996:14">av_log</name><argument_list pos:start="996:15" pos:end="996:79">(<argument pos:start="996:16" pos:end="996:19"><expr pos:start="996:16" pos:end="996:19"><name pos:start="996:16" pos:end="996:19">NULL</name></expr></argument>, <argument pos:start="996:22" pos:end="996:33"><expr pos:start="996:22" pos:end="996:33"><name pos:start="996:22" pos:end="996:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="996:36" pos:end="996:78"><expr pos:start="996:36" pos:end="996:78"><literal type="string" pos:start="996:36" pos:end="996:78">"Out of memory building report file name\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="997:9" pos:end="997:31">return <expr pos:start="997:16" pos:end="997:30"><call pos:start="997:16" pos:end="997:30"><name pos:start="997:16" pos:end="997:22">AVERROR</name><argument_list pos:start="997:23" pos:end="997:30">(<argument pos:start="997:24" pos:end="997:29"><expr pos:start="997:24" pos:end="997:29"><name pos:start="997:24" pos:end="997:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1000:5" pos:end="1000:43"><expr pos:start="1000:5" pos:end="1000:42"><name pos:start="1000:5" pos:end="1000:15">report_file</name> <operator pos:start="1000:17" pos:end="1000:17">=</operator> <call pos:start="1000:19" pos:end="1000:42"><name pos:start="1000:19" pos:end="1000:23">fopen</name><argument_list pos:start="1000:24" pos:end="1000:42">(<argument pos:start="1000:25" pos:end="1000:36"><expr pos:start="1000:25" pos:end="1000:36"><name pos:start="1000:25" pos:end="1000:36"><name pos:start="1000:25" pos:end="1000:32">filename</name><operator pos:start="1000:33" pos:end="1000:33">.</operator><name pos:start="1000:34" pos:end="1000:36">str</name></name></expr></argument>, <argument pos:start="1000:39" pos:end="1000:41"><expr pos:start="1000:39" pos:end="1000:41"><literal type="string" pos:start="1000:39" pos:end="1000:41">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1001:5" pos:end="1006:5"><if pos:start="1001:5" pos:end="1006:5">if <condition pos:start="1001:8" pos:end="1001:21">(<expr pos:start="1001:9" pos:end="1001:20"><operator pos:start="1001:9" pos:end="1001:9">!</operator><name pos:start="1001:10" pos:end="1001:20">report_file</name></expr>)</condition> <block pos:start="1001:23" pos:end="1006:5">{<block_content pos:start="1002:9" pos:end="1005:19">
        <decl_stmt pos:start="1002:9" pos:end="1002:33"><decl pos:start="1002:9" pos:end="1002:32"><type pos:start="1002:9" pos:end="1002:11"><name pos:start="1002:9" pos:end="1002:11">int</name></type> <name pos:start="1002:13" pos:end="1002:15">ret</name> <init pos:start="1002:17" pos:end="1002:32">= <expr pos:start="1002:19" pos:end="1002:32"><call pos:start="1002:19" pos:end="1002:32"><name pos:start="1002:19" pos:end="1002:25">AVERROR</name><argument_list pos:start="1002:26" pos:end="1002:32">(<argument pos:start="1002:27" pos:end="1002:31"><expr pos:start="1002:27" pos:end="1002:31"><name pos:start="1002:27" pos:end="1002:31">errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="1003:9" pos:end="1004:46"><expr pos:start="1003:9" pos:end="1004:45"><call pos:start="1003:9" pos:end="1004:45"><name pos:start="1003:9" pos:end="1003:14">av_log</name><argument_list pos:start="1003:15" pos:end="1004:45">(<argument pos:start="1003:16" pos:end="1003:19"><expr pos:start="1003:16" pos:end="1003:19"><name pos:start="1003:16" pos:end="1003:19">NULL</name></expr></argument>, <argument pos:start="1003:22" pos:end="1003:33"><expr pos:start="1003:22" pos:end="1003:33"><name pos:start="1003:22" pos:end="1003:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="1003:36" pos:end="1003:71"><expr pos:start="1003:36" pos:end="1003:71"><literal type="string" pos:start="1003:36" pos:end="1003:71">"Failed to open report \"%s\": %s\n"</literal></expr></argument>,
               <argument pos:start="1004:16" pos:end="1004:27"><expr pos:start="1004:16" pos:end="1004:27"><name pos:start="1004:16" pos:end="1004:27"><name pos:start="1004:16" pos:end="1004:23">filename</name><operator pos:start="1004:24" pos:end="1004:24">.</operator><name pos:start="1004:25" pos:end="1004:27">str</name></name></expr></argument>, <argument pos:start="1004:30" pos:end="1004:44"><expr pos:start="1004:30" pos:end="1004:44"><call pos:start="1004:30" pos:end="1004:44"><name pos:start="1004:30" pos:end="1004:37">strerror</name><argument_list pos:start="1004:38" pos:end="1004:44">(<argument pos:start="1004:39" pos:end="1004:43"><expr pos:start="1004:39" pos:end="1004:43"><name pos:start="1004:39" pos:end="1004:43">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1005:9" pos:end="1005:19">return <expr pos:start="1005:16" pos:end="1005:18"><name pos:start="1005:16" pos:end="1005:18">ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1007:5" pos:end="1007:45"><expr pos:start="1007:5" pos:end="1007:44"><call pos:start="1007:5" pos:end="1007:44"><name pos:start="1007:5" pos:end="1007:23">av_log_set_callback</name><argument_list pos:start="1007:24" pos:end="1007:44">(<argument pos:start="1007:25" pos:end="1007:43"><expr pos:start="1007:25" pos:end="1007:43"><name pos:start="1007:25" pos:end="1007:43">log_callback_report</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1008:5" pos:end="1014:25"><expr pos:start="1008:5" pos:end="1014:24"><call pos:start="1008:5" pos:end="1014:24"><name pos:start="1008:5" pos:end="1008:10">av_log</name><argument_list pos:start="1008:11" pos:end="1014:24">(<argument pos:start="1008:12" pos:end="1008:15"><expr pos:start="1008:12" pos:end="1008:15"><name pos:start="1008:12" pos:end="1008:15">NULL</name></expr></argument>, <argument pos:start="1008:18" pos:end="1008:28"><expr pos:start="1008:18" pos:end="1008:28"><name pos:start="1008:18" pos:end="1008:28">AV_LOG_INFO</name></expr></argument>,
           <argument pos:start="1009:12" pos:end="1010:39"><expr pos:start="1009:12" pos:end="1010:39"><literal type="string" pos:start="1009:12" pos:end="1009:61">"%s started on %04d-%02d-%02d at %02d:%02d:%02d\n"</literal>
           <literal type="string" pos:start="1010:12" pos:end="1010:39">"Report written to \"%s\"\n"</literal></expr></argument>,
           <argument pos:start="1011:12" pos:end="1011:23"><expr pos:start="1011:12" pos:end="1011:23"><name pos:start="1011:12" pos:end="1011:23">program_name</name></expr></argument>,
           <argument pos:start="1012:12" pos:end="1012:29"><expr pos:start="1012:12" pos:end="1012:29"><name pos:start="1012:12" pos:end="1012:22"><name pos:start="1012:12" pos:end="1012:13">tm</name><operator pos:start="1012:14" pos:end="1012:15">-&gt;</operator><name pos:start="1012:16" pos:end="1012:22">tm_year</name></name> <operator pos:start="1012:24" pos:end="1012:24">+</operator> <literal type="number" pos:start="1012:26" pos:end="1012:29">1900</literal></expr></argument>, <argument pos:start="1012:32" pos:end="1012:45"><expr pos:start="1012:32" pos:end="1012:45"><name pos:start="1012:32" pos:end="1012:41"><name pos:start="1012:32" pos:end="1012:33">tm</name><operator pos:start="1012:34" pos:end="1012:35">-&gt;</operator><name pos:start="1012:36" pos:end="1012:41">tm_mon</name></name> <operator pos:start="1012:43" pos:end="1012:43">+</operator> <literal type="number" pos:start="1012:45" pos:end="1012:45">1</literal></expr></argument>, <argument pos:start="1012:48" pos:end="1012:58"><expr pos:start="1012:48" pos:end="1012:58"><name pos:start="1012:48" pos:end="1012:58"><name pos:start="1012:48" pos:end="1012:49">tm</name><operator pos:start="1012:50" pos:end="1012:51">-&gt;</operator><name pos:start="1012:52" pos:end="1012:58">tm_mday</name></name></expr></argument>,
           <argument pos:start="1013:12" pos:end="1013:22"><expr pos:start="1013:12" pos:end="1013:22"><name pos:start="1013:12" pos:end="1013:22"><name pos:start="1013:12" pos:end="1013:13">tm</name><operator pos:start="1013:14" pos:end="1013:15">-&gt;</operator><name pos:start="1013:16" pos:end="1013:22">tm_hour</name></name></expr></argument>, <argument pos:start="1013:25" pos:end="1013:34"><expr pos:start="1013:25" pos:end="1013:34"><name pos:start="1013:25" pos:end="1013:34"><name pos:start="1013:25" pos:end="1013:26">tm</name><operator pos:start="1013:27" pos:end="1013:28">-&gt;</operator><name pos:start="1013:29" pos:end="1013:34">tm_min</name></name></expr></argument>, <argument pos:start="1013:37" pos:end="1013:46"><expr pos:start="1013:37" pos:end="1013:46"><name pos:start="1013:37" pos:end="1013:46"><name pos:start="1013:37" pos:end="1013:38">tm</name><operator pos:start="1013:39" pos:end="1013:40">-&gt;</operator><name pos:start="1013:41" pos:end="1013:46">tm_sec</name></name></expr></argument>,
           <argument pos:start="1014:12" pos:end="1014:23"><expr pos:start="1014:12" pos:end="1014:23"><name pos:start="1014:12" pos:end="1014:23"><name pos:start="1014:12" pos:end="1014:19">filename</name><operator pos:start="1014:20" pos:end="1014:20">.</operator><name pos:start="1014:21" pos:end="1014:23">str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1015:5" pos:end="1015:40"><expr pos:start="1015:5" pos:end="1015:39"><call pos:start="1015:5" pos:end="1015:39"><name pos:start="1015:5" pos:end="1015:22">av_bprint_finalize</name><argument_list pos:start="1015:23" pos:end="1015:39">(<argument pos:start="1015:24" pos:end="1015:32"><expr pos:start="1015:24" pos:end="1015:32"><operator pos:start="1015:24" pos:end="1015:24">&amp;</operator><name pos:start="1015:25" pos:end="1015:32">filename</name></expr></argument>, <argument pos:start="1015:35" pos:end="1015:38"><expr pos:start="1015:35" pos:end="1015:38"><name pos:start="1015:35" pos:end="1015:38">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="1016:5" pos:end="1016:13">return <expr pos:start="1016:12" pos:end="1016:12"><literal type="number" pos:start="1016:12" pos:end="1016:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="1019:1" pos:end="1022:1"><type pos:start="1019:1" pos:end="1019:3"><name pos:start="1019:1" pos:end="1019:3">int</name></type> <name pos:start="1019:5" pos:end="1019:14">opt_report</name><parameter_list pos:start="1019:15" pos:end="1019:31">(<parameter pos:start="1019:16" pos:end="1019:30"><decl pos:start="1019:16" pos:end="1019:30"><type pos:start="1019:16" pos:end="1019:27"><specifier pos:start="1019:16" pos:end="1019:20">const</specifier> <name pos:start="1019:22" pos:end="1019:25">char</name> <modifier pos:start="1019:27" pos:end="1019:27">*</modifier></type><name pos:start="1019:28" pos:end="1019:30">opt</name></decl></parameter>)</parameter_list>
<block pos:start="1020:1" pos:end="1022:1">{<block_content pos:start="1021:5" pos:end="1021:29">
    <return pos:start="1021:5" pos:end="1021:29">return <expr pos:start="1021:12" pos:end="1021:28"><call pos:start="1021:12" pos:end="1021:28"><name pos:start="1021:12" pos:end="1021:22">init_report</name><argument_list pos:start="1021:23" pos:end="1021:28">(<argument pos:start="1021:24" pos:end="1021:27"><expr pos:start="1021:24" pos:end="1021:27"><name pos:start="1021:24" pos:end="1021:27">NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function pos:start="1024:1" pos:end="1036:1"><type pos:start="1024:1" pos:end="1024:3"><name pos:start="1024:1" pos:end="1024:3">int</name></type> <name pos:start="1024:5" pos:end="1024:17">opt_max_alloc</name><parameter_list pos:start="1024:18" pos:end="1024:65">(<parameter pos:start="1024:19" pos:end="1024:30"><decl pos:start="1024:19" pos:end="1024:30"><type pos:start="1024:19" pos:end="1024:30"><name pos:start="1024:19" pos:end="1024:22">void</name> <modifier pos:start="1024:24" pos:end="1024:24">*</modifier></type><name pos:start="1024:25" pos:end="1024:30">optctx</name></decl></parameter>, <parameter pos:start="1024:33" pos:end="1024:47"><decl pos:start="1024:33" pos:end="1024:47"><type pos:start="1024:33" pos:end="1024:47"><specifier pos:start="1024:33" pos:end="1024:37">const</specifier> <name pos:start="1024:39" pos:end="1024:42">char</name> <modifier pos:start="1024:44" pos:end="1024:44">*</modifier></type><name pos:start="1024:45" pos:end="1024:47">opt</name></decl></parameter>, <parameter pos:start="1024:50" pos:end="1024:64"><decl pos:start="1024:50" pos:end="1024:64"><type pos:start="1024:50" pos:end="1024:64"><specifier pos:start="1024:50" pos:end="1024:54">const</specifier> <name pos:start="1024:56" pos:end="1024:59">char</name> <modifier pos:start="1024:61" pos:end="1024:61">*</modifier></type><name pos:start="1024:62" pos:end="1024:64">arg</name></decl></parameter>)</parameter_list>
<block pos:start="1025:1" pos:end="1036:1">{<block_content pos:start="1026:5" pos:end="1035:13">
    <decl_stmt pos:start="1026:5" pos:end="1026:15"><decl pos:start="1026:5" pos:end="1026:14"><type pos:start="1026:5" pos:end="1026:10"><name pos:start="1026:5" pos:end="1026:8">char</name> <modifier pos:start="1026:10" pos:end="1026:10">*</modifier></type><name pos:start="1026:11" pos:end="1026:14">tail</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1027:5" pos:end="1027:15"><decl pos:start="1027:5" pos:end="1027:14"><type pos:start="1027:5" pos:end="1027:10"><name pos:start="1027:5" pos:end="1027:10">size_t</name></type> <name pos:start="1027:12" pos:end="1027:14">max</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1029:5" pos:end="1029:33"><expr pos:start="1029:5" pos:end="1029:32"><name pos:start="1029:5" pos:end="1029:7">max</name> <operator pos:start="1029:9" pos:end="1029:9">=</operator> <call pos:start="1029:11" pos:end="1029:32"><name pos:start="1029:11" pos:end="1029:16">strtol</name><argument_list pos:start="1029:17" pos:end="1029:32">(<argument pos:start="1029:18" pos:end="1029:20"><expr pos:start="1029:18" pos:end="1029:20"><name pos:start="1029:18" pos:end="1029:20">arg</name></expr></argument>, <argument pos:start="1029:23" pos:end="1029:27"><expr pos:start="1029:23" pos:end="1029:27"><operator pos:start="1029:23" pos:end="1029:23">&amp;</operator><name pos:start="1029:24" pos:end="1029:27">tail</name></expr></argument>, <argument pos:start="1029:30" pos:end="1029:31"><expr pos:start="1029:30" pos:end="1029:31"><literal type="number" pos:start="1029:30" pos:end="1029:31">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1030:5" pos:end="1033:5"><if pos:start="1030:5" pos:end="1033:5">if <condition pos:start="1030:8" pos:end="1030:14">(<expr pos:start="1030:9" pos:end="1030:13"><operator pos:start="1030:9" pos:end="1030:9">*</operator><name pos:start="1030:10" pos:end="1030:13">tail</name></expr>)</condition> <block pos:start="1030:16" pos:end="1033:5">{<block_content pos:start="1031:9" pos:end="1032:24">
        <expr_stmt pos:start="1031:9" pos:end="1031:71"><expr pos:start="1031:9" pos:end="1031:70"><call pos:start="1031:9" pos:end="1031:70"><name pos:start="1031:9" pos:end="1031:14">av_log</name><argument_list pos:start="1031:15" pos:end="1031:70">(<argument pos:start="1031:16" pos:end="1031:19"><expr pos:start="1031:16" pos:end="1031:19"><name pos:start="1031:16" pos:end="1031:19">NULL</name></expr></argument>, <argument pos:start="1031:22" pos:end="1031:33"><expr pos:start="1031:22" pos:end="1031:33"><name pos:start="1031:22" pos:end="1031:33">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="1031:36" pos:end="1031:64"><expr pos:start="1031:36" pos:end="1031:64"><literal type="string" pos:start="1031:36" pos:end="1031:64">"Invalid max_alloc \"%s\".\n"</literal></expr></argument>, <argument pos:start="1031:67" pos:end="1031:69"><expr pos:start="1031:67" pos:end="1031:69"><name pos:start="1031:67" pos:end="1031:69">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1032:9" pos:end="1032:24"><expr pos:start="1032:9" pos:end="1032:23"><call pos:start="1032:9" pos:end="1032:23"><name pos:start="1032:9" pos:end="1032:20">exit_program</name><argument_list pos:start="1032:21" pos:end="1032:23">(<argument pos:start="1032:22" pos:end="1032:22"><expr pos:start="1032:22" pos:end="1032:22"><literal type="number" pos:start="1032:22" pos:end="1032:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1034:5" pos:end="1034:22"><expr pos:start="1034:5" pos:end="1034:21"><call pos:start="1034:5" pos:end="1034:21"><name pos:start="1034:5" pos:end="1034:16">av_max_alloc</name><argument_list pos:start="1034:17" pos:end="1034:21">(<argument pos:start="1034:18" pos:end="1034:20"><expr pos:start="1034:18" pos:end="1034:20"><name pos:start="1034:18" pos:end="1034:20">max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="1035:5" pos:end="1035:13">return <expr pos:start="1035:12" pos:end="1035:12"><literal type="number" pos:start="1035:12" pos:end="1035:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="1038:1" pos:end="1049:1"><type pos:start="1038:1" pos:end="1038:3"><name pos:start="1038:1" pos:end="1038:3">int</name></type> <name pos:start="1038:5" pos:end="1038:17">opt_timelimit</name><parameter_list pos:start="1038:18" pos:end="1038:65">(<parameter pos:start="1038:19" pos:end="1038:30"><decl pos:start="1038:19" pos:end="1038:30"><type pos:start="1038:19" pos:end="1038:30"><name pos:start="1038:19" pos:end="1038:22">void</name> <modifier pos:start="1038:24" pos:end="1038:24">*</modifier></type><name pos:start="1038:25" pos:end="1038:30">optctx</name></decl></parameter>, <parameter pos:start="1038:33" pos:end="1038:47"><decl pos:start="1038:33" pos:end="1038:47"><type pos:start="1038:33" pos:end="1038:47"><specifier pos:start="1038:33" pos:end="1038:37">const</specifier> <name pos:start="1038:39" pos:end="1038:42">char</name> <modifier pos:start="1038:44" pos:end="1038:44">*</modifier></type><name pos:start="1038:45" pos:end="1038:47">opt</name></decl></parameter>, <parameter pos:start="1038:50" pos:end="1038:64"><decl pos:start="1038:50" pos:end="1038:64"><type pos:start="1038:50" pos:end="1038:64"><specifier pos:start="1038:50" pos:end="1038:54">const</specifier> <name pos:start="1038:56" pos:end="1038:59">char</name> <modifier pos:start="1038:61" pos:end="1038:61">*</modifier></type><name pos:start="1038:62" pos:end="1038:64">arg</name></decl></parameter>)</parameter_list>
<block pos:start="1039:1" pos:end="1049:1">{<block_content pos:start="1041:5" pos:end="1048:13">
<cpp:if pos:start="1040:1" pos:end="1040:18">#<cpp:directive pos:start="1040:2" pos:end="1040:3">if</cpp:directive> <expr pos:start="1040:5" pos:end="1040:18"><name pos:start="1040:5" pos:end="1040:18">HAVE_SETRLIMIT</name></expr></cpp:if>
    <decl_stmt pos:start="1041:5" pos:end="1041:67"><decl pos:start="1041:5" pos:end="1041:66"><type pos:start="1041:5" pos:end="1041:7"><name pos:start="1041:5" pos:end="1041:7">int</name></type> <name pos:start="1041:9" pos:end="1041:11">lim</name> <init pos:start="1041:13" pos:end="1041:66">= <expr pos:start="1041:15" pos:end="1041:66"><call pos:start="1041:15" pos:end="1041:66"><name pos:start="1041:15" pos:end="1041:33">parse_number_or_die</name><argument_list pos:start="1041:34" pos:end="1041:66">(<argument pos:start="1041:35" pos:end="1041:37"><expr pos:start="1041:35" pos:end="1041:37"><name pos:start="1041:35" pos:end="1041:37">opt</name></expr></argument>, <argument pos:start="1041:40" pos:end="1041:42"><expr pos:start="1041:40" pos:end="1041:42"><name pos:start="1041:40" pos:end="1041:42">arg</name></expr></argument>, <argument pos:start="1041:45" pos:end="1041:53"><expr pos:start="1041:45" pos:end="1041:53"><name pos:start="1041:45" pos:end="1041:53">OPT_INT64</name></expr></argument>, <argument pos:start="1041:56" pos:end="1041:56"><expr pos:start="1041:56" pos:end="1041:56"><literal type="number" pos:start="1041:56" pos:end="1041:56">0</literal></expr></argument>, <argument pos:start="1041:59" pos:end="1041:65"><expr pos:start="1041:59" pos:end="1041:65"><name pos:start="1041:59" pos:end="1041:65">INT_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1042:5" pos:end="1042:40"><decl pos:start="1042:5" pos:end="1042:39"><type pos:start="1042:5" pos:end="1042:17"><name pos:start="1042:5" pos:end="1042:17"><name pos:start="1042:5" pos:end="1042:10">struct</name> <name pos:start="1042:12" pos:end="1042:17">rlimit</name></name></type> <name pos:start="1042:19" pos:end="1042:20">rl</name> <init pos:start="1042:22" pos:end="1042:39">= <expr pos:start="1042:24" pos:end="1042:39"><block pos:start="1042:24" pos:end="1042:39">{ <expr pos:start="1042:26" pos:end="1042:28"><name pos:start="1042:26" pos:end="1042:28">lim</name></expr>, <expr pos:start="1042:31" pos:end="1042:37"><name pos:start="1042:31" pos:end="1042:33">lim</name> <operator pos:start="1042:35" pos:end="1042:35">+</operator> <literal type="number" pos:start="1042:37" pos:end="1042:37">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="1043:5" pos:end="1046:0"><if pos:start="1043:5" pos:end="1046:0">if <condition pos:start="1043:8" pos:end="1043:35">(<expr pos:start="1043:9" pos:end="1043:34"><call pos:start="1043:9" pos:end="1043:34"><name pos:start="1043:9" pos:end="1043:17">setrlimit</name><argument_list pos:start="1043:18" pos:end="1043:34">(<argument pos:start="1043:19" pos:end="1043:28"><expr pos:start="1043:19" pos:end="1043:28"><name pos:start="1043:19" pos:end="1043:28">RLIMIT_CPU</name></expr></argument>, <argument pos:start="1043:31" pos:end="1043:33"><expr pos:start="1043:31" pos:end="1043:33"><operator pos:start="1043:31" pos:end="1043:31">&amp;</operator><name pos:start="1043:32" pos:end="1043:33">rl</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1044:9" pos:end="1046:0"><block_content pos:start="1044:9" pos:end="1046:0">
        <expr_stmt pos:start="1044:9" pos:end="1046:0"><expr pos:start="1044:9" pos:end="1044:27"><call pos:start="1044:9" pos:end="1044:27"><name pos:start="1044:9" pos:end="1044:14">perror</name><argument_list pos:start="1044:15" pos:end="1044:27">(<argument pos:start="1044:16" pos:end="1044:26"><expr pos:start="1044:16" pos:end="1044:26"><literal type="string" pos:start="1044:16" pos:end="1044:26">"setrlimit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else pos:start="1045:1" pos:end="1045:5">#<cpp:directive pos:start="1045:2" pos:end="1045:5">else</cpp:directive></cpp:else>
    <expr_stmt pos:start="1046:5" pos:end="1048:0"><expr pos:start="1046:5" pos:end="1046:73"><call pos:start="1046:5" pos:end="1046:73"><name pos:start="1046:5" pos:end="1046:10">av_log</name><argument_list pos:start="1046:11" pos:end="1046:73">(<argument pos:start="1046:12" pos:end="1046:15"><expr pos:start="1046:12" pos:end="1046:15"><name pos:start="1046:12" pos:end="1046:15">NULL</name></expr></argument>, <argument pos:start="1046:18" pos:end="1046:31"><expr pos:start="1046:18" pos:end="1046:31"><name pos:start="1046:18" pos:end="1046:31">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="1046:34" pos:end="1046:67"><expr pos:start="1046:34" pos:end="1046:67"><literal type="string" pos:start="1046:34" pos:end="1046:67">"-%s not implemented on this OS\n"</literal></expr></argument>, <argument pos:start="1046:70" pos:end="1046:72"><expr pos:start="1046:70" pos:end="1046:72"><name pos:start="1046:70" pos:end="1046:72">opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1047:1" pos:end="1047:6">#<cpp:directive pos:start="1047:2" pos:end="1047:6">endif</cpp:directive></cpp:endif>
    <return pos:start="1048:5" pos:end="1048:13">return <expr pos:start="1048:12" pos:end="1048:12"><literal type="number" pos:start="1048:12" pos:end="1048:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="1051:1" pos:end="1059:1"><type pos:start="1051:1" pos:end="1051:4"><name pos:start="1051:1" pos:end="1051:4">void</name></type> <name pos:start="1051:6" pos:end="1051:16">print_error</name><parameter_list pos:start="1051:17" pos:end="1051:47">(<parameter pos:start="1051:18" pos:end="1051:37"><decl pos:start="1051:18" pos:end="1051:37"><type pos:start="1051:18" pos:end="1051:37"><specifier pos:start="1051:18" pos:end="1051:22">const</specifier> <name pos:start="1051:24" pos:end="1051:27">char</name> <modifier pos:start="1051:29" pos:end="1051:29">*</modifier></type><name pos:start="1051:30" pos:end="1051:37">filename</name></decl></parameter>, <parameter pos:start="1051:40" pos:end="1051:46"><decl pos:start="1051:40" pos:end="1051:46"><type pos:start="1051:40" pos:end="1051:46"><name pos:start="1051:40" pos:end="1051:42">int</name></type> <name pos:start="1051:44" pos:end="1051:46">err</name></decl></parameter>)</parameter_list>
<block pos:start="1052:1" pos:end="1059:1">{<block_content pos:start="1053:5" pos:end="1058:65">
    <decl_stmt pos:start="1053:5" pos:end="1053:21"><decl pos:start="1053:5" pos:end="1053:20"><type pos:start="1053:5" pos:end="1053:8"><name pos:start="1053:5" pos:end="1053:8">char</name></type> <name pos:start="1053:10" pos:end="1053:20"><name pos:start="1053:10" pos:end="1053:15">errbuf</name><index pos:start="1053:16" pos:end="1053:20">[<expr pos:start="1053:17" pos:end="1053:19"><literal type="number" pos:start="1053:17" pos:end="1053:19">128</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="1054:5" pos:end="1054:36"><decl pos:start="1054:5" pos:end="1054:35"><type pos:start="1054:5" pos:end="1054:16"><specifier pos:start="1054:5" pos:end="1054:9">const</specifier> <name pos:start="1054:11" pos:end="1054:14">char</name> <modifier pos:start="1054:16" pos:end="1054:16">*</modifier></type><name pos:start="1054:17" pos:end="1054:26">errbuf_ptr</name> <init pos:start="1054:28" pos:end="1054:35">= <expr pos:start="1054:30" pos:end="1054:35"><name pos:start="1054:30" pos:end="1054:35">errbuf</name></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1056:5" pos:end="1057:46"><if pos:start="1056:5" pos:end="1057:46">if <condition pos:start="1056:8" pos:end="1056:53">(<expr pos:start="1056:9" pos:end="1056:52"><call pos:start="1056:9" pos:end="1056:48"><name pos:start="1056:9" pos:end="1056:19">av_strerror</name><argument_list pos:start="1056:20" pos:end="1056:48">(<argument pos:start="1056:21" pos:end="1056:23"><expr pos:start="1056:21" pos:end="1056:23"><name pos:start="1056:21" pos:end="1056:23">err</name></expr></argument>, <argument pos:start="1056:26" pos:end="1056:31"><expr pos:start="1056:26" pos:end="1056:31"><name pos:start="1056:26" pos:end="1056:31">errbuf</name></expr></argument>, <argument pos:start="1056:34" pos:end="1056:47"><expr pos:start="1056:34" pos:end="1056:47"><sizeof pos:start="1056:34" pos:end="1056:47">sizeof<argument_list pos:start="1056:40" pos:end="1056:47">(<argument pos:start="1056:41" pos:end="1056:46"><expr pos:start="1056:41" pos:end="1056:46"><name pos:start="1056:41" pos:end="1056:46">errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="1056:50" pos:end="1056:50">&lt;</operator> <literal type="number" pos:start="1056:52" pos:end="1056:52">0</literal></expr>)</condition><block type="pseudo" pos:start="1057:9" pos:end="1057:46"><block_content pos:start="1057:9" pos:end="1057:46">
        <expr_stmt pos:start="1057:9" pos:end="1057:46"><expr pos:start="1057:9" pos:end="1057:45"><name pos:start="1057:9" pos:end="1057:18">errbuf_ptr</name> <operator pos:start="1057:20" pos:end="1057:20">=</operator> <call pos:start="1057:22" pos:end="1057:45"><name pos:start="1057:22" pos:end="1057:29">strerror</name><argument_list pos:start="1057:30" pos:end="1057:45">(<argument pos:start="1057:31" pos:end="1057:44"><expr pos:start="1057:31" pos:end="1057:44"><call pos:start="1057:31" pos:end="1057:44"><name pos:start="1057:31" pos:end="1057:39">AVUNERROR</name><argument_list pos:start="1057:40" pos:end="1057:44">(<argument pos:start="1057:41" pos:end="1057:43"><expr pos:start="1057:41" pos:end="1057:43"><name pos:start="1057:41" pos:end="1057:43">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="1058:5" pos:end="1058:65"><expr pos:start="1058:5" pos:end="1058:64"><call pos:start="1058:5" pos:end="1058:64"><name pos:start="1058:5" pos:end="1058:10">av_log</name><argument_list pos:start="1058:11" pos:end="1058:64">(<argument pos:start="1058:12" pos:end="1058:15"><expr pos:start="1058:12" pos:end="1058:15"><name pos:start="1058:12" pos:end="1058:15">NULL</name></expr></argument>, <argument pos:start="1058:18" pos:end="1058:29"><expr pos:start="1058:18" pos:end="1058:29"><name pos:start="1058:18" pos:end="1058:29">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="1058:32" pos:end="1058:41"><expr pos:start="1058:32" pos:end="1058:41"><literal type="string" pos:start="1058:32" pos:end="1058:41">"%s: %s\n"</literal></expr></argument>, <argument pos:start="1058:44" pos:end="1058:51"><expr pos:start="1058:44" pos:end="1058:51"><name pos:start="1058:44" pos:end="1058:51">filename</name></expr></argument>, <argument pos:start="1058:54" pos:end="1058:63"><expr pos:start="1058:54" pos:end="1058:63"><name pos:start="1058:54" pos:end="1058:63">errbuf_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt pos:start="1061:1" pos:end="1098:0"><decl pos:start="1061:1" pos:end="1061:25"><type pos:start="1061:1" pos:end="1061:10"><specifier pos:start="1061:1" pos:end="1061:6">static</specifier> <name pos:start="1061:8" pos:end="1061:10">int</name></type> <name pos:start="1061:12" pos:end="1061:21">warned_cfg</name> <init pos:start="1061:23" pos:end="1061:25">= <expr pos:start="1061:25" pos:end="1061:25"><literal type="number" pos:start="1061:25" pos:end="1061:25">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define pos:start="1063:1" pos:end="1063:23">#<cpp:directive pos:start="1063:2" pos:end="1063:7">define</cpp:directive> <cpp:macro pos:start="1063:9" pos:end="1063:14"><name pos:start="1063:9" pos:end="1063:14">INDENT</name></cpp:macro>        <cpp:value pos:start="1063:23" pos:end="1063:23">1</cpp:value></cpp:define>
<cpp:define pos:start="1064:1" pos:end="1064:23">#<cpp:directive pos:start="1064:2" pos:end="1064:7">define</cpp:directive> <cpp:macro pos:start="1064:9" pos:end="1064:20"><name pos:start="1064:9" pos:end="1064:20">SHOW_VERSION</name></cpp:macro>  <cpp:value pos:start="1064:23" pos:end="1064:23">2</cpp:value></cpp:define>
<cpp:define pos:start="1065:1" pos:end="1065:23">#<cpp:directive pos:start="1065:2" pos:end="1065:7">define</cpp:directive> <cpp:macro pos:start="1065:9" pos:end="1065:19"><name pos:start="1065:9" pos:end="1065:19">SHOW_CONFIG</name></cpp:macro>   <cpp:value pos:start="1065:23" pos:end="1065:23">4</cpp:value></cpp:define>
<cpp:define pos:start="1066:1" pos:end="1066:24">#<cpp:directive pos:start="1066:2" pos:end="1066:7">define</cpp:directive> <cpp:macro pos:start="1066:9" pos:end="1066:22"><name pos:start="1066:9" pos:end="1066:22">SHOW_COPYRIGHT</name></cpp:macro> <cpp:value pos:start="1066:24" pos:end="1066:24">8</cpp:value></cpp:define>

<cpp:define pos:start="1068:1" pos:end="1097:53">#<cpp:directive pos:start="1068:2" pos:end="1068:7">define</cpp:directive> <cpp:macro pos:start="1068:9" pos:end="1068:54"><name pos:start="1068:9" pos:end="1068:22">PRINT_LIB_INFO</name><parameter_list pos:start="1068:23" pos:end="1068:54">(<parameter pos:start="1068:24" pos:end="1068:30"><type pos:start="1068:24" pos:end="1068:30"><name pos:start="1068:24" pos:end="1068:30">libname</name></type></parameter>, <parameter pos:start="1068:33" pos:end="1068:39"><type pos:start="1068:33" pos:end="1068:39"><name pos:start="1068:33" pos:end="1068:39">LIBNAME</name></type></parameter>, <parameter pos:start="1068:42" pos:end="1068:46"><type pos:start="1068:42" pos:end="1068:46"><name pos:start="1068:42" pos:end="1068:46">flags</name></type></parameter>, <parameter pos:start="1068:49" pos:end="1068:53"><type pos:start="1068:49" pos:end="1068:53"><name pos:start="1068:49" pos:end="1068:53">level</name></type></parameter>)</parameter_list></cpp:macro>                  \
    <cpp:value pos:start="1069:5" pos:end="1097:53">if (CONFIG_##LIBNAME) {                                             \
        const char *indent = flags &amp; INDENT? "  " : "";                 \
        if (flags &amp; SHOW_VERSION) {                                     \
            unsigned int version = libname##_version();                 \
            av_log(NULL, level,                                         \
                   "%slib%-11s %2d.%3d.%3d / %2d.%3d.%3d\n",            \
                   indent, #libname,                                    \
                   LIB##LIBNAME##_VERSION_MAJOR,                        \
                   LIB##LIBNAME##_VERSION_MINOR,                        \
                   LIB##LIBNAME##_VERSION_MICRO,                        \
                   AV_VERSION_MAJOR(version), AV_VERSION_MINOR(version),\
                   AV_VERSION_MICRO(version));                          \
        }                                                               \
        if (flags &amp; SHOW_CONFIG) {                                      \
            const char *cfg = libname##_configuration();                \
            if (strcmp(FFMPEG_CONFIGURATION, cfg)) {                    \
                if (!warned_cfg) {                                      \
                    av_log(NULL, level,                                 \
                            "%sWARNING: library configuration mismatch\n", \
                            indent);                                    \
                    warned_cfg = 1;                                     \
                }                                                       \
                av_log(NULL, level, "%s%-11s configuration: %s\n",      \
                        indent, #libname, cfg);                         \
            }                                                           \
        }                                                               \
    }                                                                   \

static void print_all_libs_info(int flags, int level)</cpp:value></cpp:define>
<block pos:start="1098:1" pos:end="1108:1">{<block_content pos:start="1099:5" pos:end="1107:57">
    <expr_stmt pos:start="1099:5" pos:end="1099:57"><expr pos:start="1099:5" pos:end="1099:56"><call pos:start="1099:5" pos:end="1099:56"><name pos:start="1099:5" pos:end="1099:18">PRINT_LIB_INFO</name><argument_list pos:start="1099:19" pos:end="1099:56">(<argument pos:start="1099:20" pos:end="1099:25"><expr pos:start="1099:20" pos:end="1099:25"><name pos:start="1099:20" pos:end="1099:25">avutil</name></expr></argument>,     <argument pos:start="1099:32" pos:end="1099:37"><expr pos:start="1099:32" pos:end="1099:37"><name pos:start="1099:32" pos:end="1099:37">AVUTIL</name></expr></argument>,     <argument pos:start="1099:44" pos:end="1099:48"><expr pos:start="1099:44" pos:end="1099:48"><name pos:start="1099:44" pos:end="1099:48">flags</name></expr></argument>, <argument pos:start="1099:51" pos:end="1099:55"><expr pos:start="1099:51" pos:end="1099:55"><name pos:start="1099:51" pos:end="1099:55">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1100:5" pos:end="1100:57"><expr pos:start="1100:5" pos:end="1100:56"><call pos:start="1100:5" pos:end="1100:56"><name pos:start="1100:5" pos:end="1100:18">PRINT_LIB_INFO</name><argument_list pos:start="1100:19" pos:end="1100:56">(<argument pos:start="1100:20" pos:end="1100:26"><expr pos:start="1100:20" pos:end="1100:26"><name pos:start="1100:20" pos:end="1100:26">avcodec</name></expr></argument>,    <argument pos:start="1100:32" pos:end="1100:38"><expr pos:start="1100:32" pos:end="1100:38"><name pos:start="1100:32" pos:end="1100:38">AVCODEC</name></expr></argument>,    <argument pos:start="1100:44" pos:end="1100:48"><expr pos:start="1100:44" pos:end="1100:48"><name pos:start="1100:44" pos:end="1100:48">flags</name></expr></argument>, <argument pos:start="1100:51" pos:end="1100:55"><expr pos:start="1100:51" pos:end="1100:55"><name pos:start="1100:51" pos:end="1100:55">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1101:5" pos:end="1101:57"><expr pos:start="1101:5" pos:end="1101:56"><call pos:start="1101:5" pos:end="1101:56"><name pos:start="1101:5" pos:end="1101:18">PRINT_LIB_INFO</name><argument_list pos:start="1101:19" pos:end="1101:56">(<argument pos:start="1101:20" pos:end="1101:27"><expr pos:start="1101:20" pos:end="1101:27"><name pos:start="1101:20" pos:end="1101:27">avformat</name></expr></argument>,   <argument pos:start="1101:32" pos:end="1101:39"><expr pos:start="1101:32" pos:end="1101:39"><name pos:start="1101:32" pos:end="1101:39">AVFORMAT</name></expr></argument>,   <argument pos:start="1101:44" pos:end="1101:48"><expr pos:start="1101:44" pos:end="1101:48"><name pos:start="1101:44" pos:end="1101:48">flags</name></expr></argument>, <argument pos:start="1101:51" pos:end="1101:55"><expr pos:start="1101:51" pos:end="1101:55"><name pos:start="1101:51" pos:end="1101:55">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1102:5" pos:end="1102:57"><expr pos:start="1102:5" pos:end="1102:56"><call pos:start="1102:5" pos:end="1102:56"><name pos:start="1102:5" pos:end="1102:18">PRINT_LIB_INFO</name><argument_list pos:start="1102:19" pos:end="1102:56">(<argument pos:start="1102:20" pos:end="1102:27"><expr pos:start="1102:20" pos:end="1102:27"><name pos:start="1102:20" pos:end="1102:27">avdevice</name></expr></argument>,   <argument pos:start="1102:32" pos:end="1102:39"><expr pos:start="1102:32" pos:end="1102:39"><name pos:start="1102:32" pos:end="1102:39">AVDEVICE</name></expr></argument>,   <argument pos:start="1102:44" pos:end="1102:48"><expr pos:start="1102:44" pos:end="1102:48"><name pos:start="1102:44" pos:end="1102:48">flags</name></expr></argument>, <argument pos:start="1102:51" pos:end="1102:55"><expr pos:start="1102:51" pos:end="1102:55"><name pos:start="1102:51" pos:end="1102:55">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1103:5" pos:end="1103:57"><expr pos:start="1103:5" pos:end="1103:56"><call pos:start="1103:5" pos:end="1103:56"><name pos:start="1103:5" pos:end="1103:18">PRINT_LIB_INFO</name><argument_list pos:start="1103:19" pos:end="1103:56">(<argument pos:start="1103:20" pos:end="1103:27"><expr pos:start="1103:20" pos:end="1103:27"><name pos:start="1103:20" pos:end="1103:27">avfilter</name></expr></argument>,   <argument pos:start="1103:32" pos:end="1103:39"><expr pos:start="1103:32" pos:end="1103:39"><name pos:start="1103:32" pos:end="1103:39">AVFILTER</name></expr></argument>,   <argument pos:start="1103:44" pos:end="1103:48"><expr pos:start="1103:44" pos:end="1103:48"><name pos:start="1103:44" pos:end="1103:48">flags</name></expr></argument>, <argument pos:start="1103:51" pos:end="1103:55"><expr pos:start="1103:51" pos:end="1103:55"><name pos:start="1103:51" pos:end="1103:55">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1104:5" pos:end="1104:57"><expr pos:start="1104:5" pos:end="1104:56"><call pos:start="1104:5" pos:end="1104:56"><name pos:start="1104:5" pos:end="1104:18">PRINT_LIB_INFO</name><argument_list pos:start="1104:19" pos:end="1104:56">(<argument pos:start="1104:20" pos:end="1104:29"><expr pos:start="1104:20" pos:end="1104:29"><name pos:start="1104:20" pos:end="1104:29">avresample</name></expr></argument>, <argument pos:start="1104:32" pos:end="1104:41"><expr pos:start="1104:32" pos:end="1104:41"><name pos:start="1104:32" pos:end="1104:41">AVRESAMPLE</name></expr></argument>, <argument pos:start="1104:44" pos:end="1104:48"><expr pos:start="1104:44" pos:end="1104:48"><name pos:start="1104:44" pos:end="1104:48">flags</name></expr></argument>, <argument pos:start="1104:51" pos:end="1104:55"><expr pos:start="1104:51" pos:end="1104:55"><name pos:start="1104:51" pos:end="1104:55">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1105:5" pos:end="1105:57"><expr pos:start="1105:5" pos:end="1105:56"><call pos:start="1105:5" pos:end="1105:56"><name pos:start="1105:5" pos:end="1105:18">PRINT_LIB_INFO</name><argument_list pos:start="1105:19" pos:end="1105:56">(<argument pos:start="1105:20" pos:end="1105:26"><expr pos:start="1105:20" pos:end="1105:26"><name pos:start="1105:20" pos:end="1105:26">swscale</name></expr></argument>,    <argument pos:start="1105:32" pos:end="1105:38"><expr pos:start="1105:32" pos:end="1105:38"><name pos:start="1105:32" pos:end="1105:38">SWSCALE</name></expr></argument>,    <argument pos:start="1105:44" pos:end="1105:48"><expr pos:start="1105:44" pos:end="1105:48"><name pos:start="1105:44" pos:end="1105:48">flags</name></expr></argument>, <argument pos:start="1105:51" pos:end="1105:55"><expr pos:start="1105:51" pos:end="1105:55"><name pos:start="1105:51" pos:end="1105:55">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1106:5" pos:end="1106:57"><expr pos:start="1106:5" pos:end="1106:56"><call pos:start="1106:5" pos:end="1106:56"><name pos:start="1106:5" pos:end="1106:18">PRINT_LIB_INFO</name><argument_list pos:start="1106:19" pos:end="1106:56">(<argument pos:start="1106:20" pos:end="1106:29"><expr pos:start="1106:20" pos:end="1106:29"><name pos:start="1106:20" pos:end="1106:29">swresample</name></expr></argument>, <argument pos:start="1106:32" pos:end="1106:41"><expr pos:start="1106:32" pos:end="1106:41"><name pos:start="1106:32" pos:end="1106:41">SWRESAMPLE</name></expr></argument>, <argument pos:start="1106:44" pos:end="1106:48"><expr pos:start="1106:44" pos:end="1106:48"><name pos:start="1106:44" pos:end="1106:48">flags</name></expr></argument>, <argument pos:start="1106:51" pos:end="1106:55"><expr pos:start="1106:51" pos:end="1106:55"><name pos:start="1106:51" pos:end="1106:55">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1107:5" pos:end="1107:57"><expr pos:start="1107:5" pos:end="1107:56"><call pos:start="1107:5" pos:end="1107:56"><name pos:start="1107:5" pos:end="1107:18">PRINT_LIB_INFO</name><argument_list pos:start="1107:19" pos:end="1107:56">(<argument pos:start="1107:20" pos:end="1107:27"><expr pos:start="1107:20" pos:end="1107:27"><name pos:start="1107:20" pos:end="1107:27">postproc</name></expr></argument>,   <argument pos:start="1107:32" pos:end="1107:39"><expr pos:start="1107:32" pos:end="1107:39"><name pos:start="1107:32" pos:end="1107:39">POSTPROC</name></expr></argument>,   <argument pos:start="1107:44" pos:end="1107:48"><expr pos:start="1107:44" pos:end="1107:48"><name pos:start="1107:44" pos:end="1107:48">flags</name></expr></argument>, <argument pos:start="1107:51" pos:end="1107:55"><expr pos:start="1107:51" pos:end="1107:55"><name pos:start="1107:51" pos:end="1107:55">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function pos:start="1110:1" pos:end="1122:1"><type pos:start="1110:1" pos:end="1110:11"><specifier pos:start="1110:1" pos:end="1110:6">static</specifier> <name pos:start="1110:8" pos:end="1110:11">void</name></type> <name pos:start="1110:13" pos:end="1110:30">print_program_info</name><parameter_list pos:start="1110:31" pos:end="1110:52">(<parameter pos:start="1110:32" pos:end="1110:40"><decl pos:start="1110:32" pos:end="1110:40"><type pos:start="1110:32" pos:end="1110:40"><name pos:start="1110:32" pos:end="1110:34">int</name></type> <name pos:start="1110:36" pos:end="1110:40">flags</name></decl></parameter>, <parameter pos:start="1110:43" pos:end="1110:51"><decl pos:start="1110:43" pos:end="1110:51"><type pos:start="1110:43" pos:end="1110:51"><name pos:start="1110:43" pos:end="1110:45">int</name></type> <name pos:start="1110:47" pos:end="1110:51">level</name></decl></parameter>)</parameter_list>
<block pos:start="1111:1" pos:end="1122:1">{<block_content pos:start="1112:5" pos:end="1121:79">
    <decl_stmt pos:start="1112:5" pos:end="1112:51"><decl pos:start="1112:5" pos:end="1112:50"><type pos:start="1112:5" pos:end="1112:16"><specifier pos:start="1112:5" pos:end="1112:9">const</specifier> <name pos:start="1112:11" pos:end="1112:14">char</name> <modifier pos:start="1112:16" pos:end="1112:16">*</modifier></type><name pos:start="1112:17" pos:end="1112:22">indent</name> <init pos:start="1112:24" pos:end="1112:50">= <expr pos:start="1112:26" pos:end="1112:50"><ternary pos:start="1112:26" pos:end="1112:50"><condition pos:start="1112:26" pos:end="1112:40"><expr pos:start="1112:26" pos:end="1112:39"><name pos:start="1112:26" pos:end="1112:30">flags</name> <operator pos:start="1112:32" pos:end="1112:32">&amp;</operator> <name pos:start="1112:34" pos:end="1112:39">INDENT</name></expr>?</condition><then pos:start="1112:42" pos:end="1112:45"> <expr pos:start="1112:42" pos:end="1112:45"><literal type="string" pos:start="1112:42" pos:end="1112:45">"  "</literal></expr> </then><else pos:start="1112:47" pos:end="1112:50">: <expr pos:start="1112:49" pos:end="1112:50"><literal type="string" pos:start="1112:49" pos:end="1112:50">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="1114:5" pos:end="1114:68"><expr pos:start="1114:5" pos:end="1114:67"><call pos:start="1114:5" pos:end="1114:67"><name pos:start="1114:5" pos:end="1114:10">av_log</name><argument_list pos:start="1114:11" pos:end="1114:67">(<argument pos:start="1114:12" pos:end="1114:15"><expr pos:start="1114:12" pos:end="1114:15"><name pos:start="1114:12" pos:end="1114:15">NULL</name></expr></argument>, <argument pos:start="1114:18" pos:end="1114:22"><expr pos:start="1114:18" pos:end="1114:22"><name pos:start="1114:18" pos:end="1114:22">level</name></expr></argument>, <argument pos:start="1114:25" pos:end="1114:52"><expr pos:start="1114:25" pos:end="1114:52"><literal type="string" pos:start="1114:25" pos:end="1114:37">"%s version "</literal> <name pos:start="1114:39" pos:end="1114:52">FFMPEG_VERSION</name></expr></argument>, <argument pos:start="1114:55" pos:end="1114:66"><expr pos:start="1114:55" pos:end="1114:66"><name pos:start="1114:55" pos:end="1114:66">program_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1115:5" pos:end="1117:53"><if pos:start="1115:5" pos:end="1117:53">if <condition pos:start="1115:8" pos:end="1115:31">(<expr pos:start="1115:9" pos:end="1115:30"><name pos:start="1115:9" pos:end="1115:13">flags</name> <operator pos:start="1115:15" pos:end="1115:15">&amp;</operator> <name pos:start="1115:17" pos:end="1115:30">SHOW_COPYRIGHT</name></expr>)</condition><block type="pseudo" pos:start="1116:9" pos:end="1117:53"><block_content pos:start="1116:9" pos:end="1117:53">
        <expr_stmt pos:start="1116:9" pos:end="1117:53"><expr pos:start="1116:9" pos:end="1117:52"><call pos:start="1116:9" pos:end="1117:52"><name pos:start="1116:9" pos:end="1116:14">av_log</name><argument_list pos:start="1116:15" pos:end="1117:52">(<argument pos:start="1116:16" pos:end="1116:19"><expr pos:start="1116:16" pos:end="1116:19"><name pos:start="1116:16" pos:end="1116:19">NULL</name></expr></argument>, <argument pos:start="1116:22" pos:end="1116:26"><expr pos:start="1116:22" pos:end="1116:26"><name pos:start="1116:22" pos:end="1116:26">level</name></expr></argument>, <argument pos:start="1116:29" pos:end="1116:72"><expr pos:start="1116:29" pos:end="1116:72"><literal type="string" pos:start="1116:29" pos:end="1116:72">" Copyright (c) %d-%d the FFmpeg developers"</literal></expr></argument>,
               <argument pos:start="1117:16" pos:end="1117:33"><expr pos:start="1117:16" pos:end="1117:33"><name pos:start="1117:16" pos:end="1117:33">program_birth_year</name></expr></argument>, <argument pos:start="1117:36" pos:end="1117:51"><expr pos:start="1117:36" pos:end="1117:51"><name pos:start="1117:36" pos:end="1117:51">CONFIG_THIS_YEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="1118:5" pos:end="1118:30"><expr pos:start="1118:5" pos:end="1118:29"><call pos:start="1118:5" pos:end="1118:29"><name pos:start="1118:5" pos:end="1118:10">av_log</name><argument_list pos:start="1118:11" pos:end="1118:29">(<argument pos:start="1118:12" pos:end="1118:15"><expr pos:start="1118:12" pos:end="1118:15"><name pos:start="1118:12" pos:end="1118:15">NULL</name></expr></argument>, <argument pos:start="1118:18" pos:end="1118:22"><expr pos:start="1118:18" pos:end="1118:22"><name pos:start="1118:18" pos:end="1118:22">level</name></expr></argument>, <argument pos:start="1118:25" pos:end="1118:28"><expr pos:start="1118:25" pos:end="1118:28"><literal type="string" pos:start="1118:25" pos:end="1118:28">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1119:5" pos:end="1119:63"><expr pos:start="1119:5" pos:end="1119:62"><call pos:start="1119:5" pos:end="1119:62"><name pos:start="1119:5" pos:end="1119:10">av_log</name><argument_list pos:start="1119:11" pos:end="1119:62">(<argument pos:start="1119:12" pos:end="1119:15"><expr pos:start="1119:12" pos:end="1119:15"><name pos:start="1119:12" pos:end="1119:15">NULL</name></expr></argument>, <argument pos:start="1119:18" pos:end="1119:22"><expr pos:start="1119:18" pos:end="1119:22"><name pos:start="1119:18" pos:end="1119:22">level</name></expr></argument>, <argument pos:start="1119:25" pos:end="1119:43"><expr pos:start="1119:25" pos:end="1119:43"><literal type="string" pos:start="1119:25" pos:end="1119:43">"%sbuilt with %s\n"</literal></expr></argument>, <argument pos:start="1119:46" pos:end="1119:51"><expr pos:start="1119:46" pos:end="1119:51"><name pos:start="1119:46" pos:end="1119:51">indent</name></expr></argument>, <argument pos:start="1119:54" pos:end="1119:61"><expr pos:start="1119:54" pos:end="1119:61"><name pos:start="1119:54" pos:end="1119:61">CC_IDENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1121:5" pos:end="1121:79"><expr pos:start="1121:5" pos:end="1121:78"><call pos:start="1121:5" pos:end="1121:78"><name pos:start="1121:5" pos:end="1121:10">av_log</name><argument_list pos:start="1121:11" pos:end="1121:78">(<argument pos:start="1121:12" pos:end="1121:15"><expr pos:start="1121:12" pos:end="1121:15"><name pos:start="1121:12" pos:end="1121:15">NULL</name></expr></argument>, <argument pos:start="1121:18" pos:end="1121:22"><expr pos:start="1121:18" pos:end="1121:22"><name pos:start="1121:18" pos:end="1121:22">level</name></expr></argument>, <argument pos:start="1121:25" pos:end="1121:69"><expr pos:start="1121:25" pos:end="1121:69"><literal type="string" pos:start="1121:25" pos:end="1121:43">"%sconfiguration: "</literal> <name pos:start="1121:45" pos:end="1121:64">FFMPEG_CONFIGURATION</name> <literal type="string" pos:start="1121:66" pos:end="1121:69">"\n"</literal></expr></argument>, <argument pos:start="1121:72" pos:end="1121:77"><expr pos:start="1121:72" pos:end="1121:77"><name pos:start="1121:72" pos:end="1121:77">indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="1124:1" pos:end="1148:1"><type pos:start="1124:1" pos:end="1124:11"><specifier pos:start="1124:1" pos:end="1124:6">static</specifier> <name pos:start="1124:8" pos:end="1124:11">void</name></type> <name pos:start="1124:13" pos:end="1124:27">print_buildconf</name><parameter_list pos:start="1124:28" pos:end="1124:49">(<parameter pos:start="1124:29" pos:end="1124:37"><decl pos:start="1124:29" pos:end="1124:37"><type pos:start="1124:29" pos:end="1124:37"><name pos:start="1124:29" pos:end="1124:31">int</name></type> <name pos:start="1124:33" pos:end="1124:37">flags</name></decl></parameter>, <parameter pos:start="1124:40" pos:end="1124:48"><decl pos:start="1124:40" pos:end="1124:48"><type pos:start="1124:40" pos:end="1124:48"><name pos:start="1124:40" pos:end="1124:42">int</name></type> <name pos:start="1124:44" pos:end="1124:48">level</name></decl></parameter>)</parameter_list>
<block pos:start="1125:1" pos:end="1148:1">{<block_content pos:start="1126:5" pos:end="1147:5">
    <decl_stmt pos:start="1126:5" pos:end="1126:52"><decl pos:start="1126:5" pos:end="1126:51"><type pos:start="1126:5" pos:end="1126:16"><specifier pos:start="1126:5" pos:end="1126:9">const</specifier> <name pos:start="1126:11" pos:end="1126:14">char</name> <modifier pos:start="1126:16" pos:end="1126:16">*</modifier></type><name pos:start="1126:17" pos:end="1126:22">indent</name> <init pos:start="1126:24" pos:end="1126:51">= <expr pos:start="1126:26" pos:end="1126:51"><ternary pos:start="1126:26" pos:end="1126:51"><condition pos:start="1126:26" pos:end="1126:41"><expr pos:start="1126:26" pos:end="1126:39"><name pos:start="1126:26" pos:end="1126:30">flags</name> <operator pos:start="1126:32" pos:end="1126:32">&amp;</operator> <name pos:start="1126:34" pos:end="1126:39">INDENT</name></expr> ?</condition><then pos:start="1126:43" pos:end="1126:46"> <expr pos:start="1126:43" pos:end="1126:46"><literal type="string" pos:start="1126:43" pos:end="1126:46">"  "</literal></expr> </then><else pos:start="1126:48" pos:end="1126:51">: <expr pos:start="1126:50" pos:end="1126:51"><literal type="string" pos:start="1126:50" pos:end="1126:51">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1127:5" pos:end="1127:42"><decl pos:start="1127:5" pos:end="1127:41"><type pos:start="1127:5" pos:end="1127:8"><name pos:start="1127:5" pos:end="1127:8">char</name></type> <name pos:start="1127:10" pos:end="1127:14"><name pos:start="1127:10" pos:end="1127:12">str</name><index pos:start="1127:13" pos:end="1127:14">[]</index></name> <init pos:start="1127:16" pos:end="1127:41">= <expr pos:start="1127:18" pos:end="1127:41"><block pos:start="1127:18" pos:end="1127:41">{ <expr pos:start="1127:20" pos:end="1127:39"><name pos:start="1127:20" pos:end="1127:39">FFMPEG_CONFIGURATION</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1128:5" pos:end="1128:46"><decl pos:start="1128:5" pos:end="1128:18"><type pos:start="1128:5" pos:end="1128:10"><name pos:start="1128:5" pos:end="1128:8">char</name> <modifier pos:start="1128:10" pos:end="1128:10">*</modifier></type><name pos:start="1128:11" pos:end="1128:18">conflist</name></decl>, <decl pos:start="1128:21" pos:end="1128:33"><type ref="prev" pos:start="1128:5" pos:end="1128:10"><modifier pos:start="1128:21" pos:end="1128:21">*</modifier></type><name pos:start="1128:22" pos:end="1128:33">remove_tilde</name></decl>, <decl pos:start="1128:36" pos:end="1128:45"><type ref="prev" pos:start="1128:5" pos:end="1128:10"><modifier pos:start="1128:36" pos:end="1128:36">*</modifier></type><name pos:start="1128:37" pos:end="1128:45">splitconf</name></decl>;</decl_stmt>

    <comment type="line" pos:start="1130:5" pos:end="1130:52">// Change all the ' --' strings to '~--' so that</comment>
    <comment type="line" pos:start="1131:5" pos:end="1131:40">// they can be identified as tokens.</comment>
    <while pos:start="1132:5" pos:end="1134:5">while <condition pos:start="1132:11" pos:end="1132:51">(<expr pos:start="1132:12" pos:end="1132:50"><operator pos:start="1132:12" pos:end="1132:12">(</operator><name pos:start="1132:13" pos:end="1132:20">conflist</name> <operator pos:start="1132:22" pos:end="1132:22">=</operator> <call pos:start="1132:24" pos:end="1132:41"><name pos:start="1132:24" pos:end="1132:29">strstr</name><argument_list pos:start="1132:30" pos:end="1132:41">(<argument pos:start="1132:31" pos:end="1132:33"><expr pos:start="1132:31" pos:end="1132:33"><name pos:start="1132:31" pos:end="1132:33">str</name></expr></argument>, <argument pos:start="1132:36" pos:end="1132:40"><expr pos:start="1132:36" pos:end="1132:40"><literal type="string" pos:start="1132:36" pos:end="1132:40">" --"</literal></expr></argument>)</argument_list></call><operator pos:start="1132:42" pos:end="1132:42">)</operator> <operator pos:start="1132:44" pos:end="1132:45">!=</operator> <name pos:start="1132:47" pos:end="1132:50">NULL</name></expr>)</condition> <block pos:start="1132:53" pos:end="1134:5">{<block_content pos:start="1133:9" pos:end="1133:36">
        <expr_stmt pos:start="1133:9" pos:end="1133:36"><expr pos:start="1133:9" pos:end="1133:35"><call pos:start="1133:9" pos:end="1133:35"><name pos:start="1133:9" pos:end="1133:15">strncpy</name><argument_list pos:start="1133:16" pos:end="1133:35">(<argument pos:start="1133:17" pos:end="1133:24"><expr pos:start="1133:17" pos:end="1133:24"><name pos:start="1133:17" pos:end="1133:24">conflist</name></expr></argument>, <argument pos:start="1133:27" pos:end="1133:31"><expr pos:start="1133:27" pos:end="1133:31"><literal type="string" pos:start="1133:27" pos:end="1133:31">"~--"</literal></expr></argument>, <argument pos:start="1133:34" pos:end="1133:34"><expr pos:start="1133:34" pos:end="1133:34"><literal type="number" pos:start="1133:34" pos:end="1133:34">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="line" pos:start="1136:5" pos:end="1136:52">// Compensate for the weirdness this would cause</comment>
    <comment type="line" pos:start="1137:5" pos:end="1137:42">// when passing 'pkg-config --static'.</comment>
    <while pos:start="1138:5" pos:end="1140:5">while <condition pos:start="1138:11" pos:end="1138:63">(<expr pos:start="1138:12" pos:end="1138:62"><operator pos:start="1138:12" pos:end="1138:12">(</operator><name pos:start="1138:13" pos:end="1138:24">remove_tilde</name> <operator pos:start="1138:26" pos:end="1138:26">=</operator> <call pos:start="1138:28" pos:end="1138:53"><name pos:start="1138:28" pos:end="1138:33">strstr</name><argument_list pos:start="1138:34" pos:end="1138:53">(<argument pos:start="1138:35" pos:end="1138:37"><expr pos:start="1138:35" pos:end="1138:37"><name pos:start="1138:35" pos:end="1138:37">str</name></expr></argument>, <argument pos:start="1138:40" pos:end="1138:52"><expr pos:start="1138:40" pos:end="1138:52"><literal type="string" pos:start="1138:40" pos:end="1138:52">"pkg-config~"</literal></expr></argument>)</argument_list></call><operator pos:start="1138:54" pos:end="1138:54">)</operator> <operator pos:start="1138:56" pos:end="1138:57">!=</operator> <name pos:start="1138:59" pos:end="1138:62">NULL</name></expr>)</condition> <block pos:start="1138:65" pos:end="1140:5">{<block_content pos:start="1139:9" pos:end="1139:49">
        <expr_stmt pos:start="1139:9" pos:end="1139:49"><expr pos:start="1139:9" pos:end="1139:48"><call pos:start="1139:9" pos:end="1139:48"><name pos:start="1139:9" pos:end="1139:15">strncpy</name><argument_list pos:start="1139:16" pos:end="1139:48">(<argument pos:start="1139:17" pos:end="1139:28"><expr pos:start="1139:17" pos:end="1139:28"><name pos:start="1139:17" pos:end="1139:28">remove_tilde</name></expr></argument>, <argument pos:start="1139:31" pos:end="1139:43"><expr pos:start="1139:31" pos:end="1139:43"><literal type="string" pos:start="1139:31" pos:end="1139:43">"pkg-config "</literal></expr></argument>, <argument pos:start="1139:46" pos:end="1139:47"><expr pos:start="1139:46" pos:end="1139:47"><literal type="number" pos:start="1139:46" pos:end="1139:47">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt pos:start="1142:5" pos:end="1142:33"><expr pos:start="1142:5" pos:end="1142:32"><name pos:start="1142:5" pos:end="1142:13">splitconf</name> <operator pos:start="1142:15" pos:end="1142:15">=</operator> <call pos:start="1142:17" pos:end="1142:32"><name pos:start="1142:17" pos:end="1142:22">strtok</name><argument_list pos:start="1142:23" pos:end="1142:32">(<argument pos:start="1142:24" pos:end="1142:26"><expr pos:start="1142:24" pos:end="1142:26"><name pos:start="1142:24" pos:end="1142:26">str</name></expr></argument>, <argument pos:start="1142:29" pos:end="1142:31"><expr pos:start="1142:29" pos:end="1142:31"><literal type="string" pos:start="1142:29" pos:end="1142:31">"~"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1143:5" pos:end="1143:56"><expr pos:start="1143:5" pos:end="1143:55"><call pos:start="1143:5" pos:end="1143:55"><name pos:start="1143:5" pos:end="1143:10">av_log</name><argument_list pos:start="1143:11" pos:end="1143:55">(<argument pos:start="1143:12" pos:end="1143:15"><expr pos:start="1143:12" pos:end="1143:15"><name pos:start="1143:12" pos:end="1143:15">NULL</name></expr></argument>, <argument pos:start="1143:18" pos:end="1143:22"><expr pos:start="1143:18" pos:end="1143:22"><name pos:start="1143:18" pos:end="1143:22">level</name></expr></argument>, <argument pos:start="1143:25" pos:end="1143:46"><expr pos:start="1143:25" pos:end="1143:46"><literal type="string" pos:start="1143:25" pos:end="1143:46">"\n%sconfiguration:\n"</literal></expr></argument>, <argument pos:start="1143:49" pos:end="1143:54"><expr pos:start="1143:49" pos:end="1143:54"><name pos:start="1143:49" pos:end="1143:54">indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while pos:start="1144:5" pos:end="1147:5">while <condition pos:start="1144:11" pos:end="1144:29">(<expr pos:start="1144:12" pos:end="1144:28"><name pos:start="1144:12" pos:end="1144:20">splitconf</name> <operator pos:start="1144:22" pos:end="1144:23">!=</operator> <name pos:start="1144:25" pos:end="1144:28">NULL</name></expr>)</condition> <block pos:start="1144:31" pos:end="1147:5">{<block_content pos:start="1145:9" pos:end="1146:38">
        <expr_stmt pos:start="1145:9" pos:end="1145:67"><expr pos:start="1145:9" pos:end="1145:66"><call pos:start="1145:9" pos:end="1145:66"><name pos:start="1145:9" pos:end="1145:14">av_log</name><argument_list pos:start="1145:15" pos:end="1145:66">(<argument pos:start="1145:16" pos:end="1145:19"><expr pos:start="1145:16" pos:end="1145:19"><name pos:start="1145:16" pos:end="1145:19">NULL</name></expr></argument>, <argument pos:start="1145:22" pos:end="1145:26"><expr pos:start="1145:22" pos:end="1145:26"><name pos:start="1145:22" pos:end="1145:26">level</name></expr></argument>, <argument pos:start="1145:29" pos:end="1145:38"><expr pos:start="1145:29" pos:end="1145:38"><literal type="string" pos:start="1145:29" pos:end="1145:38">"%s%s%s\n"</literal></expr></argument>, <argument pos:start="1145:41" pos:end="1145:46"><expr pos:start="1145:41" pos:end="1145:46"><name pos:start="1145:41" pos:end="1145:46">indent</name></expr></argument>, <argument pos:start="1145:49" pos:end="1145:54"><expr pos:start="1145:49" pos:end="1145:54"><name pos:start="1145:49" pos:end="1145:54">indent</name></expr></argument>, <argument pos:start="1145:57" pos:end="1145:65"><expr pos:start="1145:57" pos:end="1145:65"><name pos:start="1145:57" pos:end="1145:65">splitconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1146:9" pos:end="1146:38"><expr pos:start="1146:9" pos:end="1146:37"><name pos:start="1146:9" pos:end="1146:17">splitconf</name> <operator pos:start="1146:19" pos:end="1146:19">=</operator> <call pos:start="1146:21" pos:end="1146:37"><name pos:start="1146:21" pos:end="1146:26">strtok</name><argument_list pos:start="1146:27" pos:end="1146:37">(<argument pos:start="1146:28" pos:end="1146:31"><expr pos:start="1146:28" pos:end="1146:31"><name pos:start="1146:28" pos:end="1146:31">NULL</name></expr></argument>, <argument pos:start="1146:34" pos:end="1146:36"><expr pos:start="1146:34" pos:end="1146:36"><literal type="string" pos:start="1146:34" pos:end="1146:36">"~"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function pos:start="1150:1" pos:end="1159:1"><type pos:start="1150:1" pos:end="1150:4"><name pos:start="1150:1" pos:end="1150:4">void</name></type> <name pos:start="1150:6" pos:end="1150:16">show_banner</name><parameter_list pos:start="1150:17" pos:end="1150:65">(<parameter pos:start="1150:18" pos:end="1150:25"><decl pos:start="1150:18" pos:end="1150:25"><type pos:start="1150:18" pos:end="1150:25"><name pos:start="1150:18" pos:end="1150:20">int</name></type> <name pos:start="1150:22" pos:end="1150:25">argc</name></decl></parameter>, <parameter pos:start="1150:28" pos:end="1150:38"><decl pos:start="1150:28" pos:end="1150:38"><type pos:start="1150:28" pos:end="1150:38"><name pos:start="1150:28" pos:end="1150:31">char</name> <modifier pos:start="1150:33" pos:end="1150:33">*</modifier><modifier pos:start="1150:34" pos:end="1150:34">*</modifier></type><name pos:start="1150:35" pos:end="1150:38">argv</name></decl></parameter>, <parameter pos:start="1150:41" pos:end="1150:64"><decl pos:start="1150:41" pos:end="1150:64"><type pos:start="1150:41" pos:end="1150:64"><specifier pos:start="1150:41" pos:end="1150:45">const</specifier> <name pos:start="1150:47" pos:end="1150:55">OptionDef</name> <modifier pos:start="1150:57" pos:end="1150:57">*</modifier></type><name pos:start="1150:58" pos:end="1150:64">options</name></decl></parameter>)</parameter_list>
<block pos:start="1151:1" pos:end="1159:1">{<block_content pos:start="1152:5" pos:end="1158:58">
    <decl_stmt pos:start="1152:5" pos:end="1152:60"><decl pos:start="1152:5" pos:end="1152:59"><type pos:start="1152:5" pos:end="1152:7"><name pos:start="1152:5" pos:end="1152:7">int</name></type> <name pos:start="1152:9" pos:end="1152:11">idx</name> <init pos:start="1152:13" pos:end="1152:59">= <expr pos:start="1152:15" pos:end="1152:59"><call pos:start="1152:15" pos:end="1152:59"><name pos:start="1152:15" pos:end="1152:27">locate_option</name><argument_list pos:start="1152:28" pos:end="1152:59">(<argument pos:start="1152:29" pos:end="1152:32"><expr pos:start="1152:29" pos:end="1152:32"><name pos:start="1152:29" pos:end="1152:32">argc</name></expr></argument>, <argument pos:start="1152:35" pos:end="1152:38"><expr pos:start="1152:35" pos:end="1152:38"><name pos:start="1152:35" pos:end="1152:38">argv</name></expr></argument>, <argument pos:start="1152:41" pos:end="1152:47"><expr pos:start="1152:41" pos:end="1152:47"><name pos:start="1152:41" pos:end="1152:47">options</name></expr></argument>, <argument pos:start="1152:50" pos:end="1152:58"><expr pos:start="1152:50" pos:end="1152:58"><literal type="string" pos:start="1152:50" pos:end="1152:58">"version"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="1153:5" pos:end="1154:15"><if pos:start="1153:5" pos:end="1154:15">if <condition pos:start="1153:8" pos:end="1153:27">(<expr pos:start="1153:9" pos:end="1153:26"><name pos:start="1153:9" pos:end="1153:19">hide_banner</name> <operator pos:start="1153:21" pos:end="1153:22">||</operator> <name pos:start="1153:24" pos:end="1153:26">idx</name></expr>)</condition><block type="pseudo" pos:start="1154:9" pos:end="1154:15"><block_content pos:start="1154:9" pos:end="1154:15">
        <return pos:start="1154:9" pos:end="1154:15">return;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="1156:5" pos:end="1156:60"><expr pos:start="1156:5" pos:end="1156:59"><call pos:start="1156:5" pos:end="1156:59"><name pos:start="1156:5" pos:end="1156:22">print_program_info</name> <argument_list pos:start="1156:24" pos:end="1156:59">(<argument pos:start="1156:25" pos:end="1156:45"><expr pos:start="1156:25" pos:end="1156:45"><name pos:start="1156:25" pos:end="1156:30">INDENT</name><operator pos:start="1156:31" pos:end="1156:31">|</operator><name pos:start="1156:32" pos:end="1156:45">SHOW_COPYRIGHT</name></expr></argument>, <argument pos:start="1156:48" pos:end="1156:58"><expr pos:start="1156:48" pos:end="1156:58"><name pos:start="1156:48" pos:end="1156:58">AV_LOG_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1157:5" pos:end="1157:58"><expr pos:start="1157:5" pos:end="1157:57"><call pos:start="1157:5" pos:end="1157:57"><name pos:start="1157:5" pos:end="1157:23">print_all_libs_info</name><argument_list pos:start="1157:24" pos:end="1157:57">(<argument pos:start="1157:25" pos:end="1157:42"><expr pos:start="1157:25" pos:end="1157:42"><name pos:start="1157:25" pos:end="1157:30">INDENT</name><operator pos:start="1157:31" pos:end="1157:31">|</operator><name pos:start="1157:32" pos:end="1157:42">SHOW_CONFIG</name></expr></argument>,  <argument pos:start="1157:46" pos:end="1157:56"><expr pos:start="1157:46" pos:end="1157:56"><name pos:start="1157:46" pos:end="1157:56">AV_LOG_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1158:5" pos:end="1158:58"><expr pos:start="1158:5" pos:end="1158:57"><call pos:start="1158:5" pos:end="1158:57"><name pos:start="1158:5" pos:end="1158:23">print_all_libs_info</name><argument_list pos:start="1158:24" pos:end="1158:57">(<argument pos:start="1158:25" pos:end="1158:43"><expr pos:start="1158:25" pos:end="1158:43"><name pos:start="1158:25" pos:end="1158:30">INDENT</name><operator pos:start="1158:31" pos:end="1158:31">|</operator><name pos:start="1158:32" pos:end="1158:43">SHOW_VERSION</name></expr></argument>, <argument pos:start="1158:46" pos:end="1158:56"><expr pos:start="1158:46" pos:end="1158:56"><name pos:start="1158:46" pos:end="1158:56">AV_LOG_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="1161:1" pos:end="1168:1"><type pos:start="1161:1" pos:end="1161:3"><name pos:start="1161:1" pos:end="1161:3">int</name></type> <name pos:start="1161:5" pos:end="1161:16">show_version</name><parameter_list pos:start="1161:17" pos:end="1161:64">(<parameter pos:start="1161:18" pos:end="1161:29"><decl pos:start="1161:18" pos:end="1161:29"><type pos:start="1161:18" pos:end="1161:29"><name pos:start="1161:18" pos:end="1161:21">void</name> <modifier pos:start="1161:23" pos:end="1161:23">*</modifier></type><name pos:start="1161:24" pos:end="1161:29">optctx</name></decl></parameter>, <parameter pos:start="1161:32" pos:end="1161:46"><decl pos:start="1161:32" pos:end="1161:46"><type pos:start="1161:32" pos:end="1161:46"><specifier pos:start="1161:32" pos:end="1161:36">const</specifier> <name pos:start="1161:38" pos:end="1161:41">char</name> <modifier pos:start="1161:43" pos:end="1161:43">*</modifier></type><name pos:start="1161:44" pos:end="1161:46">opt</name></decl></parameter>, <parameter pos:start="1161:49" pos:end="1161:63"><decl pos:start="1161:49" pos:end="1161:63"><type pos:start="1161:49" pos:end="1161:63"><specifier pos:start="1161:49" pos:end="1161:53">const</specifier> <name pos:start="1161:55" pos:end="1161:58">char</name> <modifier pos:start="1161:60" pos:end="1161:60">*</modifier></type><name pos:start="1161:61" pos:end="1161:63">arg</name></decl></parameter>)</parameter_list>
<block pos:start="1162:1" pos:end="1168:1">{<block_content pos:start="1163:5" pos:end="1167:13">
    <expr_stmt pos:start="1163:5" pos:end="1163:43"><expr pos:start="1163:5" pos:end="1163:42"><call pos:start="1163:5" pos:end="1163:42"><name pos:start="1163:5" pos:end="1163:23">av_log_set_callback</name><argument_list pos:start="1163:24" pos:end="1163:42">(<argument pos:start="1163:25" pos:end="1163:41"><expr pos:start="1163:25" pos:end="1163:41"><name pos:start="1163:25" pos:end="1163:41">log_callback_help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1164:5" pos:end="1164:53"><expr pos:start="1164:5" pos:end="1164:52"><call pos:start="1164:5" pos:end="1164:52"><name pos:start="1164:5" pos:end="1164:22">print_program_info</name> <argument_list pos:start="1164:24" pos:end="1164:52">(<argument pos:start="1164:25" pos:end="1164:38"><expr pos:start="1164:25" pos:end="1164:38"><name pos:start="1164:25" pos:end="1164:38">SHOW_COPYRIGHT</name></expr></argument>, <argument pos:start="1164:41" pos:end="1164:51"><expr pos:start="1164:41" pos:end="1164:51"><name pos:start="1164:41" pos:end="1164:51">AV_LOG_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1165:5" pos:end="1165:51"><expr pos:start="1165:5" pos:end="1165:50"><call pos:start="1165:5" pos:end="1165:50"><name pos:start="1165:5" pos:end="1165:23">print_all_libs_info</name><argument_list pos:start="1165:24" pos:end="1165:50">(<argument pos:start="1165:25" pos:end="1165:36"><expr pos:start="1165:25" pos:end="1165:36"><name pos:start="1165:25" pos:end="1165:36">SHOW_VERSION</name></expr></argument>, <argument pos:start="1165:39" pos:end="1165:49"><expr pos:start="1165:39" pos:end="1165:49"><name pos:start="1165:39" pos:end="1165:49">AV_LOG_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="1167:5" pos:end="1167:13">return <expr pos:start="1167:12" pos:end="1167:12"><literal type="number" pos:start="1167:12" pos:end="1167:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="1170:1" pos:end="1176:1"><type pos:start="1170:1" pos:end="1170:3"><name pos:start="1170:1" pos:end="1170:3">int</name></type> <name pos:start="1170:5" pos:end="1170:18">show_buildconf</name><parameter_list pos:start="1170:19" pos:end="1170:66">(<parameter pos:start="1170:20" pos:end="1170:31"><decl pos:start="1170:20" pos:end="1170:31"><type pos:start="1170:20" pos:end="1170:31"><name pos:start="1170:20" pos:end="1170:23">void</name> <modifier pos:start="1170:25" pos:end="1170:25">*</modifier></type><name pos:start="1170:26" pos:end="1170:31">optctx</name></decl></parameter>, <parameter pos:start="1170:34" pos:end="1170:48"><decl pos:start="1170:34" pos:end="1170:48"><type pos:start="1170:34" pos:end="1170:48"><specifier pos:start="1170:34" pos:end="1170:38">const</specifier> <name pos:start="1170:40" pos:end="1170:43">char</name> <modifier pos:start="1170:45" pos:end="1170:45">*</modifier></type><name pos:start="1170:46" pos:end="1170:48">opt</name></decl></parameter>, <parameter pos:start="1170:51" pos:end="1170:65"><decl pos:start="1170:51" pos:end="1170:65"><type pos:start="1170:51" pos:end="1170:65"><specifier pos:start="1170:51" pos:end="1170:55">const</specifier> <name pos:start="1170:57" pos:end="1170:60">char</name> <modifier pos:start="1170:62" pos:end="1170:62">*</modifier></type><name pos:start="1170:63" pos:end="1170:65">arg</name></decl></parameter>)</parameter_list>
<block pos:start="1171:1" pos:end="1176:1">{<block_content pos:start="1172:5" pos:end="1175:13">
    <expr_stmt pos:start="1172:5" pos:end="1172:43"><expr pos:start="1172:5" pos:end="1172:42"><call pos:start="1172:5" pos:end="1172:42"><name pos:start="1172:5" pos:end="1172:23">av_log_set_callback</name><argument_list pos:start="1172:24" pos:end="1172:42">(<argument pos:start="1172:25" pos:end="1172:41"><expr pos:start="1172:25" pos:end="1172:41"><name pos:start="1172:25" pos:end="1172:41">log_callback_help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1173:5" pos:end="1173:49"><expr pos:start="1173:5" pos:end="1173:48"><call pos:start="1173:5" pos:end="1173:48"><name pos:start="1173:5" pos:end="1173:19">print_buildconf</name>      <argument_list pos:start="1173:26" pos:end="1173:48">(<argument pos:start="1173:27" pos:end="1173:34"><expr pos:start="1173:27" pos:end="1173:34"><name pos:start="1173:27" pos:end="1173:32">INDENT</name><operator pos:start="1173:33" pos:end="1173:33">|</operator><literal type="number" pos:start="1173:34" pos:end="1173:34">0</literal></expr></argument>, <argument pos:start="1173:37" pos:end="1173:47"><expr pos:start="1173:37" pos:end="1173:47"><name pos:start="1173:37" pos:end="1173:47">AV_LOG_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="1175:5" pos:end="1175:13">return <expr pos:start="1175:12" pos:end="1175:12"><literal type="number" pos:start="1175:12" pos:end="1175:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="1178:1" pos:end="1250:1"><type pos:start="1178:1" pos:end="1178:3"><name pos:start="1178:1" pos:end="1178:3">int</name></type> <name pos:start="1178:5" pos:end="1178:16">show_license</name><parameter_list pos:start="1178:17" pos:end="1178:64">(<parameter pos:start="1178:18" pos:end="1178:29"><decl pos:start="1178:18" pos:end="1178:29"><type pos:start="1178:18" pos:end="1178:29"><name pos:start="1178:18" pos:end="1178:21">void</name> <modifier pos:start="1178:23" pos:end="1178:23">*</modifier></type><name pos:start="1178:24" pos:end="1178:29">optctx</name></decl></parameter>, <parameter pos:start="1178:32" pos:end="1178:46"><decl pos:start="1178:32" pos:end="1178:46"><type pos:start="1178:32" pos:end="1178:46"><specifier pos:start="1178:32" pos:end="1178:36">const</specifier> <name pos:start="1178:38" pos:end="1178:41">char</name> <modifier pos:start="1178:43" pos:end="1178:43">*</modifier></type><name pos:start="1178:44" pos:end="1178:46">opt</name></decl></parameter>, <parameter pos:start="1178:49" pos:end="1178:63"><decl pos:start="1178:49" pos:end="1178:63"><type pos:start="1178:49" pos:end="1178:63"><specifier pos:start="1178:49" pos:end="1178:53">const</specifier> <name pos:start="1178:55" pos:end="1178:58">char</name> <modifier pos:start="1178:60" pos:end="1178:60">*</modifier></type><name pos:start="1178:61" pos:end="1178:63">arg</name></decl></parameter>)</parameter_list>
<block pos:start="1179:1" pos:end="1250:1">{<block_content pos:start="1181:5" pos:end="1249:13">
<cpp:if pos:start="1180:1" pos:end="1180:18">#<cpp:directive pos:start="1180:2" pos:end="1180:3">if</cpp:directive> <expr pos:start="1180:5" pos:end="1180:18"><name pos:start="1180:5" pos:end="1180:18">CONFIG_NONFREE</name></expr></cpp:if>
    <expr_stmt pos:start="1181:5" pos:end="1186:0"><expr pos:start="1181:5" pos:end="1184:18"><call pos:start="1181:5" pos:end="1184:18"><name pos:start="1181:5" pos:end="1181:10">printf</name><argument_list pos:start="1181:11" pos:end="1184:18">(
    <argument pos:start="1182:5" pos:end="1183:52"><expr pos:start="1182:5" pos:end="1183:52"><literal type="string" pos:start="1182:5" pos:end="1182:57">"This version of %s has nonfree parts compiled in.\n"</literal>
    <literal type="string" pos:start="1183:5" pos:end="1183:52">"Therefore it is not legally redistributable.\n"</literal></expr></argument>,
    <argument pos:start="1184:5" pos:end="1184:16"><expr pos:start="1184:5" pos:end="1184:16"><name pos:start="1184:5" pos:end="1184:16">program_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:elif pos:start="1185:1" pos:end="1185:18">#<cpp:directive pos:start="1185:2" pos:end="1185:5">elif</cpp:directive> <expr pos:start="1185:7" pos:end="1185:18"><name pos:start="1185:7" pos:end="1185:18">CONFIG_GPLV3</name></expr></cpp:elif>
    <expr_stmt pos:start="1186:5" pos:end="1201:0"><expr pos:start="1186:5" pos:end="1199:46"><call pos:start="1186:5" pos:end="1199:46"><name pos:start="1186:5" pos:end="1186:10">printf</name><argument_list pos:start="1186:11" pos:end="1199:46">(
    <argument pos:start="1187:5" pos:end="1198:67"><expr pos:start="1187:5" pos:end="1198:67"><literal type="string" pos:start="1187:5" pos:end="1187:66">"%s is free software; you can redistribute it and/or modify\n"</literal>
    <literal type="string" pos:start="1188:5" pos:end="1188:76">"it under the terms of the GNU General Public License as published by\n"</literal>
    <literal type="string" pos:start="1189:5" pos:end="1189:73">"the Free Software Foundation; either version 3 of the License, or\n"</literal>
    <literal type="string" pos:start="1190:5" pos:end="1190:43">"(at your option) any later version.\n"</literal>
    <literal type="string" pos:start="1191:5" pos:end="1191:8">"\n"</literal>
    <literal type="string" pos:start="1192:5" pos:end="1192:61">"%s is distributed in the hope that it will be useful,\n"</literal>
    <literal type="string" pos:start="1193:5" pos:end="1193:70">"but WITHOUT ANY WARRANTY; without even the implied warranty of\n"</literal>
    <literal type="string" pos:start="1194:5" pos:end="1194:69">"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"</literal>
    <literal type="string" pos:start="1195:5" pos:end="1195:52">"GNU General Public License for more details.\n"</literal>
    <literal type="string" pos:start="1196:5" pos:end="1196:8">"\n"</literal>
    <literal type="string" pos:start="1197:5" pos:end="1197:73">"You should have received a copy of the GNU General Public License\n"</literal>
    <literal type="string" pos:start="1198:5" pos:end="1198:67">"along with %s.  If not, see &lt;http://www.gnu.org/licenses/&gt;.\n"</literal></expr></argument>,
    <argument pos:start="1199:5" pos:end="1199:16"><expr pos:start="1199:5" pos:end="1199:16"><name pos:start="1199:5" pos:end="1199:16">program_name</name></expr></argument>, <argument pos:start="1199:19" pos:end="1199:30"><expr pos:start="1199:19" pos:end="1199:30"><name pos:start="1199:19" pos:end="1199:30">program_name</name></expr></argument>, <argument pos:start="1199:33" pos:end="1199:44"><expr pos:start="1199:33" pos:end="1199:44"><name pos:start="1199:33" pos:end="1199:44">program_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:elif pos:start="1200:1" pos:end="1200:16">#<cpp:directive pos:start="1200:2" pos:end="1200:5">elif</cpp:directive> <expr pos:start="1200:7" pos:end="1200:16"><name pos:start="1200:7" pos:end="1200:16">CONFIG_GPL</name></expr></cpp:elif>
    <expr_stmt pos:start="1201:5" pos:end="1217:0"><expr pos:start="1201:5" pos:end="1215:46"><call pos:start="1201:5" pos:end="1215:46"><name pos:start="1201:5" pos:end="1201:10">printf</name><argument_list pos:start="1201:11" pos:end="1215:46">(
    <argument pos:start="1202:5" pos:end="1214:84"><expr pos:start="1202:5" pos:end="1214:84"><literal type="string" pos:start="1202:5" pos:end="1202:66">"%s is free software; you can redistribute it and/or modify\n"</literal>
    <literal type="string" pos:start="1203:5" pos:end="1203:76">"it under the terms of the GNU General Public License as published by\n"</literal>
    <literal type="string" pos:start="1204:5" pos:end="1204:73">"the Free Software Foundation; either version 2 of the License, or\n"</literal>
    <literal type="string" pos:start="1205:5" pos:end="1205:43">"(at your option) any later version.\n"</literal>
    <literal type="string" pos:start="1206:5" pos:end="1206:8">"\n"</literal>
    <literal type="string" pos:start="1207:5" pos:end="1207:61">"%s is distributed in the hope that it will be useful,\n"</literal>
    <literal type="string" pos:start="1208:5" pos:end="1208:70">"but WITHOUT ANY WARRANTY; without even the implied warranty of\n"</literal>
    <literal type="string" pos:start="1209:5" pos:end="1209:69">"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"</literal>
    <literal type="string" pos:start="1210:5" pos:end="1210:52">"GNU General Public License for more details.\n"</literal>
    <literal type="string" pos:start="1211:5" pos:end="1211:8">"\n"</literal>
    <literal type="string" pos:start="1212:5" pos:end="1212:73">"You should have received a copy of the GNU General Public License\n"</literal>
    <literal type="string" pos:start="1213:5" pos:end="1213:57">"along with %s; if not, write to the Free Software\n"</literal>
    <literal type="string" pos:start="1214:5" pos:end="1214:84">"Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n"</literal></expr></argument>,
    <argument pos:start="1215:5" pos:end="1215:16"><expr pos:start="1215:5" pos:end="1215:16"><name pos:start="1215:5" pos:end="1215:16">program_name</name></expr></argument>, <argument pos:start="1215:19" pos:end="1215:30"><expr pos:start="1215:19" pos:end="1215:30"><name pos:start="1215:19" pos:end="1215:30">program_name</name></expr></argument>, <argument pos:start="1215:33" pos:end="1215:44"><expr pos:start="1215:33" pos:end="1215:44"><name pos:start="1215:33" pos:end="1215:44">program_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:elif pos:start="1216:1" pos:end="1216:19">#<cpp:directive pos:start="1216:2" pos:end="1216:5">elif</cpp:directive> <expr pos:start="1216:7" pos:end="1216:19"><name pos:start="1216:7" pos:end="1216:19">CONFIG_LGPLV3</name></expr></cpp:elif>
    <expr_stmt pos:start="1217:5" pos:end="1232:0"><expr pos:start="1217:5" pos:end="1230:46"><call pos:start="1217:5" pos:end="1230:46"><name pos:start="1217:5" pos:end="1217:10">printf</name><argument_list pos:start="1217:11" pos:end="1230:46">(
    <argument pos:start="1218:5" pos:end="1229:67"><expr pos:start="1218:5" pos:end="1229:67"><literal type="string" pos:start="1218:5" pos:end="1218:66">"%s is free software; you can redistribute it and/or modify\n"</literal>
    <literal type="string" pos:start="1219:5" pos:end="1219:83">"it under the terms of the GNU Lesser General Public License as published by\n"</literal>
    <literal type="string" pos:start="1220:5" pos:end="1220:73">"the Free Software Foundation; either version 3 of the License, or\n"</literal>
    <literal type="string" pos:start="1221:5" pos:end="1221:43">"(at your option) any later version.\n"</literal>
    <literal type="string" pos:start="1222:5" pos:end="1222:8">"\n"</literal>
    <literal type="string" pos:start="1223:5" pos:end="1223:61">"%s is distributed in the hope that it will be useful,\n"</literal>
    <literal type="string" pos:start="1224:5" pos:end="1224:70">"but WITHOUT ANY WARRANTY; without even the implied warranty of\n"</literal>
    <literal type="string" pos:start="1225:5" pos:end="1225:69">"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"</literal>
    <literal type="string" pos:start="1226:5" pos:end="1226:59">"GNU Lesser General Public License for more details.\n"</literal>
    <literal type="string" pos:start="1227:5" pos:end="1227:8">"\n"</literal>
    <literal type="string" pos:start="1228:5" pos:end="1228:80">"You should have received a copy of the GNU Lesser General Public License\n"</literal>
    <literal type="string" pos:start="1229:5" pos:end="1229:67">"along with %s.  If not, see &lt;http://www.gnu.org/licenses/&gt;.\n"</literal></expr></argument>,
    <argument pos:start="1230:5" pos:end="1230:16"><expr pos:start="1230:5" pos:end="1230:16"><name pos:start="1230:5" pos:end="1230:16">program_name</name></expr></argument>, <argument pos:start="1230:19" pos:end="1230:30"><expr pos:start="1230:19" pos:end="1230:30"><name pos:start="1230:19" pos:end="1230:30">program_name</name></expr></argument>, <argument pos:start="1230:33" pos:end="1230:44"><expr pos:start="1230:33" pos:end="1230:44"><name pos:start="1230:33" pos:end="1230:44">program_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="1231:1" pos:end="1231:5">#<cpp:directive pos:start="1231:2" pos:end="1231:5">else</cpp:directive></cpp:else>
    <expr_stmt pos:start="1232:5" pos:end="1248:0"><expr pos:start="1232:5" pos:end="1246:46"><call pos:start="1232:5" pos:end="1246:46"><name pos:start="1232:5" pos:end="1232:10">printf</name><argument_list pos:start="1232:11" pos:end="1246:46">(
    <argument pos:start="1233:5" pos:end="1245:84"><expr pos:start="1233:5" pos:end="1245:84"><literal type="string" pos:start="1233:5" pos:end="1233:59">"%s is free software; you can redistribute it and/or\n"</literal>
    <literal type="string" pos:start="1234:5" pos:end="1234:66">"modify it under the terms of the GNU Lesser General Public\n"</literal>
    <literal type="string" pos:start="1235:5" pos:end="1235:68">"License as published by the Free Software Foundation; either\n"</literal>
    <literal type="string" pos:start="1236:5" pos:end="1236:74">"version 2.1 of the License, or (at your option) any later version.\n"</literal>
    <literal type="string" pos:start="1237:5" pos:end="1237:8">"\n"</literal>
    <literal type="string" pos:start="1238:5" pos:end="1238:61">"%s is distributed in the hope that it will be useful,\n"</literal>
    <literal type="string" pos:start="1239:5" pos:end="1239:70">"but WITHOUT ANY WARRANTY; without even the implied warranty of\n"</literal>
    <literal type="string" pos:start="1240:5" pos:end="1240:73">"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n"</literal>
    <literal type="string" pos:start="1241:5" pos:end="1241:55">"Lesser General Public License for more details.\n"</literal>
    <literal type="string" pos:start="1242:5" pos:end="1242:8">"\n"</literal>
    <literal type="string" pos:start="1243:5" pos:end="1243:72">"You should have received a copy of the GNU Lesser General Public\n"</literal>
    <literal type="string" pos:start="1244:5" pos:end="1244:65">"License along with %s; if not, write to the Free Software\n"</literal>
    <literal type="string" pos:start="1245:5" pos:end="1245:84">"Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n"</literal></expr></argument>,
    <argument pos:start="1246:5" pos:end="1246:16"><expr pos:start="1246:5" pos:end="1246:16"><name pos:start="1246:5" pos:end="1246:16">program_name</name></expr></argument>, <argument pos:start="1246:19" pos:end="1246:30"><expr pos:start="1246:19" pos:end="1246:30"><name pos:start="1246:19" pos:end="1246:30">program_name</name></expr></argument>, <argument pos:start="1246:33" pos:end="1246:44"><expr pos:start="1246:33" pos:end="1246:44"><name pos:start="1246:33" pos:end="1246:44">program_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1247:1" pos:end="1247:6">#<cpp:directive pos:start="1247:2" pos:end="1247:6">endif</cpp:directive></cpp:endif>

    <return pos:start="1249:5" pos:end="1249:13">return <expr pos:start="1249:12" pos:end="1249:12"><literal type="number" pos:start="1249:12" pos:end="1249:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="1252:1" pos:end="1257:1"><type pos:start="1252:1" pos:end="1252:10"><specifier pos:start="1252:1" pos:end="1252:6">static</specifier> <name pos:start="1252:8" pos:end="1252:10">int</name></type> <name pos:start="1252:12" pos:end="1252:20">is_device</name><parameter_list pos:start="1252:21" pos:end="1252:44">(<parameter pos:start="1252:22" pos:end="1252:43"><decl pos:start="1252:22" pos:end="1252:43"><type pos:start="1252:22" pos:end="1252:36"><specifier pos:start="1252:22" pos:end="1252:26">const</specifier> <name pos:start="1252:28" pos:end="1252:34">AVClass</name> <modifier pos:start="1252:36" pos:end="1252:36">*</modifier></type><name pos:start="1252:37" pos:end="1252:43">avclass</name></decl></parameter>)</parameter_list>
<block pos:start="1253:1" pos:end="1257:1">{<block_content pos:start="1254:5" pos:end="1256:91">
    <if_stmt pos:start="1254:5" pos:end="1255:17"><if pos:start="1254:5" pos:end="1255:17">if <condition pos:start="1254:8" pos:end="1254:17">(<expr pos:start="1254:9" pos:end="1254:16"><operator pos:start="1254:9" pos:end="1254:9">!</operator><name pos:start="1254:10" pos:end="1254:16">avclass</name></expr>)</condition><block type="pseudo" pos:start="1255:9" pos:end="1255:17"><block_content pos:start="1255:9" pos:end="1255:17">
        <return pos:start="1255:9" pos:end="1255:17">return <expr pos:start="1255:16" pos:end="1255:16"><literal type="number" pos:start="1255:16" pos:end="1255:16">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <return pos:start="1256:5" pos:end="1256:91">return <expr pos:start="1256:12" pos:end="1256:90"><call pos:start="1256:12" pos:end="1256:48"><name pos:start="1256:12" pos:end="1256:29">AV_IS_INPUT_DEVICE</name><argument_list pos:start="1256:30" pos:end="1256:48">(<argument pos:start="1256:31" pos:end="1256:47"><expr pos:start="1256:31" pos:end="1256:47"><name pos:start="1256:31" pos:end="1256:47"><name pos:start="1256:31" pos:end="1256:37">avclass</name><operator pos:start="1256:38" pos:end="1256:39">-&gt;</operator><name pos:start="1256:40" pos:end="1256:47">category</name></name></expr></argument>)</argument_list></call> <operator pos:start="1256:50" pos:end="1256:51">||</operator> <call pos:start="1256:53" pos:end="1256:90"><name pos:start="1256:53" pos:end="1256:71">AV_IS_OUTPUT_DEVICE</name><argument_list pos:start="1256:72" pos:end="1256:90">(<argument pos:start="1256:73" pos:end="1256:89"><expr pos:start="1256:73" pos:end="1256:89"><name pos:start="1256:73" pos:end="1256:89"><name pos:start="1256:73" pos:end="1256:79">avclass</name><operator pos:start="1256:80" pos:end="1256:81">-&gt;</operator><name pos:start="1256:82" pos:end="1256:89">category</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function pos:start="1259:1" pos:end="1316:1"><type pos:start="1259:1" pos:end="1259:10"><specifier pos:start="1259:1" pos:end="1259:6">static</specifier> <name pos:start="1259:8" pos:end="1259:10">int</name></type> <name pos:start="1259:12" pos:end="1259:31">show_formats_devices</name><parameter_list pos:start="1259:32" pos:end="1259:113">(<parameter pos:start="1259:33" pos:end="1259:44"><decl pos:start="1259:33" pos:end="1259:44"><type pos:start="1259:33" pos:end="1259:44"><name pos:start="1259:33" pos:end="1259:36">void</name> <modifier pos:start="1259:38" pos:end="1259:38">*</modifier></type><name pos:start="1259:39" pos:end="1259:44">optctx</name></decl></parameter>, <parameter pos:start="1259:47" pos:end="1259:61"><decl pos:start="1259:47" pos:end="1259:61"><type pos:start="1259:47" pos:end="1259:61"><specifier pos:start="1259:47" pos:end="1259:51">const</specifier> <name pos:start="1259:53" pos:end="1259:56">char</name> <modifier pos:start="1259:58" pos:end="1259:58">*</modifier></type><name pos:start="1259:59" pos:end="1259:61">opt</name></decl></parameter>, <parameter pos:start="1259:64" pos:end="1259:78"><decl pos:start="1259:64" pos:end="1259:78"><type pos:start="1259:64" pos:end="1259:78"><specifier pos:start="1259:64" pos:end="1259:68">const</specifier> <name pos:start="1259:70" pos:end="1259:73">char</name> <modifier pos:start="1259:75" pos:end="1259:75">*</modifier></type><name pos:start="1259:76" pos:end="1259:78">arg</name></decl></parameter>, <parameter pos:start="1259:81" pos:end="1259:95"><decl pos:start="1259:81" pos:end="1259:95"><type pos:start="1259:81" pos:end="1259:95"><name pos:start="1259:81" pos:end="1259:83">int</name></type> <name pos:start="1259:85" pos:end="1259:95">device_only</name></decl></parameter>, <parameter pos:start="1259:98" pos:end="1259:112"><decl pos:start="1259:98" pos:end="1259:112"><type pos:start="1259:98" pos:end="1259:112"><name pos:start="1259:98" pos:end="1259:100">int</name></type> <name pos:start="1259:102" pos:end="1259:112">muxdemuxers</name></decl></parameter>)</parameter_list>
<block pos:start="1260:1" pos:end="1316:1">{<block_content pos:start="1261:5" pos:end="1315:13">
    <decl_stmt pos:start="1261:5" pos:end="1261:32"><decl pos:start="1261:5" pos:end="1261:31"><type pos:start="1261:5" pos:end="1261:19"><name pos:start="1261:5" pos:end="1261:17">AVInputFormat</name> <modifier pos:start="1261:19" pos:end="1261:19">*</modifier></type><name pos:start="1261:20" pos:end="1261:23">ifmt</name>  <init pos:start="1261:26" pos:end="1261:31">= <expr pos:start="1261:28" pos:end="1261:31"><name pos:start="1261:28" pos:end="1261:31">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1262:5" pos:end="1262:32"><decl pos:start="1262:5" pos:end="1262:31"><type pos:start="1262:5" pos:end="1262:20"><name pos:start="1262:5" pos:end="1262:18">AVOutputFormat</name> <modifier pos:start="1262:20" pos:end="1262:20">*</modifier></type><name pos:start="1262:21" pos:end="1262:24">ofmt</name> <init pos:start="1262:26" pos:end="1262:31">= <expr pos:start="1262:28" pos:end="1262:31"><name pos:start="1262:28" pos:end="1262:31">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1263:5" pos:end="1263:26"><decl pos:start="1263:5" pos:end="1263:25"><type pos:start="1263:5" pos:end="1263:16"><specifier pos:start="1263:5" pos:end="1263:9">const</specifier> <name pos:start="1263:11" pos:end="1263:14">char</name> <modifier pos:start="1263:16" pos:end="1263:16">*</modifier></type><name pos:start="1263:17" pos:end="1263:25">last_name</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1264:5" pos:end="1264:15"><decl pos:start="1264:5" pos:end="1264:14"><type pos:start="1264:5" pos:end="1264:7"><name pos:start="1264:5" pos:end="1264:7">int</name></type> <name pos:start="1264:9" pos:end="1264:14">is_dev</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1266:5" pos:end="1269:64"><expr pos:start="1266:5" pos:end="1269:63"><call pos:start="1266:5" pos:end="1269:63"><name pos:start="1266:5" pos:end="1266:10">printf</name><argument_list pos:start="1266:11" pos:end="1269:63">(<argument pos:start="1266:12" pos:end="1269:18"><expr pos:start="1266:12" pos:end="1269:18"><literal type="string" pos:start="1266:12" pos:end="1266:17">"%s\n"</literal>
           <literal type="string" pos:start="1267:12" pos:end="1267:39">" D. = Demuxing supported\n"</literal>
           <literal type="string" pos:start="1268:12" pos:end="1268:37">" .E = Muxing supported\n"</literal>
           <literal type="string" pos:start="1269:12" pos:end="1269:18">" --\n"</literal></expr></argument>, <argument pos:start="1269:21" pos:end="1269:62"><expr pos:start="1269:21" pos:end="1269:62"><ternary pos:start="1269:21" pos:end="1269:62"><condition pos:start="1269:21" pos:end="1269:33"><expr pos:start="1269:21" pos:end="1269:31"><name pos:start="1269:21" pos:end="1269:31">device_only</name></expr> ?</condition><then pos:start="1269:35" pos:end="1269:44"> <expr pos:start="1269:35" pos:end="1269:44"><literal type="string" pos:start="1269:35" pos:end="1269:44">"Devices:"</literal></expr> </then><else pos:start="1269:46" pos:end="1269:62">: <expr pos:start="1269:48" pos:end="1269:62"><literal type="string" pos:start="1269:48" pos:end="1269:62">"File formats:"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1270:5" pos:end="1270:22"><expr pos:start="1270:5" pos:end="1270:21"><name pos:start="1270:5" pos:end="1270:13">last_name</name> <operator pos:start="1270:15" pos:end="1270:15">=</operator> <literal type="string" pos:start="1270:17" pos:end="1270:21">"000"</literal></expr>;</expr_stmt>
    <for pos:start="1271:5" pos:end="1314:5">for <control pos:start="1271:9" pos:end="1271:12">(<init pos:start="1271:10" pos:end="1271:10">;</init><condition pos:start="1271:11" pos:end="1271:11">;</condition><incr/>)</control> <block pos:start="1271:14" pos:end="1314:5">{<block_content pos:start="1272:9" pos:end="1313:39">
        <decl_stmt pos:start="1272:9" pos:end="1272:23"><decl pos:start="1272:9" pos:end="1272:22"><type pos:start="1272:9" pos:end="1272:11"><name pos:start="1272:9" pos:end="1272:11">int</name></type> <name pos:start="1272:13" pos:end="1272:18">decode</name> <init pos:start="1272:20" pos:end="1272:22">= <expr pos:start="1272:22" pos:end="1272:22"><literal type="number" pos:start="1272:22" pos:end="1272:22">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="1273:9" pos:end="1273:23"><decl pos:start="1273:9" pos:end="1273:22"><type pos:start="1273:9" pos:end="1273:11"><name pos:start="1273:9" pos:end="1273:11">int</name></type> <name pos:start="1273:13" pos:end="1273:18">encode</name> <init pos:start="1273:20" pos:end="1273:22">= <expr pos:start="1273:22" pos:end="1273:22"><literal type="number" pos:start="1273:22" pos:end="1273:22">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="1274:9" pos:end="1274:37"><decl pos:start="1274:9" pos:end="1274:36"><type pos:start="1274:9" pos:end="1274:20"><specifier pos:start="1274:9" pos:end="1274:13">const</specifier> <name pos:start="1274:15" pos:end="1274:18">char</name> <modifier pos:start="1274:20" pos:end="1274:20">*</modifier></type><name pos:start="1274:21" pos:end="1274:24">name</name>      <init pos:start="1274:31" pos:end="1274:36">= <expr pos:start="1274:33" pos:end="1274:36"><name pos:start="1274:33" pos:end="1274:36">NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="1275:9" pos:end="1275:37"><decl pos:start="1275:9" pos:end="1275:36"><type pos:start="1275:9" pos:end="1275:20"><specifier pos:start="1275:9" pos:end="1275:13">const</specifier> <name pos:start="1275:15" pos:end="1275:18">char</name> <modifier pos:start="1275:20" pos:end="1275:20">*</modifier></type><name pos:start="1275:21" pos:end="1275:29">long_name</name> <init pos:start="1275:31" pos:end="1275:36">= <expr pos:start="1275:33" pos:end="1275:36"><name pos:start="1275:33" pos:end="1275:36">NULL</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="1277:9" pos:end="1289:9"><if pos:start="1277:9" pos:end="1289:9">if <condition pos:start="1277:12" pos:end="1277:40">(<expr pos:start="1277:13" pos:end="1277:39"><name pos:start="1277:13" pos:end="1277:23">muxdemuxers</name> <operator pos:start="1277:25" pos:end="1277:26">!=</operator><name pos:start="1277:27" pos:end="1277:39">SHOW_DEMUXERS</name></expr>)</condition> <block pos:start="1277:42" pos:end="1289:9">{<block_content pos:start="1278:13" pos:end="1288:13">
            <while pos:start="1278:13" pos:end="1288:13">while <condition pos:start="1278:19" pos:end="1278:50">(<expr pos:start="1278:20" pos:end="1278:49"><operator pos:start="1278:20" pos:end="1278:20">(</operator><name pos:start="1278:21" pos:end="1278:24">ofmt</name> <operator pos:start="1278:26" pos:end="1278:26">=</operator> <call pos:start="1278:28" pos:end="1278:48"><name pos:start="1278:28" pos:end="1278:42">av_oformat_next</name><argument_list pos:start="1278:43" pos:end="1278:48">(<argument pos:start="1278:44" pos:end="1278:47"><expr pos:start="1278:44" pos:end="1278:47"><name pos:start="1278:44" pos:end="1278:47">ofmt</name></expr></argument>)</argument_list></call><operator pos:start="1278:49" pos:end="1278:49">)</operator></expr>)</condition> <block pos:start="1278:52" pos:end="1288:13">{<block_content pos:start="1279:17" pos:end="1287:17">
                <expr_stmt pos:start="1279:17" pos:end="1279:53"><expr pos:start="1279:17" pos:end="1279:52"><name pos:start="1279:17" pos:end="1279:22">is_dev</name> <operator pos:start="1279:24" pos:end="1279:24">=</operator> <call pos:start="1279:26" pos:end="1279:52"><name pos:start="1279:26" pos:end="1279:34">is_device</name><argument_list pos:start="1279:35" pos:end="1279:52">(<argument pos:start="1279:36" pos:end="1279:51"><expr pos:start="1279:36" pos:end="1279:51"><name pos:start="1279:36" pos:end="1279:51"><name pos:start="1279:36" pos:end="1279:39">ofmt</name><operator pos:start="1279:40" pos:end="1279:41">-&gt;</operator><name pos:start="1279:42" pos:end="1279:51">priv_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="1280:17" pos:end="1281:29"><if pos:start="1280:17" pos:end="1281:29">if <condition pos:start="1280:20" pos:end="1280:43">(<expr pos:start="1280:21" pos:end="1280:42"><operator pos:start="1280:21" pos:end="1280:21">!</operator><name pos:start="1280:22" pos:end="1280:27">is_dev</name> <operator pos:start="1280:29" pos:end="1280:30">&amp;&amp;</operator> <name pos:start="1280:32" pos:end="1280:42">device_only</name></expr>)</condition><block type="pseudo" pos:start="1281:21" pos:end="1281:29"><block_content pos:start="1281:21" pos:end="1281:29">
                    <continue pos:start="1281:21" pos:end="1281:29">continue;</continue></block_content></block></if></if_stmt>
                <if_stmt pos:start="1282:17" pos:end="1287:17"><if pos:start="1282:17" pos:end="1287:17">if <condition pos:start="1282:20" pos:end="1283:54">(<expr pos:start="1282:21" pos:end="1283:53"><operator pos:start="1282:21" pos:end="1282:21">(</operator><operator pos:start="1282:22" pos:end="1282:22">!</operator><name pos:start="1282:23" pos:end="1282:26">name</name> <operator pos:start="1282:28" pos:end="1282:29">||</operator> <call pos:start="1282:31" pos:end="1282:54"><name pos:start="1282:31" pos:end="1282:36">strcmp</name><argument_list pos:start="1282:37" pos:end="1282:54">(<argument pos:start="1282:38" pos:end="1282:47"><expr pos:start="1282:38" pos:end="1282:47"><name pos:start="1282:38" pos:end="1282:47"><name pos:start="1282:38" pos:end="1282:41">ofmt</name><operator pos:start="1282:42" pos:end="1282:43">-&gt;</operator><name pos:start="1282:44" pos:end="1282:47">name</name></name></expr></argument>, <argument pos:start="1282:50" pos:end="1282:53"><expr pos:start="1282:50" pos:end="1282:53"><name pos:start="1282:50" pos:end="1282:53">name</name></expr></argument>)</argument_list></call> <operator pos:start="1282:56" pos:end="1282:56">&lt;</operator> <literal type="number" pos:start="1282:58" pos:end="1282:58">0</literal><operator pos:start="1282:59" pos:end="1282:59">)</operator> <operator pos:start="1282:61" pos:end="1282:62">&amp;&amp;</operator>
                    <call pos:start="1283:21" pos:end="1283:49"><name pos:start="1283:21" pos:end="1283:26">strcmp</name><argument_list pos:start="1283:27" pos:end="1283:49">(<argument pos:start="1283:28" pos:end="1283:37"><expr pos:start="1283:28" pos:end="1283:37"><name pos:start="1283:28" pos:end="1283:37"><name pos:start="1283:28" pos:end="1283:31">ofmt</name><operator pos:start="1283:32" pos:end="1283:33">-&gt;</operator><name pos:start="1283:34" pos:end="1283:37">name</name></name></expr></argument>, <argument pos:start="1283:40" pos:end="1283:48"><expr pos:start="1283:40" pos:end="1283:48"><name pos:start="1283:40" pos:end="1283:48">last_name</name></expr></argument>)</argument_list></call> <operator pos:start="1283:51" pos:end="1283:51">&gt;</operator> <literal type="number" pos:start="1283:53" pos:end="1283:53">0</literal></expr>)</condition> <block pos:start="1283:56" pos:end="1287:17">{<block_content pos:start="1284:21" pos:end="1286:34">
                    <expr_stmt pos:start="1284:21" pos:end="1284:43"><expr pos:start="1284:21" pos:end="1284:42"><name pos:start="1284:21" pos:end="1284:24">name</name>      <operator pos:start="1284:31" pos:end="1284:31">=</operator> <name pos:start="1284:33" pos:end="1284:42"><name pos:start="1284:33" pos:end="1284:36">ofmt</name><operator pos:start="1284:37" pos:end="1284:38">-&gt;</operator><name pos:start="1284:39" pos:end="1284:42">name</name></name></expr>;</expr_stmt>
                    <expr_stmt pos:start="1285:21" pos:end="1285:48"><expr pos:start="1285:21" pos:end="1285:47"><name pos:start="1285:21" pos:end="1285:29">long_name</name> <operator pos:start="1285:31" pos:end="1285:31">=</operator> <name pos:start="1285:33" pos:end="1285:47"><name pos:start="1285:33" pos:end="1285:36">ofmt</name><operator pos:start="1285:37" pos:end="1285:38">-&gt;</operator><name pos:start="1285:39" pos:end="1285:47">long_name</name></name></expr>;</expr_stmt>
                    <expr_stmt pos:start="1286:21" pos:end="1286:34"><expr pos:start="1286:21" pos:end="1286:33"><name pos:start="1286:21" pos:end="1286:26">encode</name>    <operator pos:start="1286:31" pos:end="1286:31">=</operator> <literal type="number" pos:start="1286:33" pos:end="1286:33">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="1290:9" pos:end="1304:9"><if pos:start="1290:9" pos:end="1304:9">if <condition pos:start="1290:12" pos:end="1290:39">(<expr pos:start="1290:13" pos:end="1290:38"><name pos:start="1290:13" pos:end="1290:23">muxdemuxers</name> <operator pos:start="1290:25" pos:end="1290:26">!=</operator> <name pos:start="1290:28" pos:end="1290:38">SHOW_MUXERS</name></expr>)</condition> <block pos:start="1290:41" pos:end="1304:9">{<block_content pos:start="1291:13" pos:end="1303:13">
            <while pos:start="1291:13" pos:end="1303:13">while <condition pos:start="1291:19" pos:end="1291:50">(<expr pos:start="1291:20" pos:end="1291:49"><operator pos:start="1291:20" pos:end="1291:20">(</operator><name pos:start="1291:21" pos:end="1291:24">ifmt</name> <operator pos:start="1291:26" pos:end="1291:26">=</operator> <call pos:start="1291:28" pos:end="1291:48"><name pos:start="1291:28" pos:end="1291:42">av_iformat_next</name><argument_list pos:start="1291:43" pos:end="1291:48">(<argument pos:start="1291:44" pos:end="1291:47"><expr pos:start="1291:44" pos:end="1291:47"><name pos:start="1291:44" pos:end="1291:47">ifmt</name></expr></argument>)</argument_list></call><operator pos:start="1291:49" pos:end="1291:49">)</operator></expr>)</condition> <block pos:start="1291:52" pos:end="1303:13">{<block_content pos:start="1292:17" pos:end="1302:31">
                <expr_stmt pos:start="1292:17" pos:end="1292:53"><expr pos:start="1292:17" pos:end="1292:52"><name pos:start="1292:17" pos:end="1292:22">is_dev</name> <operator pos:start="1292:24" pos:end="1292:24">=</operator> <call pos:start="1292:26" pos:end="1292:52"><name pos:start="1292:26" pos:end="1292:34">is_device</name><argument_list pos:start="1292:35" pos:end="1292:52">(<argument pos:start="1292:36" pos:end="1292:51"><expr pos:start="1292:36" pos:end="1292:51"><name pos:start="1292:36" pos:end="1292:51"><name pos:start="1292:36" pos:end="1292:39">ifmt</name><operator pos:start="1292:40" pos:end="1292:41">-&gt;</operator><name pos:start="1292:42" pos:end="1292:51">priv_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="1293:17" pos:end="1294:29"><if pos:start="1293:17" pos:end="1294:29">if <condition pos:start="1293:20" pos:end="1293:43">(<expr pos:start="1293:21" pos:end="1293:42"><operator pos:start="1293:21" pos:end="1293:21">!</operator><name pos:start="1293:22" pos:end="1293:27">is_dev</name> <operator pos:start="1293:29" pos:end="1293:30">&amp;&amp;</operator> <name pos:start="1293:32" pos:end="1293:42">device_only</name></expr>)</condition><block type="pseudo" pos:start="1294:21" pos:end="1294:29"><block_content pos:start="1294:21" pos:end="1294:29">
                    <continue pos:start="1294:21" pos:end="1294:29">continue;</continue></block_content></block></if></if_stmt>
                <if_stmt pos:start="1295:17" pos:end="1300:17"><if pos:start="1295:17" pos:end="1300:17">if <condition pos:start="1295:20" pos:end="1296:54">(<expr pos:start="1295:21" pos:end="1296:53"><operator pos:start="1295:21" pos:end="1295:21">(</operator><operator pos:start="1295:22" pos:end="1295:22">!</operator><name pos:start="1295:23" pos:end="1295:26">name</name> <operator pos:start="1295:28" pos:end="1295:29">||</operator> <call pos:start="1295:31" pos:end="1295:54"><name pos:start="1295:31" pos:end="1295:36">strcmp</name><argument_list pos:start="1295:37" pos:end="1295:54">(<argument pos:start="1295:38" pos:end="1295:47"><expr pos:start="1295:38" pos:end="1295:47"><name pos:start="1295:38" pos:end="1295:47"><name pos:start="1295:38" pos:end="1295:41">ifmt</name><operator pos:start="1295:42" pos:end="1295:43">-&gt;</operator><name pos:start="1295:44" pos:end="1295:47">name</name></name></expr></argument>, <argument pos:start="1295:50" pos:end="1295:53"><expr pos:start="1295:50" pos:end="1295:53"><name pos:start="1295:50" pos:end="1295:53">name</name></expr></argument>)</argument_list></call> <operator pos:start="1295:56" pos:end="1295:56">&lt;</operator> <literal type="number" pos:start="1295:58" pos:end="1295:58">0</literal><operator pos:start="1295:59" pos:end="1295:59">)</operator> <operator pos:start="1295:61" pos:end="1295:62">&amp;&amp;</operator>
                    <call pos:start="1296:21" pos:end="1296:49"><name pos:start="1296:21" pos:end="1296:26">strcmp</name><argument_list pos:start="1296:27" pos:end="1296:49">(<argument pos:start="1296:28" pos:end="1296:37"><expr pos:start="1296:28" pos:end="1296:37"><name pos:start="1296:28" pos:end="1296:37"><name pos:start="1296:28" pos:end="1296:31">ifmt</name><operator pos:start="1296:32" pos:end="1296:33">-&gt;</operator><name pos:start="1296:34" pos:end="1296:37">name</name></name></expr></argument>, <argument pos:start="1296:40" pos:end="1296:48"><expr pos:start="1296:40" pos:end="1296:48"><name pos:start="1296:40" pos:end="1296:48">last_name</name></expr></argument>)</argument_list></call> <operator pos:start="1296:51" pos:end="1296:51">&gt;</operator> <literal type="number" pos:start="1296:53" pos:end="1296:53">0</literal></expr>)</condition> <block pos:start="1296:56" pos:end="1300:17">{<block_content pos:start="1297:21" pos:end="1299:34">
                    <expr_stmt pos:start="1297:21" pos:end="1297:43"><expr pos:start="1297:21" pos:end="1297:42"><name pos:start="1297:21" pos:end="1297:24">name</name>      <operator pos:start="1297:31" pos:end="1297:31">=</operator> <name pos:start="1297:33" pos:end="1297:42"><name pos:start="1297:33" pos:end="1297:36">ifmt</name><operator pos:start="1297:37" pos:end="1297:38">-&gt;</operator><name pos:start="1297:39" pos:end="1297:42">name</name></name></expr>;</expr_stmt>
                    <expr_stmt pos:start="1298:21" pos:end="1298:48"><expr pos:start="1298:21" pos:end="1298:47"><name pos:start="1298:21" pos:end="1298:29">long_name</name> <operator pos:start="1298:31" pos:end="1298:31">=</operator> <name pos:start="1298:33" pos:end="1298:47"><name pos:start="1298:33" pos:end="1298:36">ifmt</name><operator pos:start="1298:37" pos:end="1298:38">-&gt;</operator><name pos:start="1298:39" pos:end="1298:47">long_name</name></name></expr>;</expr_stmt>
                    <expr_stmt pos:start="1299:21" pos:end="1299:34"><expr pos:start="1299:21" pos:end="1299:33"><name pos:start="1299:21" pos:end="1299:26">encode</name>    <operator pos:start="1299:31" pos:end="1299:31">=</operator> <literal type="number" pos:start="1299:33" pos:end="1299:33">0</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt pos:start="1301:17" pos:end="1302:31"><if pos:start="1301:17" pos:end="1302:31">if <condition pos:start="1301:20" pos:end="1301:58">(<expr pos:start="1301:21" pos:end="1301:57"><name pos:start="1301:21" pos:end="1301:24">name</name> <operator pos:start="1301:26" pos:end="1301:27">&amp;&amp;</operator> <call pos:start="1301:29" pos:end="1301:52"><name pos:start="1301:29" pos:end="1301:34">strcmp</name><argument_list pos:start="1301:35" pos:end="1301:52">(<argument pos:start="1301:36" pos:end="1301:45"><expr pos:start="1301:36" pos:end="1301:45"><name pos:start="1301:36" pos:end="1301:45"><name pos:start="1301:36" pos:end="1301:39">ifmt</name><operator pos:start="1301:40" pos:end="1301:41">-&gt;</operator><name pos:start="1301:42" pos:end="1301:45">name</name></name></expr></argument>, <argument pos:start="1301:48" pos:end="1301:51"><expr pos:start="1301:48" pos:end="1301:51"><name pos:start="1301:48" pos:end="1301:51">name</name></expr></argument>)</argument_list></call> <operator pos:start="1301:54" pos:end="1301:55">==</operator> <literal type="number" pos:start="1301:57" pos:end="1301:57">0</literal></expr>)</condition><block type="pseudo" pos:start="1302:21" pos:end="1302:31"><block_content pos:start="1302:21" pos:end="1302:31">
                    <expr_stmt pos:start="1302:21" pos:end="1302:31"><expr pos:start="1302:21" pos:end="1302:30"><name pos:start="1302:21" pos:end="1302:26">decode</name> <operator pos:start="1302:28" pos:end="1302:28">=</operator> <literal type="number" pos:start="1302:30" pos:end="1302:30">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="1305:9" pos:end="1306:18"><if pos:start="1305:9" pos:end="1306:18">if <condition pos:start="1305:12" pos:end="1305:18">(<expr pos:start="1305:13" pos:end="1305:17"><operator pos:start="1305:13" pos:end="1305:13">!</operator><name pos:start="1305:14" pos:end="1305:17">name</name></expr>)</condition><block type="pseudo" pos:start="1306:13" pos:end="1306:18"><block_content pos:start="1306:13" pos:end="1306:18">
            <break pos:start="1306:13" pos:end="1306:18">break;</break></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1307:9" pos:end="1307:25"><expr pos:start="1307:9" pos:end="1307:24"><name pos:start="1307:9" pos:end="1307:17">last_name</name> <operator pos:start="1307:19" pos:end="1307:19">=</operator> <name pos:start="1307:21" pos:end="1307:24">name</name></expr>;</expr_stmt>

        <expr_stmt pos:start="1309:9" pos:end="1313:39"><expr pos:start="1309:9" pos:end="1313:38"><call pos:start="1309:9" pos:end="1313:38"><name pos:start="1309:9" pos:end="1309:14">printf</name><argument_list pos:start="1309:15" pos:end="1313:38">(<argument pos:start="1309:16" pos:end="1309:33"><expr pos:start="1309:16" pos:end="1309:33"><literal type="string" pos:start="1309:16" pos:end="1309:33">" %s%s %-15s %s\n"</literal></expr></argument>,
               <argument pos:start="1310:16" pos:end="1310:33"><expr pos:start="1310:16" pos:end="1310:33"><ternary pos:start="1310:16" pos:end="1310:33"><condition pos:start="1310:16" pos:end="1310:23"><expr pos:start="1310:16" pos:end="1310:21"><name pos:start="1310:16" pos:end="1310:21">decode</name></expr> ?</condition><then pos:start="1310:25" pos:end="1310:27"> <expr pos:start="1310:25" pos:end="1310:27"><literal type="string" pos:start="1310:25" pos:end="1310:27">"D"</literal></expr> </then><else pos:start="1310:29" pos:end="1310:33">: <expr pos:start="1310:31" pos:end="1310:33"><literal type="string" pos:start="1310:31" pos:end="1310:33">" "</literal></expr></else></ternary></expr></argument>,
               <argument pos:start="1311:16" pos:end="1311:33"><expr pos:start="1311:16" pos:end="1311:33"><ternary pos:start="1311:16" pos:end="1311:33"><condition pos:start="1311:16" pos:end="1311:23"><expr pos:start="1311:16" pos:end="1311:21"><name pos:start="1311:16" pos:end="1311:21">encode</name></expr> ?</condition><then pos:start="1311:25" pos:end="1311:27"> <expr pos:start="1311:25" pos:end="1311:27"><literal type="string" pos:start="1311:25" pos:end="1311:27">"E"</literal></expr> </then><else pos:start="1311:29" pos:end="1311:33">: <expr pos:start="1311:31" pos:end="1311:33"><literal type="string" pos:start="1311:31" pos:end="1311:33">" "</literal></expr></else></ternary></expr></argument>,
               <argument pos:start="1312:16" pos:end="1312:19"><expr pos:start="1312:16" pos:end="1312:19"><name pos:start="1312:16" pos:end="1312:19">name</name></expr></argument>,
            <argument pos:start="1313:13" pos:end="1313:37"><expr pos:start="1313:13" pos:end="1313:37"><ternary pos:start="1313:13" pos:end="1313:37"><condition pos:start="1313:13" pos:end="1313:23"><expr pos:start="1313:13" pos:end="1313:21"><name pos:start="1313:13" pos:end="1313:21">long_name</name></expr> ?</condition><then pos:start="1313:25" pos:end="1313:33"> <expr pos:start="1313:25" pos:end="1313:33"><name pos:start="1313:25" pos:end="1313:33">long_name</name></expr></then><else pos:start="1313:34" pos:end="1313:37">:<expr pos:start="1313:35" pos:end="1313:37"><literal type="string" pos:start="1313:35" pos:end="1313:37">" "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return pos:start="1315:5" pos:end="1315:13">return <expr pos:start="1315:12" pos:end="1315:12"><literal type="number" pos:start="1315:12" pos:end="1315:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="1318:1" pos:end="1321:1"><type pos:start="1318:1" pos:end="1318:3"><name pos:start="1318:1" pos:end="1318:3">int</name></type> <name pos:start="1318:5" pos:end="1318:16">show_formats</name><parameter_list pos:start="1318:17" pos:end="1318:64">(<parameter pos:start="1318:18" pos:end="1318:29"><decl pos:start="1318:18" pos:end="1318:29"><type pos:start="1318:18" pos:end="1318:29"><name pos:start="1318:18" pos:end="1318:21">void</name> <modifier pos:start="1318:23" pos:end="1318:23">*</modifier></type><name pos:start="1318:24" pos:end="1318:29">optctx</name></decl></parameter>, <parameter pos:start="1318:32" pos:end="1318:46"><decl pos:start="1318:32" pos:end="1318:46"><type pos:start="1318:32" pos:end="1318:46"><specifier pos:start="1318:32" pos:end="1318:36">const</specifier> <name pos:start="1318:38" pos:end="1318:41">char</name> <modifier pos:start="1318:43" pos:end="1318:43">*</modifier></type><name pos:start="1318:44" pos:end="1318:46">opt</name></decl></parameter>, <parameter pos:start="1318:49" pos:end="1318:63"><decl pos:start="1318:49" pos:end="1318:63"><type pos:start="1318:49" pos:end="1318:63"><specifier pos:start="1318:49" pos:end="1318:53">const</specifier> <name pos:start="1318:55" pos:end="1318:58">char</name> <modifier pos:start="1318:60" pos:end="1318:60">*</modifier></type><name pos:start="1318:61" pos:end="1318:63">arg</name></decl></parameter>)</parameter_list>
<block pos:start="1319:1" pos:end="1321:1">{<block_content pos:start="1320:5" pos:end="1320:67">
    <return pos:start="1320:5" pos:end="1320:67">return <expr pos:start="1320:12" pos:end="1320:66"><call pos:start="1320:12" pos:end="1320:66"><name pos:start="1320:12" pos:end="1320:31">show_formats_devices</name><argument_list pos:start="1320:32" pos:end="1320:66">(<argument pos:start="1320:33" pos:end="1320:38"><expr pos:start="1320:33" pos:end="1320:38"><name pos:start="1320:33" pos:end="1320:38">optctx</name></expr></argument>, <argument pos:start="1320:41" pos:end="1320:43"><expr pos:start="1320:41" pos:end="1320:43"><name pos:start="1320:41" pos:end="1320:43">opt</name></expr></argument>, <argument pos:start="1320:46" pos:end="1320:48"><expr pos:start="1320:46" pos:end="1320:48"><name pos:start="1320:46" pos:end="1320:48">arg</name></expr></argument>, <argument pos:start="1320:51" pos:end="1320:51"><expr pos:start="1320:51" pos:end="1320:51"><literal type="number" pos:start="1320:51" pos:end="1320:51">0</literal></expr></argument>, <argument pos:start="1320:54" pos:end="1320:65"><expr pos:start="1320:54" pos:end="1320:65"><name pos:start="1320:54" pos:end="1320:65">SHOW_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function pos:start="1323:1" pos:end="1326:1"><type pos:start="1323:1" pos:end="1323:3"><name pos:start="1323:1" pos:end="1323:3">int</name></type> <name pos:start="1323:5" pos:end="1323:15">show_muxers</name><parameter_list pos:start="1323:16" pos:end="1323:63">(<parameter pos:start="1323:17" pos:end="1323:28"><decl pos:start="1323:17" pos:end="1323:28"><type pos:start="1323:17" pos:end="1323:28"><name pos:start="1323:17" pos:end="1323:20">void</name> <modifier pos:start="1323:22" pos:end="1323:22">*</modifier></type><name pos:start="1323:23" pos:end="1323:28">optctx</name></decl></parameter>, <parameter pos:start="1323:31" pos:end="1323:45"><decl pos:start="1323:31" pos:end="1323:45"><type pos:start="1323:31" pos:end="1323:45"><specifier pos:start="1323:31" pos:end="1323:35">const</specifier> <name pos:start="1323:37" pos:end="1323:40">char</name> <modifier pos:start="1323:42" pos:end="1323:42">*</modifier></type><name pos:start="1323:43" pos:end="1323:45">opt</name></decl></parameter>, <parameter pos:start="1323:48" pos:end="1323:62"><decl pos:start="1323:48" pos:end="1323:62"><type pos:start="1323:48" pos:end="1323:62"><specifier pos:start="1323:48" pos:end="1323:52">const</specifier> <name pos:start="1323:54" pos:end="1323:57">char</name> <modifier pos:start="1323:59" pos:end="1323:59">*</modifier></type><name pos:start="1323:60" pos:end="1323:62">arg</name></decl></parameter>)</parameter_list>
<block pos:start="1324:1" pos:end="1326:1">{<block_content pos:start="1325:5" pos:end="1325:66">
    <return pos:start="1325:5" pos:end="1325:66">return <expr pos:start="1325:12" pos:end="1325:65"><call pos:start="1325:12" pos:end="1325:65"><name pos:start="1325:12" pos:end="1325:31">show_formats_devices</name><argument_list pos:start="1325:32" pos:end="1325:65">(<argument pos:start="1325:33" pos:end="1325:38"><expr pos:start="1325:33" pos:end="1325:38"><name pos:start="1325:33" pos:end="1325:38">optctx</name></expr></argument>, <argument pos:start="1325:41" pos:end="1325:43"><expr pos:start="1325:41" pos:end="1325:43"><name pos:start="1325:41" pos:end="1325:43">opt</name></expr></argument>, <argument pos:start="1325:46" pos:end="1325:48"><expr pos:start="1325:46" pos:end="1325:48"><name pos:start="1325:46" pos:end="1325:48">arg</name></expr></argument>, <argument pos:start="1325:51" pos:end="1325:51"><expr pos:start="1325:51" pos:end="1325:51"><literal type="number" pos:start="1325:51" pos:end="1325:51">0</literal></expr></argument>, <argument pos:start="1325:54" pos:end="1325:64"><expr pos:start="1325:54" pos:end="1325:64"><name pos:start="1325:54" pos:end="1325:64">SHOW_MUXERS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function pos:start="1328:1" pos:end="1331:1"><type pos:start="1328:1" pos:end="1328:3"><name pos:start="1328:1" pos:end="1328:3">int</name></type> <name pos:start="1328:5" pos:end="1328:17">show_demuxers</name><parameter_list pos:start="1328:18" pos:end="1328:65">(<parameter pos:start="1328:19" pos:end="1328:30"><decl pos:start="1328:19" pos:end="1328:30"><type pos:start="1328:19" pos:end="1328:30"><name pos:start="1328:19" pos:end="1328:22">void</name> <modifier pos:start="1328:24" pos:end="1328:24">*</modifier></type><name pos:start="1328:25" pos:end="1328:30">optctx</name></decl></parameter>, <parameter pos:start="1328:33" pos:end="1328:47"><decl pos:start="1328:33" pos:end="1328:47"><type pos:start="1328:33" pos:end="1328:47"><specifier pos:start="1328:33" pos:end="1328:37">const</specifier> <name pos:start="1328:39" pos:end="1328:42">char</name> <modifier pos:start="1328:44" pos:end="1328:44">*</modifier></type><name pos:start="1328:45" pos:end="1328:47">opt</name></decl></parameter>, <parameter pos:start="1328:50" pos:end="1328:64"><decl pos:start="1328:50" pos:end="1328:64"><type pos:start="1328:50" pos:end="1328:64"><specifier pos:start="1328:50" pos:end="1328:54">const</specifier> <name pos:start="1328:56" pos:end="1328:59">char</name> <modifier pos:start="1328:61" pos:end="1328:61">*</modifier></type><name pos:start="1328:62" pos:end="1328:64">arg</name></decl></parameter>)</parameter_list>
<block pos:start="1329:1" pos:end="1331:1">{<block_content pos:start="1330:5" pos:end="1330:68">
    <return pos:start="1330:5" pos:end="1330:68">return <expr pos:start="1330:12" pos:end="1330:67"><call pos:start="1330:12" pos:end="1330:67"><name pos:start="1330:12" pos:end="1330:31">show_formats_devices</name><argument_list pos:start="1330:32" pos:end="1330:67">(<argument pos:start="1330:33" pos:end="1330:38"><expr pos:start="1330:33" pos:end="1330:38"><name pos:start="1330:33" pos:end="1330:38">optctx</name></expr></argument>, <argument pos:start="1330:41" pos:end="1330:43"><expr pos:start="1330:41" pos:end="1330:43"><name pos:start="1330:41" pos:end="1330:43">opt</name></expr></argument>, <argument pos:start="1330:46" pos:end="1330:48"><expr pos:start="1330:46" pos:end="1330:48"><name pos:start="1330:46" pos:end="1330:48">arg</name></expr></argument>, <argument pos:start="1330:51" pos:end="1330:51"><expr pos:start="1330:51" pos:end="1330:51"><literal type="number" pos:start="1330:51" pos:end="1330:51">0</literal></expr></argument>, <argument pos:start="1330:54" pos:end="1330:66"><expr pos:start="1330:54" pos:end="1330:66"><name pos:start="1330:54" pos:end="1330:66">SHOW_DEMUXERS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function pos:start="1333:1" pos:end="1352:0"><type pos:start="1333:1" pos:end="1333:3"><name pos:start="1333:1" pos:end="1333:3">int</name></type> <name pos:start="1333:5" pos:end="1333:16">show_devices</name><parameter_list pos:start="1333:17" pos:end="1333:64">(<parameter pos:start="1333:18" pos:end="1333:29"><decl pos:start="1333:18" pos:end="1333:29"><type pos:start="1333:18" pos:end="1333:29"><name pos:start="1333:18" pos:end="1333:21">void</name> <modifier pos:start="1333:23" pos:end="1333:23">*</modifier></type><name pos:start="1333:24" pos:end="1333:29">optctx</name></decl></parameter>, <parameter pos:start="1333:32" pos:end="1333:46"><decl pos:start="1333:32" pos:end="1333:46"><type pos:start="1333:32" pos:end="1333:46"><specifier pos:start="1333:32" pos:end="1333:36">const</specifier> <name pos:start="1333:38" pos:end="1333:41">char</name> <modifier pos:start="1333:43" pos:end="1333:43">*</modifier></type><name pos:start="1333:44" pos:end="1333:46">opt</name></decl></parameter>, <parameter pos:start="1333:49" pos:end="1333:63"><decl pos:start="1333:49" pos:end="1333:63"><type pos:start="1333:49" pos:end="1333:63"><specifier pos:start="1333:49" pos:end="1333:53">const</specifier> <name pos:start="1333:55" pos:end="1333:58">char</name> <modifier pos:start="1333:60" pos:end="1333:60">*</modifier></type><name pos:start="1333:61" pos:end="1333:63">arg</name></decl></parameter>)</parameter_list>
<block pos:start="1334:1" pos:end="1352:0">{<block_content pos:start="1335:5" pos:end="1335:67">
    <return pos:start="1335:5" pos:end="1335:67">return <expr pos:start="1335:12" pos:end="1335:66"><call pos:start="1335:12" pos:end="1335:66"><name pos:start="1335:12" pos:end="1335:31">show_formats_devices</name><argument_list pos:start="1335:32" pos:end="1335:66">(<argument pos:start="1335:33" pos:end="1335:38"><expr pos:start="1335:33" pos:end="1335:38"><name pos:start="1335:33" pos:end="1335:38">optctx</name></expr></argument>, <argument pos:start="1335:41" pos:end="1335:43"><expr pos:start="1335:41" pos:end="1335:43"><name pos:start="1335:41" pos:end="1335:43">opt</name></expr></argument>, <argument pos:start="1335:46" pos:end="1335:48"><expr pos:start="1335:46" pos:end="1335:48"><name pos:start="1335:46" pos:end="1335:48">arg</name></expr></argument>, <argument pos:start="1335:51" pos:end="1335:51"><expr pos:start="1335:51" pos:end="1335:51"><literal type="number" pos:start="1335:51" pos:end="1335:51">1</literal></expr></argument>, <argument pos:start="1335:54" pos:end="1335:65"><expr pos:start="1335:54" pos:end="1335:65"><name pos:start="1335:54" pos:end="1335:65">SHOW_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define pos:start="1338:1" pos:end="1351:41">#<cpp:directive pos:start="1338:2" pos:end="1338:7">define</cpp:directive> <cpp:macro pos:start="1338:9" pos:end="1338:76"><name pos:start="1338:9" pos:end="1338:29">PRINT_CODEC_SUPPORTED</name><parameter_list pos:start="1338:30" pos:end="1338:76">(<parameter pos:start="1338:31" pos:end="1338:35"><type pos:start="1338:31" pos:end="1338:35"><name pos:start="1338:31" pos:end="1338:35">codec</name></type></parameter>, <parameter pos:start="1338:38" pos:end="1338:42"><type pos:start="1338:38" pos:end="1338:42"><name pos:start="1338:38" pos:end="1338:42">field</name></type></parameter>, <parameter pos:start="1338:45" pos:end="1338:48"><type pos:start="1338:45" pos:end="1338:48"><name pos:start="1338:45" pos:end="1338:48">type</name></type></parameter>, <parameter pos:start="1338:51" pos:end="1338:59"><type pos:start="1338:51" pos:end="1338:59"><name pos:start="1338:51" pos:end="1338:59">list_name</name></type></parameter>, <parameter pos:start="1338:62" pos:end="1338:65"><type pos:start="1338:62" pos:end="1338:65"><name pos:start="1338:62" pos:end="1338:65">term</name></type></parameter>, <parameter pos:start="1338:68" pos:end="1338:75"><type pos:start="1338:68" pos:end="1338:75"><name pos:start="1338:68" pos:end="1338:75">get_name</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value pos:start="1339:5" pos:end="1351:41">if (codec-&gt;field) {                                                      \
        const type *p = codec-&gt;field;                                        \
                                                                             \
        printf("    Supported " list_name ":");                              \
        while (*p != term) {                                                 \
            get_name(*p);                                                    \
            printf(" %s", name);                                             \
            p++;                                                             \
        }                                                                    \
        printf("\n");                                                        \
    }                                                                        \

static void print_codec(const AVCodec *c)</cpp:value></cpp:define>
<block pos:start="1352:1" pos:end="1427:1">{<block_content pos:start="1353:5" pos:end="1426:5">
    <decl_stmt pos:start="1353:5" pos:end="1353:41"><decl pos:start="1353:5" pos:end="1353:40"><type pos:start="1353:5" pos:end="1353:7"><name pos:start="1353:5" pos:end="1353:7">int</name></type> <name pos:start="1353:9" pos:end="1353:15">encoder</name> <init pos:start="1353:17" pos:end="1353:40">= <expr pos:start="1353:19" pos:end="1353:40"><call pos:start="1353:19" pos:end="1353:40"><name pos:start="1353:19" pos:end="1353:37">av_codec_is_encoder</name><argument_list pos:start="1353:38" pos:end="1353:40">(<argument pos:start="1353:39" pos:end="1353:39"><expr pos:start="1353:39" pos:end="1353:39"><name pos:start="1353:39" pos:end="1353:39">c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="1355:5" pos:end="1356:45"><expr pos:start="1355:5" pos:end="1356:44"><call pos:start="1355:5" pos:end="1356:44"><name pos:start="1355:5" pos:end="1355:10">printf</name><argument_list pos:start="1355:11" pos:end="1356:44">(<argument pos:start="1355:12" pos:end="1355:26"><expr pos:start="1355:12" pos:end="1355:26"><literal type="string" pos:start="1355:12" pos:end="1355:26">"%s %s [%s]:\n"</literal></expr></argument>, <argument pos:start="1355:29" pos:end="1355:59"><expr pos:start="1355:29" pos:end="1355:59"><ternary pos:start="1355:29" pos:end="1355:59"><condition pos:start="1355:29" pos:end="1355:37"><expr pos:start="1355:29" pos:end="1355:35"><name pos:start="1355:29" pos:end="1355:35">encoder</name></expr> ?</condition><then pos:start="1355:39" pos:end="1355:47"> <expr pos:start="1355:39" pos:end="1355:47"><literal type="string" pos:start="1355:39" pos:end="1355:47">"Encoder"</literal></expr> </then><else pos:start="1355:49" pos:end="1355:59">: <expr pos:start="1355:51" pos:end="1355:59"><literal type="string" pos:start="1355:51" pos:end="1355:59">"Decoder"</literal></expr></else></ternary></expr></argument>, <argument pos:start="1355:62" pos:end="1355:68"><expr pos:start="1355:62" pos:end="1355:68"><name pos:start="1355:62" pos:end="1355:68"><name pos:start="1355:62" pos:end="1355:62">c</name><operator pos:start="1355:63" pos:end="1355:64">-&gt;</operator><name pos:start="1355:65" pos:end="1355:68">name</name></name></expr></argument>,
           <argument pos:start="1356:12" pos:end="1356:43"><expr pos:start="1356:12" pos:end="1356:43"><ternary pos:start="1356:12" pos:end="1356:43"><condition pos:start="1356:12" pos:end="1356:25"><expr pos:start="1356:12" pos:end="1356:23"><name pos:start="1356:12" pos:end="1356:23"><name pos:start="1356:12" pos:end="1356:12">c</name><operator pos:start="1356:13" pos:end="1356:14">-&gt;</operator><name pos:start="1356:15" pos:end="1356:23">long_name</name></name></expr> ?</condition><then pos:start="1356:27" pos:end="1356:38"> <expr pos:start="1356:27" pos:end="1356:38"><name pos:start="1356:27" pos:end="1356:38"><name pos:start="1356:27" pos:end="1356:27">c</name><operator pos:start="1356:28" pos:end="1356:29">-&gt;</operator><name pos:start="1356:30" pos:end="1356:38">long_name</name></name></expr> </then><else pos:start="1356:40" pos:end="1356:43">: <expr pos:start="1356:42" pos:end="1356:43"><literal type="string" pos:start="1356:42" pos:end="1356:43">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1358:5" pos:end="1358:41"><expr pos:start="1358:5" pos:end="1358:40"><call pos:start="1358:5" pos:end="1358:40"><name pos:start="1358:5" pos:end="1358:10">printf</name><argument_list pos:start="1358:11" pos:end="1358:40">(<argument pos:start="1358:12" pos:end="1358:39"><expr pos:start="1358:12" pos:end="1358:39"><literal type="string" pos:start="1358:12" pos:end="1358:39">"    General capabilities: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1359:5" pos:end="1360:29"><if pos:start="1359:5" pos:end="1360:29">if <condition pos:start="1359:8" pos:end="1359:55">(<expr pos:start="1359:9" pos:end="1359:54"><name pos:start="1359:9" pos:end="1359:23"><name pos:start="1359:9" pos:end="1359:9">c</name><operator pos:start="1359:10" pos:end="1359:11">-&gt;</operator><name pos:start="1359:12" pos:end="1359:23">capabilities</name></name> <operator pos:start="1359:25" pos:end="1359:25">&amp;</operator> <name pos:start="1359:27" pos:end="1359:54">AV_CODEC_CAP_DRAW_HORIZ_BAND</name></expr>)</condition><block type="pseudo" pos:start="1360:9" pos:end="1360:29"><block_content pos:start="1360:9" pos:end="1360:29">
        <expr_stmt pos:start="1360:9" pos:end="1360:29"><expr pos:start="1360:9" pos:end="1360:28"><call pos:start="1360:9" pos:end="1360:28"><name pos:start="1360:9" pos:end="1360:14">printf</name><argument_list pos:start="1360:15" pos:end="1360:28">(<argument pos:start="1360:16" pos:end="1360:27"><expr pos:start="1360:16" pos:end="1360:27"><literal type="string" pos:start="1360:16" pos:end="1360:27">"horizband "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="1361:5" pos:end="1362:23"><if pos:start="1361:5" pos:end="1362:23">if <condition pos:start="1361:8" pos:end="1361:43">(<expr pos:start="1361:9" pos:end="1361:42"><name pos:start="1361:9" pos:end="1361:23"><name pos:start="1361:9" pos:end="1361:9">c</name><operator pos:start="1361:10" pos:end="1361:11">-&gt;</operator><name pos:start="1361:12" pos:end="1361:23">capabilities</name></name> <operator pos:start="1361:25" pos:end="1361:25">&amp;</operator> <name pos:start="1361:27" pos:end="1361:42">AV_CODEC_CAP_DR1</name></expr>)</condition><block type="pseudo" pos:start="1362:9" pos:end="1362:23"><block_content pos:start="1362:9" pos:end="1362:23">
        <expr_stmt pos:start="1362:9" pos:end="1362:23"><expr pos:start="1362:9" pos:end="1362:22"><call pos:start="1362:9" pos:end="1362:22"><name pos:start="1362:9" pos:end="1362:14">printf</name><argument_list pos:start="1362:15" pos:end="1362:22">(<argument pos:start="1362:16" pos:end="1362:21"><expr pos:start="1362:16" pos:end="1362:21"><literal type="string" pos:start="1362:16" pos:end="1362:21">"dr1 "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="1363:5" pos:end="1364:25"><if pos:start="1363:5" pos:end="1364:25">if <condition pos:start="1363:8" pos:end="1363:49">(<expr pos:start="1363:9" pos:end="1363:48"><name pos:start="1363:9" pos:end="1363:23"><name pos:start="1363:9" pos:end="1363:9">c</name><operator pos:start="1363:10" pos:end="1363:11">-&gt;</operator><name pos:start="1363:12" pos:end="1363:23">capabilities</name></name> <operator pos:start="1363:25" pos:end="1363:25">&amp;</operator> <name pos:start="1363:27" pos:end="1363:48">AV_CODEC_CAP_TRUNCATED</name></expr>)</condition><block type="pseudo" pos:start="1364:9" pos:end="1364:25"><block_content pos:start="1364:9" pos:end="1364:25">
        <expr_stmt pos:start="1364:9" pos:end="1364:25"><expr pos:start="1364:9" pos:end="1364:24"><call pos:start="1364:9" pos:end="1364:24"><name pos:start="1364:9" pos:end="1364:14">printf</name><argument_list pos:start="1364:15" pos:end="1364:24">(<argument pos:start="1364:16" pos:end="1364:23"><expr pos:start="1364:16" pos:end="1364:23"><literal type="string" pos:start="1364:16" pos:end="1364:23">"trunc "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="1365:5" pos:end="1366:25"><if pos:start="1365:5" pos:end="1366:25">if <condition pos:start="1365:8" pos:end="1365:45">(<expr pos:start="1365:9" pos:end="1365:44"><name pos:start="1365:9" pos:end="1365:23"><name pos:start="1365:9" pos:end="1365:9">c</name><operator pos:start="1365:10" pos:end="1365:11">-&gt;</operator><name pos:start="1365:12" pos:end="1365:23">capabilities</name></name> <operator pos:start="1365:25" pos:end="1365:25">&amp;</operator> <name pos:start="1365:27" pos:end="1365:44">AV_CODEC_CAP_DELAY</name></expr>)</condition><block type="pseudo" pos:start="1366:9" pos:end="1366:25"><block_content pos:start="1366:9" pos:end="1366:25">
        <expr_stmt pos:start="1366:9" pos:end="1366:25"><expr pos:start="1366:9" pos:end="1366:24"><call pos:start="1366:9" pos:end="1366:24"><name pos:start="1366:9" pos:end="1366:14">printf</name><argument_list pos:start="1366:15" pos:end="1366:24">(<argument pos:start="1366:16" pos:end="1366:23"><expr pos:start="1366:16" pos:end="1366:23"><literal type="string" pos:start="1366:16" pos:end="1366:23">"delay "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="1367:5" pos:end="1368:25"><if pos:start="1367:5" pos:end="1368:25">if <condition pos:start="1367:8" pos:end="1367:56">(<expr pos:start="1367:9" pos:end="1367:55"><name pos:start="1367:9" pos:end="1367:23"><name pos:start="1367:9" pos:end="1367:9">c</name><operator pos:start="1367:10" pos:end="1367:11">-&gt;</operator><name pos:start="1367:12" pos:end="1367:23">capabilities</name></name> <operator pos:start="1367:25" pos:end="1367:25">&amp;</operator> <name pos:start="1367:27" pos:end="1367:55">AV_CODEC_CAP_SMALL_LAST_FRAME</name></expr>)</condition><block type="pseudo" pos:start="1368:9" pos:end="1368:25"><block_content pos:start="1368:9" pos:end="1368:25">
        <expr_stmt pos:start="1368:9" pos:end="1368:25"><expr pos:start="1368:9" pos:end="1368:24"><call pos:start="1368:9" pos:end="1368:24"><name pos:start="1368:9" pos:end="1368:14">printf</name><argument_list pos:start="1368:15" pos:end="1368:24">(<argument pos:start="1368:16" pos:end="1368:23"><expr pos:start="1368:16" pos:end="1368:23"><literal type="string" pos:start="1368:16" pos:end="1368:23">"small "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="1369:5" pos:end="1370:29"><if pos:start="1369:5" pos:end="1370:29">if <condition pos:start="1369:8" pos:end="1369:49">(<expr pos:start="1369:9" pos:end="1369:48"><name pos:start="1369:9" pos:end="1369:23"><name pos:start="1369:9" pos:end="1369:9">c</name><operator pos:start="1369:10" pos:end="1369:11">-&gt;</operator><name pos:start="1369:12" pos:end="1369:23">capabilities</name></name> <operator pos:start="1369:25" pos:end="1369:25">&amp;</operator> <name pos:start="1369:27" pos:end="1369:48">AV_CODEC_CAP_SUBFRAMES</name></expr>)</condition><block type="pseudo" pos:start="1370:9" pos:end="1370:29"><block_content pos:start="1370:9" pos:end="1370:29">
        <expr_stmt pos:start="1370:9" pos:end="1370:29"><expr pos:start="1370:9" pos:end="1370:28"><call pos:start="1370:9" pos:end="1370:28"><name pos:start="1370:9" pos:end="1370:14">printf</name><argument_list pos:start="1370:15" pos:end="1370:28">(<argument pos:start="1370:16" pos:end="1370:27"><expr pos:start="1370:16" pos:end="1370:27"><literal type="string" pos:start="1370:16" pos:end="1370:27">"subframes "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="1371:5" pos:end="1372:23"><if pos:start="1371:5" pos:end="1372:23">if <condition pos:start="1371:8" pos:end="1371:52">(<expr pos:start="1371:9" pos:end="1371:51"><name pos:start="1371:9" pos:end="1371:23"><name pos:start="1371:9" pos:end="1371:9">c</name><operator pos:start="1371:10" pos:end="1371:11">-&gt;</operator><name pos:start="1371:12" pos:end="1371:23">capabilities</name></name> <operator pos:start="1371:25" pos:end="1371:25">&amp;</operator> <name pos:start="1371:27" pos:end="1371:51">AV_CODEC_CAP_EXPERIMENTAL</name></expr>)</condition><block type="pseudo" pos:start="1372:9" pos:end="1372:23"><block_content pos:start="1372:9" pos:end="1372:23">
        <expr_stmt pos:start="1372:9" pos:end="1372:23"><expr pos:start="1372:9" pos:end="1372:22"><call pos:start="1372:9" pos:end="1372:22"><name pos:start="1372:9" pos:end="1372:14">printf</name><argument_list pos:start="1372:15" pos:end="1372:22">(<argument pos:start="1372:16" pos:end="1372:21"><expr pos:start="1372:16" pos:end="1372:21"><literal type="string" pos:start="1372:16" pos:end="1372:21">"exp "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="1373:5" pos:end="1374:26"><if pos:start="1373:5" pos:end="1374:26">if <condition pos:start="1373:8" pos:end="1373:52">(<expr pos:start="1373:9" pos:end="1373:51"><name pos:start="1373:9" pos:end="1373:23"><name pos:start="1373:9" pos:end="1373:9">c</name><operator pos:start="1373:10" pos:end="1373:11">-&gt;</operator><name pos:start="1373:12" pos:end="1373:23">capabilities</name></name> <operator pos:start="1373:25" pos:end="1373:25">&amp;</operator> <name pos:start="1373:27" pos:end="1373:51">AV_CODEC_CAP_CHANNEL_CONF</name></expr>)</condition><block type="pseudo" pos:start="1374:9" pos:end="1374:26"><block_content pos:start="1374:9" pos:end="1374:26">
        <expr_stmt pos:start="1374:9" pos:end="1374:26"><expr pos:start="1374:9" pos:end="1374:25"><call pos:start="1374:9" pos:end="1374:25"><name pos:start="1374:9" pos:end="1374:14">printf</name><argument_list pos:start="1374:15" pos:end="1374:25">(<argument pos:start="1374:16" pos:end="1374:24"><expr pos:start="1374:16" pos:end="1374:24"><literal type="string" pos:start="1374:16" pos:end="1374:24">"chconf "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="1375:5" pos:end="1376:31"><if pos:start="1375:5" pos:end="1376:31">if <condition pos:start="1375:8" pos:end="1375:52">(<expr pos:start="1375:9" pos:end="1375:51"><name pos:start="1375:9" pos:end="1375:23"><name pos:start="1375:9" pos:end="1375:9">c</name><operator pos:start="1375:10" pos:end="1375:11">-&gt;</operator><name pos:start="1375:12" pos:end="1375:23">capabilities</name></name> <operator pos:start="1375:25" pos:end="1375:25">&amp;</operator> <name pos:start="1375:27" pos:end="1375:51">AV_CODEC_CAP_PARAM_CHANGE</name></expr>)</condition><block type="pseudo" pos:start="1376:9" pos:end="1376:31"><block_content pos:start="1376:9" pos:end="1376:31">
        <expr_stmt pos:start="1376:9" pos:end="1376:31"><expr pos:start="1376:9" pos:end="1376:30"><call pos:start="1376:9" pos:end="1376:30"><name pos:start="1376:9" pos:end="1376:14">printf</name><argument_list pos:start="1376:15" pos:end="1376:30">(<argument pos:start="1376:16" pos:end="1376:29"><expr pos:start="1376:16" pos:end="1376:29"><literal type="string" pos:start="1376:16" pos:end="1376:29">"paramchange "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="1377:5" pos:end="1378:28"><if pos:start="1377:5" pos:end="1378:28">if <condition pos:start="1377:8" pos:end="1377:59">(<expr pos:start="1377:9" pos:end="1377:58"><name pos:start="1377:9" pos:end="1377:23"><name pos:start="1377:9" pos:end="1377:9">c</name><operator pos:start="1377:10" pos:end="1377:11">-&gt;</operator><name pos:start="1377:12" pos:end="1377:23">capabilities</name></name> <operator pos:start="1377:25" pos:end="1377:25">&amp;</operator> <name pos:start="1377:27" pos:end="1377:58">AV_CODEC_CAP_VARIABLE_FRAME_SIZE</name></expr>)</condition><block type="pseudo" pos:start="1378:9" pos:end="1378:28"><block_content pos:start="1378:9" pos:end="1378:28">
        <expr_stmt pos:start="1378:9" pos:end="1378:28"><expr pos:start="1378:9" pos:end="1378:27"><call pos:start="1378:9" pos:end="1378:27"><name pos:start="1378:9" pos:end="1378:14">printf</name><argument_list pos:start="1378:15" pos:end="1378:27">(<argument pos:start="1378:16" pos:end="1378:26"><expr pos:start="1378:16" pos:end="1378:26"><literal type="string" pos:start="1378:16" pos:end="1378:26">"variable "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="1379:5" pos:end="1382:27"><if pos:start="1379:5" pos:end="1382:27">if <condition pos:start="1379:8" pos:end="1381:54">(<expr pos:start="1379:9" pos:end="1381:53"><name pos:start="1379:9" pos:end="1379:23"><name pos:start="1379:9" pos:end="1379:9">c</name><operator pos:start="1379:10" pos:end="1379:11">-&gt;</operator><name pos:start="1379:12" pos:end="1379:23">capabilities</name></name> <operator pos:start="1379:25" pos:end="1379:25">&amp;</operator> <operator pos:start="1379:27" pos:end="1379:27">(</operator><name pos:start="1379:28" pos:end="1379:53">AV_CODEC_CAP_FRAME_THREADS</name> <operator pos:start="1379:55" pos:end="1379:55">|</operator>
                           <name pos:start="1380:28" pos:end="1380:53">AV_CODEC_CAP_SLICE_THREADS</name> <operator pos:start="1380:55" pos:end="1380:55">|</operator>
                           <name pos:start="1381:28" pos:end="1381:52">AV_CODEC_CAP_AUTO_THREADS</name><operator pos:start="1381:53" pos:end="1381:53">)</operator></expr>)</condition><block type="pseudo" pos:start="1382:9" pos:end="1382:27"><block_content pos:start="1382:9" pos:end="1382:27">
        <expr_stmt pos:start="1382:9" pos:end="1382:27"><expr pos:start="1382:9" pos:end="1382:26"><call pos:start="1382:9" pos:end="1382:26"><name pos:start="1382:9" pos:end="1382:14">printf</name><argument_list pos:start="1382:15" pos:end="1382:26">(<argument pos:start="1382:16" pos:end="1382:25"><expr pos:start="1382:16" pos:end="1382:25"><literal type="string" pos:start="1382:16" pos:end="1382:25">"threads "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="1383:5" pos:end="1384:23"><if pos:start="1383:5" pos:end="1384:23">if <condition pos:start="1383:8" pos:end="1383:25">(<expr pos:start="1383:9" pos:end="1383:24"><operator pos:start="1383:9" pos:end="1383:9">!</operator><name pos:start="1383:10" pos:end="1383:24"><name pos:start="1383:10" pos:end="1383:10">c</name><operator pos:start="1383:11" pos:end="1383:12">-&gt;</operator><name pos:start="1383:13" pos:end="1383:24">capabilities</name></name></expr>)</condition><block type="pseudo" pos:start="1384:9" pos:end="1384:23"><block_content pos:start="1384:9" pos:end="1384:23">
        <expr_stmt pos:start="1384:9" pos:end="1384:23"><expr pos:start="1384:9" pos:end="1384:22"><call pos:start="1384:9" pos:end="1384:22"><name pos:start="1384:9" pos:end="1384:14">printf</name><argument_list pos:start="1384:15" pos:end="1384:22">(<argument pos:start="1384:16" pos:end="1384:21"><expr pos:start="1384:16" pos:end="1384:21"><literal type="string" pos:start="1384:16" pos:end="1384:21">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="1385:5" pos:end="1385:17"><expr pos:start="1385:5" pos:end="1385:16"><call pos:start="1385:5" pos:end="1385:16"><name pos:start="1385:5" pos:end="1385:10">printf</name><argument_list pos:start="1385:11" pos:end="1385:16">(<argument pos:start="1385:12" pos:end="1385:15"><expr pos:start="1385:12" pos:end="1385:15"><literal type="string" pos:start="1385:12" pos:end="1385:15">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1387:5" pos:end="1401:5"><if pos:start="1387:5" pos:end="1401:5">if <condition pos:start="1387:8" pos:end="1388:38">(<expr pos:start="1387:9" pos:end="1388:37"><name pos:start="1387:9" pos:end="1387:15"><name pos:start="1387:9" pos:end="1387:9">c</name><operator pos:start="1387:10" pos:end="1387:11">-&gt;</operator><name pos:start="1387:12" pos:end="1387:15">type</name></name> <operator pos:start="1387:17" pos:end="1387:18">==</operator> <name pos:start="1387:20" pos:end="1387:37">AVMEDIA_TYPE_VIDEO</name> <operator pos:start="1387:39" pos:end="1387:40">||</operator>
        <name pos:start="1388:9" pos:end="1388:15"><name pos:start="1388:9" pos:end="1388:9">c</name><operator pos:start="1388:10" pos:end="1388:11">-&gt;</operator><name pos:start="1388:12" pos:end="1388:15">type</name></name> <operator pos:start="1388:17" pos:end="1388:18">==</operator> <name pos:start="1388:20" pos:end="1388:37">AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block pos:start="1388:40" pos:end="1401:5">{<block_content pos:start="1389:9" pos:end="1400:21">
        <expr_stmt pos:start="1389:9" pos:end="1389:47"><expr pos:start="1389:9" pos:end="1389:46"><call pos:start="1389:9" pos:end="1389:46"><name pos:start="1389:9" pos:end="1389:14">printf</name><argument_list pos:start="1389:15" pos:end="1389:46">(<argument pos:start="1389:16" pos:end="1389:45"><expr pos:start="1389:16" pos:end="1389:45"><literal type="string" pos:start="1389:16" pos:end="1389:45">"    Threading capabilities: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch pos:start="1390:9" pos:end="1399:9">switch <condition pos:start="1390:16" pos:end="1392:62">(<expr pos:start="1390:17" pos:end="1392:61"><name pos:start="1390:17" pos:end="1390:31"><name pos:start="1390:17" pos:end="1390:17">c</name><operator pos:start="1390:18" pos:end="1390:19">-&gt;</operator><name pos:start="1390:20" pos:end="1390:31">capabilities</name></name> <operator pos:start="1390:33" pos:end="1390:33">&amp;</operator> <operator pos:start="1390:35" pos:end="1390:35">(</operator><name pos:start="1390:36" pos:end="1390:61">AV_CODEC_CAP_FRAME_THREADS</name> <operator pos:start="1390:63" pos:end="1390:63">|</operator>
                                   <name pos:start="1391:36" pos:end="1391:61">AV_CODEC_CAP_SLICE_THREADS</name> <operator pos:start="1391:63" pos:end="1391:63">|</operator>
                                   <name pos:start="1392:36" pos:end="1392:60">AV_CODEC_CAP_AUTO_THREADS</name><operator pos:start="1392:61" pos:end="1392:61">)</operator></expr>)</condition> <block pos:start="1392:64" pos:end="1399:9">{<block_content pos:start="1393:9" pos:end="1398:74">
        <case pos:start="1393:9" pos:end="1394:40">case <expr pos:start="1393:14" pos:end="1394:39"><name pos:start="1393:14" pos:end="1393:39">AV_CODEC_CAP_FRAME_THREADS</name> <operator pos:start="1393:41" pos:end="1393:41">|</operator>
             <name pos:start="1394:14" pos:end="1394:39">AV_CODEC_CAP_SLICE_THREADS</name></expr>:</case> <expr_stmt pos:start="1394:42" pos:end="1394:67"><expr pos:start="1394:42" pos:end="1394:66"><call pos:start="1394:42" pos:end="1394:66"><name pos:start="1394:42" pos:end="1394:47">printf</name><argument_list pos:start="1394:48" pos:end="1394:66">(<argument pos:start="1394:49" pos:end="1394:65"><expr pos:start="1394:49" pos:end="1394:65"><literal type="string" pos:start="1394:49" pos:end="1394:65">"frame and slice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="1394:69" pos:end="1394:74">break;</break>
        <case pos:start="1395:9" pos:end="1395:40">case <expr pos:start="1395:14" pos:end="1395:39"><name pos:start="1395:14" pos:end="1395:39">AV_CODEC_CAP_FRAME_THREADS</name></expr>:</case> <expr_stmt pos:start="1395:42" pos:end="1395:57"><expr pos:start="1395:42" pos:end="1395:56"><call pos:start="1395:42" pos:end="1395:56"><name pos:start="1395:42" pos:end="1395:47">printf</name><argument_list pos:start="1395:48" pos:end="1395:56">(<argument pos:start="1395:49" pos:end="1395:55"><expr pos:start="1395:49" pos:end="1395:55"><literal type="string" pos:start="1395:49" pos:end="1395:55">"frame"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>           <break pos:start="1395:69" pos:end="1395:74">break;</break>
        <case pos:start="1396:9" pos:end="1396:40">case <expr pos:start="1396:14" pos:end="1396:39"><name pos:start="1396:14" pos:end="1396:39">AV_CODEC_CAP_SLICE_THREADS</name></expr>:</case> <expr_stmt pos:start="1396:42" pos:end="1396:57"><expr pos:start="1396:42" pos:end="1396:56"><call pos:start="1396:42" pos:end="1396:56"><name pos:start="1396:42" pos:end="1396:47">printf</name><argument_list pos:start="1396:48" pos:end="1396:56">(<argument pos:start="1396:49" pos:end="1396:55"><expr pos:start="1396:49" pos:end="1396:55"><literal type="string" pos:start="1396:49" pos:end="1396:55">"slice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>           <break pos:start="1396:69" pos:end="1396:74">break;</break>
        <case pos:start="1397:9" pos:end="1397:40">case <expr pos:start="1397:14" pos:end="1397:38"><name pos:start="1397:14" pos:end="1397:38">AV_CODEC_CAP_AUTO_THREADS</name></expr> :</case> <expr_stmt pos:start="1397:42" pos:end="1397:56"><expr pos:start="1397:42" pos:end="1397:55"><call pos:start="1397:42" pos:end="1397:55"><name pos:start="1397:42" pos:end="1397:47">printf</name><argument_list pos:start="1397:48" pos:end="1397:55">(<argument pos:start="1397:49" pos:end="1397:54"><expr pos:start="1397:49" pos:end="1397:54"><literal type="string" pos:start="1397:49" pos:end="1397:54">"auto"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>            <break pos:start="1397:69" pos:end="1397:74">break;</break>
        <default pos:start="1398:9" pos:end="1398:16">default:</default>                         <expr_stmt pos:start="1398:42" pos:end="1398:56"><expr pos:start="1398:42" pos:end="1398:55"><call pos:start="1398:42" pos:end="1398:55"><name pos:start="1398:42" pos:end="1398:47">printf</name><argument_list pos:start="1398:48" pos:end="1398:55">(<argument pos:start="1398:49" pos:end="1398:54"><expr pos:start="1398:49" pos:end="1398:54"><literal type="string" pos:start="1398:49" pos:end="1398:54">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>            <break pos:start="1398:69" pos:end="1398:74">break;</break>
        </block_content>}</block></switch>
        <expr_stmt pos:start="1400:9" pos:end="1400:21"><expr pos:start="1400:9" pos:end="1400:20"><call pos:start="1400:9" pos:end="1400:20"><name pos:start="1400:9" pos:end="1400:14">printf</name><argument_list pos:start="1400:15" pos:end="1400:20">(<argument pos:start="1400:16" pos:end="1400:19"><expr pos:start="1400:16" pos:end="1400:19"><literal type="string" pos:start="1400:16" pos:end="1400:19">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="1403:5" pos:end="1412:5"><if pos:start="1403:5" pos:end="1412:5">if <condition pos:start="1403:8" pos:end="1403:32">(<expr pos:start="1403:9" pos:end="1403:31"><name pos:start="1403:9" pos:end="1403:31"><name pos:start="1403:9" pos:end="1403:9">c</name><operator pos:start="1403:10" pos:end="1403:11">-&gt;</operator><name pos:start="1403:12" pos:end="1403:31">supported_framerates</name></name></expr>)</condition> <block pos:start="1403:34" pos:end="1412:5">{<block_content pos:start="1404:9" pos:end="1411:21">
        <decl_stmt pos:start="1404:9" pos:end="1404:56"><decl pos:start="1404:9" pos:end="1404:55"><type pos:start="1404:9" pos:end="1404:26"><specifier pos:start="1404:9" pos:end="1404:13">const</specifier> <name pos:start="1404:15" pos:end="1404:24">AVRational</name> <modifier pos:start="1404:26" pos:end="1404:26">*</modifier></type><name pos:start="1404:27" pos:end="1404:29">fps</name> <init pos:start="1404:31" pos:end="1404:55">= <expr pos:start="1404:33" pos:end="1404:55"><name pos:start="1404:33" pos:end="1404:55"><name pos:start="1404:33" pos:end="1404:33">c</name><operator pos:start="1404:34" pos:end="1404:35">-&gt;</operator><name pos:start="1404:36" pos:end="1404:55">supported_framerates</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="1406:9" pos:end="1406:44"><expr pos:start="1406:9" pos:end="1406:43"><call pos:start="1406:9" pos:end="1406:43"><name pos:start="1406:9" pos:end="1406:14">printf</name><argument_list pos:start="1406:15" pos:end="1406:43">(<argument pos:start="1406:16" pos:end="1406:42"><expr pos:start="1406:16" pos:end="1406:42"><literal type="string" pos:start="1406:16" pos:end="1406:42">"    Supported framerates:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while pos:start="1407:9" pos:end="1410:9">while <condition pos:start="1407:15" pos:end="1407:24">(<expr pos:start="1407:16" pos:end="1407:23"><name pos:start="1407:16" pos:end="1407:23"><name pos:start="1407:16" pos:end="1407:18">fps</name><operator pos:start="1407:19" pos:end="1407:20">-&gt;</operator><name pos:start="1407:21" pos:end="1407:23">num</name></name></expr>)</condition> <block pos:start="1407:26" pos:end="1410:9">{<block_content pos:start="1408:13" pos:end="1409:18">
            <expr_stmt pos:start="1408:13" pos:end="1408:49"><expr pos:start="1408:13" pos:end="1408:48"><call pos:start="1408:13" pos:end="1408:48"><name pos:start="1408:13" pos:end="1408:18">printf</name><argument_list pos:start="1408:19" pos:end="1408:48">(<argument pos:start="1408:20" pos:end="1408:27"><expr pos:start="1408:20" pos:end="1408:27"><literal type="string" pos:start="1408:20" pos:end="1408:27">" %d/%d"</literal></expr></argument>, <argument pos:start="1408:30" pos:end="1408:37"><expr pos:start="1408:30" pos:end="1408:37"><name pos:start="1408:30" pos:end="1408:37"><name pos:start="1408:30" pos:end="1408:32">fps</name><operator pos:start="1408:33" pos:end="1408:34">-&gt;</operator><name pos:start="1408:35" pos:end="1408:37">num</name></name></expr></argument>, <argument pos:start="1408:40" pos:end="1408:47"><expr pos:start="1408:40" pos:end="1408:47"><name pos:start="1408:40" pos:end="1408:47"><name pos:start="1408:40" pos:end="1408:42">fps</name><operator pos:start="1408:43" pos:end="1408:44">-&gt;</operator><name pos:start="1408:45" pos:end="1408:47">den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1409:13" pos:end="1409:18"><expr pos:start="1409:13" pos:end="1409:17"><name pos:start="1409:13" pos:end="1409:15">fps</name><operator pos:start="1409:16" pos:end="1409:17">++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt pos:start="1411:9" pos:end="1411:21"><expr pos:start="1411:9" pos:end="1411:20"><call pos:start="1411:9" pos:end="1411:20"><name pos:start="1411:9" pos:end="1411:14">printf</name><argument_list pos:start="1411:15" pos:end="1411:20">(<argument pos:start="1411:16" pos:end="1411:19"><expr pos:start="1411:16" pos:end="1411:19"><literal type="string" pos:start="1411:16" pos:end="1411:19">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1413:5" pos:end="1414:61"><expr pos:start="1413:5" pos:end="1414:60"><call pos:start="1413:5" pos:end="1414:60"><name pos:start="1413:5" pos:end="1413:25">PRINT_CODEC_SUPPORTED</name><argument_list pos:start="1413:26" pos:end="1414:60">(<argument pos:start="1413:27" pos:end="1413:27"><expr pos:start="1413:27" pos:end="1413:27"><name pos:start="1413:27" pos:end="1413:27">c</name></expr></argument>, <argument pos:start="1413:30" pos:end="1413:37"><expr pos:start="1413:30" pos:end="1413:37"><name pos:start="1413:30" pos:end="1413:37">pix_fmts</name></expr></argument>, <argument pos:start="1413:40" pos:end="1413:57"><expr pos:start="1413:40" pos:end="1413:57">enum <name pos:start="1413:45" pos:end="1413:57">AVPixelFormat</name></expr></argument>, <argument pos:start="1413:60" pos:end="1413:74"><expr pos:start="1413:60" pos:end="1413:74"><literal type="string" pos:start="1413:60" pos:end="1413:74">"pixel formats"</literal></expr></argument>,
                          <argument pos:start="1414:27" pos:end="1414:41"><expr pos:start="1414:27" pos:end="1414:41"><name pos:start="1414:27" pos:end="1414:41">AV_PIX_FMT_NONE</name></expr></argument>, <argument pos:start="1414:44" pos:end="1414:59"><expr pos:start="1414:44" pos:end="1414:59"><name pos:start="1414:44" pos:end="1414:59">GET_PIX_FMT_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1415:5" pos:end="1416:48"><expr pos:start="1415:5" pos:end="1416:47"><call pos:start="1415:5" pos:end="1416:47"><name pos:start="1415:5" pos:end="1415:25">PRINT_CODEC_SUPPORTED</name><argument_list pos:start="1415:26" pos:end="1416:47">(<argument pos:start="1415:27" pos:end="1415:27"><expr pos:start="1415:27" pos:end="1415:27"><name pos:start="1415:27" pos:end="1415:27">c</name></expr></argument>, <argument pos:start="1415:30" pos:end="1415:50"><expr pos:start="1415:30" pos:end="1415:50"><name pos:start="1415:30" pos:end="1415:50">supported_samplerates</name></expr></argument>, <argument pos:start="1415:53" pos:end="1415:55"><expr pos:start="1415:53" pos:end="1415:55"><name pos:start="1415:53" pos:end="1415:55">int</name></expr></argument>, <argument pos:start="1415:58" pos:end="1415:71"><expr pos:start="1415:58" pos:end="1415:71"><literal type="string" pos:start="1415:58" pos:end="1415:71">"sample rates"</literal></expr></argument>, <argument pos:start="1415:74" pos:end="1415:74"><expr pos:start="1415:74" pos:end="1415:74"><literal type="number" pos:start="1415:74" pos:end="1415:74">0</literal></expr></argument>,
                          <argument pos:start="1416:27" pos:end="1416:46"><expr pos:start="1416:27" pos:end="1416:46"><name pos:start="1416:27" pos:end="1416:46">GET_SAMPLE_RATE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1417:5" pos:end="1418:67"><expr pos:start="1417:5" pos:end="1418:66"><call pos:start="1417:5" pos:end="1418:66"><name pos:start="1417:5" pos:end="1417:25">PRINT_CODEC_SUPPORTED</name><argument_list pos:start="1417:26" pos:end="1418:66">(<argument pos:start="1417:27" pos:end="1417:27"><expr pos:start="1417:27" pos:end="1417:27"><name pos:start="1417:27" pos:end="1417:27">c</name></expr></argument>, <argument pos:start="1417:30" pos:end="1417:40"><expr pos:start="1417:30" pos:end="1417:40"><name pos:start="1417:30" pos:end="1417:40">sample_fmts</name></expr></argument>, <argument pos:start="1417:43" pos:end="1417:61"><expr pos:start="1417:43" pos:end="1417:61">enum <name pos:start="1417:48" pos:end="1417:61">AVSampleFormat</name></expr></argument>, <argument pos:start="1417:64" pos:end="1417:79"><expr pos:start="1417:64" pos:end="1417:79"><literal type="string" pos:start="1417:64" pos:end="1417:79">"sample formats"</literal></expr></argument>,
                          <argument pos:start="1418:27" pos:end="1418:44"><expr pos:start="1418:27" pos:end="1418:44"><name pos:start="1418:27" pos:end="1418:44">AV_SAMPLE_FMT_NONE</name></expr></argument>, <argument pos:start="1418:47" pos:end="1418:65"><expr pos:start="1418:47" pos:end="1418:65"><name pos:start="1418:47" pos:end="1418:65">GET_SAMPLE_FMT_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1419:5" pos:end="1420:49"><expr pos:start="1419:5" pos:end="1420:48"><call pos:start="1419:5" pos:end="1420:48"><name pos:start="1419:5" pos:end="1419:25">PRINT_CODEC_SUPPORTED</name><argument_list pos:start="1419:26" pos:end="1420:48">(<argument pos:start="1419:27" pos:end="1419:27"><expr pos:start="1419:27" pos:end="1419:27"><name pos:start="1419:27" pos:end="1419:27">c</name></expr></argument>, <argument pos:start="1419:30" pos:end="1419:44"><expr pos:start="1419:30" pos:end="1419:44"><name pos:start="1419:30" pos:end="1419:44">channel_layouts</name></expr></argument>, <argument pos:start="1419:47" pos:end="1419:54"><expr pos:start="1419:47" pos:end="1419:54"><name pos:start="1419:47" pos:end="1419:54">uint64_t</name></expr></argument>, <argument pos:start="1419:57" pos:end="1419:73"><expr pos:start="1419:57" pos:end="1419:73"><literal type="string" pos:start="1419:57" pos:end="1419:73">"channel layouts"</literal></expr></argument>,
                          <argument pos:start="1420:27" pos:end="1420:27"><expr pos:start="1420:27" pos:end="1420:27"><literal type="number" pos:start="1420:27" pos:end="1420:27">0</literal></expr></argument>, <argument pos:start="1420:30" pos:end="1420:47"><expr pos:start="1420:30" pos:end="1420:47"><name pos:start="1420:30" pos:end="1420:47">GET_CH_LAYOUT_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1422:5" pos:end="1426:5"><if pos:start="1422:5" pos:end="1426:5">if <condition pos:start="1422:8" pos:end="1422:22">(<expr pos:start="1422:9" pos:end="1422:21"><name pos:start="1422:9" pos:end="1422:21"><name pos:start="1422:9" pos:end="1422:9">c</name><operator pos:start="1422:10" pos:end="1422:11">-&gt;</operator><name pos:start="1422:12" pos:end="1422:21">priv_class</name></name></expr>)</condition> <block pos:start="1422:24" pos:end="1426:5">{<block_content pos:start="1423:9" pos:end="1425:55">
        <expr_stmt pos:start="1423:9" pos:end="1425:55"><expr pos:start="1423:9" pos:end="1425:54"><call pos:start="1423:9" pos:end="1425:54"><name pos:start="1423:9" pos:end="1423:26">show_help_children</name><argument_list pos:start="1423:27" pos:end="1425:54">(<argument pos:start="1423:28" pos:end="1423:40"><expr pos:start="1423:28" pos:end="1423:40"><name pos:start="1423:28" pos:end="1423:40"><name pos:start="1423:28" pos:end="1423:28">c</name><operator pos:start="1423:29" pos:end="1423:30">-&gt;</operator><name pos:start="1423:31" pos:end="1423:40">priv_class</name></name></expr></argument>,
                           <argument pos:start="1424:28" pos:end="1425:53"><expr pos:start="1424:28" pos:end="1425:53"><name pos:start="1424:28" pos:end="1424:53">AV_OPT_FLAG_ENCODING_PARAM</name> <operator pos:start="1424:55" pos:end="1424:55">|</operator>
                           <name pos:start="1425:28" pos:end="1425:53">AV_OPT_FLAG_DECODING_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block>

<function pos:start="1429:1" pos:end="1439:1"><type pos:start="1429:1" pos:end="1429:11"><specifier pos:start="1429:1" pos:end="1429:6">static</specifier> <name pos:start="1429:8" pos:end="1429:11">char</name></type> <name pos:start="1429:13" pos:end="1429:31">get_media_type_char</name><parameter_list pos:start="1429:32" pos:end="1429:54">(<parameter pos:start="1429:33" pos:end="1429:53"><decl pos:start="1429:33" pos:end="1429:53"><type pos:start="1429:33" pos:end="1429:48"><name pos:start="1429:33" pos:end="1429:48"><name pos:start="1429:33" pos:end="1429:36">enum</name> <name pos:start="1429:38" pos:end="1429:48">AVMediaType</name></name></type> <name pos:start="1429:50" pos:end="1429:53">type</name></decl></parameter>)</parameter_list>
<block pos:start="1430:1" pos:end="1439:1">{<block_content pos:start="1431:5" pos:end="1438:5">
    <switch pos:start="1431:5" pos:end="1438:5">switch <condition pos:start="1431:12" pos:end="1431:17">(<expr pos:start="1431:13" pos:end="1431:16"><name pos:start="1431:13" pos:end="1431:16">type</name></expr>)</condition> <block pos:start="1431:19" pos:end="1438:5">{<block_content pos:start="1432:9" pos:end="1437:47">
        <case pos:start="1432:9" pos:end="1432:32">case <expr pos:start="1432:14" pos:end="1432:31"><name pos:start="1432:14" pos:end="1432:31">AVMEDIA_TYPE_VIDEO</name></expr>:</case>    <return pos:start="1432:37" pos:end="1432:47">return <expr pos:start="1432:44" pos:end="1432:46"><literal type="char" pos:start="1432:44" pos:end="1432:46">'V'</literal></expr>;</return>
        <case pos:start="1433:9" pos:end="1433:32">case <expr pos:start="1433:14" pos:end="1433:31"><name pos:start="1433:14" pos:end="1433:31">AVMEDIA_TYPE_AUDIO</name></expr>:</case>    <return pos:start="1433:37" pos:end="1433:47">return <expr pos:start="1433:44" pos:end="1433:46"><literal type="char" pos:start="1433:44" pos:end="1433:46">'A'</literal></expr>;</return>
        <case pos:start="1434:9" pos:end="1434:31">case <expr pos:start="1434:14" pos:end="1434:30"><name pos:start="1434:14" pos:end="1434:30">AVMEDIA_TYPE_DATA</name></expr>:</case>     <return pos:start="1434:37" pos:end="1434:47">return <expr pos:start="1434:44" pos:end="1434:46"><literal type="char" pos:start="1434:44" pos:end="1434:46">'D'</literal></expr>;</return>
        <case pos:start="1435:9" pos:end="1435:35">case <expr pos:start="1435:14" pos:end="1435:34"><name pos:start="1435:14" pos:end="1435:34">AVMEDIA_TYPE_SUBTITLE</name></expr>:</case> <return pos:start="1435:37" pos:end="1435:47">return <expr pos:start="1435:44" pos:end="1435:46"><literal type="char" pos:start="1435:44" pos:end="1435:46">'S'</literal></expr>;</return>
        <case pos:start="1436:9" pos:end="1436:37">case <expr pos:start="1436:14" pos:end="1436:36"><name pos:start="1436:14" pos:end="1436:36">AVMEDIA_TYPE_ATTACHMENT</name></expr>:</case><return pos:start="1436:38" pos:end="1436:48">return <expr pos:start="1436:45" pos:end="1436:47"><literal type="char" pos:start="1436:45" pos:end="1436:47">'T'</literal></expr>;</return>
        <default pos:start="1437:9" pos:end="1437:16">default:</default>                    <return pos:start="1437:37" pos:end="1437:47">return <expr pos:start="1437:44" pos:end="1437:46"><literal type="char" pos:start="1437:44" pos:end="1437:46">'?'</literal></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function pos:start="1441:1" pos:end="1450:1"><type pos:start="1441:1" pos:end="1441:22"><specifier pos:start="1441:1" pos:end="1441:6">static</specifier> <specifier pos:start="1441:8" pos:end="1441:12">const</specifier> <name pos:start="1441:14" pos:end="1441:20">AVCodec</name> <modifier pos:start="1441:22" pos:end="1441:22">*</modifier></type><name pos:start="1441:23" pos:end="1441:39">next_codec_for_id</name><parameter_list pos:start="1441:40" pos:end="1442:52">(<parameter pos:start="1441:41" pos:end="1441:57"><decl pos:start="1441:41" pos:end="1441:57"><type pos:start="1441:41" pos:end="1441:57"><name pos:start="1441:41" pos:end="1441:54"><name pos:start="1441:41" pos:end="1441:44">enum</name> <name pos:start="1441:46" pos:end="1441:54">AVCodecID</name></name></type> <name pos:start="1441:56" pos:end="1441:57">id</name></decl></parameter>, <parameter pos:start="1441:60" pos:end="1441:78"><decl pos:start="1441:60" pos:end="1441:78"><type pos:start="1441:60" pos:end="1441:78"><specifier pos:start="1441:60" pos:end="1441:64">const</specifier> <name pos:start="1441:66" pos:end="1441:72">AVCodec</name> <modifier pos:start="1441:74" pos:end="1441:74">*</modifier></type><name pos:start="1441:75" pos:end="1441:78">prev</name></decl></parameter>,
                                        <parameter pos:start="1442:41" pos:end="1442:51"><decl pos:start="1442:41" pos:end="1442:51"><type pos:start="1442:41" pos:end="1442:51"><name pos:start="1442:41" pos:end="1442:43">int</name></type> <name pos:start="1442:45" pos:end="1442:51">encoder</name></decl></parameter>)</parameter_list>
<block pos:start="1443:1" pos:end="1450:1">{<block_content pos:start="1444:5" pos:end="1449:16">
    <while pos:start="1444:5" pos:end="1448:5">while <condition pos:start="1444:11" pos:end="1444:40">(<expr pos:start="1444:12" pos:end="1444:39"><operator pos:start="1444:12" pos:end="1444:12">(</operator><name pos:start="1444:13" pos:end="1444:16">prev</name> <operator pos:start="1444:18" pos:end="1444:18">=</operator> <call pos:start="1444:20" pos:end="1444:38"><name pos:start="1444:20" pos:end="1444:32">av_codec_next</name><argument_list pos:start="1444:33" pos:end="1444:38">(<argument pos:start="1444:34" pos:end="1444:37"><expr pos:start="1444:34" pos:end="1444:37"><name pos:start="1444:34" pos:end="1444:37">prev</name></expr></argument>)</argument_list></call><operator pos:start="1444:39" pos:end="1444:39">)</operator></expr>)</condition> <block pos:start="1444:42" pos:end="1448:5">{<block_content pos:start="1445:9" pos:end="1447:24">
        <if_stmt pos:start="1445:9" pos:end="1447:24"><if pos:start="1445:9" pos:end="1447:24">if <condition pos:start="1445:12" pos:end="1446:78">(<expr pos:start="1445:13" pos:end="1446:77"><name pos:start="1445:13" pos:end="1445:20"><name pos:start="1445:13" pos:end="1445:16">prev</name><operator pos:start="1445:17" pos:end="1445:18">-&gt;</operator><name pos:start="1445:19" pos:end="1445:20">id</name></name> <operator pos:start="1445:22" pos:end="1445:23">==</operator> <name pos:start="1445:25" pos:end="1445:26">id</name> <operator pos:start="1445:28" pos:end="1445:29">&amp;&amp;</operator>
            <operator pos:start="1446:13" pos:end="1446:13">(</operator><ternary pos:start="1446:14" pos:end="1446:76"><condition pos:start="1446:14" pos:end="1446:22"><expr pos:start="1446:14" pos:end="1446:20"><name pos:start="1446:14" pos:end="1446:20">encoder</name></expr> ?</condition><then pos:start="1446:24" pos:end="1446:48"> <expr pos:start="1446:24" pos:end="1446:48"><call pos:start="1446:24" pos:end="1446:48"><name pos:start="1446:24" pos:end="1446:42">av_codec_is_encoder</name><argument_list pos:start="1446:43" pos:end="1446:48">(<argument pos:start="1446:44" pos:end="1446:47"><expr pos:start="1446:44" pos:end="1446:47"><name pos:start="1446:44" pos:end="1446:47">prev</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="1446:50" pos:end="1446:76">: <expr pos:start="1446:52" pos:end="1446:76"><call pos:start="1446:52" pos:end="1446:76"><name pos:start="1446:52" pos:end="1446:70">av_codec_is_decoder</name><argument_list pos:start="1446:71" pos:end="1446:76">(<argument pos:start="1446:72" pos:end="1446:75"><expr pos:start="1446:72" pos:end="1446:75"><name pos:start="1446:72" pos:end="1446:75">prev</name></expr></argument>)</argument_list></call></expr></else></ternary><operator pos:start="1446:77" pos:end="1446:77">)</operator></expr>)</condition><block type="pseudo" pos:start="1447:13" pos:end="1447:24"><block_content pos:start="1447:13" pos:end="1447:24">
            <return pos:start="1447:13" pos:end="1447:24">return <expr pos:start="1447:20" pos:end="1447:23"><name pos:start="1447:20" pos:end="1447:23">prev</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></while>
    <return pos:start="1449:5" pos:end="1449:16">return <expr pos:start="1449:12" pos:end="1449:15"><name pos:start="1449:12" pos:end="1449:15">NULL</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="1452:1" pos:end="1459:1"><type pos:start="1452:1" pos:end="1452:10"><specifier pos:start="1452:1" pos:end="1452:6">static</specifier> <name pos:start="1452:8" pos:end="1452:10">int</name></type> <name pos:start="1452:12" pos:end="1452:29">compare_codec_desc</name><parameter_list pos:start="1452:30" pos:end="1452:59">(<parameter pos:start="1452:31" pos:end="1452:43"><decl pos:start="1452:31" pos:end="1452:43"><type pos:start="1452:31" pos:end="1452:43"><specifier pos:start="1452:31" pos:end="1452:35">const</specifier> <name pos:start="1452:37" pos:end="1452:40">void</name> <modifier pos:start="1452:42" pos:end="1452:42">*</modifier></type><name pos:start="1452:43" pos:end="1452:43">a</name></decl></parameter>, <parameter pos:start="1452:46" pos:end="1452:58"><decl pos:start="1452:46" pos:end="1452:58"><type pos:start="1452:46" pos:end="1452:58"><specifier pos:start="1452:46" pos:end="1452:50">const</specifier> <name pos:start="1452:52" pos:end="1452:55">void</name> <modifier pos:start="1452:57" pos:end="1452:57">*</modifier></type><name pos:start="1452:58" pos:end="1452:58">b</name></decl></parameter>)</parameter_list>
<block pos:start="1453:1" pos:end="1459:1">{<block_content pos:start="1454:5" pos:end="1458:44">
    <decl_stmt pos:start="1454:5" pos:end="1454:44"><decl pos:start="1454:5" pos:end="1454:43"><type pos:start="1454:5" pos:end="1454:37"><specifier pos:start="1454:5" pos:end="1454:9">const</specifier> <name pos:start="1454:11" pos:end="1454:27">AVCodecDescriptor</name> <modifier pos:start="1454:29" pos:end="1454:29">*</modifier> <specifier pos:start="1454:31" pos:end="1454:35">const</specifier> <modifier pos:start="1454:37" pos:end="1454:37">*</modifier></type><name pos:start="1454:38" pos:end="1454:39">da</name> <init pos:start="1454:41" pos:end="1454:43">= <expr pos:start="1454:43" pos:end="1454:43"><name pos:start="1454:43" pos:end="1454:43">a</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1455:5" pos:end="1455:44"><decl pos:start="1455:5" pos:end="1455:43"><type pos:start="1455:5" pos:end="1455:37"><specifier pos:start="1455:5" pos:end="1455:9">const</specifier> <name pos:start="1455:11" pos:end="1455:27">AVCodecDescriptor</name> <modifier pos:start="1455:29" pos:end="1455:29">*</modifier> <specifier pos:start="1455:31" pos:end="1455:35">const</specifier> <modifier pos:start="1455:37" pos:end="1455:37">*</modifier></type><name pos:start="1455:38" pos:end="1455:39">db</name> <init pos:start="1455:41" pos:end="1455:43">= <expr pos:start="1455:43" pos:end="1455:43"><name pos:start="1455:43" pos:end="1455:43">b</name></expr></init></decl>;</decl_stmt>

    <return pos:start="1457:5" pos:end="1458:44">return <expr pos:start="1457:12" pos:end="1458:43"><ternary pos:start="1457:12" pos:end="1458:43"><condition pos:start="1457:12" pos:end="1457:39"><expr pos:start="1457:12" pos:end="1457:37"><operator pos:start="1457:12" pos:end="1457:12">(</operator><operator pos:start="1457:13" pos:end="1457:13">*</operator><name pos:start="1457:14" pos:end="1457:15">da</name><operator pos:start="1457:16" pos:end="1457:16">)</operator><operator pos:start="1457:17" pos:end="1457:18">-&gt;</operator><name pos:start="1457:19" pos:end="1457:22">type</name> <operator pos:start="1457:24" pos:end="1457:25">!=</operator> <name pos:start="1457:27" pos:end="1457:37"><operator pos:start="1457:27" pos:end="1457:27">(</operator><operator pos:start="1457:28" pos:end="1457:28">*</operator><name pos:start="1457:29" pos:end="1457:30">db</name><operator pos:start="1457:31" pos:end="1457:31">)</operator><operator pos:start="1457:32" pos:end="1457:33">-&gt;</operator><name pos:start="1457:34" pos:end="1457:37">type</name></name></expr> ?</condition><then pos:start="1457:41" pos:end="1457:76"> <expr pos:start="1457:41" pos:end="1457:76"><call pos:start="1457:41" pos:end="1457:76"><name pos:start="1457:41" pos:end="1457:50">FFDIFFSIGN</name><argument_list pos:start="1457:51" pos:end="1457:76">(<argument pos:start="1457:52" pos:end="1457:62"><expr pos:start="1457:52" pos:end="1457:62"><name pos:start="1457:52" pos:end="1457:62"><operator pos:start="1457:52" pos:end="1457:52">(</operator><operator pos:start="1457:53" pos:end="1457:53">*</operator><name pos:start="1457:54" pos:end="1457:55">da</name><operator pos:start="1457:56" pos:end="1457:56">)</operator><operator pos:start="1457:57" pos:end="1457:58">-&gt;</operator><name pos:start="1457:59" pos:end="1457:62">type</name></name></expr></argument>, <argument pos:start="1457:65" pos:end="1457:75"><expr pos:start="1457:65" pos:end="1457:75"><name pos:start="1457:65" pos:end="1457:75"><operator pos:start="1457:65" pos:end="1457:65">(</operator><operator pos:start="1457:66" pos:end="1457:66">*</operator><name pos:start="1457:67" pos:end="1457:68">db</name><operator pos:start="1457:69" pos:end="1457:69">)</operator><operator pos:start="1457:70" pos:end="1457:71">-&gt;</operator><name pos:start="1457:72" pos:end="1457:75">type</name></name></expr></argument>)</argument_list></call></expr> </then><else pos:start="1457:78" pos:end="1458:43">:
           <expr pos:start="1458:12" pos:end="1458:43"><call pos:start="1458:12" pos:end="1458:43"><name pos:start="1458:12" pos:end="1458:17">strcmp</name><argument_list pos:start="1458:18" pos:end="1458:43">(<argument pos:start="1458:19" pos:end="1458:29"><expr pos:start="1458:19" pos:end="1458:29"><name pos:start="1458:19" pos:end="1458:29"><operator pos:start="1458:19" pos:end="1458:19">(</operator><operator pos:start="1458:20" pos:end="1458:20">*</operator><name pos:start="1458:21" pos:end="1458:22">da</name><operator pos:start="1458:23" pos:end="1458:23">)</operator><operator pos:start="1458:24" pos:end="1458:25">-&gt;</operator><name pos:start="1458:26" pos:end="1458:29">name</name></name></expr></argument>, <argument pos:start="1458:32" pos:end="1458:42"><expr pos:start="1458:32" pos:end="1458:42"><name pos:start="1458:32" pos:end="1458:42"><operator pos:start="1458:32" pos:end="1458:32">(</operator><operator pos:start="1458:33" pos:end="1458:33">*</operator><name pos:start="1458:34" pos:end="1458:35">db</name><operator pos:start="1458:36" pos:end="1458:36">)</operator><operator pos:start="1458:37" pos:end="1458:38">-&gt;</operator><name pos:start="1458:39" pos:end="1458:42">name</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function pos:start="1461:1" pos:end="1480:1"><type pos:start="1461:1" pos:end="1461:15"><specifier pos:start="1461:1" pos:end="1461:6">static</specifier> <name pos:start="1461:8" pos:end="1461:15">unsigned</name></type> <name pos:start="1461:17" pos:end="1461:33">get_codecs_sorted</name><parameter_list pos:start="1461:34" pos:end="1461:69">(<parameter pos:start="1461:35" pos:end="1461:68"><decl pos:start="1461:35" pos:end="1461:68"><type pos:start="1461:35" pos:end="1461:61"><specifier pos:start="1461:35" pos:end="1461:39">const</specifier> <name pos:start="1461:41" pos:end="1461:57">AVCodecDescriptor</name> <modifier pos:start="1461:59" pos:end="1461:59">*</modifier><modifier pos:start="1461:60" pos:end="1461:60">*</modifier><modifier pos:start="1461:61" pos:end="1461:61">*</modifier></type><name pos:start="1461:62" pos:end="1461:68">rcodecs</name></decl></parameter>)</parameter_list>
<block pos:start="1462:1" pos:end="1480:1">{<block_content pos:start="1463:5" pos:end="1479:21">
    <decl_stmt pos:start="1463:5" pos:end="1463:41"><decl pos:start="1463:5" pos:end="1463:40"><type pos:start="1463:5" pos:end="1463:29"><specifier pos:start="1463:5" pos:end="1463:9">const</specifier> <name pos:start="1463:11" pos:end="1463:27">AVCodecDescriptor</name> <modifier pos:start="1463:29" pos:end="1463:29">*</modifier></type><name pos:start="1463:30" pos:end="1463:33">desc</name> <init pos:start="1463:35" pos:end="1463:40">= <expr pos:start="1463:37" pos:end="1463:40"><name pos:start="1463:37" pos:end="1463:40">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1464:5" pos:end="1464:37"><decl pos:start="1464:5" pos:end="1464:36"><type pos:start="1464:5" pos:end="1464:30"><specifier pos:start="1464:5" pos:end="1464:9">const</specifier> <name pos:start="1464:11" pos:end="1464:27">AVCodecDescriptor</name> <modifier pos:start="1464:29" pos:end="1464:29">*</modifier><modifier pos:start="1464:30" pos:end="1464:30">*</modifier></type><name pos:start="1464:31" pos:end="1464:36">codecs</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1465:5" pos:end="1465:34"><decl pos:start="1465:5" pos:end="1465:26"><type pos:start="1465:5" pos:end="1465:12"><name pos:start="1465:5" pos:end="1465:12">unsigned</name></type> <name pos:start="1465:14" pos:end="1465:22">nb_codecs</name> <init pos:start="1465:24" pos:end="1465:26">= <expr pos:start="1465:26" pos:end="1465:26"><literal type="number" pos:start="1465:26" pos:end="1465:26">0</literal></expr></init></decl>, <decl pos:start="1465:29" pos:end="1465:33"><type ref="prev" pos:start="1465:5" pos:end="1465:12"/><name pos:start="1465:29" pos:end="1465:29">i</name> <init pos:start="1465:31" pos:end="1465:33">= <expr pos:start="1465:33" pos:end="1465:33"><literal type="number" pos:start="1465:33" pos:end="1465:33">0</literal></expr></init></decl>;</decl_stmt>

    <while pos:start="1467:5" pos:end="1468:20">while <condition pos:start="1467:11" pos:end="1467:50">(<expr pos:start="1467:12" pos:end="1467:49"><operator pos:start="1467:12" pos:end="1467:12">(</operator><name pos:start="1467:13" pos:end="1467:16">desc</name> <operator pos:start="1467:18" pos:end="1467:18">=</operator> <call pos:start="1467:20" pos:end="1467:48"><name pos:start="1467:20" pos:end="1467:42">avcodec_descriptor_next</name><argument_list pos:start="1467:43" pos:end="1467:48">(<argument pos:start="1467:44" pos:end="1467:47"><expr pos:start="1467:44" pos:end="1467:47"><name pos:start="1467:44" pos:end="1467:47">desc</name></expr></argument>)</argument_list></call><operator pos:start="1467:49" pos:end="1467:49">)</operator></expr>)</condition><block type="pseudo" pos:start="1468:9" pos:end="1468:20"><block_content pos:start="1468:9" pos:end="1468:20">
        <expr_stmt pos:start="1468:9" pos:end="1468:20"><expr pos:start="1468:9" pos:end="1468:19"><name pos:start="1468:9" pos:end="1468:17">nb_codecs</name><operator pos:start="1468:18" pos:end="1468:19">++</operator></expr>;</expr_stmt></block_content></block></while>
    <if_stmt pos:start="1469:5" pos:end="1472:5"><if pos:start="1469:5" pos:end="1472:5">if <condition pos:start="1469:8" pos:end="1469:58">(<expr pos:start="1469:9" pos:end="1469:57"><operator pos:start="1469:9" pos:end="1469:9">!</operator><operator pos:start="1469:10" pos:end="1469:10">(</operator><name pos:start="1469:11" pos:end="1469:16">codecs</name> <operator pos:start="1469:18" pos:end="1469:18">=</operator> <call pos:start="1469:20" pos:end="1469:56"><name pos:start="1469:20" pos:end="1469:28">av_calloc</name><argument_list pos:start="1469:29" pos:end="1469:56">(<argument pos:start="1469:30" pos:end="1469:38"><expr pos:start="1469:30" pos:end="1469:38"><name pos:start="1469:30" pos:end="1469:38">nb_codecs</name></expr></argument>, <argument pos:start="1469:41" pos:end="1469:55"><expr pos:start="1469:41" pos:end="1469:55"><sizeof pos:start="1469:41" pos:end="1469:55">sizeof<argument_list pos:start="1469:47" pos:end="1469:55">(<argument pos:start="1469:48" pos:end="1469:54"><expr pos:start="1469:48" pos:end="1469:54"><operator pos:start="1469:48" pos:end="1469:48">*</operator><name pos:start="1469:49" pos:end="1469:54">codecs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator pos:start="1469:57" pos:end="1469:57">)</operator></expr>)</condition> <block pos:start="1469:60" pos:end="1472:5">{<block_content pos:start="1470:9" pos:end="1471:24">
        <expr_stmt pos:start="1470:9" pos:end="1470:54"><expr pos:start="1470:9" pos:end="1470:53"><call pos:start="1470:9" pos:end="1470:53"><name pos:start="1470:9" pos:end="1470:14">av_log</name><argument_list pos:start="1470:15" pos:end="1470:53">(<argument pos:start="1470:16" pos:end="1470:19"><expr pos:start="1470:16" pos:end="1470:19"><name pos:start="1470:16" pos:end="1470:19">NULL</name></expr></argument>, <argument pos:start="1470:22" pos:end="1470:33"><expr pos:start="1470:22" pos:end="1470:33"><name pos:start="1470:22" pos:end="1470:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="1470:36" pos:end="1470:52"><expr pos:start="1470:36" pos:end="1470:52"><literal type="string" pos:start="1470:36" pos:end="1470:52">"Out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1471:9" pos:end="1471:24"><expr pos:start="1471:9" pos:end="1471:23"><call pos:start="1471:9" pos:end="1471:23"><name pos:start="1471:9" pos:end="1471:20">exit_program</name><argument_list pos:start="1471:21" pos:end="1471:23">(<argument pos:start="1471:22" pos:end="1471:22"><expr pos:start="1471:22" pos:end="1471:22"><literal type="number" pos:start="1471:22" pos:end="1471:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1473:5" pos:end="1473:16"><expr pos:start="1473:5" pos:end="1473:15"><name pos:start="1473:5" pos:end="1473:8">desc</name> <operator pos:start="1473:10" pos:end="1473:10">=</operator> <name pos:start="1473:12" pos:end="1473:15">NULL</name></expr>;</expr_stmt>
    <while pos:start="1474:5" pos:end="1475:27">while <condition pos:start="1474:11" pos:end="1474:50">(<expr pos:start="1474:12" pos:end="1474:49"><operator pos:start="1474:12" pos:end="1474:12">(</operator><name pos:start="1474:13" pos:end="1474:16">desc</name> <operator pos:start="1474:18" pos:end="1474:18">=</operator> <call pos:start="1474:20" pos:end="1474:48"><name pos:start="1474:20" pos:end="1474:42">avcodec_descriptor_next</name><argument_list pos:start="1474:43" pos:end="1474:48">(<argument pos:start="1474:44" pos:end="1474:47"><expr pos:start="1474:44" pos:end="1474:47"><name pos:start="1474:44" pos:end="1474:47">desc</name></expr></argument>)</argument_list></call><operator pos:start="1474:49" pos:end="1474:49">)</operator></expr>)</condition><block type="pseudo" pos:start="1475:9" pos:end="1475:27"><block_content pos:start="1475:9" pos:end="1475:27">
        <expr_stmt pos:start="1475:9" pos:end="1475:27"><expr pos:start="1475:9" pos:end="1475:26"><name pos:start="1475:9" pos:end="1475:19"><name pos:start="1475:9" pos:end="1475:14">codecs</name><index pos:start="1475:15" pos:end="1475:19">[<expr pos:start="1475:16" pos:end="1475:18"><name pos:start="1475:16" pos:end="1475:16">i</name><operator pos:start="1475:17" pos:end="1475:18">++</operator></expr>]</index></name> <operator pos:start="1475:21" pos:end="1475:21">=</operator> <name pos:start="1475:23" pos:end="1475:26">desc</name></expr>;</expr_stmt></block_content></block></while>
    <expr_stmt pos:start="1476:5" pos:end="1476:31"><expr pos:start="1476:5" pos:end="1476:30"><call pos:start="1476:5" pos:end="1476:30"><name pos:start="1476:5" pos:end="1476:14">av_assert0</name><argument_list pos:start="1476:15" pos:end="1476:30">(<argument pos:start="1476:16" pos:end="1476:29"><expr pos:start="1476:16" pos:end="1476:29"><name pos:start="1476:16" pos:end="1476:16">i</name> <operator pos:start="1476:18" pos:end="1476:19">==</operator> <name pos:start="1476:21" pos:end="1476:29">nb_codecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1477:5" pos:end="1477:66"><expr pos:start="1477:5" pos:end="1477:65"><call pos:start="1477:5" pos:end="1477:65"><name pos:start="1477:5" pos:end="1477:9">qsort</name><argument_list pos:start="1477:10" pos:end="1477:65">(<argument pos:start="1477:11" pos:end="1477:16"><expr pos:start="1477:11" pos:end="1477:16"><name pos:start="1477:11" pos:end="1477:16">codecs</name></expr></argument>, <argument pos:start="1477:19" pos:end="1477:27"><expr pos:start="1477:19" pos:end="1477:27"><name pos:start="1477:19" pos:end="1477:27">nb_codecs</name></expr></argument>, <argument pos:start="1477:30" pos:end="1477:44"><expr pos:start="1477:30" pos:end="1477:44"><sizeof pos:start="1477:30" pos:end="1477:44">sizeof<argument_list pos:start="1477:36" pos:end="1477:44">(<argument pos:start="1477:37" pos:end="1477:43"><expr pos:start="1477:37" pos:end="1477:43"><operator pos:start="1477:37" pos:end="1477:37">*</operator><name pos:start="1477:38" pos:end="1477:43">codecs</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1477:47" pos:end="1477:64"><expr pos:start="1477:47" pos:end="1477:64"><name pos:start="1477:47" pos:end="1477:64">compare_codec_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1478:5" pos:end="1478:22"><expr pos:start="1478:5" pos:end="1478:21"><operator pos:start="1478:5" pos:end="1478:5">*</operator><name pos:start="1478:6" pos:end="1478:12">rcodecs</name> <operator pos:start="1478:14" pos:end="1478:14">=</operator> <name pos:start="1478:16" pos:end="1478:21">codecs</name></expr>;</expr_stmt>
    <return pos:start="1479:5" pos:end="1479:21">return <expr pos:start="1479:12" pos:end="1479:20"><name pos:start="1479:12" pos:end="1479:20">nb_codecs</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="1482:1" pos:end="1492:1"><type pos:start="1482:1" pos:end="1482:11"><specifier pos:start="1482:1" pos:end="1482:6">static</specifier> <name pos:start="1482:8" pos:end="1482:11">void</name></type> <name pos:start="1482:13" pos:end="1482:31">print_codecs_for_id</name><parameter_list pos:start="1482:32" pos:end="1482:63">(<parameter pos:start="1482:33" pos:end="1482:49"><decl pos:start="1482:33" pos:end="1482:49"><type pos:start="1482:33" pos:end="1482:49"><name pos:start="1482:33" pos:end="1482:46"><name pos:start="1482:33" pos:end="1482:36">enum</name> <name pos:start="1482:38" pos:end="1482:46">AVCodecID</name></name></type> <name pos:start="1482:48" pos:end="1482:49">id</name></decl></parameter>, <parameter pos:start="1482:52" pos:end="1482:62"><decl pos:start="1482:52" pos:end="1482:62"><type pos:start="1482:52" pos:end="1482:62"><name pos:start="1482:52" pos:end="1482:54">int</name></type> <name pos:start="1482:56" pos:end="1482:62">encoder</name></decl></parameter>)</parameter_list>
<block pos:start="1483:1" pos:end="1492:1">{<block_content pos:start="1484:5" pos:end="1491:16">
    <decl_stmt pos:start="1484:5" pos:end="1484:32"><decl pos:start="1484:5" pos:end="1484:31"><type pos:start="1484:5" pos:end="1484:19"><specifier pos:start="1484:5" pos:end="1484:9">const</specifier> <name pos:start="1484:11" pos:end="1484:17">AVCodec</name> <modifier pos:start="1484:19" pos:end="1484:19">*</modifier></type><name pos:start="1484:20" pos:end="1484:24">codec</name> <init pos:start="1484:26" pos:end="1484:31">= <expr pos:start="1484:28" pos:end="1484:31"><name pos:start="1484:28" pos:end="1484:31">NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="1486:5" pos:end="1486:56"><expr pos:start="1486:5" pos:end="1486:55"><call pos:start="1486:5" pos:end="1486:55"><name pos:start="1486:5" pos:end="1486:10">printf</name><argument_list pos:start="1486:11" pos:end="1486:55">(<argument pos:start="1486:12" pos:end="1486:19"><expr pos:start="1486:12" pos:end="1486:19"><literal type="string" pos:start="1486:12" pos:end="1486:19">" (%s: "</literal></expr></argument>, <argument pos:start="1486:22" pos:end="1486:54"><expr pos:start="1486:22" pos:end="1486:54"><ternary pos:start="1486:22" pos:end="1486:54"><condition pos:start="1486:22" pos:end="1486:30"><expr pos:start="1486:22" pos:end="1486:28"><name pos:start="1486:22" pos:end="1486:28">encoder</name></expr> ?</condition><then pos:start="1486:32" pos:end="1486:41"> <expr pos:start="1486:32" pos:end="1486:41"><literal type="string" pos:start="1486:32" pos:end="1486:41">"encoders"</literal></expr> </then><else pos:start="1486:43" pos:end="1486:54">: <expr pos:start="1486:45" pos:end="1486:54"><literal type="string" pos:start="1486:45" pos:end="1486:54">"decoders"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="1488:5" pos:end="1489:35">while <condition pos:start="1488:11" pos:end="1488:59">(<expr pos:start="1488:12" pos:end="1488:58"><operator pos:start="1488:12" pos:end="1488:12">(</operator><name pos:start="1488:13" pos:end="1488:17">codec</name> <operator pos:start="1488:19" pos:end="1488:19">=</operator> <call pos:start="1488:21" pos:end="1488:57"><name pos:start="1488:21" pos:end="1488:37">next_codec_for_id</name><argument_list pos:start="1488:38" pos:end="1488:57">(<argument pos:start="1488:39" pos:end="1488:40"><expr pos:start="1488:39" pos:end="1488:40"><name pos:start="1488:39" pos:end="1488:40">id</name></expr></argument>, <argument pos:start="1488:43" pos:end="1488:47"><expr pos:start="1488:43" pos:end="1488:47"><name pos:start="1488:43" pos:end="1488:47">codec</name></expr></argument>, <argument pos:start="1488:50" pos:end="1488:56"><expr pos:start="1488:50" pos:end="1488:56"><name pos:start="1488:50" pos:end="1488:56">encoder</name></expr></argument>)</argument_list></call><operator pos:start="1488:58" pos:end="1488:58">)</operator></expr>)</condition><block type="pseudo" pos:start="1489:9" pos:end="1489:35"><block_content pos:start="1489:9" pos:end="1489:35">
        <expr_stmt pos:start="1489:9" pos:end="1489:35"><expr pos:start="1489:9" pos:end="1489:34"><call pos:start="1489:9" pos:end="1489:34"><name pos:start="1489:9" pos:end="1489:14">printf</name><argument_list pos:start="1489:15" pos:end="1489:34">(<argument pos:start="1489:16" pos:end="1489:20"><expr pos:start="1489:16" pos:end="1489:20"><literal type="string" pos:start="1489:16" pos:end="1489:20">"%s "</literal></expr></argument>, <argument pos:start="1489:23" pos:end="1489:33"><expr pos:start="1489:23" pos:end="1489:33"><name pos:start="1489:23" pos:end="1489:33"><name pos:start="1489:23" pos:end="1489:27">codec</name><operator pos:start="1489:28" pos:end="1489:29">-&gt;</operator><name pos:start="1489:30" pos:end="1489:33">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

    <expr_stmt pos:start="1491:5" pos:end="1491:16"><expr pos:start="1491:5" pos:end="1491:15"><call pos:start="1491:5" pos:end="1491:15"><name pos:start="1491:5" pos:end="1491:10">printf</name><argument_list pos:start="1491:11" pos:end="1491:15">(<argument pos:start="1491:12" pos:end="1491:14"><expr pos:start="1491:12" pos:end="1491:14"><literal type="string" pos:start="1491:12" pos:end="1491:14">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="1494:1" pos:end="1547:1"><type pos:start="1494:1" pos:end="1494:3"><name pos:start="1494:1" pos:end="1494:3">int</name></type> <name pos:start="1494:5" pos:end="1494:15">show_codecs</name><parameter_list pos:start="1494:16" pos:end="1494:63">(<parameter pos:start="1494:17" pos:end="1494:28"><decl pos:start="1494:17" pos:end="1494:28"><type pos:start="1494:17" pos:end="1494:28"><name pos:start="1494:17" pos:end="1494:20">void</name> <modifier pos:start="1494:22" pos:end="1494:22">*</modifier></type><name pos:start="1494:23" pos:end="1494:28">optctx</name></decl></parameter>, <parameter pos:start="1494:31" pos:end="1494:45"><decl pos:start="1494:31" pos:end="1494:45"><type pos:start="1494:31" pos:end="1494:45"><specifier pos:start="1494:31" pos:end="1494:35">const</specifier> <name pos:start="1494:37" pos:end="1494:40">char</name> <modifier pos:start="1494:42" pos:end="1494:42">*</modifier></type><name pos:start="1494:43" pos:end="1494:45">opt</name></decl></parameter>, <parameter pos:start="1494:48" pos:end="1494:62"><decl pos:start="1494:48" pos:end="1494:62"><type pos:start="1494:48" pos:end="1494:62"><specifier pos:start="1494:48" pos:end="1494:52">const</specifier> <name pos:start="1494:54" pos:end="1494:57">char</name> <modifier pos:start="1494:59" pos:end="1494:59">*</modifier></type><name pos:start="1494:60" pos:end="1494:62">arg</name></decl></parameter>)</parameter_list>
<block pos:start="1495:1" pos:end="1547:1">{<block_content pos:start="1496:5" pos:end="1546:13">
    <decl_stmt pos:start="1496:5" pos:end="1496:37"><decl pos:start="1496:5" pos:end="1496:36"><type pos:start="1496:5" pos:end="1496:30"><specifier pos:start="1496:5" pos:end="1496:9">const</specifier> <name pos:start="1496:11" pos:end="1496:27">AVCodecDescriptor</name> <modifier pos:start="1496:29" pos:end="1496:29">*</modifier><modifier pos:start="1496:30" pos:end="1496:30">*</modifier></type><name pos:start="1496:31" pos:end="1496:36">codecs</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1497:5" pos:end="1497:55"><decl pos:start="1497:5" pos:end="1497:14"><type pos:start="1497:5" pos:end="1497:12"><name pos:start="1497:5" pos:end="1497:12">unsigned</name></type> <name pos:start="1497:14" pos:end="1497:14">i</name></decl>, <decl pos:start="1497:17" pos:end="1497:54"><type ref="prev" pos:start="1497:5" pos:end="1497:12"/><name pos:start="1497:17" pos:end="1497:25">nb_codecs</name> <init pos:start="1497:27" pos:end="1497:54">= <expr pos:start="1497:29" pos:end="1497:54"><call pos:start="1497:29" pos:end="1497:54"><name pos:start="1497:29" pos:end="1497:45">get_codecs_sorted</name><argument_list pos:start="1497:46" pos:end="1497:54">(<argument pos:start="1497:47" pos:end="1497:53"><expr pos:start="1497:47" pos:end="1497:53"><operator pos:start="1497:47" pos:end="1497:47">&amp;</operator><name pos:start="1497:48" pos:end="1497:53">codecs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="1499:5" pos:end="1508:25"><expr pos:start="1499:5" pos:end="1508:24"><call pos:start="1499:5" pos:end="1508:24"><name pos:start="1499:5" pos:end="1499:10">printf</name><argument_list pos:start="1499:11" pos:end="1508:24">(<argument pos:start="1499:12" pos:end="1508:23"><expr pos:start="1499:12" pos:end="1508:23"><literal type="string" pos:start="1499:12" pos:end="1499:22">"Codecs:\n"</literal>
           <literal type="string" pos:start="1500:12" pos:end="1500:43">" D..... = Decoding supported\n"</literal>
           <literal type="string" pos:start="1501:12" pos:end="1501:43">" .E.... = Encoding supported\n"</literal>
           <literal type="string" pos:start="1502:12" pos:end="1502:36">" ..V... = Video codec\n"</literal>
           <literal type="string" pos:start="1503:12" pos:end="1503:36">" ..A... = Audio codec\n"</literal>
           <literal type="string" pos:start="1504:12" pos:end="1504:39">" ..S... = Subtitle codec\n"</literal>
           <literal type="string" pos:start="1505:12" pos:end="1505:47">" ...I.. = Intra frame-only codec\n"</literal>
           <literal type="string" pos:start="1506:12" pos:end="1506:42">" ....L. = Lossy compression\n"</literal>
           <literal type="string" pos:start="1507:12" pos:end="1507:45">" .....S = Lossless compression\n"</literal>
           <literal type="string" pos:start="1508:12" pos:end="1508:23">" -------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="1509:5" pos:end="1544:5">for <control pos:start="1509:9" pos:end="1509:35">(<init pos:start="1509:10" pos:end="1509:15"><expr pos:start="1509:10" pos:end="1509:14"><name pos:start="1509:10" pos:end="1509:10">i</name> <operator pos:start="1509:12" pos:end="1509:12">=</operator> <literal type="number" pos:start="1509:14" pos:end="1509:14">0</literal></expr>;</init> <condition pos:start="1509:17" pos:end="1509:30"><expr pos:start="1509:17" pos:end="1509:29"><name pos:start="1509:17" pos:end="1509:17">i</name> <operator pos:start="1509:19" pos:end="1509:19">&lt;</operator> <name pos:start="1509:21" pos:end="1509:29">nb_codecs</name></expr>;</condition> <incr pos:start="1509:32" pos:end="1509:34"><expr pos:start="1509:32" pos:end="1509:34"><name pos:start="1509:32" pos:end="1509:32">i</name><operator pos:start="1509:33" pos:end="1509:34">++</operator></expr></incr>)</control> <block pos:start="1509:37" pos:end="1544:5">{<block_content pos:start="1510:9" pos:end="1543:21">
        <decl_stmt pos:start="1510:9" pos:end="1510:50"><decl pos:start="1510:9" pos:end="1510:49"><type pos:start="1510:9" pos:end="1510:33"><specifier pos:start="1510:9" pos:end="1510:13">const</specifier> <name pos:start="1510:15" pos:end="1510:31">AVCodecDescriptor</name> <modifier pos:start="1510:33" pos:end="1510:33">*</modifier></type><name pos:start="1510:34" pos:end="1510:37">desc</name> <init pos:start="1510:39" pos:end="1510:49">= <expr pos:start="1510:41" pos:end="1510:49"><name pos:start="1510:41" pos:end="1510:49"><name pos:start="1510:41" pos:end="1510:46">codecs</name><index pos:start="1510:47" pos:end="1510:49">[<expr pos:start="1510:48" pos:end="1510:48"><name pos:start="1510:48" pos:end="1510:48">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="1511:9" pos:end="1511:36"><decl pos:start="1511:9" pos:end="1511:35"><type pos:start="1511:9" pos:end="1511:23"><specifier pos:start="1511:9" pos:end="1511:13">const</specifier> <name pos:start="1511:15" pos:end="1511:21">AVCodec</name> <modifier pos:start="1511:23" pos:end="1511:23">*</modifier></type><name pos:start="1511:24" pos:end="1511:28">codec</name> <init pos:start="1511:30" pos:end="1511:35">= <expr pos:start="1511:32" pos:end="1511:35"><name pos:start="1511:32" pos:end="1511:35">NULL</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="1513:9" pos:end="1514:21"><if pos:start="1513:9" pos:end="1514:21">if <condition pos:start="1513:12" pos:end="1513:46">(<expr pos:start="1513:13" pos:end="1513:45"><call pos:start="1513:13" pos:end="1513:45"><name pos:start="1513:13" pos:end="1513:18">strstr</name><argument_list pos:start="1513:19" pos:end="1513:45">(<argument pos:start="1513:20" pos:end="1513:29"><expr pos:start="1513:20" pos:end="1513:29"><name pos:start="1513:20" pos:end="1513:29"><name pos:start="1513:20" pos:end="1513:23">desc</name><operator pos:start="1513:24" pos:end="1513:25">-&gt;</operator><name pos:start="1513:26" pos:end="1513:29">name</name></name></expr></argument>, <argument pos:start="1513:32" pos:end="1513:44"><expr pos:start="1513:32" pos:end="1513:44"><literal type="string" pos:start="1513:32" pos:end="1513:44">"_deprecated"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1514:13" pos:end="1514:21"><block_content pos:start="1514:13" pos:end="1514:21">
            <continue pos:start="1514:13" pos:end="1514:21">continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1516:9" pos:end="1516:20"><expr pos:start="1516:9" pos:end="1516:19"><call pos:start="1516:9" pos:end="1516:19"><name pos:start="1516:9" pos:end="1516:14">printf</name><argument_list pos:start="1516:15" pos:end="1516:19">(<argument pos:start="1516:16" pos:end="1516:18"><expr pos:start="1516:16" pos:end="1516:18"><literal type="string" pos:start="1516:16" pos:end="1516:18">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1517:9" pos:end="1517:59"><expr pos:start="1517:9" pos:end="1517:58"><call pos:start="1517:9" pos:end="1517:58"><name pos:start="1517:9" pos:end="1517:14">printf</name><argument_list pos:start="1517:15" pos:end="1517:58">(<argument pos:start="1517:16" pos:end="1517:57"><expr pos:start="1517:16" pos:end="1517:57"><ternary pos:start="1517:16" pos:end="1517:57"><condition pos:start="1517:16" pos:end="1517:47"><expr pos:start="1517:16" pos:end="1517:45"><call pos:start="1517:16" pos:end="1517:45"><name pos:start="1517:16" pos:end="1517:35">avcodec_find_decoder</name><argument_list pos:start="1517:36" pos:end="1517:45">(<argument pos:start="1517:37" pos:end="1517:44"><expr pos:start="1517:37" pos:end="1517:44"><name pos:start="1517:37" pos:end="1517:44"><name pos:start="1517:37" pos:end="1517:40">desc</name><operator pos:start="1517:41" pos:end="1517:42">-&gt;</operator><name pos:start="1517:43" pos:end="1517:44">id</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="1517:49" pos:end="1517:51"> <expr pos:start="1517:49" pos:end="1517:51"><literal type="string" pos:start="1517:49" pos:end="1517:51">"D"</literal></expr> </then><else pos:start="1517:53" pos:end="1517:57">: <expr pos:start="1517:55" pos:end="1517:57"><literal type="string" pos:start="1517:55" pos:end="1517:57">"."</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1518:9" pos:end="1518:59"><expr pos:start="1518:9" pos:end="1518:58"><call pos:start="1518:9" pos:end="1518:58"><name pos:start="1518:9" pos:end="1518:14">printf</name><argument_list pos:start="1518:15" pos:end="1518:58">(<argument pos:start="1518:16" pos:end="1518:57"><expr pos:start="1518:16" pos:end="1518:57"><ternary pos:start="1518:16" pos:end="1518:57"><condition pos:start="1518:16" pos:end="1518:47"><expr pos:start="1518:16" pos:end="1518:45"><call pos:start="1518:16" pos:end="1518:45"><name pos:start="1518:16" pos:end="1518:35">avcodec_find_encoder</name><argument_list pos:start="1518:36" pos:end="1518:45">(<argument pos:start="1518:37" pos:end="1518:44"><expr pos:start="1518:37" pos:end="1518:44"><name pos:start="1518:37" pos:end="1518:44"><name pos:start="1518:37" pos:end="1518:40">desc</name><operator pos:start="1518:41" pos:end="1518:42">-&gt;</operator><name pos:start="1518:43" pos:end="1518:44">id</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="1518:49" pos:end="1518:51"> <expr pos:start="1518:49" pos:end="1518:51"><literal type="string" pos:start="1518:49" pos:end="1518:51">"E"</literal></expr> </then><else pos:start="1518:53" pos:end="1518:57">: <expr pos:start="1518:55" pos:end="1518:57"><literal type="string" pos:start="1518:55" pos:end="1518:57">"."</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1520:9" pos:end="1520:54"><expr pos:start="1520:9" pos:end="1520:53"><call pos:start="1520:9" pos:end="1520:53"><name pos:start="1520:9" pos:end="1520:14">printf</name><argument_list pos:start="1520:15" pos:end="1520:53">(<argument pos:start="1520:16" pos:end="1520:19"><expr pos:start="1520:16" pos:end="1520:19"><literal type="string" pos:start="1520:16" pos:end="1520:19">"%c"</literal></expr></argument>, <argument pos:start="1520:22" pos:end="1520:52"><expr pos:start="1520:22" pos:end="1520:52"><call pos:start="1520:22" pos:end="1520:52"><name pos:start="1520:22" pos:end="1520:40">get_media_type_char</name><argument_list pos:start="1520:41" pos:end="1520:52">(<argument pos:start="1520:42" pos:end="1520:51"><expr pos:start="1520:42" pos:end="1520:51"><name pos:start="1520:42" pos:end="1520:51"><name pos:start="1520:42" pos:end="1520:45">desc</name><operator pos:start="1520:46" pos:end="1520:47">-&gt;</operator><name pos:start="1520:48" pos:end="1520:51">type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1521:9" pos:end="1521:69"><expr pos:start="1521:9" pos:end="1521:68"><call pos:start="1521:9" pos:end="1521:68"><name pos:start="1521:9" pos:end="1521:14">printf</name><argument_list pos:start="1521:15" pos:end="1521:68">(<argument pos:start="1521:16" pos:end="1521:67"><expr pos:start="1521:16" pos:end="1521:67"><ternary pos:start="1521:16" pos:end="1521:67"><condition pos:start="1521:16" pos:end="1521:57"><expr pos:start="1521:16" pos:end="1521:55"><operator pos:start="1521:16" pos:end="1521:16">(</operator><name pos:start="1521:17" pos:end="1521:27"><name pos:start="1521:17" pos:end="1521:20">desc</name><operator pos:start="1521:21" pos:end="1521:22">-&gt;</operator><name pos:start="1521:23" pos:end="1521:27">props</name></name> <operator pos:start="1521:29" pos:end="1521:29">&amp;</operator> <name pos:start="1521:31" pos:end="1521:54">AV_CODEC_PROP_INTRA_ONLY</name><operator pos:start="1521:55" pos:end="1521:55">)</operator></expr> ?</condition><then pos:start="1521:59" pos:end="1521:61"> <expr pos:start="1521:59" pos:end="1521:61"><literal type="string" pos:start="1521:59" pos:end="1521:61">"I"</literal></expr> </then><else pos:start="1521:63" pos:end="1521:67">: <expr pos:start="1521:65" pos:end="1521:67"><literal type="string" pos:start="1521:65" pos:end="1521:67">"."</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1522:9" pos:end="1522:69"><expr pos:start="1522:9" pos:end="1522:68"><call pos:start="1522:9" pos:end="1522:68"><name pos:start="1522:9" pos:end="1522:14">printf</name><argument_list pos:start="1522:15" pos:end="1522:68">(<argument pos:start="1522:16" pos:end="1522:67"><expr pos:start="1522:16" pos:end="1522:67"><ternary pos:start="1522:16" pos:end="1522:67"><condition pos:start="1522:16" pos:end="1522:57"><expr pos:start="1522:16" pos:end="1522:50"><operator pos:start="1522:16" pos:end="1522:16">(</operator><name pos:start="1522:17" pos:end="1522:27"><name pos:start="1522:17" pos:end="1522:20">desc</name><operator pos:start="1522:21" pos:end="1522:22">-&gt;</operator><name pos:start="1522:23" pos:end="1522:27">props</name></name> <operator pos:start="1522:29" pos:end="1522:29">&amp;</operator> <name pos:start="1522:31" pos:end="1522:49">AV_CODEC_PROP_LOSSY</name><operator pos:start="1522:50" pos:end="1522:50">)</operator></expr>      ?</condition><then pos:start="1522:59" pos:end="1522:61"> <expr pos:start="1522:59" pos:end="1522:61"><literal type="string" pos:start="1522:59" pos:end="1522:61">"L"</literal></expr> </then><else pos:start="1522:63" pos:end="1522:67">: <expr pos:start="1522:65" pos:end="1522:67"><literal type="string" pos:start="1522:65" pos:end="1522:67">"."</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1523:9" pos:end="1523:69"><expr pos:start="1523:9" pos:end="1523:68"><call pos:start="1523:9" pos:end="1523:68"><name pos:start="1523:9" pos:end="1523:14">printf</name><argument_list pos:start="1523:15" pos:end="1523:68">(<argument pos:start="1523:16" pos:end="1523:67"><expr pos:start="1523:16" pos:end="1523:67"><ternary pos:start="1523:16" pos:end="1523:67"><condition pos:start="1523:16" pos:end="1523:57"><expr pos:start="1523:16" pos:end="1523:53"><operator pos:start="1523:16" pos:end="1523:16">(</operator><name pos:start="1523:17" pos:end="1523:27"><name pos:start="1523:17" pos:end="1523:20">desc</name><operator pos:start="1523:21" pos:end="1523:22">-&gt;</operator><name pos:start="1523:23" pos:end="1523:27">props</name></name> <operator pos:start="1523:29" pos:end="1523:29">&amp;</operator> <name pos:start="1523:31" pos:end="1523:52">AV_CODEC_PROP_LOSSLESS</name><operator pos:start="1523:53" pos:end="1523:53">)</operator></expr>   ?</condition><then pos:start="1523:59" pos:end="1523:61"> <expr pos:start="1523:59" pos:end="1523:61"><literal type="string" pos:start="1523:59" pos:end="1523:61">"S"</literal></expr> </then><else pos:start="1523:63" pos:end="1523:67">: <expr pos:start="1523:65" pos:end="1523:67"><literal type="string" pos:start="1523:65" pos:end="1523:67">"."</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1525:9" pos:end="1525:80"><expr pos:start="1525:9" pos:end="1525:79"><call pos:start="1525:9" pos:end="1525:79"><name pos:start="1525:9" pos:end="1525:14">printf</name><argument_list pos:start="1525:15" pos:end="1525:79">(<argument pos:start="1525:16" pos:end="1525:26"><expr pos:start="1525:16" pos:end="1525:26"><literal type="string" pos:start="1525:16" pos:end="1525:26">" %-20s %s"</literal></expr></argument>, <argument pos:start="1525:29" pos:end="1525:38"><expr pos:start="1525:29" pos:end="1525:38"><name pos:start="1525:29" pos:end="1525:38"><name pos:start="1525:29" pos:end="1525:32">desc</name><operator pos:start="1525:33" pos:end="1525:34">-&gt;</operator><name pos:start="1525:35" pos:end="1525:38">name</name></name></expr></argument>, <argument pos:start="1525:41" pos:end="1525:78"><expr pos:start="1525:41" pos:end="1525:78"><ternary pos:start="1525:41" pos:end="1525:78"><condition pos:start="1525:41" pos:end="1525:57"><expr pos:start="1525:41" pos:end="1525:55"><name pos:start="1525:41" pos:end="1525:55"><name pos:start="1525:41" pos:end="1525:44">desc</name><operator pos:start="1525:45" pos:end="1525:46">-&gt;</operator><name pos:start="1525:47" pos:end="1525:55">long_name</name></name></expr> ?</condition><then pos:start="1525:59" pos:end="1525:73"> <expr pos:start="1525:59" pos:end="1525:73"><name pos:start="1525:59" pos:end="1525:73"><name pos:start="1525:59" pos:end="1525:62">desc</name><operator pos:start="1525:63" pos:end="1525:64">-&gt;</operator><name pos:start="1525:65" pos:end="1525:73">long_name</name></name></expr> </then><else pos:start="1525:75" pos:end="1525:78">: <expr pos:start="1525:77" pos:end="1525:78"><literal type="string" pos:start="1525:77" pos:end="1525:78">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1527:9" pos:end="1528:49">/* print decoders/encoders when there's more than one or their
         * names are different from codec name */</comment>
        <while pos:start="1529:9" pos:end="1534:9">while <condition pos:start="1529:15" pos:end="1529:63">(<expr pos:start="1529:16" pos:end="1529:62"><operator pos:start="1529:16" pos:end="1529:16">(</operator><name pos:start="1529:17" pos:end="1529:21">codec</name> <operator pos:start="1529:23" pos:end="1529:23">=</operator> <call pos:start="1529:25" pos:end="1529:61"><name pos:start="1529:25" pos:end="1529:41">next_codec_for_id</name><argument_list pos:start="1529:42" pos:end="1529:61">(<argument pos:start="1529:43" pos:end="1529:50"><expr pos:start="1529:43" pos:end="1529:50"><name pos:start="1529:43" pos:end="1529:50"><name pos:start="1529:43" pos:end="1529:46">desc</name><operator pos:start="1529:47" pos:end="1529:48">-&gt;</operator><name pos:start="1529:49" pos:end="1529:50">id</name></name></expr></argument>, <argument pos:start="1529:53" pos:end="1529:57"><expr pos:start="1529:53" pos:end="1529:57"><name pos:start="1529:53" pos:end="1529:57">codec</name></expr></argument>, <argument pos:start="1529:60" pos:end="1529:60"><expr pos:start="1529:60" pos:end="1529:60"><literal type="number" pos:start="1529:60" pos:end="1529:60">0</literal></expr></argument>)</argument_list></call><operator pos:start="1529:62" pos:end="1529:62">)</operator></expr>)</condition> <block pos:start="1529:65" pos:end="1534:9">{<block_content pos:start="1530:13" pos:end="1533:13">
            <if_stmt pos:start="1530:13" pos:end="1533:13"><if pos:start="1530:13" pos:end="1533:13">if <condition pos:start="1530:16" pos:end="1530:48">(<expr pos:start="1530:17" pos:end="1530:47"><call pos:start="1530:17" pos:end="1530:47"><name pos:start="1530:17" pos:end="1530:22">strcmp</name><argument_list pos:start="1530:23" pos:end="1530:47">(<argument pos:start="1530:24" pos:end="1530:34"><expr pos:start="1530:24" pos:end="1530:34"><name pos:start="1530:24" pos:end="1530:34"><name pos:start="1530:24" pos:end="1530:28">codec</name><operator pos:start="1530:29" pos:end="1530:30">-&gt;</operator><name pos:start="1530:31" pos:end="1530:34">name</name></name></expr></argument>, <argument pos:start="1530:37" pos:end="1530:46"><expr pos:start="1530:37" pos:end="1530:46"><name pos:start="1530:37" pos:end="1530:46"><name pos:start="1530:37" pos:end="1530:40">desc</name><operator pos:start="1530:41" pos:end="1530:42">-&gt;</operator><name pos:start="1530:43" pos:end="1530:46">name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1530:50" pos:end="1533:13">{<block_content pos:start="1531:17" pos:end="1532:22">
                <expr_stmt pos:start="1531:17" pos:end="1531:49"><expr pos:start="1531:17" pos:end="1531:48"><call pos:start="1531:17" pos:end="1531:48"><name pos:start="1531:17" pos:end="1531:35">print_codecs_for_id</name><argument_list pos:start="1531:36" pos:end="1531:48">(<argument pos:start="1531:37" pos:end="1531:44"><expr pos:start="1531:37" pos:end="1531:44"><name pos:start="1531:37" pos:end="1531:44"><name pos:start="1531:37" pos:end="1531:40">desc</name><operator pos:start="1531:41" pos:end="1531:42">-&gt;</operator><name pos:start="1531:43" pos:end="1531:44">id</name></name></expr></argument>, <argument pos:start="1531:47" pos:end="1531:47"><expr pos:start="1531:47" pos:end="1531:47"><literal type="number" pos:start="1531:47" pos:end="1531:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1532:17" pos:end="1532:22">break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
        <expr_stmt pos:start="1535:9" pos:end="1535:21"><expr pos:start="1535:9" pos:end="1535:20"><name pos:start="1535:9" pos:end="1535:13">codec</name> <operator pos:start="1535:15" pos:end="1535:15">=</operator> <name pos:start="1535:17" pos:end="1535:20">NULL</name></expr>;</expr_stmt>
        <while pos:start="1536:9" pos:end="1541:9">while <condition pos:start="1536:15" pos:end="1536:63">(<expr pos:start="1536:16" pos:end="1536:62"><operator pos:start="1536:16" pos:end="1536:16">(</operator><name pos:start="1536:17" pos:end="1536:21">codec</name> <operator pos:start="1536:23" pos:end="1536:23">=</operator> <call pos:start="1536:25" pos:end="1536:61"><name pos:start="1536:25" pos:end="1536:41">next_codec_for_id</name><argument_list pos:start="1536:42" pos:end="1536:61">(<argument pos:start="1536:43" pos:end="1536:50"><expr pos:start="1536:43" pos:end="1536:50"><name pos:start="1536:43" pos:end="1536:50"><name pos:start="1536:43" pos:end="1536:46">desc</name><operator pos:start="1536:47" pos:end="1536:48">-&gt;</operator><name pos:start="1536:49" pos:end="1536:50">id</name></name></expr></argument>, <argument pos:start="1536:53" pos:end="1536:57"><expr pos:start="1536:53" pos:end="1536:57"><name pos:start="1536:53" pos:end="1536:57">codec</name></expr></argument>, <argument pos:start="1536:60" pos:end="1536:60"><expr pos:start="1536:60" pos:end="1536:60"><literal type="number" pos:start="1536:60" pos:end="1536:60">1</literal></expr></argument>)</argument_list></call><operator pos:start="1536:62" pos:end="1536:62">)</operator></expr>)</condition> <block pos:start="1536:65" pos:end="1541:9">{<block_content pos:start="1537:13" pos:end="1540:13">
            <if_stmt pos:start="1537:13" pos:end="1540:13"><if pos:start="1537:13" pos:end="1540:13">if <condition pos:start="1537:16" pos:end="1537:48">(<expr pos:start="1537:17" pos:end="1537:47"><call pos:start="1537:17" pos:end="1537:47"><name pos:start="1537:17" pos:end="1537:22">strcmp</name><argument_list pos:start="1537:23" pos:end="1537:47">(<argument pos:start="1537:24" pos:end="1537:34"><expr pos:start="1537:24" pos:end="1537:34"><name pos:start="1537:24" pos:end="1537:34"><name pos:start="1537:24" pos:end="1537:28">codec</name><operator pos:start="1537:29" pos:end="1537:30">-&gt;</operator><name pos:start="1537:31" pos:end="1537:34">name</name></name></expr></argument>, <argument pos:start="1537:37" pos:end="1537:46"><expr pos:start="1537:37" pos:end="1537:46"><name pos:start="1537:37" pos:end="1537:46"><name pos:start="1537:37" pos:end="1537:40">desc</name><operator pos:start="1537:41" pos:end="1537:42">-&gt;</operator><name pos:start="1537:43" pos:end="1537:46">name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1537:50" pos:end="1540:13">{<block_content pos:start="1538:17" pos:end="1539:22">
                <expr_stmt pos:start="1538:17" pos:end="1538:49"><expr pos:start="1538:17" pos:end="1538:48"><call pos:start="1538:17" pos:end="1538:48"><name pos:start="1538:17" pos:end="1538:35">print_codecs_for_id</name><argument_list pos:start="1538:36" pos:end="1538:48">(<argument pos:start="1538:37" pos:end="1538:44"><expr pos:start="1538:37" pos:end="1538:44"><name pos:start="1538:37" pos:end="1538:44"><name pos:start="1538:37" pos:end="1538:40">desc</name><operator pos:start="1538:41" pos:end="1538:42">-&gt;</operator><name pos:start="1538:43" pos:end="1538:44">id</name></name></expr></argument>, <argument pos:start="1538:47" pos:end="1538:47"><expr pos:start="1538:47" pos:end="1538:47"><literal type="number" pos:start="1538:47" pos:end="1538:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1539:17" pos:end="1539:22">break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>

        <expr_stmt pos:start="1543:9" pos:end="1543:21"><expr pos:start="1543:9" pos:end="1543:20"><call pos:start="1543:9" pos:end="1543:20"><name pos:start="1543:9" pos:end="1543:14">printf</name><argument_list pos:start="1543:15" pos:end="1543:20">(<argument pos:start="1543:16" pos:end="1543:19"><expr pos:start="1543:16" pos:end="1543:19"><literal type="string" pos:start="1543:16" pos:end="1543:19">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="1545:5" pos:end="1545:20"><expr pos:start="1545:5" pos:end="1545:19"><call pos:start="1545:5" pos:end="1545:19"><name pos:start="1545:5" pos:end="1545:11">av_free</name><argument_list pos:start="1545:12" pos:end="1545:19">(<argument pos:start="1545:13" pos:end="1545:18"><expr pos:start="1545:13" pos:end="1545:18"><name pos:start="1545:13" pos:end="1545:18">codecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="1546:5" pos:end="1546:13">return <expr pos:start="1546:12" pos:end="1546:12"><literal type="number" pos:start="1546:12" pos:end="1546:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="1549:1" pos:end="1585:1"><type pos:start="1549:1" pos:end="1549:11"><specifier pos:start="1549:1" pos:end="1549:6">static</specifier> <name pos:start="1549:8" pos:end="1549:11">void</name></type> <name pos:start="1549:13" pos:end="1549:24">print_codecs</name><parameter_list pos:start="1549:25" pos:end="1549:37">(<parameter pos:start="1549:26" pos:end="1549:36"><decl pos:start="1549:26" pos:end="1549:36"><type pos:start="1549:26" pos:end="1549:28"><name pos:start="1549:26" pos:end="1549:28">int</name></type> <name pos:start="1549:30" pos:end="1549:36">encoder</name></decl></parameter>)</parameter_list>
<block pos:start="1550:1" pos:end="1585:1">{<block_content pos:start="1551:5" pos:end="1584:20">
    <decl_stmt pos:start="1551:5" pos:end="1551:37"><decl pos:start="1551:5" pos:end="1551:36"><type pos:start="1551:5" pos:end="1551:30"><specifier pos:start="1551:5" pos:end="1551:9">const</specifier> <name pos:start="1551:11" pos:end="1551:27">AVCodecDescriptor</name> <modifier pos:start="1551:29" pos:end="1551:29">*</modifier><modifier pos:start="1551:30" pos:end="1551:30">*</modifier></type><name pos:start="1551:31" pos:end="1551:36">codecs</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1552:5" pos:end="1552:55"><decl pos:start="1552:5" pos:end="1552:14"><type pos:start="1552:5" pos:end="1552:12"><name pos:start="1552:5" pos:end="1552:12">unsigned</name></type> <name pos:start="1552:14" pos:end="1552:14">i</name></decl>, <decl pos:start="1552:17" pos:end="1552:54"><type ref="prev" pos:start="1552:5" pos:end="1552:12"/><name pos:start="1552:17" pos:end="1552:25">nb_codecs</name> <init pos:start="1552:27" pos:end="1552:54">= <expr pos:start="1552:29" pos:end="1552:54"><call pos:start="1552:29" pos:end="1552:54"><name pos:start="1552:29" pos:end="1552:45">get_codecs_sorted</name><argument_list pos:start="1552:46" pos:end="1552:54">(<argument pos:start="1552:47" pos:end="1552:53"><expr pos:start="1552:47" pos:end="1552:53"><operator pos:start="1552:47" pos:end="1552:47">&amp;</operator><name pos:start="1552:48" pos:end="1552:53">codecs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="1554:5" pos:end="1564:46"><expr pos:start="1554:5" pos:end="1564:45"><call pos:start="1554:5" pos:end="1564:45"><name pos:start="1554:5" pos:end="1554:10">printf</name><argument_list pos:start="1554:11" pos:end="1564:45">(<argument pos:start="1554:12" pos:end="1563:22"><expr pos:start="1554:12" pos:end="1563:22"><literal type="string" pos:start="1554:12" pos:end="1554:18">"%s:\n"</literal>
           <literal type="string" pos:start="1555:12" pos:end="1555:30">" V..... = Video\n"</literal>
           <literal type="string" pos:start="1556:12" pos:end="1556:30">" A..... = Audio\n"</literal>
           <literal type="string" pos:start="1557:12" pos:end="1557:33">" S..... = Subtitle\n"</literal>
           <literal type="string" pos:start="1558:12" pos:end="1558:51">" .F.... = Frame-level multithreading\n"</literal>
           <literal type="string" pos:start="1559:12" pos:end="1559:51">" ..S... = Slice-level multithreading\n"</literal>
           <literal type="string" pos:start="1560:12" pos:end="1560:46">" ...X.. = Codec is experimental\n"</literal>
           <literal type="string" pos:start="1561:12" pos:end="1561:49">" ....B. = Supports draw_horiz_band\n"</literal>
           <literal type="string" pos:start="1562:12" pos:end="1562:59">" .....D = Supports direct rendering method 1\n"</literal>
           <literal type="string" pos:start="1563:12" pos:end="1563:22">" ------\n"</literal></expr></argument>,
           <argument pos:start="1564:12" pos:end="1564:44"><expr pos:start="1564:12" pos:end="1564:44"><ternary pos:start="1564:12" pos:end="1564:44"><condition pos:start="1564:12" pos:end="1564:20"><expr pos:start="1564:12" pos:end="1564:18"><name pos:start="1564:12" pos:end="1564:18">encoder</name></expr> ?</condition><then pos:start="1564:22" pos:end="1564:31"> <expr pos:start="1564:22" pos:end="1564:31"><literal type="string" pos:start="1564:22" pos:end="1564:31">"Encoders"</literal></expr> </then><else pos:start="1564:33" pos:end="1564:44">: <expr pos:start="1564:35" pos:end="1564:44"><literal type="string" pos:start="1564:35" pos:end="1564:44">"Decoders"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="1565:5" pos:end="1583:5">for <control pos:start="1565:9" pos:end="1565:35">(<init pos:start="1565:10" pos:end="1565:15"><expr pos:start="1565:10" pos:end="1565:14"><name pos:start="1565:10" pos:end="1565:10">i</name> <operator pos:start="1565:12" pos:end="1565:12">=</operator> <literal type="number" pos:start="1565:14" pos:end="1565:14">0</literal></expr>;</init> <condition pos:start="1565:17" pos:end="1565:30"><expr pos:start="1565:17" pos:end="1565:29"><name pos:start="1565:17" pos:end="1565:17">i</name> <operator pos:start="1565:19" pos:end="1565:19">&lt;</operator> <name pos:start="1565:21" pos:end="1565:29">nb_codecs</name></expr>;</condition> <incr pos:start="1565:32" pos:end="1565:34"><expr pos:start="1565:32" pos:end="1565:34"><name pos:start="1565:32" pos:end="1565:32">i</name><operator pos:start="1565:33" pos:end="1565:34">++</operator></expr></incr>)</control> <block pos:start="1565:37" pos:end="1583:5">{<block_content pos:start="1566:9" pos:end="1582:9">
        <decl_stmt pos:start="1566:9" pos:end="1566:50"><decl pos:start="1566:9" pos:end="1566:49"><type pos:start="1566:9" pos:end="1566:33"><specifier pos:start="1566:9" pos:end="1566:13">const</specifier> <name pos:start="1566:15" pos:end="1566:31">AVCodecDescriptor</name> <modifier pos:start="1566:33" pos:end="1566:33">*</modifier></type><name pos:start="1566:34" pos:end="1566:37">desc</name> <init pos:start="1566:39" pos:end="1566:49">= <expr pos:start="1566:41" pos:end="1566:49"><name pos:start="1566:41" pos:end="1566:49"><name pos:start="1566:41" pos:end="1566:46">codecs</name><index pos:start="1566:47" pos:end="1566:49">[<expr pos:start="1566:48" pos:end="1566:48"><name pos:start="1566:48" pos:end="1566:48">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="1567:9" pos:end="1567:36"><decl pos:start="1567:9" pos:end="1567:35"><type pos:start="1567:9" pos:end="1567:23"><specifier pos:start="1567:9" pos:end="1567:13">const</specifier> <name pos:start="1567:15" pos:end="1567:21">AVCodec</name> <modifier pos:start="1567:23" pos:end="1567:23">*</modifier></type><name pos:start="1567:24" pos:end="1567:28">codec</name> <init pos:start="1567:30" pos:end="1567:35">= <expr pos:start="1567:32" pos:end="1567:35"><name pos:start="1567:32" pos:end="1567:35">NULL</name></expr></init></decl>;</decl_stmt>

        <while pos:start="1569:9" pos:end="1582:9">while <condition pos:start="1569:15" pos:end="1569:69">(<expr pos:start="1569:16" pos:end="1569:68"><operator pos:start="1569:16" pos:end="1569:16">(</operator><name pos:start="1569:17" pos:end="1569:21">codec</name> <operator pos:start="1569:23" pos:end="1569:23">=</operator> <call pos:start="1569:25" pos:end="1569:67"><name pos:start="1569:25" pos:end="1569:41">next_codec_for_id</name><argument_list pos:start="1569:42" pos:end="1569:67">(<argument pos:start="1569:43" pos:end="1569:50"><expr pos:start="1569:43" pos:end="1569:50"><name pos:start="1569:43" pos:end="1569:50"><name pos:start="1569:43" pos:end="1569:46">desc</name><operator pos:start="1569:47" pos:end="1569:48">-&gt;</operator><name pos:start="1569:49" pos:end="1569:50">id</name></name></expr></argument>, <argument pos:start="1569:53" pos:end="1569:57"><expr pos:start="1569:53" pos:end="1569:57"><name pos:start="1569:53" pos:end="1569:57">codec</name></expr></argument>, <argument pos:start="1569:60" pos:end="1569:66"><expr pos:start="1569:60" pos:end="1569:66"><name pos:start="1569:60" pos:end="1569:66">encoder</name></expr></argument>)</argument_list></call><operator pos:start="1569:68" pos:end="1569:68">)</operator></expr>)</condition> <block pos:start="1569:71" pos:end="1582:9">{<block_content pos:start="1570:13" pos:end="1581:25">
            <expr_stmt pos:start="1570:13" pos:end="1570:59"><expr pos:start="1570:13" pos:end="1570:58"><call pos:start="1570:13" pos:end="1570:58"><name pos:start="1570:13" pos:end="1570:18">printf</name><argument_list pos:start="1570:19" pos:end="1570:58">(<argument pos:start="1570:20" pos:end="1570:24"><expr pos:start="1570:20" pos:end="1570:24"><literal type="string" pos:start="1570:20" pos:end="1570:24">" %c"</literal></expr></argument>, <argument pos:start="1570:27" pos:end="1570:57"><expr pos:start="1570:27" pos:end="1570:57"><call pos:start="1570:27" pos:end="1570:57"><name pos:start="1570:27" pos:end="1570:45">get_media_type_char</name><argument_list pos:start="1570:46" pos:end="1570:57">(<argument pos:start="1570:47" pos:end="1570:56"><expr pos:start="1570:47" pos:end="1570:56"><name pos:start="1570:47" pos:end="1570:56"><name pos:start="1570:47" pos:end="1570:50">desc</name><operator pos:start="1570:51" pos:end="1570:52">-&gt;</operator><name pos:start="1570:53" pos:end="1570:56">type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1571:13" pos:end="1571:83"><expr pos:start="1571:13" pos:end="1571:82"><call pos:start="1571:13" pos:end="1571:82"><name pos:start="1571:13" pos:end="1571:18">printf</name><argument_list pos:start="1571:19" pos:end="1571:82">(<argument pos:start="1571:20" pos:end="1571:81"><expr pos:start="1571:20" pos:end="1571:81"><ternary pos:start="1571:20" pos:end="1571:81"><condition pos:start="1571:20" pos:end="1571:71"><expr pos:start="1571:20" pos:end="1571:69"><operator pos:start="1571:20" pos:end="1571:20">(</operator><name pos:start="1571:21" pos:end="1571:39"><name pos:start="1571:21" pos:end="1571:25">codec</name><operator pos:start="1571:26" pos:end="1571:27">-&gt;</operator><name pos:start="1571:28" pos:end="1571:39">capabilities</name></name> <operator pos:start="1571:41" pos:end="1571:41">&amp;</operator> <name pos:start="1571:43" pos:end="1571:68">AV_CODEC_CAP_FRAME_THREADS</name><operator pos:start="1571:69" pos:end="1571:69">)</operator></expr> ?</condition><then pos:start="1571:73" pos:end="1571:75"> <expr pos:start="1571:73" pos:end="1571:75"><literal type="string" pos:start="1571:73" pos:end="1571:75">"F"</literal></expr> </then><else pos:start="1571:77" pos:end="1571:81">: <expr pos:start="1571:79" pos:end="1571:81"><literal type="string" pos:start="1571:79" pos:end="1571:81">"."</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1572:13" pos:end="1572:83"><expr pos:start="1572:13" pos:end="1572:82"><call pos:start="1572:13" pos:end="1572:82"><name pos:start="1572:13" pos:end="1572:18">printf</name><argument_list pos:start="1572:19" pos:end="1572:82">(<argument pos:start="1572:20" pos:end="1572:81"><expr pos:start="1572:20" pos:end="1572:81"><ternary pos:start="1572:20" pos:end="1572:81"><condition pos:start="1572:20" pos:end="1572:71"><expr pos:start="1572:20" pos:end="1572:69"><operator pos:start="1572:20" pos:end="1572:20">(</operator><name pos:start="1572:21" pos:end="1572:39"><name pos:start="1572:21" pos:end="1572:25">codec</name><operator pos:start="1572:26" pos:end="1572:27">-&gt;</operator><name pos:start="1572:28" pos:end="1572:39">capabilities</name></name> <operator pos:start="1572:41" pos:end="1572:41">&amp;</operator> <name pos:start="1572:43" pos:end="1572:68">AV_CODEC_CAP_SLICE_THREADS</name><operator pos:start="1572:69" pos:end="1572:69">)</operator></expr> ?</condition><then pos:start="1572:73" pos:end="1572:75"> <expr pos:start="1572:73" pos:end="1572:75"><literal type="string" pos:start="1572:73" pos:end="1572:75">"S"</literal></expr> </then><else pos:start="1572:77" pos:end="1572:81">: <expr pos:start="1572:79" pos:end="1572:81"><literal type="string" pos:start="1572:79" pos:end="1572:81">"."</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1573:13" pos:end="1573:83"><expr pos:start="1573:13" pos:end="1573:82"><call pos:start="1573:13" pos:end="1573:82"><name pos:start="1573:13" pos:end="1573:18">printf</name><argument_list pos:start="1573:19" pos:end="1573:82">(<argument pos:start="1573:20" pos:end="1573:81"><expr pos:start="1573:20" pos:end="1573:81"><ternary pos:start="1573:20" pos:end="1573:81"><condition pos:start="1573:20" pos:end="1573:71"><expr pos:start="1573:20" pos:end="1573:68"><operator pos:start="1573:20" pos:end="1573:20">(</operator><name pos:start="1573:21" pos:end="1573:39"><name pos:start="1573:21" pos:end="1573:25">codec</name><operator pos:start="1573:26" pos:end="1573:27">-&gt;</operator><name pos:start="1573:28" pos:end="1573:39">capabilities</name></name> <operator pos:start="1573:41" pos:end="1573:41">&amp;</operator> <name pos:start="1573:43" pos:end="1573:67">AV_CODEC_CAP_EXPERIMENTAL</name><operator pos:start="1573:68" pos:end="1573:68">)</operator></expr>  ?</condition><then pos:start="1573:73" pos:end="1573:75"> <expr pos:start="1573:73" pos:end="1573:75"><literal type="string" pos:start="1573:73" pos:end="1573:75">"X"</literal></expr> </then><else pos:start="1573:77" pos:end="1573:81">: <expr pos:start="1573:79" pos:end="1573:81"><literal type="string" pos:start="1573:79" pos:end="1573:81">"."</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1574:13" pos:end="1574:83"><expr pos:start="1574:13" pos:end="1574:82"><call pos:start="1574:13" pos:end="1574:82"><name pos:start="1574:13" pos:end="1574:18">printf</name><argument_list pos:start="1574:19" pos:end="1574:82">(<argument pos:start="1574:20" pos:end="1574:81"><expr pos:start="1574:20" pos:end="1574:81"><ternary pos:start="1574:20" pos:end="1574:81"><condition pos:start="1574:20" pos:end="1574:72"><expr pos:start="1574:20" pos:end="1574:71"><operator pos:start="1574:20" pos:end="1574:20">(</operator><name pos:start="1574:21" pos:end="1574:39"><name pos:start="1574:21" pos:end="1574:25">codec</name><operator pos:start="1574:26" pos:end="1574:27">-&gt;</operator><name pos:start="1574:28" pos:end="1574:39">capabilities</name></name> <operator pos:start="1574:41" pos:end="1574:41">&amp;</operator> <name pos:start="1574:43" pos:end="1574:70">AV_CODEC_CAP_DRAW_HORIZ_BAND</name><operator pos:start="1574:71" pos:end="1574:71">)</operator></expr>?</condition><then pos:start="1574:73" pos:end="1574:75"><expr pos:start="1574:73" pos:end="1574:75"><literal type="string" pos:start="1574:73" pos:end="1574:75">"B"</literal></expr> </then><else pos:start="1574:77" pos:end="1574:81">: <expr pos:start="1574:79" pos:end="1574:81"><literal type="string" pos:start="1574:79" pos:end="1574:81">"."</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1575:13" pos:end="1575:83"><expr pos:start="1575:13" pos:end="1575:82"><call pos:start="1575:13" pos:end="1575:82"><name pos:start="1575:13" pos:end="1575:18">printf</name><argument_list pos:start="1575:19" pos:end="1575:82">(<argument pos:start="1575:20" pos:end="1575:81"><expr pos:start="1575:20" pos:end="1575:81"><ternary pos:start="1575:20" pos:end="1575:81"><condition pos:start="1575:20" pos:end="1575:71"><expr pos:start="1575:20" pos:end="1575:59"><operator pos:start="1575:20" pos:end="1575:20">(</operator><name pos:start="1575:21" pos:end="1575:39"><name pos:start="1575:21" pos:end="1575:25">codec</name><operator pos:start="1575:26" pos:end="1575:27">-&gt;</operator><name pos:start="1575:28" pos:end="1575:39">capabilities</name></name> <operator pos:start="1575:41" pos:end="1575:41">&amp;</operator> <name pos:start="1575:43" pos:end="1575:58">AV_CODEC_CAP_DR1</name><operator pos:start="1575:59" pos:end="1575:59">)</operator></expr>           ?</condition><then pos:start="1575:73" pos:end="1575:75"> <expr pos:start="1575:73" pos:end="1575:75"><literal type="string" pos:start="1575:73" pos:end="1575:75">"D"</literal></expr> </then><else pos:start="1575:77" pos:end="1575:81">: <expr pos:start="1575:79" pos:end="1575:81"><literal type="string" pos:start="1575:79" pos:end="1575:81">"."</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1577:13" pos:end="1577:87"><expr pos:start="1577:13" pos:end="1577:86"><call pos:start="1577:13" pos:end="1577:86"><name pos:start="1577:13" pos:end="1577:18">printf</name><argument_list pos:start="1577:19" pos:end="1577:86">(<argument pos:start="1577:20" pos:end="1577:30"><expr pos:start="1577:20" pos:end="1577:30"><literal type="string" pos:start="1577:20" pos:end="1577:30">" %-20s %s"</literal></expr></argument>, <argument pos:start="1577:33" pos:end="1577:43"><expr pos:start="1577:33" pos:end="1577:43"><name pos:start="1577:33" pos:end="1577:43"><name pos:start="1577:33" pos:end="1577:37">codec</name><operator pos:start="1577:38" pos:end="1577:39">-&gt;</operator><name pos:start="1577:40" pos:end="1577:43">name</name></name></expr></argument>, <argument pos:start="1577:46" pos:end="1577:85"><expr pos:start="1577:46" pos:end="1577:85"><ternary pos:start="1577:46" pos:end="1577:85"><condition pos:start="1577:46" pos:end="1577:63"><expr pos:start="1577:46" pos:end="1577:61"><name pos:start="1577:46" pos:end="1577:61"><name pos:start="1577:46" pos:end="1577:50">codec</name><operator pos:start="1577:51" pos:end="1577:52">-&gt;</operator><name pos:start="1577:53" pos:end="1577:61">long_name</name></name></expr> ?</condition><then pos:start="1577:65" pos:end="1577:80"> <expr pos:start="1577:65" pos:end="1577:80"><name pos:start="1577:65" pos:end="1577:80"><name pos:start="1577:65" pos:end="1577:69">codec</name><operator pos:start="1577:70" pos:end="1577:71">-&gt;</operator><name pos:start="1577:72" pos:end="1577:80">long_name</name></name></expr> </then><else pos:start="1577:82" pos:end="1577:85">: <expr pos:start="1577:84" pos:end="1577:85"><literal type="string" pos:start="1577:84" pos:end="1577:85">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1578:13" pos:end="1579:50"><if pos:start="1578:13" pos:end="1579:50">if <condition pos:start="1578:16" pos:end="1578:48">(<expr pos:start="1578:17" pos:end="1578:47"><call pos:start="1578:17" pos:end="1578:47"><name pos:start="1578:17" pos:end="1578:22">strcmp</name><argument_list pos:start="1578:23" pos:end="1578:47">(<argument pos:start="1578:24" pos:end="1578:34"><expr pos:start="1578:24" pos:end="1578:34"><name pos:start="1578:24" pos:end="1578:34"><name pos:start="1578:24" pos:end="1578:28">codec</name><operator pos:start="1578:29" pos:end="1578:30">-&gt;</operator><name pos:start="1578:31" pos:end="1578:34">name</name></name></expr></argument>, <argument pos:start="1578:37" pos:end="1578:46"><expr pos:start="1578:37" pos:end="1578:46"><name pos:start="1578:37" pos:end="1578:46"><name pos:start="1578:37" pos:end="1578:40">desc</name><operator pos:start="1578:41" pos:end="1578:42">-&gt;</operator><name pos:start="1578:43" pos:end="1578:46">name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1579:17" pos:end="1579:50"><block_content pos:start="1579:17" pos:end="1579:50">
                <expr_stmt pos:start="1579:17" pos:end="1579:50"><expr pos:start="1579:17" pos:end="1579:49"><call pos:start="1579:17" pos:end="1579:49"><name pos:start="1579:17" pos:end="1579:22">printf</name><argument_list pos:start="1579:23" pos:end="1579:49">(<argument pos:start="1579:24" pos:end="1579:36"><expr pos:start="1579:24" pos:end="1579:36"><literal type="string" pos:start="1579:24" pos:end="1579:36">" (codec %s)"</literal></expr></argument>, <argument pos:start="1579:39" pos:end="1579:48"><expr pos:start="1579:39" pos:end="1579:48"><name pos:start="1579:39" pos:end="1579:48"><name pos:start="1579:39" pos:end="1579:42">desc</name><operator pos:start="1579:43" pos:end="1579:44">-&gt;</operator><name pos:start="1579:45" pos:end="1579:48">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1581:13" pos:end="1581:25"><expr pos:start="1581:13" pos:end="1581:24"><call pos:start="1581:13" pos:end="1581:24"><name pos:start="1581:13" pos:end="1581:18">printf</name><argument_list pos:start="1581:19" pos:end="1581:24">(<argument pos:start="1581:20" pos:end="1581:23"><expr pos:start="1581:20" pos:end="1581:23"><literal type="string" pos:start="1581:20" pos:end="1581:23">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></for>
    <expr_stmt pos:start="1584:5" pos:end="1584:20"><expr pos:start="1584:5" pos:end="1584:19"><call pos:start="1584:5" pos:end="1584:19"><name pos:start="1584:5" pos:end="1584:11">av_free</name><argument_list pos:start="1584:12" pos:end="1584:19">(<argument pos:start="1584:13" pos:end="1584:18"><expr pos:start="1584:13" pos:end="1584:18"><name pos:start="1584:13" pos:end="1584:18">codecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="1587:1" pos:end="1591:1"><type pos:start="1587:1" pos:end="1587:3"><name pos:start="1587:1" pos:end="1587:3">int</name></type> <name pos:start="1587:5" pos:end="1587:17">show_decoders</name><parameter_list pos:start="1587:18" pos:end="1587:65">(<parameter pos:start="1587:19" pos:end="1587:30"><decl pos:start="1587:19" pos:end="1587:30"><type pos:start="1587:19" pos:end="1587:30"><name pos:start="1587:19" pos:end="1587:22">void</name> <modifier pos:start="1587:24" pos:end="1587:24">*</modifier></type><name pos:start="1587:25" pos:end="1587:30">optctx</name></decl></parameter>, <parameter pos:start="1587:33" pos:end="1587:47"><decl pos:start="1587:33" pos:end="1587:47"><type pos:start="1587:33" pos:end="1587:47"><specifier pos:start="1587:33" pos:end="1587:37">const</specifier> <name pos:start="1587:39" pos:end="1587:42">char</name> <modifier pos:start="1587:44" pos:end="1587:44">*</modifier></type><name pos:start="1587:45" pos:end="1587:47">opt</name></decl></parameter>, <parameter pos:start="1587:50" pos:end="1587:64"><decl pos:start="1587:50" pos:end="1587:64"><type pos:start="1587:50" pos:end="1587:64"><specifier pos:start="1587:50" pos:end="1587:54">const</specifier> <name pos:start="1587:56" pos:end="1587:59">char</name> <modifier pos:start="1587:61" pos:end="1587:61">*</modifier></type><name pos:start="1587:62" pos:end="1587:64">arg</name></decl></parameter>)</parameter_list>
<block pos:start="1588:1" pos:end="1591:1">{<block_content pos:start="1589:5" pos:end="1590:13">
    <expr_stmt pos:start="1589:5" pos:end="1589:20"><expr pos:start="1589:5" pos:end="1589:19"><call pos:start="1589:5" pos:end="1589:19"><name pos:start="1589:5" pos:end="1589:16">print_codecs</name><argument_list pos:start="1589:17" pos:end="1589:19">(<argument pos:start="1589:18" pos:end="1589:18"><expr pos:start="1589:18" pos:end="1589:18"><literal type="number" pos:start="1589:18" pos:end="1589:18">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="1590:5" pos:end="1590:13">return <expr pos:start="1590:12" pos:end="1590:12"><literal type="number" pos:start="1590:12" pos:end="1590:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="1593:1" pos:end="1597:1"><type pos:start="1593:1" pos:end="1593:3"><name pos:start="1593:1" pos:end="1593:3">int</name></type> <name pos:start="1593:5" pos:end="1593:17">show_encoders</name><parameter_list pos:start="1593:18" pos:end="1593:65">(<parameter pos:start="1593:19" pos:end="1593:30"><decl pos:start="1593:19" pos:end="1593:30"><type pos:start="1593:19" pos:end="1593:30"><name pos:start="1593:19" pos:end="1593:22">void</name> <modifier pos:start="1593:24" pos:end="1593:24">*</modifier></type><name pos:start="1593:25" pos:end="1593:30">optctx</name></decl></parameter>, <parameter pos:start="1593:33" pos:end="1593:47"><decl pos:start="1593:33" pos:end="1593:47"><type pos:start="1593:33" pos:end="1593:47"><specifier pos:start="1593:33" pos:end="1593:37">const</specifier> <name pos:start="1593:39" pos:end="1593:42">char</name> <modifier pos:start="1593:44" pos:end="1593:44">*</modifier></type><name pos:start="1593:45" pos:end="1593:47">opt</name></decl></parameter>, <parameter pos:start="1593:50" pos:end="1593:64"><decl pos:start="1593:50" pos:end="1593:64"><type pos:start="1593:50" pos:end="1593:64"><specifier pos:start="1593:50" pos:end="1593:54">const</specifier> <name pos:start="1593:56" pos:end="1593:59">char</name> <modifier pos:start="1593:61" pos:end="1593:61">*</modifier></type><name pos:start="1593:62" pos:end="1593:64">arg</name></decl></parameter>)</parameter_list>
<block pos:start="1594:1" pos:end="1597:1">{<block_content pos:start="1595:5" pos:end="1596:13">
    <expr_stmt pos:start="1595:5" pos:end="1595:20"><expr pos:start="1595:5" pos:end="1595:19"><call pos:start="1595:5" pos:end="1595:19"><name pos:start="1595:5" pos:end="1595:16">print_codecs</name><argument_list pos:start="1595:17" pos:end="1595:19">(<argument pos:start="1595:18" pos:end="1595:18"><expr pos:start="1595:18" pos:end="1595:18"><literal type="number" pos:start="1595:18" pos:end="1595:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="1596:5" pos:end="1596:13">return <expr pos:start="1596:12" pos:end="1596:12"><literal type="number" pos:start="1596:12" pos:end="1596:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="1599:1" pos:end="1609:1"><type pos:start="1599:1" pos:end="1599:3"><name pos:start="1599:1" pos:end="1599:3">int</name></type> <name pos:start="1599:5" pos:end="1599:13">show_bsfs</name><parameter_list pos:start="1599:14" pos:end="1599:61">(<parameter pos:start="1599:15" pos:end="1599:26"><decl pos:start="1599:15" pos:end="1599:26"><type pos:start="1599:15" pos:end="1599:26"><name pos:start="1599:15" pos:end="1599:18">void</name> <modifier pos:start="1599:20" pos:end="1599:20">*</modifier></type><name pos:start="1599:21" pos:end="1599:26">optctx</name></decl></parameter>, <parameter pos:start="1599:29" pos:end="1599:43"><decl pos:start="1599:29" pos:end="1599:43"><type pos:start="1599:29" pos:end="1599:43"><specifier pos:start="1599:29" pos:end="1599:33">const</specifier> <name pos:start="1599:35" pos:end="1599:38">char</name> <modifier pos:start="1599:40" pos:end="1599:40">*</modifier></type><name pos:start="1599:41" pos:end="1599:43">opt</name></decl></parameter>, <parameter pos:start="1599:46" pos:end="1599:60"><decl pos:start="1599:46" pos:end="1599:60"><type pos:start="1599:46" pos:end="1599:60"><specifier pos:start="1599:46" pos:end="1599:50">const</specifier> <name pos:start="1599:52" pos:end="1599:55">char</name> <modifier pos:start="1599:57" pos:end="1599:57">*</modifier></type><name pos:start="1599:58" pos:end="1599:60">arg</name></decl></parameter>)</parameter_list>
<block pos:start="1600:1" pos:end="1609:1">{<block_content pos:start="1601:5" pos:end="1608:13">
    <decl_stmt pos:start="1601:5" pos:end="1601:40"><decl pos:start="1601:5" pos:end="1601:39"><type pos:start="1601:5" pos:end="1601:29"><specifier pos:start="1601:5" pos:end="1601:9">const</specifier> <name pos:start="1601:11" pos:end="1601:27">AVBitStreamFilter</name> <modifier pos:start="1601:29" pos:end="1601:29">*</modifier></type><name pos:start="1601:30" pos:end="1601:32">bsf</name> <init pos:start="1601:34" pos:end="1601:39">= <expr pos:start="1601:36" pos:end="1601:39"><name pos:start="1601:36" pos:end="1601:39">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1602:5" pos:end="1602:24"><decl pos:start="1602:5" pos:end="1602:23"><type pos:start="1602:5" pos:end="1602:10"><name pos:start="1602:5" pos:end="1602:8">void</name> <modifier pos:start="1602:10" pos:end="1602:10">*</modifier></type><name pos:start="1602:11" pos:end="1602:16">opaque</name> <init pos:start="1602:18" pos:end="1602:23">= <expr pos:start="1602:20" pos:end="1602:23"><name pos:start="1602:20" pos:end="1602:23">NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="1604:5" pos:end="1604:35"><expr pos:start="1604:5" pos:end="1604:34"><call pos:start="1604:5" pos:end="1604:34"><name pos:start="1604:5" pos:end="1604:10">printf</name><argument_list pos:start="1604:11" pos:end="1604:34">(<argument pos:start="1604:12" pos:end="1604:33"><expr pos:start="1604:12" pos:end="1604:33"><literal type="string" pos:start="1604:12" pos:end="1604:33">"Bitstream filters:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while pos:start="1605:5" pos:end="1606:34">while <condition pos:start="1605:11" pos:end="1605:40">(<expr pos:start="1605:12" pos:end="1605:39"><operator pos:start="1605:12" pos:end="1605:12">(</operator><name pos:start="1605:13" pos:end="1605:15">bsf</name> <operator pos:start="1605:17" pos:end="1605:17">=</operator> <call pos:start="1605:19" pos:end="1605:38"><name pos:start="1605:19" pos:end="1605:29">av_bsf_next</name><argument_list pos:start="1605:30" pos:end="1605:38">(<argument pos:start="1605:31" pos:end="1605:37"><expr pos:start="1605:31" pos:end="1605:37"><operator pos:start="1605:31" pos:end="1605:31">&amp;</operator><name pos:start="1605:32" pos:end="1605:37">opaque</name></expr></argument>)</argument_list></call><operator pos:start="1605:39" pos:end="1605:39">)</operator></expr>)</condition><block type="pseudo" pos:start="1606:9" pos:end="1606:34"><block_content pos:start="1606:9" pos:end="1606:34">
        <expr_stmt pos:start="1606:9" pos:end="1606:34"><expr pos:start="1606:9" pos:end="1606:33"><call pos:start="1606:9" pos:end="1606:33"><name pos:start="1606:9" pos:end="1606:14">printf</name><argument_list pos:start="1606:15" pos:end="1606:33">(<argument pos:start="1606:16" pos:end="1606:21"><expr pos:start="1606:16" pos:end="1606:21"><literal type="string" pos:start="1606:16" pos:end="1606:21">"%s\n"</literal></expr></argument>, <argument pos:start="1606:24" pos:end="1606:32"><expr pos:start="1606:24" pos:end="1606:32"><name pos:start="1606:24" pos:end="1606:32"><name pos:start="1606:24" pos:end="1606:26">bsf</name><operator pos:start="1606:27" pos:end="1606:28">-&gt;</operator><name pos:start="1606:29" pos:end="1606:32">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
    <expr_stmt pos:start="1607:5" pos:end="1607:17"><expr pos:start="1607:5" pos:end="1607:16"><call pos:start="1607:5" pos:end="1607:16"><name pos:start="1607:5" pos:end="1607:10">printf</name><argument_list pos:start="1607:11" pos:end="1607:16">(<argument pos:start="1607:12" pos:end="1607:15"><expr pos:start="1607:12" pos:end="1607:15"><literal type="string" pos:start="1607:12" pos:end="1607:15">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="1608:5" pos:end="1608:13">return <expr pos:start="1608:12" pos:end="1608:12"><literal type="number" pos:start="1608:12" pos:end="1608:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="1611:1" pos:end="1624:1"><type pos:start="1611:1" pos:end="1611:3"><name pos:start="1611:1" pos:end="1611:3">int</name></type> <name pos:start="1611:5" pos:end="1611:18">show_protocols</name><parameter_list pos:start="1611:19" pos:end="1611:66">(<parameter pos:start="1611:20" pos:end="1611:31"><decl pos:start="1611:20" pos:end="1611:31"><type pos:start="1611:20" pos:end="1611:31"><name pos:start="1611:20" pos:end="1611:23">void</name> <modifier pos:start="1611:25" pos:end="1611:25">*</modifier></type><name pos:start="1611:26" pos:end="1611:31">optctx</name></decl></parameter>, <parameter pos:start="1611:34" pos:end="1611:48"><decl pos:start="1611:34" pos:end="1611:48"><type pos:start="1611:34" pos:end="1611:48"><specifier pos:start="1611:34" pos:end="1611:38">const</specifier> <name pos:start="1611:40" pos:end="1611:43">char</name> <modifier pos:start="1611:45" pos:end="1611:45">*</modifier></type><name pos:start="1611:46" pos:end="1611:48">opt</name></decl></parameter>, <parameter pos:start="1611:51" pos:end="1611:65"><decl pos:start="1611:51" pos:end="1611:65"><type pos:start="1611:51" pos:end="1611:65"><specifier pos:start="1611:51" pos:end="1611:55">const</specifier> <name pos:start="1611:57" pos:end="1611:60">char</name> <modifier pos:start="1611:62" pos:end="1611:62">*</modifier></type><name pos:start="1611:63" pos:end="1611:65">arg</name></decl></parameter>)</parameter_list>
<block pos:start="1612:1" pos:end="1624:1">{<block_content pos:start="1613:5" pos:end="1623:13">
    <decl_stmt pos:start="1613:5" pos:end="1613:24"><decl pos:start="1613:5" pos:end="1613:23"><type pos:start="1613:5" pos:end="1613:10"><name pos:start="1613:5" pos:end="1613:8">void</name> <modifier pos:start="1613:10" pos:end="1613:10">*</modifier></type><name pos:start="1613:11" pos:end="1613:16">opaque</name> <init pos:start="1613:18" pos:end="1613:23">= <expr pos:start="1613:20" pos:end="1613:23"><name pos:start="1613:20" pos:end="1613:23">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1614:5" pos:end="1614:21"><decl pos:start="1614:5" pos:end="1614:20"><type pos:start="1614:5" pos:end="1614:16"><specifier pos:start="1614:5" pos:end="1614:9">const</specifier> <name pos:start="1614:11" pos:end="1614:14">char</name> <modifier pos:start="1614:16" pos:end="1614:16">*</modifier></type><name pos:start="1614:17" pos:end="1614:20">name</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1616:5" pos:end="1617:23"><expr pos:start="1616:5" pos:end="1617:22"><call pos:start="1616:5" pos:end="1617:22"><name pos:start="1616:5" pos:end="1616:10">printf</name><argument_list pos:start="1616:11" pos:end="1617:22">(<argument pos:start="1616:12" pos:end="1617:21"><expr pos:start="1616:12" pos:end="1617:21"><literal type="string" pos:start="1616:12" pos:end="1616:40">"Supported file protocols:\n"</literal>
           <literal type="string" pos:start="1617:12" pos:end="1617:21">"Input:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while pos:start="1618:5" pos:end="1619:31">while <condition pos:start="1618:11" pos:end="1618:52">(<expr pos:start="1618:12" pos:end="1618:51"><operator pos:start="1618:12" pos:end="1618:12">(</operator><name pos:start="1618:13" pos:end="1618:16">name</name> <operator pos:start="1618:18" pos:end="1618:18">=</operator> <call pos:start="1618:20" pos:end="1618:50"><name pos:start="1618:20" pos:end="1618:38">avio_enum_protocols</name><argument_list pos:start="1618:39" pos:end="1618:50">(<argument pos:start="1618:40" pos:end="1618:46"><expr pos:start="1618:40" pos:end="1618:46"><operator pos:start="1618:40" pos:end="1618:40">&amp;</operator><name pos:start="1618:41" pos:end="1618:46">opaque</name></expr></argument>, <argument pos:start="1618:49" pos:end="1618:49"><expr pos:start="1618:49" pos:end="1618:49"><literal type="number" pos:start="1618:49" pos:end="1618:49">0</literal></expr></argument>)</argument_list></call><operator pos:start="1618:51" pos:end="1618:51">)</operator></expr>)</condition><block type="pseudo" pos:start="1619:9" pos:end="1619:31"><block_content pos:start="1619:9" pos:end="1619:31">
        <expr_stmt pos:start="1619:9" pos:end="1619:31"><expr pos:start="1619:9" pos:end="1619:30"><call pos:start="1619:9" pos:end="1619:30"><name pos:start="1619:9" pos:end="1619:14">printf</name><argument_list pos:start="1619:15" pos:end="1619:30">(<argument pos:start="1619:16" pos:end="1619:23"><expr pos:start="1619:16" pos:end="1619:23"><literal type="string" pos:start="1619:16" pos:end="1619:23">"  %s\n"</literal></expr></argument>, <argument pos:start="1619:26" pos:end="1619:29"><expr pos:start="1619:26" pos:end="1619:29"><name pos:start="1619:26" pos:end="1619:29">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
    <expr_stmt pos:start="1620:5" pos:end="1620:24"><expr pos:start="1620:5" pos:end="1620:23"><call pos:start="1620:5" pos:end="1620:23"><name pos:start="1620:5" pos:end="1620:10">printf</name><argument_list pos:start="1620:11" pos:end="1620:23">(<argument pos:start="1620:12" pos:end="1620:22"><expr pos:start="1620:12" pos:end="1620:22"><literal type="string" pos:start="1620:12" pos:end="1620:22">"Output:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while pos:start="1621:5" pos:end="1622:31">while <condition pos:start="1621:11" pos:end="1621:52">(<expr pos:start="1621:12" pos:end="1621:51"><operator pos:start="1621:12" pos:end="1621:12">(</operator><name pos:start="1621:13" pos:end="1621:16">name</name> <operator pos:start="1621:18" pos:end="1621:18">=</operator> <call pos:start="1621:20" pos:end="1621:50"><name pos:start="1621:20" pos:end="1621:38">avio_enum_protocols</name><argument_list pos:start="1621:39" pos:end="1621:50">(<argument pos:start="1621:40" pos:end="1621:46"><expr pos:start="1621:40" pos:end="1621:46"><operator pos:start="1621:40" pos:end="1621:40">&amp;</operator><name pos:start="1621:41" pos:end="1621:46">opaque</name></expr></argument>, <argument pos:start="1621:49" pos:end="1621:49"><expr pos:start="1621:49" pos:end="1621:49"><literal type="number" pos:start="1621:49" pos:end="1621:49">1</literal></expr></argument>)</argument_list></call><operator pos:start="1621:51" pos:end="1621:51">)</operator></expr>)</condition><block type="pseudo" pos:start="1622:9" pos:end="1622:31"><block_content pos:start="1622:9" pos:end="1622:31">
        <expr_stmt pos:start="1622:9" pos:end="1622:31"><expr pos:start="1622:9" pos:end="1622:30"><call pos:start="1622:9" pos:end="1622:30"><name pos:start="1622:9" pos:end="1622:14">printf</name><argument_list pos:start="1622:15" pos:end="1622:30">(<argument pos:start="1622:16" pos:end="1622:23"><expr pos:start="1622:16" pos:end="1622:23"><literal type="string" pos:start="1622:16" pos:end="1622:23">"  %s\n"</literal></expr></argument>, <argument pos:start="1622:26" pos:end="1622:29"><expr pos:start="1622:26" pos:end="1622:29"><name pos:start="1622:26" pos:end="1622:29">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
    <return pos:start="1623:5" pos:end="1623:13">return <expr pos:start="1623:12" pos:end="1623:12"><literal type="number" pos:start="1623:12" pos:end="1623:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="1626:1" pos:end="1670:1"><type pos:start="1626:1" pos:end="1626:3"><name pos:start="1626:1" pos:end="1626:3">int</name></type> <name pos:start="1626:5" pos:end="1626:16">show_filters</name><parameter_list pos:start="1626:17" pos:end="1626:64">(<parameter pos:start="1626:18" pos:end="1626:29"><decl pos:start="1626:18" pos:end="1626:29"><type pos:start="1626:18" pos:end="1626:29"><name pos:start="1626:18" pos:end="1626:21">void</name> <modifier pos:start="1626:23" pos:end="1626:23">*</modifier></type><name pos:start="1626:24" pos:end="1626:29">optctx</name></decl></parameter>, <parameter pos:start="1626:32" pos:end="1626:46"><decl pos:start="1626:32" pos:end="1626:46"><type pos:start="1626:32" pos:end="1626:46"><specifier pos:start="1626:32" pos:end="1626:36">const</specifier> <name pos:start="1626:38" pos:end="1626:41">char</name> <modifier pos:start="1626:43" pos:end="1626:43">*</modifier></type><name pos:start="1626:44" pos:end="1626:46">opt</name></decl></parameter>, <parameter pos:start="1626:49" pos:end="1626:63"><decl pos:start="1626:49" pos:end="1626:63"><type pos:start="1626:49" pos:end="1626:63"><specifier pos:start="1626:49" pos:end="1626:53">const</specifier> <name pos:start="1626:55" pos:end="1626:58">char</name> <modifier pos:start="1626:60" pos:end="1626:60">*</modifier></type><name pos:start="1626:61" pos:end="1626:63">arg</name></decl></parameter>)</parameter_list>
<block pos:start="1627:1" pos:end="1670:1">{<block_content pos:start="1629:5" pos:end="1669:13">
<cpp:if pos:start="1628:1" pos:end="1628:19">#<cpp:directive pos:start="1628:2" pos:end="1628:3">if</cpp:directive> <expr pos:start="1628:5" pos:end="1628:19"><name pos:start="1628:5" pos:end="1628:19">CONFIG_AVFILTER</name></expr></cpp:if>
    <decl_stmt pos:start="1629:5" pos:end="1629:34"><decl pos:start="1629:5" pos:end="1629:33"><type pos:start="1629:5" pos:end="1629:20"><specifier pos:start="1629:5" pos:end="1629:9">const</specifier> <name pos:start="1629:11" pos:end="1629:18">AVFilter</name> <modifier pos:start="1629:20" pos:end="1629:20">*</modifier></type><name pos:start="1629:21" pos:end="1629:26">filter</name> <init pos:start="1629:28" pos:end="1629:33">= <expr pos:start="1629:30" pos:end="1629:33"><name pos:start="1629:30" pos:end="1629:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1630:5" pos:end="1630:31"><decl pos:start="1630:5" pos:end="1630:18"><type pos:start="1630:5" pos:end="1630:8"><name pos:start="1630:5" pos:end="1630:8">char</name></type> <name pos:start="1630:10" pos:end="1630:18"><name pos:start="1630:10" pos:end="1630:14">descr</name><index pos:start="1630:15" pos:end="1630:18">[<expr pos:start="1630:16" pos:end="1630:17"><literal type="number" pos:start="1630:16" pos:end="1630:17">64</literal></expr>]</index></name></decl>, <decl pos:start="1630:21" pos:end="1630:30"><type ref="prev" pos:start="1630:5" pos:end="1630:8"><modifier pos:start="1630:21" pos:end="1630:21">*</modifier></type><name pos:start="1630:22" pos:end="1630:30">descr_cur</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1631:5" pos:end="1631:13"><decl pos:start="1631:5" pos:end="1631:9"><type pos:start="1631:5" pos:end="1631:7"><name pos:start="1631:5" pos:end="1631:7">int</name></type> <name pos:start="1631:9" pos:end="1631:9">i</name></decl>, <decl pos:start="1631:12" pos:end="1631:12"><type ref="prev" pos:start="1631:5" pos:end="1631:7"/><name pos:start="1631:12" pos:end="1631:12">j</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1632:5" pos:end="1632:27"><decl pos:start="1632:5" pos:end="1632:26"><type pos:start="1632:5" pos:end="1632:23"><specifier pos:start="1632:5" pos:end="1632:9">const</specifier> <name pos:start="1632:11" pos:end="1632:21">AVFilterPad</name> <modifier pos:start="1632:23" pos:end="1632:23">*</modifier></type><name pos:start="1632:24" pos:end="1632:26">pad</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1634:5" pos:end="1641:44"><expr pos:start="1634:5" pos:end="1641:43"><call pos:start="1634:5" pos:end="1641:43"><name pos:start="1634:5" pos:end="1634:10">printf</name><argument_list pos:start="1634:11" pos:end="1641:43">(<argument pos:start="1634:12" pos:end="1641:42"><expr pos:start="1634:12" pos:end="1641:42"><literal type="string" pos:start="1634:12" pos:end="1634:23">"Filters:\n"</literal>
           <literal type="string" pos:start="1635:12" pos:end="1635:39">"  T.. = Timeline support\n"</literal>
           <literal type="string" pos:start="1636:12" pos:end="1636:38">"  .S. = Slice threading\n"</literal>
           <literal type="string" pos:start="1637:12" pos:end="1637:38">"  ..C = Command support\n"</literal>
           <literal type="string" pos:start="1638:12" pos:end="1638:39">"  A = Audio input/output\n"</literal>
           <literal type="string" pos:start="1639:12" pos:end="1639:39">"  V = Video input/output\n"</literal>
           <literal type="string" pos:start="1640:12" pos:end="1640:63">"  N = Dynamic number and/or type of input/output\n"</literal>
           <literal type="string" pos:start="1641:12" pos:end="1641:42">"  | = Source or sink filter\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while pos:start="1642:5" pos:end="1667:0">while <condition pos:start="1642:11" pos:end="1642:44">(<expr pos:start="1642:12" pos:end="1642:43"><operator pos:start="1642:12" pos:end="1642:12">(</operator><name pos:start="1642:13" pos:end="1642:18">filter</name> <operator pos:start="1642:20" pos:end="1642:20">=</operator> <call pos:start="1642:22" pos:end="1642:42"><name pos:start="1642:22" pos:end="1642:34">avfilter_next</name><argument_list pos:start="1642:35" pos:end="1642:42">(<argument pos:start="1642:36" pos:end="1642:41"><expr pos:start="1642:36" pos:end="1642:41"><name pos:start="1642:36" pos:end="1642:41">filter</name></expr></argument>)</argument_list></call><operator pos:start="1642:43" pos:end="1642:43">)</operator></expr>)</condition> <block pos:start="1642:46" pos:end="1667:0">{<block_content pos:start="1643:9" pos:end="1664:57">
        <expr_stmt pos:start="1643:9" pos:end="1643:26"><expr pos:start="1643:9" pos:end="1643:25"><name pos:start="1643:9" pos:end="1643:17">descr_cur</name> <operator pos:start="1643:19" pos:end="1643:19">=</operator> <name pos:start="1643:21" pos:end="1643:25">descr</name></expr>;</expr_stmt>
        <for pos:start="1644:9" pos:end="1658:9">for <control pos:start="1644:13" pos:end="1644:31">(<init pos:start="1644:14" pos:end="1644:19"><expr pos:start="1644:14" pos:end="1644:18"><name pos:start="1644:14" pos:end="1644:14">i</name> <operator pos:start="1644:16" pos:end="1644:16">=</operator> <literal type="number" pos:start="1644:18" pos:end="1644:18">0</literal></expr>;</init> <condition pos:start="1644:21" pos:end="1644:26"><expr pos:start="1644:21" pos:end="1644:25"><name pos:start="1644:21" pos:end="1644:21">i</name> <operator pos:start="1644:23" pos:end="1644:23">&lt;</operator> <literal type="number" pos:start="1644:25" pos:end="1644:25">2</literal></expr>;</condition> <incr pos:start="1644:28" pos:end="1644:30"><expr pos:start="1644:28" pos:end="1644:30"><name pos:start="1644:28" pos:end="1644:28">i</name><operator pos:start="1644:29" pos:end="1644:30">++</operator></expr></incr>)</control> <block pos:start="1644:33" pos:end="1658:9">{<block_content pos:start="1645:13" pos:end="1657:103">
            <if_stmt pos:start="1645:13" pos:end="1648:13"><if pos:start="1645:13" pos:end="1648:13">if <condition pos:start="1645:16" pos:end="1645:18">(<expr pos:start="1645:17" pos:end="1645:17"><name pos:start="1645:17" pos:end="1645:17">i</name></expr>)</condition> <block pos:start="1645:20" pos:end="1648:13">{<block_content pos:start="1646:17" pos:end="1647:37">
                <expr_stmt pos:start="1646:17" pos:end="1646:37"><expr pos:start="1646:17" pos:end="1646:36"><operator pos:start="1646:17" pos:end="1646:17">*</operator><operator pos:start="1646:18" pos:end="1646:18">(</operator><name pos:start="1646:19" pos:end="1646:27">descr_cur</name><operator pos:start="1646:28" pos:end="1646:29">++</operator><operator pos:start="1646:30" pos:end="1646:30">)</operator> <operator pos:start="1646:32" pos:end="1646:32">=</operator> <literal type="char" pos:start="1646:34" pos:end="1646:36">'-'</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="1647:17" pos:end="1647:37"><expr pos:start="1647:17" pos:end="1647:36"><operator pos:start="1647:17" pos:end="1647:17">*</operator><operator pos:start="1647:18" pos:end="1647:18">(</operator><name pos:start="1647:19" pos:end="1647:27">descr_cur</name><operator pos:start="1647:28" pos:end="1647:29">++</operator><operator pos:start="1647:30" pos:end="1647:30">)</operator> <operator pos:start="1647:32" pos:end="1647:32">=</operator> <literal type="char" pos:start="1647:34" pos:end="1647:36">'&gt;'</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="1649:13" pos:end="1649:55"><expr pos:start="1649:13" pos:end="1649:54"><name pos:start="1649:13" pos:end="1649:15">pad</name> <operator pos:start="1649:17" pos:end="1649:17">=</operator> <ternary pos:start="1649:19" pos:end="1649:54"><condition pos:start="1649:19" pos:end="1649:21"><expr pos:start="1649:19" pos:end="1649:19"><name pos:start="1649:19" pos:end="1649:19">i</name></expr> ?</condition><then pos:start="1649:23" pos:end="1649:37"> <expr pos:start="1649:23" pos:end="1649:37"><name pos:start="1649:23" pos:end="1649:37"><name pos:start="1649:23" pos:end="1649:28">filter</name><operator pos:start="1649:29" pos:end="1649:30">-&gt;</operator><name pos:start="1649:31" pos:end="1649:37">outputs</name></name></expr> </then><else pos:start="1649:39" pos:end="1649:54">: <expr pos:start="1649:41" pos:end="1649:54"><name pos:start="1649:41" pos:end="1649:54"><name pos:start="1649:41" pos:end="1649:46">filter</name><operator pos:start="1649:47" pos:end="1649:48">-&gt;</operator><name pos:start="1649:49" pos:end="1649:54">inputs</name></name></expr></else></ternary></expr>;</expr_stmt>
            <for pos:start="1650:13" pos:end="1654:13">for <control pos:start="1650:17" pos:end="1650:66">(<init pos:start="1650:18" pos:end="1650:23"><expr pos:start="1650:18" pos:end="1650:22"><name pos:start="1650:18" pos:end="1650:18">j</name> <operator pos:start="1650:20" pos:end="1650:20">=</operator> <literal type="number" pos:start="1650:22" pos:end="1650:22">0</literal></expr>;</init> <condition pos:start="1650:25" pos:end="1650:61"><expr pos:start="1650:25" pos:end="1650:60"><name pos:start="1650:25" pos:end="1650:27">pad</name> <operator pos:start="1650:29" pos:end="1650:30">&amp;&amp;</operator> <call pos:start="1650:32" pos:end="1650:60"><name pos:start="1650:32" pos:end="1650:52">avfilter_pad_get_name</name><argument_list pos:start="1650:53" pos:end="1650:60">(<argument pos:start="1650:54" pos:end="1650:56"><expr pos:start="1650:54" pos:end="1650:56"><name pos:start="1650:54" pos:end="1650:56">pad</name></expr></argument>, <argument pos:start="1650:59" pos:end="1650:59"><expr pos:start="1650:59" pos:end="1650:59"><name pos:start="1650:59" pos:end="1650:59">j</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="1650:63" pos:end="1650:65"><expr pos:start="1650:63" pos:end="1650:65"><name pos:start="1650:63" pos:end="1650:63">j</name><operator pos:start="1650:64" pos:end="1650:65">++</operator></expr></incr>)</control> <block pos:start="1650:68" pos:end="1654:13">{<block_content pos:start="1651:17" pos:end="1653:84">
                <if_stmt pos:start="1651:17" pos:end="1652:26"><if pos:start="1651:17" pos:end="1652:26">if <condition pos:start="1651:20" pos:end="1651:59">(<expr pos:start="1651:21" pos:end="1651:58"><name pos:start="1651:21" pos:end="1651:29">descr_cur</name> <operator pos:start="1651:31" pos:end="1651:32">&gt;=</operator> <name pos:start="1651:34" pos:end="1651:38">descr</name> <operator pos:start="1651:40" pos:end="1651:40">+</operator> <sizeof pos:start="1651:42" pos:end="1651:54">sizeof<argument_list pos:start="1651:48" pos:end="1651:54">(<argument pos:start="1651:49" pos:end="1651:53"><expr pos:start="1651:49" pos:end="1651:53"><name pos:start="1651:49" pos:end="1651:53">descr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="1651:56" pos:end="1651:56">-</operator> <literal type="number" pos:start="1651:58" pos:end="1651:58">4</literal></expr>)</condition><block type="pseudo" pos:start="1652:21" pos:end="1652:26"><block_content pos:start="1652:21" pos:end="1652:26">
                    <break pos:start="1652:21" pos:end="1652:26">break;</break></block_content></block></if></if_stmt>
                <expr_stmt pos:start="1653:17" pos:end="1653:84"><expr pos:start="1653:17" pos:end="1653:83"><operator pos:start="1653:17" pos:end="1653:17">*</operator><operator pos:start="1653:18" pos:end="1653:18">(</operator><name pos:start="1653:19" pos:end="1653:27">descr_cur</name><operator pos:start="1653:28" pos:end="1653:29">++</operator><operator pos:start="1653:30" pos:end="1653:30">)</operator> <operator pos:start="1653:32" pos:end="1653:32">=</operator> <call pos:start="1653:34" pos:end="1653:83"><name pos:start="1653:34" pos:end="1653:52">get_media_type_char</name><argument_list pos:start="1653:53" pos:end="1653:83">(<argument pos:start="1653:54" pos:end="1653:82"><expr pos:start="1653:54" pos:end="1653:82"><call pos:start="1653:54" pos:end="1653:82"><name pos:start="1653:54" pos:end="1653:74">avfilter_pad_get_type</name><argument_list pos:start="1653:75" pos:end="1653:82">(<argument pos:start="1653:76" pos:end="1653:78"><expr pos:start="1653:76" pos:end="1653:78"><name pos:start="1653:76" pos:end="1653:78">pad</name></expr></argument>, <argument pos:start="1653:81" pos:end="1653:81"><expr pos:start="1653:81" pos:end="1653:81"><name pos:start="1653:81" pos:end="1653:81">j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <if_stmt pos:start="1655:13" pos:end="1657:103"><if pos:start="1655:13" pos:end="1657:103">if <condition pos:start="1655:16" pos:end="1655:19">(<expr pos:start="1655:17" pos:end="1655:18"><operator pos:start="1655:17" pos:end="1655:17">!</operator><name pos:start="1655:18" pos:end="1655:18">j</name></expr>)</condition><block type="pseudo" pos:start="1656:17" pos:end="1657:103"><block_content pos:start="1656:17" pos:end="1657:103">
                <expr_stmt pos:start="1656:17" pos:end="1657:103"><expr pos:start="1656:17" pos:end="1657:102"><operator pos:start="1656:17" pos:end="1656:17">*</operator><operator pos:start="1656:18" pos:end="1656:18">(</operator><name pos:start="1656:19" pos:end="1656:27">descr_cur</name><operator pos:start="1656:28" pos:end="1656:29">++</operator><operator pos:start="1656:30" pos:end="1656:30">)</operator> <operator pos:start="1656:32" pos:end="1656:32">=</operator> <ternary pos:start="1656:34" pos:end="1657:102"><condition pos:start="1656:34" pos:end="1657:92"><expr pos:start="1656:34" pos:end="1657:90"><operator pos:start="1656:34" pos:end="1656:34">(</operator><operator pos:start="1656:35" pos:end="1656:35">(</operator><operator pos:start="1656:36" pos:end="1656:36">!</operator><name pos:start="1656:37" pos:end="1656:37">i</name> <operator pos:start="1656:39" pos:end="1656:40">&amp;&amp;</operator> <operator pos:start="1656:42" pos:end="1656:42">(</operator><name pos:start="1656:43" pos:end="1656:55"><name pos:start="1656:43" pos:end="1656:48">filter</name><operator pos:start="1656:49" pos:end="1656:50">-&gt;</operator><name pos:start="1656:51" pos:end="1656:55">flags</name></name> <operator pos:start="1656:57" pos:end="1656:57">&amp;</operator> <name pos:start="1656:59" pos:end="1656:86">AVFILTER_FLAG_DYNAMIC_INPUTS</name><operator pos:start="1656:87" pos:end="1656:87">)</operator><operator pos:start="1656:88" pos:end="1656:88">)</operator> <operator pos:start="1656:90" pos:end="1656:91">||</operator>
                                  <operator pos:start="1657:35" pos:end="1657:35">(</operator> <name pos:start="1657:37" pos:end="1657:37">i</name> <operator pos:start="1657:39" pos:end="1657:40">&amp;&amp;</operator> <operator pos:start="1657:42" pos:end="1657:42">(</operator><name pos:start="1657:43" pos:end="1657:55"><name pos:start="1657:43" pos:end="1657:48">filter</name><operator pos:start="1657:49" pos:end="1657:50">-&gt;</operator><name pos:start="1657:51" pos:end="1657:55">flags</name></name> <operator pos:start="1657:57" pos:end="1657:57">&amp;</operator> <name pos:start="1657:59" pos:end="1657:87">AVFILTER_FLAG_DYNAMIC_OUTPUTS</name><operator pos:start="1657:88" pos:end="1657:88">)</operator><operator pos:start="1657:89" pos:end="1657:89">)</operator><operator pos:start="1657:90" pos:end="1657:90">)</operator></expr> ?</condition><then pos:start="1657:94" pos:end="1657:96"> <expr pos:start="1657:94" pos:end="1657:96"><literal type="char" pos:start="1657:94" pos:end="1657:96">'N'</literal></expr> </then><else pos:start="1657:98" pos:end="1657:102">: <expr pos:start="1657:100" pos:end="1657:102"><literal type="char" pos:start="1657:100" pos:end="1657:102">'|'</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt pos:start="1659:9" pos:end="1659:23"><expr pos:start="1659:9" pos:end="1659:22"><operator pos:start="1659:9" pos:end="1659:9">*</operator><name pos:start="1659:10" pos:end="1659:18">descr_cur</name> <operator pos:start="1659:20" pos:end="1659:20">=</operator> <literal type="number" pos:start="1659:22" pos:end="1659:22">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1660:9" pos:end="1664:57"><expr pos:start="1660:9" pos:end="1664:56"><call pos:start="1660:9" pos:end="1664:56"><name pos:start="1660:9" pos:end="1660:14">printf</name><argument_list pos:start="1660:15" pos:end="1664:56">(<argument pos:start="1660:16" pos:end="1660:41"><expr pos:start="1660:16" pos:end="1660:41"><literal type="string" pos:start="1660:16" pos:end="1660:41">" %c%c%c %-17s %-10s %s\n"</literal></expr></argument>,
               <argument pos:start="1661:16" pos:end="1661:73"><expr pos:start="1661:16" pos:end="1661:73"><ternary pos:start="1661:16" pos:end="1661:73"><condition pos:start="1661:16" pos:end="1661:63"><expr pos:start="1661:16" pos:end="1661:61"><name pos:start="1661:16" pos:end="1661:28"><name pos:start="1661:16" pos:end="1661:21">filter</name><operator pos:start="1661:22" pos:end="1661:23">-&gt;</operator><name pos:start="1661:24" pos:end="1661:28">flags</name></name> <operator pos:start="1661:30" pos:end="1661:30">&amp;</operator> <name pos:start="1661:32" pos:end="1661:61">AVFILTER_FLAG_SUPPORT_TIMELINE</name></expr> ?</condition><then pos:start="1661:65" pos:end="1661:67"> <expr pos:start="1661:65" pos:end="1661:67"><literal type="char" pos:start="1661:65" pos:end="1661:67">'T'</literal></expr> </then><else pos:start="1661:69" pos:end="1661:73">: <expr pos:start="1661:71" pos:end="1661:73"><literal type="char" pos:start="1661:71" pos:end="1661:73">'.'</literal></expr></else></ternary></expr></argument>,
               <argument pos:start="1662:16" pos:end="1662:73"><expr pos:start="1662:16" pos:end="1662:73"><ternary pos:start="1662:16" pos:end="1662:73"><condition pos:start="1662:16" pos:end="1662:63"><expr pos:start="1662:16" pos:end="1662:58"><name pos:start="1662:16" pos:end="1662:28"><name pos:start="1662:16" pos:end="1662:21">filter</name><operator pos:start="1662:22" pos:end="1662:23">-&gt;</operator><name pos:start="1662:24" pos:end="1662:28">flags</name></name> <operator pos:start="1662:30" pos:end="1662:30">&amp;</operator> <name pos:start="1662:32" pos:end="1662:58">AVFILTER_FLAG_SLICE_THREADS</name></expr>    ?</condition><then pos:start="1662:65" pos:end="1662:67"> <expr pos:start="1662:65" pos:end="1662:67"><literal type="char" pos:start="1662:65" pos:end="1662:67">'S'</literal></expr> </then><else pos:start="1662:69" pos:end="1662:73">: <expr pos:start="1662:71" pos:end="1662:73"><literal type="char" pos:start="1662:71" pos:end="1662:73">'.'</literal></expr></else></ternary></expr></argument>,
               <argument pos:start="1663:16" pos:end="1663:73"><expr pos:start="1663:16" pos:end="1663:73"><ternary pos:start="1663:16" pos:end="1663:73"><condition pos:start="1663:16" pos:end="1663:63"><expr pos:start="1663:16" pos:end="1663:38"><name pos:start="1663:16" pos:end="1663:38"><name pos:start="1663:16" pos:end="1663:21">filter</name><operator pos:start="1663:22" pos:end="1663:23">-&gt;</operator><name pos:start="1663:24" pos:end="1663:38">process_command</name></name></expr>                        ?</condition><then pos:start="1663:65" pos:end="1663:67"> <expr pos:start="1663:65" pos:end="1663:67"><literal type="char" pos:start="1663:65" pos:end="1663:67">'C'</literal></expr> </then><else pos:start="1663:69" pos:end="1663:73">: <expr pos:start="1663:71" pos:end="1663:73"><literal type="char" pos:start="1663:71" pos:end="1663:73">'.'</literal></expr></else></ternary></expr></argument>,
               <argument pos:start="1664:16" pos:end="1664:27"><expr pos:start="1664:16" pos:end="1664:27"><name pos:start="1664:16" pos:end="1664:27"><name pos:start="1664:16" pos:end="1664:21">filter</name><operator pos:start="1664:22" pos:end="1664:23">-&gt;</operator><name pos:start="1664:24" pos:end="1664:27">name</name></name></expr></argument>, <argument pos:start="1664:30" pos:end="1664:34"><expr pos:start="1664:30" pos:end="1664:34"><name pos:start="1664:30" pos:end="1664:34">descr</name></expr></argument>, <argument pos:start="1664:37" pos:end="1664:55"><expr pos:start="1664:37" pos:end="1664:55"><name pos:start="1664:37" pos:end="1664:55"><name pos:start="1664:37" pos:end="1664:42">filter</name><operator pos:start="1664:43" pos:end="1664:44">-&gt;</operator><name pos:start="1664:45" pos:end="1664:55">description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
<cpp:else pos:start="1666:1" pos:end="1666:5">#<cpp:directive pos:start="1666:2" pos:end="1666:5">else</cpp:directive></cpp:else>
    <expr_stmt pos:start="1667:5" pos:end="1669:0"><expr pos:start="1667:5" pos:end="1667:58"><call pos:start="1667:5" pos:end="1667:58"><name pos:start="1667:5" pos:end="1667:10">printf</name><argument_list pos:start="1667:11" pos:end="1667:58">(<argument pos:start="1667:12" pos:end="1667:57"><expr pos:start="1667:12" pos:end="1667:57"><literal type="string" pos:start="1667:12" pos:end="1667:57">"No filters available: libavfilter disabled\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1668:1" pos:end="1668:6">#<cpp:directive pos:start="1668:2" pos:end="1668:6">endif</cpp:directive></cpp:endif>
    <return pos:start="1669:5" pos:end="1669:13">return <expr pos:start="1669:12" pos:end="1669:12"><literal type="number" pos:start="1669:12" pos:end="1669:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="1672:1" pos:end="1684:1"><type pos:start="1672:1" pos:end="1672:3"><name pos:start="1672:1" pos:end="1672:3">int</name></type> <name pos:start="1672:5" pos:end="1672:15">show_colors</name><parameter_list pos:start="1672:16" pos:end="1672:63">(<parameter pos:start="1672:17" pos:end="1672:28"><decl pos:start="1672:17" pos:end="1672:28"><type pos:start="1672:17" pos:end="1672:28"><name pos:start="1672:17" pos:end="1672:20">void</name> <modifier pos:start="1672:22" pos:end="1672:22">*</modifier></type><name pos:start="1672:23" pos:end="1672:28">optctx</name></decl></parameter>, <parameter pos:start="1672:31" pos:end="1672:45"><decl pos:start="1672:31" pos:end="1672:45"><type pos:start="1672:31" pos:end="1672:45"><specifier pos:start="1672:31" pos:end="1672:35">const</specifier> <name pos:start="1672:37" pos:end="1672:40">char</name> <modifier pos:start="1672:42" pos:end="1672:42">*</modifier></type><name pos:start="1672:43" pos:end="1672:45">opt</name></decl></parameter>, <parameter pos:start="1672:48" pos:end="1672:62"><decl pos:start="1672:48" pos:end="1672:62"><type pos:start="1672:48" pos:end="1672:62"><specifier pos:start="1672:48" pos:end="1672:52">const</specifier> <name pos:start="1672:54" pos:end="1672:57">char</name> <modifier pos:start="1672:59" pos:end="1672:59">*</modifier></type><name pos:start="1672:60" pos:end="1672:62">arg</name></decl></parameter>)</parameter_list>
<block pos:start="1673:1" pos:end="1684:1">{<block_content pos:start="1674:5" pos:end="1683:13">
    <decl_stmt pos:start="1674:5" pos:end="1674:21"><decl pos:start="1674:5" pos:end="1674:20"><type pos:start="1674:5" pos:end="1674:16"><specifier pos:start="1674:5" pos:end="1674:9">const</specifier> <name pos:start="1674:11" pos:end="1674:14">char</name> <modifier pos:start="1674:16" pos:end="1674:16">*</modifier></type><name pos:start="1674:17" pos:end="1674:20">name</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1675:5" pos:end="1675:23"><decl pos:start="1675:5" pos:end="1675:22"><type pos:start="1675:5" pos:end="1675:19"><specifier pos:start="1675:5" pos:end="1675:9">const</specifier> <name pos:start="1675:11" pos:end="1675:17">uint8_t</name> <modifier pos:start="1675:19" pos:end="1675:19">*</modifier></type><name pos:start="1675:20" pos:end="1675:22">rgb</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1676:5" pos:end="1676:10"><decl pos:start="1676:5" pos:end="1676:9"><type pos:start="1676:5" pos:end="1676:7"><name pos:start="1676:5" pos:end="1676:7">int</name></type> <name pos:start="1676:9" pos:end="1676:9">i</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1678:5" pos:end="1678:38"><expr pos:start="1678:5" pos:end="1678:37"><call pos:start="1678:5" pos:end="1678:37"><name pos:start="1678:5" pos:end="1678:10">printf</name><argument_list pos:start="1678:11" pos:end="1678:37">(<argument pos:start="1678:12" pos:end="1678:28"><expr pos:start="1678:12" pos:end="1678:28"><literal type="string" pos:start="1678:12" pos:end="1678:28">"%-32s #RRGGBB\n"</literal></expr></argument>, <argument pos:start="1678:31" pos:end="1678:36"><expr pos:start="1678:31" pos:end="1678:36"><literal type="string" pos:start="1678:31" pos:end="1678:36">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="1680:5" pos:end="1681:70">for <control pos:start="1680:9" pos:end="1680:61">(<init pos:start="1680:10" pos:end="1680:15"><expr pos:start="1680:10" pos:end="1680:14"><name pos:start="1680:10" pos:end="1680:10">i</name> <operator pos:start="1680:12" pos:end="1680:12">=</operator> <literal type="number" pos:start="1680:14" pos:end="1680:14">0</literal></expr>;</init> <condition pos:start="1680:17" pos:end="1680:56"><expr pos:start="1680:17" pos:end="1680:55"><name pos:start="1680:17" pos:end="1680:20">name</name> <operator pos:start="1680:22" pos:end="1680:22">=</operator> <call pos:start="1680:24" pos:end="1680:55"><name pos:start="1680:24" pos:end="1680:46">av_get_known_color_name</name><argument_list pos:start="1680:47" pos:end="1680:55">(<argument pos:start="1680:48" pos:end="1680:48"><expr pos:start="1680:48" pos:end="1680:48"><name pos:start="1680:48" pos:end="1680:48">i</name></expr></argument>, <argument pos:start="1680:51" pos:end="1680:54"><expr pos:start="1680:51" pos:end="1680:54"><operator pos:start="1680:51" pos:end="1680:51">&amp;</operator><name pos:start="1680:52" pos:end="1680:54">rgb</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="1680:58" pos:end="1680:60"><expr pos:start="1680:58" pos:end="1680:60"><name pos:start="1680:58" pos:end="1680:58">i</name><operator pos:start="1680:59" pos:end="1680:60">++</operator></expr></incr>)</control><block type="pseudo" pos:start="1681:9" pos:end="1681:70"><block_content pos:start="1681:9" pos:end="1681:70">
        <expr_stmt pos:start="1681:9" pos:end="1681:70"><expr pos:start="1681:9" pos:end="1681:69"><call pos:start="1681:9" pos:end="1681:69"><name pos:start="1681:9" pos:end="1681:14">printf</name><argument_list pos:start="1681:15" pos:end="1681:69">(<argument pos:start="1681:16" pos:end="1681:38"><expr pos:start="1681:16" pos:end="1681:38"><literal type="string" pos:start="1681:16" pos:end="1681:38">"%-32s #%02x%02x%02x\n"</literal></expr></argument>, <argument pos:start="1681:41" pos:end="1681:44"><expr pos:start="1681:41" pos:end="1681:44"><name pos:start="1681:41" pos:end="1681:44">name</name></expr></argument>, <argument pos:start="1681:47" pos:end="1681:52"><expr pos:start="1681:47" pos:end="1681:52"><name pos:start="1681:47" pos:end="1681:52"><name pos:start="1681:47" pos:end="1681:49">rgb</name><index pos:start="1681:50" pos:end="1681:52">[<expr pos:start="1681:51" pos:end="1681:51"><literal type="number" pos:start="1681:51" pos:end="1681:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1681:55" pos:end="1681:60"><expr pos:start="1681:55" pos:end="1681:60"><name pos:start="1681:55" pos:end="1681:60"><name pos:start="1681:55" pos:end="1681:57">rgb</name><index pos:start="1681:58" pos:end="1681:60">[<expr pos:start="1681:59" pos:end="1681:59"><literal type="number" pos:start="1681:59" pos:end="1681:59">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1681:63" pos:end="1681:68"><expr pos:start="1681:63" pos:end="1681:68"><name pos:start="1681:63" pos:end="1681:68"><name pos:start="1681:63" pos:end="1681:65">rgb</name><index pos:start="1681:66" pos:end="1681:68">[<expr pos:start="1681:67" pos:end="1681:67"><literal type="number" pos:start="1681:67" pos:end="1681:67">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <return pos:start="1683:5" pos:end="1683:13">return <expr pos:start="1683:12" pos:end="1683:12"><literal type="number" pos:start="1683:12" pos:end="1683:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="1686:1" pos:end="1717:1"><type pos:start="1686:1" pos:end="1686:3"><name pos:start="1686:1" pos:end="1686:3">int</name></type> <name pos:start="1686:5" pos:end="1686:17">show_pix_fmts</name><parameter_list pos:start="1686:18" pos:end="1686:65">(<parameter pos:start="1686:19" pos:end="1686:30"><decl pos:start="1686:19" pos:end="1686:30"><type pos:start="1686:19" pos:end="1686:30"><name pos:start="1686:19" pos:end="1686:22">void</name> <modifier pos:start="1686:24" pos:end="1686:24">*</modifier></type><name pos:start="1686:25" pos:end="1686:30">optctx</name></decl></parameter>, <parameter pos:start="1686:33" pos:end="1686:47"><decl pos:start="1686:33" pos:end="1686:47"><type pos:start="1686:33" pos:end="1686:47"><specifier pos:start="1686:33" pos:end="1686:37">const</specifier> <name pos:start="1686:39" pos:end="1686:42">char</name> <modifier pos:start="1686:44" pos:end="1686:44">*</modifier></type><name pos:start="1686:45" pos:end="1686:47">opt</name></decl></parameter>, <parameter pos:start="1686:50" pos:end="1686:64"><decl pos:start="1686:50" pos:end="1686:64"><type pos:start="1686:50" pos:end="1686:64"><specifier pos:start="1686:50" pos:end="1686:54">const</specifier> <name pos:start="1686:56" pos:end="1686:59">char</name> <modifier pos:start="1686:61" pos:end="1686:61">*</modifier></type><name pos:start="1686:62" pos:end="1686:64">arg</name></decl></parameter>)</parameter_list>
<block pos:start="1687:1" pos:end="1717:1">{<block_content pos:start="1688:5" pos:end="1716:13">
    <decl_stmt pos:start="1688:5" pos:end="1688:46"><decl pos:start="1688:5" pos:end="1688:45"><type pos:start="1688:5" pos:end="1688:30"><specifier pos:start="1688:5" pos:end="1688:9">const</specifier> <name pos:start="1688:11" pos:end="1688:28">AVPixFmtDescriptor</name> <modifier pos:start="1688:30" pos:end="1688:30">*</modifier></type><name pos:start="1688:31" pos:end="1688:38">pix_desc</name> <init pos:start="1688:40" pos:end="1688:45">= <expr pos:start="1688:42" pos:end="1688:45"><name pos:start="1688:42" pos:end="1688:45">NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="1690:5" pos:end="1703:0"><expr pos:start="1690:5" pos:end="1697:21"><call pos:start="1690:5" pos:end="1697:21"><name pos:start="1690:5" pos:end="1690:10">printf</name><argument_list pos:start="1690:11" pos:end="1697:21">(<argument pos:start="1690:12" pos:end="1697:20"><expr pos:start="1690:12" pos:end="1697:20"><literal type="string" pos:start="1690:12" pos:end="1690:29">"Pixel formats:\n"</literal>
           <literal type="string" pos:start="1691:12" pos:end="1691:61">"I.... = Supported Input  format for conversion\n"</literal>
           <literal type="string" pos:start="1692:12" pos:end="1692:61">".O... = Supported Output format for conversion\n"</literal>
           <literal type="string" pos:start="1693:12" pos:end="1693:50">"..H.. = Hardware accelerated format\n"</literal>
           <literal type="string" pos:start="1694:12" pos:end="1694:38">"...P. = Paletted format\n"</literal>
           <literal type="string" pos:start="1695:12" pos:end="1695:39">"....B = Bitstream format\n"</literal>
           <literal type="string" pos:start="1696:12" pos:end="1696:65">"FLAGS NAME            NB_COMPONENTS BITS_PER_PIXEL\n"</literal>
           <literal type="string" pos:start="1697:12" pos:end="1697:20">"-----\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="1699:1" pos:end="1699:19">#<cpp:directive pos:start="1699:2" pos:end="1699:3">if</cpp:directive> <expr pos:start="1699:5" pos:end="1699:19"><operator pos:start="1699:5" pos:end="1699:5">!</operator><name pos:start="1699:6" pos:end="1699:19">CONFIG_SWSCALE</name></expr></cpp:if>
<cpp:define pos:start="1700:1" pos:end="1700:37">#   <cpp:directive pos:start="1700:5" pos:end="1700:10">define</cpp:directive> <cpp:macro pos:start="1700:12" pos:end="1700:34"><name pos:start="1700:12" pos:end="1700:31">sws_isSupportedInput</name><parameter_list pos:start="1700:32" pos:end="1700:34">(<parameter pos:start="1700:33" pos:end="1700:33"><type pos:start="1700:33" pos:end="1700:33"><name pos:start="1700:33" pos:end="1700:33">x</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value pos:start="1700:37" pos:end="1700:37">0</cpp:value></cpp:define>
<cpp:define pos:start="1701:1" pos:end="1701:37">#   <cpp:directive pos:start="1701:5" pos:end="1701:10">define</cpp:directive> <cpp:macro pos:start="1701:12" pos:end="1701:35"><name pos:start="1701:12" pos:end="1701:32">sws_isSupportedOutput</name><parameter_list pos:start="1701:33" pos:end="1701:35">(<parameter pos:start="1701:34" pos:end="1701:34"><type pos:start="1701:34" pos:end="1701:34"><name pos:start="1701:34" pos:end="1701:34">x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="1701:37" pos:end="1701:37">0</cpp:value></cpp:define>
<cpp:endif pos:start="1702:1" pos:end="1702:6">#<cpp:directive pos:start="1702:2" pos:end="1702:6">endif</cpp:directive></cpp:endif>

    <while pos:start="1704:5" pos:end="1715:5">while <condition pos:start="1704:11" pos:end="1704:55">(<expr pos:start="1704:12" pos:end="1704:54"><operator pos:start="1704:12" pos:end="1704:12">(</operator><name pos:start="1704:13" pos:end="1704:20">pix_desc</name> <operator pos:start="1704:22" pos:end="1704:22">=</operator> <call pos:start="1704:24" pos:end="1704:53"><name pos:start="1704:24" pos:end="1704:43">av_pix_fmt_desc_next</name><argument_list pos:start="1704:44" pos:end="1704:53">(<argument pos:start="1704:45" pos:end="1704:52"><expr pos:start="1704:45" pos:end="1704:52"><name pos:start="1704:45" pos:end="1704:52">pix_desc</name></expr></argument>)</argument_list></call><operator pos:start="1704:54" pos:end="1704:54">)</operator></expr>)</condition> <block pos:start="1704:57" pos:end="1715:5">{<block_content pos:start="1705:9" pos:end="1714:48">
        <decl_stmt pos:start="1705:9" pos:end="1705:70"><decl pos:start="1705:9" pos:end="1705:69"><type pos:start="1705:9" pos:end="1705:26"><name pos:start="1705:9" pos:end="1705:26"><name pos:start="1705:9" pos:end="1705:12">enum</name> <name pos:start="1705:14" pos:end="1705:26">AVPixelFormat</name></name></type> <name pos:start="1705:28" pos:end="1705:34">pix_fmt</name> <init pos:start="1705:36" pos:end="1705:69">= <expr pos:start="1705:38" pos:end="1705:69"><call pos:start="1705:38" pos:end="1705:69"><name pos:start="1705:38" pos:end="1705:59">av_pix_fmt_desc_get_id</name><argument_list pos:start="1705:60" pos:end="1705:69">(<argument pos:start="1705:61" pos:end="1705:68"><expr pos:start="1705:61" pos:end="1705:68"><name pos:start="1705:61" pos:end="1705:68">pix_desc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="1706:9" pos:end="1714:48"><expr pos:start="1706:9" pos:end="1714:47"><call pos:start="1706:9" pos:end="1714:47"><name pos:start="1706:9" pos:end="1706:14">printf</name><argument_list pos:start="1706:15" pos:end="1714:47">(<argument pos:start="1706:16" pos:end="1706:59"><expr pos:start="1706:16" pos:end="1706:59"><literal type="string" pos:start="1706:16" pos:end="1706:59">"%c%c%c%c%c %-16s       %d            %2d\n"</literal></expr></argument>,
               <argument pos:start="1707:16" pos:end="1707:70"><expr pos:start="1707:16" pos:end="1707:70"><ternary pos:start="1707:16" pos:end="1707:70"><condition pos:start="1707:16" pos:end="1707:60"><expr pos:start="1707:16" pos:end="1707:45"><call pos:start="1707:16" pos:end="1707:45"><name pos:start="1707:16" pos:end="1707:35">sws_isSupportedInput</name> <argument_list pos:start="1707:37" pos:end="1707:45">(<argument pos:start="1707:38" pos:end="1707:44"><expr pos:start="1707:38" pos:end="1707:44"><name pos:start="1707:38" pos:end="1707:44">pix_fmt</name></expr></argument>)</argument_list></call></expr>              ?</condition><then pos:start="1707:62" pos:end="1707:64"> <expr pos:start="1707:62" pos:end="1707:64"><literal type="char" pos:start="1707:62" pos:end="1707:64">'I'</literal></expr> </then><else pos:start="1707:66" pos:end="1707:70">: <expr pos:start="1707:68" pos:end="1707:70"><literal type="char" pos:start="1707:68" pos:end="1707:70">'.'</literal></expr></else></ternary></expr></argument>,
               <argument pos:start="1708:16" pos:end="1708:70"><expr pos:start="1708:16" pos:end="1708:70"><ternary pos:start="1708:16" pos:end="1708:70"><condition pos:start="1708:16" pos:end="1708:60"><expr pos:start="1708:16" pos:end="1708:45"><call pos:start="1708:16" pos:end="1708:45"><name pos:start="1708:16" pos:end="1708:36">sws_isSupportedOutput</name><argument_list pos:start="1708:37" pos:end="1708:45">(<argument pos:start="1708:38" pos:end="1708:44"><expr pos:start="1708:38" pos:end="1708:44"><name pos:start="1708:38" pos:end="1708:44">pix_fmt</name></expr></argument>)</argument_list></call></expr>              ?</condition><then pos:start="1708:62" pos:end="1708:64"> <expr pos:start="1708:62" pos:end="1708:64"><literal type="char" pos:start="1708:62" pos:end="1708:64">'O'</literal></expr> </then><else pos:start="1708:66" pos:end="1708:70">: <expr pos:start="1708:68" pos:end="1708:70"><literal type="char" pos:start="1708:68" pos:end="1708:70">'.'</literal></expr></else></ternary></expr></argument>,
               <argument pos:start="1709:16" pos:end="1709:70"><expr pos:start="1709:16" pos:end="1709:70"><ternary pos:start="1709:16" pos:end="1709:70"><condition pos:start="1709:16" pos:end="1709:60"><expr pos:start="1709:16" pos:end="1709:56"><name pos:start="1709:16" pos:end="1709:30"><name pos:start="1709:16" pos:end="1709:23">pix_desc</name><operator pos:start="1709:24" pos:end="1709:25">-&gt;</operator><name pos:start="1709:26" pos:end="1709:30">flags</name></name> <operator pos:start="1709:32" pos:end="1709:32">&amp;</operator> <name pos:start="1709:34" pos:end="1709:56">AV_PIX_FMT_FLAG_HWACCEL</name></expr>   ?</condition><then pos:start="1709:62" pos:end="1709:64"> <expr pos:start="1709:62" pos:end="1709:64"><literal type="char" pos:start="1709:62" pos:end="1709:64">'H'</literal></expr> </then><else pos:start="1709:66" pos:end="1709:70">: <expr pos:start="1709:68" pos:end="1709:70"><literal type="char" pos:start="1709:68" pos:end="1709:70">'.'</literal></expr></else></ternary></expr></argument>,
               <argument pos:start="1710:16" pos:end="1710:70"><expr pos:start="1710:16" pos:end="1710:70"><ternary pos:start="1710:16" pos:end="1710:70"><condition pos:start="1710:16" pos:end="1710:60"><expr pos:start="1710:16" pos:end="1710:52"><name pos:start="1710:16" pos:end="1710:30"><name pos:start="1710:16" pos:end="1710:23">pix_desc</name><operator pos:start="1710:24" pos:end="1710:25">-&gt;</operator><name pos:start="1710:26" pos:end="1710:30">flags</name></name> <operator pos:start="1710:32" pos:end="1710:32">&amp;</operator> <name pos:start="1710:34" pos:end="1710:52">AV_PIX_FMT_FLAG_PAL</name></expr>       ?</condition><then pos:start="1710:62" pos:end="1710:64"> <expr pos:start="1710:62" pos:end="1710:64"><literal type="char" pos:start="1710:62" pos:end="1710:64">'P'</literal></expr> </then><else pos:start="1710:66" pos:end="1710:70">: <expr pos:start="1710:68" pos:end="1710:70"><literal type="char" pos:start="1710:68" pos:end="1710:70">'.'</literal></expr></else></ternary></expr></argument>,
               <argument pos:start="1711:16" pos:end="1711:70"><expr pos:start="1711:16" pos:end="1711:70"><ternary pos:start="1711:16" pos:end="1711:70"><condition pos:start="1711:16" pos:end="1711:60"><expr pos:start="1711:16" pos:end="1711:58"><name pos:start="1711:16" pos:end="1711:30"><name pos:start="1711:16" pos:end="1711:23">pix_desc</name><operator pos:start="1711:24" pos:end="1711:25">-&gt;</operator><name pos:start="1711:26" pos:end="1711:30">flags</name></name> <operator pos:start="1711:32" pos:end="1711:32">&amp;</operator> <name pos:start="1711:34" pos:end="1711:58">AV_PIX_FMT_FLAG_BITSTREAM</name></expr> ?</condition><then pos:start="1711:62" pos:end="1711:64"> <expr pos:start="1711:62" pos:end="1711:64"><literal type="char" pos:start="1711:62" pos:end="1711:64">'B'</literal></expr> </then><else pos:start="1711:66" pos:end="1711:70">: <expr pos:start="1711:68" pos:end="1711:70"><literal type="char" pos:start="1711:68" pos:end="1711:70">'.'</literal></expr></else></ternary></expr></argument>,
               <argument pos:start="1712:16" pos:end="1712:29"><expr pos:start="1712:16" pos:end="1712:29"><name pos:start="1712:16" pos:end="1712:29"><name pos:start="1712:16" pos:end="1712:23">pix_desc</name><operator pos:start="1712:24" pos:end="1712:25">-&gt;</operator><name pos:start="1712:26" pos:end="1712:29">name</name></name></expr></argument>,
               <argument pos:start="1713:16" pos:end="1713:38"><expr pos:start="1713:16" pos:end="1713:38"><name pos:start="1713:16" pos:end="1713:38"><name pos:start="1713:16" pos:end="1713:23">pix_desc</name><operator pos:start="1713:24" pos:end="1713:25">-&gt;</operator><name pos:start="1713:26" pos:end="1713:38">nb_components</name></name></expr></argument>,
               <argument pos:start="1714:16" pos:end="1714:46"><expr pos:start="1714:16" pos:end="1714:46"><call pos:start="1714:16" pos:end="1714:46"><name pos:start="1714:16" pos:end="1714:36">av_get_bits_per_pixel</name><argument_list pos:start="1714:37" pos:end="1714:46">(<argument pos:start="1714:38" pos:end="1714:45"><expr pos:start="1714:38" pos:end="1714:45"><name pos:start="1714:38" pos:end="1714:45">pix_desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return pos:start="1716:5" pos:end="1716:13">return <expr pos:start="1716:12" pos:end="1716:12"><literal type="number" pos:start="1716:12" pos:end="1716:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="1719:1" pos:end="1746:1"><type pos:start="1719:1" pos:end="1719:3"><name pos:start="1719:1" pos:end="1719:3">int</name></type> <name pos:start="1719:5" pos:end="1719:16">show_layouts</name><parameter_list pos:start="1719:17" pos:end="1719:64">(<parameter pos:start="1719:18" pos:end="1719:29"><decl pos:start="1719:18" pos:end="1719:29"><type pos:start="1719:18" pos:end="1719:29"><name pos:start="1719:18" pos:end="1719:21">void</name> <modifier pos:start="1719:23" pos:end="1719:23">*</modifier></type><name pos:start="1719:24" pos:end="1719:29">optctx</name></decl></parameter>, <parameter pos:start="1719:32" pos:end="1719:46"><decl pos:start="1719:32" pos:end="1719:46"><type pos:start="1719:32" pos:end="1719:46"><specifier pos:start="1719:32" pos:end="1719:36">const</specifier> <name pos:start="1719:38" pos:end="1719:41">char</name> <modifier pos:start="1719:43" pos:end="1719:43">*</modifier></type><name pos:start="1719:44" pos:end="1719:46">opt</name></decl></parameter>, <parameter pos:start="1719:49" pos:end="1719:63"><decl pos:start="1719:49" pos:end="1719:63"><type pos:start="1719:49" pos:end="1719:63"><specifier pos:start="1719:49" pos:end="1719:53">const</specifier> <name pos:start="1719:55" pos:end="1719:58">char</name> <modifier pos:start="1719:60" pos:end="1719:60">*</modifier></type><name pos:start="1719:61" pos:end="1719:63">arg</name></decl></parameter>)</parameter_list>
<block pos:start="1720:1" pos:end="1746:1">{<block_content pos:start="1721:5" pos:end="1745:13">
    <decl_stmt pos:start="1721:5" pos:end="1721:14"><decl pos:start="1721:5" pos:end="1721:13"><type pos:start="1721:5" pos:end="1721:7"><name pos:start="1721:5" pos:end="1721:7">int</name></type> <name pos:start="1721:9" pos:end="1721:9">i</name> <init pos:start="1721:11" pos:end="1721:13">= <expr pos:start="1721:13" pos:end="1721:13"><literal type="number" pos:start="1721:13" pos:end="1721:13">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1722:5" pos:end="1722:23"><decl pos:start="1722:5" pos:end="1722:19"><type pos:start="1722:5" pos:end="1722:12"><name pos:start="1722:5" pos:end="1722:12">uint64_t</name></type> <name pos:start="1722:14" pos:end="1722:19">layout</name></decl>, <decl pos:start="1722:22" pos:end="1722:22"><type ref="prev" pos:start="1722:5" pos:end="1722:12"/><name pos:start="1722:22" pos:end="1722:22">j</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1723:5" pos:end="1723:29"><decl pos:start="1723:5" pos:end="1723:20"><type pos:start="1723:5" pos:end="1723:16"><specifier pos:start="1723:5" pos:end="1723:9">const</specifier> <name pos:start="1723:11" pos:end="1723:14">char</name> <modifier pos:start="1723:16" pos:end="1723:16">*</modifier></type><name pos:start="1723:17" pos:end="1723:20">name</name></decl>, <decl pos:start="1723:23" pos:end="1723:28"><type ref="prev" pos:start="1723:5" pos:end="1723:16"><modifier pos:start="1723:23" pos:end="1723:23">*</modifier></type><name pos:start="1723:24" pos:end="1723:28">descr</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1725:5" pos:end="1726:43"><expr pos:start="1725:5" pos:end="1726:42"><call pos:start="1725:5" pos:end="1726:42"><name pos:start="1725:5" pos:end="1725:10">printf</name><argument_list pos:start="1725:11" pos:end="1726:42">(<argument pos:start="1725:12" pos:end="1726:41"><expr pos:start="1725:12" pos:end="1726:41"><literal type="string" pos:start="1725:12" pos:end="1725:35">"Individual channels:\n"</literal>
           <literal type="string" pos:start="1726:12" pos:end="1726:41">"NAME           DESCRIPTION\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="1727:5" pos:end="1733:5">for <control pos:start="1727:9" pos:end="1727:28">(<init pos:start="1727:10" pos:end="1727:15"><expr pos:start="1727:10" pos:end="1727:14"><name pos:start="1727:10" pos:end="1727:10">i</name> <operator pos:start="1727:12" pos:end="1727:12">=</operator> <literal type="number" pos:start="1727:14" pos:end="1727:14">0</literal></expr>;</init> <condition pos:start="1727:17" pos:end="1727:23"><expr pos:start="1727:17" pos:end="1727:22"><name pos:start="1727:17" pos:end="1727:17">i</name> <operator pos:start="1727:19" pos:end="1727:19">&lt;</operator> <literal type="number" pos:start="1727:21" pos:end="1727:22">63</literal></expr>;</condition> <incr pos:start="1727:25" pos:end="1727:27"><expr pos:start="1727:25" pos:end="1727:27"><name pos:start="1727:25" pos:end="1727:25">i</name><operator pos:start="1727:26" pos:end="1727:27">++</operator></expr></incr>)</control> <block pos:start="1727:30" pos:end="1733:5">{<block_content pos:start="1728:9" pos:end="1732:42">
        <expr_stmt pos:start="1728:9" pos:end="1728:53"><expr pos:start="1728:9" pos:end="1728:52"><name pos:start="1728:9" pos:end="1728:12">name</name> <operator pos:start="1728:14" pos:end="1728:14">=</operator> <call pos:start="1728:16" pos:end="1728:52"><name pos:start="1728:16" pos:end="1728:34">av_get_channel_name</name><argument_list pos:start="1728:35" pos:end="1728:52">(<argument pos:start="1728:36" pos:end="1728:51"><expr pos:start="1728:36" pos:end="1728:51"><operator pos:start="1728:36" pos:end="1728:36">(</operator><name pos:start="1728:37" pos:end="1728:44">uint64_t</name><operator pos:start="1728:45" pos:end="1728:45">)</operator><literal type="number" pos:start="1728:46" pos:end="1728:46">1</literal> <operator pos:start="1728:48" pos:end="1728:49">&lt;&lt;</operator> <name pos:start="1728:51" pos:end="1728:51">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1729:9" pos:end="1730:21"><if pos:start="1729:9" pos:end="1730:21">if <condition pos:start="1729:12" pos:end="1729:18">(<expr pos:start="1729:13" pos:end="1729:17"><operator pos:start="1729:13" pos:end="1729:13">!</operator><name pos:start="1729:14" pos:end="1729:17">name</name></expr>)</condition><block type="pseudo" pos:start="1730:13" pos:end="1730:21"><block_content pos:start="1730:13" pos:end="1730:21">
            <continue pos:start="1730:13" pos:end="1730:21">continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1731:9" pos:end="1731:61"><expr pos:start="1731:9" pos:end="1731:60"><name pos:start="1731:9" pos:end="1731:13">descr</name> <operator pos:start="1731:15" pos:end="1731:15">=</operator> <call pos:start="1731:17" pos:end="1731:60"><name pos:start="1731:17" pos:end="1731:42">av_get_channel_description</name><argument_list pos:start="1731:43" pos:end="1731:60">(<argument pos:start="1731:44" pos:end="1731:59"><expr pos:start="1731:44" pos:end="1731:59"><operator pos:start="1731:44" pos:end="1731:44">(</operator><name pos:start="1731:45" pos:end="1731:52">uint64_t</name><operator pos:start="1731:53" pos:end="1731:53">)</operator><literal type="number" pos:start="1731:54" pos:end="1731:54">1</literal> <operator pos:start="1731:56" pos:end="1731:57">&lt;&lt;</operator> <name pos:start="1731:59" pos:end="1731:59">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1732:9" pos:end="1732:42"><expr pos:start="1732:9" pos:end="1732:41"><call pos:start="1732:9" pos:end="1732:41"><name pos:start="1732:9" pos:end="1732:14">printf</name><argument_list pos:start="1732:15" pos:end="1732:41">(<argument pos:start="1732:16" pos:end="1732:27"><expr pos:start="1732:16" pos:end="1732:27"><literal type="string" pos:start="1732:16" pos:end="1732:27">"%-14s %s\n"</literal></expr></argument>, <argument pos:start="1732:30" pos:end="1732:33"><expr pos:start="1732:30" pos:end="1732:33"><name pos:start="1732:30" pos:end="1732:33">name</name></expr></argument>, <argument pos:start="1732:36" pos:end="1732:40"><expr pos:start="1732:36" pos:end="1732:40"><name pos:start="1732:36" pos:end="1732:40">descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="1734:5" pos:end="1735:45"><expr pos:start="1734:5" pos:end="1735:44"><call pos:start="1734:5" pos:end="1735:44"><name pos:start="1734:5" pos:end="1734:10">printf</name><argument_list pos:start="1734:11" pos:end="1735:44">(<argument pos:start="1734:12" pos:end="1735:43"><expr pos:start="1734:12" pos:end="1735:43"><literal type="string" pos:start="1734:12" pos:end="1734:42">"\nStandard channel layouts:\n"</literal>
           <literal type="string" pos:start="1735:12" pos:end="1735:43">"NAME           DECOMPOSITION\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="1736:5" pos:end="1744:5">for <control pos:start="1736:9" pos:end="1736:72">(<init pos:start="1736:10" pos:end="1736:15"><expr pos:start="1736:10" pos:end="1736:14"><name pos:start="1736:10" pos:end="1736:10">i</name> <operator pos:start="1736:12" pos:end="1736:12">=</operator> <literal type="number" pos:start="1736:14" pos:end="1736:14">0</literal></expr>;</init> <condition pos:start="1736:17" pos:end="1736:67"><expr pos:start="1736:17" pos:end="1736:66"><operator pos:start="1736:17" pos:end="1736:17">!</operator><call pos:start="1736:18" pos:end="1736:66"><name pos:start="1736:18" pos:end="1736:47">av_get_standard_channel_layout</name><argument_list pos:start="1736:48" pos:end="1736:66">(<argument pos:start="1736:49" pos:end="1736:49"><expr pos:start="1736:49" pos:end="1736:49"><name pos:start="1736:49" pos:end="1736:49">i</name></expr></argument>, <argument pos:start="1736:52" pos:end="1736:58"><expr pos:start="1736:52" pos:end="1736:58"><operator pos:start="1736:52" pos:end="1736:52">&amp;</operator><name pos:start="1736:53" pos:end="1736:58">layout</name></expr></argument>, <argument pos:start="1736:61" pos:end="1736:65"><expr pos:start="1736:61" pos:end="1736:65"><operator pos:start="1736:61" pos:end="1736:61">&amp;</operator><name pos:start="1736:62" pos:end="1736:65">name</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="1736:69" pos:end="1736:71"><expr pos:start="1736:69" pos:end="1736:71"><name pos:start="1736:69" pos:end="1736:69">i</name><operator pos:start="1736:70" pos:end="1736:71">++</operator></expr></incr>)</control> <block pos:start="1736:74" pos:end="1744:5">{<block_content pos:start="1737:9" pos:end="1743:9">
        <if_stmt pos:start="1737:9" pos:end="1743:9"><if pos:start="1737:9" pos:end="1743:9">if <condition pos:start="1737:12" pos:end="1737:17">(<expr pos:start="1737:13" pos:end="1737:16"><name pos:start="1737:13" pos:end="1737:16">name</name></expr>)</condition> <block pos:start="1737:19" pos:end="1743:9">{<block_content pos:start="1738:13" pos:end="1742:25">
            <expr_stmt pos:start="1738:13" pos:end="1738:35"><expr pos:start="1738:13" pos:end="1738:34"><call pos:start="1738:13" pos:end="1738:34"><name pos:start="1738:13" pos:end="1738:18">printf</name><argument_list pos:start="1738:19" pos:end="1738:34">(<argument pos:start="1738:20" pos:end="1738:27"><expr pos:start="1738:20" pos:end="1738:27"><literal type="string" pos:start="1738:20" pos:end="1738:27">"%-14s "</literal></expr></argument>, <argument pos:start="1738:30" pos:end="1738:33"><expr pos:start="1738:30" pos:end="1738:33"><name pos:start="1738:30" pos:end="1738:33">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for pos:start="1739:13" pos:end="1741:90">for <control pos:start="1739:17" pos:end="1739:35">(<init pos:start="1739:18" pos:end="1739:23"><expr pos:start="1739:18" pos:end="1739:22"><name pos:start="1739:18" pos:end="1739:18">j</name> <operator pos:start="1739:20" pos:end="1739:20">=</operator> <literal type="number" pos:start="1739:22" pos:end="1739:22">1</literal></expr>;</init> <condition pos:start="1739:25" pos:end="1739:26"><expr pos:start="1739:25" pos:end="1739:25"><name pos:start="1739:25" pos:end="1739:25">j</name></expr>;</condition> <incr pos:start="1739:28" pos:end="1739:34"><expr pos:start="1739:28" pos:end="1739:34"><name pos:start="1739:28" pos:end="1739:28">j</name> <operator pos:start="1739:30" pos:end="1739:32">&lt;&lt;=</operator> <literal type="number" pos:start="1739:34" pos:end="1739:34">1</literal></expr></incr>)</control><block type="pseudo" pos:start="1740:17" pos:end="1741:90"><block_content pos:start="1740:17" pos:end="1741:90">
                <if_stmt pos:start="1740:17" pos:end="1741:90"><if pos:start="1740:17" pos:end="1741:90">if <condition pos:start="1740:20" pos:end="1740:33">(<expr pos:start="1740:21" pos:end="1740:32"><operator pos:start="1740:21" pos:end="1740:21">(</operator><name pos:start="1740:22" pos:end="1740:27">layout</name> <operator pos:start="1740:29" pos:end="1740:29">&amp;</operator> <name pos:start="1740:31" pos:end="1740:31">j</name><operator pos:start="1740:32" pos:end="1740:32">)</operator></expr>)</condition><block type="pseudo" pos:start="1741:21" pos:end="1741:90"><block_content pos:start="1741:21" pos:end="1741:90">
                    <expr_stmt pos:start="1741:21" pos:end="1741:90"><expr pos:start="1741:21" pos:end="1741:89"><call pos:start="1741:21" pos:end="1741:89"><name pos:start="1741:21" pos:end="1741:26">printf</name><argument_list pos:start="1741:27" pos:end="1741:89">(<argument pos:start="1741:28" pos:end="1741:33"><expr pos:start="1741:28" pos:end="1741:33"><literal type="string" pos:start="1741:28" pos:end="1741:33">"%s%s"</literal></expr></argument>, <argument pos:start="1741:36" pos:end="1741:64"><expr pos:start="1741:36" pos:end="1741:64"><ternary pos:start="1741:36" pos:end="1741:64"><condition pos:start="1741:36" pos:end="1741:55"><expr pos:start="1741:36" pos:end="1741:53"><operator pos:start="1741:36" pos:end="1741:36">(</operator><name pos:start="1741:37" pos:end="1741:42">layout</name> <operator pos:start="1741:44" pos:end="1741:44">&amp;</operator> <operator pos:start="1741:46" pos:end="1741:46">(</operator><name pos:start="1741:47" pos:end="1741:47">j</name> <operator pos:start="1741:49" pos:end="1741:49">-</operator> <literal type="number" pos:start="1741:51" pos:end="1741:51">1</literal><operator pos:start="1741:52" pos:end="1741:52">)</operator><operator pos:start="1741:53" pos:end="1741:53">)</operator></expr> ?</condition><then pos:start="1741:57" pos:end="1741:59"> <expr pos:start="1741:57" pos:end="1741:59"><literal type="string" pos:start="1741:57" pos:end="1741:59">"+"</literal></expr> </then><else pos:start="1741:61" pos:end="1741:64">: <expr pos:start="1741:63" pos:end="1741:64"><literal type="string" pos:start="1741:63" pos:end="1741:64">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="1741:67" pos:end="1741:88"><expr pos:start="1741:67" pos:end="1741:88"><call pos:start="1741:67" pos:end="1741:88"><name pos:start="1741:67" pos:end="1741:85">av_get_channel_name</name><argument_list pos:start="1741:86" pos:end="1741:88">(<argument pos:start="1741:87" pos:end="1741:87"><expr pos:start="1741:87" pos:end="1741:87"><name pos:start="1741:87" pos:end="1741:87">j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
            <expr_stmt pos:start="1742:13" pos:end="1742:25"><expr pos:start="1742:13" pos:end="1742:24"><call pos:start="1742:13" pos:end="1742:24"><name pos:start="1742:13" pos:end="1742:18">printf</name><argument_list pos:start="1742:19" pos:end="1742:24">(<argument pos:start="1742:20" pos:end="1742:23"><expr pos:start="1742:20" pos:end="1742:23"><literal type="string" pos:start="1742:20" pos:end="1742:23">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return pos:start="1745:5" pos:end="1745:13">return <expr pos:start="1745:12" pos:end="1745:12"><literal type="number" pos:start="1745:12" pos:end="1745:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="1748:1" pos:end="1755:1"><type pos:start="1748:1" pos:end="1748:3"><name pos:start="1748:1" pos:end="1748:3">int</name></type> <name pos:start="1748:5" pos:end="1748:20">show_sample_fmts</name><parameter_list pos:start="1748:21" pos:end="1748:68">(<parameter pos:start="1748:22" pos:end="1748:33"><decl pos:start="1748:22" pos:end="1748:33"><type pos:start="1748:22" pos:end="1748:33"><name pos:start="1748:22" pos:end="1748:25">void</name> <modifier pos:start="1748:27" pos:end="1748:27">*</modifier></type><name pos:start="1748:28" pos:end="1748:33">optctx</name></decl></parameter>, <parameter pos:start="1748:36" pos:end="1748:50"><decl pos:start="1748:36" pos:end="1748:50"><type pos:start="1748:36" pos:end="1748:50"><specifier pos:start="1748:36" pos:end="1748:40">const</specifier> <name pos:start="1748:42" pos:end="1748:45">char</name> <modifier pos:start="1748:47" pos:end="1748:47">*</modifier></type><name pos:start="1748:48" pos:end="1748:50">opt</name></decl></parameter>, <parameter pos:start="1748:53" pos:end="1748:67"><decl pos:start="1748:53" pos:end="1748:67"><type pos:start="1748:53" pos:end="1748:67"><specifier pos:start="1748:53" pos:end="1748:57">const</specifier> <name pos:start="1748:59" pos:end="1748:62">char</name> <modifier pos:start="1748:64" pos:end="1748:64">*</modifier></type><name pos:start="1748:65" pos:end="1748:67">arg</name></decl></parameter>)</parameter_list>
<block pos:start="1749:1" pos:end="1755:1">{<block_content pos:start="1750:5" pos:end="1754:13">
    <decl_stmt pos:start="1750:5" pos:end="1750:10"><decl pos:start="1750:5" pos:end="1750:9"><type pos:start="1750:5" pos:end="1750:7"><name pos:start="1750:5" pos:end="1750:7">int</name></type> <name pos:start="1750:9" pos:end="1750:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1751:5" pos:end="1751:22"><decl pos:start="1751:5" pos:end="1751:21"><type pos:start="1751:5" pos:end="1751:8"><name pos:start="1751:5" pos:end="1751:8">char</name></type> <name pos:start="1751:10" pos:end="1751:21"><name pos:start="1751:10" pos:end="1751:16">fmt_str</name><index pos:start="1751:17" pos:end="1751:21">[<expr pos:start="1751:18" pos:end="1751:20"><literal type="number" pos:start="1751:18" pos:end="1751:20">128</literal></expr>]</index></name></decl>;</decl_stmt>
    <for pos:start="1752:5" pos:end="1753:78">for <control pos:start="1752:9" pos:end="1752:43">(<init pos:start="1752:10" pos:end="1752:16"><expr pos:start="1752:10" pos:end="1752:15"><name pos:start="1752:10" pos:end="1752:10">i</name> <operator pos:start="1752:12" pos:end="1752:12">=</operator> <operator pos:start="1752:14" pos:end="1752:14">-</operator><literal type="number" pos:start="1752:15" pos:end="1752:15">1</literal></expr>;</init> <condition pos:start="1752:18" pos:end="1752:38"><expr pos:start="1752:18" pos:end="1752:37"><name pos:start="1752:18" pos:end="1752:18">i</name> <operator pos:start="1752:20" pos:end="1752:20">&lt;</operator> <name pos:start="1752:22" pos:end="1752:37">AV_SAMPLE_FMT_NB</name></expr>;</condition> <incr pos:start="1752:40" pos:end="1752:42"><expr pos:start="1752:40" pos:end="1752:42"><name pos:start="1752:40" pos:end="1752:40">i</name><operator pos:start="1752:41" pos:end="1752:42">++</operator></expr></incr>)</control><block type="pseudo" pos:start="1753:9" pos:end="1753:78"><block_content pos:start="1753:9" pos:end="1753:78">
        <expr_stmt pos:start="1753:9" pos:end="1753:78"><expr pos:start="1753:9" pos:end="1753:77"><call pos:start="1753:9" pos:end="1753:77"><name pos:start="1753:9" pos:end="1753:14">printf</name><argument_list pos:start="1753:15" pos:end="1753:77">(<argument pos:start="1753:16" pos:end="1753:21"><expr pos:start="1753:16" pos:end="1753:21"><literal type="string" pos:start="1753:16" pos:end="1753:21">"%s\n"</literal></expr></argument>, <argument pos:start="1753:24" pos:end="1753:76"><expr pos:start="1753:24" pos:end="1753:76"><call pos:start="1753:24" pos:end="1753:76"><name pos:start="1753:24" pos:end="1753:47">av_get_sample_fmt_string</name><argument_list pos:start="1753:48" pos:end="1753:76">(<argument pos:start="1753:49" pos:end="1753:55"><expr pos:start="1753:49" pos:end="1753:55"><name pos:start="1753:49" pos:end="1753:55">fmt_str</name></expr></argument>, <argument pos:start="1753:58" pos:end="1753:72"><expr pos:start="1753:58" pos:end="1753:72"><sizeof pos:start="1753:58" pos:end="1753:72">sizeof<argument_list pos:start="1753:64" pos:end="1753:72">(<argument pos:start="1753:65" pos:end="1753:71"><expr pos:start="1753:65" pos:end="1753:71"><name pos:start="1753:65" pos:end="1753:71">fmt_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1753:75" pos:end="1753:75"><expr pos:start="1753:75" pos:end="1753:75"><name pos:start="1753:75" pos:end="1753:75">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <return pos:start="1754:5" pos:end="1754:13">return <expr pos:start="1754:12" pos:end="1754:12"><literal type="number" pos:start="1754:12" pos:end="1754:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="1757:1" pos:end="1790:1"><type pos:start="1757:1" pos:end="1757:11"><specifier pos:start="1757:1" pos:end="1757:6">static</specifier> <name pos:start="1757:8" pos:end="1757:11">void</name></type> <name pos:start="1757:13" pos:end="1757:27">show_help_codec</name><parameter_list pos:start="1757:28" pos:end="1757:58">(<parameter pos:start="1757:29" pos:end="1757:44"><decl pos:start="1757:29" pos:end="1757:44"><type pos:start="1757:29" pos:end="1757:44"><specifier pos:start="1757:29" pos:end="1757:33">const</specifier> <name pos:start="1757:35" pos:end="1757:38">char</name> <modifier pos:start="1757:40" pos:end="1757:40">*</modifier></type><name pos:start="1757:41" pos:end="1757:44">name</name></decl></parameter>, <parameter pos:start="1757:47" pos:end="1757:57"><decl pos:start="1757:47" pos:end="1757:57"><type pos:start="1757:47" pos:end="1757:57"><name pos:start="1757:47" pos:end="1757:49">int</name></type> <name pos:start="1757:51" pos:end="1757:57">encoder</name></decl></parameter>)</parameter_list>
<block pos:start="1758:1" pos:end="1790:1">{<block_content pos:start="1759:5" pos:end="1789:5">
    <decl_stmt pos:start="1759:5" pos:end="1759:34"><decl pos:start="1759:5" pos:end="1759:33"><type pos:start="1759:5" pos:end="1759:29"><specifier pos:start="1759:5" pos:end="1759:9">const</specifier> <name pos:start="1759:11" pos:end="1759:27">AVCodecDescriptor</name> <modifier pos:start="1759:29" pos:end="1759:29">*</modifier></type><name pos:start="1759:30" pos:end="1759:33">desc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1760:5" pos:end="1760:25"><decl pos:start="1760:5" pos:end="1760:24"><type pos:start="1760:5" pos:end="1760:19"><specifier pos:start="1760:5" pos:end="1760:9">const</specifier> <name pos:start="1760:11" pos:end="1760:17">AVCodec</name> <modifier pos:start="1760:19" pos:end="1760:19">*</modifier></type><name pos:start="1760:20" pos:end="1760:24">codec</name></decl>;</decl_stmt>

    <if_stmt pos:start="1762:5" pos:end="1765:5"><if pos:start="1762:5" pos:end="1765:5">if <condition pos:start="1762:8" pos:end="1762:14">(<expr pos:start="1762:9" pos:end="1762:13"><operator pos:start="1762:9" pos:end="1762:9">!</operator><name pos:start="1762:10" pos:end="1762:13">name</name></expr>)</condition> <block pos:start="1762:16" pos:end="1765:5">{<block_content pos:start="1763:9" pos:end="1764:15">
        <expr_stmt pos:start="1763:9" pos:end="1763:65"><expr pos:start="1763:9" pos:end="1763:64"><call pos:start="1763:9" pos:end="1763:64"><name pos:start="1763:9" pos:end="1763:14">av_log</name><argument_list pos:start="1763:15" pos:end="1763:64">(<argument pos:start="1763:16" pos:end="1763:19"><expr pos:start="1763:16" pos:end="1763:19"><name pos:start="1763:16" pos:end="1763:19">NULL</name></expr></argument>, <argument pos:start="1763:22" pos:end="1763:33"><expr pos:start="1763:22" pos:end="1763:33"><name pos:start="1763:22" pos:end="1763:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="1763:36" pos:end="1763:63"><expr pos:start="1763:36" pos:end="1763:63"><literal type="string" pos:start="1763:36" pos:end="1763:63">"No codec name specified.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1764:9" pos:end="1764:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1767:5" pos:end="1768:57"><expr pos:start="1767:5" pos:end="1768:56"><name pos:start="1767:5" pos:end="1767:9">codec</name> <operator pos:start="1767:11" pos:end="1767:11">=</operator> <ternary pos:start="1767:13" pos:end="1768:56"><condition pos:start="1767:13" pos:end="1767:21"><expr pos:start="1767:13" pos:end="1767:19"><name pos:start="1767:13" pos:end="1767:19">encoder</name></expr> ?</condition><then pos:start="1767:23" pos:end="1767:56"> <expr pos:start="1767:23" pos:end="1767:56"><call pos:start="1767:23" pos:end="1767:56"><name pos:start="1767:23" pos:end="1767:50">avcodec_find_encoder_by_name</name><argument_list pos:start="1767:51" pos:end="1767:56">(<argument pos:start="1767:52" pos:end="1767:55"><expr pos:start="1767:52" pos:end="1767:55"><name pos:start="1767:52" pos:end="1767:55">name</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="1767:58" pos:end="1768:56">:
                      <expr pos:start="1768:23" pos:end="1768:56"><call pos:start="1768:23" pos:end="1768:56"><name pos:start="1768:23" pos:end="1768:50">avcodec_find_decoder_by_name</name><argument_list pos:start="1768:51" pos:end="1768:56">(<argument pos:start="1768:52" pos:end="1768:55"><expr pos:start="1768:52" pos:end="1768:55"><name pos:start="1768:52" pos:end="1768:55">name</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

    <if_stmt pos:start="1770:5" pos:end="1789:5"><if pos:start="1770:5" pos:end="1771:27">if <condition pos:start="1770:8" pos:end="1770:14">(<expr pos:start="1770:9" pos:end="1770:13"><name pos:start="1770:9" pos:end="1770:13">codec</name></expr>)</condition><block type="pseudo" pos:start="1771:9" pos:end="1771:27"><block_content pos:start="1771:9" pos:end="1771:27">
        <expr_stmt pos:start="1771:9" pos:end="1771:27"><expr pos:start="1771:9" pos:end="1771:26"><call pos:start="1771:9" pos:end="1771:26"><name pos:start="1771:9" pos:end="1771:19">print_codec</name><argument_list pos:start="1771:20" pos:end="1771:26">(<argument pos:start="1771:21" pos:end="1771:25"><expr pos:start="1771:21" pos:end="1771:25"><name pos:start="1771:21" pos:end="1771:25">codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif" pos:start="1772:5" pos:end="1786:5">else if <condition pos:start="1772:13" pos:end="1772:59">(<expr pos:start="1772:14" pos:end="1772:58"><operator pos:start="1772:14" pos:end="1772:14">(</operator><name pos:start="1772:15" pos:end="1772:18">desc</name> <operator pos:start="1772:20" pos:end="1772:20">=</operator> <call pos:start="1772:22" pos:end="1772:57"><name pos:start="1772:22" pos:end="1772:51">avcodec_descriptor_get_by_name</name><argument_list pos:start="1772:52" pos:end="1772:57">(<argument pos:start="1772:53" pos:end="1772:56"><expr pos:start="1772:53" pos:end="1772:56"><name pos:start="1772:53" pos:end="1772:56">name</name></expr></argument>)</argument_list></call><operator pos:start="1772:58" pos:end="1772:58">)</operator></expr>)</condition> <block pos:start="1772:61" pos:end="1786:5">{<block_content pos:start="1773:9" pos:end="1785:9">
        <decl_stmt pos:start="1773:9" pos:end="1773:24"><decl pos:start="1773:9" pos:end="1773:23"><type pos:start="1773:9" pos:end="1773:11"><name pos:start="1773:9" pos:end="1773:11">int</name></type> <name pos:start="1773:13" pos:end="1773:19">printed</name> <init pos:start="1773:21" pos:end="1773:23">= <expr pos:start="1773:23" pos:end="1773:23"><literal type="number" pos:start="1773:23" pos:end="1773:23">0</literal></expr></init></decl>;</decl_stmt>

        <while pos:start="1775:9" pos:end="1778:9">while <condition pos:start="1775:15" pos:end="1775:69">(<expr pos:start="1775:16" pos:end="1775:68"><operator pos:start="1775:16" pos:end="1775:16">(</operator><name pos:start="1775:17" pos:end="1775:21">codec</name> <operator pos:start="1775:23" pos:end="1775:23">=</operator> <call pos:start="1775:25" pos:end="1775:67"><name pos:start="1775:25" pos:end="1775:41">next_codec_for_id</name><argument_list pos:start="1775:42" pos:end="1775:67">(<argument pos:start="1775:43" pos:end="1775:50"><expr pos:start="1775:43" pos:end="1775:50"><name pos:start="1775:43" pos:end="1775:50"><name pos:start="1775:43" pos:end="1775:46">desc</name><operator pos:start="1775:47" pos:end="1775:48">-&gt;</operator><name pos:start="1775:49" pos:end="1775:50">id</name></name></expr></argument>, <argument pos:start="1775:53" pos:end="1775:57"><expr pos:start="1775:53" pos:end="1775:57"><name pos:start="1775:53" pos:end="1775:57">codec</name></expr></argument>, <argument pos:start="1775:60" pos:end="1775:66"><expr pos:start="1775:60" pos:end="1775:66"><name pos:start="1775:60" pos:end="1775:66">encoder</name></expr></argument>)</argument_list></call><operator pos:start="1775:68" pos:end="1775:68">)</operator></expr>)</condition> <block pos:start="1775:71" pos:end="1778:9">{<block_content pos:start="1776:13" pos:end="1777:31">
            <expr_stmt pos:start="1776:13" pos:end="1776:24"><expr pos:start="1776:13" pos:end="1776:23"><name pos:start="1776:13" pos:end="1776:19">printed</name> <operator pos:start="1776:21" pos:end="1776:21">=</operator> <literal type="number" pos:start="1776:23" pos:end="1776:23">1</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="1777:13" pos:end="1777:31"><expr pos:start="1777:13" pos:end="1777:30"><call pos:start="1777:13" pos:end="1777:30"><name pos:start="1777:13" pos:end="1777:23">print_codec</name><argument_list pos:start="1777:24" pos:end="1777:30">(<argument pos:start="1777:25" pos:end="1777:29"><expr pos:start="1777:25" pos:end="1777:29"><name pos:start="1777:25" pos:end="1777:29">codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <if_stmt pos:start="1780:9" pos:end="1785:9"><if pos:start="1780:9" pos:end="1785:9">if <condition pos:start="1780:12" pos:end="1780:21">(<expr pos:start="1780:13" pos:end="1780:20"><operator pos:start="1780:13" pos:end="1780:13">!</operator><name pos:start="1780:14" pos:end="1780:20">printed</name></expr>)</condition> <block pos:start="1780:23" pos:end="1785:9">{<block_content pos:start="1781:13" pos:end="1784:60">
            <expr_stmt pos:start="1781:13" pos:end="1784:60"><expr pos:start="1781:13" pos:end="1784:59"><call pos:start="1781:13" pos:end="1784:59"><name pos:start="1781:13" pos:end="1781:18">av_log</name><argument_list pos:start="1781:19" pos:end="1784:59">(<argument pos:start="1781:20" pos:end="1781:23"><expr pos:start="1781:20" pos:end="1781:23"><name pos:start="1781:20" pos:end="1781:23">NULL</name></expr></argument>, <argument pos:start="1781:26" pos:end="1781:37"><expr pos:start="1781:26" pos:end="1781:37"><name pos:start="1781:26" pos:end="1781:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="1781:40" pos:end="1783:69"><expr pos:start="1781:40" pos:end="1783:69"><literal type="string" pos:start="1781:40" pos:end="1781:72">"Codec '%s' is known to FFmpeg, "</literal>
                   <literal type="string" pos:start="1782:20" pos:end="1782:77">"but no %s for it are available. FFmpeg might need to be "</literal>
                   <literal type="string" pos:start="1783:20" pos:end="1783:69">"recompiled with additional external libraries.\n"</literal></expr></argument>,
                   <argument pos:start="1784:20" pos:end="1784:23"><expr pos:start="1784:20" pos:end="1784:23"><name pos:start="1784:20" pos:end="1784:23">name</name></expr></argument>, <argument pos:start="1784:26" pos:end="1784:58"><expr pos:start="1784:26" pos:end="1784:58"><ternary pos:start="1784:26" pos:end="1784:58"><condition pos:start="1784:26" pos:end="1784:34"><expr pos:start="1784:26" pos:end="1784:32"><name pos:start="1784:26" pos:end="1784:32">encoder</name></expr> ?</condition><then pos:start="1784:36" pos:end="1784:45"> <expr pos:start="1784:36" pos:end="1784:45"><literal type="string" pos:start="1784:36" pos:end="1784:45">"encoders"</literal></expr> </then><else pos:start="1784:47" pos:end="1784:58">: <expr pos:start="1784:49" pos:end="1784:58"><literal type="string" pos:start="1784:49" pos:end="1784:58">"decoders"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else pos:start="1786:7" pos:end="1789:5">else <block pos:start="1786:12" pos:end="1789:5">{<block_content pos:start="1787:9" pos:end="1788:21">
        <expr_stmt pos:start="1787:9" pos:end="1788:21"><expr pos:start="1787:9" pos:end="1788:20"><call pos:start="1787:9" pos:end="1788:20"><name pos:start="1787:9" pos:end="1787:14">av_log</name><argument_list pos:start="1787:15" pos:end="1788:20">(<argument pos:start="1787:16" pos:end="1787:19"><expr pos:start="1787:16" pos:end="1787:19"><name pos:start="1787:16" pos:end="1787:19">NULL</name></expr></argument>, <argument pos:start="1787:22" pos:end="1787:33"><expr pos:start="1787:22" pos:end="1787:33"><name pos:start="1787:22" pos:end="1787:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="1787:36" pos:end="1787:78"><expr pos:start="1787:36" pos:end="1787:78"><literal type="string" pos:start="1787:36" pos:end="1787:78">"Codec '%s' is not recognized by FFmpeg.\n"</literal></expr></argument>,
               <argument pos:start="1788:16" pos:end="1788:19"><expr pos:start="1788:16" pos:end="1788:19"><name pos:start="1788:16" pos:end="1788:19">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function pos:start="1792:1" pos:end="1808:1"><type pos:start="1792:1" pos:end="1792:11"><specifier pos:start="1792:1" pos:end="1792:6">static</specifier> <name pos:start="1792:8" pos:end="1792:11">void</name></type> <name pos:start="1792:13" pos:end="1792:29">show_help_demuxer</name><parameter_list pos:start="1792:30" pos:end="1792:47">(<parameter pos:start="1792:31" pos:end="1792:46"><decl pos:start="1792:31" pos:end="1792:46"><type pos:start="1792:31" pos:end="1792:42"><specifier pos:start="1792:31" pos:end="1792:35">const</specifier> <name pos:start="1792:37" pos:end="1792:40">char</name> <modifier pos:start="1792:42" pos:end="1792:42">*</modifier></type><name pos:start="1792:43" pos:end="1792:46">name</name></decl></parameter>)</parameter_list>
<block pos:start="1793:1" pos:end="1808:1">{<block_content pos:start="1794:5" pos:end="1807:72">
    <decl_stmt pos:start="1794:5" pos:end="1794:58"><decl pos:start="1794:5" pos:end="1794:57"><type pos:start="1794:5" pos:end="1794:25"><specifier pos:start="1794:5" pos:end="1794:9">const</specifier> <name pos:start="1794:11" pos:end="1794:23">AVInputFormat</name> <modifier pos:start="1794:25" pos:end="1794:25">*</modifier></type><name pos:start="1794:26" pos:end="1794:28">fmt</name> <init pos:start="1794:30" pos:end="1794:57">= <expr pos:start="1794:32" pos:end="1794:57"><call pos:start="1794:32" pos:end="1794:57"><name pos:start="1794:32" pos:end="1794:51">av_find_input_format</name><argument_list pos:start="1794:52" pos:end="1794:57">(<argument pos:start="1794:53" pos:end="1794:56"><expr pos:start="1794:53" pos:end="1794:56"><name pos:start="1794:53" pos:end="1794:56">name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1796:5" pos:end="1799:5"><if pos:start="1796:5" pos:end="1799:5">if <condition pos:start="1796:8" pos:end="1796:13">(<expr pos:start="1796:9" pos:end="1796:12"><operator pos:start="1796:9" pos:end="1796:9">!</operator><name pos:start="1796:10" pos:end="1796:12">fmt</name></expr>)</condition> <block pos:start="1796:15" pos:end="1799:5">{<block_content pos:start="1797:9" pos:end="1798:15">
        <expr_stmt pos:start="1797:9" pos:end="1797:67"><expr pos:start="1797:9" pos:end="1797:66"><call pos:start="1797:9" pos:end="1797:66"><name pos:start="1797:9" pos:end="1797:14">av_log</name><argument_list pos:start="1797:15" pos:end="1797:66">(<argument pos:start="1797:16" pos:end="1797:19"><expr pos:start="1797:16" pos:end="1797:19"><name pos:start="1797:16" pos:end="1797:19">NULL</name></expr></argument>, <argument pos:start="1797:22" pos:end="1797:33"><expr pos:start="1797:22" pos:end="1797:33"><name pos:start="1797:22" pos:end="1797:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="1797:36" pos:end="1797:59"><expr pos:start="1797:36" pos:end="1797:59"><literal type="string" pos:start="1797:36" pos:end="1797:59">"Unknown format '%s'.\n"</literal></expr></argument>, <argument pos:start="1797:62" pos:end="1797:65"><expr pos:start="1797:62" pos:end="1797:65"><name pos:start="1797:62" pos:end="1797:65">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1798:9" pos:end="1798:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1801:5" pos:end="1801:60"><expr pos:start="1801:5" pos:end="1801:59"><call pos:start="1801:5" pos:end="1801:59"><name pos:start="1801:5" pos:end="1801:10">printf</name><argument_list pos:start="1801:11" pos:end="1801:59">(<argument pos:start="1801:12" pos:end="1801:31"><expr pos:start="1801:12" pos:end="1801:31"><literal type="string" pos:start="1801:12" pos:end="1801:31">"Demuxer %s [%s]:\n"</literal></expr></argument>, <argument pos:start="1801:34" pos:end="1801:42"><expr pos:start="1801:34" pos:end="1801:42"><name pos:start="1801:34" pos:end="1801:42"><name pos:start="1801:34" pos:end="1801:36">fmt</name><operator pos:start="1801:37" pos:end="1801:38">-&gt;</operator><name pos:start="1801:39" pos:end="1801:42">name</name></name></expr></argument>, <argument pos:start="1801:45" pos:end="1801:58"><expr pos:start="1801:45" pos:end="1801:58"><name pos:start="1801:45" pos:end="1801:58"><name pos:start="1801:45" pos:end="1801:47">fmt</name><operator pos:start="1801:48" pos:end="1801:49">-&gt;</operator><name pos:start="1801:50" pos:end="1801:58">long_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1803:5" pos:end="1804:64"><if pos:start="1803:5" pos:end="1804:64">if <condition pos:start="1803:8" pos:end="1803:24">(<expr pos:start="1803:9" pos:end="1803:23"><name pos:start="1803:9" pos:end="1803:23"><name pos:start="1803:9" pos:end="1803:11">fmt</name><operator pos:start="1803:12" pos:end="1803:13">-&gt;</operator><name pos:start="1803:14" pos:end="1803:23">extensions</name></name></expr>)</condition><block type="pseudo" pos:start="1804:9" pos:end="1804:64"><block_content pos:start="1804:9" pos:end="1804:64">
        <expr_stmt pos:start="1804:9" pos:end="1804:64"><expr pos:start="1804:9" pos:end="1804:63"><call pos:start="1804:9" pos:end="1804:63"><name pos:start="1804:9" pos:end="1804:14">printf</name><argument_list pos:start="1804:15" pos:end="1804:63">(<argument pos:start="1804:16" pos:end="1804:45"><expr pos:start="1804:16" pos:end="1804:45"><literal type="string" pos:start="1804:16" pos:end="1804:45">"    Common extensions: %s.\n"</literal></expr></argument>, <argument pos:start="1804:48" pos:end="1804:62"><expr pos:start="1804:48" pos:end="1804:62"><name pos:start="1804:48" pos:end="1804:62"><name pos:start="1804:48" pos:end="1804:50">fmt</name><operator pos:start="1804:51" pos:end="1804:52">-&gt;</operator><name pos:start="1804:53" pos:end="1804:62">extensions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="1806:5" pos:end="1807:72"><if pos:start="1806:5" pos:end="1807:72">if <condition pos:start="1806:8" pos:end="1806:24">(<expr pos:start="1806:9" pos:end="1806:23"><name pos:start="1806:9" pos:end="1806:23"><name pos:start="1806:9" pos:end="1806:11">fmt</name><operator pos:start="1806:12" pos:end="1806:13">-&gt;</operator><name pos:start="1806:14" pos:end="1806:23">priv_class</name></name></expr>)</condition><block type="pseudo" pos:start="1807:9" pos:end="1807:72"><block_content pos:start="1807:9" pos:end="1807:72">
        <expr_stmt pos:start="1807:9" pos:end="1807:72"><expr pos:start="1807:9" pos:end="1807:71"><call pos:start="1807:9" pos:end="1807:71"><name pos:start="1807:9" pos:end="1807:26">show_help_children</name><argument_list pos:start="1807:27" pos:end="1807:71">(<argument pos:start="1807:28" pos:end="1807:42"><expr pos:start="1807:28" pos:end="1807:42"><name pos:start="1807:28" pos:end="1807:42"><name pos:start="1807:28" pos:end="1807:30">fmt</name><operator pos:start="1807:31" pos:end="1807:32">-&gt;</operator><name pos:start="1807:33" pos:end="1807:42">priv_class</name></name></expr></argument>, <argument pos:start="1807:45" pos:end="1807:70"><expr pos:start="1807:45" pos:end="1807:70"><name pos:start="1807:45" pos:end="1807:70">AV_OPT_FLAG_DECODING_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function pos:start="1810:1" pos:end="1844:0"><type pos:start="1810:1" pos:end="1810:11"><specifier pos:start="1810:1" pos:end="1810:6">static</specifier> <name pos:start="1810:8" pos:end="1810:11">void</name></type> <name pos:start="1810:13" pos:end="1810:27">show_help_muxer</name><parameter_list pos:start="1810:28" pos:end="1810:45">(<parameter pos:start="1810:29" pos:end="1810:44"><decl pos:start="1810:29" pos:end="1810:44"><type pos:start="1810:29" pos:end="1810:40"><specifier pos:start="1810:29" pos:end="1810:33">const</specifier> <name pos:start="1810:35" pos:end="1810:38">char</name> <modifier pos:start="1810:40" pos:end="1810:40">*</modifier></type><name pos:start="1810:41" pos:end="1810:44">name</name></decl></parameter>)</parameter_list>
<block pos:start="1811:1" pos:end="1844:0">{<block_content pos:start="1812:5" pos:end="1840:72">
    <decl_stmt pos:start="1812:5" pos:end="1812:34"><decl pos:start="1812:5" pos:end="1812:33"><type pos:start="1812:5" pos:end="1812:29"><specifier pos:start="1812:5" pos:end="1812:9">const</specifier> <name pos:start="1812:11" pos:end="1812:27">AVCodecDescriptor</name> <modifier pos:start="1812:29" pos:end="1812:29">*</modifier></type><name pos:start="1812:30" pos:end="1812:33">desc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1813:5" pos:end="1813:66"><decl pos:start="1813:5" pos:end="1813:65"><type pos:start="1813:5" pos:end="1813:26"><specifier pos:start="1813:5" pos:end="1813:9">const</specifier> <name pos:start="1813:11" pos:end="1813:24">AVOutputFormat</name> <modifier pos:start="1813:26" pos:end="1813:26">*</modifier></type><name pos:start="1813:27" pos:end="1813:29">fmt</name> <init pos:start="1813:31" pos:end="1813:65">= <expr pos:start="1813:33" pos:end="1813:65"><call pos:start="1813:33" pos:end="1813:65"><name pos:start="1813:33" pos:end="1813:47">av_guess_format</name><argument_list pos:start="1813:48" pos:end="1813:65">(<argument pos:start="1813:49" pos:end="1813:52"><expr pos:start="1813:49" pos:end="1813:52"><name pos:start="1813:49" pos:end="1813:52">name</name></expr></argument>, <argument pos:start="1813:55" pos:end="1813:58"><expr pos:start="1813:55" pos:end="1813:58"><name pos:start="1813:55" pos:end="1813:58">NULL</name></expr></argument>, <argument pos:start="1813:61" pos:end="1813:64"><expr pos:start="1813:61" pos:end="1813:64"><name pos:start="1813:61" pos:end="1813:64">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1815:5" pos:end="1818:5"><if pos:start="1815:5" pos:end="1818:5">if <condition pos:start="1815:8" pos:end="1815:13">(<expr pos:start="1815:9" pos:end="1815:12"><operator pos:start="1815:9" pos:end="1815:9">!</operator><name pos:start="1815:10" pos:end="1815:12">fmt</name></expr>)</condition> <block pos:start="1815:15" pos:end="1818:5">{<block_content pos:start="1816:9" pos:end="1817:15">
        <expr_stmt pos:start="1816:9" pos:end="1816:67"><expr pos:start="1816:9" pos:end="1816:66"><call pos:start="1816:9" pos:end="1816:66"><name pos:start="1816:9" pos:end="1816:14">av_log</name><argument_list pos:start="1816:15" pos:end="1816:66">(<argument pos:start="1816:16" pos:end="1816:19"><expr pos:start="1816:16" pos:end="1816:19"><name pos:start="1816:16" pos:end="1816:19">NULL</name></expr></argument>, <argument pos:start="1816:22" pos:end="1816:33"><expr pos:start="1816:22" pos:end="1816:33"><name pos:start="1816:22" pos:end="1816:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="1816:36" pos:end="1816:59"><expr pos:start="1816:36" pos:end="1816:59"><literal type="string" pos:start="1816:36" pos:end="1816:59">"Unknown format '%s'.\n"</literal></expr></argument>, <argument pos:start="1816:62" pos:end="1816:65"><expr pos:start="1816:62" pos:end="1816:65"><name pos:start="1816:62" pos:end="1816:65">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1817:9" pos:end="1817:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1820:5" pos:end="1820:58"><expr pos:start="1820:5" pos:end="1820:57"><call pos:start="1820:5" pos:end="1820:57"><name pos:start="1820:5" pos:end="1820:10">printf</name><argument_list pos:start="1820:11" pos:end="1820:57">(<argument pos:start="1820:12" pos:end="1820:29"><expr pos:start="1820:12" pos:end="1820:29"><literal type="string" pos:start="1820:12" pos:end="1820:29">"Muxer %s [%s]:\n"</literal></expr></argument>, <argument pos:start="1820:32" pos:end="1820:40"><expr pos:start="1820:32" pos:end="1820:40"><name pos:start="1820:32" pos:end="1820:40"><name pos:start="1820:32" pos:end="1820:34">fmt</name><operator pos:start="1820:35" pos:end="1820:36">-&gt;</operator><name pos:start="1820:37" pos:end="1820:40">name</name></name></expr></argument>, <argument pos:start="1820:43" pos:end="1820:56"><expr pos:start="1820:43" pos:end="1820:56"><name pos:start="1820:43" pos:end="1820:56"><name pos:start="1820:43" pos:end="1820:45">fmt</name><operator pos:start="1820:46" pos:end="1820:47">-&gt;</operator><name pos:start="1820:48" pos:end="1820:56">long_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1822:5" pos:end="1823:64"><if pos:start="1822:5" pos:end="1823:64">if <condition pos:start="1822:8" pos:end="1822:24">(<expr pos:start="1822:9" pos:end="1822:23"><name pos:start="1822:9" pos:end="1822:23"><name pos:start="1822:9" pos:end="1822:11">fmt</name><operator pos:start="1822:12" pos:end="1822:13">-&gt;</operator><name pos:start="1822:14" pos:end="1822:23">extensions</name></name></expr>)</condition><block type="pseudo" pos:start="1823:9" pos:end="1823:64"><block_content pos:start="1823:9" pos:end="1823:64">
        <expr_stmt pos:start="1823:9" pos:end="1823:64"><expr pos:start="1823:9" pos:end="1823:63"><call pos:start="1823:9" pos:end="1823:63"><name pos:start="1823:9" pos:end="1823:14">printf</name><argument_list pos:start="1823:15" pos:end="1823:63">(<argument pos:start="1823:16" pos:end="1823:45"><expr pos:start="1823:16" pos:end="1823:45"><literal type="string" pos:start="1823:16" pos:end="1823:45">"    Common extensions: %s.\n"</literal></expr></argument>, <argument pos:start="1823:48" pos:end="1823:62"><expr pos:start="1823:48" pos:end="1823:62"><name pos:start="1823:48" pos:end="1823:62"><name pos:start="1823:48" pos:end="1823:50">fmt</name><operator pos:start="1823:51" pos:end="1823:52">-&gt;</operator><name pos:start="1823:53" pos:end="1823:62">extensions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="1824:5" pos:end="1825:55"><if pos:start="1824:5" pos:end="1825:55">if <condition pos:start="1824:8" pos:end="1824:23">(<expr pos:start="1824:9" pos:end="1824:22"><name pos:start="1824:9" pos:end="1824:22"><name pos:start="1824:9" pos:end="1824:11">fmt</name><operator pos:start="1824:12" pos:end="1824:13">-&gt;</operator><name pos:start="1824:14" pos:end="1824:22">mime_type</name></name></expr>)</condition><block type="pseudo" pos:start="1825:9" pos:end="1825:55"><block_content pos:start="1825:9" pos:end="1825:55">
        <expr_stmt pos:start="1825:9" pos:end="1825:55"><expr pos:start="1825:9" pos:end="1825:54"><call pos:start="1825:9" pos:end="1825:54"><name pos:start="1825:9" pos:end="1825:14">printf</name><argument_list pos:start="1825:15" pos:end="1825:54">(<argument pos:start="1825:16" pos:end="1825:37"><expr pos:start="1825:16" pos:end="1825:37"><literal type="string" pos:start="1825:16" pos:end="1825:37">"    Mime type: %s.\n"</literal></expr></argument>, <argument pos:start="1825:40" pos:end="1825:53"><expr pos:start="1825:40" pos:end="1825:53"><name pos:start="1825:40" pos:end="1825:53"><name pos:start="1825:40" pos:end="1825:42">fmt</name><operator pos:start="1825:43" pos:end="1825:44">-&gt;</operator><name pos:start="1825:45" pos:end="1825:53">mime_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="1826:5" pos:end="1829:5"><if pos:start="1826:5" pos:end="1829:5">if <condition pos:start="1826:8" pos:end="1827:58">(<expr pos:start="1826:9" pos:end="1827:57"><name pos:start="1826:9" pos:end="1826:24"><name pos:start="1826:9" pos:end="1826:11">fmt</name><operator pos:start="1826:12" pos:end="1826:13">-&gt;</operator><name pos:start="1826:14" pos:end="1826:24">video_codec</name></name> <operator pos:start="1826:26" pos:end="1826:27">!=</operator> <name pos:start="1826:29" pos:end="1826:44">AV_CODEC_ID_NONE</name> <operator pos:start="1826:46" pos:end="1826:47">&amp;&amp;</operator>
        <operator pos:start="1827:9" pos:end="1827:9">(</operator><name pos:start="1827:10" pos:end="1827:13">desc</name> <operator pos:start="1827:15" pos:end="1827:15">=</operator> <call pos:start="1827:17" pos:end="1827:56"><name pos:start="1827:17" pos:end="1827:38">avcodec_descriptor_get</name><argument_list pos:start="1827:39" pos:end="1827:56">(<argument pos:start="1827:40" pos:end="1827:55"><expr pos:start="1827:40" pos:end="1827:55"><name pos:start="1827:40" pos:end="1827:55"><name pos:start="1827:40" pos:end="1827:42">fmt</name><operator pos:start="1827:43" pos:end="1827:44">-&gt;</operator><name pos:start="1827:45" pos:end="1827:55">video_codec</name></name></expr></argument>)</argument_list></call><operator pos:start="1827:57" pos:end="1827:57">)</operator></expr>)</condition> <block pos:start="1827:60" pos:end="1829:5">{<block_content pos:start="1828:9" pos:end="1828:61">
        <expr_stmt pos:start="1828:9" pos:end="1828:61"><expr pos:start="1828:9" pos:end="1828:60"><call pos:start="1828:9" pos:end="1828:60"><name pos:start="1828:9" pos:end="1828:14">printf</name><argument_list pos:start="1828:15" pos:end="1828:60">(<argument pos:start="1828:16" pos:end="1828:47"><expr pos:start="1828:16" pos:end="1828:47"><literal type="string" pos:start="1828:16" pos:end="1828:47">"    Default video codec: %s.\n"</literal></expr></argument>, <argument pos:start="1828:50" pos:end="1828:59"><expr pos:start="1828:50" pos:end="1828:59"><name pos:start="1828:50" pos:end="1828:59"><name pos:start="1828:50" pos:end="1828:53">desc</name><operator pos:start="1828:54" pos:end="1828:55">-&gt;</operator><name pos:start="1828:56" pos:end="1828:59">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="1830:5" pos:end="1833:5"><if pos:start="1830:5" pos:end="1833:5">if <condition pos:start="1830:8" pos:end="1831:58">(<expr pos:start="1830:9" pos:end="1831:57"><name pos:start="1830:9" pos:end="1830:24"><name pos:start="1830:9" pos:end="1830:11">fmt</name><operator pos:start="1830:12" pos:end="1830:13">-&gt;</operator><name pos:start="1830:14" pos:end="1830:24">audio_codec</name></name> <operator pos:start="1830:26" pos:end="1830:27">!=</operator> <name pos:start="1830:29" pos:end="1830:44">AV_CODEC_ID_NONE</name> <operator pos:start="1830:46" pos:end="1830:47">&amp;&amp;</operator>
        <operator pos:start="1831:9" pos:end="1831:9">(</operator><name pos:start="1831:10" pos:end="1831:13">desc</name> <operator pos:start="1831:15" pos:end="1831:15">=</operator> <call pos:start="1831:17" pos:end="1831:56"><name pos:start="1831:17" pos:end="1831:38">avcodec_descriptor_get</name><argument_list pos:start="1831:39" pos:end="1831:56">(<argument pos:start="1831:40" pos:end="1831:55"><expr pos:start="1831:40" pos:end="1831:55"><name pos:start="1831:40" pos:end="1831:55"><name pos:start="1831:40" pos:end="1831:42">fmt</name><operator pos:start="1831:43" pos:end="1831:44">-&gt;</operator><name pos:start="1831:45" pos:end="1831:55">audio_codec</name></name></expr></argument>)</argument_list></call><operator pos:start="1831:57" pos:end="1831:57">)</operator></expr>)</condition> <block pos:start="1831:60" pos:end="1833:5">{<block_content pos:start="1832:9" pos:end="1832:61">
        <expr_stmt pos:start="1832:9" pos:end="1832:61"><expr pos:start="1832:9" pos:end="1832:60"><call pos:start="1832:9" pos:end="1832:60"><name pos:start="1832:9" pos:end="1832:14">printf</name><argument_list pos:start="1832:15" pos:end="1832:60">(<argument pos:start="1832:16" pos:end="1832:47"><expr pos:start="1832:16" pos:end="1832:47"><literal type="string" pos:start="1832:16" pos:end="1832:47">"    Default audio codec: %s.\n"</literal></expr></argument>, <argument pos:start="1832:50" pos:end="1832:59"><expr pos:start="1832:50" pos:end="1832:59"><name pos:start="1832:50" pos:end="1832:59"><name pos:start="1832:50" pos:end="1832:53">desc</name><operator pos:start="1832:54" pos:end="1832:55">-&gt;</operator><name pos:start="1832:56" pos:end="1832:59">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="1834:5" pos:end="1837:5"><if pos:start="1834:5" pos:end="1837:5">if <condition pos:start="1834:8" pos:end="1835:61">(<expr pos:start="1834:9" pos:end="1835:60"><name pos:start="1834:9" pos:end="1834:27"><name pos:start="1834:9" pos:end="1834:11">fmt</name><operator pos:start="1834:12" pos:end="1834:13">-&gt;</operator><name pos:start="1834:14" pos:end="1834:27">subtitle_codec</name></name> <operator pos:start="1834:29" pos:end="1834:30">!=</operator> <name pos:start="1834:32" pos:end="1834:47">AV_CODEC_ID_NONE</name> <operator pos:start="1834:49" pos:end="1834:50">&amp;&amp;</operator>
        <operator pos:start="1835:9" pos:end="1835:9">(</operator><name pos:start="1835:10" pos:end="1835:13">desc</name> <operator pos:start="1835:15" pos:end="1835:15">=</operator> <call pos:start="1835:17" pos:end="1835:59"><name pos:start="1835:17" pos:end="1835:38">avcodec_descriptor_get</name><argument_list pos:start="1835:39" pos:end="1835:59">(<argument pos:start="1835:40" pos:end="1835:58"><expr pos:start="1835:40" pos:end="1835:58"><name pos:start="1835:40" pos:end="1835:58"><name pos:start="1835:40" pos:end="1835:42">fmt</name><operator pos:start="1835:43" pos:end="1835:44">-&gt;</operator><name pos:start="1835:45" pos:end="1835:58">subtitle_codec</name></name></expr></argument>)</argument_list></call><operator pos:start="1835:60" pos:end="1835:60">)</operator></expr>)</condition> <block pos:start="1835:63" pos:end="1837:5">{<block_content pos:start="1836:9" pos:end="1836:64">
        <expr_stmt pos:start="1836:9" pos:end="1836:64"><expr pos:start="1836:9" pos:end="1836:63"><call pos:start="1836:9" pos:end="1836:63"><name pos:start="1836:9" pos:end="1836:14">printf</name><argument_list pos:start="1836:15" pos:end="1836:63">(<argument pos:start="1836:16" pos:end="1836:50"><expr pos:start="1836:16" pos:end="1836:50"><literal type="string" pos:start="1836:16" pos:end="1836:50">"    Default subtitle codec: %s.\n"</literal></expr></argument>, <argument pos:start="1836:53" pos:end="1836:62"><expr pos:start="1836:53" pos:end="1836:62"><name pos:start="1836:53" pos:end="1836:62"><name pos:start="1836:53" pos:end="1836:56">desc</name><operator pos:start="1836:57" pos:end="1836:58">-&gt;</operator><name pos:start="1836:59" pos:end="1836:62">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="1839:5" pos:end="1840:72"><if pos:start="1839:5" pos:end="1840:72">if <condition pos:start="1839:8" pos:end="1839:24">(<expr pos:start="1839:9" pos:end="1839:23"><name pos:start="1839:9" pos:end="1839:23"><name pos:start="1839:9" pos:end="1839:11">fmt</name><operator pos:start="1839:12" pos:end="1839:13">-&gt;</operator><name pos:start="1839:14" pos:end="1839:23">priv_class</name></name></expr>)</condition><block type="pseudo" pos:start="1840:9" pos:end="1840:72"><block_content pos:start="1840:9" pos:end="1840:72">
        <expr_stmt pos:start="1840:9" pos:end="1840:72"><expr pos:start="1840:9" pos:end="1840:71"><call pos:start="1840:9" pos:end="1840:71"><name pos:start="1840:9" pos:end="1840:26">show_help_children</name><argument_list pos:start="1840:27" pos:end="1840:71">(<argument pos:start="1840:28" pos:end="1840:42"><expr pos:start="1840:28" pos:end="1840:42"><name pos:start="1840:28" pos:end="1840:42"><name pos:start="1840:28" pos:end="1840:30">fmt</name><operator pos:start="1840:31" pos:end="1840:32">-&gt;</operator><name pos:start="1840:33" pos:end="1840:42">priv_class</name></name></expr></argument>, <argument pos:start="1840:45" pos:end="1840:70"><expr pos:start="1840:45" pos:end="1840:70"><name pos:start="1840:45" pos:end="1840:70">AV_OPT_FLAG_ENCODING_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:if pos:start="1843:1" pos:end="1843:19">#<cpp:directive pos:start="1843:2" pos:end="1843:3">if</cpp:directive> <expr pos:start="1843:5" pos:end="1843:19"><name pos:start="1843:5" pos:end="1843:19">CONFIG_AVFILTER</name></expr></cpp:if>
<function pos:start="1844:1" pos:end="1898:0"><type pos:start="1844:1" pos:end="1844:11"><specifier pos:start="1844:1" pos:end="1844:6">static</specifier> <name pos:start="1844:8" pos:end="1844:11">void</name></type> <name pos:start="1844:13" pos:end="1844:28">show_help_filter</name><parameter_list pos:start="1844:29" pos:end="1844:46">(<parameter pos:start="1844:30" pos:end="1844:45"><decl pos:start="1844:30" pos:end="1844:45"><type pos:start="1844:30" pos:end="1844:41"><specifier pos:start="1844:30" pos:end="1844:34">const</specifier> <name pos:start="1844:36" pos:end="1844:39">char</name> <modifier pos:start="1844:41" pos:end="1844:41">*</modifier></type><name pos:start="1844:42" pos:end="1844:45">name</name></decl></parameter>)</parameter_list>
<block pos:start="1845:1" pos:end="1898:0">{<block_content pos:start="1847:5" pos:end="1896:0">
<cpp:if pos:start="1846:1" pos:end="1846:19">#<cpp:directive pos:start="1846:2" pos:end="1846:3">if</cpp:directive> <expr pos:start="1846:5" pos:end="1846:19"><name pos:start="1846:5" pos:end="1846:19">CONFIG_AVFILTER</name></expr></cpp:if>
    <decl_stmt pos:start="1847:5" pos:end="1847:51"><decl pos:start="1847:5" pos:end="1847:50"><type pos:start="1847:5" pos:end="1847:20"><specifier pos:start="1847:5" pos:end="1847:9">const</specifier> <name pos:start="1847:11" pos:end="1847:18">AVFilter</name> <modifier pos:start="1847:20" pos:end="1847:20">*</modifier></type><name pos:start="1847:21" pos:end="1847:21">f</name> <init pos:start="1847:23" pos:end="1847:50">= <expr pos:start="1847:25" pos:end="1847:50"><call pos:start="1847:25" pos:end="1847:50"><name pos:start="1847:25" pos:end="1847:44">avfilter_get_by_name</name><argument_list pos:start="1847:45" pos:end="1847:50">(<argument pos:start="1847:46" pos:end="1847:49"><expr pos:start="1847:46" pos:end="1847:49"><name pos:start="1847:46" pos:end="1847:49">name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1848:5" pos:end="1848:17"><decl pos:start="1848:5" pos:end="1848:9"><type pos:start="1848:5" pos:end="1848:7"><name pos:start="1848:5" pos:end="1848:7">int</name></type> <name pos:start="1848:9" pos:end="1848:9">i</name></decl>, <decl pos:start="1848:12" pos:end="1848:16"><type ref="prev" pos:start="1848:5" pos:end="1848:7"/><name pos:start="1848:12" pos:end="1848:16">count</name></decl>;</decl_stmt>

    <if_stmt pos:start="1850:5" pos:end="1856:5"><if pos:start="1850:5" pos:end="1853:5">if <condition pos:start="1850:8" pos:end="1850:14">(<expr pos:start="1850:9" pos:end="1850:13"><operator pos:start="1850:9" pos:end="1850:9">!</operator><name pos:start="1850:10" pos:end="1850:13">name</name></expr>)</condition> <block pos:start="1850:16" pos:end="1853:5">{<block_content pos:start="1851:9" pos:end="1852:15">
        <expr_stmt pos:start="1851:9" pos:end="1851:66"><expr pos:start="1851:9" pos:end="1851:65"><call pos:start="1851:9" pos:end="1851:65"><name pos:start="1851:9" pos:end="1851:14">av_log</name><argument_list pos:start="1851:15" pos:end="1851:65">(<argument pos:start="1851:16" pos:end="1851:19"><expr pos:start="1851:16" pos:end="1851:19"><name pos:start="1851:16" pos:end="1851:19">NULL</name></expr></argument>, <argument pos:start="1851:22" pos:end="1851:33"><expr pos:start="1851:22" pos:end="1851:33"><name pos:start="1851:22" pos:end="1851:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="1851:36" pos:end="1851:64"><expr pos:start="1851:36" pos:end="1851:64"><literal type="string" pos:start="1851:36" pos:end="1851:64">"No filter name specified.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1852:9" pos:end="1852:15">return;</return>
    </block_content>}</block></if> <if type="elseif" pos:start="1853:7" pos:end="1856:5">else if <condition pos:start="1853:15" pos:end="1853:18">(<expr pos:start="1853:16" pos:end="1853:17"><operator pos:start="1853:16" pos:end="1853:16">!</operator><name pos:start="1853:17" pos:end="1853:17">f</name></expr>)</condition> <block pos:start="1853:20" pos:end="1856:5">{<block_content pos:start="1854:9" pos:end="1855:15">
        <expr_stmt pos:start="1854:9" pos:end="1854:67"><expr pos:start="1854:9" pos:end="1854:66"><call pos:start="1854:9" pos:end="1854:66"><name pos:start="1854:9" pos:end="1854:14">av_log</name><argument_list pos:start="1854:15" pos:end="1854:66">(<argument pos:start="1854:16" pos:end="1854:19"><expr pos:start="1854:16" pos:end="1854:19"><name pos:start="1854:16" pos:end="1854:19">NULL</name></expr></argument>, <argument pos:start="1854:22" pos:end="1854:33"><expr pos:start="1854:22" pos:end="1854:33"><name pos:start="1854:22" pos:end="1854:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="1854:36" pos:end="1854:59"><expr pos:start="1854:36" pos:end="1854:59"><literal type="string" pos:start="1854:36" pos:end="1854:59">"Unknown filter '%s'.\n"</literal></expr></argument>, <argument pos:start="1854:62" pos:end="1854:65"><expr pos:start="1854:62" pos:end="1854:65"><name pos:start="1854:62" pos:end="1854:65">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1855:9" pos:end="1855:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1858:5" pos:end="1858:35"><expr pos:start="1858:5" pos:end="1858:34"><call pos:start="1858:5" pos:end="1858:34"><name pos:start="1858:5" pos:end="1858:10">printf</name><argument_list pos:start="1858:11" pos:end="1858:34">(<argument pos:start="1858:12" pos:end="1858:24"><expr pos:start="1858:12" pos:end="1858:24"><literal type="string" pos:start="1858:12" pos:end="1858:24">"Filter %s\n"</literal></expr></argument>, <argument pos:start="1858:27" pos:end="1858:33"><expr pos:start="1858:27" pos:end="1858:33"><name pos:start="1858:27" pos:end="1858:33"><name pos:start="1858:27" pos:end="1858:27">f</name><operator pos:start="1858:28" pos:end="1858:29">-&gt;</operator><name pos:start="1858:30" pos:end="1858:33">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1859:5" pos:end="1860:41"><if pos:start="1859:5" pos:end="1860:41">if <condition pos:start="1859:8" pos:end="1859:23">(<expr pos:start="1859:9" pos:end="1859:22"><name pos:start="1859:9" pos:end="1859:22"><name pos:start="1859:9" pos:end="1859:9">f</name><operator pos:start="1859:10" pos:end="1859:11">-&gt;</operator><name pos:start="1859:12" pos:end="1859:22">description</name></name></expr>)</condition><block type="pseudo" pos:start="1860:9" pos:end="1860:41"><block_content pos:start="1860:9" pos:end="1860:41">
        <expr_stmt pos:start="1860:9" pos:end="1860:41"><expr pos:start="1860:9" pos:end="1860:40"><call pos:start="1860:9" pos:end="1860:40"><name pos:start="1860:9" pos:end="1860:14">printf</name><argument_list pos:start="1860:15" pos:end="1860:40">(<argument pos:start="1860:16" pos:end="1860:23"><expr pos:start="1860:16" pos:end="1860:23"><literal type="string" pos:start="1860:16" pos:end="1860:23">"  %s\n"</literal></expr></argument>, <argument pos:start="1860:26" pos:end="1860:39"><expr pos:start="1860:26" pos:end="1860:39"><name pos:start="1860:26" pos:end="1860:39"><name pos:start="1860:26" pos:end="1860:26">f</name><operator pos:start="1860:27" pos:end="1860:28">-&gt;</operator><name pos:start="1860:29" pos:end="1860:39">description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="1862:5" pos:end="1863:50"><if pos:start="1862:5" pos:end="1863:50">if <condition pos:start="1862:8" pos:end="1862:47">(<expr pos:start="1862:9" pos:end="1862:46"><name pos:start="1862:9" pos:end="1862:16"><name pos:start="1862:9" pos:end="1862:9">f</name><operator pos:start="1862:10" pos:end="1862:11">-&gt;</operator><name pos:start="1862:12" pos:end="1862:16">flags</name></name> <operator pos:start="1862:18" pos:end="1862:18">&amp;</operator> <name pos:start="1862:20" pos:end="1862:46">AVFILTER_FLAG_SLICE_THREADS</name></expr>)</condition><block type="pseudo" pos:start="1863:9" pos:end="1863:50"><block_content pos:start="1863:9" pos:end="1863:50">
        <expr_stmt pos:start="1863:9" pos:end="1863:50"><expr pos:start="1863:9" pos:end="1863:49"><call pos:start="1863:9" pos:end="1863:49"><name pos:start="1863:9" pos:end="1863:14">printf</name><argument_list pos:start="1863:15" pos:end="1863:49">(<argument pos:start="1863:16" pos:end="1863:48"><expr pos:start="1863:16" pos:end="1863:48"><literal type="string" pos:start="1863:16" pos:end="1863:48">"    slice threading supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="1865:5" pos:end="1865:28"><expr pos:start="1865:5" pos:end="1865:27"><call pos:start="1865:5" pos:end="1865:27"><name pos:start="1865:5" pos:end="1865:10">printf</name><argument_list pos:start="1865:11" pos:end="1865:27">(<argument pos:start="1865:12" pos:end="1865:26"><expr pos:start="1865:12" pos:end="1865:26"><literal type="string" pos:start="1865:12" pos:end="1865:26">"    Inputs:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1866:5" pos:end="1866:42"><expr pos:start="1866:5" pos:end="1866:41"><name pos:start="1866:5" pos:end="1866:9">count</name> <operator pos:start="1866:11" pos:end="1866:11">=</operator> <call pos:start="1866:13" pos:end="1866:41"><name pos:start="1866:13" pos:end="1866:30">avfilter_pad_count</name><argument_list pos:start="1866:31" pos:end="1866:41">(<argument pos:start="1866:32" pos:end="1866:40"><expr pos:start="1866:32" pos:end="1866:40"><name pos:start="1866:32" pos:end="1866:40"><name pos:start="1866:32" pos:end="1866:32">f</name><operator pos:start="1866:33" pos:end="1866:34">-&gt;</operator><name pos:start="1866:35" pos:end="1866:40">inputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="1867:5" pos:end="1870:5">for <control pos:start="1867:9" pos:end="1867:31">(<init pos:start="1867:10" pos:end="1867:15"><expr pos:start="1867:10" pos:end="1867:14"><name pos:start="1867:10" pos:end="1867:10">i</name> <operator pos:start="1867:12" pos:end="1867:12">=</operator> <literal type="number" pos:start="1867:14" pos:end="1867:14">0</literal></expr>;</init> <condition pos:start="1867:17" pos:end="1867:26"><expr pos:start="1867:17" pos:end="1867:25"><name pos:start="1867:17" pos:end="1867:17">i</name> <operator pos:start="1867:19" pos:end="1867:19">&lt;</operator> <name pos:start="1867:21" pos:end="1867:25">count</name></expr>;</condition> <incr pos:start="1867:28" pos:end="1867:30"><expr pos:start="1867:28" pos:end="1867:30"><name pos:start="1867:28" pos:end="1867:28">i</name><operator pos:start="1867:29" pos:end="1867:30">++</operator></expr></incr>)</control> <block pos:start="1867:33" pos:end="1870:5">{<block_content pos:start="1868:9" pos:end="1869:71">
        <expr_stmt pos:start="1868:9" pos:end="1869:71"><expr pos:start="1868:9" pos:end="1869:70"><call pos:start="1868:9" pos:end="1869:70"><name pos:start="1868:9" pos:end="1868:14">printf</name><argument_list pos:start="1868:15" pos:end="1869:70">(<argument pos:start="1868:16" pos:end="1868:38"><expr pos:start="1868:16" pos:end="1868:38"><literal type="string" pos:start="1868:16" pos:end="1868:38">"       #%d: %s (%s)\n"</literal></expr></argument>, <argument pos:start="1868:41" pos:end="1868:41"><expr pos:start="1868:41" pos:end="1868:41"><name pos:start="1868:41" pos:end="1868:41">i</name></expr></argument>, <argument pos:start="1868:44" pos:end="1868:78"><expr pos:start="1868:44" pos:end="1868:78"><call pos:start="1868:44" pos:end="1868:78"><name pos:start="1868:44" pos:end="1868:64">avfilter_pad_get_name</name><argument_list pos:start="1868:65" pos:end="1868:78">(<argument pos:start="1868:66" pos:end="1868:74"><expr pos:start="1868:66" pos:end="1868:74"><name pos:start="1868:66" pos:end="1868:74"><name pos:start="1868:66" pos:end="1868:66">f</name><operator pos:start="1868:67" pos:end="1868:68">-&gt;</operator><name pos:start="1868:69" pos:end="1868:74">inputs</name></name></expr></argument>, <argument pos:start="1868:77" pos:end="1868:77"><expr pos:start="1868:77" pos:end="1868:77"><name pos:start="1868:77" pos:end="1868:77">i</name></expr></argument>)</argument_list></call></expr></argument>,
               <argument pos:start="1869:16" pos:end="1869:69"><expr pos:start="1869:16" pos:end="1869:69"><call pos:start="1869:16" pos:end="1869:69"><name pos:start="1869:16" pos:end="1869:32">media_type_string</name><argument_list pos:start="1869:33" pos:end="1869:69">(<argument pos:start="1869:34" pos:end="1869:68"><expr pos:start="1869:34" pos:end="1869:68"><call pos:start="1869:34" pos:end="1869:68"><name pos:start="1869:34" pos:end="1869:54">avfilter_pad_get_type</name><argument_list pos:start="1869:55" pos:end="1869:68">(<argument pos:start="1869:56" pos:end="1869:64"><expr pos:start="1869:56" pos:end="1869:64"><name pos:start="1869:56" pos:end="1869:64"><name pos:start="1869:56" pos:end="1869:56">f</name><operator pos:start="1869:57" pos:end="1869:58">-&gt;</operator><name pos:start="1869:59" pos:end="1869:64">inputs</name></name></expr></argument>, <argument pos:start="1869:67" pos:end="1869:67"><expr pos:start="1869:67" pos:end="1869:67"><name pos:start="1869:67" pos:end="1869:67">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt pos:start="1871:5" pos:end="1874:49"><if pos:start="1871:5" pos:end="1872:63">if <condition pos:start="1871:8" pos:end="1871:48">(<expr pos:start="1871:9" pos:end="1871:47"><name pos:start="1871:9" pos:end="1871:16"><name pos:start="1871:9" pos:end="1871:9">f</name><operator pos:start="1871:10" pos:end="1871:11">-&gt;</operator><name pos:start="1871:12" pos:end="1871:16">flags</name></name> <operator pos:start="1871:18" pos:end="1871:18">&amp;</operator> <name pos:start="1871:20" pos:end="1871:47">AVFILTER_FLAG_DYNAMIC_INPUTS</name></expr>)</condition><block type="pseudo" pos:start="1872:9" pos:end="1872:63"><block_content pos:start="1872:9" pos:end="1872:63">
        <expr_stmt pos:start="1872:9" pos:end="1872:63"><expr pos:start="1872:9" pos:end="1872:62"><call pos:start="1872:9" pos:end="1872:62"><name pos:start="1872:9" pos:end="1872:14">printf</name><argument_list pos:start="1872:15" pos:end="1872:62">(<argument pos:start="1872:16" pos:end="1872:61"><expr pos:start="1872:16" pos:end="1872:61"><literal type="string" pos:start="1872:16" pos:end="1872:61">"        dynamic (depending on the options)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif" pos:start="1873:5" pos:end="1874:49">else if <condition pos:start="1873:13" pos:end="1873:20">(<expr pos:start="1873:14" pos:end="1873:19"><operator pos:start="1873:14" pos:end="1873:14">!</operator><name pos:start="1873:15" pos:end="1873:19">count</name></expr>)</condition><block type="pseudo" pos:start="1874:9" pos:end="1874:49"><block_content pos:start="1874:9" pos:end="1874:49">
        <expr_stmt pos:start="1874:9" pos:end="1874:49"><expr pos:start="1874:9" pos:end="1874:48"><call pos:start="1874:9" pos:end="1874:48"><name pos:start="1874:9" pos:end="1874:14">printf</name><argument_list pos:start="1874:15" pos:end="1874:48">(<argument pos:start="1874:16" pos:end="1874:47"><expr pos:start="1874:16" pos:end="1874:47"><literal type="string" pos:start="1874:16" pos:end="1874:47">"        none (source filter)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="1876:5" pos:end="1876:29"><expr pos:start="1876:5" pos:end="1876:28"><call pos:start="1876:5" pos:end="1876:28"><name pos:start="1876:5" pos:end="1876:10">printf</name><argument_list pos:start="1876:11" pos:end="1876:28">(<argument pos:start="1876:12" pos:end="1876:27"><expr pos:start="1876:12" pos:end="1876:27"><literal type="string" pos:start="1876:12" pos:end="1876:27">"    Outputs:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1877:5" pos:end="1877:43"><expr pos:start="1877:5" pos:end="1877:42"><name pos:start="1877:5" pos:end="1877:9">count</name> <operator pos:start="1877:11" pos:end="1877:11">=</operator> <call pos:start="1877:13" pos:end="1877:42"><name pos:start="1877:13" pos:end="1877:30">avfilter_pad_count</name><argument_list pos:start="1877:31" pos:end="1877:42">(<argument pos:start="1877:32" pos:end="1877:41"><expr pos:start="1877:32" pos:end="1877:41"><name pos:start="1877:32" pos:end="1877:41"><name pos:start="1877:32" pos:end="1877:32">f</name><operator pos:start="1877:33" pos:end="1877:34">-&gt;</operator><name pos:start="1877:35" pos:end="1877:41">outputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="1878:5" pos:end="1881:5">for <control pos:start="1878:9" pos:end="1878:31">(<init pos:start="1878:10" pos:end="1878:15"><expr pos:start="1878:10" pos:end="1878:14"><name pos:start="1878:10" pos:end="1878:10">i</name> <operator pos:start="1878:12" pos:end="1878:12">=</operator> <literal type="number" pos:start="1878:14" pos:end="1878:14">0</literal></expr>;</init> <condition pos:start="1878:17" pos:end="1878:26"><expr pos:start="1878:17" pos:end="1878:25"><name pos:start="1878:17" pos:end="1878:17">i</name> <operator pos:start="1878:19" pos:end="1878:19">&lt;</operator> <name pos:start="1878:21" pos:end="1878:25">count</name></expr>;</condition> <incr pos:start="1878:28" pos:end="1878:30"><expr pos:start="1878:28" pos:end="1878:30"><name pos:start="1878:28" pos:end="1878:28">i</name><operator pos:start="1878:29" pos:end="1878:30">++</operator></expr></incr>)</control> <block pos:start="1878:33" pos:end="1881:5">{<block_content pos:start="1879:9" pos:end="1880:72">
        <expr_stmt pos:start="1879:9" pos:end="1880:72"><expr pos:start="1879:9" pos:end="1880:71"><call pos:start="1879:9" pos:end="1880:71"><name pos:start="1879:9" pos:end="1879:14">printf</name><argument_list pos:start="1879:15" pos:end="1880:71">(<argument pos:start="1879:16" pos:end="1879:38"><expr pos:start="1879:16" pos:end="1879:38"><literal type="string" pos:start="1879:16" pos:end="1879:38">"       #%d: %s (%s)\n"</literal></expr></argument>, <argument pos:start="1879:41" pos:end="1879:41"><expr pos:start="1879:41" pos:end="1879:41"><name pos:start="1879:41" pos:end="1879:41">i</name></expr></argument>, <argument pos:start="1879:44" pos:end="1879:79"><expr pos:start="1879:44" pos:end="1879:79"><call pos:start="1879:44" pos:end="1879:79"><name pos:start="1879:44" pos:end="1879:64">avfilter_pad_get_name</name><argument_list pos:start="1879:65" pos:end="1879:79">(<argument pos:start="1879:66" pos:end="1879:75"><expr pos:start="1879:66" pos:end="1879:75"><name pos:start="1879:66" pos:end="1879:75"><name pos:start="1879:66" pos:end="1879:66">f</name><operator pos:start="1879:67" pos:end="1879:68">-&gt;</operator><name pos:start="1879:69" pos:end="1879:75">outputs</name></name></expr></argument>, <argument pos:start="1879:78" pos:end="1879:78"><expr pos:start="1879:78" pos:end="1879:78"><name pos:start="1879:78" pos:end="1879:78">i</name></expr></argument>)</argument_list></call></expr></argument>,
               <argument pos:start="1880:16" pos:end="1880:70"><expr pos:start="1880:16" pos:end="1880:70"><call pos:start="1880:16" pos:end="1880:70"><name pos:start="1880:16" pos:end="1880:32">media_type_string</name><argument_list pos:start="1880:33" pos:end="1880:70">(<argument pos:start="1880:34" pos:end="1880:69"><expr pos:start="1880:34" pos:end="1880:69"><call pos:start="1880:34" pos:end="1880:69"><name pos:start="1880:34" pos:end="1880:54">avfilter_pad_get_type</name><argument_list pos:start="1880:55" pos:end="1880:69">(<argument pos:start="1880:56" pos:end="1880:65"><expr pos:start="1880:56" pos:end="1880:65"><name pos:start="1880:56" pos:end="1880:65"><name pos:start="1880:56" pos:end="1880:56">f</name><operator pos:start="1880:57" pos:end="1880:58">-&gt;</operator><name pos:start="1880:59" pos:end="1880:65">outputs</name></name></expr></argument>, <argument pos:start="1880:68" pos:end="1880:68"><expr pos:start="1880:68" pos:end="1880:68"><name pos:start="1880:68" pos:end="1880:68">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt pos:start="1882:5" pos:end="1885:47"><if pos:start="1882:5" pos:end="1883:63">if <condition pos:start="1882:8" pos:end="1882:49">(<expr pos:start="1882:9" pos:end="1882:48"><name pos:start="1882:9" pos:end="1882:16"><name pos:start="1882:9" pos:end="1882:9">f</name><operator pos:start="1882:10" pos:end="1882:11">-&gt;</operator><name pos:start="1882:12" pos:end="1882:16">flags</name></name> <operator pos:start="1882:18" pos:end="1882:18">&amp;</operator> <name pos:start="1882:20" pos:end="1882:48">AVFILTER_FLAG_DYNAMIC_OUTPUTS</name></expr>)</condition><block type="pseudo" pos:start="1883:9" pos:end="1883:63"><block_content pos:start="1883:9" pos:end="1883:63">
        <expr_stmt pos:start="1883:9" pos:end="1883:63"><expr pos:start="1883:9" pos:end="1883:62"><call pos:start="1883:9" pos:end="1883:62"><name pos:start="1883:9" pos:end="1883:14">printf</name><argument_list pos:start="1883:15" pos:end="1883:62">(<argument pos:start="1883:16" pos:end="1883:61"><expr pos:start="1883:16" pos:end="1883:61"><literal type="string" pos:start="1883:16" pos:end="1883:61">"        dynamic (depending on the options)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif" pos:start="1884:5" pos:end="1885:47">else if <condition pos:start="1884:13" pos:end="1884:20">(<expr pos:start="1884:14" pos:end="1884:19"><operator pos:start="1884:14" pos:end="1884:14">!</operator><name pos:start="1884:15" pos:end="1884:19">count</name></expr>)</condition><block type="pseudo" pos:start="1885:9" pos:end="1885:47"><block_content pos:start="1885:9" pos:end="1885:47">
        <expr_stmt pos:start="1885:9" pos:end="1885:47"><expr pos:start="1885:9" pos:end="1885:46"><call pos:start="1885:9" pos:end="1885:46"><name pos:start="1885:9" pos:end="1885:14">printf</name><argument_list pos:start="1885:15" pos:end="1885:46">(<argument pos:start="1885:16" pos:end="1885:45"><expr pos:start="1885:16" pos:end="1885:45"><literal type="string" pos:start="1885:16" pos:end="1885:45">"        none (sink filter)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="1887:5" pos:end="1889:67"><if pos:start="1887:5" pos:end="1889:67">if <condition pos:start="1887:8" pos:end="1887:22">(<expr pos:start="1887:9" pos:end="1887:21"><name pos:start="1887:9" pos:end="1887:21"><name pos:start="1887:9" pos:end="1887:9">f</name><operator pos:start="1887:10" pos:end="1887:11">-&gt;</operator><name pos:start="1887:12" pos:end="1887:21">priv_class</name></name></expr>)</condition><block type="pseudo" pos:start="1888:9" pos:end="1889:67"><block_content pos:start="1888:9" pos:end="1889:67">
        <expr_stmt pos:start="1888:9" pos:end="1889:67"><expr pos:start="1888:9" pos:end="1889:66"><call pos:start="1888:9" pos:end="1889:66"><name pos:start="1888:9" pos:end="1888:26">show_help_children</name><argument_list pos:start="1888:27" pos:end="1889:66">(<argument pos:start="1888:28" pos:end="1888:40"><expr pos:start="1888:28" pos:end="1888:40"><name pos:start="1888:28" pos:end="1888:40"><name pos:start="1888:28" pos:end="1888:28">f</name><operator pos:start="1888:29" pos:end="1888:30">-&gt;</operator><name pos:start="1888:31" pos:end="1888:40">priv_class</name></name></expr></argument>, <argument pos:start="1888:43" pos:end="1889:65"><expr pos:start="1888:43" pos:end="1889:65"><name pos:start="1888:43" pos:end="1888:65">AV_OPT_FLAG_VIDEO_PARAM</name> <operator pos:start="1888:67" pos:end="1888:67">|</operator> <name pos:start="1888:69" pos:end="1888:95">AV_OPT_FLAG_FILTERING_PARAM</name> <operator pos:start="1888:97" pos:end="1888:97">|</operator>
                                          <name pos:start="1889:43" pos:end="1889:65">AV_OPT_FLAG_AUDIO_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="1890:5" pos:end="1893:0"><if pos:start="1890:5" pos:end="1893:0">if <condition pos:start="1890:8" pos:end="1890:50">(<expr pos:start="1890:9" pos:end="1890:49"><name pos:start="1890:9" pos:end="1890:16"><name pos:start="1890:9" pos:end="1890:9">f</name><operator pos:start="1890:10" pos:end="1890:11">-&gt;</operator><name pos:start="1890:12" pos:end="1890:16">flags</name></name> <operator pos:start="1890:18" pos:end="1890:18">&amp;</operator> <name pos:start="1890:20" pos:end="1890:49">AVFILTER_FLAG_SUPPORT_TIMELINE</name></expr>)</condition><block type="pseudo" pos:start="1891:9" pos:end="1893:0"><block_content pos:start="1891:9" pos:end="1893:0">
        <expr_stmt pos:start="1891:9" pos:end="1893:0"><expr pos:start="1891:9" pos:end="1891:85"><call pos:start="1891:9" pos:end="1891:85"><name pos:start="1891:9" pos:end="1891:14">printf</name><argument_list pos:start="1891:15" pos:end="1891:85">(<argument pos:start="1891:16" pos:end="1891:84"><expr pos:start="1891:16" pos:end="1891:84"><literal type="string" pos:start="1891:16" pos:end="1891:84">"This filter has support for timeline through the 'enable' option.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else pos:start="1892:1" pos:end="1892:5">#<cpp:directive pos:start="1892:2" pos:end="1892:5">else</cpp:directive></cpp:else>
    <expr_stmt pos:start="1893:5" pos:end="1896:0"><expr pos:start="1893:5" pos:end="1894:42"><call pos:start="1893:5" pos:end="1894:42"><name pos:start="1893:5" pos:end="1893:10">av_log</name><argument_list pos:start="1893:11" pos:end="1894:42">(<argument pos:start="1893:12" pos:end="1893:15"><expr pos:start="1893:12" pos:end="1893:15"><name pos:start="1893:12" pos:end="1893:15">NULL</name></expr></argument>, <argument pos:start="1893:18" pos:end="1893:29"><expr pos:start="1893:18" pos:end="1893:29"><name pos:start="1893:18" pos:end="1893:29">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="1893:32" pos:end="1894:41"><expr pos:start="1893:32" pos:end="1894:41"><literal type="string" pos:start="1893:32" pos:end="1893:60">"Build without libavfilter; "</literal>
           <literal type="string" pos:start="1894:12" pos:end="1894:41">"can not to satisfy request\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1895:1" pos:end="1895:6">#<cpp:directive pos:start="1895:2" pos:end="1895:6">endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif pos:start="1897:1" pos:end="1897:6">#<cpp:directive pos:start="1897:2" pos:end="1897:6">endif</cpp:directive></cpp:endif>

<function pos:start="1899:1" pos:end="1931:1"><type pos:start="1899:1" pos:end="1899:3"><name pos:start="1899:1" pos:end="1899:3">int</name></type> <name pos:start="1899:5" pos:end="1899:13">show_help</name><parameter_list pos:start="1899:14" pos:end="1899:61">(<parameter pos:start="1899:15" pos:end="1899:26"><decl pos:start="1899:15" pos:end="1899:26"><type pos:start="1899:15" pos:end="1899:26"><name pos:start="1899:15" pos:end="1899:18">void</name> <modifier pos:start="1899:20" pos:end="1899:20">*</modifier></type><name pos:start="1899:21" pos:end="1899:26">optctx</name></decl></parameter>, <parameter pos:start="1899:29" pos:end="1899:43"><decl pos:start="1899:29" pos:end="1899:43"><type pos:start="1899:29" pos:end="1899:43"><specifier pos:start="1899:29" pos:end="1899:33">const</specifier> <name pos:start="1899:35" pos:end="1899:38">char</name> <modifier pos:start="1899:40" pos:end="1899:40">*</modifier></type><name pos:start="1899:41" pos:end="1899:43">opt</name></decl></parameter>, <parameter pos:start="1899:46" pos:end="1899:60"><decl pos:start="1899:46" pos:end="1899:60"><type pos:start="1899:46" pos:end="1899:60"><specifier pos:start="1899:46" pos:end="1899:50">const</specifier> <name pos:start="1899:52" pos:end="1899:55">char</name> <modifier pos:start="1899:57" pos:end="1899:57">*</modifier></type><name pos:start="1899:58" pos:end="1899:60">arg</name></decl></parameter>)</parameter_list>
<block pos:start="1900:1" pos:end="1931:1">{<block_content pos:start="1901:5" pos:end="1930:13">
    <decl_stmt pos:start="1901:5" pos:end="1901:22"><decl pos:start="1901:5" pos:end="1901:15"><type pos:start="1901:5" pos:end="1901:10"><name pos:start="1901:5" pos:end="1901:8">char</name> <modifier pos:start="1901:10" pos:end="1901:10">*</modifier></type><name pos:start="1901:11" pos:end="1901:15">topic</name></decl>, <decl pos:start="1901:18" pos:end="1901:21"><type ref="prev" pos:start="1901:5" pos:end="1901:10"><modifier pos:start="1901:18" pos:end="1901:18">*</modifier></type><name pos:start="1901:19" pos:end="1901:21">par</name></decl>;</decl_stmt>
    <expr_stmt pos:start="1902:5" pos:end="1902:43"><expr pos:start="1902:5" pos:end="1902:42"><call pos:start="1902:5" pos:end="1902:42"><name pos:start="1902:5" pos:end="1902:23">av_log_set_callback</name><argument_list pos:start="1902:24" pos:end="1902:42">(<argument pos:start="1902:25" pos:end="1902:41"><expr pos:start="1902:25" pos:end="1902:41"><name pos:start="1902:25" pos:end="1902:41">log_callback_help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1904:5" pos:end="1904:38"><expr pos:start="1904:5" pos:end="1904:37"><name pos:start="1904:5" pos:end="1904:9">topic</name> <operator pos:start="1904:11" pos:end="1904:11">=</operator> <call pos:start="1904:13" pos:end="1904:37"><name pos:start="1904:13" pos:end="1904:21">av_strdup</name><argument_list pos:start="1904:22" pos:end="1904:37">(<argument pos:start="1904:23" pos:end="1904:36"><expr pos:start="1904:23" pos:end="1904:36"><ternary pos:start="1904:23" pos:end="1904:36"><condition pos:start="1904:23" pos:end="1904:27"><expr pos:start="1904:23" pos:end="1904:25"><name pos:start="1904:23" pos:end="1904:25">arg</name></expr> ?</condition><then pos:start="1904:29" pos:end="1904:31"> <expr pos:start="1904:29" pos:end="1904:31"><name pos:start="1904:29" pos:end="1904:31">arg</name></expr> </then><else pos:start="1904:33" pos:end="1904:36">: <expr pos:start="1904:35" pos:end="1904:36"><literal type="string" pos:start="1904:35" pos:end="1904:36">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1905:5" pos:end="1906:31"><if pos:start="1905:5" pos:end="1906:31">if <condition pos:start="1905:8" pos:end="1905:15">(<expr pos:start="1905:9" pos:end="1905:14"><operator pos:start="1905:9" pos:end="1905:9">!</operator><name pos:start="1905:10" pos:end="1905:14">topic</name></expr>)</condition><block type="pseudo" pos:start="1906:9" pos:end="1906:31"><block_content pos:start="1906:9" pos:end="1906:31">
        <return pos:start="1906:9" pos:end="1906:31">return <expr pos:start="1906:16" pos:end="1906:30"><call pos:start="1906:16" pos:end="1906:30"><name pos:start="1906:16" pos:end="1906:22">AVERROR</name><argument_list pos:start="1906:23" pos:end="1906:30">(<argument pos:start="1906:24" pos:end="1906:29"><expr pos:start="1906:24" pos:end="1906:29"><name pos:start="1906:24" pos:end="1906:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="1907:5" pos:end="1907:29"><expr pos:start="1907:5" pos:end="1907:28"><name pos:start="1907:5" pos:end="1907:7">par</name> <operator pos:start="1907:9" pos:end="1907:9">=</operator> <call pos:start="1907:11" pos:end="1907:28"><name pos:start="1907:11" pos:end="1907:16">strchr</name><argument_list pos:start="1907:17" pos:end="1907:28">(<argument pos:start="1907:18" pos:end="1907:22"><expr pos:start="1907:18" pos:end="1907:22"><name pos:start="1907:18" pos:end="1907:22">topic</name></expr></argument>, <argument pos:start="1907:25" pos:end="1907:27"><expr pos:start="1907:25" pos:end="1907:27"><literal type="char" pos:start="1907:25" pos:end="1907:27">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1908:5" pos:end="1909:19"><if pos:start="1908:5" pos:end="1909:19">if <condition pos:start="1908:8" pos:end="1908:12">(<expr pos:start="1908:9" pos:end="1908:11"><name pos:start="1908:9" pos:end="1908:11">par</name></expr>)</condition><block type="pseudo" pos:start="1909:9" pos:end="1909:19"><block_content pos:start="1909:9" pos:end="1909:19">
        <expr_stmt pos:start="1909:9" pos:end="1909:19"><expr pos:start="1909:9" pos:end="1909:18"><operator pos:start="1909:9" pos:end="1909:9">*</operator><name pos:start="1909:10" pos:end="1909:12">par</name><operator pos:start="1909:13" pos:end="1909:14">++</operator> <operator pos:start="1909:16" pos:end="1909:16">=</operator> <literal type="number" pos:start="1909:18" pos:end="1909:18">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="1911:5" pos:end="1927:5"><if pos:start="1911:5" pos:end="1913:5">if <condition pos:start="1911:8" pos:end="1911:16">(<expr pos:start="1911:9" pos:end="1911:15"><operator pos:start="1911:9" pos:end="1911:9">!</operator><operator pos:start="1911:10" pos:end="1911:10">*</operator><name pos:start="1911:11" pos:end="1911:15">topic</name></expr>)</condition> <block pos:start="1911:18" pos:end="1913:5">{<block_content pos:start="1912:9" pos:end="1912:38">
        <expr_stmt pos:start="1912:9" pos:end="1912:38"><expr pos:start="1912:9" pos:end="1912:37"><call pos:start="1912:9" pos:end="1912:37"><name pos:start="1912:9" pos:end="1912:25">show_help_default</name><argument_list pos:start="1912:26" pos:end="1912:37">(<argument pos:start="1912:27" pos:end="1912:31"><expr pos:start="1912:27" pos:end="1912:31"><name pos:start="1912:27" pos:end="1912:31">topic</name></expr></argument>, <argument pos:start="1912:34" pos:end="1912:36"><expr pos:start="1912:34" pos:end="1912:36"><name pos:start="1912:34" pos:end="1912:36">par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="1913:7" pos:end="1915:5">else if <condition pos:start="1913:15" pos:end="1913:41">(<expr pos:start="1913:16" pos:end="1913:40"><operator pos:start="1913:16" pos:end="1913:16">!</operator><call pos:start="1913:17" pos:end="1913:40"><name pos:start="1913:17" pos:end="1913:22">strcmp</name><argument_list pos:start="1913:23" pos:end="1913:40">(<argument pos:start="1913:24" pos:end="1913:28"><expr pos:start="1913:24" pos:end="1913:28"><name pos:start="1913:24" pos:end="1913:28">topic</name></expr></argument>, <argument pos:start="1913:31" pos:end="1913:39"><expr pos:start="1913:31" pos:end="1913:39"><literal type="string" pos:start="1913:31" pos:end="1913:39">"decoder"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1913:43" pos:end="1915:5">{<block_content pos:start="1914:9" pos:end="1914:32">
        <expr_stmt pos:start="1914:9" pos:end="1914:32"><expr pos:start="1914:9" pos:end="1914:31"><call pos:start="1914:9" pos:end="1914:31"><name pos:start="1914:9" pos:end="1914:23">show_help_codec</name><argument_list pos:start="1914:24" pos:end="1914:31">(<argument pos:start="1914:25" pos:end="1914:27"><expr pos:start="1914:25" pos:end="1914:27"><name pos:start="1914:25" pos:end="1914:27">par</name></expr></argument>, <argument pos:start="1914:30" pos:end="1914:30"><expr pos:start="1914:30" pos:end="1914:30"><literal type="number" pos:start="1914:30" pos:end="1914:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="1915:7" pos:end="1917:5">else if <condition pos:start="1915:15" pos:end="1915:41">(<expr pos:start="1915:16" pos:end="1915:40"><operator pos:start="1915:16" pos:end="1915:16">!</operator><call pos:start="1915:17" pos:end="1915:40"><name pos:start="1915:17" pos:end="1915:22">strcmp</name><argument_list pos:start="1915:23" pos:end="1915:40">(<argument pos:start="1915:24" pos:end="1915:28"><expr pos:start="1915:24" pos:end="1915:28"><name pos:start="1915:24" pos:end="1915:28">topic</name></expr></argument>, <argument pos:start="1915:31" pos:end="1915:39"><expr pos:start="1915:31" pos:end="1915:39"><literal type="string" pos:start="1915:31" pos:end="1915:39">"encoder"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1915:43" pos:end="1917:5">{<block_content pos:start="1916:9" pos:end="1916:32">
        <expr_stmt pos:start="1916:9" pos:end="1916:32"><expr pos:start="1916:9" pos:end="1916:31"><call pos:start="1916:9" pos:end="1916:31"><name pos:start="1916:9" pos:end="1916:23">show_help_codec</name><argument_list pos:start="1916:24" pos:end="1916:31">(<argument pos:start="1916:25" pos:end="1916:27"><expr pos:start="1916:25" pos:end="1916:27"><name pos:start="1916:25" pos:end="1916:27">par</name></expr></argument>, <argument pos:start="1916:30" pos:end="1916:30"><expr pos:start="1916:30" pos:end="1916:30"><literal type="number" pos:start="1916:30" pos:end="1916:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="1917:7" pos:end="1919:5">else if <condition pos:start="1917:15" pos:end="1917:41">(<expr pos:start="1917:16" pos:end="1917:40"><operator pos:start="1917:16" pos:end="1917:16">!</operator><call pos:start="1917:17" pos:end="1917:40"><name pos:start="1917:17" pos:end="1917:22">strcmp</name><argument_list pos:start="1917:23" pos:end="1917:40">(<argument pos:start="1917:24" pos:end="1917:28"><expr pos:start="1917:24" pos:end="1917:28"><name pos:start="1917:24" pos:end="1917:28">topic</name></expr></argument>, <argument pos:start="1917:31" pos:end="1917:39"><expr pos:start="1917:31" pos:end="1917:39"><literal type="string" pos:start="1917:31" pos:end="1917:39">"demuxer"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1917:43" pos:end="1919:5">{<block_content pos:start="1918:9" pos:end="1918:31">
        <expr_stmt pos:start="1918:9" pos:end="1918:31"><expr pos:start="1918:9" pos:end="1918:30"><call pos:start="1918:9" pos:end="1918:30"><name pos:start="1918:9" pos:end="1918:25">show_help_demuxer</name><argument_list pos:start="1918:26" pos:end="1918:30">(<argument pos:start="1918:27" pos:end="1918:29"><expr pos:start="1918:27" pos:end="1918:29"><name pos:start="1918:27" pos:end="1918:29">par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="1919:7" pos:end="1922:5">else if <condition pos:start="1919:15" pos:end="1919:39">(<expr pos:start="1919:16" pos:end="1919:38"><operator pos:start="1919:16" pos:end="1919:16">!</operator><call pos:start="1919:17" pos:end="1919:38"><name pos:start="1919:17" pos:end="1919:22">strcmp</name><argument_list pos:start="1919:23" pos:end="1919:38">(<argument pos:start="1919:24" pos:end="1919:28"><expr pos:start="1919:24" pos:end="1919:28"><name pos:start="1919:24" pos:end="1919:28">topic</name></expr></argument>, <argument pos:start="1919:31" pos:end="1919:37"><expr pos:start="1919:31" pos:end="1919:37"><literal type="string" pos:start="1919:31" pos:end="1919:37">"muxer"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1919:41" pos:end="1922:5">{<block_content pos:start="1920:9" pos:end="1922:0">
        <expr_stmt pos:start="1920:9" pos:end="1922:0"><expr pos:start="1920:9" pos:end="1920:28"><call pos:start="1920:9" pos:end="1920:28"><name pos:start="1920:9" pos:end="1920:23">show_help_muxer</name><argument_list pos:start="1920:24" pos:end="1920:28">(<argument pos:start="1920:25" pos:end="1920:27"><expr pos:start="1920:25" pos:end="1920:27"><name pos:start="1920:25" pos:end="1920:27">par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:start="1921:1" pos:end="1921:19">#<cpp:directive pos:start="1921:2" pos:end="1921:3">if</cpp:directive> <expr pos:start="1921:5" pos:end="1921:19"><name pos:start="1921:5" pos:end="1921:19">CONFIG_AVFILTER</name></expr></cpp:if>
    </block_content>}</block></if> <if type="elseif" pos:start="1922:7" pos:end="1925:5">else if <condition pos:start="1922:15" pos:end="1922:40">(<expr pos:start="1922:16" pos:end="1922:39"><operator pos:start="1922:16" pos:end="1922:16">!</operator><call pos:start="1922:17" pos:end="1922:39"><name pos:start="1922:17" pos:end="1922:22">strcmp</name><argument_list pos:start="1922:23" pos:end="1922:39">(<argument pos:start="1922:24" pos:end="1922:28"><expr pos:start="1922:24" pos:end="1922:28"><name pos:start="1922:24" pos:end="1922:28">topic</name></expr></argument>, <argument pos:start="1922:31" pos:end="1922:38"><expr pos:start="1922:31" pos:end="1922:38"><literal type="string" pos:start="1922:31" pos:end="1922:38">"filter"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1922:42" pos:end="1925:5">{<block_content pos:start="1923:9" pos:end="1925:0">
        <expr_stmt pos:start="1923:9" pos:end="1925:0"><expr pos:start="1923:9" pos:end="1923:29"><call pos:start="1923:9" pos:end="1923:29"><name pos:start="1923:9" pos:end="1923:24">show_help_filter</name><argument_list pos:start="1923:25" pos:end="1923:29">(<argument pos:start="1923:26" pos:end="1923:28"><expr pos:start="1923:26" pos:end="1923:28"><name pos:start="1923:26" pos:end="1923:28">par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1924:1" pos:end="1924:6">#<cpp:directive pos:start="1924:2" pos:end="1924:6">endif</cpp:directive></cpp:endif>
    </block_content>}</block></if> <else pos:start="1925:7" pos:end="1927:5">else <block pos:start="1925:12" pos:end="1927:5">{<block_content pos:start="1926:9" pos:end="1926:38">
        <expr_stmt pos:start="1926:9" pos:end="1926:38"><expr pos:start="1926:9" pos:end="1926:37"><call pos:start="1926:9" pos:end="1926:37"><name pos:start="1926:9" pos:end="1926:25">show_help_default</name><argument_list pos:start="1926:26" pos:end="1926:37">(<argument pos:start="1926:27" pos:end="1926:31"><expr pos:start="1926:27" pos:end="1926:31"><name pos:start="1926:27" pos:end="1926:31">topic</name></expr></argument>, <argument pos:start="1926:34" pos:end="1926:36"><expr pos:start="1926:34" pos:end="1926:36"><name pos:start="1926:34" pos:end="1926:36">par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="1929:5" pos:end="1929:21"><expr pos:start="1929:5" pos:end="1929:20"><call pos:start="1929:5" pos:end="1929:20"><name pos:start="1929:5" pos:end="1929:12">av_freep</name><argument_list pos:start="1929:13" pos:end="1929:20">(<argument pos:start="1929:14" pos:end="1929:19"><expr pos:start="1929:14" pos:end="1929:19"><operator pos:start="1929:14" pos:end="1929:14">&amp;</operator><name pos:start="1929:15" pos:end="1929:19">topic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="1930:5" pos:end="1930:13">return <expr pos:start="1930:12" pos:end="1930:12"><literal type="number" pos:start="1930:12" pos:end="1930:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="1933:1" pos:end="1942:1"><type pos:start="1933:1" pos:end="1933:3"><name pos:start="1933:1" pos:end="1933:3">int</name></type> <name pos:start="1933:5" pos:end="1933:14">read_yesno</name><parameter_list pos:start="1933:15" pos:end="1933:20">(<parameter pos:start="1933:16" pos:end="1933:19"><decl pos:start="1933:16" pos:end="1933:19"><type pos:start="1933:16" pos:end="1933:19"><name pos:start="1933:16" pos:end="1933:19">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="1934:1" pos:end="1942:1">{<block_content pos:start="1935:5" pos:end="1941:17">
    <decl_stmt pos:start="1935:5" pos:end="1935:22"><decl pos:start="1935:5" pos:end="1935:21"><type pos:start="1935:5" pos:end="1935:7"><name pos:start="1935:5" pos:end="1935:7">int</name></type> <name pos:start="1935:9" pos:end="1935:9">c</name> <init pos:start="1935:11" pos:end="1935:21">= <expr pos:start="1935:13" pos:end="1935:21"><call pos:start="1935:13" pos:end="1935:21"><name pos:start="1935:13" pos:end="1935:19">getchar</name><argument_list pos:start="1935:20" pos:end="1935:21">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1936:5" pos:end="1936:39"><decl pos:start="1936:5" pos:end="1936:38"><type pos:start="1936:5" pos:end="1936:7"><name pos:start="1936:5" pos:end="1936:7">int</name></type> <name pos:start="1936:9" pos:end="1936:13">yesno</name> <init pos:start="1936:15" pos:end="1936:38">= <expr pos:start="1936:17" pos:end="1936:38"><operator pos:start="1936:17" pos:end="1936:17">(</operator><call pos:start="1936:18" pos:end="1936:30"><name pos:start="1936:18" pos:end="1936:27">av_toupper</name><argument_list pos:start="1936:28" pos:end="1936:30">(<argument pos:start="1936:29" pos:end="1936:29"><expr pos:start="1936:29" pos:end="1936:29"><name pos:start="1936:29" pos:end="1936:29">c</name></expr></argument>)</argument_list></call> <operator pos:start="1936:32" pos:end="1936:33">==</operator> <literal type="char" pos:start="1936:35" pos:end="1936:37">'Y'</literal><operator pos:start="1936:38" pos:end="1936:38">)</operator></expr></init></decl>;</decl_stmt>

    <while pos:start="1938:5" pos:end="1939:22">while <condition pos:start="1938:11" pos:end="1938:33">(<expr pos:start="1938:12" pos:end="1938:32"><name pos:start="1938:12" pos:end="1938:12">c</name> <operator pos:start="1938:14" pos:end="1938:15">!=</operator> <literal type="char" pos:start="1938:17" pos:end="1938:20">'\n'</literal> <operator pos:start="1938:22" pos:end="1938:23">&amp;&amp;</operator> <name pos:start="1938:25" pos:end="1938:25">c</name> <operator pos:start="1938:27" pos:end="1938:28">!=</operator> <name pos:start="1938:30" pos:end="1938:32">EOF</name></expr>)</condition><block type="pseudo" pos:start="1939:9" pos:end="1939:22"><block_content pos:start="1939:9" pos:end="1939:22">
        <expr_stmt pos:start="1939:9" pos:end="1939:22"><expr pos:start="1939:9" pos:end="1939:21"><name pos:start="1939:9" pos:end="1939:9">c</name> <operator pos:start="1939:11" pos:end="1939:11">=</operator> <call pos:start="1939:13" pos:end="1939:21"><name pos:start="1939:13" pos:end="1939:19">getchar</name><argument_list pos:start="1939:20" pos:end="1939:21">()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

    <return pos:start="1941:5" pos:end="1941:17">return <expr pos:start="1941:12" pos:end="1941:16"><name pos:start="1941:12" pos:end="1941:16">yesno</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="1944:1" pos:end="1992:1"><type pos:start="1944:1" pos:end="1944:6"><name pos:start="1944:1" pos:end="1944:4">FILE</name> <modifier pos:start="1944:6" pos:end="1944:6">*</modifier></type><name pos:start="1944:7" pos:end="1944:21">get_preset_file</name><parameter_list pos:start="1944:22" pos:end="1946:45">(<parameter pos:start="1944:23" pos:end="1944:36"><decl pos:start="1944:23" pos:end="1944:36"><type pos:start="1944:23" pos:end="1944:36"><name pos:start="1944:23" pos:end="1944:26">char</name> <modifier pos:start="1944:28" pos:end="1944:28">*</modifier></type><name pos:start="1944:29" pos:end="1944:36">filename</name></decl></parameter>, <parameter pos:start="1944:39" pos:end="1944:58"><decl pos:start="1944:39" pos:end="1944:58"><type pos:start="1944:39" pos:end="1944:58"><name pos:start="1944:39" pos:end="1944:44">size_t</name></type> <name pos:start="1944:46" pos:end="1944:58">filename_size</name></decl></parameter>,
                      <parameter pos:start="1945:23" pos:end="1945:45"><decl pos:start="1945:23" pos:end="1945:45"><type pos:start="1945:23" pos:end="1945:45"><specifier pos:start="1945:23" pos:end="1945:27">const</specifier> <name pos:start="1945:29" pos:end="1945:32">char</name> <modifier pos:start="1945:34" pos:end="1945:34">*</modifier></type><name pos:start="1945:35" pos:end="1945:45">preset_name</name></decl></parameter>, <parameter pos:start="1945:48" pos:end="1945:58"><decl pos:start="1945:48" pos:end="1945:58"><type pos:start="1945:48" pos:end="1945:58"><name pos:start="1945:48" pos:end="1945:50">int</name></type> <name pos:start="1945:52" pos:end="1945:58">is_path</name></decl></parameter>,
                      <parameter pos:start="1946:23" pos:end="1946:44"><decl pos:start="1946:23" pos:end="1946:44"><type pos:start="1946:23" pos:end="1946:44"><specifier pos:start="1946:23" pos:end="1946:27">const</specifier> <name pos:start="1946:29" pos:end="1946:32">char</name> <modifier pos:start="1946:34" pos:end="1946:34">*</modifier></type><name pos:start="1946:35" pos:end="1946:44">codec_name</name></decl></parameter>)</parameter_list>
<block pos:start="1947:1" pos:end="1992:1">{<block_content pos:start="1948:5" pos:end="1991:13">
    <decl_stmt pos:start="1948:5" pos:end="1948:19"><decl pos:start="1948:5" pos:end="1948:18"><type pos:start="1948:5" pos:end="1948:10"><name pos:start="1948:5" pos:end="1948:8">FILE</name> <modifier pos:start="1948:10" pos:end="1948:10">*</modifier></type><name pos:start="1948:11" pos:end="1948:11">f</name> <init pos:start="1948:13" pos:end="1948:18">= <expr pos:start="1948:15" pos:end="1948:18"><name pos:start="1948:15" pos:end="1948:18">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1949:5" pos:end="1949:10"><decl pos:start="1949:5" pos:end="1949:9"><type pos:start="1949:5" pos:end="1949:7"><name pos:start="1949:5" pos:end="1949:7">int</name></type> <name pos:start="1949:9" pos:end="1949:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1950:5" pos:end="1952:46"><decl pos:start="1950:5" pos:end="1952:45"><type pos:start="1950:5" pos:end="1950:16"><specifier pos:start="1950:5" pos:end="1950:9">const</specifier> <name pos:start="1950:11" pos:end="1950:14">char</name> <modifier pos:start="1950:16" pos:end="1950:16">*</modifier></type><name pos:start="1950:17" pos:end="1950:23"><name pos:start="1950:17" pos:end="1950:20">base</name><index pos:start="1950:21" pos:end="1950:23">[<expr pos:start="1950:22" pos:end="1950:22"><literal type="number" pos:start="1950:22" pos:end="1950:22">3</literal></expr>]</index></name> <init pos:start="1950:25" pos:end="1952:45">= <expr pos:start="1950:27" pos:end="1952:45"><block pos:start="1950:27" pos:end="1952:45">{ <expr pos:start="1950:29" pos:end="1950:52"><call pos:start="1950:29" pos:end="1950:52"><name pos:start="1950:29" pos:end="1950:34">getenv</name><argument_list pos:start="1950:35" pos:end="1950:52">(<argument pos:start="1950:36" pos:end="1950:51"><expr pos:start="1950:36" pos:end="1950:51"><literal type="string" pos:start="1950:36" pos:end="1950:51">"FFMPEG_DATADIR"</literal></expr></argument>)</argument_list></call></expr>,
                            <expr pos:start="1951:29" pos:end="1951:42"><call pos:start="1951:29" pos:end="1951:42"><name pos:start="1951:29" pos:end="1951:34">getenv</name><argument_list pos:start="1951:35" pos:end="1951:42">(<argument pos:start="1951:36" pos:end="1951:41"><expr pos:start="1951:36" pos:end="1951:41"><literal type="string" pos:start="1951:36" pos:end="1951:41">"HOME"</literal></expr></argument>)</argument_list></call></expr>,
                            <expr pos:start="1952:29" pos:end="1952:42"><name pos:start="1952:29" pos:end="1952:42">FFMPEG_DATADIR</name></expr>, }</block></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1954:5" pos:end="1989:5"><if pos:start="1954:5" pos:end="1957:5">if <condition pos:start="1954:8" pos:end="1954:16">(<expr pos:start="1954:9" pos:end="1954:15"><name pos:start="1954:9" pos:end="1954:15">is_path</name></expr>)</condition> <block pos:start="1954:18" pos:end="1957:5">{<block_content pos:start="1955:9" pos:end="1956:33">
        <expr_stmt pos:start="1955:9" pos:end="1955:57"><expr pos:start="1955:9" pos:end="1955:56"><call pos:start="1955:9" pos:end="1955:56"><name pos:start="1955:9" pos:end="1955:18">av_strlcpy</name><argument_list pos:start="1955:19" pos:end="1955:56">(<argument pos:start="1955:20" pos:end="1955:27"><expr pos:start="1955:20" pos:end="1955:27"><name pos:start="1955:20" pos:end="1955:27">filename</name></expr></argument>, <argument pos:start="1955:30" pos:end="1955:40"><expr pos:start="1955:30" pos:end="1955:40"><name pos:start="1955:30" pos:end="1955:40">preset_name</name></expr></argument>, <argument pos:start="1955:43" pos:end="1955:55"><expr pos:start="1955:43" pos:end="1955:55"><name pos:start="1955:43" pos:end="1955:55">filename_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1956:9" pos:end="1956:33"><expr pos:start="1956:9" pos:end="1956:32"><name pos:start="1956:9" pos:end="1956:9">f</name> <operator pos:start="1956:11" pos:end="1956:11">=</operator> <call pos:start="1956:13" pos:end="1956:32"><name pos:start="1956:13" pos:end="1956:17">fopen</name><argument_list pos:start="1956:18" pos:end="1956:32">(<argument pos:start="1956:19" pos:end="1956:26"><expr pos:start="1956:19" pos:end="1956:26"><name pos:start="1956:19" pos:end="1956:26">filename</name></expr></argument>, <argument pos:start="1956:29" pos:end="1956:31"><expr pos:start="1956:29" pos:end="1956:31"><literal type="string" pos:start="1956:29" pos:end="1956:31">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="1957:7" pos:end="1989:5">else <block pos:start="1957:12" pos:end="1989:5">{<block_content pos:start="1959:9" pos:end="1988:9">
<cpp:ifdef pos:start="1958:1" pos:end="1958:13">#<cpp:directive pos:start="1958:2" pos:end="1958:6">ifdef</cpp:directive> <name pos:start="1958:8" pos:end="1958:13">_WIN32</name></cpp:ifdef>
        <decl_stmt pos:start="1959:9" pos:end="1959:36"><decl pos:start="1959:9" pos:end="1959:30"><type pos:start="1959:9" pos:end="1959:12"><name pos:start="1959:9" pos:end="1959:12">char</name></type> <name pos:start="1959:14" pos:end="1959:30"><name pos:start="1959:14" pos:end="1959:20">datadir</name><index pos:start="1959:21" pos:end="1959:30">[<expr pos:start="1959:22" pos:end="1959:29"><name pos:start="1959:22" pos:end="1959:29">MAX_PATH</name></expr>]</index></name></decl>, <decl pos:start="1959:33" pos:end="1959:35"><type ref="prev" pos:start="1959:9" pos:end="1959:12"><modifier pos:start="1959:33" pos:end="1959:33">*</modifier></type><name pos:start="1959:34" pos:end="1959:35">ls</name></decl>;</decl_stmt>
        <expr_stmt pos:start="1960:9" pos:end="1960:23"><expr pos:start="1960:9" pos:end="1960:22"><name pos:start="1960:9" pos:end="1960:15"><name pos:start="1960:9" pos:end="1960:12">base</name><index pos:start="1960:13" pos:end="1960:15">[<expr pos:start="1960:14" pos:end="1960:14"><literal type="number" pos:start="1960:14" pos:end="1960:14">2</literal></expr>]</index></name> <operator pos:start="1960:17" pos:end="1960:17">=</operator> <name pos:start="1960:19" pos:end="1960:22">NULL</name></expr>;</expr_stmt>

        <if_stmt pos:start="1962:9" pos:end="1975:0"><if pos:start="1962:9" pos:end="1975:0">if <condition pos:start="1962:12" pos:end="1962:85">(<expr pos:start="1962:13" pos:end="1962:84"><call pos:start="1962:13" pos:end="1962:84"><name pos:start="1962:13" pos:end="1962:30">GetModuleFileNameA</name><argument_list pos:start="1962:31" pos:end="1962:84">(<argument pos:start="1962:32" pos:end="1962:53"><expr pos:start="1962:32" pos:end="1962:53"><call pos:start="1962:32" pos:end="1962:53"><name pos:start="1962:32" pos:end="1962:47">GetModuleHandleA</name><argument_list pos:start="1962:48" pos:end="1962:53">(<argument pos:start="1962:49" pos:end="1962:52"><expr pos:start="1962:49" pos:end="1962:52"><name pos:start="1962:49" pos:end="1962:52">NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1962:56" pos:end="1962:62"><expr pos:start="1962:56" pos:end="1962:62"><name pos:start="1962:56" pos:end="1962:62">datadir</name></expr></argument>, <argument pos:start="1962:65" pos:end="1962:83"><expr pos:start="1962:65" pos:end="1962:83"><sizeof pos:start="1962:65" pos:end="1962:79">sizeof<argument_list pos:start="1962:71" pos:end="1962:79">(<argument pos:start="1962:72" pos:end="1962:78"><expr pos:start="1962:72" pos:end="1962:78"><name pos:start="1962:72" pos:end="1962:78">datadir</name></expr></argument>)</argument_list></sizeof> <operator pos:start="1962:81" pos:end="1962:81">-</operator> <literal type="number" pos:start="1962:83" pos:end="1962:83">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block pos:start="1963:9" pos:end="1975:0">{<block_content pos:start="1964:13" pos:end="1972:13">
            <for pos:start="1964:13" pos:end="1965:43">for <control pos:start="1964:17" pos:end="1964:68">(<init pos:start="1964:18" pos:end="1964:30"><expr pos:start="1964:18" pos:end="1964:29"><name pos:start="1964:18" pos:end="1964:19">ls</name> <operator pos:start="1964:21" pos:end="1964:21">=</operator> <name pos:start="1964:23" pos:end="1964:29">datadir</name></expr>;</init> <condition pos:start="1964:32" pos:end="1964:62"><expr pos:start="1964:32" pos:end="1964:61"><name pos:start="1964:32" pos:end="1964:33">ls</name> <operator pos:start="1964:35" pos:end="1964:35">&lt;</operator> <name pos:start="1964:37" pos:end="1964:43">datadir</name> <operator pos:start="1964:45" pos:end="1964:45">+</operator> <call pos:start="1964:47" pos:end="1964:61"><name pos:start="1964:47" pos:end="1964:52">strlen</name><argument_list pos:start="1964:53" pos:end="1964:61">(<argument pos:start="1964:54" pos:end="1964:60"><expr pos:start="1964:54" pos:end="1964:60"><name pos:start="1964:54" pos:end="1964:60">datadir</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="1964:64" pos:end="1964:67"><expr pos:start="1964:64" pos:end="1964:67"><name pos:start="1964:64" pos:end="1964:65">ls</name><operator pos:start="1964:66" pos:end="1964:67">++</operator></expr></incr>)</control><block type="pseudo" pos:start="1965:17" pos:end="1965:43"><block_content pos:start="1965:17" pos:end="1965:43">
                <if_stmt pos:start="1965:17" pos:end="1965:43"><if pos:start="1965:17" pos:end="1965:43">if <condition pos:start="1965:20" pos:end="1965:32">(<expr pos:start="1965:21" pos:end="1965:31"><operator pos:start="1965:21" pos:end="1965:21">*</operator><name pos:start="1965:22" pos:end="1965:23">ls</name> <operator pos:start="1965:25" pos:end="1965:26">==</operator> <literal type="char" pos:start="1965:28" pos:end="1965:31">'\\'</literal></expr>)</condition><block type="pseudo" pos:start="1965:34" pos:end="1965:43"><block_content pos:start="1965:34" pos:end="1965:43"> <expr_stmt pos:start="1965:34" pos:end="1965:43"><expr pos:start="1965:34" pos:end="1965:42"><operator pos:start="1965:34" pos:end="1965:34">*</operator><name pos:start="1965:35" pos:end="1965:36">ls</name> <operator pos:start="1965:38" pos:end="1965:38">=</operator> <literal type="char" pos:start="1965:40" pos:end="1965:42">'/'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

            <if_stmt pos:start="1967:13" pos:end="1972:13"><if pos:start="1967:13" pos:end="1972:13">if <condition pos:start="1967:16" pos:end="1967:43">(<expr pos:start="1967:17" pos:end="1967:42"><name pos:start="1967:17" pos:end="1967:18">ls</name> <operator pos:start="1967:20" pos:end="1967:20">=</operator> <call pos:start="1967:22" pos:end="1967:42"><name pos:start="1967:22" pos:end="1967:28">strrchr</name><argument_list pos:start="1967:29" pos:end="1967:42">(<argument pos:start="1967:30" pos:end="1967:36"><expr pos:start="1967:30" pos:end="1967:36"><name pos:start="1967:30" pos:end="1967:36">datadir</name></expr></argument>, <argument pos:start="1967:39" pos:end="1967:41"><expr pos:start="1967:39" pos:end="1967:41"><literal type="char" pos:start="1967:39" pos:end="1967:41">'/'</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block pos:start="1968:13" pos:end="1972:13">{<block_content pos:start="1969:17" pos:end="1971:34">
                <expr_stmt pos:start="1969:17" pos:end="1969:24"><expr pos:start="1969:17" pos:end="1969:23"><operator pos:start="1969:17" pos:end="1969:17">*</operator><name pos:start="1969:18" pos:end="1969:19">ls</name> <operator pos:start="1969:21" pos:end="1969:21">=</operator> <literal type="number" pos:start="1969:23" pos:end="1969:23">0</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="1970:17" pos:end="1970:87"><expr pos:start="1970:17" pos:end="1970:86"><call pos:start="1970:17" pos:end="1970:86"><name pos:start="1970:17" pos:end="1970:23">strncat</name><argument_list pos:start="1970:24" pos:end="1970:86">(<argument pos:start="1970:25" pos:end="1970:31"><expr pos:start="1970:25" pos:end="1970:31"><name pos:start="1970:25" pos:end="1970:31">datadir</name></expr></argument>, <argument pos:start="1970:34" pos:end="1970:45"><expr pos:start="1970:34" pos:end="1970:45"><literal type="string" pos:start="1970:34" pos:end="1970:45">"/ffpresets"</literal></expr></argument>,  <argument pos:start="1970:49" pos:end="1970:85"><expr pos:start="1970:49" pos:end="1970:85"><sizeof pos:start="1970:49" pos:end="1970:63">sizeof<argument_list pos:start="1970:55" pos:end="1970:63">(<argument pos:start="1970:56" pos:end="1970:62"><expr pos:start="1970:56" pos:end="1970:62"><name pos:start="1970:56" pos:end="1970:62">datadir</name></expr></argument>)</argument_list></sizeof> <operator pos:start="1970:65" pos:end="1970:65">-</operator> <literal type="number" pos:start="1970:67" pos:end="1970:69">1</literal> <operator pos:start="1970:69" pos:end="1970:69">-</operator> <call pos:start="1970:71" pos:end="1970:85"><name pos:start="1970:71" pos:end="1970:76">strlen</name><argument_list pos:start="1970:77" pos:end="1970:85">(<argument pos:start="1970:78" pos:end="1970:84"><expr pos:start="1970:78" pos:end="1970:84"><name pos:start="1970:78" pos:end="1970:84">datadir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1971:17" pos:end="1971:34"><expr pos:start="1971:17" pos:end="1971:33"><name pos:start="1971:17" pos:end="1971:23"><name pos:start="1971:17" pos:end="1971:20">base</name><index pos:start="1971:21" pos:end="1971:23">[<expr pos:start="1971:22" pos:end="1971:22"><literal type="number" pos:start="1971:22" pos:end="1971:22">2</literal></expr>]</index></name> <operator pos:start="1971:25" pos:end="1971:25">=</operator> <name pos:start="1971:27" pos:end="1971:33">datadir</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif pos:start="1974:1" pos:end="1974:6">#<cpp:directive pos:start="1974:2" pos:end="1974:6">endif</cpp:directive></cpp:endif>
        <for pos:start="1975:9" pos:end="1988:9">for <control pos:start="1975:13" pos:end="1975:37">(<init pos:start="1975:14" pos:end="1975:19"><expr pos:start="1975:14" pos:end="1975:18"><name pos:start="1975:14" pos:end="1975:14">i</name> <operator pos:start="1975:16" pos:end="1975:16">=</operator> <literal type="number" pos:start="1975:18" pos:end="1975:18">0</literal></expr>;</init> <condition pos:start="1975:21" pos:end="1975:32"><expr pos:start="1975:21" pos:end="1975:31"><name pos:start="1975:21" pos:end="1975:21">i</name> <operator pos:start="1975:23" pos:end="1975:23">&lt;</operator> <literal type="number" pos:start="1975:25" pos:end="1975:25">3</literal> <operator pos:start="1975:27" pos:end="1975:28">&amp;&amp;</operator> <operator pos:start="1975:30" pos:end="1975:30">!</operator><name pos:start="1975:31" pos:end="1975:31">f</name></expr>;</condition> <incr pos:start="1975:34" pos:end="1975:36"><expr pos:start="1975:34" pos:end="1975:36"><name pos:start="1975:34" pos:end="1975:34">i</name><operator pos:start="1975:35" pos:end="1975:36">++</operator></expr></incr>)</control> <block pos:start="1975:39" pos:end="1988:9">{<block_content pos:start="1976:13" pos:end="1987:13">
            <if_stmt pos:start="1976:13" pos:end="1977:25"><if pos:start="1976:13" pos:end="1977:25">if <condition pos:start="1976:16" pos:end="1976:25">(<expr pos:start="1976:17" pos:end="1976:24"><operator pos:start="1976:17" pos:end="1976:17">!</operator><name pos:start="1976:18" pos:end="1976:24"><name pos:start="1976:18" pos:end="1976:21">base</name><index pos:start="1976:22" pos:end="1976:24">[<expr pos:start="1976:23" pos:end="1976:23"><name pos:start="1976:23" pos:end="1976:23">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="1977:17" pos:end="1977:25"><block_content pos:start="1977:17" pos:end="1977:25">
                <continue pos:start="1977:17" pos:end="1977:25">continue;</continue></block_content></block></if></if_stmt>
            <expr_stmt pos:start="1978:13" pos:end="1979:60"><expr pos:start="1978:13" pos:end="1979:59"><call pos:start="1978:13" pos:end="1979:59"><name pos:start="1978:13" pos:end="1978:20">snprintf</name><argument_list pos:start="1978:21" pos:end="1979:59">(<argument pos:start="1978:22" pos:end="1978:29"><expr pos:start="1978:22" pos:end="1978:29"><name pos:start="1978:22" pos:end="1978:29">filename</name></expr></argument>, <argument pos:start="1978:32" pos:end="1978:44"><expr pos:start="1978:32" pos:end="1978:44"><name pos:start="1978:32" pos:end="1978:44">filename_size</name></expr></argument>, <argument pos:start="1978:47" pos:end="1978:64"><expr pos:start="1978:47" pos:end="1978:64"><literal type="string" pos:start="1978:47" pos:end="1978:64">"%s%s/%s.ffpreset"</literal></expr></argument>, <argument pos:start="1978:67" pos:end="1978:73"><expr pos:start="1978:67" pos:end="1978:73"><name pos:start="1978:67" pos:end="1978:73"><name pos:start="1978:67" pos:end="1978:70">base</name><index pos:start="1978:71" pos:end="1978:73">[<expr pos:start="1978:72" pos:end="1978:72"><name pos:start="1978:72" pos:end="1978:72">i</name></expr>]</index></name></expr></argument>,
                     <argument pos:start="1979:22" pos:end="1979:45"><expr pos:start="1979:22" pos:end="1979:45"><ternary pos:start="1979:22" pos:end="1979:45"><condition pos:start="1979:22" pos:end="1979:29"><expr pos:start="1979:22" pos:end="1979:27"><name pos:start="1979:22" pos:end="1979:22">i</name> <operator pos:start="1979:24" pos:end="1979:25">!=</operator> <literal type="number" pos:start="1979:27" pos:end="1979:27">1</literal></expr> ?</condition><then pos:start="1979:31" pos:end="1979:32"> <expr pos:start="1979:31" pos:end="1979:32"><literal type="string" pos:start="1979:31" pos:end="1979:32">""</literal></expr> </then><else pos:start="1979:34" pos:end="1979:45">: <expr pos:start="1979:36" pos:end="1979:45"><literal type="string" pos:start="1979:36" pos:end="1979:45">"/.ffmpeg"</literal></expr></else></ternary></expr></argument>, <argument pos:start="1979:48" pos:end="1979:58"><expr pos:start="1979:48" pos:end="1979:58"><name pos:start="1979:48" pos:end="1979:58">preset_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1980:13" pos:end="1980:37"><expr pos:start="1980:13" pos:end="1980:36"><name pos:start="1980:13" pos:end="1980:13">f</name> <operator pos:start="1980:15" pos:end="1980:15">=</operator> <call pos:start="1980:17" pos:end="1980:36"><name pos:start="1980:17" pos:end="1980:21">fopen</name><argument_list pos:start="1980:22" pos:end="1980:36">(<argument pos:start="1980:23" pos:end="1980:30"><expr pos:start="1980:23" pos:end="1980:30"><name pos:start="1980:23" pos:end="1980:30">filename</name></expr></argument>, <argument pos:start="1980:33" pos:end="1980:35"><expr pos:start="1980:33" pos:end="1980:35"><literal type="string" pos:start="1980:33" pos:end="1980:35">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1981:13" pos:end="1987:13"><if pos:start="1981:13" pos:end="1987:13">if <condition pos:start="1981:16" pos:end="1981:33">(<expr pos:start="1981:17" pos:end="1981:32"><operator pos:start="1981:17" pos:end="1981:17">!</operator><name pos:start="1981:18" pos:end="1981:18">f</name> <operator pos:start="1981:20" pos:end="1981:21">&amp;&amp;</operator> <name pos:start="1981:23" pos:end="1981:32">codec_name</name></expr>)</condition> <block pos:start="1981:35" pos:end="1987:13">{<block_content pos:start="1982:17" pos:end="1986:41">
                <expr_stmt pos:start="1982:17" pos:end="1985:38"><expr pos:start="1982:17" pos:end="1985:37"><call pos:start="1982:17" pos:end="1985:37"><name pos:start="1982:17" pos:end="1982:24">snprintf</name><argument_list pos:start="1982:25" pos:end="1985:37">(<argument pos:start="1982:26" pos:end="1982:33"><expr pos:start="1982:26" pos:end="1982:33"><name pos:start="1982:26" pos:end="1982:33">filename</name></expr></argument>, <argument pos:start="1982:36" pos:end="1982:48"><expr pos:start="1982:36" pos:end="1982:48"><name pos:start="1982:36" pos:end="1982:48">filename_size</name></expr></argument>,
                         <argument pos:start="1983:26" pos:end="1983:46"><expr pos:start="1983:26" pos:end="1983:46"><literal type="string" pos:start="1983:26" pos:end="1983:46">"%s%s/%s-%s.ffpreset"</literal></expr></argument>,
                         <argument pos:start="1984:26" pos:end="1984:32"><expr pos:start="1984:26" pos:end="1984:32"><name pos:start="1984:26" pos:end="1984:32"><name pos:start="1984:26" pos:end="1984:29">base</name><index pos:start="1984:30" pos:end="1984:32">[<expr pos:start="1984:31" pos:end="1984:31"><name pos:start="1984:31" pos:end="1984:31">i</name></expr>]</index></name></expr></argument>, <argument pos:start="1984:35" pos:end="1984:58"><expr pos:start="1984:35" pos:end="1984:58"><ternary pos:start="1984:35" pos:end="1984:58"><condition pos:start="1984:35" pos:end="1984:42"><expr pos:start="1984:35" pos:end="1984:40"><name pos:start="1984:35" pos:end="1984:35">i</name> <operator pos:start="1984:37" pos:end="1984:38">!=</operator> <literal type="number" pos:start="1984:40" pos:end="1984:40">1</literal></expr> ?</condition><then pos:start="1984:44" pos:end="1984:45"> <expr pos:start="1984:44" pos:end="1984:45"><literal type="string" pos:start="1984:44" pos:end="1984:45">""</literal></expr> </then><else pos:start="1984:47" pos:end="1984:58">: <expr pos:start="1984:49" pos:end="1984:58"><literal type="string" pos:start="1984:49" pos:end="1984:58">"/.ffmpeg"</literal></expr></else></ternary></expr></argument>, <argument pos:start="1984:61" pos:end="1984:70"><expr pos:start="1984:61" pos:end="1984:70"><name pos:start="1984:61" pos:end="1984:70">codec_name</name></expr></argument>,
                         <argument pos:start="1985:26" pos:end="1985:36"><expr pos:start="1985:26" pos:end="1985:36"><name pos:start="1985:26" pos:end="1985:36">preset_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1986:17" pos:end="1986:41"><expr pos:start="1986:17" pos:end="1986:40"><name pos:start="1986:17" pos:end="1986:17">f</name> <operator pos:start="1986:19" pos:end="1986:19">=</operator> <call pos:start="1986:21" pos:end="1986:40"><name pos:start="1986:21" pos:end="1986:25">fopen</name><argument_list pos:start="1986:26" pos:end="1986:40">(<argument pos:start="1986:27" pos:end="1986:34"><expr pos:start="1986:27" pos:end="1986:34"><name pos:start="1986:27" pos:end="1986:34">filename</name></expr></argument>, <argument pos:start="1986:37" pos:end="1986:39"><expr pos:start="1986:37" pos:end="1986:39"><literal type="string" pos:start="1986:37" pos:end="1986:39">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>

    <return pos:start="1991:5" pos:end="1991:13">return <expr pos:start="1991:12" pos:end="1991:12"><name pos:start="1991:12" pos:end="1991:12">f</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="1994:1" pos:end="2000:1"><type pos:start="1994:1" pos:end="1994:3"><name pos:start="1994:1" pos:end="1994:3">int</name></type> <name pos:start="1994:5" pos:end="1994:26">check_stream_specifier</name><parameter_list pos:start="1994:27" pos:end="1994:78">(<parameter pos:start="1994:28" pos:end="1994:45"><decl pos:start="1994:28" pos:end="1994:45"><type pos:start="1994:28" pos:end="1994:45"><name pos:start="1994:28" pos:end="1994:42">AVFormatContext</name> <modifier pos:start="1994:44" pos:end="1994:44">*</modifier></type><name pos:start="1994:45" pos:end="1994:45">s</name></decl></parameter>, <parameter pos:start="1994:48" pos:end="1994:59"><decl pos:start="1994:48" pos:end="1994:59"><type pos:start="1994:48" pos:end="1994:59"><name pos:start="1994:48" pos:end="1994:55">AVStream</name> <modifier pos:start="1994:57" pos:end="1994:57">*</modifier></type><name pos:start="1994:58" pos:end="1994:59">st</name></decl></parameter>, <parameter pos:start="1994:62" pos:end="1994:77"><decl pos:start="1994:62" pos:end="1994:77"><type pos:start="1994:62" pos:end="1994:77"><specifier pos:start="1994:62" pos:end="1994:66">const</specifier> <name pos:start="1994:68" pos:end="1994:71">char</name> <modifier pos:start="1994:73" pos:end="1994:73">*</modifier></type><name pos:start="1994:74" pos:end="1994:77">spec</name></decl></parameter>)</parameter_list>
<block pos:start="1995:1" pos:end="2000:1">{<block_content pos:start="1996:5" pos:end="1999:15">
    <decl_stmt pos:start="1996:5" pos:end="1996:59"><decl pos:start="1996:5" pos:end="1996:58"><type pos:start="1996:5" pos:end="1996:7"><name pos:start="1996:5" pos:end="1996:7">int</name></type> <name pos:start="1996:9" pos:end="1996:11">ret</name> <init pos:start="1996:13" pos:end="1996:58">= <expr pos:start="1996:15" pos:end="1996:58"><call pos:start="1996:15" pos:end="1996:58"><name pos:start="1996:15" pos:end="1996:45">avformat_match_stream_specifier</name><argument_list pos:start="1996:46" pos:end="1996:58">(<argument pos:start="1996:47" pos:end="1996:47"><expr pos:start="1996:47" pos:end="1996:47"><name pos:start="1996:47" pos:end="1996:47">s</name></expr></argument>, <argument pos:start="1996:50" pos:end="1996:51"><expr pos:start="1996:50" pos:end="1996:51"><name pos:start="1996:50" pos:end="1996:51">st</name></expr></argument>, <argument pos:start="1996:54" pos:end="1996:57"><expr pos:start="1996:54" pos:end="1996:57"><name pos:start="1996:54" pos:end="1996:57">spec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="1997:5" pos:end="1998:73"><if pos:start="1997:5" pos:end="1998:73">if <condition pos:start="1997:8" pos:end="1997:16">(<expr pos:start="1997:9" pos:end="1997:15"><name pos:start="1997:9" pos:end="1997:11">ret</name> <operator pos:start="1997:13" pos:end="1997:13">&lt;</operator> <literal type="number" pos:start="1997:15" pos:end="1997:15">0</literal></expr>)</condition><block type="pseudo" pos:start="1998:9" pos:end="1998:73"><block_content pos:start="1998:9" pos:end="1998:73">
        <expr_stmt pos:start="1998:9" pos:end="1998:73"><expr pos:start="1998:9" pos:end="1998:72"><call pos:start="1998:9" pos:end="1998:72"><name pos:start="1998:9" pos:end="1998:14">av_log</name><argument_list pos:start="1998:15" pos:end="1998:72">(<argument pos:start="1998:16" pos:end="1998:16"><expr pos:start="1998:16" pos:end="1998:16"><name pos:start="1998:16" pos:end="1998:16">s</name></expr></argument>, <argument pos:start="1998:19" pos:end="1998:30"><expr pos:start="1998:19" pos:end="1998:30"><name pos:start="1998:19" pos:end="1998:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="1998:33" pos:end="1998:65"><expr pos:start="1998:33" pos:end="1998:65"><literal type="string" pos:start="1998:33" pos:end="1998:65">"Invalid stream specifier: %s.\n"</literal></expr></argument>, <argument pos:start="1998:68" pos:end="1998:71"><expr pos:start="1998:68" pos:end="1998:71"><name pos:start="1998:68" pos:end="1998:71">spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return pos:start="1999:5" pos:end="1999:15">return <expr pos:start="1999:12" pos:end="1999:14"><name pos:start="1999:12" pos:end="1999:14">ret</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="2002:1" pos:end="2057:1"><type pos:start="2002:1" pos:end="2002:14"><name pos:start="2002:1" pos:end="2002:12">AVDictionary</name> <modifier pos:start="2002:14" pos:end="2002:14">*</modifier></type><name pos:start="2002:15" pos:end="2002:31">filter_codec_opts</name><parameter_list pos:start="2002:32" pos:end="2003:81">(<parameter pos:start="2002:33" pos:end="2002:50"><decl pos:start="2002:33" pos:end="2002:50"><type pos:start="2002:33" pos:end="2002:50"><name pos:start="2002:33" pos:end="2002:44">AVDictionary</name> <modifier pos:start="2002:46" pos:end="2002:46">*</modifier></type><name pos:start="2002:47" pos:end="2002:50">opts</name></decl></parameter>, <parameter pos:start="2002:53" pos:end="2002:75"><decl pos:start="2002:53" pos:end="2002:75"><type pos:start="2002:53" pos:end="2002:75"><name pos:start="2002:53" pos:end="2002:66"><name pos:start="2002:53" pos:end="2002:56">enum</name> <name pos:start="2002:58" pos:end="2002:66">AVCodecID</name></name></type> <name pos:start="2002:68" pos:end="2002:75">codec_id</name></decl></parameter>,
                                <parameter pos:start="2003:33" pos:end="2003:50"><decl pos:start="2003:33" pos:end="2003:50"><type pos:start="2003:33" pos:end="2003:50"><name pos:start="2003:33" pos:end="2003:47">AVFormatContext</name> <modifier pos:start="2003:49" pos:end="2003:49">*</modifier></type><name pos:start="2003:50" pos:end="2003:50">s</name></decl></parameter>, <parameter pos:start="2003:53" pos:end="2003:64"><decl pos:start="2003:53" pos:end="2003:64"><type pos:start="2003:53" pos:end="2003:64"><name pos:start="2003:53" pos:end="2003:60">AVStream</name> <modifier pos:start="2003:62" pos:end="2003:62">*</modifier></type><name pos:start="2003:63" pos:end="2003:64">st</name></decl></parameter>, <parameter pos:start="2003:67" pos:end="2003:80"><decl pos:start="2003:67" pos:end="2003:80"><type pos:start="2003:67" pos:end="2003:80"><name pos:start="2003:67" pos:end="2003:73">AVCodec</name> <modifier pos:start="2003:75" pos:end="2003:75">*</modifier></type><name pos:start="2003:76" pos:end="2003:80">codec</name></decl></parameter>)</parameter_list>
<block pos:start="2004:1" pos:end="2057:1">{<block_content pos:start="2005:5" pos:end="2056:15">
    <decl_stmt pos:start="2005:5" pos:end="2005:32"><decl pos:start="2005:5" pos:end="2005:31"><type pos:start="2005:5" pos:end="2005:21"><name pos:start="2005:5" pos:end="2005:16">AVDictionary</name>    <modifier pos:start="2005:21" pos:end="2005:21">*</modifier></type><name pos:start="2005:22" pos:end="2005:24">ret</name> <init pos:start="2005:26" pos:end="2005:31">= <expr pos:start="2005:28" pos:end="2005:31"><name pos:start="2005:28" pos:end="2005:31">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2006:5" pos:end="2006:32"><decl pos:start="2006:5" pos:end="2006:31"><type pos:start="2006:5" pos:end="2006:23"><name pos:start="2006:5" pos:end="2006:21">AVDictionaryEntry</name> <modifier pos:start="2006:23" pos:end="2006:23">*</modifier></type><name pos:start="2006:24" pos:end="2006:24">t</name> <init pos:start="2006:26" pos:end="2006:31">= <expr pos:start="2006:28" pos:end="2006:31"><name pos:start="2006:28" pos:end="2006:31">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2007:5" pos:end="2008:67"><decl pos:start="2007:5" pos:end="2008:66"><type pos:start="2007:5" pos:end="2007:7"><name pos:start="2007:5" pos:end="2007:7">int</name></type>            <name pos:start="2007:20" pos:end="2007:24">flags</name> <init pos:start="2007:26" pos:end="2008:66">= <expr pos:start="2007:28" pos:end="2008:66"><ternary pos:start="2007:28" pos:end="2008:66"><condition pos:start="2007:28" pos:end="2007:39"><expr pos:start="2007:28" pos:end="2007:37"><name pos:start="2007:28" pos:end="2007:37"><name pos:start="2007:28" pos:end="2007:28">s</name><operator pos:start="2007:29" pos:end="2007:30">-&gt;</operator><name pos:start="2007:31" pos:end="2007:37">oformat</name></name></expr> ?</condition><then pos:start="2007:41" pos:end="2007:66"> <expr pos:start="2007:41" pos:end="2007:66"><name pos:start="2007:41" pos:end="2007:66">AV_OPT_FLAG_ENCODING_PARAM</name></expr>
                                      </then><else pos:start="2008:39" pos:end="2008:66">: <expr pos:start="2008:41" pos:end="2008:66"><name pos:start="2008:41" pos:end="2008:66">AV_OPT_FLAG_DECODING_PARAM</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2009:5" pos:end="2009:29"><decl pos:start="2009:5" pos:end="2009:28"><type pos:start="2009:5" pos:end="2009:8"><name pos:start="2009:5" pos:end="2009:8">char</name></type>          <name pos:start="2009:19" pos:end="2009:24">prefix</name> <init pos:start="2009:26" pos:end="2009:28">= <expr pos:start="2009:28" pos:end="2009:28"><literal type="number" pos:start="2009:28" pos:end="2009:28">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2010:5" pos:end="2010:47"><decl pos:start="2010:5" pos:end="2010:46"><type pos:start="2010:5" pos:end="2010:22"><specifier pos:start="2010:5" pos:end="2010:9">const</specifier> <name pos:start="2010:11" pos:end="2010:17">AVClass</name>    <modifier pos:start="2010:22" pos:end="2010:22">*</modifier></type><name pos:start="2010:23" pos:end="2010:24">cc</name> <init pos:start="2010:26" pos:end="2010:46">= <expr pos:start="2010:28" pos:end="2010:46"><call pos:start="2010:28" pos:end="2010:46"><name pos:start="2010:28" pos:end="2010:44">avcodec_get_class</name><argument_list pos:start="2010:45" pos:end="2010:46">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="2012:5" pos:end="2014:71"><if pos:start="2012:5" pos:end="2014:71">if <condition pos:start="2012:8" pos:end="2012:15">(<expr pos:start="2012:9" pos:end="2012:14"><operator pos:start="2012:9" pos:end="2012:9">!</operator><name pos:start="2012:10" pos:end="2012:14">codec</name></expr>)</condition><block type="pseudo" pos:start="2013:9" pos:end="2014:71"><block_content pos:start="2013:9" pos:end="2014:71">
        <expr_stmt pos:start="2013:9" pos:end="2014:71"><expr pos:start="2013:9" pos:end="2014:70"><name pos:start="2013:9" pos:end="2013:13">codec</name>            <operator pos:start="2013:26" pos:end="2013:26">=</operator> <ternary pos:start="2013:28" pos:end="2014:70"><condition pos:start="2013:28" pos:end="2013:39"><expr pos:start="2013:28" pos:end="2013:37"><name pos:start="2013:28" pos:end="2013:37"><name pos:start="2013:28" pos:end="2013:28">s</name><operator pos:start="2013:29" pos:end="2013:30">-&gt;</operator><name pos:start="2013:31" pos:end="2013:37">oformat</name></name></expr> ?</condition><then pos:start="2013:41" pos:end="2013:70"> <expr pos:start="2013:41" pos:end="2013:70"><call pos:start="2013:41" pos:end="2013:70"><name pos:start="2013:41" pos:end="2013:60">avcodec_find_encoder</name><argument_list pos:start="2013:61" pos:end="2013:70">(<argument pos:start="2013:62" pos:end="2013:69"><expr pos:start="2013:62" pos:end="2013:69"><name pos:start="2013:62" pos:end="2013:69">codec_id</name></expr></argument>)</argument_list></call></expr>
                                      </then><else pos:start="2014:39" pos:end="2014:70">: <expr pos:start="2014:41" pos:end="2014:70"><call pos:start="2014:41" pos:end="2014:70"><name pos:start="2014:41" pos:end="2014:60">avcodec_find_decoder</name><argument_list pos:start="2014:61" pos:end="2014:70">(<argument pos:start="2014:62" pos:end="2014:69"><expr pos:start="2014:62" pos:end="2014:69"><name pos:start="2014:62" pos:end="2014:69">codec_id</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <switch pos:start="2016:5" pos:end="2029:5">switch <condition pos:start="2016:12" pos:end="2016:37">(<expr pos:start="2016:13" pos:end="2016:36"><name pos:start="2016:13" pos:end="2016:36"><name pos:start="2016:13" pos:end="2016:14">st</name><operator pos:start="2016:15" pos:end="2016:16">-&gt;</operator><name pos:start="2016:17" pos:end="2016:24">codecpar</name><operator pos:start="2016:25" pos:end="2016:26">-&gt;</operator><name pos:start="2016:27" pos:end="2016:36">codec_type</name></name></expr>)</condition> <block pos:start="2016:39" pos:end="2029:5">{<block_content pos:start="2017:5" pos:end="2028:14">
    <case pos:start="2017:5" pos:end="2017:28">case <expr pos:start="2017:10" pos:end="2017:27"><name pos:start="2017:10" pos:end="2017:27">AVMEDIA_TYPE_VIDEO</name></expr>:</case>
        <expr_stmt pos:start="2018:9" pos:end="2018:22"><expr pos:start="2018:9" pos:end="2018:21"><name pos:start="2018:9" pos:end="2018:14">prefix</name>  <operator pos:start="2018:17" pos:end="2018:17">=</operator> <literal type="char" pos:start="2018:19" pos:end="2018:21">'v'</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="2019:9" pos:end="2019:42"><expr pos:start="2019:9" pos:end="2019:41"><name pos:start="2019:9" pos:end="2019:13">flags</name>  <operator pos:start="2019:16" pos:end="2019:17">|=</operator> <name pos:start="2019:19" pos:end="2019:41">AV_OPT_FLAG_VIDEO_PARAM</name></expr>;</expr_stmt>
        <break pos:start="2020:9" pos:end="2020:14">break;</break>
    <case pos:start="2021:5" pos:end="2021:28">case <expr pos:start="2021:10" pos:end="2021:27"><name pos:start="2021:10" pos:end="2021:27">AVMEDIA_TYPE_AUDIO</name></expr>:</case>
        <expr_stmt pos:start="2022:9" pos:end="2022:22"><expr pos:start="2022:9" pos:end="2022:21"><name pos:start="2022:9" pos:end="2022:14">prefix</name>  <operator pos:start="2022:17" pos:end="2022:17">=</operator> <literal type="char" pos:start="2022:19" pos:end="2022:21">'a'</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="2023:9" pos:end="2023:42"><expr pos:start="2023:9" pos:end="2023:41"><name pos:start="2023:9" pos:end="2023:13">flags</name>  <operator pos:start="2023:16" pos:end="2023:17">|=</operator> <name pos:start="2023:19" pos:end="2023:41">AV_OPT_FLAG_AUDIO_PARAM</name></expr>;</expr_stmt>
        <break pos:start="2024:9" pos:end="2024:14">break;</break>
    <case pos:start="2025:5" pos:end="2025:31">case <expr pos:start="2025:10" pos:end="2025:30"><name pos:start="2025:10" pos:end="2025:30">AVMEDIA_TYPE_SUBTITLE</name></expr>:</case>
        <expr_stmt pos:start="2026:9" pos:end="2026:22"><expr pos:start="2026:9" pos:end="2026:21"><name pos:start="2026:9" pos:end="2026:14">prefix</name>  <operator pos:start="2026:17" pos:end="2026:17">=</operator> <literal type="char" pos:start="2026:19" pos:end="2026:21">'s'</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="2027:9" pos:end="2027:45"><expr pos:start="2027:9" pos:end="2027:44"><name pos:start="2027:9" pos:end="2027:13">flags</name>  <operator pos:start="2027:16" pos:end="2027:17">|=</operator> <name pos:start="2027:19" pos:end="2027:44">AV_OPT_FLAG_SUBTITLE_PARAM</name></expr>;</expr_stmt>
        <break pos:start="2028:9" pos:end="2028:14">break;</break>
    </block_content>}</block></switch>

    <while pos:start="2031:5" pos:end="2055:5">while <condition pos:start="2031:11" pos:end="2031:63">(<expr pos:start="2031:12" pos:end="2031:62"><name pos:start="2031:12" pos:end="2031:12">t</name> <operator pos:start="2031:14" pos:end="2031:14">=</operator> <call pos:start="2031:16" pos:end="2031:62"><name pos:start="2031:16" pos:end="2031:26">av_dict_get</name><argument_list pos:start="2031:27" pos:end="2031:62">(<argument pos:start="2031:28" pos:end="2031:31"><expr pos:start="2031:28" pos:end="2031:31"><name pos:start="2031:28" pos:end="2031:31">opts</name></expr></argument>, <argument pos:start="2031:34" pos:end="2031:35"><expr pos:start="2031:34" pos:end="2031:35"><literal type="string" pos:start="2031:34" pos:end="2031:35">""</literal></expr></argument>, <argument pos:start="2031:38" pos:end="2031:38"><expr pos:start="2031:38" pos:end="2031:38"><name pos:start="2031:38" pos:end="2031:38">t</name></expr></argument>, <argument pos:start="2031:41" pos:end="2031:61"><expr pos:start="2031:41" pos:end="2031:61"><name pos:start="2031:41" pos:end="2031:61">AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2031:65" pos:end="2055:5">{<block_content pos:start="2032:9" pos:end="2054:21">
        <decl_stmt pos:start="2032:9" pos:end="2032:38"><decl pos:start="2032:9" pos:end="2032:37"><type pos:start="2032:9" pos:end="2032:14"><name pos:start="2032:9" pos:end="2032:12">char</name> <modifier pos:start="2032:14" pos:end="2032:14">*</modifier></type><name pos:start="2032:15" pos:end="2032:15">p</name> <init pos:start="2032:17" pos:end="2032:37">= <expr pos:start="2032:19" pos:end="2032:37"><call pos:start="2032:19" pos:end="2032:37"><name pos:start="2032:19" pos:end="2032:24">strchr</name><argument_list pos:start="2032:25" pos:end="2032:37">(<argument pos:start="2032:26" pos:end="2032:31"><expr pos:start="2032:26" pos:end="2032:31"><name pos:start="2032:26" pos:end="2032:31"><name pos:start="2032:26" pos:end="2032:26">t</name><operator pos:start="2032:27" pos:end="2032:28">-&gt;</operator><name pos:start="2032:29" pos:end="2032:31">key</name></name></expr></argument>, <argument pos:start="2032:34" pos:end="2032:36"><expr pos:start="2032:34" pos:end="2032:36"><literal type="char" pos:start="2032:34" pos:end="2032:36">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="2034:9" pos:end="2034:52">/* check stream specification in opt name */</comment>
        <if_stmt pos:start="2035:9" pos:end="2040:13"><if pos:start="2035:9" pos:end="2040:13">if <condition pos:start="2035:12" pos:end="2035:14">(<expr pos:start="2035:13" pos:end="2035:13"><name pos:start="2035:13" pos:end="2035:13">p</name></expr>)</condition><block type="pseudo" pos:start="2036:13" pos:end="2040:13"><block_content pos:start="2036:13" pos:end="2040:13">
            <switch pos:start="2036:13" pos:end="2040:13">switch <condition pos:start="2036:20" pos:end="2036:57">(<expr pos:start="2036:21" pos:end="2036:56"><call pos:start="2036:21" pos:end="2036:56"><name pos:start="2036:21" pos:end="2036:42">check_stream_specifier</name><argument_list pos:start="2036:43" pos:end="2036:56">(<argument pos:start="2036:44" pos:end="2036:44"><expr pos:start="2036:44" pos:end="2036:44"><name pos:start="2036:44" pos:end="2036:44">s</name></expr></argument>, <argument pos:start="2036:47" pos:end="2036:48"><expr pos:start="2036:47" pos:end="2036:48"><name pos:start="2036:47" pos:end="2036:48">st</name></expr></argument>, <argument pos:start="2036:51" pos:end="2036:55"><expr pos:start="2036:51" pos:end="2036:55"><name pos:start="2036:51" pos:end="2036:51">p</name> <operator pos:start="2036:53" pos:end="2036:53">+</operator> <literal type="number" pos:start="2036:55" pos:end="2036:55">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2036:59" pos:end="2040:13">{<block_content pos:start="2037:13" pos:end="2039:45">
            <case pos:start="2037:13" pos:end="2037:20">case  <expr pos:start="2037:19" pos:end="2037:19"><literal type="number" pos:start="2037:19" pos:end="2037:19">1</literal></expr>:</case> <expr_stmt pos:start="2037:22" pos:end="2037:28"><expr pos:start="2037:22" pos:end="2037:27"><operator pos:start="2037:22" pos:end="2037:22">*</operator><name pos:start="2037:23" pos:end="2037:23">p</name> <operator pos:start="2037:25" pos:end="2037:25">=</operator> <literal type="number" pos:start="2037:27" pos:end="2037:27">0</literal></expr>;</expr_stmt> <break pos:start="2037:30" pos:end="2037:35">break;</break>
            <case pos:start="2038:13" pos:end="2038:20">case  <expr pos:start="2038:19" pos:end="2038:19"><literal type="number" pos:start="2038:19" pos:end="2038:19">0</literal></expr>:</case>         <continue pos:start="2038:30" pos:end="2038:38">continue;</continue>
            <default pos:start="2039:13" pos:end="2039:20">default:</default>         <expr_stmt pos:start="2039:30" pos:end="2039:45"><expr pos:start="2039:30" pos:end="2039:44"><call pos:start="2039:30" pos:end="2039:44"><name pos:start="2039:30" pos:end="2039:41">exit_program</name><argument_list pos:start="2039:42" pos:end="2039:44">(<argument pos:start="2039:43" pos:end="2039:43"><expr pos:start="2039:43" pos:end="2039:43"><literal type="number" pos:start="2039:43" pos:end="2039:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></switch></block_content></block></if></if_stmt>

        <if_stmt pos:start="2042:9" pos:end="2051:55"><if pos:start="2042:9" pos:end="2047:51">if <condition pos:start="2042:12" pos:end="2046:50">(<expr pos:start="2042:13" pos:end="2046:49"><call pos:start="2042:13" pos:end="2042:73"><name pos:start="2042:13" pos:end="2042:23">av_opt_find</name><argument_list pos:start="2042:24" pos:end="2042:73">(<argument pos:start="2042:25" pos:end="2042:27"><expr pos:start="2042:25" pos:end="2042:27"><operator pos:start="2042:25" pos:end="2042:25">&amp;</operator><name pos:start="2042:26" pos:end="2042:27">cc</name></expr></argument>, <argument pos:start="2042:30" pos:end="2042:35"><expr pos:start="2042:30" pos:end="2042:35"><name pos:start="2042:30" pos:end="2042:35"><name pos:start="2042:30" pos:end="2042:30">t</name><operator pos:start="2042:31" pos:end="2042:32">-&gt;</operator><name pos:start="2042:33" pos:end="2042:35">key</name></name></expr></argument>, <argument pos:start="2042:38" pos:end="2042:41"><expr pos:start="2042:38" pos:end="2042:41"><name pos:start="2042:38" pos:end="2042:41">NULL</name></expr></argument>, <argument pos:start="2042:44" pos:end="2042:48"><expr pos:start="2042:44" pos:end="2042:48"><name pos:start="2042:44" pos:end="2042:48">flags</name></expr></argument>, <argument pos:start="2042:51" pos:end="2042:72"><expr pos:start="2042:51" pos:end="2042:72"><name pos:start="2042:51" pos:end="2042:72">AV_OPT_SEARCH_FAKE_OBJ</name></expr></argument>)</argument_list></call> <operator pos:start="2042:75" pos:end="2042:76">||</operator>
            <operator pos:start="2043:13" pos:end="2043:13">!</operator><name pos:start="2043:14" pos:end="2043:18">codec</name> <operator pos:start="2043:20" pos:end="2043:21">||</operator>
            <operator pos:start="2044:13" pos:end="2044:13">(</operator><name pos:start="2044:14" pos:end="2044:30"><name pos:start="2044:14" pos:end="2044:18">codec</name><operator pos:start="2044:19" pos:end="2044:20">-&gt;</operator><name pos:start="2044:21" pos:end="2044:30">priv_class</name></name> <operator pos:start="2044:32" pos:end="2044:33">&amp;&amp;</operator>
             <call pos:start="2045:14" pos:end="2046:48"><name pos:start="2045:14" pos:end="2045:24">av_opt_find</name><argument_list pos:start="2045:25" pos:end="2046:48">(<argument pos:start="2045:26" pos:end="2045:43"><expr pos:start="2045:26" pos:end="2045:43"><operator pos:start="2045:26" pos:end="2045:26">&amp;</operator><name pos:start="2045:27" pos:end="2045:43"><name pos:start="2045:27" pos:end="2045:31">codec</name><operator pos:start="2045:32" pos:end="2045:33">-&gt;</operator><name pos:start="2045:34" pos:end="2045:43">priv_class</name></name></expr></argument>, <argument pos:start="2045:46" pos:end="2045:51"><expr pos:start="2045:46" pos:end="2045:51"><name pos:start="2045:46" pos:end="2045:51"><name pos:start="2045:46" pos:end="2045:46">t</name><operator pos:start="2045:47" pos:end="2045:48">-&gt;</operator><name pos:start="2045:49" pos:end="2045:51">key</name></name></expr></argument>, <argument pos:start="2045:54" pos:end="2045:57"><expr pos:start="2045:54" pos:end="2045:57"><name pos:start="2045:54" pos:end="2045:57">NULL</name></expr></argument>, <argument pos:start="2045:60" pos:end="2045:64"><expr pos:start="2045:60" pos:end="2045:64"><name pos:start="2045:60" pos:end="2045:64">flags</name></expr></argument>,
                         <argument pos:start="2046:26" pos:end="2046:47"><expr pos:start="2046:26" pos:end="2046:47"><name pos:start="2046:26" pos:end="2046:47">AV_OPT_SEARCH_FAKE_OBJ</name></expr></argument>)</argument_list></call><operator pos:start="2046:49" pos:end="2046:49">)</operator></expr>)</condition><block type="pseudo" pos:start="2047:13" pos:end="2047:51"><block_content pos:start="2047:13" pos:end="2047:51">
            <expr_stmt pos:start="2047:13" pos:end="2047:51"><expr pos:start="2047:13" pos:end="2047:50"><call pos:start="2047:13" pos:end="2047:50"><name pos:start="2047:13" pos:end="2047:23">av_dict_set</name><argument_list pos:start="2047:24" pos:end="2047:50">(<argument pos:start="2047:25" pos:end="2047:28"><expr pos:start="2047:25" pos:end="2047:28"><operator pos:start="2047:25" pos:end="2047:25">&amp;</operator><name pos:start="2047:26" pos:end="2047:28">ret</name></expr></argument>, <argument pos:start="2047:31" pos:end="2047:36"><expr pos:start="2047:31" pos:end="2047:36"><name pos:start="2047:31" pos:end="2047:36"><name pos:start="2047:31" pos:end="2047:31">t</name><operator pos:start="2047:32" pos:end="2047:33">-&gt;</operator><name pos:start="2047:34" pos:end="2047:36">key</name></name></expr></argument>, <argument pos:start="2047:39" pos:end="2047:46"><expr pos:start="2047:39" pos:end="2047:46"><name pos:start="2047:39" pos:end="2047:46"><name pos:start="2047:39" pos:end="2047:39">t</name><operator pos:start="2047:40" pos:end="2047:41">-&gt;</operator><name pos:start="2047:42" pos:end="2047:46">value</name></name></expr></argument>, <argument pos:start="2047:49" pos:end="2047:49"><expr pos:start="2047:49" pos:end="2047:49"><literal type="number" pos:start="2047:49" pos:end="2047:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif" pos:start="2048:9" pos:end="2051:55">else if <condition pos:start="2048:17" pos:end="2050:53">(<expr pos:start="2048:18" pos:end="2050:52"><name pos:start="2048:18" pos:end="2048:26"><name pos:start="2048:18" pos:end="2048:18">t</name><operator pos:start="2048:19" pos:end="2048:20">-&gt;</operator><name pos:start="2048:21" pos:end="2048:23">key</name><index pos:start="2048:24" pos:end="2048:26">[<expr pos:start="2048:25" pos:end="2048:25"><literal type="number" pos:start="2048:25" pos:end="2048:25">0</literal></expr>]</index></name> <operator pos:start="2048:28" pos:end="2048:29">==</operator> <name pos:start="2048:31" pos:end="2048:36">prefix</name> <operator pos:start="2048:38" pos:end="2048:39">&amp;&amp;</operator>
                 <call pos:start="2049:18" pos:end="2050:52"><name pos:start="2049:18" pos:end="2049:28">av_opt_find</name><argument_list pos:start="2049:29" pos:end="2050:52">(<argument pos:start="2049:30" pos:end="2049:32"><expr pos:start="2049:30" pos:end="2049:32"><operator pos:start="2049:30" pos:end="2049:30">&amp;</operator><name pos:start="2049:31" pos:end="2049:32">cc</name></expr></argument>, <argument pos:start="2049:35" pos:end="2049:44"><expr pos:start="2049:35" pos:end="2049:44"><name pos:start="2049:35" pos:end="2049:40"><name pos:start="2049:35" pos:end="2049:35">t</name><operator pos:start="2049:36" pos:end="2049:37">-&gt;</operator><name pos:start="2049:38" pos:end="2049:40">key</name></name> <operator pos:start="2049:42" pos:end="2049:42">+</operator> <literal type="number" pos:start="2049:44" pos:end="2049:44">1</literal></expr></argument>, <argument pos:start="2049:47" pos:end="2049:50"><expr pos:start="2049:47" pos:end="2049:50"><name pos:start="2049:47" pos:end="2049:50">NULL</name></expr></argument>, <argument pos:start="2049:53" pos:end="2049:57"><expr pos:start="2049:53" pos:end="2049:57"><name pos:start="2049:53" pos:end="2049:57">flags</name></expr></argument>,
                             <argument pos:start="2050:30" pos:end="2050:51"><expr pos:start="2050:30" pos:end="2050:51"><name pos:start="2050:30" pos:end="2050:51">AV_OPT_SEARCH_FAKE_OBJ</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2051:13" pos:end="2051:55"><block_content pos:start="2051:13" pos:end="2051:55">
            <expr_stmt pos:start="2051:13" pos:end="2051:55"><expr pos:start="2051:13" pos:end="2051:54"><call pos:start="2051:13" pos:end="2051:54"><name pos:start="2051:13" pos:end="2051:23">av_dict_set</name><argument_list pos:start="2051:24" pos:end="2051:54">(<argument pos:start="2051:25" pos:end="2051:28"><expr pos:start="2051:25" pos:end="2051:28"><operator pos:start="2051:25" pos:end="2051:25">&amp;</operator><name pos:start="2051:26" pos:end="2051:28">ret</name></expr></argument>, <argument pos:start="2051:31" pos:end="2051:40"><expr pos:start="2051:31" pos:end="2051:40"><name pos:start="2051:31" pos:end="2051:36"><name pos:start="2051:31" pos:end="2051:31">t</name><operator pos:start="2051:32" pos:end="2051:33">-&gt;</operator><name pos:start="2051:34" pos:end="2051:36">key</name></name> <operator pos:start="2051:38" pos:end="2051:38">+</operator> <literal type="number" pos:start="2051:40" pos:end="2051:40">1</literal></expr></argument>, <argument pos:start="2051:43" pos:end="2051:50"><expr pos:start="2051:43" pos:end="2051:50"><name pos:start="2051:43" pos:end="2051:50"><name pos:start="2051:43" pos:end="2051:43">t</name><operator pos:start="2051:44" pos:end="2051:45">-&gt;</operator><name pos:start="2051:46" pos:end="2051:50">value</name></name></expr></argument>, <argument pos:start="2051:53" pos:end="2051:53"><expr pos:start="2051:53" pos:end="2051:53"><literal type="number" pos:start="2051:53" pos:end="2051:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="2053:9" pos:end="2054:21"><if pos:start="2053:9" pos:end="2054:21">if <condition pos:start="2053:12" pos:end="2053:14">(<expr pos:start="2053:13" pos:end="2053:13"><name pos:start="2053:13" pos:end="2053:13">p</name></expr>)</condition><block type="pseudo" pos:start="2054:13" pos:end="2054:21"><block_content pos:start="2054:13" pos:end="2054:21">
            <expr_stmt pos:start="2054:13" pos:end="2054:21"><expr pos:start="2054:13" pos:end="2054:20"><operator pos:start="2054:13" pos:end="2054:13">*</operator><name pos:start="2054:14" pos:end="2054:14">p</name> <operator pos:start="2054:16" pos:end="2054:16">=</operator> <literal type="char" pos:start="2054:18" pos:end="2054:20">':'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></while>
    <return pos:start="2056:5" pos:end="2056:15">return <expr pos:start="2056:12" pos:end="2056:14"><name pos:start="2056:12" pos:end="2056:14">ret</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="2059:1" pos:end="2077:1"><type pos:start="2059:1" pos:end="2059:15"><name pos:start="2059:1" pos:end="2059:12">AVDictionary</name> <modifier pos:start="2059:14" pos:end="2059:14">*</modifier><modifier pos:start="2059:15" pos:end="2059:15">*</modifier></type><name pos:start="2059:16" pos:end="2059:42">setup_find_stream_info_opts</name><parameter_list pos:start="2059:43" pos:end="2060:68">(<parameter pos:start="2059:44" pos:end="2059:61"><decl pos:start="2059:44" pos:end="2059:61"><type pos:start="2059:44" pos:end="2059:61"><name pos:start="2059:44" pos:end="2059:58">AVFormatContext</name> <modifier pos:start="2059:60" pos:end="2059:60">*</modifier></type><name pos:start="2059:61" pos:end="2059:61">s</name></decl></parameter>,
                                           <parameter pos:start="2060:44" pos:end="2060:67"><decl pos:start="2060:44" pos:end="2060:67"><type pos:start="2060:44" pos:end="2060:67"><name pos:start="2060:44" pos:end="2060:55">AVDictionary</name> <modifier pos:start="2060:57" pos:end="2060:57">*</modifier></type><name pos:start="2060:58" pos:end="2060:67">codec_opts</name></decl></parameter>)</parameter_list>
<block pos:start="2061:1" pos:end="2077:1">{<block_content pos:start="2062:5" pos:end="2076:16">
    <decl_stmt pos:start="2062:5" pos:end="2062:10"><decl pos:start="2062:5" pos:end="2062:9"><type pos:start="2062:5" pos:end="2062:7"><name pos:start="2062:5" pos:end="2062:7">int</name></type> <name pos:start="2062:9" pos:end="2062:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2063:5" pos:end="2063:24"><decl pos:start="2063:5" pos:end="2063:23"><type pos:start="2063:5" pos:end="2063:19"><name pos:start="2063:5" pos:end="2063:16">AVDictionary</name> <modifier pos:start="2063:18" pos:end="2063:18">*</modifier><modifier pos:start="2063:19" pos:end="2063:19">*</modifier></type><name pos:start="2063:20" pos:end="2063:23">opts</name></decl>;</decl_stmt>

    <if_stmt pos:start="2065:5" pos:end="2066:20"><if pos:start="2065:5" pos:end="2066:20">if <condition pos:start="2065:8" pos:end="2065:23">(<expr pos:start="2065:9" pos:end="2065:22"><operator pos:start="2065:9" pos:end="2065:9">!</operator><name pos:start="2065:10" pos:end="2065:22"><name pos:start="2065:10" pos:end="2065:10">s</name><operator pos:start="2065:11" pos:end="2065:12">-&gt;</operator><name pos:start="2065:13" pos:end="2065:22">nb_streams</name></name></expr>)</condition><block type="pseudo" pos:start="2066:9" pos:end="2066:20"><block_content pos:start="2066:9" pos:end="2066:20">
        <return pos:start="2066:9" pos:end="2066:20">return <expr pos:start="2066:16" pos:end="2066:19"><name pos:start="2066:16" pos:end="2066:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="2067:5" pos:end="2067:58"><expr pos:start="2067:5" pos:end="2067:57"><name pos:start="2067:5" pos:end="2067:8">opts</name> <operator pos:start="2067:10" pos:end="2067:10">=</operator> <call pos:start="2067:12" pos:end="2067:57"><name pos:start="2067:12" pos:end="2067:27">av_mallocz_array</name><argument_list pos:start="2067:28" pos:end="2067:57">(<argument pos:start="2067:29" pos:end="2067:41"><expr pos:start="2067:29" pos:end="2067:41"><name pos:start="2067:29" pos:end="2067:41"><name pos:start="2067:29" pos:end="2067:29">s</name><operator pos:start="2067:30" pos:end="2067:31">-&gt;</operator><name pos:start="2067:32" pos:end="2067:41">nb_streams</name></name></expr></argument>, <argument pos:start="2067:44" pos:end="2067:56"><expr pos:start="2067:44" pos:end="2067:56"><sizeof pos:start="2067:44" pos:end="2067:56">sizeof<argument_list pos:start="2067:50" pos:end="2067:56">(<argument pos:start="2067:51" pos:end="2067:55"><expr pos:start="2067:51" pos:end="2067:55"><operator pos:start="2067:51" pos:end="2067:51">*</operator><name pos:start="2067:52" pos:end="2067:55">opts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="2068:5" pos:end="2072:5"><if pos:start="2068:5" pos:end="2072:5">if <condition pos:start="2068:8" pos:end="2068:14">(<expr pos:start="2068:9" pos:end="2068:13"><operator pos:start="2068:9" pos:end="2068:9">!</operator><name pos:start="2068:10" pos:end="2068:13">opts</name></expr>)</condition> <block pos:start="2068:16" pos:end="2072:5">{<block_content pos:start="2069:9" pos:end="2071:20">
        <expr_stmt pos:start="2069:9" pos:end="2070:63"><expr pos:start="2069:9" pos:end="2070:62"><call pos:start="2069:9" pos:end="2070:62"><name pos:start="2069:9" pos:end="2069:14">av_log</name><argument_list pos:start="2069:15" pos:end="2070:62">(<argument pos:start="2069:16" pos:end="2069:19"><expr pos:start="2069:16" pos:end="2069:19"><name pos:start="2069:16" pos:end="2069:19">NULL</name></expr></argument>, <argument pos:start="2069:22" pos:end="2069:33"><expr pos:start="2069:22" pos:end="2069:33"><name pos:start="2069:22" pos:end="2069:33">AV_LOG_ERROR</name></expr></argument>,
               <argument pos:start="2070:16" pos:end="2070:61"><expr pos:start="2070:16" pos:end="2070:61"><literal type="string" pos:start="2070:16" pos:end="2070:61">"Could not alloc memory for stream options.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2071:9" pos:end="2071:20">return <expr pos:start="2071:16" pos:end="2071:19"><name pos:start="2071:16" pos:end="2071:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <for pos:start="2073:5" pos:end="2075:60">for <control pos:start="2073:9" pos:end="2073:39">(<init pos:start="2073:10" pos:end="2073:15"><expr pos:start="2073:10" pos:end="2073:14"><name pos:start="2073:10" pos:end="2073:10">i</name> <operator pos:start="2073:12" pos:end="2073:12">=</operator> <literal type="number" pos:start="2073:14" pos:end="2073:14">0</literal></expr>;</init> <condition pos:start="2073:17" pos:end="2073:34"><expr pos:start="2073:17" pos:end="2073:33"><name pos:start="2073:17" pos:end="2073:17">i</name> <operator pos:start="2073:19" pos:end="2073:19">&lt;</operator> <name pos:start="2073:21" pos:end="2073:33"><name pos:start="2073:21" pos:end="2073:21">s</name><operator pos:start="2073:22" pos:end="2073:23">-&gt;</operator><name pos:start="2073:24" pos:end="2073:33">nb_streams</name></name></expr>;</condition> <incr pos:start="2073:36" pos:end="2073:38"><expr pos:start="2073:36" pos:end="2073:38"><name pos:start="2073:36" pos:end="2073:36">i</name><operator pos:start="2073:37" pos:end="2073:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="2074:9" pos:end="2075:60"><block_content pos:start="2074:9" pos:end="2075:60">
        <expr_stmt pos:start="2074:9" pos:end="2075:60"><expr pos:start="2074:9" pos:end="2075:59"><name pos:start="2074:9" pos:end="2074:15"><name pos:start="2074:9" pos:end="2074:12">opts</name><index pos:start="2074:13" pos:end="2074:15">[<expr pos:start="2074:14" pos:end="2074:14"><name pos:start="2074:14" pos:end="2074:14">i</name></expr>]</index></name> <operator pos:start="2074:17" pos:end="2074:17">=</operator> <call pos:start="2074:19" pos:end="2075:59"><name pos:start="2074:19" pos:end="2074:35">filter_codec_opts</name><argument_list pos:start="2074:36" pos:end="2075:59">(<argument pos:start="2074:37" pos:end="2074:46"><expr pos:start="2074:37" pos:end="2074:46"><name pos:start="2074:37" pos:end="2074:46">codec_opts</name></expr></argument>, <argument pos:start="2074:49" pos:end="2074:81"><expr pos:start="2074:49" pos:end="2074:81"><name pos:start="2074:49" pos:end="2074:61"><name pos:start="2074:49" pos:end="2074:49">s</name><operator pos:start="2074:50" pos:end="2074:51">-&gt;</operator><name pos:start="2074:52" pos:end="2074:58">streams</name><index pos:start="2074:59" pos:end="2074:61">[<expr pos:start="2074:60" pos:end="2074:60"><name pos:start="2074:60" pos:end="2074:60">i</name></expr>]</index></name><operator pos:start="2074:62" pos:end="2074:63">-&gt;</operator><name pos:start="2074:64" pos:end="2074:81"><name pos:start="2074:64" pos:end="2074:71">codecpar</name><operator pos:start="2074:72" pos:end="2074:73">-&gt;</operator><name pos:start="2074:74" pos:end="2074:81">codec_id</name></name></expr></argument>,
                                    <argument pos:start="2075:37" pos:end="2075:37"><expr pos:start="2075:37" pos:end="2075:37"><name pos:start="2075:37" pos:end="2075:37">s</name></expr></argument>, <argument pos:start="2075:40" pos:end="2075:52"><expr pos:start="2075:40" pos:end="2075:52"><name pos:start="2075:40" pos:end="2075:52"><name pos:start="2075:40" pos:end="2075:40">s</name><operator pos:start="2075:41" pos:end="2075:42">-&gt;</operator><name pos:start="2075:43" pos:end="2075:49">streams</name><index pos:start="2075:50" pos:end="2075:52">[<expr pos:start="2075:51" pos:end="2075:51"><name pos:start="2075:51" pos:end="2075:51">i</name></expr>]</index></name></expr></argument>, <argument pos:start="2075:55" pos:end="2075:58"><expr pos:start="2075:55" pos:end="2075:58"><name pos:start="2075:55" pos:end="2075:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <return pos:start="2076:5" pos:end="2076:16">return <expr pos:start="2076:12" pos:end="2076:15"><name pos:start="2076:12" pos:end="2076:15">opts</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="2079:1" pos:end="2096:1"><type pos:start="2079:1" pos:end="2079:6"><name pos:start="2079:1" pos:end="2079:4">void</name> <modifier pos:start="2079:6" pos:end="2079:6">*</modifier></type><name pos:start="2079:7" pos:end="2079:16">grow_array</name><parameter_list pos:start="2079:17" pos:end="2079:69">(<parameter pos:start="2079:18" pos:end="2079:28"><decl pos:start="2079:18" pos:end="2079:28"><type pos:start="2079:18" pos:end="2079:28"><name pos:start="2079:18" pos:end="2079:21">void</name> <modifier pos:start="2079:23" pos:end="2079:23">*</modifier></type><name pos:start="2079:24" pos:end="2079:28">array</name></decl></parameter>, <parameter pos:start="2079:31" pos:end="2079:43"><decl pos:start="2079:31" pos:end="2079:43"><type pos:start="2079:31" pos:end="2079:43"><name pos:start="2079:31" pos:end="2079:33">int</name></type> <name pos:start="2079:35" pos:end="2079:43">elem_size</name></decl></parameter>, <parameter pos:start="2079:46" pos:end="2079:54"><decl pos:start="2079:46" pos:end="2079:54"><type pos:start="2079:46" pos:end="2079:54"><name pos:start="2079:46" pos:end="2079:48">int</name> <modifier pos:start="2079:50" pos:end="2079:50">*</modifier></type><name pos:start="2079:51" pos:end="2079:54">size</name></decl></parameter>, <parameter pos:start="2079:57" pos:end="2079:68"><decl pos:start="2079:57" pos:end="2079:68"><type pos:start="2079:57" pos:end="2079:68"><name pos:start="2079:57" pos:end="2079:59">int</name></type> <name pos:start="2079:61" pos:end="2079:68">new_size</name></decl></parameter>)</parameter_list>
<block pos:start="2080:1" pos:end="2096:1">{<block_content pos:start="2081:5" pos:end="2095:17">
    <if_stmt pos:start="2081:5" pos:end="2084:5"><if pos:start="2081:5" pos:end="2084:5">if <condition pos:start="2081:8" pos:end="2081:40">(<expr pos:start="2081:9" pos:end="2081:39"><name pos:start="2081:9" pos:end="2081:16">new_size</name> <operator pos:start="2081:18" pos:end="2081:19">&gt;=</operator> <name pos:start="2081:21" pos:end="2081:27">INT_MAX</name> <operator pos:start="2081:29" pos:end="2081:29">/</operator> <name pos:start="2081:31" pos:end="2081:39">elem_size</name></expr>)</condition> <block pos:start="2081:42" pos:end="2084:5">{<block_content pos:start="2082:9" pos:end="2083:24">
        <expr_stmt pos:start="2082:9" pos:end="2082:55"><expr pos:start="2082:9" pos:end="2082:54"><call pos:start="2082:9" pos:end="2082:54"><name pos:start="2082:9" pos:end="2082:14">av_log</name><argument_list pos:start="2082:15" pos:end="2082:54">(<argument pos:start="2082:16" pos:end="2082:19"><expr pos:start="2082:16" pos:end="2082:19"><name pos:start="2082:16" pos:end="2082:19">NULL</name></expr></argument>, <argument pos:start="2082:22" pos:end="2082:33"><expr pos:start="2082:22" pos:end="2082:33"><name pos:start="2082:22" pos:end="2082:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="2082:36" pos:end="2082:53"><expr pos:start="2082:36" pos:end="2082:53"><literal type="string" pos:start="2082:36" pos:end="2082:53">"Array too big.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2083:9" pos:end="2083:24"><expr pos:start="2083:9" pos:end="2083:23"><call pos:start="2083:9" pos:end="2083:23"><name pos:start="2083:9" pos:end="2083:20">exit_program</name><argument_list pos:start="2083:21" pos:end="2083:23">(<argument pos:start="2083:22" pos:end="2083:22"><expr pos:start="2083:22" pos:end="2083:22"><literal type="number" pos:start="2083:22" pos:end="2083:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="2085:5" pos:end="2094:5"><if pos:start="2085:5" pos:end="2094:5">if <condition pos:start="2085:8" pos:end="2085:25">(<expr pos:start="2085:9" pos:end="2085:24"><operator pos:start="2085:9" pos:end="2085:9">*</operator><name pos:start="2085:10" pos:end="2085:13">size</name> <operator pos:start="2085:15" pos:end="2085:15">&lt;</operator> <name pos:start="2085:17" pos:end="2085:24">new_size</name></expr>)</condition> <block pos:start="2085:27" pos:end="2094:5">{<block_content pos:start="2086:9" pos:end="2093:19">
        <decl_stmt pos:start="2086:9" pos:end="2086:68"><decl pos:start="2086:9" pos:end="2086:67"><type pos:start="2086:9" pos:end="2086:17"><name pos:start="2086:9" pos:end="2086:15">uint8_t</name> <modifier pos:start="2086:17" pos:end="2086:17">*</modifier></type><name pos:start="2086:18" pos:end="2086:20">tmp</name> <init pos:start="2086:22" pos:end="2086:67">= <expr pos:start="2086:24" pos:end="2086:67"><call pos:start="2086:24" pos:end="2086:67"><name pos:start="2086:24" pos:end="2086:39">av_realloc_array</name><argument_list pos:start="2086:40" pos:end="2086:67">(<argument pos:start="2086:41" pos:end="2086:45"><expr pos:start="2086:41" pos:end="2086:45"><name pos:start="2086:41" pos:end="2086:45">array</name></expr></argument>, <argument pos:start="2086:48" pos:end="2086:55"><expr pos:start="2086:48" pos:end="2086:55"><name pos:start="2086:48" pos:end="2086:55">new_size</name></expr></argument>, <argument pos:start="2086:58" pos:end="2086:66"><expr pos:start="2086:58" pos:end="2086:66"><name pos:start="2086:58" pos:end="2086:66">elem_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="2087:9" pos:end="2090:9"><if pos:start="2087:9" pos:end="2090:9">if <condition pos:start="2087:12" pos:end="2087:17">(<expr pos:start="2087:13" pos:end="2087:16"><operator pos:start="2087:13" pos:end="2087:13">!</operator><name pos:start="2087:14" pos:end="2087:16">tmp</name></expr>)</condition> <block pos:start="2087:19" pos:end="2090:9">{<block_content pos:start="2088:13" pos:end="2089:28">
            <expr_stmt pos:start="2088:13" pos:end="2088:68"><expr pos:start="2088:13" pos:end="2088:67"><call pos:start="2088:13" pos:end="2088:67"><name pos:start="2088:13" pos:end="2088:18">av_log</name><argument_list pos:start="2088:19" pos:end="2088:67">(<argument pos:start="2088:20" pos:end="2088:23"><expr pos:start="2088:20" pos:end="2088:23"><name pos:start="2088:20" pos:end="2088:23">NULL</name></expr></argument>, <argument pos:start="2088:26" pos:end="2088:37"><expr pos:start="2088:26" pos:end="2088:37"><name pos:start="2088:26" pos:end="2088:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="2088:40" pos:end="2088:66"><expr pos:start="2088:40" pos:end="2088:66"><literal type="string" pos:start="2088:40" pos:end="2088:66">"Could not alloc buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2089:13" pos:end="2089:28"><expr pos:start="2089:13" pos:end="2089:27"><call pos:start="2089:13" pos:end="2089:27"><name pos:start="2089:13" pos:end="2089:24">exit_program</name><argument_list pos:start="2089:25" pos:end="2089:27">(<argument pos:start="2089:26" pos:end="2089:26"><expr pos:start="2089:26" pos:end="2089:26"><literal type="number" pos:start="2089:26" pos:end="2089:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="2091:9" pos:end="2091:71"><expr pos:start="2091:9" pos:end="2091:70"><call pos:start="2091:9" pos:end="2091:70"><name pos:start="2091:9" pos:end="2091:14">memset</name><argument_list pos:start="2091:15" pos:end="2091:70">(<argument pos:start="2091:16" pos:end="2091:36"><expr pos:start="2091:16" pos:end="2091:36"><name pos:start="2091:16" pos:end="2091:18">tmp</name> <operator pos:start="2091:20" pos:end="2091:20">+</operator> <operator pos:start="2091:22" pos:end="2091:22">*</operator><name pos:start="2091:23" pos:end="2091:26">size</name><operator pos:start="2091:27" pos:end="2091:27">*</operator><name pos:start="2091:28" pos:end="2091:36">elem_size</name></expr></argument>, <argument pos:start="2091:39" pos:end="2091:39"><expr pos:start="2091:39" pos:end="2091:39"><literal type="number" pos:start="2091:39" pos:end="2091:39">0</literal></expr></argument>, <argument pos:start="2091:42" pos:end="2091:69"><expr pos:start="2091:42" pos:end="2091:69"><operator pos:start="2091:42" pos:end="2091:42">(</operator><name pos:start="2091:43" pos:end="2091:50">new_size</name><operator pos:start="2091:51" pos:end="2091:51">-</operator><operator pos:start="2091:52" pos:end="2091:52">*</operator><name pos:start="2091:53" pos:end="2091:56">size</name><operator pos:start="2091:57" pos:end="2091:57">)</operator> <operator pos:start="2091:59" pos:end="2091:59">*</operator> <name pos:start="2091:61" pos:end="2091:69">elem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2092:9" pos:end="2092:25"><expr pos:start="2092:9" pos:end="2092:24"><operator pos:start="2092:9" pos:end="2092:9">*</operator><name pos:start="2092:10" pos:end="2092:13">size</name> <operator pos:start="2092:15" pos:end="2092:15">=</operator> <name pos:start="2092:17" pos:end="2092:24">new_size</name></expr>;</expr_stmt>
        <return pos:start="2093:9" pos:end="2093:19">return <expr pos:start="2093:16" pos:end="2093:18"><name pos:start="2093:16" pos:end="2093:18">tmp</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return pos:start="2095:5" pos:end="2095:17">return <expr pos:start="2095:12" pos:end="2095:16"><name pos:start="2095:12" pos:end="2095:16">array</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="2098:1" pos:end="2126:0"><type pos:start="2098:1" pos:end="2098:6"><name pos:start="2098:1" pos:end="2098:6">double</name></type> <name pos:start="2098:8" pos:end="2098:19">get_rotation</name><parameter_list pos:start="2098:20" pos:end="2098:33">(<parameter pos:start="2098:21" pos:end="2098:32"><decl pos:start="2098:21" pos:end="2098:32"><type pos:start="2098:21" pos:end="2098:30"><name pos:start="2098:21" pos:end="2098:28">AVStream</name> <modifier pos:start="2098:30" pos:end="2098:30">*</modifier></type><name pos:start="2098:31" pos:end="2098:32">st</name></decl></parameter>)</parameter_list>
<block pos:start="2099:1" pos:end="2126:0">{<block_content pos:start="2100:5" pos:end="2122:17">
    <decl_stmt pos:start="2100:5" pos:end="2100:81"><decl pos:start="2100:5" pos:end="2100:80"><type pos:start="2100:5" pos:end="2100:23"><name pos:start="2100:5" pos:end="2100:21">AVDictionaryEntry</name> <modifier pos:start="2100:23" pos:end="2100:23">*</modifier></type><name pos:start="2100:24" pos:end="2100:33">rotate_tag</name> <init pos:start="2100:35" pos:end="2100:80">= <expr pos:start="2100:37" pos:end="2100:80"><call pos:start="2100:37" pos:end="2100:80"><name pos:start="2100:37" pos:end="2100:47">av_dict_get</name><argument_list pos:start="2100:48" pos:end="2100:80">(<argument pos:start="2100:49" pos:end="2100:60"><expr pos:start="2100:49" pos:end="2100:60"><name pos:start="2100:49" pos:end="2100:60"><name pos:start="2100:49" pos:end="2100:50">st</name><operator pos:start="2100:51" pos:end="2100:52">-&gt;</operator><name pos:start="2100:53" pos:end="2100:60">metadata</name></name></expr></argument>, <argument pos:start="2100:63" pos:end="2100:70"><expr pos:start="2100:63" pos:end="2100:70"><literal type="string" pos:start="2100:63" pos:end="2100:70">"rotate"</literal></expr></argument>, <argument pos:start="2100:73" pos:end="2100:76"><expr pos:start="2100:73" pos:end="2100:76"><name pos:start="2100:73" pos:end="2100:76">NULL</name></expr></argument>, <argument pos:start="2100:79" pos:end="2100:79"><expr pos:start="2100:79" pos:end="2100:79"><literal type="number" pos:start="2100:79" pos:end="2100:79">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2101:5" pos:end="2102:86"><decl pos:start="2101:5" pos:end="2102:85"><type pos:start="2101:5" pos:end="2101:12"><name pos:start="2101:5" pos:end="2101:11">uint8_t</name><modifier pos:start="2101:12" pos:end="2101:12">*</modifier></type> <name pos:start="2101:14" pos:end="2101:26">displaymatrix</name> <init pos:start="2101:28" pos:end="2102:85">= <expr pos:start="2101:30" pos:end="2102:85"><call pos:start="2101:30" pos:end="2102:85"><name pos:start="2101:30" pos:end="2101:52">av_stream_get_side_data</name><argument_list pos:start="2101:53" pos:end="2102:85">(<argument pos:start="2101:54" pos:end="2101:55"><expr pos:start="2101:54" pos:end="2101:55"><name pos:start="2101:54" pos:end="2101:55">st</name></expr></argument>,
                                                     <argument pos:start="2102:54" pos:end="2102:78"><expr pos:start="2102:54" pos:end="2102:78"><name pos:start="2102:54" pos:end="2102:78">AV_PKT_DATA_DISPLAYMATRIX</name></expr></argument>, <argument pos:start="2102:81" pos:end="2102:84"><expr pos:start="2102:81" pos:end="2102:84"><name pos:start="2102:81" pos:end="2102:84">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2103:5" pos:end="2103:21"><decl pos:start="2103:5" pos:end="2103:20"><type pos:start="2103:5" pos:end="2103:10"><name pos:start="2103:5" pos:end="2103:10">double</name></type> <name pos:start="2103:12" pos:end="2103:16">theta</name> <init pos:start="2103:18" pos:end="2103:20">= <expr pos:start="2103:20" pos:end="2103:20"><literal type="number" pos:start="2103:20" pos:end="2103:20">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="2105:5" pos:end="2110:5"><if pos:start="2105:5" pos:end="2110:5">if <condition pos:start="2105:8" pos:end="2105:75">(<expr pos:start="2105:9" pos:end="2105:74"><name pos:start="2105:9" pos:end="2105:18">rotate_tag</name> <operator pos:start="2105:20" pos:end="2105:21">&amp;&amp;</operator> <operator pos:start="2105:23" pos:end="2105:23">*</operator><name pos:start="2105:24" pos:end="2105:40"><name pos:start="2105:24" pos:end="2105:33">rotate_tag</name><operator pos:start="2105:34" pos:end="2105:35">-&gt;</operator><name pos:start="2105:36" pos:end="2105:40">value</name></name> <operator pos:start="2105:42" pos:end="2105:43">&amp;&amp;</operator> <call pos:start="2105:45" pos:end="2105:74"><name pos:start="2105:45" pos:end="2105:50">strcmp</name><argument_list pos:start="2105:51" pos:end="2105:74">(<argument pos:start="2105:52" pos:end="2105:68"><expr pos:start="2105:52" pos:end="2105:68"><name pos:start="2105:52" pos:end="2105:68"><name pos:start="2105:52" pos:end="2105:61">rotate_tag</name><operator pos:start="2105:62" pos:end="2105:63">-&gt;</operator><name pos:start="2105:64" pos:end="2105:68">value</name></name></expr></argument>, <argument pos:start="2105:71" pos:end="2105:73"><expr pos:start="2105:71" pos:end="2105:73"><literal type="string" pos:start="2105:71" pos:end="2105:73">"0"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2105:77" pos:end="2110:5">{<block_content pos:start="2106:9" pos:end="2109:22">
        <decl_stmt pos:start="2106:9" pos:end="2106:19"><decl pos:start="2106:9" pos:end="2106:18"><type pos:start="2106:9" pos:end="2106:14"><name pos:start="2106:9" pos:end="2106:12">char</name> <modifier pos:start="2106:14" pos:end="2106:14">*</modifier></type><name pos:start="2106:15" pos:end="2106:18">tail</name></decl>;</decl_stmt>
        <expr_stmt pos:start="2107:9" pos:end="2107:52"><expr pos:start="2107:9" pos:end="2107:51"><name pos:start="2107:9" pos:end="2107:13">theta</name> <operator pos:start="2107:15" pos:end="2107:15">=</operator> <call pos:start="2107:17" pos:end="2107:51"><name pos:start="2107:17" pos:end="2107:25">av_strtod</name><argument_list pos:start="2107:26" pos:end="2107:51">(<argument pos:start="2107:27" pos:end="2107:43"><expr pos:start="2107:27" pos:end="2107:43"><name pos:start="2107:27" pos:end="2107:43"><name pos:start="2107:27" pos:end="2107:36">rotate_tag</name><operator pos:start="2107:37" pos:end="2107:38">-&gt;</operator><name pos:start="2107:39" pos:end="2107:43">value</name></name></expr></argument>, <argument pos:start="2107:46" pos:end="2107:50"><expr pos:start="2107:46" pos:end="2107:50"><operator pos:start="2107:46" pos:end="2107:46">&amp;</operator><name pos:start="2107:47" pos:end="2107:50">tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2108:9" pos:end="2109:22"><if pos:start="2108:9" pos:end="2109:22">if <condition pos:start="2108:12" pos:end="2108:18">(<expr pos:start="2108:13" pos:end="2108:17"><operator pos:start="2108:13" pos:end="2108:13">*</operator><name pos:start="2108:14" pos:end="2108:17">tail</name></expr>)</condition><block type="pseudo" pos:start="2109:13" pos:end="2109:22"><block_content pos:start="2109:13" pos:end="2109:22">
            <expr_stmt pos:start="2109:13" pos:end="2109:22"><expr pos:start="2109:13" pos:end="2109:21"><name pos:start="2109:13" pos:end="2109:17">theta</name> <operator pos:start="2109:19" pos:end="2109:19">=</operator> <literal type="number" pos:start="2109:21" pos:end="2109:21">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="2111:5" pos:end="2112:67"><if pos:start="2111:5" pos:end="2112:67">if <condition pos:start="2111:8" pos:end="2111:32">(<expr pos:start="2111:9" pos:end="2111:31"><name pos:start="2111:9" pos:end="2111:21">displaymatrix</name> <operator pos:start="2111:23" pos:end="2111:24">&amp;&amp;</operator> <operator pos:start="2111:26" pos:end="2111:26">!</operator><name pos:start="2111:27" pos:end="2111:31">theta</name></expr>)</condition><block type="pseudo" pos:start="2112:9" pos:end="2112:67"><block_content pos:start="2112:9" pos:end="2112:67">
        <expr_stmt pos:start="2112:9" pos:end="2112:67"><expr pos:start="2112:9" pos:end="2112:66"><name pos:start="2112:9" pos:end="2112:13">theta</name> <operator pos:start="2112:15" pos:end="2112:15">=</operator> <operator pos:start="2112:17" pos:end="2112:17">-</operator><call pos:start="2112:18" pos:end="2112:66"><name pos:start="2112:18" pos:end="2112:40">av_display_rotation_get</name><argument_list pos:start="2112:41" pos:end="2112:66">(<argument pos:start="2112:42" pos:end="2112:65"><expr pos:start="2112:42" pos:end="2112:65"><operator pos:start="2112:42" pos:end="2112:42">(</operator><name pos:start="2112:43" pos:end="2112:49">int32_t</name><operator pos:start="2112:50" pos:end="2112:50">*</operator><operator pos:start="2112:51" pos:end="2112:51">)</operator> <name pos:start="2112:53" pos:end="2112:65">displaymatrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="2114:5" pos:end="2114:44"><expr pos:start="2114:5" pos:end="2114:43"><name pos:start="2114:5" pos:end="2114:9">theta</name> <operator pos:start="2114:11" pos:end="2114:12">-=</operator> <literal type="number" pos:start="2114:14" pos:end="2114:16">360</literal><operator pos:start="2114:17" pos:end="2114:17">*</operator><call pos:start="2114:18" pos:end="2114:43"><name pos:start="2114:18" pos:end="2114:22">floor</name><argument_list pos:start="2114:23" pos:end="2114:43">(<argument pos:start="2114:24" pos:end="2114:42"><expr pos:start="2114:24" pos:end="2114:42"><name pos:start="2114:24" pos:end="2114:28">theta</name><operator pos:start="2114:29" pos:end="2114:29">/</operator><literal type="number" pos:start="2114:30" pos:end="2114:34">360</literal> <operator pos:start="2114:34" pos:end="2114:34">+</operator> <literal type="number" pos:start="2114:36" pos:end="2114:38">0.9</literal><operator pos:start="2114:39" pos:end="2114:39">/</operator><literal type="number" pos:start="2114:40" pos:end="2114:42">360</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="2116:5" pos:end="2120:87"><if pos:start="2116:5" pos:end="2120:87">if <condition pos:start="2116:8" pos:end="2116:45">(<expr pos:start="2116:9" pos:end="2116:44"><call pos:start="2116:9" pos:end="2116:40"><name pos:start="2116:9" pos:end="2116:12">fabs</name><argument_list pos:start="2116:13" pos:end="2116:40">(<argument pos:start="2116:14" pos:end="2116:39"><expr pos:start="2116:14" pos:end="2116:39"><name pos:start="2116:14" pos:end="2116:18">theta</name> <operator pos:start="2116:20" pos:end="2116:20">-</operator> <literal type="number" pos:start="2116:22" pos:end="2116:23">90</literal><operator pos:start="2116:24" pos:end="2116:24">*</operator><call pos:start="2116:25" pos:end="2116:39"><name pos:start="2116:25" pos:end="2116:29">round</name><argument_list pos:start="2116:30" pos:end="2116:39">(<argument pos:start="2116:31" pos:end="2116:38"><expr pos:start="2116:31" pos:end="2116:38"><name pos:start="2116:31" pos:end="2116:35">theta</name><operator pos:start="2116:36" pos:end="2116:36">/</operator><literal type="number" pos:start="2116:37" pos:end="2116:38">90</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="2116:42" pos:end="2116:42">&gt;</operator> <literal type="number" pos:start="2116:44" pos:end="2116:44">2</literal></expr>)</condition><block type="pseudo" pos:start="2117:9" pos:end="2120:87"><block_content pos:start="2117:9" pos:end="2120:87">
        <expr_stmt pos:start="2117:9" pos:end="2120:87"><expr pos:start="2117:9" pos:end="2120:86"><call pos:start="2117:9" pos:end="2120:86"><name pos:start="2117:9" pos:end="2117:14">av_log</name><argument_list pos:start="2117:15" pos:end="2120:86">(<argument pos:start="2117:16" pos:end="2117:19"><expr pos:start="2117:16" pos:end="2117:19"><name pos:start="2117:16" pos:end="2117:19">NULL</name></expr></argument>, <argument pos:start="2117:22" pos:end="2117:35"><expr pos:start="2117:22" pos:end="2117:35"><name pos:start="2117:22" pos:end="2117:35">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="2117:38" pos:end="2120:85"><expr pos:start="2117:38" pos:end="2120:85"><literal type="string" pos:start="2117:38" pos:end="2117:60">"Odd rotation angle.\n"</literal>
               <literal type="string" pos:start="2118:16" pos:end="2118:54">"If you want to help, upload a sample "</literal>
               <literal type="string" pos:start="2119:16" pos:end="2119:67">"of this file to ftp://upload.ffmpeg.org/incoming/ "</literal>
               <literal type="string" pos:start="2120:16" pos:end="2120:85">"and contact the ffmpeg-devel mailing list. (ffmpeg-devel@ffmpeg.org)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="2122:5" pos:end="2122:17">return <expr pos:start="2122:12" pos:end="2122:16"><name pos:start="2122:12" pos:end="2122:16">theta</name></expr>;</return>
</block_content>}</block></function>

<cpp:if pos:start="2125:1" pos:end="2125:19">#<cpp:directive pos:start="2125:2" pos:end="2125:3">if</cpp:directive> <expr pos:start="2125:5" pos:end="2125:19"><name pos:start="2125:5" pos:end="2125:19">CONFIG_AVDEVICE</name></expr></cpp:if>
<function pos:start="2126:1" pos:end="2154:1"><type pos:start="2126:1" pos:end="2126:10"><specifier pos:start="2126:1" pos:end="2126:6">static</specifier> <name pos:start="2126:8" pos:end="2126:10">int</name></type> <name pos:start="2126:12" pos:end="2126:31">print_device_sources</name><parameter_list pos:start="2126:32" pos:end="2126:71">(<parameter pos:start="2126:33" pos:end="2126:50"><decl pos:start="2126:33" pos:end="2126:50"><type pos:start="2126:33" pos:end="2126:50"><name pos:start="2126:33" pos:end="2126:45">AVInputFormat</name> <modifier pos:start="2126:47" pos:end="2126:47">*</modifier></type><name pos:start="2126:48" pos:end="2126:50">fmt</name></decl></parameter>, <parameter pos:start="2126:53" pos:end="2126:70"><decl pos:start="2126:53" pos:end="2126:70"><type pos:start="2126:53" pos:end="2126:70"><name pos:start="2126:53" pos:end="2126:64">AVDictionary</name> <modifier pos:start="2126:66" pos:end="2126:66">*</modifier></type><name pos:start="2126:67" pos:end="2126:70">opts</name></decl></parameter>)</parameter_list>
<block pos:start="2127:1" pos:end="2154:1">{<block_content pos:start="2128:5" pos:end="2153:15">
    <decl_stmt pos:start="2128:5" pos:end="2128:15"><decl pos:start="2128:5" pos:end="2128:11"><type pos:start="2128:5" pos:end="2128:7"><name pos:start="2128:5" pos:end="2128:7">int</name></type> <name pos:start="2128:9" pos:end="2128:11">ret</name></decl>, <decl pos:start="2128:14" pos:end="2128:14"><type ref="prev" pos:start="2128:5" pos:end="2128:7"/><name pos:start="2128:14" pos:end="2128:14">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2129:5" pos:end="2129:41"><decl pos:start="2129:5" pos:end="2129:40"><type pos:start="2129:5" pos:end="2129:22"><name pos:start="2129:5" pos:end="2129:20">AVDeviceInfoList</name> <modifier pos:start="2129:22" pos:end="2129:22">*</modifier></type><name pos:start="2129:23" pos:end="2129:33">device_list</name> <init pos:start="2129:35" pos:end="2129:40">= <expr pos:start="2129:37" pos:end="2129:40"><name pos:start="2129:37" pos:end="2129:40">NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="2131:5" pos:end="2132:31"><if pos:start="2131:5" pos:end="2132:31">if <condition pos:start="2131:8" pos:end="2131:84">(<expr pos:start="2131:9" pos:end="2131:83"><operator pos:start="2131:9" pos:end="2131:9">!</operator><name pos:start="2131:10" pos:end="2131:12">fmt</name> <operator pos:start="2131:14" pos:end="2131:15">||</operator> <operator pos:start="2131:17" pos:end="2131:17">!</operator><name pos:start="2131:18" pos:end="2131:32"><name pos:start="2131:18" pos:end="2131:20">fmt</name><operator pos:start="2131:21" pos:end="2131:22">-&gt;</operator><name pos:start="2131:23" pos:end="2131:32">priv_class</name></name>  <operator pos:start="2131:35" pos:end="2131:36">||</operator> <operator pos:start="2131:38" pos:end="2131:38">!</operator><call pos:start="2131:39" pos:end="2131:83"><name pos:start="2131:39" pos:end="2131:56">AV_IS_INPUT_DEVICE</name><argument_list pos:start="2131:57" pos:end="2131:83">(<argument pos:start="2131:58" pos:end="2131:82"><expr pos:start="2131:58" pos:end="2131:82"><name pos:start="2131:58" pos:end="2131:82"><name pos:start="2131:58" pos:end="2131:60">fmt</name><operator pos:start="2131:61" pos:end="2131:62">-&gt;</operator><name pos:start="2131:63" pos:end="2131:72">priv_class</name><operator pos:start="2131:73" pos:end="2131:74">-&gt;</operator><name pos:start="2131:75" pos:end="2131:82">category</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2132:9" pos:end="2132:31"><block_content pos:start="2132:9" pos:end="2132:31">
        <return pos:start="2132:9" pos:end="2132:31">return <expr pos:start="2132:16" pos:end="2132:30"><call pos:start="2132:16" pos:end="2132:30"><name pos:start="2132:16" pos:end="2132:22">AVERROR</name><argument_list pos:start="2132:23" pos:end="2132:30">(<argument pos:start="2132:24" pos:end="2132:29"><expr pos:start="2132:24" pos:end="2132:29"><name pos:start="2132:24" pos:end="2132:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="2134:5" pos:end="2134:57"><expr pos:start="2134:5" pos:end="2134:56"><call pos:start="2134:5" pos:end="2134:56"><name pos:start="2134:5" pos:end="2134:10">printf</name><argument_list pos:start="2134:11" pos:end="2134:56">(<argument pos:start="2134:12" pos:end="2134:44"><expr pos:start="2134:12" pos:end="2134:44"><literal type="string" pos:start="2134:12" pos:end="2134:44">"Auto-detected sources for %s:\n"</literal></expr></argument>, <argument pos:start="2134:47" pos:end="2134:55"><expr pos:start="2134:47" pos:end="2134:55"><name pos:start="2134:47" pos:end="2134:55"><name pos:start="2134:47" pos:end="2134:49">fmt</name><operator pos:start="2134:50" pos:end="2134:51">-&gt;</operator><name pos:start="2134:52" pos:end="2134:55">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="2135:5" pos:end="2139:5"><if pos:start="2135:5" pos:end="2139:5">if <condition pos:start="2135:8" pos:end="2135:30">(<expr pos:start="2135:9" pos:end="2135:29"><operator pos:start="2135:9" pos:end="2135:9">!</operator><name pos:start="2135:10" pos:end="2135:29"><name pos:start="2135:10" pos:end="2135:12">fmt</name><operator pos:start="2135:13" pos:end="2135:14">-&gt;</operator><name pos:start="2135:15" pos:end="2135:29">get_device_list</name></name></expr>)</condition> <block pos:start="2135:32" pos:end="2139:5">{<block_content pos:start="2136:9" pos:end="2138:18">
        <expr_stmt pos:start="2136:9" pos:end="2136:30"><expr pos:start="2136:9" pos:end="2136:29"><name pos:start="2136:9" pos:end="2136:11">ret</name> <operator pos:start="2136:13" pos:end="2136:13">=</operator> <call pos:start="2136:15" pos:end="2136:29"><name pos:start="2136:15" pos:end="2136:21">AVERROR</name><argument_list pos:start="2136:22" pos:end="2136:29">(<argument pos:start="2136:23" pos:end="2136:28"><expr pos:start="2136:23" pos:end="2136:28"><name pos:start="2136:23" pos:end="2136:28">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2137:9" pos:end="2137:58"><expr pos:start="2137:9" pos:end="2137:57"><call pos:start="2137:9" pos:end="2137:57"><name pos:start="2137:9" pos:end="2137:14">printf</name><argument_list pos:start="2137:15" pos:end="2137:57">(<argument pos:start="2137:16" pos:end="2137:56"><expr pos:start="2137:16" pos:end="2137:56"><literal type="string" pos:start="2137:16" pos:end="2137:56">"Cannot list sources. Not implemented.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="2138:9" pos:end="2138:18">goto <name pos:start="2138:14" pos:end="2138:17">fail</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="2141:5" pos:end="2144:5"><if pos:start="2141:5" pos:end="2144:5">if <condition pos:start="2141:8" pos:end="2141:79">(<expr pos:start="2141:9" pos:end="2141:78"><operator pos:start="2141:9" pos:end="2141:9">(</operator><name pos:start="2141:10" pos:end="2141:12">ret</name> <operator pos:start="2141:14" pos:end="2141:14">=</operator> <call pos:start="2141:16" pos:end="2141:73"><name pos:start="2141:16" pos:end="2141:42">avdevice_list_input_sources</name><argument_list pos:start="2141:43" pos:end="2141:73">(<argument pos:start="2141:44" pos:end="2141:46"><expr pos:start="2141:44" pos:end="2141:46"><name pos:start="2141:44" pos:end="2141:46">fmt</name></expr></argument>, <argument pos:start="2141:49" pos:end="2141:52"><expr pos:start="2141:49" pos:end="2141:52"><name pos:start="2141:49" pos:end="2141:52">NULL</name></expr></argument>, <argument pos:start="2141:55" pos:end="2141:58"><expr pos:start="2141:55" pos:end="2141:58"><name pos:start="2141:55" pos:end="2141:58">opts</name></expr></argument>, <argument pos:start="2141:61" pos:end="2141:72"><expr pos:start="2141:61" pos:end="2141:72"><operator pos:start="2141:61" pos:end="2141:61">&amp;</operator><name pos:start="2141:62" pos:end="2141:72">device_list</name></expr></argument>)</argument_list></call><operator pos:start="2141:74" pos:end="2141:74">)</operator> <operator pos:start="2141:76" pos:end="2141:76">&lt;</operator> <literal type="number" pos:start="2141:78" pos:end="2141:78">0</literal></expr>)</condition> <block pos:start="2141:81" pos:end="2144:5">{<block_content pos:start="2142:9" pos:end="2143:18">
        <expr_stmt pos:start="2142:9" pos:end="2142:41"><expr pos:start="2142:9" pos:end="2142:40"><call pos:start="2142:9" pos:end="2142:40"><name pos:start="2142:9" pos:end="2142:14">printf</name><argument_list pos:start="2142:15" pos:end="2142:40">(<argument pos:start="2142:16" pos:end="2142:39"><expr pos:start="2142:16" pos:end="2142:39"><literal type="string" pos:start="2142:16" pos:end="2142:39">"Cannot list sources.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="2143:9" pos:end="2143:18">goto <name pos:start="2143:14" pos:end="2143:17">fail</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <for pos:start="2146:5" pos:end="2149:5">for <control pos:start="2146:9" pos:end="2146:49">(<init pos:start="2146:10" pos:end="2146:15"><expr pos:start="2146:10" pos:end="2146:14"><name pos:start="2146:10" pos:end="2146:10">i</name> <operator pos:start="2146:12" pos:end="2146:12">=</operator> <literal type="number" pos:start="2146:14" pos:end="2146:14">0</literal></expr>;</init> <condition pos:start="2146:17" pos:end="2146:44"><expr pos:start="2146:17" pos:end="2146:43"><name pos:start="2146:17" pos:end="2146:17">i</name> <operator pos:start="2146:19" pos:end="2146:19">&lt;</operator> <name pos:start="2146:21" pos:end="2146:43"><name pos:start="2146:21" pos:end="2146:31">device_list</name><operator pos:start="2146:32" pos:end="2146:33">-&gt;</operator><name pos:start="2146:34" pos:end="2146:43">nb_devices</name></name></expr>;</condition> <incr pos:start="2146:46" pos:end="2146:48"><expr pos:start="2146:46" pos:end="2146:48"><name pos:start="2146:46" pos:end="2146:46">i</name><operator pos:start="2146:47" pos:end="2146:48">++</operator></expr></incr>)</control> <block pos:start="2146:51" pos:end="2149:5">{<block_content pos:start="2147:9" pos:end="2148:98">
        <expr_stmt pos:start="2147:9" pos:end="2148:98"><expr pos:start="2147:9" pos:end="2148:97"><call pos:start="2147:9" pos:end="2148:97"><name pos:start="2147:9" pos:end="2147:14">printf</name><argument_list pos:start="2147:15" pos:end="2148:97">(<argument pos:start="2147:16" pos:end="2147:29"><expr pos:start="2147:16" pos:end="2147:29"><literal type="string" pos:start="2147:16" pos:end="2147:29">"%s %s [%s]\n"</literal></expr></argument>, <argument pos:start="2147:32" pos:end="2147:75"><expr pos:start="2147:32" pos:end="2147:75"><ternary pos:start="2147:32" pos:end="2147:75"><condition pos:start="2147:32" pos:end="2147:65"><expr pos:start="2147:32" pos:end="2147:63"><name pos:start="2147:32" pos:end="2147:58"><name pos:start="2147:32" pos:end="2147:42">device_list</name><operator pos:start="2147:43" pos:end="2147:44">-&gt;</operator><name pos:start="2147:45" pos:end="2147:58">default_device</name></name> <operator pos:start="2147:60" pos:end="2147:61">==</operator> <name pos:start="2147:63" pos:end="2147:63">i</name></expr> ?</condition><then pos:start="2147:67" pos:end="2147:69"> <expr pos:start="2147:67" pos:end="2147:69"><literal type="string" pos:start="2147:67" pos:end="2147:69">"*"</literal></expr> </then><else pos:start="2147:71" pos:end="2147:75">: <expr pos:start="2147:73" pos:end="2147:75"><literal type="string" pos:start="2147:73" pos:end="2147:75">" "</literal></expr></else></ternary></expr></argument>,
               <argument pos:start="2148:16" pos:end="2148:51"><expr pos:start="2148:16" pos:end="2148:51"><name pos:start="2148:16" pos:end="2148:38"><name pos:start="2148:16" pos:end="2148:26">device_list</name><operator pos:start="2148:27" pos:end="2148:28">-&gt;</operator><name pos:start="2148:29" pos:end="2148:35">devices</name><index pos:start="2148:36" pos:end="2148:38">[<expr pos:start="2148:37" pos:end="2148:37"><name pos:start="2148:37" pos:end="2148:37">i</name></expr>]</index></name><operator pos:start="2148:39" pos:end="2148:40">-&gt;</operator><name pos:start="2148:41" pos:end="2148:51">device_name</name></expr></argument>, <argument pos:start="2148:54" pos:end="2148:96"><expr pos:start="2148:54" pos:end="2148:96"><name pos:start="2148:54" pos:end="2148:76"><name pos:start="2148:54" pos:end="2148:64">device_list</name><operator pos:start="2148:65" pos:end="2148:66">-&gt;</operator><name pos:start="2148:67" pos:end="2148:73">devices</name><index pos:start="2148:74" pos:end="2148:76">[<expr pos:start="2148:75" pos:end="2148:75"><name pos:start="2148:75" pos:end="2148:75">i</name></expr>]</index></name><operator pos:start="2148:77" pos:end="2148:78">-&gt;</operator><name pos:start="2148:79" pos:end="2148:96">device_description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

  <label pos:start="2151:3" pos:end="2151:7"><name pos:start="2151:3" pos:end="2151:6">fail</name>:</label>
    <expr_stmt pos:start="2152:5" pos:end="2152:45"><expr pos:start="2152:5" pos:end="2152:44"><call pos:start="2152:5" pos:end="2152:44"><name pos:start="2152:5" pos:end="2152:30">avdevice_free_list_devices</name><argument_list pos:start="2152:31" pos:end="2152:44">(<argument pos:start="2152:32" pos:end="2152:43"><expr pos:start="2152:32" pos:end="2152:43"><operator pos:start="2152:32" pos:end="2152:32">&amp;</operator><name pos:start="2152:33" pos:end="2152:43">device_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="2153:5" pos:end="2153:15">return <expr pos:start="2153:12" pos:end="2153:14"><name pos:start="2153:12" pos:end="2153:14">ret</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="2156:1" pos:end="2184:1"><type pos:start="2156:1" pos:end="2156:10"><specifier pos:start="2156:1" pos:end="2156:6">static</specifier> <name pos:start="2156:8" pos:end="2156:10">int</name></type> <name pos:start="2156:12" pos:end="2156:29">print_device_sinks</name><parameter_list pos:start="2156:30" pos:end="2156:70">(<parameter pos:start="2156:31" pos:end="2156:49"><decl pos:start="2156:31" pos:end="2156:49"><type pos:start="2156:31" pos:end="2156:49"><name pos:start="2156:31" pos:end="2156:44">AVOutputFormat</name> <modifier pos:start="2156:46" pos:end="2156:46">*</modifier></type><name pos:start="2156:47" pos:end="2156:49">fmt</name></decl></parameter>, <parameter pos:start="2156:52" pos:end="2156:69"><decl pos:start="2156:52" pos:end="2156:69"><type pos:start="2156:52" pos:end="2156:69"><name pos:start="2156:52" pos:end="2156:63">AVDictionary</name> <modifier pos:start="2156:65" pos:end="2156:65">*</modifier></type><name pos:start="2156:66" pos:end="2156:69">opts</name></decl></parameter>)</parameter_list>
<block pos:start="2157:1" pos:end="2184:1">{<block_content pos:start="2158:5" pos:end="2183:15">
    <decl_stmt pos:start="2158:5" pos:end="2158:15"><decl pos:start="2158:5" pos:end="2158:11"><type pos:start="2158:5" pos:end="2158:7"><name pos:start="2158:5" pos:end="2158:7">int</name></type> <name pos:start="2158:9" pos:end="2158:11">ret</name></decl>, <decl pos:start="2158:14" pos:end="2158:14"><type ref="prev" pos:start="2158:5" pos:end="2158:7"/><name pos:start="2158:14" pos:end="2158:14">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2159:5" pos:end="2159:41"><decl pos:start="2159:5" pos:end="2159:40"><type pos:start="2159:5" pos:end="2159:22"><name pos:start="2159:5" pos:end="2159:20">AVDeviceInfoList</name> <modifier pos:start="2159:22" pos:end="2159:22">*</modifier></type><name pos:start="2159:23" pos:end="2159:33">device_list</name> <init pos:start="2159:35" pos:end="2159:40">= <expr pos:start="2159:37" pos:end="2159:40"><name pos:start="2159:37" pos:end="2159:40">NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="2161:5" pos:end="2162:31"><if pos:start="2161:5" pos:end="2162:31">if <condition pos:start="2161:8" pos:end="2161:85">(<expr pos:start="2161:9" pos:end="2161:84"><operator pos:start="2161:9" pos:end="2161:9">!</operator><name pos:start="2161:10" pos:end="2161:12">fmt</name> <operator pos:start="2161:14" pos:end="2161:15">||</operator> <operator pos:start="2161:17" pos:end="2161:17">!</operator><name pos:start="2161:18" pos:end="2161:32"><name pos:start="2161:18" pos:end="2161:20">fmt</name><operator pos:start="2161:21" pos:end="2161:22">-&gt;</operator><name pos:start="2161:23" pos:end="2161:32">priv_class</name></name>  <operator pos:start="2161:35" pos:end="2161:36">||</operator> <operator pos:start="2161:38" pos:end="2161:38">!</operator><call pos:start="2161:39" pos:end="2161:84"><name pos:start="2161:39" pos:end="2161:57">AV_IS_OUTPUT_DEVICE</name><argument_list pos:start="2161:58" pos:end="2161:84">(<argument pos:start="2161:59" pos:end="2161:83"><expr pos:start="2161:59" pos:end="2161:83"><name pos:start="2161:59" pos:end="2161:83"><name pos:start="2161:59" pos:end="2161:61">fmt</name><operator pos:start="2161:62" pos:end="2161:63">-&gt;</operator><name pos:start="2161:64" pos:end="2161:73">priv_class</name><operator pos:start="2161:74" pos:end="2161:75">-&gt;</operator><name pos:start="2161:76" pos:end="2161:83">category</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2162:9" pos:end="2162:31"><block_content pos:start="2162:9" pos:end="2162:31">
        <return pos:start="2162:9" pos:end="2162:31">return <expr pos:start="2162:16" pos:end="2162:30"><call pos:start="2162:16" pos:end="2162:30"><name pos:start="2162:16" pos:end="2162:22">AVERROR</name><argument_list pos:start="2162:23" pos:end="2162:30">(<argument pos:start="2162:24" pos:end="2162:29"><expr pos:start="2162:24" pos:end="2162:29"><name pos:start="2162:24" pos:end="2162:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="2164:5" pos:end="2164:55"><expr pos:start="2164:5" pos:end="2164:54"><call pos:start="2164:5" pos:end="2164:54"><name pos:start="2164:5" pos:end="2164:10">printf</name><argument_list pos:start="2164:11" pos:end="2164:54">(<argument pos:start="2164:12" pos:end="2164:42"><expr pos:start="2164:12" pos:end="2164:42"><literal type="string" pos:start="2164:12" pos:end="2164:42">"Auto-detected sinks for %s:\n"</literal></expr></argument>, <argument pos:start="2164:45" pos:end="2164:53"><expr pos:start="2164:45" pos:end="2164:53"><name pos:start="2164:45" pos:end="2164:53"><name pos:start="2164:45" pos:end="2164:47">fmt</name><operator pos:start="2164:48" pos:end="2164:49">-&gt;</operator><name pos:start="2164:50" pos:end="2164:53">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="2165:5" pos:end="2169:5"><if pos:start="2165:5" pos:end="2169:5">if <condition pos:start="2165:8" pos:end="2165:30">(<expr pos:start="2165:9" pos:end="2165:29"><operator pos:start="2165:9" pos:end="2165:9">!</operator><name pos:start="2165:10" pos:end="2165:29"><name pos:start="2165:10" pos:end="2165:12">fmt</name><operator pos:start="2165:13" pos:end="2165:14">-&gt;</operator><name pos:start="2165:15" pos:end="2165:29">get_device_list</name></name></expr>)</condition> <block pos:start="2165:32" pos:end="2169:5">{<block_content pos:start="2166:9" pos:end="2168:18">
        <expr_stmt pos:start="2166:9" pos:end="2166:30"><expr pos:start="2166:9" pos:end="2166:29"><name pos:start="2166:9" pos:end="2166:11">ret</name> <operator pos:start="2166:13" pos:end="2166:13">=</operator> <call pos:start="2166:15" pos:end="2166:29"><name pos:start="2166:15" pos:end="2166:21">AVERROR</name><argument_list pos:start="2166:22" pos:end="2166:29">(<argument pos:start="2166:23" pos:end="2166:28"><expr pos:start="2166:23" pos:end="2166:28"><name pos:start="2166:23" pos:end="2166:28">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2167:9" pos:end="2167:56"><expr pos:start="2167:9" pos:end="2167:55"><call pos:start="2167:9" pos:end="2167:55"><name pos:start="2167:9" pos:end="2167:14">printf</name><argument_list pos:start="2167:15" pos:end="2167:55">(<argument pos:start="2167:16" pos:end="2167:54"><expr pos:start="2167:16" pos:end="2167:54"><literal type="string" pos:start="2167:16" pos:end="2167:54">"Cannot list sinks. Not implemented.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="2168:9" pos:end="2168:18">goto <name pos:start="2168:14" pos:end="2168:17">fail</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="2171:5" pos:end="2174:5"><if pos:start="2171:5" pos:end="2174:5">if <condition pos:start="2171:8" pos:end="2171:78">(<expr pos:start="2171:9" pos:end="2171:77"><operator pos:start="2171:9" pos:end="2171:9">(</operator><name pos:start="2171:10" pos:end="2171:12">ret</name> <operator pos:start="2171:14" pos:end="2171:14">=</operator> <call pos:start="2171:16" pos:end="2171:72"><name pos:start="2171:16" pos:end="2171:41">avdevice_list_output_sinks</name><argument_list pos:start="2171:42" pos:end="2171:72">(<argument pos:start="2171:43" pos:end="2171:45"><expr pos:start="2171:43" pos:end="2171:45"><name pos:start="2171:43" pos:end="2171:45">fmt</name></expr></argument>, <argument pos:start="2171:48" pos:end="2171:51"><expr pos:start="2171:48" pos:end="2171:51"><name pos:start="2171:48" pos:end="2171:51">NULL</name></expr></argument>, <argument pos:start="2171:54" pos:end="2171:57"><expr pos:start="2171:54" pos:end="2171:57"><name pos:start="2171:54" pos:end="2171:57">opts</name></expr></argument>, <argument pos:start="2171:60" pos:end="2171:71"><expr pos:start="2171:60" pos:end="2171:71"><operator pos:start="2171:60" pos:end="2171:60">&amp;</operator><name pos:start="2171:61" pos:end="2171:71">device_list</name></expr></argument>)</argument_list></call><operator pos:start="2171:73" pos:end="2171:73">)</operator> <operator pos:start="2171:75" pos:end="2171:75">&lt;</operator> <literal type="number" pos:start="2171:77" pos:end="2171:77">0</literal></expr>)</condition> <block pos:start="2171:80" pos:end="2174:5">{<block_content pos:start="2172:9" pos:end="2173:18">
        <expr_stmt pos:start="2172:9" pos:end="2172:39"><expr pos:start="2172:9" pos:end="2172:38"><call pos:start="2172:9" pos:end="2172:38"><name pos:start="2172:9" pos:end="2172:14">printf</name><argument_list pos:start="2172:15" pos:end="2172:38">(<argument pos:start="2172:16" pos:end="2172:37"><expr pos:start="2172:16" pos:end="2172:37"><literal type="string" pos:start="2172:16" pos:end="2172:37">"Cannot list sinks.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="2173:9" pos:end="2173:18">goto <name pos:start="2173:14" pos:end="2173:17">fail</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <for pos:start="2176:5" pos:end="2179:5">for <control pos:start="2176:9" pos:end="2176:49">(<init pos:start="2176:10" pos:end="2176:15"><expr pos:start="2176:10" pos:end="2176:14"><name pos:start="2176:10" pos:end="2176:10">i</name> <operator pos:start="2176:12" pos:end="2176:12">=</operator> <literal type="number" pos:start="2176:14" pos:end="2176:14">0</literal></expr>;</init> <condition pos:start="2176:17" pos:end="2176:44"><expr pos:start="2176:17" pos:end="2176:43"><name pos:start="2176:17" pos:end="2176:17">i</name> <operator pos:start="2176:19" pos:end="2176:19">&lt;</operator> <name pos:start="2176:21" pos:end="2176:43"><name pos:start="2176:21" pos:end="2176:31">device_list</name><operator pos:start="2176:32" pos:end="2176:33">-&gt;</operator><name pos:start="2176:34" pos:end="2176:43">nb_devices</name></name></expr>;</condition> <incr pos:start="2176:46" pos:end="2176:48"><expr pos:start="2176:46" pos:end="2176:48"><name pos:start="2176:46" pos:end="2176:46">i</name><operator pos:start="2176:47" pos:end="2176:48">++</operator></expr></incr>)</control> <block pos:start="2176:51" pos:end="2179:5">{<block_content pos:start="2177:9" pos:end="2178:98">
        <expr_stmt pos:start="2177:9" pos:end="2178:98"><expr pos:start="2177:9" pos:end="2178:97"><call pos:start="2177:9" pos:end="2178:97"><name pos:start="2177:9" pos:end="2177:14">printf</name><argument_list pos:start="2177:15" pos:end="2178:97">(<argument pos:start="2177:16" pos:end="2177:29"><expr pos:start="2177:16" pos:end="2177:29"><literal type="string" pos:start="2177:16" pos:end="2177:29">"%s %s [%s]\n"</literal></expr></argument>, <argument pos:start="2177:32" pos:end="2177:75"><expr pos:start="2177:32" pos:end="2177:75"><ternary pos:start="2177:32" pos:end="2177:75"><condition pos:start="2177:32" pos:end="2177:65"><expr pos:start="2177:32" pos:end="2177:63"><name pos:start="2177:32" pos:end="2177:58"><name pos:start="2177:32" pos:end="2177:42">device_list</name><operator pos:start="2177:43" pos:end="2177:44">-&gt;</operator><name pos:start="2177:45" pos:end="2177:58">default_device</name></name> <operator pos:start="2177:60" pos:end="2177:61">==</operator> <name pos:start="2177:63" pos:end="2177:63">i</name></expr> ?</condition><then pos:start="2177:67" pos:end="2177:69"> <expr pos:start="2177:67" pos:end="2177:69"><literal type="string" pos:start="2177:67" pos:end="2177:69">"*"</literal></expr> </then><else pos:start="2177:71" pos:end="2177:75">: <expr pos:start="2177:73" pos:end="2177:75"><literal type="string" pos:start="2177:73" pos:end="2177:75">" "</literal></expr></else></ternary></expr></argument>,
               <argument pos:start="2178:16" pos:end="2178:51"><expr pos:start="2178:16" pos:end="2178:51"><name pos:start="2178:16" pos:end="2178:38"><name pos:start="2178:16" pos:end="2178:26">device_list</name><operator pos:start="2178:27" pos:end="2178:28">-&gt;</operator><name pos:start="2178:29" pos:end="2178:35">devices</name><index pos:start="2178:36" pos:end="2178:38">[<expr pos:start="2178:37" pos:end="2178:37"><name pos:start="2178:37" pos:end="2178:37">i</name></expr>]</index></name><operator pos:start="2178:39" pos:end="2178:40">-&gt;</operator><name pos:start="2178:41" pos:end="2178:51">device_name</name></expr></argument>, <argument pos:start="2178:54" pos:end="2178:96"><expr pos:start="2178:54" pos:end="2178:96"><name pos:start="2178:54" pos:end="2178:76"><name pos:start="2178:54" pos:end="2178:64">device_list</name><operator pos:start="2178:65" pos:end="2178:66">-&gt;</operator><name pos:start="2178:67" pos:end="2178:73">devices</name><index pos:start="2178:74" pos:end="2178:76">[<expr pos:start="2178:75" pos:end="2178:75"><name pos:start="2178:75" pos:end="2178:75">i</name></expr>]</index></name><operator pos:start="2178:77" pos:end="2178:78">-&gt;</operator><name pos:start="2178:79" pos:end="2178:96">device_description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

  <label pos:start="2181:3" pos:end="2181:7"><name pos:start="2181:3" pos:end="2181:6">fail</name>:</label>
    <expr_stmt pos:start="2182:5" pos:end="2182:45"><expr pos:start="2182:5" pos:end="2182:44"><call pos:start="2182:5" pos:end="2182:44"><name pos:start="2182:5" pos:end="2182:30">avdevice_free_list_devices</name><argument_list pos:start="2182:31" pos:end="2182:44">(<argument pos:start="2182:32" pos:end="2182:43"><expr pos:start="2182:32" pos:end="2182:43"><operator pos:start="2182:32" pos:end="2182:32">&amp;</operator><name pos:start="2182:33" pos:end="2182:43">device_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="2183:5" pos:end="2183:15">return <expr pos:start="2183:12" pos:end="2183:14"><name pos:start="2183:12" pos:end="2183:14">ret</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="2186:1" pos:end="2206:1"><type pos:start="2186:1" pos:end="2186:10"><specifier pos:start="2186:1" pos:end="2186:6">static</specifier> <name pos:start="2186:8" pos:end="2186:10">int</name></type> <name pos:start="2186:12" pos:end="2186:39">show_sinks_sources_parse_arg</name><parameter_list pos:start="2186:40" pos:end="2186:89">(<parameter pos:start="2186:41" pos:end="2186:55"><decl pos:start="2186:41" pos:end="2186:55"><type pos:start="2186:41" pos:end="2186:55"><specifier pos:start="2186:41" pos:end="2186:45">const</specifier> <name pos:start="2186:47" pos:end="2186:50">char</name> <modifier pos:start="2186:52" pos:end="2186:52">*</modifier></type><name pos:start="2186:53" pos:end="2186:55">arg</name></decl></parameter>, <parameter pos:start="2186:58" pos:end="2186:67"><decl pos:start="2186:58" pos:end="2186:67"><type pos:start="2186:58" pos:end="2186:67"><name pos:start="2186:58" pos:end="2186:61">char</name> <modifier pos:start="2186:63" pos:end="2186:63">*</modifier><modifier pos:start="2186:64" pos:end="2186:64">*</modifier></type><name pos:start="2186:65" pos:end="2186:67">dev</name></decl></parameter>, <parameter pos:start="2186:70" pos:end="2186:88"><decl pos:start="2186:70" pos:end="2186:88"><type pos:start="2186:70" pos:end="2186:88"><name pos:start="2186:70" pos:end="2186:81">AVDictionary</name> <modifier pos:start="2186:83" pos:end="2186:83">*</modifier><modifier pos:start="2186:84" pos:end="2186:84">*</modifier></type><name pos:start="2186:85" pos:end="2186:88">opts</name></decl></parameter>)</parameter_list>
<block pos:start="2187:1" pos:end="2206:1">{<block_content pos:start="2188:5" pos:end="2205:13">
    <decl_stmt pos:start="2188:5" pos:end="2188:12"><decl pos:start="2188:5" pos:end="2188:11"><type pos:start="2188:5" pos:end="2188:7"><name pos:start="2188:5" pos:end="2188:7">int</name></type> <name pos:start="2188:9" pos:end="2188:11">ret</name></decl>;</decl_stmt>
    <if_stmt pos:start="2189:5" pos:end="2204:90"><if pos:start="2189:5" pos:end="2202:5">if <condition pos:start="2189:8" pos:end="2189:12">(<expr pos:start="2189:9" pos:end="2189:11"><name pos:start="2189:9" pos:end="2189:11">arg</name></expr>)</condition> <block pos:start="2189:14" pos:end="2202:5">{<block_content pos:start="2190:9" pos:end="2201:9">
        <decl_stmt pos:start="2190:9" pos:end="2190:30"><decl pos:start="2190:9" pos:end="2190:29"><type pos:start="2190:9" pos:end="2190:14"><name pos:start="2190:9" pos:end="2190:12">char</name> <modifier pos:start="2190:14" pos:end="2190:14">*</modifier></type><name pos:start="2190:15" pos:end="2190:22">opts_str</name> <init pos:start="2190:24" pos:end="2190:29">= <expr pos:start="2190:26" pos:end="2190:29"><name pos:start="2190:26" pos:end="2190:29">NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="2191:9" pos:end="2191:32"><expr pos:start="2191:9" pos:end="2191:31"><call pos:start="2191:9" pos:end="2191:31"><name pos:start="2191:9" pos:end="2191:18">av_assert0</name><argument_list pos:start="2191:19" pos:end="2191:31">(<argument pos:start="2191:20" pos:end="2191:30"><expr pos:start="2191:20" pos:end="2191:30"><name pos:start="2191:20" pos:end="2191:22">dev</name> <operator pos:start="2191:24" pos:end="2191:25">&amp;&amp;</operator> <name pos:start="2191:27" pos:end="2191:30">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2192:9" pos:end="2192:30"><expr pos:start="2192:9" pos:end="2192:29"><operator pos:start="2192:9" pos:end="2192:9">*</operator><name pos:start="2192:10" pos:end="2192:12">dev</name> <operator pos:start="2192:14" pos:end="2192:14">=</operator> <call pos:start="2192:16" pos:end="2192:29"><name pos:start="2192:16" pos:end="2192:24">av_strdup</name><argument_list pos:start="2192:25" pos:end="2192:29">(<argument pos:start="2192:26" pos:end="2192:28"><expr pos:start="2192:26" pos:end="2192:28"><name pos:start="2192:26" pos:end="2192:28">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2193:9" pos:end="2194:35"><if pos:start="2193:9" pos:end="2194:35">if <condition pos:start="2193:12" pos:end="2193:18">(<expr pos:start="2193:13" pos:end="2193:17"><operator pos:start="2193:13" pos:end="2193:13">!</operator><operator pos:start="2193:14" pos:end="2193:14">*</operator><name pos:start="2193:15" pos:end="2193:17">dev</name></expr>)</condition><block type="pseudo" pos:start="2194:13" pos:end="2194:35"><block_content pos:start="2194:13" pos:end="2194:35">
            <return pos:start="2194:13" pos:end="2194:35">return <expr pos:start="2194:20" pos:end="2194:34"><call pos:start="2194:20" pos:end="2194:34"><name pos:start="2194:20" pos:end="2194:26">AVERROR</name><argument_list pos:start="2194:27" pos:end="2194:34">(<argument pos:start="2194:28" pos:end="2194:33"><expr pos:start="2194:28" pos:end="2194:33"><name pos:start="2194:28" pos:end="2194:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt pos:start="2195:9" pos:end="2201:9"><if pos:start="2195:9" pos:end="2201:9">if <condition pos:start="2195:12" pos:end="2195:43">(<expr pos:start="2195:13" pos:end="2195:42"><operator pos:start="2195:13" pos:end="2195:13">(</operator><name pos:start="2195:14" pos:end="2195:21">opts_str</name> <operator pos:start="2195:23" pos:end="2195:23">=</operator> <call pos:start="2195:25" pos:end="2195:41"><name pos:start="2195:25" pos:end="2195:30">strchr</name><argument_list pos:start="2195:31" pos:end="2195:41">(<argument pos:start="2195:32" pos:end="2195:35"><expr pos:start="2195:32" pos:end="2195:35"><operator pos:start="2195:32" pos:end="2195:32">*</operator><name pos:start="2195:33" pos:end="2195:35">dev</name></expr></argument>, <argument pos:start="2195:38" pos:end="2195:40"><expr pos:start="2195:38" pos:end="2195:40"><literal type="char" pos:start="2195:38" pos:end="2195:40">','</literal></expr></argument>)</argument_list></call><operator pos:start="2195:42" pos:end="2195:42">)</operator></expr>)</condition> <block pos:start="2195:45" pos:end="2201:9">{<block_content pos:start="2196:13" pos:end="2200:13">
            <expr_stmt pos:start="2196:13" pos:end="2196:33"><expr pos:start="2196:13" pos:end="2196:32"><operator pos:start="2196:13" pos:end="2196:13">*</operator><operator pos:start="2196:14" pos:end="2196:14">(</operator><name pos:start="2196:15" pos:end="2196:22">opts_str</name><operator pos:start="2196:23" pos:end="2196:24">++</operator><operator pos:start="2196:25" pos:end="2196:25">)</operator> <operator pos:start="2196:27" pos:end="2196:27">=</operator> <literal type="char" pos:start="2196:29" pos:end="2196:32">'\0'</literal></expr>;</expr_stmt>
            <if_stmt pos:start="2197:13" pos:end="2200:13"><if pos:start="2197:13" pos:end="2200:13">if <condition pos:start="2197:16" pos:end="2197:95">(<expr pos:start="2197:17" pos:end="2197:94"><name pos:start="2197:17" pos:end="2197:27"><name pos:start="2197:17" pos:end="2197:24">opts_str</name><index pos:start="2197:25" pos:end="2197:27">[<expr pos:start="2197:26" pos:end="2197:26"><literal type="number" pos:start="2197:26" pos:end="2197:26">0</literal></expr>]</index></name> <operator pos:start="2197:29" pos:end="2197:30">&amp;&amp;</operator> <operator pos:start="2197:32" pos:end="2197:32">(</operator><operator pos:start="2197:33" pos:end="2197:33">(</operator><name pos:start="2197:34" pos:end="2197:36">ret</name> <operator pos:start="2197:38" pos:end="2197:38">=</operator> <call pos:start="2197:40" pos:end="2197:88"><name pos:start="2197:40" pos:end="2197:59">av_dict_parse_string</name><argument_list pos:start="2197:60" pos:end="2197:88">(<argument pos:start="2197:61" pos:end="2197:64"><expr pos:start="2197:61" pos:end="2197:64"><name pos:start="2197:61" pos:end="2197:64">opts</name></expr></argument>, <argument pos:start="2197:67" pos:end="2197:74"><expr pos:start="2197:67" pos:end="2197:74"><name pos:start="2197:67" pos:end="2197:74">opts_str</name></expr></argument>, <argument pos:start="2197:77" pos:end="2197:79"><expr pos:start="2197:77" pos:end="2197:79"><literal type="string" pos:start="2197:77" pos:end="2197:79">"="</literal></expr></argument>, <argument pos:start="2197:82" pos:end="2197:84"><expr pos:start="2197:82" pos:end="2197:84"><literal type="string" pos:start="2197:82" pos:end="2197:84">":"</literal></expr></argument>, <argument pos:start="2197:87" pos:end="2197:87"><expr pos:start="2197:87" pos:end="2197:87"><literal type="number" pos:start="2197:87" pos:end="2197:87">0</literal></expr></argument>)</argument_list></call><operator pos:start="2197:89" pos:end="2197:89">)</operator> <operator pos:start="2197:91" pos:end="2197:91">&lt;</operator> <literal type="number" pos:start="2197:93" pos:end="2197:93">0</literal><operator pos:start="2197:94" pos:end="2197:94">)</operator></expr>)</condition> <block pos:start="2197:97" pos:end="2200:13">{<block_content pos:start="2198:17" pos:end="2199:27">
                <expr_stmt pos:start="2198:17" pos:end="2198:30"><expr pos:start="2198:17" pos:end="2198:29"><call pos:start="2198:17" pos:end="2198:29"><name pos:start="2198:17" pos:end="2198:24">av_freep</name><argument_list pos:start="2198:25" pos:end="2198:29">(<argument pos:start="2198:26" pos:end="2198:28"><expr pos:start="2198:26" pos:end="2198:28"><name pos:start="2198:26" pos:end="2198:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="2199:17" pos:end="2199:27">return <expr pos:start="2199:24" pos:end="2199:26"><name pos:start="2199:24" pos:end="2199:26">ret</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else pos:start="2202:7" pos:end="2204:90">else<block type="pseudo" pos:start="2203:9" pos:end="2204:90"><block_content pos:start="2203:9" pos:end="2204:90">
        <expr_stmt pos:start="2203:9" pos:end="2204:90"><expr pos:start="2203:9" pos:end="2204:89"><call pos:start="2203:9" pos:end="2204:89"><name pos:start="2203:9" pos:end="2203:14">printf</name><argument_list pos:start="2203:15" pos:end="2204:89">(<argument pos:start="2203:16" pos:end="2204:88"><expr pos:start="2203:16" pos:end="2204:88"><literal type="string" pos:start="2203:16" pos:end="2203:49">"\nDevice name is not provided.\n"</literal>
                <literal type="string" pos:start="2204:17" pos:end="2204:88">"You can pass devicename[,opt1=val1[,opt2=val2...]] as an argument.\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return pos:start="2205:5" pos:end="2205:13">return <expr pos:start="2205:12" pos:end="2205:12"><literal type="number" pos:start="2205:12" pos:end="2205:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="2208:1" pos:end="2244:1"><type pos:start="2208:1" pos:end="2208:3"><name pos:start="2208:1" pos:end="2208:3">int</name></type> <name pos:start="2208:5" pos:end="2208:16">show_sources</name><parameter_list pos:start="2208:17" pos:end="2208:64">(<parameter pos:start="2208:18" pos:end="2208:29"><decl pos:start="2208:18" pos:end="2208:29"><type pos:start="2208:18" pos:end="2208:29"><name pos:start="2208:18" pos:end="2208:21">void</name> <modifier pos:start="2208:23" pos:end="2208:23">*</modifier></type><name pos:start="2208:24" pos:end="2208:29">optctx</name></decl></parameter>, <parameter pos:start="2208:32" pos:end="2208:46"><decl pos:start="2208:32" pos:end="2208:46"><type pos:start="2208:32" pos:end="2208:46"><specifier pos:start="2208:32" pos:end="2208:36">const</specifier> <name pos:start="2208:38" pos:end="2208:41">char</name> <modifier pos:start="2208:43" pos:end="2208:43">*</modifier></type><name pos:start="2208:44" pos:end="2208:46">opt</name></decl></parameter>, <parameter pos:start="2208:49" pos:end="2208:63"><decl pos:start="2208:49" pos:end="2208:63"><type pos:start="2208:49" pos:end="2208:63"><specifier pos:start="2208:49" pos:end="2208:53">const</specifier> <name pos:start="2208:55" pos:end="2208:58">char</name> <modifier pos:start="2208:60" pos:end="2208:60">*</modifier></type><name pos:start="2208:61" pos:end="2208:63">arg</name></decl></parameter>)</parameter_list>
<block pos:start="2209:1" pos:end="2244:1">{<block_content pos:start="2210:5" pos:end="2243:15">
    <decl_stmt pos:start="2210:5" pos:end="2210:30"><decl pos:start="2210:5" pos:end="2210:29"><type pos:start="2210:5" pos:end="2210:19"><name pos:start="2210:5" pos:end="2210:17">AVInputFormat</name> <modifier pos:start="2210:19" pos:end="2210:19">*</modifier></type><name pos:start="2210:20" pos:end="2210:22">fmt</name> <init pos:start="2210:24" pos:end="2210:29">= <expr pos:start="2210:26" pos:end="2210:29"><name pos:start="2210:26" pos:end="2210:29">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2211:5" pos:end="2211:21"><decl pos:start="2211:5" pos:end="2211:20"><type pos:start="2211:5" pos:end="2211:10"><name pos:start="2211:5" pos:end="2211:8">char</name> <modifier pos:start="2211:10" pos:end="2211:10">*</modifier></type><name pos:start="2211:11" pos:end="2211:13">dev</name> <init pos:start="2211:15" pos:end="2211:20">= <expr pos:start="2211:17" pos:end="2211:20"><name pos:start="2211:17" pos:end="2211:20">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2212:5" pos:end="2212:30"><decl pos:start="2212:5" pos:end="2212:29"><type pos:start="2212:5" pos:end="2212:18"><name pos:start="2212:5" pos:end="2212:16">AVDictionary</name> <modifier pos:start="2212:18" pos:end="2212:18">*</modifier></type><name pos:start="2212:19" pos:end="2212:22">opts</name> <init pos:start="2212:24" pos:end="2212:29">= <expr pos:start="2212:26" pos:end="2212:29"><name pos:start="2212:26" pos:end="2212:29">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2213:5" pos:end="2213:16"><decl pos:start="2213:5" pos:end="2213:15"><type pos:start="2213:5" pos:end="2213:7"><name pos:start="2213:5" pos:end="2213:7">int</name></type> <name pos:start="2213:9" pos:end="2213:11">ret</name> <init pos:start="2213:13" pos:end="2213:15">= <expr pos:start="2213:15" pos:end="2213:15"><literal type="number" pos:start="2213:15" pos:end="2213:15">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2214:5" pos:end="2214:41"><decl pos:start="2214:5" pos:end="2214:40"><type pos:start="2214:5" pos:end="2214:7"><name pos:start="2214:5" pos:end="2214:7">int</name></type> <name pos:start="2214:9" pos:end="2214:19">error_level</name> <init pos:start="2214:21" pos:end="2214:40">= <expr pos:start="2214:23" pos:end="2214:40"><call pos:start="2214:23" pos:end="2214:40"><name pos:start="2214:23" pos:end="2214:38">av_log_get_level</name><argument_list pos:start="2214:39" pos:end="2214:40">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="2216:5" pos:end="2216:35"><expr pos:start="2216:5" pos:end="2216:34"><call pos:start="2216:5" pos:end="2216:34"><name pos:start="2216:5" pos:end="2216:20">av_log_set_level</name><argument_list pos:start="2216:21" pos:end="2216:34">(<argument pos:start="2216:22" pos:end="2216:33"><expr pos:start="2216:22" pos:end="2216:33"><name pos:start="2216:22" pos:end="2216:33">AV_LOG_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="2218:5" pos:end="2219:18"><if pos:start="2218:5" pos:end="2219:18">if <condition pos:start="2218:8" pos:end="2218:67">(<expr pos:start="2218:9" pos:end="2218:66"><operator pos:start="2218:9" pos:end="2218:9">(</operator><name pos:start="2218:10" pos:end="2218:12">ret</name> <operator pos:start="2218:14" pos:end="2218:14">=</operator> <call pos:start="2218:16" pos:end="2218:61"><name pos:start="2218:16" pos:end="2218:43">show_sinks_sources_parse_arg</name><argument_list pos:start="2218:44" pos:end="2218:61">(<argument pos:start="2218:45" pos:end="2218:47"><expr pos:start="2218:45" pos:end="2218:47"><name pos:start="2218:45" pos:end="2218:47">arg</name></expr></argument>, <argument pos:start="2218:50" pos:end="2218:53"><expr pos:start="2218:50" pos:end="2218:53"><operator pos:start="2218:50" pos:end="2218:50">&amp;</operator><name pos:start="2218:51" pos:end="2218:53">dev</name></expr></argument>, <argument pos:start="2218:56" pos:end="2218:60"><expr pos:start="2218:56" pos:end="2218:60"><operator pos:start="2218:56" pos:end="2218:56">&amp;</operator><name pos:start="2218:57" pos:end="2218:60">opts</name></expr></argument>)</argument_list></call><operator pos:start="2218:62" pos:end="2218:62">)</operator> <operator pos:start="2218:64" pos:end="2218:64">&lt;</operator> <literal type="number" pos:start="2218:66" pos:end="2218:66">0</literal></expr>)</condition><block type="pseudo" pos:start="2219:9" pos:end="2219:18"><block_content pos:start="2219:9" pos:end="2219:18">
        <goto pos:start="2219:9" pos:end="2219:18">goto <name pos:start="2219:14" pos:end="2219:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <do pos:start="2221:5" pos:end="2230:18">do <block pos:start="2221:8" pos:end="2230:5">{<block_content pos:start="2222:9" pos:end="2229:9">
        <expr_stmt pos:start="2222:9" pos:end="2222:46"><expr pos:start="2222:9" pos:end="2222:45"><name pos:start="2222:9" pos:end="2222:11">fmt</name> <operator pos:start="2222:13" pos:end="2222:13">=</operator> <call pos:start="2222:15" pos:end="2222:45"><name pos:start="2222:15" pos:end="2222:40">av_input_audio_device_next</name><argument_list pos:start="2222:41" pos:end="2222:45">(<argument pos:start="2222:42" pos:end="2222:44"><expr pos:start="2222:42" pos:end="2222:44"><name pos:start="2222:42" pos:end="2222:44">fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2223:9" pos:end="2229:9"><if pos:start="2223:9" pos:end="2229:9">if <condition pos:start="2223:12" pos:end="2223:16">(<expr pos:start="2223:13" pos:end="2223:15"><name pos:start="2223:13" pos:end="2223:15">fmt</name></expr>)</condition> <block pos:start="2223:18" pos:end="2229:9">{<block_content pos:start="2224:13" pos:end="2228:44">
            <if_stmt pos:start="2224:13" pos:end="2225:25"><if pos:start="2224:13" pos:end="2225:25">if <condition pos:start="2224:16" pos:end="2224:44">(<expr pos:start="2224:17" pos:end="2224:43"><operator pos:start="2224:17" pos:end="2224:17">!</operator><call pos:start="2224:18" pos:end="2224:43"><name pos:start="2224:18" pos:end="2224:23">strcmp</name><argument_list pos:start="2224:24" pos:end="2224:43">(<argument pos:start="2224:25" pos:end="2224:33"><expr pos:start="2224:25" pos:end="2224:33"><name pos:start="2224:25" pos:end="2224:33"><name pos:start="2224:25" pos:end="2224:27">fmt</name><operator pos:start="2224:28" pos:end="2224:29">-&gt;</operator><name pos:start="2224:30" pos:end="2224:33">name</name></name></expr></argument>, <argument pos:start="2224:36" pos:end="2224:42"><expr pos:start="2224:36" pos:end="2224:42"><literal type="string" pos:start="2224:36" pos:end="2224:42">"lavfi"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2225:17" pos:end="2225:25"><block_content pos:start="2225:17" pos:end="2225:25">
                <continue pos:start="2225:17" pos:end="2225:25">continue;</continue></block_content></block></if></if_stmt> <comment type="line" pos:start="2225:27" pos:end="2225:57">//it's pointless to probe lavfi</comment>
            <if_stmt pos:start="2226:13" pos:end="2227:25"><if pos:start="2226:13" pos:end="2227:25">if <condition pos:start="2226:16" pos:end="2226:54">(<expr pos:start="2226:17" pos:end="2226:53"><name pos:start="2226:17" pos:end="2226:19">dev</name> <operator pos:start="2226:21" pos:end="2226:22">&amp;&amp;</operator> <operator pos:start="2226:24" pos:end="2226:24">!</operator><call pos:start="2226:25" pos:end="2226:53"><name pos:start="2226:25" pos:end="2226:37">av_match_name</name><argument_list pos:start="2226:38" pos:end="2226:53">(<argument pos:start="2226:39" pos:end="2226:41"><expr pos:start="2226:39" pos:end="2226:41"><name pos:start="2226:39" pos:end="2226:41">dev</name></expr></argument>, <argument pos:start="2226:44" pos:end="2226:52"><expr pos:start="2226:44" pos:end="2226:52"><name pos:start="2226:44" pos:end="2226:52"><name pos:start="2226:44" pos:end="2226:46">fmt</name><operator pos:start="2226:47" pos:end="2226:48">-&gt;</operator><name pos:start="2226:49" pos:end="2226:52">name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2227:17" pos:end="2227:25"><block_content pos:start="2227:17" pos:end="2227:25">
                <continue pos:start="2227:17" pos:end="2227:25">continue;</continue></block_content></block></if></if_stmt>
            <expr_stmt pos:start="2228:13" pos:end="2228:44"><expr pos:start="2228:13" pos:end="2228:43"><call pos:start="2228:13" pos:end="2228:43"><name pos:start="2228:13" pos:end="2228:32">print_device_sources</name><argument_list pos:start="2228:33" pos:end="2228:43">(<argument pos:start="2228:34" pos:end="2228:36"><expr pos:start="2228:34" pos:end="2228:36"><name pos:start="2228:34" pos:end="2228:36">fmt</name></expr></argument>, <argument pos:start="2228:39" pos:end="2228:42"><expr pos:start="2228:39" pos:end="2228:42"><name pos:start="2228:39" pos:end="2228:42">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block> while <condition pos:start="2230:13" pos:end="2230:17">(<expr pos:start="2230:14" pos:end="2230:16"><name pos:start="2230:14" pos:end="2230:16">fmt</name></expr>)</condition>;</do>
    <do pos:start="2231:5" pos:end="2238:18">do <block pos:start="2231:8" pos:end="2238:5">{<block_content pos:start="2232:9" pos:end="2237:9">
        <expr_stmt pos:start="2232:9" pos:end="2232:46"><expr pos:start="2232:9" pos:end="2232:45"><name pos:start="2232:9" pos:end="2232:11">fmt</name> <operator pos:start="2232:13" pos:end="2232:13">=</operator> <call pos:start="2232:15" pos:end="2232:45"><name pos:start="2232:15" pos:end="2232:40">av_input_video_device_next</name><argument_list pos:start="2232:41" pos:end="2232:45">(<argument pos:start="2232:42" pos:end="2232:44"><expr pos:start="2232:42" pos:end="2232:44"><name pos:start="2232:42" pos:end="2232:44">fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2233:9" pos:end="2237:9"><if pos:start="2233:9" pos:end="2237:9">if <condition pos:start="2233:12" pos:end="2233:16">(<expr pos:start="2233:13" pos:end="2233:15"><name pos:start="2233:13" pos:end="2233:15">fmt</name></expr>)</condition> <block pos:start="2233:18" pos:end="2237:9">{<block_content pos:start="2234:13" pos:end="2236:44">
            <if_stmt pos:start="2234:13" pos:end="2235:25"><if pos:start="2234:13" pos:end="2235:25">if <condition pos:start="2234:16" pos:end="2234:54">(<expr pos:start="2234:17" pos:end="2234:53"><name pos:start="2234:17" pos:end="2234:19">dev</name> <operator pos:start="2234:21" pos:end="2234:22">&amp;&amp;</operator> <operator pos:start="2234:24" pos:end="2234:24">!</operator><call pos:start="2234:25" pos:end="2234:53"><name pos:start="2234:25" pos:end="2234:37">av_match_name</name><argument_list pos:start="2234:38" pos:end="2234:53">(<argument pos:start="2234:39" pos:end="2234:41"><expr pos:start="2234:39" pos:end="2234:41"><name pos:start="2234:39" pos:end="2234:41">dev</name></expr></argument>, <argument pos:start="2234:44" pos:end="2234:52"><expr pos:start="2234:44" pos:end="2234:52"><name pos:start="2234:44" pos:end="2234:52"><name pos:start="2234:44" pos:end="2234:46">fmt</name><operator pos:start="2234:47" pos:end="2234:48">-&gt;</operator><name pos:start="2234:49" pos:end="2234:52">name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2235:17" pos:end="2235:25"><block_content pos:start="2235:17" pos:end="2235:25">
                <continue pos:start="2235:17" pos:end="2235:25">continue;</continue></block_content></block></if></if_stmt>
            <expr_stmt pos:start="2236:13" pos:end="2236:44"><expr pos:start="2236:13" pos:end="2236:43"><call pos:start="2236:13" pos:end="2236:43"><name pos:start="2236:13" pos:end="2236:32">print_device_sources</name><argument_list pos:start="2236:33" pos:end="2236:43">(<argument pos:start="2236:34" pos:end="2236:36"><expr pos:start="2236:34" pos:end="2236:36"><name pos:start="2236:34" pos:end="2236:36">fmt</name></expr></argument>, <argument pos:start="2236:39" pos:end="2236:42"><expr pos:start="2236:39" pos:end="2236:42"><name pos:start="2236:39" pos:end="2236:42">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block> while <condition pos:start="2238:13" pos:end="2238:17">(<expr pos:start="2238:14" pos:end="2238:16"><name pos:start="2238:14" pos:end="2238:16">fmt</name></expr>)</condition>;</do>
  <label pos:start="2239:3" pos:end="2239:7"><name pos:start="2239:3" pos:end="2239:6">fail</name>:</label>
    <expr_stmt pos:start="2240:5" pos:end="2240:24"><expr pos:start="2240:5" pos:end="2240:23"><call pos:start="2240:5" pos:end="2240:23"><name pos:start="2240:5" pos:end="2240:16">av_dict_free</name><argument_list pos:start="2240:17" pos:end="2240:23">(<argument pos:start="2240:18" pos:end="2240:22"><expr pos:start="2240:18" pos:end="2240:22"><operator pos:start="2240:18" pos:end="2240:18">&amp;</operator><name pos:start="2240:19" pos:end="2240:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2241:5" pos:end="2241:17"><expr pos:start="2241:5" pos:end="2241:16"><call pos:start="2241:5" pos:end="2241:16"><name pos:start="2241:5" pos:end="2241:11">av_free</name><argument_list pos:start="2241:12" pos:end="2241:16">(<argument pos:start="2241:13" pos:end="2241:15"><expr pos:start="2241:13" pos:end="2241:15"><name pos:start="2241:13" pos:end="2241:15">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2242:5" pos:end="2242:34"><expr pos:start="2242:5" pos:end="2242:33"><call pos:start="2242:5" pos:end="2242:33"><name pos:start="2242:5" pos:end="2242:20">av_log_set_level</name><argument_list pos:start="2242:21" pos:end="2242:33">(<argument pos:start="2242:22" pos:end="2242:32"><expr pos:start="2242:22" pos:end="2242:32"><name pos:start="2242:22" pos:end="2242:32">error_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="2243:5" pos:end="2243:15">return <expr pos:start="2243:12" pos:end="2243:14"><name pos:start="2243:12" pos:end="2243:14">ret</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="2246:1" pos:end="2283:0"><type pos:start="2246:1" pos:end="2246:3"><name pos:start="2246:1" pos:end="2246:3">int</name></type> <name pos:start="2246:5" pos:end="2246:14">show_sinks</name><parameter_list pos:start="2246:15" pos:end="2246:62">(<parameter pos:start="2246:16" pos:end="2246:27"><decl pos:start="2246:16" pos:end="2246:27"><type pos:start="2246:16" pos:end="2246:27"><name pos:start="2246:16" pos:end="2246:19">void</name> <modifier pos:start="2246:21" pos:end="2246:21">*</modifier></type><name pos:start="2246:22" pos:end="2246:27">optctx</name></decl></parameter>, <parameter pos:start="2246:30" pos:end="2246:44"><decl pos:start="2246:30" pos:end="2246:44"><type pos:start="2246:30" pos:end="2246:44"><specifier pos:start="2246:30" pos:end="2246:34">const</specifier> <name pos:start="2246:36" pos:end="2246:39">char</name> <modifier pos:start="2246:41" pos:end="2246:41">*</modifier></type><name pos:start="2246:42" pos:end="2246:44">opt</name></decl></parameter>, <parameter pos:start="2246:47" pos:end="2246:61"><decl pos:start="2246:47" pos:end="2246:61"><type pos:start="2246:47" pos:end="2246:61"><specifier pos:start="2246:47" pos:end="2246:51">const</specifier> <name pos:start="2246:53" pos:end="2246:56">char</name> <modifier pos:start="2246:58" pos:end="2246:58">*</modifier></type><name pos:start="2246:59" pos:end="2246:61">arg</name></decl></parameter>)</parameter_list>
<block pos:start="2247:1" pos:end="2283:0">{<block_content pos:start="2248:5" pos:end="2279:15">
    <decl_stmt pos:start="2248:5" pos:end="2248:31"><decl pos:start="2248:5" pos:end="2248:30"><type pos:start="2248:5" pos:end="2248:20"><name pos:start="2248:5" pos:end="2248:18">AVOutputFormat</name> <modifier pos:start="2248:20" pos:end="2248:20">*</modifier></type><name pos:start="2248:21" pos:end="2248:23">fmt</name> <init pos:start="2248:25" pos:end="2248:30">= <expr pos:start="2248:27" pos:end="2248:30"><name pos:start="2248:27" pos:end="2248:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2249:5" pos:end="2249:21"><decl pos:start="2249:5" pos:end="2249:20"><type pos:start="2249:5" pos:end="2249:10"><name pos:start="2249:5" pos:end="2249:8">char</name> <modifier pos:start="2249:10" pos:end="2249:10">*</modifier></type><name pos:start="2249:11" pos:end="2249:13">dev</name> <init pos:start="2249:15" pos:end="2249:20">= <expr pos:start="2249:17" pos:end="2249:20"><name pos:start="2249:17" pos:end="2249:20">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2250:5" pos:end="2250:30"><decl pos:start="2250:5" pos:end="2250:29"><type pos:start="2250:5" pos:end="2250:18"><name pos:start="2250:5" pos:end="2250:16">AVDictionary</name> <modifier pos:start="2250:18" pos:end="2250:18">*</modifier></type><name pos:start="2250:19" pos:end="2250:22">opts</name> <init pos:start="2250:24" pos:end="2250:29">= <expr pos:start="2250:26" pos:end="2250:29"><name pos:start="2250:26" pos:end="2250:29">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2251:5" pos:end="2251:16"><decl pos:start="2251:5" pos:end="2251:15"><type pos:start="2251:5" pos:end="2251:7"><name pos:start="2251:5" pos:end="2251:7">int</name></type> <name pos:start="2251:9" pos:end="2251:11">ret</name> <init pos:start="2251:13" pos:end="2251:15">= <expr pos:start="2251:15" pos:end="2251:15"><literal type="number" pos:start="2251:15" pos:end="2251:15">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2252:5" pos:end="2252:41"><decl pos:start="2252:5" pos:end="2252:40"><type pos:start="2252:5" pos:end="2252:7"><name pos:start="2252:5" pos:end="2252:7">int</name></type> <name pos:start="2252:9" pos:end="2252:19">error_level</name> <init pos:start="2252:21" pos:end="2252:40">= <expr pos:start="2252:23" pos:end="2252:40"><call pos:start="2252:23" pos:end="2252:40"><name pos:start="2252:23" pos:end="2252:38">av_log_get_level</name><argument_list pos:start="2252:39" pos:end="2252:40">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="2254:5" pos:end="2254:35"><expr pos:start="2254:5" pos:end="2254:34"><call pos:start="2254:5" pos:end="2254:34"><name pos:start="2254:5" pos:end="2254:20">av_log_set_level</name><argument_list pos:start="2254:21" pos:end="2254:34">(<argument pos:start="2254:22" pos:end="2254:33"><expr pos:start="2254:22" pos:end="2254:33"><name pos:start="2254:22" pos:end="2254:33">AV_LOG_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="2256:5" pos:end="2257:18"><if pos:start="2256:5" pos:end="2257:18">if <condition pos:start="2256:8" pos:end="2256:67">(<expr pos:start="2256:9" pos:end="2256:66"><operator pos:start="2256:9" pos:end="2256:9">(</operator><name pos:start="2256:10" pos:end="2256:12">ret</name> <operator pos:start="2256:14" pos:end="2256:14">=</operator> <call pos:start="2256:16" pos:end="2256:61"><name pos:start="2256:16" pos:end="2256:43">show_sinks_sources_parse_arg</name><argument_list pos:start="2256:44" pos:end="2256:61">(<argument pos:start="2256:45" pos:end="2256:47"><expr pos:start="2256:45" pos:end="2256:47"><name pos:start="2256:45" pos:end="2256:47">arg</name></expr></argument>, <argument pos:start="2256:50" pos:end="2256:53"><expr pos:start="2256:50" pos:end="2256:53"><operator pos:start="2256:50" pos:end="2256:50">&amp;</operator><name pos:start="2256:51" pos:end="2256:53">dev</name></expr></argument>, <argument pos:start="2256:56" pos:end="2256:60"><expr pos:start="2256:56" pos:end="2256:60"><operator pos:start="2256:56" pos:end="2256:56">&amp;</operator><name pos:start="2256:57" pos:end="2256:60">opts</name></expr></argument>)</argument_list></call><operator pos:start="2256:62" pos:end="2256:62">)</operator> <operator pos:start="2256:64" pos:end="2256:64">&lt;</operator> <literal type="number" pos:start="2256:66" pos:end="2256:66">0</literal></expr>)</condition><block type="pseudo" pos:start="2257:9" pos:end="2257:18"><block_content pos:start="2257:9" pos:end="2257:18">
        <goto pos:start="2257:9" pos:end="2257:18">goto <name pos:start="2257:14" pos:end="2257:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <do pos:start="2259:5" pos:end="2266:18">do <block pos:start="2259:8" pos:end="2266:5">{<block_content pos:start="2260:9" pos:end="2265:9">
        <expr_stmt pos:start="2260:9" pos:end="2260:47"><expr pos:start="2260:9" pos:end="2260:46"><name pos:start="2260:9" pos:end="2260:11">fmt</name> <operator pos:start="2260:13" pos:end="2260:13">=</operator> <call pos:start="2260:15" pos:end="2260:46"><name pos:start="2260:15" pos:end="2260:41">av_output_audio_device_next</name><argument_list pos:start="2260:42" pos:end="2260:46">(<argument pos:start="2260:43" pos:end="2260:45"><expr pos:start="2260:43" pos:end="2260:45"><name pos:start="2260:43" pos:end="2260:45">fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2261:9" pos:end="2265:9"><if pos:start="2261:9" pos:end="2265:9">if <condition pos:start="2261:12" pos:end="2261:16">(<expr pos:start="2261:13" pos:end="2261:15"><name pos:start="2261:13" pos:end="2261:15">fmt</name></expr>)</condition> <block pos:start="2261:18" pos:end="2265:9">{<block_content pos:start="2262:13" pos:end="2264:42">
            <if_stmt pos:start="2262:13" pos:end="2263:25"><if pos:start="2262:13" pos:end="2263:25">if <condition pos:start="2262:16" pos:end="2262:54">(<expr pos:start="2262:17" pos:end="2262:53"><name pos:start="2262:17" pos:end="2262:19">dev</name> <operator pos:start="2262:21" pos:end="2262:22">&amp;&amp;</operator> <operator pos:start="2262:24" pos:end="2262:24">!</operator><call pos:start="2262:25" pos:end="2262:53"><name pos:start="2262:25" pos:end="2262:37">av_match_name</name><argument_list pos:start="2262:38" pos:end="2262:53">(<argument pos:start="2262:39" pos:end="2262:41"><expr pos:start="2262:39" pos:end="2262:41"><name pos:start="2262:39" pos:end="2262:41">dev</name></expr></argument>, <argument pos:start="2262:44" pos:end="2262:52"><expr pos:start="2262:44" pos:end="2262:52"><name pos:start="2262:44" pos:end="2262:52"><name pos:start="2262:44" pos:end="2262:46">fmt</name><operator pos:start="2262:47" pos:end="2262:48">-&gt;</operator><name pos:start="2262:49" pos:end="2262:52">name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2263:17" pos:end="2263:25"><block_content pos:start="2263:17" pos:end="2263:25">
                <continue pos:start="2263:17" pos:end="2263:25">continue;</continue></block_content></block></if></if_stmt>
            <expr_stmt pos:start="2264:13" pos:end="2264:42"><expr pos:start="2264:13" pos:end="2264:41"><call pos:start="2264:13" pos:end="2264:41"><name pos:start="2264:13" pos:end="2264:30">print_device_sinks</name><argument_list pos:start="2264:31" pos:end="2264:41">(<argument pos:start="2264:32" pos:end="2264:34"><expr pos:start="2264:32" pos:end="2264:34"><name pos:start="2264:32" pos:end="2264:34">fmt</name></expr></argument>, <argument pos:start="2264:37" pos:end="2264:40"><expr pos:start="2264:37" pos:end="2264:40"><name pos:start="2264:37" pos:end="2264:40">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block> while <condition pos:start="2266:13" pos:end="2266:17">(<expr pos:start="2266:14" pos:end="2266:16"><name pos:start="2266:14" pos:end="2266:16">fmt</name></expr>)</condition>;</do>
    <do pos:start="2267:5" pos:end="2274:18">do <block pos:start="2267:8" pos:end="2274:5">{<block_content pos:start="2268:9" pos:end="2273:9">
        <expr_stmt pos:start="2268:9" pos:end="2268:47"><expr pos:start="2268:9" pos:end="2268:46"><name pos:start="2268:9" pos:end="2268:11">fmt</name> <operator pos:start="2268:13" pos:end="2268:13">=</operator> <call pos:start="2268:15" pos:end="2268:46"><name pos:start="2268:15" pos:end="2268:41">av_output_video_device_next</name><argument_list pos:start="2268:42" pos:end="2268:46">(<argument pos:start="2268:43" pos:end="2268:45"><expr pos:start="2268:43" pos:end="2268:45"><name pos:start="2268:43" pos:end="2268:45">fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2269:9" pos:end="2273:9"><if pos:start="2269:9" pos:end="2273:9">if <condition pos:start="2269:12" pos:end="2269:16">(<expr pos:start="2269:13" pos:end="2269:15"><name pos:start="2269:13" pos:end="2269:15">fmt</name></expr>)</condition> <block pos:start="2269:18" pos:end="2273:9">{<block_content pos:start="2270:13" pos:end="2272:42">
            <if_stmt pos:start="2270:13" pos:end="2271:25"><if pos:start="2270:13" pos:end="2271:25">if <condition pos:start="2270:16" pos:end="2270:54">(<expr pos:start="2270:17" pos:end="2270:53"><name pos:start="2270:17" pos:end="2270:19">dev</name> <operator pos:start="2270:21" pos:end="2270:22">&amp;&amp;</operator> <operator pos:start="2270:24" pos:end="2270:24">!</operator><call pos:start="2270:25" pos:end="2270:53"><name pos:start="2270:25" pos:end="2270:37">av_match_name</name><argument_list pos:start="2270:38" pos:end="2270:53">(<argument pos:start="2270:39" pos:end="2270:41"><expr pos:start="2270:39" pos:end="2270:41"><name pos:start="2270:39" pos:end="2270:41">dev</name></expr></argument>, <argument pos:start="2270:44" pos:end="2270:52"><expr pos:start="2270:44" pos:end="2270:52"><name pos:start="2270:44" pos:end="2270:52"><name pos:start="2270:44" pos:end="2270:46">fmt</name><operator pos:start="2270:47" pos:end="2270:48">-&gt;</operator><name pos:start="2270:49" pos:end="2270:52">name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2271:17" pos:end="2271:25"><block_content pos:start="2271:17" pos:end="2271:25">
                <continue pos:start="2271:17" pos:end="2271:25">continue;</continue></block_content></block></if></if_stmt>
            <expr_stmt pos:start="2272:13" pos:end="2272:42"><expr pos:start="2272:13" pos:end="2272:41"><call pos:start="2272:13" pos:end="2272:41"><name pos:start="2272:13" pos:end="2272:30">print_device_sinks</name><argument_list pos:start="2272:31" pos:end="2272:41">(<argument pos:start="2272:32" pos:end="2272:34"><expr pos:start="2272:32" pos:end="2272:34"><name pos:start="2272:32" pos:end="2272:34">fmt</name></expr></argument>, <argument pos:start="2272:37" pos:end="2272:40"><expr pos:start="2272:37" pos:end="2272:40"><name pos:start="2272:37" pos:end="2272:40">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block> while <condition pos:start="2274:13" pos:end="2274:17">(<expr pos:start="2274:14" pos:end="2274:16"><name pos:start="2274:14" pos:end="2274:16">fmt</name></expr>)</condition>;</do>
  <label pos:start="2275:3" pos:end="2275:7"><name pos:start="2275:3" pos:end="2275:6">fail</name>:</label>
    <expr_stmt pos:start="2276:5" pos:end="2276:24"><expr pos:start="2276:5" pos:end="2276:23"><call pos:start="2276:5" pos:end="2276:23"><name pos:start="2276:5" pos:end="2276:16">av_dict_free</name><argument_list pos:start="2276:17" pos:end="2276:23">(<argument pos:start="2276:18" pos:end="2276:22"><expr pos:start="2276:18" pos:end="2276:22"><operator pos:start="2276:18" pos:end="2276:18">&amp;</operator><name pos:start="2276:19" pos:end="2276:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2277:5" pos:end="2277:17"><expr pos:start="2277:5" pos:end="2277:16"><call pos:start="2277:5" pos:end="2277:16"><name pos:start="2277:5" pos:end="2277:11">av_free</name><argument_list pos:start="2277:12" pos:end="2277:16">(<argument pos:start="2277:13" pos:end="2277:15"><expr pos:start="2277:13" pos:end="2277:15"><name pos:start="2277:13" pos:end="2277:15">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2278:5" pos:end="2278:34"><expr pos:start="2278:5" pos:end="2278:33"><call pos:start="2278:5" pos:end="2278:33"><name pos:start="2278:5" pos:end="2278:20">av_log_set_level</name><argument_list pos:start="2278:21" pos:end="2278:33">(<argument pos:start="2278:22" pos:end="2278:32"><expr pos:start="2278:22" pos:end="2278:32"><name pos:start="2278:22" pos:end="2278:32">error_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="2279:5" pos:end="2279:15">return <expr pos:start="2279:12" pos:end="2279:14"><name pos:start="2279:12" pos:end="2279:14">ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif pos:start="2282:1" pos:end="2282:6">#<cpp:directive pos:start="2282:2" pos:end="2282:6">endif</cpp:directive></cpp:endif>
</unit>
