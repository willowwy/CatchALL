<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="program_file/output_data/ffserver2.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="19:3">/*
 * Copyright (c) 2000, 2001, 2002 Fabrice Bellard
 *
 * This file is part of FFmpeg.
 *
 * FFmpeg is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * FFmpeg is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with FFmpeg; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */</comment>

<comment type="block" format="doxygen" pos:start="21:1" pos:end="24:3">/**
 * @file
 * multiple format streaming server based on the FFmpeg libraries
 */</comment>

<cpp:include pos:start="26:1" pos:end="26:19">#<cpp:directive pos:start="26:2" pos:end="26:8">include</cpp:directive> <cpp:file pos:start="26:10" pos:end="26:19">"config.h"</cpp:file></cpp:include>
<cpp:if pos:start="27:1" pos:end="27:21">#<cpp:directive pos:start="27:2" pos:end="27:3">if</cpp:directive> <expr pos:start="27:5" pos:end="27:21"><operator pos:start="27:5" pos:end="27:5">!</operator><name pos:start="27:6" pos:end="27:21">HAVE_CLOSESOCKET</name></expr></cpp:if>
<cpp:define pos:start="28:1" pos:end="28:25">#<cpp:directive pos:start="28:2" pos:end="28:7">define</cpp:directive> <cpp:macro pos:start="28:9" pos:end="28:19"><name pos:start="28:9" pos:end="28:19">closesocket</name></cpp:macro> <cpp:value pos:start="28:21" pos:end="28:25">close</cpp:value></cpp:define>
<cpp:endif pos:start="29:1" pos:end="29:6">#<cpp:directive pos:start="29:2" pos:end="29:6">endif</cpp:directive></cpp:endif>
<cpp:include pos:start="30:1" pos:end="30:19">#<cpp:directive pos:start="30:2" pos:end="30:8">include</cpp:directive> <cpp:file pos:start="30:10" pos:end="30:19">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="31:1" pos:end="31:19">#<cpp:directive pos:start="31:2" pos:end="31:8">include</cpp:directive> <cpp:file pos:start="31:10" pos:end="31:19">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="32:1" pos:end="32:18">#<cpp:directive pos:start="32:2" pos:end="32:8">include</cpp:directive> <cpp:file pos:start="32:10" pos:end="32:18">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="33:1" pos:end="33:33">#<cpp:directive pos:start="33:2" pos:end="33:8">include</cpp:directive> <cpp:file pos:start="33:10" pos:end="33:33">"libavformat/avformat.h"</cpp:file></cpp:include>
<comment type="block" pos:start="34:1" pos:end="34:77">/* FIXME: those are internal headers, ffserver _really_ shouldn't use them */</comment>
<cpp:include pos:start="35:1" pos:end="35:33">#<cpp:directive pos:start="35:2" pos:end="35:8">include</cpp:directive> <cpp:file pos:start="35:10" pos:end="35:33">"libavformat/rtpproto.h"</cpp:file></cpp:include>
<cpp:include pos:start="36:1" pos:end="36:29">#<cpp:directive pos:start="36:2" pos:end="36:8">include</cpp:directive> <cpp:file pos:start="36:10" pos:end="36:29">"libavformat/rtsp.h"</cpp:file></cpp:include>
<cpp:include pos:start="37:1" pos:end="37:38">#<cpp:directive pos:start="37:2" pos:end="37:8">include</cpp:directive> <cpp:file pos:start="37:10" pos:end="37:38">"libavformat/avio_internal.h"</cpp:file></cpp:include>
<cpp:include pos:start="38:1" pos:end="38:33">#<cpp:directive pos:start="38:2" pos:end="38:8">include</cpp:directive> <cpp:file pos:start="38:10" pos:end="38:33">"libavformat/internal.h"</cpp:file></cpp:include>

<cpp:include pos:start="40:1" pos:end="40:31">#<cpp:directive pos:start="40:2" pos:end="40:8">include</cpp:directive> <cpp:file pos:start="40:10" pos:end="40:31">"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include pos:start="41:1" pos:end="41:31">#<cpp:directive pos:start="41:2" pos:end="41:8">include</cpp:directive> <cpp:file pos:start="41:10" pos:end="41:31">"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include pos:start="42:1" pos:end="42:26">#<cpp:directive pos:start="42:2" pos:end="42:8">include</cpp:directive> <cpp:file pos:start="42:10" pos:end="42:26">"libavutil/lfg.h"</cpp:file></cpp:include>
<cpp:include pos:start="43:1" pos:end="43:27">#<cpp:directive pos:start="43:2" pos:end="43:8">include</cpp:directive> <cpp:file pos:start="43:10" pos:end="43:27">"libavutil/dict.h"</cpp:file></cpp:include>
<cpp:include pos:start="44:1" pos:end="44:35">#<cpp:directive pos:start="44:2" pos:end="44:8">include</cpp:directive> <cpp:file pos:start="44:10" pos:end="44:35">"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include pos:start="45:1" pos:end="45:34">#<cpp:directive pos:start="45:2" pos:end="45:8">include</cpp:directive> <cpp:file pos:start="45:10" pos:end="45:34">"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include pos:start="46:1" pos:end="46:34">#<cpp:directive pos:start="46:2" pos:end="46:8">include</cpp:directive> <cpp:file pos:start="46:10" pos:end="46:34">"libavutil/random_seed.h"</cpp:file></cpp:include>
<cpp:include pos:start="47:1" pos:end="47:31">#<cpp:directive pos:start="47:2" pos:end="47:8">include</cpp:directive> <cpp:file pos:start="47:10" pos:end="47:31">"libavutil/rational.h"</cpp:file></cpp:include>
<cpp:include pos:start="48:1" pos:end="48:33">#<cpp:directive pos:start="48:2" pos:end="48:8">include</cpp:directive> <cpp:file pos:start="48:10" pos:end="48:33">"libavutil/parseutils.h"</cpp:file></cpp:include>
<cpp:include pos:start="49:1" pos:end="49:26">#<cpp:directive pos:start="49:2" pos:end="49:8">include</cpp:directive> <cpp:file pos:start="49:10" pos:end="49:26">"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include pos:start="50:1" pos:end="50:27">#<cpp:directive pos:start="50:2" pos:end="50:8">include</cpp:directive> <cpp:file pos:start="50:10" pos:end="50:27">"libavutil/time.h"</cpp:file></cpp:include>

<cpp:include pos:start="52:1" pos:end="52:19">#<cpp:directive pos:start="52:2" pos:end="52:8">include</cpp:directive> <cpp:file pos:start="52:10" pos:end="52:19">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:if pos:start="53:1" pos:end="53:17">#<cpp:directive pos:start="53:2" pos:end="53:3">if</cpp:directive> <expr pos:start="53:5" pos:end="53:17"><name pos:start="53:5" pos:end="53:17">HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include pos:start="54:1" pos:end="54:19">#<cpp:directive pos:start="54:2" pos:end="54:8">include</cpp:directive> <cpp:file pos:start="54:10" pos:end="54:19">&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:start="55:1" pos:end="55:6">#<cpp:directive pos:start="55:2" pos:end="55:6">endif</cpp:directive></cpp:endif>
<cpp:include pos:start="56:1" pos:end="56:18">#<cpp:directive pos:start="56:2" pos:end="56:8">include</cpp:directive> <cpp:file pos:start="56:10" pos:end="56:18">&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="57:1" pos:end="57:22">#<cpp:directive pos:start="57:2" pos:end="57:8">include</cpp:directive> <cpp:file pos:start="57:10" pos:end="57:22">&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:if pos:start="58:1" pos:end="58:15">#<cpp:directive pos:start="58:2" pos:end="58:3">if</cpp:directive> <expr pos:start="58:5" pos:end="58:15"><name pos:start="58:5" pos:end="58:15">HAVE_POLL_H</name></expr></cpp:if>
<cpp:include pos:start="59:1" pos:end="59:17">#<cpp:directive pos:start="59:2" pos:end="59:8">include</cpp:directive> <cpp:file pos:start="59:10" pos:end="59:17">&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:start="60:1" pos:end="60:6">#<cpp:directive pos:start="60:2" pos:end="60:6">endif</cpp:directive></cpp:endif>
<cpp:include pos:start="61:1" pos:end="61:18">#<cpp:directive pos:start="61:2" pos:end="61:8">include</cpp:directive> <cpp:file pos:start="61:10" pos:end="61:18">&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="62:1" pos:end="62:17">#<cpp:directive pos:start="62:2" pos:end="62:8">include</cpp:directive> <cpp:file pos:start="62:10" pos:end="62:17">&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="63:1" pos:end="63:21">#<cpp:directive pos:start="63:2" pos:end="63:8">include</cpp:directive> <cpp:file pos:start="63:10" pos:end="63:21">&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="64:1" pos:end="64:19">#<cpp:directive pos:start="64:2" pos:end="64:8">include</cpp:directive> <cpp:file pos:start="64:10" pos:end="64:19">&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:include pos:start="66:1" pos:end="66:21">#<cpp:directive pos:start="66:2" pos:end="66:8">include</cpp:directive> <cpp:file pos:start="66:10" pos:end="66:21">"cmdutils.h"</cpp:file></cpp:include>
<cpp:include pos:start="67:1" pos:end="67:28">#<cpp:directive pos:start="67:2" pos:end="67:8">include</cpp:directive> <cpp:file pos:start="67:10" pos:end="67:28">"ffserver_config.h"</cpp:file></cpp:include>

<cpp:define pos:start="69:1" pos:end="69:24">#<cpp:directive pos:start="69:2" pos:end="69:7">define</cpp:directive> <cpp:macro pos:start="69:9" pos:end="69:19"><name pos:start="69:9" pos:end="69:19">PATH_LENGTH</name></cpp:macro> <cpp:value pos:start="69:21" pos:end="69:24">1024</cpp:value></cpp:define>

<decl_stmt pos:start="71:1" pos:end="71:39"><decl pos:start="71:1" pos:end="71:38"><type pos:start="71:1" pos:end="71:10"><specifier pos:start="71:1" pos:end="71:5">const</specifier> <name pos:start="71:7" pos:end="71:10">char</name></type> <name pos:start="71:12" pos:end="71:25"><name pos:start="71:12" pos:end="71:23">program_name</name><index pos:start="71:24" pos:end="71:25">[]</index></name> <init pos:start="71:27" pos:end="71:38">= <expr pos:start="71:29" pos:end="71:38"><literal type="string" pos:start="71:29" pos:end="71:38">"ffserver"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="72:1" pos:end="72:36"><decl pos:start="72:1" pos:end="72:35"><type pos:start="72:1" pos:end="72:9"><specifier pos:start="72:1" pos:end="72:5">const</specifier> <name pos:start="72:7" pos:end="72:9">int</name></type> <name pos:start="72:11" pos:end="72:28">program_birth_year</name> <init pos:start="72:30" pos:end="72:35">= <expr pos:start="72:32" pos:end="72:35"><literal type="number" pos:start="72:32" pos:end="72:35">2000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt pos:start="74:1" pos:end="74:33"><decl pos:start="74:1" pos:end="74:32"><type pos:start="74:1" pos:end="74:22"><specifier pos:start="74:1" pos:end="74:6">static</specifier> <specifier pos:start="74:8" pos:end="74:12">const</specifier> <name pos:start="74:14" pos:end="74:22">OptionDef</name></type> <name pos:start="74:24" pos:end="74:32"><name pos:start="74:24" pos:end="74:30">options</name><index pos:start="74:31" pos:end="74:32">[]</index></name></decl>;</decl_stmt>

<enum pos:start="76:1" pos:end="89:2">enum <name pos:start="76:6" pos:end="76:14">HTTPState</name> <block pos:start="76:16" pos:end="89:1">{
    <decl pos:start="77:5" pos:end="77:26"><name pos:start="77:5" pos:end="77:26">HTTPSTATE_WAIT_REQUEST</name></decl>,
    <decl pos:start="78:5" pos:end="78:25"><name pos:start="78:5" pos:end="78:25">HTTPSTATE_SEND_HEADER</name></decl>,
    <decl pos:start="79:5" pos:end="79:30"><name pos:start="79:5" pos:end="79:30">HTTPSTATE_SEND_DATA_HEADER</name></decl>,
    <decl pos:start="80:5" pos:end="80:23"><name pos:start="80:5" pos:end="80:23">HTTPSTATE_SEND_DATA</name></decl>,          <comment type="block" pos:start="80:35" pos:end="80:63">/* sending TCP or UDP data */</comment>
    <decl pos:start="81:5" pos:end="81:31"><name pos:start="81:5" pos:end="81:31">HTTPSTATE_SEND_DATA_TRAILER</name></decl>,
    <decl pos:start="82:5" pos:end="82:26"><name pos:start="82:5" pos:end="82:26">HTTPSTATE_RECEIVE_DATA</name></decl>,
    <decl pos:start="83:5" pos:end="83:23"><name pos:start="83:5" pos:end="83:23">HTTPSTATE_WAIT_FEED</name></decl>,          <comment type="block" pos:start="83:35" pos:end="83:67">/* wait for data from the feed */</comment>
    <decl pos:start="84:5" pos:end="84:19"><name pos:start="84:5" pos:end="84:19">HTTPSTATE_READY</name></decl>,

    <decl pos:start="86:5" pos:end="86:26"><name pos:start="86:5" pos:end="86:26">RTSPSTATE_WAIT_REQUEST</name></decl>,
    <decl pos:start="87:5" pos:end="87:24"><name pos:start="87:5" pos:end="87:24">RTSPSTATE_SEND_REPLY</name></decl>,
    <decl pos:start="88:5" pos:end="88:25"><name pos:start="88:5" pos:end="88:25">RTSPSTATE_SEND_PACKET</name></decl>,
}</block>;</enum>

<decl_stmt pos:start="91:1" pos:end="114:0"><decl pos:start="91:1" pos:end="105:1"><type pos:start="91:1" pos:end="91:25"><specifier pos:start="91:1" pos:end="91:6">static</specifier> <specifier pos:start="91:8" pos:end="91:12">const</specifier> <name pos:start="91:14" pos:end="91:17">char</name> <modifier pos:start="91:19" pos:end="91:19">*</modifier> <specifier pos:start="91:21" pos:end="91:25">const</specifier></type> <name pos:start="91:27" pos:end="91:38"><name pos:start="91:27" pos:end="91:36">http_state</name><index pos:start="91:37" pos:end="91:38">[]</index></name> <init pos:start="91:40" pos:end="105:1">= <expr pos:start="91:42" pos:end="105:1"><block pos:start="91:42" pos:end="105:1">{
    <expr pos:start="92:5" pos:end="92:23"><literal type="string" pos:start="92:5" pos:end="92:23">"HTTP_WAIT_REQUEST"</literal></expr>,
    <expr pos:start="93:5" pos:end="93:22"><literal type="string" pos:start="93:5" pos:end="93:22">"HTTP_SEND_HEADER"</literal></expr>,

    <expr pos:start="95:5" pos:end="95:22"><literal type="string" pos:start="95:5" pos:end="95:22">"SEND_DATA_HEADER"</literal></expr>,
    <expr pos:start="96:5" pos:end="96:15"><literal type="string" pos:start="96:5" pos:end="96:15">"SEND_DATA"</literal></expr>,
    <expr pos:start="97:5" pos:end="97:23"><literal type="string" pos:start="97:5" pos:end="97:23">"SEND_DATA_TRAILER"</literal></expr>,
    <expr pos:start="98:5" pos:end="98:18"><literal type="string" pos:start="98:5" pos:end="98:18">"RECEIVE_DATA"</literal></expr>,
    <expr pos:start="99:5" pos:end="99:15"><literal type="string" pos:start="99:5" pos:end="99:15">"WAIT_FEED"</literal></expr>,
    <expr pos:start="100:5" pos:end="100:11"><literal type="string" pos:start="100:5" pos:end="100:11">"READY"</literal></expr>,

    <expr pos:start="102:5" pos:end="102:23"><literal type="string" pos:start="102:5" pos:end="102:23">"RTSP_WAIT_REQUEST"</literal></expr>,
    <expr pos:start="103:5" pos:end="103:21"><literal type="string" pos:start="103:5" pos:end="103:21">"RTSP_SEND_REPLY"</literal></expr>,
    <expr pos:start="104:5" pos:end="104:22"><literal type="string" pos:start="104:5" pos:end="104:22">"RTSP_SEND_PACKET"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define pos:start="107:1" pos:end="107:31">#<cpp:directive pos:start="107:2" pos:end="107:7">define</cpp:directive> <cpp:macro pos:start="107:9" pos:end="107:26"><name pos:start="107:9" pos:end="107:26">IOBUFFER_INIT_SIZE</name></cpp:macro> <cpp:value pos:start="107:28" pos:end="107:31">8192</cpp:value></cpp:define>

<comment type="block" pos:start="109:1" pos:end="109:24">/* timeouts are in ms */</comment>
<cpp:define pos:start="110:1" pos:end="110:40">#<cpp:directive pos:start="110:2" pos:end="110:7">define</cpp:directive> <cpp:macro pos:start="110:9" pos:end="110:28"><name pos:start="110:9" pos:end="110:28">HTTP_REQUEST_TIMEOUT</name></cpp:macro> <cpp:value pos:start="110:30" pos:end="110:40">(15 * 1000)</cpp:value></cpp:define>
<cpp:define pos:start="111:1" pos:end="111:47">#<cpp:directive pos:start="111:2" pos:end="111:7">define</cpp:directive> <cpp:macro pos:start="111:9" pos:end="111:28"><name pos:start="111:9" pos:end="111:28">RTSP_REQUEST_TIMEOUT</name></cpp:macro> <cpp:value pos:start="111:30" pos:end="111:47">(3600 * 24 * 1000)</cpp:value></cpp:define>

<cpp:define pos:start="113:1" pos:end="113:32">#<cpp:directive pos:start="113:2" pos:end="113:7">define</cpp:directive> <cpp:macro pos:start="113:9" pos:end="113:20"><name pos:start="113:9" pos:end="113:20">SYNC_TIMEOUT</name></cpp:macro> <cpp:value pos:start="113:22" pos:end="113:32">(10 * 1000)</cpp:value></cpp:define>

<typedef pos:start="115:1" pos:end="118:24">typedef <type pos:start="115:9" pos:end="118:1"><struct pos:start="115:9" pos:end="118:1">struct <name pos:start="115:16" pos:end="115:36">RTSPActionServerSetup</name> <block pos:start="115:38" pos:end="118:1">{
    <decl_stmt pos:start="116:5" pos:end="116:20"><decl pos:start="116:5" pos:end="116:19"><type pos:start="116:5" pos:end="116:12"><name pos:start="116:5" pos:end="116:12">uint32_t</name></type> <name pos:start="116:14" pos:end="116:19">ipaddr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="117:5" pos:end="117:31"><decl pos:start="117:5" pos:end="117:30"><type pos:start="117:5" pos:end="117:8"><name pos:start="117:5" pos:end="117:8">char</name></type> <name pos:start="117:10" pos:end="117:30"><name pos:start="117:10" pos:end="117:25">transport_option</name><index pos:start="117:26" pos:end="117:30">[<expr pos:start="117:27" pos:end="117:29"><literal type="number" pos:start="117:27" pos:end="117:29">512</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name pos:start="118:3" pos:end="118:23">RTSPActionServerSetup</name>;</typedef>

<typedef pos:start="120:1" pos:end="123:15">typedef <type pos:start="120:9" pos:end="123:1"><struct pos:start="120:9" pos:end="123:1">struct <block pos:start="120:16" pos:end="123:1">{
    <decl_stmt pos:start="121:5" pos:end="121:27"><decl pos:start="121:5" pos:end="121:18"><type pos:start="121:5" pos:end="121:11"><name pos:start="121:5" pos:end="121:11">int64_t</name></type> <name pos:start="121:13" pos:end="121:18">count1</name></decl>, <name pos:start="121:21" pos:end="121:26">count2</name>;</decl_stmt>
    <decl_stmt pos:start="122:5" pos:end="122:25"><decl pos:start="122:5" pos:end="122:17"><type pos:start="122:5" pos:end="122:11"><name pos:start="122:5" pos:end="122:11">int64_t</name></type> <name pos:start="122:13" pos:end="122:17">time1</name></decl>, <name pos:start="122:20" pos:end="122:24">time2</name>;</decl_stmt>
}</block></struct></type> <name pos:start="123:3" pos:end="123:14">DataRateData</name>;</typedef>

<comment type="block" pos:start="125:1" pos:end="125:44">/* context associated with one connection */</comment>
<typedef pos:start="126:1" pos:end="189:14">typedef <type pos:start="126:9" pos:end="189:1"><struct pos:start="126:9" pos:end="189:1">struct <name pos:start="126:16" pos:end="126:26">HTTPContext</name> <block pos:start="126:28" pos:end="189:1">{
    <decl_stmt pos:start="127:5" pos:end="127:25"><decl pos:start="127:5" pos:end="127:24"><type pos:start="127:5" pos:end="127:18"><name pos:start="127:5" pos:end="127:18"><name pos:start="127:5" pos:end="127:8">enum</name> <name pos:start="127:10" pos:end="127:18">HTTPState</name></name></type> <name pos:start="127:20" pos:end="127:24">state</name></decl>;</decl_stmt>
    <decl_stmt pos:start="128:5" pos:end="128:11"><decl pos:start="128:5" pos:end="128:10"><type pos:start="128:5" pos:end="128:7"><name pos:start="128:5" pos:end="128:7">int</name></type> <name pos:start="128:9" pos:end="128:10">fd</name></decl>;</decl_stmt> <comment type="block" pos:start="128:13" pos:end="128:40">/* socket file descriptor */</comment>
    <decl_stmt pos:start="129:5" pos:end="129:33"><decl pos:start="129:5" pos:end="129:32"><type pos:start="129:5" pos:end="129:22"><name pos:start="129:5" pos:end="129:22"><name pos:start="129:5" pos:end="129:10">struct</name> <name pos:start="129:12" pos:end="129:22">sockaddr_in</name></name></type> <name pos:start="129:24" pos:end="129:32">from_addr</name></decl>;</decl_stmt> <comment type="block" pos:start="129:35" pos:end="129:46">/* origin */</comment>
    <decl_stmt pos:start="130:5" pos:end="130:30"><decl pos:start="130:5" pos:end="130:29"><type pos:start="130:5" pos:end="130:19"><name pos:start="130:5" pos:end="130:17"><name pos:start="130:5" pos:end="130:10">struct</name> <name pos:start="130:12" pos:end="130:17">pollfd</name></name> <modifier pos:start="130:19" pos:end="130:19">*</modifier></type><name pos:start="130:20" pos:end="130:29">poll_entry</name></decl>;</decl_stmt> <comment type="block" pos:start="130:32" pos:end="130:54">/* used when polling */</comment>
    <decl_stmt pos:start="131:5" pos:end="131:20"><decl pos:start="131:5" pos:end="131:19"><type pos:start="131:5" pos:end="131:11"><name pos:start="131:5" pos:end="131:11">int64_t</name></type> <name pos:start="131:13" pos:end="131:19">timeout</name></decl>;</decl_stmt>
    <decl_stmt pos:start="132:5" pos:end="132:37"><decl pos:start="132:5" pos:end="132:23"><type pos:start="132:5" pos:end="132:13"><name pos:start="132:5" pos:end="132:11">uint8_t</name> <modifier pos:start="132:13" pos:end="132:13">*</modifier></type><name pos:start="132:14" pos:end="132:23">buffer_ptr</name></decl>, <modifier pos:start="132:26" pos:end="132:26">*</modifier><name pos:start="132:27" pos:end="132:36">buffer_end</name>;</decl_stmt>
    <decl_stmt pos:start="133:5" pos:end="133:19"><decl pos:start="133:5" pos:end="133:18"><type pos:start="133:5" pos:end="133:7"><name pos:start="133:5" pos:end="133:7">int</name></type> <name pos:start="133:9" pos:end="133:18">http_error</name></decl>;</decl_stmt>
    <decl_stmt pos:start="134:5" pos:end="134:13"><decl pos:start="134:5" pos:end="134:12"><type pos:start="134:5" pos:end="134:7"><name pos:start="134:5" pos:end="134:7">int</name></type> <name pos:start="134:9" pos:end="134:12">post</name></decl>;</decl_stmt>
    <decl_stmt pos:start="135:5" pos:end="135:25"><decl pos:start="135:5" pos:end="135:24"><type pos:start="135:5" pos:end="135:7"><name pos:start="135:5" pos:end="135:7">int</name></type> <name pos:start="135:9" pos:end="135:24">chunked_encoding</name></decl>;</decl_stmt>
    <decl_stmt pos:start="136:5" pos:end="136:19"><decl pos:start="136:5" pos:end="136:18"><type pos:start="136:5" pos:end="136:7"><name pos:start="136:5" pos:end="136:7">int</name></type> <name pos:start="136:9" pos:end="136:18">chunk_size</name></decl>;</decl_stmt>               <comment type="block" pos:start="136:35" pos:end="136:64">/* 0 if it needs to be read */</comment>
    <decl_stmt pos:start="137:5" pos:end="137:29"><decl pos:start="137:5" pos:end="137:28"><type pos:start="137:5" pos:end="137:24"><name pos:start="137:5" pos:end="137:22"><name pos:start="137:5" pos:end="137:10">struct</name> <name pos:start="137:12" pos:end="137:22">HTTPContext</name></name> <modifier pos:start="137:24" pos:end="137:24">*</modifier></type><name pos:start="137:25" pos:end="137:28">next</name></decl>;</decl_stmt>
    <decl_stmt pos:start="138:5" pos:end="138:22"><decl pos:start="138:5" pos:end="138:21"><type pos:start="138:5" pos:end="138:7"><name pos:start="138:5" pos:end="138:7">int</name></type> <name pos:start="138:9" pos:end="138:21">got_key_frame</name></decl>;</decl_stmt> <comment type="block" pos:start="138:24" pos:end="138:71">/* stream 0 =&gt; 1, stream 1 =&gt; 2, stream 2=&gt; 4 */</comment>
    <decl_stmt pos:start="139:5" pos:end="139:23"><decl pos:start="139:5" pos:end="139:22"><type pos:start="139:5" pos:end="139:11"><name pos:start="139:5" pos:end="139:11">int64_t</name></type> <name pos:start="139:13" pos:end="139:22">data_count</name></decl>;</decl_stmt>
    <comment type="block" pos:start="140:5" pos:end="140:20">/* feed input */</comment>
    <decl_stmt pos:start="141:5" pos:end="141:16"><decl pos:start="141:5" pos:end="141:15"><type pos:start="141:5" pos:end="141:7"><name pos:start="141:5" pos:end="141:7">int</name></type> <name pos:start="141:9" pos:end="141:15">feed_fd</name></decl>;</decl_stmt>
    <comment type="block" pos:start="142:5" pos:end="142:31">/* input format handling */</comment>
    <decl_stmt pos:start="143:5" pos:end="143:28"><decl pos:start="143:5" pos:end="143:27"><type pos:start="143:5" pos:end="143:21"><name pos:start="143:5" pos:end="143:19">AVFormatContext</name> <modifier pos:start="143:21" pos:end="143:21">*</modifier></type><name pos:start="143:22" pos:end="143:27">fmt_in</name></decl>;</decl_stmt>
    <decl_stmt pos:start="144:5" pos:end="144:23"><decl pos:start="144:5" pos:end="144:22"><type pos:start="144:5" pos:end="144:11"><name pos:start="144:5" pos:end="144:11">int64_t</name></type> <name pos:start="144:13" pos:end="144:22">start_time</name></decl>;</decl_stmt>            <comment type="block" pos:start="144:36" pos:end="144:82">/* In milliseconds - this wraps fairly often */</comment>
    <decl_stmt pos:start="145:5" pos:end="145:22"><decl pos:start="145:5" pos:end="145:21"><type pos:start="145:5" pos:end="145:11"><name pos:start="145:5" pos:end="145:11">int64_t</name></type> <name pos:start="145:13" pos:end="145:21">first_pts</name></decl>;</decl_stmt>            <comment type="block" pos:start="145:35" pos:end="145:57">/* initial pts value */</comment>
    <decl_stmt pos:start="146:5" pos:end="146:20"><decl pos:start="146:5" pos:end="146:19"><type pos:start="146:5" pos:end="146:11"><name pos:start="146:5" pos:end="146:11">int64_t</name></type> <name pos:start="146:13" pos:end="146:19">cur_pts</name></decl>;</decl_stmt>             <comment type="block" pos:start="146:34" pos:end="146:78">/* current pts value from the stream in us */</comment>
    <decl_stmt pos:start="147:5" pos:end="147:31"><decl pos:start="147:5" pos:end="147:30"><type pos:start="147:5" pos:end="147:11"><name pos:start="147:5" pos:end="147:11">int64_t</name></type> <name pos:start="147:13" pos:end="147:30">cur_frame_duration</name></decl>;</decl_stmt>  <comment type="block" pos:start="147:34" pos:end="147:74">/* duration of the current frame in us */</comment>
    <decl_stmt pos:start="148:5" pos:end="148:24"><decl pos:start="148:5" pos:end="148:23"><type pos:start="148:5" pos:end="148:7"><name pos:start="148:5" pos:end="148:7">int</name></type> <name pos:start="148:9" pos:end="148:23">cur_frame_bytes</name></decl>;</decl_stmt>       <comment type="block" pos:start="148:32" pos:end="150:43">/* output frame size, needed to compute
                                  the time at which we send each
                                  packet */</comment>
    <decl_stmt pos:start="151:5" pos:end="151:25"><decl pos:start="151:5" pos:end="151:24"><type pos:start="151:5" pos:end="151:7"><name pos:start="151:5" pos:end="151:7">int</name></type> <name pos:start="151:9" pos:end="151:24">pts_stream_index</name></decl>;</decl_stmt>        <comment type="block" pos:start="151:34" pos:end="151:74">/* stream we choose as clock reference */</comment>
    <decl_stmt pos:start="152:5" pos:end="152:22"><decl pos:start="152:5" pos:end="152:21"><type pos:start="152:5" pos:end="152:11"><name pos:start="152:5" pos:end="152:11">int64_t</name></type> <name pos:start="152:13" pos:end="152:21">cur_clock</name></decl>;</decl_stmt>           <comment type="block" pos:start="152:34" pos:end="152:74">/* current clock reference value in us */</comment>
    <comment type="block" pos:start="153:5" pos:end="153:32">/* output format handling */</comment>
    <decl_stmt pos:start="154:5" pos:end="154:34"><decl pos:start="154:5" pos:end="154:33"><type pos:start="154:5" pos:end="154:27"><name pos:start="154:5" pos:end="154:25"><name pos:start="154:5" pos:end="154:10">struct</name> <name pos:start="154:12" pos:end="154:25">FFServerStream</name></name> <modifier pos:start="154:27" pos:end="154:27">*</modifier></type><name pos:start="154:28" pos:end="154:33">stream</name></decl>;</decl_stmt>
    <comment type="block" pos:start="155:5" pos:end="155:30">/* -1 is invalid stream */</comment>
    <decl_stmt pos:start="156:5" pos:end="156:43"><decl pos:start="156:5" pos:end="156:42"><type pos:start="156:5" pos:end="156:7"><name pos:start="156:5" pos:end="156:7">int</name></type> <name pos:start="156:9" pos:end="156:42"><name pos:start="156:9" pos:end="156:20">feed_streams</name><index pos:start="156:21" pos:end="156:42">[<expr pos:start="156:22" pos:end="156:41"><name pos:start="156:22" pos:end="156:41">FFSERVER_MAX_STREAMS</name></expr>]</index></name></decl>;</decl_stmt> <comment type="block" pos:start="156:45" pos:end="156:78">/* index of streams in the feed */</comment>
    <decl_stmt pos:start="157:5" pos:end="157:50"><decl pos:start="157:5" pos:end="157:49"><type pos:start="157:5" pos:end="157:7"><name pos:start="157:5" pos:end="157:7">int</name></type> <name pos:start="157:9" pos:end="157:49"><name pos:start="157:9" pos:end="157:27">switch_feed_streams</name><index pos:start="157:28" pos:end="157:49">[<expr pos:start="157:29" pos:end="157:48"><name pos:start="157:29" pos:end="157:48">FFSERVER_MAX_STREAMS</name></expr>]</index></name></decl>;</decl_stmt> <comment type="block" pos:start="157:52" pos:end="157:85">/* index of streams in the feed */</comment>
    <decl_stmt pos:start="158:5" pos:end="158:23"><decl pos:start="158:5" pos:end="158:22"><type pos:start="158:5" pos:end="158:7"><name pos:start="158:5" pos:end="158:7">int</name></type> <name pos:start="158:9" pos:end="158:22">switch_pending</name></decl>;</decl_stmt>
    <decl_stmt pos:start="159:5" pos:end="159:30"><decl pos:start="159:5" pos:end="159:29"><type pos:start="159:5" pos:end="159:21"><name pos:start="159:5" pos:end="159:19">AVFormatContext</name> <modifier pos:start="159:21" pos:end="159:21">*</modifier></type><name pos:start="159:22" pos:end="159:29">pfmt_ctx</name></decl>;</decl_stmt> <comment type="block" pos:start="159:32" pos:end="159:76">/* instance of FFServerStream for one user */</comment>
    <decl_stmt pos:start="160:5" pos:end="160:25"><decl pos:start="160:5" pos:end="160:24"><type pos:start="160:5" pos:end="160:7"><name pos:start="160:5" pos:end="160:7">int</name></type> <name pos:start="160:9" pos:end="160:24">last_packet_sent</name></decl>;</decl_stmt> <comment type="block" pos:start="160:27" pos:end="160:65">/* true if last data packet was sent */</comment>
    <decl_stmt pos:start="161:5" pos:end="161:21"><decl pos:start="161:5" pos:end="161:20"><type pos:start="161:5" pos:end="161:7"><name pos:start="161:5" pos:end="161:7">int</name></type> <name pos:start="161:9" pos:end="161:20">suppress_log</name></decl>;</decl_stmt>
    <decl_stmt pos:start="162:5" pos:end="162:26"><decl pos:start="162:5" pos:end="162:25"><type pos:start="162:5" pos:end="162:16"><name pos:start="162:5" pos:end="162:16">DataRateData</name></type> <name pos:start="162:18" pos:end="162:25">datarate</name></decl>;</decl_stmt>
    <decl_stmt pos:start="163:5" pos:end="163:22"><decl pos:start="163:5" pos:end="163:21"><type pos:start="163:5" pos:end="163:7"><name pos:start="163:5" pos:end="163:7">int</name></type> <name pos:start="163:9" pos:end="163:21">wmp_client_id</name></decl>;</decl_stmt>
    <decl_stmt pos:start="164:5" pos:end="164:22"><decl pos:start="164:5" pos:end="164:21"><type pos:start="164:5" pos:end="164:8"><name pos:start="164:5" pos:end="164:8">char</name></type> <name pos:start="164:10" pos:end="164:21"><name pos:start="164:10" pos:end="164:17">protocol</name><index pos:start="164:18" pos:end="164:21">[<expr pos:start="164:19" pos:end="164:20"><literal type="number" pos:start="164:19" pos:end="164:20">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="165:5" pos:end="165:20"><decl pos:start="165:5" pos:end="165:19"><type pos:start="165:5" pos:end="165:8"><name pos:start="165:5" pos:end="165:8">char</name></type> <name pos:start="165:10" pos:end="165:19"><name pos:start="165:10" pos:end="165:15">method</name><index pos:start="165:16" pos:end="165:19">[<expr pos:start="165:17" pos:end="165:18"><literal type="number" pos:start="165:17" pos:end="165:18">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="166:5" pos:end="166:18"><decl pos:start="166:5" pos:end="166:17"><type pos:start="166:5" pos:end="166:8"><name pos:start="166:5" pos:end="166:8">char</name></type> <name pos:start="166:10" pos:end="166:17"><name pos:start="166:10" pos:end="166:12">url</name><index pos:start="166:13" pos:end="166:17">[<expr pos:start="166:14" pos:end="166:16"><literal type="number" pos:start="166:14" pos:end="166:16">128</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="167:5" pos:end="167:26"><decl pos:start="167:5" pos:end="167:25"><type pos:start="167:5" pos:end="167:8"><name pos:start="167:5" pos:end="167:8">char</name></type> <name pos:start="167:10" pos:end="167:25"><name pos:start="167:10" pos:end="167:18">clean_url</name><index pos:start="167:19" pos:end="167:25">[<expr pos:start="167:20" pos:end="167:24"><literal type="number" pos:start="167:20" pos:end="167:22">128</literal><operator pos:start="167:23" pos:end="167:23">*</operator><literal type="number" pos:start="167:24" pos:end="167:24">7</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="168:5" pos:end="168:20"><decl pos:start="168:5" pos:end="168:19"><type pos:start="168:5" pos:end="168:7"><name pos:start="168:5" pos:end="168:7">int</name></type> <name pos:start="168:9" pos:end="168:19">buffer_size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="169:5" pos:end="169:20"><decl pos:start="169:5" pos:end="169:19"><type pos:start="169:5" pos:end="169:13"><name pos:start="169:5" pos:end="169:11">uint8_t</name> <modifier pos:start="169:13" pos:end="169:13">*</modifier></type><name pos:start="169:14" pos:end="169:19">buffer</name></decl>;</decl_stmt>
    <decl_stmt pos:start="170:5" pos:end="170:22"><decl pos:start="170:5" pos:end="170:21"><type pos:start="170:5" pos:end="170:7"><name pos:start="170:5" pos:end="170:7">int</name></type> <name pos:start="170:9" pos:end="170:21">is_packetized</name></decl>;</decl_stmt> <comment type="block" pos:start="170:24" pos:end="170:62">/* if true, the stream is packetized */</comment>
    <decl_stmt pos:start="171:5" pos:end="171:28"><decl pos:start="171:5" pos:end="171:27"><type pos:start="171:5" pos:end="171:7"><name pos:start="171:5" pos:end="171:7">int</name></type> <name pos:start="171:9" pos:end="171:27">packet_stream_index</name></decl>;</decl_stmt> <comment type="block" pos:start="171:30" pos:end="171:77">/* current stream for output in state machine */</comment>

    <comment type="block" pos:start="173:5" pos:end="173:29">/* RTSP state specific */</comment>
    <decl_stmt pos:start="174:5" pos:end="174:23"><decl pos:start="174:5" pos:end="174:22"><type pos:start="174:5" pos:end="174:13"><name pos:start="174:5" pos:end="174:11">uint8_t</name> <modifier pos:start="174:13" pos:end="174:13">*</modifier></type><name pos:start="174:14" pos:end="174:22">pb_buffer</name></decl>;</decl_stmt> <comment type="block" pos:start="174:25" pos:end="174:59">/* XXX: use that in all the code */</comment>
    <decl_stmt pos:start="175:5" pos:end="175:20"><decl pos:start="175:5" pos:end="175:19"><type pos:start="175:5" pos:end="175:17"><name pos:start="175:5" pos:end="175:15">AVIOContext</name> <modifier pos:start="175:17" pos:end="175:17">*</modifier></type><name pos:start="175:18" pos:end="175:19">pb</name></decl>;</decl_stmt>
    <decl_stmt pos:start="176:5" pos:end="176:12"><decl pos:start="176:5" pos:end="176:11"><type pos:start="176:5" pos:end="176:7"><name pos:start="176:5" pos:end="176:7">int</name></type> <name pos:start="176:9" pos:end="176:11">seq</name></decl>;</decl_stmt> <comment type="block" pos:start="176:14" pos:end="176:39">/* RTSP sequence number */</comment>

    <comment type="block" pos:start="178:5" pos:end="178:28">/* RTP state specific */</comment>
    <decl_stmt pos:start="179:5" pos:end="179:41"><decl pos:start="179:5" pos:end="179:40"><type pos:start="179:5" pos:end="179:27"><name pos:start="179:5" pos:end="179:27"><name pos:start="179:5" pos:end="179:8">enum</name> <name pos:start="179:10" pos:end="179:27">RTSPLowerTransport</name></name></type> <name pos:start="179:29" pos:end="179:40">rtp_protocol</name></decl>;</decl_stmt>
    <decl_stmt pos:start="180:5" pos:end="180:24"><decl pos:start="180:5" pos:end="180:23"><type pos:start="180:5" pos:end="180:8"><name pos:start="180:5" pos:end="180:8">char</name></type> <name pos:start="180:10" pos:end="180:23"><name pos:start="180:10" pos:end="180:19">session_id</name><index pos:start="180:20" pos:end="180:23">[<expr pos:start="180:21" pos:end="180:22"><literal type="number" pos:start="180:21" pos:end="180:22">32</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block" pos:start="180:26" pos:end="180:41">/* session id */</comment>
    <decl_stmt pos:start="181:5" pos:end="181:51"><decl pos:start="181:5" pos:end="181:50"><type pos:start="181:5" pos:end="181:21"><name pos:start="181:5" pos:end="181:19">AVFormatContext</name> <modifier pos:start="181:21" pos:end="181:21">*</modifier></type><name pos:start="181:22" pos:end="181:50"><name pos:start="181:22" pos:end="181:28">rtp_ctx</name><index pos:start="181:29" pos:end="181:50">[<expr pos:start="181:30" pos:end="181:49"><name pos:start="181:30" pos:end="181:49">FFSERVER_MAX_STREAMS</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block" pos:start="183:5" pos:end="183:26">/* RTP/UDP specific */</comment>
    <decl_stmt pos:start="184:5" pos:end="184:50"><decl pos:start="184:5" pos:end="184:49"><type pos:start="184:5" pos:end="184:16"><name pos:start="184:5" pos:end="184:14">URLContext</name> <modifier pos:start="184:16" pos:end="184:16">*</modifier></type><name pos:start="184:17" pos:end="184:49"><name pos:start="184:17" pos:end="184:27">rtp_handles</name><index pos:start="184:28" pos:end="184:49">[<expr pos:start="184:29" pos:end="184:48"><name pos:start="184:29" pos:end="184:48">FFSERVER_MAX_STREAMS</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block" pos:start="186:5" pos:end="186:26">/* RTP/TCP specific */</comment>
    <decl_stmt pos:start="187:5" pos:end="187:31"><decl pos:start="187:5" pos:end="187:30"><type pos:start="187:5" pos:end="187:24"><name pos:start="187:5" pos:end="187:22"><name pos:start="187:5" pos:end="187:10">struct</name> <name pos:start="187:12" pos:end="187:22">HTTPContext</name></name> <modifier pos:start="187:24" pos:end="187:24">*</modifier></type><name pos:start="187:25" pos:end="187:30">rtsp_c</name></decl>;</decl_stmt>
    <decl_stmt pos:start="188:5" pos:end="188:67"><decl pos:start="188:5" pos:end="188:26"><type pos:start="188:5" pos:end="188:13"><name pos:start="188:5" pos:end="188:11">uint8_t</name> <modifier pos:start="188:13" pos:end="188:13">*</modifier></type><name pos:start="188:14" pos:end="188:26">packet_buffer</name></decl>, <modifier pos:start="188:29" pos:end="188:29">*</modifier><name pos:start="188:30" pos:end="188:46">packet_buffer_ptr</name>, <modifier pos:start="188:49" pos:end="188:49">*</modifier><name pos:start="188:50" pos:end="188:66">packet_buffer_end</name>;</decl_stmt>
}</block></struct></type> <name pos:start="189:3" pos:end="189:13">HTTPContext</name>;</typedef>

<decl_stmt pos:start="191:1" pos:end="191:35"><decl pos:start="191:1" pos:end="191:34"><type pos:start="191:1" pos:end="191:20"><specifier pos:start="191:1" pos:end="191:6">static</specifier> <name pos:start="191:8" pos:end="191:18">HTTPContext</name> <modifier pos:start="191:20" pos:end="191:20">*</modifier></type><name pos:start="191:21" pos:end="191:34">first_http_ctx</name></decl>;</decl_stmt>

<decl_stmt pos:start="193:1" pos:end="198:2"><decl pos:start="193:1" pos:end="198:1"><type pos:start="193:1" pos:end="193:21"><specifier pos:start="193:1" pos:end="193:6">static</specifier> <name pos:start="193:8" pos:end="193:21">FFServerConfig</name></type> <name pos:start="193:23" pos:end="193:28">config</name> <init pos:start="193:30" pos:end="198:1">= <expr pos:start="193:32" pos:end="198:1"><block pos:start="193:32" pos:end="198:1">{
    <expr pos:start="194:5" pos:end="194:35"><operator pos:start="194:5" pos:end="194:5">.</operator><name pos:start="194:6" pos:end="194:28">nb_max_http_connections</name> <operator pos:start="194:30" pos:end="194:30">=</operator> <literal type="number" pos:start="194:32" pos:end="194:35">2000</literal></expr>,
    <expr pos:start="195:5" pos:end="195:27"><operator pos:start="195:5" pos:end="195:5">.</operator><name pos:start="195:6" pos:end="195:23">nb_max_connections</name> <operator pos:start="195:25" pos:end="195:25">=</operator> <literal type="number" pos:start="195:27" pos:end="195:27">5</literal></expr>,
    <expr pos:start="196:5" pos:end="196:25"><operator pos:start="196:5" pos:end="196:5">.</operator><name pos:start="196:6" pos:end="196:18">max_bandwidth</name> <operator pos:start="196:20" pos:end="196:20">=</operator> <literal type="number" pos:start="196:22" pos:end="196:25">1000</literal></expr>,
    <expr pos:start="197:5" pos:end="197:21"><operator pos:start="197:5" pos:end="197:5">.</operator><name pos:start="197:6" pos:end="197:17">use_defaults</name> <operator pos:start="197:19" pos:end="197:19">=</operator> <literal type="number" pos:start="197:21" pos:end="197:21">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function_decl pos:start="200:1" pos:end="200:55"><type pos:start="200:1" pos:end="200:11"><specifier pos:start="200:1" pos:end="200:6">static</specifier> <name pos:start="200:8" pos:end="200:11">void</name></type> <name pos:start="200:13" pos:end="200:26">new_connection</name><parameter_list pos:start="200:27" pos:end="200:54">(<parameter pos:start="200:28" pos:end="200:40"><decl pos:start="200:28" pos:end="200:40"><type pos:start="200:28" pos:end="200:40"><name pos:start="200:28" pos:end="200:30">int</name></type> <name pos:start="200:32" pos:end="200:40">server_fd</name></decl></parameter>, <parameter pos:start="200:43" pos:end="200:53"><decl pos:start="200:43" pos:end="200:53"><type pos:start="200:43" pos:end="200:53"><name pos:start="200:43" pos:end="200:45">int</name></type> <name pos:start="200:47" pos:end="200:53">is_rtsp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="201:1" pos:end="201:45"><type pos:start="201:1" pos:end="201:11"><specifier pos:start="201:1" pos:end="201:6">static</specifier> <name pos:start="201:8" pos:end="201:11">void</name></type> <name pos:start="201:13" pos:end="201:28">close_connection</name><parameter_list pos:start="201:29" pos:end="201:44">(<parameter pos:start="201:30" pos:end="201:43"><decl pos:start="201:30" pos:end="201:43"><type pos:start="201:30" pos:end="201:42"><name pos:start="201:30" pos:end="201:40">HTTPContext</name> <modifier pos:start="201:42" pos:end="201:42">*</modifier></type><name pos:start="201:43" pos:end="201:43">c</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" pos:start="203:1" pos:end="203:19">/* HTTP handling */</comment>
<function_decl pos:start="204:1" pos:end="204:45"><type pos:start="204:1" pos:end="204:10"><specifier pos:start="204:1" pos:end="204:6">static</specifier> <name pos:start="204:8" pos:end="204:10">int</name></type> <name pos:start="204:12" pos:end="204:28">handle_connection</name><parameter_list pos:start="204:29" pos:end="204:44">(<parameter pos:start="204:30" pos:end="204:43"><decl pos:start="204:30" pos:end="204:43"><type pos:start="204:30" pos:end="204:42"><name pos:start="204:30" pos:end="204:40">HTTPContext</name> <modifier pos:start="204:42" pos:end="204:42">*</modifier></type><name pos:start="204:43" pos:end="204:43">c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="205:1" pos:end="205:80"><type pos:start="205:1" pos:end="205:18"><specifier pos:start="205:1" pos:end="205:6">static</specifier> <specifier pos:start="205:8" pos:end="205:13">inline</specifier> <name pos:start="205:15" pos:end="205:18">void</name></type> <name pos:start="205:20" pos:end="205:38">print_stream_params</name><parameter_list pos:start="205:39" pos:end="205:79">(<parameter pos:start="205:40" pos:end="205:54"><decl pos:start="205:40" pos:end="205:54"><type pos:start="205:40" pos:end="205:54"><name pos:start="205:40" pos:end="205:50">AVIOContext</name> <modifier pos:start="205:52" pos:end="205:52">*</modifier></type><name pos:start="205:53" pos:end="205:54">pb</name></decl></parameter>, <parameter pos:start="205:57" pos:end="205:78"><decl pos:start="205:57" pos:end="205:78"><type pos:start="205:57" pos:end="205:78"><name pos:start="205:57" pos:end="205:70">FFServerStream</name> <modifier pos:start="205:72" pos:end="205:72">*</modifier></type><name pos:start="205:73" pos:end="205:78">stream</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="206:1" pos:end="206:43"><type pos:start="206:1" pos:end="206:11"><specifier pos:start="206:1" pos:end="206:6">static</specifier> <name pos:start="206:8" pos:end="206:11">void</name></type> <name pos:start="206:13" pos:end="206:26">compute_status</name><parameter_list pos:start="206:27" pos:end="206:42">(<parameter pos:start="206:28" pos:end="206:41"><decl pos:start="206:28" pos:end="206:41"><type pos:start="206:28" pos:end="206:40"><name pos:start="206:28" pos:end="206:38">HTTPContext</name> <modifier pos:start="206:40" pos:end="206:40">*</modifier></type><name pos:start="206:41" pos:end="206:41">c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="207:1" pos:end="207:63"><type pos:start="207:1" pos:end="207:10"><specifier pos:start="207:1" pos:end="207:6">static</specifier> <name pos:start="207:8" pos:end="207:10">int</name></type> <name pos:start="207:12" pos:end="207:28">open_input_stream</name><parameter_list pos:start="207:29" pos:end="207:62">(<parameter pos:start="207:30" pos:end="207:43"><decl pos:start="207:30" pos:end="207:43"><type pos:start="207:30" pos:end="207:43"><name pos:start="207:30" pos:end="207:40">HTTPContext</name> <modifier pos:start="207:42" pos:end="207:42">*</modifier></type><name pos:start="207:43" pos:end="207:43">c</name></decl></parameter>, <parameter pos:start="207:46" pos:end="207:61"><decl pos:start="207:46" pos:end="207:61"><type pos:start="207:46" pos:end="207:61"><specifier pos:start="207:46" pos:end="207:50">const</specifier> <name pos:start="207:52" pos:end="207:55">char</name> <modifier pos:start="207:57" pos:end="207:57">*</modifier></type><name pos:start="207:58" pos:end="207:61">info</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="208:1" pos:end="208:46"><type pos:start="208:1" pos:end="208:10"><specifier pos:start="208:1" pos:end="208:6">static</specifier> <name pos:start="208:8" pos:end="208:10">int</name></type> <name pos:start="208:12" pos:end="208:29">http_parse_request</name><parameter_list pos:start="208:30" pos:end="208:45">(<parameter pos:start="208:31" pos:end="208:44"><decl pos:start="208:31" pos:end="208:44"><type pos:start="208:31" pos:end="208:43"><name pos:start="208:31" pos:end="208:41">HTTPContext</name> <modifier pos:start="208:43" pos:end="208:43">*</modifier></type><name pos:start="208:44" pos:end="208:44">c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="209:1" pos:end="209:42"><type pos:start="209:1" pos:end="209:10"><specifier pos:start="209:1" pos:end="209:6">static</specifier> <name pos:start="209:8" pos:end="209:10">int</name></type> <name pos:start="209:12" pos:end="209:25">http_send_data</name><parameter_list pos:start="209:26" pos:end="209:41">(<parameter pos:start="209:27" pos:end="209:40"><decl pos:start="209:27" pos:end="209:40"><type pos:start="209:27" pos:end="209:39"><name pos:start="209:27" pos:end="209:37">HTTPContext</name> <modifier pos:start="209:39" pos:end="209:39">*</modifier></type><name pos:start="209:40" pos:end="209:40">c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="210:1" pos:end="210:51"><type pos:start="210:1" pos:end="210:10"><specifier pos:start="210:1" pos:end="210:6">static</specifier> <name pos:start="210:8" pos:end="210:10">int</name></type> <name pos:start="210:12" pos:end="210:34">http_start_receive_data</name><parameter_list pos:start="210:35" pos:end="210:50">(<parameter pos:start="210:36" pos:end="210:49"><decl pos:start="210:36" pos:end="210:49"><type pos:start="210:36" pos:end="210:48"><name pos:start="210:36" pos:end="210:46">HTTPContext</name> <modifier pos:start="210:48" pos:end="210:48">*</modifier></type><name pos:start="210:49" pos:end="210:49">c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="211:1" pos:end="211:45"><type pos:start="211:1" pos:end="211:10"><specifier pos:start="211:1" pos:end="211:6">static</specifier> <name pos:start="211:8" pos:end="211:10">int</name></type> <name pos:start="211:12" pos:end="211:28">http_receive_data</name><parameter_list pos:start="211:29" pos:end="211:44">(<parameter pos:start="211:30" pos:end="211:43"><decl pos:start="211:30" pos:end="211:43"><type pos:start="211:30" pos:end="211:42"><name pos:start="211:30" pos:end="211:40">HTTPContext</name> <modifier pos:start="211:42" pos:end="211:42">*</modifier></type><name pos:start="211:43" pos:end="211:43">c</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" pos:start="213:1" pos:end="213:19">/* RTSP handling */</comment>
<function_decl pos:start="214:1" pos:end="214:46"><type pos:start="214:1" pos:end="214:10"><specifier pos:start="214:1" pos:end="214:6">static</specifier> <name pos:start="214:8" pos:end="214:10">int</name></type> <name pos:start="214:12" pos:end="214:29">rtsp_parse_request</name><parameter_list pos:start="214:30" pos:end="214:45">(<parameter pos:start="214:31" pos:end="214:44"><decl pos:start="214:31" pos:end="214:44"><type pos:start="214:31" pos:end="214:43"><name pos:start="214:31" pos:end="214:41">HTTPContext</name> <modifier pos:start="214:43" pos:end="214:43">*</modifier></type><name pos:start="214:44" pos:end="214:44">c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="215:1" pos:end="215:63"><type pos:start="215:1" pos:end="215:11"><specifier pos:start="215:1" pos:end="215:6">static</specifier> <name pos:start="215:8" pos:end="215:11">void</name></type> <name pos:start="215:13" pos:end="215:29">rtsp_cmd_describe</name><parameter_list pos:start="215:30" pos:end="215:62">(<parameter pos:start="215:31" pos:end="215:44"><decl pos:start="215:31" pos:end="215:44"><type pos:start="215:31" pos:end="215:44"><name pos:start="215:31" pos:end="215:41">HTTPContext</name> <modifier pos:start="215:43" pos:end="215:43">*</modifier></type><name pos:start="215:44" pos:end="215:44">c</name></decl></parameter>, <parameter pos:start="215:47" pos:end="215:61"><decl pos:start="215:47" pos:end="215:61"><type pos:start="215:47" pos:end="215:61"><specifier pos:start="215:47" pos:end="215:51">const</specifier> <name pos:start="215:53" pos:end="215:56">char</name> <modifier pos:start="215:58" pos:end="215:58">*</modifier></type><name pos:start="215:59" pos:end="215:61">url</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="216:1" pos:end="216:62"><type pos:start="216:1" pos:end="216:11"><specifier pos:start="216:1" pos:end="216:6">static</specifier> <name pos:start="216:8" pos:end="216:11">void</name></type> <name pos:start="216:13" pos:end="216:28">rtsp_cmd_options</name><parameter_list pos:start="216:29" pos:end="216:61">(<parameter pos:start="216:30" pos:end="216:43"><decl pos:start="216:30" pos:end="216:43"><type pos:start="216:30" pos:end="216:43"><name pos:start="216:30" pos:end="216:40">HTTPContext</name> <modifier pos:start="216:42" pos:end="216:42">*</modifier></type><name pos:start="216:43" pos:end="216:43">c</name></decl></parameter>, <parameter pos:start="216:46" pos:end="216:60"><decl pos:start="216:46" pos:end="216:60"><type pos:start="216:46" pos:end="216:60"><specifier pos:start="216:46" pos:end="216:50">const</specifier> <name pos:start="216:52" pos:end="216:55">char</name> <modifier pos:start="216:57" pos:end="216:57">*</modifier></type><name pos:start="216:58" pos:end="216:60">url</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="217:1" pos:end="218:49"><type pos:start="217:1" pos:end="217:11"><specifier pos:start="217:1" pos:end="217:6">static</specifier> <name pos:start="217:8" pos:end="217:11">void</name></type> <name pos:start="217:13" pos:end="217:26">rtsp_cmd_setup</name><parameter_list pos:start="217:27" pos:end="218:48">(<parameter pos:start="217:28" pos:end="217:41"><decl pos:start="217:28" pos:end="217:41"><type pos:start="217:28" pos:end="217:41"><name pos:start="217:28" pos:end="217:38">HTTPContext</name> <modifier pos:start="217:40" pos:end="217:40">*</modifier></type><name pos:start="217:41" pos:end="217:41">c</name></decl></parameter>, <parameter pos:start="217:44" pos:end="217:58"><decl pos:start="217:44" pos:end="217:58"><type pos:start="217:44" pos:end="217:58"><specifier pos:start="217:44" pos:end="217:48">const</specifier> <name pos:start="217:50" pos:end="217:53">char</name> <modifier pos:start="217:55" pos:end="217:55">*</modifier></type><name pos:start="217:56" pos:end="217:58">url</name></decl></parameter>,
                           <parameter pos:start="218:28" pos:end="218:47"><decl pos:start="218:28" pos:end="218:47"><type pos:start="218:28" pos:end="218:47"><name pos:start="218:28" pos:end="218:44">RTSPMessageHeader</name> <modifier pos:start="218:46" pos:end="218:46">*</modifier></type><name pos:start="218:47" pos:end="218:47">h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="219:1" pos:end="220:48"><type pos:start="219:1" pos:end="219:11"><specifier pos:start="219:1" pos:end="219:6">static</specifier> <name pos:start="219:8" pos:end="219:11">void</name></type> <name pos:start="219:13" pos:end="219:25">rtsp_cmd_play</name><parameter_list pos:start="219:26" pos:end="220:47">(<parameter pos:start="219:27" pos:end="219:40"><decl pos:start="219:27" pos:end="219:40"><type pos:start="219:27" pos:end="219:40"><name pos:start="219:27" pos:end="219:37">HTTPContext</name> <modifier pos:start="219:39" pos:end="219:39">*</modifier></type><name pos:start="219:40" pos:end="219:40">c</name></decl></parameter>, <parameter pos:start="219:43" pos:end="219:57"><decl pos:start="219:43" pos:end="219:57"><type pos:start="219:43" pos:end="219:57"><specifier pos:start="219:43" pos:end="219:47">const</specifier> <name pos:start="219:49" pos:end="219:52">char</name> <modifier pos:start="219:54" pos:end="219:54">*</modifier></type><name pos:start="219:55" pos:end="219:57">url</name></decl></parameter>,
                          <parameter pos:start="220:27" pos:end="220:46"><decl pos:start="220:27" pos:end="220:46"><type pos:start="220:27" pos:end="220:46"><name pos:start="220:27" pos:end="220:43">RTSPMessageHeader</name> <modifier pos:start="220:45" pos:end="220:45">*</modifier></type><name pos:start="220:46" pos:end="220:46">h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="221:1" pos:end="222:69"><type pos:start="221:1" pos:end="221:11"><specifier pos:start="221:1" pos:end="221:6">static</specifier> <name pos:start="221:8" pos:end="221:11">void</name></type> <name pos:start="221:13" pos:end="221:30">rtsp_cmd_interrupt</name><parameter_list pos:start="221:31" pos:end="222:68">(<parameter pos:start="221:32" pos:end="221:45"><decl pos:start="221:32" pos:end="221:45"><type pos:start="221:32" pos:end="221:45"><name pos:start="221:32" pos:end="221:42">HTTPContext</name> <modifier pos:start="221:44" pos:end="221:44">*</modifier></type><name pos:start="221:45" pos:end="221:45">c</name></decl></parameter>, <parameter pos:start="221:48" pos:end="221:62"><decl pos:start="221:48" pos:end="221:62"><type pos:start="221:48" pos:end="221:62"><specifier pos:start="221:48" pos:end="221:52">const</specifier> <name pos:start="221:54" pos:end="221:57">char</name> <modifier pos:start="221:59" pos:end="221:59">*</modifier></type><name pos:start="221:60" pos:end="221:62">url</name></decl></parameter>,
                               <parameter pos:start="222:32" pos:end="222:51"><decl pos:start="222:32" pos:end="222:51"><type pos:start="222:32" pos:end="222:51"><name pos:start="222:32" pos:end="222:48">RTSPMessageHeader</name> <modifier pos:start="222:50" pos:end="222:50">*</modifier></type><name pos:start="222:51" pos:end="222:51">h</name></decl></parameter>, <parameter pos:start="222:54" pos:end="222:67"><decl pos:start="222:54" pos:end="222:67"><type pos:start="222:54" pos:end="222:67"><name pos:start="222:54" pos:end="222:56">int</name></type> <name pos:start="222:58" pos:end="222:67">pause_only</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" pos:start="224:1" pos:end="224:18">/* SDP handling */</comment>
<function_decl pos:start="225:1" pos:end="226:57"><type pos:start="225:1" pos:end="225:10"><specifier pos:start="225:1" pos:end="225:6">static</specifier> <name pos:start="225:8" pos:end="225:10">int</name></type> <name pos:start="225:12" pos:end="225:34">prepare_sdp_description</name><parameter_list pos:start="225:35" pos:end="226:56">(<parameter pos:start="225:36" pos:end="225:57"><decl pos:start="225:36" pos:end="225:57"><type pos:start="225:36" pos:end="225:57"><name pos:start="225:36" pos:end="225:49">FFServerStream</name> <modifier pos:start="225:51" pos:end="225:51">*</modifier></type><name pos:start="225:52" pos:end="225:57">stream</name></decl></parameter>, <parameter pos:start="225:60" pos:end="225:76"><decl pos:start="225:60" pos:end="225:76"><type pos:start="225:60" pos:end="225:76"><name pos:start="225:60" pos:end="225:66">uint8_t</name> <modifier pos:start="225:68" pos:end="225:68">*</modifier><modifier pos:start="225:69" pos:end="225:69">*</modifier></type><name pos:start="225:70" pos:end="225:76">pbuffer</name></decl></parameter>,
                                   <parameter pos:start="226:36" pos:end="226:55"><decl pos:start="226:36" pos:end="226:55"><type pos:start="226:36" pos:end="226:55"><name pos:start="226:36" pos:end="226:49"><name pos:start="226:36" pos:end="226:41">struct</name> <name pos:start="226:43" pos:end="226:49">in_addr</name></name></type> <name pos:start="226:51" pos:end="226:55">my_ip</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" pos:start="228:1" pos:end="228:18">/* RTP handling */</comment>
<function_decl pos:start="229:1" pos:end="232:77"><type pos:start="229:1" pos:end="229:20"><specifier pos:start="229:1" pos:end="229:6">static</specifier> <name pos:start="229:8" pos:end="229:18">HTTPContext</name> <modifier pos:start="229:20" pos:end="229:20">*</modifier></type><name pos:start="229:21" pos:end="229:38">rtp_new_connection</name><parameter_list pos:start="229:39" pos:end="232:76">(<parameter pos:start="229:40" pos:end="229:68"><decl pos:start="229:40" pos:end="229:68"><type pos:start="229:40" pos:end="229:68"><name pos:start="229:40" pos:end="229:57"><name pos:start="229:40" pos:end="229:45">struct</name> <name pos:start="229:47" pos:end="229:57">sockaddr_in</name></name> <modifier pos:start="229:59" pos:end="229:59">*</modifier></type><name pos:start="229:60" pos:end="229:68">from_addr</name></decl></parameter>,
                                       <parameter pos:start="230:40" pos:end="230:61"><decl pos:start="230:40" pos:end="230:61"><type pos:start="230:40" pos:end="230:61"><name pos:start="230:40" pos:end="230:53">FFServerStream</name> <modifier pos:start="230:55" pos:end="230:55">*</modifier></type><name pos:start="230:56" pos:end="230:61">stream</name></decl></parameter>,
                                       <parameter pos:start="231:40" pos:end="231:61"><decl pos:start="231:40" pos:end="231:61"><type pos:start="231:40" pos:end="231:61"><specifier pos:start="231:40" pos:end="231:44">const</specifier> <name pos:start="231:46" pos:end="231:49">char</name> <modifier pos:start="231:51" pos:end="231:51">*</modifier></type><name pos:start="231:52" pos:end="231:61">session_id</name></decl></parameter>,
                                       <parameter pos:start="232:40" pos:end="232:75"><decl pos:start="232:40" pos:end="232:75"><type pos:start="232:40" pos:end="232:75"><name pos:start="232:40" pos:end="232:62"><name pos:start="232:40" pos:end="232:43">enum</name> <name pos:start="232:45" pos:end="232:62">RTSPLowerTransport</name></name></type> <name pos:start="232:64" pos:end="232:75">rtp_protocol</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="233:1" pos:end="235:50"><type pos:start="233:1" pos:end="233:10"><specifier pos:start="233:1" pos:end="233:6">static</specifier> <name pos:start="233:8" pos:end="233:10">int</name></type> <name pos:start="233:12" pos:end="233:28">rtp_new_av_stream</name><parameter_list pos:start="233:29" pos:end="235:49">(<parameter pos:start="233:30" pos:end="233:43"><decl pos:start="233:30" pos:end="233:43"><type pos:start="233:30" pos:end="233:43"><name pos:start="233:30" pos:end="233:40">HTTPContext</name> <modifier pos:start="233:42" pos:end="233:42">*</modifier></type><name pos:start="233:43" pos:end="233:43">c</name></decl></parameter>,
                             <parameter pos:start="234:30" pos:end="234:45"><decl pos:start="234:30" pos:end="234:45"><type pos:start="234:30" pos:end="234:45"><name pos:start="234:30" pos:end="234:32">int</name></type> <name pos:start="234:34" pos:end="234:45">stream_index</name></decl></parameter>, <parameter pos:start="234:48" pos:end="234:76"><decl pos:start="234:48" pos:end="234:76"><type pos:start="234:48" pos:end="234:76"><name pos:start="234:48" pos:end="234:65"><name pos:start="234:48" pos:end="234:53">struct</name> <name pos:start="234:55" pos:end="234:65">sockaddr_in</name></name> <modifier pos:start="234:67" pos:end="234:67">*</modifier></type><name pos:start="234:68" pos:end="234:76">dest_addr</name></decl></parameter>,
                             <parameter pos:start="235:30" pos:end="235:48"><decl pos:start="235:30" pos:end="235:48"><type pos:start="235:30" pos:end="235:48"><name pos:start="235:30" pos:end="235:40">HTTPContext</name> <modifier pos:start="235:42" pos:end="235:42">*</modifier></type><name pos:start="235:43" pos:end="235:48">rtsp_c</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block" pos:start="236:1" pos:end="236:11">/* utils */</comment>
<function_decl pos:start="237:1" pos:end="237:56"><type pos:start="237:1" pos:end="237:13"><specifier pos:start="237:1" pos:end="237:6">static</specifier> <name pos:start="237:8" pos:end="237:13">size_t</name></type> <name pos:start="237:15" pos:end="237:24">htmlencode</name> <parameter_list pos:start="237:26" pos:end="237:55">(<parameter pos:start="237:27" pos:end="237:41"><decl pos:start="237:27" pos:end="237:41"><type pos:start="237:27" pos:end="237:41"><specifier pos:start="237:27" pos:end="237:31">const</specifier> <name pos:start="237:33" pos:end="237:36">char</name> <modifier pos:start="237:38" pos:end="237:38">*</modifier></type><name pos:start="237:39" pos:end="237:41">src</name></decl></parameter>, <parameter pos:start="237:44" pos:end="237:54"><decl pos:start="237:44" pos:end="237:54"><type pos:start="237:44" pos:end="237:54"><name pos:start="237:44" pos:end="237:47">char</name> <modifier pos:start="237:49" pos:end="237:49">*</modifier><modifier pos:start="237:50" pos:end="237:50">*</modifier></type><name pos:start="237:51" pos:end="237:54">dest</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="238:1" pos:end="238:69"><type pos:start="238:1" pos:end="238:18"><specifier pos:start="238:1" pos:end="238:6">static</specifier> <specifier pos:start="238:8" pos:end="238:13">inline</specifier> <name pos:start="238:15" pos:end="238:18">void</name></type> <name pos:start="238:20" pos:end="238:33">cp_html_entity</name> <parameter_list pos:start="238:35" pos:end="238:68">(<parameter pos:start="238:36" pos:end="238:47"><decl pos:start="238:36" pos:end="238:47"><type pos:start="238:36" pos:end="238:47"><name pos:start="238:36" pos:end="238:39">char</name> <modifier pos:start="238:41" pos:end="238:41">*</modifier></type><name pos:start="238:42" pos:end="238:47">buffer</name></decl></parameter>, <parameter pos:start="238:50" pos:end="238:67"><decl pos:start="238:50" pos:end="238:67"><type pos:start="238:50" pos:end="238:67"><specifier pos:start="238:50" pos:end="238:54">const</specifier> <name pos:start="238:56" pos:end="238:59">char</name> <modifier pos:start="238:61" pos:end="238:61">*</modifier></type><name pos:start="238:62" pos:end="238:67">entity</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl pos:start="239:1" pos:end="239:85"><type pos:start="239:1" pos:end="239:17"><specifier pos:start="239:1" pos:end="239:6">static</specifier> <specifier pos:start="239:8" pos:end="239:13">inline</specifier> <name pos:start="239:15" pos:end="239:17">int</name></type> <name pos:start="239:19" pos:end="239:35">check_codec_match</name><parameter_list pos:start="239:36" pos:end="239:84">(<parameter pos:start="239:37" pos:end="239:56"><decl pos:start="239:37" pos:end="239:56"><type pos:start="239:37" pos:end="239:56"><name pos:start="239:37" pos:end="239:51">LayeredAVStream</name> <modifier pos:start="239:53" pos:end="239:53">*</modifier></type><name pos:start="239:54" pos:end="239:56">ccf</name></decl></parameter>, <parameter pos:start="239:59" pos:end="239:71"><decl pos:start="239:59" pos:end="239:71"><type pos:start="239:59" pos:end="239:71"><name pos:start="239:59" pos:end="239:66">AVStream</name> <modifier pos:start="239:68" pos:end="239:68">*</modifier></type><name pos:start="239:69" pos:end="239:71">ccs</name></decl></parameter>, <parameter pos:start="239:74" pos:end="239:83"><decl pos:start="239:74" pos:end="239:83"><type pos:start="239:74" pos:end="239:83"><name pos:start="239:74" pos:end="239:76">int</name></type> <name pos:start="239:78" pos:end="239:83">stream</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt pos:start="241:1" pos:end="241:35"><decl pos:start="241:1" pos:end="241:34"><type pos:start="241:1" pos:end="241:19"><specifier pos:start="241:1" pos:end="241:6">static</specifier> <specifier pos:start="241:8" pos:end="241:12">const</specifier> <name pos:start="241:14" pos:end="241:17">char</name> <modifier pos:start="241:19" pos:end="241:19">*</modifier></type><name pos:start="241:20" pos:end="241:34">my_program_name</name></decl>;</decl_stmt>

<decl_stmt pos:start="243:1" pos:end="243:21"><decl pos:start="243:1" pos:end="243:20"><type pos:start="243:1" pos:end="243:10"><specifier pos:start="243:1" pos:end="243:6">static</specifier> <name pos:start="243:8" pos:end="243:10">int</name></type> <name pos:start="243:12" pos:end="243:20">no_launch</name></decl>;</decl_stmt>
<decl_stmt pos:start="244:1" pos:end="244:34"><decl pos:start="244:1" pos:end="244:33"><type pos:start="244:1" pos:end="244:10"><specifier pos:start="244:1" pos:end="244:6">static</specifier> <name pos:start="244:8" pos:end="244:10">int</name></type> <name pos:start="244:12" pos:end="244:33">need_to_start_children</name></decl>;</decl_stmt>

<comment type="block" pos:start="246:1" pos:end="246:53">/* maximum number of simultaneous HTTP connections */</comment>
<decl_stmt pos:start="247:1" pos:end="247:35"><decl pos:start="247:1" pos:end="247:34"><type pos:start="247:1" pos:end="247:19"><specifier pos:start="247:1" pos:end="247:6">static</specifier> <name pos:start="247:8" pos:end="247:15">unsigned</name> <name pos:start="247:17" pos:end="247:19">int</name></type> <name pos:start="247:21" pos:end="247:34">nb_connections</name></decl>;</decl_stmt>

<decl_stmt pos:start="249:1" pos:end="249:34"><decl pos:start="249:1" pos:end="249:33"><type pos:start="249:1" pos:end="249:15"><specifier pos:start="249:1" pos:end="249:6">static</specifier> <name pos:start="249:8" pos:end="249:15">uint64_t</name></type> <name pos:start="249:17" pos:end="249:33">current_bandwidth</name></decl>;</decl_stmt>

<comment type="block" pos:start="251:1" pos:end="251:62">/* Making this global saves on passing it around everywhere */</comment>
<decl_stmt pos:start="252:1" pos:end="252:24"><decl pos:start="252:1" pos:end="252:23"><type pos:start="252:1" pos:end="252:14"><specifier pos:start="252:1" pos:end="252:6">static</specifier> <name pos:start="252:8" pos:end="252:14">int64_t</name></type> <name pos:start="252:16" pos:end="252:23">cur_time</name></decl>;</decl_stmt>

<decl_stmt pos:start="254:1" pos:end="254:26"><decl pos:start="254:1" pos:end="254:25"><type pos:start="254:1" pos:end="254:12"><specifier pos:start="254:1" pos:end="254:6">static</specifier> <name pos:start="254:8" pos:end="254:12">AVLFG</name></type> <name pos:start="254:14" pos:end="254:25">random_state</name></decl>;</decl_stmt>

<decl_stmt pos:start="256:1" pos:end="256:28"><decl pos:start="256:1" pos:end="256:27"><type pos:start="256:1" pos:end="256:13"><specifier pos:start="256:1" pos:end="256:6">static</specifier> <name pos:start="256:8" pos:end="256:11">FILE</name> <modifier pos:start="256:13" pos:end="256:13">*</modifier></type><name pos:start="256:14" pos:end="256:20">logfile</name> <init pos:start="256:22" pos:end="256:27">= <expr pos:start="256:24" pos:end="256:27"><name pos:start="256:24" pos:end="256:27">NULL</name></expr></init></decl>;</decl_stmt>

<function pos:start="258:1" pos:end="271:1"><type pos:start="258:1" pos:end="258:11"><specifier pos:start="258:1" pos:end="258:6">static</specifier> <name pos:start="258:8" pos:end="258:11">void</name></type> <name pos:start="258:13" pos:end="258:26">unlayer_stream</name><parameter_list pos:start="258:27" pos:end="258:62">(<parameter pos:start="258:28" pos:end="258:39"><decl pos:start="258:28" pos:end="258:39"><type pos:start="258:28" pos:end="258:39"><name pos:start="258:28" pos:end="258:35">AVStream</name> <modifier pos:start="258:37" pos:end="258:37">*</modifier></type><name pos:start="258:38" pos:end="258:39">st</name></decl></parameter>, <parameter pos:start="258:42" pos:end="258:61"><decl pos:start="258:42" pos:end="258:61"><type pos:start="258:42" pos:end="258:61"><name pos:start="258:42" pos:end="258:56">LayeredAVStream</name> <modifier pos:start="258:58" pos:end="258:58">*</modifier></type><name pos:start="258:59" pos:end="258:61">lst</name></decl></parameter>)</parameter_list>
<block pos:start="259:1" pos:end="271:1">{<block_content pos:start="260:5" pos:end="270:43">
    <expr_stmt pos:start="260:5" pos:end="260:37"><expr pos:start="260:5" pos:end="260:36"><call pos:start="260:5" pos:end="260:36"><name pos:start="260:5" pos:end="260:24">avcodec_free_context</name><argument_list pos:start="260:25" pos:end="260:36">(<argument pos:start="260:26" pos:end="260:35"><expr pos:start="260:26" pos:end="260:35"><operator pos:start="260:26" pos:end="260:26">&amp;</operator><name pos:start="260:27" pos:end="260:35"><name pos:start="260:27" pos:end="260:28">st</name><operator pos:start="260:29" pos:end="260:30">-&gt;</operator><name pos:start="260:31" pos:end="260:35">codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="261:5" pos:end="263:0"><expr pos:start="261:5" pos:end="261:42"><call pos:start="261:5" pos:end="261:42"><name pos:start="261:5" pos:end="261:27">avcodec_parameters_free</name><argument_list pos:start="261:28" pos:end="261:42">(<argument pos:start="261:29" pos:end="261:41"><expr pos:start="261:29" pos:end="261:41"><operator pos:start="261:29" pos:end="261:29">&amp;</operator><name pos:start="261:30" pos:end="261:41"><name pos:start="261:30" pos:end="261:31">st</name><operator pos:start="261:32" pos:end="261:33">-&gt;</operator><name pos:start="261:34" pos:end="261:41">codecpar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define pos:start="262:1" pos:end="262:31">#<cpp:directive pos:start="262:2" pos:end="262:7">define</cpp:directive> <cpp:macro pos:start="262:9" pos:end="262:15"><name pos:start="262:9" pos:end="262:12">COPY</name><parameter_list pos:start="262:13" pos:end="262:15">(<parameter pos:start="262:14" pos:end="262:14"><type pos:start="262:14" pos:end="262:14"><name pos:start="262:14" pos:end="262:14">a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="262:17" pos:end="262:31">st-&gt;a = lst-&gt;a;</cpp:value></cpp:define>
    <macro pos:start="263:5" pos:end="263:15"><name pos:start="263:5" pos:end="263:8">COPY</name><argument_list pos:start="263:9" pos:end="263:15">(<argument pos:start="263:10" pos:end="263:14">index</argument>)</argument_list></macro>
    <macro pos:start="264:5" pos:end="264:12"><name pos:start="264:5" pos:end="264:8">COPY</name><argument_list pos:start="264:9" pos:end="264:12">(<argument pos:start="264:10" pos:end="264:11">id</argument>)</argument_list></macro>
    <macro pos:start="265:5" pos:end="265:15"><name pos:start="265:5" pos:end="265:8">COPY</name><argument_list pos:start="265:9" pos:end="265:15">(<argument pos:start="265:10" pos:end="265:14">codec</argument>)</argument_list></macro>
    <macro pos:start="266:5" pos:end="266:18"><name pos:start="266:5" pos:end="266:8">COPY</name><argument_list pos:start="266:9" pos:end="266:18">(<argument pos:start="266:10" pos:end="266:17">codecpar</argument>)</argument_list></macro>
    <macro pos:start="267:5" pos:end="267:19"><name pos:start="267:5" pos:end="267:8">COPY</name><argument_list pos:start="267:9" pos:end="267:19">(<argument pos:start="267:10" pos:end="267:18">time_base</argument>)</argument_list></macro>
    <macro pos:start="268:5" pos:end="268:23"><name pos:start="268:5" pos:end="268:8">COPY</name><argument_list pos:start="268:9" pos:end="268:23">(<argument pos:start="268:10" pos:end="268:22">pts_wrap_bits</argument>)</argument_list></macro>
    <macro pos:start="269:5" pos:end="269:29"><name pos:start="269:5" pos:end="269:8">COPY</name><argument_list pos:start="269:9" pos:end="269:29">(<argument pos:start="269:10" pos:end="269:28">sample_aspect_ratio</argument>)</argument_list></macro>
    <macro pos:start="270:5" pos:end="270:43"><name pos:start="270:5" pos:end="270:8">COPY</name><argument_list pos:start="270:9" pos:end="270:43">(<argument pos:start="270:10" pos:end="270:42">recommended_encoder_configuration</argument>)</argument_list></macro>
</block_content>}</block></function>

<function pos:start="273:1" pos:end="278:1"><type pos:start="273:1" pos:end="273:18"><specifier pos:start="273:1" pos:end="273:6">static</specifier> <specifier pos:start="273:8" pos:end="273:13">inline</specifier> <name pos:start="273:15" pos:end="273:18">void</name></type> <name pos:start="273:20" pos:end="273:33">cp_html_entity</name> <parameter_list pos:start="273:35" pos:end="273:68">(<parameter pos:start="273:36" pos:end="273:47"><decl pos:start="273:36" pos:end="273:47"><type pos:start="273:36" pos:end="273:47"><name pos:start="273:36" pos:end="273:39">char</name> <modifier pos:start="273:41" pos:end="273:41">*</modifier></type><name pos:start="273:42" pos:end="273:47">buffer</name></decl></parameter>, <parameter pos:start="273:50" pos:end="273:67"><decl pos:start="273:50" pos:end="273:67"><type pos:start="273:50" pos:end="273:67"><specifier pos:start="273:50" pos:end="273:54">const</specifier> <name pos:start="273:56" pos:end="273:59">char</name> <modifier pos:start="273:61" pos:end="273:61">*</modifier></type><name pos:start="273:62" pos:end="273:67">entity</name></decl></parameter>)</parameter_list> <block pos:start="273:70" pos:end="278:1">{<block_content pos:start="274:5" pos:end="277:30">
    <if_stmt pos:start="274:5" pos:end="275:15"><if pos:start="274:5" pos:end="275:15">if <condition pos:start="274:8" pos:end="274:27">(<expr pos:start="274:9" pos:end="274:26"><operator pos:start="274:9" pos:end="274:9">!</operator><name pos:start="274:10" pos:end="274:15">buffer</name> <operator pos:start="274:17" pos:end="274:18">||</operator> <operator pos:start="274:20" pos:end="274:20">!</operator><name pos:start="274:21" pos:end="274:26">entity</name></expr>)</condition><block type="pseudo" pos:start="275:9" pos:end="275:15"><block_content pos:start="275:9" pos:end="275:15">
        <return pos:start="275:9" pos:end="275:15">return;</return></block_content></block></if></if_stmt>
    <while pos:start="276:5" pos:end="277:30">while <condition pos:start="276:11" pos:end="276:19">(<expr pos:start="276:12" pos:end="276:18"><operator pos:start="276:12" pos:end="276:12">*</operator><name pos:start="276:13" pos:end="276:18">entity</name></expr>)</condition><block type="pseudo" pos:start="277:9" pos:end="277:30"><block_content pos:start="277:9" pos:end="277:30">
        <expr_stmt pos:start="277:9" pos:end="277:30"><expr pos:start="277:9" pos:end="277:29"><operator pos:start="277:9" pos:end="277:9">*</operator><name pos:start="277:10" pos:end="277:15">buffer</name><operator pos:start="277:16" pos:end="277:17">++</operator> <operator pos:start="277:19" pos:end="277:19">=</operator> <operator pos:start="277:21" pos:end="277:21">*</operator><name pos:start="277:22" pos:end="277:27">entity</name><operator pos:start="277:28" pos:end="277:29">++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="280:1" pos:end="286:3">/**
 * Substitutes known conflicting chars on a text string with
 * their corresponding HTML entities.
 *
 * Returns the number of bytes in the 'encoded' representation
 * not including the terminating NUL.
 */</comment>
<function pos:start="287:1" pos:end="346:1"><type pos:start="287:1" pos:end="287:13"><specifier pos:start="287:1" pos:end="287:6">static</specifier> <name pos:start="287:8" pos:end="287:13">size_t</name></type> <name pos:start="287:15" pos:end="287:24">htmlencode</name> <parameter_list pos:start="287:26" pos:end="287:55">(<parameter pos:start="287:27" pos:end="287:41"><decl pos:start="287:27" pos:end="287:41"><type pos:start="287:27" pos:end="287:41"><specifier pos:start="287:27" pos:end="287:31">const</specifier> <name pos:start="287:33" pos:end="287:36">char</name> <modifier pos:start="287:38" pos:end="287:38">*</modifier></type><name pos:start="287:39" pos:end="287:41">src</name></decl></parameter>, <parameter pos:start="287:44" pos:end="287:54"><decl pos:start="287:44" pos:end="287:54"><type pos:start="287:44" pos:end="287:54"><name pos:start="287:44" pos:end="287:47">char</name> <modifier pos:start="287:49" pos:end="287:49">*</modifier><modifier pos:start="287:50" pos:end="287:50">*</modifier></type><name pos:start="287:51" pos:end="287:54">dest</name></decl></parameter>)</parameter_list> <block pos:start="287:57" pos:end="346:1">{<block_content pos:start="288:5" pos:end="345:22">
    <decl_stmt pos:start="288:5" pos:end="288:30"><decl pos:start="288:5" pos:end="288:29"><type pos:start="288:5" pos:end="288:16"><specifier pos:start="288:5" pos:end="288:9">const</specifier> <name pos:start="288:11" pos:end="288:14">char</name> <modifier pos:start="288:16" pos:end="288:16">*</modifier></type><name pos:start="288:17" pos:end="288:19">amp</name> <init pos:start="288:21" pos:end="288:29">= <expr pos:start="288:23" pos:end="288:29"><literal type="string" pos:start="288:23" pos:end="288:29">"&amp;amp;"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="289:5" pos:end="289:29"><decl pos:start="289:5" pos:end="289:28"><type pos:start="289:5" pos:end="289:16"><specifier pos:start="289:5" pos:end="289:9">const</specifier> <name pos:start="289:11" pos:end="289:14">char</name> <modifier pos:start="289:16" pos:end="289:16">*</modifier></type><name pos:start="289:17" pos:end="289:18">lt</name>  <init pos:start="289:21" pos:end="289:28">= <expr pos:start="289:23" pos:end="289:28"><literal type="string" pos:start="289:23" pos:end="289:28">"&amp;lt;"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="290:5" pos:end="290:29"><decl pos:start="290:5" pos:end="290:28"><type pos:start="290:5" pos:end="290:16"><specifier pos:start="290:5" pos:end="290:9">const</specifier> <name pos:start="290:11" pos:end="290:14">char</name> <modifier pos:start="290:16" pos:end="290:16">*</modifier></type><name pos:start="290:17" pos:end="290:18">gt</name>  <init pos:start="290:21" pos:end="290:28">= <expr pos:start="290:23" pos:end="290:28"><literal type="string" pos:start="290:23" pos:end="290:28">"&amp;gt;"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="291:5" pos:end="291:22"><decl pos:start="291:5" pos:end="291:21"><type pos:start="291:5" pos:end="291:16"><specifier pos:start="291:5" pos:end="291:9">const</specifier> <name pos:start="291:11" pos:end="291:14">char</name> <modifier pos:start="291:16" pos:end="291:16">*</modifier></type><name pos:start="291:17" pos:end="291:21">start</name></decl>;</decl_stmt>
    <decl_stmt pos:start="292:5" pos:end="292:14"><decl pos:start="292:5" pos:end="292:13"><type pos:start="292:5" pos:end="292:10"><name pos:start="292:5" pos:end="292:8">char</name> <modifier pos:start="292:10" pos:end="292:10">*</modifier></type><name pos:start="292:11" pos:end="292:13">tmp</name></decl>;</decl_stmt>
    <decl_stmt pos:start="293:5" pos:end="293:26"><decl pos:start="293:5" pos:end="293:25"><type pos:start="293:5" pos:end="293:10"><name pos:start="293:5" pos:end="293:10">size_t</name></type> <name pos:start="293:12" pos:end="293:21">final_size</name> <init pos:start="293:23" pos:end="293:25">= <expr pos:start="293:25" pos:end="293:25"><literal type="number" pos:start="293:25" pos:end="293:25">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="295:5" pos:end="296:17"><if pos:start="295:5" pos:end="296:17">if <condition pos:start="295:8" pos:end="295:13">(<expr pos:start="295:9" pos:end="295:12"><operator pos:start="295:9" pos:end="295:9">!</operator><name pos:start="295:10" pos:end="295:12">src</name></expr>)</condition><block type="pseudo" pos:start="296:9" pos:end="296:17"><block_content pos:start="296:9" pos:end="296:17">
        <return pos:start="296:9" pos:end="296:17">return <expr pos:start="296:16" pos:end="296:16"><literal type="number" pos:start="296:16" pos:end="296:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="298:5" pos:end="298:16"><expr pos:start="298:5" pos:end="298:15"><name pos:start="298:5" pos:end="298:9">start</name> <operator pos:start="298:11" pos:end="298:11">=</operator> <name pos:start="298:13" pos:end="298:15">src</name></expr>;</expr_stmt>

    <comment type="block" pos:start="300:5" pos:end="300:34">/* Compute needed dest size */</comment>
    <while pos:start="301:5" pos:end="314:5">while <condition pos:start="301:11" pos:end="301:24">(<expr pos:start="301:12" pos:end="301:23"><operator pos:start="301:12" pos:end="301:12">*</operator><name pos:start="301:13" pos:end="301:15">src</name> <operator pos:start="301:17" pos:end="301:18">!=</operator> <literal type="char" pos:start="301:20" pos:end="301:23">'\0'</literal></expr>)</condition> <block pos:start="301:26" pos:end="314:5">{<block_content pos:start="302:9" pos:end="313:14">
        <switch pos:start="302:9" pos:end="312:9">switch<condition pos:start="302:15" pos:end="302:20">(<expr pos:start="302:16" pos:end="302:19"><operator pos:start="302:16" pos:end="302:16">*</operator><name pos:start="302:17" pos:end="302:19">src</name></expr>)</condition> <block pos:start="302:22" pos:end="312:9">{<block_content pos:start="303:13" pos:end="311:29">
            <case pos:start="303:13" pos:end="303:20">case <expr pos:start="303:18" pos:end="303:19"><literal type="number" pos:start="303:18" pos:end="303:19">38</literal></expr>:</case> <comment type="block" pos:start="303:22" pos:end="303:28">/* &amp; */</comment>
                <expr_stmt pos:start="304:17" pos:end="304:32"><expr pos:start="304:17" pos:end="304:31"><name pos:start="304:17" pos:end="304:26">final_size</name> <operator pos:start="304:28" pos:end="304:29">+=</operator> <literal type="number" pos:start="304:31" pos:end="304:31">5</literal></expr>;</expr_stmt>
                <break pos:start="305:17" pos:end="305:22">break;</break>
            <case pos:start="306:13" pos:end="306:20">case <expr pos:start="306:18" pos:end="306:19"><literal type="number" pos:start="306:18" pos:end="306:19">60</literal></expr>:</case> <comment type="block" pos:start="306:22" pos:end="306:28">/* &lt; */</comment>
            <case pos:start="307:13" pos:end="307:20">case <expr pos:start="307:18" pos:end="307:19"><literal type="number" pos:start="307:18" pos:end="307:19">62</literal></expr>:</case> <comment type="block" pos:start="307:22" pos:end="307:28">/* &gt; */</comment>
                <expr_stmt pos:start="308:17" pos:end="308:32"><expr pos:start="308:17" pos:end="308:31"><name pos:start="308:17" pos:end="308:26">final_size</name> <operator pos:start="308:28" pos:end="308:29">+=</operator> <literal type="number" pos:start="308:31" pos:end="308:31">4</literal></expr>;</expr_stmt>
                <break pos:start="309:17" pos:end="309:22">break;</break>
            <default pos:start="310:13" pos:end="310:20">default:</default>
                <expr_stmt pos:start="311:17" pos:end="311:29"><expr pos:start="311:17" pos:end="311:28"><name pos:start="311:17" pos:end="311:26">final_size</name><operator pos:start="311:27" pos:end="311:28">++</operator></expr>;</expr_stmt>
        </block_content>}</block></switch>
        <expr_stmt pos:start="313:9" pos:end="313:14"><expr pos:start="313:9" pos:end="313:13"><name pos:start="313:9" pos:end="313:11">src</name><operator pos:start="313:12" pos:end="313:13">++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt pos:start="316:5" pos:end="316:16"><expr pos:start="316:5" pos:end="316:15"><name pos:start="316:5" pos:end="316:7">src</name> <operator pos:start="316:9" pos:end="316:9">=</operator> <name pos:start="316:11" pos:end="316:15">start</name></expr>;</expr_stmt>
    <expr_stmt pos:start="317:5" pos:end="317:39"><expr pos:start="317:5" pos:end="317:38"><operator pos:start="317:5" pos:end="317:5">*</operator><name pos:start="317:6" pos:end="317:9">dest</name> <operator pos:start="317:11" pos:end="317:11">=</operator> <call pos:start="317:13" pos:end="317:38"><name pos:start="317:13" pos:end="317:22">av_mallocz</name><argument_list pos:start="317:23" pos:end="317:38">(<argument pos:start="317:24" pos:end="317:37"><expr pos:start="317:24" pos:end="317:37"><name pos:start="317:24" pos:end="317:33">final_size</name> <operator pos:start="317:35" pos:end="317:35">+</operator> <literal type="number" pos:start="317:37" pos:end="317:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="318:5" pos:end="319:17"><if pos:start="318:5" pos:end="319:17">if <condition pos:start="318:8" pos:end="318:15">(<expr pos:start="318:9" pos:end="318:14"><operator pos:start="318:9" pos:end="318:9">!</operator><operator pos:start="318:10" pos:end="318:10">*</operator><name pos:start="318:11" pos:end="318:14">dest</name></expr>)</condition><block type="pseudo" pos:start="319:9" pos:end="319:17"><block_content pos:start="319:9" pos:end="319:17">
        <return pos:start="319:9" pos:end="319:17">return <expr pos:start="319:16" pos:end="319:16"><literal type="number" pos:start="319:16" pos:end="319:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block" pos:start="321:5" pos:end="321:20">/* Build dest */</comment>
    <expr_stmt pos:start="322:5" pos:end="322:16"><expr pos:start="322:5" pos:end="322:15"><name pos:start="322:5" pos:end="322:7">tmp</name> <operator pos:start="322:9" pos:end="322:9">=</operator> <operator pos:start="322:11" pos:end="322:11">*</operator><name pos:start="322:12" pos:end="322:15">dest</name></expr>;</expr_stmt>
    <while pos:start="323:5" pos:end="342:5">while <condition pos:start="323:11" pos:end="323:24">(<expr pos:start="323:12" pos:end="323:23"><operator pos:start="323:12" pos:end="323:12">*</operator><name pos:start="323:13" pos:end="323:15">src</name> <operator pos:start="323:17" pos:end="323:18">!=</operator> <literal type="char" pos:start="323:20" pos:end="323:23">'\0'</literal></expr>)</condition> <block pos:start="323:26" pos:end="342:5">{<block_content pos:start="324:9" pos:end="341:14">
        <switch pos:start="324:9" pos:end="340:9">switch<condition pos:start="324:15" pos:end="324:20">(<expr pos:start="324:16" pos:end="324:19"><operator pos:start="324:16" pos:end="324:16">*</operator><name pos:start="324:17" pos:end="324:19">src</name></expr>)</condition> <block pos:start="324:22" pos:end="340:9">{<block_content pos:start="325:13" pos:end="339:25">
            <case pos:start="325:13" pos:end="325:20">case <expr pos:start="325:18" pos:end="325:19"><literal type="number" pos:start="325:18" pos:end="325:19">38</literal></expr>:</case> <comment type="block" pos:start="325:22" pos:end="325:28">/* &amp; */</comment>
                <expr_stmt pos:start="326:17" pos:end="326:42"><expr pos:start="326:17" pos:end="326:41"><call pos:start="326:17" pos:end="326:41"><name pos:start="326:17" pos:end="326:30">cp_html_entity</name> <argument_list pos:start="326:32" pos:end="326:41">(<argument pos:start="326:33" pos:end="326:35"><expr pos:start="326:33" pos:end="326:35"><name pos:start="326:33" pos:end="326:35">tmp</name></expr></argument>, <argument pos:start="326:38" pos:end="326:40"><expr pos:start="326:38" pos:end="326:40"><name pos:start="326:38" pos:end="326:40">amp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="327:17" pos:end="327:25"><expr pos:start="327:17" pos:end="327:24"><name pos:start="327:17" pos:end="327:19">tmp</name> <operator pos:start="327:21" pos:end="327:22">+=</operator> <literal type="number" pos:start="327:24" pos:end="327:24">5</literal></expr>;</expr_stmt>
                <break pos:start="328:17" pos:end="328:22">break;</break>
            <case pos:start="329:13" pos:end="329:20">case <expr pos:start="329:18" pos:end="329:19"><literal type="number" pos:start="329:18" pos:end="329:19">60</literal></expr>:</case> <comment type="block" pos:start="329:22" pos:end="329:28">/* &lt; */</comment>
                <expr_stmt pos:start="330:17" pos:end="330:41"><expr pos:start="330:17" pos:end="330:40"><call pos:start="330:17" pos:end="330:40"><name pos:start="330:17" pos:end="330:30">cp_html_entity</name> <argument_list pos:start="330:32" pos:end="330:40">(<argument pos:start="330:33" pos:end="330:35"><expr pos:start="330:33" pos:end="330:35"><name pos:start="330:33" pos:end="330:35">tmp</name></expr></argument>, <argument pos:start="330:38" pos:end="330:39"><expr pos:start="330:38" pos:end="330:39"><name pos:start="330:38" pos:end="330:39">lt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="331:17" pos:end="331:25"><expr pos:start="331:17" pos:end="331:24"><name pos:start="331:17" pos:end="331:19">tmp</name> <operator pos:start="331:21" pos:end="331:22">+=</operator> <literal type="number" pos:start="331:24" pos:end="331:24">4</literal></expr>;</expr_stmt>
                <break pos:start="332:17" pos:end="332:22">break;</break>
            <case pos:start="333:13" pos:end="333:20">case <expr pos:start="333:18" pos:end="333:19"><literal type="number" pos:start="333:18" pos:end="333:19">62</literal></expr>:</case> <comment type="block" pos:start="333:22" pos:end="333:28">/* &gt; */</comment>
                <expr_stmt pos:start="334:17" pos:end="334:41"><expr pos:start="334:17" pos:end="334:40"><call pos:start="334:17" pos:end="334:40"><name pos:start="334:17" pos:end="334:30">cp_html_entity</name> <argument_list pos:start="334:32" pos:end="334:40">(<argument pos:start="334:33" pos:end="334:35"><expr pos:start="334:33" pos:end="334:35"><name pos:start="334:33" pos:end="334:35">tmp</name></expr></argument>, <argument pos:start="334:38" pos:end="334:39"><expr pos:start="334:38" pos:end="334:39"><name pos:start="334:38" pos:end="334:39">gt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="335:17" pos:end="335:25"><expr pos:start="335:17" pos:end="335:24"><name pos:start="335:17" pos:end="335:19">tmp</name> <operator pos:start="335:21" pos:end="335:22">+=</operator> <literal type="number" pos:start="335:24" pos:end="335:24">4</literal></expr>;</expr_stmt>
                <break pos:start="336:17" pos:end="336:22">break;</break>
            <default pos:start="337:13" pos:end="337:20">default:</default>
                <expr_stmt pos:start="338:17" pos:end="338:28"><expr pos:start="338:17" pos:end="338:27"><operator pos:start="338:17" pos:end="338:17">*</operator><name pos:start="338:18" pos:end="338:20">tmp</name> <operator pos:start="338:22" pos:end="338:22">=</operator> <operator pos:start="338:24" pos:end="338:24">*</operator><name pos:start="338:25" pos:end="338:27">src</name></expr>;</expr_stmt>
                <expr_stmt pos:start="339:17" pos:end="339:25"><expr pos:start="339:17" pos:end="339:24"><name pos:start="339:17" pos:end="339:19">tmp</name> <operator pos:start="339:21" pos:end="339:22">+=</operator> <literal type="number" pos:start="339:24" pos:end="339:24">1</literal></expr>;</expr_stmt>
        </block_content>}</block></switch>
        <expr_stmt pos:start="341:9" pos:end="341:14"><expr pos:start="341:9" pos:end="341:13"><name pos:start="341:9" pos:end="341:11">src</name><operator pos:start="341:12" pos:end="341:13">++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt pos:start="343:5" pos:end="343:16"><expr pos:start="343:5" pos:end="343:15"><operator pos:start="343:5" pos:end="343:5">*</operator><name pos:start="343:6" pos:end="343:8">tmp</name> <operator pos:start="343:10" pos:end="343:10">=</operator> <literal type="char" pos:start="343:12" pos:end="343:15">'\0'</literal></expr>;</expr_stmt>

    <return pos:start="345:5" pos:end="345:22">return <expr pos:start="345:12" pos:end="345:21"><name pos:start="345:12" pos:end="345:21">final_size</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="348:1" pos:end="357:1"><type pos:start="348:1" pos:end="348:14"><specifier pos:start="348:1" pos:end="348:6">static</specifier> <name pos:start="348:8" pos:end="348:14">int64_t</name></type> <name pos:start="348:16" pos:end="348:35">ffm_read_write_index</name><parameter_list pos:start="348:36" pos:end="348:43">(<parameter pos:start="348:37" pos:end="348:42"><decl pos:start="348:37" pos:end="348:42"><type pos:start="348:37" pos:end="348:39"><name pos:start="348:37" pos:end="348:39">int</name></type> <name pos:start="348:41" pos:end="348:42">fd</name></decl></parameter>)</parameter_list>
<block pos:start="349:1" pos:end="357:1">{<block_content pos:start="350:5" pos:end="356:24">
    <decl_stmt pos:start="350:5" pos:end="350:19"><decl pos:start="350:5" pos:end="350:18"><type pos:start="350:5" pos:end="350:11"><name pos:start="350:5" pos:end="350:11">uint8_t</name></type> <name pos:start="350:13" pos:end="350:18"><name pos:start="350:13" pos:end="350:15">buf</name><index pos:start="350:16" pos:end="350:18">[<expr pos:start="350:17" pos:end="350:17"><literal type="number" pos:start="350:17" pos:end="350:17">8</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt pos:start="352:5" pos:end="353:28"><if pos:start="352:5" pos:end="353:28">if <condition pos:start="352:8" pos:end="352:35">(<expr pos:start="352:9" pos:end="352:34"><call pos:start="352:9" pos:end="352:30"><name pos:start="352:9" pos:end="352:13">lseek</name><argument_list pos:start="352:14" pos:end="352:30">(<argument pos:start="352:15" pos:end="352:16"><expr pos:start="352:15" pos:end="352:16"><name pos:start="352:15" pos:end="352:16">fd</name></expr></argument>, <argument pos:start="352:19" pos:end="352:19"><expr pos:start="352:19" pos:end="352:19"><literal type="number" pos:start="352:19" pos:end="352:19">8</literal></expr></argument>, <argument pos:start="352:22" pos:end="352:29"><expr pos:start="352:22" pos:end="352:29"><name pos:start="352:22" pos:end="352:29">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="352:32" pos:end="352:32">&lt;</operator> <literal type="number" pos:start="352:34" pos:end="352:34">0</literal></expr>)</condition><block type="pseudo" pos:start="353:9" pos:end="353:28"><block_content pos:start="353:9" pos:end="353:28">
        <return pos:start="353:9" pos:end="353:28">return <expr pos:start="353:16" pos:end="353:27"><call pos:start="353:16" pos:end="353:27"><name pos:start="353:16" pos:end="353:22">AVERROR</name><argument_list pos:start="353:23" pos:end="353:27">(<argument pos:start="353:24" pos:end="353:26"><expr pos:start="353:24" pos:end="353:26"><name pos:start="353:24" pos:end="353:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt pos:start="354:5" pos:end="355:28"><if pos:start="354:5" pos:end="355:28">if <condition pos:start="354:8" pos:end="354:30">(<expr pos:start="354:9" pos:end="354:29"><call pos:start="354:9" pos:end="354:24"><name pos:start="354:9" pos:end="354:12">read</name><argument_list pos:start="354:13" pos:end="354:24">(<argument pos:start="354:14" pos:end="354:15"><expr pos:start="354:14" pos:end="354:15"><name pos:start="354:14" pos:end="354:15">fd</name></expr></argument>, <argument pos:start="354:18" pos:end="354:20"><expr pos:start="354:18" pos:end="354:20"><name pos:start="354:18" pos:end="354:20">buf</name></expr></argument>, <argument pos:start="354:23" pos:end="354:23"><expr pos:start="354:23" pos:end="354:23"><literal type="number" pos:start="354:23" pos:end="354:23">8</literal></expr></argument>)</argument_list></call> <operator pos:start="354:26" pos:end="354:27">!=</operator> <literal type="number" pos:start="354:29" pos:end="354:29">8</literal></expr>)</condition><block type="pseudo" pos:start="355:9" pos:end="355:28"><block_content pos:start="355:9" pos:end="355:28">
        <return pos:start="355:9" pos:end="355:28">return <expr pos:start="355:16" pos:end="355:27"><call pos:start="355:16" pos:end="355:27"><name pos:start="355:16" pos:end="355:22">AVERROR</name><argument_list pos:start="355:23" pos:end="355:27">(<argument pos:start="355:24" pos:end="355:26"><expr pos:start="355:24" pos:end="355:26"><name pos:start="355:24" pos:end="355:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return pos:start="356:5" pos:end="356:24">return <expr pos:start="356:12" pos:end="356:23"><call pos:start="356:12" pos:end="356:23"><name pos:start="356:12" pos:end="356:18">AV_RB64</name><argument_list pos:start="356:19" pos:end="356:23">(<argument pos:start="356:20" pos:end="356:22"><expr pos:start="356:20" pos:end="356:22"><name pos:start="356:20" pos:end="356:22">buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function pos:start="359:1" pos:end="375:1"><type pos:start="359:1" pos:end="359:10"><specifier pos:start="359:1" pos:end="359:6">static</specifier> <name pos:start="359:8" pos:end="359:10">int</name></type> <name pos:start="359:12" pos:end="359:32">ffm_write_write_index</name><parameter_list pos:start="359:33" pos:end="359:53">(<parameter pos:start="359:34" pos:end="359:39"><decl pos:start="359:34" pos:end="359:39"><type pos:start="359:34" pos:end="359:39"><name pos:start="359:34" pos:end="359:36">int</name></type> <name pos:start="359:38" pos:end="359:39">fd</name></decl></parameter>, <parameter pos:start="359:42" pos:end="359:52"><decl pos:start="359:42" pos:end="359:52"><type pos:start="359:42" pos:end="359:52"><name pos:start="359:42" pos:end="359:48">int64_t</name></type> <name pos:start="359:50" pos:end="359:52">pos</name></decl></parameter>)</parameter_list>
<block pos:start="360:1" pos:end="375:1">{<block_content pos:start="361:5" pos:end="374:24">
    <decl_stmt pos:start="361:5" pos:end="361:19"><decl pos:start="361:5" pos:end="361:18"><type pos:start="361:5" pos:end="361:11"><name pos:start="361:5" pos:end="361:11">uint8_t</name></type> <name pos:start="361:13" pos:end="361:18"><name pos:start="361:13" pos:end="361:15">buf</name><index pos:start="361:16" pos:end="361:18">[<expr pos:start="361:17" pos:end="361:17"><literal type="number" pos:start="361:17" pos:end="361:17">8</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="362:5" pos:end="362:10"><decl pos:start="362:5" pos:end="362:9"><type pos:start="362:5" pos:end="362:7"><name pos:start="362:5" pos:end="362:7">int</name></type> <name pos:start="362:9" pos:end="362:9">i</name></decl>;</decl_stmt>

    <for pos:start="364:5" pos:end="365:46">for<control pos:start="364:8" pos:end="364:20">(<init pos:start="364:9" pos:end="364:12"><expr pos:start="364:9" pos:end="364:11"><name pos:start="364:9" pos:end="364:9">i</name><operator pos:start="364:10" pos:end="364:10">=</operator><literal type="number" pos:start="364:11" pos:end="364:11">0</literal></expr>;</init><condition pos:start="364:13" pos:end="364:16"><expr pos:start="364:13" pos:end="364:15"><name pos:start="364:13" pos:end="364:13">i</name><operator pos:start="364:14" pos:end="364:14">&lt;</operator><literal type="number" pos:start="364:15" pos:end="364:15">8</literal></expr>;</condition><incr pos:start="364:17" pos:end="364:19"><expr pos:start="364:17" pos:end="364:19"><name pos:start="364:17" pos:end="364:17">i</name><operator pos:start="364:18" pos:end="364:19">++</operator></expr></incr>)</control><block type="pseudo" pos:start="365:9" pos:end="365:46"><block_content pos:start="365:9" pos:end="365:46">
        <expr_stmt pos:start="365:9" pos:end="365:46"><expr pos:start="365:9" pos:end="365:45"><name pos:start="365:9" pos:end="365:14"><name pos:start="365:9" pos:end="365:11">buf</name><index pos:start="365:12" pos:end="365:14">[<expr pos:start="365:13" pos:end="365:13"><name pos:start="365:13" pos:end="365:13">i</name></expr>]</index></name> <operator pos:start="365:16" pos:end="365:16">=</operator> <operator pos:start="365:18" pos:end="365:18">(</operator><name pos:start="365:19" pos:end="365:21">pos</name> <operator pos:start="365:23" pos:end="365:24">&gt;&gt;</operator> <operator pos:start="365:26" pos:end="365:26">(</operator><literal type="number" pos:start="365:27" pos:end="365:30">56</literal> <operator pos:start="365:30" pos:end="365:30">-</operator> <name pos:start="365:32" pos:end="365:32">i</name> <operator pos:start="365:34" pos:end="365:34">*</operator> <literal type="number" pos:start="365:36" pos:end="365:36">8</literal><operator pos:start="365:37" pos:end="365:37">)</operator><operator pos:start="365:38" pos:end="365:38">)</operator> <operator pos:start="365:40" pos:end="365:40">&amp;</operator> <literal type="number" pos:start="365:42" pos:end="365:45">0xff</literal></expr>;</expr_stmt></block_content></block></for>
    <if_stmt pos:start="366:5" pos:end="367:22"><if pos:start="366:5" pos:end="367:22">if <condition pos:start="366:8" pos:end="366:35">(<expr pos:start="366:9" pos:end="366:34"><call pos:start="366:9" pos:end="366:30"><name pos:start="366:9" pos:end="366:13">lseek</name><argument_list pos:start="366:14" pos:end="366:30">(<argument pos:start="366:15" pos:end="366:16"><expr pos:start="366:15" pos:end="366:16"><name pos:start="366:15" pos:end="366:16">fd</name></expr></argument>, <argument pos:start="366:19" pos:end="366:19"><expr pos:start="366:19" pos:end="366:19"><literal type="number" pos:start="366:19" pos:end="366:19">8</literal></expr></argument>, <argument pos:start="366:22" pos:end="366:29"><expr pos:start="366:22" pos:end="366:29"><name pos:start="366:22" pos:end="366:29">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="366:32" pos:end="366:32">&lt;</operator> <literal type="number" pos:start="366:34" pos:end="366:34">0</literal></expr>)</condition><block type="pseudo" pos:start="367:9" pos:end="367:22"><block_content pos:start="367:9" pos:end="367:22">
        <goto pos:start="367:9" pos:end="367:22">goto <name pos:start="367:14" pos:end="367:21">bail_eio</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt pos:start="368:5" pos:end="369:22"><if pos:start="368:5" pos:end="369:22">if <condition pos:start="368:8" pos:end="368:31">(<expr pos:start="368:9" pos:end="368:30"><call pos:start="368:9" pos:end="368:25"><name pos:start="368:9" pos:end="368:13">write</name><argument_list pos:start="368:14" pos:end="368:25">(<argument pos:start="368:15" pos:end="368:16"><expr pos:start="368:15" pos:end="368:16"><name pos:start="368:15" pos:end="368:16">fd</name></expr></argument>, <argument pos:start="368:19" pos:end="368:21"><expr pos:start="368:19" pos:end="368:21"><name pos:start="368:19" pos:end="368:21">buf</name></expr></argument>, <argument pos:start="368:24" pos:end="368:24"><expr pos:start="368:24" pos:end="368:24"><literal type="number" pos:start="368:24" pos:end="368:24">8</literal></expr></argument>)</argument_list></call> <operator pos:start="368:27" pos:end="368:28">!=</operator> <literal type="number" pos:start="368:30" pos:end="368:30">8</literal></expr>)</condition><block type="pseudo" pos:start="369:9" pos:end="369:22"><block_content pos:start="369:9" pos:end="369:22">
        <goto pos:start="369:9" pos:end="369:22">goto <name pos:start="369:14" pos:end="369:21">bail_eio</name>;</goto></block_content></block></if></if_stmt>

    <return pos:start="371:5" pos:end="371:13">return <expr pos:start="371:12" pos:end="371:12"><literal type="number" pos:start="371:12" pos:end="371:12">8</literal></expr>;</return>

<label pos:start="373:1" pos:end="373:9"><name pos:start="373:1" pos:end="373:8">bail_eio</name>:</label>
    <return pos:start="374:5" pos:end="374:24">return <expr pos:start="374:12" pos:end="374:23"><call pos:start="374:12" pos:end="374:23"><name pos:start="374:12" pos:end="374:18">AVERROR</name><argument_list pos:start="374:19" pos:end="374:23">(<argument pos:start="374:20" pos:end="374:22"><expr pos:start="374:20" pos:end="374:22"><name pos:start="374:20" pos:end="374:22">EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function pos:start="377:1" pos:end="383:1"><type pos:start="377:1" pos:end="377:11"><specifier pos:start="377:1" pos:end="377:6">static</specifier> <name pos:start="377:8" pos:end="377:11">void</name></type> <name pos:start="377:13" pos:end="377:31">ffm_set_write_index</name><parameter_list pos:start="377:32" pos:end="378:50">(<parameter pos:start="377:33" pos:end="377:50"><decl pos:start="377:33" pos:end="377:50"><type pos:start="377:33" pos:end="377:50"><name pos:start="377:33" pos:end="377:47">AVFormatContext</name> <modifier pos:start="377:49" pos:end="377:49">*</modifier></type><name pos:start="377:50" pos:end="377:50">s</name></decl></parameter>, <parameter pos:start="377:53" pos:end="377:63"><decl pos:start="377:53" pos:end="377:63"><type pos:start="377:53" pos:end="377:63"><name pos:start="377:53" pos:end="377:59">int64_t</name></type> <name pos:start="377:61" pos:end="377:63">pos</name></decl></parameter>,
                                <parameter pos:start="378:33" pos:end="378:49"><decl pos:start="378:33" pos:end="378:49"><type pos:start="378:33" pos:end="378:49"><name pos:start="378:33" pos:end="378:39">int64_t</name></type> <name pos:start="378:41" pos:end="378:49">file_size</name></decl></parameter>)</parameter_list>
<block pos:start="379:1" pos:end="383:1">{<block_content pos:start="380:5" pos:end="382:74">
    <expr_stmt pos:start="380:5" pos:end="380:68"><expr pos:start="380:5" pos:end="380:67"><call pos:start="380:5" pos:end="380:67"><name pos:start="380:5" pos:end="380:18">av_opt_set_int</name><argument_list pos:start="380:19" pos:end="380:67">(<argument pos:start="380:20" pos:end="380:20"><expr pos:start="380:20" pos:end="380:20"><name pos:start="380:20" pos:end="380:20">s</name></expr></argument>, <argument pos:start="380:23" pos:end="380:39"><expr pos:start="380:23" pos:end="380:39"><literal type="string" pos:start="380:23" pos:end="380:39">"server_attached"</literal></expr></argument>, <argument pos:start="380:42" pos:end="380:42"><expr pos:start="380:42" pos:end="380:42"><literal type="number" pos:start="380:42" pos:end="380:42">1</literal></expr></argument>, <argument pos:start="380:45" pos:end="380:66"><expr pos:start="380:45" pos:end="380:66"><name pos:start="380:45" pos:end="380:66">AV_OPT_SEARCH_CHILDREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="381:5" pos:end="381:70"><expr pos:start="381:5" pos:end="381:69"><call pos:start="381:5" pos:end="381:69"><name pos:start="381:5" pos:end="381:18">av_opt_set_int</name><argument_list pos:start="381:19" pos:end="381:69">(<argument pos:start="381:20" pos:end="381:20"><expr pos:start="381:20" pos:end="381:20"><name pos:start="381:20" pos:end="381:20">s</name></expr></argument>, <argument pos:start="381:23" pos:end="381:39"><expr pos:start="381:23" pos:end="381:39"><literal type="string" pos:start="381:23" pos:end="381:39">"ffm_write_index"</literal></expr></argument>, <argument pos:start="381:42" pos:end="381:44"><expr pos:start="381:42" pos:end="381:44"><name pos:start="381:42" pos:end="381:44">pos</name></expr></argument>, <argument pos:start="381:47" pos:end="381:68"><expr pos:start="381:47" pos:end="381:68"><name pos:start="381:47" pos:end="381:68">AV_OPT_SEARCH_CHILDREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="382:5" pos:end="382:74"><expr pos:start="382:5" pos:end="382:73"><call pos:start="382:5" pos:end="382:73"><name pos:start="382:5" pos:end="382:18">av_opt_set_int</name><argument_list pos:start="382:19" pos:end="382:73">(<argument pos:start="382:20" pos:end="382:20"><expr pos:start="382:20" pos:end="382:20"><name pos:start="382:20" pos:end="382:20">s</name></expr></argument>, <argument pos:start="382:23" pos:end="382:37"><expr pos:start="382:23" pos:end="382:37"><literal type="string" pos:start="382:23" pos:end="382:37">"ffm_file_size"</literal></expr></argument>, <argument pos:start="382:40" pos:end="382:48"><expr pos:start="382:40" pos:end="382:48"><name pos:start="382:40" pos:end="382:48">file_size</name></expr></argument>, <argument pos:start="382:51" pos:end="382:72"><expr pos:start="382:51" pos:end="382:72"><name pos:start="382:51" pos:end="382:72">AV_OPT_SEARCH_CHILDREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="385:1" pos:end="401:1"><type pos:start="385:1" pos:end="385:13"><specifier pos:start="385:1" pos:end="385:6">static</specifier> <name pos:start="385:8" pos:end="385:11">char</name> <modifier pos:start="385:13" pos:end="385:13">*</modifier></type><name pos:start="385:14" pos:end="385:19">ctime1</name><parameter_list pos:start="385:20" pos:end="385:48">(<parameter pos:start="385:21" pos:end="385:30"><decl pos:start="385:21" pos:end="385:30"><type pos:start="385:21" pos:end="385:30"><name pos:start="385:21" pos:end="385:24">char</name> <modifier pos:start="385:26" pos:end="385:26">*</modifier></type><name pos:start="385:27" pos:end="385:30">buf2</name></decl></parameter>, <parameter pos:start="385:33" pos:end="385:47"><decl pos:start="385:33" pos:end="385:47"><type pos:start="385:33" pos:end="385:47"><name pos:start="385:33" pos:end="385:38">size_t</name></type> <name pos:start="385:40" pos:end="385:47">buf_size</name></decl></parameter>)</parameter_list>
<block pos:start="386:1" pos:end="401:1">{<block_content pos:start="387:5" pos:end="400:16">
    <decl_stmt pos:start="387:5" pos:end="387:14"><decl pos:start="387:5" pos:end="387:13"><type pos:start="387:5" pos:end="387:10"><name pos:start="387:5" pos:end="387:10">time_t</name></type> <name pos:start="387:12" pos:end="387:13">ti</name></decl>;</decl_stmt>
    <decl_stmt pos:start="388:5" pos:end="388:12"><decl pos:start="388:5" pos:end="388:11"><type pos:start="388:5" pos:end="388:10"><name pos:start="388:5" pos:end="388:8">char</name> <modifier pos:start="388:10" pos:end="388:10">*</modifier></type><name pos:start="388:11" pos:end="388:11">p</name></decl>;</decl_stmt>

    <expr_stmt pos:start="390:5" pos:end="390:20"><expr pos:start="390:5" pos:end="390:19"><name pos:start="390:5" pos:end="390:6">ti</name> <operator pos:start="390:8" pos:end="390:8">=</operator> <call pos:start="390:10" pos:end="390:19"><name pos:start="390:10" pos:end="390:13">time</name><argument_list pos:start="390:14" pos:end="390:19">(<argument pos:start="390:15" pos:end="390:18"><expr pos:start="390:15" pos:end="390:18"><name pos:start="390:15" pos:end="390:18">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="391:5" pos:end="391:19"><expr pos:start="391:5" pos:end="391:18"><name pos:start="391:5" pos:end="391:5">p</name> <operator pos:start="391:7" pos:end="391:7">=</operator> <call pos:start="391:9" pos:end="391:18"><name pos:start="391:9" pos:end="391:13">ctime</name><argument_list pos:start="391:14" pos:end="391:18">(<argument pos:start="391:15" pos:end="391:17"><expr pos:start="391:15" pos:end="391:17"><operator pos:start="391:15" pos:end="391:15">&amp;</operator><name pos:start="391:16" pos:end="391:17">ti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="392:5" pos:end="395:5"><if pos:start="392:5" pos:end="395:5">if <condition pos:start="392:8" pos:end="392:18">(<expr pos:start="392:9" pos:end="392:17"><operator pos:start="392:9" pos:end="392:9">!</operator><name pos:start="392:10" pos:end="392:10">p</name> <operator pos:start="392:12" pos:end="392:13">||</operator> <operator pos:start="392:15" pos:end="392:15">!</operator><operator pos:start="392:16" pos:end="392:16">*</operator><name pos:start="392:17" pos:end="392:17">p</name></expr>)</condition> <block pos:start="392:20" pos:end="395:5">{<block_content pos:start="393:9" pos:end="394:20">
        <expr_stmt pos:start="393:9" pos:end="393:21"><expr pos:start="393:9" pos:end="393:20"><operator pos:start="393:9" pos:end="393:9">*</operator><name pos:start="393:10" pos:end="393:13">buf2</name> <operator pos:start="393:15" pos:end="393:15">=</operator> <literal type="char" pos:start="393:17" pos:end="393:20">'\0'</literal></expr>;</expr_stmt>
        <return pos:start="394:9" pos:end="394:20">return <expr pos:start="394:16" pos:end="394:19"><name pos:start="394:16" pos:end="394:19">buf2</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="396:5" pos:end="396:34"><expr pos:start="396:5" pos:end="396:33"><call pos:start="396:5" pos:end="396:33"><name pos:start="396:5" pos:end="396:14">av_strlcpy</name><argument_list pos:start="396:15" pos:end="396:33">(<argument pos:start="396:16" pos:end="396:19"><expr pos:start="396:16" pos:end="396:19"><name pos:start="396:16" pos:end="396:19">buf2</name></expr></argument>, <argument pos:start="396:22" pos:end="396:22"><expr pos:start="396:22" pos:end="396:22"><name pos:start="396:22" pos:end="396:22">p</name></expr></argument>, <argument pos:start="396:25" pos:end="396:32"><expr pos:start="396:25" pos:end="396:32"><name pos:start="396:25" pos:end="396:32">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="397:5" pos:end="397:32"><expr pos:start="397:5" pos:end="397:31"><name pos:start="397:5" pos:end="397:5">p</name> <operator pos:start="397:7" pos:end="397:7">=</operator> <name pos:start="397:9" pos:end="397:12">buf2</name> <operator pos:start="397:14" pos:end="397:14">+</operator> <call pos:start="397:16" pos:end="397:27"><name pos:start="397:16" pos:end="397:21">strlen</name><argument_list pos:start="397:22" pos:end="397:27">(<argument pos:start="397:23" pos:end="397:26"><expr pos:start="397:23" pos:end="397:26"><name pos:start="397:23" pos:end="397:26">buf2</name></expr></argument>)</argument_list></call> <operator pos:start="397:29" pos:end="397:29">-</operator> <literal type="number" pos:start="397:31" pos:end="397:31">1</literal></expr>;</expr_stmt>
    <if_stmt pos:start="398:5" pos:end="399:18"><if pos:start="398:5" pos:end="399:18">if <condition pos:start="398:8" pos:end="398:19">(<expr pos:start="398:9" pos:end="398:18"><operator pos:start="398:9" pos:end="398:9">*</operator><name pos:start="398:10" pos:end="398:10">p</name> <operator pos:start="398:12" pos:end="398:13">==</operator> <literal type="char" pos:start="398:15" pos:end="398:18">'\n'</literal></expr>)</condition><block type="pseudo" pos:start="399:9" pos:end="399:18"><block_content pos:start="399:9" pos:end="399:18">
        <expr_stmt pos:start="399:9" pos:end="399:18"><expr pos:start="399:9" pos:end="399:17"><operator pos:start="399:9" pos:end="399:9">*</operator><name pos:start="399:10" pos:end="399:10">p</name> <operator pos:start="399:12" pos:end="399:12">=</operator> <literal type="char" pos:start="399:14" pos:end="399:17">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return pos:start="400:5" pos:end="400:16">return <expr pos:start="400:12" pos:end="400:15"><name pos:start="400:12" pos:end="400:15">buf2</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="403:1" pos:end="421:0"><type pos:start="403:1" pos:end="403:11"><specifier pos:start="403:1" pos:end="403:6">static</specifier> <name pos:start="403:8" pos:end="403:11">void</name></type> <name pos:start="403:13" pos:end="403:21">http_vlog</name><parameter_list pos:start="403:22" pos:end="403:53">(<parameter pos:start="403:23" pos:end="403:37"><decl pos:start="403:23" pos:end="403:37"><type pos:start="403:23" pos:end="403:37"><specifier pos:start="403:23" pos:end="403:27">const</specifier> <name pos:start="403:29" pos:end="403:32">char</name> <modifier pos:start="403:34" pos:end="403:34">*</modifier></type><name pos:start="403:35" pos:end="403:37">fmt</name></decl></parameter>, <parameter pos:start="403:40" pos:end="403:52"><decl pos:start="403:40" pos:end="403:52"><type pos:start="403:40" pos:end="403:52"><name pos:start="403:40" pos:end="403:46">va_list</name></type> <name pos:start="403:48" pos:end="403:52">vargs</name></decl></parameter>)</parameter_list>
<block pos:start="404:1" pos:end="421:0">{<block_content pos:start="405:5" pos:end="417:20">
    <decl_stmt pos:start="405:5" pos:end="405:32"><decl pos:start="405:5" pos:end="405:31"><type pos:start="405:5" pos:end="405:14"><specifier pos:start="405:5" pos:end="405:10">static</specifier> <name pos:start="405:12" pos:end="405:14">int</name></type> <name pos:start="405:16" pos:end="405:27">print_prefix</name> <init pos:start="405:29" pos:end="405:31">= <expr pos:start="405:31" pos:end="405:31"><literal type="number" pos:start="405:31" pos:end="405:31">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="406:5" pos:end="406:17"><decl pos:start="406:5" pos:end="406:16"><type pos:start="406:5" pos:end="406:8"><name pos:start="406:5" pos:end="406:8">char</name></type> <name pos:start="406:10" pos:end="406:16"><name pos:start="406:10" pos:end="406:12">buf</name><index pos:start="406:13" pos:end="406:16">[<expr pos:start="406:14" pos:end="406:15"><literal type="number" pos:start="406:14" pos:end="406:15">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt pos:start="408:5" pos:end="409:15"><if pos:start="408:5" pos:end="409:15">if <condition pos:start="408:8" pos:end="408:17">(<expr pos:start="408:9" pos:end="408:16"><operator pos:start="408:9" pos:end="408:9">!</operator><name pos:start="408:10" pos:end="408:16">logfile</name></expr>)</condition><block type="pseudo" pos:start="409:9" pos:end="409:15"><block_content pos:start="409:9" pos:end="409:15">
        <return pos:start="409:9" pos:end="409:15">return;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="411:5" pos:end="414:5"><if pos:start="411:5" pos:end="414:5">if <condition pos:start="411:8" pos:end="411:21">(<expr pos:start="411:9" pos:end="411:20"><name pos:start="411:9" pos:end="411:20">print_prefix</name></expr>)</condition> <block pos:start="411:23" pos:end="414:5">{<block_content pos:start="412:9" pos:end="413:37">
        <expr_stmt pos:start="412:9" pos:end="412:33"><expr pos:start="412:9" pos:end="412:32"><call pos:start="412:9" pos:end="412:32"><name pos:start="412:9" pos:end="412:14">ctime1</name><argument_list pos:start="412:15" pos:end="412:32">(<argument pos:start="412:16" pos:end="412:18"><expr pos:start="412:16" pos:end="412:18"><name pos:start="412:16" pos:end="412:18">buf</name></expr></argument>, <argument pos:start="412:21" pos:end="412:31"><expr pos:start="412:21" pos:end="412:31"><sizeof pos:start="412:21" pos:end="412:31">sizeof<argument_list pos:start="412:27" pos:end="412:31">(<argument pos:start="412:28" pos:end="412:30"><expr pos:start="412:28" pos:end="412:30"><name pos:start="412:28" pos:end="412:30">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="413:9" pos:end="413:37"><expr pos:start="413:9" pos:end="413:36"><call pos:start="413:9" pos:end="413:36"><name pos:start="413:9" pos:end="413:15">fprintf</name><argument_list pos:start="413:16" pos:end="413:36">(<argument pos:start="413:17" pos:end="413:23"><expr pos:start="413:17" pos:end="413:23"><name pos:start="413:17" pos:end="413:23">logfile</name></expr></argument>, <argument pos:start="413:26" pos:end="413:30"><expr pos:start="413:26" pos:end="413:30"><literal type="string" pos:start="413:26" pos:end="413:30">"%s "</literal></expr></argument>, <argument pos:start="413:33" pos:end="413:35"><expr pos:start="413:33" pos:end="413:35"><name pos:start="413:33" pos:end="413:35">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="415:5" pos:end="415:45"><expr pos:start="415:5" pos:end="415:44"><name pos:start="415:5" pos:end="415:16">print_prefix</name> <operator pos:start="415:18" pos:end="415:18">=</operator> <call pos:start="415:20" pos:end="415:36"><name pos:start="415:20" pos:end="415:25">strstr</name><argument_list pos:start="415:26" pos:end="415:36">(<argument pos:start="415:27" pos:end="415:29"><expr pos:start="415:27" pos:end="415:29"><name pos:start="415:27" pos:end="415:29">fmt</name></expr></argument>, <argument pos:start="415:32" pos:end="415:35"><expr pos:start="415:32" pos:end="415:35"><literal type="string" pos:start="415:32" pos:end="415:35">"\n"</literal></expr></argument>)</argument_list></call> <operator pos:start="415:38" pos:end="415:39">!=</operator> <name pos:start="415:41" pos:end="415:44">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="416:5" pos:end="416:34"><expr pos:start="416:5" pos:end="416:33"><call pos:start="416:5" pos:end="416:33"><name pos:start="416:5" pos:end="416:12">vfprintf</name><argument_list pos:start="416:13" pos:end="416:33">(<argument pos:start="416:14" pos:end="416:20"><expr pos:start="416:14" pos:end="416:20"><name pos:start="416:14" pos:end="416:20">logfile</name></expr></argument>, <argument pos:start="416:23" pos:end="416:25"><expr pos:start="416:23" pos:end="416:25"><name pos:start="416:23" pos:end="416:25">fmt</name></expr></argument>, <argument pos:start="416:28" pos:end="416:32"><expr pos:start="416:28" pos:end="416:32"><name pos:start="416:28" pos:end="416:32">vargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="417:5" pos:end="417:20"><expr pos:start="417:5" pos:end="417:19"><call pos:start="417:5" pos:end="417:19"><name pos:start="417:5" pos:end="417:10">fflush</name><argument_list pos:start="417:11" pos:end="417:19">(<argument pos:start="417:12" pos:end="417:18"><expr pos:start="417:12" pos:end="417:18"><name pos:start="417:12" pos:end="417:18">logfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef pos:start="420:1" pos:end="420:15">#<cpp:directive pos:start="420:2" pos:end="420:6">ifdef</cpp:directive> <name pos:start="420:8" pos:end="420:15">__GNUC__</name></cpp:ifdef>
<macro pos:start="421:1" pos:end="423:0"><name pos:start="421:1" pos:end="421:13">__attribute__</name> <argument_list pos:start="421:15" pos:end="423:0">(<argument pos:start="421:16" pos:end="421:38">(format (printf, <literal type="number" pos:start="421:33" pos:end="421:33">1</literal>, <literal type="number" pos:start="421:36" pos:end="421:36">2</literal>))</argument>)</argument_list></macro>
<cpp:endif pos:start="422:1" pos:end="422:6">#<cpp:directive pos:start="422:2" pos:end="422:6">endif</cpp:directive></cpp:endif>
<function pos:start="423:1" pos:end="429:1"><type pos:start="423:1" pos:end="423:11"><specifier pos:start="423:1" pos:end="423:6">static</specifier> <name pos:start="423:8" pos:end="423:11">void</name></type> <name pos:start="423:13" pos:end="423:20">http_log</name><parameter_list pos:start="423:21" pos:end="423:42">(<parameter pos:start="423:22" pos:end="423:36"><decl pos:start="423:22" pos:end="423:36"><type pos:start="423:22" pos:end="423:33"><specifier pos:start="423:22" pos:end="423:26">const</specifier> <name pos:start="423:28" pos:end="423:31">char</name> <modifier pos:start="423:33" pos:end="423:33">*</modifier></type><name pos:start="423:34" pos:end="423:36">fmt</name></decl></parameter>, <parameter pos:start="423:39" pos:end="423:41"><decl pos:start="423:39" pos:end="423:41"><type pos:start="423:39" pos:end="423:41"><modifier pos:start="423:39" pos:end="423:41">...</modifier></type></decl></parameter>)</parameter_list>
<block pos:start="424:1" pos:end="429:1">{<block_content pos:start="425:5" pos:end="428:18">
    <decl_stmt pos:start="425:5" pos:end="425:18"><decl pos:start="425:5" pos:end="425:17"><type pos:start="425:5" pos:end="425:11"><name pos:start="425:5" pos:end="425:11">va_list</name></type> <name pos:start="425:13" pos:end="425:17">vargs</name></decl>;</decl_stmt>
    <expr_stmt pos:start="426:5" pos:end="426:25"><expr pos:start="426:5" pos:end="426:24"><call pos:start="426:5" pos:end="426:24"><name pos:start="426:5" pos:end="426:12">va_start</name><argument_list pos:start="426:13" pos:end="426:24">(<argument pos:start="426:14" pos:end="426:18"><expr pos:start="426:14" pos:end="426:18"><name pos:start="426:14" pos:end="426:18">vargs</name></expr></argument>, <argument pos:start="426:21" pos:end="426:23"><expr pos:start="426:21" pos:end="426:23"><name pos:start="426:21" pos:end="426:23">fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="427:5" pos:end="427:26"><expr pos:start="427:5" pos:end="427:25"><call pos:start="427:5" pos:end="427:25"><name pos:start="427:5" pos:end="427:13">http_vlog</name><argument_list pos:start="427:14" pos:end="427:25">(<argument pos:start="427:15" pos:end="427:17"><expr pos:start="427:15" pos:end="427:17"><name pos:start="427:15" pos:end="427:17">fmt</name></expr></argument>, <argument pos:start="427:20" pos:end="427:24"><expr pos:start="427:20" pos:end="427:24"><name pos:start="427:20" pos:end="427:24">vargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="428:5" pos:end="428:18"><expr pos:start="428:5" pos:end="428:17"><call pos:start="428:5" pos:end="428:17"><name pos:start="428:5" pos:end="428:10">va_end</name><argument_list pos:start="428:11" pos:end="428:17">(<argument pos:start="428:12" pos:end="428:16"><expr pos:start="428:12" pos:end="428:16"><name pos:start="428:12" pos:end="428:16">vargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="431:1" pos:end="442:1"><type pos:start="431:1" pos:end="431:11"><specifier pos:start="431:1" pos:end="431:6">static</specifier> <name pos:start="431:8" pos:end="431:11">void</name></type> <name pos:start="431:13" pos:end="431:23">http_av_log</name><parameter_list pos:start="431:24" pos:end="431:77">(<parameter pos:start="431:25" pos:end="431:33"><decl pos:start="431:25" pos:end="431:33"><type pos:start="431:25" pos:end="431:33"><name pos:start="431:25" pos:end="431:28">void</name> <modifier pos:start="431:30" pos:end="431:30">*</modifier></type><name pos:start="431:31" pos:end="431:33">ptr</name></decl></parameter>, <parameter pos:start="431:36" pos:end="431:44"><decl pos:start="431:36" pos:end="431:44"><type pos:start="431:36" pos:end="431:44"><name pos:start="431:36" pos:end="431:38">int</name></type> <name pos:start="431:40" pos:end="431:44">level</name></decl></parameter>, <parameter pos:start="431:47" pos:end="431:61"><decl pos:start="431:47" pos:end="431:61"><type pos:start="431:47" pos:end="431:61"><specifier pos:start="431:47" pos:end="431:51">const</specifier> <name pos:start="431:53" pos:end="431:56">char</name> <modifier pos:start="431:58" pos:end="431:58">*</modifier></type><name pos:start="431:59" pos:end="431:61">fmt</name></decl></parameter>, <parameter pos:start="431:64" pos:end="431:76"><decl pos:start="431:64" pos:end="431:76"><type pos:start="431:64" pos:end="431:76"><name pos:start="431:64" pos:end="431:70">va_list</name></type> <name pos:start="431:72" pos:end="431:76">vargs</name></decl></parameter>)</parameter_list>
<block pos:start="432:1" pos:end="442:1">{<block_content pos:start="433:5" pos:end="441:26">
    <decl_stmt pos:start="433:5" pos:end="433:32"><decl pos:start="433:5" pos:end="433:31"><type pos:start="433:5" pos:end="433:14"><specifier pos:start="433:5" pos:end="433:10">static</specifier> <name pos:start="433:12" pos:end="433:14">int</name></type> <name pos:start="433:16" pos:end="433:27">print_prefix</name> <init pos:start="433:29" pos:end="433:31">= <expr pos:start="433:31" pos:end="433:31"><literal type="number" pos:start="433:31" pos:end="433:31">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="434:5" pos:end="434:48"><decl pos:start="434:5" pos:end="434:47"><type pos:start="434:5" pos:end="434:13"><name pos:start="434:5" pos:end="434:11">AVClass</name> <modifier pos:start="434:13" pos:end="434:13">*</modifier></type><name pos:start="434:14" pos:end="434:16">avc</name> <init pos:start="434:18" pos:end="434:47">= <expr pos:start="434:20" pos:end="434:47"><ternary pos:start="434:20" pos:end="434:47"><condition pos:start="434:20" pos:end="434:24"><expr pos:start="434:20" pos:end="434:22"><name pos:start="434:20" pos:end="434:22">ptr</name></expr> ?</condition><then pos:start="434:26" pos:end="434:40"> <expr pos:start="434:26" pos:end="434:40"><operator pos:start="434:26" pos:end="434:26">*</operator><operator pos:start="434:27" pos:end="434:27">(</operator><name pos:start="434:28" pos:end="434:34">AVClass</name><operator pos:start="434:35" pos:end="434:35">*</operator><operator pos:start="434:36" pos:end="434:36">*</operator><operator pos:start="434:37" pos:end="434:37">)</operator><name pos:start="434:38" pos:end="434:40">ptr</name></expr> </then><else pos:start="434:42" pos:end="434:47">: <expr pos:start="434:44" pos:end="434:47"><name pos:start="434:44" pos:end="434:47">NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="435:5" pos:end="436:15"><if pos:start="435:5" pos:end="436:15">if <condition pos:start="435:8" pos:end="435:35">(<expr pos:start="435:9" pos:end="435:34"><name pos:start="435:9" pos:end="435:13">level</name> <operator pos:start="435:15" pos:end="435:15">&gt;</operator> <call pos:start="435:17" pos:end="435:34"><name pos:start="435:17" pos:end="435:32">av_log_get_level</name><argument_list pos:start="435:33" pos:end="435:34">()</argument_list></call></expr>)</condition><block type="pseudo" pos:start="436:9" pos:end="436:15"><block_content pos:start="436:9" pos:end="436:15">
        <return pos:start="436:9" pos:end="436:15">return;</return></block_content></block></if></if_stmt>
    <if_stmt pos:start="437:5" pos:end="439:57"><if pos:start="437:5" pos:end="439:57">if <condition pos:start="437:8" pos:end="437:22">(<expr pos:start="437:9" pos:end="437:20"><name pos:start="437:9" pos:end="437:20">print_prefix</name></expr> )</condition><block pos:start="437:23" pos:end="439:57">{<block_content pos:start="438:1" pos:end="439:56">
<if_stmt pos:start="438:1" pos:end="439:56"><if pos:start="438:1" pos:end="439:56">if<condition pos:start="438:3" pos:end="438:8">( <expr pos:start="438:5" pos:end="438:7"><name pos:start="438:5" pos:end="438:7">avc</name></expr>)</condition><block type="pseudo" pos:start="439:9" pos:end="439:56"><block_content pos:start="439:9" pos:end="439:56">
        <expr_stmt pos:start="439:9" pos:end="439:56"><expr pos:start="439:9" pos:end="439:55"><call pos:start="439:9" pos:end="439:55"><name pos:start="439:9" pos:end="439:16">http_log</name><argument_list pos:start="439:17" pos:end="439:55">(<argument pos:start="439:18" pos:end="439:28"><expr pos:start="439:18" pos:end="439:28"><literal type="string" pos:start="439:18" pos:end="439:28">"[%s @ %p]"</literal></expr></argument>, <argument pos:start="439:31" pos:end="439:49"><expr pos:start="439:31" pos:end="439:49"><call pos:start="439:31" pos:end="439:49"><name pos:start="439:31" pos:end="439:44"><name pos:start="439:31" pos:end="439:33">avc</name><operator pos:start="439:34" pos:end="439:35">-&gt;</operator><name pos:start="439:36" pos:end="439:44">item_name</name></name><argument_list pos:start="439:45" pos:end="439:49">(<argument pos:start="439:46" pos:end="439:48"><expr pos:start="439:46" pos:end="439:48"><name pos:start="439:46" pos:end="439:48">ptr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="439:52" pos:end="439:54"><expr pos:start="439:52" pos:end="439:54"><name pos:start="439:52" pos:end="439:54">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="440:5" pos:end="440:45"><expr pos:start="440:5" pos:end="440:44"><name pos:start="440:5" pos:end="440:16">print_prefix</name> <operator pos:start="440:18" pos:end="440:18">=</operator> <call pos:start="440:20" pos:end="440:36"><name pos:start="440:20" pos:end="440:25">strstr</name><argument_list pos:start="440:26" pos:end="440:36">(<argument pos:start="440:27" pos:end="440:29"><expr pos:start="440:27" pos:end="440:29"><name pos:start="440:27" pos:end="440:29">fmt</name></expr></argument>, <argument pos:start="440:32" pos:end="440:35"><expr pos:start="440:32" pos:end="440:35"><literal type="string" pos:start="440:32" pos:end="440:35">"\n"</literal></expr></argument>)</argument_list></call> <operator pos:start="440:38" pos:end="440:39">!=</operator> <name pos:start="440:41" pos:end="440:44">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="441:5" pos:end="441:26"><expr pos:start="441:5" pos:end="441:25"><call pos:start="441:5" pos:end="441:25"><name pos:start="441:5" pos:end="441:13">http_vlog</name><argument_list pos:start="441:14" pos:end="441:25">(<argument pos:start="441:15" pos:end="441:17"><expr pos:start="441:15" pos:end="441:17"><name pos:start="441:15" pos:end="441:17">fmt</name></expr></argument>, <argument pos:start="441:20" pos:end="441:24"><expr pos:start="441:20" pos:end="441:24"><name pos:start="441:20" pos:end="441:24">vargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="444:1" pos:end="452:1"><type pos:start="444:1" pos:end="444:11"><specifier pos:start="444:1" pos:end="444:6">static</specifier> <name pos:start="444:8" pos:end="444:11">void</name></type> <name pos:start="444:13" pos:end="444:26">log_connection</name><parameter_list pos:start="444:27" pos:end="444:42">(<parameter pos:start="444:28" pos:end="444:41"><decl pos:start="444:28" pos:end="444:41"><type pos:start="444:28" pos:end="444:40"><name pos:start="444:28" pos:end="444:38">HTTPContext</name> <modifier pos:start="444:40" pos:end="444:40">*</modifier></type><name pos:start="444:41" pos:end="444:41">c</name></decl></parameter>)</parameter_list>
<block pos:start="445:1" pos:end="452:1">{<block_content pos:start="446:5" pos:end="451:80">
    <if_stmt pos:start="446:5" pos:end="447:15"><if pos:start="446:5" pos:end="447:15">if <condition pos:start="446:8" pos:end="446:24">(<expr pos:start="446:9" pos:end="446:23"><name pos:start="446:9" pos:end="446:23"><name pos:start="446:9" pos:end="446:9">c</name><operator pos:start="446:10" pos:end="446:11">-&gt;</operator><name pos:start="446:12" pos:end="446:23">suppress_log</name></name></expr>)</condition><block type="pseudo" pos:start="447:9" pos:end="447:15"><block_content pos:start="447:9" pos:end="447:15">
        <return pos:start="447:9" pos:end="447:15">return;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="449:5" pos:end="451:80"><expr pos:start="449:5" pos:end="451:79"><call pos:start="449:5" pos:end="451:79"><name pos:start="449:5" pos:end="449:12">http_log</name><argument_list pos:start="449:13" pos:end="451:79">(<argument pos:start="449:14" pos:end="449:51"><expr pos:start="449:14" pos:end="449:51"><literal type="string" pos:start="449:14" pos:end="449:41">"%s - - [%s] \"%s %s\" %d %"</literal><name pos:start="449:42" pos:end="449:47">PRId64</name><literal type="string" pos:start="449:48" pos:end="449:51">"\n"</literal></expr></argument>,
             <argument pos:start="450:14" pos:end="450:45"><expr pos:start="450:14" pos:end="450:45"><call pos:start="450:14" pos:end="450:45"><name pos:start="450:14" pos:end="450:22">inet_ntoa</name><argument_list pos:start="450:23" pos:end="450:45">(<argument pos:start="450:24" pos:end="450:44"><expr pos:start="450:24" pos:end="450:44"><name pos:start="450:24" pos:end="450:44"><name pos:start="450:24" pos:end="450:24">c</name><operator pos:start="450:25" pos:end="450:26">-&gt;</operator><name pos:start="450:27" pos:end="450:35">from_addr</name><operator pos:start="450:36" pos:end="450:36">.</operator><name pos:start="450:37" pos:end="450:44">sin_addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="450:48" pos:end="450:56"><expr pos:start="450:48" pos:end="450:56"><name pos:start="450:48" pos:end="450:56"><name pos:start="450:48" pos:end="450:48">c</name><operator pos:start="450:49" pos:end="450:50">-&gt;</operator><name pos:start="450:51" pos:end="450:56">method</name></name></expr></argument>, <argument pos:start="450:59" pos:end="450:64"><expr pos:start="450:59" pos:end="450:64"><name pos:start="450:59" pos:end="450:64"><name pos:start="450:59" pos:end="450:59">c</name><operator pos:start="450:60" pos:end="450:61">-&gt;</operator><name pos:start="450:62" pos:end="450:64">url</name></name></expr></argument>,
             <argument pos:start="451:14" pos:end="451:24"><expr pos:start="451:14" pos:end="451:24"><name pos:start="451:14" pos:end="451:24"><name pos:start="451:14" pos:end="451:14">c</name><operator pos:start="451:15" pos:end="451:16">-&gt;</operator><name pos:start="451:17" pos:end="451:24">protocol</name></name></expr></argument>, <argument pos:start="451:27" pos:end="451:63"><expr pos:start="451:27" pos:end="451:63"><operator pos:start="451:27" pos:end="451:27">(</operator><ternary pos:start="451:28" pos:end="451:62"><condition pos:start="451:28" pos:end="451:42"><expr pos:start="451:28" pos:end="451:40"><name pos:start="451:28" pos:end="451:40"><name pos:start="451:28" pos:end="451:28">c</name><operator pos:start="451:29" pos:end="451:30">-&gt;</operator><name pos:start="451:31" pos:end="451:40">http_error</name></name></expr> ?</condition><then pos:start="451:44" pos:end="451:56"> <expr pos:start="451:44" pos:end="451:56"><name pos:start="451:44" pos:end="451:56"><name pos:start="451:44" pos:end="451:44">c</name><operator pos:start="451:45" pos:end="451:46">-&gt;</operator><name pos:start="451:47" pos:end="451:56">http_error</name></name></expr> </then><else pos:start="451:58" pos:end="451:62">: <expr pos:start="451:60" pos:end="451:62"><literal type="number" pos:start="451:60" pos:end="451:62">200</literal></expr></else></ternary><operator pos:start="451:63" pos:end="451:63">)</operator></expr></argument>, <argument pos:start="451:66" pos:end="451:78"><expr pos:start="451:66" pos:end="451:78"><name pos:start="451:66" pos:end="451:78"><name pos:start="451:66" pos:end="451:66">c</name><operator pos:start="451:67" pos:end="451:68">-&gt;</operator><name pos:start="451:69" pos:end="451:78">data_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="454:1" pos:end="466:1"><type pos:start="454:1" pos:end="454:11"><specifier pos:start="454:1" pos:end="454:6">static</specifier> <name pos:start="454:8" pos:end="454:11">void</name></type> <name pos:start="454:13" pos:end="454:27">update_datarate</name><parameter_list pos:start="454:28" pos:end="454:61">(<parameter pos:start="454:29" pos:end="454:45"><decl pos:start="454:29" pos:end="454:45"><type pos:start="454:29" pos:end="454:45"><name pos:start="454:29" pos:end="454:40">DataRateData</name> <modifier pos:start="454:42" pos:end="454:42">*</modifier></type><name pos:start="454:43" pos:end="454:45">drd</name></decl></parameter>, <parameter pos:start="454:48" pos:end="454:60"><decl pos:start="454:48" pos:end="454:60"><type pos:start="454:48" pos:end="454:60"><name pos:start="454:48" pos:end="454:54">int64_t</name></type> <name pos:start="454:56" pos:end="454:60">count</name></decl></parameter>)</parameter_list>
<block pos:start="455:1" pos:end="466:1">{<block_content pos:start="456:5" pos:end="465:5">
    <if_stmt pos:start="456:5" pos:end="465:5"><if pos:start="456:5" pos:end="460:6">if <condition pos:start="456:8" pos:end="456:21">(<expr pos:start="456:9" pos:end="456:19"><operator pos:start="456:9" pos:end="456:9">!</operator><name pos:start="456:10" pos:end="456:19"><name pos:start="456:10" pos:end="456:12">drd</name><operator pos:start="456:13" pos:end="456:14">-&gt;</operator><name pos:start="456:15" pos:end="456:19">time1</name></name></expr> )</condition><block pos:start="456:22" pos:end="460:6">{<block_content pos:start="457:1" pos:end="460:5">
<if_stmt pos:start="457:1" pos:end="460:5"><if pos:start="457:1" pos:end="460:5">if<condition pos:start="457:3" pos:end="457:17">( <expr pos:start="457:5" pos:end="457:16"><operator pos:start="457:5" pos:end="457:5">!</operator><name pos:start="457:6" pos:end="457:16"><name pos:start="457:6" pos:end="457:8">drd</name><operator pos:start="457:9" pos:end="457:10">-&gt;</operator><name pos:start="457:11" pos:end="457:16">count1</name></name></expr>)</condition> <block pos:start="457:19" pos:end="460:5">{<block_content pos:start="458:9" pos:end="459:42">
        <expr_stmt pos:start="458:9" pos:end="458:43"><expr pos:start="458:9" pos:end="458:42"><name pos:start="458:9" pos:end="458:18"><name pos:start="458:9" pos:end="458:11">drd</name><operator pos:start="458:12" pos:end="458:13">-&gt;</operator><name pos:start="458:14" pos:end="458:18">time1</name></name> <operator pos:start="458:20" pos:end="458:20">=</operator> <name pos:start="458:22" pos:end="458:31"><name pos:start="458:22" pos:end="458:24">drd</name><operator pos:start="458:25" pos:end="458:26">-&gt;</operator><name pos:start="458:27" pos:end="458:31">time2</name></name> <operator pos:start="458:33" pos:end="458:33">=</operator> <name pos:start="458:35" pos:end="458:42">cur_time</name></expr>;</expr_stmt>
        <expr_stmt pos:start="459:9" pos:end="459:42"><expr pos:start="459:9" pos:end="459:41"><name pos:start="459:9" pos:end="459:19"><name pos:start="459:9" pos:end="459:11">drd</name><operator pos:start="459:12" pos:end="459:13">-&gt;</operator><name pos:start="459:14" pos:end="459:19">count1</name></name> <operator pos:start="459:21" pos:end="459:21">=</operator> <name pos:start="459:23" pos:end="459:33"><name pos:start="459:23" pos:end="459:25">drd</name><operator pos:start="459:26" pos:end="459:27">-&gt;</operator><name pos:start="459:28" pos:end="459:33">count2</name></name> <operator pos:start="459:35" pos:end="459:35">=</operator> <name pos:start="459:37" pos:end="459:41">count</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt></block_content>}</block></if><if type="elseif" pos:start="460:7" pos:end="465:5">else if <condition pos:start="460:15" pos:end="460:44">(<expr pos:start="460:16" pos:end="460:43"><name pos:start="460:16" pos:end="460:23">cur_time</name> <operator pos:start="460:25" pos:end="460:25">-</operator> <name pos:start="460:27" pos:end="460:36"><name pos:start="460:27" pos:end="460:29">drd</name><operator pos:start="460:30" pos:end="460:31">-&gt;</operator><name pos:start="460:32" pos:end="460:36">time2</name></name> <operator pos:start="460:38" pos:end="460:38">&gt;</operator> <literal type="number" pos:start="460:40" pos:end="460:43">5000</literal></expr>)</condition> <block pos:start="460:46" pos:end="465:5">{<block_content pos:start="461:9" pos:end="464:28">
        <expr_stmt pos:start="461:9" pos:end="461:32"><expr pos:start="461:9" pos:end="461:31"><name pos:start="461:9" pos:end="461:18"><name pos:start="461:9" pos:end="461:11">drd</name><operator pos:start="461:12" pos:end="461:13">-&gt;</operator><name pos:start="461:14" pos:end="461:18">time1</name></name> <operator pos:start="461:20" pos:end="461:20">=</operator> <name pos:start="461:22" pos:end="461:31"><name pos:start="461:22" pos:end="461:24">drd</name><operator pos:start="461:25" pos:end="461:26">-&gt;</operator><name pos:start="461:27" pos:end="461:31">time2</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="462:9" pos:end="462:34"><expr pos:start="462:9" pos:end="462:33"><name pos:start="462:9" pos:end="462:19"><name pos:start="462:9" pos:end="462:11">drd</name><operator pos:start="462:12" pos:end="462:13">-&gt;</operator><name pos:start="462:14" pos:end="462:19">count1</name></name> <operator pos:start="462:21" pos:end="462:21">=</operator> <name pos:start="462:23" pos:end="462:33"><name pos:start="462:23" pos:end="462:25">drd</name><operator pos:start="462:26" pos:end="462:27">-&gt;</operator><name pos:start="462:28" pos:end="462:33">count2</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="463:9" pos:end="463:30"><expr pos:start="463:9" pos:end="463:29"><name pos:start="463:9" pos:end="463:18"><name pos:start="463:9" pos:end="463:11">drd</name><operator pos:start="463:12" pos:end="463:13">-&gt;</operator><name pos:start="463:14" pos:end="463:18">time2</name></name> <operator pos:start="463:20" pos:end="463:20">=</operator> <name pos:start="463:22" pos:end="463:29">cur_time</name></expr>;</expr_stmt>
        <expr_stmt pos:start="464:9" pos:end="464:28"><expr pos:start="464:9" pos:end="464:27"><name pos:start="464:9" pos:end="464:19"><name pos:start="464:9" pos:end="464:11">drd</name><operator pos:start="464:12" pos:end="464:13">-&gt;</operator><name pos:start="464:14" pos:end="464:19">count2</name></name> <operator pos:start="464:21" pos:end="464:21">=</operator> <name pos:start="464:23" pos:end="464:27">count</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="468:1" pos:end="468:25">/* In bytes per second */</comment>
<function pos:start="469:1" pos:end="475:1"><type pos:start="469:1" pos:end="469:10"><specifier pos:start="469:1" pos:end="469:6">static</specifier> <name pos:start="469:8" pos:end="469:10">int</name></type> <name pos:start="469:12" pos:end="469:27">compute_datarate</name><parameter_list pos:start="469:28" pos:end="469:61">(<parameter pos:start="469:29" pos:end="469:45"><decl pos:start="469:29" pos:end="469:45"><type pos:start="469:29" pos:end="469:45"><name pos:start="469:29" pos:end="469:40">DataRateData</name> <modifier pos:start="469:42" pos:end="469:42">*</modifier></type><name pos:start="469:43" pos:end="469:45">drd</name></decl></parameter>, <parameter pos:start="469:48" pos:end="469:60"><decl pos:start="469:48" pos:end="469:60"><type pos:start="469:48" pos:end="469:60"><name pos:start="469:48" pos:end="469:54">int64_t</name></type> <name pos:start="469:56" pos:end="469:60">count</name></decl></parameter>)</parameter_list>
<block pos:start="470:1" pos:end="475:1">{<block_content pos:start="471:5" pos:end="474:68">
    <if_stmt pos:start="471:5" pos:end="472:17"><if pos:start="471:5" pos:end="472:17">if <condition pos:start="471:8" pos:end="471:31">(<expr pos:start="471:9" pos:end="471:30"><name pos:start="471:9" pos:end="471:16">cur_time</name> <operator pos:start="471:18" pos:end="471:19">==</operator> <name pos:start="471:21" pos:end="471:30"><name pos:start="471:21" pos:end="471:23">drd</name><operator pos:start="471:24" pos:end="471:25">-&gt;</operator><name pos:start="471:26" pos:end="471:30">time1</name></name></expr>)</condition><block type="pseudo" pos:start="472:9" pos:end="472:17"><block_content pos:start="472:9" pos:end="472:17">
        <return pos:start="472:9" pos:end="472:17">return <expr pos:start="472:16" pos:end="472:16"><literal type="number" pos:start="472:16" pos:end="472:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <return pos:start="474:5" pos:end="474:68">return <expr pos:start="474:12" pos:end="474:67"><operator pos:start="474:12" pos:end="474:12">(</operator><operator pos:start="474:13" pos:end="474:13">(</operator><name pos:start="474:14" pos:end="474:18">count</name> <operator pos:start="474:20" pos:end="474:20">-</operator> <name pos:start="474:22" pos:end="474:32"><name pos:start="474:22" pos:end="474:24">drd</name><operator pos:start="474:25" pos:end="474:26">-&gt;</operator><name pos:start="474:27" pos:end="474:32">count1</name></name><operator pos:start="474:33" pos:end="474:33">)</operator> <operator pos:start="474:35" pos:end="474:35">*</operator> <literal type="number" pos:start="474:37" pos:end="474:40">1000</literal><operator pos:start="474:41" pos:end="474:41">)</operator> <operator pos:start="474:43" pos:end="474:43">/</operator> <operator pos:start="474:45" pos:end="474:45">(</operator><name pos:start="474:46" pos:end="474:53">cur_time</name> <operator pos:start="474:55" pos:end="474:55">-</operator> <name pos:start="474:57" pos:end="474:66"><name pos:start="474:57" pos:end="474:59">drd</name><operator pos:start="474:60" pos:end="474:61">-&gt;</operator><name pos:start="474:62" pos:end="474:66">time1</name></name><operator pos:start="474:67" pos:end="474:67">)</operator></expr>;</return>
</block_content>}</block></function>


<function pos:start="478:1" pos:end="559:1"><type pos:start="478:1" pos:end="478:11"><specifier pos:start="478:1" pos:end="478:6">static</specifier> <name pos:start="478:8" pos:end="478:11">void</name></type> <name pos:start="478:13" pos:end="478:26">start_children</name><parameter_list pos:start="478:27" pos:end="478:48">(<parameter pos:start="478:28" pos:end="478:47"><decl pos:start="478:28" pos:end="478:47"><type pos:start="478:28" pos:end="478:43"><name pos:start="478:28" pos:end="478:41">FFServerStream</name> <modifier pos:start="478:43" pos:end="478:43">*</modifier></type><name pos:start="478:44" pos:end="478:47">feed</name></decl></parameter>)</parameter_list>
<block pos:start="479:1" pos:end="559:1">{<block_content pos:start="480:5" pos:end="558:23">
    <decl_stmt pos:start="480:5" pos:end="480:19"><decl pos:start="480:5" pos:end="480:18"><type pos:start="480:5" pos:end="480:10"><name pos:start="480:5" pos:end="480:8">char</name> <modifier pos:start="480:10" pos:end="480:10">*</modifier></type><name pos:start="480:11" pos:end="480:18">pathname</name></decl>;</decl_stmt>
    <decl_stmt pos:start="481:5" pos:end="481:16"><decl pos:start="481:5" pos:end="481:15"><type pos:start="481:5" pos:end="481:10"><name pos:start="481:5" pos:end="481:8">char</name> <modifier pos:start="481:10" pos:end="481:10">*</modifier></type><name pos:start="481:11" pos:end="481:15">slash</name></decl>;</decl_stmt>
    <decl_stmt pos:start="482:5" pos:end="482:10"><decl pos:start="482:5" pos:end="482:9"><type pos:start="482:5" pos:end="482:7"><name pos:start="482:5" pos:end="482:7">int</name></type> <name pos:start="482:9" pos:end="482:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="483:5" pos:end="483:22"><decl pos:start="483:5" pos:end="483:21"><type pos:start="483:5" pos:end="483:10"><name pos:start="483:5" pos:end="483:10">size_t</name></type> <name pos:start="483:12" pos:end="483:21">cmd_length</name></decl>;</decl_stmt>

    <if_stmt pos:start="485:5" pos:end="486:15"><if pos:start="485:5" pos:end="486:15">if <condition pos:start="485:8" pos:end="485:18">(<expr pos:start="485:9" pos:end="485:17"><name pos:start="485:9" pos:end="485:17">no_launch</name></expr>)</condition><block type="pseudo" pos:start="486:9" pos:end="486:15"><block_content pos:start="486:9" pos:end="486:15">
        <return pos:start="486:9" pos:end="486:15">return;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="488:5" pos:end="488:41"><expr pos:start="488:5" pos:end="488:40"><name pos:start="488:5" pos:end="488:14">cmd_length</name> <operator pos:start="488:16" pos:end="488:16">=</operator> <call pos:start="488:18" pos:end="488:40"><name pos:start="488:18" pos:end="488:23">strlen</name><argument_list pos:start="488:24" pos:end="488:40">(<argument pos:start="488:25" pos:end="488:39"><expr pos:start="488:25" pos:end="488:39"><name pos:start="488:25" pos:end="488:39">my_program_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <comment type="block" format="doxygen" pos:start="490:4" pos:end="493:6">/**
    * FIXME: WIP Safeguard. Remove after clearing all harcoded
    * '1024' path lengths
    */</comment>
    <if_stmt pos:start="494:5" pos:end="498:5"><if pos:start="494:5" pos:end="498:5">if <condition pos:start="494:8" pos:end="494:37">(<expr pos:start="494:9" pos:end="494:36"><name pos:start="494:9" pos:end="494:18">cmd_length</name> <operator pos:start="494:20" pos:end="494:20">&gt;</operator> <name pos:start="494:22" pos:end="494:32">PATH_LENGTH</name> <operator pos:start="494:34" pos:end="494:34">-</operator> <literal type="number" pos:start="494:36" pos:end="494:36">1</literal></expr>)</condition> <block pos:start="494:39" pos:end="498:5">{<block_content pos:start="495:9" pos:end="497:15">
        <expr_stmt pos:start="495:9" pos:end="496:78"><expr pos:start="495:9" pos:end="496:77"><call pos:start="495:9" pos:end="496:77"><name pos:start="495:9" pos:end="495:16">http_log</name><argument_list pos:start="495:17" pos:end="496:77">(<argument pos:start="495:18" pos:end="496:46"><expr pos:start="495:18" pos:end="496:46"><literal type="string" pos:start="495:18" pos:end="495:72">"Could not start children. Command line: '%s' exceeds "</literal>
                    <literal type="string" pos:start="496:21" pos:end="496:46">"path length limit (%d)\n"</literal></expr></argument>, <argument pos:start="496:49" pos:end="496:63"><expr pos:start="496:49" pos:end="496:63"><name pos:start="496:49" pos:end="496:63">my_program_name</name></expr></argument>, <argument pos:start="496:66" pos:end="496:76"><expr pos:start="496:66" pos:end="496:76"><name pos:start="496:66" pos:end="496:76">PATH_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="497:9" pos:end="497:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="500:5" pos:end="500:43"><expr pos:start="500:5" pos:end="500:42"><name pos:start="500:5" pos:end="500:12">pathname</name> <operator pos:start="500:14" pos:end="500:14">=</operator> <call pos:start="500:16" pos:end="500:42"><name pos:start="500:16" pos:end="500:24">av_strdup</name> <argument_list pos:start="500:26" pos:end="500:42">(<argument pos:start="500:27" pos:end="500:41"><expr pos:start="500:27" pos:end="500:41"><name pos:start="500:27" pos:end="500:41">my_program_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="501:5" pos:end="504:5"><if pos:start="501:5" pos:end="504:5">if <condition pos:start="501:8" pos:end="501:18">(<expr pos:start="501:9" pos:end="501:17"><operator pos:start="501:9" pos:end="501:9">!</operator><name pos:start="501:10" pos:end="501:17">pathname</name></expr>)</condition> <block pos:start="501:20" pos:end="504:5">{<block_content pos:start="502:9" pos:end="503:15">
        <expr_stmt pos:start="502:9" pos:end="502:70"><expr pos:start="502:9" pos:end="502:69"><call pos:start="502:9" pos:end="502:69"><name pos:start="502:9" pos:end="502:16">http_log</name><argument_list pos:start="502:17" pos:end="502:69">(<argument pos:start="502:18" pos:end="502:68"><expr pos:start="502:18" pos:end="502:68"><literal type="string" pos:start="502:18" pos:end="502:68">"Could not allocate memory for children cmd line\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="503:9" pos:end="503:15">return;</return>
    </block_content>}</block></if></if_stmt>
   <comment type="block" pos:start="505:4" pos:end="506:43">/* replace "ffserver" with "ffmpeg" in the path of current
    * program. Ignore user provided path */</comment>

    <expr_stmt pos:start="508:5" pos:end="508:35"><expr pos:start="508:5" pos:end="508:34"><name pos:start="508:5" pos:end="508:9">slash</name> <operator pos:start="508:11" pos:end="508:11">=</operator> <call pos:start="508:13" pos:end="508:34"><name pos:start="508:13" pos:end="508:19">strrchr</name><argument_list pos:start="508:20" pos:end="508:34">(<argument pos:start="508:21" pos:end="508:28"><expr pos:start="508:21" pos:end="508:28"><name pos:start="508:21" pos:end="508:28">pathname</name></expr></argument>, <argument pos:start="508:31" pos:end="508:33"><expr pos:start="508:31" pos:end="508:33"><literal type="char" pos:start="508:31" pos:end="508:33">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="509:5" pos:end="512:16"><if pos:start="509:5" pos:end="510:25">if <condition pos:start="509:8" pos:end="509:15">(<expr pos:start="509:9" pos:end="509:14"><operator pos:start="509:9" pos:end="509:9">!</operator><name pos:start="509:10" pos:end="509:14">slash</name></expr>)</condition><block type="pseudo" pos:start="510:9" pos:end="510:25"><block_content pos:start="510:9" pos:end="510:25">
        <expr_stmt pos:start="510:9" pos:end="510:25"><expr pos:start="510:9" pos:end="510:24"><name pos:start="510:9" pos:end="510:13">slash</name> <operator pos:start="510:15" pos:end="510:15">=</operator> <name pos:start="510:17" pos:end="510:24">pathname</name></expr>;</expr_stmt></block_content></block></if>
    <else pos:start="511:5" pos:end="512:16">else<block type="pseudo" pos:start="512:9" pos:end="512:16"><block_content pos:start="512:9" pos:end="512:16">
        <expr_stmt pos:start="512:9" pos:end="512:16"><expr pos:start="512:9" pos:end="512:15"><name pos:start="512:9" pos:end="512:13">slash</name><operator pos:start="512:14" pos:end="512:15">++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt pos:start="513:5" pos:end="513:28"><expr pos:start="513:5" pos:end="513:27"><call pos:start="513:5" pos:end="513:27"><name pos:start="513:5" pos:end="513:10">strcpy</name><argument_list pos:start="513:11" pos:end="513:27">(<argument pos:start="513:12" pos:end="513:16"><expr pos:start="513:12" pos:end="513:16"><name pos:start="513:12" pos:end="513:16">slash</name></expr></argument>, <argument pos:start="513:19" pos:end="513:26"><expr pos:start="513:19" pos:end="513:26"><literal type="string" pos:start="513:19" pos:end="513:26">"ffmpeg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="515:5" pos:end="557:5">for <control pos:start="515:9" pos:end="515:35">(<init pos:start="515:10" pos:end="515:10">;</init> <condition pos:start="515:12" pos:end="515:16"><expr pos:start="515:12" pos:end="515:15"><name pos:start="515:12" pos:end="515:15">feed</name></expr>;</condition> <incr pos:start="515:18" pos:end="515:34"><expr pos:start="515:18" pos:end="515:34"><name pos:start="515:18" pos:end="515:21">feed</name> <operator pos:start="515:23" pos:end="515:23">=</operator> <name pos:start="515:25" pos:end="515:34"><name pos:start="515:25" pos:end="515:28">feed</name><operator pos:start="515:29" pos:end="515:30">-&gt;</operator><name pos:start="515:31" pos:end="515:34">next</name></name></expr></incr>)</control> <block pos:start="515:37" pos:end="557:5">{<block_content pos:start="517:9" pos:end="556:17">

        <if_stmt pos:start="517:9" pos:end="518:21"><if pos:start="517:9" pos:end="518:21">if <condition pos:start="517:12" pos:end="517:43">(<expr pos:start="517:13" pos:end="517:42"><operator pos:start="517:13" pos:end="517:13">!</operator><name pos:start="517:14" pos:end="517:29"><name pos:start="517:14" pos:end="517:17">feed</name><operator pos:start="517:18" pos:end="517:19">-&gt;</operator><name pos:start="517:20" pos:end="517:29">child_argv</name></name> <operator pos:start="517:31" pos:end="517:32">||</operator> <name pos:start="517:34" pos:end="517:42"><name pos:start="517:34" pos:end="517:37">feed</name><operator pos:start="517:38" pos:end="517:39">-&gt;</operator><name pos:start="517:40" pos:end="517:42">pid</name></name></expr>)</condition><block type="pseudo" pos:start="518:13" pos:end="518:21"><block_content pos:start="518:13" pos:end="518:21">
            <continue pos:start="518:13" pos:end="518:21">continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt pos:start="520:9" pos:end="520:34"><expr pos:start="520:9" pos:end="520:33"><name pos:start="520:9" pos:end="520:23"><name pos:start="520:9" pos:end="520:12">feed</name><operator pos:start="520:13" pos:end="520:14">-&gt;</operator><name pos:start="520:15" pos:end="520:23">pid_start</name></name> <operator pos:start="520:25" pos:end="520:25">=</operator> <call pos:start="520:27" pos:end="520:33"><name pos:start="520:27" pos:end="520:30">time</name><argument_list pos:start="520:31" pos:end="520:33">(<argument pos:start="520:32" pos:end="520:32"><expr pos:start="520:32" pos:end="520:32"><literal type="number" pos:start="520:32" pos:end="520:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="522:9" pos:end="522:27"><expr pos:start="522:9" pos:end="522:26"><name pos:start="522:9" pos:end="522:17"><name pos:start="522:9" pos:end="522:12">feed</name><operator pos:start="522:13" pos:end="522:14">-&gt;</operator><name pos:start="522:15" pos:end="522:17">pid</name></name> <operator pos:start="522:19" pos:end="522:19">=</operator> <call pos:start="522:21" pos:end="522:26"><name pos:start="522:21" pos:end="522:24">fork</name><argument_list pos:start="522:25" pos:end="522:26">()</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="523:9" pos:end="527:9"><if pos:start="523:9" pos:end="527:9">if <condition pos:start="523:12" pos:end="523:26">(<expr pos:start="523:13" pos:end="523:25"><name pos:start="523:13" pos:end="523:21"><name pos:start="523:13" pos:end="523:16">feed</name><operator pos:start="523:17" pos:end="523:18">-&gt;</operator><name pos:start="523:19" pos:end="523:21">pid</name></name> <operator pos:start="523:23" pos:end="523:23">&lt;</operator> <literal type="number" pos:start="523:25" pos:end="523:25">0</literal></expr>)</condition> <block pos:start="523:28" pos:end="527:9">{<block_content pos:start="524:13" pos:end="526:31">
            <expr_stmt pos:start="524:13" pos:end="524:73"><expr pos:start="524:13" pos:end="524:72"><call pos:start="524:13" pos:end="524:72"><name pos:start="524:13" pos:end="524:20">http_log</name><argument_list pos:start="524:21" pos:end="524:72">(<argument pos:start="524:22" pos:end="524:54"><expr pos:start="524:22" pos:end="524:54"><literal type="string" pos:start="524:22" pos:end="524:54">"Unable to create children: %s\n"</literal></expr></argument>, <argument pos:start="524:57" pos:end="524:71"><expr pos:start="524:57" pos:end="524:71"><call pos:start="524:57" pos:end="524:71"><name pos:start="524:57" pos:end="524:64">strerror</name><argument_list pos:start="524:65" pos:end="524:71">(<argument pos:start="524:66" pos:end="524:70"><expr pos:start="524:66" pos:end="524:70"><name pos:start="524:66" pos:end="524:70">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="525:13" pos:end="525:31"><expr pos:start="525:13" pos:end="525:30"><call pos:start="525:13" pos:end="525:30"><name pos:start="525:13" pos:end="525:19">av_free</name> <argument_list pos:start="525:21" pos:end="525:30">(<argument pos:start="525:22" pos:end="525:29"><expr pos:start="525:22" pos:end="525:29"><name pos:start="525:22" pos:end="525:29">pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="526:13" pos:end="526:31"><expr pos:start="526:13" pos:end="526:30"><call pos:start="526:13" pos:end="526:30"><name pos:start="526:13" pos:end="526:16">exit</name><argument_list pos:start="526:17" pos:end="526:30">(<argument pos:start="526:18" pos:end="526:29"><expr pos:start="526:18" pos:end="526:29"><name pos:start="526:18" pos:end="526:29">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="529:9" pos:end="530:21"><if pos:start="529:9" pos:end="530:21">if <condition pos:start="529:12" pos:end="529:22">(<expr pos:start="529:13" pos:end="529:21"><name pos:start="529:13" pos:end="529:21"><name pos:start="529:13" pos:end="529:16">feed</name><operator pos:start="529:17" pos:end="529:18">-&gt;</operator><name pos:start="529:19" pos:end="529:21">pid</name></name></expr>)</condition><block type="pseudo" pos:start="530:13" pos:end="530:21"><block_content pos:start="530:13" pos:end="530:21">
            <continue pos:start="530:13" pos:end="530:21">continue;</continue></block_content></block></if></if_stmt>

        <comment type="block" pos:start="532:9" pos:end="532:22">/* In child */</comment>

        <expr_stmt pos:start="534:9" pos:end="534:42"><expr pos:start="534:9" pos:end="534:41"><call pos:start="534:9" pos:end="534:41"><name pos:start="534:9" pos:end="534:16">http_log</name><argument_list pos:start="534:17" pos:end="534:41">(<argument pos:start="534:18" pos:end="534:40"><expr pos:start="534:18" pos:end="534:40"><literal type="string" pos:start="534:18" pos:end="534:40">"Launch command line: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="535:9" pos:end="535:34"><expr pos:start="535:9" pos:end="535:33"><call pos:start="535:9" pos:end="535:33"><name pos:start="535:9" pos:end="535:16">http_log</name><argument_list pos:start="535:17" pos:end="535:33">(<argument pos:start="535:18" pos:end="535:22"><expr pos:start="535:18" pos:end="535:22"><literal type="string" pos:start="535:18" pos:end="535:22">"%s "</literal></expr></argument>, <argument pos:start="535:25" pos:end="535:32"><expr pos:start="535:25" pos:end="535:32"><name pos:start="535:25" pos:end="535:32">pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="537:9" pos:end="538:49">for <control pos:start="537:13" pos:end="537:71">(<init pos:start="537:14" pos:end="537:19"><expr pos:start="537:14" pos:end="537:18"><name pos:start="537:14" pos:end="537:14">i</name> <operator pos:start="537:16" pos:end="537:16">=</operator> <literal type="number" pos:start="537:18" pos:end="537:18">1</literal></expr>;</init> <condition pos:start="537:21" pos:end="537:66"><expr pos:start="537:21" pos:end="537:65"><name pos:start="537:21" pos:end="537:39"><name pos:start="537:21" pos:end="537:24">feed</name><operator pos:start="537:25" pos:end="537:26">-&gt;</operator><name pos:start="537:27" pos:end="537:36">child_argv</name><index pos:start="537:37" pos:end="537:39">[<expr pos:start="537:38" pos:end="537:38"><name pos:start="537:38" pos:end="537:38">i</name></expr>]</index></name> <operator pos:start="537:41" pos:end="537:42">&amp;&amp;</operator> <name pos:start="537:44" pos:end="537:65"><name pos:start="537:44" pos:end="537:47">feed</name><operator pos:start="537:48" pos:end="537:49">-&gt;</operator><name pos:start="537:50" pos:end="537:59">child_argv</name><index pos:start="537:60" pos:end="537:62">[<expr pos:start="537:61" pos:end="537:61"><name pos:start="537:61" pos:end="537:61">i</name></expr>]</index><index pos:start="537:63" pos:end="537:65">[<expr pos:start="537:64" pos:end="537:64"><literal type="number" pos:start="537:64" pos:end="537:64">0</literal></expr>]</index></name></expr>;</condition> <incr pos:start="537:68" pos:end="537:70"><expr pos:start="537:68" pos:end="537:70"><name pos:start="537:68" pos:end="537:68">i</name><operator pos:start="537:69" pos:end="537:70">++</operator></expr></incr>)</control><block type="pseudo" pos:start="538:13" pos:end="538:49"><block_content pos:start="538:13" pos:end="538:49">
            <expr_stmt pos:start="538:13" pos:end="538:49"><expr pos:start="538:13" pos:end="538:48"><call pos:start="538:13" pos:end="538:48"><name pos:start="538:13" pos:end="538:20">http_log</name><argument_list pos:start="538:21" pos:end="538:48">(<argument pos:start="538:22" pos:end="538:26"><expr pos:start="538:22" pos:end="538:26"><literal type="string" pos:start="538:22" pos:end="538:26">"%s "</literal></expr></argument>, <argument pos:start="538:29" pos:end="538:47"><expr pos:start="538:29" pos:end="538:47"><name pos:start="538:29" pos:end="538:47"><name pos:start="538:29" pos:end="538:32">feed</name><operator pos:start="538:33" pos:end="538:34">-&gt;</operator><name pos:start="538:35" pos:end="538:44">child_argv</name><index pos:start="538:45" pos:end="538:47">[<expr pos:start="538:46" pos:end="538:46"><name pos:start="538:46" pos:end="538:46">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt pos:start="539:9" pos:end="539:23"><expr pos:start="539:9" pos:end="539:22"><call pos:start="539:9" pos:end="539:22"><name pos:start="539:9" pos:end="539:16">http_log</name><argument_list pos:start="539:17" pos:end="539:22">(<argument pos:start="539:18" pos:end="539:21"><expr pos:start="539:18" pos:end="539:21"><literal type="string" pos:start="539:18" pos:end="539:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="541:9" pos:end="542:21">for <control pos:start="541:13" pos:end="541:33">(<init pos:start="541:14" pos:end="541:19"><expr pos:start="541:14" pos:end="541:18"><name pos:start="541:14" pos:end="541:14">i</name> <operator pos:start="541:16" pos:end="541:16">=</operator> <literal type="number" pos:start="541:18" pos:end="541:18">3</literal></expr>;</init> <condition pos:start="541:21" pos:end="541:28"><expr pos:start="541:21" pos:end="541:27"><name pos:start="541:21" pos:end="541:21">i</name> <operator pos:start="541:23" pos:end="541:23">&lt;</operator> <literal type="number" pos:start="541:25" pos:end="541:27">256</literal></expr>;</condition> <incr pos:start="541:30" pos:end="541:32"><expr pos:start="541:30" pos:end="541:32"><name pos:start="541:30" pos:end="541:30">i</name><operator pos:start="541:31" pos:end="541:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="542:13" pos:end="542:21"><block_content pos:start="542:13" pos:end="542:21">
            <expr_stmt pos:start="542:13" pos:end="542:21"><expr pos:start="542:13" pos:end="542:20"><call pos:start="542:13" pos:end="542:20"><name pos:start="542:13" pos:end="542:17">close</name><argument_list pos:start="542:18" pos:end="542:20">(<argument pos:start="542:19" pos:end="542:19"><expr pos:start="542:19" pos:end="542:19"><name pos:start="542:19" pos:end="542:19">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <if_stmt pos:start="544:9" pos:end="551:9"><if pos:start="544:9" pos:end="551:9">if <condition pos:start="544:12" pos:end="544:26">(<expr pos:start="544:13" pos:end="544:25"><operator pos:start="544:13" pos:end="544:13">!</operator><name pos:start="544:14" pos:end="544:25"><name pos:start="544:14" pos:end="544:19">config</name><operator pos:start="544:20" pos:end="544:20">.</operator><name pos:start="544:21" pos:end="544:25">debug</name></name></expr>)</condition> <block pos:start="544:28" pos:end="551:9">{<block_content pos:start="545:13" pos:end="550:70">
            <if_stmt pos:start="545:13" pos:end="546:69"><if pos:start="545:13" pos:end="546:69">if <condition pos:start="545:16" pos:end="545:50">(<expr pos:start="545:17" pos:end="545:49"><operator pos:start="545:17" pos:end="545:17">!</operator><call pos:start="545:18" pos:end="545:49"><name pos:start="545:18" pos:end="545:24">freopen</name><argument_list pos:start="545:25" pos:end="545:49">(<argument pos:start="545:26" pos:end="545:36"><expr pos:start="545:26" pos:end="545:36"><literal type="string" pos:start="545:26" pos:end="545:36">"/dev/null"</literal></expr></argument>, <argument pos:start="545:39" pos:end="545:41"><expr pos:start="545:39" pos:end="545:41"><literal type="string" pos:start="545:39" pos:end="545:41">"r"</literal></expr></argument>, <argument pos:start="545:44" pos:end="545:48"><expr pos:start="545:44" pos:end="545:48"><name pos:start="545:44" pos:end="545:48">stdin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="546:17" pos:end="546:69"><block_content pos:start="546:17" pos:end="546:69">
                <expr_stmt pos:start="546:17" pos:end="546:69"><expr pos:start="546:17" pos:end="546:68"><call pos:start="546:17" pos:end="546:68"><name pos:start="546:17" pos:end="546:24">http_log</name><argument_list pos:start="546:25" pos:end="546:68">(<argument pos:start="546:26" pos:end="546:67"><expr pos:start="546:26" pos:end="546:67"><literal type="string" pos:start="546:26" pos:end="546:67">"failed to redirect STDIN to /dev/null\n;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt pos:start="547:13" pos:end="548:70"><if pos:start="547:13" pos:end="548:70">if <condition pos:start="547:16" pos:end="547:51">(<expr pos:start="547:17" pos:end="547:50"><operator pos:start="547:17" pos:end="547:17">!</operator><call pos:start="547:18" pos:end="547:50"><name pos:start="547:18" pos:end="547:24">freopen</name><argument_list pos:start="547:25" pos:end="547:50">(<argument pos:start="547:26" pos:end="547:36"><expr pos:start="547:26" pos:end="547:36"><literal type="string" pos:start="547:26" pos:end="547:36">"/dev/null"</literal></expr></argument>, <argument pos:start="547:39" pos:end="547:41"><expr pos:start="547:39" pos:end="547:41"><literal type="string" pos:start="547:39" pos:end="547:41">"w"</literal></expr></argument>, <argument pos:start="547:44" pos:end="547:49"><expr pos:start="547:44" pos:end="547:49"><name pos:start="547:44" pos:end="547:49">stdout</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="548:17" pos:end="548:70"><block_content pos:start="548:17" pos:end="548:70">
                <expr_stmt pos:start="548:17" pos:end="548:70"><expr pos:start="548:17" pos:end="548:69"><call pos:start="548:17" pos:end="548:69"><name pos:start="548:17" pos:end="548:24">http_log</name><argument_list pos:start="548:25" pos:end="548:69">(<argument pos:start="548:26" pos:end="548:68"><expr pos:start="548:26" pos:end="548:68"><literal type="string" pos:start="548:26" pos:end="548:68">"failed to redirect STDOUT to /dev/null\n;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt pos:start="549:13" pos:end="550:70"><if pos:start="549:13" pos:end="550:70">if <condition pos:start="549:16" pos:end="549:51">(<expr pos:start="549:17" pos:end="549:50"><operator pos:start="549:17" pos:end="549:17">!</operator><call pos:start="549:18" pos:end="549:50"><name pos:start="549:18" pos:end="549:24">freopen</name><argument_list pos:start="549:25" pos:end="549:50">(<argument pos:start="549:26" pos:end="549:36"><expr pos:start="549:26" pos:end="549:36"><literal type="string" pos:start="549:26" pos:end="549:36">"/dev/null"</literal></expr></argument>, <argument pos:start="549:39" pos:end="549:41"><expr pos:start="549:39" pos:end="549:41"><literal type="string" pos:start="549:39" pos:end="549:41">"w"</literal></expr></argument>, <argument pos:start="549:44" pos:end="549:49"><expr pos:start="549:44" pos:end="549:49"><name pos:start="549:44" pos:end="549:49">stderr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="550:17" pos:end="550:70"><block_content pos:start="550:17" pos:end="550:70">
                <expr_stmt pos:start="550:17" pos:end="550:70"><expr pos:start="550:17" pos:end="550:69"><call pos:start="550:17" pos:end="550:69"><name pos:start="550:17" pos:end="550:24">http_log</name><argument_list pos:start="550:25" pos:end="550:69">(<argument pos:start="550:26" pos:end="550:68"><expr pos:start="550:26" pos:end="550:68"><literal type="string" pos:start="550:26" pos:end="550:68">"failed to redirect STDERR to /dev/null\n;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="553:9" pos:end="553:33"><expr pos:start="553:9" pos:end="553:32"><call pos:start="553:9" pos:end="553:32"><name pos:start="553:9" pos:end="553:14">signal</name><argument_list pos:start="553:15" pos:end="553:32">(<argument pos:start="553:16" pos:end="553:22"><expr pos:start="553:16" pos:end="553:22"><name pos:start="553:16" pos:end="553:22">SIGPIPE</name></expr></argument>, <argument pos:start="553:25" pos:end="553:31"><expr pos:start="553:25" pos:end="553:31"><name pos:start="553:25" pos:end="553:31">SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="554:9" pos:end="554:43"><expr pos:start="554:9" pos:end="554:42"><call pos:start="554:9" pos:end="554:42"><name pos:start="554:9" pos:end="554:14">execvp</name><argument_list pos:start="554:15" pos:end="554:42">(<argument pos:start="554:16" pos:end="554:23"><expr pos:start="554:16" pos:end="554:23"><name pos:start="554:16" pos:end="554:23">pathname</name></expr></argument>, <argument pos:start="554:26" pos:end="554:41"><expr pos:start="554:26" pos:end="554:41"><name pos:start="554:26" pos:end="554:41"><name pos:start="554:26" pos:end="554:29">feed</name><operator pos:start="554:30" pos:end="554:31">-&gt;</operator><name pos:start="554:32" pos:end="554:41">child_argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="555:9" pos:end="555:27"><expr pos:start="555:9" pos:end="555:26"><call pos:start="555:9" pos:end="555:26"><name pos:start="555:9" pos:end="555:15">av_free</name> <argument_list pos:start="555:17" pos:end="555:26">(<argument pos:start="555:18" pos:end="555:25"><expr pos:start="555:18" pos:end="555:25"><name pos:start="555:18" pos:end="555:25">pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="556:9" pos:end="556:17"><expr pos:start="556:9" pos:end="556:16"><call pos:start="556:9" pos:end="556:16"><name pos:start="556:9" pos:end="556:13">_exit</name><argument_list pos:start="556:14" pos:end="556:16">(<argument pos:start="556:15" pos:end="556:15"><expr pos:start="556:15" pos:end="556:15"><literal type="number" pos:start="556:15" pos:end="556:15">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="558:5" pos:end="558:23"><expr pos:start="558:5" pos:end="558:22"><call pos:start="558:5" pos:end="558:22"><name pos:start="558:5" pos:end="558:11">av_free</name> <argument_list pos:start="558:13" pos:end="558:22">(<argument pos:start="558:14" pos:end="558:21"><expr pos:start="558:14" pos:end="558:21"><name pos:start="558:14" pos:end="558:21">pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="561:1" pos:end="561:29">/* open a listening socket */</comment>
<function pos:start="562:1" pos:end="598:1"><type pos:start="562:1" pos:end="562:10"><specifier pos:start="562:1" pos:end="562:6">static</specifier> <name pos:start="562:8" pos:end="562:10">int</name></type> <name pos:start="562:12" pos:end="562:29">socket_open_listen</name><parameter_list pos:start="562:30" pos:end="562:58">(<parameter pos:start="562:31" pos:end="562:57"><decl pos:start="562:31" pos:end="562:57"><type pos:start="562:31" pos:end="562:57"><name pos:start="562:31" pos:end="562:48"><name pos:start="562:31" pos:end="562:36">struct</name> <name pos:start="562:38" pos:end="562:48">sockaddr_in</name></name> <modifier pos:start="562:50" pos:end="562:50">*</modifier></type><name pos:start="562:51" pos:end="562:57">my_addr</name></decl></parameter>)</parameter_list>
<block pos:start="563:1" pos:end="598:1">{<block_content pos:start="564:5" pos:end="597:14">
    <decl_stmt pos:start="564:5" pos:end="564:23"><decl pos:start="564:5" pos:end="564:17"><type pos:start="564:5" pos:end="564:7"><name pos:start="564:5" pos:end="564:7">int</name></type> <name pos:start="564:9" pos:end="564:17">server_fd</name></decl>, <decl pos:start="564:20" pos:end="564:22"><type ref="prev" pos:start="564:5" pos:end="564:7"/><name pos:start="564:20" pos:end="564:22">tmp</name></decl>;</decl_stmt>

    <expr_stmt pos:start="566:5" pos:end="566:46"><expr pos:start="566:5" pos:end="566:45"><name pos:start="566:5" pos:end="566:13">server_fd</name> <operator pos:start="566:15" pos:end="566:15">=</operator> <call pos:start="566:17" pos:end="566:45"><name pos:start="566:17" pos:end="566:22">socket</name><argument_list pos:start="566:23" pos:end="566:45">(<argument pos:start="566:24" pos:end="566:30"><expr pos:start="566:24" pos:end="566:30"><name pos:start="566:24" pos:end="566:30">AF_INET</name></expr></argument>,<argument pos:start="566:32" pos:end="566:42"><expr pos:start="566:32" pos:end="566:42"><name pos:start="566:32" pos:end="566:42">SOCK_STREAM</name></expr></argument>,<argument pos:start="566:44" pos:end="566:44"><expr pos:start="566:44" pos:end="566:44"><literal type="number" pos:start="566:44" pos:end="566:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="567:5" pos:end="570:5"><if pos:start="567:5" pos:end="570:5">if <condition pos:start="567:8" pos:end="567:22">(<expr pos:start="567:9" pos:end="567:21"><name pos:start="567:9" pos:end="567:17">server_fd</name> <operator pos:start="567:19" pos:end="567:19">&lt;</operator> <literal type="number" pos:start="567:21" pos:end="567:21">0</literal></expr>)</condition> <block pos:start="567:24" pos:end="570:5">{<block_content pos:start="568:9" pos:end="569:18">
        <expr_stmt pos:start="568:9" pos:end="568:26"><expr pos:start="568:9" pos:end="568:25"><call pos:start="568:9" pos:end="568:25"><name pos:start="568:9" pos:end="568:14">perror</name> <argument_list pos:start="568:16" pos:end="568:25">(<argument pos:start="568:17" pos:end="568:24"><expr pos:start="568:17" pos:end="568:24"><literal type="string" pos:start="568:17" pos:end="568:24">"socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="569:9" pos:end="569:18">return <expr pos:start="569:16" pos:end="569:17"><operator pos:start="569:16" pos:end="569:16">-</operator><literal type="number" pos:start="569:17" pos:end="569:17">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="572:5" pos:end="572:12"><expr pos:start="572:5" pos:end="572:11"><name pos:start="572:5" pos:end="572:7">tmp</name> <operator pos:start="572:9" pos:end="572:9">=</operator> <literal type="number" pos:start="572:11" pos:end="572:11">1</literal></expr>;</expr_stmt>
    <if_stmt pos:start="573:5" pos:end="574:73"><if pos:start="573:5" pos:end="574:73">if <condition pos:start="573:8" pos:end="573:75">(<expr pos:start="573:9" pos:end="573:74"><call pos:start="573:9" pos:end="573:74"><name pos:start="573:9" pos:end="573:18">setsockopt</name><argument_list pos:start="573:19" pos:end="573:74">(<argument pos:start="573:20" pos:end="573:28"><expr pos:start="573:20" pos:end="573:28"><name pos:start="573:20" pos:end="573:28">server_fd</name></expr></argument>, <argument pos:start="573:31" pos:end="573:40"><expr pos:start="573:31" pos:end="573:40"><name pos:start="573:31" pos:end="573:40">SOL_SOCKET</name></expr></argument>, <argument pos:start="573:43" pos:end="573:54"><expr pos:start="573:43" pos:end="573:54"><name pos:start="573:43" pos:end="573:54">SO_REUSEADDR</name></expr></argument>, <argument pos:start="573:57" pos:end="573:60"><expr pos:start="573:57" pos:end="573:60"><operator pos:start="573:57" pos:end="573:57">&amp;</operator><name pos:start="573:58" pos:end="573:60">tmp</name></expr></argument>, <argument pos:start="573:63" pos:end="573:73"><expr pos:start="573:63" pos:end="573:73"><sizeof pos:start="573:63" pos:end="573:73">sizeof<argument_list pos:start="573:69" pos:end="573:73">(<argument pos:start="573:70" pos:end="573:72"><expr pos:start="573:70" pos:end="573:72"><name pos:start="573:70" pos:end="573:72">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="574:9" pos:end="574:73"><block_content pos:start="574:9" pos:end="574:73">
        <expr_stmt pos:start="574:9" pos:end="574:73"><expr pos:start="574:9" pos:end="574:72"><call pos:start="574:9" pos:end="574:72"><name pos:start="574:9" pos:end="574:14">av_log</name><argument_list pos:start="574:15" pos:end="574:72">(<argument pos:start="574:16" pos:end="574:19"><expr pos:start="574:16" pos:end="574:19"><name pos:start="574:16" pos:end="574:19">NULL</name></expr></argument>, <argument pos:start="574:22" pos:end="574:35"><expr pos:start="574:22" pos:end="574:35"><name pos:start="574:22" pos:end="574:35">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="574:38" pos:end="574:71"><expr pos:start="574:38" pos:end="574:71"><literal type="string" pos:start="574:38" pos:end="574:71">"setsockopt SO_REUSEADDR failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="576:5" pos:end="576:34"><expr pos:start="576:5" pos:end="576:33"><name pos:start="576:5" pos:end="576:23"><name pos:start="576:5" pos:end="576:11">my_addr</name><operator pos:start="576:12" pos:end="576:13">-&gt;</operator><name pos:start="576:14" pos:end="576:23">sin_family</name></name> <operator pos:start="576:25" pos:end="576:25">=</operator> <name pos:start="576:27" pos:end="576:33">AF_INET</name></expr>;</expr_stmt>
    <if_stmt pos:start="577:5" pos:end="583:5"><if pos:start="577:5" pos:end="583:5">if <condition pos:start="577:8" pos:end="577:77">(<expr pos:start="577:9" pos:end="577:76"><call pos:start="577:9" pos:end="577:72"><name pos:start="577:9" pos:end="577:12">bind</name> <argument_list pos:start="577:14" pos:end="577:72">(<argument pos:start="577:15" pos:end="577:23"><expr pos:start="577:15" pos:end="577:23"><name pos:start="577:15" pos:end="577:23">server_fd</name></expr></argument>, <argument pos:start="577:26" pos:end="577:52"><expr pos:start="577:26" pos:end="577:52"><operator pos:start="577:26" pos:end="577:26">(</operator>struct <name pos:start="577:34" pos:end="577:41">sockaddr</name> <operator pos:start="577:43" pos:end="577:43">*</operator><operator pos:start="577:44" pos:end="577:44">)</operator> <name pos:start="577:46" pos:end="577:52">my_addr</name></expr></argument>, <argument pos:start="577:55" pos:end="577:71"><expr pos:start="577:55" pos:end="577:71"><sizeof pos:start="577:55" pos:end="577:71">sizeof <argument_list pos:start="577:62" pos:end="577:71">(<argument pos:start="577:63" pos:end="577:70"><expr pos:start="577:63" pos:end="577:70"><operator pos:start="577:63" pos:end="577:63">*</operator><name pos:start="577:64" pos:end="577:70">my_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="577:74" pos:end="577:74">&lt;</operator> <literal type="number" pos:start="577:76" pos:end="577:76">0</literal></expr>)</condition> <block pos:start="577:79" pos:end="583:5">{<block_content pos:start="578:9" pos:end="582:18">
        <decl_stmt pos:start="578:9" pos:end="578:25"><decl pos:start="578:9" pos:end="578:24"><type pos:start="578:9" pos:end="578:12"><name pos:start="578:9" pos:end="578:12">char</name></type> <name pos:start="578:14" pos:end="578:24"><name pos:start="578:14" pos:end="578:20">bindmsg</name><index pos:start="578:21" pos:end="578:24">[<expr pos:start="578:22" pos:end="578:23"><literal type="number" pos:start="578:22" pos:end="578:23">32</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt pos:start="579:9" pos:end="580:43"><expr pos:start="579:9" pos:end="580:42"><call pos:start="579:9" pos:end="580:42"><name pos:start="579:9" pos:end="579:16">snprintf</name><argument_list pos:start="579:17" pos:end="580:42">(<argument pos:start="579:18" pos:end="579:24"><expr pos:start="579:18" pos:end="579:24"><name pos:start="579:18" pos:end="579:24">bindmsg</name></expr></argument>, <argument pos:start="579:27" pos:end="579:41"><expr pos:start="579:27" pos:end="579:41"><sizeof pos:start="579:27" pos:end="579:41">sizeof<argument_list pos:start="579:33" pos:end="579:41">(<argument pos:start="579:34" pos:end="579:40"><expr pos:start="579:34" pos:end="579:40"><name pos:start="579:34" pos:end="579:40">bindmsg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="579:44" pos:end="579:58"><expr pos:start="579:44" pos:end="579:58"><literal type="string" pos:start="579:44" pos:end="579:58">"bind(port %d)"</literal></expr></argument>,
                 <argument pos:start="580:18" pos:end="580:41"><expr pos:start="580:18" pos:end="580:41"><call pos:start="580:18" pos:end="580:41"><name pos:start="580:18" pos:end="580:22">ntohs</name><argument_list pos:start="580:23" pos:end="580:41">(<argument pos:start="580:24" pos:end="580:40"><expr pos:start="580:24" pos:end="580:40"><name pos:start="580:24" pos:end="580:40"><name pos:start="580:24" pos:end="580:30">my_addr</name><operator pos:start="580:31" pos:end="580:32">-&gt;</operator><name pos:start="580:33" pos:end="580:40">sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="581:9" pos:end="581:25"><expr pos:start="581:9" pos:end="581:24"><call pos:start="581:9" pos:end="581:24"><name pos:start="581:9" pos:end="581:14">perror</name> <argument_list pos:start="581:16" pos:end="581:24">(<argument pos:start="581:17" pos:end="581:23"><expr pos:start="581:17" pos:end="581:23"><name pos:start="581:17" pos:end="581:23">bindmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="582:9" pos:end="582:18">goto <name pos:start="582:14" pos:end="582:17">fail</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="585:5" pos:end="588:5"><if pos:start="585:5" pos:end="588:5">if <condition pos:start="585:8" pos:end="585:34">(<expr pos:start="585:9" pos:end="585:33"><call pos:start="585:9" pos:end="585:29"><name pos:start="585:9" pos:end="585:14">listen</name> <argument_list pos:start="585:16" pos:end="585:29">(<argument pos:start="585:17" pos:end="585:25"><expr pos:start="585:17" pos:end="585:25"><name pos:start="585:17" pos:end="585:25">server_fd</name></expr></argument>, <argument pos:start="585:28" pos:end="585:28"><expr pos:start="585:28" pos:end="585:28"><literal type="number" pos:start="585:28" pos:end="585:28">5</literal></expr></argument>)</argument_list></call> <operator pos:start="585:31" pos:end="585:31">&lt;</operator> <literal type="number" pos:start="585:33" pos:end="585:33">0</literal></expr>)</condition> <block pos:start="585:36" pos:end="588:5">{<block_content pos:start="586:9" pos:end="587:18">
        <expr_stmt pos:start="586:9" pos:end="586:26"><expr pos:start="586:9" pos:end="586:25"><call pos:start="586:9" pos:end="586:25"><name pos:start="586:9" pos:end="586:14">perror</name> <argument_list pos:start="586:16" pos:end="586:25">(<argument pos:start="586:17" pos:end="586:24"><expr pos:start="586:17" pos:end="586:24"><literal type="string" pos:start="586:17" pos:end="586:24">"listen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="587:9" pos:end="587:18">goto <name pos:start="587:14" pos:end="587:17">fail</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="590:5" pos:end="591:68"><if pos:start="590:5" pos:end="591:68">if <condition pos:start="590:8" pos:end="590:45">(<expr pos:start="590:9" pos:end="590:44"><call pos:start="590:9" pos:end="590:40"><name pos:start="590:9" pos:end="590:26">ff_socket_nonblock</name><argument_list pos:start="590:27" pos:end="590:40">(<argument pos:start="590:28" pos:end="590:36"><expr pos:start="590:28" pos:end="590:36"><name pos:start="590:28" pos:end="590:36">server_fd</name></expr></argument>, <argument pos:start="590:39" pos:end="590:39"><expr pos:start="590:39" pos:end="590:39"><literal type="number" pos:start="590:39" pos:end="590:39">1</literal></expr></argument>)</argument_list></call> <operator pos:start="590:42" pos:end="590:42">&lt;</operator> <literal type="number" pos:start="590:44" pos:end="590:44">0</literal></expr>)</condition><block type="pseudo" pos:start="591:9" pos:end="591:68"><block_content pos:start="591:9" pos:end="591:68">
        <expr_stmt pos:start="591:9" pos:end="591:68"><expr pos:start="591:9" pos:end="591:67"><call pos:start="591:9" pos:end="591:67"><name pos:start="591:9" pos:end="591:14">av_log</name><argument_list pos:start="591:15" pos:end="591:67">(<argument pos:start="591:16" pos:end="591:19"><expr pos:start="591:16" pos:end="591:19"><name pos:start="591:16" pos:end="591:19">NULL</name></expr></argument>, <argument pos:start="591:22" pos:end="591:35"><expr pos:start="591:22" pos:end="591:35"><name pos:start="591:22" pos:end="591:35">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="591:38" pos:end="591:66"><expr pos:start="591:38" pos:end="591:66"><literal type="string" pos:start="591:38" pos:end="591:66">"ff_socket_nonblock failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="593:5" pos:end="593:21">return <expr pos:start="593:12" pos:end="593:20"><name pos:start="593:12" pos:end="593:20">server_fd</name></expr>;</return>

<label pos:start="595:1" pos:end="595:5"><name pos:start="595:1" pos:end="595:4">fail</name>:</label>
    <expr_stmt pos:start="596:5" pos:end="596:27"><expr pos:start="596:5" pos:end="596:26"><call pos:start="596:5" pos:end="596:26"><name pos:start="596:5" pos:end="596:15">closesocket</name><argument_list pos:start="596:16" pos:end="596:26">(<argument pos:start="596:17" pos:end="596:25"><expr pos:start="596:17" pos:end="596:25"><name pos:start="596:17" pos:end="596:25">server_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="597:5" pos:end="597:14">return <expr pos:start="597:12" pos:end="597:13"><operator pos:start="597:12" pos:end="597:12">-</operator><literal type="number" pos:start="597:13" pos:end="597:13">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="600:1" pos:end="600:33">/* start all multicast streams */</comment>
<function pos:start="601:1" pos:end="658:1"><type pos:start="601:1" pos:end="601:11"><specifier pos:start="601:1" pos:end="601:6">static</specifier> <name pos:start="601:8" pos:end="601:11">void</name></type> <name pos:start="601:13" pos:end="601:27">start_multicast</name><parameter_list pos:start="601:28" pos:end="601:33">(<parameter pos:start="601:29" pos:end="601:32"><decl pos:start="601:29" pos:end="601:32"><type pos:start="601:29" pos:end="601:32"><name pos:start="601:29" pos:end="601:32">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="602:1" pos:end="658:1">{<block_content pos:start="603:5" pos:end="657:5">
    <decl_stmt pos:start="603:5" pos:end="603:27"><decl pos:start="603:5" pos:end="603:26"><type pos:start="603:5" pos:end="603:20"><name pos:start="603:5" pos:end="603:18">FFServerStream</name> <modifier pos:start="603:20" pos:end="603:20">*</modifier></type><name pos:start="603:21" pos:end="603:26">stream</name></decl>;</decl_stmt>
    <decl_stmt pos:start="604:5" pos:end="604:24"><decl pos:start="604:5" pos:end="604:23"><type pos:start="604:5" pos:end="604:8"><name pos:start="604:5" pos:end="604:8">char</name></type> <name pos:start="604:10" pos:end="604:23"><name pos:start="604:10" pos:end="604:19">session_id</name><index pos:start="604:20" pos:end="604:23">[<expr pos:start="604:21" pos:end="604:22"><literal type="number" pos:start="604:21" pos:end="604:22">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="605:5" pos:end="605:23"><decl pos:start="605:5" pos:end="605:22"><type pos:start="605:5" pos:end="605:17"><name pos:start="605:5" pos:end="605:15">HTTPContext</name> <modifier pos:start="605:17" pos:end="605:17">*</modifier></type><name pos:start="605:18" pos:end="605:22">rtp_c</name></decl>;</decl_stmt>
    <decl_stmt pos:start="606:5" pos:end="606:39"><decl pos:start="606:5" pos:end="606:38"><type pos:start="606:5" pos:end="606:22"><name pos:start="606:5" pos:end="606:22"><name pos:start="606:5" pos:end="606:10">struct</name> <name pos:start="606:12" pos:end="606:22">sockaddr_in</name></name></type> <name pos:start="606:24" pos:end="606:32">dest_addr</name> <init pos:start="606:34" pos:end="606:38">= <expr pos:start="606:36" pos:end="606:38"><block pos:start="606:36" pos:end="606:38">{<expr pos:start="606:37" pos:end="606:37"><literal type="number" pos:start="606:37" pos:end="606:37">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="607:5" pos:end="607:35"><decl pos:start="607:5" pos:end="607:20"><type pos:start="607:5" pos:end="607:7"><name pos:start="607:5" pos:end="607:7">int</name></type> <name pos:start="607:9" pos:end="607:20">default_port</name></decl>, <decl pos:start="607:23" pos:end="607:34"><type ref="prev" pos:start="607:5" pos:end="607:7"/><name pos:start="607:23" pos:end="607:34">stream_index</name></decl>;</decl_stmt>
    <decl_stmt pos:start="608:5" pos:end="608:34"><decl pos:start="608:5" pos:end="608:24"><type pos:start="608:5" pos:end="608:16"><name pos:start="608:5" pos:end="608:12">unsigned</name> <name pos:start="608:14" pos:end="608:16">int</name></type> <name pos:start="608:18" pos:end="608:24">random0</name></decl>, <decl pos:start="608:27" pos:end="608:33"><type ref="prev" pos:start="608:5" pos:end="608:16"/><name pos:start="608:27" pos:end="608:33">random1</name></decl>;</decl_stmt>

    <expr_stmt pos:start="610:5" pos:end="610:24"><expr pos:start="610:5" pos:end="610:23"><name pos:start="610:5" pos:end="610:16">default_port</name> <operator pos:start="610:18" pos:end="610:18">=</operator> <literal type="number" pos:start="610:20" pos:end="610:23">6000</literal></expr>;</expr_stmt>
    <for pos:start="611:5" pos:end="657:5">for<control pos:start="611:8" pos:end="611:68">(<init pos:start="611:9" pos:end="611:37"><expr pos:start="611:9" pos:end="611:36"><name pos:start="611:9" pos:end="611:14">stream</name> <operator pos:start="611:16" pos:end="611:16">=</operator> <name pos:start="611:18" pos:end="611:36"><name pos:start="611:18" pos:end="611:23">config</name><operator pos:start="611:24" pos:end="611:24">.</operator><name pos:start="611:25" pos:end="611:36">first_stream</name></name></expr>;</init> <condition pos:start="611:39" pos:end="611:45"><expr pos:start="611:39" pos:end="611:44"><name pos:start="611:39" pos:end="611:44">stream</name></expr>;</condition> <incr pos:start="611:47" pos:end="611:67"><expr pos:start="611:47" pos:end="611:67"><name pos:start="611:47" pos:end="611:52">stream</name> <operator pos:start="611:54" pos:end="611:54">=</operator> <name pos:start="611:56" pos:end="611:67"><name pos:start="611:56" pos:end="611:61">stream</name><operator pos:start="611:62" pos:end="611:63">-&gt;</operator><name pos:start="611:64" pos:end="611:67">next</name></name></expr></incr>)</control> <block pos:start="611:70" pos:end="657:5">{<block_content pos:start="613:9" pos:end="656:43">

        <if_stmt pos:start="613:9" pos:end="614:21"><if pos:start="613:9" pos:end="614:21">if <condition pos:start="613:12" pos:end="613:34">(<expr pos:start="613:13" pos:end="613:33"><operator pos:start="613:13" pos:end="613:13">!</operator><name pos:start="613:14" pos:end="613:33"><name pos:start="613:14" pos:end="613:19">stream</name><operator pos:start="613:20" pos:end="613:21">-&gt;</operator><name pos:start="613:22" pos:end="613:33">is_multicast</name></name></expr>)</condition><block type="pseudo" pos:start="614:13" pos:end="614:21"><block_content pos:start="614:13" pos:end="614:21">
            <continue pos:start="614:13" pos:end="614:21">continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt pos:start="616:9" pos:end="616:44"><expr pos:start="616:9" pos:end="616:43"><name pos:start="616:9" pos:end="616:15">random0</name> <operator pos:start="616:17" pos:end="616:17">=</operator> <call pos:start="616:19" pos:end="616:43"><name pos:start="616:19" pos:end="616:28">av_lfg_get</name><argument_list pos:start="616:29" pos:end="616:43">(<argument pos:start="616:30" pos:end="616:42"><expr pos:start="616:30" pos:end="616:42"><operator pos:start="616:30" pos:end="616:30">&amp;</operator><name pos:start="616:31" pos:end="616:42">random_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="617:9" pos:end="617:44"><expr pos:start="617:9" pos:end="617:43"><name pos:start="617:9" pos:end="617:15">random1</name> <operator pos:start="617:17" pos:end="617:17">=</operator> <call pos:start="617:19" pos:end="617:43"><name pos:start="617:19" pos:end="617:28">av_lfg_get</name><argument_list pos:start="617:29" pos:end="617:43">(<argument pos:start="617:30" pos:end="617:42"><expr pos:start="617:30" pos:end="617:42"><operator pos:start="617:30" pos:end="617:30">&amp;</operator><name pos:start="617:31" pos:end="617:42">random_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="619:9" pos:end="619:37">/* open the RTP connection */</comment>
        <expr_stmt pos:start="620:9" pos:end="620:79"><expr pos:start="620:9" pos:end="620:78"><call pos:start="620:9" pos:end="620:78"><name pos:start="620:9" pos:end="620:16">snprintf</name><argument_list pos:start="620:17" pos:end="620:78">(<argument pos:start="620:18" pos:end="620:27"><expr pos:start="620:18" pos:end="620:27"><name pos:start="620:18" pos:end="620:27">session_id</name></expr></argument>, <argument pos:start="620:30" pos:end="620:47"><expr pos:start="620:30" pos:end="620:47"><sizeof pos:start="620:30" pos:end="620:47">sizeof<argument_list pos:start="620:36" pos:end="620:47">(<argument pos:start="620:37" pos:end="620:46"><expr pos:start="620:37" pos:end="620:46"><name pos:start="620:37" pos:end="620:46">session_id</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="620:50" pos:end="620:59"><expr pos:start="620:50" pos:end="620:59"><literal type="string" pos:start="620:50" pos:end="620:59">"%08x%08x"</literal></expr></argument>, <argument pos:start="620:62" pos:end="620:68"><expr pos:start="620:62" pos:end="620:68"><name pos:start="620:62" pos:end="620:68">random0</name></expr></argument>, <argument pos:start="620:71" pos:end="620:77"><expr pos:start="620:71" pos:end="620:77"><name pos:start="620:71" pos:end="620:77">random1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="622:9" pos:end="622:41">/* choose a port if none given */</comment>
        <if_stmt pos:start="623:9" pos:end="626:9"><if pos:start="623:9" pos:end="626:9">if <condition pos:start="623:12" pos:end="623:40">(<expr pos:start="623:13" pos:end="623:39"><name pos:start="623:13" pos:end="623:34"><name pos:start="623:13" pos:end="623:18">stream</name><operator pos:start="623:19" pos:end="623:20">-&gt;</operator><name pos:start="623:21" pos:end="623:34">multicast_port</name></name> <operator pos:start="623:36" pos:end="623:37">==</operator> <literal type="number" pos:start="623:39" pos:end="623:39">0</literal></expr>)</condition> <block pos:start="623:42" pos:end="626:9">{<block_content pos:start="624:13" pos:end="625:32">
            <expr_stmt pos:start="624:13" pos:end="624:50"><expr pos:start="624:13" pos:end="624:49"><name pos:start="624:13" pos:end="624:34"><name pos:start="624:13" pos:end="624:18">stream</name><operator pos:start="624:19" pos:end="624:20">-&gt;</operator><name pos:start="624:21" pos:end="624:34">multicast_port</name></name> <operator pos:start="624:36" pos:end="624:36">=</operator> <name pos:start="624:38" pos:end="624:49">default_port</name></expr>;</expr_stmt>
            <expr_stmt pos:start="625:13" pos:end="625:32"><expr pos:start="625:13" pos:end="625:31"><name pos:start="625:13" pos:end="625:24">default_port</name> <operator pos:start="625:26" pos:end="625:27">+=</operator> <literal type="number" pos:start="625:29" pos:end="625:31">100</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="628:9" pos:end="628:39"><expr pos:start="628:9" pos:end="628:38"><name pos:start="628:9" pos:end="628:28"><name pos:start="628:9" pos:end="628:17">dest_addr</name><operator pos:start="628:18" pos:end="628:18">.</operator><name pos:start="628:19" pos:end="628:28">sin_family</name></name> <operator pos:start="628:30" pos:end="628:30">=</operator> <name pos:start="628:32" pos:end="628:38">AF_INET</name></expr>;</expr_stmt>
        <expr_stmt pos:start="629:9" pos:end="629:50"><expr pos:start="629:9" pos:end="629:49"><name pos:start="629:9" pos:end="629:26"><name pos:start="629:9" pos:end="629:17">dest_addr</name><operator pos:start="629:18" pos:end="629:18">.</operator><name pos:start="629:19" pos:end="629:26">sin_addr</name></name> <operator pos:start="629:28" pos:end="629:28">=</operator> <name pos:start="629:30" pos:end="629:49"><name pos:start="629:30" pos:end="629:35">stream</name><operator pos:start="629:36" pos:end="629:37">-&gt;</operator><name pos:start="629:38" pos:end="629:49">multicast_ip</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="630:9" pos:end="630:59"><expr pos:start="630:9" pos:end="630:58"><name pos:start="630:9" pos:end="630:26"><name pos:start="630:9" pos:end="630:17">dest_addr</name><operator pos:start="630:18" pos:end="630:18">.</operator><name pos:start="630:19" pos:end="630:26">sin_port</name></name> <operator pos:start="630:28" pos:end="630:28">=</operator> <call pos:start="630:30" pos:end="630:58"><name pos:start="630:30" pos:end="630:34">htons</name><argument_list pos:start="630:35" pos:end="630:58">(<argument pos:start="630:36" pos:end="630:57"><expr pos:start="630:36" pos:end="630:57"><name pos:start="630:36" pos:end="630:57"><name pos:start="630:36" pos:end="630:41">stream</name><operator pos:start="630:42" pos:end="630:43">-&gt;</operator><name pos:start="630:44" pos:end="630:57">multicast_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="632:9" pos:end="633:71"><expr pos:start="632:9" pos:end="633:70"><name pos:start="632:9" pos:end="632:13">rtp_c</name> <operator pos:start="632:15" pos:end="632:15">=</operator> <call pos:start="632:17" pos:end="633:70"><name pos:start="632:17" pos:end="632:34">rtp_new_connection</name><argument_list pos:start="632:35" pos:end="633:70">(<argument pos:start="632:36" pos:end="632:45"><expr pos:start="632:36" pos:end="632:45"><operator pos:start="632:36" pos:end="632:36">&amp;</operator><name pos:start="632:37" pos:end="632:45">dest_addr</name></expr></argument>, <argument pos:start="632:48" pos:end="632:53"><expr pos:start="632:48" pos:end="632:53"><name pos:start="632:48" pos:end="632:53">stream</name></expr></argument>, <argument pos:start="632:56" pos:end="632:65"><expr pos:start="632:56" pos:end="632:65"><name pos:start="632:56" pos:end="632:65">session_id</name></expr></argument>,
                                   <argument pos:start="633:36" pos:end="633:69"><expr pos:start="633:36" pos:end="633:69"><name pos:start="633:36" pos:end="633:69">RTSP_LOWER_TRANSPORT_UDP_MULTICAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="634:9" pos:end="635:21"><if pos:start="634:9" pos:end="635:21">if <condition pos:start="634:12" pos:end="634:19">(<expr pos:start="634:13" pos:end="634:18"><operator pos:start="634:13" pos:end="634:13">!</operator><name pos:start="634:14" pos:end="634:18">rtp_c</name></expr>)</condition><block type="pseudo" pos:start="635:13" pos:end="635:21"><block_content pos:start="635:13" pos:end="635:21">
            <continue pos:start="635:13" pos:end="635:21">continue;</continue></block_content></block></if></if_stmt>

        <if_stmt pos:start="637:9" pos:end="641:9"><if pos:start="637:9" pos:end="641:9">if <condition pos:start="637:12" pos:end="637:45">(<expr pos:start="637:13" pos:end="637:44"><call pos:start="637:13" pos:end="637:40"><name pos:start="637:13" pos:end="637:29">open_input_stream</name><argument_list pos:start="637:30" pos:end="637:40">(<argument pos:start="637:31" pos:end="637:35"><expr pos:start="637:31" pos:end="637:35"><name pos:start="637:31" pos:end="637:35">rtp_c</name></expr></argument>, <argument pos:start="637:38" pos:end="637:39"><expr pos:start="637:38" pos:end="637:39"><literal type="string" pos:start="637:38" pos:end="637:39">""</literal></expr></argument>)</argument_list></call> <operator pos:start="637:42" pos:end="637:42">&lt;</operator> <literal type="number" pos:start="637:44" pos:end="637:44">0</literal></expr>)</condition> <block pos:start="637:47" pos:end="641:9">{<block_content pos:start="638:13" pos:end="640:21">
            <expr_stmt pos:start="638:13" pos:end="639:39"><expr pos:start="638:13" pos:end="639:38"><call pos:start="638:13" pos:end="639:38"><name pos:start="638:13" pos:end="638:20">http_log</name><argument_list pos:start="638:21" pos:end="639:38">(<argument pos:start="638:22" pos:end="638:68"><expr pos:start="638:22" pos:end="638:68"><literal type="string" pos:start="638:22" pos:end="638:68">"Could not open input stream for stream '%s'\n"</literal></expr></argument>,
                     <argument pos:start="639:22" pos:end="639:37"><expr pos:start="639:22" pos:end="639:37"><name pos:start="639:22" pos:end="639:37"><name pos:start="639:22" pos:end="639:27">stream</name><operator pos:start="639:28" pos:end="639:29">-&gt;</operator><name pos:start="639:30" pos:end="639:37">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue pos:start="640:13" pos:end="640:21">continue;</continue>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="643:9" pos:end="643:34">/* open each RTP stream */</comment>
        <for pos:start="644:9" pos:end="654:9">for<control pos:start="644:12" pos:end="645:27">(<init pos:start="644:13" pos:end="644:29"><expr pos:start="644:13" pos:end="644:28"><name pos:start="644:13" pos:end="644:24">stream_index</name> <operator pos:start="644:26" pos:end="644:26">=</operator> <literal type="number" pos:start="644:28" pos:end="644:28">0</literal></expr>;</init> <condition pos:start="644:31" pos:end="644:64"><expr pos:start="644:31" pos:end="644:63"><name pos:start="644:31" pos:end="644:42">stream_index</name> <operator pos:start="644:44" pos:end="644:44">&lt;</operator> <name pos:start="644:46" pos:end="644:63"><name pos:start="644:46" pos:end="644:51">stream</name><operator pos:start="644:52" pos:end="644:53">-&gt;</operator><name pos:start="644:54" pos:end="644:63">nb_streams</name></name></expr>;</condition>
            <incr pos:start="645:13" pos:end="645:26"><expr pos:start="645:13" pos:end="645:26"><name pos:start="645:13" pos:end="645:24">stream_index</name><operator pos:start="645:25" pos:end="645:26">++</operator></expr></incr>)</control> <block pos:start="645:29" pos:end="654:9">{<block_content pos:start="646:13" pos:end="653:20">
            <expr_stmt pos:start="646:13" pos:end="647:57"><expr pos:start="646:13" pos:end="647:56"><name pos:start="646:13" pos:end="646:30"><name pos:start="646:13" pos:end="646:21">dest_addr</name><operator pos:start="646:22" pos:end="646:22">.</operator><name pos:start="646:23" pos:end="646:30">sin_port</name></name> <operator pos:start="646:32" pos:end="646:32">=</operator> <call pos:start="646:34" pos:end="647:56"><name pos:start="646:34" pos:end="646:38">htons</name><argument_list pos:start="646:39" pos:end="647:56">(<argument pos:start="646:40" pos:end="647:55"><expr pos:start="646:40" pos:end="647:55"><name pos:start="646:40" pos:end="646:61"><name pos:start="646:40" pos:end="646:45">stream</name><operator pos:start="646:46" pos:end="646:47">-&gt;</operator><name pos:start="646:48" pos:end="646:61">multicast_port</name></name> <operator pos:start="646:63" pos:end="646:63">+</operator>
                                       <literal type="number" pos:start="647:40" pos:end="647:40">2</literal> <operator pos:start="647:42" pos:end="647:42">*</operator> <name pos:start="647:44" pos:end="647:55">stream_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="648:13" pos:end="649:25"><if pos:start="648:13" pos:end="649:25">if <condition pos:start="648:16" pos:end="648:78">(<expr pos:start="648:17" pos:end="648:77"><call pos:start="648:17" pos:end="648:72"><name pos:start="648:17" pos:end="648:33">rtp_new_av_stream</name><argument_list pos:start="648:34" pos:end="648:72">(<argument pos:start="648:35" pos:end="648:39"><expr pos:start="648:35" pos:end="648:39"><name pos:start="648:35" pos:end="648:39">rtp_c</name></expr></argument>, <argument pos:start="648:42" pos:end="648:53"><expr pos:start="648:42" pos:end="648:53"><name pos:start="648:42" pos:end="648:53">stream_index</name></expr></argument>, <argument pos:start="648:56" pos:end="648:65"><expr pos:start="648:56" pos:end="648:65"><operator pos:start="648:56" pos:end="648:56">&amp;</operator><name pos:start="648:57" pos:end="648:65">dest_addr</name></expr></argument>, <argument pos:start="648:68" pos:end="648:71"><expr pos:start="648:68" pos:end="648:71"><name pos:start="648:68" pos:end="648:71">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="648:74" pos:end="648:75">&gt;=</operator> <literal type="number" pos:start="648:77" pos:end="648:77">0</literal></expr>)</condition><block type="pseudo" pos:start="649:17" pos:end="649:25"><block_content pos:start="649:17" pos:end="649:25">
                <continue pos:start="649:17" pos:end="649:25">continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt pos:start="651:13" pos:end="652:53"><expr pos:start="651:13" pos:end="652:52"><call pos:start="651:13" pos:end="652:52"><name pos:start="651:13" pos:end="651:20">http_log</name><argument_list pos:start="651:21" pos:end="652:52">(<argument pos:start="651:22" pos:end="651:70"><expr pos:start="651:22" pos:end="651:70"><literal type="string" pos:start="651:22" pos:end="651:70">"Could not open output stream '%s/streamid=%d'\n"</literal></expr></argument>,
                     <argument pos:start="652:22" pos:end="652:37"><expr pos:start="652:22" pos:end="652:37"><name pos:start="652:22" pos:end="652:37"><name pos:start="652:22" pos:end="652:27">stream</name><operator pos:start="652:28" pos:end="652:29">-&gt;</operator><name pos:start="652:30" pos:end="652:37">filename</name></name></expr></argument>, <argument pos:start="652:40" pos:end="652:51"><expr pos:start="652:40" pos:end="652:51"><name pos:start="652:40" pos:end="652:51">stream_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="653:13" pos:end="653:20"><expr pos:start="653:13" pos:end="653:19"><call pos:start="653:13" pos:end="653:19"><name pos:start="653:13" pos:end="653:16">exit</name><argument_list pos:start="653:17" pos:end="653:19">(<argument pos:start="653:18" pos:end="653:18"><expr pos:start="653:18" pos:end="653:18"><literal type="number" pos:start="653:18" pos:end="653:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt pos:start="656:9" pos:end="656:43"><expr pos:start="656:9" pos:end="656:42"><name pos:start="656:9" pos:end="656:20"><name pos:start="656:9" pos:end="656:13">rtp_c</name><operator pos:start="656:14" pos:end="656:15">-&gt;</operator><name pos:start="656:16" pos:end="656:20">state</name></name> <operator pos:start="656:22" pos:end="656:22">=</operator> <name pos:start="656:24" pos:end="656:42">HTTPSTATE_SEND_DATA</name></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block" pos:start="660:1" pos:end="660:34">/* main loop of the HTTP server */</comment>
<function pos:start="661:1" pos:end="811:1"><type pos:start="661:1" pos:end="661:10"><specifier pos:start="661:1" pos:end="661:6">static</specifier> <name pos:start="661:8" pos:end="661:10">int</name></type> <name pos:start="661:12" pos:end="661:22">http_server</name><parameter_list pos:start="661:23" pos:end="661:28">(<parameter pos:start="661:24" pos:end="661:27"><decl pos:start="661:24" pos:end="661:27"><type pos:start="661:24" pos:end="661:27"><name pos:start="661:24" pos:end="661:27">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="662:1" pos:end="811:1">{<block_content pos:start="663:5" pos:end="810:14">
    <decl_stmt pos:start="663:5" pos:end="663:42"><decl pos:start="663:5" pos:end="663:21"><type pos:start="663:5" pos:end="663:7"><name pos:start="663:5" pos:end="663:7">int</name></type> <name pos:start="663:9" pos:end="663:17">server_fd</name> <init pos:start="663:19" pos:end="663:21">= <expr pos:start="663:21" pos:end="663:21"><literal type="number" pos:start="663:21" pos:end="663:21">0</literal></expr></init></decl>, <decl pos:start="663:24" pos:end="663:41"><type ref="prev" pos:start="663:5" pos:end="663:7"/><name pos:start="663:24" pos:end="663:37">rtsp_server_fd</name> <init pos:start="663:39" pos:end="663:41">= <expr pos:start="663:41" pos:end="663:41"><literal type="number" pos:start="663:41" pos:end="663:41">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="664:5" pos:end="664:19"><decl pos:start="664:5" pos:end="664:11"><type pos:start="664:5" pos:end="664:7"><name pos:start="664:5" pos:end="664:7">int</name></type> <name pos:start="664:9" pos:end="664:11">ret</name></decl>, <decl pos:start="664:14" pos:end="664:18"><type ref="prev" pos:start="664:5" pos:end="664:7"/><name pos:start="664:14" pos:end="664:18">delay</name></decl>;</decl_stmt>
    <decl_stmt pos:start="665:5" pos:end="665:43"><decl pos:start="665:5" pos:end="665:29"><type pos:start="665:5" pos:end="665:19"><name pos:start="665:5" pos:end="665:17"><name pos:start="665:5" pos:end="665:10">struct</name> <name pos:start="665:12" pos:end="665:17">pollfd</name></name> <modifier pos:start="665:19" pos:end="665:19">*</modifier></type><name pos:start="665:20" pos:end="665:29">poll_table</name></decl>, <decl pos:start="665:32" pos:end="665:42"><type ref="prev" pos:start="665:5" pos:end="665:19"><modifier pos:start="665:32" pos:end="665:32">*</modifier></type><name pos:start="665:33" pos:end="665:42">poll_entry</name></decl>;</decl_stmt>
    <decl_stmt pos:start="666:5" pos:end="666:28"><decl pos:start="666:5" pos:end="666:18"><type pos:start="666:5" pos:end="666:17"><name pos:start="666:5" pos:end="666:15">HTTPContext</name> <modifier pos:start="666:17" pos:end="666:17">*</modifier></type><name pos:start="666:18" pos:end="666:18">c</name></decl>, <decl pos:start="666:21" pos:end="666:27"><type ref="prev" pos:start="666:5" pos:end="666:17"><modifier pos:start="666:21" pos:end="666:21">*</modifier></type><name pos:start="666:22" pos:end="666:27">c_next</name></decl>;</decl_stmt>

    <expr_stmt pos:start="668:5" pos:end="669:55"><expr pos:start="668:5" pos:end="669:54"><name pos:start="668:5" pos:end="668:14">poll_table</name> <operator pos:start="668:16" pos:end="668:16">=</operator> <call pos:start="668:18" pos:end="669:54"><name pos:start="668:18" pos:end="668:33">av_mallocz_array</name><argument_list pos:start="668:34" pos:end="669:54">(<argument pos:start="668:35" pos:end="668:68"><expr pos:start="668:35" pos:end="668:68"><name pos:start="668:35" pos:end="668:64"><name pos:start="668:35" pos:end="668:40">config</name><operator pos:start="668:41" pos:end="668:41">.</operator><name pos:start="668:42" pos:end="668:64">nb_max_http_connections</name></name> <operator pos:start="668:66" pos:end="668:66">+</operator> <literal type="number" pos:start="668:68" pos:end="668:68">2</literal></expr></argument>,
                                  <argument pos:start="669:35" pos:end="669:53"><expr pos:start="669:35" pos:end="669:53"><sizeof pos:start="669:35" pos:end="669:53">sizeof<argument_list pos:start="669:41" pos:end="669:53">(<argument pos:start="669:42" pos:end="669:52"><expr pos:start="669:42" pos:end="669:52"><operator pos:start="669:42" pos:end="669:42">*</operator><name pos:start="669:43" pos:end="669:52">poll_table</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="670:5" pos:end="674:5"><if pos:start="670:5" pos:end="674:5">if<condition pos:start="670:7" pos:end="670:19">(<expr pos:start="670:8" pos:end="670:18"><operator pos:start="670:8" pos:end="670:8">!</operator><name pos:start="670:9" pos:end="670:18">poll_table</name></expr>)</condition> <block pos:start="670:21" pos:end="674:5">{<block_content pos:start="671:9" pos:end="673:18">
        <expr_stmt pos:start="671:9" pos:end="672:67"><expr pos:start="671:9" pos:end="672:66"><call pos:start="671:9" pos:end="672:66"><name pos:start="671:9" pos:end="671:16">http_log</name><argument_list pos:start="671:17" pos:end="672:66">(<argument pos:start="671:18" pos:end="672:33"><expr pos:start="671:18" pos:end="672:33"><literal type="string" pos:start="671:18" pos:end="671:67">"Impossible to allocate a poll table handling %d "</literal>
                 <literal type="string" pos:start="672:18" pos:end="672:33">"connections.\n"</literal></expr></argument>, <argument pos:start="672:36" pos:end="672:65"><expr pos:start="672:36" pos:end="672:65"><name pos:start="672:36" pos:end="672:65"><name pos:start="672:36" pos:end="672:41">config</name><operator pos:start="672:42" pos:end="672:42">.</operator><name pos:start="672:43" pos:end="672:65">nb_max_http_connections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="673:9" pos:end="673:18">return <expr pos:start="673:16" pos:end="673:17"><operator pos:start="673:16" pos:end="673:16">-</operator><literal type="number" pos:start="673:17" pos:end="673:17">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="676:5" pos:end="680:5"><if pos:start="676:5" pos:end="680:5">if <condition pos:start="676:8" pos:end="676:34">(<expr pos:start="676:9" pos:end="676:33"><name pos:start="676:9" pos:end="676:33"><name pos:start="676:9" pos:end="676:14">config</name><operator pos:start="676:15" pos:end="676:15">.</operator><name pos:start="676:16" pos:end="676:24">http_addr</name><operator pos:start="676:25" pos:end="676:25">.</operator><name pos:start="676:26" pos:end="676:33">sin_port</name></name></expr>)</condition> <block pos:start="676:36" pos:end="680:5">{<block_content pos:start="677:9" pos:end="679:22">
        <expr_stmt pos:start="677:9" pos:end="677:58"><expr pos:start="677:9" pos:end="677:57"><name pos:start="677:9" pos:end="677:17">server_fd</name> <operator pos:start="677:19" pos:end="677:19">=</operator> <call pos:start="677:21" pos:end="677:57"><name pos:start="677:21" pos:end="677:38">socket_open_listen</name><argument_list pos:start="677:39" pos:end="677:57">(<argument pos:start="677:40" pos:end="677:56"><expr pos:start="677:40" pos:end="677:56"><operator pos:start="677:40" pos:end="677:40">&amp;</operator><name pos:start="677:41" pos:end="677:56"><name pos:start="677:41" pos:end="677:46">config</name><operator pos:start="677:47" pos:end="677:47">.</operator><name pos:start="677:48" pos:end="677:56">http_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="678:9" pos:end="679:22"><if pos:start="678:9" pos:end="679:22">if <condition pos:start="678:12" pos:end="678:26">(<expr pos:start="678:13" pos:end="678:25"><name pos:start="678:13" pos:end="678:21">server_fd</name> <operator pos:start="678:23" pos:end="678:23">&lt;</operator> <literal type="number" pos:start="678:25" pos:end="678:25">0</literal></expr>)</condition><block type="pseudo" pos:start="679:13" pos:end="679:22"><block_content pos:start="679:13" pos:end="679:22">
            <goto pos:start="679:13" pos:end="679:22">goto <name pos:start="679:18" pos:end="679:21">quit</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="682:5" pos:end="688:5"><if pos:start="682:5" pos:end="688:5">if <condition pos:start="682:8" pos:end="682:34">(<expr pos:start="682:9" pos:end="682:33"><name pos:start="682:9" pos:end="682:33"><name pos:start="682:9" pos:end="682:14">config</name><operator pos:start="682:15" pos:end="682:15">.</operator><name pos:start="682:16" pos:end="682:24">rtsp_addr</name><operator pos:start="682:25" pos:end="682:25">.</operator><name pos:start="682:26" pos:end="682:33">sin_port</name></name></expr>)</condition> <block pos:start="682:36" pos:end="688:5">{<block_content pos:start="683:9" pos:end="687:9">
        <expr_stmt pos:start="683:9" pos:end="683:63"><expr pos:start="683:9" pos:end="683:62"><name pos:start="683:9" pos:end="683:22">rtsp_server_fd</name> <operator pos:start="683:24" pos:end="683:24">=</operator> <call pos:start="683:26" pos:end="683:62"><name pos:start="683:26" pos:end="683:43">socket_open_listen</name><argument_list pos:start="683:44" pos:end="683:62">(<argument pos:start="683:45" pos:end="683:61"><expr pos:start="683:45" pos:end="683:61"><operator pos:start="683:45" pos:end="683:45">&amp;</operator><name pos:start="683:46" pos:end="683:61"><name pos:start="683:46" pos:end="683:51">config</name><operator pos:start="683:52" pos:end="683:52">.</operator><name pos:start="683:53" pos:end="683:61">rtsp_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="684:9" pos:end="687:9"><if pos:start="684:9" pos:end="687:9">if <condition pos:start="684:12" pos:end="684:31">(<expr pos:start="684:13" pos:end="684:30"><name pos:start="684:13" pos:end="684:26">rtsp_server_fd</name> <operator pos:start="684:28" pos:end="684:28">&lt;</operator> <literal type="number" pos:start="684:30" pos:end="684:30">0</literal></expr>)</condition> <block pos:start="684:33" pos:end="687:9">{<block_content pos:start="685:13" pos:end="686:22">
            <expr_stmt pos:start="685:13" pos:end="685:35"><expr pos:start="685:13" pos:end="685:34"><call pos:start="685:13" pos:end="685:34"><name pos:start="685:13" pos:end="685:23">closesocket</name><argument_list pos:start="685:24" pos:end="685:34">(<argument pos:start="685:25" pos:end="685:33"><expr pos:start="685:25" pos:end="685:33"><name pos:start="685:25" pos:end="685:33">server_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto pos:start="686:13" pos:end="686:22">goto <name pos:start="686:18" pos:end="686:21">quit</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="690:5" pos:end="694:6"><if pos:start="690:5" pos:end="694:6">if <condition pos:start="690:8" pos:end="690:25">(<expr pos:start="690:9" pos:end="690:23"><operator pos:start="690:9" pos:end="690:9">!</operator><name pos:start="690:10" pos:end="690:23">rtsp_server_fd</name></expr> )</condition><block pos:start="690:26" pos:end="694:6">{<block_content pos:start="691:1" pos:end="694:5">
<if_stmt pos:start="691:1" pos:end="694:5"><if pos:start="691:1" pos:end="694:5">if<condition pos:start="691:3" pos:end="691:15">( <expr pos:start="691:5" pos:end="691:14"><operator pos:start="691:5" pos:end="691:5">!</operator><name pos:start="691:6" pos:end="691:14">server_fd</name></expr>)</condition> <block pos:start="691:17" pos:end="694:5">{<block_content pos:start="692:9" pos:end="693:18">
        <expr_stmt pos:start="692:9" pos:end="692:46"><expr pos:start="692:9" pos:end="692:45"><call pos:start="692:9" pos:end="692:45"><name pos:start="692:9" pos:end="692:16">http_log</name><argument_list pos:start="692:17" pos:end="692:45">(<argument pos:start="692:18" pos:end="692:44"><expr pos:start="692:18" pos:end="692:44"><literal type="string" pos:start="692:18" pos:end="692:44">"HTTP and RTSP disabled.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="693:9" pos:end="693:18">goto <name pos:start="693:14" pos:end="693:17">quit</name>;</goto>
    </block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="696:5" pos:end="696:36"><expr pos:start="696:5" pos:end="696:35"><call pos:start="696:5" pos:end="696:35"><name pos:start="696:5" pos:end="696:12">http_log</name><argument_list pos:start="696:13" pos:end="696:35">(<argument pos:start="696:14" pos:end="696:34"><expr pos:start="696:14" pos:end="696:34"><literal type="string" pos:start="696:14" pos:end="696:34">"FFserver started.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="698:5" pos:end="698:38"><expr pos:start="698:5" pos:end="698:37"><call pos:start="698:5" pos:end="698:37"><name pos:start="698:5" pos:end="698:18">start_children</name><argument_list pos:start="698:19" pos:end="698:37">(<argument pos:start="698:20" pos:end="698:36"><expr pos:start="698:20" pos:end="698:36"><name pos:start="698:20" pos:end="698:36"><name pos:start="698:20" pos:end="698:25">config</name><operator pos:start="698:26" pos:end="698:26">.</operator><name pos:start="698:27" pos:end="698:36">first_feed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="700:5" pos:end="700:22"><expr pos:start="700:5" pos:end="700:21"><call pos:start="700:5" pos:end="700:21"><name pos:start="700:5" pos:end="700:19">start_multicast</name><argument_list pos:start="700:20" pos:end="700:21">()</argument_list></call></expr>;</expr_stmt>

    <for pos:start="702:5" pos:end="806:5">for<control pos:start="702:8" pos:end="702:11">(<init pos:start="702:9" pos:end="702:9">;</init><condition pos:start="702:10" pos:end="702:10">;</condition><incr/>)</control> <block pos:start="702:13" pos:end="806:5">{<block_content pos:start="703:9" pos:end="805:9">
        <expr_stmt pos:start="703:9" pos:end="703:32"><expr pos:start="703:9" pos:end="703:31"><name pos:start="703:9" pos:end="703:18">poll_entry</name> <operator pos:start="703:20" pos:end="703:20">=</operator> <name pos:start="703:22" pos:end="703:31">poll_table</name></expr>;</expr_stmt>
        <if_stmt pos:start="704:9" pos:end="708:9"><if pos:start="704:9" pos:end="708:9">if <condition pos:start="704:12" pos:end="704:22">(<expr pos:start="704:13" pos:end="704:21"><name pos:start="704:13" pos:end="704:21">server_fd</name></expr>)</condition> <block pos:start="704:24" pos:end="708:9">{<block_content pos:start="705:13" pos:end="707:25">
            <expr_stmt pos:start="705:13" pos:end="705:39"><expr pos:start="705:13" pos:end="705:38"><name pos:start="705:13" pos:end="705:26"><name pos:start="705:13" pos:end="705:22">poll_entry</name><operator pos:start="705:23" pos:end="705:24">-&gt;</operator><name pos:start="705:25" pos:end="705:26">fd</name></name> <operator pos:start="705:28" pos:end="705:28">=</operator> <name pos:start="705:30" pos:end="705:38">server_fd</name></expr>;</expr_stmt>
            <expr_stmt pos:start="706:13" pos:end="706:40"><expr pos:start="706:13" pos:end="706:39"><name pos:start="706:13" pos:end="706:30"><name pos:start="706:13" pos:end="706:22">poll_entry</name><operator pos:start="706:23" pos:end="706:24">-&gt;</operator><name pos:start="706:25" pos:end="706:30">events</name></name> <operator pos:start="706:32" pos:end="706:32">=</operator> <name pos:start="706:34" pos:end="706:39">POLLIN</name></expr>;</expr_stmt>
            <expr_stmt pos:start="707:13" pos:end="707:25"><expr pos:start="707:13" pos:end="707:24"><name pos:start="707:13" pos:end="707:22">poll_entry</name><operator pos:start="707:23" pos:end="707:24">++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="709:9" pos:end="713:9"><if pos:start="709:9" pos:end="713:9">if <condition pos:start="709:12" pos:end="709:27">(<expr pos:start="709:13" pos:end="709:26"><name pos:start="709:13" pos:end="709:26">rtsp_server_fd</name></expr>)</condition> <block pos:start="709:29" pos:end="713:9">{<block_content pos:start="710:13" pos:end="712:25">
            <expr_stmt pos:start="710:13" pos:end="710:44"><expr pos:start="710:13" pos:end="710:43"><name pos:start="710:13" pos:end="710:26"><name pos:start="710:13" pos:end="710:22">poll_entry</name><operator pos:start="710:23" pos:end="710:24">-&gt;</operator><name pos:start="710:25" pos:end="710:26">fd</name></name> <operator pos:start="710:28" pos:end="710:28">=</operator> <name pos:start="710:30" pos:end="710:43">rtsp_server_fd</name></expr>;</expr_stmt>
            <expr_stmt pos:start="711:13" pos:end="711:40"><expr pos:start="711:13" pos:end="711:39"><name pos:start="711:13" pos:end="711:30"><name pos:start="711:13" pos:end="711:22">poll_entry</name><operator pos:start="711:23" pos:end="711:24">-&gt;</operator><name pos:start="711:25" pos:end="711:30">events</name></name> <operator pos:start="711:32" pos:end="711:32">=</operator> <name pos:start="711:34" pos:end="711:39">POLLIN</name></expr>;</expr_stmt>
            <expr_stmt pos:start="712:13" pos:end="712:25"><expr pos:start="712:13" pos:end="712:24"><name pos:start="712:13" pos:end="712:22">poll_entry</name><operator pos:start="712:23" pos:end="712:24">++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="715:9" pos:end="715:49">/* wait for events on each HTTP handle */</comment>
        <expr_stmt pos:start="716:9" pos:end="716:27"><expr pos:start="716:9" pos:end="716:26"><name pos:start="716:9" pos:end="716:9">c</name> <operator pos:start="716:11" pos:end="716:11">=</operator> <name pos:start="716:13" pos:end="716:26">first_http_ctx</name></expr>;</expr_stmt>
        <expr_stmt pos:start="717:9" pos:end="717:21"><expr pos:start="717:9" pos:end="717:20"><name pos:start="717:9" pos:end="717:13">delay</name> <operator pos:start="717:15" pos:end="717:15">=</operator> <literal type="number" pos:start="717:17" pos:end="717:20">1000</literal></expr>;</expr_stmt>
        <while pos:start="718:9" pos:end="763:9">while <condition pos:start="718:15" pos:end="718:17">(<expr pos:start="718:16" pos:end="718:16"><name pos:start="718:16" pos:end="718:16">c</name></expr>)</condition> <block pos:start="718:19" pos:end="763:9">{<block_content pos:start="719:13" pos:end="762:24">
            <decl_stmt pos:start="719:13" pos:end="719:19"><decl pos:start="719:13" pos:end="719:18"><type pos:start="719:13" pos:end="719:15"><name pos:start="719:13" pos:end="719:15">int</name></type> <name pos:start="719:17" pos:end="719:18">fd</name></decl>;</decl_stmt>
            <expr_stmt pos:start="720:13" pos:end="720:23"><expr pos:start="720:13" pos:end="720:22"><name pos:start="720:13" pos:end="720:14">fd</name> <operator pos:start="720:16" pos:end="720:16">=</operator> <name pos:start="720:18" pos:end="720:22"><name pos:start="720:18" pos:end="720:18">c</name><operator pos:start="720:19" pos:end="720:20">-&gt;</operator><name pos:start="720:21" pos:end="720:22">fd</name></name></expr>;</expr_stmt>
            <switch pos:start="721:13" pos:end="761:13">switch<condition pos:start="721:19" pos:end="721:28">(<expr pos:start="721:20" pos:end="721:27"><name pos:start="721:20" pos:end="721:27"><name pos:start="721:20" pos:end="721:20">c</name><operator pos:start="721:21" pos:end="721:22">-&gt;</operator><name pos:start="721:23" pos:end="721:27">state</name></name></expr>)</condition> <block pos:start="721:30" pos:end="761:13">{<block_content pos:start="722:13" pos:end="760:22">
            <case pos:start="722:13" pos:end="722:39">case <expr pos:start="722:18" pos:end="722:38"><name pos:start="722:18" pos:end="722:38">HTTPSTATE_SEND_HEADER</name></expr>:</case>
            <case pos:start="723:13" pos:end="723:38">case <expr pos:start="723:18" pos:end="723:37"><name pos:start="723:18" pos:end="723:37">RTSPSTATE_SEND_REPLY</name></expr>:</case>
            <case pos:start="724:13" pos:end="724:39">case <expr pos:start="724:18" pos:end="724:38"><name pos:start="724:18" pos:end="724:38">RTSPSTATE_SEND_PACKET</name></expr>:</case>
                <expr_stmt pos:start="725:17" pos:end="725:43"><expr pos:start="725:17" pos:end="725:42"><name pos:start="725:17" pos:end="725:29"><name pos:start="725:17" pos:end="725:17">c</name><operator pos:start="725:18" pos:end="725:19">-&gt;</operator><name pos:start="725:20" pos:end="725:29">poll_entry</name></name> <operator pos:start="725:31" pos:end="725:31">=</operator> <name pos:start="725:33" pos:end="725:42">poll_entry</name></expr>;</expr_stmt>
                <expr_stmt pos:start="726:17" pos:end="726:36"><expr pos:start="726:17" pos:end="726:35"><name pos:start="726:17" pos:end="726:30"><name pos:start="726:17" pos:end="726:26">poll_entry</name><operator pos:start="726:27" pos:end="726:28">-&gt;</operator><name pos:start="726:29" pos:end="726:30">fd</name></name> <operator pos:start="726:32" pos:end="726:32">=</operator> <name pos:start="726:34" pos:end="726:35">fd</name></expr>;</expr_stmt>
                <expr_stmt pos:start="727:17" pos:end="727:45"><expr pos:start="727:17" pos:end="727:44"><name pos:start="727:17" pos:end="727:34"><name pos:start="727:17" pos:end="727:26">poll_entry</name><operator pos:start="727:27" pos:end="727:28">-&gt;</operator><name pos:start="727:29" pos:end="727:34">events</name></name> <operator pos:start="727:36" pos:end="727:36">=</operator> <name pos:start="727:38" pos:end="727:44">POLLOUT</name></expr>;</expr_stmt>
                <expr_stmt pos:start="728:17" pos:end="728:29"><expr pos:start="728:17" pos:end="728:28"><name pos:start="728:17" pos:end="728:26">poll_entry</name><operator pos:start="728:27" pos:end="728:28">++</operator></expr>;</expr_stmt>
                <break pos:start="729:17" pos:end="729:22">break;</break>
            <case pos:start="730:13" pos:end="730:44">case <expr pos:start="730:18" pos:end="730:43"><name pos:start="730:18" pos:end="730:43">HTTPSTATE_SEND_DATA_HEADER</name></expr>:</case>
            <case pos:start="731:13" pos:end="731:37">case <expr pos:start="731:18" pos:end="731:36"><name pos:start="731:18" pos:end="731:36">HTTPSTATE_SEND_DATA</name></expr>:</case>
            <case pos:start="732:13" pos:end="732:45">case <expr pos:start="732:18" pos:end="732:44"><name pos:start="732:18" pos:end="732:44">HTTPSTATE_SEND_DATA_TRAILER</name></expr>:</case>
                <if_stmt pos:start="733:17" pos:end="746:17"><if pos:start="733:17" pos:end="740:17">if <condition pos:start="733:20" pos:end="733:38">(<expr pos:start="733:21" pos:end="733:37"><operator pos:start="733:21" pos:end="733:21">!</operator><name pos:start="733:22" pos:end="733:37"><name pos:start="733:22" pos:end="733:22">c</name><operator pos:start="733:23" pos:end="733:24">-&gt;</operator><name pos:start="733:25" pos:end="733:37">is_packetized</name></name></expr>)</condition> <block pos:start="733:40" pos:end="740:17">{<block_content pos:start="736:21" pos:end="739:33">
                    <comment type="block" pos:start="734:21" pos:end="735:51">/* for TCP, we output as much as we can
                     * (may need to put a limit) */</comment>
                    <expr_stmt pos:start="736:21" pos:end="736:47"><expr pos:start="736:21" pos:end="736:46"><name pos:start="736:21" pos:end="736:33"><name pos:start="736:21" pos:end="736:21">c</name><operator pos:start="736:22" pos:end="736:23">-&gt;</operator><name pos:start="736:24" pos:end="736:33">poll_entry</name></name> <operator pos:start="736:35" pos:end="736:35">=</operator> <name pos:start="736:37" pos:end="736:46">poll_entry</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="737:21" pos:end="737:40"><expr pos:start="737:21" pos:end="737:39"><name pos:start="737:21" pos:end="737:34"><name pos:start="737:21" pos:end="737:30">poll_entry</name><operator pos:start="737:31" pos:end="737:32">-&gt;</operator><name pos:start="737:33" pos:end="737:34">fd</name></name> <operator pos:start="737:36" pos:end="737:36">=</operator> <name pos:start="737:38" pos:end="737:39">fd</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="738:21" pos:end="738:49"><expr pos:start="738:21" pos:end="738:48"><name pos:start="738:21" pos:end="738:38"><name pos:start="738:21" pos:end="738:30">poll_entry</name><operator pos:start="738:31" pos:end="738:32">-&gt;</operator><name pos:start="738:33" pos:end="738:38">events</name></name> <operator pos:start="738:40" pos:end="738:40">=</operator> <name pos:start="738:42" pos:end="738:48">POLLOUT</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="739:21" pos:end="739:33"><expr pos:start="739:21" pos:end="739:32"><name pos:start="739:21" pos:end="739:30">poll_entry</name><operator pos:start="739:31" pos:end="739:32">++</operator></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="740:19" pos:end="746:17">else <block pos:start="740:24" pos:end="746:17">{<block_content pos:start="744:21" pos:end="745:35">
                    <comment type="block" pos:start="741:21" pos:end="743:66">/* when ffserver is doing the timing, we work by
                     * looking at which packet needs to be sent every
                     * 10 ms (one tick wait XXX: 10 ms assumed) */</comment>
                    <if_stmt pos:start="744:21" pos:end="745:35"><if pos:start="744:21" pos:end="745:35">if <condition pos:start="744:24" pos:end="744:35">(<expr pos:start="744:25" pos:end="744:34"><name pos:start="744:25" pos:end="744:29">delay</name> <operator pos:start="744:31" pos:end="744:31">&gt;</operator> <literal type="number" pos:start="744:33" pos:end="744:34">10</literal></expr>)</condition><block type="pseudo" pos:start="745:25" pos:end="745:35"><block_content pos:start="745:25" pos:end="745:35">
                        <expr_stmt pos:start="745:25" pos:end="745:35"><expr pos:start="745:25" pos:end="745:34"><name pos:start="745:25" pos:end="745:29">delay</name> <operator pos:start="745:31" pos:end="745:31">=</operator> <literal type="number" pos:start="745:33" pos:end="745:34">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
                <break pos:start="747:17" pos:end="747:22">break;</break>
            <case pos:start="748:13" pos:end="748:40">case <expr pos:start="748:18" pos:end="748:39"><name pos:start="748:18" pos:end="748:39">HTTPSTATE_WAIT_REQUEST</name></expr>:</case>
            <case pos:start="749:13" pos:end="749:40">case <expr pos:start="749:18" pos:end="749:39"><name pos:start="749:18" pos:end="749:39">HTTPSTATE_RECEIVE_DATA</name></expr>:</case>
            <case pos:start="750:13" pos:end="750:37">case <expr pos:start="750:18" pos:end="750:36"><name pos:start="750:18" pos:end="750:36">HTTPSTATE_WAIT_FEED</name></expr>:</case>
            <case pos:start="751:13" pos:end="751:40">case <expr pos:start="751:18" pos:end="751:39"><name pos:start="751:18" pos:end="751:39">RTSPSTATE_WAIT_REQUEST</name></expr>:</case>
                <comment type="block" pos:start="752:17" pos:end="752:42">/* need to catch errors */</comment>
                <expr_stmt pos:start="753:17" pos:end="753:43"><expr pos:start="753:17" pos:end="753:42"><name pos:start="753:17" pos:end="753:29"><name pos:start="753:17" pos:end="753:17">c</name><operator pos:start="753:18" pos:end="753:19">-&gt;</operator><name pos:start="753:20" pos:end="753:29">poll_entry</name></name> <operator pos:start="753:31" pos:end="753:31">=</operator> <name pos:start="753:33" pos:end="753:42">poll_entry</name></expr>;</expr_stmt>
                <expr_stmt pos:start="754:17" pos:end="754:36"><expr pos:start="754:17" pos:end="754:35"><name pos:start="754:17" pos:end="754:30"><name pos:start="754:17" pos:end="754:26">poll_entry</name><operator pos:start="754:27" pos:end="754:28">-&gt;</operator><name pos:start="754:29" pos:end="754:30">fd</name></name> <operator pos:start="754:32" pos:end="754:32">=</operator> <name pos:start="754:34" pos:end="754:35">fd</name></expr>;</expr_stmt>
                <expr_stmt pos:start="755:17" pos:end="755:44"><expr pos:start="755:17" pos:end="755:43"><name pos:start="755:17" pos:end="755:34"><name pos:start="755:17" pos:end="755:26">poll_entry</name><operator pos:start="755:27" pos:end="755:28">-&gt;</operator><name pos:start="755:29" pos:end="755:34">events</name></name> <operator pos:start="755:36" pos:end="755:36">=</operator> <name pos:start="755:38" pos:end="755:43">POLLIN</name></expr>;</expr_stmt><comment type="block" pos:start="755:45" pos:end="755:70">/* Maybe this will work */</comment>
                <expr_stmt pos:start="756:17" pos:end="756:29"><expr pos:start="756:17" pos:end="756:28"><name pos:start="756:17" pos:end="756:26">poll_entry</name><operator pos:start="756:27" pos:end="756:28">++</operator></expr>;</expr_stmt>
                <break pos:start="757:17" pos:end="757:22">break;</break>
            <default pos:start="758:13" pos:end="758:20">default:</default>
                <expr_stmt pos:start="759:17" pos:end="759:37"><expr pos:start="759:17" pos:end="759:36"><name pos:start="759:17" pos:end="759:29"><name pos:start="759:17" pos:end="759:17">c</name><operator pos:start="759:18" pos:end="759:19">-&gt;</operator><name pos:start="759:20" pos:end="759:29">poll_entry</name></name> <operator pos:start="759:31" pos:end="759:31">=</operator> <name pos:start="759:33" pos:end="759:36">NULL</name></expr>;</expr_stmt>
                <break pos:start="760:17" pos:end="760:22">break;</break>
            </block_content>}</block></switch>
            <expr_stmt pos:start="762:13" pos:end="762:24"><expr pos:start="762:13" pos:end="762:23"><name pos:start="762:13" pos:end="762:13">c</name> <operator pos:start="762:15" pos:end="762:15">=</operator> <name pos:start="762:17" pos:end="762:23"><name pos:start="762:17" pos:end="762:17">c</name><operator pos:start="762:18" pos:end="762:19">-&gt;</operator><name pos:start="762:20" pos:end="762:23">next</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>

        <comment type="block" pos:start="765:9" pos:end="766:39">/* wait for an event on one connection. We poll at least every
         * second to handle timeouts */</comment>
        <do pos:start="767:9" pos:end="775:26">do <block pos:start="767:12" pos:end="775:9">{<block_content pos:start="768:13" pos:end="774:15">
            <expr_stmt pos:start="768:13" pos:end="768:67"><expr pos:start="768:13" pos:end="768:66"><name pos:start="768:13" pos:end="768:15">ret</name> <operator pos:start="768:17" pos:end="768:17">=</operator> <call pos:start="768:19" pos:end="768:66"><name pos:start="768:19" pos:end="768:22">poll</name><argument_list pos:start="768:23" pos:end="768:66">(<argument pos:start="768:24" pos:end="768:33"><expr pos:start="768:24" pos:end="768:33"><name pos:start="768:24" pos:end="768:33">poll_table</name></expr></argument>, <argument pos:start="768:36" pos:end="768:58"><expr pos:start="768:36" pos:end="768:58"><name pos:start="768:36" pos:end="768:45">poll_entry</name> <operator pos:start="768:47" pos:end="768:47">-</operator> <name pos:start="768:49" pos:end="768:58">poll_table</name></expr></argument>, <argument pos:start="768:61" pos:end="768:65"><expr pos:start="768:61" pos:end="768:65"><name pos:start="768:61" pos:end="768:65">delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="769:13" pos:end="774:15"><if pos:start="769:13" pos:end="774:15">if <condition pos:start="769:16" pos:end="769:25">(<expr pos:start="769:17" pos:end="769:23"><name pos:start="769:17" pos:end="769:19">ret</name> <operator pos:start="769:21" pos:end="769:21">&lt;</operator> <literal type="number" pos:start="769:23" pos:end="769:23">0</literal></expr> )</condition><block pos:start="769:26" pos:end="774:15">{<block_content pos:start="770:1" pos:end="774:14">
<if_stmt pos:start="770:1" pos:end="774:14"><if pos:start="770:1" pos:end="774:14">if<condition pos:start="770:3" pos:end="770:38">( <expr pos:start="770:5" pos:end="770:36"><call pos:start="770:5" pos:end="770:17"><name pos:start="770:5" pos:end="770:15">ff_neterrno</name><argument_list pos:start="770:16" pos:end="770:17">()</argument_list></call> <operator pos:start="770:19" pos:end="770:20">!=</operator> <call pos:start="770:22" pos:end="770:36"><name pos:start="770:22" pos:end="770:28">AVERROR</name><argument_list pos:start="770:29" pos:end="770:36">(<argument pos:start="770:30" pos:end="770:35"><expr pos:start="770:30" pos:end="770:35"><name pos:start="770:30" pos:end="770:35">EAGAIN</name></expr></argument>)</argument_list></call></expr> )</condition><block pos:start="770:39" pos:end="774:14">{<block_content pos:start="771:1" pos:end="774:13">
<if_stmt pos:start="771:1" pos:end="774:13"><if pos:start="771:1" pos:end="774:13">if<condition pos:start="771:3" pos:end="772:48">(
                <expr pos:start="772:17" pos:end="772:47"><call pos:start="772:17" pos:end="772:29"><name pos:start="772:17" pos:end="772:27">ff_neterrno</name><argument_list pos:start="772:28" pos:end="772:29">()</argument_list></call> <operator pos:start="772:31" pos:end="772:32">!=</operator> <call pos:start="772:34" pos:end="772:47"><name pos:start="772:34" pos:end="772:40">AVERROR</name><argument_list pos:start="772:41" pos:end="772:47">(<argument pos:start="772:42" pos:end="772:46"><expr pos:start="772:42" pos:end="772:46"><name pos:start="772:42" pos:end="772:46">EINTR</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="772:50" pos:end="774:13">{<block_content pos:start="773:17" pos:end="773:26">
                <goto pos:start="773:17" pos:end="773:26">goto <name pos:start="773:22" pos:end="773:25">quit</name>;</goto>
            </block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt>
        </block_content>}</block> while <condition pos:start="775:17" pos:end="775:25">(<expr pos:start="775:18" pos:end="775:24"><name pos:start="775:18" pos:end="775:20">ret</name> <operator pos:start="775:22" pos:end="775:22">&lt;</operator> <literal type="number" pos:start="775:24" pos:end="775:24">0</literal></expr>)</condition>;</do>

        <expr_stmt pos:start="777:9" pos:end="777:39"><expr pos:start="777:9" pos:end="777:38"><name pos:start="777:9" pos:end="777:16">cur_time</name> <operator pos:start="777:18" pos:end="777:18">=</operator> <call pos:start="777:20" pos:end="777:31"><name pos:start="777:20" pos:end="777:29">av_gettime</name><argument_list pos:start="777:30" pos:end="777:31">()</argument_list></call> <operator pos:start="777:33" pos:end="777:33">/</operator> <literal type="number" pos:start="777:35" pos:end="777:38">1000</literal></expr>;</expr_stmt>

        <if_stmt pos:start="779:9" pos:end="782:9"><if pos:start="779:9" pos:end="782:9">if <condition pos:start="779:12" pos:end="779:35">(<expr pos:start="779:13" pos:end="779:34"><name pos:start="779:13" pos:end="779:34">need_to_start_children</name></expr>)</condition> <block pos:start="779:37" pos:end="782:9">{<block_content pos:start="780:13" pos:end="781:46">
            <expr_stmt pos:start="780:13" pos:end="780:39"><expr pos:start="780:13" pos:end="780:38"><name pos:start="780:13" pos:end="780:34">need_to_start_children</name> <operator pos:start="780:36" pos:end="780:36">=</operator> <literal type="number" pos:start="780:38" pos:end="780:38">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="781:13" pos:end="781:46"><expr pos:start="781:13" pos:end="781:45"><call pos:start="781:13" pos:end="781:45"><name pos:start="781:13" pos:end="781:26">start_children</name><argument_list pos:start="781:27" pos:end="781:45">(<argument pos:start="781:28" pos:end="781:44"><expr pos:start="781:28" pos:end="781:44"><name pos:start="781:28" pos:end="781:44"><name pos:start="781:28" pos:end="781:33">config</name><operator pos:start="781:34" pos:end="781:34">.</operator><name pos:start="781:35" pos:end="781:44">first_feed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="784:9" pos:end="784:35">/* now handle the events */</comment>
        <for pos:start="785:9" pos:end="792:9">for<control pos:start="785:12" pos:end="785:46">(<init pos:start="785:13" pos:end="785:31"><expr pos:start="785:13" pos:end="785:30"><name pos:start="785:13" pos:end="785:13">c</name> <operator pos:start="785:15" pos:end="785:15">=</operator> <name pos:start="785:17" pos:end="785:30">first_http_ctx</name></expr>;</init> <condition pos:start="785:33" pos:end="785:34"><expr pos:start="785:33" pos:end="785:33"><name pos:start="785:33" pos:end="785:33">c</name></expr>;</condition> <incr pos:start="785:36" pos:end="785:45"><expr pos:start="785:36" pos:end="785:45"><name pos:start="785:36" pos:end="785:36">c</name> <operator pos:start="785:38" pos:end="785:38">=</operator> <name pos:start="785:40" pos:end="785:45">c_next</name></expr></incr>)</control> <block pos:start="785:48" pos:end="792:9">{<block_content pos:start="786:13" pos:end="791:13">
            <expr_stmt pos:start="786:13" pos:end="786:29"><expr pos:start="786:13" pos:end="786:28"><name pos:start="786:13" pos:end="786:18">c_next</name> <operator pos:start="786:20" pos:end="786:20">=</operator> <name pos:start="786:22" pos:end="786:28"><name pos:start="786:22" pos:end="786:22">c</name><operator pos:start="786:23" pos:end="786:24">-&gt;</operator><name pos:start="786:25" pos:end="786:28">next</name></name></expr>;</expr_stmt>
            <if_stmt pos:start="787:13" pos:end="791:13"><if pos:start="787:13" pos:end="791:13">if <condition pos:start="787:16" pos:end="787:41">(<expr pos:start="787:17" pos:end="787:40"><call pos:start="787:17" pos:end="787:36"><name pos:start="787:17" pos:end="787:33">handle_connection</name><argument_list pos:start="787:34" pos:end="787:36">(<argument pos:start="787:35" pos:end="787:35"><expr pos:start="787:35" pos:end="787:35"><name pos:start="787:35" pos:end="787:35">c</name></expr></argument>)</argument_list></call> <operator pos:start="787:38" pos:end="787:38">&lt;</operator> <literal type="number" pos:start="787:40" pos:end="787:40">0</literal></expr>)</condition> <block pos:start="787:43" pos:end="791:13">{<block_content pos:start="788:17" pos:end="790:36">
                <expr_stmt pos:start="788:17" pos:end="788:34"><expr pos:start="788:17" pos:end="788:33"><call pos:start="788:17" pos:end="788:33"><name pos:start="788:17" pos:end="788:30">log_connection</name><argument_list pos:start="788:31" pos:end="788:33">(<argument pos:start="788:32" pos:end="788:32"><expr pos:start="788:32" pos:end="788:32"><name pos:start="788:32" pos:end="788:32">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block" pos:start="789:17" pos:end="789:51">/* close and free the connection */</comment>
                <expr_stmt pos:start="790:17" pos:end="790:36"><expr pos:start="790:17" pos:end="790:35"><call pos:start="790:17" pos:end="790:35"><name pos:start="790:17" pos:end="790:32">close_connection</name><argument_list pos:start="790:33" pos:end="790:35">(<argument pos:start="790:34" pos:end="790:34"><expr pos:start="790:34" pos:end="790:34"><name pos:start="790:34" pos:end="790:34">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <expr_stmt pos:start="794:9" pos:end="794:32"><expr pos:start="794:9" pos:end="794:31"><name pos:start="794:9" pos:end="794:18">poll_entry</name> <operator pos:start="794:20" pos:end="794:20">=</operator> <name pos:start="794:22" pos:end="794:31">poll_table</name></expr>;</expr_stmt>
        <if_stmt pos:start="795:9" pos:end="800:9"><if pos:start="795:9" pos:end="800:9">if <condition pos:start="795:12" pos:end="795:22">(<expr pos:start="795:13" pos:end="795:21"><name pos:start="795:13" pos:end="795:21">server_fd</name></expr>)</condition> <block pos:start="795:24" pos:end="800:9">{<block_content pos:start="797:13" pos:end="799:25">
            <comment type="block" pos:start="796:13" pos:end="796:47">/* new HTTP connection request ? */</comment>
            <if_stmt pos:start="797:13" pos:end="798:45"><if pos:start="797:13" pos:end="798:45">if <condition pos:start="797:16" pos:end="797:45">(<expr pos:start="797:17" pos:end="797:44"><name pos:start="797:17" pos:end="797:35"><name pos:start="797:17" pos:end="797:26">poll_entry</name><operator pos:start="797:27" pos:end="797:28">-&gt;</operator><name pos:start="797:29" pos:end="797:35">revents</name></name> <operator pos:start="797:37" pos:end="797:37">&amp;</operator> <name pos:start="797:39" pos:end="797:44">POLLIN</name></expr>)</condition><block type="pseudo" pos:start="798:17" pos:end="798:45"><block_content pos:start="798:17" pos:end="798:45">
                <expr_stmt pos:start="798:17" pos:end="798:45"><expr pos:start="798:17" pos:end="798:44"><call pos:start="798:17" pos:end="798:44"><name pos:start="798:17" pos:end="798:30">new_connection</name><argument_list pos:start="798:31" pos:end="798:44">(<argument pos:start="798:32" pos:end="798:40"><expr pos:start="798:32" pos:end="798:40"><name pos:start="798:32" pos:end="798:40">server_fd</name></expr></argument>, <argument pos:start="798:43" pos:end="798:43"><expr pos:start="798:43" pos:end="798:43"><literal type="number" pos:start="798:43" pos:end="798:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="799:13" pos:end="799:25"><expr pos:start="799:13" pos:end="799:24"><name pos:start="799:13" pos:end="799:22">poll_entry</name><operator pos:start="799:23" pos:end="799:24">++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="801:9" pos:end="805:9"><if pos:start="801:9" pos:end="805:9">if <condition pos:start="801:12" pos:end="801:27">(<expr pos:start="801:13" pos:end="801:26"><name pos:start="801:13" pos:end="801:26">rtsp_server_fd</name></expr>)</condition> <block pos:start="801:29" pos:end="805:9">{<block_content pos:start="803:13" pos:end="804:50">
            <comment type="block" pos:start="802:13" pos:end="802:47">/* new RTSP connection request ? */</comment>
            <if_stmt pos:start="803:13" pos:end="804:50"><if pos:start="803:13" pos:end="804:50">if <condition pos:start="803:16" pos:end="803:45">(<expr pos:start="803:17" pos:end="803:44"><name pos:start="803:17" pos:end="803:35"><name pos:start="803:17" pos:end="803:26">poll_entry</name><operator pos:start="803:27" pos:end="803:28">-&gt;</operator><name pos:start="803:29" pos:end="803:35">revents</name></name> <operator pos:start="803:37" pos:end="803:37">&amp;</operator> <name pos:start="803:39" pos:end="803:44">POLLIN</name></expr>)</condition><block type="pseudo" pos:start="804:17" pos:end="804:50"><block_content pos:start="804:17" pos:end="804:50">
                <expr_stmt pos:start="804:17" pos:end="804:50"><expr pos:start="804:17" pos:end="804:49"><call pos:start="804:17" pos:end="804:49"><name pos:start="804:17" pos:end="804:30">new_connection</name><argument_list pos:start="804:31" pos:end="804:49">(<argument pos:start="804:32" pos:end="804:45"><expr pos:start="804:32" pos:end="804:45"><name pos:start="804:32" pos:end="804:45">rtsp_server_fd</name></expr></argument>, <argument pos:start="804:48" pos:end="804:48"><expr pos:start="804:48" pos:end="804:48"><literal type="number" pos:start="804:48" pos:end="804:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

<label pos:start="808:1" pos:end="808:5"><name pos:start="808:1" pos:end="808:4">quit</name>:</label>
    <expr_stmt pos:start="809:5" pos:end="809:24"><expr pos:start="809:5" pos:end="809:23"><call pos:start="809:5" pos:end="809:23"><name pos:start="809:5" pos:end="809:11">av_free</name><argument_list pos:start="809:12" pos:end="809:23">(<argument pos:start="809:13" pos:end="809:22"><expr pos:start="809:13" pos:end="809:22"><name pos:start="809:13" pos:end="809:22">poll_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="810:5" pos:end="810:14">return <expr pos:start="810:12" pos:end="810:13"><operator pos:start="810:12" pos:end="810:12">-</operator><literal type="number" pos:start="810:13" pos:end="810:13">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="813:1" pos:end="813:47">/* start waiting for a new HTTP/RTSP request */</comment>
<function pos:start="814:1" pos:end="822:1"><type pos:start="814:1" pos:end="814:11"><specifier pos:start="814:1" pos:end="814:6">static</specifier> <name pos:start="814:8" pos:end="814:11">void</name></type> <name pos:start="814:13" pos:end="814:30">start_wait_request</name><parameter_list pos:start="814:31" pos:end="814:59">(<parameter pos:start="814:32" pos:end="814:45"><decl pos:start="814:32" pos:end="814:45"><type pos:start="814:32" pos:end="814:45"><name pos:start="814:32" pos:end="814:42">HTTPContext</name> <modifier pos:start="814:44" pos:end="814:44">*</modifier></type><name pos:start="814:45" pos:end="814:45">c</name></decl></parameter>, <parameter pos:start="814:48" pos:end="814:58"><decl pos:start="814:48" pos:end="814:58"><type pos:start="814:48" pos:end="814:58"><name pos:start="814:48" pos:end="814:50">int</name></type> <name pos:start="814:52" pos:end="814:58">is_rtsp</name></decl></parameter>)</parameter_list>
<block pos:start="815:1" pos:end="822:1">{<block_content pos:start="816:5" pos:end="821:73">
    <expr_stmt pos:start="816:5" pos:end="816:30"><expr pos:start="816:5" pos:end="816:29"><name pos:start="816:5" pos:end="816:17"><name pos:start="816:5" pos:end="816:5">c</name><operator pos:start="816:6" pos:end="816:7">-&gt;</operator><name pos:start="816:8" pos:end="816:17">buffer_ptr</name></name> <operator pos:start="816:19" pos:end="816:19">=</operator> <name pos:start="816:21" pos:end="816:29"><name pos:start="816:21" pos:end="816:21">c</name><operator pos:start="816:22" pos:end="816:23">-&gt;</operator><name pos:start="816:24" pos:end="816:29">buffer</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="817:5" pos:end="817:51"><expr pos:start="817:5" pos:end="817:50"><name pos:start="817:5" pos:end="817:17"><name pos:start="817:5" pos:end="817:5">c</name><operator pos:start="817:6" pos:end="817:7">-&gt;</operator><name pos:start="817:8" pos:end="817:17">buffer_end</name></name> <operator pos:start="817:19" pos:end="817:19">=</operator> <name pos:start="817:21" pos:end="817:29"><name pos:start="817:21" pos:end="817:21">c</name><operator pos:start="817:22" pos:end="817:23">-&gt;</operator><name pos:start="817:24" pos:end="817:29">buffer</name></name> <operator pos:start="817:31" pos:end="817:31">+</operator> <name pos:start="817:33" pos:end="817:46"><name pos:start="817:33" pos:end="817:33">c</name><operator pos:start="817:34" pos:end="817:35">-&gt;</operator><name pos:start="817:36" pos:end="817:46">buffer_size</name></name> <operator pos:start="817:48" pos:end="817:48">-</operator> <literal type="number" pos:start="817:50" pos:end="817:50">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="817:53" pos:end="817:77">/* leave room for '\0' */</comment>

    <expr_stmt pos:start="819:5" pos:end="819:73"><expr pos:start="819:5" pos:end="819:72"><name pos:start="819:5" pos:end="819:12"><name pos:start="819:5" pos:end="819:5">c</name><operator pos:start="819:6" pos:end="819:7">-&gt;</operator><name pos:start="819:8" pos:end="819:12">state</name></name> <operator pos:start="819:14" pos:end="819:14">=</operator> <ternary pos:start="819:16" pos:end="819:72"><condition pos:start="819:16" pos:end="819:24"><expr pos:start="819:16" pos:end="819:22"><name pos:start="819:16" pos:end="819:22">is_rtsp</name></expr> ?</condition><then pos:start="819:26" pos:end="819:47"> <expr pos:start="819:26" pos:end="819:47"><name pos:start="819:26" pos:end="819:47">RTSPSTATE_WAIT_REQUEST</name></expr> </then><else pos:start="819:49" pos:end="819:72">: <expr pos:start="819:51" pos:end="819:72"><name pos:start="819:51" pos:end="819:72">HTTPSTATE_WAIT_REQUEST</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt pos:start="820:5" pos:end="821:73"><expr pos:start="820:5" pos:end="821:72"><name pos:start="820:5" pos:end="820:14"><name pos:start="820:5" pos:end="820:5">c</name><operator pos:start="820:6" pos:end="820:7">-&gt;</operator><name pos:start="820:8" pos:end="820:14">timeout</name></name> <operator pos:start="820:16" pos:end="820:16">=</operator> <name pos:start="820:18" pos:end="820:25">cur_time</name> <operator pos:start="820:27" pos:end="820:27">+</operator>
                 <operator pos:start="821:18" pos:end="821:18">(</operator><ternary pos:start="821:19" pos:end="821:71"><condition pos:start="821:19" pos:end="821:27"><expr pos:start="821:19" pos:end="821:25"><name pos:start="821:19" pos:end="821:25">is_rtsp</name></expr> ?</condition><then pos:start="821:29" pos:end="821:48"> <expr pos:start="821:29" pos:end="821:48"><name pos:start="821:29" pos:end="821:48">RTSP_REQUEST_TIMEOUT</name></expr> </then><else pos:start="821:50" pos:end="821:71">: <expr pos:start="821:52" pos:end="821:71"><name pos:start="821:52" pos:end="821:71">HTTP_REQUEST_TIMEOUT</name></expr></else></ternary><operator pos:start="821:72" pos:end="821:72">)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="824:1" pos:end="843:1"><type pos:start="824:1" pos:end="824:11"><specifier pos:start="824:1" pos:end="824:6">static</specifier> <name pos:start="824:8" pos:end="824:11">void</name></type> <name pos:start="824:13" pos:end="824:36">http_send_too_busy_reply</name><parameter_list pos:start="824:37" pos:end="824:44">(<parameter pos:start="824:38" pos:end="824:43"><decl pos:start="824:38" pos:end="824:43"><type pos:start="824:38" pos:end="824:40"><name pos:start="824:38" pos:end="824:40">int</name></type> <name pos:start="824:42" pos:end="824:43">fd</name></decl></parameter>)</parameter_list>
<block pos:start="825:1" pos:end="843:1">{<block_content pos:start="826:5" pos:end="842:65">
    <decl_stmt pos:start="826:5" pos:end="826:21"><decl pos:start="826:5" pos:end="826:20"><type pos:start="826:5" pos:end="826:8"><name pos:start="826:5" pos:end="826:8">char</name></type> <name pos:start="826:10" pos:end="826:20"><name pos:start="826:10" pos:end="826:15">buffer</name><index pos:start="826:16" pos:end="826:20">[<expr pos:start="826:17" pos:end="826:19"><literal type="number" pos:start="826:17" pos:end="826:19">400</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="827:5" pos:end="838:66"><decl pos:start="827:5" pos:end="838:65"><type pos:start="827:5" pos:end="827:7"><name pos:start="827:5" pos:end="827:7">int</name></type> <name pos:start="827:9" pos:end="827:11">len</name> <init pos:start="827:13" pos:end="838:65">= <expr pos:start="827:15" pos:end="838:65"><call pos:start="827:15" pos:end="838:65"><name pos:start="827:15" pos:end="827:22">snprintf</name><argument_list pos:start="827:23" pos:end="838:65">(<argument pos:start="827:24" pos:end="827:29"><expr pos:start="827:24" pos:end="827:29"><name pos:start="827:24" pos:end="827:29">buffer</name></expr></argument>, <argument pos:start="827:32" pos:end="827:45"><expr pos:start="827:32" pos:end="827:45"><sizeof pos:start="827:32" pos:end="827:45">sizeof<argument_list pos:start="827:38" pos:end="827:45">(<argument pos:start="827:39" pos:end="827:44"><expr pos:start="827:39" pos:end="827:44"><name pos:start="827:39" pos:end="827:44">buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                       <argument pos:start="828:24" pos:end="837:43"><expr pos:start="828:24" pos:end="837:43"><literal type="string" pos:start="828:24" pos:end="828:57">"HTTP/1.0 503 Server too busy\r\n"</literal>
                       <literal type="string" pos:start="829:24" pos:end="829:52">"Content-type: text/html\r\n"</literal>
                       <literal type="string" pos:start="830:24" pos:end="830:29">"\r\n"</literal>
                       <literal type="string" pos:start="831:24" pos:end="831:42">"&lt;!DOCTYPE html&gt;\n"</literal>
                       <literal type="string" pos:start="832:24" pos:end="832:77">"&lt;html&gt;&lt;head&gt;&lt;title&gt;Too busy&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\r\n"</literal>
                       <literal type="string" pos:start="833:24" pos:end="833:76">"&lt;p&gt;The server is too busy to serve your request at "</literal>
                       <literal type="string" pos:start="834:24" pos:end="834:43">"this time.&lt;/p&gt;\r\n"</literal>
                       <literal type="string" pos:start="835:24" pos:end="835:78">"&lt;p&gt;The number of current connections is %u, and this "</literal>
                       <literal type="string" pos:start="836:24" pos:end="836:57">"exceeds the limit of %u.&lt;/p&gt;\r\n"</literal>
                       <literal type="string" pos:start="837:24" pos:end="837:43">"&lt;/body&gt;&lt;/html&gt;\r\n"</literal></expr></argument>,
                       <argument pos:start="838:24" pos:end="838:37"><expr pos:start="838:24" pos:end="838:37"><name pos:start="838:24" pos:end="838:37">nb_connections</name></expr></argument>, <argument pos:start="838:40" pos:end="838:64"><expr pos:start="838:40" pos:end="838:64"><name pos:start="838:40" pos:end="838:64"><name pos:start="838:40" pos:end="838:45">config</name><operator pos:start="838:46" pos:end="838:46">.</operator><name pos:start="838:47" pos:end="838:64">nb_max_connections</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="839:5" pos:end="839:37"><expr pos:start="839:5" pos:end="839:36"><call pos:start="839:5" pos:end="839:36"><name pos:start="839:5" pos:end="839:14">av_assert0</name><argument_list pos:start="839:15" pos:end="839:36">(<argument pos:start="839:16" pos:end="839:35"><expr pos:start="839:16" pos:end="839:35"><name pos:start="839:16" pos:end="839:18">len</name> <operator pos:start="839:20" pos:end="839:20">&lt;</operator> <sizeof pos:start="839:22" pos:end="839:35">sizeof<argument_list pos:start="839:28" pos:end="839:35">(<argument pos:start="839:29" pos:end="839:34"><expr pos:start="839:29" pos:end="839:34"><name pos:start="839:29" pos:end="839:34">buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="840:5" pos:end="842:65"><if pos:start="840:5" pos:end="842:65">if <condition pos:start="840:8" pos:end="840:39">(<expr pos:start="840:9" pos:end="840:38"><call pos:start="840:9" pos:end="840:32"><name pos:start="840:9" pos:end="840:12">send</name><argument_list pos:start="840:13" pos:end="840:32">(<argument pos:start="840:14" pos:end="840:15"><expr pos:start="840:14" pos:end="840:15"><name pos:start="840:14" pos:end="840:15">fd</name></expr></argument>, <argument pos:start="840:18" pos:end="840:23"><expr pos:start="840:18" pos:end="840:23"><name pos:start="840:18" pos:end="840:23">buffer</name></expr></argument>, <argument pos:start="840:26" pos:end="840:28"><expr pos:start="840:26" pos:end="840:28"><name pos:start="840:26" pos:end="840:28">len</name></expr></argument>, <argument pos:start="840:31" pos:end="840:31"><expr pos:start="840:31" pos:end="840:31"><literal type="number" pos:start="840:31" pos:end="840:31">0</literal></expr></argument>)</argument_list></call> <operator pos:start="840:34" pos:end="840:34">&lt;</operator> <name pos:start="840:36" pos:end="840:38">len</name></expr>)</condition><block type="pseudo" pos:start="841:9" pos:end="842:65"><block_content pos:start="841:9" pos:end="842:65">
        <expr_stmt pos:start="841:9" pos:end="842:65"><expr pos:start="841:9" pos:end="842:64"><call pos:start="841:9" pos:end="842:64"><name pos:start="841:9" pos:end="841:14">av_log</name><argument_list pos:start="841:15" pos:end="842:64">(<argument pos:start="841:16" pos:end="841:19"><expr pos:start="841:16" pos:end="841:19"><name pos:start="841:16" pos:end="841:19">NULL</name></expr></argument>, <argument pos:start="841:22" pos:end="841:35"><expr pos:start="841:22" pos:end="841:35"><name pos:start="841:22" pos:end="841:35">AV_LOG_WARNING</name></expr></argument>,
               <argument pos:start="842:16" pos:end="842:63"><expr pos:start="842:16" pos:end="842:63"><literal type="string" pos:start="842:16" pos:end="842:63">"Could not send too-busy reply, send() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function pos:start="846:1" pos:end="895:1"><type pos:start="846:1" pos:end="846:11"><specifier pos:start="846:1" pos:end="846:6">static</specifier> <name pos:start="846:8" pos:end="846:11">void</name></type> <name pos:start="846:13" pos:end="846:26">new_connection</name><parameter_list pos:start="846:27" pos:end="846:54">(<parameter pos:start="846:28" pos:end="846:40"><decl pos:start="846:28" pos:end="846:40"><type pos:start="846:28" pos:end="846:40"><name pos:start="846:28" pos:end="846:30">int</name></type> <name pos:start="846:32" pos:end="846:40">server_fd</name></decl></parameter>, <parameter pos:start="846:43" pos:end="846:53"><decl pos:start="846:43" pos:end="846:53"><type pos:start="846:43" pos:end="846:53"><name pos:start="846:43" pos:end="846:45">int</name></type> <name pos:start="846:47" pos:end="846:53">is_rtsp</name></decl></parameter>)</parameter_list>
<block pos:start="847:1" pos:end="895:1">{<block_content pos:start="848:5" pos:end="894:20">
    <decl_stmt pos:start="848:5" pos:end="848:33"><decl pos:start="848:5" pos:end="848:32"><type pos:start="848:5" pos:end="848:22"><name pos:start="848:5" pos:end="848:22"><name pos:start="848:5" pos:end="848:10">struct</name> <name pos:start="848:12" pos:end="848:22">sockaddr_in</name></name></type> <name pos:start="848:24" pos:end="848:32">from_addr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="849:5" pos:end="849:18"><decl pos:start="849:5" pos:end="849:17"><type pos:start="849:5" pos:end="849:13"><name pos:start="849:5" pos:end="849:13">socklen_t</name></type> <name pos:start="849:15" pos:end="849:17">len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="850:5" pos:end="850:11"><decl pos:start="850:5" pos:end="850:10"><type pos:start="850:5" pos:end="850:7"><name pos:start="850:5" pos:end="850:7">int</name></type> <name pos:start="850:9" pos:end="850:10">fd</name></decl>;</decl_stmt>
    <decl_stmt pos:start="851:5" pos:end="851:26"><decl pos:start="851:5" pos:end="851:25"><type pos:start="851:5" pos:end="851:17"><name pos:start="851:5" pos:end="851:15">HTTPContext</name> <modifier pos:start="851:17" pos:end="851:17">*</modifier></type><name pos:start="851:18" pos:end="851:18">c</name> <init pos:start="851:20" pos:end="851:25">= <expr pos:start="851:22" pos:end="851:25"><name pos:start="851:22" pos:end="851:25">NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="853:5" pos:end="853:28"><expr pos:start="853:5" pos:end="853:27"><name pos:start="853:5" pos:end="853:7">len</name> <operator pos:start="853:9" pos:end="853:9">=</operator> <sizeof pos:start="853:11" pos:end="853:27">sizeof<argument_list pos:start="853:17" pos:end="853:27">(<argument pos:start="853:18" pos:end="853:26"><expr pos:start="853:18" pos:end="853:26"><name pos:start="853:18" pos:end="853:26">from_addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt pos:start="854:5" pos:end="855:22"><expr pos:start="854:5" pos:end="855:21"><name pos:start="854:5" pos:end="854:6">fd</name> <operator pos:start="854:8" pos:end="854:8">=</operator> <call pos:start="854:10" pos:end="855:21"><name pos:start="854:10" pos:end="854:15">accept</name><argument_list pos:start="854:16" pos:end="855:21">(<argument pos:start="854:17" pos:end="854:25"><expr pos:start="854:17" pos:end="854:25"><name pos:start="854:17" pos:end="854:25">server_fd</name></expr></argument>, <argument pos:start="854:28" pos:end="854:56"><expr pos:start="854:28" pos:end="854:56"><operator pos:start="854:28" pos:end="854:28">(</operator>struct <name pos:start="854:36" pos:end="854:43">sockaddr</name> <operator pos:start="854:45" pos:end="854:45">*</operator><operator pos:start="854:46" pos:end="854:46">)</operator><operator pos:start="854:47" pos:end="854:47">&amp;</operator><name pos:start="854:48" pos:end="854:56">from_addr</name></expr></argument>,
                <argument pos:start="855:17" pos:end="855:20"><expr pos:start="855:17" pos:end="855:20"><operator pos:start="855:17" pos:end="855:17">&amp;</operator><name pos:start="855:18" pos:end="855:20">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="856:5" pos:end="859:5"><if pos:start="856:5" pos:end="859:5">if <condition pos:start="856:8" pos:end="856:15">(<expr pos:start="856:9" pos:end="856:14"><name pos:start="856:9" pos:end="856:10">fd</name> <operator pos:start="856:12" pos:end="856:12">&lt;</operator> <literal type="number" pos:start="856:14" pos:end="856:14">0</literal></expr>)</condition> <block pos:start="856:17" pos:end="859:5">{<block_content pos:start="857:9" pos:end="858:15">
        <expr_stmt pos:start="857:9" pos:end="857:62"><expr pos:start="857:9" pos:end="857:61"><call pos:start="857:9" pos:end="857:61"><name pos:start="857:9" pos:end="857:16">http_log</name><argument_list pos:start="857:17" pos:end="857:61">(<argument pos:start="857:18" pos:end="857:43"><expr pos:start="857:18" pos:end="857:43"><literal type="string" pos:start="857:18" pos:end="857:43">"error during accept %s\n"</literal></expr></argument>, <argument pos:start="857:46" pos:end="857:60"><expr pos:start="857:46" pos:end="857:60"><call pos:start="857:46" pos:end="857:60"><name pos:start="857:46" pos:end="857:53">strerror</name><argument_list pos:start="857:54" pos:end="857:60">(<argument pos:start="857:55" pos:end="857:59"><expr pos:start="857:55" pos:end="857:59"><name pos:start="857:55" pos:end="857:59">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="858:9" pos:end="858:15">return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="860:5" pos:end="861:68"><if pos:start="860:5" pos:end="861:68">if <condition pos:start="860:8" pos:end="860:38">(<expr pos:start="860:9" pos:end="860:37"><call pos:start="860:9" pos:end="860:33"><name pos:start="860:9" pos:end="860:26">ff_socket_nonblock</name><argument_list pos:start="860:27" pos:end="860:33">(<argument pos:start="860:28" pos:end="860:29"><expr pos:start="860:28" pos:end="860:29"><name pos:start="860:28" pos:end="860:29">fd</name></expr></argument>, <argument pos:start="860:32" pos:end="860:32"><expr pos:start="860:32" pos:end="860:32"><literal type="number" pos:start="860:32" pos:end="860:32">1</literal></expr></argument>)</argument_list></call> <operator pos:start="860:35" pos:end="860:35">&lt;</operator> <literal type="number" pos:start="860:37" pos:end="860:37">0</literal></expr>)</condition><block type="pseudo" pos:start="861:9" pos:end="861:68"><block_content pos:start="861:9" pos:end="861:68">
        <expr_stmt pos:start="861:9" pos:end="861:68"><expr pos:start="861:9" pos:end="861:67"><call pos:start="861:9" pos:end="861:67"><name pos:start="861:9" pos:end="861:14">av_log</name><argument_list pos:start="861:15" pos:end="861:67">(<argument pos:start="861:16" pos:end="861:19"><expr pos:start="861:16" pos:end="861:19"><name pos:start="861:16" pos:end="861:19">NULL</name></expr></argument>, <argument pos:start="861:22" pos:end="861:35"><expr pos:start="861:22" pos:end="861:35"><name pos:start="861:22" pos:end="861:35">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="861:38" pos:end="861:66"><expr pos:start="861:38" pos:end="861:66"><literal type="string" pos:start="861:38" pos:end="861:66">"ff_socket_nonblock failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="863:5" pos:end="866:5"><if pos:start="863:5" pos:end="866:5">if <condition pos:start="863:8" pos:end="863:52">(<expr pos:start="863:9" pos:end="863:51"><name pos:start="863:9" pos:end="863:22">nb_connections</name> <operator pos:start="863:24" pos:end="863:25">&gt;=</operator> <name pos:start="863:27" pos:end="863:51"><name pos:start="863:27" pos:end="863:32">config</name><operator pos:start="863:33" pos:end="863:33">.</operator><name pos:start="863:34" pos:end="863:51">nb_max_connections</name></name></expr>)</condition> <block pos:start="863:54" pos:end="866:5">{<block_content pos:start="864:9" pos:end="865:18">
        <expr_stmt pos:start="864:9" pos:end="864:37"><expr pos:start="864:9" pos:end="864:36"><call pos:start="864:9" pos:end="864:36"><name pos:start="864:9" pos:end="864:32">http_send_too_busy_reply</name><argument_list pos:start="864:33" pos:end="864:36">(<argument pos:start="864:34" pos:end="864:35"><expr pos:start="864:34" pos:end="864:35"><name pos:start="864:34" pos:end="864:35">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="865:9" pos:end="865:18">goto <name pos:start="865:14" pos:end="865:17">fail</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="868:5" pos:end="868:30">/* add a new connection */</comment>
    <expr_stmt pos:start="869:5" pos:end="869:40"><expr pos:start="869:5" pos:end="869:39"><name pos:start="869:5" pos:end="869:5">c</name> <operator pos:start="869:7" pos:end="869:7">=</operator> <call pos:start="869:9" pos:end="869:39"><name pos:start="869:9" pos:end="869:18">av_mallocz</name><argument_list pos:start="869:19" pos:end="869:39">(<argument pos:start="869:20" pos:end="869:38"><expr pos:start="869:20" pos:end="869:38"><sizeof pos:start="869:20" pos:end="869:38">sizeof<argument_list pos:start="869:26" pos:end="869:38">(<argument pos:start="869:27" pos:end="869:37"><expr pos:start="869:27" pos:end="869:37"><name pos:start="869:27" pos:end="869:37">HTTPContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="870:5" pos:end="871:18"><if pos:start="870:5" pos:end="871:18">if <condition pos:start="870:8" pos:end="870:11">(<expr pos:start="870:9" pos:end="870:10"><operator pos:start="870:9" pos:end="870:9">!</operator><name pos:start="870:10" pos:end="870:10">c</name></expr>)</condition><block type="pseudo" pos:start="871:9" pos:end="871:18"><block_content pos:start="871:9" pos:end="871:18">
        <goto pos:start="871:9" pos:end="871:18">goto <name pos:start="871:14" pos:end="871:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt pos:start="873:5" pos:end="873:15"><expr pos:start="873:5" pos:end="873:14"><name pos:start="873:5" pos:end="873:9"><name pos:start="873:5" pos:end="873:5">c</name><operator pos:start="873:6" pos:end="873:7">-&gt;</operator><name pos:start="873:8" pos:end="873:9">fd</name></name> <operator pos:start="873:11" pos:end="873:11">=</operator> <name pos:start="873:13" pos:end="873:14">fd</name></expr>;</expr_stmt>
    <expr_stmt pos:start="874:5" pos:end="874:25"><expr pos:start="874:5" pos:end="874:24"><name pos:start="874:5" pos:end="874:17"><name pos:start="874:5" pos:end="874:5">c</name><operator pos:start="874:6" pos:end="874:7">-&gt;</operator><name pos:start="874:8" pos:end="874:17">poll_entry</name></name> <operator pos:start="874:19" pos:end="874:19">=</operator> <name pos:start="874:21" pos:end="874:24">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="875:5" pos:end="875:29"><expr pos:start="875:5" pos:end="875:28"><name pos:start="875:5" pos:end="875:16"><name pos:start="875:5" pos:end="875:5">c</name><operator pos:start="875:6" pos:end="875:7">-&gt;</operator><name pos:start="875:8" pos:end="875:16">from_addr</name></name> <operator pos:start="875:18" pos:end="875:18">=</operator> <name pos:start="875:20" pos:end="875:28">from_addr</name></expr>;</expr_stmt>
    <expr_stmt pos:start="876:5" pos:end="876:40"><expr pos:start="876:5" pos:end="876:39"><name pos:start="876:5" pos:end="876:18"><name pos:start="876:5" pos:end="876:5">c</name><operator pos:start="876:6" pos:end="876:7">-&gt;</operator><name pos:start="876:8" pos:end="876:18">buffer_size</name></name> <operator pos:start="876:20" pos:end="876:20">=</operator> <name pos:start="876:22" pos:end="876:39">IOBUFFER_INIT_SIZE</name></expr>;</expr_stmt>
    <expr_stmt pos:start="877:5" pos:end="877:42"><expr pos:start="877:5" pos:end="877:41"><name pos:start="877:5" pos:end="877:13"><name pos:start="877:5" pos:end="877:5">c</name><operator pos:start="877:6" pos:end="877:7">-&gt;</operator><name pos:start="877:8" pos:end="877:13">buffer</name></name> <operator pos:start="877:15" pos:end="877:15">=</operator> <call pos:start="877:17" pos:end="877:41"><name pos:start="877:17" pos:end="877:25">av_malloc</name><argument_list pos:start="877:26" pos:end="877:41">(<argument pos:start="877:27" pos:end="877:40"><expr pos:start="877:27" pos:end="877:40"><name pos:start="877:27" pos:end="877:40"><name pos:start="877:27" pos:end="877:27">c</name><operator pos:start="877:28" pos:end="877:29">-&gt;</operator><name pos:start="877:30" pos:end="877:40">buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="878:5" pos:end="879:18"><if pos:start="878:5" pos:end="879:18">if <condition pos:start="878:8" pos:end="878:19">(<expr pos:start="878:9" pos:end="878:18"><operator pos:start="878:9" pos:end="878:9">!</operator><name pos:start="878:10" pos:end="878:18"><name pos:start="878:10" pos:end="878:10">c</name><operator pos:start="878:11" pos:end="878:12">-&gt;</operator><name pos:start="878:13" pos:end="878:18">buffer</name></name></expr>)</condition><block type="pseudo" pos:start="879:9" pos:end="879:18"><block_content pos:start="879:9" pos:end="879:18">
        <goto pos:start="879:9" pos:end="879:18">goto <name pos:start="879:14" pos:end="879:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt pos:start="881:5" pos:end="881:29"><expr pos:start="881:5" pos:end="881:28"><name pos:start="881:5" pos:end="881:11"><name pos:start="881:5" pos:end="881:5">c</name><operator pos:start="881:6" pos:end="881:7">-&gt;</operator><name pos:start="881:8" pos:end="881:11">next</name></name> <operator pos:start="881:13" pos:end="881:13">=</operator> <name pos:start="881:15" pos:end="881:28">first_http_ctx</name></expr>;</expr_stmt>
    <expr_stmt pos:start="882:5" pos:end="882:23"><expr pos:start="882:5" pos:end="882:22"><name pos:start="882:5" pos:end="882:18">first_http_ctx</name> <operator pos:start="882:20" pos:end="882:20">=</operator> <name pos:start="882:22" pos:end="882:22">c</name></expr>;</expr_stmt>
    <expr_stmt pos:start="883:5" pos:end="883:21"><expr pos:start="883:5" pos:end="883:20"><name pos:start="883:5" pos:end="883:18">nb_connections</name><operator pos:start="883:19" pos:end="883:20">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="885:5" pos:end="885:35"><expr pos:start="885:5" pos:end="885:34"><call pos:start="885:5" pos:end="885:34"><name pos:start="885:5" pos:end="885:22">start_wait_request</name><argument_list pos:start="885:23" pos:end="885:34">(<argument pos:start="885:24" pos:end="885:24"><expr pos:start="885:24" pos:end="885:24"><name pos:start="885:24" pos:end="885:24">c</name></expr></argument>, <argument pos:start="885:27" pos:end="885:33"><expr pos:start="885:27" pos:end="885:33"><name pos:start="885:27" pos:end="885:33">is_rtsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="887:5" pos:end="887:11">return;</return>

 <label pos:start="889:2" pos:end="889:6"><name pos:start="889:2" pos:end="889:5">fail</name>:</label>
    <if_stmt pos:start="890:5" pos:end="893:5"><if pos:start="890:5" pos:end="893:5">if <condition pos:start="890:8" pos:end="890:10">(<expr pos:start="890:9" pos:end="890:9"><name pos:start="890:9" pos:end="890:9">c</name></expr>)</condition> <block pos:start="890:12" pos:end="893:5">{<block_content pos:start="891:9" pos:end="892:19">
        <expr_stmt pos:start="891:9" pos:end="891:29"><expr pos:start="891:9" pos:end="891:28"><call pos:start="891:9" pos:end="891:28"><name pos:start="891:9" pos:end="891:16">av_freep</name><argument_list pos:start="891:17" pos:end="891:28">(<argument pos:start="891:18" pos:end="891:27"><expr pos:start="891:18" pos:end="891:27"><operator pos:start="891:18" pos:end="891:18">&amp;</operator><name pos:start="891:19" pos:end="891:27"><name pos:start="891:19" pos:end="891:19">c</name><operator pos:start="891:20" pos:end="891:21">-&gt;</operator><name pos:start="891:22" pos:end="891:27">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="892:9" pos:end="892:19"><expr pos:start="892:9" pos:end="892:18"><call pos:start="892:9" pos:end="892:18"><name pos:start="892:9" pos:end="892:15">av_free</name><argument_list pos:start="892:16" pos:end="892:18">(<argument pos:start="892:17" pos:end="892:17"><expr pos:start="892:17" pos:end="892:17"><name pos:start="892:17" pos:end="892:17">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="894:5" pos:end="894:20"><expr pos:start="894:5" pos:end="894:19"><call pos:start="894:5" pos:end="894:19"><name pos:start="894:5" pos:end="894:15">closesocket</name><argument_list pos:start="894:16" pos:end="894:19">(<argument pos:start="894:17" pos:end="894:18"><expr pos:start="894:17" pos:end="894:18"><name pos:start="894:17" pos:end="894:18">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="897:1" pos:end="985:1"><type pos:start="897:1" pos:end="897:11"><specifier pos:start="897:1" pos:end="897:6">static</specifier> <name pos:start="897:8" pos:end="897:11">void</name></type> <name pos:start="897:13" pos:end="897:28">close_connection</name><parameter_list pos:start="897:29" pos:end="897:44">(<parameter pos:start="897:30" pos:end="897:43"><decl pos:start="897:30" pos:end="897:43"><type pos:start="897:30" pos:end="897:42"><name pos:start="897:30" pos:end="897:40">HTTPContext</name> <modifier pos:start="897:42" pos:end="897:42">*</modifier></type><name pos:start="897:43" pos:end="897:43">c</name></decl></parameter>)</parameter_list>
<block pos:start="898:1" pos:end="985:1">{<block_content pos:start="899:5" pos:end="984:21">
    <decl_stmt pos:start="899:5" pos:end="899:26"><decl pos:start="899:5" pos:end="899:20"><type pos:start="899:5" pos:end="899:18"><name pos:start="899:5" pos:end="899:15">HTTPContext</name> <modifier pos:start="899:17" pos:end="899:17">*</modifier><modifier pos:start="899:18" pos:end="899:18">*</modifier></type><name pos:start="899:19" pos:end="899:20">cp</name></decl>, <decl pos:start="899:23" pos:end="899:25"><type ref="prev" pos:start="899:5" pos:end="899:18"><modifier pos:start="899:23" pos:end="899:23">*</modifier></type><name pos:start="899:24" pos:end="899:25">c1</name></decl>;</decl_stmt>
    <decl_stmt pos:start="900:5" pos:end="900:22"><decl pos:start="900:5" pos:end="900:9"><type pos:start="900:5" pos:end="900:7"><name pos:start="900:5" pos:end="900:7">int</name></type> <name pos:start="900:9" pos:end="900:9">i</name></decl>, <decl pos:start="900:12" pos:end="900:21"><type ref="prev" pos:start="900:5" pos:end="900:7"/><name pos:start="900:12" pos:end="900:21">nb_streams</name></decl>;</decl_stmt>
    <decl_stmt pos:start="901:5" pos:end="901:25"><decl pos:start="901:5" pos:end="901:24"><type pos:start="901:5" pos:end="901:21"><name pos:start="901:5" pos:end="901:19">AVFormatContext</name> <modifier pos:start="901:21" pos:end="901:21">*</modifier></type><name pos:start="901:22" pos:end="901:24">ctx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="902:5" pos:end="902:17"><decl pos:start="902:5" pos:end="902:16"><type pos:start="902:5" pos:end="902:14"><name pos:start="902:5" pos:end="902:12">AVStream</name> <modifier pos:start="902:14" pos:end="902:14">*</modifier></type><name pos:start="902:15" pos:end="902:16">st</name></decl>;</decl_stmt>

    <comment type="block" pos:start="904:5" pos:end="904:37">/* remove connection from list */</comment>
    <expr_stmt pos:start="905:5" pos:end="905:25"><expr pos:start="905:5" pos:end="905:24"><name pos:start="905:5" pos:end="905:6">cp</name> <operator pos:start="905:8" pos:end="905:8">=</operator> <operator pos:start="905:10" pos:end="905:10">&amp;</operator><name pos:start="905:11" pos:end="905:24">first_http_ctx</name></expr>;</expr_stmt>
    <while pos:start="906:5" pos:end="912:5">while <condition pos:start="906:11" pos:end="906:15">(<expr pos:start="906:12" pos:end="906:14"><operator pos:start="906:12" pos:end="906:12">*</operator><name pos:start="906:13" pos:end="906:14">cp</name></expr>)</condition> <block pos:start="906:17" pos:end="912:5">{<block_content pos:start="907:9" pos:end="911:27">
        <expr_stmt pos:start="907:9" pos:end="907:17"><expr pos:start="907:9" pos:end="907:16"><name pos:start="907:9" pos:end="907:10">c1</name> <operator pos:start="907:12" pos:end="907:12">=</operator> <operator pos:start="907:14" pos:end="907:14">*</operator><name pos:start="907:15" pos:end="907:16">cp</name></expr>;</expr_stmt>
        <if_stmt pos:start="908:9" pos:end="911:27"><if pos:start="908:9" pos:end="909:26">if <condition pos:start="908:12" pos:end="908:20">(<expr pos:start="908:13" pos:end="908:19"><name pos:start="908:13" pos:end="908:14">c1</name> <operator pos:start="908:16" pos:end="908:17">==</operator> <name pos:start="908:19" pos:end="908:19">c</name></expr>)</condition><block type="pseudo" pos:start="909:13" pos:end="909:26"><block_content pos:start="909:13" pos:end="909:26">
            <expr_stmt pos:start="909:13" pos:end="909:26"><expr pos:start="909:13" pos:end="909:25"><operator pos:start="909:13" pos:end="909:13">*</operator><name pos:start="909:14" pos:end="909:15">cp</name> <operator pos:start="909:17" pos:end="909:17">=</operator> <name pos:start="909:19" pos:end="909:25"><name pos:start="909:19" pos:end="909:19">c</name><operator pos:start="909:20" pos:end="909:21">-&gt;</operator><name pos:start="909:22" pos:end="909:25">next</name></name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="910:9" pos:end="911:27">else<block type="pseudo" pos:start="911:13" pos:end="911:27"><block_content pos:start="911:13" pos:end="911:27">
            <expr_stmt pos:start="911:13" pos:end="911:27"><expr pos:start="911:13" pos:end="911:26"><name pos:start="911:13" pos:end="911:14">cp</name> <operator pos:start="911:16" pos:end="911:16">=</operator> <operator pos:start="911:18" pos:end="911:18">&amp;</operator><name pos:start="911:19" pos:end="911:26"><name pos:start="911:19" pos:end="911:20">c1</name><operator pos:start="911:21" pos:end="911:22">-&gt;</operator><name pos:start="911:23" pos:end="911:26">next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></while>

    <comment type="block" pos:start="914:5" pos:end="914:55">/* remove references, if any (XXX: do it faster) */</comment>
    <for pos:start="915:5" pos:end="918:5">for<control pos:start="915:8" pos:end="915:47">(<init pos:start="915:9" pos:end="915:28"><expr pos:start="915:9" pos:end="915:27"><name pos:start="915:9" pos:end="915:10">c1</name> <operator pos:start="915:12" pos:end="915:12">=</operator> <name pos:start="915:14" pos:end="915:27">first_http_ctx</name></expr>;</init> <condition pos:start="915:30" pos:end="915:32"><expr pos:start="915:30" pos:end="915:31"><name pos:start="915:30" pos:end="915:31">c1</name></expr>;</condition> <incr pos:start="915:34" pos:end="915:46"><expr pos:start="915:34" pos:end="915:46"><name pos:start="915:34" pos:end="915:35">c1</name> <operator pos:start="915:37" pos:end="915:37">=</operator> <name pos:start="915:39" pos:end="915:46"><name pos:start="915:39" pos:end="915:40">c1</name><operator pos:start="915:41" pos:end="915:42">-&gt;</operator><name pos:start="915:43" pos:end="915:46">next</name></name></expr></incr>)</control> <block pos:start="915:49" pos:end="918:5">{<block_content pos:start="916:9" pos:end="917:30">
        <if_stmt pos:start="916:9" pos:end="917:30"><if pos:start="916:9" pos:end="917:30">if <condition pos:start="916:12" pos:end="916:28">(<expr pos:start="916:13" pos:end="916:27"><name pos:start="916:13" pos:end="916:22"><name pos:start="916:13" pos:end="916:14">c1</name><operator pos:start="916:15" pos:end="916:16">-&gt;</operator><name pos:start="916:17" pos:end="916:22">rtsp_c</name></name> <operator pos:start="916:24" pos:end="916:25">==</operator> <name pos:start="916:27" pos:end="916:27">c</name></expr>)</condition><block type="pseudo" pos:start="917:13" pos:end="917:30"><block_content pos:start="917:13" pos:end="917:30">
            <expr_stmt pos:start="917:13" pos:end="917:30"><expr pos:start="917:13" pos:end="917:29"><name pos:start="917:13" pos:end="917:22"><name pos:start="917:13" pos:end="917:14">c1</name><operator pos:start="917:15" pos:end="917:16">-&gt;</operator><name pos:start="917:17" pos:end="917:22">rtsp_c</name></name> <operator pos:start="917:24" pos:end="917:24">=</operator> <name pos:start="917:26" pos:end="917:29">NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block" pos:start="920:5" pos:end="920:48">/* remove connection associated resources */</comment>
    <if_stmt pos:start="921:5" pos:end="922:27"><if pos:start="921:5" pos:end="922:27">if <condition pos:start="921:8" pos:end="921:19">(<expr pos:start="921:9" pos:end="921:18"><name pos:start="921:9" pos:end="921:13"><name pos:start="921:9" pos:end="921:9">c</name><operator pos:start="921:10" pos:end="921:11">-&gt;</operator><name pos:start="921:12" pos:end="921:13">fd</name></name> <operator pos:start="921:15" pos:end="921:16">&gt;=</operator> <literal type="number" pos:start="921:18" pos:end="921:18">0</literal></expr>)</condition><block type="pseudo" pos:start="922:9" pos:end="922:27"><block_content pos:start="922:9" pos:end="922:27">
        <expr_stmt pos:start="922:9" pos:end="922:27"><expr pos:start="922:9" pos:end="922:26"><call pos:start="922:9" pos:end="922:26"><name pos:start="922:9" pos:end="922:19">closesocket</name><argument_list pos:start="922:20" pos:end="922:26">(<argument pos:start="922:21" pos:end="922:25"><expr pos:start="922:21" pos:end="922:25"><name pos:start="922:21" pos:end="922:25"><name pos:start="922:21" pos:end="922:21">c</name><operator pos:start="922:22" pos:end="922:23">-&gt;</operator><name pos:start="922:24" pos:end="922:25">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="923:5" pos:end="931:5"><if pos:start="923:5" pos:end="931:5">if <condition pos:start="923:8" pos:end="923:18">(<expr pos:start="923:9" pos:end="923:17"><name pos:start="923:9" pos:end="923:17"><name pos:start="923:9" pos:end="923:9">c</name><operator pos:start="923:10" pos:end="923:11">-&gt;</operator><name pos:start="923:12" pos:end="923:17">fmt_in</name></name></expr>)</condition> <block pos:start="923:20" pos:end="931:5">{<block_content pos:start="925:9" pos:end="930:41">
        <comment type="block" pos:start="924:9" pos:end="924:37">/* close each frame parser */</comment>
        <for pos:start="925:9" pos:end="929:9">for<control pos:start="925:12" pos:end="925:44">(<init pos:start="925:13" pos:end="925:16"><expr pos:start="925:13" pos:end="925:15"><name pos:start="925:13" pos:end="925:13">i</name><operator pos:start="925:14" pos:end="925:14">=</operator><literal type="number" pos:start="925:15" pos:end="925:15">0</literal></expr>;</init><condition pos:start="925:17" pos:end="925:40"><expr pos:start="925:17" pos:end="925:39"><name pos:start="925:17" pos:end="925:17">i</name><operator pos:start="925:18" pos:end="925:18">&lt;</operator><name pos:start="925:19" pos:end="925:39"><name pos:start="925:19" pos:end="925:19">c</name><operator pos:start="925:20" pos:end="925:21">-&gt;</operator><name pos:start="925:22" pos:end="925:27">fmt_in</name><operator pos:start="925:28" pos:end="925:29">-&gt;</operator><name pos:start="925:30" pos:end="925:39">nb_streams</name></name></expr>;</condition><incr pos:start="925:41" pos:end="925:43"><expr pos:start="925:41" pos:end="925:43"><name pos:start="925:41" pos:end="925:41">i</name><operator pos:start="925:42" pos:end="925:43">++</operator></expr></incr>)</control> <block pos:start="925:46" pos:end="929:9">{<block_content pos:start="926:13" pos:end="928:41">
            <expr_stmt pos:start="926:13" pos:end="926:39"><expr pos:start="926:13" pos:end="926:38"><name pos:start="926:13" pos:end="926:14">st</name> <operator pos:start="926:16" pos:end="926:16">=</operator> <name pos:start="926:18" pos:end="926:38"><name pos:start="926:18" pos:end="926:18">c</name><operator pos:start="926:19" pos:end="926:20">-&gt;</operator><name pos:start="926:21" pos:end="926:26">fmt_in</name><operator pos:start="926:27" pos:end="926:28">-&gt;</operator><name pos:start="926:29" pos:end="926:35">streams</name><index pos:start="926:36" pos:end="926:38">[<expr pos:start="926:37" pos:end="926:37"><name pos:start="926:37" pos:end="926:37">i</name></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt pos:start="927:13" pos:end="928:41"><if pos:start="927:13" pos:end="928:41">if <condition pos:start="927:16" pos:end="927:33">(<expr pos:start="927:17" pos:end="927:32"><name pos:start="927:17" pos:end="927:32"><name pos:start="927:17" pos:end="927:18">st</name><operator pos:start="927:19" pos:end="927:20">-&gt;</operator><name pos:start="927:21" pos:end="927:25">codec</name><operator pos:start="927:26" pos:end="927:27">-&gt;</operator><name pos:start="927:28" pos:end="927:32">codec</name></name></expr>)</condition><block type="pseudo" pos:start="928:17" pos:end="928:41"><block_content pos:start="928:17" pos:end="928:41">
                <expr_stmt pos:start="928:17" pos:end="928:41"><expr pos:start="928:17" pos:end="928:40"><call pos:start="928:17" pos:end="928:40"><name pos:start="928:17" pos:end="928:29">avcodec_close</name><argument_list pos:start="928:30" pos:end="928:40">(<argument pos:start="928:31" pos:end="928:39"><expr pos:start="928:31" pos:end="928:39"><name pos:start="928:31" pos:end="928:39"><name pos:start="928:31" pos:end="928:32">st</name><operator pos:start="928:33" pos:end="928:34">-&gt;</operator><name pos:start="928:35" pos:end="928:39">codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt pos:start="930:9" pos:end="930:41"><expr pos:start="930:9" pos:end="930:40"><call pos:start="930:9" pos:end="930:40"><name pos:start="930:9" pos:end="930:28">avformat_close_input</name><argument_list pos:start="930:29" pos:end="930:40">(<argument pos:start="930:30" pos:end="930:39"><expr pos:start="930:30" pos:end="930:39"><operator pos:start="930:30" pos:end="930:30">&amp;</operator><name pos:start="930:31" pos:end="930:39"><name pos:start="930:31" pos:end="930:31">c</name><operator pos:start="930:32" pos:end="930:33">-&gt;</operator><name pos:start="930:34" pos:end="930:39">fmt_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="933:5" pos:end="933:40">/* free RTP output streams if any */</comment>
    <expr_stmt pos:start="934:5" pos:end="934:19"><expr pos:start="934:5" pos:end="934:18"><name pos:start="934:5" pos:end="934:14">nb_streams</name> <operator pos:start="934:16" pos:end="934:16">=</operator> <literal type="number" pos:start="934:18" pos:end="934:18">0</literal></expr>;</expr_stmt>
    <if_stmt pos:start="935:5" pos:end="936:43"><if pos:start="935:5" pos:end="936:43">if <condition pos:start="935:8" pos:end="935:18">(<expr pos:start="935:9" pos:end="935:17"><name pos:start="935:9" pos:end="935:17"><name pos:start="935:9" pos:end="935:9">c</name><operator pos:start="935:10" pos:end="935:11">-&gt;</operator><name pos:start="935:12" pos:end="935:17">stream</name></name></expr>)</condition><block type="pseudo" pos:start="936:9" pos:end="936:43"><block_content pos:start="936:9" pos:end="936:43">
        <expr_stmt pos:start="936:9" pos:end="936:43"><expr pos:start="936:9" pos:end="936:42"><name pos:start="936:9" pos:end="936:18">nb_streams</name> <operator pos:start="936:20" pos:end="936:20">=</operator> <name pos:start="936:22" pos:end="936:42"><name pos:start="936:22" pos:end="936:22">c</name><operator pos:start="936:23" pos:end="936:24">-&gt;</operator><name pos:start="936:25" pos:end="936:30">stream</name><operator pos:start="936:31" pos:end="936:32">-&gt;</operator><name pos:start="936:33" pos:end="936:42">nb_streams</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="938:5" pos:end="947:5">for<control pos:start="938:8" pos:end="938:29">(<init pos:start="938:9" pos:end="938:12"><expr pos:start="938:9" pos:end="938:11"><name pos:start="938:9" pos:end="938:9">i</name><operator pos:start="938:10" pos:end="938:10">=</operator><literal type="number" pos:start="938:11" pos:end="938:11">0</literal></expr>;</init><condition pos:start="938:13" pos:end="938:25"><expr pos:start="938:13" pos:end="938:24"><name pos:start="938:13" pos:end="938:13">i</name><operator pos:start="938:14" pos:end="938:14">&lt;</operator><name pos:start="938:15" pos:end="938:24">nb_streams</name></expr>;</condition><incr pos:start="938:26" pos:end="938:28"><expr pos:start="938:26" pos:end="938:28"><name pos:start="938:26" pos:end="938:26">i</name><operator pos:start="938:27" pos:end="938:28">++</operator></expr></incr>)</control> <block pos:start="938:31" pos:end="947:5">{<block_content pos:start="939:9" pos:end="946:39">
        <expr_stmt pos:start="939:9" pos:end="939:28"><expr pos:start="939:9" pos:end="939:27"><name pos:start="939:9" pos:end="939:11">ctx</name> <operator pos:start="939:13" pos:end="939:13">=</operator> <name pos:start="939:15" pos:end="939:27"><name pos:start="939:15" pos:end="939:15">c</name><operator pos:start="939:16" pos:end="939:17">-&gt;</operator><name pos:start="939:18" pos:end="939:24">rtp_ctx</name><index pos:start="939:25" pos:end="939:27">[<expr pos:start="939:26" pos:end="939:26"><name pos:start="939:26" pos:end="939:26">i</name></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt pos:start="940:9" pos:end="945:9"><if pos:start="940:9" pos:end="945:9">if <condition pos:start="940:12" pos:end="940:16">(<expr pos:start="940:13" pos:end="940:15"><name pos:start="940:13" pos:end="940:15">ctx</name></expr>)</condition> <block pos:start="940:18" pos:end="945:9">{<block_content pos:start="941:13" pos:end="944:27">
            <expr_stmt pos:start="941:13" pos:end="941:34"><expr pos:start="941:13" pos:end="941:33"><call pos:start="941:13" pos:end="941:33"><name pos:start="941:13" pos:end="941:28">av_write_trailer</name><argument_list pos:start="941:29" pos:end="941:33">(<argument pos:start="941:30" pos:end="941:32"><expr pos:start="941:30" pos:end="941:32"><name pos:start="941:30" pos:end="941:32">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="942:13" pos:end="942:41"><expr pos:start="942:13" pos:end="942:40"><call pos:start="942:13" pos:end="942:40"><name pos:start="942:13" pos:end="942:24">av_dict_free</name><argument_list pos:start="942:25" pos:end="942:40">(<argument pos:start="942:26" pos:end="942:39"><expr pos:start="942:26" pos:end="942:39"><operator pos:start="942:26" pos:end="942:26">&amp;</operator><name pos:start="942:27" pos:end="942:39"><name pos:start="942:27" pos:end="942:29">ctx</name><operator pos:start="942:30" pos:end="942:31">-&gt;</operator><name pos:start="942:32" pos:end="942:39">metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="943:13" pos:end="943:39"><expr pos:start="943:13" pos:end="943:38"><call pos:start="943:13" pos:end="943:38"><name pos:start="943:13" pos:end="943:20">av_freep</name><argument_list pos:start="943:21" pos:end="943:38">(<argument pos:start="943:22" pos:end="943:37"><expr pos:start="943:22" pos:end="943:37"><operator pos:start="943:22" pos:end="943:22">&amp;</operator><name pos:start="943:23" pos:end="943:37"><name pos:start="943:23" pos:end="943:25">ctx</name><operator pos:start="943:26" pos:end="943:27">-&gt;</operator><name pos:start="943:28" pos:end="943:34">streams</name><index pos:start="943:35" pos:end="943:37">[<expr pos:start="943:36" pos:end="943:36"><literal type="number" pos:start="943:36" pos:end="943:36">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="944:13" pos:end="944:27"><expr pos:start="944:13" pos:end="944:26"><call pos:start="944:13" pos:end="944:26"><name pos:start="944:13" pos:end="944:20">av_freep</name><argument_list pos:start="944:21" pos:end="944:26">(<argument pos:start="944:22" pos:end="944:25"><expr pos:start="944:22" pos:end="944:25"><operator pos:start="944:22" pos:end="944:22">&amp;</operator><name pos:start="944:23" pos:end="944:25">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="946:9" pos:end="946:39"><expr pos:start="946:9" pos:end="946:38"><call pos:start="946:9" pos:end="946:38"><name pos:start="946:9" pos:end="946:19">ffurl_close</name><argument_list pos:start="946:20" pos:end="946:38">(<argument pos:start="946:21" pos:end="946:37"><expr pos:start="946:21" pos:end="946:37"><name pos:start="946:21" pos:end="946:37"><name pos:start="946:21" pos:end="946:21">c</name><operator pos:start="946:22" pos:end="946:23">-&gt;</operator><name pos:start="946:24" pos:end="946:34">rtp_handles</name><index pos:start="946:35" pos:end="946:37">[<expr pos:start="946:36" pos:end="946:36"><name pos:start="946:36" pos:end="946:36">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt pos:start="949:5" pos:end="949:22"><expr pos:start="949:5" pos:end="949:21"><name pos:start="949:5" pos:end="949:7">ctx</name> <operator pos:start="949:9" pos:end="949:9">=</operator> <name pos:start="949:11" pos:end="949:21"><name pos:start="949:11" pos:end="949:11">c</name><operator pos:start="949:12" pos:end="949:13">-&gt;</operator><name pos:start="949:14" pos:end="949:21">pfmt_ctx</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="951:5" pos:end="966:9"><if pos:start="951:5" pos:end="966:9">if <condition pos:start="951:8" pos:end="951:12">(<expr pos:start="951:9" pos:end="951:11"><name pos:start="951:9" pos:end="951:11">ctx</name></expr>)</condition> <block pos:start="951:14" pos:end="966:9">{<block_content pos:start="952:9" pos:end="965:34">
        <if_stmt pos:start="952:9" pos:end="961:10"><if pos:start="952:9" pos:end="961:10">if <condition pos:start="952:12" pos:end="952:34">(<expr pos:start="952:13" pos:end="952:32"><operator pos:start="952:13" pos:end="952:13">!</operator><name pos:start="952:14" pos:end="952:32"><name pos:start="952:14" pos:end="952:14">c</name><operator pos:start="952:15" pos:end="952:16">-&gt;</operator><name pos:start="952:17" pos:end="952:32">last_packet_sent</name></name></expr> )</condition><block pos:start="952:35" pos:end="961:10">{<block_content pos:start="953:1" pos:end="961:9">
<if_stmt pos:start="953:1" pos:end="961:9"><if pos:start="953:1" pos:end="961:9">if<condition pos:start="953:3" pos:end="953:44">( <expr pos:start="953:5" pos:end="953:43"><name pos:start="953:5" pos:end="953:12"><name pos:start="953:5" pos:end="953:5">c</name><operator pos:start="953:6" pos:end="953:7">-&gt;</operator><name pos:start="953:8" pos:end="953:12">state</name></name> <operator pos:start="953:14" pos:end="953:15">==</operator> <name pos:start="953:17" pos:end="953:43">HTTPSTATE_SEND_DATA_TRAILER</name></expr>)</condition> <block pos:start="953:46" pos:end="961:9">{<block_content pos:start="955:13" pos:end="960:14">
            <comment type="block" pos:start="954:13" pos:end="954:32">/* prepare header */</comment>
            <if_stmt pos:start="955:13" pos:end="960:14"><if pos:start="955:13" pos:end="960:14">if <condition pos:start="955:16" pos:end="955:30">(<expr pos:start="955:17" pos:end="955:28"><name pos:start="955:17" pos:end="955:28"><name pos:start="955:17" pos:end="955:19">ctx</name><operator pos:start="955:20" pos:end="955:21">-&gt;</operator><name pos:start="955:22" pos:end="955:28">oformat</name></name></expr> )</condition><block pos:start="955:31" pos:end="960:14">{<block_content pos:start="956:1" pos:end="960:13">
<if_stmt pos:start="956:1" pos:end="960:13"><if pos:start="956:1" pos:end="960:13">if<condition pos:start="956:3" pos:end="956:37">( <expr pos:start="956:5" pos:end="956:36"><call pos:start="956:5" pos:end="956:31"><name pos:start="956:5" pos:end="956:21">avio_open_dyn_buf</name><argument_list pos:start="956:22" pos:end="956:31">(<argument pos:start="956:23" pos:end="956:30"><expr pos:start="956:23" pos:end="956:30"><operator pos:start="956:23" pos:end="956:23">&amp;</operator><name pos:start="956:24" pos:end="956:30"><name pos:start="956:24" pos:end="956:26">ctx</name><operator pos:start="956:27" pos:end="956:28">-&gt;</operator><name pos:start="956:29" pos:end="956:30">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="956:33" pos:end="956:34">&gt;=</operator> <literal type="number" pos:start="956:36" pos:end="956:36">0</literal></expr>)</condition> <block pos:start="956:39" pos:end="960:13">{<block_content pos:start="957:17" pos:end="959:59">
                <expr_stmt pos:start="957:17" pos:end="957:38"><expr pos:start="957:17" pos:end="957:37"><call pos:start="957:17" pos:end="957:37"><name pos:start="957:17" pos:end="957:32">av_write_trailer</name><argument_list pos:start="957:33" pos:end="957:37">(<argument pos:start="957:34" pos:end="957:36"><expr pos:start="957:34" pos:end="957:36"><name pos:start="957:34" pos:end="957:36">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="958:17" pos:end="958:40"><expr pos:start="958:17" pos:end="958:39"><call pos:start="958:17" pos:end="958:39"><name pos:start="958:17" pos:end="958:24">av_freep</name><argument_list pos:start="958:25" pos:end="958:39">(<argument pos:start="958:26" pos:end="958:38"><expr pos:start="958:26" pos:end="958:38"><operator pos:start="958:26" pos:end="958:26">&amp;</operator><name pos:start="958:27" pos:end="958:38"><name pos:start="958:27" pos:end="958:27">c</name><operator pos:start="958:28" pos:end="958:29">-&gt;</operator><name pos:start="958:30" pos:end="958:38">pb_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="959:17" pos:end="959:59"><expr pos:start="959:17" pos:end="959:58"><call pos:start="959:17" pos:end="959:58"><name pos:start="959:17" pos:end="959:34">avio_close_dyn_buf</name><argument_list pos:start="959:35" pos:end="959:58">(<argument pos:start="959:36" pos:end="959:42"><expr pos:start="959:36" pos:end="959:42"><name pos:start="959:36" pos:end="959:42"><name pos:start="959:36" pos:end="959:38">ctx</name><operator pos:start="959:39" pos:end="959:40">-&gt;</operator><name pos:start="959:41" pos:end="959:42">pb</name></name></expr></argument>, <argument pos:start="959:45" pos:end="959:57"><expr pos:start="959:45" pos:end="959:57"><operator pos:start="959:45" pos:end="959:45">&amp;</operator><name pos:start="959:46" pos:end="959:57"><name pos:start="959:46" pos:end="959:46">c</name><operator pos:start="959:47" pos:end="959:48">-&gt;</operator><name pos:start="959:49" pos:end="959:57">pb_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt>
        <for pos:start="962:9" pos:end="963:39">for<control pos:start="962:12" pos:end="962:40">(<init pos:start="962:13" pos:end="962:16"><expr pos:start="962:13" pos:end="962:15"><name pos:start="962:13" pos:end="962:13">i</name><operator pos:start="962:14" pos:end="962:14">=</operator><literal type="number" pos:start="962:15" pos:end="962:15">0</literal></expr>;</init> <condition pos:start="962:18" pos:end="962:35"><expr pos:start="962:18" pos:end="962:34"><name pos:start="962:18" pos:end="962:18">i</name><operator pos:start="962:19" pos:end="962:19">&lt;</operator><name pos:start="962:20" pos:end="962:34"><name pos:start="962:20" pos:end="962:22">ctx</name><operator pos:start="962:23" pos:end="962:24">-&gt;</operator><name pos:start="962:25" pos:end="962:34">nb_streams</name></name></expr>;</condition> <incr pos:start="962:37" pos:end="962:39"><expr pos:start="962:37" pos:end="962:39"><name pos:start="962:37" pos:end="962:37">i</name><operator pos:start="962:38" pos:end="962:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="963:13" pos:end="963:39"><block_content pos:start="963:13" pos:end="963:39">
            <expr_stmt pos:start="963:13" pos:end="963:39"><expr pos:start="963:13" pos:end="963:38"><call pos:start="963:13" pos:end="963:38"><name pos:start="963:13" pos:end="963:20">av_freep</name><argument_list pos:start="963:21" pos:end="963:38">(<argument pos:start="963:22" pos:end="963:37"><expr pos:start="963:22" pos:end="963:37"><operator pos:start="963:22" pos:end="963:22">&amp;</operator><name pos:start="963:23" pos:end="963:37"><name pos:start="963:23" pos:end="963:25">ctx</name><operator pos:start="963:26" pos:end="963:27">-&gt;</operator><name pos:start="963:28" pos:end="963:34">streams</name><index pos:start="963:35" pos:end="963:37">[<expr pos:start="963:36" pos:end="963:36"><name pos:start="963:36" pos:end="963:36">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt pos:start="964:9" pos:end="964:32"><expr pos:start="964:9" pos:end="964:31"><call pos:start="964:9" pos:end="964:31"><name pos:start="964:9" pos:end="964:16">av_freep</name><argument_list pos:start="964:17" pos:end="964:31">(<argument pos:start="964:18" pos:end="964:30"><expr pos:start="964:18" pos:end="964:30"><operator pos:start="964:18" pos:end="964:18">&amp;</operator><name pos:start="964:19" pos:end="964:30"><name pos:start="964:19" pos:end="964:21">ctx</name><operator pos:start="964:22" pos:end="964:23">-&gt;</operator><name pos:start="964:24" pos:end="964:30">streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="965:9" pos:end="965:34"><expr pos:start="965:9" pos:end="965:33"><call pos:start="965:9" pos:end="965:33"><name pos:start="965:9" pos:end="965:16">av_freep</name><argument_list pos:start="965:17" pos:end="965:33">(<argument pos:start="965:18" pos:end="965:32"><expr pos:start="965:18" pos:end="965:32"><operator pos:start="965:18" pos:end="965:18">&amp;</operator><name pos:start="965:19" pos:end="965:32"><name pos:start="965:19" pos:end="965:21">ctx</name><operator pos:start="965:22" pos:end="965:23">-&gt;</operator><name pos:start="965:24" pos:end="965:32">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="968:5" pos:end="971:52"><if pos:start="968:5" pos:end="971:52">if <condition pos:start="968:8" pos:end="968:19">(<expr pos:start="968:9" pos:end="968:17"><name pos:start="968:9" pos:end="968:17"><name pos:start="968:9" pos:end="968:9">c</name><operator pos:start="968:10" pos:end="968:11">-&gt;</operator><name pos:start="968:12" pos:end="968:17">stream</name></name></expr> )</condition><block pos:start="968:20" pos:end="971:52">{<block_content pos:start="969:1" pos:end="971:51">
<if_stmt pos:start="969:1" pos:end="971:51"><if pos:start="969:1" pos:end="971:51">if<condition pos:start="969:3" pos:end="969:14">( <expr pos:start="969:5" pos:end="969:12"><operator pos:start="969:5" pos:end="969:5">!</operator><name pos:start="969:6" pos:end="969:12"><name pos:start="969:6" pos:end="969:6">c</name><operator pos:start="969:7" pos:end="969:8">-&gt;</operator><name pos:start="969:9" pos:end="969:12">post</name></name></expr> )</condition><block pos:start="969:15" pos:end="971:51">{<block_content pos:start="970:1" pos:end="971:50">
<if_stmt pos:start="970:1" pos:end="971:50"><if pos:start="970:1" pos:end="971:50">if<condition pos:start="970:3" pos:end="970:47">( <expr pos:start="970:5" pos:end="970:46"><name pos:start="970:5" pos:end="970:26"><name pos:start="970:5" pos:end="970:5">c</name><operator pos:start="970:6" pos:end="970:7">-&gt;</operator><name pos:start="970:8" pos:end="970:13">stream</name><operator pos:start="970:14" pos:end="970:15">-&gt;</operator><name pos:start="970:16" pos:end="970:26">stream_type</name></name> <operator pos:start="970:28" pos:end="970:29">==</operator> <name pos:start="970:31" pos:end="970:46">STREAM_TYPE_LIVE</name></expr>)</condition><block type="pseudo" pos:start="971:9" pos:end="971:50"><block_content pos:start="971:9" pos:end="971:50">
        <expr_stmt pos:start="971:9" pos:end="971:50"><expr pos:start="971:9" pos:end="971:49"><name pos:start="971:9" pos:end="971:25">current_bandwidth</name> <operator pos:start="971:27" pos:end="971:28">-=</operator> <name pos:start="971:30" pos:end="971:49"><name pos:start="971:30" pos:end="971:30">c</name><operator pos:start="971:31" pos:end="971:32">-&gt;</operator><name pos:start="971:33" pos:end="971:38">stream</name><operator pos:start="971:39" pos:end="971:40">-&gt;</operator><name pos:start="971:41" pos:end="971:49">bandwidth</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="973:5" pos:end="973:66">/* signal that there is no feed if we are the feeder socket */</comment>
    <if_stmt pos:start="974:5" pos:end="978:6"><if pos:start="974:5" pos:end="978:6">if <condition pos:start="974:8" pos:end="974:44">(<expr pos:start="974:9" pos:end="974:42"><name pos:start="974:9" pos:end="974:16"><name pos:start="974:9" pos:end="974:9">c</name><operator pos:start="974:10" pos:end="974:11">-&gt;</operator><name pos:start="974:12" pos:end="974:16">state</name></name> <operator pos:start="974:18" pos:end="974:19">==</operator> <name pos:start="974:21" pos:end="974:42">HTTPSTATE_RECEIVE_DATA</name></expr> )</condition><block pos:start="974:45" pos:end="978:6">{<block_content pos:start="975:1" pos:end="978:5">
<if_stmt pos:start="975:1" pos:end="978:5"><if pos:start="975:1" pos:end="978:5">if<condition pos:start="975:3" pos:end="975:14">( <expr pos:start="975:5" pos:end="975:13"><name pos:start="975:5" pos:end="975:13"><name pos:start="975:5" pos:end="975:5">c</name><operator pos:start="975:6" pos:end="975:7">-&gt;</operator><name pos:start="975:8" pos:end="975:13">stream</name></name></expr>)</condition> <block pos:start="975:16" pos:end="978:5">{<block_content pos:start="976:9" pos:end="977:26">
        <expr_stmt pos:start="976:9" pos:end="976:35"><expr pos:start="976:9" pos:end="976:34"><name pos:start="976:9" pos:end="976:30"><name pos:start="976:9" pos:end="976:9">c</name><operator pos:start="976:10" pos:end="976:11">-&gt;</operator><name pos:start="976:12" pos:end="976:17">stream</name><operator pos:start="976:18" pos:end="976:19">-&gt;</operator><name pos:start="976:20" pos:end="976:30">feed_opened</name></name> <operator pos:start="976:32" pos:end="976:32">=</operator> <literal type="number" pos:start="976:34" pos:end="976:34">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="977:9" pos:end="977:26"><expr pos:start="977:9" pos:end="977:25"><call pos:start="977:9" pos:end="977:25"><name pos:start="977:9" pos:end="977:13">close</name><argument_list pos:start="977:14" pos:end="977:25">(<argument pos:start="977:15" pos:end="977:24"><expr pos:start="977:15" pos:end="977:24"><name pos:start="977:15" pos:end="977:24"><name pos:start="977:15" pos:end="977:15">c</name><operator pos:start="977:16" pos:end="977:17">-&gt;</operator><name pos:start="977:18" pos:end="977:24">feed_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="980:5" pos:end="980:28"><expr pos:start="980:5" pos:end="980:27"><call pos:start="980:5" pos:end="980:27"><name pos:start="980:5" pos:end="980:12">av_freep</name><argument_list pos:start="980:13" pos:end="980:27">(<argument pos:start="980:14" pos:end="980:26"><expr pos:start="980:14" pos:end="980:26"><operator pos:start="980:14" pos:end="980:14">&amp;</operator><name pos:start="980:15" pos:end="980:26"><name pos:start="980:15" pos:end="980:15">c</name><operator pos:start="980:16" pos:end="980:17">-&gt;</operator><name pos:start="980:18" pos:end="980:26">pb_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="981:5" pos:end="981:32"><expr pos:start="981:5" pos:end="981:31"><call pos:start="981:5" pos:end="981:31"><name pos:start="981:5" pos:end="981:12">av_freep</name><argument_list pos:start="981:13" pos:end="981:31">(<argument pos:start="981:14" pos:end="981:30"><expr pos:start="981:14" pos:end="981:30"><operator pos:start="981:14" pos:end="981:14">&amp;</operator><name pos:start="981:15" pos:end="981:30"><name pos:start="981:15" pos:end="981:15">c</name><operator pos:start="981:16" pos:end="981:17">-&gt;</operator><name pos:start="981:18" pos:end="981:30">packet_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="982:5" pos:end="982:25"><expr pos:start="982:5" pos:end="982:24"><call pos:start="982:5" pos:end="982:24"><name pos:start="982:5" pos:end="982:12">av_freep</name><argument_list pos:start="982:13" pos:end="982:24">(<argument pos:start="982:14" pos:end="982:23"><expr pos:start="982:14" pos:end="982:23"><operator pos:start="982:14" pos:end="982:14">&amp;</operator><name pos:start="982:15" pos:end="982:23"><name pos:start="982:15" pos:end="982:15">c</name><operator pos:start="982:16" pos:end="982:17">-&gt;</operator><name pos:start="982:18" pos:end="982:23">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="983:5" pos:end="983:15"><expr pos:start="983:5" pos:end="983:14"><call pos:start="983:5" pos:end="983:14"><name pos:start="983:5" pos:end="983:11">av_free</name><argument_list pos:start="983:12" pos:end="983:14">(<argument pos:start="983:13" pos:end="983:13"><expr pos:start="983:13" pos:end="983:13"><name pos:start="983:13" pos:end="983:13">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="984:5" pos:end="984:21"><expr pos:start="984:5" pos:end="984:20"><name pos:start="984:5" pos:end="984:18">nb_connections</name><operator pos:start="984:19" pos:end="984:20">--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="987:1" pos:end="1172:1"><type pos:start="987:1" pos:end="987:10"><specifier pos:start="987:1" pos:end="987:6">static</specifier> <name pos:start="987:8" pos:end="987:10">int</name></type> <name pos:start="987:12" pos:end="987:28">handle_connection</name><parameter_list pos:start="987:29" pos:end="987:44">(<parameter pos:start="987:30" pos:end="987:43"><decl pos:start="987:30" pos:end="987:43"><type pos:start="987:30" pos:end="987:42"><name pos:start="987:30" pos:end="987:40">HTTPContext</name> <modifier pos:start="987:42" pos:end="987:42">*</modifier></type><name pos:start="987:43" pos:end="987:43">c</name></decl></parameter>)</parameter_list>
<block pos:start="988:1" pos:end="1172:1">{<block_content pos:start="989:5" pos:end="1171:14">
    <decl_stmt pos:start="989:5" pos:end="989:17"><decl pos:start="989:5" pos:end="989:11"><type pos:start="989:5" pos:end="989:7"><name pos:start="989:5" pos:end="989:7">int</name></type> <name pos:start="989:9" pos:end="989:11">len</name></decl>, <decl pos:start="989:14" pos:end="989:16"><type ref="prev" pos:start="989:5" pos:end="989:7"/><name pos:start="989:14" pos:end="989:16">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="990:5" pos:end="990:17"><decl pos:start="990:5" pos:end="990:16"><type pos:start="990:5" pos:end="990:13"><name pos:start="990:5" pos:end="990:11">uint8_t</name> <modifier pos:start="990:13" pos:end="990:13">*</modifier></type><name pos:start="990:14" pos:end="990:16">ptr</name></decl>;</decl_stmt>

    <switch pos:start="992:5" pos:end="1166:5">switch<condition pos:start="992:11" pos:end="992:20">(<expr pos:start="992:12" pos:end="992:19"><name pos:start="992:12" pos:end="992:19"><name pos:start="992:12" pos:end="992:12">c</name><operator pos:start="992:13" pos:end="992:14">-&gt;</operator><name pos:start="992:15" pos:end="992:19">state</name></name></expr>)</condition> <block pos:start="992:22" pos:end="1166:5">{<block_content pos:start="993:5" pos:end="1165:18">
    <case pos:start="993:5" pos:end="993:32">case <expr pos:start="993:10" pos:end="993:31"><name pos:start="993:10" pos:end="993:31">HTTPSTATE_WAIT_REQUEST</name></expr>:</case>
    <case pos:start="994:5" pos:end="994:32">case <expr pos:start="994:10" pos:end="994:31"><name pos:start="994:10" pos:end="994:31">RTSPSTATE_WAIT_REQUEST</name></expr>:</case>
        <comment type="block" pos:start="995:9" pos:end="995:23">/* timeout ? */</comment>
        <if_stmt pos:start="996:9" pos:end="997:22"><if pos:start="996:9" pos:end="997:22">if <condition pos:start="996:12" pos:end="996:40">(<expr pos:start="996:13" pos:end="996:39"><operator pos:start="996:13" pos:end="996:13">(</operator><name pos:start="996:14" pos:end="996:23"><name pos:start="996:14" pos:end="996:14">c</name><operator pos:start="996:15" pos:end="996:16">-&gt;</operator><name pos:start="996:17" pos:end="996:23">timeout</name></name> <operator pos:start="996:25" pos:end="996:25">-</operator> <name pos:start="996:27" pos:end="996:34">cur_time</name><operator pos:start="996:35" pos:end="996:35">)</operator> <operator pos:start="996:37" pos:end="996:37">&lt;</operator> <literal type="number" pos:start="996:39" pos:end="996:39">0</literal></expr>)</condition><block type="pseudo" pos:start="997:13" pos:end="997:22"><block_content pos:start="997:13" pos:end="997:22">
            <return pos:start="997:13" pos:end="997:22">return <expr pos:start="997:20" pos:end="997:21"><operator pos:start="997:20" pos:end="997:20">-</operator><literal type="number" pos:start="997:21" pos:end="997:21">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt pos:start="998:9" pos:end="999:22"><if pos:start="998:9" pos:end="999:22">if <condition pos:start="998:12" pos:end="998:57">(<expr pos:start="998:13" pos:end="998:56"><name pos:start="998:13" pos:end="998:34"><name pos:start="998:13" pos:end="998:13">c</name><operator pos:start="998:14" pos:end="998:15">-&gt;</operator><name pos:start="998:16" pos:end="998:25">poll_entry</name><operator pos:start="998:26" pos:end="998:27">-&gt;</operator><name pos:start="998:28" pos:end="998:34">revents</name></name> <operator pos:start="998:36" pos:end="998:36">&amp;</operator> <operator pos:start="998:38" pos:end="998:38">(</operator><name pos:start="998:39" pos:end="998:45">POLLERR</name> <operator pos:start="998:47" pos:end="998:47">|</operator> <name pos:start="998:49" pos:end="998:55">POLLHUP</name><operator pos:start="998:56" pos:end="998:56">)</operator></expr>)</condition><block type="pseudo" pos:start="999:13" pos:end="999:22"><block_content pos:start="999:13" pos:end="999:22">
            <return pos:start="999:13" pos:end="999:22">return <expr pos:start="999:20" pos:end="999:21"><operator pos:start="999:20" pos:end="999:20">-</operator><literal type="number" pos:start="999:21" pos:end="999:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block" pos:start="1001:9" pos:end="1001:42">/* no need to read if no events */</comment>
        <if_stmt pos:start="1002:9" pos:end="1003:21"><if pos:start="1002:9" pos:end="1003:21">if <condition pos:start="1002:12" pos:end="1002:47">(<expr pos:start="1002:13" pos:end="1002:46"><operator pos:start="1002:13" pos:end="1002:13">!</operator><operator pos:start="1002:14" pos:end="1002:14">(</operator><name pos:start="1002:15" pos:end="1002:36"><name pos:start="1002:15" pos:end="1002:15">c</name><operator pos:start="1002:16" pos:end="1002:17">-&gt;</operator><name pos:start="1002:18" pos:end="1002:27">poll_entry</name><operator pos:start="1002:28" pos:end="1002:29">-&gt;</operator><name pos:start="1002:30" pos:end="1002:36">revents</name></name> <operator pos:start="1002:38" pos:end="1002:38">&amp;</operator> <name pos:start="1002:40" pos:end="1002:45">POLLIN</name><operator pos:start="1002:46" pos:end="1002:46">)</operator></expr>)</condition><block type="pseudo" pos:start="1003:13" pos:end="1003:21"><block_content pos:start="1003:13" pos:end="1003:21">
            <return pos:start="1003:13" pos:end="1003:21">return <expr pos:start="1003:20" pos:end="1003:20"><literal type="number" pos:start="1003:20" pos:end="1003:20">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <comment type="block" pos:start="1004:9" pos:end="1004:27">/* read the data */</comment>
    <label pos:start="1005:5" pos:end="1005:14"><name pos:start="1005:5" pos:end="1005:13">read_loop</name>:</label>
        <if_stmt pos:start="1006:9" pos:end="1007:22"><if pos:start="1006:9" pos:end="1007:22">if <condition pos:start="1006:12" pos:end="1006:54">(<expr pos:start="1006:13" pos:end="1006:53"><operator pos:start="1006:13" pos:end="1006:13">!</operator><operator pos:start="1006:14" pos:end="1006:14">(</operator><name pos:start="1006:15" pos:end="1006:17">len</name> <operator pos:start="1006:19" pos:end="1006:19">=</operator> <call pos:start="1006:21" pos:end="1006:52"><name pos:start="1006:21" pos:end="1006:24">recv</name><argument_list pos:start="1006:25" pos:end="1006:52">(<argument pos:start="1006:26" pos:end="1006:30"><expr pos:start="1006:26" pos:end="1006:30"><name pos:start="1006:26" pos:end="1006:30"><name pos:start="1006:26" pos:end="1006:26">c</name><operator pos:start="1006:27" pos:end="1006:28">-&gt;</operator><name pos:start="1006:29" pos:end="1006:30">fd</name></name></expr></argument>, <argument pos:start="1006:33" pos:end="1006:45"><expr pos:start="1006:33" pos:end="1006:45"><name pos:start="1006:33" pos:end="1006:45"><name pos:start="1006:33" pos:end="1006:33">c</name><operator pos:start="1006:34" pos:end="1006:35">-&gt;</operator><name pos:start="1006:36" pos:end="1006:45">buffer_ptr</name></name></expr></argument>, <argument pos:start="1006:48" pos:end="1006:48"><expr pos:start="1006:48" pos:end="1006:48"><literal type="number" pos:start="1006:48" pos:end="1006:48">1</literal></expr></argument>, <argument pos:start="1006:51" pos:end="1006:51"><expr pos:start="1006:51" pos:end="1006:51"><literal type="number" pos:start="1006:51" pos:end="1006:51">0</literal></expr></argument>)</argument_list></call><operator pos:start="1006:53" pos:end="1006:53">)</operator></expr>)</condition><block type="pseudo" pos:start="1007:13" pos:end="1007:22"><block_content pos:start="1007:13" pos:end="1007:22">
            <return pos:start="1007:13" pos:end="1007:22">return <expr pos:start="1007:20" pos:end="1007:21"><operator pos:start="1007:20" pos:end="1007:20">-</operator><literal type="number" pos:start="1007:21" pos:end="1007:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="1009:9" pos:end="1015:9"><if pos:start="1009:9" pos:end="1015:9">if <condition pos:start="1009:12" pos:end="1009:20">(<expr pos:start="1009:13" pos:end="1009:19"><name pos:start="1009:13" pos:end="1009:15">len</name> <operator pos:start="1009:17" pos:end="1009:17">&lt;</operator> <literal type="number" pos:start="1009:19" pos:end="1009:19">0</literal></expr>)</condition> <block pos:start="1009:22" pos:end="1015:9">{<block_content pos:start="1010:13" pos:end="1014:18">
            <if_stmt pos:start="1010:13" pos:end="1013:27"><if pos:start="1010:13" pos:end="1013:27">if <condition pos:start="1010:16" pos:end="1010:50">(<expr pos:start="1010:17" pos:end="1010:48"><call pos:start="1010:17" pos:end="1010:29"><name pos:start="1010:17" pos:end="1010:27">ff_neterrno</name><argument_list pos:start="1010:28" pos:end="1010:29">()</argument_list></call> <operator pos:start="1010:31" pos:end="1010:32">!=</operator> <call pos:start="1010:34" pos:end="1010:48"><name pos:start="1010:34" pos:end="1010:40">AVERROR</name><argument_list pos:start="1010:41" pos:end="1010:48">(<argument pos:start="1010:42" pos:end="1010:47"><expr pos:start="1010:42" pos:end="1010:47"><name pos:start="1010:42" pos:end="1010:47">EAGAIN</name></expr></argument>)</argument_list></call></expr> )</condition><block pos:start="1010:51" pos:end="1013:27">{<block_content pos:start="1011:1" pos:end="1013:26">
<if_stmt pos:start="1011:1" pos:end="1013:26"><if pos:start="1011:1" pos:end="1013:26">if<condition pos:start="1011:3" pos:end="1012:48">(
                <expr pos:start="1012:17" pos:end="1012:47"><call pos:start="1012:17" pos:end="1012:29"><name pos:start="1012:17" pos:end="1012:27">ff_neterrno</name><argument_list pos:start="1012:28" pos:end="1012:29">()</argument_list></call> <operator pos:start="1012:31" pos:end="1012:32">!=</operator> <call pos:start="1012:34" pos:end="1012:47"><name pos:start="1012:34" pos:end="1012:40">AVERROR</name><argument_list pos:start="1012:41" pos:end="1012:47">(<argument pos:start="1012:42" pos:end="1012:46"><expr pos:start="1012:42" pos:end="1012:46"><name pos:start="1012:42" pos:end="1012:46">EINTR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1013:17" pos:end="1013:26"><block_content pos:start="1013:17" pos:end="1013:26">
                <return pos:start="1013:17" pos:end="1013:26">return <expr pos:start="1013:24" pos:end="1013:25"><operator pos:start="1013:24" pos:end="1013:24">-</operator><literal type="number" pos:start="1013:25" pos:end="1013:25">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content>}</block></if></if_stmt>
            <break pos:start="1014:13" pos:end="1014:18">break;</break>
        </block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="1016:9" pos:end="1016:40">/* search for end of request. */</comment>
        <expr_stmt pos:start="1017:9" pos:end="1017:29"><expr pos:start="1017:9" pos:end="1017:28"><name pos:start="1017:9" pos:end="1017:21"><name pos:start="1017:9" pos:end="1017:9">c</name><operator pos:start="1017:10" pos:end="1017:11">-&gt;</operator><name pos:start="1017:12" pos:end="1017:21">buffer_ptr</name></name> <operator pos:start="1017:23" pos:end="1017:24">+=</operator> <name pos:start="1017:26" pos:end="1017:28">len</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1018:9" pos:end="1018:28"><expr pos:start="1018:9" pos:end="1018:27"><name pos:start="1018:9" pos:end="1018:11">ptr</name> <operator pos:start="1018:13" pos:end="1018:13">=</operator> <name pos:start="1018:15" pos:end="1018:27"><name pos:start="1018:15" pos:end="1018:15">c</name><operator pos:start="1018:16" pos:end="1018:17">-&gt;</operator><name pos:start="1018:18" pos:end="1018:27">buffer_ptr</name></name></expr>;</expr_stmt>
        <if_stmt pos:start="1019:9" pos:end="1032:30"><if pos:start="1019:9" pos:end="1029:9">if <condition pos:start="1019:12" pos:end="1020:68">((ptr &gt;= c-&gt;buffer + 2 &amp;&amp; !memcmp(ptr-2, "\n\n", 2)) ||
            (ptr &gt;= c-&gt;buffer + 4 &amp;&amp; !memcmp(ptr-4, "\r\n\r\n", 4)))</condition> <block pos:start="1020:70" pos:end="1029:9">{<block_content pos:start="1022:13" pos:end="1028:26">
            <comment type="block" pos:start="1021:13" pos:end="1021:52">/* request found : parse it and reply */</comment>
            <if_stmt pos:start="1022:13" pos:end="1025:44"><if pos:start="1022:13" pos:end="1023:44">if <condition pos:start="1022:16" pos:end="1022:51">(<expr pos:start="1022:17" pos:end="1022:50"><name pos:start="1022:17" pos:end="1022:24"><name pos:start="1022:17" pos:end="1022:17">c</name><operator pos:start="1022:18" pos:end="1022:19">-&gt;</operator><name pos:start="1022:20" pos:end="1022:24">state</name></name> <operator pos:start="1022:26" pos:end="1022:27">==</operator> <name pos:start="1022:29" pos:end="1022:50">HTTPSTATE_WAIT_REQUEST</name></expr>)</condition><block type="pseudo" pos:start="1023:17" pos:end="1023:44"><block_content pos:start="1023:17" pos:end="1023:44">
                <expr_stmt pos:start="1023:17" pos:end="1023:44"><expr pos:start="1023:17" pos:end="1023:43"><name pos:start="1023:17" pos:end="1023:19">ret</name> <operator pos:start="1023:21" pos:end="1023:21">=</operator> <call pos:start="1023:23" pos:end="1023:43"><name pos:start="1023:23" pos:end="1023:40">http_parse_request</name><argument_list pos:start="1023:41" pos:end="1023:43">(<argument pos:start="1023:42" pos:end="1023:42"><expr pos:start="1023:42" pos:end="1023:42"><name pos:start="1023:42" pos:end="1023:42">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="1024:13" pos:end="1025:44">else<block type="pseudo" pos:start="1025:17" pos:end="1025:44"><block_content pos:start="1025:17" pos:end="1025:44">
                <expr_stmt pos:start="1025:17" pos:end="1025:44"><expr pos:start="1025:17" pos:end="1025:43"><name pos:start="1025:17" pos:end="1025:19">ret</name> <operator pos:start="1025:21" pos:end="1025:21">=</operator> <call pos:start="1025:23" pos:end="1025:43"><name pos:start="1025:23" pos:end="1025:40">rtsp_parse_request</name><argument_list pos:start="1025:41" pos:end="1025:43">(<argument pos:start="1025:42" pos:end="1025:42"><expr pos:start="1025:42" pos:end="1025:42"><name pos:start="1025:42" pos:end="1025:42">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="1027:13" pos:end="1028:26"><if pos:start="1027:13" pos:end="1028:26">if <condition pos:start="1027:16" pos:end="1027:24">(<expr pos:start="1027:17" pos:end="1027:23"><name pos:start="1027:17" pos:end="1027:19">ret</name> <operator pos:start="1027:21" pos:end="1027:21">&lt;</operator> <literal type="number" pos:start="1027:23" pos:end="1027:23">0</literal></expr>)</condition><block type="pseudo" pos:start="1028:17" pos:end="1028:26"><block_content pos:start="1028:17" pos:end="1028:26">
                <return pos:start="1028:17" pos:end="1028:26">return <expr pos:start="1028:24" pos:end="1028:25"><operator pos:start="1028:24" pos:end="1028:24">-</operator><literal type="number" pos:start="1028:25" pos:end="1028:25">1</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if><if type="elseif" pos:start="1029:10" pos:end="1032:9">else if <condition pos:start="1029:18" pos:end="1029:39">(<expr pos:start="1029:19" pos:end="1029:38"><name pos:start="1029:19" pos:end="1029:21">ptr</name> <operator pos:start="1029:23" pos:end="1029:24">&gt;=</operator> <name pos:start="1029:26" pos:end="1029:38"><name pos:start="1029:26" pos:end="1029:26">c</name><operator pos:start="1029:27" pos:end="1029:28">-&gt;</operator><name pos:start="1029:29" pos:end="1029:38">buffer_end</name></name></expr>)</condition> <block pos:start="1029:41" pos:end="1032:9">{<block_content pos:start="1031:13" pos:end="1031:22">
            <comment type="block" pos:start="1030:13" pos:end="1030:54">/* request too long: cannot do anything */</comment>
            <return pos:start="1031:13" pos:end="1031:22">return <expr pos:start="1031:20" pos:end="1031:21"><operator pos:start="1031:20" pos:end="1031:20">-</operator><literal type="number" pos:start="1031:21" pos:end="1031:21">1</literal></expr>;</return>
        </block_content>}</block></if> <else pos:start="1032:11" pos:end="1032:30">else<block type="pseudo" pos:start="1032:16" pos:end="1032:30"><block_content pos:start="1032:16" pos:end="1032:30"> <goto pos:start="1032:16" pos:end="1032:30">goto <name pos:start="1032:21" pos:end="1032:29">read_loop</name>;</goto></block_content></block></else></if_stmt>

        <break pos:start="1034:9" pos:end="1034:14">break;</break>

    <case pos:start="1036:5" pos:end="1036:31">case <expr pos:start="1036:10" pos:end="1036:30"><name pos:start="1036:10" pos:end="1036:30">HTTPSTATE_SEND_HEADER</name></expr>:</case>
        <if_stmt pos:start="1037:9" pos:end="1038:22"><if pos:start="1037:9" pos:end="1038:22">if <condition pos:start="1037:12" pos:end="1037:57">(<expr pos:start="1037:13" pos:end="1037:56"><name pos:start="1037:13" pos:end="1037:34"><name pos:start="1037:13" pos:end="1037:13">c</name><operator pos:start="1037:14" pos:end="1037:15">-&gt;</operator><name pos:start="1037:16" pos:end="1037:25">poll_entry</name><operator pos:start="1037:26" pos:end="1037:27">-&gt;</operator><name pos:start="1037:28" pos:end="1037:34">revents</name></name> <operator pos:start="1037:36" pos:end="1037:36">&amp;</operator> <operator pos:start="1037:38" pos:end="1037:38">(</operator><name pos:start="1037:39" pos:end="1037:45">POLLERR</name> <operator pos:start="1037:47" pos:end="1037:47">|</operator> <name pos:start="1037:49" pos:end="1037:55">POLLHUP</name><operator pos:start="1037:56" pos:end="1037:56">)</operator></expr>)</condition><block type="pseudo" pos:start="1038:13" pos:end="1038:22"><block_content pos:start="1038:13" pos:end="1038:22">
            <return pos:start="1038:13" pos:end="1038:22">return <expr pos:start="1038:20" pos:end="1038:21"><operator pos:start="1038:20" pos:end="1038:20">-</operator><literal type="number" pos:start="1038:21" pos:end="1038:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block" pos:start="1040:9" pos:end="1040:43">/* no need to write if no events */</comment>
        <if_stmt pos:start="1041:9" pos:end="1042:21"><if pos:start="1041:9" pos:end="1042:21">if <condition pos:start="1041:12" pos:end="1041:48">(<expr pos:start="1041:13" pos:end="1041:47"><operator pos:start="1041:13" pos:end="1041:13">!</operator><operator pos:start="1041:14" pos:end="1041:14">(</operator><name pos:start="1041:15" pos:end="1041:36"><name pos:start="1041:15" pos:end="1041:15">c</name><operator pos:start="1041:16" pos:end="1041:17">-&gt;</operator><name pos:start="1041:18" pos:end="1041:27">poll_entry</name><operator pos:start="1041:28" pos:end="1041:29">-&gt;</operator><name pos:start="1041:30" pos:end="1041:36">revents</name></name> <operator pos:start="1041:38" pos:end="1041:38">&amp;</operator> <name pos:start="1041:40" pos:end="1041:46">POLLOUT</name><operator pos:start="1041:47" pos:end="1041:47">)</operator></expr>)</condition><block type="pseudo" pos:start="1042:13" pos:end="1042:21"><block_content pos:start="1042:13" pos:end="1042:21">
            <return pos:start="1042:13" pos:end="1042:21">return <expr pos:start="1042:20" pos:end="1042:20"><literal type="number" pos:start="1042:20" pos:end="1042:20">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1043:9" pos:end="1043:75"><expr pos:start="1043:9" pos:end="1043:74"><name pos:start="1043:9" pos:end="1043:11">len</name> <operator pos:start="1043:13" pos:end="1043:13">=</operator> <call pos:start="1043:15" pos:end="1043:74"><name pos:start="1043:15" pos:end="1043:18">send</name><argument_list pos:start="1043:19" pos:end="1043:74">(<argument pos:start="1043:20" pos:end="1043:24"><expr pos:start="1043:20" pos:end="1043:24"><name pos:start="1043:20" pos:end="1043:24"><name pos:start="1043:20" pos:end="1043:20">c</name><operator pos:start="1043:21" pos:end="1043:22">-&gt;</operator><name pos:start="1043:23" pos:end="1043:24">fd</name></name></expr></argument>, <argument pos:start="1043:27" pos:end="1043:39"><expr pos:start="1043:27" pos:end="1043:39"><name pos:start="1043:27" pos:end="1043:39"><name pos:start="1043:27" pos:end="1043:27">c</name><operator pos:start="1043:28" pos:end="1043:29">-&gt;</operator><name pos:start="1043:30" pos:end="1043:39">buffer_ptr</name></name></expr></argument>, <argument pos:start="1043:42" pos:end="1043:70"><expr pos:start="1043:42" pos:end="1043:70"><name pos:start="1043:42" pos:end="1043:54"><name pos:start="1043:42" pos:end="1043:42">c</name><operator pos:start="1043:43" pos:end="1043:44">-&gt;</operator><name pos:start="1043:45" pos:end="1043:54">buffer_end</name></name> <operator pos:start="1043:56" pos:end="1043:56">-</operator> <name pos:start="1043:58" pos:end="1043:70"><name pos:start="1043:58" pos:end="1043:58">c</name><operator pos:start="1043:59" pos:end="1043:60">-&gt;</operator><name pos:start="1043:61" pos:end="1043:70">buffer_ptr</name></name></expr></argument>, <argument pos:start="1043:73" pos:end="1043:73"><expr pos:start="1043:73" pos:end="1043:73"><literal type="number" pos:start="1043:73" pos:end="1043:73">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1044:9" pos:end="1051:9"><if pos:start="1044:9" pos:end="1051:9">if <condition pos:start="1044:12" pos:end="1044:20">(<expr pos:start="1044:13" pos:end="1044:19"><name pos:start="1044:13" pos:end="1044:15">len</name> <operator pos:start="1044:17" pos:end="1044:17">&lt;</operator> <literal type="number" pos:start="1044:19" pos:end="1044:19">0</literal></expr>)</condition> <block pos:start="1044:22" pos:end="1051:9">{<block_content pos:start="1045:13" pos:end="1050:18">
            <if_stmt pos:start="1045:13" pos:end="1049:14"><if pos:start="1045:13" pos:end="1049:14">if <condition pos:start="1045:16" pos:end="1045:50">(<expr pos:start="1045:17" pos:end="1045:48"><call pos:start="1045:17" pos:end="1045:29"><name pos:start="1045:17" pos:end="1045:27">ff_neterrno</name><argument_list pos:start="1045:28" pos:end="1045:29">()</argument_list></call> <operator pos:start="1045:31" pos:end="1045:32">!=</operator> <call pos:start="1045:34" pos:end="1045:48"><name pos:start="1045:34" pos:end="1045:40">AVERROR</name><argument_list pos:start="1045:41" pos:end="1045:48">(<argument pos:start="1045:42" pos:end="1045:47"><expr pos:start="1045:42" pos:end="1045:47"><name pos:start="1045:42" pos:end="1045:47">EAGAIN</name></expr></argument>)</argument_list></call></expr> )</condition><block pos:start="1045:51" pos:end="1049:14">{<block_content pos:start="1046:1" pos:end="1049:13">
<if_stmt pos:start="1046:1" pos:end="1049:13"><if pos:start="1046:1" pos:end="1049:13">if<condition pos:start="1046:3" pos:end="1047:48">(
                <expr pos:start="1047:17" pos:end="1047:47"><call pos:start="1047:17" pos:end="1047:29"><name pos:start="1047:17" pos:end="1047:27">ff_neterrno</name><argument_list pos:start="1047:28" pos:end="1047:29">()</argument_list></call> <operator pos:start="1047:31" pos:end="1047:32">!=</operator> <call pos:start="1047:34" pos:end="1047:47"><name pos:start="1047:34" pos:end="1047:40">AVERROR</name><argument_list pos:start="1047:41" pos:end="1047:47">(<argument pos:start="1047:42" pos:end="1047:46"><expr pos:start="1047:42" pos:end="1047:46"><name pos:start="1047:42" pos:end="1047:46">EINTR</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1047:50" pos:end="1049:13">{<block_content pos:start="1048:17" pos:end="1048:38">
                <goto pos:start="1048:17" pos:end="1048:38">goto <name pos:start="1048:22" pos:end="1048:37">close_connection</name>;</goto>
            </block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt>
            <break pos:start="1050:13" pos:end="1050:18">break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="1052:9" pos:end="1052:29"><expr pos:start="1052:9" pos:end="1052:28"><name pos:start="1052:9" pos:end="1052:21"><name pos:start="1052:9" pos:end="1052:9">c</name><operator pos:start="1052:10" pos:end="1052:11">-&gt;</operator><name pos:start="1052:12" pos:end="1052:21">buffer_ptr</name></name> <operator pos:start="1052:23" pos:end="1052:24">+=</operator> <name pos:start="1052:26" pos:end="1052:28">len</name></expr>;</expr_stmt>
        <if_stmt pos:start="1053:9" pos:end="1054:43"><if pos:start="1053:9" pos:end="1054:43">if <condition pos:start="1053:12" pos:end="1053:22">(<expr pos:start="1053:13" pos:end="1053:21"><name pos:start="1053:13" pos:end="1053:21"><name pos:start="1053:13" pos:end="1053:13">c</name><operator pos:start="1053:14" pos:end="1053:15">-&gt;</operator><name pos:start="1053:16" pos:end="1053:21">stream</name></name></expr>)</condition><block type="pseudo" pos:start="1054:13" pos:end="1054:43"><block_content pos:start="1054:13" pos:end="1054:43">
            <expr_stmt pos:start="1054:13" pos:end="1054:43"><expr pos:start="1054:13" pos:end="1054:42"><name pos:start="1054:13" pos:end="1054:35"><name pos:start="1054:13" pos:end="1054:13">c</name><operator pos:start="1054:14" pos:end="1054:15">-&gt;</operator><name pos:start="1054:16" pos:end="1054:21">stream</name><operator pos:start="1054:22" pos:end="1054:23">-&gt;</operator><name pos:start="1054:24" pos:end="1054:35">bytes_served</name></name> <operator pos:start="1054:37" pos:end="1054:38">+=</operator> <name pos:start="1054:40" pos:end="1054:42">len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1055:9" pos:end="1055:29"><expr pos:start="1055:9" pos:end="1055:28"><name pos:start="1055:9" pos:end="1055:21"><name pos:start="1055:9" pos:end="1055:9">c</name><operator pos:start="1055:10" pos:end="1055:11">-&gt;</operator><name pos:start="1055:12" pos:end="1055:21">data_count</name></name> <operator pos:start="1055:23" pos:end="1055:24">+=</operator> <name pos:start="1055:26" pos:end="1055:28">len</name></expr>;</expr_stmt>
        <if_stmt pos:start="1056:9" pos:end="1065:9"><if pos:start="1056:9" pos:end="1065:9">if <condition pos:start="1056:12" pos:end="1056:43">(<expr pos:start="1056:13" pos:end="1056:42"><name pos:start="1056:13" pos:end="1056:25"><name pos:start="1056:13" pos:end="1056:13">c</name><operator pos:start="1056:14" pos:end="1056:15">-&gt;</operator><name pos:start="1056:16" pos:end="1056:25">buffer_ptr</name></name> <operator pos:start="1056:27" pos:end="1056:28">&gt;=</operator> <name pos:start="1056:30" pos:end="1056:42"><name pos:start="1056:30" pos:end="1056:30">c</name><operator pos:start="1056:31" pos:end="1056:32">-&gt;</operator><name pos:start="1056:33" pos:end="1056:42">buffer_end</name></name></expr>)</condition> <block pos:start="1056:45" pos:end="1065:9">{<block_content pos:start="1057:13" pos:end="1064:54">
            <expr_stmt pos:start="1057:13" pos:end="1057:36"><expr pos:start="1057:13" pos:end="1057:35"><call pos:start="1057:13" pos:end="1057:35"><name pos:start="1057:13" pos:end="1057:20">av_freep</name><argument_list pos:start="1057:21" pos:end="1057:35">(<argument pos:start="1057:22" pos:end="1057:34"><expr pos:start="1057:22" pos:end="1057:34"><operator pos:start="1057:22" pos:end="1057:22">&amp;</operator><name pos:start="1057:23" pos:end="1057:34"><name pos:start="1057:23" pos:end="1057:23">c</name><operator pos:start="1057:24" pos:end="1057:25">-&gt;</operator><name pos:start="1057:26" pos:end="1057:34">pb_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="1058:13" pos:end="1058:32">/* if error, exit */</comment>
            <if_stmt pos:start="1059:13" pos:end="1060:26"><if pos:start="1059:13" pos:end="1060:26">if <condition pos:start="1059:16" pos:end="1059:30">(<expr pos:start="1059:17" pos:end="1059:29"><name pos:start="1059:17" pos:end="1059:29"><name pos:start="1059:17" pos:end="1059:17">c</name><operator pos:start="1059:18" pos:end="1059:19">-&gt;</operator><name pos:start="1059:20" pos:end="1059:29">http_error</name></name></expr>)</condition><block type="pseudo" pos:start="1060:17" pos:end="1060:26"><block_content pos:start="1060:17" pos:end="1060:26">
                <return pos:start="1060:17" pos:end="1060:26">return <expr pos:start="1060:24" pos:end="1060:25"><operator pos:start="1060:24" pos:end="1060:24">-</operator><literal type="number" pos:start="1060:25" pos:end="1060:25">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <comment type="block" pos:start="1061:13" pos:end="1062:24">/* all the buffer was sent : synchronize to the incoming
             * stream */</comment>
            <expr_stmt pos:start="1063:13" pos:end="1063:50"><expr pos:start="1063:13" pos:end="1063:49"><name pos:start="1063:13" pos:end="1063:20"><name pos:start="1063:13" pos:end="1063:13">c</name><operator pos:start="1063:14" pos:end="1063:15">-&gt;</operator><name pos:start="1063:16" pos:end="1063:20">state</name></name> <operator pos:start="1063:22" pos:end="1063:22">=</operator> <name pos:start="1063:24" pos:end="1063:49">HTTPSTATE_SEND_DATA_HEADER</name></expr>;</expr_stmt>
            <expr_stmt pos:start="1064:13" pos:end="1064:54"><expr pos:start="1064:13" pos:end="1064:53"><name pos:start="1064:13" pos:end="1064:25"><name pos:start="1064:13" pos:end="1064:13">c</name><operator pos:start="1064:14" pos:end="1064:15">-&gt;</operator><name pos:start="1064:16" pos:end="1064:25">buffer_ptr</name></name> <operator pos:start="1064:27" pos:end="1064:27">=</operator> <name pos:start="1064:29" pos:end="1064:41"><name pos:start="1064:29" pos:end="1064:29">c</name><operator pos:start="1064:30" pos:end="1064:31">-&gt;</operator><name pos:start="1064:32" pos:end="1064:41">buffer_end</name></name> <operator pos:start="1064:43" pos:end="1064:43">=</operator> <name pos:start="1064:45" pos:end="1064:53"><name pos:start="1064:45" pos:end="1064:45">c</name><operator pos:start="1064:46" pos:end="1064:47">-&gt;</operator><name pos:start="1064:48" pos:end="1064:53">buffer</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break pos:start="1066:9" pos:end="1066:14">break;</break>

    <case pos:start="1068:5" pos:end="1068:29">case <expr pos:start="1068:10" pos:end="1068:28"><name pos:start="1068:10" pos:end="1068:28">HTTPSTATE_SEND_DATA</name></expr>:</case>
    <case pos:start="1069:5" pos:end="1069:36">case <expr pos:start="1069:10" pos:end="1069:35"><name pos:start="1069:10" pos:end="1069:35">HTTPSTATE_SEND_DATA_HEADER</name></expr>:</case>
    <case pos:start="1070:5" pos:end="1070:37">case <expr pos:start="1070:10" pos:end="1070:36"><name pos:start="1070:10" pos:end="1070:36">HTTPSTATE_SEND_DATA_TRAILER</name></expr>:</case>
        <comment type="block" pos:start="1071:9" pos:end="1073:63">/* for packetized output, we consider we can always write (the
         * input streams set the speed). It may be better to verify
         * that we do not rely too much on the kernel queues */</comment>
        <if_stmt pos:start="1074:9" pos:end="1081:9"><if pos:start="1074:9" pos:end="1081:9">if <condition pos:start="1074:12" pos:end="1074:30">(<expr pos:start="1074:13" pos:end="1074:29"><operator pos:start="1074:13" pos:end="1074:13">!</operator><name pos:start="1074:14" pos:end="1074:29"><name pos:start="1074:14" pos:end="1074:14">c</name><operator pos:start="1074:15" pos:end="1074:16">-&gt;</operator><name pos:start="1074:17" pos:end="1074:29">is_packetized</name></name></expr>)</condition> <block pos:start="1074:32" pos:end="1081:9">{<block_content pos:start="1075:13" pos:end="1080:25">
            <if_stmt pos:start="1075:13" pos:end="1076:26"><if pos:start="1075:13" pos:end="1076:26">if <condition pos:start="1075:16" pos:end="1075:61">(<expr pos:start="1075:17" pos:end="1075:60"><name pos:start="1075:17" pos:end="1075:38"><name pos:start="1075:17" pos:end="1075:17">c</name><operator pos:start="1075:18" pos:end="1075:19">-&gt;</operator><name pos:start="1075:20" pos:end="1075:29">poll_entry</name><operator pos:start="1075:30" pos:end="1075:31">-&gt;</operator><name pos:start="1075:32" pos:end="1075:38">revents</name></name> <operator pos:start="1075:40" pos:end="1075:40">&amp;</operator> <operator pos:start="1075:42" pos:end="1075:42">(</operator><name pos:start="1075:43" pos:end="1075:49">POLLERR</name> <operator pos:start="1075:51" pos:end="1075:51">|</operator> <name pos:start="1075:53" pos:end="1075:59">POLLHUP</name><operator pos:start="1075:60" pos:end="1075:60">)</operator></expr>)</condition><block type="pseudo" pos:start="1076:17" pos:end="1076:26"><block_content pos:start="1076:17" pos:end="1076:26">
                <return pos:start="1076:17" pos:end="1076:26">return <expr pos:start="1076:24" pos:end="1076:25"><operator pos:start="1076:24" pos:end="1076:24">-</operator><literal type="number" pos:start="1076:25" pos:end="1076:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <comment type="block" pos:start="1078:13" pos:end="1078:46">/* no need to read if no events */</comment>
            <if_stmt pos:start="1079:13" pos:end="1080:25"><if pos:start="1079:13" pos:end="1080:25">if <condition pos:start="1079:16" pos:end="1079:52">(<expr pos:start="1079:17" pos:end="1079:51"><operator pos:start="1079:17" pos:end="1079:17">!</operator><operator pos:start="1079:18" pos:end="1079:18">(</operator><name pos:start="1079:19" pos:end="1079:40"><name pos:start="1079:19" pos:end="1079:19">c</name><operator pos:start="1079:20" pos:end="1079:21">-&gt;</operator><name pos:start="1079:22" pos:end="1079:31">poll_entry</name><operator pos:start="1079:32" pos:end="1079:33">-&gt;</operator><name pos:start="1079:34" pos:end="1079:40">revents</name></name> <operator pos:start="1079:42" pos:end="1079:42">&amp;</operator> <name pos:start="1079:44" pos:end="1079:50">POLLOUT</name><operator pos:start="1079:51" pos:end="1079:51">)</operator></expr>)</condition><block type="pseudo" pos:start="1080:17" pos:end="1080:25"><block_content pos:start="1080:17" pos:end="1080:25">
                <return pos:start="1080:17" pos:end="1080:25">return <expr pos:start="1080:24" pos:end="1080:24"><literal type="number" pos:start="1080:24" pos:end="1080:24">0</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="1082:9" pos:end="1083:22"><if pos:start="1082:9" pos:end="1083:22">if <condition pos:start="1082:12" pos:end="1082:34">(<expr pos:start="1082:13" pos:end="1082:33"><call pos:start="1082:13" pos:end="1082:29"><name pos:start="1082:13" pos:end="1082:26">http_send_data</name><argument_list pos:start="1082:27" pos:end="1082:29">(<argument pos:start="1082:28" pos:end="1082:28"><expr pos:start="1082:28" pos:end="1082:28"><name pos:start="1082:28" pos:end="1082:28">c</name></expr></argument>)</argument_list></call> <operator pos:start="1082:31" pos:end="1082:31">&lt;</operator> <literal type="number" pos:start="1082:33" pos:end="1082:33">0</literal></expr>)</condition><block type="pseudo" pos:start="1083:13" pos:end="1083:22"><block_content pos:start="1083:13" pos:end="1083:22">
            <return pos:start="1083:13" pos:end="1083:22">return <expr pos:start="1083:20" pos:end="1083:21"><operator pos:start="1083:20" pos:end="1083:20">-</operator><literal type="number" pos:start="1083:21" pos:end="1083:21">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <comment type="block" pos:start="1084:9" pos:end="1084:46">/* close connection if trailer sent */</comment>
        <if_stmt pos:start="1085:9" pos:end="1086:22"><if pos:start="1085:9" pos:end="1086:22">if <condition pos:start="1085:12" pos:end="1085:52">(<expr pos:start="1085:13" pos:end="1085:51"><name pos:start="1085:13" pos:end="1085:20"><name pos:start="1085:13" pos:end="1085:13">c</name><operator pos:start="1085:14" pos:end="1085:15">-&gt;</operator><name pos:start="1085:16" pos:end="1085:20">state</name></name> <operator pos:start="1085:22" pos:end="1085:23">==</operator> <name pos:start="1085:25" pos:end="1085:51">HTTPSTATE_SEND_DATA_TRAILER</name></expr>)</condition><block type="pseudo" pos:start="1086:13" pos:end="1086:22"><block_content pos:start="1086:13" pos:end="1086:22">
            <return pos:start="1086:13" pos:end="1086:22">return <expr pos:start="1086:20" pos:end="1086:21"><operator pos:start="1086:20" pos:end="1086:20">-</operator><literal type="number" pos:start="1086:21" pos:end="1086:21">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <comment type="block" pos:start="1087:9" pos:end="1087:52">/* Check if it is a single jpeg frame 123 */</comment>
        <if_stmt pos:start="1088:9" pos:end="1092:11"><if pos:start="1088:9" pos:end="1092:11">if <condition pos:start="1088:12" pos:end="1088:37">(<expr pos:start="1088:13" pos:end="1088:35"><name pos:start="1088:13" pos:end="1088:35"><name pos:start="1088:13" pos:end="1088:13">c</name><operator pos:start="1088:14" pos:end="1088:15">-&gt;</operator><name pos:start="1088:16" pos:end="1088:21">stream</name><operator pos:start="1088:22" pos:end="1088:23">-&gt;</operator><name pos:start="1088:24" pos:end="1088:35">single_frame</name></name></expr> )</condition><block pos:start="1088:38" pos:end="1092:11">{<block_content pos:start="1089:1" pos:end="1092:10">
<if_stmt pos:start="1089:1" pos:end="1092:10"><if pos:start="1089:1" pos:end="1092:10">if<condition pos:start="1089:3" pos:end="1089:40">( <expr pos:start="1089:5" pos:end="1089:38"><name pos:start="1089:5" pos:end="1089:17"><name pos:start="1089:5" pos:end="1089:5">c</name><operator pos:start="1089:6" pos:end="1089:7">-&gt;</operator><name pos:start="1089:8" pos:end="1089:17">data_count</name></name> <operator pos:start="1089:19" pos:end="1089:19">&gt;</operator> <name pos:start="1089:21" pos:end="1089:38"><name pos:start="1089:21" pos:end="1089:21">c</name><operator pos:start="1089:22" pos:end="1089:23">-&gt;</operator><name pos:start="1089:24" pos:end="1089:38">cur_frame_bytes</name></name></expr> )</condition><block pos:start="1089:41" pos:end="1092:10">{<block_content pos:start="1090:1" pos:end="1092:9">
<if_stmt pos:start="1090:1" pos:end="1092:9"><if pos:start="1090:1" pos:end="1092:9">if<condition pos:start="1090:3" pos:end="1090:27">( <expr pos:start="1090:5" pos:end="1090:26"><name pos:start="1090:5" pos:end="1090:22"><name pos:start="1090:5" pos:end="1090:5">c</name><operator pos:start="1090:6" pos:end="1090:7">-&gt;</operator><name pos:start="1090:8" pos:end="1090:22">cur_frame_bytes</name></name> <operator pos:start="1090:24" pos:end="1090:24">&gt;</operator> <literal type="number" pos:start="1090:26" pos:end="1090:26">0</literal></expr>)</condition> <block pos:start="1090:29" pos:end="1092:9">{<block_content pos:start="1091:13" pos:end="1091:32">
            <expr_stmt pos:start="1091:13" pos:end="1091:32"><expr pos:start="1091:13" pos:end="1091:31"><call pos:start="1091:13" pos:end="1091:31"><name pos:start="1091:13" pos:end="1091:28">close_connection</name><argument_list pos:start="1091:29" pos:end="1091:31">(<argument pos:start="1091:30" pos:end="1091:30"><expr pos:start="1091:30" pos:end="1091:30"><name pos:start="1091:30" pos:end="1091:30">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt>
        <break pos:start="1093:9" pos:end="1093:14">break;</break>
    <case pos:start="1094:5" pos:end="1094:32">case <expr pos:start="1094:10" pos:end="1094:31"><name pos:start="1094:10" pos:end="1094:31">HTTPSTATE_RECEIVE_DATA</name></expr>:</case>
        <comment type="block" pos:start="1095:9" pos:end="1095:42">/* no need to read if no events */</comment>
        <if_stmt pos:start="1096:9" pos:end="1097:22"><if pos:start="1096:9" pos:end="1097:22">if <condition pos:start="1096:12" pos:end="1096:57">(<expr pos:start="1096:13" pos:end="1096:56"><name pos:start="1096:13" pos:end="1096:34"><name pos:start="1096:13" pos:end="1096:13">c</name><operator pos:start="1096:14" pos:end="1096:15">-&gt;</operator><name pos:start="1096:16" pos:end="1096:25">poll_entry</name><operator pos:start="1096:26" pos:end="1096:27">-&gt;</operator><name pos:start="1096:28" pos:end="1096:34">revents</name></name> <operator pos:start="1096:36" pos:end="1096:36">&amp;</operator> <operator pos:start="1096:38" pos:end="1096:38">(</operator><name pos:start="1096:39" pos:end="1096:45">POLLERR</name> <operator pos:start="1096:47" pos:end="1096:47">|</operator> <name pos:start="1096:49" pos:end="1096:55">POLLHUP</name><operator pos:start="1096:56" pos:end="1096:56">)</operator></expr>)</condition><block type="pseudo" pos:start="1097:13" pos:end="1097:22"><block_content pos:start="1097:13" pos:end="1097:22">
            <return pos:start="1097:13" pos:end="1097:22">return <expr pos:start="1097:20" pos:end="1097:21"><operator pos:start="1097:20" pos:end="1097:20">-</operator><literal type="number" pos:start="1097:21" pos:end="1097:21">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt pos:start="1098:9" pos:end="1099:21"><if pos:start="1098:9" pos:end="1099:21">if <condition pos:start="1098:12" pos:end="1098:47">(<expr pos:start="1098:13" pos:end="1098:46"><operator pos:start="1098:13" pos:end="1098:13">!</operator><operator pos:start="1098:14" pos:end="1098:14">(</operator><name pos:start="1098:15" pos:end="1098:36"><name pos:start="1098:15" pos:end="1098:15">c</name><operator pos:start="1098:16" pos:end="1098:17">-&gt;</operator><name pos:start="1098:18" pos:end="1098:27">poll_entry</name><operator pos:start="1098:28" pos:end="1098:29">-&gt;</operator><name pos:start="1098:30" pos:end="1098:36">revents</name></name> <operator pos:start="1098:38" pos:end="1098:38">&amp;</operator> <name pos:start="1098:40" pos:end="1098:45">POLLIN</name><operator pos:start="1098:46" pos:end="1098:46">)</operator></expr>)</condition><block type="pseudo" pos:start="1099:13" pos:end="1099:21"><block_content pos:start="1099:13" pos:end="1099:21">
            <return pos:start="1099:13" pos:end="1099:21">return <expr pos:start="1099:20" pos:end="1099:20"><literal type="number" pos:start="1099:20" pos:end="1099:20">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt pos:start="1100:9" pos:end="1101:22"><if pos:start="1100:9" pos:end="1101:22">if <condition pos:start="1100:12" pos:end="1100:37">(<expr pos:start="1100:13" pos:end="1100:36"><call pos:start="1100:13" pos:end="1100:32"><name pos:start="1100:13" pos:end="1100:29">http_receive_data</name><argument_list pos:start="1100:30" pos:end="1100:32">(<argument pos:start="1100:31" pos:end="1100:31"><expr pos:start="1100:31" pos:end="1100:31"><name pos:start="1100:31" pos:end="1100:31">c</name></expr></argument>)</argument_list></call> <operator pos:start="1100:34" pos:end="1100:34">&lt;</operator> <literal type="number" pos:start="1100:36" pos:end="1100:36">0</literal></expr>)</condition><block type="pseudo" pos:start="1101:13" pos:end="1101:22"><block_content pos:start="1101:13" pos:end="1101:22">
            <return pos:start="1101:13" pos:end="1101:22">return <expr pos:start="1101:20" pos:end="1101:21"><operator pos:start="1101:20" pos:end="1101:20">-</operator><literal type="number" pos:start="1101:21" pos:end="1101:21">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <break pos:start="1102:9" pos:end="1102:14">break;</break>
    <case pos:start="1103:5" pos:end="1103:29">case <expr pos:start="1103:10" pos:end="1103:28"><name pos:start="1103:10" pos:end="1103:28">HTTPSTATE_WAIT_FEED</name></expr>:</case>
        <comment type="block" pos:start="1104:9" pos:end="1104:42">/* no need to read if no events */</comment>
        <if_stmt pos:start="1105:9" pos:end="1106:22"><if pos:start="1105:9" pos:end="1106:22">if <condition pos:start="1105:12" pos:end="1105:66">(<expr pos:start="1105:13" pos:end="1105:65"><name pos:start="1105:13" pos:end="1105:34"><name pos:start="1105:13" pos:end="1105:13">c</name><operator pos:start="1105:14" pos:end="1105:15">-&gt;</operator><name pos:start="1105:16" pos:end="1105:25">poll_entry</name><operator pos:start="1105:26" pos:end="1105:27">-&gt;</operator><name pos:start="1105:28" pos:end="1105:34">revents</name></name> <operator pos:start="1105:36" pos:end="1105:36">&amp;</operator> <operator pos:start="1105:38" pos:end="1105:38">(</operator><name pos:start="1105:39" pos:end="1105:44">POLLIN</name> <operator pos:start="1105:46" pos:end="1105:46">|</operator> <name pos:start="1105:48" pos:end="1105:54">POLLERR</name> <operator pos:start="1105:56" pos:end="1105:56">|</operator> <name pos:start="1105:58" pos:end="1105:64">POLLHUP</name><operator pos:start="1105:65" pos:end="1105:65">)</operator></expr>)</condition><block type="pseudo" pos:start="1106:13" pos:end="1106:22"><block_content pos:start="1106:13" pos:end="1106:22">
            <return pos:start="1106:13" pos:end="1106:22">return <expr pos:start="1106:20" pos:end="1106:21"><operator pos:start="1106:20" pos:end="1106:20">-</operator><literal type="number" pos:start="1106:21" pos:end="1106:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block" pos:start="1108:9" pos:end="1108:71">/* nothing to do, we'll be waken up by incoming feed packets */</comment>
        <break pos:start="1109:9" pos:end="1109:14">break;</break>

    <case pos:start="1111:5" pos:end="1111:30">case <expr pos:start="1111:10" pos:end="1111:29"><name pos:start="1111:10" pos:end="1111:29">RTSPSTATE_SEND_REPLY</name></expr>:</case>
        <if_stmt pos:start="1112:9" pos:end="1113:34"><if pos:start="1112:9" pos:end="1113:34">if <condition pos:start="1112:12" pos:end="1112:57">(<expr pos:start="1112:13" pos:end="1112:56"><name pos:start="1112:13" pos:end="1112:34"><name pos:start="1112:13" pos:end="1112:13">c</name><operator pos:start="1112:14" pos:end="1112:15">-&gt;</operator><name pos:start="1112:16" pos:end="1112:25">poll_entry</name><operator pos:start="1112:26" pos:end="1112:27">-&gt;</operator><name pos:start="1112:28" pos:end="1112:34">revents</name></name> <operator pos:start="1112:36" pos:end="1112:36">&amp;</operator> <operator pos:start="1112:38" pos:end="1112:38">(</operator><name pos:start="1112:39" pos:end="1112:45">POLLERR</name> <operator pos:start="1112:47" pos:end="1112:47">|</operator> <name pos:start="1112:49" pos:end="1112:55">POLLHUP</name><operator pos:start="1112:56" pos:end="1112:56">)</operator></expr>)</condition><block type="pseudo" pos:start="1113:13" pos:end="1113:34"><block_content pos:start="1113:13" pos:end="1113:34">
            <goto pos:start="1113:13" pos:end="1113:34">goto <name pos:start="1113:18" pos:end="1113:33">close_connection</name>;</goto></block_content></block></if></if_stmt>
        <comment type="block" pos:start="1114:9" pos:end="1114:43">/* no need to write if no events */</comment>
        <if_stmt pos:start="1115:9" pos:end="1116:21"><if pos:start="1115:9" pos:end="1116:21">if <condition pos:start="1115:12" pos:end="1115:48">(<expr pos:start="1115:13" pos:end="1115:47"><operator pos:start="1115:13" pos:end="1115:13">!</operator><operator pos:start="1115:14" pos:end="1115:14">(</operator><name pos:start="1115:15" pos:end="1115:36"><name pos:start="1115:15" pos:end="1115:15">c</name><operator pos:start="1115:16" pos:end="1115:17">-&gt;</operator><name pos:start="1115:18" pos:end="1115:27">poll_entry</name><operator pos:start="1115:28" pos:end="1115:29">-&gt;</operator><name pos:start="1115:30" pos:end="1115:36">revents</name></name> <operator pos:start="1115:38" pos:end="1115:38">&amp;</operator> <name pos:start="1115:40" pos:end="1115:46">POLLOUT</name><operator pos:start="1115:47" pos:end="1115:47">)</operator></expr>)</condition><block type="pseudo" pos:start="1116:13" pos:end="1116:21"><block_content pos:start="1116:13" pos:end="1116:21">
            <return pos:start="1116:13" pos:end="1116:21">return <expr pos:start="1116:20" pos:end="1116:20"><literal type="number" pos:start="1116:20" pos:end="1116:20">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1117:9" pos:end="1117:75"><expr pos:start="1117:9" pos:end="1117:74"><name pos:start="1117:9" pos:end="1117:11">len</name> <operator pos:start="1117:13" pos:end="1117:13">=</operator> <call pos:start="1117:15" pos:end="1117:74"><name pos:start="1117:15" pos:end="1117:18">send</name><argument_list pos:start="1117:19" pos:end="1117:74">(<argument pos:start="1117:20" pos:end="1117:24"><expr pos:start="1117:20" pos:end="1117:24"><name pos:start="1117:20" pos:end="1117:24"><name pos:start="1117:20" pos:end="1117:20">c</name><operator pos:start="1117:21" pos:end="1117:22">-&gt;</operator><name pos:start="1117:23" pos:end="1117:24">fd</name></name></expr></argument>, <argument pos:start="1117:27" pos:end="1117:39"><expr pos:start="1117:27" pos:end="1117:39"><name pos:start="1117:27" pos:end="1117:39"><name pos:start="1117:27" pos:end="1117:27">c</name><operator pos:start="1117:28" pos:end="1117:29">-&gt;</operator><name pos:start="1117:30" pos:end="1117:39">buffer_ptr</name></name></expr></argument>, <argument pos:start="1117:42" pos:end="1117:70"><expr pos:start="1117:42" pos:end="1117:70"><name pos:start="1117:42" pos:end="1117:54"><name pos:start="1117:42" pos:end="1117:42">c</name><operator pos:start="1117:43" pos:end="1117:44">-&gt;</operator><name pos:start="1117:45" pos:end="1117:54">buffer_end</name></name> <operator pos:start="1117:56" pos:end="1117:56">-</operator> <name pos:start="1117:58" pos:end="1117:70"><name pos:start="1117:58" pos:end="1117:58">c</name><operator pos:start="1117:59" pos:end="1117:60">-&gt;</operator><name pos:start="1117:61" pos:end="1117:70">buffer_ptr</name></name></expr></argument>, <argument pos:start="1117:73" pos:end="1117:73"><expr pos:start="1117:73" pos:end="1117:73"><literal type="number" pos:start="1117:73" pos:end="1117:73">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1118:9" pos:end="1125:9"><if pos:start="1118:9" pos:end="1125:9">if <condition pos:start="1118:12" pos:end="1118:20">(<expr pos:start="1118:13" pos:end="1118:19"><name pos:start="1118:13" pos:end="1118:15">len</name> <operator pos:start="1118:17" pos:end="1118:17">&lt;</operator> <literal type="number" pos:start="1118:19" pos:end="1118:19">0</literal></expr>)</condition> <block pos:start="1118:22" pos:end="1125:9">{<block_content pos:start="1119:13" pos:end="1124:18">
            <if_stmt pos:start="1119:13" pos:end="1123:14"><if pos:start="1119:13" pos:end="1123:14">if <condition pos:start="1119:16" pos:end="1119:50">(<expr pos:start="1119:17" pos:end="1119:48"><call pos:start="1119:17" pos:end="1119:29"><name pos:start="1119:17" pos:end="1119:27">ff_neterrno</name><argument_list pos:start="1119:28" pos:end="1119:29">()</argument_list></call> <operator pos:start="1119:31" pos:end="1119:32">!=</operator> <call pos:start="1119:34" pos:end="1119:48"><name pos:start="1119:34" pos:end="1119:40">AVERROR</name><argument_list pos:start="1119:41" pos:end="1119:48">(<argument pos:start="1119:42" pos:end="1119:47"><expr pos:start="1119:42" pos:end="1119:47"><name pos:start="1119:42" pos:end="1119:47">EAGAIN</name></expr></argument>)</argument_list></call></expr> )</condition><block pos:start="1119:51" pos:end="1123:14">{<block_content pos:start="1120:1" pos:end="1123:13">
<if_stmt pos:start="1120:1" pos:end="1123:13"><if pos:start="1120:1" pos:end="1123:13">if<condition pos:start="1120:3" pos:end="1121:48">(
                <expr pos:start="1121:17" pos:end="1121:47"><call pos:start="1121:17" pos:end="1121:29"><name pos:start="1121:17" pos:end="1121:27">ff_neterrno</name><argument_list pos:start="1121:28" pos:end="1121:29">()</argument_list></call> <operator pos:start="1121:31" pos:end="1121:32">!=</operator> <call pos:start="1121:34" pos:end="1121:47"><name pos:start="1121:34" pos:end="1121:40">AVERROR</name><argument_list pos:start="1121:41" pos:end="1121:47">(<argument pos:start="1121:42" pos:end="1121:46"><expr pos:start="1121:42" pos:end="1121:46"><name pos:start="1121:42" pos:end="1121:46">EINTR</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1121:50" pos:end="1123:13">{<block_content pos:start="1122:17" pos:end="1122:38">
                <goto pos:start="1122:17" pos:end="1122:38">goto <name pos:start="1122:22" pos:end="1122:37">close_connection</name>;</goto>
            </block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt>
            <break pos:start="1124:13" pos:end="1124:18">break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="1126:9" pos:end="1126:29"><expr pos:start="1126:9" pos:end="1126:28"><name pos:start="1126:9" pos:end="1126:21"><name pos:start="1126:9" pos:end="1126:9">c</name><operator pos:start="1126:10" pos:end="1126:11">-&gt;</operator><name pos:start="1126:12" pos:end="1126:21">buffer_ptr</name></name> <operator pos:start="1126:23" pos:end="1126:24">+=</operator> <name pos:start="1126:26" pos:end="1126:28">len</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1127:9" pos:end="1127:29"><expr pos:start="1127:9" pos:end="1127:28"><name pos:start="1127:9" pos:end="1127:21"><name pos:start="1127:9" pos:end="1127:9">c</name><operator pos:start="1127:10" pos:end="1127:11">-&gt;</operator><name pos:start="1127:12" pos:end="1127:21">data_count</name></name> <operator pos:start="1127:23" pos:end="1127:24">+=</operator> <name pos:start="1127:26" pos:end="1127:28">len</name></expr>;</expr_stmt>
        <if_stmt pos:start="1128:9" pos:end="1132:9"><if pos:start="1128:9" pos:end="1132:9">if <condition pos:start="1128:12" pos:end="1128:43">(<expr pos:start="1128:13" pos:end="1128:42"><name pos:start="1128:13" pos:end="1128:25"><name pos:start="1128:13" pos:end="1128:13">c</name><operator pos:start="1128:14" pos:end="1128:15">-&gt;</operator><name pos:start="1128:16" pos:end="1128:25">buffer_ptr</name></name> <operator pos:start="1128:27" pos:end="1128:28">&gt;=</operator> <name pos:start="1128:30" pos:end="1128:42"><name pos:start="1128:30" pos:end="1128:30">c</name><operator pos:start="1128:31" pos:end="1128:32">-&gt;</operator><name pos:start="1128:33" pos:end="1128:42">buffer_end</name></name></expr>)</condition> <block pos:start="1128:45" pos:end="1132:9">{<block_content pos:start="1130:13" pos:end="1131:37">
            <comment type="block" pos:start="1129:13" pos:end="1129:66">/* all the buffer was sent : wait for a new request */</comment>
            <expr_stmt pos:start="1130:13" pos:end="1130:36"><expr pos:start="1130:13" pos:end="1130:35"><call pos:start="1130:13" pos:end="1130:35"><name pos:start="1130:13" pos:end="1130:20">av_freep</name><argument_list pos:start="1130:21" pos:end="1130:35">(<argument pos:start="1130:22" pos:end="1130:34"><expr pos:start="1130:22" pos:end="1130:34"><operator pos:start="1130:22" pos:end="1130:22">&amp;</operator><name pos:start="1130:23" pos:end="1130:34"><name pos:start="1130:23" pos:end="1130:23">c</name><operator pos:start="1130:24" pos:end="1130:25">-&gt;</operator><name pos:start="1130:26" pos:end="1130:34">pb_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1131:13" pos:end="1131:37"><expr pos:start="1131:13" pos:end="1131:36"><call pos:start="1131:13" pos:end="1131:36"><name pos:start="1131:13" pos:end="1131:30">start_wait_request</name><argument_list pos:start="1131:31" pos:end="1131:36">(<argument pos:start="1131:32" pos:end="1131:32"><expr pos:start="1131:32" pos:end="1131:32"><name pos:start="1131:32" pos:end="1131:32">c</name></expr></argument>, <argument pos:start="1131:35" pos:end="1131:35"><expr pos:start="1131:35" pos:end="1131:35"><literal type="number" pos:start="1131:35" pos:end="1131:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break pos:start="1133:9" pos:end="1133:14">break;</break>
    <case pos:start="1134:5" pos:end="1134:31">case <expr pos:start="1134:10" pos:end="1134:30"><name pos:start="1134:10" pos:end="1134:30">RTSPSTATE_SEND_PACKET</name></expr>:</case>
        <if_stmt pos:start="1135:9" pos:end="1138:9"><if pos:start="1135:9" pos:end="1138:9">if <condition pos:start="1135:12" pos:end="1135:57">(<expr pos:start="1135:13" pos:end="1135:56"><name pos:start="1135:13" pos:end="1135:34"><name pos:start="1135:13" pos:end="1135:13">c</name><operator pos:start="1135:14" pos:end="1135:15">-&gt;</operator><name pos:start="1135:16" pos:end="1135:25">poll_entry</name><operator pos:start="1135:26" pos:end="1135:27">-&gt;</operator><name pos:start="1135:28" pos:end="1135:34">revents</name></name> <operator pos:start="1135:36" pos:end="1135:36">&amp;</operator> <operator pos:start="1135:38" pos:end="1135:38">(</operator><name pos:start="1135:39" pos:end="1135:45">POLLERR</name> <operator pos:start="1135:47" pos:end="1135:47">|</operator> <name pos:start="1135:49" pos:end="1135:55">POLLHUP</name><operator pos:start="1135:56" pos:end="1135:56">)</operator></expr>)</condition> <block pos:start="1135:59" pos:end="1138:9">{<block_content pos:start="1136:13" pos:end="1137:22">
            <expr_stmt pos:start="1136:13" pos:end="1136:40"><expr pos:start="1136:13" pos:end="1136:39"><call pos:start="1136:13" pos:end="1136:39"><name pos:start="1136:13" pos:end="1136:20">av_freep</name><argument_list pos:start="1136:21" pos:end="1136:39">(<argument pos:start="1136:22" pos:end="1136:38"><expr pos:start="1136:22" pos:end="1136:38"><operator pos:start="1136:22" pos:end="1136:22">&amp;</operator><name pos:start="1136:23" pos:end="1136:38"><name pos:start="1136:23" pos:end="1136:23">c</name><operator pos:start="1136:24" pos:end="1136:25">-&gt;</operator><name pos:start="1136:26" pos:end="1136:38">packet_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1137:13" pos:end="1137:22">return <expr pos:start="1137:20" pos:end="1137:21"><operator pos:start="1137:20" pos:end="1137:20">-</operator><literal type="number" pos:start="1137:21" pos:end="1137:21">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="1139:9" pos:end="1139:43">/* no need to write if no events */</comment>
        <if_stmt pos:start="1140:9" pos:end="1141:21"><if pos:start="1140:9" pos:end="1141:21">if <condition pos:start="1140:12" pos:end="1140:48">(<expr pos:start="1140:13" pos:end="1140:47"><operator pos:start="1140:13" pos:end="1140:13">!</operator><operator pos:start="1140:14" pos:end="1140:14">(</operator><name pos:start="1140:15" pos:end="1140:36"><name pos:start="1140:15" pos:end="1140:15">c</name><operator pos:start="1140:16" pos:end="1140:17">-&gt;</operator><name pos:start="1140:18" pos:end="1140:27">poll_entry</name><operator pos:start="1140:28" pos:end="1140:29">-&gt;</operator><name pos:start="1140:30" pos:end="1140:36">revents</name></name> <operator pos:start="1140:38" pos:end="1140:38">&amp;</operator> <name pos:start="1140:40" pos:end="1140:46">POLLOUT</name><operator pos:start="1140:47" pos:end="1140:47">)</operator></expr>)</condition><block type="pseudo" pos:start="1141:13" pos:end="1141:21"><block_content pos:start="1141:13" pos:end="1141:21">
            <return pos:start="1141:13" pos:end="1141:21">return <expr pos:start="1141:20" pos:end="1141:20"><literal type="number" pos:start="1141:20" pos:end="1141:20">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1142:9" pos:end="1143:68"><expr pos:start="1142:9" pos:end="1143:67"><name pos:start="1142:9" pos:end="1142:11">len</name> <operator pos:start="1142:13" pos:end="1142:13">=</operator> <call pos:start="1142:15" pos:end="1143:67"><name pos:start="1142:15" pos:end="1142:18">send</name><argument_list pos:start="1142:19" pos:end="1143:67">(<argument pos:start="1142:20" pos:end="1142:24"><expr pos:start="1142:20" pos:end="1142:24"><name pos:start="1142:20" pos:end="1142:24"><name pos:start="1142:20" pos:end="1142:20">c</name><operator pos:start="1142:21" pos:end="1142:22">-&gt;</operator><name pos:start="1142:23" pos:end="1142:24">fd</name></name></expr></argument>, <argument pos:start="1142:27" pos:end="1142:46"><expr pos:start="1142:27" pos:end="1142:46"><name pos:start="1142:27" pos:end="1142:46"><name pos:start="1142:27" pos:end="1142:27">c</name><operator pos:start="1142:28" pos:end="1142:29">-&gt;</operator><name pos:start="1142:30" pos:end="1142:46">packet_buffer_ptr</name></name></expr></argument>,
                    <argument pos:start="1143:21" pos:end="1143:63"><expr pos:start="1143:21" pos:end="1143:63"><name pos:start="1143:21" pos:end="1143:40"><name pos:start="1143:21" pos:end="1143:21">c</name><operator pos:start="1143:22" pos:end="1143:23">-&gt;</operator><name pos:start="1143:24" pos:end="1143:40">packet_buffer_end</name></name> <operator pos:start="1143:42" pos:end="1143:42">-</operator> <name pos:start="1143:44" pos:end="1143:63"><name pos:start="1143:44" pos:end="1143:44">c</name><operator pos:start="1143:45" pos:end="1143:46">-&gt;</operator><name pos:start="1143:47" pos:end="1143:63">packet_buffer_ptr</name></name></expr></argument>, <argument pos:start="1143:66" pos:end="1143:66"><expr pos:start="1143:66" pos:end="1143:66"><literal type="number" pos:start="1143:66" pos:end="1143:66">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1144:9" pos:end="1153:9"><if pos:start="1144:9" pos:end="1153:9">if <condition pos:start="1144:12" pos:end="1144:20">(<expr pos:start="1144:13" pos:end="1144:19"><name pos:start="1144:13" pos:end="1144:15">len</name> <operator pos:start="1144:17" pos:end="1144:17">&lt;</operator> <literal type="number" pos:start="1144:19" pos:end="1144:19">0</literal></expr>)</condition> <block pos:start="1144:22" pos:end="1153:9">{<block_content pos:start="1145:13" pos:end="1152:18">
            <if_stmt pos:start="1145:13" pos:end="1151:14"><if pos:start="1145:13" pos:end="1151:14">if <condition pos:start="1145:16" pos:end="1145:50">(<expr pos:start="1145:17" pos:end="1145:48"><call pos:start="1145:17" pos:end="1145:29"><name pos:start="1145:17" pos:end="1145:27">ff_neterrno</name><argument_list pos:start="1145:28" pos:end="1145:29">()</argument_list></call> <operator pos:start="1145:31" pos:end="1145:32">!=</operator> <call pos:start="1145:34" pos:end="1145:48"><name pos:start="1145:34" pos:end="1145:40">AVERROR</name><argument_list pos:start="1145:41" pos:end="1145:48">(<argument pos:start="1145:42" pos:end="1145:47"><expr pos:start="1145:42" pos:end="1145:47"><name pos:start="1145:42" pos:end="1145:47">EAGAIN</name></expr></argument>)</argument_list></call></expr> )</condition><block pos:start="1145:51" pos:end="1151:14">{<block_content pos:start="1146:1" pos:end="1151:13">
<if_stmt pos:start="1146:1" pos:end="1151:13"><if pos:start="1146:1" pos:end="1151:13">if<condition pos:start="1146:3" pos:end="1147:48">(
                <expr pos:start="1147:17" pos:end="1147:47"><call pos:start="1147:17" pos:end="1147:29"><name pos:start="1147:17" pos:end="1147:27">ff_neterrno</name><argument_list pos:start="1147:28" pos:end="1147:29">()</argument_list></call> <operator pos:start="1147:31" pos:end="1147:32">!=</operator> <call pos:start="1147:34" pos:end="1147:47"><name pos:start="1147:34" pos:end="1147:40">AVERROR</name><argument_list pos:start="1147:41" pos:end="1147:47">(<argument pos:start="1147:42" pos:end="1147:46"><expr pos:start="1147:42" pos:end="1147:46"><name pos:start="1147:42" pos:end="1147:46">EINTR</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1147:50" pos:end="1151:13">{<block_content pos:start="1149:17" pos:end="1150:26">
                <comment type="block" pos:start="1148:17" pos:end="1148:46">/* error : close connection */</comment>
                <expr_stmt pos:start="1149:17" pos:end="1149:44"><expr pos:start="1149:17" pos:end="1149:43"><call pos:start="1149:17" pos:end="1149:43"><name pos:start="1149:17" pos:end="1149:24">av_freep</name><argument_list pos:start="1149:25" pos:end="1149:43">(<argument pos:start="1149:26" pos:end="1149:42"><expr pos:start="1149:26" pos:end="1149:42"><operator pos:start="1149:26" pos:end="1149:26">&amp;</operator><name pos:start="1149:27" pos:end="1149:42"><name pos:start="1149:27" pos:end="1149:27">c</name><operator pos:start="1149:28" pos:end="1149:29">-&gt;</operator><name pos:start="1149:30" pos:end="1149:42">packet_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="1150:17" pos:end="1150:26">return <expr pos:start="1150:24" pos:end="1150:25"><operator pos:start="1150:24" pos:end="1150:24">-</operator><literal type="number" pos:start="1150:25" pos:end="1150:25">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt>
            <break pos:start="1152:13" pos:end="1152:18">break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="1154:9" pos:end="1154:36"><expr pos:start="1154:9" pos:end="1154:35"><name pos:start="1154:9" pos:end="1154:28"><name pos:start="1154:9" pos:end="1154:9">c</name><operator pos:start="1154:10" pos:end="1154:11">-&gt;</operator><name pos:start="1154:12" pos:end="1154:28">packet_buffer_ptr</name></name> <operator pos:start="1154:30" pos:end="1154:31">+=</operator> <name pos:start="1154:33" pos:end="1154:35">len</name></expr>;</expr_stmt>
        <if_stmt pos:start="1155:9" pos:end="1159:9"><if pos:start="1155:9" pos:end="1159:9">if <condition pos:start="1155:12" pos:end="1155:57">(<expr pos:start="1155:13" pos:end="1155:56"><name pos:start="1155:13" pos:end="1155:32"><name pos:start="1155:13" pos:end="1155:13">c</name><operator pos:start="1155:14" pos:end="1155:15">-&gt;</operator><name pos:start="1155:16" pos:end="1155:32">packet_buffer_ptr</name></name> <operator pos:start="1155:34" pos:end="1155:35">&gt;=</operator> <name pos:start="1155:37" pos:end="1155:56"><name pos:start="1155:37" pos:end="1155:37">c</name><operator pos:start="1155:38" pos:end="1155:39">-&gt;</operator><name pos:start="1155:40" pos:end="1155:56">packet_buffer_end</name></name></expr>)</condition> <block pos:start="1155:59" pos:end="1159:9">{<block_content pos:start="1157:13" pos:end="1158:46">
            <comment type="block" pos:start="1156:13" pos:end="1156:66">/* all the buffer was sent : wait for a new request */</comment>
            <expr_stmt pos:start="1157:13" pos:end="1157:40"><expr pos:start="1157:13" pos:end="1157:39"><call pos:start="1157:13" pos:end="1157:39"><name pos:start="1157:13" pos:end="1157:20">av_freep</name><argument_list pos:start="1157:21" pos:end="1157:39">(<argument pos:start="1157:22" pos:end="1157:38"><expr pos:start="1157:22" pos:end="1157:38"><operator pos:start="1157:22" pos:end="1157:22">&amp;</operator><name pos:start="1157:23" pos:end="1157:38"><name pos:start="1157:23" pos:end="1157:23">c</name><operator pos:start="1157:24" pos:end="1157:25">-&gt;</operator><name pos:start="1157:26" pos:end="1157:38">packet_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1158:13" pos:end="1158:46"><expr pos:start="1158:13" pos:end="1158:45"><name pos:start="1158:13" pos:end="1158:20"><name pos:start="1158:13" pos:end="1158:13">c</name><operator pos:start="1158:14" pos:end="1158:15">-&gt;</operator><name pos:start="1158:16" pos:end="1158:20">state</name></name> <operator pos:start="1158:22" pos:end="1158:22">=</operator> <name pos:start="1158:24" pos:end="1158:45">RTSPSTATE_WAIT_REQUEST</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break pos:start="1160:9" pos:end="1160:14">break;</break>
    <case pos:start="1161:5" pos:end="1161:25">case <expr pos:start="1161:10" pos:end="1161:24"><name pos:start="1161:10" pos:end="1161:24">HTTPSTATE_READY</name></expr>:</case>
        <comment type="block" pos:start="1162:9" pos:end="1162:27">/* nothing to do */</comment>
        <break pos:start="1163:9" pos:end="1163:14">break;</break>
    <default pos:start="1164:5" pos:end="1164:12">default:</default>
        <return pos:start="1165:9" pos:end="1165:18">return <expr pos:start="1165:16" pos:end="1165:17"><operator pos:start="1165:16" pos:end="1165:16">-</operator><literal type="number" pos:start="1165:17" pos:end="1165:17">1</literal></expr>;</return>
    </block_content>}</block></switch>
    <return pos:start="1167:5" pos:end="1167:13">return <expr pos:start="1167:12" pos:end="1167:12"><literal type="number" pos:start="1167:12" pos:end="1167:12">0</literal></expr>;</return>

<label pos:start="1169:1" pos:end="1169:17"><name pos:start="1169:1" pos:end="1169:16">close_connection</name>:</label>
    <expr_stmt pos:start="1170:5" pos:end="1170:28"><expr pos:start="1170:5" pos:end="1170:27"><call pos:start="1170:5" pos:end="1170:27"><name pos:start="1170:5" pos:end="1170:12">av_freep</name><argument_list pos:start="1170:13" pos:end="1170:27">(<argument pos:start="1170:14" pos:end="1170:26"><expr pos:start="1170:14" pos:end="1170:26"><operator pos:start="1170:14" pos:end="1170:14">&amp;</operator><name pos:start="1170:15" pos:end="1170:26"><name pos:start="1170:15" pos:end="1170:15">c</name><operator pos:start="1170:16" pos:end="1170:17">-&gt;</operator><name pos:start="1170:18" pos:end="1170:26">pb_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="1171:5" pos:end="1171:14">return <expr pos:start="1171:12" pos:end="1171:13"><operator pos:start="1171:12" pos:end="1171:12">-</operator><literal type="number" pos:start="1171:13" pos:end="1171:13">1</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="1174:1" pos:end="1220:1"><type pos:start="1174:1" pos:end="1174:10"><specifier pos:start="1174:1" pos:end="1174:6">static</specifier> <name pos:start="1174:8" pos:end="1174:10">int</name></type> <name pos:start="1174:12" pos:end="1174:24">extract_rates</name><parameter_list pos:start="1174:25" pos:end="1174:71">(<parameter pos:start="1174:26" pos:end="1174:36"><decl pos:start="1174:26" pos:end="1174:36"><type pos:start="1174:26" pos:end="1174:36"><name pos:start="1174:26" pos:end="1174:29">char</name> <modifier pos:start="1174:31" pos:end="1174:31">*</modifier></type><name pos:start="1174:32" pos:end="1174:36">rates</name></decl></parameter>, <parameter pos:start="1174:39" pos:end="1174:49"><decl pos:start="1174:39" pos:end="1174:49"><type pos:start="1174:39" pos:end="1174:49"><name pos:start="1174:39" pos:end="1174:41">int</name></type> <name pos:start="1174:43" pos:end="1174:49">ratelen</name></decl></parameter>, <parameter pos:start="1174:52" pos:end="1174:70"><decl pos:start="1174:52" pos:end="1174:70"><type pos:start="1174:52" pos:end="1174:70"><specifier pos:start="1174:52" pos:end="1174:56">const</specifier> <name pos:start="1174:58" pos:end="1174:61">char</name> <modifier pos:start="1174:63" pos:end="1174:63">*</modifier></type><name pos:start="1174:64" pos:end="1174:70">request</name></decl></parameter>)</parameter_list>
<block pos:start="1175:1" pos:end="1220:1">{<block_content pos:start="1176:5" pos:end="1219:13">
    <decl_stmt pos:start="1176:5" pos:end="1176:18"><decl pos:start="1176:5" pos:end="1176:17"><type pos:start="1176:5" pos:end="1176:16"><specifier pos:start="1176:5" pos:end="1176:9">const</specifier> <name pos:start="1176:11" pos:end="1176:14">char</name> <modifier pos:start="1176:16" pos:end="1176:16">*</modifier></type><name pos:start="1176:17" pos:end="1176:17">p</name></decl>;</decl_stmt>

    <for pos:start="1178:5" pos:end="1217:5">for <control pos:start="1178:9" pos:end="1178:55">(<init pos:start="1178:10" pos:end="1178:21"><expr pos:start="1178:10" pos:end="1178:20"><name pos:start="1178:10" pos:end="1178:10">p</name> <operator pos:start="1178:12" pos:end="1178:12">=</operator> <name pos:start="1178:14" pos:end="1178:20">request</name></expr>;</init> <condition pos:start="1178:23" pos:end="1178:53"><expr pos:start="1178:23" pos:end="1178:52"><operator pos:start="1178:23" pos:end="1178:23">*</operator><name pos:start="1178:24" pos:end="1178:24">p</name> <operator pos:start="1178:26" pos:end="1178:27">&amp;&amp;</operator> <operator pos:start="1178:29" pos:end="1178:29">*</operator><name pos:start="1178:30" pos:end="1178:30">p</name> <operator pos:start="1178:32" pos:end="1178:33">!=</operator> <literal type="char" pos:start="1178:35" pos:end="1178:38">'\r'</literal> <operator pos:start="1178:40" pos:end="1178:41">&amp;&amp;</operator> <operator pos:start="1178:43" pos:end="1178:43">*</operator><name pos:start="1178:44" pos:end="1178:44">p</name> <operator pos:start="1178:46" pos:end="1178:47">!=</operator> <literal type="char" pos:start="1178:49" pos:end="1178:52">'\n'</literal></expr>;</condition> <incr/>)</control> <block pos:start="1178:57" pos:end="1217:5">{<block_content pos:start="1179:9" pos:end="1216:12">
        <if_stmt pos:start="1179:9" pos:end="1211:9"><if pos:start="1179:9" pos:end="1211:9">if <condition pos:start="1179:12" pos:end="1179:49">(<expr pos:start="1179:13" pos:end="1179:48"><call pos:start="1179:13" pos:end="1179:43"><name pos:start="1179:13" pos:end="1179:26">av_strncasecmp</name><argument_list pos:start="1179:27" pos:end="1179:43">(<argument pos:start="1179:28" pos:end="1179:28"><expr pos:start="1179:28" pos:end="1179:28"><name pos:start="1179:28" pos:end="1179:28">p</name></expr></argument>, <argument pos:start="1179:31" pos:end="1179:39"><expr pos:start="1179:31" pos:end="1179:39"><literal type="string" pos:start="1179:31" pos:end="1179:39">"Pragma:"</literal></expr></argument>, <argument pos:start="1179:42" pos:end="1179:42"><expr pos:start="1179:42" pos:end="1179:42"><literal type="number" pos:start="1179:42" pos:end="1179:42">7</literal></expr></argument>)</argument_list></call> <operator pos:start="1179:45" pos:end="1179:46">==</operator> <literal type="number" pos:start="1179:48" pos:end="1179:48">0</literal></expr>)</condition> <block pos:start="1179:51" pos:end="1211:9">{<block_content pos:start="1180:13" pos:end="1210:13">
            <decl_stmt pos:start="1180:13" pos:end="1180:34"><decl pos:start="1180:13" pos:end="1180:33"><type pos:start="1180:13" pos:end="1180:24"><specifier pos:start="1180:13" pos:end="1180:17">const</specifier> <name pos:start="1180:19" pos:end="1180:22">char</name> <modifier pos:start="1180:24" pos:end="1180:24">*</modifier></type><name pos:start="1180:25" pos:end="1180:25">q</name> <init pos:start="1180:27" pos:end="1180:33">= <expr pos:start="1180:29" pos:end="1180:33"><name pos:start="1180:29" pos:end="1180:29">p</name> <operator pos:start="1180:31" pos:end="1180:31">+</operator> <literal type="number" pos:start="1180:33" pos:end="1180:33">7</literal></expr></init></decl>;</decl_stmt>

            <while pos:start="1182:13" pos:end="1183:20">while <condition pos:start="1182:19" pos:end="1182:54">(<expr pos:start="1182:20" pos:end="1182:53"><operator pos:start="1182:20" pos:end="1182:20">*</operator><name pos:start="1182:21" pos:end="1182:21">q</name> <operator pos:start="1182:23" pos:end="1182:24">&amp;&amp;</operator> <operator pos:start="1182:26" pos:end="1182:26">*</operator><name pos:start="1182:27" pos:end="1182:27">q</name> <operator pos:start="1182:29" pos:end="1182:30">!=</operator> <literal type="char" pos:start="1182:32" pos:end="1182:35">'\n'</literal> <operator pos:start="1182:37" pos:end="1182:38">&amp;&amp;</operator> <call pos:start="1182:40" pos:end="1182:53"><name pos:start="1182:40" pos:end="1182:49">av_isspace</name><argument_list pos:start="1182:50" pos:end="1182:53">(<argument pos:start="1182:51" pos:end="1182:52"><expr pos:start="1182:51" pos:end="1182:52"><operator pos:start="1182:51" pos:end="1182:51">*</operator><name pos:start="1182:52" pos:end="1182:52">q</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1183:17" pos:end="1183:20"><block_content pos:start="1183:17" pos:end="1183:20">
                <expr_stmt pos:start="1183:17" pos:end="1183:20"><expr pos:start="1183:17" pos:end="1183:19"><name pos:start="1183:17" pos:end="1183:17">q</name><operator pos:start="1183:18" pos:end="1183:19">++</operator></expr>;</expr_stmt></block_content></block></while>

            <if_stmt pos:start="1185:13" pos:end="1210:13"><if pos:start="1185:13" pos:end="1210:13">if <condition pos:start="1185:16" pos:end="1185:67">(<expr pos:start="1185:17" pos:end="1185:66"><call pos:start="1185:17" pos:end="1185:61"><name pos:start="1185:17" pos:end="1185:30">av_strncasecmp</name><argument_list pos:start="1185:31" pos:end="1185:61">(<argument pos:start="1185:32" pos:end="1185:32"><expr pos:start="1185:32" pos:end="1185:32"><name pos:start="1185:32" pos:end="1185:32">q</name></expr></argument>, <argument pos:start="1185:35" pos:end="1185:56"><expr pos:start="1185:35" pos:end="1185:56"><literal type="string" pos:start="1185:35" pos:end="1185:56">"stream-switch-entry="</literal></expr></argument>, <argument pos:start="1185:59" pos:end="1185:60"><expr pos:start="1185:59" pos:end="1185:60"><literal type="number" pos:start="1185:59" pos:end="1185:60">20</literal></expr></argument>)</argument_list></call> <operator pos:start="1185:63" pos:end="1185:64">==</operator> <literal type="number" pos:start="1185:66" pos:end="1185:66">0</literal></expr>)</condition> <block pos:start="1185:69" pos:end="1210:13">{<block_content pos:start="1186:17" pos:end="1209:25">
                <decl_stmt pos:start="1186:17" pos:end="1186:30"><decl pos:start="1186:17" pos:end="1186:29"><type pos:start="1186:17" pos:end="1186:19"><name pos:start="1186:17" pos:end="1186:19">int</name></type> <name pos:start="1186:21" pos:end="1186:29">stream_no</name></decl>;</decl_stmt>
                <decl_stmt pos:start="1187:17" pos:end="1187:28"><decl pos:start="1187:17" pos:end="1187:27"><type pos:start="1187:17" pos:end="1187:19"><name pos:start="1187:17" pos:end="1187:19">int</name></type> <name pos:start="1187:21" pos:end="1187:27">rate_no</name></decl>;</decl_stmt>

                <expr_stmt pos:start="1189:17" pos:end="1189:24"><expr pos:start="1189:17" pos:end="1189:23"><name pos:start="1189:17" pos:end="1189:17">q</name> <operator pos:start="1189:19" pos:end="1189:20">+=</operator> <literal type="number" pos:start="1189:22" pos:end="1189:23">20</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1191:17" pos:end="1191:45"><expr pos:start="1191:17" pos:end="1191:44"><call pos:start="1191:17" pos:end="1191:44"><name pos:start="1191:17" pos:end="1191:22">memset</name><argument_list pos:start="1191:23" pos:end="1191:44">(<argument pos:start="1191:24" pos:end="1191:28"><expr pos:start="1191:24" pos:end="1191:28"><name pos:start="1191:24" pos:end="1191:28">rates</name></expr></argument>, <argument pos:start="1191:31" pos:end="1191:34"><expr pos:start="1191:31" pos:end="1191:34"><literal type="number" pos:start="1191:31" pos:end="1191:34">0xff</literal></expr></argument>, <argument pos:start="1191:37" pos:end="1191:43"><expr pos:start="1191:37" pos:end="1191:43"><name pos:start="1191:37" pos:end="1191:43">ratelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <while pos:start="1193:17" pos:end="1207:17">while <condition pos:start="1193:23" pos:end="1193:25">(<expr pos:start="1193:24" pos:end="1193:24"><literal type="number" pos:start="1193:24" pos:end="1193:24">1</literal></expr>)</condition> <block pos:start="1193:27" pos:end="1207:17">{<block_content pos:start="1194:21" pos:end="1206:28">
                    <while pos:start="1194:21" pos:end="1195:28">while <condition pos:start="1194:27" pos:end="1194:57">(<expr pos:start="1194:28" pos:end="1194:56"><operator pos:start="1194:28" pos:end="1194:28">*</operator><name pos:start="1194:29" pos:end="1194:29">q</name> <operator pos:start="1194:31" pos:end="1194:32">&amp;&amp;</operator> <operator pos:start="1194:34" pos:end="1194:34">*</operator><name pos:start="1194:35" pos:end="1194:35">q</name> <operator pos:start="1194:37" pos:end="1194:38">!=</operator> <literal type="char" pos:start="1194:40" pos:end="1194:43">'\n'</literal> <operator pos:start="1194:45" pos:end="1194:46">&amp;&amp;</operator> <operator pos:start="1194:48" pos:end="1194:48">*</operator><name pos:start="1194:49" pos:end="1194:49">q</name> <operator pos:start="1194:51" pos:end="1194:52">!=</operator> <literal type="char" pos:start="1194:54" pos:end="1194:56">':'</literal></expr>)</condition><block type="pseudo" pos:start="1195:25" pos:end="1195:28"><block_content pos:start="1195:25" pos:end="1195:28">
                        <expr_stmt pos:start="1195:25" pos:end="1195:28"><expr pos:start="1195:25" pos:end="1195:27"><name pos:start="1195:25" pos:end="1195:25">q</name><operator pos:start="1195:26" pos:end="1195:27">++</operator></expr>;</expr_stmt></block_content></block></while>

                    <if_stmt pos:start="1197:21" pos:end="1198:30"><if pos:start="1197:21" pos:end="1198:30">if <condition pos:start="1197:24" pos:end="1197:71">(<expr pos:start="1197:25" pos:end="1197:70"><call pos:start="1197:25" pos:end="1197:65"><name pos:start="1197:25" pos:end="1197:30">sscanf</name><argument_list pos:start="1197:31" pos:end="1197:65">(<argument pos:start="1197:32" pos:end="1197:32"><expr pos:start="1197:32" pos:end="1197:32"><name pos:start="1197:32" pos:end="1197:32">q</name></expr></argument>, <argument pos:start="1197:35" pos:end="1197:42"><expr pos:start="1197:35" pos:end="1197:42"><literal type="string" pos:start="1197:35" pos:end="1197:42">":%d:%d"</literal></expr></argument>, <argument pos:start="1197:45" pos:end="1197:54"><expr pos:start="1197:45" pos:end="1197:54"><operator pos:start="1197:45" pos:end="1197:45">&amp;</operator><name pos:start="1197:46" pos:end="1197:54">stream_no</name></expr></argument>, <argument pos:start="1197:57" pos:end="1197:64"><expr pos:start="1197:57" pos:end="1197:64"><operator pos:start="1197:57" pos:end="1197:57">&amp;</operator><name pos:start="1197:58" pos:end="1197:64">rate_no</name></expr></argument>)</argument_list></call> <operator pos:start="1197:67" pos:end="1197:68">!=</operator> <literal type="number" pos:start="1197:70" pos:end="1197:70">2</literal></expr>)</condition><block type="pseudo" pos:start="1198:25" pos:end="1198:30"><block_content pos:start="1198:25" pos:end="1198:30">
                        <break pos:start="1198:25" pos:end="1198:30">break;</break></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="1200:21" pos:end="1200:32"><expr pos:start="1200:21" pos:end="1200:31"><name pos:start="1200:21" pos:end="1200:29">stream_no</name><operator pos:start="1200:30" pos:end="1200:31">--</operator></expr>;</expr_stmt>
                    <if_stmt pos:start="1201:21" pos:end="1203:52"><if pos:start="1201:21" pos:end="1203:52">if <condition pos:start="1201:24" pos:end="1201:45">(<expr pos:start="1201:25" pos:end="1201:43"><name pos:start="1201:25" pos:end="1201:33">stream_no</name> <operator pos:start="1201:35" pos:end="1201:35">&lt;</operator> <name pos:start="1201:37" pos:end="1201:43">ratelen</name></expr> )</condition><block pos:start="1201:46" pos:end="1203:52">{<block_content pos:start="1202:1" pos:end="1203:51">
<if_stmt pos:start="1202:1" pos:end="1203:51"><if pos:start="1202:1" pos:end="1203:51">if<condition pos:start="1202:3" pos:end="1202:19">( <expr pos:start="1202:5" pos:end="1202:18"><name pos:start="1202:5" pos:end="1202:13">stream_no</name> <operator pos:start="1202:15" pos:end="1202:16">&gt;=</operator> <literal type="number" pos:start="1202:18" pos:end="1202:18">0</literal></expr>)</condition><block type="pseudo" pos:start="1203:25" pos:end="1203:51"><block_content pos:start="1203:25" pos:end="1203:51">
                        <expr_stmt pos:start="1203:25" pos:end="1203:51"><expr pos:start="1203:25" pos:end="1203:50"><name pos:start="1203:25" pos:end="1203:40"><name pos:start="1203:25" pos:end="1203:29">rates</name><index pos:start="1203:30" pos:end="1203:40">[<expr pos:start="1203:31" pos:end="1203:39"><name pos:start="1203:31" pos:end="1203:39">stream_no</name></expr>]</index></name> <operator pos:start="1203:42" pos:end="1203:42">=</operator> <name pos:start="1203:44" pos:end="1203:50">rate_no</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block></if></if_stmt>

                    <while pos:start="1205:21" pos:end="1206:28">while <condition pos:start="1205:27" pos:end="1205:63">(<expr pos:start="1205:28" pos:end="1205:62"><operator pos:start="1205:28" pos:end="1205:28">*</operator><name pos:start="1205:29" pos:end="1205:29">q</name> <operator pos:start="1205:31" pos:end="1205:32">&amp;&amp;</operator> <operator pos:start="1205:34" pos:end="1205:34">*</operator><name pos:start="1205:35" pos:end="1205:35">q</name> <operator pos:start="1205:37" pos:end="1205:38">!=</operator> <literal type="char" pos:start="1205:40" pos:end="1205:43">'\n'</literal> <operator pos:start="1205:45" pos:end="1205:46">&amp;&amp;</operator> <operator pos:start="1205:48" pos:end="1205:48">!</operator><call pos:start="1205:49" pos:end="1205:62"><name pos:start="1205:49" pos:end="1205:58">av_isspace</name><argument_list pos:start="1205:59" pos:end="1205:62">(<argument pos:start="1205:60" pos:end="1205:61"><expr pos:start="1205:60" pos:end="1205:61"><operator pos:start="1205:60" pos:end="1205:60">*</operator><name pos:start="1205:61" pos:end="1205:61">q</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1206:25" pos:end="1206:28"><block_content pos:start="1206:25" pos:end="1206:28">
                        <expr_stmt pos:start="1206:25" pos:end="1206:28"><expr pos:start="1206:25" pos:end="1206:27"><name pos:start="1206:25" pos:end="1206:25">q</name><operator pos:start="1206:26" pos:end="1206:27">++</operator></expr>;</expr_stmt></block_content></block></while>
                </block_content>}</block></while>

                <return pos:start="1209:17" pos:end="1209:25">return <expr pos:start="1209:24" pos:end="1209:24"><literal type="number" pos:start="1209:24" pos:end="1209:24">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="1212:9" pos:end="1212:28"><expr pos:start="1212:9" pos:end="1212:27"><name pos:start="1212:9" pos:end="1212:9">p</name> <operator pos:start="1212:11" pos:end="1212:11">=</operator> <call pos:start="1212:13" pos:end="1212:27"><name pos:start="1212:13" pos:end="1212:18">strchr</name><argument_list pos:start="1212:19" pos:end="1212:27">(<argument pos:start="1212:20" pos:end="1212:20"><expr pos:start="1212:20" pos:end="1212:20"><name pos:start="1212:20" pos:end="1212:20">p</name></expr></argument>, <argument pos:start="1212:23" pos:end="1212:26"><expr pos:start="1212:23" pos:end="1212:26"><literal type="char" pos:start="1212:23" pos:end="1212:26">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1213:9" pos:end="1214:18"><if pos:start="1213:9" pos:end="1214:18">if <condition pos:start="1213:12" pos:end="1213:15">(<expr pos:start="1213:13" pos:end="1213:14"><operator pos:start="1213:13" pos:end="1213:13">!</operator><name pos:start="1213:14" pos:end="1213:14">p</name></expr>)</condition><block type="pseudo" pos:start="1214:13" pos:end="1214:18"><block_content pos:start="1214:13" pos:end="1214:18">
            <break pos:start="1214:13" pos:end="1214:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1216:9" pos:end="1216:12"><expr pos:start="1216:9" pos:end="1216:11"><name pos:start="1216:9" pos:end="1216:9">p</name><operator pos:start="1216:10" pos:end="1216:11">++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return pos:start="1219:5" pos:end="1219:13">return <expr pos:start="1219:12" pos:end="1219:12"><literal type="number" pos:start="1219:12" pos:end="1219:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="1222:1" pos:end="1258:1"><type pos:start="1222:1" pos:end="1222:10"><specifier pos:start="1222:1" pos:end="1222:6">static</specifier> <name pos:start="1222:8" pos:end="1222:10">int</name></type> <name pos:start="1222:12" pos:end="1222:30">find_stream_in_feed</name><parameter_list pos:start="1222:31" pos:end="1223:44">(<parameter pos:start="1222:32" pos:end="1222:51"><decl pos:start="1222:32" pos:end="1222:51"><type pos:start="1222:32" pos:end="1222:51"><name pos:start="1222:32" pos:end="1222:45">FFServerStream</name> <modifier pos:start="1222:47" pos:end="1222:47">*</modifier></type><name pos:start="1222:48" pos:end="1222:51">feed</name></decl></parameter>, <parameter pos:start="1222:54" pos:end="1222:77"><decl pos:start="1222:54" pos:end="1222:77"><type pos:start="1222:54" pos:end="1222:77"><name pos:start="1222:54" pos:end="1222:70">AVCodecParameters</name> <modifier pos:start="1222:72" pos:end="1222:72">*</modifier></type><name pos:start="1222:73" pos:end="1222:77">codec</name></decl></parameter>,
                               <parameter pos:start="1223:32" pos:end="1223:43"><decl pos:start="1223:32" pos:end="1223:43"><type pos:start="1223:32" pos:end="1223:43"><name pos:start="1223:32" pos:end="1223:34">int</name></type> <name pos:start="1223:36" pos:end="1223:43">bit_rate</name></decl></parameter>)</parameter_list>
<block pos:start="1224:1" pos:end="1258:1">{<block_content pos:start="1225:5" pos:end="1257:16">
    <decl_stmt pos:start="1225:5" pos:end="1225:10"><decl pos:start="1225:5" pos:end="1225:9"><type pos:start="1225:5" pos:end="1225:7"><name pos:start="1225:5" pos:end="1225:7">int</name></type> <name pos:start="1225:9" pos:end="1225:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1226:5" pos:end="1226:33"><decl pos:start="1226:5" pos:end="1226:32"><type pos:start="1226:5" pos:end="1226:7"><name pos:start="1226:5" pos:end="1226:7">int</name></type> <name pos:start="1226:9" pos:end="1226:20">best_bitrate</name> <init pos:start="1226:22" pos:end="1226:32">= <expr pos:start="1226:24" pos:end="1226:32"><literal type="number" pos:start="1226:24" pos:end="1226:32">100000000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1227:5" pos:end="1227:18"><decl pos:start="1227:5" pos:end="1227:17"><type pos:start="1227:5" pos:end="1227:7"><name pos:start="1227:5" pos:end="1227:7">int</name></type> <name pos:start="1227:9" pos:end="1227:12">best</name> <init pos:start="1227:14" pos:end="1227:17">= <expr pos:start="1227:16" pos:end="1227:17"><operator pos:start="1227:16" pos:end="1227:16">-</operator><literal type="number" pos:start="1227:17" pos:end="1227:17">1</literal></expr></init></decl>;</decl_stmt>

    <for pos:start="1229:5" pos:end="1256:5">for <control pos:start="1229:9" pos:end="1229:42">(<init pos:start="1229:10" pos:end="1229:15"><expr pos:start="1229:10" pos:end="1229:14"><name pos:start="1229:10" pos:end="1229:10">i</name> <operator pos:start="1229:12" pos:end="1229:12">=</operator> <literal type="number" pos:start="1229:14" pos:end="1229:14">0</literal></expr>;</init> <condition pos:start="1229:17" pos:end="1229:37"><expr pos:start="1229:17" pos:end="1229:36"><name pos:start="1229:17" pos:end="1229:17">i</name> <operator pos:start="1229:19" pos:end="1229:19">&lt;</operator> <name pos:start="1229:21" pos:end="1229:36"><name pos:start="1229:21" pos:end="1229:24">feed</name><operator pos:start="1229:25" pos:end="1229:26">-&gt;</operator><name pos:start="1229:27" pos:end="1229:36">nb_streams</name></name></expr>;</condition> <incr pos:start="1229:39" pos:end="1229:41"><expr pos:start="1229:39" pos:end="1229:41"><name pos:start="1229:39" pos:end="1229:39">i</name><operator pos:start="1229:40" pos:end="1229:41">++</operator></expr></incr>)</control> <block pos:start="1229:44" pos:end="1256:5">{<block_content pos:start="1230:9" pos:end="1255:9">
        <decl_stmt pos:start="1230:9" pos:end="1230:67"><decl pos:start="1230:9" pos:end="1230:66"><type pos:start="1230:9" pos:end="1230:27"><name pos:start="1230:9" pos:end="1230:25">AVCodecParameters</name> <modifier pos:start="1230:27" pos:end="1230:27">*</modifier></type><name pos:start="1230:28" pos:end="1230:37">feed_codec</name> <init pos:start="1230:39" pos:end="1230:66">= <expr pos:start="1230:41" pos:end="1230:66"><name pos:start="1230:41" pos:end="1230:56"><name pos:start="1230:41" pos:end="1230:44">feed</name><operator pos:start="1230:45" pos:end="1230:46">-&gt;</operator><name pos:start="1230:47" pos:end="1230:53">streams</name><index pos:start="1230:54" pos:end="1230:56">[<expr pos:start="1230:55" pos:end="1230:55"><name pos:start="1230:55" pos:end="1230:55">i</name></expr>]</index></name><operator pos:start="1230:57" pos:end="1230:58">-&gt;</operator><name pos:start="1230:59" pos:end="1230:66">codecpar</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="1232:9" pos:end="1236:21"><if pos:start="1232:9" pos:end="1236:21">if <condition pos:start="1232:12" pos:end="1235:48">(<expr pos:start="1232:13" pos:end="1235:47"><name pos:start="1232:13" pos:end="1232:32"><name pos:start="1232:13" pos:end="1232:22">feed_codec</name><operator pos:start="1232:23" pos:end="1232:24">-&gt;</operator><name pos:start="1232:25" pos:end="1232:32">codec_id</name></name> <operator pos:start="1232:34" pos:end="1232:35">!=</operator> <name pos:start="1232:37" pos:end="1232:51"><name pos:start="1232:37" pos:end="1232:41">codec</name><operator pos:start="1232:42" pos:end="1232:43">-&gt;</operator><name pos:start="1232:44" pos:end="1232:51">codec_id</name></name> <operator pos:start="1232:53" pos:end="1232:54">||</operator>
            <name pos:start="1233:13" pos:end="1233:35"><name pos:start="1233:13" pos:end="1233:22">feed_codec</name><operator pos:start="1233:23" pos:end="1233:24">-&gt;</operator><name pos:start="1233:25" pos:end="1233:35">sample_rate</name></name> <operator pos:start="1233:37" pos:end="1233:38">!=</operator> <name pos:start="1233:40" pos:end="1233:57"><name pos:start="1233:40" pos:end="1233:44">codec</name><operator pos:start="1233:45" pos:end="1233:46">-&gt;</operator><name pos:start="1233:47" pos:end="1233:57">sample_rate</name></name> <operator pos:start="1233:59" pos:end="1233:60">||</operator>
            <name pos:start="1234:13" pos:end="1234:29"><name pos:start="1234:13" pos:end="1234:22">feed_codec</name><operator pos:start="1234:23" pos:end="1234:24">-&gt;</operator><name pos:start="1234:25" pos:end="1234:29">width</name></name> <operator pos:start="1234:31" pos:end="1234:32">!=</operator> <name pos:start="1234:34" pos:end="1234:45"><name pos:start="1234:34" pos:end="1234:38">codec</name><operator pos:start="1234:39" pos:end="1234:40">-&gt;</operator><name pos:start="1234:41" pos:end="1234:45">width</name></name> <operator pos:start="1234:47" pos:end="1234:48">||</operator>
            <name pos:start="1235:13" pos:end="1235:30"><name pos:start="1235:13" pos:end="1235:22">feed_codec</name><operator pos:start="1235:23" pos:end="1235:24">-&gt;</operator><name pos:start="1235:25" pos:end="1235:30">height</name></name> <operator pos:start="1235:32" pos:end="1235:33">!=</operator> <name pos:start="1235:35" pos:end="1235:47"><name pos:start="1235:35" pos:end="1235:39">codec</name><operator pos:start="1235:40" pos:end="1235:41">-&gt;</operator><name pos:start="1235:42" pos:end="1235:47">height</name></name></expr>)</condition><block type="pseudo" pos:start="1236:13" pos:end="1236:21"><block_content pos:start="1236:13" pos:end="1236:21">
            <continue pos:start="1236:13" pos:end="1236:21">continue;</continue></block_content></block></if></if_stmt>

        <comment type="block" pos:start="1238:9" pos:end="1238:30">/* Potential stream */</comment>

        <comment type="block" pos:start="1240:9" pos:end="1242:11">/* We want the fastest stream less than bit_rate, or the slowest
         * faster than bit_rate
         */</comment>

        <if_stmt pos:start="1244:9" pos:end="1251:9"><if pos:start="1244:9" pos:end="1251:9">if <condition pos:start="1244:12" pos:end="1244:45">(<expr pos:start="1244:13" pos:end="1244:44"><name pos:start="1244:13" pos:end="1244:32"><name pos:start="1244:13" pos:end="1244:22">feed_codec</name><operator pos:start="1244:23" pos:end="1244:24">-&gt;</operator><name pos:start="1244:25" pos:end="1244:32">bit_rate</name></name> <operator pos:start="1244:34" pos:end="1244:35">&lt;=</operator> <name pos:start="1244:37" pos:end="1244:44">bit_rate</name></expr>)</condition> <block pos:start="1244:47" pos:end="1251:9">{<block_content pos:start="1245:13" pos:end="1250:21">
            <if_stmt pos:start="1245:13" pos:end="1249:13"><if pos:start="1245:13" pos:end="1249:13">if <condition pos:start="1245:16" pos:end="1246:52">(<expr pos:start="1245:17" pos:end="1246:51"><name pos:start="1245:17" pos:end="1245:28">best_bitrate</name> <operator pos:start="1245:30" pos:end="1245:30">&gt;</operator> <name pos:start="1245:32" pos:end="1245:39">bit_rate</name> <operator pos:start="1245:41" pos:end="1245:42">||</operator>
                <name pos:start="1246:17" pos:end="1246:36"><name pos:start="1246:17" pos:end="1246:26">feed_codec</name><operator pos:start="1246:27" pos:end="1246:28">-&gt;</operator><name pos:start="1246:29" pos:end="1246:36">bit_rate</name></name> <operator pos:start="1246:38" pos:end="1246:38">&gt;</operator> <name pos:start="1246:40" pos:end="1246:51">best_bitrate</name></expr>)</condition> <block pos:start="1246:54" pos:end="1249:13">{<block_content pos:start="1247:17" pos:end="1248:25">
                <expr_stmt pos:start="1247:17" pos:end="1247:52"><expr pos:start="1247:17" pos:end="1247:51"><name pos:start="1247:17" pos:end="1247:28">best_bitrate</name> <operator pos:start="1247:30" pos:end="1247:30">=</operator> <name pos:start="1247:32" pos:end="1247:51"><name pos:start="1247:32" pos:end="1247:41">feed_codec</name><operator pos:start="1247:42" pos:end="1247:43">-&gt;</operator><name pos:start="1247:44" pos:end="1247:51">bit_rate</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="1248:17" pos:end="1248:25"><expr pos:start="1248:17" pos:end="1248:24"><name pos:start="1248:17" pos:end="1248:20">best</name> <operator pos:start="1248:22" pos:end="1248:22">=</operator> <name pos:start="1248:24" pos:end="1248:24">i</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <continue pos:start="1250:13" pos:end="1250:21">continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="1252:9" pos:end="1255:9"><if pos:start="1252:9" pos:end="1255:9">if <condition pos:start="1252:12" pos:end="1252:48">(<expr pos:start="1252:13" pos:end="1252:47"><name pos:start="1252:13" pos:end="1252:32"><name pos:start="1252:13" pos:end="1252:22">feed_codec</name><operator pos:start="1252:23" pos:end="1252:24">-&gt;</operator><name pos:start="1252:25" pos:end="1252:32">bit_rate</name></name> <operator pos:start="1252:34" pos:end="1252:34">&lt;</operator> <name pos:start="1252:36" pos:end="1252:47">best_bitrate</name></expr>)</condition> <block pos:start="1252:50" pos:end="1255:9">{<block_content pos:start="1253:13" pos:end="1254:21">
            <expr_stmt pos:start="1253:13" pos:end="1253:48"><expr pos:start="1253:13" pos:end="1253:47"><name pos:start="1253:13" pos:end="1253:24">best_bitrate</name> <operator pos:start="1253:26" pos:end="1253:26">=</operator> <name pos:start="1253:28" pos:end="1253:47"><name pos:start="1253:28" pos:end="1253:37">feed_codec</name><operator pos:start="1253:38" pos:end="1253:39">-&gt;</operator><name pos:start="1253:40" pos:end="1253:47">bit_rate</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="1254:13" pos:end="1254:21"><expr pos:start="1254:13" pos:end="1254:20"><name pos:start="1254:13" pos:end="1254:16">best</name> <operator pos:start="1254:18" pos:end="1254:18">=</operator> <name pos:start="1254:20" pos:end="1254:20">i</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return pos:start="1257:5" pos:end="1257:16">return <expr pos:start="1257:12" pos:end="1257:15"><name pos:start="1257:12" pos:end="1257:15">best</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="1260:1" pos:end="1299:1"><type pos:start="1260:1" pos:end="1260:10"><specifier pos:start="1260:1" pos:end="1260:6">static</specifier> <name pos:start="1260:8" pos:end="1260:10">int</name></type> <name pos:start="1260:12" pos:end="1260:32">modify_current_stream</name><parameter_list pos:start="1260:33" pos:end="1260:61">(<parameter pos:start="1260:34" pos:end="1260:47"><decl pos:start="1260:34" pos:end="1260:47"><type pos:start="1260:34" pos:end="1260:47"><name pos:start="1260:34" pos:end="1260:44">HTTPContext</name> <modifier pos:start="1260:46" pos:end="1260:46">*</modifier></type><name pos:start="1260:47" pos:end="1260:47">c</name></decl></parameter>, <parameter pos:start="1260:50" pos:end="1260:60"><decl pos:start="1260:50" pos:end="1260:60"><type pos:start="1260:50" pos:end="1260:60"><name pos:start="1260:50" pos:end="1260:53">char</name> <modifier pos:start="1260:55" pos:end="1260:55">*</modifier></type><name pos:start="1260:56" pos:end="1260:60">rates</name></decl></parameter>)</parameter_list>
<block pos:start="1261:1" pos:end="1299:1">{<block_content pos:start="1262:5" pos:end="1298:27">
    <decl_stmt pos:start="1262:5" pos:end="1262:10"><decl pos:start="1262:5" pos:end="1262:9"><type pos:start="1262:5" pos:end="1262:7"><name pos:start="1262:5" pos:end="1262:7">int</name></type> <name pos:start="1262:9" pos:end="1262:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1263:5" pos:end="1263:36"><decl pos:start="1263:5" pos:end="1263:35"><type pos:start="1263:5" pos:end="1263:20"><name pos:start="1263:5" pos:end="1263:18">FFServerStream</name> <modifier pos:start="1263:20" pos:end="1263:20">*</modifier></type><name pos:start="1263:21" pos:end="1263:23">req</name> <init pos:start="1263:25" pos:end="1263:35">= <expr pos:start="1263:27" pos:end="1263:35"><name pos:start="1263:27" pos:end="1263:35"><name pos:start="1263:27" pos:end="1263:27">c</name><operator pos:start="1263:28" pos:end="1263:29">-&gt;</operator><name pos:start="1263:30" pos:end="1263:35">stream</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1264:5" pos:end="1264:28"><decl pos:start="1264:5" pos:end="1264:27"><type pos:start="1264:5" pos:end="1264:7"><name pos:start="1264:5" pos:end="1264:7">int</name></type> <name pos:start="1264:9" pos:end="1264:23">action_required</name> <init pos:start="1264:25" pos:end="1264:27">= <expr pos:start="1264:27" pos:end="1264:27"><literal type="number" pos:start="1264:27" pos:end="1264:27">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="1266:5" pos:end="1266:39">/* Not much we can do for a feed */</comment>
    <if_stmt pos:start="1267:5" pos:end="1268:17"><if pos:start="1267:5" pos:end="1268:17">if <condition pos:start="1267:8" pos:end="1267:19">(<expr pos:start="1267:9" pos:end="1267:18"><operator pos:start="1267:9" pos:end="1267:9">!</operator><name pos:start="1267:10" pos:end="1267:18"><name pos:start="1267:10" pos:end="1267:12">req</name><operator pos:start="1267:13" pos:end="1267:14">-&gt;</operator><name pos:start="1267:15" pos:end="1267:18">feed</name></name></expr>)</condition><block type="pseudo" pos:start="1268:9" pos:end="1268:17"><block_content pos:start="1268:9" pos:end="1268:17">
        <return pos:start="1268:9" pos:end="1268:17">return <expr pos:start="1268:16" pos:end="1268:16"><literal type="number" pos:start="1268:16" pos:end="1268:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <for pos:start="1270:5" pos:end="1296:5">for <control pos:start="1270:9" pos:end="1270:41">(<init pos:start="1270:10" pos:end="1270:15"><expr pos:start="1270:10" pos:end="1270:14"><name pos:start="1270:10" pos:end="1270:10">i</name> <operator pos:start="1270:12" pos:end="1270:12">=</operator> <literal type="number" pos:start="1270:14" pos:end="1270:14">0</literal></expr>;</init> <condition pos:start="1270:17" pos:end="1270:36"><expr pos:start="1270:17" pos:end="1270:35"><name pos:start="1270:17" pos:end="1270:17">i</name> <operator pos:start="1270:19" pos:end="1270:19">&lt;</operator> <name pos:start="1270:21" pos:end="1270:35"><name pos:start="1270:21" pos:end="1270:23">req</name><operator pos:start="1270:24" pos:end="1270:25">-&gt;</operator><name pos:start="1270:26" pos:end="1270:35">nb_streams</name></name></expr>;</condition> <incr pos:start="1270:38" pos:end="1270:40"><expr pos:start="1270:38" pos:end="1270:40"><name pos:start="1270:38" pos:end="1270:38">i</name><operator pos:start="1270:39" pos:end="1270:40">++</operator></expr></incr>)</control> <block pos:start="1270:43" pos:end="1296:5">{<block_content pos:start="1271:9" pos:end="1295:10">
        <decl_stmt pos:start="1271:9" pos:end="1271:61"><decl pos:start="1271:9" pos:end="1271:60"><type pos:start="1271:9" pos:end="1271:27"><name pos:start="1271:9" pos:end="1271:25">AVCodecParameters</name> <modifier pos:start="1271:27" pos:end="1271:27">*</modifier></type><name pos:start="1271:28" pos:end="1271:32">codec</name> <init pos:start="1271:34" pos:end="1271:60">= <expr pos:start="1271:36" pos:end="1271:60"><name pos:start="1271:36" pos:end="1271:50"><name pos:start="1271:36" pos:end="1271:38">req</name><operator pos:start="1271:39" pos:end="1271:40">-&gt;</operator><name pos:start="1271:41" pos:end="1271:47">streams</name><index pos:start="1271:48" pos:end="1271:50">[<expr pos:start="1271:49" pos:end="1271:49"><name pos:start="1271:49" pos:end="1271:49">i</name></expr>]</index></name><operator pos:start="1271:51" pos:end="1271:52">-&gt;</operator><name pos:start="1271:53" pos:end="1271:60">codecpar</name></expr></init></decl>;</decl_stmt>

        <switch pos:start="1273:9" pos:end="1289:9">switch<condition pos:start="1273:15" pos:end="1273:24">(<expr pos:start="1273:16" pos:end="1273:23"><name pos:start="1273:16" pos:end="1273:23"><name pos:start="1273:16" pos:end="1273:20">rates</name><index pos:start="1273:21" pos:end="1273:23">[<expr pos:start="1273:22" pos:end="1273:22"><name pos:start="1273:22" pos:end="1273:22">i</name></expr>]</index></name></expr>)</condition> <block pos:start="1273:26" pos:end="1289:9">{<block_content pos:start="1274:13" pos:end="1288:22">
            <case pos:start="1274:13" pos:end="1274:19">case <expr pos:start="1274:18" pos:end="1274:18"><literal type="number" pos:start="1274:18" pos:end="1274:18">0</literal></expr>:</case>
                <expr_stmt pos:start="1275:17" pos:end="1275:65"><expr pos:start="1275:17" pos:end="1275:64"><name pos:start="1275:17" pos:end="1275:41"><name pos:start="1275:17" pos:end="1275:17">c</name><operator pos:start="1275:18" pos:end="1275:19">-&gt;</operator><name pos:start="1275:20" pos:end="1275:38">switch_feed_streams</name><index pos:start="1275:39" pos:end="1275:41">[<expr pos:start="1275:40" pos:end="1275:40"><name pos:start="1275:40" pos:end="1275:40">i</name></expr>]</index></name> <operator pos:start="1275:43" pos:end="1275:43">=</operator> <name pos:start="1275:45" pos:end="1275:64"><name pos:start="1275:45" pos:end="1275:47">req</name><operator pos:start="1275:48" pos:end="1275:49">-&gt;</operator><name pos:start="1275:50" pos:end="1275:61">feed_streams</name><index pos:start="1275:62" pos:end="1275:64">[<expr pos:start="1275:63" pos:end="1275:63"><name pos:start="1275:63" pos:end="1275:63">i</name></expr>]</index></name></expr>;</expr_stmt>
                <break pos:start="1276:17" pos:end="1276:22">break;</break>
            <case pos:start="1277:13" pos:end="1277:19">case <expr pos:start="1277:18" pos:end="1277:18"><literal type="number" pos:start="1277:18" pos:end="1277:18">1</literal></expr>:</case>
                <expr_stmt pos:start="1278:17" pos:end="1278:103"><expr pos:start="1278:17" pos:end="1278:102"><name pos:start="1278:17" pos:end="1278:41"><name pos:start="1278:17" pos:end="1278:17">c</name><operator pos:start="1278:18" pos:end="1278:19">-&gt;</operator><name pos:start="1278:20" pos:end="1278:38">switch_feed_streams</name><index pos:start="1278:39" pos:end="1278:41">[<expr pos:start="1278:40" pos:end="1278:40"><name pos:start="1278:40" pos:end="1278:40">i</name></expr>]</index></name> <operator pos:start="1278:43" pos:end="1278:43">=</operator> <call pos:start="1278:45" pos:end="1278:102"><name pos:start="1278:45" pos:end="1278:63">find_stream_in_feed</name><argument_list pos:start="1278:64" pos:end="1278:102">(<argument pos:start="1278:65" pos:end="1278:73"><expr pos:start="1278:65" pos:end="1278:73"><name pos:start="1278:65" pos:end="1278:73"><name pos:start="1278:65" pos:end="1278:67">req</name><operator pos:start="1278:68" pos:end="1278:69">-&gt;</operator><name pos:start="1278:70" pos:end="1278:73">feed</name></name></expr></argument>, <argument pos:start="1278:76" pos:end="1278:80"><expr pos:start="1278:76" pos:end="1278:80"><name pos:start="1278:76" pos:end="1278:80">codec</name></expr></argument>, <argument pos:start="1278:83" pos:end="1278:101"><expr pos:start="1278:83" pos:end="1278:101"><name pos:start="1278:83" pos:end="1278:97"><name pos:start="1278:83" pos:end="1278:87">codec</name><operator pos:start="1278:88" pos:end="1278:89">-&gt;</operator><name pos:start="1278:90" pos:end="1278:97">bit_rate</name></name> <operator pos:start="1278:99" pos:end="1278:99">/</operator> <literal type="number" pos:start="1278:101" pos:end="1278:101">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="1279:17" pos:end="1279:22">break;</break>
            <case pos:start="1280:13" pos:end="1280:19">case <expr pos:start="1280:18" pos:end="1280:18"><literal type="number" pos:start="1280:18" pos:end="1280:18">2</literal></expr>:</case>
                <comment type="block" pos:start="1281:17" pos:end="1281:39">/* Wants off or slow */</comment>
                <expr_stmt pos:start="1282:17" pos:end="1284:0"><expr pos:start="1282:17" pos:end="1282:102"><name pos:start="1282:17" pos:end="1282:41"><name pos:start="1282:17" pos:end="1282:17">c</name><operator pos:start="1282:18" pos:end="1282:19">-&gt;</operator><name pos:start="1282:20" pos:end="1282:38">switch_feed_streams</name><index pos:start="1282:39" pos:end="1282:41">[<expr pos:start="1282:40" pos:end="1282:40"><name pos:start="1282:40" pos:end="1282:40">i</name></expr>]</index></name> <operator pos:start="1282:43" pos:end="1282:43">=</operator> <call pos:start="1282:45" pos:end="1282:102"><name pos:start="1282:45" pos:end="1282:63">find_stream_in_feed</name><argument_list pos:start="1282:64" pos:end="1282:102">(<argument pos:start="1282:65" pos:end="1282:73"><expr pos:start="1282:65" pos:end="1282:73"><name pos:start="1282:65" pos:end="1282:73"><name pos:start="1282:65" pos:end="1282:67">req</name><operator pos:start="1282:68" pos:end="1282:69">-&gt;</operator><name pos:start="1282:70" pos:end="1282:73">feed</name></name></expr></argument>, <argument pos:start="1282:76" pos:end="1282:80"><expr pos:start="1282:76" pos:end="1282:80"><name pos:start="1282:76" pos:end="1282:80">codec</name></expr></argument>, <argument pos:start="1282:83" pos:end="1282:101"><expr pos:start="1282:83" pos:end="1282:101"><name pos:start="1282:83" pos:end="1282:97"><name pos:start="1282:83" pos:end="1282:87">codec</name><operator pos:start="1282:88" pos:end="1282:89">-&gt;</operator><name pos:start="1282:90" pos:end="1282:97">bit_rate</name></name> <operator pos:start="1282:99" pos:end="1282:99">/</operator> <literal type="number" pos:start="1282:101" pos:end="1282:101">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="1283:1" pos:end="1283:16">#<cpp:directive pos:start="1283:2" pos:end="1283:6">ifdef</cpp:directive> <name pos:start="1283:8" pos:end="1283:16">WANTS_OFF</name></cpp:ifdef>
                <comment type="block" pos:start="1284:17" pos:end="1284:79">/* This doesn't work well when it turns off the only stream! */</comment>
                <expr_stmt pos:start="1285:17" pos:end="1285:47"><expr pos:start="1285:17" pos:end="1285:46"><name pos:start="1285:17" pos:end="1285:41"><name pos:start="1285:17" pos:end="1285:17">c</name><operator pos:start="1285:18" pos:end="1285:19">-&gt;</operator><name pos:start="1285:20" pos:end="1285:38">switch_feed_streams</name><index pos:start="1285:39" pos:end="1285:41">[<expr pos:start="1285:40" pos:end="1285:40"><name pos:start="1285:40" pos:end="1285:40">i</name></expr>]</index></name> <operator pos:start="1285:43" pos:end="1285:43">=</operator> <operator pos:start="1285:45" pos:end="1285:45">-</operator><literal type="number" pos:start="1285:46" pos:end="1285:46">2</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="1286:17" pos:end="1288:0"><expr pos:start="1286:17" pos:end="1286:39"><name pos:start="1286:17" pos:end="1286:34"><name pos:start="1286:17" pos:end="1286:17">c</name><operator pos:start="1286:18" pos:end="1286:19">-&gt;</operator><name pos:start="1286:20" pos:end="1286:31">feed_streams</name><index pos:start="1286:32" pos:end="1286:34">[<expr pos:start="1286:33" pos:end="1286:33"><name pos:start="1286:33" pos:end="1286:33">i</name></expr>]</index></name> <operator pos:start="1286:36" pos:end="1286:36">=</operator> <operator pos:start="1286:38" pos:end="1286:38">-</operator><literal type="number" pos:start="1286:39" pos:end="1286:39">2</literal></expr>;</expr_stmt>
<cpp:endif pos:start="1287:1" pos:end="1287:6">#<cpp:directive pos:start="1287:2" pos:end="1287:6">endif</cpp:directive></cpp:endif>
                <break pos:start="1288:17" pos:end="1288:22">break;</break>
        </block_content>}</block></switch>

        <if_stmt pos:start="1291:9" pos:end="1295:10"><if pos:start="1291:9" pos:end="1295:10">if <condition pos:start="1291:12" pos:end="1291:44">(<expr pos:start="1291:13" pos:end="1291:42"><name pos:start="1291:13" pos:end="1291:37"><name pos:start="1291:13" pos:end="1291:13">c</name><operator pos:start="1291:14" pos:end="1291:15">-&gt;</operator><name pos:start="1291:16" pos:end="1291:34">switch_feed_streams</name><index pos:start="1291:35" pos:end="1291:37">[<expr pos:start="1291:36" pos:end="1291:36"><name pos:start="1291:36" pos:end="1291:36">i</name></expr>]</index></name> <operator pos:start="1291:39" pos:end="1291:40">&gt;=</operator> <literal type="number" pos:start="1291:42" pos:end="1291:42">0</literal></expr> )</condition><block pos:start="1291:45" pos:end="1295:10">{<block_content pos:start="1292:1" pos:end="1295:9">
<if_stmt pos:start="1292:1" pos:end="1295:9"><if pos:start="1292:1" pos:end="1295:9">if<condition pos:start="1292:3" pos:end="1293:60">(
            <expr pos:start="1293:13" pos:end="1293:59"><name pos:start="1293:13" pos:end="1293:37"><name pos:start="1293:13" pos:end="1293:13">c</name><operator pos:start="1293:14" pos:end="1293:15">-&gt;</operator><name pos:start="1293:16" pos:end="1293:34">switch_feed_streams</name><index pos:start="1293:35" pos:end="1293:37">[<expr pos:start="1293:36" pos:end="1293:36"><name pos:start="1293:36" pos:end="1293:36">i</name></expr>]</index></name> <operator pos:start="1293:39" pos:end="1293:40">!=</operator> <name pos:start="1293:42" pos:end="1293:59"><name pos:start="1293:42" pos:end="1293:42">c</name><operator pos:start="1293:43" pos:end="1293:44">-&gt;</operator><name pos:start="1293:45" pos:end="1293:56">feed_streams</name><index pos:start="1293:57" pos:end="1293:59">[<expr pos:start="1293:58" pos:end="1293:58"><name pos:start="1293:58" pos:end="1293:58">i</name></expr>]</index></name></expr>)</condition> <block pos:start="1293:62" pos:end="1295:9">{<block_content pos:start="1294:13" pos:end="1294:32">
            <expr_stmt pos:start="1294:13" pos:end="1294:32"><expr pos:start="1294:13" pos:end="1294:31"><name pos:start="1294:13" pos:end="1294:27">action_required</name> <operator pos:start="1294:29" pos:end="1294:29">=</operator> <literal type="number" pos:start="1294:31" pos:end="1294:31">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return pos:start="1298:5" pos:end="1298:27">return <expr pos:start="1298:12" pos:end="1298:26"><name pos:start="1298:12" pos:end="1298:26">action_required</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="1301:1" pos:end="1319:1"><type pos:start="1301:1" pos:end="1301:11"><specifier pos:start="1301:1" pos:end="1301:6">static</specifier> <name pos:start="1301:8" pos:end="1301:11">void</name></type> <name pos:start="1301:13" pos:end="1301:20">get_word</name><parameter_list pos:start="1301:21" pos:end="1301:62">(<parameter pos:start="1301:22" pos:end="1301:30"><decl pos:start="1301:22" pos:end="1301:30"><type pos:start="1301:22" pos:end="1301:30"><name pos:start="1301:22" pos:end="1301:25">char</name> <modifier pos:start="1301:27" pos:end="1301:27">*</modifier></type><name pos:start="1301:28" pos:end="1301:30">buf</name></decl></parameter>, <parameter pos:start="1301:33" pos:end="1301:44"><decl pos:start="1301:33" pos:end="1301:44"><type pos:start="1301:33" pos:end="1301:44"><name pos:start="1301:33" pos:end="1301:35">int</name></type> <name pos:start="1301:37" pos:end="1301:44">buf_size</name></decl></parameter>, <parameter pos:start="1301:47" pos:end="1301:61"><decl pos:start="1301:47" pos:end="1301:61"><type pos:start="1301:47" pos:end="1301:61"><specifier pos:start="1301:47" pos:end="1301:51">const</specifier> <name pos:start="1301:53" pos:end="1301:56">char</name> <modifier pos:start="1301:58" pos:end="1301:58">*</modifier><modifier pos:start="1301:59" pos:end="1301:59">*</modifier></type><name pos:start="1301:60" pos:end="1301:61">pp</name></decl></parameter>)</parameter_list>
<block pos:start="1302:1" pos:end="1319:1">{<block_content pos:start="1303:5" pos:end="1318:12">
    <decl_stmt pos:start="1303:5" pos:end="1303:18"><decl pos:start="1303:5" pos:end="1303:17"><type pos:start="1303:5" pos:end="1303:16"><specifier pos:start="1303:5" pos:end="1303:9">const</specifier> <name pos:start="1303:11" pos:end="1303:14">char</name> <modifier pos:start="1303:16" pos:end="1303:16">*</modifier></type><name pos:start="1303:17" pos:end="1303:17">p</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1304:5" pos:end="1307:0"><decl pos:start="1304:5" pos:end="1304:11"><type pos:start="1304:5" pos:end="1304:10"><name pos:start="1304:5" pos:end="1304:8">char</name> <modifier pos:start="1304:10" pos:end="1304:10">*</modifier></type><name pos:start="1304:11" pos:end="1304:11">q</name></decl>;</decl_stmt>

<cpp:define pos:start="1306:1" pos:end="1306:29">#<cpp:directive pos:start="1306:2" pos:end="1306:7">define</cpp:directive> <cpp:macro pos:start="1306:9" pos:end="1306:19"><name pos:start="1306:9" pos:end="1306:19">SPACE_CHARS</name></cpp:macro> <cpp:value pos:start="1306:21" pos:end="1306:29">" \t\r\n"</cpp:value></cpp:define>

    <expr_stmt pos:start="1308:5" pos:end="1308:12"><expr pos:start="1308:5" pos:end="1308:11"><name pos:start="1308:5" pos:end="1308:5">p</name> <operator pos:start="1308:7" pos:end="1308:7">=</operator> <operator pos:start="1308:9" pos:end="1308:9">*</operator><name pos:start="1308:10" pos:end="1308:11">pp</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1309:5" pos:end="1309:32"><expr pos:start="1309:5" pos:end="1309:31"><name pos:start="1309:5" pos:end="1309:5">p</name> <operator pos:start="1309:7" pos:end="1309:8">+=</operator> <call pos:start="1309:10" pos:end="1309:31"><name pos:start="1309:10" pos:end="1309:15">strspn</name><argument_list pos:start="1309:16" pos:end="1309:31">(<argument pos:start="1309:17" pos:end="1309:17"><expr pos:start="1309:17" pos:end="1309:17"><name pos:start="1309:17" pos:end="1309:17">p</name></expr></argument>, <argument pos:start="1309:20" pos:end="1309:30"><expr pos:start="1309:20" pos:end="1309:30"><name pos:start="1309:20" pos:end="1309:30">SPACE_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1310:5" pos:end="1310:12"><expr pos:start="1310:5" pos:end="1310:11"><name pos:start="1310:5" pos:end="1310:5">q</name> <operator pos:start="1310:7" pos:end="1310:7">=</operator> <name pos:start="1310:9" pos:end="1310:11">buf</name></expr>;</expr_stmt>
    <while pos:start="1311:5" pos:end="1315:5">while <condition pos:start="1311:11" pos:end="1311:41">(<expr pos:start="1311:12" pos:end="1311:40"><operator pos:start="1311:12" pos:end="1311:12">!</operator><call pos:start="1311:13" pos:end="1311:26"><name pos:start="1311:13" pos:end="1311:22">av_isspace</name><argument_list pos:start="1311:23" pos:end="1311:26">(<argument pos:start="1311:24" pos:end="1311:25"><expr pos:start="1311:24" pos:end="1311:25"><operator pos:start="1311:24" pos:end="1311:24">*</operator><name pos:start="1311:25" pos:end="1311:25">p</name></expr></argument>)</argument_list></call> <operator pos:start="1311:28" pos:end="1311:29">&amp;&amp;</operator> <operator pos:start="1311:31" pos:end="1311:31">*</operator><name pos:start="1311:32" pos:end="1311:32">p</name> <operator pos:start="1311:34" pos:end="1311:35">!=</operator> <literal type="char" pos:start="1311:37" pos:end="1311:40">'\0'</literal></expr>)</condition> <block pos:start="1311:43" pos:end="1315:5">{<block_content pos:start="1312:9" pos:end="1314:12">
        <if_stmt pos:start="1312:9" pos:end="1313:22"><if pos:start="1312:9" pos:end="1313:22">if <condition pos:start="1312:12" pos:end="1312:37">(<expr pos:start="1312:13" pos:end="1312:36"><operator pos:start="1312:13" pos:end="1312:13">(</operator><name pos:start="1312:14" pos:end="1312:14">q</name> <operator pos:start="1312:16" pos:end="1312:16">-</operator> <name pos:start="1312:18" pos:end="1312:20">buf</name><operator pos:start="1312:21" pos:end="1312:21">)</operator> <operator pos:start="1312:23" pos:end="1312:23">&lt;</operator> <name pos:start="1312:25" pos:end="1312:32">buf_size</name> <operator pos:start="1312:34" pos:end="1312:34">-</operator> <literal type="number" pos:start="1312:36" pos:end="1312:36">1</literal></expr>)</condition><block type="pseudo" pos:start="1313:13" pos:end="1313:22"><block_content pos:start="1313:13" pos:end="1313:22">
            <expr_stmt pos:start="1313:13" pos:end="1313:22"><expr pos:start="1313:13" pos:end="1313:21"><operator pos:start="1313:13" pos:end="1313:13">*</operator><name pos:start="1313:14" pos:end="1313:14">q</name><operator pos:start="1313:15" pos:end="1313:16">++</operator> <operator pos:start="1313:18" pos:end="1313:18">=</operator> <operator pos:start="1313:20" pos:end="1313:20">*</operator><name pos:start="1313:21" pos:end="1313:21">p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1314:9" pos:end="1314:12"><expr pos:start="1314:9" pos:end="1314:11"><name pos:start="1314:9" pos:end="1314:9">p</name><operator pos:start="1314:10" pos:end="1314:11">++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt pos:start="1316:5" pos:end="1317:18"><if pos:start="1316:5" pos:end="1317:18">if <condition pos:start="1316:8" pos:end="1316:21">(<expr pos:start="1316:9" pos:end="1316:20"><name pos:start="1316:9" pos:end="1316:16">buf_size</name> <operator pos:start="1316:18" pos:end="1316:18">&gt;</operator> <literal type="number" pos:start="1316:20" pos:end="1316:20">0</literal></expr>)</condition><block type="pseudo" pos:start="1317:9" pos:end="1317:18"><block_content pos:start="1317:9" pos:end="1317:18">
        <expr_stmt pos:start="1317:9" pos:end="1317:18"><expr pos:start="1317:9" pos:end="1317:17"><operator pos:start="1317:9" pos:end="1317:9">*</operator><name pos:start="1317:10" pos:end="1317:10">q</name> <operator pos:start="1317:12" pos:end="1317:12">=</operator> <literal type="char" pos:start="1317:14" pos:end="1317:17">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="1318:5" pos:end="1318:12"><expr pos:start="1318:5" pos:end="1318:11"><operator pos:start="1318:5" pos:end="1318:5">*</operator><name pos:start="1318:6" pos:end="1318:7">pp</name> <operator pos:start="1318:9" pos:end="1318:9">=</operator> <name pos:start="1318:11" pos:end="1318:11">p</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="1321:1" pos:end="1359:1"><type pos:start="1321:1" pos:end="1321:28"><specifier pos:start="1321:1" pos:end="1321:6">static</specifier> <name pos:start="1321:8" pos:end="1321:27">FFServerIPAddressACL</name><modifier pos:start="1321:28" pos:end="1321:28">*</modifier></type> <name pos:start="1321:30" pos:end="1321:46">parse_dynamic_acl</name><parameter_list pos:start="1321:47" pos:end="1322:62">(<parameter pos:start="1321:48" pos:end="1321:69"><decl pos:start="1321:48" pos:end="1321:69"><type pos:start="1321:48" pos:end="1321:69"><name pos:start="1321:48" pos:end="1321:61">FFServerStream</name> <modifier pos:start="1321:63" pos:end="1321:63">*</modifier></type><name pos:start="1321:64" pos:end="1321:69">stream</name></decl></parameter>,
                                               <parameter pos:start="1322:48" pos:end="1322:61"><decl pos:start="1322:48" pos:end="1322:61"><type pos:start="1322:48" pos:end="1322:61"><name pos:start="1322:48" pos:end="1322:58">HTTPContext</name> <modifier pos:start="1322:60" pos:end="1322:60">*</modifier></type><name pos:start="1322:61" pos:end="1322:61">c</name></decl></parameter>)</parameter_list>
<block pos:start="1323:1" pos:end="1359:1">{<block_content pos:start="1324:5" pos:end="1358:15">
    <decl_stmt pos:start="1324:5" pos:end="1324:12"><decl pos:start="1324:5" pos:end="1324:11"><type pos:start="1324:5" pos:end="1324:9"><name pos:start="1324:5" pos:end="1324:8">FILE</name><modifier pos:start="1324:9" pos:end="1324:9">*</modifier></type> <name pos:start="1324:11" pos:end="1324:11">f</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1325:5" pos:end="1325:20"><decl pos:start="1325:5" pos:end="1325:19"><type pos:start="1325:5" pos:end="1325:8"><name pos:start="1325:5" pos:end="1325:8">char</name></type> <name pos:start="1325:10" pos:end="1325:19"><name pos:start="1325:10" pos:end="1325:13">line</name><index pos:start="1325:14" pos:end="1325:19">[<expr pos:start="1325:15" pos:end="1325:18"><literal type="number" pos:start="1325:15" pos:end="1325:18">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="1326:5" pos:end="1326:20"><decl pos:start="1326:5" pos:end="1326:19"><type pos:start="1326:5" pos:end="1326:8"><name pos:start="1326:5" pos:end="1326:8">char</name></type>  <name pos:start="1326:11" pos:end="1326:19"><name pos:start="1326:11" pos:end="1326:13">cmd</name><index pos:start="1326:14" pos:end="1326:19">[<expr pos:start="1326:15" pos:end="1326:18"><literal type="number" pos:start="1326:15" pos:end="1326:18">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="1327:5" pos:end="1327:37"><decl pos:start="1327:5" pos:end="1327:36"><type pos:start="1327:5" pos:end="1327:26"><name pos:start="1327:5" pos:end="1327:24">FFServerIPAddressACL</name> <modifier pos:start="1327:26" pos:end="1327:26">*</modifier></type><name pos:start="1327:27" pos:end="1327:29">acl</name> <init pos:start="1327:31" pos:end="1327:36">= <expr pos:start="1327:33" pos:end="1327:36"><name pos:start="1327:33" pos:end="1327:36">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1328:5" pos:end="1328:21"><decl pos:start="1328:5" pos:end="1328:20"><type pos:start="1328:5" pos:end="1328:7"><name pos:start="1328:5" pos:end="1328:7">int</name></type> <name pos:start="1328:9" pos:end="1328:16">line_num</name> <init pos:start="1328:18" pos:end="1328:20">= <expr pos:start="1328:20" pos:end="1328:20"><literal type="number" pos:start="1328:20" pos:end="1328:20">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1329:5" pos:end="1329:18"><decl pos:start="1329:5" pos:end="1329:17"><type pos:start="1329:5" pos:end="1329:16"><specifier pos:start="1329:5" pos:end="1329:9">const</specifier> <name pos:start="1329:11" pos:end="1329:14">char</name> <modifier pos:start="1329:16" pos:end="1329:16">*</modifier></type><name pos:start="1329:17" pos:end="1329:17">p</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1331:5" pos:end="1331:40"><expr pos:start="1331:5" pos:end="1331:39"><name pos:start="1331:5" pos:end="1331:5">f</name> <operator pos:start="1331:7" pos:end="1331:7">=</operator> <call pos:start="1331:9" pos:end="1331:39"><name pos:start="1331:9" pos:end="1331:13">fopen</name><argument_list pos:start="1331:14" pos:end="1331:39">(<argument pos:start="1331:15" pos:end="1331:33"><expr pos:start="1331:15" pos:end="1331:33"><name pos:start="1331:15" pos:end="1331:33"><name pos:start="1331:15" pos:end="1331:20">stream</name><operator pos:start="1331:21" pos:end="1331:22">-&gt;</operator><name pos:start="1331:23" pos:end="1331:33">dynamic_acl</name></name></expr></argument>, <argument pos:start="1331:36" pos:end="1331:38"><expr pos:start="1331:36" pos:end="1331:38"><literal type="string" pos:start="1331:36" pos:end="1331:38">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1332:5" pos:end="1335:5"><if pos:start="1332:5" pos:end="1335:5">if <condition pos:start="1332:8" pos:end="1332:11">(<expr pos:start="1332:9" pos:end="1332:10"><operator pos:start="1332:9" pos:end="1332:9">!</operator><name pos:start="1332:10" pos:end="1332:10">f</name></expr>)</condition> <block pos:start="1332:13" pos:end="1335:5">{<block_content pos:start="1333:9" pos:end="1334:20">
        <expr_stmt pos:start="1333:9" pos:end="1333:36"><expr pos:start="1333:9" pos:end="1333:35"><call pos:start="1333:9" pos:end="1333:35"><name pos:start="1333:9" pos:end="1333:14">perror</name><argument_list pos:start="1333:15" pos:end="1333:35">(<argument pos:start="1333:16" pos:end="1333:34"><expr pos:start="1333:16" pos:end="1333:34"><name pos:start="1333:16" pos:end="1333:34"><name pos:start="1333:16" pos:end="1333:21">stream</name><operator pos:start="1333:22" pos:end="1333:23">-&gt;</operator><name pos:start="1333:24" pos:end="1333:34">dynamic_acl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1334:9" pos:end="1334:20">return <expr pos:start="1334:16" pos:end="1334:19"><name pos:start="1334:16" pos:end="1334:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1337:5" pos:end="1337:51"><expr pos:start="1337:5" pos:end="1337:50"><name pos:start="1337:5" pos:end="1337:7">acl</name> <operator pos:start="1337:9" pos:end="1337:9">=</operator> <call pos:start="1337:11" pos:end="1337:50"><name pos:start="1337:11" pos:end="1337:20">av_mallocz</name><argument_list pos:start="1337:21" pos:end="1337:50">(<argument pos:start="1337:22" pos:end="1337:49"><expr pos:start="1337:22" pos:end="1337:49"><sizeof pos:start="1337:22" pos:end="1337:49">sizeof<argument_list pos:start="1337:28" pos:end="1337:49">(<argument pos:start="1337:29" pos:end="1337:48"><expr pos:start="1337:29" pos:end="1337:48"><name pos:start="1337:29" pos:end="1337:48">FFServerIPAddressACL</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1338:5" pos:end="1341:5"><if pos:start="1338:5" pos:end="1341:5">if <condition pos:start="1338:8" pos:end="1338:13">(<expr pos:start="1338:9" pos:end="1338:12"><operator pos:start="1338:9" pos:end="1338:9">!</operator><name pos:start="1338:10" pos:end="1338:12">acl</name></expr>)</condition> <block pos:start="1338:15" pos:end="1341:5">{<block_content pos:start="1339:9" pos:end="1340:20">
        <expr_stmt pos:start="1339:9" pos:end="1339:18"><expr pos:start="1339:9" pos:end="1339:17"><call pos:start="1339:9" pos:end="1339:17"><name pos:start="1339:9" pos:end="1339:14">fclose</name><argument_list pos:start="1339:15" pos:end="1339:17">(<argument pos:start="1339:16" pos:end="1339:16"><expr pos:start="1339:16" pos:end="1339:16"><name pos:start="1339:16" pos:end="1339:16">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1340:9" pos:end="1340:20">return <expr pos:start="1340:16" pos:end="1340:19"><name pos:start="1340:16" pos:end="1340:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1343:5" pos:end="1343:19">/* Build ACL */</comment>
    <while pos:start="1344:5" pos:end="1356:5">while <condition pos:start="1344:11" pos:end="1344:40">(<expr pos:start="1344:12" pos:end="1344:39"><call pos:start="1344:12" pos:end="1344:39"><name pos:start="1344:12" pos:end="1344:16">fgets</name><argument_list pos:start="1344:17" pos:end="1344:39">(<argument pos:start="1344:18" pos:end="1344:21"><expr pos:start="1344:18" pos:end="1344:21"><name pos:start="1344:18" pos:end="1344:21">line</name></expr></argument>, <argument pos:start="1344:24" pos:end="1344:35"><expr pos:start="1344:24" pos:end="1344:35"><sizeof pos:start="1344:24" pos:end="1344:35">sizeof<argument_list pos:start="1344:30" pos:end="1344:35">(<argument pos:start="1344:31" pos:end="1344:34"><expr pos:start="1344:31" pos:end="1344:34"><name pos:start="1344:31" pos:end="1344:34">line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1344:38" pos:end="1344:38"><expr pos:start="1344:38" pos:end="1344:38"><name pos:start="1344:38" pos:end="1344:38">f</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1344:42" pos:end="1356:5">{<block_content pos:start="1345:9" pos:end="1355:45">
        <expr_stmt pos:start="1345:9" pos:end="1345:19"><expr pos:start="1345:9" pos:end="1345:18"><name pos:start="1345:9" pos:end="1345:16">line_num</name><operator pos:start="1345:17" pos:end="1345:18">++</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="1346:9" pos:end="1346:17"><expr pos:start="1346:9" pos:end="1346:16"><name pos:start="1346:9" pos:end="1346:9">p</name> <operator pos:start="1346:11" pos:end="1346:11">=</operator> <name pos:start="1346:13" pos:end="1346:16">line</name></expr>;</expr_stmt>
        <while pos:start="1347:9" pos:end="1348:16">while <condition pos:start="1347:15" pos:end="1347:30">(<expr pos:start="1347:16" pos:end="1347:29"><call pos:start="1347:16" pos:end="1347:29"><name pos:start="1347:16" pos:end="1347:25">av_isspace</name><argument_list pos:start="1347:26" pos:end="1347:29">(<argument pos:start="1347:27" pos:end="1347:28"><expr pos:start="1347:27" pos:end="1347:28"><operator pos:start="1347:27" pos:end="1347:27">*</operator><name pos:start="1347:28" pos:end="1347:28">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1348:13" pos:end="1348:16"><block_content pos:start="1348:13" pos:end="1348:16">
            <expr_stmt pos:start="1348:13" pos:end="1348:16"><expr pos:start="1348:13" pos:end="1348:15"><name pos:start="1348:13" pos:end="1348:13">p</name><operator pos:start="1348:14" pos:end="1348:15">++</operator></expr>;</expr_stmt></block_content></block></while>
        <if_stmt pos:start="1349:9" pos:end="1350:21"><if pos:start="1349:9" pos:end="1350:21">if <condition pos:start="1349:12" pos:end="1349:36">(<expr pos:start="1349:13" pos:end="1349:35"><operator pos:start="1349:13" pos:end="1349:13">*</operator><name pos:start="1349:14" pos:end="1349:14">p</name> <operator pos:start="1349:16" pos:end="1349:17">==</operator> <literal type="char" pos:start="1349:19" pos:end="1349:22">'\0'</literal> <operator pos:start="1349:24" pos:end="1349:25">||</operator> <operator pos:start="1349:27" pos:end="1349:27">*</operator><name pos:start="1349:28" pos:end="1349:28">p</name> <operator pos:start="1349:30" pos:end="1349:31">==</operator> <literal type="char" pos:start="1349:33" pos:end="1349:35">'#'</literal></expr>)</condition><block type="pseudo" pos:start="1350:13" pos:end="1350:21"><block_content pos:start="1350:13" pos:end="1350:21">
            <continue pos:start="1350:13" pos:end="1350:21">continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt pos:start="1351:9" pos:end="1351:47"><expr pos:start="1351:9" pos:end="1351:46"><call pos:start="1351:9" pos:end="1351:46"><name pos:start="1351:9" pos:end="1351:24">ffserver_get_arg</name><argument_list pos:start="1351:25" pos:end="1351:46">(<argument pos:start="1351:26" pos:end="1351:28"><expr pos:start="1351:26" pos:end="1351:28"><name pos:start="1351:26" pos:end="1351:28">cmd</name></expr></argument>, <argument pos:start="1351:31" pos:end="1351:41"><expr pos:start="1351:31" pos:end="1351:41"><sizeof pos:start="1351:31" pos:end="1351:41">sizeof<argument_list pos:start="1351:37" pos:end="1351:41">(<argument pos:start="1351:38" pos:end="1351:40"><expr pos:start="1351:38" pos:end="1351:40"><name pos:start="1351:38" pos:end="1351:40">cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1351:44" pos:end="1351:45"><expr pos:start="1351:44" pos:end="1351:45"><operator pos:start="1351:44" pos:end="1351:44">&amp;</operator><name pos:start="1351:45" pos:end="1351:45">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1353:9" pos:end="1355:45"><if pos:start="1353:9" pos:end="1355:45">if <condition pos:start="1353:12" pos:end="1353:39">(<expr pos:start="1353:13" pos:end="1353:38"><operator pos:start="1353:13" pos:end="1353:13">!</operator><call pos:start="1353:14" pos:end="1353:38"><name pos:start="1353:14" pos:end="1353:26">av_strcasecmp</name><argument_list pos:start="1353:27" pos:end="1353:38">(<argument pos:start="1353:28" pos:end="1353:30"><expr pos:start="1353:28" pos:end="1353:30"><name pos:start="1353:28" pos:end="1353:30">cmd</name></expr></argument>, <argument pos:start="1353:33" pos:end="1353:37"><expr pos:start="1353:33" pos:end="1353:37"><literal type="string" pos:start="1353:33" pos:end="1353:37">"ACL"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1354:13" pos:end="1355:45"><block_content pos:start="1354:13" pos:end="1355:45">
            <expr_stmt pos:start="1354:13" pos:end="1355:45"><expr pos:start="1354:13" pos:end="1355:44"><call pos:start="1354:13" pos:end="1355:44"><name pos:start="1354:13" pos:end="1354:34">ffserver_parse_acl_row</name><argument_list pos:start="1354:35" pos:end="1355:44">(<argument pos:start="1354:36" pos:end="1354:39"><expr pos:start="1354:36" pos:end="1354:39"><name pos:start="1354:36" pos:end="1354:39">NULL</name></expr></argument>, <argument pos:start="1354:42" pos:end="1354:45"><expr pos:start="1354:42" pos:end="1354:45"><name pos:start="1354:42" pos:end="1354:45">NULL</name></expr></argument>, <argument pos:start="1354:48" pos:end="1354:50"><expr pos:start="1354:48" pos:end="1354:50"><name pos:start="1354:48" pos:end="1354:50">acl</name></expr></argument>, <argument pos:start="1354:53" pos:end="1354:53"><expr pos:start="1354:53" pos:end="1354:53"><name pos:start="1354:53" pos:end="1354:53">p</name></expr></argument>, <argument pos:start="1354:56" pos:end="1354:74"><expr pos:start="1354:56" pos:end="1354:74"><name pos:start="1354:56" pos:end="1354:74"><name pos:start="1354:56" pos:end="1354:61">stream</name><operator pos:start="1354:62" pos:end="1354:63">-&gt;</operator><name pos:start="1354:64" pos:end="1354:74">dynamic_acl</name></name></expr></argument>,
                                   <argument pos:start="1355:36" pos:end="1355:43"><expr pos:start="1355:36" pos:end="1355:43"><name pos:start="1355:36" pos:end="1355:43">line_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt pos:start="1357:5" pos:end="1357:14"><expr pos:start="1357:5" pos:end="1357:13"><call pos:start="1357:5" pos:end="1357:13"><name pos:start="1357:5" pos:end="1357:10">fclose</name><argument_list pos:start="1357:11" pos:end="1357:13">(<argument pos:start="1357:12" pos:end="1357:12"><expr pos:start="1357:12" pos:end="1357:12"><name pos:start="1357:12" pos:end="1357:12">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="1358:5" pos:end="1358:15">return <expr pos:start="1358:12" pos:end="1358:14"><name pos:start="1358:12" pos:end="1358:14">acl</name></expr>;</return>
</block_content>}</block></function>


<function pos:start="1362:1" pos:end="1372:1"><type pos:start="1362:1" pos:end="1362:11"><specifier pos:start="1362:1" pos:end="1362:6">static</specifier> <name pos:start="1362:8" pos:end="1362:11">void</name></type> <name pos:start="1362:13" pos:end="1362:25">free_acl_list</name><parameter_list pos:start="1362:26" pos:end="1362:55">(<parameter pos:start="1362:27" pos:end="1362:54"><decl pos:start="1362:27" pos:end="1362:54"><type pos:start="1362:27" pos:end="1362:48"><name pos:start="1362:27" pos:end="1362:46">FFServerIPAddressACL</name> <modifier pos:start="1362:48" pos:end="1362:48">*</modifier></type><name pos:start="1362:49" pos:end="1362:54">in_acl</name></decl></parameter>)</parameter_list>
<block pos:start="1363:1" pos:end="1372:1">{<block_content pos:start="1364:5" pos:end="1371:5">
    <decl_stmt pos:start="1364:5" pos:end="1364:39"><decl pos:start="1364:5" pos:end="1364:30"><type pos:start="1364:5" pos:end="1364:26"><name pos:start="1364:5" pos:end="1364:24">FFServerIPAddressACL</name> <modifier pos:start="1364:26" pos:end="1364:26">*</modifier></type><name pos:start="1364:27" pos:end="1364:30">pacl</name></decl>, <decl pos:start="1364:33" pos:end="1364:38"><type ref="prev" pos:start="1364:5" pos:end="1364:26"><modifier pos:start="1364:33" pos:end="1364:33">*</modifier></type><name pos:start="1364:34" pos:end="1364:38">pacl2</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1366:5" pos:end="1366:18"><expr pos:start="1366:5" pos:end="1366:17"><name pos:start="1366:5" pos:end="1366:8">pacl</name> <operator pos:start="1366:10" pos:end="1366:10">=</operator> <name pos:start="1366:12" pos:end="1366:17">in_acl</name></expr>;</expr_stmt>
    <while pos:start="1367:5" pos:end="1371:5">while<condition pos:start="1367:10" pos:end="1367:15">(<expr pos:start="1367:11" pos:end="1367:14"><name pos:start="1367:11" pos:end="1367:14">pacl</name></expr>)</condition> <block pos:start="1367:17" pos:end="1371:5">{<block_content pos:start="1368:9" pos:end="1370:24">
        <expr_stmt pos:start="1368:9" pos:end="1368:21"><expr pos:start="1368:9" pos:end="1368:20"><name pos:start="1368:9" pos:end="1368:13">pacl2</name> <operator pos:start="1368:15" pos:end="1368:15">=</operator> <name pos:start="1368:17" pos:end="1368:20">pacl</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1369:9" pos:end="1369:26"><expr pos:start="1369:9" pos:end="1369:25"><name pos:start="1369:9" pos:end="1369:12">pacl</name> <operator pos:start="1369:14" pos:end="1369:14">=</operator> <name pos:start="1369:16" pos:end="1369:25"><name pos:start="1369:16" pos:end="1369:19">pacl</name><operator pos:start="1369:20" pos:end="1369:21">-&gt;</operator><name pos:start="1369:22" pos:end="1369:25">next</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="1370:9" pos:end="1370:24"><expr pos:start="1370:9" pos:end="1370:23"><call pos:start="1370:9" pos:end="1370:23"><name pos:start="1370:9" pos:end="1370:16">av_freep</name><argument_list pos:start="1370:17" pos:end="1370:23">(<argument pos:start="1370:18" pos:end="1370:22"><expr pos:start="1370:18" pos:end="1370:22"><name pos:start="1370:18" pos:end="1370:22">pacl2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function pos:start="1374:1" pos:end="1390:1"><type pos:start="1374:1" pos:end="1374:10"><specifier pos:start="1374:1" pos:end="1374:6">static</specifier> <name pos:start="1374:8" pos:end="1374:10">int</name></type> <name pos:start="1374:12" pos:end="1374:28">validate_acl_list</name><parameter_list pos:start="1374:29" pos:end="1374:74">(<parameter pos:start="1374:30" pos:end="1374:57"><decl pos:start="1374:30" pos:end="1374:57"><type pos:start="1374:30" pos:end="1374:57"><name pos:start="1374:30" pos:end="1374:49">FFServerIPAddressACL</name> <modifier pos:start="1374:51" pos:end="1374:51">*</modifier></type><name pos:start="1374:52" pos:end="1374:57">in_acl</name></decl></parameter>, <parameter pos:start="1374:60" pos:end="1374:73"><decl pos:start="1374:60" pos:end="1374:73"><type pos:start="1374:60" pos:end="1374:73"><name pos:start="1374:60" pos:end="1374:70">HTTPContext</name> <modifier pos:start="1374:72" pos:end="1374:72">*</modifier></type><name pos:start="1374:73" pos:end="1374:73">c</name></decl></parameter>)</parameter_list>
<block pos:start="1375:1" pos:end="1390:1">{<block_content pos:start="1376:5" pos:end="1389:44">
    <decl_stmt pos:start="1376:5" pos:end="1376:55"><decl pos:start="1376:5" pos:end="1376:54"><type pos:start="1376:5" pos:end="1376:32"><name pos:start="1376:5" pos:end="1376:32"><name pos:start="1376:5" pos:end="1376:8">enum</name> <name pos:start="1376:10" pos:end="1376:32">FFServerIPAddressAction</name></name></type> <name pos:start="1376:34" pos:end="1376:44">last_action</name> <init pos:start="1376:46" pos:end="1376:54">= <expr pos:start="1376:48" pos:end="1376:54"><name pos:start="1376:48" pos:end="1376:54">IP_DENY</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1377:5" pos:end="1377:30"><decl pos:start="1377:5" pos:end="1377:29"><type pos:start="1377:5" pos:end="1377:26"><name pos:start="1377:5" pos:end="1377:24">FFServerIPAddressACL</name> <modifier pos:start="1377:26" pos:end="1377:26">*</modifier></type><name pos:start="1377:27" pos:end="1377:29">acl</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1378:5" pos:end="1378:49"><decl pos:start="1378:5" pos:end="1378:48"><type pos:start="1378:5" pos:end="1378:20"><name pos:start="1378:5" pos:end="1378:18"><name pos:start="1378:5" pos:end="1378:10">struct</name> <name pos:start="1378:12" pos:end="1378:18">in_addr</name></name> <modifier pos:start="1378:20" pos:end="1378:20">*</modifier></type><name pos:start="1378:21" pos:end="1378:23">src</name> <init pos:start="1378:25" pos:end="1378:48">= <expr pos:start="1378:27" pos:end="1378:48"><operator pos:start="1378:27" pos:end="1378:27">&amp;</operator><name pos:start="1378:28" pos:end="1378:48"><name pos:start="1378:28" pos:end="1378:28">c</name><operator pos:start="1378:29" pos:end="1378:30">-&gt;</operator><name pos:start="1378:31" pos:end="1378:39">from_addr</name><operator pos:start="1378:40" pos:end="1378:40">.</operator><name pos:start="1378:41" pos:end="1378:48">sin_addr</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1379:5" pos:end="1379:41"><decl pos:start="1379:5" pos:end="1379:40"><type pos:start="1379:5" pos:end="1379:17"><name pos:start="1379:5" pos:end="1379:12">unsigned</name> <name pos:start="1379:14" pos:end="1379:17">long</name></type> <name pos:start="1379:19" pos:end="1379:26">src_addr</name> <init pos:start="1379:28" pos:end="1379:40">= <expr pos:start="1379:30" pos:end="1379:40"><name pos:start="1379:30" pos:end="1379:40"><name pos:start="1379:30" pos:end="1379:32">src</name><operator pos:start="1379:33" pos:end="1379:34">-&gt;</operator><name pos:start="1379:35" pos:end="1379:40">s_addr</name></name></expr></init></decl>;</decl_stmt>

    <for pos:start="1381:5" pos:end="1386:5">for <control pos:start="1381:9" pos:end="1381:44">(<init pos:start="1381:10" pos:end="1381:22"><expr pos:start="1381:10" pos:end="1381:21"><name pos:start="1381:10" pos:end="1381:12">acl</name> <operator pos:start="1381:14" pos:end="1381:14">=</operator> <name pos:start="1381:16" pos:end="1381:21">in_acl</name></expr>;</init> <condition pos:start="1381:24" pos:end="1381:27"><expr pos:start="1381:24" pos:end="1381:26"><name pos:start="1381:24" pos:end="1381:26">acl</name></expr>;</condition> <incr pos:start="1381:29" pos:end="1381:43"><expr pos:start="1381:29" pos:end="1381:43"><name pos:start="1381:29" pos:end="1381:31">acl</name> <operator pos:start="1381:33" pos:end="1381:33">=</operator> <name pos:start="1381:35" pos:end="1381:43"><name pos:start="1381:35" pos:end="1381:37">acl</name><operator pos:start="1381:38" pos:end="1381:39">-&gt;</operator><name pos:start="1381:40" pos:end="1381:43">next</name></name></expr></incr>)</control> <block pos:start="1381:46" pos:end="1386:5">{<block_content pos:start="1382:9" pos:end="1385:34">
        <if_stmt pos:start="1382:9" pos:end="1384:54"><if pos:start="1382:9" pos:end="1384:54">if <condition pos:start="1382:12" pos:end="1382:43">(<expr pos:start="1382:13" pos:end="1382:41"><name pos:start="1382:13" pos:end="1382:20">src_addr</name> <operator pos:start="1382:22" pos:end="1382:23">&gt;=</operator> <name pos:start="1382:25" pos:end="1382:41"><name pos:start="1382:25" pos:end="1382:27">acl</name><operator pos:start="1382:28" pos:end="1382:29">-&gt;</operator><name pos:start="1382:30" pos:end="1382:34">first</name><operator pos:start="1382:35" pos:end="1382:35">.</operator><name pos:start="1382:36" pos:end="1382:41">s_addr</name></name></expr> )</condition><block pos:start="1382:44" pos:end="1384:54">{<block_content pos:start="1383:1" pos:end="1384:53">
<if_stmt pos:start="1383:1" pos:end="1384:53"><if pos:start="1383:1" pos:end="1384:53">if<condition pos:start="1383:3" pos:end="1383:33">( <expr pos:start="1383:5" pos:end="1383:32"><name pos:start="1383:5" pos:end="1383:12">src_addr</name> <operator pos:start="1383:14" pos:end="1383:15">&lt;=</operator> <name pos:start="1383:17" pos:end="1383:32"><name pos:start="1383:17" pos:end="1383:19">acl</name><operator pos:start="1383:20" pos:end="1383:21">-&gt;</operator><name pos:start="1383:22" pos:end="1383:25">last</name><operator pos:start="1383:26" pos:end="1383:26">.</operator><name pos:start="1383:27" pos:end="1383:32">s_addr</name></name></expr>)</condition><block type="pseudo" pos:start="1384:13" pos:end="1384:53"><block_content pos:start="1384:13" pos:end="1384:53">
            <return pos:start="1384:13" pos:end="1384:53">return <expr pos:start="1384:20" pos:end="1384:52"><ternary pos:start="1384:20" pos:end="1384:52"><condition pos:start="1384:20" pos:end="1384:46"><expr pos:start="1384:20" pos:end="1384:44"><operator pos:start="1384:20" pos:end="1384:20">(</operator><name pos:start="1384:21" pos:end="1384:31"><name pos:start="1384:21" pos:end="1384:23">acl</name><operator pos:start="1384:24" pos:end="1384:25">-&gt;</operator><name pos:start="1384:26" pos:end="1384:31">action</name></name> <operator pos:start="1384:33" pos:end="1384:34">==</operator> <name pos:start="1384:36" pos:end="1384:43">IP_ALLOW</name><operator pos:start="1384:44" pos:end="1384:44">)</operator></expr> ?</condition><then pos:start="1384:48" pos:end="1384:48"> <expr pos:start="1384:48" pos:end="1384:48"><literal type="number" pos:start="1384:48" pos:end="1384:48">1</literal></expr> </then><else pos:start="1384:50" pos:end="1384:52">: <expr pos:start="1384:52" pos:end="1384:52"><literal type="number" pos:start="1384:52" pos:end="1384:52">0</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt></block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="1385:9" pos:end="1385:34"><expr pos:start="1385:9" pos:end="1385:33"><name pos:start="1385:9" pos:end="1385:19">last_action</name> <operator pos:start="1385:21" pos:end="1385:21">=</operator> <name pos:start="1385:23" pos:end="1385:33"><name pos:start="1385:23" pos:end="1385:25">acl</name><operator pos:start="1385:26" pos:end="1385:27">-&gt;</operator><name pos:start="1385:28" pos:end="1385:33">action</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block" pos:start="1388:5" pos:end="1388:56">/* Nothing matched, so return not the last action */</comment>
    <return pos:start="1389:5" pos:end="1389:44">return <expr pos:start="1389:12" pos:end="1389:43"><ternary pos:start="1389:12" pos:end="1389:43"><condition pos:start="1389:12" pos:end="1389:37"><expr pos:start="1389:12" pos:end="1389:35"><operator pos:start="1389:12" pos:end="1389:12">(</operator><name pos:start="1389:13" pos:end="1389:23">last_action</name> <operator pos:start="1389:25" pos:end="1389:26">==</operator> <name pos:start="1389:28" pos:end="1389:34">IP_DENY</name><operator pos:start="1389:35" pos:end="1389:35">)</operator></expr> ?</condition><then pos:start="1389:39" pos:end="1389:39"> <expr pos:start="1389:39" pos:end="1389:39"><literal type="number" pos:start="1389:39" pos:end="1389:39">1</literal></expr> </then><else pos:start="1389:41" pos:end="1389:43">: <expr pos:start="1389:43" pos:end="1389:43"><literal type="number" pos:start="1389:43" pos:end="1389:43">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function pos:start="1392:1" pos:end="1407:1"><type pos:start="1392:1" pos:end="1392:10"><specifier pos:start="1392:1" pos:end="1392:6">static</specifier> <name pos:start="1392:8" pos:end="1392:10">int</name></type> <name pos:start="1392:12" pos:end="1392:23">validate_acl</name><parameter_list pos:start="1392:24" pos:end="1392:63">(<parameter pos:start="1392:25" pos:end="1392:46"><decl pos:start="1392:25" pos:end="1392:46"><type pos:start="1392:25" pos:end="1392:46"><name pos:start="1392:25" pos:end="1392:38">FFServerStream</name> <modifier pos:start="1392:40" pos:end="1392:40">*</modifier></type><name pos:start="1392:41" pos:end="1392:46">stream</name></decl></parameter>, <parameter pos:start="1392:49" pos:end="1392:62"><decl pos:start="1392:49" pos:end="1392:62"><type pos:start="1392:49" pos:end="1392:62"><name pos:start="1392:49" pos:end="1392:59">HTTPContext</name> <modifier pos:start="1392:61" pos:end="1392:61">*</modifier></type><name pos:start="1392:62" pos:end="1392:62">c</name></decl></parameter>)</parameter_list>
<block pos:start="1393:1" pos:end="1407:1">{<block_content pos:start="1394:5" pos:end="1406:15">
    <decl_stmt pos:start="1394:5" pos:end="1394:16"><decl pos:start="1394:5" pos:end="1394:15"><type pos:start="1394:5" pos:end="1394:7"><name pos:start="1394:5" pos:end="1394:7">int</name></type> <name pos:start="1394:9" pos:end="1394:11">ret</name> <init pos:start="1394:13" pos:end="1394:15">= <expr pos:start="1394:15" pos:end="1394:15"><literal type="number" pos:start="1394:15" pos:end="1394:15">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1395:5" pos:end="1395:30"><decl pos:start="1395:5" pos:end="1395:29"><type pos:start="1395:5" pos:end="1395:26"><name pos:start="1395:5" pos:end="1395:24">FFServerIPAddressACL</name> <modifier pos:start="1395:26" pos:end="1395:26">*</modifier></type><name pos:start="1395:27" pos:end="1395:29">acl</name></decl>;</decl_stmt>

    <comment type="block" pos:start="1397:5" pos:end="1397:64">/* if stream-&gt;acl is null validate_acl_list will return 1 */</comment>
    <expr_stmt pos:start="1398:5" pos:end="1398:44"><expr pos:start="1398:5" pos:end="1398:43"><name pos:start="1398:5" pos:end="1398:7">ret</name> <operator pos:start="1398:9" pos:end="1398:9">=</operator> <call pos:start="1398:11" pos:end="1398:43"><name pos:start="1398:11" pos:end="1398:27">validate_acl_list</name><argument_list pos:start="1398:28" pos:end="1398:43">(<argument pos:start="1398:29" pos:end="1398:39"><expr pos:start="1398:29" pos:end="1398:39"><name pos:start="1398:29" pos:end="1398:39"><name pos:start="1398:29" pos:end="1398:34">stream</name><operator pos:start="1398:35" pos:end="1398:36">-&gt;</operator><name pos:start="1398:37" pos:end="1398:39">acl</name></name></expr></argument>, <argument pos:start="1398:42" pos:end="1398:42"><expr pos:start="1398:42" pos:end="1398:42"><name pos:start="1398:42" pos:end="1398:42">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1400:5" pos:end="1404:5"><if pos:start="1400:5" pos:end="1404:5">if <condition pos:start="1400:8" pos:end="1400:31">(<expr pos:start="1400:9" pos:end="1400:30"><name pos:start="1400:9" pos:end="1400:30"><name pos:start="1400:9" pos:end="1400:14">stream</name><operator pos:start="1400:15" pos:end="1400:16">-&gt;</operator><name pos:start="1400:17" pos:end="1400:27">dynamic_acl</name><index pos:start="1400:28" pos:end="1400:30">[<expr pos:start="1400:29" pos:end="1400:29"><literal type="number" pos:start="1400:29" pos:end="1400:29">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="1400:33" pos:end="1404:5">{<block_content pos:start="1401:9" pos:end="1403:27">
        <expr_stmt pos:start="1401:9" pos:end="1401:43"><expr pos:start="1401:9" pos:end="1401:42"><name pos:start="1401:9" pos:end="1401:11">acl</name> <operator pos:start="1401:13" pos:end="1401:13">=</operator> <call pos:start="1401:15" pos:end="1401:42"><name pos:start="1401:15" pos:end="1401:31">parse_dynamic_acl</name><argument_list pos:start="1401:32" pos:end="1401:42">(<argument pos:start="1401:33" pos:end="1401:38"><expr pos:start="1401:33" pos:end="1401:38"><name pos:start="1401:33" pos:end="1401:38">stream</name></expr></argument>, <argument pos:start="1401:41" pos:end="1401:41"><expr pos:start="1401:41" pos:end="1401:41"><name pos:start="1401:41" pos:end="1401:41">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1402:9" pos:end="1402:40"><expr pos:start="1402:9" pos:end="1402:39"><name pos:start="1402:9" pos:end="1402:11">ret</name> <operator pos:start="1402:13" pos:end="1402:13">=</operator> <call pos:start="1402:15" pos:end="1402:39"><name pos:start="1402:15" pos:end="1402:31">validate_acl_list</name><argument_list pos:start="1402:32" pos:end="1402:39">(<argument pos:start="1402:33" pos:end="1402:35"><expr pos:start="1402:33" pos:end="1402:35"><name pos:start="1402:33" pos:end="1402:35">acl</name></expr></argument>, <argument pos:start="1402:38" pos:end="1402:38"><expr pos:start="1402:38" pos:end="1402:38"><name pos:start="1402:38" pos:end="1402:38">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1403:9" pos:end="1403:27"><expr pos:start="1403:9" pos:end="1403:26"><call pos:start="1403:9" pos:end="1403:26"><name pos:start="1403:9" pos:end="1403:21">free_acl_list</name><argument_list pos:start="1403:22" pos:end="1403:26">(<argument pos:start="1403:23" pos:end="1403:25"><expr pos:start="1403:23" pos:end="1403:25"><name pos:start="1403:23" pos:end="1403:25">acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return pos:start="1406:5" pos:end="1406:15">return <expr pos:start="1406:12" pos:end="1406:14"><name pos:start="1406:12" pos:end="1406:14">ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="1409:1" pos:end="1412:3">/**
 * compute the real filename of a file by matching it without its
 * extensions to all the stream's filenames
 */</comment>
<function pos:start="1413:1" pos:end="1434:1"><type pos:start="1413:1" pos:end="1413:11"><specifier pos:start="1413:1" pos:end="1413:6">static</specifier> <name pos:start="1413:8" pos:end="1413:11">void</name></type> <name pos:start="1413:13" pos:end="1413:33">compute_real_filename</name><parameter_list pos:start="1413:34" pos:end="1413:63">(<parameter pos:start="1413:35" pos:end="1413:48"><decl pos:start="1413:35" pos:end="1413:48"><type pos:start="1413:35" pos:end="1413:48"><name pos:start="1413:35" pos:end="1413:38">char</name> <modifier pos:start="1413:40" pos:end="1413:40">*</modifier></type><name pos:start="1413:41" pos:end="1413:48">filename</name></decl></parameter>, <parameter pos:start="1413:51" pos:end="1413:62"><decl pos:start="1413:51" pos:end="1413:62"><type pos:start="1413:51" pos:end="1413:62"><name pos:start="1413:51" pos:end="1413:53">int</name></type> <name pos:start="1413:55" pos:end="1413:62">max_size</name></decl></parameter>)</parameter_list>
<block pos:start="1414:1" pos:end="1434:1">{<block_content pos:start="1415:5" pos:end="1433:5">
    <decl_stmt pos:start="1415:5" pos:end="1415:21"><decl pos:start="1415:5" pos:end="1415:20"><type pos:start="1415:5" pos:end="1415:8"><name pos:start="1415:5" pos:end="1415:8">char</name></type> <name pos:start="1415:10" pos:end="1415:20"><name pos:start="1415:10" pos:end="1415:14">file1</name><index pos:start="1415:15" pos:end="1415:20">[<expr pos:start="1415:16" pos:end="1415:19"><literal type="number" pos:start="1415:16" pos:end="1415:19">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="1416:5" pos:end="1416:21"><decl pos:start="1416:5" pos:end="1416:20"><type pos:start="1416:5" pos:end="1416:8"><name pos:start="1416:5" pos:end="1416:8">char</name></type> <name pos:start="1416:10" pos:end="1416:20"><name pos:start="1416:10" pos:end="1416:14">file2</name><index pos:start="1416:15" pos:end="1416:20">[<expr pos:start="1416:16" pos:end="1416:19"><literal type="number" pos:start="1416:16" pos:end="1416:19">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="1417:5" pos:end="1417:12"><decl pos:start="1417:5" pos:end="1417:11"><type pos:start="1417:5" pos:end="1417:10"><name pos:start="1417:5" pos:end="1417:8">char</name> <modifier pos:start="1417:10" pos:end="1417:10">*</modifier></type><name pos:start="1417:11" pos:end="1417:11">p</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1418:5" pos:end="1418:27"><decl pos:start="1418:5" pos:end="1418:26"><type pos:start="1418:5" pos:end="1418:20"><name pos:start="1418:5" pos:end="1418:18">FFServerStream</name> <modifier pos:start="1418:20" pos:end="1418:20">*</modifier></type><name pos:start="1418:21" pos:end="1418:26">stream</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1420:5" pos:end="1420:47"><expr pos:start="1420:5" pos:end="1420:46"><call pos:start="1420:5" pos:end="1420:46"><name pos:start="1420:5" pos:end="1420:14">av_strlcpy</name><argument_list pos:start="1420:15" pos:end="1420:46">(<argument pos:start="1420:16" pos:end="1420:20"><expr pos:start="1420:16" pos:end="1420:20"><name pos:start="1420:16" pos:end="1420:20">file1</name></expr></argument>, <argument pos:start="1420:23" pos:end="1420:30"><expr pos:start="1420:23" pos:end="1420:30"><name pos:start="1420:23" pos:end="1420:30">filename</name></expr></argument>, <argument pos:start="1420:33" pos:end="1420:45"><expr pos:start="1420:33" pos:end="1420:45"><sizeof pos:start="1420:33" pos:end="1420:45">sizeof<argument_list pos:start="1420:39" pos:end="1420:45">(<argument pos:start="1420:40" pos:end="1420:44"><expr pos:start="1420:40" pos:end="1420:44"><name pos:start="1420:40" pos:end="1420:44">file1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1421:5" pos:end="1421:28"><expr pos:start="1421:5" pos:end="1421:27"><name pos:start="1421:5" pos:end="1421:5">p</name> <operator pos:start="1421:7" pos:end="1421:7">=</operator> <call pos:start="1421:9" pos:end="1421:27"><name pos:start="1421:9" pos:end="1421:15">strrchr</name><argument_list pos:start="1421:16" pos:end="1421:27">(<argument pos:start="1421:17" pos:end="1421:21"><expr pos:start="1421:17" pos:end="1421:21"><name pos:start="1421:17" pos:end="1421:21">file1</name></expr></argument>, <argument pos:start="1421:24" pos:end="1421:26"><expr pos:start="1421:24" pos:end="1421:26"><literal type="char" pos:start="1421:24" pos:end="1421:26">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1422:5" pos:end="1423:18"><if pos:start="1422:5" pos:end="1423:18">if <condition pos:start="1422:8" pos:end="1422:10">(<expr pos:start="1422:9" pos:end="1422:9"><name pos:start="1422:9" pos:end="1422:9">p</name></expr>)</condition><block type="pseudo" pos:start="1423:9" pos:end="1423:18"><block_content pos:start="1423:9" pos:end="1423:18">
        <expr_stmt pos:start="1423:9" pos:end="1423:18"><expr pos:start="1423:9" pos:end="1423:17"><operator pos:start="1423:9" pos:end="1423:9">*</operator><name pos:start="1423:10" pos:end="1423:10">p</name> <operator pos:start="1423:12" pos:end="1423:12">=</operator> <literal type="char" pos:start="1423:14" pos:end="1423:17">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <for pos:start="1424:5" pos:end="1433:5">for<control pos:start="1424:8" pos:end="1424:68">(<init pos:start="1424:9" pos:end="1424:37"><expr pos:start="1424:9" pos:end="1424:36"><name pos:start="1424:9" pos:end="1424:14">stream</name> <operator pos:start="1424:16" pos:end="1424:16">=</operator> <name pos:start="1424:18" pos:end="1424:36"><name pos:start="1424:18" pos:end="1424:23">config</name><operator pos:start="1424:24" pos:end="1424:24">.</operator><name pos:start="1424:25" pos:end="1424:36">first_stream</name></name></expr>;</init> <condition pos:start="1424:39" pos:end="1424:45"><expr pos:start="1424:39" pos:end="1424:44"><name pos:start="1424:39" pos:end="1424:44">stream</name></expr>;</condition> <incr pos:start="1424:47" pos:end="1424:67"><expr pos:start="1424:47" pos:end="1424:67"><name pos:start="1424:47" pos:end="1424:52">stream</name> <operator pos:start="1424:54" pos:end="1424:54">=</operator> <name pos:start="1424:56" pos:end="1424:67"><name pos:start="1424:56" pos:end="1424:61">stream</name><operator pos:start="1424:62" pos:end="1424:63">-&gt;</operator><name pos:start="1424:64" pos:end="1424:67">next</name></name></expr></incr>)</control> <block pos:start="1424:70" pos:end="1433:5">{<block_content pos:start="1425:9" pos:end="1432:9">
        <expr_stmt pos:start="1425:9" pos:end="1425:59"><expr pos:start="1425:9" pos:end="1425:58"><call pos:start="1425:9" pos:end="1425:58"><name pos:start="1425:9" pos:end="1425:18">av_strlcpy</name><argument_list pos:start="1425:19" pos:end="1425:58">(<argument pos:start="1425:20" pos:end="1425:24"><expr pos:start="1425:20" pos:end="1425:24"><name pos:start="1425:20" pos:end="1425:24">file2</name></expr></argument>, <argument pos:start="1425:27" pos:end="1425:42"><expr pos:start="1425:27" pos:end="1425:42"><name pos:start="1425:27" pos:end="1425:42"><name pos:start="1425:27" pos:end="1425:32">stream</name><operator pos:start="1425:33" pos:end="1425:34">-&gt;</operator><name pos:start="1425:35" pos:end="1425:42">filename</name></name></expr></argument>, <argument pos:start="1425:45" pos:end="1425:57"><expr pos:start="1425:45" pos:end="1425:57"><sizeof pos:start="1425:45" pos:end="1425:57">sizeof<argument_list pos:start="1425:51" pos:end="1425:57">(<argument pos:start="1425:52" pos:end="1425:56"><expr pos:start="1425:52" pos:end="1425:56"><name pos:start="1425:52" pos:end="1425:56">file2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1426:9" pos:end="1426:32"><expr pos:start="1426:9" pos:end="1426:31"><name pos:start="1426:9" pos:end="1426:9">p</name> <operator pos:start="1426:11" pos:end="1426:11">=</operator> <call pos:start="1426:13" pos:end="1426:31"><name pos:start="1426:13" pos:end="1426:19">strrchr</name><argument_list pos:start="1426:20" pos:end="1426:31">(<argument pos:start="1426:21" pos:end="1426:25"><expr pos:start="1426:21" pos:end="1426:25"><name pos:start="1426:21" pos:end="1426:25">file2</name></expr></argument>, <argument pos:start="1426:28" pos:end="1426:30"><expr pos:start="1426:28" pos:end="1426:30"><literal type="char" pos:start="1426:28" pos:end="1426:30">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1427:9" pos:end="1428:22"><if pos:start="1427:9" pos:end="1428:22">if <condition pos:start="1427:12" pos:end="1427:14">(<expr pos:start="1427:13" pos:end="1427:13"><name pos:start="1427:13" pos:end="1427:13">p</name></expr>)</condition><block type="pseudo" pos:start="1428:13" pos:end="1428:22"><block_content pos:start="1428:13" pos:end="1428:22">
            <expr_stmt pos:start="1428:13" pos:end="1428:22"><expr pos:start="1428:13" pos:end="1428:21"><operator pos:start="1428:13" pos:end="1428:13">*</operator><name pos:start="1428:14" pos:end="1428:14">p</name> <operator pos:start="1428:16" pos:end="1428:16">=</operator> <literal type="char" pos:start="1428:18" pos:end="1428:21">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="1429:9" pos:end="1432:9"><if pos:start="1429:9" pos:end="1432:9">if <condition pos:start="1429:12" pos:end="1429:34">(<expr pos:start="1429:13" pos:end="1429:33"><operator pos:start="1429:13" pos:end="1429:13">!</operator><call pos:start="1429:14" pos:end="1429:33"><name pos:start="1429:14" pos:end="1429:19">strcmp</name><argument_list pos:start="1429:20" pos:end="1429:33">(<argument pos:start="1429:21" pos:end="1429:25"><expr pos:start="1429:21" pos:end="1429:25"><name pos:start="1429:21" pos:end="1429:25">file1</name></expr></argument>, <argument pos:start="1429:28" pos:end="1429:32"><expr pos:start="1429:28" pos:end="1429:32"><name pos:start="1429:28" pos:end="1429:32">file2</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1429:36" pos:end="1432:9">{<block_content pos:start="1430:13" pos:end="1431:18">
            <expr_stmt pos:start="1430:13" pos:end="1430:61"><expr pos:start="1430:13" pos:end="1430:60"><call pos:start="1430:13" pos:end="1430:60"><name pos:start="1430:13" pos:end="1430:22">av_strlcpy</name><argument_list pos:start="1430:23" pos:end="1430:60">(<argument pos:start="1430:24" pos:end="1430:31"><expr pos:start="1430:24" pos:end="1430:31"><name pos:start="1430:24" pos:end="1430:31">filename</name></expr></argument>, <argument pos:start="1430:34" pos:end="1430:49"><expr pos:start="1430:34" pos:end="1430:49"><name pos:start="1430:34" pos:end="1430:49"><name pos:start="1430:34" pos:end="1430:39">stream</name><operator pos:start="1430:40" pos:end="1430:41">-&gt;</operator><name pos:start="1430:42" pos:end="1430:49">filename</name></name></expr></argument>, <argument pos:start="1430:52" pos:end="1430:59"><expr pos:start="1430:52" pos:end="1430:59"><name pos:start="1430:52" pos:end="1430:59">max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="1431:13" pos:end="1431:18">break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<enum pos:start="1436:1" pos:end="1443:2">enum <name pos:start="1436:6" pos:end="1436:14">RedirType</name> <block pos:start="1436:16" pos:end="1443:1">{
    <decl pos:start="1437:5" pos:end="1437:14"><name pos:start="1437:5" pos:end="1437:14">REDIR_NONE</name></decl>,
    <decl pos:start="1438:5" pos:end="1438:13"><name pos:start="1438:5" pos:end="1438:13">REDIR_ASX</name></decl>,
    <decl pos:start="1439:5" pos:end="1439:13"><name pos:start="1439:5" pos:end="1439:13">REDIR_RAM</name></decl>,
    <decl pos:start="1440:5" pos:end="1440:13"><name pos:start="1440:5" pos:end="1440:13">REDIR_ASF</name></decl>,
    <decl pos:start="1441:5" pos:end="1441:14"><name pos:start="1441:5" pos:end="1441:14">REDIR_RTSP</name></decl>,
    <decl pos:start="1442:5" pos:end="1442:13"><name pos:start="1442:5" pos:end="1442:13">REDIR_SDP</name></decl>,
}</block>;</enum>

<comment type="block" pos:start="1445:1" pos:end="1445:43">/* parse HTTP request and prepare header */</comment>
<function pos:start="1446:1" pos:end="1894:1"><type pos:start="1446:1" pos:end="1446:10"><specifier pos:start="1446:1" pos:end="1446:6">static</specifier> <name pos:start="1446:8" pos:end="1446:10">int</name></type> <name pos:start="1446:12" pos:end="1446:29">http_parse_request</name><parameter_list pos:start="1446:30" pos:end="1446:45">(<parameter pos:start="1446:31" pos:end="1446:44"><decl pos:start="1446:31" pos:end="1446:44"><type pos:start="1446:31" pos:end="1446:43"><name pos:start="1446:31" pos:end="1446:41">HTTPContext</name> <modifier pos:start="1446:43" pos:end="1446:43">*</modifier></type><name pos:start="1446:44" pos:end="1446:44">c</name></decl></parameter>)</parameter_list>
<block pos:start="1447:1" pos:end="1894:1">{<block_content pos:start="1448:5" pos:end="1893:13">
    <decl_stmt pos:start="1448:5" pos:end="1448:18"><decl pos:start="1448:5" pos:end="1448:17"><type pos:start="1448:5" pos:end="1448:16"><specifier pos:start="1448:5" pos:end="1448:9">const</specifier> <name pos:start="1448:11" pos:end="1448:14">char</name> <modifier pos:start="1448:16" pos:end="1448:16">*</modifier></type><name pos:start="1448:17" pos:end="1448:17">p</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1449:5" pos:end="1449:13"><decl pos:start="1449:5" pos:end="1449:12"><type pos:start="1449:5" pos:end="1449:10"><name pos:start="1449:5" pos:end="1449:8">char</name> <modifier pos:start="1449:10" pos:end="1449:10">*</modifier></type><name pos:start="1449:11" pos:end="1449:12">p1</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1450:5" pos:end="1450:30"><decl pos:start="1450:5" pos:end="1450:29"><type pos:start="1450:5" pos:end="1450:18"><name pos:start="1450:5" pos:end="1450:18"><name pos:start="1450:5" pos:end="1450:8">enum</name> <name pos:start="1450:10" pos:end="1450:18">RedirType</name></name></type> <name pos:start="1450:20" pos:end="1450:29">redir_type</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1451:5" pos:end="1451:17"><decl pos:start="1451:5" pos:end="1451:16"><type pos:start="1451:5" pos:end="1451:8"><name pos:start="1451:5" pos:end="1451:8">char</name></type> <name pos:start="1451:10" pos:end="1451:16"><name pos:start="1451:10" pos:end="1451:12">cmd</name><index pos:start="1451:13" pos:end="1451:16">[<expr pos:start="1451:14" pos:end="1451:15"><literal type="number" pos:start="1451:14" pos:end="1451:15">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="1452:5" pos:end="1452:36"><decl pos:start="1452:5" pos:end="1452:19"><type pos:start="1452:5" pos:end="1452:8"><name pos:start="1452:5" pos:end="1452:8">char</name></type> <name pos:start="1452:10" pos:end="1452:19"><name pos:start="1452:10" pos:end="1452:13">info</name><index pos:start="1452:14" pos:end="1452:19">[<expr pos:start="1452:15" pos:end="1452:18"><literal type="number" pos:start="1452:15" pos:end="1452:18">1024</literal></expr>]</index></name></decl>, <decl pos:start="1452:22" pos:end="1452:35"><type ref="prev" pos:start="1452:5" pos:end="1452:8"/><name pos:start="1452:22" pos:end="1452:35"><name pos:start="1452:22" pos:end="1452:29">filename</name><index pos:start="1452:30" pos:end="1452:35">[<expr pos:start="1452:31" pos:end="1452:34"><literal type="number" pos:start="1452:31" pos:end="1452:34">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="1453:5" pos:end="1453:23"><decl pos:start="1453:5" pos:end="1453:18"><type pos:start="1453:5" pos:end="1453:8"><name pos:start="1453:5" pos:end="1453:8">char</name></type> <name pos:start="1453:10" pos:end="1453:18"><name pos:start="1453:10" pos:end="1453:12">url</name><index pos:start="1453:13" pos:end="1453:18">[<expr pos:start="1453:14" pos:end="1453:17"><literal type="number" pos:start="1453:14" pos:end="1453:17">1024</literal></expr>]</index></name></decl>, <decl pos:start="1453:21" pos:end="1453:22"><type ref="prev" pos:start="1453:5" pos:end="1453:8"><modifier pos:start="1453:21" pos:end="1453:21">*</modifier></type><name pos:start="1453:22" pos:end="1453:22">q</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1454:5" pos:end="1454:22"><decl pos:start="1454:5" pos:end="1454:21"><type pos:start="1454:5" pos:end="1454:8"><name pos:start="1454:5" pos:end="1454:8">char</name></type> <name pos:start="1454:10" pos:end="1454:21"><name pos:start="1454:10" pos:end="1454:17">protocol</name><index pos:start="1454:18" pos:end="1454:21">[<expr pos:start="1454:19" pos:end="1454:20"><literal type="number" pos:start="1454:19" pos:end="1454:20">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="1455:5" pos:end="1455:19"><decl pos:start="1455:5" pos:end="1455:18"><type pos:start="1455:5" pos:end="1455:8"><name pos:start="1455:5" pos:end="1455:8">char</name></type> <name pos:start="1455:10" pos:end="1455:18"><name pos:start="1455:10" pos:end="1455:12">msg</name><index pos:start="1455:13" pos:end="1455:18">[<expr pos:start="1455:14" pos:end="1455:17"><literal type="number" pos:start="1455:14" pos:end="1455:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="1456:5" pos:end="1456:29"><decl pos:start="1456:5" pos:end="1456:28"><type pos:start="1456:5" pos:end="1456:10"><name pos:start="1456:5" pos:end="1456:8">char</name> <modifier pos:start="1456:10" pos:end="1456:10">*</modifier></type><name pos:start="1456:11" pos:end="1456:21">encoded_msg</name> <init pos:start="1456:23" pos:end="1456:28">= <expr pos:start="1456:25" pos:end="1456:28"><name pos:start="1456:25" pos:end="1456:28">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1457:5" pos:end="1457:26"><decl pos:start="1457:5" pos:end="1457:25"><type pos:start="1457:5" pos:end="1457:16"><specifier pos:start="1457:5" pos:end="1457:9">const</specifier> <name pos:start="1457:11" pos:end="1457:14">char</name> <modifier pos:start="1457:16" pos:end="1457:16">*</modifier></type><name pos:start="1457:17" pos:end="1457:25">mime_type</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1458:5" pos:end="1458:27"><decl pos:start="1458:5" pos:end="1458:26"><type pos:start="1458:5" pos:end="1458:20"><name pos:start="1458:5" pos:end="1458:18">FFServerStream</name> <modifier pos:start="1458:20" pos:end="1458:20">*</modifier></type><name pos:start="1458:21" pos:end="1458:26">stream</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1459:5" pos:end="1459:10"><decl pos:start="1459:5" pos:end="1459:9"><type pos:start="1459:5" pos:end="1459:7"><name pos:start="1459:5" pos:end="1459:7">int</name></type> <name pos:start="1459:9" pos:end="1459:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1460:5" pos:end="1460:21"><decl pos:start="1460:5" pos:end="1460:20"><type pos:start="1460:5" pos:end="1460:8"><name pos:start="1460:5" pos:end="1460:8">char</name></type> <name pos:start="1460:10" pos:end="1460:20"><name pos:start="1460:10" pos:end="1460:16">ratebuf</name><index pos:start="1460:17" pos:end="1460:20">[<expr pos:start="1460:18" pos:end="1460:19"><literal type="number" pos:start="1460:18" pos:end="1460:19">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="1461:5" pos:end="1461:30"><decl pos:start="1461:5" pos:end="1461:29"><type pos:start="1461:5" pos:end="1461:16"><specifier pos:start="1461:5" pos:end="1461:9">const</specifier> <name pos:start="1461:11" pos:end="1461:14">char</name> <modifier pos:start="1461:16" pos:end="1461:16">*</modifier></type><name pos:start="1461:17" pos:end="1461:25">useragent</name> <init pos:start="1461:27" pos:end="1461:29">= <expr pos:start="1461:29" pos:end="1461:29"><literal type="number" pos:start="1461:29" pos:end="1461:29">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="1463:5" pos:end="1463:18"><expr pos:start="1463:5" pos:end="1463:17"><name pos:start="1463:5" pos:end="1463:5">p</name> <operator pos:start="1463:7" pos:end="1463:7">=</operator> <name pos:start="1463:9" pos:end="1463:17"><name pos:start="1463:9" pos:end="1463:9">c</name><operator pos:start="1463:10" pos:end="1463:11">-&gt;</operator><name pos:start="1463:12" pos:end="1463:17">buffer</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="1464:5" pos:end="1464:35"><expr pos:start="1464:5" pos:end="1464:34"><call pos:start="1464:5" pos:end="1464:34"><name pos:start="1464:5" pos:end="1464:12">get_word</name><argument_list pos:start="1464:13" pos:end="1464:34">(<argument pos:start="1464:14" pos:end="1464:16"><expr pos:start="1464:14" pos:end="1464:16"><name pos:start="1464:14" pos:end="1464:16">cmd</name></expr></argument>, <argument pos:start="1464:19" pos:end="1464:29"><expr pos:start="1464:19" pos:end="1464:29"><sizeof pos:start="1464:19" pos:end="1464:29">sizeof<argument_list pos:start="1464:25" pos:end="1464:29">(<argument pos:start="1464:26" pos:end="1464:28"><expr pos:start="1464:26" pos:end="1464:28"><name pos:start="1464:26" pos:end="1464:28">cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1464:32" pos:end="1464:33"><expr pos:start="1464:32" pos:end="1464:33"><operator pos:start="1464:32" pos:end="1464:32">&amp;</operator><name pos:start="1464:33" pos:end="1464:33">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1465:5" pos:end="1465:50"><expr pos:start="1465:5" pos:end="1465:49"><call pos:start="1465:5" pos:end="1465:49"><name pos:start="1465:5" pos:end="1465:14">av_strlcpy</name><argument_list pos:start="1465:15" pos:end="1465:49">(<argument pos:start="1465:16" pos:end="1465:24"><expr pos:start="1465:16" pos:end="1465:24"><name pos:start="1465:16" pos:end="1465:24"><name pos:start="1465:16" pos:end="1465:16">c</name><operator pos:start="1465:17" pos:end="1465:18">-&gt;</operator><name pos:start="1465:19" pos:end="1465:24">method</name></name></expr></argument>, <argument pos:start="1465:27" pos:end="1465:29"><expr pos:start="1465:27" pos:end="1465:29"><name pos:start="1465:27" pos:end="1465:29">cmd</name></expr></argument>, <argument pos:start="1465:32" pos:end="1465:48"><expr pos:start="1465:32" pos:end="1465:48"><sizeof pos:start="1465:32" pos:end="1465:48">sizeof<argument_list pos:start="1465:38" pos:end="1465:48">(<argument pos:start="1465:39" pos:end="1465:47"><expr pos:start="1465:39" pos:end="1465:47"><name pos:start="1465:39" pos:end="1465:47"><name pos:start="1465:39" pos:end="1465:39">c</name><operator pos:start="1465:40" pos:end="1465:41">-&gt;</operator><name pos:start="1465:42" pos:end="1465:47">method</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1467:5" pos:end="1472:18"><if pos:start="1467:5" pos:end="1468:20">if <condition pos:start="1467:8" pos:end="1467:28">(<expr pos:start="1467:9" pos:end="1467:27"><operator pos:start="1467:9" pos:end="1467:9">!</operator><call pos:start="1467:10" pos:end="1467:27"><name pos:start="1467:10" pos:end="1467:15">strcmp</name><argument_list pos:start="1467:16" pos:end="1467:27">(<argument pos:start="1467:17" pos:end="1467:19"><expr pos:start="1467:17" pos:end="1467:19"><name pos:start="1467:17" pos:end="1467:19">cmd</name></expr></argument>, <argument pos:start="1467:22" pos:end="1467:26"><expr pos:start="1467:22" pos:end="1467:26"><literal type="string" pos:start="1467:22" pos:end="1467:26">"GET"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1468:9" pos:end="1468:20"><block_content pos:start="1468:9" pos:end="1468:20">
        <expr_stmt pos:start="1468:9" pos:end="1468:20"><expr pos:start="1468:9" pos:end="1468:19"><name pos:start="1468:9" pos:end="1468:15"><name pos:start="1468:9" pos:end="1468:9">c</name><operator pos:start="1468:10" pos:end="1468:11">-&gt;</operator><name pos:start="1468:12" pos:end="1468:15">post</name></name> <operator pos:start="1468:17" pos:end="1468:17">=</operator> <literal type="number" pos:start="1468:19" pos:end="1468:19">0</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif" pos:start="1469:5" pos:end="1470:20">else if <condition pos:start="1469:13" pos:end="1469:34">(<expr pos:start="1469:14" pos:end="1469:33"><operator pos:start="1469:14" pos:end="1469:14">!</operator><call pos:start="1469:15" pos:end="1469:33"><name pos:start="1469:15" pos:end="1469:20">strcmp</name><argument_list pos:start="1469:21" pos:end="1469:33">(<argument pos:start="1469:22" pos:end="1469:24"><expr pos:start="1469:22" pos:end="1469:24"><name pos:start="1469:22" pos:end="1469:24">cmd</name></expr></argument>, <argument pos:start="1469:27" pos:end="1469:32"><expr pos:start="1469:27" pos:end="1469:32"><literal type="string" pos:start="1469:27" pos:end="1469:32">"POST"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1470:9" pos:end="1470:20"><block_content pos:start="1470:9" pos:end="1470:20">
        <expr_stmt pos:start="1470:9" pos:end="1470:20"><expr pos:start="1470:9" pos:end="1470:19"><name pos:start="1470:9" pos:end="1470:15"><name pos:start="1470:9" pos:end="1470:9">c</name><operator pos:start="1470:10" pos:end="1470:11">-&gt;</operator><name pos:start="1470:12" pos:end="1470:15">post</name></name> <operator pos:start="1470:17" pos:end="1470:17">=</operator> <literal type="number" pos:start="1470:19" pos:end="1470:19">1</literal></expr>;</expr_stmt></block_content></block></if>
    <else pos:start="1471:5" pos:end="1472:18">else<block type="pseudo" pos:start="1472:9" pos:end="1472:18"><block_content pos:start="1472:9" pos:end="1472:18">
        <return pos:start="1472:9" pos:end="1472:18">return <expr pos:start="1472:16" pos:end="1472:17"><operator pos:start="1472:16" pos:end="1472:16">-</operator><literal type="number" pos:start="1472:17" pos:end="1472:17">1</literal></expr>;</return></block_content></block></else></if_stmt>

    <expr_stmt pos:start="1474:5" pos:end="1474:35"><expr pos:start="1474:5" pos:end="1474:34"><call pos:start="1474:5" pos:end="1474:34"><name pos:start="1474:5" pos:end="1474:12">get_word</name><argument_list pos:start="1474:13" pos:end="1474:34">(<argument pos:start="1474:14" pos:end="1474:16"><expr pos:start="1474:14" pos:end="1474:16"><name pos:start="1474:14" pos:end="1474:16">url</name></expr></argument>, <argument pos:start="1474:19" pos:end="1474:29"><expr pos:start="1474:19" pos:end="1474:29"><sizeof pos:start="1474:19" pos:end="1474:29">sizeof<argument_list pos:start="1474:25" pos:end="1474:29">(<argument pos:start="1474:26" pos:end="1474:28"><expr pos:start="1474:26" pos:end="1474:28"><name pos:start="1474:26" pos:end="1474:28">url</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1474:32" pos:end="1474:33"><expr pos:start="1474:32" pos:end="1474:33"><operator pos:start="1474:32" pos:end="1474:32">&amp;</operator><name pos:start="1474:33" pos:end="1474:33">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1475:5" pos:end="1475:44"><expr pos:start="1475:5" pos:end="1475:43"><call pos:start="1475:5" pos:end="1475:43"><name pos:start="1475:5" pos:end="1475:14">av_strlcpy</name><argument_list pos:start="1475:15" pos:end="1475:43">(<argument pos:start="1475:16" pos:end="1475:21"><expr pos:start="1475:16" pos:end="1475:21"><name pos:start="1475:16" pos:end="1475:21"><name pos:start="1475:16" pos:end="1475:16">c</name><operator pos:start="1475:17" pos:end="1475:18">-&gt;</operator><name pos:start="1475:19" pos:end="1475:21">url</name></name></expr></argument>, <argument pos:start="1475:24" pos:end="1475:26"><expr pos:start="1475:24" pos:end="1475:26"><name pos:start="1475:24" pos:end="1475:26">url</name></expr></argument>, <argument pos:start="1475:29" pos:end="1475:42"><expr pos:start="1475:29" pos:end="1475:42"><sizeof pos:start="1475:29" pos:end="1475:42">sizeof<argument_list pos:start="1475:35" pos:end="1475:42">(<argument pos:start="1475:36" pos:end="1475:41"><expr pos:start="1475:36" pos:end="1475:41"><name pos:start="1475:36" pos:end="1475:41"><name pos:start="1475:36" pos:end="1475:36">c</name><operator pos:start="1475:37" pos:end="1475:38">-&gt;</operator><name pos:start="1475:39" pos:end="1475:41">url</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1477:5" pos:end="1477:60"><expr pos:start="1477:5" pos:end="1477:59"><call pos:start="1477:5" pos:end="1477:59"><name pos:start="1477:5" pos:end="1477:12">get_word</name><argument_list pos:start="1477:13" pos:end="1477:59">(<argument pos:start="1477:14" pos:end="1477:21"><expr pos:start="1477:14" pos:end="1477:21"><name pos:start="1477:14" pos:end="1477:21">protocol</name></expr></argument>, <argument pos:start="1477:24" pos:end="1477:39"><expr pos:start="1477:24" pos:end="1477:39"><sizeof pos:start="1477:24" pos:end="1477:39">sizeof<argument_list pos:start="1477:30" pos:end="1477:39">(<argument pos:start="1477:31" pos:end="1477:38"><expr pos:start="1477:31" pos:end="1477:38"><name pos:start="1477:31" pos:end="1477:38">protocol</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1477:42" pos:end="1477:58"><expr pos:start="1477:42" pos:end="1477:58"><operator pos:start="1477:42" pos:end="1477:42">(</operator><specifier pos:start="1477:43" pos:end="1477:47">const</specifier> <name pos:start="1477:49" pos:end="1477:52">char</name> <operator pos:start="1477:54" pos:end="1477:54">*</operator><operator pos:start="1477:55" pos:end="1477:55">*</operator><operator pos:start="1477:56" pos:end="1477:56">)</operator><operator pos:start="1477:57" pos:end="1477:57">&amp;</operator><name pos:start="1477:58" pos:end="1477:58">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1478:5" pos:end="1480:19"><if pos:start="1478:5" pos:end="1480:19">if <condition pos:start="1478:8" pos:end="1478:38">(<expr pos:start="1478:9" pos:end="1478:36"><call pos:start="1478:9" pos:end="1478:36"><name pos:start="1478:9" pos:end="1478:14">strcmp</name><argument_list pos:start="1478:15" pos:end="1478:36">(<argument pos:start="1478:16" pos:end="1478:23"><expr pos:start="1478:16" pos:end="1478:23"><name pos:start="1478:16" pos:end="1478:23">protocol</name></expr></argument>, <argument pos:start="1478:26" pos:end="1478:35"><expr pos:start="1478:26" pos:end="1478:35"><literal type="string" pos:start="1478:26" pos:end="1478:35">"HTTP/1.0"</literal></expr></argument>)</argument_list></call></expr> )</condition><block pos:start="1478:39" pos:end="1480:19">{<block_content pos:start="1479:1" pos:end="1480:18">
<if_stmt pos:start="1479:1" pos:end="1480:18"><if pos:start="1479:1" pos:end="1480:18">if<condition pos:start="1479:3" pos:end="1479:33">( <expr pos:start="1479:5" pos:end="1479:32"><call pos:start="1479:5" pos:end="1479:32"><name pos:start="1479:5" pos:end="1479:10">strcmp</name><argument_list pos:start="1479:11" pos:end="1479:32">(<argument pos:start="1479:12" pos:end="1479:19"><expr pos:start="1479:12" pos:end="1479:19"><name pos:start="1479:12" pos:end="1479:19">protocol</name></expr></argument>, <argument pos:start="1479:22" pos:end="1479:31"><expr pos:start="1479:22" pos:end="1479:31"><literal type="string" pos:start="1479:22" pos:end="1479:31">"HTTP/1.1"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1480:9" pos:end="1480:18"><block_content pos:start="1480:9" pos:end="1480:18">
        <return pos:start="1480:9" pos:end="1480:18">return <expr pos:start="1480:16" pos:end="1480:17"><operator pos:start="1480:16" pos:end="1480:16">-</operator><literal type="number" pos:start="1480:17" pos:end="1480:17">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1482:5" pos:end="1482:59"><expr pos:start="1482:5" pos:end="1482:58"><call pos:start="1482:5" pos:end="1482:58"><name pos:start="1482:5" pos:end="1482:14">av_strlcpy</name><argument_list pos:start="1482:15" pos:end="1482:58">(<argument pos:start="1482:16" pos:end="1482:26"><expr pos:start="1482:16" pos:end="1482:26"><name pos:start="1482:16" pos:end="1482:26"><name pos:start="1482:16" pos:end="1482:16">c</name><operator pos:start="1482:17" pos:end="1482:18">-&gt;</operator><name pos:start="1482:19" pos:end="1482:26">protocol</name></name></expr></argument>, <argument pos:start="1482:29" pos:end="1482:36"><expr pos:start="1482:29" pos:end="1482:36"><name pos:start="1482:29" pos:end="1482:36">protocol</name></expr></argument>, <argument pos:start="1482:39" pos:end="1482:57"><expr pos:start="1482:39" pos:end="1482:57"><sizeof pos:start="1482:39" pos:end="1482:57">sizeof<argument_list pos:start="1482:45" pos:end="1482:57">(<argument pos:start="1482:46" pos:end="1482:56"><expr pos:start="1482:46" pos:end="1482:56"><name pos:start="1482:46" pos:end="1482:56"><name pos:start="1482:46" pos:end="1482:46">c</name><operator pos:start="1482:47" pos:end="1482:48">-&gt;</operator><name pos:start="1482:49" pos:end="1482:56">protocol</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1484:5" pos:end="1486:61"><if pos:start="1484:5" pos:end="1486:61">if <condition pos:start="1484:8" pos:end="1484:21">(<expr pos:start="1484:9" pos:end="1484:20"><name pos:start="1484:9" pos:end="1484:20"><name pos:start="1484:9" pos:end="1484:14">config</name><operator pos:start="1484:15" pos:end="1484:15">.</operator><name pos:start="1484:16" pos:end="1484:20">debug</name></name></expr>)</condition><block type="pseudo" pos:start="1485:9" pos:end="1486:61"><block_content pos:start="1485:9" pos:end="1486:61">
        <expr_stmt pos:start="1485:9" pos:end="1486:61"><expr pos:start="1485:9" pos:end="1486:60"><call pos:start="1485:9" pos:end="1486:60"><name pos:start="1485:9" pos:end="1485:16">http_log</name><argument_list pos:start="1485:17" pos:end="1486:60">(<argument pos:start="1485:18" pos:end="1485:49"><expr pos:start="1485:18" pos:end="1485:49"><literal type="string" pos:start="1485:18" pos:end="1485:49">"%s - - New connection: %s %s\n"</literal></expr></argument>,
                 <argument pos:start="1486:18" pos:end="1486:49"><expr pos:start="1486:18" pos:end="1486:49"><call pos:start="1486:18" pos:end="1486:49"><name pos:start="1486:18" pos:end="1486:26">inet_ntoa</name><argument_list pos:start="1486:27" pos:end="1486:49">(<argument pos:start="1486:28" pos:end="1486:48"><expr pos:start="1486:28" pos:end="1486:48"><name pos:start="1486:28" pos:end="1486:48"><name pos:start="1486:28" pos:end="1486:28">c</name><operator pos:start="1486:29" pos:end="1486:30">-&gt;</operator><name pos:start="1486:31" pos:end="1486:39">from_addr</name><operator pos:start="1486:40" pos:end="1486:40">.</operator><name pos:start="1486:41" pos:end="1486:48">sin_addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1486:52" pos:end="1486:54"><expr pos:start="1486:52" pos:end="1486:54"><name pos:start="1486:52" pos:end="1486:54">cmd</name></expr></argument>, <argument pos:start="1486:57" pos:end="1486:59"><expr pos:start="1486:57" pos:end="1486:59"><name pos:start="1486:57" pos:end="1486:59">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="1488:5" pos:end="1488:71">/* find the filename and the optional info string in the request */</comment>
    <expr_stmt pos:start="1489:5" pos:end="1489:26"><expr pos:start="1489:5" pos:end="1489:25"><name pos:start="1489:5" pos:end="1489:6">p1</name> <operator pos:start="1489:8" pos:end="1489:8">=</operator> <call pos:start="1489:10" pos:end="1489:25"><name pos:start="1489:10" pos:end="1489:15">strchr</name><argument_list pos:start="1489:16" pos:end="1489:25">(<argument pos:start="1489:17" pos:end="1489:19"><expr pos:start="1489:17" pos:end="1489:19"><name pos:start="1489:17" pos:end="1489:19">url</name></expr></argument>, <argument pos:start="1489:22" pos:end="1489:24"><expr pos:start="1489:22" pos:end="1489:24"><literal type="char" pos:start="1489:22" pos:end="1489:24">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1490:5" pos:end="1494:23"><if pos:start="1490:5" pos:end="1493:5">if <condition pos:start="1490:8" pos:end="1490:11">(<expr pos:start="1490:9" pos:end="1490:10"><name pos:start="1490:9" pos:end="1490:10">p1</name></expr>)</condition> <block pos:start="1490:13" pos:end="1493:5">{<block_content pos:start="1491:9" pos:end="1492:19">
        <expr_stmt pos:start="1491:9" pos:end="1491:43"><expr pos:start="1491:9" pos:end="1491:42"><call pos:start="1491:9" pos:end="1491:42"><name pos:start="1491:9" pos:end="1491:18">av_strlcpy</name><argument_list pos:start="1491:19" pos:end="1491:42">(<argument pos:start="1491:20" pos:end="1491:23"><expr pos:start="1491:20" pos:end="1491:23"><name pos:start="1491:20" pos:end="1491:23">info</name></expr></argument>, <argument pos:start="1491:26" pos:end="1491:27"><expr pos:start="1491:26" pos:end="1491:27"><name pos:start="1491:26" pos:end="1491:27">p1</name></expr></argument>, <argument pos:start="1491:30" pos:end="1491:41"><expr pos:start="1491:30" pos:end="1491:41"><sizeof pos:start="1491:30" pos:end="1491:41">sizeof<argument_list pos:start="1491:36" pos:end="1491:41">(<argument pos:start="1491:37" pos:end="1491:40"><expr pos:start="1491:37" pos:end="1491:40"><name pos:start="1491:37" pos:end="1491:40">info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1492:9" pos:end="1492:19"><expr pos:start="1492:9" pos:end="1492:18"><operator pos:start="1492:9" pos:end="1492:9">*</operator><name pos:start="1492:10" pos:end="1492:11">p1</name> <operator pos:start="1492:13" pos:end="1492:13">=</operator> <literal type="char" pos:start="1492:15" pos:end="1492:18">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="1493:7" pos:end="1494:23">else<block type="pseudo" pos:start="1494:9" pos:end="1494:23"><block_content pos:start="1494:9" pos:end="1494:23">
        <expr_stmt pos:start="1494:9" pos:end="1494:23"><expr pos:start="1494:9" pos:end="1494:22"><name pos:start="1494:9" pos:end="1494:15"><name pos:start="1494:9" pos:end="1494:12">info</name><index pos:start="1494:13" pos:end="1494:15">[<expr pos:start="1494:14" pos:end="1494:14"><literal type="number" pos:start="1494:14" pos:end="1494:14">0</literal></expr>]</index></name> <operator pos:start="1494:17" pos:end="1494:17">=</operator> <literal type="char" pos:start="1494:19" pos:end="1494:22">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="1496:5" pos:end="1496:76"><expr pos:start="1496:5" pos:end="1496:75"><call pos:start="1496:5" pos:end="1496:75"><name pos:start="1496:5" pos:end="1496:14">av_strlcpy</name><argument_list pos:start="1496:15" pos:end="1496:75">(<argument pos:start="1496:16" pos:end="1496:23"><expr pos:start="1496:16" pos:end="1496:23"><name pos:start="1496:16" pos:end="1496:23">filename</name></expr></argument>, <argument pos:start="1496:26" pos:end="1496:54"><expr pos:start="1496:26" pos:end="1496:54"><name pos:start="1496:26" pos:end="1496:28">url</name> <operator pos:start="1496:30" pos:end="1496:30">+</operator> <operator pos:start="1496:32" pos:end="1496:32">(</operator><ternary pos:start="1496:33" pos:end="1496:53"><condition pos:start="1496:33" pos:end="1496:47"><expr pos:start="1496:33" pos:end="1496:45"><operator pos:start="1496:33" pos:end="1496:33">(</operator><operator pos:start="1496:34" pos:end="1496:34">*</operator><name pos:start="1496:35" pos:end="1496:37">url</name> <operator pos:start="1496:39" pos:end="1496:40">==</operator> <literal type="char" pos:start="1496:42" pos:end="1496:44">'/'</literal><operator pos:start="1496:45" pos:end="1496:45">)</operator></expr> ?</condition><then pos:start="1496:49" pos:end="1496:49"> <expr pos:start="1496:49" pos:end="1496:49"><literal type="number" pos:start="1496:49" pos:end="1496:49">1</literal></expr> </then><else pos:start="1496:51" pos:end="1496:53">: <expr pos:start="1496:53" pos:end="1496:53"><literal type="number" pos:start="1496:53" pos:end="1496:53">0</literal></expr></else></ternary><operator pos:start="1496:54" pos:end="1496:54">)</operator></expr></argument>, <argument pos:start="1496:57" pos:end="1496:74"><expr pos:start="1496:57" pos:end="1496:74"><sizeof pos:start="1496:57" pos:end="1496:72">sizeof<argument_list pos:start="1496:63" pos:end="1496:72">(<argument pos:start="1496:64" pos:end="1496:71"><expr pos:start="1496:64" pos:end="1496:71"><name pos:start="1496:64" pos:end="1496:71">filename</name></expr></argument>)</argument_list></sizeof><operator pos:start="1496:73" pos:end="1496:73">-</operator><literal type="number" pos:start="1496:74" pos:end="1496:74">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="1498:5" pos:end="1512:5">for <control pos:start="1498:9" pos:end="1498:57">(<init pos:start="1498:10" pos:end="1498:23"><expr pos:start="1498:10" pos:end="1498:22"><name pos:start="1498:10" pos:end="1498:10">p</name> <operator pos:start="1498:12" pos:end="1498:12">=</operator> <name pos:start="1498:14" pos:end="1498:22"><name pos:start="1498:14" pos:end="1498:14">c</name><operator pos:start="1498:15" pos:end="1498:16">-&gt;</operator><name pos:start="1498:17" pos:end="1498:22">buffer</name></name></expr>;</init> <condition pos:start="1498:25" pos:end="1498:55"><expr pos:start="1498:25" pos:end="1498:54"><operator pos:start="1498:25" pos:end="1498:25">*</operator><name pos:start="1498:26" pos:end="1498:26">p</name> <operator pos:start="1498:28" pos:end="1498:29">&amp;&amp;</operator> <operator pos:start="1498:31" pos:end="1498:31">*</operator><name pos:start="1498:32" pos:end="1498:32">p</name> <operator pos:start="1498:34" pos:end="1498:35">!=</operator> <literal type="char" pos:start="1498:37" pos:end="1498:40">'\r'</literal> <operator pos:start="1498:42" pos:end="1498:43">&amp;&amp;</operator> <operator pos:start="1498:45" pos:end="1498:45">*</operator><name pos:start="1498:46" pos:end="1498:46">p</name> <operator pos:start="1498:48" pos:end="1498:49">!=</operator> <literal type="char" pos:start="1498:51" pos:end="1498:54">'\n'</literal></expr>;</condition> <incr/>)</control> <block pos:start="1498:59" pos:end="1512:5">{<block_content pos:start="1499:9" pos:end="1511:12">
        <if_stmt pos:start="1499:9" pos:end="1506:9"><if pos:start="1499:9" pos:end="1506:9">if <condition pos:start="1499:12" pos:end="1499:54">(<expr pos:start="1499:13" pos:end="1499:53"><call pos:start="1499:13" pos:end="1499:48"><name pos:start="1499:13" pos:end="1499:26">av_strncasecmp</name><argument_list pos:start="1499:27" pos:end="1499:48">(<argument pos:start="1499:28" pos:end="1499:28"><expr pos:start="1499:28" pos:end="1499:28"><name pos:start="1499:28" pos:end="1499:28">p</name></expr></argument>, <argument pos:start="1499:31" pos:end="1499:43"><expr pos:start="1499:31" pos:end="1499:43"><literal type="string" pos:start="1499:31" pos:end="1499:43">"User-Agent:"</literal></expr></argument>, <argument pos:start="1499:46" pos:end="1499:47"><expr pos:start="1499:46" pos:end="1499:47"><literal type="number" pos:start="1499:46" pos:end="1499:47">11</literal></expr></argument>)</argument_list></call> <operator pos:start="1499:50" pos:end="1499:51">==</operator> <literal type="number" pos:start="1499:53" pos:end="1499:53">0</literal></expr>)</condition> <block pos:start="1499:56" pos:end="1506:9">{<block_content pos:start="1500:13" pos:end="1505:18">
            <expr_stmt pos:start="1500:13" pos:end="1500:31"><expr pos:start="1500:13" pos:end="1500:30"><name pos:start="1500:13" pos:end="1500:21">useragent</name> <operator pos:start="1500:23" pos:end="1500:23">=</operator> <name pos:start="1500:25" pos:end="1500:25">p</name> <operator pos:start="1500:27" pos:end="1500:27">+</operator> <literal type="number" pos:start="1500:29" pos:end="1500:30">11</literal></expr>;</expr_stmt>
            <if_stmt pos:start="1501:13" pos:end="1504:30"><if pos:start="1501:13" pos:end="1504:30">if <condition pos:start="1501:16" pos:end="1501:28">(<expr pos:start="1501:17" pos:end="1501:26"><operator pos:start="1501:17" pos:end="1501:17">*</operator><name pos:start="1501:18" pos:end="1501:26">useragent</name></expr> )</condition><block pos:start="1501:29" pos:end="1504:30">{<block_content pos:start="1502:1" pos:end="1504:29">
<if_stmt pos:start="1502:1" pos:end="1504:29"><if pos:start="1502:1" pos:end="1504:29">if<condition pos:start="1502:3" pos:end="1502:24">( <expr pos:start="1502:5" pos:end="1502:22"><operator pos:start="1502:5" pos:end="1502:5">*</operator><name pos:start="1502:6" pos:end="1502:14">useragent</name> <operator pos:start="1502:16" pos:end="1502:17">!=</operator> <literal type="char" pos:start="1502:19" pos:end="1502:22">'\n'</literal></expr> )</condition><block pos:start="1502:25" pos:end="1504:29">{<block_content pos:start="1503:1" pos:end="1504:28">
<if_stmt pos:start="1503:1" pos:end="1504:28"><if pos:start="1503:1" pos:end="1504:28">if<condition pos:start="1503:3" pos:end="1503:27">( <expr pos:start="1503:5" pos:end="1503:26"><call pos:start="1503:5" pos:end="1503:26"><name pos:start="1503:5" pos:end="1503:14">av_isspace</name><argument_list pos:start="1503:15" pos:end="1503:26">(<argument pos:start="1503:16" pos:end="1503:25"><expr pos:start="1503:16" pos:end="1503:25"><operator pos:start="1503:16" pos:end="1503:16">*</operator><name pos:start="1503:17" pos:end="1503:25">useragent</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1504:17" pos:end="1504:28"><block_content pos:start="1504:17" pos:end="1504:28">
                <expr_stmt pos:start="1504:17" pos:end="1504:28"><expr pos:start="1504:17" pos:end="1504:27"><name pos:start="1504:17" pos:end="1504:25">useragent</name><operator pos:start="1504:26" pos:end="1504:27">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt>
            <break pos:start="1505:13" pos:end="1505:18">break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="1507:9" pos:end="1507:28"><expr pos:start="1507:9" pos:end="1507:27"><name pos:start="1507:9" pos:end="1507:9">p</name> <operator pos:start="1507:11" pos:end="1507:11">=</operator> <call pos:start="1507:13" pos:end="1507:27"><name pos:start="1507:13" pos:end="1507:18">strchr</name><argument_list pos:start="1507:19" pos:end="1507:27">(<argument pos:start="1507:20" pos:end="1507:20"><expr pos:start="1507:20" pos:end="1507:20"><name pos:start="1507:20" pos:end="1507:20">p</name></expr></argument>, <argument pos:start="1507:23" pos:end="1507:26"><expr pos:start="1507:23" pos:end="1507:26"><literal type="char" pos:start="1507:23" pos:end="1507:26">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1508:9" pos:end="1509:18"><if pos:start="1508:9" pos:end="1509:18">if <condition pos:start="1508:12" pos:end="1508:15">(<expr pos:start="1508:13" pos:end="1508:14"><operator pos:start="1508:13" pos:end="1508:13">!</operator><name pos:start="1508:14" pos:end="1508:14">p</name></expr>)</condition><block type="pseudo" pos:start="1509:13" pos:end="1509:18"><block_content pos:start="1509:13" pos:end="1509:18">
            <break pos:start="1509:13" pos:end="1509:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1511:9" pos:end="1511:12"><expr pos:start="1511:9" pos:end="1511:11"><name pos:start="1511:9" pos:end="1511:9">p</name><operator pos:start="1511:10" pos:end="1511:11">++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt pos:start="1514:5" pos:end="1514:28"><expr pos:start="1514:5" pos:end="1514:27"><name pos:start="1514:5" pos:end="1514:14">redir_type</name> <operator pos:start="1514:16" pos:end="1514:16">=</operator> <name pos:start="1514:18" pos:end="1514:27">REDIR_NONE</name></expr>;</expr_stmt>
    <if_stmt pos:start="1515:5" pos:end="1532:5"><if pos:start="1515:5" pos:end="1518:5">if <condition pos:start="1515:8" pos:end="1515:38">(<expr pos:start="1515:9" pos:end="1515:37"><call pos:start="1515:9" pos:end="1515:37"><name pos:start="1515:9" pos:end="1515:20">av_match_ext</name><argument_list pos:start="1515:21" pos:end="1515:37">(<argument pos:start="1515:22" pos:end="1515:29"><expr pos:start="1515:22" pos:end="1515:29"><name pos:start="1515:22" pos:end="1515:29">filename</name></expr></argument>, <argument pos:start="1515:32" pos:end="1515:36"><expr pos:start="1515:32" pos:end="1515:36"><literal type="string" pos:start="1515:32" pos:end="1515:36">"asx"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1515:40" pos:end="1518:5">{<block_content pos:start="1516:9" pos:end="1517:43">
        <expr_stmt pos:start="1516:9" pos:end="1516:31"><expr pos:start="1516:9" pos:end="1516:30"><name pos:start="1516:9" pos:end="1516:18">redir_type</name> <operator pos:start="1516:20" pos:end="1516:20">=</operator> <name pos:start="1516:22" pos:end="1516:30">REDIR_ASX</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1517:9" pos:end="1517:43"><expr pos:start="1517:9" pos:end="1517:42"><name pos:start="1517:9" pos:end="1517:36"><name pos:start="1517:9" pos:end="1517:16">filename</name><index pos:start="1517:17" pos:end="1517:36">[<expr pos:start="1517:18" pos:end="1517:35"><call pos:start="1517:18" pos:end="1517:33"><name pos:start="1517:18" pos:end="1517:23">strlen</name><argument_list pos:start="1517:24" pos:end="1517:33">(<argument pos:start="1517:25" pos:end="1517:32"><expr pos:start="1517:25" pos:end="1517:32"><name pos:start="1517:25" pos:end="1517:32">filename</name></expr></argument>)</argument_list></call><operator pos:start="1517:34" pos:end="1517:34">-</operator><literal type="number" pos:start="1517:35" pos:end="1517:35">1</literal></expr>]</index></name> <operator pos:start="1517:38" pos:end="1517:38">=</operator> <literal type="char" pos:start="1517:40" pos:end="1517:42">'f'</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="1518:7" pos:end="1523:6">else if <condition pos:start="1518:15" pos:end="1518:46">(<expr pos:start="1518:16" pos:end="1518:44"><call pos:start="1518:16" pos:end="1518:44"><name pos:start="1518:16" pos:end="1518:27">av_match_ext</name><argument_list pos:start="1518:28" pos:end="1518:44">(<argument pos:start="1518:29" pos:end="1518:36"><expr pos:start="1518:29" pos:end="1518:36"><name pos:start="1518:29" pos:end="1518:36">filename</name></expr></argument>, <argument pos:start="1518:39" pos:end="1518:43"><expr pos:start="1518:39" pos:end="1518:43"><literal type="string" pos:start="1518:39" pos:end="1518:43">"asf"</literal></expr></argument>)</argument_list></call></expr> )</condition><block pos:start="1518:47" pos:end="1523:6">{<block_content pos:start="1519:1" pos:end="1523:5">
<if_stmt pos:start="1519:1" pos:end="1523:5"><if pos:start="1519:1" pos:end="1523:5">if<condition pos:start="1519:3" pos:end="1520:65">(
        <expr pos:start="1520:9" pos:end="1520:64"><operator pos:start="1520:9" pos:end="1520:9">(</operator><operator pos:start="1520:10" pos:end="1520:10">!</operator><name pos:start="1520:11" pos:end="1520:19">useragent</name> <operator pos:start="1520:21" pos:end="1520:22">||</operator> <call pos:start="1520:24" pos:end="1520:63"><name pos:start="1520:24" pos:end="1520:37">av_strncasecmp</name><argument_list pos:start="1520:38" pos:end="1520:63">(<argument pos:start="1520:39" pos:end="1520:47"><expr pos:start="1520:39" pos:end="1520:47"><name pos:start="1520:39" pos:end="1520:47">useragent</name></expr></argument>, <argument pos:start="1520:50" pos:end="1520:59"><expr pos:start="1520:50" pos:end="1520:59"><literal type="string" pos:start="1520:50" pos:end="1520:59">"NSPlayer"</literal></expr></argument>, <argument pos:start="1520:62" pos:end="1520:62"><expr pos:start="1520:62" pos:end="1520:62"><literal type="number" pos:start="1520:62" pos:end="1520:62">8</literal></expr></argument>)</argument_list></call><operator pos:start="1520:64" pos:end="1520:64">)</operator></expr>)</condition> <block pos:start="1520:67" pos:end="1523:5">{<block_content pos:start="1522:9" pos:end="1522:31">
        <comment type="block" pos:start="1521:9" pos:end="1521:72">/* if this isn't WMP or lookalike, return the redirector file */</comment>
        <expr_stmt pos:start="1522:9" pos:end="1522:31"><expr pos:start="1522:9" pos:end="1522:30"><name pos:start="1522:9" pos:end="1522:18">redir_type</name> <operator pos:start="1522:20" pos:end="1522:20">=</operator> <name pos:start="1522:22" pos:end="1522:30">REDIR_ASF</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt></block_content>}</block></if><if type="elseif" pos:start="1523:7" pos:end="1526:5">else if <condition pos:start="1523:15" pos:end="1523:49">(<expr pos:start="1523:16" pos:end="1523:48"><call pos:start="1523:16" pos:end="1523:48"><name pos:start="1523:16" pos:end="1523:27">av_match_ext</name><argument_list pos:start="1523:28" pos:end="1523:48">(<argument pos:start="1523:29" pos:end="1523:36"><expr pos:start="1523:29" pos:end="1523:36"><name pos:start="1523:29" pos:end="1523:36">filename</name></expr></argument>, <argument pos:start="1523:39" pos:end="1523:47"><expr pos:start="1523:39" pos:end="1523:47"><literal type="string" pos:start="1523:39" pos:end="1523:47">"rpm,ram"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1523:51" pos:end="1526:5">{<block_content pos:start="1524:9" pos:end="1525:51">
        <expr_stmt pos:start="1524:9" pos:end="1524:31"><expr pos:start="1524:9" pos:end="1524:30"><name pos:start="1524:9" pos:end="1524:18">redir_type</name> <operator pos:start="1524:20" pos:end="1524:20">=</operator> <name pos:start="1524:22" pos:end="1524:30">REDIR_RAM</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1525:9" pos:end="1525:51"><expr pos:start="1525:9" pos:end="1525:50"><call pos:start="1525:9" pos:end="1525:50"><name pos:start="1525:9" pos:end="1525:14">strcpy</name><argument_list pos:start="1525:15" pos:end="1525:50">(<argument pos:start="1525:16" pos:end="1525:44"><expr pos:start="1525:16" pos:end="1525:44"><name pos:start="1525:16" pos:end="1525:23">filename</name> <operator pos:start="1525:25" pos:end="1525:25">+</operator> <call pos:start="1525:27" pos:end="1525:42"><name pos:start="1525:27" pos:end="1525:32">strlen</name><argument_list pos:start="1525:33" pos:end="1525:42">(<argument pos:start="1525:34" pos:end="1525:41"><expr pos:start="1525:34" pos:end="1525:41"><name pos:start="1525:34" pos:end="1525:41">filename</name></expr></argument>)</argument_list></call><operator pos:start="1525:43" pos:end="1525:43">-</operator><literal type="number" pos:start="1525:44" pos:end="1525:44">2</literal></expr></argument>, <argument pos:start="1525:47" pos:end="1525:49"><expr pos:start="1525:47" pos:end="1525:49"><literal type="string" pos:start="1525:47" pos:end="1525:49">"m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="1526:7" pos:end="1529:5">else if <condition pos:start="1526:15" pos:end="1526:46">(<expr pos:start="1526:16" pos:end="1526:45"><call pos:start="1526:16" pos:end="1526:45"><name pos:start="1526:16" pos:end="1526:27">av_match_ext</name><argument_list pos:start="1526:28" pos:end="1526:45">(<argument pos:start="1526:29" pos:end="1526:36"><expr pos:start="1526:29" pos:end="1526:36"><name pos:start="1526:29" pos:end="1526:36">filename</name></expr></argument>, <argument pos:start="1526:39" pos:end="1526:44"><expr pos:start="1526:39" pos:end="1526:44"><literal type="string" pos:start="1526:39" pos:end="1526:44">"rtsp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1526:48" pos:end="1529:5">{<block_content pos:start="1527:9" pos:end="1528:62">
        <expr_stmt pos:start="1527:9" pos:end="1527:32"><expr pos:start="1527:9" pos:end="1527:31"><name pos:start="1527:9" pos:end="1527:18">redir_type</name> <operator pos:start="1527:20" pos:end="1527:20">=</operator> <name pos:start="1527:22" pos:end="1527:31">REDIR_RTSP</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1528:9" pos:end="1528:62"><expr pos:start="1528:9" pos:end="1528:61"><call pos:start="1528:9" pos:end="1528:61"><name pos:start="1528:9" pos:end="1528:29">compute_real_filename</name><argument_list pos:start="1528:30" pos:end="1528:61">(<argument pos:start="1528:31" pos:end="1528:38"><expr pos:start="1528:31" pos:end="1528:38"><name pos:start="1528:31" pos:end="1528:38">filename</name></expr></argument>, <argument pos:start="1528:41" pos:end="1528:60"><expr pos:start="1528:41" pos:end="1528:60"><sizeof pos:start="1528:41" pos:end="1528:56">sizeof<argument_list pos:start="1528:47" pos:end="1528:56">(<argument pos:start="1528:48" pos:end="1528:55"><expr pos:start="1528:48" pos:end="1528:55"><name pos:start="1528:48" pos:end="1528:55">filename</name></expr></argument>)</argument_list></sizeof> <operator pos:start="1528:58" pos:end="1528:58">-</operator> <literal type="number" pos:start="1528:60" pos:end="1528:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="1529:7" pos:end="1532:5">else if <condition pos:start="1529:15" pos:end="1529:45">(<expr pos:start="1529:16" pos:end="1529:44"><call pos:start="1529:16" pos:end="1529:44"><name pos:start="1529:16" pos:end="1529:27">av_match_ext</name><argument_list pos:start="1529:28" pos:end="1529:44">(<argument pos:start="1529:29" pos:end="1529:36"><expr pos:start="1529:29" pos:end="1529:36"><name pos:start="1529:29" pos:end="1529:36">filename</name></expr></argument>, <argument pos:start="1529:39" pos:end="1529:43"><expr pos:start="1529:39" pos:end="1529:43"><literal type="string" pos:start="1529:39" pos:end="1529:43">"sdp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1529:47" pos:end="1532:5">{<block_content pos:start="1530:9" pos:end="1531:62">
        <expr_stmt pos:start="1530:9" pos:end="1530:31"><expr pos:start="1530:9" pos:end="1530:30"><name pos:start="1530:9" pos:end="1530:18">redir_type</name> <operator pos:start="1530:20" pos:end="1530:20">=</operator> <name pos:start="1530:22" pos:end="1530:30">REDIR_SDP</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1531:9" pos:end="1531:62"><expr pos:start="1531:9" pos:end="1531:61"><call pos:start="1531:9" pos:end="1531:61"><name pos:start="1531:9" pos:end="1531:29">compute_real_filename</name><argument_list pos:start="1531:30" pos:end="1531:61">(<argument pos:start="1531:31" pos:end="1531:38"><expr pos:start="1531:31" pos:end="1531:38"><name pos:start="1531:31" pos:end="1531:38">filename</name></expr></argument>, <argument pos:start="1531:41" pos:end="1531:60"><expr pos:start="1531:41" pos:end="1531:60"><sizeof pos:start="1531:41" pos:end="1531:56">sizeof<argument_list pos:start="1531:47" pos:end="1531:56">(<argument pos:start="1531:48" pos:end="1531:55"><expr pos:start="1531:48" pos:end="1531:55"><name pos:start="1531:48" pos:end="1531:55">filename</name></expr></argument>)</argument_list></sizeof> <operator pos:start="1531:58" pos:end="1531:58">-</operator> <literal type="number" pos:start="1531:60" pos:end="1531:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1534:5" pos:end="1534:42">/* "redirect" request to index.html */</comment>
    <if_stmt pos:start="1535:5" pos:end="1536:65"><if pos:start="1535:5" pos:end="1536:65">if <condition pos:start="1535:8" pos:end="1535:26">(<expr pos:start="1535:9" pos:end="1535:25"><operator pos:start="1535:9" pos:end="1535:9">!</operator><call pos:start="1535:10" pos:end="1535:25"><name pos:start="1535:10" pos:end="1535:15">strlen</name><argument_list pos:start="1535:16" pos:end="1535:25">(<argument pos:start="1535:17" pos:end="1535:24"><expr pos:start="1535:17" pos:end="1535:24"><name pos:start="1535:17" pos:end="1535:24">filename</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1536:9" pos:end="1536:65"><block_content pos:start="1536:9" pos:end="1536:65">
        <expr_stmt pos:start="1536:9" pos:end="1536:65"><expr pos:start="1536:9" pos:end="1536:64"><call pos:start="1536:9" pos:end="1536:64"><name pos:start="1536:9" pos:end="1536:18">av_strlcpy</name><argument_list pos:start="1536:19" pos:end="1536:64">(<argument pos:start="1536:20" pos:end="1536:27"><expr pos:start="1536:20" pos:end="1536:27"><name pos:start="1536:20" pos:end="1536:27">filename</name></expr></argument>, <argument pos:start="1536:30" pos:end="1536:41"><expr pos:start="1536:30" pos:end="1536:41"><literal type="string" pos:start="1536:30" pos:end="1536:41">"index.html"</literal></expr></argument>, <argument pos:start="1536:44" pos:end="1536:63"><expr pos:start="1536:44" pos:end="1536:63"><sizeof pos:start="1536:44" pos:end="1536:59">sizeof<argument_list pos:start="1536:50" pos:end="1536:59">(<argument pos:start="1536:51" pos:end="1536:58"><expr pos:start="1536:51" pos:end="1536:58"><name pos:start="1536:51" pos:end="1536:58">filename</name></expr></argument>)</argument_list></sizeof> <operator pos:start="1536:61" pos:end="1536:61">-</operator> <literal type="number" pos:start="1536:63" pos:end="1536:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="1538:5" pos:end="1538:33"><expr pos:start="1538:5" pos:end="1538:32"><name pos:start="1538:5" pos:end="1538:10">stream</name> <operator pos:start="1538:12" pos:end="1538:12">=</operator> <name pos:start="1538:14" pos:end="1538:32"><name pos:start="1538:14" pos:end="1538:19">config</name><operator pos:start="1538:20" pos:end="1538:20">.</operator><name pos:start="1538:21" pos:end="1538:32">first_stream</name></name></expr>;</expr_stmt>
    <while pos:start="1539:5" pos:end="1544:5">while <condition pos:start="1539:11" pos:end="1539:18">(<expr pos:start="1539:12" pos:end="1539:17"><name pos:start="1539:12" pos:end="1539:17">stream</name></expr>)</condition> <block pos:start="1539:20" pos:end="1544:5">{<block_content pos:start="1540:9" pos:end="1543:30">
        <if_stmt pos:start="1540:9" pos:end="1542:19"><if pos:start="1540:9" pos:end="1542:19">if <condition pos:start="1540:12" pos:end="1540:49">(<expr pos:start="1540:13" pos:end="1540:47"><operator pos:start="1540:13" pos:end="1540:13">!</operator><call pos:start="1540:14" pos:end="1540:47"><name pos:start="1540:14" pos:end="1540:19">strcmp</name><argument_list pos:start="1540:20" pos:end="1540:47">(<argument pos:start="1540:21" pos:end="1540:36"><expr pos:start="1540:21" pos:end="1540:36"><name pos:start="1540:21" pos:end="1540:36"><name pos:start="1540:21" pos:end="1540:26">stream</name><operator pos:start="1540:27" pos:end="1540:28">-&gt;</operator><name pos:start="1540:29" pos:end="1540:36">filename</name></name></expr></argument>, <argument pos:start="1540:39" pos:end="1540:46"><expr pos:start="1540:39" pos:end="1540:46"><name pos:start="1540:39" pos:end="1540:46">filename</name></expr></argument>)</argument_list></call></expr> )</condition><block pos:start="1540:50" pos:end="1542:19">{<block_content pos:start="1541:1" pos:end="1542:18">
<if_stmt pos:start="1541:1" pos:end="1542:18"><if pos:start="1541:1" pos:end="1542:18">if<condition pos:start="1541:3" pos:end="1541:28">( <expr pos:start="1541:5" pos:end="1541:27"><call pos:start="1541:5" pos:end="1541:27"><name pos:start="1541:5" pos:end="1541:16">validate_acl</name><argument_list pos:start="1541:17" pos:end="1541:27">(<argument pos:start="1541:18" pos:end="1541:23"><expr pos:start="1541:18" pos:end="1541:23"><name pos:start="1541:18" pos:end="1541:23">stream</name></expr></argument>, <argument pos:start="1541:26" pos:end="1541:26"><expr pos:start="1541:26" pos:end="1541:26"><name pos:start="1541:26" pos:end="1541:26">c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1542:13" pos:end="1542:18"><block_content pos:start="1542:13" pos:end="1542:18">
            <break pos:start="1542:13" pos:end="1542:18">break;</break></block_content></block></if></if_stmt></block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="1543:9" pos:end="1543:30"><expr pos:start="1543:9" pos:end="1543:29"><name pos:start="1543:9" pos:end="1543:14">stream</name> <operator pos:start="1543:16" pos:end="1543:16">=</operator> <name pos:start="1543:18" pos:end="1543:29"><name pos:start="1543:18" pos:end="1543:23">stream</name><operator pos:start="1543:24" pos:end="1543:25">-&gt;</operator><name pos:start="1543:26" pos:end="1543:29">next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt pos:start="1545:5" pos:end="1549:5"><if pos:start="1545:5" pos:end="1549:5">if <condition pos:start="1545:8" pos:end="1545:16">(<expr pos:start="1545:9" pos:end="1545:15"><operator pos:start="1545:9" pos:end="1545:9">!</operator><name pos:start="1545:10" pos:end="1545:15">stream</name></expr>)</condition> <block pos:start="1545:18" pos:end="1549:5">{<block_content pos:start="1546:9" pos:end="1548:24">
        <expr_stmt pos:start="1546:9" pos:end="1546:63"><expr pos:start="1546:9" pos:end="1546:62"><call pos:start="1546:9" pos:end="1546:62"><name pos:start="1546:9" pos:end="1546:16">snprintf</name><argument_list pos:start="1546:17" pos:end="1546:62">(<argument pos:start="1546:18" pos:end="1546:20"><expr pos:start="1546:18" pos:end="1546:20"><name pos:start="1546:18" pos:end="1546:20">msg</name></expr></argument>, <argument pos:start="1546:23" pos:end="1546:33"><expr pos:start="1546:23" pos:end="1546:33"><sizeof pos:start="1546:23" pos:end="1546:33">sizeof<argument_list pos:start="1546:29" pos:end="1546:33">(<argument pos:start="1546:30" pos:end="1546:32"><expr pos:start="1546:30" pos:end="1546:32"><name pos:start="1546:30" pos:end="1546:32">msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1546:36" pos:end="1546:56"><expr pos:start="1546:36" pos:end="1546:56"><literal type="string" pos:start="1546:36" pos:end="1546:56">"File '%s' not found"</literal></expr></argument>, <argument pos:start="1546:59" pos:end="1546:61"><expr pos:start="1546:59" pos:end="1546:61"><name pos:start="1546:59" pos:end="1546:61">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1547:9" pos:end="1547:47"><expr pos:start="1547:9" pos:end="1547:46"><call pos:start="1547:9" pos:end="1547:46"><name pos:start="1547:9" pos:end="1547:16">http_log</name><argument_list pos:start="1547:17" pos:end="1547:46">(<argument pos:start="1547:18" pos:end="1547:40"><expr pos:start="1547:18" pos:end="1547:40"><literal type="string" pos:start="1547:18" pos:end="1547:40">"File '%s' not found\n"</literal></expr></argument>, <argument pos:start="1547:43" pos:end="1547:45"><expr pos:start="1547:43" pos:end="1547:45"><name pos:start="1547:43" pos:end="1547:45">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="1548:9" pos:end="1548:24">goto <name pos:start="1548:14" pos:end="1548:23">send_error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1551:5" pos:end="1551:23"><expr pos:start="1551:5" pos:end="1551:22"><name pos:start="1551:5" pos:end="1551:13"><name pos:start="1551:5" pos:end="1551:5">c</name><operator pos:start="1551:6" pos:end="1551:7">-&gt;</operator><name pos:start="1551:8" pos:end="1551:13">stream</name></name> <operator pos:start="1551:15" pos:end="1551:15">=</operator> <name pos:start="1551:17" pos:end="1551:22">stream</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1552:5" pos:end="1552:75"><expr pos:start="1552:5" pos:end="1552:74"><call pos:start="1552:5" pos:end="1552:74"><name pos:start="1552:5" pos:end="1552:10">memcpy</name><argument_list pos:start="1552:11" pos:end="1552:74">(<argument pos:start="1552:12" pos:end="1552:26"><expr pos:start="1552:12" pos:end="1552:26"><name pos:start="1552:12" pos:end="1552:26"><name pos:start="1552:12" pos:end="1552:12">c</name><operator pos:start="1552:13" pos:end="1552:14">-&gt;</operator><name pos:start="1552:15" pos:end="1552:26">feed_streams</name></name></expr></argument>, <argument pos:start="1552:29" pos:end="1552:48"><expr pos:start="1552:29" pos:end="1552:48"><name pos:start="1552:29" pos:end="1552:48"><name pos:start="1552:29" pos:end="1552:34">stream</name><operator pos:start="1552:35" pos:end="1552:36">-&gt;</operator><name pos:start="1552:37" pos:end="1552:48">feed_streams</name></name></expr></argument>, <argument pos:start="1552:51" pos:end="1552:73"><expr pos:start="1552:51" pos:end="1552:73"><sizeof pos:start="1552:51" pos:end="1552:73">sizeof<argument_list pos:start="1552:57" pos:end="1552:73">(<argument pos:start="1552:58" pos:end="1552:72"><expr pos:start="1552:58" pos:end="1552:72"><name pos:start="1552:58" pos:end="1552:72"><name pos:start="1552:58" pos:end="1552:58">c</name><operator pos:start="1552:59" pos:end="1552:60">-&gt;</operator><name pos:start="1552:61" pos:end="1552:72">feed_streams</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1553:5" pos:end="1553:71"><expr pos:start="1553:5" pos:end="1553:70"><call pos:start="1553:5" pos:end="1553:70"><name pos:start="1553:5" pos:end="1553:10">memset</name><argument_list pos:start="1553:11" pos:end="1553:70">(<argument pos:start="1553:12" pos:end="1553:33"><expr pos:start="1553:12" pos:end="1553:33"><name pos:start="1553:12" pos:end="1553:33"><name pos:start="1553:12" pos:end="1553:12">c</name><operator pos:start="1553:13" pos:end="1553:14">-&gt;</operator><name pos:start="1553:15" pos:end="1553:33">switch_feed_streams</name></name></expr></argument>, <argument pos:start="1553:36" pos:end="1553:37"><expr pos:start="1553:36" pos:end="1553:37"><operator pos:start="1553:36" pos:end="1553:36">-</operator><literal type="number" pos:start="1553:37" pos:end="1553:37">1</literal></expr></argument>, <argument pos:start="1553:40" pos:end="1553:69"><expr pos:start="1553:40" pos:end="1553:69"><sizeof pos:start="1553:40" pos:end="1553:69">sizeof<argument_list pos:start="1553:46" pos:end="1553:69">(<argument pos:start="1553:47" pos:end="1553:68"><expr pos:start="1553:47" pos:end="1553:68"><name pos:start="1553:47" pos:end="1553:68"><name pos:start="1553:47" pos:end="1553:47">c</name><operator pos:start="1553:48" pos:end="1553:49">-&gt;</operator><name pos:start="1553:50" pos:end="1553:68">switch_feed_streams</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1555:5" pos:end="1574:5"><if pos:start="1555:5" pos:end="1574:5">if <condition pos:start="1555:8" pos:end="1555:52">(<expr pos:start="1555:9" pos:end="1555:51"><name pos:start="1555:9" pos:end="1555:27"><name pos:start="1555:9" pos:end="1555:14">stream</name><operator pos:start="1555:15" pos:end="1555:16">-&gt;</operator><name pos:start="1555:17" pos:end="1555:27">stream_type</name></name> <operator pos:start="1555:29" pos:end="1555:30">==</operator> <name pos:start="1555:32" pos:end="1555:51">STREAM_TYPE_REDIRECT</name></expr>)</condition> <block pos:start="1555:54" pos:end="1574:5">{<block_content pos:start="1556:9" pos:end="1573:17">
        <expr_stmt pos:start="1556:9" pos:end="1556:28"><expr pos:start="1556:9" pos:end="1556:27"><name pos:start="1556:9" pos:end="1556:21"><name pos:start="1556:9" pos:end="1556:9">c</name><operator pos:start="1556:10" pos:end="1556:11">-&gt;</operator><name pos:start="1556:12" pos:end="1556:21">http_error</name></name> <operator pos:start="1556:23" pos:end="1556:23">=</operator> <literal type="number" pos:start="1556:25" pos:end="1556:27">301</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1557:9" pos:end="1557:22"><expr pos:start="1557:9" pos:end="1557:21"><name pos:start="1557:9" pos:end="1557:9">q</name> <operator pos:start="1557:11" pos:end="1557:11">=</operator> <name pos:start="1557:13" pos:end="1557:21"><name pos:start="1557:13" pos:end="1557:13">c</name><operator pos:start="1557:14" pos:end="1557:15">-&gt;</operator><name pos:start="1557:16" pos:end="1557:21">buffer</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="1558:9" pos:end="1567:63"><expr pos:start="1558:9" pos:end="1567:62"><call pos:start="1558:9" pos:end="1567:62"><name pos:start="1558:9" pos:end="1558:16">snprintf</name><argument_list pos:start="1558:17" pos:end="1567:62">(<argument pos:start="1558:18" pos:end="1558:18"><expr pos:start="1558:18" pos:end="1558:18"><name pos:start="1558:18" pos:end="1558:18">q</name></expr></argument>, <argument pos:start="1558:21" pos:end="1558:34"><expr pos:start="1558:21" pos:end="1558:34"><name pos:start="1558:21" pos:end="1558:34"><name pos:start="1558:21" pos:end="1558:21">c</name><operator pos:start="1558:22" pos:end="1558:23">-&gt;</operator><name pos:start="1558:24" pos:end="1558:34">buffer_size</name></name></expr></argument>,
                      <argument pos:start="1559:23" pos:end="1566:42"><expr pos:start="1559:23" pos:end="1566:42"><literal type="string" pos:start="1559:23" pos:end="1559:46">"HTTP/1.0 301 Moved\r\n"</literal>
                      <literal type="string" pos:start="1560:23" pos:end="1560:40">"Location: %s\r\n"</literal>
                      <literal type="string" pos:start="1561:23" pos:end="1561:51">"Content-type: text/html\r\n"</literal>
                      <literal type="string" pos:start="1562:23" pos:end="1562:28">"\r\n"</literal>
                      <literal type="string" pos:start="1563:23" pos:end="1563:41">"&lt;!DOCTYPE html&gt;\n"</literal>
                      <literal type="string" pos:start="1564:23" pos:end="1564:73">"&lt;html&gt;&lt;head&gt;&lt;title&gt;Moved&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\r\n"</literal>
                      <literal type="string" pos:start="1565:23" pos:end="1565:72">"You should be &lt;a href=\"%s\"&gt;redirected&lt;/a&gt;.\r\n"</literal>
                      <literal type="string" pos:start="1566:23" pos:end="1566:42">"&lt;/body&gt;&lt;/html&gt;\r\n"</literal></expr></argument>,
                 <argument pos:start="1567:18" pos:end="1567:38"><expr pos:start="1567:18" pos:end="1567:38"><name pos:start="1567:18" pos:end="1567:38"><name pos:start="1567:18" pos:end="1567:23">stream</name><operator pos:start="1567:24" pos:end="1567:25">-&gt;</operator><name pos:start="1567:26" pos:end="1567:38">feed_filename</name></name></expr></argument>, <argument pos:start="1567:41" pos:end="1567:61"><expr pos:start="1567:41" pos:end="1567:61"><name pos:start="1567:41" pos:end="1567:61"><name pos:start="1567:41" pos:end="1567:46">stream</name><operator pos:start="1567:47" pos:end="1567:48">-&gt;</operator><name pos:start="1567:49" pos:end="1567:61">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1568:9" pos:end="1568:23"><expr pos:start="1568:9" pos:end="1568:22"><name pos:start="1568:9" pos:end="1568:9">q</name> <operator pos:start="1568:11" pos:end="1568:12">+=</operator> <call pos:start="1568:14" pos:end="1568:22"><name pos:start="1568:14" pos:end="1568:19">strlen</name><argument_list pos:start="1568:20" pos:end="1568:22">(<argument pos:start="1568:21" pos:end="1568:21"><expr pos:start="1568:21" pos:end="1568:21"><name pos:start="1568:21" pos:end="1568:21">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="1569:9" pos:end="1569:35">/* prepare output buffer */</comment>
        <expr_stmt pos:start="1570:9" pos:end="1570:34"><expr pos:start="1570:9" pos:end="1570:33"><name pos:start="1570:9" pos:end="1570:21"><name pos:start="1570:9" pos:end="1570:9">c</name><operator pos:start="1570:10" pos:end="1570:11">-&gt;</operator><name pos:start="1570:12" pos:end="1570:21">buffer_ptr</name></name> <operator pos:start="1570:23" pos:end="1570:23">=</operator> <name pos:start="1570:25" pos:end="1570:33"><name pos:start="1570:25" pos:end="1570:25">c</name><operator pos:start="1570:26" pos:end="1570:27">-&gt;</operator><name pos:start="1570:28" pos:end="1570:33">buffer</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="1571:9" pos:end="1571:26"><expr pos:start="1571:9" pos:end="1571:25"><name pos:start="1571:9" pos:end="1571:21"><name pos:start="1571:9" pos:end="1571:9">c</name><operator pos:start="1571:10" pos:end="1571:11">-&gt;</operator><name pos:start="1571:12" pos:end="1571:21">buffer_end</name></name> <operator pos:start="1571:23" pos:end="1571:23">=</operator> <name pos:start="1571:25" pos:end="1571:25">q</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1572:9" pos:end="1572:41"><expr pos:start="1572:9" pos:end="1572:40"><name pos:start="1572:9" pos:end="1572:16"><name pos:start="1572:9" pos:end="1572:9">c</name><operator pos:start="1572:10" pos:end="1572:11">-&gt;</operator><name pos:start="1572:12" pos:end="1572:16">state</name></name> <operator pos:start="1572:18" pos:end="1572:18">=</operator> <name pos:start="1572:20" pos:end="1572:40">HTTPSTATE_SEND_HEADER</name></expr>;</expr_stmt>
        <return pos:start="1573:9" pos:end="1573:17">return <expr pos:start="1573:16" pos:end="1573:16"><literal type="number" pos:start="1573:16" pos:end="1573:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1576:5" pos:end="1576:50">/* If this is WMP, get the rate information */</comment>
    <if_stmt pos:start="1577:5" pos:end="1584:5"><if pos:start="1577:5" pos:end="1584:5">if <condition pos:start="1577:8" pos:end="1577:59">(<expr pos:start="1577:9" pos:end="1577:58"><call pos:start="1577:9" pos:end="1577:58"><name pos:start="1577:9" pos:end="1577:21">extract_rates</name><argument_list pos:start="1577:22" pos:end="1577:58">(<argument pos:start="1577:23" pos:end="1577:29"><expr pos:start="1577:23" pos:end="1577:29"><name pos:start="1577:23" pos:end="1577:29">ratebuf</name></expr></argument>, <argument pos:start="1577:32" pos:end="1577:46"><expr pos:start="1577:32" pos:end="1577:46"><sizeof pos:start="1577:32" pos:end="1577:46">sizeof<argument_list pos:start="1577:38" pos:end="1577:46">(<argument pos:start="1577:39" pos:end="1577:45"><expr pos:start="1577:39" pos:end="1577:45"><name pos:start="1577:39" pos:end="1577:45">ratebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1577:49" pos:end="1577:57"><expr pos:start="1577:49" pos:end="1577:57"><name pos:start="1577:49" pos:end="1577:57"><name pos:start="1577:49" pos:end="1577:49">c</name><operator pos:start="1577:50" pos:end="1577:51">-&gt;</operator><name pos:start="1577:52" pos:end="1577:57">buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1577:61" pos:end="1584:5">{<block_content pos:start="1578:9" pos:end="1583:9">
        <if_stmt pos:start="1578:9" pos:end="1583:9"><if pos:start="1578:9" pos:end="1583:9">if <condition pos:start="1578:12" pos:end="1578:46">(<expr pos:start="1578:13" pos:end="1578:45"><call pos:start="1578:13" pos:end="1578:45"><name pos:start="1578:13" pos:end="1578:33">modify_current_stream</name><argument_list pos:start="1578:34" pos:end="1578:45">(<argument pos:start="1578:35" pos:end="1578:35"><expr pos:start="1578:35" pos:end="1578:35"><name pos:start="1578:35" pos:end="1578:35">c</name></expr></argument>, <argument pos:start="1578:38" pos:end="1578:44"><expr pos:start="1578:38" pos:end="1578:44"><name pos:start="1578:38" pos:end="1578:44">ratebuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1578:48" pos:end="1583:9">{<block_content pos:start="1579:13" pos:end="1582:13">
            <for pos:start="1579:13" pos:end="1582:13">for <control pos:start="1579:17" pos:end="1579:65">(<init pos:start="1579:18" pos:end="1579:23"><expr pos:start="1579:18" pos:end="1579:22"><name pos:start="1579:18" pos:end="1579:18">i</name> <operator pos:start="1579:20" pos:end="1579:20">=</operator> <literal type="number" pos:start="1579:22" pos:end="1579:22">0</literal></expr>;</init> <condition pos:start="1579:25" pos:end="1579:60"><expr pos:start="1579:25" pos:end="1579:59"><name pos:start="1579:25" pos:end="1579:25">i</name> <operator pos:start="1579:27" pos:end="1579:27">&lt;</operator> <call pos:start="1579:29" pos:end="1579:59"><name pos:start="1579:29" pos:end="1579:42">FF_ARRAY_ELEMS</name><argument_list pos:start="1579:43" pos:end="1579:59">(<argument pos:start="1579:44" pos:end="1579:58"><expr pos:start="1579:44" pos:end="1579:58"><name pos:start="1579:44" pos:end="1579:58"><name pos:start="1579:44" pos:end="1579:44">c</name><operator pos:start="1579:45" pos:end="1579:46">-&gt;</operator><name pos:start="1579:47" pos:end="1579:58">feed_streams</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="1579:62" pos:end="1579:64"><expr pos:start="1579:62" pos:end="1579:64"><name pos:start="1579:62" pos:end="1579:62">i</name><operator pos:start="1579:63" pos:end="1579:64">++</operator></expr></incr>)</control> <block pos:start="1579:67" pos:end="1582:13">{<block_content pos:start="1580:17" pos:end="1581:51">
                <if_stmt pos:start="1580:17" pos:end="1581:51"><if pos:start="1580:17" pos:end="1581:51">if <condition pos:start="1580:20" pos:end="1580:51">(<expr pos:start="1580:21" pos:end="1580:50"><name pos:start="1580:21" pos:end="1580:45"><name pos:start="1580:21" pos:end="1580:21">c</name><operator pos:start="1580:22" pos:end="1580:23">-&gt;</operator><name pos:start="1580:24" pos:end="1580:42">switch_feed_streams</name><index pos:start="1580:43" pos:end="1580:45">[<expr pos:start="1580:44" pos:end="1580:44"><name pos:start="1580:44" pos:end="1580:44">i</name></expr>]</index></name> <operator pos:start="1580:47" pos:end="1580:48">&gt;=</operator> <literal type="number" pos:start="1580:50" pos:end="1580:50">0</literal></expr>)</condition><block type="pseudo" pos:start="1581:21" pos:end="1581:51"><block_content pos:start="1581:21" pos:end="1581:51">
                    <expr_stmt pos:start="1581:21" pos:end="1581:51"><expr pos:start="1581:21" pos:end="1581:50"><name pos:start="1581:21" pos:end="1581:45"><name pos:start="1581:21" pos:end="1581:21">c</name><operator pos:start="1581:22" pos:end="1581:23">-&gt;</operator><name pos:start="1581:24" pos:end="1581:42">switch_feed_streams</name><index pos:start="1581:43" pos:end="1581:45">[<expr pos:start="1581:44" pos:end="1581:44"><name pos:start="1581:44" pos:end="1581:44">i</name></expr>]</index></name> <operator pos:start="1581:47" pos:end="1581:47">=</operator> <operator pos:start="1581:49" pos:end="1581:49">-</operator><literal type="number" pos:start="1581:50" pos:end="1581:50">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="1586:5" pos:end="1588:48"><if pos:start="1586:5" pos:end="1588:48">if <condition pos:start="1586:8" pos:end="1586:22">(<expr pos:start="1586:9" pos:end="1586:20"><name pos:start="1586:9" pos:end="1586:15"><name pos:start="1586:9" pos:end="1586:9">c</name><operator pos:start="1586:10" pos:end="1586:11">-&gt;</operator><name pos:start="1586:12" pos:end="1586:15">post</name></name> <operator pos:start="1586:17" pos:end="1586:18">==</operator> <literal type="number" pos:start="1586:20" pos:end="1586:20">0</literal></expr> )</condition><block pos:start="1586:23" pos:end="1588:48">{<block_content pos:start="1587:1" pos:end="1588:47">
<if_stmt pos:start="1587:1" pos:end="1588:47"><if pos:start="1587:1" pos:end="1588:47">if<condition pos:start="1587:3" pos:end="1587:44">( <expr pos:start="1587:5" pos:end="1587:43"><name pos:start="1587:5" pos:end="1587:23"><name pos:start="1587:5" pos:end="1587:10">stream</name><operator pos:start="1587:11" pos:end="1587:12">-&gt;</operator><name pos:start="1587:13" pos:end="1587:23">stream_type</name></name> <operator pos:start="1587:25" pos:end="1587:26">==</operator> <name pos:start="1587:28" pos:end="1587:43">STREAM_TYPE_LIVE</name></expr>)</condition><block type="pseudo" pos:start="1588:9" pos:end="1588:47"><block_content pos:start="1588:9" pos:end="1588:47">
        <expr_stmt pos:start="1588:9" pos:end="1588:47"><expr pos:start="1588:9" pos:end="1588:46"><name pos:start="1588:9" pos:end="1588:25">current_bandwidth</name> <operator pos:start="1588:27" pos:end="1588:28">+=</operator> <name pos:start="1588:30" pos:end="1588:46"><name pos:start="1588:30" pos:end="1588:35">stream</name><operator pos:start="1588:36" pos:end="1588:37">-&gt;</operator><name pos:start="1588:38" pos:end="1588:46">bandwidth</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1590:5" pos:end="1590:73">/* If already streaming this feed, do not let another feeder start */</comment>
    <if_stmt pos:start="1591:5" pos:end="1595:5"><if pos:start="1591:5" pos:end="1595:5">if <condition pos:start="1591:8" pos:end="1591:28">(<expr pos:start="1591:9" pos:end="1591:27"><name pos:start="1591:9" pos:end="1591:27"><name pos:start="1591:9" pos:end="1591:14">stream</name><operator pos:start="1591:15" pos:end="1591:16">-&gt;</operator><name pos:start="1591:17" pos:end="1591:27">feed_opened</name></name></expr>)</condition> <block pos:start="1591:30" pos:end="1595:5">{<block_content pos:start="1592:9" pos:end="1594:24">
        <expr_stmt pos:start="1592:9" pos:end="1592:75"><expr pos:start="1592:9" pos:end="1592:74"><call pos:start="1592:9" pos:end="1592:74"><name pos:start="1592:9" pos:end="1592:16">snprintf</name><argument_list pos:start="1592:17" pos:end="1592:74">(<argument pos:start="1592:18" pos:end="1592:20"><expr pos:start="1592:18" pos:end="1592:20"><name pos:start="1592:18" pos:end="1592:20">msg</name></expr></argument>, <argument pos:start="1592:23" pos:end="1592:33"><expr pos:start="1592:23" pos:end="1592:33"><sizeof pos:start="1592:23" pos:end="1592:33">sizeof<argument_list pos:start="1592:29" pos:end="1592:33">(<argument pos:start="1592:30" pos:end="1592:32"><expr pos:start="1592:30" pos:end="1592:32"><name pos:start="1592:30" pos:end="1592:32">msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1592:36" pos:end="1592:73"><expr pos:start="1592:36" pos:end="1592:73"><literal type="string" pos:start="1592:36" pos:end="1592:73">"This feed is already being received."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1593:9" pos:end="1593:78"><expr pos:start="1593:9" pos:end="1593:77"><call pos:start="1593:9" pos:end="1593:77"><name pos:start="1593:9" pos:end="1593:16">http_log</name><argument_list pos:start="1593:17" pos:end="1593:77">(<argument pos:start="1593:18" pos:end="1593:53"><expr pos:start="1593:18" pos:end="1593:53"><literal type="string" pos:start="1593:18" pos:end="1593:53">"Feed '%s' already being received\n"</literal></expr></argument>, <argument pos:start="1593:56" pos:end="1593:76"><expr pos:start="1593:56" pos:end="1593:76"><name pos:start="1593:56" pos:end="1593:76"><name pos:start="1593:56" pos:end="1593:61">stream</name><operator pos:start="1593:62" pos:end="1593:63">-&gt;</operator><name pos:start="1593:64" pos:end="1593:76">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="1594:9" pos:end="1594:24">goto <name pos:start="1594:14" pos:end="1594:23">send_error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="1597:5" pos:end="1620:6"><if pos:start="1597:5" pos:end="1620:6">if <condition pos:start="1597:8" pos:end="1597:22">(<expr pos:start="1597:9" pos:end="1597:20"><name pos:start="1597:9" pos:end="1597:15"><name pos:start="1597:9" pos:end="1597:9">c</name><operator pos:start="1597:10" pos:end="1597:11">-&gt;</operator><name pos:start="1597:12" pos:end="1597:15">post</name></name> <operator pos:start="1597:17" pos:end="1597:18">==</operator> <literal type="number" pos:start="1597:20" pos:end="1597:20">0</literal></expr> )</condition><block pos:start="1597:23" pos:end="1620:6">{<block_content pos:start="1598:1" pos:end="1620:5">
<if_stmt pos:start="1598:1" pos:end="1620:5"><if pos:start="1598:1" pos:end="1620:5">if<condition pos:start="1598:3" pos:end="1598:45">( <expr pos:start="1598:5" pos:end="1598:44"><name pos:start="1598:5" pos:end="1598:24"><name pos:start="1598:5" pos:end="1598:10">config</name><operator pos:start="1598:11" pos:end="1598:11">.</operator><name pos:start="1598:12" pos:end="1598:24">max_bandwidth</name></name> <operator pos:start="1598:26" pos:end="1598:26">&lt;</operator> <name pos:start="1598:28" pos:end="1598:44">current_bandwidth</name></expr>)</condition> <block pos:start="1598:47" pos:end="1620:5">{<block_content pos:start="1599:9" pos:end="1619:17">
        <expr_stmt pos:start="1599:9" pos:end="1599:28"><expr pos:start="1599:9" pos:end="1599:27"><name pos:start="1599:9" pos:end="1599:21"><name pos:start="1599:9" pos:end="1599:9">c</name><operator pos:start="1599:10" pos:end="1599:11">-&gt;</operator><name pos:start="1599:12" pos:end="1599:21">http_error</name></name> <operator pos:start="1599:23" pos:end="1599:23">=</operator> <literal type="number" pos:start="1599:25" pos:end="1599:27">503</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1600:9" pos:end="1600:22"><expr pos:start="1600:9" pos:end="1600:21"><name pos:start="1600:9" pos:end="1600:9">q</name> <operator pos:start="1600:11" pos:end="1600:11">=</operator> <name pos:start="1600:13" pos:end="1600:21"><name pos:start="1600:13" pos:end="1600:13">c</name><operator pos:start="1600:14" pos:end="1600:15">-&gt;</operator><name pos:start="1600:16" pos:end="1600:21">buffer</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="1601:9" pos:end="1613:58"><expr pos:start="1601:9" pos:end="1613:57"><call pos:start="1601:9" pos:end="1613:57"><name pos:start="1601:9" pos:end="1601:16">snprintf</name><argument_list pos:start="1601:17" pos:end="1613:57">(<argument pos:start="1601:18" pos:end="1601:18"><expr pos:start="1601:18" pos:end="1601:18"><name pos:start="1601:18" pos:end="1601:18">q</name></expr></argument>, <argument pos:start="1601:21" pos:end="1601:34"><expr pos:start="1601:21" pos:end="1601:34"><name pos:start="1601:21" pos:end="1601:34"><name pos:start="1601:21" pos:end="1601:21">c</name><operator pos:start="1601:22" pos:end="1601:23">-&gt;</operator><name pos:start="1601:24" pos:end="1601:34">buffer_size</name></name></expr></argument>,
                      <argument pos:start="1602:23" pos:end="1612:42"><expr pos:start="1602:23" pos:end="1612:42"><literal type="string" pos:start="1602:23" pos:end="1602:56">"HTTP/1.0 503 Server too busy\r\n"</literal>
                      <literal type="string" pos:start="1603:23" pos:end="1603:51">"Content-type: text/html\r\n"</literal>
                      <literal type="string" pos:start="1604:23" pos:end="1604:28">"\r\n"</literal>
                      <literal type="string" pos:start="1605:23" pos:end="1605:41">"&lt;!DOCTYPE html&gt;\n"</literal>
                      <literal type="string" pos:start="1606:23" pos:end="1606:76">"&lt;html&gt;&lt;head&gt;&lt;title&gt;Too busy&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\r\n"</literal>
                      <literal type="string" pos:start="1607:23" pos:end="1607:75">"&lt;p&gt;The server is too busy to serve your request at "</literal>
                      <literal type="string" pos:start="1608:23" pos:end="1608:42">"this time.&lt;/p&gt;\r\n"</literal>
                      <literal type="string" pos:start="1609:23" pos:end="1609:78">"&lt;p&gt;The bandwidth being served (including your stream) "</literal>
                      <literal type="string" pos:start="1610:23" pos:end="1610:28">"is %"</literal><name pos:start="1610:29" pos:end="1610:34">PRIu64</name><literal type="string" pos:start="1610:35" pos:end="1610:74">"kbit/s, and this exceeds the limit of "</literal>
                      <literal type="string" pos:start="1611:23" pos:end="1611:25">"%"</literal><name pos:start="1611:26" pos:end="1611:31">PRIu64</name><literal type="string" pos:start="1611:32" pos:end="1611:48">"kbit/s.&lt;/p&gt;\r\n"</literal>
                      <literal type="string" pos:start="1612:23" pos:end="1612:42">"&lt;/body&gt;&lt;/html&gt;\r\n"</literal></expr></argument>,
                 <argument pos:start="1613:18" pos:end="1613:34"><expr pos:start="1613:18" pos:end="1613:34"><name pos:start="1613:18" pos:end="1613:34">current_bandwidth</name></expr></argument>, <argument pos:start="1613:37" pos:end="1613:56"><expr pos:start="1613:37" pos:end="1613:56"><name pos:start="1613:37" pos:end="1613:56"><name pos:start="1613:37" pos:end="1613:42">config</name><operator pos:start="1613:43" pos:end="1613:43">.</operator><name pos:start="1613:44" pos:end="1613:56">max_bandwidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1614:9" pos:end="1614:23"><expr pos:start="1614:9" pos:end="1614:22"><name pos:start="1614:9" pos:end="1614:9">q</name> <operator pos:start="1614:11" pos:end="1614:12">+=</operator> <call pos:start="1614:14" pos:end="1614:22"><name pos:start="1614:14" pos:end="1614:19">strlen</name><argument_list pos:start="1614:20" pos:end="1614:22">(<argument pos:start="1614:21" pos:end="1614:21"><expr pos:start="1614:21" pos:end="1614:21"><name pos:start="1614:21" pos:end="1614:21">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="1615:9" pos:end="1615:35">/* prepare output buffer */</comment>
        <expr_stmt pos:start="1616:9" pos:end="1616:34"><expr pos:start="1616:9" pos:end="1616:33"><name pos:start="1616:9" pos:end="1616:21"><name pos:start="1616:9" pos:end="1616:9">c</name><operator pos:start="1616:10" pos:end="1616:11">-&gt;</operator><name pos:start="1616:12" pos:end="1616:21">buffer_ptr</name></name> <operator pos:start="1616:23" pos:end="1616:23">=</operator> <name pos:start="1616:25" pos:end="1616:33"><name pos:start="1616:25" pos:end="1616:25">c</name><operator pos:start="1616:26" pos:end="1616:27">-&gt;</operator><name pos:start="1616:28" pos:end="1616:33">buffer</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="1617:9" pos:end="1617:26"><expr pos:start="1617:9" pos:end="1617:25"><name pos:start="1617:9" pos:end="1617:21"><name pos:start="1617:9" pos:end="1617:9">c</name><operator pos:start="1617:10" pos:end="1617:11">-&gt;</operator><name pos:start="1617:12" pos:end="1617:21">buffer_end</name></name> <operator pos:start="1617:23" pos:end="1617:23">=</operator> <name pos:start="1617:25" pos:end="1617:25">q</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1618:9" pos:end="1618:41"><expr pos:start="1618:9" pos:end="1618:40"><name pos:start="1618:9" pos:end="1618:16"><name pos:start="1618:9" pos:end="1618:9">c</name><operator pos:start="1618:10" pos:end="1618:11">-&gt;</operator><name pos:start="1618:12" pos:end="1618:16">state</name></name> <operator pos:start="1618:18" pos:end="1618:18">=</operator> <name pos:start="1618:20" pos:end="1618:40">HTTPSTATE_SEND_HEADER</name></expr>;</expr_stmt>
        <return pos:start="1619:9" pos:end="1619:17">return <expr pos:start="1619:16" pos:end="1619:16"><literal type="number" pos:start="1619:16" pos:end="1619:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt>

    <if_stmt pos:start="1622:5" pos:end="1749:5"><if pos:start="1622:5" pos:end="1749:5">if <condition pos:start="1622:8" pos:end="1622:33">(<expr pos:start="1622:9" pos:end="1622:32"><name pos:start="1622:9" pos:end="1622:18">redir_type</name> <operator pos:start="1622:20" pos:end="1622:21">!=</operator> <name pos:start="1622:23" pos:end="1622:32">REDIR_NONE</name></expr>)</condition> <block pos:start="1622:35" pos:end="1749:5">{<block_content pos:start="1623:9" pos:end="1748:24">
        <decl_stmt pos:start="1623:9" pos:end="1623:33"><decl pos:start="1623:9" pos:end="1623:32"><type pos:start="1623:9" pos:end="1623:20"><specifier pos:start="1623:9" pos:end="1623:13">const</specifier> <name pos:start="1623:15" pos:end="1623:18">char</name> <modifier pos:start="1623:20" pos:end="1623:20">*</modifier></type><name pos:start="1623:21" pos:end="1623:28">hostinfo</name> <init pos:start="1623:30" pos:end="1623:32">= <expr pos:start="1623:32" pos:end="1623:32"><literal type="number" pos:start="1623:32" pos:end="1623:32">0</literal></expr></init></decl>;</decl_stmt>

        <for pos:start="1625:9" pos:end="1635:9">for <control pos:start="1625:13" pos:end="1625:61">(<init pos:start="1625:14" pos:end="1625:27"><expr pos:start="1625:14" pos:end="1625:26"><name pos:start="1625:14" pos:end="1625:14">p</name> <operator pos:start="1625:16" pos:end="1625:16">=</operator> <name pos:start="1625:18" pos:end="1625:26"><name pos:start="1625:18" pos:end="1625:18">c</name><operator pos:start="1625:19" pos:end="1625:20">-&gt;</operator><name pos:start="1625:21" pos:end="1625:26">buffer</name></name></expr>;</init> <condition pos:start="1625:29" pos:end="1625:59"><expr pos:start="1625:29" pos:end="1625:58"><operator pos:start="1625:29" pos:end="1625:29">*</operator><name pos:start="1625:30" pos:end="1625:30">p</name> <operator pos:start="1625:32" pos:end="1625:33">&amp;&amp;</operator> <operator pos:start="1625:35" pos:end="1625:35">*</operator><name pos:start="1625:36" pos:end="1625:36">p</name> <operator pos:start="1625:38" pos:end="1625:39">!=</operator> <literal type="char" pos:start="1625:41" pos:end="1625:44">'\r'</literal> <operator pos:start="1625:46" pos:end="1625:47">&amp;&amp;</operator> <operator pos:start="1625:49" pos:end="1625:49">*</operator><name pos:start="1625:50" pos:end="1625:50">p</name> <operator pos:start="1625:52" pos:end="1625:53">!=</operator> <literal type="char" pos:start="1625:55" pos:end="1625:58">'\n'</literal></expr>;</condition> <incr/>)</control> <block pos:start="1625:63" pos:end="1635:9">{<block_content pos:start="1626:13" pos:end="1634:16">
            <if_stmt pos:start="1626:13" pos:end="1629:13"><if pos:start="1626:13" pos:end="1629:13">if <condition pos:start="1626:16" pos:end="1626:51">(<expr pos:start="1626:17" pos:end="1626:50"><call pos:start="1626:17" pos:end="1626:45"><name pos:start="1626:17" pos:end="1626:30">av_strncasecmp</name><argument_list pos:start="1626:31" pos:end="1626:45">(<argument pos:start="1626:32" pos:end="1626:32"><expr pos:start="1626:32" pos:end="1626:32"><name pos:start="1626:32" pos:end="1626:32">p</name></expr></argument>, <argument pos:start="1626:35" pos:end="1626:41"><expr pos:start="1626:35" pos:end="1626:41"><literal type="string" pos:start="1626:35" pos:end="1626:41">"Host:"</literal></expr></argument>, <argument pos:start="1626:44" pos:end="1626:44"><expr pos:start="1626:44" pos:end="1626:44"><literal type="number" pos:start="1626:44" pos:end="1626:44">5</literal></expr></argument>)</argument_list></call> <operator pos:start="1626:47" pos:end="1626:48">==</operator> <literal type="number" pos:start="1626:50" pos:end="1626:50">0</literal></expr>)</condition> <block pos:start="1626:53" pos:end="1629:13">{<block_content pos:start="1627:17" pos:end="1628:22">
                <expr_stmt pos:start="1627:17" pos:end="1627:33"><expr pos:start="1627:17" pos:end="1627:32"><name pos:start="1627:17" pos:end="1627:24">hostinfo</name> <operator pos:start="1627:26" pos:end="1627:26">=</operator> <name pos:start="1627:28" pos:end="1627:28">p</name> <operator pos:start="1627:30" pos:end="1627:30">+</operator> <literal type="number" pos:start="1627:32" pos:end="1627:32">5</literal></expr>;</expr_stmt>
                <break pos:start="1628:17" pos:end="1628:22">break;</break>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="1630:13" pos:end="1630:32"><expr pos:start="1630:13" pos:end="1630:31"><name pos:start="1630:13" pos:end="1630:13">p</name> <operator pos:start="1630:15" pos:end="1630:15">=</operator> <call pos:start="1630:17" pos:end="1630:31"><name pos:start="1630:17" pos:end="1630:22">strchr</name><argument_list pos:start="1630:23" pos:end="1630:31">(<argument pos:start="1630:24" pos:end="1630:24"><expr pos:start="1630:24" pos:end="1630:24"><name pos:start="1630:24" pos:end="1630:24">p</name></expr></argument>, <argument pos:start="1630:27" pos:end="1630:30"><expr pos:start="1630:27" pos:end="1630:30"><literal type="char" pos:start="1630:27" pos:end="1630:30">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1631:13" pos:end="1632:22"><if pos:start="1631:13" pos:end="1632:22">if <condition pos:start="1631:16" pos:end="1631:19">(<expr pos:start="1631:17" pos:end="1631:18"><operator pos:start="1631:17" pos:end="1631:17">!</operator><name pos:start="1631:18" pos:end="1631:18">p</name></expr>)</condition><block type="pseudo" pos:start="1632:17" pos:end="1632:22"><block_content pos:start="1632:17" pos:end="1632:22">
                <break pos:start="1632:17" pos:end="1632:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1634:13" pos:end="1634:16"><expr pos:start="1634:13" pos:end="1634:15"><name pos:start="1634:13" pos:end="1634:13">p</name><operator pos:start="1634:14" pos:end="1634:15">++</operator></expr>;</expr_stmt>
        </block_content>}</block></for>

        <if_stmt pos:start="1637:9" pos:end="1745:9"><if pos:start="1637:9" pos:end="1745:9">if <condition pos:start="1637:12" pos:end="1637:21">(<expr pos:start="1637:13" pos:end="1637:20"><name pos:start="1637:13" pos:end="1637:20">hostinfo</name></expr>)</condition> <block pos:start="1637:23" pos:end="1745:9">{<block_content pos:start="1638:13" pos:end="1744:13">
            <decl_stmt pos:start="1638:13" pos:end="1638:22"><decl pos:start="1638:13" pos:end="1638:21"><type pos:start="1638:13" pos:end="1638:18"><name pos:start="1638:13" pos:end="1638:16">char</name> <modifier pos:start="1638:18" pos:end="1638:18">*</modifier></type><name pos:start="1638:19" pos:end="1638:21">eoh</name></decl>;</decl_stmt>
            <decl_stmt pos:start="1639:13" pos:end="1639:30"><decl pos:start="1639:13" pos:end="1639:29"><type pos:start="1639:13" pos:end="1639:16"><name pos:start="1639:13" pos:end="1639:16">char</name></type> <name pos:start="1639:18" pos:end="1639:29"><name pos:start="1639:18" pos:end="1639:24">hostbuf</name><index pos:start="1639:25" pos:end="1639:29">[<expr pos:start="1639:26" pos:end="1639:28"><literal type="number" pos:start="1639:26" pos:end="1639:28">260</literal></expr>]</index></name></decl>;</decl_stmt>

            <while pos:start="1641:13" pos:end="1642:27">while <condition pos:start="1641:19" pos:end="1641:41">(<expr pos:start="1641:20" pos:end="1641:40"><call pos:start="1641:20" pos:end="1641:40"><name pos:start="1641:20" pos:end="1641:29">av_isspace</name><argument_list pos:start="1641:30" pos:end="1641:40">(<argument pos:start="1641:31" pos:end="1641:39"><expr pos:start="1641:31" pos:end="1641:39"><operator pos:start="1641:31" pos:end="1641:31">*</operator><name pos:start="1641:32" pos:end="1641:39">hostinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1642:17" pos:end="1642:27"><block_content pos:start="1642:17" pos:end="1642:27">
                <expr_stmt pos:start="1642:17" pos:end="1642:27"><expr pos:start="1642:17" pos:end="1642:26"><name pos:start="1642:17" pos:end="1642:24">hostinfo</name><operator pos:start="1642:25" pos:end="1642:26">++</operator></expr>;</expr_stmt></block_content></block></while>

            <expr_stmt pos:start="1644:13" pos:end="1644:41"><expr pos:start="1644:13" pos:end="1644:40"><name pos:start="1644:13" pos:end="1644:15">eoh</name> <operator pos:start="1644:17" pos:end="1644:17">=</operator> <call pos:start="1644:19" pos:end="1644:40"><name pos:start="1644:19" pos:end="1644:24">strchr</name><argument_list pos:start="1644:25" pos:end="1644:40">(<argument pos:start="1644:26" pos:end="1644:33"><expr pos:start="1644:26" pos:end="1644:33"><name pos:start="1644:26" pos:end="1644:33">hostinfo</name></expr></argument>, <argument pos:start="1644:36" pos:end="1644:39"><expr pos:start="1644:36" pos:end="1644:39"><literal type="char" pos:start="1644:36" pos:end="1644:39">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1645:13" pos:end="1744:13"><if pos:start="1645:13" pos:end="1744:13">if <condition pos:start="1645:16" pos:end="1645:20">(<expr pos:start="1645:17" pos:end="1645:19"><name pos:start="1645:17" pos:end="1645:19">eoh</name></expr>)</condition> <block pos:start="1645:22" pos:end="1744:13">{<block_content pos:start="1646:17" pos:end="1743:17">
                <if_stmt pos:start="1646:17" pos:end="1647:26"><if pos:start="1646:17" pos:end="1647:26">if <condition pos:start="1646:20" pos:end="1646:36">(<expr pos:start="1646:21" pos:end="1646:35"><name pos:start="1646:21" pos:end="1646:27"><name pos:start="1646:21" pos:end="1646:23">eoh</name><index pos:start="1646:24" pos:end="1646:27">[<expr pos:start="1646:25" pos:end="1646:26"><operator pos:start="1646:25" pos:end="1646:25">-</operator><literal type="number" pos:start="1646:26" pos:end="1646:26">1</literal></expr>]</index></name> <operator pos:start="1646:29" pos:end="1646:30">==</operator> <literal type="char" pos:start="1646:32" pos:end="1646:35">'\r'</literal></expr>)</condition><block type="pseudo" pos:start="1647:21" pos:end="1647:26"><block_content pos:start="1647:21" pos:end="1647:26">
                    <expr_stmt pos:start="1647:21" pos:end="1647:26"><expr pos:start="1647:21" pos:end="1647:25"><name pos:start="1647:21" pos:end="1647:23">eoh</name><operator pos:start="1647:24" pos:end="1647:25">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="1649:17" pos:end="1743:17"><if pos:start="1649:17" pos:end="1743:17">if <condition pos:start="1649:20" pos:end="1649:57">(<expr pos:start="1649:21" pos:end="1649:56"><name pos:start="1649:21" pos:end="1649:23">eoh</name> <operator pos:start="1649:25" pos:end="1649:25">-</operator> <name pos:start="1649:27" pos:end="1649:34">hostinfo</name> <operator pos:start="1649:36" pos:end="1649:36">&lt;</operator> <sizeof pos:start="1649:38" pos:end="1649:52">sizeof<argument_list pos:start="1649:44" pos:end="1649:52">(<argument pos:start="1649:45" pos:end="1649:51"><expr pos:start="1649:45" pos:end="1649:51"><name pos:start="1649:45" pos:end="1649:51">hostbuf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="1649:54" pos:end="1649:54">-</operator> <literal type="number" pos:start="1649:56" pos:end="1649:56">1</literal></expr>)</condition> <block pos:start="1649:59" pos:end="1743:17">{<block_content pos:start="1650:21" pos:end="1742:29">
                    <expr_stmt pos:start="1650:21" pos:end="1650:62"><expr pos:start="1650:21" pos:end="1650:61"><call pos:start="1650:21" pos:end="1650:61"><name pos:start="1650:21" pos:end="1650:26">memcpy</name><argument_list pos:start="1650:27" pos:end="1650:61">(<argument pos:start="1650:28" pos:end="1650:34"><expr pos:start="1650:28" pos:end="1650:34"><name pos:start="1650:28" pos:end="1650:34">hostbuf</name></expr></argument>, <argument pos:start="1650:37" pos:end="1650:44"><expr pos:start="1650:37" pos:end="1650:44"><name pos:start="1650:37" pos:end="1650:44">hostinfo</name></expr></argument>, <argument pos:start="1650:47" pos:end="1650:60"><expr pos:start="1650:47" pos:end="1650:60"><name pos:start="1650:47" pos:end="1650:49">eoh</name> <operator pos:start="1650:51" pos:end="1650:51">-</operator> <name pos:start="1650:53" pos:end="1650:60">hostinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1651:21" pos:end="1651:48"><expr pos:start="1651:21" pos:end="1651:47"><name pos:start="1651:21" pos:end="1651:43"><name pos:start="1651:21" pos:end="1651:27">hostbuf</name><index pos:start="1651:28" pos:end="1651:43">[<expr pos:start="1651:29" pos:end="1651:42"><name pos:start="1651:29" pos:end="1651:31">eoh</name> <operator pos:start="1651:33" pos:end="1651:33">-</operator> <name pos:start="1651:35" pos:end="1651:42">hostinfo</name></expr>]</index></name> <operator pos:start="1651:45" pos:end="1651:45">=</operator> <literal type="number" pos:start="1651:47" pos:end="1651:47">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="1653:21" pos:end="1653:40"><expr pos:start="1653:21" pos:end="1653:39"><name pos:start="1653:21" pos:end="1653:33"><name pos:start="1653:21" pos:end="1653:21">c</name><operator pos:start="1653:22" pos:end="1653:23">-&gt;</operator><name pos:start="1653:24" pos:end="1653:33">http_error</name></name> <operator pos:start="1653:35" pos:end="1653:35">=</operator> <literal type="number" pos:start="1653:37" pos:end="1653:39">200</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="1654:21" pos:end="1654:34"><expr pos:start="1654:21" pos:end="1654:33"><name pos:start="1654:21" pos:end="1654:21">q</name> <operator pos:start="1654:23" pos:end="1654:23">=</operator> <name pos:start="1654:25" pos:end="1654:33"><name pos:start="1654:25" pos:end="1654:25">c</name><operator pos:start="1654:26" pos:end="1654:27">-&gt;</operator><name pos:start="1654:28" pos:end="1654:33">buffer</name></name></expr>;</expr_stmt>
                    <switch pos:start="1655:21" pos:end="1736:21">switch<condition pos:start="1655:27" pos:end="1655:38">(<expr pos:start="1655:28" pos:end="1655:37"><name pos:start="1655:28" pos:end="1655:37">redir_type</name></expr>)</condition> <block pos:start="1655:40" pos:end="1736:21">{<block_content pos:start="1656:21" pos:end="1735:30">
                    <case pos:start="1656:21" pos:end="1656:35">case <expr pos:start="1656:26" pos:end="1656:34"><name pos:start="1656:26" pos:end="1656:34">REDIR_ASX</name></expr>:</case>
                        <expr_stmt pos:start="1657:25" pos:end="1664:77"><expr pos:start="1657:25" pos:end="1664:76"><call pos:start="1657:25" pos:end="1664:76"><name pos:start="1657:25" pos:end="1657:32">snprintf</name><argument_list pos:start="1657:33" pos:end="1664:76">(<argument pos:start="1657:34" pos:end="1657:34"><expr pos:start="1657:34" pos:end="1657:34"><name pos:start="1657:34" pos:end="1657:34">q</name></expr></argument>, <argument pos:start="1657:37" pos:end="1657:50"><expr pos:start="1657:37" pos:end="1657:50"><name pos:start="1657:37" pos:end="1657:50"><name pos:start="1657:37" pos:end="1657:37">c</name><operator pos:start="1657:38" pos:end="1657:39">-&gt;</operator><name pos:start="1657:40" pos:end="1657:50">buffer_size</name></name></expr></argument>,
                                      <argument pos:start="1658:39" pos:end="1664:50"><expr pos:start="1658:39" pos:end="1664:50"><literal type="string" pos:start="1658:39" pos:end="1658:68">"HTTP/1.0 200 ASX Follows\r\n"</literal>
                                      <literal type="string" pos:start="1659:39" pos:end="1659:72">"Content-type: video/x-ms-asf\r\n"</literal>
                                      <literal type="string" pos:start="1660:39" pos:end="1660:44">"\r\n"</literal>
                                      <literal type="string" pos:start="1661:39" pos:end="1661:63">"&lt;ASX Version=\"3\"&gt;\r\n"</literal>
                                      <comment type="line" pos:start="1662:39" pos:end="1662:80">//"&lt;!-- Autogenerated by ffserver --&gt;\r\n"</comment>
                                      <literal type="string" pos:start="1663:39" pos:end="1663:89">"&lt;ENTRY&gt;&lt;REF HREF=\"http://%s/%s%s\"/&gt;&lt;/ENTRY&gt;\r\n"</literal>
                                      <literal type="string" pos:start="1664:39" pos:end="1664:50">"&lt;/ASX&gt;\r\n"</literal></expr></argument>, <argument pos:start="1664:53" pos:end="1664:59"><expr pos:start="1664:53" pos:end="1664:59"><name pos:start="1664:53" pos:end="1664:59">hostbuf</name></expr></argument>, <argument pos:start="1664:62" pos:end="1664:69"><expr pos:start="1664:62" pos:end="1664:69"><name pos:start="1664:62" pos:end="1664:69">filename</name></expr></argument>, <argument pos:start="1664:72" pos:end="1664:75"><expr pos:start="1664:72" pos:end="1664:75"><name pos:start="1664:72" pos:end="1664:75">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1665:25" pos:end="1665:39"><expr pos:start="1665:25" pos:end="1665:38"><name pos:start="1665:25" pos:end="1665:25">q</name> <operator pos:start="1665:27" pos:end="1665:28">+=</operator> <call pos:start="1665:30" pos:end="1665:38"><name pos:start="1665:30" pos:end="1665:35">strlen</name><argument_list pos:start="1665:36" pos:end="1665:38">(<argument pos:start="1665:37" pos:end="1665:37"><expr pos:start="1665:37" pos:end="1665:37"><name pos:start="1665:37" pos:end="1665:37">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1666:25" pos:end="1666:30">break;</break>
                    <case pos:start="1667:21" pos:end="1667:35">case <expr pos:start="1667:26" pos:end="1667:34"><name pos:start="1667:26" pos:end="1667:34">REDIR_RAM</name></expr>:</case>
                        <expr_stmt pos:start="1668:25" pos:end="1673:85"><expr pos:start="1668:25" pos:end="1673:84"><call pos:start="1668:25" pos:end="1673:84"><name pos:start="1668:25" pos:end="1668:32">snprintf</name><argument_list pos:start="1668:33" pos:end="1673:84">(<argument pos:start="1668:34" pos:end="1668:34"><expr pos:start="1668:34" pos:end="1668:34"><name pos:start="1668:34" pos:end="1668:34">q</name></expr></argument>, <argument pos:start="1668:37" pos:end="1668:50"><expr pos:start="1668:37" pos:end="1668:50"><name pos:start="1668:37" pos:end="1668:50"><name pos:start="1668:37" pos:end="1668:37">c</name><operator pos:start="1668:38" pos:end="1668:39">-&gt;</operator><name pos:start="1668:40" pos:end="1668:50">buffer_size</name></name></expr></argument>,
                                      <argument pos:start="1669:39" pos:end="1673:58"><expr pos:start="1669:39" pos:end="1673:58"><literal type="string" pos:start="1669:39" pos:end="1669:68">"HTTP/1.0 200 RAM Follows\r\n"</literal>
                                      <literal type="string" pos:start="1670:39" pos:end="1670:78">"Content-type: audio/x-pn-realaudio\r\n"</literal>
                                      <literal type="string" pos:start="1671:39" pos:end="1671:44">"\r\n"</literal>
                                      <literal type="string" pos:start="1672:39" pos:end="1672:71">"# Autogenerated by ffserver\r\n"</literal>
                                      <literal type="string" pos:start="1673:39" pos:end="1673:58">"http://%s/%s%s\r\n"</literal></expr></argument>, <argument pos:start="1673:61" pos:end="1673:67"><expr pos:start="1673:61" pos:end="1673:67"><name pos:start="1673:61" pos:end="1673:67">hostbuf</name></expr></argument>, <argument pos:start="1673:70" pos:end="1673:77"><expr pos:start="1673:70" pos:end="1673:77"><name pos:start="1673:70" pos:end="1673:77">filename</name></expr></argument>, <argument pos:start="1673:80" pos:end="1673:83"><expr pos:start="1673:80" pos:end="1673:83"><name pos:start="1673:80" pos:end="1673:83">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1674:25" pos:end="1674:39"><expr pos:start="1674:25" pos:end="1674:38"><name pos:start="1674:25" pos:end="1674:25">q</name> <operator pos:start="1674:27" pos:end="1674:28">+=</operator> <call pos:start="1674:30" pos:end="1674:38"><name pos:start="1674:30" pos:end="1674:35">strlen</name><argument_list pos:start="1674:36" pos:end="1674:38">(<argument pos:start="1674:37" pos:end="1674:37"><expr pos:start="1674:37" pos:end="1674:37"><name pos:start="1674:37" pos:end="1674:37">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1675:25" pos:end="1675:30">break;</break>
                    <case pos:start="1676:21" pos:end="1676:35">case <expr pos:start="1676:26" pos:end="1676:34"><name pos:start="1676:26" pos:end="1676:34">REDIR_ASF</name></expr>:</case>
                        <expr_stmt pos:start="1677:25" pos:end="1682:90"><expr pos:start="1677:25" pos:end="1682:89"><call pos:start="1677:25" pos:end="1682:89"><name pos:start="1677:25" pos:end="1677:32">snprintf</name><argument_list pos:start="1677:33" pos:end="1682:89">(<argument pos:start="1677:34" pos:end="1677:34"><expr pos:start="1677:34" pos:end="1677:34"><name pos:start="1677:34" pos:end="1677:34">q</name></expr></argument>, <argument pos:start="1677:37" pos:end="1677:50"><expr pos:start="1677:37" pos:end="1677:50"><name pos:start="1677:37" pos:end="1677:50"><name pos:start="1677:37" pos:end="1677:37">c</name><operator pos:start="1677:38" pos:end="1677:39">-&gt;</operator><name pos:start="1677:40" pos:end="1677:50">buffer_size</name></name></expr></argument>,
                                      <argument pos:start="1678:39" pos:end="1682:63"><expr pos:start="1678:39" pos:end="1682:63"><literal type="string" pos:start="1678:39" pos:end="1678:77">"HTTP/1.0 200 ASF Redirect follows\r\n"</literal>
                                      <literal type="string" pos:start="1679:39" pos:end="1679:72">"Content-type: video/x-ms-asf\r\n"</literal>
                                      <literal type="string" pos:start="1680:39" pos:end="1680:44">"\r\n"</literal>
                                      <literal type="string" pos:start="1681:39" pos:end="1681:55">"[Reference]\r\n"</literal>
                                      <literal type="string" pos:start="1682:39" pos:end="1682:63">"Ref1=http://%s/%s%s\r\n"</literal></expr></argument>, <argument pos:start="1682:66" pos:end="1682:72"><expr pos:start="1682:66" pos:end="1682:72"><name pos:start="1682:66" pos:end="1682:72">hostbuf</name></expr></argument>, <argument pos:start="1682:75" pos:end="1682:82"><expr pos:start="1682:75" pos:end="1682:82"><name pos:start="1682:75" pos:end="1682:82">filename</name></expr></argument>, <argument pos:start="1682:85" pos:end="1682:88"><expr pos:start="1682:85" pos:end="1682:88"><name pos:start="1682:85" pos:end="1682:88">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="1683:25" pos:end="1683:39"><expr pos:start="1683:25" pos:end="1683:38"><name pos:start="1683:25" pos:end="1683:25">q</name> <operator pos:start="1683:27" pos:end="1683:28">+=</operator> <call pos:start="1683:30" pos:end="1683:38"><name pos:start="1683:30" pos:end="1683:35">strlen</name><argument_list pos:start="1683:36" pos:end="1683:38">(<argument pos:start="1683:37" pos:end="1683:37"><expr pos:start="1683:37" pos:end="1683:37"><name pos:start="1683:37" pos:end="1683:37">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1684:25" pos:end="1684:30">break;</break>
                    <case pos:start="1685:21" pos:end="1685:36">case <expr pos:start="1685:26" pos:end="1685:35"><name pos:start="1685:26" pos:end="1685:35">REDIR_RTSP</name></expr>:</case>
                        <block pos:start="1686:25" pos:end="1700:25">{<block_content pos:start="1687:29" pos:end="1699:43">
                            <decl_stmt pos:start="1687:29" pos:end="1687:51"><decl pos:start="1687:29" pos:end="1687:46"><type pos:start="1687:29" pos:end="1687:32"><name pos:start="1687:29" pos:end="1687:32">char</name></type> <name pos:start="1687:34" pos:end="1687:46"><name pos:start="1687:34" pos:end="1687:41">hostname</name><index pos:start="1687:42" pos:end="1687:46">[<expr pos:start="1687:43" pos:end="1687:45"><literal type="number" pos:start="1687:43" pos:end="1687:45">256</literal></expr>]</index></name></decl>, <decl pos:start="1687:49" pos:end="1687:50"><type ref="prev" pos:start="1687:29" pos:end="1687:32"><modifier pos:start="1687:49" pos:end="1687:49">*</modifier></type><name pos:start="1687:50" pos:end="1687:50">p</name></decl>;</decl_stmt>
                            <comment type="block" pos:start="1688:29" pos:end="1688:55">/* extract only hostname */</comment>
                            <expr_stmt pos:start="1689:29" pos:end="1689:76"><expr pos:start="1689:29" pos:end="1689:75"><call pos:start="1689:29" pos:end="1689:75"><name pos:start="1689:29" pos:end="1689:38">av_strlcpy</name><argument_list pos:start="1689:39" pos:end="1689:75">(<argument pos:start="1689:40" pos:end="1689:47"><expr pos:start="1689:40" pos:end="1689:47"><name pos:start="1689:40" pos:end="1689:47">hostname</name></expr></argument>, <argument pos:start="1689:50" pos:end="1689:56"><expr pos:start="1689:50" pos:end="1689:56"><name pos:start="1689:50" pos:end="1689:56">hostbuf</name></expr></argument>, <argument pos:start="1689:59" pos:end="1689:74"><expr pos:start="1689:59" pos:end="1689:74"><sizeof pos:start="1689:59" pos:end="1689:74">sizeof<argument_list pos:start="1689:65" pos:end="1689:74">(<argument pos:start="1689:66" pos:end="1689:73"><expr pos:start="1689:66" pos:end="1689:73"><name pos:start="1689:66" pos:end="1689:73">hostname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt pos:start="1690:29" pos:end="1690:55"><expr pos:start="1690:29" pos:end="1690:54"><name pos:start="1690:29" pos:end="1690:29">p</name> <operator pos:start="1690:31" pos:end="1690:31">=</operator> <call pos:start="1690:33" pos:end="1690:54"><name pos:start="1690:33" pos:end="1690:39">strrchr</name><argument_list pos:start="1690:40" pos:end="1690:54">(<argument pos:start="1690:41" pos:end="1690:48"><expr pos:start="1690:41" pos:end="1690:48"><name pos:start="1690:41" pos:end="1690:48">hostname</name></expr></argument>, <argument pos:start="1690:51" pos:end="1690:53"><expr pos:start="1690:51" pos:end="1690:53"><literal type="char" pos:start="1690:51" pos:end="1690:53">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if_stmt pos:start="1691:29" pos:end="1692:42"><if pos:start="1691:29" pos:end="1692:42">if <condition pos:start="1691:32" pos:end="1691:34">(<expr pos:start="1691:33" pos:end="1691:33"><name pos:start="1691:33" pos:end="1691:33">p</name></expr>)</condition><block type="pseudo" pos:start="1692:33" pos:end="1692:42"><block_content pos:start="1692:33" pos:end="1692:42">
                                <expr_stmt pos:start="1692:33" pos:end="1692:42"><expr pos:start="1692:33" pos:end="1692:41"><operator pos:start="1692:33" pos:end="1692:33">*</operator><name pos:start="1692:34" pos:end="1692:34">p</name> <operator pos:start="1692:36" pos:end="1692:36">=</operator> <literal type="char" pos:start="1692:38" pos:end="1692:41">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                            <expr_stmt pos:start="1693:29" pos:end="1698:119"><expr pos:start="1693:29" pos:end="1698:118"><call pos:start="1693:29" pos:end="1698:118"><name pos:start="1693:29" pos:end="1693:36">snprintf</name><argument_list pos:start="1693:37" pos:end="1698:118">(<argument pos:start="1693:38" pos:end="1693:38"><expr pos:start="1693:38" pos:end="1693:38"><name pos:start="1693:38" pos:end="1693:38">q</name></expr></argument>, <argument pos:start="1693:41" pos:end="1693:54"><expr pos:start="1693:41" pos:end="1693:54"><name pos:start="1693:41" pos:end="1693:54"><name pos:start="1693:41" pos:end="1693:41">c</name><operator pos:start="1693:42" pos:end="1693:43">-&gt;</operator><name pos:start="1693:44" pos:end="1693:54">buffer_size</name></name></expr></argument>,
                                          <argument pos:start="1694:43" pos:end="1698:63"><expr pos:start="1694:43" pos:end="1698:63"><literal type="string" pos:start="1694:43" pos:end="1694:82">"HTTP/1.0 200 RTSP Redirect follows\r\n"</literal>
                                          <comment type="block" pos:start="1695:43" pos:end="1695:74">/* XXX: incorrect MIME type ? */</comment>
                                          <literal type="string" pos:start="1696:43" pos:end="1696:80">"Content-type: application/x-rtsp\r\n"</literal>
                                          <literal type="string" pos:start="1697:43" pos:end="1697:48">"\r\n"</literal>
                                          <literal type="string" pos:start="1698:43" pos:end="1698:63">"rtsp://%s:%d/%s\r\n"</literal></expr></argument>, <argument pos:start="1698:66" pos:end="1698:73"><expr pos:start="1698:66" pos:end="1698:73"><name pos:start="1698:66" pos:end="1698:73">hostname</name></expr></argument>, <argument pos:start="1698:76" pos:end="1698:107"><expr pos:start="1698:76" pos:end="1698:107"><call pos:start="1698:76" pos:end="1698:107"><name pos:start="1698:76" pos:end="1698:80">ntohs</name><argument_list pos:start="1698:81" pos:end="1698:107">(<argument pos:start="1698:82" pos:end="1698:106"><expr pos:start="1698:82" pos:end="1698:106"><name pos:start="1698:82" pos:end="1698:106"><name pos:start="1698:82" pos:end="1698:87">config</name><operator pos:start="1698:88" pos:end="1698:88">.</operator><name pos:start="1698:89" pos:end="1698:97">rtsp_addr</name><operator pos:start="1698:98" pos:end="1698:98">.</operator><name pos:start="1698:99" pos:end="1698:106">sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1698:110" pos:end="1698:117"><expr pos:start="1698:110" pos:end="1698:117"><name pos:start="1698:110" pos:end="1698:117">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt pos:start="1699:29" pos:end="1699:43"><expr pos:start="1699:29" pos:end="1699:42"><name pos:start="1699:29" pos:end="1699:29">q</name> <operator pos:start="1699:31" pos:end="1699:32">+=</operator> <call pos:start="1699:34" pos:end="1699:42"><name pos:start="1699:34" pos:end="1699:39">strlen</name><argument_list pos:start="1699:40" pos:end="1699:42">(<argument pos:start="1699:41" pos:end="1699:41"><expr pos:start="1699:41" pos:end="1699:41"><name pos:start="1699:41" pos:end="1699:41">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block>
                        <break pos:start="1701:25" pos:end="1701:30">break;</break>
                    <case pos:start="1702:21" pos:end="1702:35">case <expr pos:start="1702:26" pos:end="1702:34"><name pos:start="1702:26" pos:end="1702:34">REDIR_SDP</name></expr>:</case>
                        <block pos:start="1703:25" pos:end="1731:25">{<block_content pos:start="1704:29" pos:end="1730:29">
                            <decl_stmt pos:start="1704:29" pos:end="1704:46"><decl pos:start="1704:29" pos:end="1704:45"><type pos:start="1704:29" pos:end="1704:37"><name pos:start="1704:29" pos:end="1704:35">uint8_t</name> <modifier pos:start="1704:37" pos:end="1704:37">*</modifier></type><name pos:start="1704:38" pos:end="1704:45">sdp_data</name></decl>;</decl_stmt>
                            <decl_stmt pos:start="1705:29" pos:end="1705:46"><decl pos:start="1705:29" pos:end="1705:45"><type pos:start="1705:29" pos:end="1705:31"><name pos:start="1705:29" pos:end="1705:31">int</name></type> <name pos:start="1705:33" pos:end="1705:45">sdp_data_size</name></decl>;</decl_stmt>
                            <decl_stmt pos:start="1706:29" pos:end="1706:42"><decl pos:start="1706:29" pos:end="1706:41"><type pos:start="1706:29" pos:end="1706:37"><name pos:start="1706:29" pos:end="1706:37">socklen_t</name></type> <name pos:start="1706:39" pos:end="1706:41">len</name></decl>;</decl_stmt>
                            <decl_stmt pos:start="1707:29" pos:end="1707:55"><decl pos:start="1707:29" pos:end="1707:54"><type pos:start="1707:29" pos:end="1707:46"><name pos:start="1707:29" pos:end="1707:46"><name pos:start="1707:29" pos:end="1707:34">struct</name> <name pos:start="1707:36" pos:end="1707:46">sockaddr_in</name></name></type> <name pos:start="1707:48" pos:end="1707:54">my_addr</name></decl>;</decl_stmt>

                            <expr_stmt pos:start="1709:29" pos:end="1712:50"><expr pos:start="1709:29" pos:end="1712:49"><call pos:start="1709:29" pos:end="1712:49"><name pos:start="1709:29" pos:end="1709:36">snprintf</name><argument_list pos:start="1709:37" pos:end="1712:49">(<argument pos:start="1709:38" pos:end="1709:38"><expr pos:start="1709:38" pos:end="1709:38"><name pos:start="1709:38" pos:end="1709:38">q</name></expr></argument>, <argument pos:start="1709:41" pos:end="1709:54"><expr pos:start="1709:41" pos:end="1709:54"><name pos:start="1709:41" pos:end="1709:54"><name pos:start="1709:41" pos:end="1709:41">c</name><operator pos:start="1709:42" pos:end="1709:43">-&gt;</operator><name pos:start="1709:44" pos:end="1709:54">buffer_size</name></name></expr></argument>,
                                          <argument pos:start="1710:43" pos:end="1712:48"><expr pos:start="1710:43" pos:end="1712:48"><literal type="string" pos:start="1710:43" pos:end="1710:63">"HTTP/1.0 200 OK\r\n"</literal>
                                          <literal type="string" pos:start="1711:43" pos:end="1711:77">"Content-type: application/sdp\r\n"</literal>
                                          <literal type="string" pos:start="1712:43" pos:end="1712:48">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt pos:start="1713:29" pos:end="1713:43"><expr pos:start="1713:29" pos:end="1713:42"><name pos:start="1713:29" pos:end="1713:29">q</name> <operator pos:start="1713:31" pos:end="1713:32">+=</operator> <call pos:start="1713:34" pos:end="1713:42"><name pos:start="1713:34" pos:end="1713:39">strlen</name><argument_list pos:start="1713:40" pos:end="1713:42">(<argument pos:start="1713:41" pos:end="1713:41"><expr pos:start="1713:41" pos:end="1713:41"><name pos:start="1713:41" pos:end="1713:41">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1715:29" pos:end="1715:50"><expr pos:start="1715:29" pos:end="1715:49"><name pos:start="1715:29" pos:end="1715:31">len</name> <operator pos:start="1715:33" pos:end="1715:33">=</operator> <sizeof pos:start="1715:35" pos:end="1715:49">sizeof<argument_list pos:start="1715:41" pos:end="1715:49">(<argument pos:start="1715:42" pos:end="1715:48"><expr pos:start="1715:42" pos:end="1715:48"><name pos:start="1715:42" pos:end="1715:48">my_addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

                            <comment type="block" pos:start="1717:29" pos:end="1717:60">/* XXX: Should probably fail? */</comment>
                            <if_stmt pos:start="1718:29" pos:end="1719:67"><if pos:start="1718:29" pos:end="1719:67">if <condition pos:start="1718:32" pos:end="1718:86">(<expr pos:start="1718:33" pos:end="1718:85"><call pos:start="1718:33" pos:end="1718:85"><name pos:start="1718:33" pos:end="1718:43">getsockname</name><argument_list pos:start="1718:44" pos:end="1718:85">(<argument pos:start="1718:45" pos:end="1718:49"><expr pos:start="1718:45" pos:end="1718:49"><name pos:start="1718:45" pos:end="1718:49"><name pos:start="1718:45" pos:end="1718:45">c</name><operator pos:start="1718:46" pos:end="1718:47">-&gt;</operator><name pos:start="1718:48" pos:end="1718:49">fd</name></name></expr></argument>, <argument pos:start="1718:52" pos:end="1718:78"><expr pos:start="1718:52" pos:end="1718:78"><operator pos:start="1718:52" pos:end="1718:52">(</operator>struct <name pos:start="1718:60" pos:end="1718:67">sockaddr</name> <operator pos:start="1718:69" pos:end="1718:69">*</operator><operator pos:start="1718:70" pos:end="1718:70">)</operator><operator pos:start="1718:71" pos:end="1718:71">&amp;</operator><name pos:start="1718:72" pos:end="1718:78">my_addr</name></expr></argument>, <argument pos:start="1718:81" pos:end="1718:84"><expr pos:start="1718:81" pos:end="1718:84"><operator pos:start="1718:81" pos:end="1718:81">&amp;</operator><name pos:start="1718:82" pos:end="1718:84">len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1719:33" pos:end="1719:67"><block_content pos:start="1719:33" pos:end="1719:67">
                                <expr_stmt pos:start="1719:33" pos:end="1719:67"><expr pos:start="1719:33" pos:end="1719:66"><call pos:start="1719:33" pos:end="1719:66"><name pos:start="1719:33" pos:end="1719:40">http_log</name><argument_list pos:start="1719:41" pos:end="1719:66">(<argument pos:start="1719:42" pos:end="1719:65"><expr pos:start="1719:42" pos:end="1719:65"><literal type="string" pos:start="1719:42" pos:end="1719:65">"getsockname() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <comment type="block" pos:start="1721:29" pos:end="1721:66">/* XXX: should use a dynamic buffer */</comment>
                            <expr_stmt pos:start="1722:29" pos:end="1724:86"><expr pos:start="1722:29" pos:end="1724:85"><name pos:start="1722:29" pos:end="1722:41">sdp_data_size</name> <operator pos:start="1722:43" pos:end="1722:43">=</operator> <call pos:start="1722:45" pos:end="1724:85"><name pos:start="1722:45" pos:end="1722:67">prepare_sdp_description</name><argument_list pos:start="1722:68" pos:end="1724:85">(<argument pos:start="1722:69" pos:end="1722:74"><expr pos:start="1722:69" pos:end="1722:74"><name pos:start="1722:69" pos:end="1722:74">stream</name></expr></argument>,
                                                                    <argument pos:start="1723:69" pos:end="1723:77"><expr pos:start="1723:69" pos:end="1723:77"><operator pos:start="1723:69" pos:end="1723:69">&amp;</operator><name pos:start="1723:70" pos:end="1723:77">sdp_data</name></expr></argument>,
                                                                    <argument pos:start="1724:69" pos:end="1724:84"><expr pos:start="1724:69" pos:end="1724:84"><name pos:start="1724:69" pos:end="1724:84"><name pos:start="1724:69" pos:end="1724:75">my_addr</name><operator pos:start="1724:76" pos:end="1724:76">.</operator><name pos:start="1724:77" pos:end="1724:84">sin_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if_stmt pos:start="1725:29" pos:end="1730:29"><if pos:start="1725:29" pos:end="1730:29">if <condition pos:start="1725:32" pos:end="1725:50">(<expr pos:start="1725:33" pos:end="1725:49"><name pos:start="1725:33" pos:end="1725:45">sdp_data_size</name> <operator pos:start="1725:47" pos:end="1725:47">&gt;</operator> <literal type="number" pos:start="1725:49" pos:end="1725:49">0</literal></expr>)</condition> <block pos:start="1725:52" pos:end="1730:29">{<block_content pos:start="1726:33" pos:end="1729:52">
                                <expr_stmt pos:start="1726:33" pos:end="1726:67"><expr pos:start="1726:33" pos:end="1726:66"><call pos:start="1726:33" pos:end="1726:66"><name pos:start="1726:33" pos:end="1726:38">memcpy</name><argument_list pos:start="1726:39" pos:end="1726:66">(<argument pos:start="1726:40" pos:end="1726:40"><expr pos:start="1726:40" pos:end="1726:40"><name pos:start="1726:40" pos:end="1726:40">q</name></expr></argument>, <argument pos:start="1726:43" pos:end="1726:50"><expr pos:start="1726:43" pos:end="1726:50"><name pos:start="1726:43" pos:end="1726:50">sdp_data</name></expr></argument>, <argument pos:start="1726:53" pos:end="1726:65"><expr pos:start="1726:53" pos:end="1726:65"><name pos:start="1726:53" pos:end="1726:65">sdp_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt pos:start="1727:33" pos:end="1727:51"><expr pos:start="1727:33" pos:end="1727:50"><name pos:start="1727:33" pos:end="1727:33">q</name> <operator pos:start="1727:35" pos:end="1727:36">+=</operator> <name pos:start="1727:38" pos:end="1727:50">sdp_data_size</name></expr>;</expr_stmt>
                                <expr_stmt pos:start="1728:33" pos:end="1728:42"><expr pos:start="1728:33" pos:end="1728:41"><operator pos:start="1728:33" pos:end="1728:33">*</operator><name pos:start="1728:34" pos:end="1728:34">q</name> <operator pos:start="1728:36" pos:end="1728:36">=</operator> <literal type="char" pos:start="1728:38" pos:end="1728:41">'\0'</literal></expr>;</expr_stmt>
                                <expr_stmt pos:start="1729:33" pos:end="1729:52"><expr pos:start="1729:33" pos:end="1729:51"><call pos:start="1729:33" pos:end="1729:51"><name pos:start="1729:33" pos:end="1729:40">av_freep</name><argument_list pos:start="1729:41" pos:end="1729:51">(<argument pos:start="1729:42" pos:end="1729:50"><expr pos:start="1729:42" pos:end="1729:50"><operator pos:start="1729:42" pos:end="1729:42">&amp;</operator><name pos:start="1729:43" pos:end="1729:50">sdp_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block>
                        <break pos:start="1732:25" pos:end="1732:30">break;</break>
                    <default pos:start="1733:21" pos:end="1733:28">default:</default>
                        <expr_stmt pos:start="1734:25" pos:end="1734:32"><expr pos:start="1734:25" pos:end="1734:31"><call pos:start="1734:25" pos:end="1734:31"><name pos:start="1734:25" pos:end="1734:29">abort</name><argument_list pos:start="1734:30" pos:end="1734:31">()</argument_list></call></expr>;</expr_stmt>
                        <break pos:start="1735:25" pos:end="1735:30">break;</break>
                    </block_content>}</block></switch>

                    <comment type="block" pos:start="1738:21" pos:end="1738:47">/* prepare output buffer */</comment>
                    <expr_stmt pos:start="1739:21" pos:end="1739:46"><expr pos:start="1739:21" pos:end="1739:45"><name pos:start="1739:21" pos:end="1739:33"><name pos:start="1739:21" pos:end="1739:21">c</name><operator pos:start="1739:22" pos:end="1739:23">-&gt;</operator><name pos:start="1739:24" pos:end="1739:33">buffer_ptr</name></name> <operator pos:start="1739:35" pos:end="1739:35">=</operator> <name pos:start="1739:37" pos:end="1739:45"><name pos:start="1739:37" pos:end="1739:37">c</name><operator pos:start="1739:38" pos:end="1739:39">-&gt;</operator><name pos:start="1739:40" pos:end="1739:45">buffer</name></name></expr>;</expr_stmt>
                    <expr_stmt pos:start="1740:21" pos:end="1740:38"><expr pos:start="1740:21" pos:end="1740:37"><name pos:start="1740:21" pos:end="1740:33"><name pos:start="1740:21" pos:end="1740:21">c</name><operator pos:start="1740:22" pos:end="1740:23">-&gt;</operator><name pos:start="1740:24" pos:end="1740:33">buffer_end</name></name> <operator pos:start="1740:35" pos:end="1740:35">=</operator> <name pos:start="1740:37" pos:end="1740:37">q</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="1741:21" pos:end="1741:53"><expr pos:start="1741:21" pos:end="1741:52"><name pos:start="1741:21" pos:end="1741:28"><name pos:start="1741:21" pos:end="1741:21">c</name><operator pos:start="1741:22" pos:end="1741:23">-&gt;</operator><name pos:start="1741:24" pos:end="1741:28">state</name></name> <operator pos:start="1741:30" pos:end="1741:30">=</operator> <name pos:start="1741:32" pos:end="1741:52">HTTPSTATE_SEND_HEADER</name></expr>;</expr_stmt>
                    <return pos:start="1742:21" pos:end="1742:29">return <expr pos:start="1742:28" pos:end="1742:28"><literal type="number" pos:start="1742:28" pos:end="1742:28">0</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="1747:9" pos:end="1747:63"><expr pos:start="1747:9" pos:end="1747:62"><call pos:start="1747:9" pos:end="1747:62"><name pos:start="1747:9" pos:end="1747:16">snprintf</name><argument_list pos:start="1747:17" pos:end="1747:62">(<argument pos:start="1747:18" pos:end="1747:20"><expr pos:start="1747:18" pos:end="1747:20"><name pos:start="1747:18" pos:end="1747:20">msg</name></expr></argument>, <argument pos:start="1747:23" pos:end="1747:33"><expr pos:start="1747:23" pos:end="1747:33"><sizeof pos:start="1747:23" pos:end="1747:33">sizeof<argument_list pos:start="1747:29" pos:end="1747:33">(<argument pos:start="1747:30" pos:end="1747:32"><expr pos:start="1747:30" pos:end="1747:32"><name pos:start="1747:30" pos:end="1747:32">msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1747:36" pos:end="1747:61"><expr pos:start="1747:36" pos:end="1747:61"><literal type="string" pos:start="1747:36" pos:end="1747:61">"ASX/RAM file not handled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="1748:9" pos:end="1748:24">goto <name pos:start="1748:14" pos:end="1748:23">send_error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1751:5" pos:end="1751:27"><expr pos:start="1751:5" pos:end="1751:26"><name pos:start="1751:5" pos:end="1751:24"><name pos:start="1751:5" pos:end="1751:10">stream</name><operator pos:start="1751:11" pos:end="1751:12">-&gt;</operator><name pos:start="1751:13" pos:end="1751:24">conns_served</name></name><operator pos:start="1751:25" pos:end="1751:26">++</operator></expr>;</expr_stmt>

    <comment type="block" pos:start="1753:5" pos:end="1753:50">/* XXX: add there authenticate and IP match */</comment>

    <if_stmt pos:start="1755:5" pos:end="1823:0"><if pos:start="1755:5" pos:end="1823:0">if <condition pos:start="1755:8" pos:end="1755:16">(<expr pos:start="1755:9" pos:end="1755:15"><name pos:start="1755:9" pos:end="1755:15"><name pos:start="1755:9" pos:end="1755:9">c</name><operator pos:start="1755:10" pos:end="1755:11">-&gt;</operator><name pos:start="1755:12" pos:end="1755:15">post</name></name></expr>)</condition> <block pos:start="1755:18" pos:end="1823:0">{<block_content pos:start="1757:9" pos:end="1819:17">
        <comment type="block" pos:start="1756:9" pos:end="1756:52">/* if post, it means a feed is being sent */</comment>
        <if_stmt pos:start="1757:9" pos:end="1812:9"><if pos:start="1757:9" pos:end="1812:9">if <condition pos:start="1757:12" pos:end="1757:29">(<expr pos:start="1757:13" pos:end="1757:28"><operator pos:start="1757:13" pos:end="1757:13">!</operator><name pos:start="1757:14" pos:end="1757:28"><name pos:start="1757:14" pos:end="1757:19">stream</name><operator pos:start="1757:20" pos:end="1757:21">-&gt;</operator><name pos:start="1757:22" pos:end="1757:28">is_feed</name></name></expr>)</condition> <block pos:start="1757:31" pos:end="1812:9">{<block_content pos:start="1760:13" pos:end="1811:28">
            <comment type="block" pos:start="1758:13" pos:end="1759:54">/* However it might be a status report from WMP! Let us log the
             * data as it might come handy one day. */</comment>
            <decl_stmt pos:start="1760:13" pos:end="1760:36"><decl pos:start="1760:13" pos:end="1760:35"><type pos:start="1760:13" pos:end="1760:24"><specifier pos:start="1760:13" pos:end="1760:17">const</specifier> <name pos:start="1760:19" pos:end="1760:22">char</name> <modifier pos:start="1760:24" pos:end="1760:24">*</modifier></type><name pos:start="1760:25" pos:end="1760:31">logline</name> <init pos:start="1760:33" pos:end="1760:35">= <expr pos:start="1760:35" pos:end="1760:35"><literal type="number" pos:start="1760:35" pos:end="1760:35">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="1761:13" pos:end="1761:30"><decl pos:start="1761:13" pos:end="1761:29"><type pos:start="1761:13" pos:end="1761:15"><name pos:start="1761:13" pos:end="1761:15">int</name></type> <name pos:start="1761:17" pos:end="1761:25">client_id</name> <init pos:start="1761:27" pos:end="1761:29">= <expr pos:start="1761:29" pos:end="1761:29"><literal type="number" pos:start="1761:29" pos:end="1761:29">0</literal></expr></init></decl>;</decl_stmt>

            <for pos:start="1763:13" pos:end="1775:13">for <control pos:start="1763:17" pos:end="1763:65">(<init pos:start="1763:18" pos:end="1763:31"><expr pos:start="1763:18" pos:end="1763:30"><name pos:start="1763:18" pos:end="1763:18">p</name> <operator pos:start="1763:20" pos:end="1763:20">=</operator> <name pos:start="1763:22" pos:end="1763:30"><name pos:start="1763:22" pos:end="1763:22">c</name><operator pos:start="1763:23" pos:end="1763:24">-&gt;</operator><name pos:start="1763:25" pos:end="1763:30">buffer</name></name></expr>;</init> <condition pos:start="1763:33" pos:end="1763:63"><expr pos:start="1763:33" pos:end="1763:62"><operator pos:start="1763:33" pos:end="1763:33">*</operator><name pos:start="1763:34" pos:end="1763:34">p</name> <operator pos:start="1763:36" pos:end="1763:37">&amp;&amp;</operator> <operator pos:start="1763:39" pos:end="1763:39">*</operator><name pos:start="1763:40" pos:end="1763:40">p</name> <operator pos:start="1763:42" pos:end="1763:43">!=</operator> <literal type="char" pos:start="1763:45" pos:end="1763:48">'\r'</literal> <operator pos:start="1763:50" pos:end="1763:51">&amp;&amp;</operator> <operator pos:start="1763:53" pos:end="1763:53">*</operator><name pos:start="1763:54" pos:end="1763:54">p</name> <operator pos:start="1763:56" pos:end="1763:57">!=</operator> <literal type="char" pos:start="1763:59" pos:end="1763:62">'\n'</literal></expr>;</condition> <incr/>)</control> <block pos:start="1763:67" pos:end="1775:13">{<block_content pos:start="1764:17" pos:end="1774:20">
                <if_stmt pos:start="1764:17" pos:end="1767:17"><if pos:start="1764:17" pos:end="1767:17">if <condition pos:start="1764:20" pos:end="1764:68">(<expr pos:start="1764:21" pos:end="1764:67"><call pos:start="1764:21" pos:end="1764:62"><name pos:start="1764:21" pos:end="1764:34">av_strncasecmp</name><argument_list pos:start="1764:35" pos:end="1764:62">(<argument pos:start="1764:36" pos:end="1764:36"><expr pos:start="1764:36" pos:end="1764:36"><name pos:start="1764:36" pos:end="1764:36">p</name></expr></argument>, <argument pos:start="1764:39" pos:end="1764:57"><expr pos:start="1764:39" pos:end="1764:57"><literal type="string" pos:start="1764:39" pos:end="1764:57">"Pragma: log-line="</literal></expr></argument>, <argument pos:start="1764:60" pos:end="1764:61"><expr pos:start="1764:60" pos:end="1764:61"><literal type="number" pos:start="1764:60" pos:end="1764:61">17</literal></expr></argument>)</argument_list></call> <operator pos:start="1764:64" pos:end="1764:65">==</operator> <literal type="number" pos:start="1764:67" pos:end="1764:67">0</literal></expr>)</condition> <block pos:start="1764:70" pos:end="1767:17">{<block_content pos:start="1765:21" pos:end="1766:26">
                    <expr_stmt pos:start="1765:21" pos:end="1765:32"><expr pos:start="1765:21" pos:end="1765:31"><name pos:start="1765:21" pos:end="1765:27">logline</name> <operator pos:start="1765:29" pos:end="1765:29">=</operator> <name pos:start="1765:31" pos:end="1765:31">p</name></expr>;</expr_stmt>
                    <break pos:start="1766:21" pos:end="1766:26">break;</break>
                </block_content>}</block></if></if_stmt>
                <if_stmt pos:start="1768:17" pos:end="1769:54"><if pos:start="1768:17" pos:end="1769:54">if <condition pos:start="1768:20" pos:end="1768:69">(<expr pos:start="1768:21" pos:end="1768:68"><call pos:start="1768:21" pos:end="1768:63"><name pos:start="1768:21" pos:end="1768:34">av_strncasecmp</name><argument_list pos:start="1768:35" pos:end="1768:63">(<argument pos:start="1768:36" pos:end="1768:36"><expr pos:start="1768:36" pos:end="1768:36"><name pos:start="1768:36" pos:end="1768:36">p</name></expr></argument>, <argument pos:start="1768:39" pos:end="1768:58"><expr pos:start="1768:39" pos:end="1768:58"><literal type="string" pos:start="1768:39" pos:end="1768:58">"Pragma: client-id="</literal></expr></argument>, <argument pos:start="1768:61" pos:end="1768:62"><expr pos:start="1768:61" pos:end="1768:62"><literal type="number" pos:start="1768:61" pos:end="1768:62">18</literal></expr></argument>)</argument_list></call> <operator pos:start="1768:65" pos:end="1768:66">==</operator> <literal type="number" pos:start="1768:68" pos:end="1768:68">0</literal></expr>)</condition><block type="pseudo" pos:start="1769:21" pos:end="1769:54"><block_content pos:start="1769:21" pos:end="1769:54">
                    <expr_stmt pos:start="1769:21" pos:end="1769:54"><expr pos:start="1769:21" pos:end="1769:53"><name pos:start="1769:21" pos:end="1769:29">client_id</name> <operator pos:start="1769:31" pos:end="1769:31">=</operator> <call pos:start="1769:33" pos:end="1769:53"><name pos:start="1769:33" pos:end="1769:38">strtol</name><argument_list pos:start="1769:39" pos:end="1769:53">(<argument pos:start="1769:40" pos:end="1769:45"><expr pos:start="1769:40" pos:end="1769:45"><name pos:start="1769:40" pos:end="1769:40">p</name> <operator pos:start="1769:42" pos:end="1769:42">+</operator> <literal type="number" pos:start="1769:44" pos:end="1769:45">18</literal></expr></argument>, <argument pos:start="1769:48" pos:end="1769:48"><expr pos:start="1769:48" pos:end="1769:48"><literal type="number" pos:start="1769:48" pos:end="1769:48">0</literal></expr></argument>, <argument pos:start="1769:51" pos:end="1769:52"><expr pos:start="1769:51" pos:end="1769:52"><literal type="number" pos:start="1769:51" pos:end="1769:52">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt pos:start="1770:17" pos:end="1770:36"><expr pos:start="1770:17" pos:end="1770:35"><name pos:start="1770:17" pos:end="1770:17">p</name> <operator pos:start="1770:19" pos:end="1770:19">=</operator> <call pos:start="1770:21" pos:end="1770:35"><name pos:start="1770:21" pos:end="1770:26">strchr</name><argument_list pos:start="1770:27" pos:end="1770:35">(<argument pos:start="1770:28" pos:end="1770:28"><expr pos:start="1770:28" pos:end="1770:28"><name pos:start="1770:28" pos:end="1770:28">p</name></expr></argument>, <argument pos:start="1770:31" pos:end="1770:34"><expr pos:start="1770:31" pos:end="1770:34"><literal type="char" pos:start="1770:31" pos:end="1770:34">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="1771:17" pos:end="1772:26"><if pos:start="1771:17" pos:end="1772:26">if <condition pos:start="1771:20" pos:end="1771:23">(<expr pos:start="1771:21" pos:end="1771:22"><operator pos:start="1771:21" pos:end="1771:21">!</operator><name pos:start="1771:22" pos:end="1771:22">p</name></expr>)</condition><block type="pseudo" pos:start="1772:21" pos:end="1772:26"><block_content pos:start="1772:21" pos:end="1772:26">
                    <break pos:start="1772:21" pos:end="1772:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1774:17" pos:end="1774:20"><expr pos:start="1774:17" pos:end="1774:19"><name pos:start="1774:17" pos:end="1774:17">p</name><operator pos:start="1774:18" pos:end="1774:19">++</operator></expr>;</expr_stmt>
            </block_content>}</block></for>

            <if_stmt pos:start="1777:13" pos:end="1791:0"><if pos:start="1777:13" pos:end="1791:0">if <condition pos:start="1777:16" pos:end="1777:24">(<expr pos:start="1777:17" pos:end="1777:23"><name pos:start="1777:17" pos:end="1777:23">logline</name></expr>)</condition> <block pos:start="1777:26" pos:end="1791:0">{<block_content pos:start="1778:17" pos:end="1787:17">
                <decl_stmt pos:start="1778:17" pos:end="1778:50"><decl pos:start="1778:17" pos:end="1778:49"><type pos:start="1778:17" pos:end="1778:22"><name pos:start="1778:17" pos:end="1778:20">char</name> <modifier pos:start="1778:22" pos:end="1778:22">*</modifier></type><name pos:start="1778:23" pos:end="1778:25">eol</name> <init pos:start="1778:27" pos:end="1778:49">= <expr pos:start="1778:29" pos:end="1778:49"><call pos:start="1778:29" pos:end="1778:49"><name pos:start="1778:29" pos:end="1778:34">strchr</name><argument_list pos:start="1778:35" pos:end="1778:49">(<argument pos:start="1778:36" pos:end="1778:42"><expr pos:start="1778:36" pos:end="1778:42"><name pos:start="1778:36" pos:end="1778:42">logline</name></expr></argument>, <argument pos:start="1778:45" pos:end="1778:48"><expr pos:start="1778:45" pos:end="1778:48"><literal type="char" pos:start="1778:45" pos:end="1778:48">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="1780:17" pos:end="1780:30"><expr pos:start="1780:17" pos:end="1780:29"><name pos:start="1780:17" pos:end="1780:23">logline</name> <operator pos:start="1780:25" pos:end="1780:26">+=</operator> <literal type="number" pos:start="1780:28" pos:end="1780:29">17</literal></expr>;</expr_stmt>

                <if_stmt pos:start="1782:17" pos:end="1787:17"><if pos:start="1782:17" pos:end="1787:17">if <condition pos:start="1782:20" pos:end="1782:24">(<expr pos:start="1782:21" pos:end="1782:23"><name pos:start="1782:21" pos:end="1782:23">eol</name></expr>)</condition> <block pos:start="1782:26" pos:end="1787:17">{<block_content pos:start="1783:21" pos:end="1786:40">
                    <if_stmt pos:start="1783:21" pos:end="1784:30"><if pos:start="1783:21" pos:end="1784:30">if <condition pos:start="1783:24" pos:end="1783:40">(<expr pos:start="1783:25" pos:end="1783:39"><name pos:start="1783:25" pos:end="1783:31"><name pos:start="1783:25" pos:end="1783:27">eol</name><index pos:start="1783:28" pos:end="1783:31">[<expr pos:start="1783:29" pos:end="1783:30"><operator pos:start="1783:29" pos:end="1783:29">-</operator><literal type="number" pos:start="1783:30" pos:end="1783:30">1</literal></expr>]</index></name> <operator pos:start="1783:33" pos:end="1783:34">==</operator> <literal type="char" pos:start="1783:36" pos:end="1783:39">'\r'</literal></expr>)</condition><block type="pseudo" pos:start="1784:25" pos:end="1784:30"><block_content pos:start="1784:25" pos:end="1784:30">
                        <expr_stmt pos:start="1784:25" pos:end="1784:30"><expr pos:start="1784:25" pos:end="1784:29"><name pos:start="1784:25" pos:end="1784:27">eol</name><operator pos:start="1784:28" pos:end="1784:29">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt pos:start="1785:21" pos:end="1785:71"><expr pos:start="1785:21" pos:end="1785:70"><call pos:start="1785:21" pos:end="1785:70"><name pos:start="1785:21" pos:end="1785:28">http_log</name><argument_list pos:start="1785:29" pos:end="1785:70">(<argument pos:start="1785:30" pos:end="1785:37"><expr pos:start="1785:30" pos:end="1785:37"><literal type="string" pos:start="1785:30" pos:end="1785:37">"%.*s\n"</literal></expr></argument>, <argument pos:start="1785:40" pos:end="1785:60"><expr pos:start="1785:40" pos:end="1785:60"><operator pos:start="1785:40" pos:end="1785:40">(</operator><name pos:start="1785:41" pos:end="1785:43">int</name><operator pos:start="1785:44" pos:end="1785:44">)</operator> <operator pos:start="1785:46" pos:end="1785:46">(</operator><name pos:start="1785:47" pos:end="1785:49">eol</name> <operator pos:start="1785:51" pos:end="1785:51">-</operator> <name pos:start="1785:53" pos:end="1785:59">logline</name><operator pos:start="1785:60" pos:end="1785:60">)</operator></expr></argument>, <argument pos:start="1785:63" pos:end="1785:69"><expr pos:start="1785:63" pos:end="1785:69"><name pos:start="1785:63" pos:end="1785:69">logline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="1786:21" pos:end="1786:40"><expr pos:start="1786:21" pos:end="1786:39"><name pos:start="1786:21" pos:end="1786:35"><name pos:start="1786:21" pos:end="1786:21">c</name><operator pos:start="1786:22" pos:end="1786:23">-&gt;</operator><name pos:start="1786:24" pos:end="1786:35">suppress_log</name></name> <operator pos:start="1786:37" pos:end="1786:37">=</operator> <literal type="number" pos:start="1786:39" pos:end="1786:39">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="1790:1" pos:end="1790:12">#<cpp:directive pos:start="1790:2" pos:end="1790:6">ifdef</cpp:directive> <name pos:start="1790:8" pos:end="1790:12">DEBUG</name></cpp:ifdef>
            <expr_stmt pos:start="1791:13" pos:end="1793:0"><expr pos:start="1791:13" pos:end="1791:55"><call pos:start="1791:13" pos:end="1791:55"><name pos:start="1791:13" pos:end="1791:20">http_log</name><argument_list pos:start="1791:21" pos:end="1791:55">(<argument pos:start="1791:22" pos:end="1791:43"><expr pos:start="1791:22" pos:end="1791:43"><literal type="string" pos:start="1791:22" pos:end="1791:43">"\nGot request:\n%s\n"</literal></expr></argument>, <argument pos:start="1791:46" pos:end="1791:54"><expr pos:start="1791:46" pos:end="1791:54"><name pos:start="1791:46" pos:end="1791:54"><name pos:start="1791:46" pos:end="1791:46">c</name><operator pos:start="1791:47" pos:end="1791:48">-&gt;</operator><name pos:start="1791:49" pos:end="1791:54">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1792:1" pos:end="1792:6">#<cpp:directive pos:start="1792:2" pos:end="1792:6">endif</cpp:directive></cpp:endif>

            <if_stmt pos:start="1794:13" pos:end="1807:14"><if pos:start="1794:13" pos:end="1807:14">if <condition pos:start="1794:16" pos:end="1794:27">(<expr pos:start="1794:17" pos:end="1794:25"><name pos:start="1794:17" pos:end="1794:25">client_id</name></expr> )</condition><block pos:start="1794:28" pos:end="1807:14">{<block_content pos:start="1795:1" pos:end="1807:13">
<if_stmt pos:start="1795:1" pos:end="1807:13"><if pos:start="1795:1" pos:end="1807:13">if<condition pos:start="1795:3" pos:end="1795:55">( <expr pos:start="1795:5" pos:end="1795:54"><call pos:start="1795:5" pos:end="1795:54"><name pos:start="1795:5" pos:end="1795:17">extract_rates</name><argument_list pos:start="1795:18" pos:end="1795:54">(<argument pos:start="1795:19" pos:end="1795:25"><expr pos:start="1795:19" pos:end="1795:25"><name pos:start="1795:19" pos:end="1795:25">ratebuf</name></expr></argument>, <argument pos:start="1795:28" pos:end="1795:42"><expr pos:start="1795:28" pos:end="1795:42"><sizeof pos:start="1795:28" pos:end="1795:42">sizeof<argument_list pos:start="1795:34" pos:end="1795:42">(<argument pos:start="1795:35" pos:end="1795:41"><expr pos:start="1795:35" pos:end="1795:41"><name pos:start="1795:35" pos:end="1795:41">ratebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1795:45" pos:end="1795:53"><expr pos:start="1795:45" pos:end="1795:53"><name pos:start="1795:45" pos:end="1795:53"><name pos:start="1795:45" pos:end="1795:45">c</name><operator pos:start="1795:46" pos:end="1795:47">-&gt;</operator><name pos:start="1795:48" pos:end="1795:53">buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1795:57" pos:end="1807:13">{<block_content pos:start="1796:17" pos:end="1806:46">
                <decl_stmt pos:start="1796:17" pos:end="1796:34"><decl pos:start="1796:17" pos:end="1796:33"><type pos:start="1796:17" pos:end="1796:29"><name pos:start="1796:17" pos:end="1796:27">HTTPContext</name> <modifier pos:start="1796:29" pos:end="1796:29">*</modifier></type><name pos:start="1796:30" pos:end="1796:33">wmpc</name></decl>;</decl_stmt>

                <comment type="block" pos:start="1798:17" pos:end="1798:55">/* Now we have to find the client_id */</comment>
                <for pos:start="1799:17" pos:end="1802:17">for <control pos:start="1799:21" pos:end="1799:68">(<init pos:start="1799:22" pos:end="1799:43"><expr pos:start="1799:22" pos:end="1799:42"><name pos:start="1799:22" pos:end="1799:25">wmpc</name> <operator pos:start="1799:27" pos:end="1799:27">=</operator> <name pos:start="1799:29" pos:end="1799:42">first_http_ctx</name></expr>;</init> <condition pos:start="1799:45" pos:end="1799:49"><expr pos:start="1799:45" pos:end="1799:48"><name pos:start="1799:45" pos:end="1799:48">wmpc</name></expr>;</condition> <incr pos:start="1799:51" pos:end="1799:67"><expr pos:start="1799:51" pos:end="1799:67"><name pos:start="1799:51" pos:end="1799:54">wmpc</name> <operator pos:start="1799:56" pos:end="1799:56">=</operator> <name pos:start="1799:58" pos:end="1799:67"><name pos:start="1799:58" pos:end="1799:61">wmpc</name><operator pos:start="1799:62" pos:end="1799:63">-&gt;</operator><name pos:start="1799:64" pos:end="1799:67">next</name></name></expr></incr>)</control> <block pos:start="1799:70" pos:end="1802:17">{<block_content pos:start="1800:21" pos:end="1801:30">
                    <if_stmt pos:start="1800:21" pos:end="1801:30"><if pos:start="1800:21" pos:end="1801:30">if <condition pos:start="1800:24" pos:end="1800:57">(<expr pos:start="1800:25" pos:end="1800:56"><name pos:start="1800:25" pos:end="1800:43"><name pos:start="1800:25" pos:end="1800:28">wmpc</name><operator pos:start="1800:29" pos:end="1800:30">-&gt;</operator><name pos:start="1800:31" pos:end="1800:43">wmp_client_id</name></name> <operator pos:start="1800:45" pos:end="1800:46">==</operator> <name pos:start="1800:48" pos:end="1800:56">client_id</name></expr>)</condition><block type="pseudo" pos:start="1801:25" pos:end="1801:30"><block_content pos:start="1801:25" pos:end="1801:30">
                        <break pos:start="1801:25" pos:end="1801:30">break;</break></block_content></block></if></if_stmt>
                </block_content>}</block></for>

                <if_stmt pos:start="1804:17" pos:end="1806:46"><if pos:start="1804:17" pos:end="1806:46">if <condition pos:start="1804:20" pos:end="1804:26">(<expr pos:start="1804:21" pos:end="1804:24"><name pos:start="1804:21" pos:end="1804:24">wmpc</name></expr> )</condition><block pos:start="1804:27" pos:end="1806:46">{<block_content pos:start="1805:1" pos:end="1806:45">
<if_stmt pos:start="1805:1" pos:end="1806:45"><if pos:start="1805:1" pos:end="1806:45">if<condition pos:start="1805:3" pos:end="1805:41">( <expr pos:start="1805:5" pos:end="1805:40"><call pos:start="1805:5" pos:end="1805:40"><name pos:start="1805:5" pos:end="1805:25">modify_current_stream</name><argument_list pos:start="1805:26" pos:end="1805:40">(<argument pos:start="1805:27" pos:end="1805:30"><expr pos:start="1805:27" pos:end="1805:30"><name pos:start="1805:27" pos:end="1805:30">wmpc</name></expr></argument>, <argument pos:start="1805:33" pos:end="1805:39"><expr pos:start="1805:33" pos:end="1805:39"><name pos:start="1805:33" pos:end="1805:39">ratebuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1806:21" pos:end="1806:45"><block_content pos:start="1806:21" pos:end="1806:45">
                    <expr_stmt pos:start="1806:21" pos:end="1806:45"><expr pos:start="1806:21" pos:end="1806:44"><name pos:start="1806:21" pos:end="1806:40"><name pos:start="1806:21" pos:end="1806:24">wmpc</name><operator pos:start="1806:25" pos:end="1806:26">-&gt;</operator><name pos:start="1806:27" pos:end="1806:40">switch_pending</name></name> <operator pos:start="1806:42" pos:end="1806:42">=</operator> <literal type="number" pos:start="1806:44" pos:end="1806:44">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="1809:13" pos:end="1809:67"><expr pos:start="1809:13" pos:end="1809:66"><call pos:start="1809:13" pos:end="1809:66"><name pos:start="1809:13" pos:end="1809:20">snprintf</name><argument_list pos:start="1809:21" pos:end="1809:66">(<argument pos:start="1809:22" pos:end="1809:24"><expr pos:start="1809:22" pos:end="1809:24"><name pos:start="1809:22" pos:end="1809:24">msg</name></expr></argument>, <argument pos:start="1809:27" pos:end="1809:37"><expr pos:start="1809:27" pos:end="1809:37"><sizeof pos:start="1809:27" pos:end="1809:37">sizeof<argument_list pos:start="1809:33" pos:end="1809:37">(<argument pos:start="1809:34" pos:end="1809:36"><expr pos:start="1809:34" pos:end="1809:36"><name pos:start="1809:34" pos:end="1809:36">msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1809:40" pos:end="1809:65"><expr pos:start="1809:40" pos:end="1809:65"><literal type="string" pos:start="1809:40" pos:end="1809:65">"POST command not handled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1810:13" pos:end="1810:26"><expr pos:start="1810:13" pos:end="1810:25"><name pos:start="1810:13" pos:end="1810:21"><name pos:start="1810:13" pos:end="1810:13">c</name><operator pos:start="1810:14" pos:end="1810:15">-&gt;</operator><name pos:start="1810:16" pos:end="1810:21">stream</name></name> <operator pos:start="1810:23" pos:end="1810:23">=</operator> <literal type="number" pos:start="1810:25" pos:end="1810:25">0</literal></expr>;</expr_stmt>
            <goto pos:start="1811:13" pos:end="1811:28">goto <name pos:start="1811:18" pos:end="1811:27">send_error</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="1813:9" pos:end="1816:9"><if pos:start="1813:9" pos:end="1816:9">if <condition pos:start="1813:12" pos:end="1813:43">(<expr pos:start="1813:13" pos:end="1813:42"><call pos:start="1813:13" pos:end="1813:38"><name pos:start="1813:13" pos:end="1813:35">http_start_receive_data</name><argument_list pos:start="1813:36" pos:end="1813:38">(<argument pos:start="1813:37" pos:end="1813:37"><expr pos:start="1813:37" pos:end="1813:37"><name pos:start="1813:37" pos:end="1813:37">c</name></expr></argument>)</argument_list></call> <operator pos:start="1813:40" pos:end="1813:40">&lt;</operator> <literal type="number" pos:start="1813:42" pos:end="1813:42">0</literal></expr>)</condition> <block pos:start="1813:45" pos:end="1816:9">{<block_content pos:start="1814:13" pos:end="1815:28">
            <expr_stmt pos:start="1814:13" pos:end="1814:62"><expr pos:start="1814:13" pos:end="1814:61"><call pos:start="1814:13" pos:end="1814:61"><name pos:start="1814:13" pos:end="1814:20">snprintf</name><argument_list pos:start="1814:21" pos:end="1814:61">(<argument pos:start="1814:22" pos:end="1814:24"><expr pos:start="1814:22" pos:end="1814:24"><name pos:start="1814:22" pos:end="1814:24">msg</name></expr></argument>, <argument pos:start="1814:27" pos:end="1814:37"><expr pos:start="1814:27" pos:end="1814:37"><sizeof pos:start="1814:27" pos:end="1814:37">sizeof<argument_list pos:start="1814:33" pos:end="1814:37">(<argument pos:start="1814:34" pos:end="1814:36"><expr pos:start="1814:34" pos:end="1814:36"><name pos:start="1814:34" pos:end="1814:36">msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1814:40" pos:end="1814:60"><expr pos:start="1814:40" pos:end="1814:60"><literal type="string" pos:start="1814:40" pos:end="1814:60">"could not open feed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto pos:start="1815:13" pos:end="1815:28">goto <name pos:start="1815:18" pos:end="1815:27">send_error</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="1817:9" pos:end="1817:26"><expr pos:start="1817:9" pos:end="1817:25"><name pos:start="1817:9" pos:end="1817:21"><name pos:start="1817:9" pos:end="1817:9">c</name><operator pos:start="1817:10" pos:end="1817:11">-&gt;</operator><name pos:start="1817:12" pos:end="1817:21">http_error</name></name> <operator pos:start="1817:23" pos:end="1817:23">=</operator> <literal type="number" pos:start="1817:25" pos:end="1817:25">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1818:9" pos:end="1818:42"><expr pos:start="1818:9" pos:end="1818:41"><name pos:start="1818:9" pos:end="1818:16"><name pos:start="1818:9" pos:end="1818:9">c</name><operator pos:start="1818:10" pos:end="1818:11">-&gt;</operator><name pos:start="1818:12" pos:end="1818:16">state</name></name> <operator pos:start="1818:18" pos:end="1818:18">=</operator> <name pos:start="1818:20" pos:end="1818:41">HTTPSTATE_RECEIVE_DATA</name></expr>;</expr_stmt>
        <return pos:start="1819:9" pos:end="1819:17">return <expr pos:start="1819:16" pos:end="1819:16"><literal type="number" pos:start="1819:16" pos:end="1819:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="1822:1" pos:end="1822:12">#<cpp:directive pos:start="1822:2" pos:end="1822:6">ifdef</cpp:directive> <name pos:start="1822:8" pos:end="1822:12">DEBUG</name></cpp:ifdef>
    <if_stmt pos:start="1823:5" pos:end="1826:0"><if pos:start="1823:5" pos:end="1826:0">if <condition pos:start="1823:8" pos:end="1823:77">(<expr pos:start="1823:9" pos:end="1823:76"><call pos:start="1823:9" pos:end="1823:71"><name pos:start="1823:9" pos:end="1823:14">strcmp</name><argument_list pos:start="1823:15" pos:end="1823:71">(<argument pos:start="1823:16" pos:end="1823:62"><expr pos:start="1823:16" pos:end="1823:62"><name pos:start="1823:16" pos:end="1823:31"><name pos:start="1823:16" pos:end="1823:21">stream</name><operator pos:start="1823:22" pos:end="1823:23">-&gt;</operator><name pos:start="1823:24" pos:end="1823:31">filename</name></name> <operator pos:start="1823:33" pos:end="1823:33">+</operator> <call pos:start="1823:35" pos:end="1823:58"><name pos:start="1823:35" pos:end="1823:40">strlen</name><argument_list pos:start="1823:41" pos:end="1823:58">(<argument pos:start="1823:42" pos:end="1823:57"><expr pos:start="1823:42" pos:end="1823:57"><name pos:start="1823:42" pos:end="1823:57"><name pos:start="1823:42" pos:end="1823:47">stream</name><operator pos:start="1823:48" pos:end="1823:49">-&gt;</operator><name pos:start="1823:50" pos:end="1823:57">filename</name></name></expr></argument>)</argument_list></call> <operator pos:start="1823:60" pos:end="1823:60">-</operator> <literal type="number" pos:start="1823:62" pos:end="1823:62">4</literal></expr></argument>, <argument pos:start="1823:65" pos:end="1823:70"><expr pos:start="1823:65" pos:end="1823:70"><literal type="string" pos:start="1823:65" pos:end="1823:70">".asf"</literal></expr></argument>)</argument_list></call> <operator pos:start="1823:73" pos:end="1823:74">==</operator> <literal type="number" pos:start="1823:76" pos:end="1823:76">0</literal></expr>)</condition><block type="pseudo" pos:start="1824:9" pos:end="1826:0"><block_content pos:start="1824:9" pos:end="1826:0">
        <expr_stmt pos:start="1824:9" pos:end="1826:0"><expr pos:start="1824:9" pos:end="1824:51"><call pos:start="1824:9" pos:end="1824:51"><name pos:start="1824:9" pos:end="1824:16">http_log</name><argument_list pos:start="1824:17" pos:end="1824:51">(<argument pos:start="1824:18" pos:end="1824:39"><expr pos:start="1824:18" pos:end="1824:39"><literal type="string" pos:start="1824:18" pos:end="1824:39">"\nGot request:\n%s\n"</literal></expr></argument>, <argument pos:start="1824:42" pos:end="1824:50"><expr pos:start="1824:42" pos:end="1824:50"><name pos:start="1824:42" pos:end="1824:50"><name pos:start="1824:42" pos:end="1824:42">c</name><operator pos:start="1824:43" pos:end="1824:44">-&gt;</operator><name pos:start="1824:45" pos:end="1824:50">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif pos:start="1825:1" pos:end="1825:6">#<cpp:directive pos:start="1825:2" pos:end="1825:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="1827:5" pos:end="1828:25"><if pos:start="1827:5" pos:end="1828:25">if <condition pos:start="1827:8" pos:end="1827:53">(<expr pos:start="1827:9" pos:end="1827:52"><name pos:start="1827:9" pos:end="1827:30"><name pos:start="1827:9" pos:end="1827:9">c</name><operator pos:start="1827:10" pos:end="1827:11">-&gt;</operator><name pos:start="1827:12" pos:end="1827:17">stream</name><operator pos:start="1827:18" pos:end="1827:19">-&gt;</operator><name pos:start="1827:20" pos:end="1827:30">stream_type</name></name> <operator pos:start="1827:32" pos:end="1827:33">==</operator> <name pos:start="1827:35" pos:end="1827:52">STREAM_TYPE_STATUS</name></expr>)</condition><block type="pseudo" pos:start="1828:9" pos:end="1828:25"><block_content pos:start="1828:9" pos:end="1828:25">
        <goto pos:start="1828:9" pos:end="1828:25">goto <name pos:start="1828:14" pos:end="1828:24">send_status</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block" pos:start="1830:5" pos:end="1830:27">/* open input stream */</comment>
    <if_stmt pos:start="1831:5" pos:end="1834:5"><if pos:start="1831:5" pos:end="1834:5">if <condition pos:start="1831:8" pos:end="1831:39">(<expr pos:start="1831:9" pos:end="1831:38"><call pos:start="1831:9" pos:end="1831:34"><name pos:start="1831:9" pos:end="1831:25">open_input_stream</name><argument_list pos:start="1831:26" pos:end="1831:34">(<argument pos:start="1831:27" pos:end="1831:27"><expr pos:start="1831:27" pos:end="1831:27"><name pos:start="1831:27" pos:end="1831:27">c</name></expr></argument>, <argument pos:start="1831:30" pos:end="1831:33"><expr pos:start="1831:30" pos:end="1831:33"><name pos:start="1831:30" pos:end="1831:33">info</name></expr></argument>)</argument_list></call> <operator pos:start="1831:36" pos:end="1831:36">&lt;</operator> <literal type="number" pos:start="1831:38" pos:end="1831:38">0</literal></expr>)</condition> <block pos:start="1831:41" pos:end="1834:5">{<block_content pos:start="1832:9" pos:end="1833:24">
        <expr_stmt pos:start="1832:9" pos:end="1832:88"><expr pos:start="1832:9" pos:end="1832:87"><call pos:start="1832:9" pos:end="1832:87"><name pos:start="1832:9" pos:end="1832:16">snprintf</name><argument_list pos:start="1832:17" pos:end="1832:87">(<argument pos:start="1832:18" pos:end="1832:20"><expr pos:start="1832:18" pos:end="1832:20"><name pos:start="1832:18" pos:end="1832:20">msg</name></expr></argument>, <argument pos:start="1832:23" pos:end="1832:33"><expr pos:start="1832:23" pos:end="1832:33"><sizeof pos:start="1832:23" pos:end="1832:33">sizeof<argument_list pos:start="1832:29" pos:end="1832:33">(<argument pos:start="1832:30" pos:end="1832:32"><expr pos:start="1832:30" pos:end="1832:32"><name pos:start="1832:30" pos:end="1832:32">msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1832:36" pos:end="1832:81"><expr pos:start="1832:36" pos:end="1832:81"><literal type="string" pos:start="1832:36" pos:end="1832:81">"Input stream corresponding to '%s' not found"</literal></expr></argument>, <argument pos:start="1832:84" pos:end="1832:86"><expr pos:start="1832:84" pos:end="1832:86"><name pos:start="1832:84" pos:end="1832:86">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="1833:9" pos:end="1833:24">goto <name pos:start="1833:14" pos:end="1833:23">send_error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1836:5" pos:end="1836:29">/* prepare HTTP header */</comment>
    <expr_stmt pos:start="1837:5" pos:end="1837:21"><expr pos:start="1837:5" pos:end="1837:20"><name pos:start="1837:5" pos:end="1837:16"><name pos:start="1837:5" pos:end="1837:5">c</name><operator pos:start="1837:6" pos:end="1837:7">-&gt;</operator><name pos:start="1837:8" pos:end="1837:13">buffer</name><index pos:start="1837:14" pos:end="1837:16">[<expr pos:start="1837:15" pos:end="1837:15"><literal type="number" pos:start="1837:15" pos:end="1837:15">0</literal></expr>]</index></name> <operator pos:start="1837:18" pos:end="1837:18">=</operator> <literal type="number" pos:start="1837:20" pos:end="1837:20">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="1838:5" pos:end="1838:66"><expr pos:start="1838:5" pos:end="1838:65"><call pos:start="1838:5" pos:end="1838:65"><name pos:start="1838:5" pos:end="1838:15">av_strlcatf</name><argument_list pos:start="1838:16" pos:end="1838:65">(<argument pos:start="1838:17" pos:end="1838:25"><expr pos:start="1838:17" pos:end="1838:25"><name pos:start="1838:17" pos:end="1838:25"><name pos:start="1838:17" pos:end="1838:17">c</name><operator pos:start="1838:18" pos:end="1838:19">-&gt;</operator><name pos:start="1838:20" pos:end="1838:25">buffer</name></name></expr></argument>, <argument pos:start="1838:28" pos:end="1838:41"><expr pos:start="1838:28" pos:end="1838:41"><name pos:start="1838:28" pos:end="1838:41"><name pos:start="1838:28" pos:end="1838:28">c</name><operator pos:start="1838:29" pos:end="1838:30">-&gt;</operator><name pos:start="1838:31" pos:end="1838:41">buffer_size</name></name></expr></argument>, <argument pos:start="1838:44" pos:end="1838:64"><expr pos:start="1838:44" pos:end="1838:64"><literal type="string" pos:start="1838:44" pos:end="1838:64">"HTTP/1.0 200 OK\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1839:5" pos:end="1839:42"><expr pos:start="1839:5" pos:end="1839:41"><name pos:start="1839:5" pos:end="1839:13">mime_type</name> <operator pos:start="1839:15" pos:end="1839:15">=</operator> <name pos:start="1839:17" pos:end="1839:41"><name pos:start="1839:17" pos:end="1839:17">c</name><operator pos:start="1839:18" pos:end="1839:19">-&gt;</operator><name pos:start="1839:20" pos:end="1839:25">stream</name><operator pos:start="1839:26" pos:end="1839:27">-&gt;</operator><name pos:start="1839:28" pos:end="1839:30">fmt</name><operator pos:start="1839:31" pos:end="1839:32">-&gt;</operator><name pos:start="1839:33" pos:end="1839:41">mime_type</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="1840:5" pos:end="1841:49"><if pos:start="1840:5" pos:end="1841:49">if <condition pos:start="1840:8" pos:end="1840:19">(<expr pos:start="1840:9" pos:end="1840:18"><operator pos:start="1840:9" pos:end="1840:9">!</operator><name pos:start="1840:10" pos:end="1840:18">mime_type</name></expr>)</condition><block type="pseudo" pos:start="1841:9" pos:end="1841:49"><block_content pos:start="1841:9" pos:end="1841:49">
        <expr_stmt pos:start="1841:9" pos:end="1841:49"><expr pos:start="1841:9" pos:end="1841:48"><name pos:start="1841:9" pos:end="1841:17">mime_type</name> <operator pos:start="1841:19" pos:end="1841:19">=</operator> <literal type="string" pos:start="1841:21" pos:end="1841:48">"application/x-octet-stream"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="1842:5" pos:end="1842:67"><expr pos:start="1842:5" pos:end="1842:66"><call pos:start="1842:5" pos:end="1842:66"><name pos:start="1842:5" pos:end="1842:15">av_strlcatf</name><argument_list pos:start="1842:16" pos:end="1842:66">(<argument pos:start="1842:17" pos:end="1842:25"><expr pos:start="1842:17" pos:end="1842:25"><name pos:start="1842:17" pos:end="1842:25"><name pos:start="1842:17" pos:end="1842:17">c</name><operator pos:start="1842:18" pos:end="1842:19">-&gt;</operator><name pos:start="1842:20" pos:end="1842:25">buffer</name></name></expr></argument>, <argument pos:start="1842:28" pos:end="1842:41"><expr pos:start="1842:28" pos:end="1842:41"><name pos:start="1842:28" pos:end="1842:41"><name pos:start="1842:28" pos:end="1842:28">c</name><operator pos:start="1842:29" pos:end="1842:30">-&gt;</operator><name pos:start="1842:31" pos:end="1842:41">buffer_size</name></name></expr></argument>, <argument pos:start="1842:44" pos:end="1842:65"><expr pos:start="1842:44" pos:end="1842:65"><literal type="string" pos:start="1842:44" pos:end="1842:65">"Pragma: no-cache\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1844:5" pos:end="1844:40">/* for asf, we need extra headers */</comment>
    <if_stmt pos:start="1845:5" pos:end="1851:5"><if pos:start="1845:5" pos:end="1851:5">if <condition pos:start="1845:8" pos:end="1845:51">(<expr pos:start="1845:9" pos:end="1845:50"><operator pos:start="1845:9" pos:end="1845:9">!</operator><call pos:start="1845:10" pos:end="1845:50"><name pos:start="1845:10" pos:end="1845:15">strcmp</name><argument_list pos:start="1845:16" pos:end="1845:50">(<argument pos:start="1845:17" pos:end="1845:36"><expr pos:start="1845:17" pos:end="1845:36"><name pos:start="1845:17" pos:end="1845:36"><name pos:start="1845:17" pos:end="1845:17">c</name><operator pos:start="1845:18" pos:end="1845:19">-&gt;</operator><name pos:start="1845:20" pos:end="1845:25">stream</name><operator pos:start="1845:26" pos:end="1845:27">-&gt;</operator><name pos:start="1845:28" pos:end="1845:30">fmt</name><operator pos:start="1845:31" pos:end="1845:32">-&gt;</operator><name pos:start="1845:33" pos:end="1845:36">name</name></name></expr></argument>,<argument pos:start="1845:38" pos:end="1845:49"><expr pos:start="1845:38" pos:end="1845:49"><literal type="string" pos:start="1845:38" pos:end="1845:49">"asf_stream"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1845:53" pos:end="1851:5">{<block_content pos:start="1848:9" pos:end="1850:183">
        <comment type="block" pos:start="1846:9" pos:end="1846:42">/* Need to allocate a client id */</comment>

        <expr_stmt pos:start="1848:9" pos:end="1848:53"><expr pos:start="1848:9" pos:end="1848:52"><name pos:start="1848:9" pos:end="1848:24"><name pos:start="1848:9" pos:end="1848:9">c</name><operator pos:start="1848:10" pos:end="1848:11">-&gt;</operator><name pos:start="1848:12" pos:end="1848:24">wmp_client_id</name></name> <operator pos:start="1848:26" pos:end="1848:26">=</operator> <call pos:start="1848:28" pos:end="1848:52"><name pos:start="1848:28" pos:end="1848:37">av_lfg_get</name><argument_list pos:start="1848:38" pos:end="1848:52">(<argument pos:start="1848:39" pos:end="1848:51"><expr pos:start="1848:39" pos:end="1848:51"><operator pos:start="1848:39" pos:end="1848:39">&amp;</operator><name pos:start="1848:40" pos:end="1848:51">random_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1850:9" pos:end="1850:183"><expr pos:start="1850:9" pos:end="1850:182"><call pos:start="1850:9" pos:end="1850:182"><name pos:start="1850:9" pos:end="1850:19">av_strlcatf</name><argument_list pos:start="1850:20" pos:end="1850:182">(<argument pos:start="1850:21" pos:end="1850:29"><expr pos:start="1850:21" pos:end="1850:29"><name pos:start="1850:21" pos:end="1850:29"><name pos:start="1850:21" pos:end="1850:21">c</name><operator pos:start="1850:22" pos:end="1850:23">-&gt;</operator><name pos:start="1850:24" pos:end="1850:29">buffer</name></name></expr></argument>, <argument pos:start="1850:32" pos:end="1850:45"><expr pos:start="1850:32" pos:end="1850:45"><name pos:start="1850:32" pos:end="1850:45"><name pos:start="1850:32" pos:end="1850:32">c</name><operator pos:start="1850:33" pos:end="1850:34">-&gt;</operator><name pos:start="1850:35" pos:end="1850:45">buffer_size</name></name></expr></argument>, <argument pos:start="1850:48" pos:end="1850:163"><expr pos:start="1850:48" pos:end="1850:163"><literal type="string" pos:start="1850:48" pos:end="1850:163">"Server: Cougar 4.1.0.3923\r\nCache-Control: no-cache\r\nPragma: client-id=%d\r\nPragma: features=\"broadcast\"\r\n"</literal></expr></argument>, <argument pos:start="1850:166" pos:end="1850:181"><expr pos:start="1850:166" pos:end="1850:181"><name pos:start="1850:166" pos:end="1850:181"><name pos:start="1850:166" pos:end="1850:166">c</name><operator pos:start="1850:167" pos:end="1850:168">-&gt;</operator><name pos:start="1850:169" pos:end="1850:181">wmp_client_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1852:5" pos:end="1852:78"><expr pos:start="1852:5" pos:end="1852:77"><call pos:start="1852:5" pos:end="1852:77"><name pos:start="1852:5" pos:end="1852:15">av_strlcatf</name><argument_list pos:start="1852:16" pos:end="1852:77">(<argument pos:start="1852:17" pos:end="1852:25"><expr pos:start="1852:17" pos:end="1852:25"><name pos:start="1852:17" pos:end="1852:25"><name pos:start="1852:17" pos:end="1852:17">c</name><operator pos:start="1852:18" pos:end="1852:19">-&gt;</operator><name pos:start="1852:20" pos:end="1852:25">buffer</name></name></expr></argument>, <argument pos:start="1852:28" pos:end="1852:41"><expr pos:start="1852:28" pos:end="1852:41"><name pos:start="1852:28" pos:end="1852:41"><name pos:start="1852:28" pos:end="1852:28">c</name><operator pos:start="1852:29" pos:end="1852:30">-&gt;</operator><name pos:start="1852:31" pos:end="1852:41">buffer_size</name></name></expr></argument>, <argument pos:start="1852:44" pos:end="1852:65"><expr pos:start="1852:44" pos:end="1852:65"><literal type="string" pos:start="1852:44" pos:end="1852:65">"Content-Type: %s\r\n"</literal></expr></argument>, <argument pos:start="1852:68" pos:end="1852:76"><expr pos:start="1852:68" pos:end="1852:76"><name pos:start="1852:68" pos:end="1852:76">mime_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1853:5" pos:end="1853:51"><expr pos:start="1853:5" pos:end="1853:50"><call pos:start="1853:5" pos:end="1853:50"><name pos:start="1853:5" pos:end="1853:15">av_strlcatf</name><argument_list pos:start="1853:16" pos:end="1853:50">(<argument pos:start="1853:17" pos:end="1853:25"><expr pos:start="1853:17" pos:end="1853:25"><name pos:start="1853:17" pos:end="1853:25"><name pos:start="1853:17" pos:end="1853:17">c</name><operator pos:start="1853:18" pos:end="1853:19">-&gt;</operator><name pos:start="1853:20" pos:end="1853:25">buffer</name></name></expr></argument>, <argument pos:start="1853:28" pos:end="1853:41"><expr pos:start="1853:28" pos:end="1853:41"><name pos:start="1853:28" pos:end="1853:41"><name pos:start="1853:28" pos:end="1853:28">c</name><operator pos:start="1853:29" pos:end="1853:30">-&gt;</operator><name pos:start="1853:31" pos:end="1853:41">buffer_size</name></name></expr></argument>, <argument pos:start="1853:44" pos:end="1853:49"><expr pos:start="1853:44" pos:end="1853:49"><literal type="string" pos:start="1853:44" pos:end="1853:49">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1854:5" pos:end="1854:38"><expr pos:start="1854:5" pos:end="1854:37"><name pos:start="1854:5" pos:end="1854:5">q</name> <operator pos:start="1854:7" pos:end="1854:7">=</operator> <name pos:start="1854:9" pos:end="1854:17"><name pos:start="1854:9" pos:end="1854:9">c</name><operator pos:start="1854:10" pos:end="1854:11">-&gt;</operator><name pos:start="1854:12" pos:end="1854:17">buffer</name></name> <operator pos:start="1854:19" pos:end="1854:19">+</operator> <call pos:start="1854:21" pos:end="1854:37"><name pos:start="1854:21" pos:end="1854:26">strlen</name><argument_list pos:start="1854:27" pos:end="1854:37">(<argument pos:start="1854:28" pos:end="1854:36"><expr pos:start="1854:28" pos:end="1854:36"><name pos:start="1854:28" pos:end="1854:36"><name pos:start="1854:28" pos:end="1854:28">c</name><operator pos:start="1854:29" pos:end="1854:30">-&gt;</operator><name pos:start="1854:31" pos:end="1854:36">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1856:5" pos:end="1856:31">/* prepare output buffer */</comment>
    <expr_stmt pos:start="1857:5" pos:end="1857:22"><expr pos:start="1857:5" pos:end="1857:21"><name pos:start="1857:5" pos:end="1857:17"><name pos:start="1857:5" pos:end="1857:5">c</name><operator pos:start="1857:6" pos:end="1857:7">-&gt;</operator><name pos:start="1857:8" pos:end="1857:17">http_error</name></name> <operator pos:start="1857:19" pos:end="1857:19">=</operator> <literal type="number" pos:start="1857:21" pos:end="1857:21">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="1858:5" pos:end="1858:30"><expr pos:start="1858:5" pos:end="1858:29"><name pos:start="1858:5" pos:end="1858:17"><name pos:start="1858:5" pos:end="1858:5">c</name><operator pos:start="1858:6" pos:end="1858:7">-&gt;</operator><name pos:start="1858:8" pos:end="1858:17">buffer_ptr</name></name> <operator pos:start="1858:19" pos:end="1858:19">=</operator> <name pos:start="1858:21" pos:end="1858:29"><name pos:start="1858:21" pos:end="1858:21">c</name><operator pos:start="1858:22" pos:end="1858:23">-&gt;</operator><name pos:start="1858:24" pos:end="1858:29">buffer</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="1859:5" pos:end="1859:22"><expr pos:start="1859:5" pos:end="1859:21"><name pos:start="1859:5" pos:end="1859:17"><name pos:start="1859:5" pos:end="1859:5">c</name><operator pos:start="1859:6" pos:end="1859:7">-&gt;</operator><name pos:start="1859:8" pos:end="1859:17">buffer_end</name></name> <operator pos:start="1859:19" pos:end="1859:19">=</operator> <name pos:start="1859:21" pos:end="1859:21">q</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1860:5" pos:end="1860:37"><expr pos:start="1860:5" pos:end="1860:36"><name pos:start="1860:5" pos:end="1860:12"><name pos:start="1860:5" pos:end="1860:5">c</name><operator pos:start="1860:6" pos:end="1860:7">-&gt;</operator><name pos:start="1860:8" pos:end="1860:12">state</name></name> <operator pos:start="1860:14" pos:end="1860:14">=</operator> <name pos:start="1860:16" pos:end="1860:36">HTTPSTATE_SEND_HEADER</name></expr>;</expr_stmt>
    <return pos:start="1861:5" pos:end="1861:13">return <expr pos:start="1861:12" pos:end="1861:12"><literal type="number" pos:start="1861:12" pos:end="1861:12">0</literal></expr>;</return>
 <label pos:start="1862:2" pos:end="1862:12"><name pos:start="1862:2" pos:end="1862:11">send_error</name>:</label>
    <expr_stmt pos:start="1863:5" pos:end="1863:24"><expr pos:start="1863:5" pos:end="1863:23"><name pos:start="1863:5" pos:end="1863:17"><name pos:start="1863:5" pos:end="1863:5">c</name><operator pos:start="1863:6" pos:end="1863:7">-&gt;</operator><name pos:start="1863:8" pos:end="1863:17">http_error</name></name> <operator pos:start="1863:19" pos:end="1863:19">=</operator> <literal type="number" pos:start="1863:21" pos:end="1863:23">404</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="1864:5" pos:end="1864:18"><expr pos:start="1864:5" pos:end="1864:17"><name pos:start="1864:5" pos:end="1864:5">q</name> <operator pos:start="1864:7" pos:end="1864:7">=</operator> <name pos:start="1864:9" pos:end="1864:17"><name pos:start="1864:9" pos:end="1864:9">c</name><operator pos:start="1864:10" pos:end="1864:11">-&gt;</operator><name pos:start="1864:12" pos:end="1864:17">buffer</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="1865:5" pos:end="1867:5"><if pos:start="1865:5" pos:end="1867:5">if <condition pos:start="1865:8" pos:end="1865:39">(<expr pos:start="1865:9" pos:end="1865:38"><operator pos:start="1865:9" pos:end="1865:9">!</operator><call pos:start="1865:10" pos:end="1865:38"><name pos:start="1865:10" pos:end="1865:19">htmlencode</name><argument_list pos:start="1865:20" pos:end="1865:38">(<argument pos:start="1865:21" pos:end="1865:23"><expr pos:start="1865:21" pos:end="1865:23"><name pos:start="1865:21" pos:end="1865:23">msg</name></expr></argument>, <argument pos:start="1865:26" pos:end="1865:37"><expr pos:start="1865:26" pos:end="1865:37"><operator pos:start="1865:26" pos:end="1865:26">&amp;</operator><name pos:start="1865:27" pos:end="1865:37">encoded_msg</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1865:41" pos:end="1867:5">{<block_content pos:start="1866:9" pos:end="1866:66">
        <expr_stmt pos:start="1866:9" pos:end="1866:66"><expr pos:start="1866:9" pos:end="1866:65"><call pos:start="1866:9" pos:end="1866:65"><name pos:start="1866:9" pos:end="1866:16">http_log</name><argument_list pos:start="1866:17" pos:end="1866:65">(<argument pos:start="1866:18" pos:end="1866:59"><expr pos:start="1866:18" pos:end="1866:59"><literal type="string" pos:start="1866:18" pos:end="1866:59">"Could not encode filename '%s' as HTML\n"</literal></expr></argument>, <argument pos:start="1866:62" pos:end="1866:64"><expr pos:start="1866:62" pos:end="1866:64"><name pos:start="1866:62" pos:end="1866:64">msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1868:5" pos:end="1879:76"><expr pos:start="1868:5" pos:end="1879:75"><call pos:start="1868:5" pos:end="1879:75"><name pos:start="1868:5" pos:end="1868:12">snprintf</name><argument_list pos:start="1868:13" pos:end="1879:75">(<argument pos:start="1868:14" pos:end="1868:14"><expr pos:start="1868:14" pos:end="1868:14"><name pos:start="1868:14" pos:end="1868:14">q</name></expr></argument>, <argument pos:start="1868:17" pos:end="1868:30"><expr pos:start="1868:17" pos:end="1868:30"><name pos:start="1868:17" pos:end="1868:30"><name pos:start="1868:17" pos:end="1868:17">c</name><operator pos:start="1868:18" pos:end="1868:19">-&gt;</operator><name pos:start="1868:20" pos:end="1868:30">buffer_size</name></name></expr></argument>,
                  <argument pos:start="1869:19" pos:end="1879:29"><expr pos:start="1869:19" pos:end="1879:29"><literal type="string" pos:start="1869:19" pos:end="1869:46">"HTTP/1.0 404 Not Found\r\n"</literal>
                  <literal type="string" pos:start="1870:19" pos:end="1870:47">"Content-type: text/html\r\n"</literal>
                  <literal type="string" pos:start="1871:19" pos:end="1871:24">"\r\n"</literal>
                  <literal type="string" pos:start="1872:19" pos:end="1872:37">"&lt;!DOCTYPE html&gt;\n"</literal>
                  <literal type="string" pos:start="1873:19" pos:end="1873:28">"&lt;html&gt;\n"</literal>
                  <literal type="string" pos:start="1874:19" pos:end="1874:28">"&lt;head&gt;\n"</literal>
                  <literal type="string" pos:start="1875:19" pos:end="1875:46">"&lt;meta charset=\"UTF-8\"&gt;\n"</literal>
                  <literal type="string" pos:start="1876:19" pos:end="1876:50">"&lt;title&gt;404 Not Found&lt;/title&gt;\n"</literal>
                  <literal type="string" pos:start="1877:19" pos:end="1877:29">"&lt;/head&gt;\n"</literal>
                  <literal type="string" pos:start="1878:19" pos:end="1878:37">"&lt;body&gt;%s&lt;/body&gt;\n"</literal>
                  <literal type="string" pos:start="1879:19" pos:end="1879:29">"&lt;/html&gt;\n"</literal></expr></argument>, <argument pos:start="1879:32" pos:end="1879:74"><expr pos:start="1879:32" pos:end="1879:74"><ternary pos:start="1879:32" pos:end="1879:74"><condition pos:start="1879:32" pos:end="1879:43"><expr pos:start="1879:32" pos:end="1879:42"><name pos:start="1879:32" pos:end="1879:42">encoded_msg</name></expr>?</condition><then pos:start="1879:45" pos:end="1879:55"> <expr pos:start="1879:45" pos:end="1879:55"><name pos:start="1879:45" pos:end="1879:55">encoded_msg</name></expr> </then><else pos:start="1879:57" pos:end="1879:74">: <expr pos:start="1879:59" pos:end="1879:74"><literal type="string" pos:start="1879:59" pos:end="1879:74">"File not found"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1880:5" pos:end="1880:19"><expr pos:start="1880:5" pos:end="1880:18"><name pos:start="1880:5" pos:end="1880:5">q</name> <operator pos:start="1880:7" pos:end="1880:8">+=</operator> <call pos:start="1880:10" pos:end="1880:18"><name pos:start="1880:10" pos:end="1880:15">strlen</name><argument_list pos:start="1880:16" pos:end="1880:18">(<argument pos:start="1880:17" pos:end="1880:17"><expr pos:start="1880:17" pos:end="1880:17"><name pos:start="1880:17" pos:end="1880:17">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="1881:5" pos:end="1881:31">/* prepare output buffer */</comment>
    <expr_stmt pos:start="1882:5" pos:end="1882:30"><expr pos:start="1882:5" pos:end="1882:29"><name pos:start="1882:5" pos:end="1882:17"><name pos:start="1882:5" pos:end="1882:5">c</name><operator pos:start="1882:6" pos:end="1882:7">-&gt;</operator><name pos:start="1882:8" pos:end="1882:17">buffer_ptr</name></name> <operator pos:start="1882:19" pos:end="1882:19">=</operator> <name pos:start="1882:21" pos:end="1882:29"><name pos:start="1882:21" pos:end="1882:21">c</name><operator pos:start="1882:22" pos:end="1882:23">-&gt;</operator><name pos:start="1882:24" pos:end="1882:29">buffer</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="1883:5" pos:end="1883:22"><expr pos:start="1883:5" pos:end="1883:21"><name pos:start="1883:5" pos:end="1883:17"><name pos:start="1883:5" pos:end="1883:5">c</name><operator pos:start="1883:6" pos:end="1883:7">-&gt;</operator><name pos:start="1883:8" pos:end="1883:17">buffer_end</name></name> <operator pos:start="1883:19" pos:end="1883:19">=</operator> <name pos:start="1883:21" pos:end="1883:21">q</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1884:5" pos:end="1884:37"><expr pos:start="1884:5" pos:end="1884:36"><name pos:start="1884:5" pos:end="1884:12"><name pos:start="1884:5" pos:end="1884:5">c</name><operator pos:start="1884:6" pos:end="1884:7">-&gt;</operator><name pos:start="1884:8" pos:end="1884:12">state</name></name> <operator pos:start="1884:14" pos:end="1884:14">=</operator> <name pos:start="1884:16" pos:end="1884:36">HTTPSTATE_SEND_HEADER</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1885:5" pos:end="1885:27"><expr pos:start="1885:5" pos:end="1885:26"><call pos:start="1885:5" pos:end="1885:26"><name pos:start="1885:5" pos:end="1885:12">av_freep</name><argument_list pos:start="1885:13" pos:end="1885:26">(<argument pos:start="1885:14" pos:end="1885:25"><expr pos:start="1885:14" pos:end="1885:25"><operator pos:start="1885:14" pos:end="1885:14">&amp;</operator><name pos:start="1885:15" pos:end="1885:25">encoded_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="1886:5" pos:end="1886:13">return <expr pos:start="1886:12" pos:end="1886:12"><literal type="number" pos:start="1886:12" pos:end="1886:12">0</literal></expr>;</return>
 <label pos:start="1887:2" pos:end="1887:13"><name pos:start="1887:2" pos:end="1887:12">send_status</name>:</label>
    <expr_stmt pos:start="1888:5" pos:end="1888:22"><expr pos:start="1888:5" pos:end="1888:21"><call pos:start="1888:5" pos:end="1888:21"><name pos:start="1888:5" pos:end="1888:18">compute_status</name><argument_list pos:start="1888:19" pos:end="1888:21">(<argument pos:start="1888:20" pos:end="1888:20"><expr pos:start="1888:20" pos:end="1888:20"><name pos:start="1888:20" pos:end="1888:20">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="1889:5" pos:end="1890:38">/* horrible: we use this value to avoid
     * going to the send data state */</comment>
    <expr_stmt pos:start="1891:5" pos:end="1891:24"><expr pos:start="1891:5" pos:end="1891:23"><name pos:start="1891:5" pos:end="1891:17"><name pos:start="1891:5" pos:end="1891:5">c</name><operator pos:start="1891:6" pos:end="1891:7">-&gt;</operator><name pos:start="1891:8" pos:end="1891:17">http_error</name></name> <operator pos:start="1891:19" pos:end="1891:19">=</operator> <literal type="number" pos:start="1891:21" pos:end="1891:23">200</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="1892:5" pos:end="1892:37"><expr pos:start="1892:5" pos:end="1892:36"><name pos:start="1892:5" pos:end="1892:12"><name pos:start="1892:5" pos:end="1892:5">c</name><operator pos:start="1892:6" pos:end="1892:7">-&gt;</operator><name pos:start="1892:8" pos:end="1892:12">state</name></name> <operator pos:start="1892:14" pos:end="1892:14">=</operator> <name pos:start="1892:16" pos:end="1892:36">HTTPSTATE_SEND_HEADER</name></expr>;</expr_stmt>
    <return pos:start="1893:5" pos:end="1893:13">return <expr pos:start="1893:12" pos:end="1893:12"><literal type="number" pos:start="1893:12" pos:end="1893:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="1896:1" pos:end="1904:1"><type pos:start="1896:1" pos:end="1896:11"><specifier pos:start="1896:1" pos:end="1896:6">static</specifier> <name pos:start="1896:8" pos:end="1896:11">void</name></type> <name pos:start="1896:13" pos:end="1896:25">fmt_bytecount</name><parameter_list pos:start="1896:26" pos:end="1896:57">(<parameter pos:start="1896:27" pos:end="1896:41"><decl pos:start="1896:27" pos:end="1896:41"><type pos:start="1896:27" pos:end="1896:41"><name pos:start="1896:27" pos:end="1896:37">AVIOContext</name> <modifier pos:start="1896:39" pos:end="1896:39">*</modifier></type><name pos:start="1896:40" pos:end="1896:41">pb</name></decl></parameter>, <parameter pos:start="1896:44" pos:end="1896:56"><decl pos:start="1896:44" pos:end="1896:56"><type pos:start="1896:44" pos:end="1896:56"><name pos:start="1896:44" pos:end="1896:50">int64_t</name></type> <name pos:start="1896:52" pos:end="1896:56">count</name></decl></parameter>)</parameter_list>
<block pos:start="1897:1" pos:end="1904:1">{<block_content pos:start="1898:5" pos:end="1903:46">
    <decl_stmt pos:start="1898:5" pos:end="1898:42"><decl pos:start="1898:5" pos:end="1898:41"><type pos:start="1898:5" pos:end="1898:21"><specifier pos:start="1898:5" pos:end="1898:10">static</specifier> <specifier pos:start="1898:12" pos:end="1898:16">const</specifier> <name pos:start="1898:18" pos:end="1898:21">char</name></type> <name pos:start="1898:23" pos:end="1898:30"><name pos:start="1898:23" pos:end="1898:28">suffix</name><index pos:start="1898:29" pos:end="1898:30">[]</index></name> <init pos:start="1898:32" pos:end="1898:41">= <expr pos:start="1898:34" pos:end="1898:41"><literal type="string" pos:start="1898:34" pos:end="1898:41">" kMGTP"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1899:5" pos:end="1899:18"><decl pos:start="1899:5" pos:end="1899:17"><type pos:start="1899:5" pos:end="1899:16"><specifier pos:start="1899:5" pos:end="1899:9">const</specifier> <name pos:start="1899:11" pos:end="1899:14">char</name> <modifier pos:start="1899:16" pos:end="1899:16">*</modifier></type><name pos:start="1899:17" pos:end="1899:17">s</name></decl>;</decl_stmt>

    <for pos:start="1901:5" pos:end="1901:66">for <control pos:start="1901:9" pos:end="1901:65">(<init pos:start="1901:10" pos:end="1901:20"><expr pos:start="1901:10" pos:end="1901:19"><name pos:start="1901:10" pos:end="1901:10">s</name> <operator pos:start="1901:12" pos:end="1901:12">=</operator> <name pos:start="1901:14" pos:end="1901:19">suffix</name></expr>;</init> <condition pos:start="1901:22" pos:end="1901:45"><expr pos:start="1901:22" pos:end="1901:44"><name pos:start="1901:22" pos:end="1901:26">count</name> <operator pos:start="1901:28" pos:end="1901:29">&gt;=</operator> <literal type="number" pos:start="1901:31" pos:end="1901:36">100000</literal> <operator pos:start="1901:38" pos:end="1901:39">&amp;&amp;</operator> <name pos:start="1901:41" pos:end="1901:44"><name pos:start="1901:41" pos:end="1901:41">s</name><index pos:start="1901:42" pos:end="1901:44">[<expr pos:start="1901:43" pos:end="1901:43"><literal type="number" pos:start="1901:43" pos:end="1901:43">1</literal></expr>]</index></name></expr>;</condition> <incr pos:start="1901:47" pos:end="1901:64"><expr pos:start="1901:47" pos:end="1901:59"><name pos:start="1901:47" pos:end="1901:51">count</name> <operator pos:start="1901:53" pos:end="1901:54">/=</operator> <literal type="number" pos:start="1901:56" pos:end="1901:59">1000</literal></expr><operator pos:start="1901:60" pos:end="1901:60">,</operator> <expr pos:start="1901:62" pos:end="1901:64"><name pos:start="1901:62" pos:end="1901:62">s</name><operator pos:start="1901:63" pos:end="1901:64">++</operator></expr></incr>)</control><block type="pseudo" pos:start="1901:66" pos:end="1901:66"><block_content pos:start="1901:66" pos:end="1901:66"><empty_stmt pos:start="1901:66" pos:end="1901:66">;</empty_stmt></block_content></block></for>

    <expr_stmt pos:start="1903:5" pos:end="1903:46"><expr pos:start="1903:5" pos:end="1903:45"><call pos:start="1903:5" pos:end="1903:45"><name pos:start="1903:5" pos:end="1903:15">avio_printf</name><argument_list pos:start="1903:16" pos:end="1903:45">(<argument pos:start="1903:17" pos:end="1903:18"><expr pos:start="1903:17" pos:end="1903:18"><name pos:start="1903:17" pos:end="1903:18">pb</name></expr></argument>, <argument pos:start="1903:21" pos:end="1903:33"><expr pos:start="1903:21" pos:end="1903:33"><literal type="string" pos:start="1903:21" pos:end="1903:23">"%"</literal><name pos:start="1903:24" pos:end="1903:29">PRId64</name><literal type="string" pos:start="1903:30" pos:end="1903:33">"%c"</literal></expr></argument>, <argument pos:start="1903:36" pos:end="1903:40"><expr pos:start="1903:36" pos:end="1903:40"><name pos:start="1903:36" pos:end="1903:40">count</name></expr></argument>, <argument pos:start="1903:43" pos:end="1903:44"><expr pos:start="1903:43" pos:end="1903:44"><operator pos:start="1903:43" pos:end="1903:43">*</operator><name pos:start="1903:44" pos:end="1903:44">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="1906:1" pos:end="1950:1"><type pos:start="1906:1" pos:end="1906:18"><specifier pos:start="1906:1" pos:end="1906:6">static</specifier> <specifier pos:start="1906:8" pos:end="1906:13">inline</specifier> <name pos:start="1906:15" pos:end="1906:18">void</name></type> <name pos:start="1906:20" pos:end="1906:38">print_stream_params</name><parameter_list pos:start="1906:39" pos:end="1906:79">(<parameter pos:start="1906:40" pos:end="1906:54"><decl pos:start="1906:40" pos:end="1906:54"><type pos:start="1906:40" pos:end="1906:54"><name pos:start="1906:40" pos:end="1906:50">AVIOContext</name> <modifier pos:start="1906:52" pos:end="1906:52">*</modifier></type><name pos:start="1906:53" pos:end="1906:54">pb</name></decl></parameter>, <parameter pos:start="1906:57" pos:end="1906:78"><decl pos:start="1906:57" pos:end="1906:78"><type pos:start="1906:57" pos:end="1906:78"><name pos:start="1906:57" pos:end="1906:70">FFServerStream</name> <modifier pos:start="1906:72" pos:end="1906:72">*</modifier></type><name pos:start="1906:73" pos:end="1906:78">stream</name></decl></parameter>)</parameter_list>
<block pos:start="1907:1" pos:end="1950:1">{<block_content pos:start="1908:5" pos:end="1949:35">
    <decl_stmt pos:start="1908:5" pos:end="1908:21"><decl pos:start="1908:5" pos:end="1908:9"><type pos:start="1908:5" pos:end="1908:7"><name pos:start="1908:5" pos:end="1908:7">int</name></type> <name pos:start="1908:9" pos:end="1908:9">i</name></decl>, <decl pos:start="1908:12" pos:end="1908:20"><type ref="prev" pos:start="1908:5" pos:end="1908:7"/><name pos:start="1908:12" pos:end="1908:20">stream_no</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1909:5" pos:end="1909:33"><decl pos:start="1909:5" pos:end="1909:32"><type pos:start="1909:5" pos:end="1909:16"><specifier pos:start="1909:5" pos:end="1909:9">const</specifier> <name pos:start="1909:11" pos:end="1909:14">char</name> <modifier pos:start="1909:16" pos:end="1909:16">*</modifier></type><name pos:start="1909:17" pos:end="1909:20">type</name> <init pos:start="1909:22" pos:end="1909:32">= <expr pos:start="1909:24" pos:end="1909:32"><literal type="string" pos:start="1909:24" pos:end="1909:32">"unknown"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1910:5" pos:end="1910:24"><decl pos:start="1910:5" pos:end="1910:23"><type pos:start="1910:5" pos:end="1910:8"><name pos:start="1910:5" pos:end="1910:8">char</name></type> <name pos:start="1910:10" pos:end="1910:23"><name pos:start="1910:10" pos:end="1910:19">parameters</name><index pos:start="1910:20" pos:end="1910:23">[<expr pos:start="1910:21" pos:end="1910:22"><literal type="number" pos:start="1910:21" pos:end="1910:22">64</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="1911:5" pos:end="1911:24"><decl pos:start="1911:5" pos:end="1911:23"><type pos:start="1911:5" pos:end="1911:21"><name pos:start="1911:5" pos:end="1911:19">LayeredAVStream</name> <modifier pos:start="1911:21" pos:end="1911:21">*</modifier></type><name pos:start="1911:22" pos:end="1911:23">st</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1912:5" pos:end="1912:19"><decl pos:start="1912:5" pos:end="1912:18"><type pos:start="1912:5" pos:end="1912:13"><name pos:start="1912:5" pos:end="1912:11">AVCodec</name> <modifier pos:start="1912:13" pos:end="1912:13">*</modifier></type><name pos:start="1912:14" pos:end="1912:18">codec</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1914:5" pos:end="1914:35"><expr pos:start="1914:5" pos:end="1914:34"><name pos:start="1914:5" pos:end="1914:13">stream_no</name> <operator pos:start="1914:15" pos:end="1914:15">=</operator> <name pos:start="1914:17" pos:end="1914:34"><name pos:start="1914:17" pos:end="1914:22">stream</name><operator pos:start="1914:23" pos:end="1914:24">-&gt;</operator><name pos:start="1914:25" pos:end="1914:34">nb_streams</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="1916:5" pos:end="1918:36"><expr pos:start="1916:5" pos:end="1918:35"><call pos:start="1916:5" pos:end="1918:35"><name pos:start="1916:5" pos:end="1916:15">avio_printf</name><argument_list pos:start="1916:16" pos:end="1918:35">(<argument pos:start="1916:17" pos:end="1916:18"><expr pos:start="1916:17" pos:end="1916:18"><name pos:start="1916:17" pos:end="1916:18">pb</name></expr></argument>, <argument pos:start="1916:21" pos:end="1918:34"><expr pos:start="1916:21" pos:end="1918:34"><literal type="string" pos:start="1916:21" pos:end="1916:47">"&lt;table&gt;&lt;tr&gt;&lt;th&gt;Stream&lt;th&gt;"</literal>
                    <literal type="string" pos:start="1917:21" pos:end="1917:49">"type&lt;th&gt;kbit/s&lt;th&gt;codec&lt;th&gt;"</literal>
                    <literal type="string" pos:start="1918:21" pos:end="1918:34">"Parameters\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="1920:5" pos:end="1947:6">for <control pos:start="1920:9" pos:end="1920:35">(<init pos:start="1920:10" pos:end="1920:15"><expr pos:start="1920:10" pos:end="1920:14"><name pos:start="1920:10" pos:end="1920:10">i</name> <operator pos:start="1920:12" pos:end="1920:12">=</operator> <literal type="number" pos:start="1920:14" pos:end="1920:14">0</literal></expr>;</init> <condition pos:start="1920:17" pos:end="1920:30"><expr pos:start="1920:17" pos:end="1920:29"><name pos:start="1920:17" pos:end="1920:17">i</name> <operator pos:start="1920:19" pos:end="1920:19">&lt;</operator> <name pos:start="1920:21" pos:end="1920:29">stream_no</name></expr>;</condition> <incr pos:start="1920:32" pos:end="1920:34"><expr pos:start="1920:32" pos:end="1920:34"><name pos:start="1920:32" pos:end="1920:32">i</name><operator pos:start="1920:33" pos:end="1920:34">++</operator></expr></incr>)</control> <block pos:start="1920:37" pos:end="1947:6">{<block_content pos:start="1921:9" pos:end="1946:58">
        <expr_stmt pos:start="1921:9" pos:end="1921:32"><expr pos:start="1921:9" pos:end="1921:31"><name pos:start="1921:9" pos:end="1921:10">st</name> <operator pos:start="1921:12" pos:end="1921:12">=</operator> <name pos:start="1921:14" pos:end="1921:31"><name pos:start="1921:14" pos:end="1921:19">stream</name><operator pos:start="1921:20" pos:end="1921:21">-&gt;</operator><name pos:start="1921:22" pos:end="1921:28">streams</name><index pos:start="1921:29" pos:end="1921:31">[<expr pos:start="1921:30" pos:end="1921:30"><name pos:start="1921:30" pos:end="1921:30">i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="1922:9" pos:end="1922:61"><expr pos:start="1922:9" pos:end="1922:60"><name pos:start="1922:9" pos:end="1922:13">codec</name> <operator pos:start="1922:15" pos:end="1922:15">=</operator> <call pos:start="1922:17" pos:end="1922:60"><name pos:start="1922:17" pos:end="1922:36">avcodec_find_encoder</name><argument_list pos:start="1922:37" pos:end="1922:60">(<argument pos:start="1922:38" pos:end="1922:59"><expr pos:start="1922:38" pos:end="1922:59"><name pos:start="1922:38" pos:end="1922:59"><name pos:start="1922:38" pos:end="1922:39">st</name><operator pos:start="1922:40" pos:end="1922:41">-&gt;</operator><name pos:start="1922:42" pos:end="1922:49">codecpar</name><operator pos:start="1922:50" pos:end="1922:51">-&gt;</operator><name pos:start="1922:52" pos:end="1922:59">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1924:9" pos:end="1924:26"><expr pos:start="1924:9" pos:end="1924:25"><name pos:start="1924:9" pos:end="1924:21"><name pos:start="1924:9" pos:end="1924:18">parameters</name><index pos:start="1924:19" pos:end="1924:21">[<expr pos:start="1924:20" pos:end="1924:20"><literal type="number" pos:start="1924:20" pos:end="1924:20">0</literal></expr>]</index></name> <operator pos:start="1924:23" pos:end="1924:23">=</operator> <literal type="number" pos:start="1924:25" pos:end="1924:25">0</literal></expr>;</expr_stmt>

        <switch pos:start="1926:9" pos:end="1941:9">switch<condition pos:start="1926:15" pos:end="1926:40">(<expr pos:start="1926:16" pos:end="1926:39"><name pos:start="1926:16" pos:end="1926:39"><name pos:start="1926:16" pos:end="1926:17">st</name><operator pos:start="1926:18" pos:end="1926:19">-&gt;</operator><name pos:start="1926:20" pos:end="1926:27">codecpar</name><operator pos:start="1926:28" pos:end="1926:29">-&gt;</operator><name pos:start="1926:30" pos:end="1926:39">codec_type</name></name></expr>)</condition> <block pos:start="1926:42" pos:end="1941:9">{<block_content pos:start="1927:9" pos:end="1940:20">
        <case pos:start="1927:9" pos:end="1927:32">case <expr pos:start="1927:14" pos:end="1927:31"><name pos:start="1927:14" pos:end="1927:31">AVMEDIA_TYPE_AUDIO</name></expr>:</case>
            <expr_stmt pos:start="1928:13" pos:end="1928:27"><expr pos:start="1928:13" pos:end="1928:26"><name pos:start="1928:13" pos:end="1928:16">type</name> <operator pos:start="1928:18" pos:end="1928:18">=</operator> <literal type="string" pos:start="1928:20" pos:end="1928:26">"audio"</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="1929:13" pos:end="1930:72"><expr pos:start="1929:13" pos:end="1930:71"><call pos:start="1929:13" pos:end="1930:71"><name pos:start="1929:13" pos:end="1929:20">snprintf</name><argument_list pos:start="1929:21" pos:end="1930:71">(<argument pos:start="1929:22" pos:end="1929:31"><expr pos:start="1929:22" pos:end="1929:31"><name pos:start="1929:22" pos:end="1929:31">parameters</name></expr></argument>, <argument pos:start="1929:34" pos:end="1929:51"><expr pos:start="1929:34" pos:end="1929:51"><sizeof pos:start="1929:34" pos:end="1929:51">sizeof<argument_list pos:start="1929:40" pos:end="1929:51">(<argument pos:start="1929:41" pos:end="1929:50"><expr pos:start="1929:41" pos:end="1929:50"><name pos:start="1929:41" pos:end="1929:50">parameters</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1929:54" pos:end="1929:75"><expr pos:start="1929:54" pos:end="1929:75"><literal type="string" pos:start="1929:54" pos:end="1929:75">"%d channel(s), %d Hz"</literal></expr></argument>,
                     <argument pos:start="1930:22" pos:end="1930:43"><expr pos:start="1930:22" pos:end="1930:43"><name pos:start="1930:22" pos:end="1930:43"><name pos:start="1930:22" pos:end="1930:23">st</name><operator pos:start="1930:24" pos:end="1930:25">-&gt;</operator><name pos:start="1930:26" pos:end="1930:33">codecpar</name><operator pos:start="1930:34" pos:end="1930:35">-&gt;</operator><name pos:start="1930:36" pos:end="1930:43">channels</name></name></expr></argument>, <argument pos:start="1930:46" pos:end="1930:70"><expr pos:start="1930:46" pos:end="1930:70"><name pos:start="1930:46" pos:end="1930:70"><name pos:start="1930:46" pos:end="1930:47">st</name><operator pos:start="1930:48" pos:end="1930:49">-&gt;</operator><name pos:start="1930:50" pos:end="1930:57">codecpar</name><operator pos:start="1930:58" pos:end="1930:59">-&gt;</operator><name pos:start="1930:60" pos:end="1930:70">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="1931:13" pos:end="1931:18">break;</break>
        <case pos:start="1932:9" pos:end="1932:32">case <expr pos:start="1932:14" pos:end="1932:31"><name pos:start="1932:14" pos:end="1932:31">AVMEDIA_TYPE_VIDEO</name></expr>:</case>
            <expr_stmt pos:start="1933:13" pos:end="1933:27"><expr pos:start="1933:13" pos:end="1933:26"><name pos:start="1933:13" pos:end="1933:16">type</name> <operator pos:start="1933:18" pos:end="1933:18">=</operator> <literal type="string" pos:start="1933:20" pos:end="1933:26">"video"</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="1934:13" pos:end="1937:60"><expr pos:start="1934:13" pos:end="1937:59"><call pos:start="1934:13" pos:end="1937:59"><name pos:start="1934:13" pos:end="1934:20">snprintf</name><argument_list pos:start="1934:21" pos:end="1937:59">(<argument pos:start="1934:22" pos:end="1934:31"><expr pos:start="1934:22" pos:end="1934:31"><name pos:start="1934:22" pos:end="1934:31">parameters</name></expr></argument>, <argument pos:start="1934:34" pos:end="1934:51"><expr pos:start="1934:34" pos:end="1934:51"><sizeof pos:start="1934:34" pos:end="1934:51">sizeof<argument_list pos:start="1934:40" pos:end="1934:51">(<argument pos:start="1934:41" pos:end="1934:50"><expr pos:start="1934:41" pos:end="1934:50"><name pos:start="1934:41" pos:end="1934:50">parameters</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                     <argument pos:start="1935:22" pos:end="1935:45"><expr pos:start="1935:22" pos:end="1935:45"><literal type="string" pos:start="1935:22" pos:end="1935:45">"%dx%d, q=%d-%d, fps=%d"</literal></expr></argument>, <argument pos:start="1935:48" pos:end="1935:66"><expr pos:start="1935:48" pos:end="1935:66"><name pos:start="1935:48" pos:end="1935:66"><name pos:start="1935:48" pos:end="1935:49">st</name><operator pos:start="1935:50" pos:end="1935:51">-&gt;</operator><name pos:start="1935:52" pos:end="1935:59">codecpar</name><operator pos:start="1935:60" pos:end="1935:61">-&gt;</operator><name pos:start="1935:62" pos:end="1935:66">width</name></name></expr></argument>,
                     <argument pos:start="1936:22" pos:end="1936:41"><expr pos:start="1936:22" pos:end="1936:41"><name pos:start="1936:22" pos:end="1936:41"><name pos:start="1936:22" pos:end="1936:23">st</name><operator pos:start="1936:24" pos:end="1936:25">-&gt;</operator><name pos:start="1936:26" pos:end="1936:33">codecpar</name><operator pos:start="1936:34" pos:end="1936:35">-&gt;</operator><name pos:start="1936:36" pos:end="1936:41">height</name></name></expr></argument>, <argument pos:start="1936:44" pos:end="1936:58"><expr pos:start="1936:44" pos:end="1936:58"><name pos:start="1936:44" pos:end="1936:58"><name pos:start="1936:44" pos:end="1936:45">st</name><operator pos:start="1936:46" pos:end="1936:47">-&gt;</operator><name pos:start="1936:48" pos:end="1936:52">codec</name><operator pos:start="1936:53" pos:end="1936:54">-&gt;</operator><name pos:start="1936:55" pos:end="1936:58">qmin</name></name></expr></argument>, <argument pos:start="1936:61" pos:end="1936:75"><expr pos:start="1936:61" pos:end="1936:75"><name pos:start="1936:61" pos:end="1936:75"><name pos:start="1936:61" pos:end="1936:62">st</name><operator pos:start="1936:63" pos:end="1936:64">-&gt;</operator><name pos:start="1936:65" pos:end="1936:69">codec</name><operator pos:start="1936:70" pos:end="1936:71">-&gt;</operator><name pos:start="1936:72" pos:end="1936:75">qmax</name></name></expr></argument>,
                     <argument pos:start="1937:22" pos:end="1937:58"><expr pos:start="1937:22" pos:end="1937:58"><name pos:start="1937:22" pos:end="1937:38"><name pos:start="1937:22" pos:end="1937:23">st</name><operator pos:start="1937:24" pos:end="1937:25">-&gt;</operator><name pos:start="1937:26" pos:end="1937:34">time_base</name><operator pos:start="1937:35" pos:end="1937:35">.</operator><name pos:start="1937:36" pos:end="1937:38">den</name></name> <operator pos:start="1937:40" pos:end="1937:40">/</operator> <name pos:start="1937:42" pos:end="1937:58"><name pos:start="1937:42" pos:end="1937:43">st</name><operator pos:start="1937:44" pos:end="1937:45">-&gt;</operator><name pos:start="1937:46" pos:end="1937:54">time_base</name><operator pos:start="1937:55" pos:end="1937:55">.</operator><name pos:start="1937:56" pos:end="1937:58">num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="1938:13" pos:end="1938:18">break;</break>
        <default pos:start="1939:9" pos:end="1939:16">default:</default>
            <expr_stmt pos:start="1940:13" pos:end="1940:20"><expr pos:start="1940:13" pos:end="1940:19"><call pos:start="1940:13" pos:end="1940:19"><name pos:start="1940:13" pos:end="1940:17">abort</name><argument_list pos:start="1940:18" pos:end="1940:19">()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>

        <expr_stmt pos:start="1943:9" pos:end="1946:58"><expr pos:start="1943:9" pos:end="1946:57"><call pos:start="1943:9" pos:end="1946:57"><name pos:start="1943:9" pos:end="1943:19">avio_printf</name><argument_list pos:start="1943:20" pos:end="1946:57">(<argument pos:start="1943:21" pos:end="1943:22"><expr pos:start="1943:21" pos:end="1943:22"><name pos:start="1943:21" pos:end="1943:22">pb</name></expr></argument>, <argument pos:start="1943:25" pos:end="1944:40"><expr pos:start="1943:25" pos:end="1944:40"><literal type="string" pos:start="1943:25" pos:end="1943:47">"&lt;tr&gt;&lt;td&gt;%d&lt;td&gt;%s&lt;td&gt;%"</literal><name pos:start="1943:48" pos:end="1943:53">PRId64</name>
                        <literal type="string" pos:start="1944:25" pos:end="1944:40">"&lt;td&gt;%s&lt;td&gt;%s\n"</literal></expr></argument>,
                    <argument pos:start="1945:21" pos:end="1945:21"><expr pos:start="1945:21" pos:end="1945:21"><name pos:start="1945:21" pos:end="1945:21">i</name></expr></argument>, <argument pos:start="1945:24" pos:end="1945:27"><expr pos:start="1945:24" pos:end="1945:27"><name pos:start="1945:24" pos:end="1945:27">type</name></expr></argument>, <argument pos:start="1945:30" pos:end="1945:65"><expr pos:start="1945:30" pos:end="1945:65"><operator pos:start="1945:30" pos:end="1945:30">(</operator><name pos:start="1945:31" pos:end="1945:37">int64_t</name><operator pos:start="1945:38" pos:end="1945:38">)</operator><name pos:start="1945:39" pos:end="1945:60"><name pos:start="1945:39" pos:end="1945:40">st</name><operator pos:start="1945:41" pos:end="1945:42">-&gt;</operator><name pos:start="1945:43" pos:end="1945:50">codecpar</name><operator pos:start="1945:51" pos:end="1945:52">-&gt;</operator><name pos:start="1945:53" pos:end="1945:60">bit_rate</name></name><operator pos:start="1945:61" pos:end="1945:61">/</operator><literal type="number" pos:start="1945:62" pos:end="1945:65">1000</literal></expr></argument>,
                    <argument pos:start="1946:21" pos:end="1946:44"><expr pos:start="1946:21" pos:end="1946:44"><ternary pos:start="1946:21" pos:end="1946:44"><condition pos:start="1946:21" pos:end="1946:27"><expr pos:start="1946:21" pos:end="1946:25"><name pos:start="1946:21" pos:end="1946:25">codec</name></expr> ?</condition><then pos:start="1946:29" pos:end="1946:39"> <expr pos:start="1946:29" pos:end="1946:39"><name pos:start="1946:29" pos:end="1946:39"><name pos:start="1946:29" pos:end="1946:33">codec</name><operator pos:start="1946:34" pos:end="1946:35">-&gt;</operator><name pos:start="1946:36" pos:end="1946:39">name</name></name></expr> </then><else pos:start="1946:41" pos:end="1946:44">: <expr pos:start="1946:43" pos:end="1946:44"><literal type="string" pos:start="1946:43" pos:end="1946:44">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="1946:47" pos:end="1946:56"><expr pos:start="1946:47" pos:end="1946:56"><name pos:start="1946:47" pos:end="1946:56">parameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>

     <expr_stmt pos:start="1949:6" pos:end="1949:35"><expr pos:start="1949:6" pos:end="1949:34"><call pos:start="1949:6" pos:end="1949:34"><name pos:start="1949:6" pos:end="1949:16">avio_printf</name><argument_list pos:start="1949:17" pos:end="1949:34">(<argument pos:start="1949:18" pos:end="1949:19"><expr pos:start="1949:18" pos:end="1949:19"><name pos:start="1949:18" pos:end="1949:19">pb</name></expr></argument>, <argument pos:start="1949:22" pos:end="1949:33"><expr pos:start="1949:22" pos:end="1949:33"><literal type="string" pos:start="1949:22" pos:end="1949:33">"&lt;/table&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="1952:1" pos:end="1978:1"><type pos:start="1952:1" pos:end="1952:11"><specifier pos:start="1952:1" pos:end="1952:6">static</specifier> <name pos:start="1952:8" pos:end="1952:11">void</name></type> <name pos:start="1952:13" pos:end="1952:22">clean_html</name><parameter_list pos:start="1952:23" pos:end="1952:63">(<parameter pos:start="1952:24" pos:end="1952:34"><decl pos:start="1952:24" pos:end="1952:34"><type pos:start="1952:24" pos:end="1952:34"><name pos:start="1952:24" pos:end="1952:27">char</name> <modifier pos:start="1952:29" pos:end="1952:29">*</modifier></type><name pos:start="1952:30" pos:end="1952:34">clean</name></decl></parameter>, <parameter pos:start="1952:37" pos:end="1952:49"><decl pos:start="1952:37" pos:end="1952:49"><type pos:start="1952:37" pos:end="1952:49"><name pos:start="1952:37" pos:end="1952:39">int</name></type> <name pos:start="1952:41" pos:end="1952:49">clean_len</name></decl></parameter>, <parameter pos:start="1952:52" pos:end="1952:62"><decl pos:start="1952:52" pos:end="1952:62"><type pos:start="1952:52" pos:end="1952:62"><name pos:start="1952:52" pos:end="1952:55">char</name> <modifier pos:start="1952:57" pos:end="1952:57">*</modifier></type><name pos:start="1952:58" pos:end="1952:62">dirty</name></decl></parameter>)</parameter_list>
<block pos:start="1953:1" pos:end="1978:1">{<block_content pos:start="1954:5" pos:end="1977:17">
    <decl_stmt pos:start="1954:5" pos:end="1954:13"><decl pos:start="1954:5" pos:end="1954:9"><type pos:start="1954:5" pos:end="1954:7"><name pos:start="1954:5" pos:end="1954:7">int</name></type> <name pos:start="1954:9" pos:end="1954:9">i</name></decl>, <decl pos:start="1954:12" pos:end="1954:12"><type ref="prev" pos:start="1954:5" pos:end="1954:7"/><name pos:start="1954:12" pos:end="1954:12">o</name></decl>;</decl_stmt>

    <for pos:start="1956:5" pos:end="1976:5">for <control pos:start="1956:9" pos:end="1956:50">(<init pos:start="1956:10" pos:end="1956:19"><expr pos:start="1956:10" pos:end="1956:18"><name pos:start="1956:10" pos:end="1956:10">o</name> <operator pos:start="1956:12" pos:end="1956:12">=</operator> <name pos:start="1956:14" pos:end="1956:14">i</name> <operator pos:start="1956:16" pos:end="1956:16">=</operator> <literal type="number" pos:start="1956:18" pos:end="1956:18">0</literal></expr>;</init> <condition pos:start="1956:21" pos:end="1956:49"><expr pos:start="1956:21" pos:end="1956:48"><name pos:start="1956:21" pos:end="1956:21">o</name><operator pos:start="1956:22" pos:end="1956:22">+</operator><literal type="number" pos:start="1956:23" pos:end="1956:24">10</literal> <operator pos:start="1956:26" pos:end="1956:26">&lt;</operator> <name pos:start="1956:28" pos:end="1956:36">clean_len</name> <operator pos:start="1956:38" pos:end="1956:39">&amp;&amp;</operator> <name pos:start="1956:41" pos:end="1956:48"><name pos:start="1956:41" pos:end="1956:45">dirty</name><index pos:start="1956:46" pos:end="1956:48">[<expr pos:start="1956:47" pos:end="1956:47"><name pos:start="1956:47" pos:end="1956:47">i</name></expr>]</index></name></expr>;</condition><incr/>)</control> <block pos:start="1956:52" pos:end="1976:5">{<block_content pos:start="1957:9" pos:end="1975:9">
        <decl_stmt pos:start="1957:9" pos:end="1957:116"><decl pos:start="1957:9" pos:end="1957:115"><type pos:start="1957:9" pos:end="1957:11"><name pos:start="1957:9" pos:end="1957:11">int</name></type> <name pos:start="1957:13" pos:end="1957:15">len</name> <init pos:start="1957:17" pos:end="1957:115">= <expr pos:start="1957:19" pos:end="1957:115"><call pos:start="1957:19" pos:end="1957:115"><name pos:start="1957:19" pos:end="1957:24">strspn</name><argument_list pos:start="1957:25" pos:end="1957:115">(<argument pos:start="1957:26" pos:end="1957:32"><expr pos:start="1957:26" pos:end="1957:32"><name pos:start="1957:26" pos:end="1957:30">dirty</name><operator pos:start="1957:31" pos:end="1957:31">+</operator><name pos:start="1957:32" pos:end="1957:32">i</name></expr></argument>, <argument pos:start="1957:35" pos:end="1957:114"><expr pos:start="1957:35" pos:end="1957:114"><literal type="string" pos:start="1957:35" pos:end="1957:114">"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$-_.+!*(),?/ :;%"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="1958:9" pos:end="1975:9"><if pos:start="1958:9" pos:end="1964:9">if <condition pos:start="1958:12" pos:end="1958:16">(<expr pos:start="1958:13" pos:end="1958:15"><name pos:start="1958:13" pos:end="1958:15">len</name></expr>)</condition> <block pos:start="1958:18" pos:end="1964:9">{<block_content pos:start="1959:13" pos:end="1963:21">
            <if_stmt pos:start="1959:13" pos:end="1960:22"><if pos:start="1959:13" pos:end="1960:22">if <condition pos:start="1959:16" pos:end="1959:37">(<expr pos:start="1959:17" pos:end="1959:36"><name pos:start="1959:17" pos:end="1959:17">o</name> <operator pos:start="1959:19" pos:end="1959:19">+</operator> <name pos:start="1959:21" pos:end="1959:23">len</name> <operator pos:start="1959:25" pos:end="1959:26">&gt;=</operator> <name pos:start="1959:28" pos:end="1959:36">clean_len</name></expr>)</condition><block type="pseudo" pos:start="1960:17" pos:end="1960:22"><block_content pos:start="1960:17" pos:end="1960:22">
                <break pos:start="1960:17" pos:end="1960:22">break;</break></block_content></block></if></if_stmt>
            <expr_stmt pos:start="1961:13" pos:end="1961:46"><expr pos:start="1961:13" pos:end="1961:45"><call pos:start="1961:13" pos:end="1961:45"><name pos:start="1961:13" pos:end="1961:18">memcpy</name><argument_list pos:start="1961:19" pos:end="1961:45">(<argument pos:start="1961:20" pos:end="1961:28"><expr pos:start="1961:20" pos:end="1961:28"><name pos:start="1961:20" pos:end="1961:24">clean</name> <operator pos:start="1961:26" pos:end="1961:26">+</operator> <name pos:start="1961:28" pos:end="1961:28">o</name></expr></argument>, <argument pos:start="1961:31" pos:end="1961:39"><expr pos:start="1961:31" pos:end="1961:39"><name pos:start="1961:31" pos:end="1961:35">dirty</name> <operator pos:start="1961:37" pos:end="1961:37">+</operator> <name pos:start="1961:39" pos:end="1961:39">i</name></expr></argument>, <argument pos:start="1961:42" pos:end="1961:44"><expr pos:start="1961:42" pos:end="1961:44"><name pos:start="1961:42" pos:end="1961:44">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1962:13" pos:end="1962:21"><expr pos:start="1962:13" pos:end="1962:20"><name pos:start="1962:13" pos:end="1962:13">i</name> <operator pos:start="1962:15" pos:end="1962:16">+=</operator> <name pos:start="1962:18" pos:end="1962:20">len</name></expr>;</expr_stmt>
            <expr_stmt pos:start="1963:13" pos:end="1963:21"><expr pos:start="1963:13" pos:end="1963:20"><name pos:start="1963:13" pos:end="1963:13">o</name> <operator pos:start="1963:15" pos:end="1963:16">+=</operator> <name pos:start="1963:18" pos:end="1963:20">len</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="1964:11" pos:end="1975:9">else <block pos:start="1964:16" pos:end="1975:9">{<block_content pos:start="1965:13" pos:end="1974:33">
            <decl_stmt pos:start="1965:13" pos:end="1965:31"><decl pos:start="1965:13" pos:end="1965:30"><type pos:start="1965:13" pos:end="1965:15"><name pos:start="1965:13" pos:end="1965:15">int</name></type> <name pos:start="1965:17" pos:end="1965:17">c</name> <init pos:start="1965:19" pos:end="1965:30">= <expr pos:start="1965:21" pos:end="1965:30"><name pos:start="1965:21" pos:end="1965:30"><name pos:start="1965:21" pos:end="1965:25">dirty</name><index pos:start="1965:26" pos:end="1965:30">[<expr pos:start="1965:27" pos:end="1965:29"><name pos:start="1965:27" pos:end="1965:27">i</name><operator pos:start="1965:28" pos:end="1965:29">++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <switch pos:start="1966:13" pos:end="1973:13">switch <condition pos:start="1966:20" pos:end="1966:22">(<expr pos:start="1966:21" pos:end="1966:21"><name pos:start="1966:21" pos:end="1966:21">c</name></expr>)</condition> <block pos:start="1966:24" pos:end="1973:13">{<block_content pos:start="1967:13" pos:end="1972:76">
            <case pos:start="1967:13" pos:end="1967:22">case  <expr pos:start="1967:19" pos:end="1967:21"><literal type="char" pos:start="1967:19" pos:end="1967:21">'&amp;'</literal></expr>:</case> <expr_stmt pos:start="1967:24" pos:end="1967:69"><expr pos:start="1967:24" pos:end="1967:68"><call pos:start="1967:24" pos:end="1967:68"><name pos:start="1967:24" pos:end="1967:33">av_strlcat</name><argument_list pos:start="1967:34" pos:end="1967:68">(<argument pos:start="1967:35" pos:end="1967:41"><expr pos:start="1967:35" pos:end="1967:41"><name pos:start="1967:35" pos:end="1967:39">clean</name><operator pos:start="1967:40" pos:end="1967:40">+</operator><name pos:start="1967:41" pos:end="1967:41">o</name></expr></argument>, <argument pos:start="1967:44" pos:end="1967:50"><expr pos:start="1967:44" pos:end="1967:50"><literal type="string" pos:start="1967:44" pos:end="1967:50">"&amp;amp;"</literal></expr></argument>  , <argument pos:start="1967:55" pos:end="1967:67"><expr pos:start="1967:55" pos:end="1967:67"><name pos:start="1967:55" pos:end="1967:63">clean_len</name> <operator pos:start="1967:65" pos:end="1967:65">-</operator> <name pos:start="1967:67" pos:end="1967:67">o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="1967:71" pos:end="1967:76">break;</break>
            <case pos:start="1968:13" pos:end="1968:22">case  <expr pos:start="1968:19" pos:end="1968:21"><literal type="char" pos:start="1968:19" pos:end="1968:21">'&lt;'</literal></expr>:</case> <expr_stmt pos:start="1968:24" pos:end="1968:69"><expr pos:start="1968:24" pos:end="1968:68"><call pos:start="1968:24" pos:end="1968:68"><name pos:start="1968:24" pos:end="1968:33">av_strlcat</name><argument_list pos:start="1968:34" pos:end="1968:68">(<argument pos:start="1968:35" pos:end="1968:41"><expr pos:start="1968:35" pos:end="1968:41"><name pos:start="1968:35" pos:end="1968:39">clean</name><operator pos:start="1968:40" pos:end="1968:40">+</operator><name pos:start="1968:41" pos:end="1968:41">o</name></expr></argument>, <argument pos:start="1968:44" pos:end="1968:49"><expr pos:start="1968:44" pos:end="1968:49"><literal type="string" pos:start="1968:44" pos:end="1968:49">"&amp;lt;"</literal></expr></argument>   , <argument pos:start="1968:55" pos:end="1968:67"><expr pos:start="1968:55" pos:end="1968:67"><name pos:start="1968:55" pos:end="1968:63">clean_len</name> <operator pos:start="1968:65" pos:end="1968:65">-</operator> <name pos:start="1968:67" pos:end="1968:67">o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="1968:71" pos:end="1968:76">break;</break>
            <case pos:start="1969:13" pos:end="1969:22">case  <expr pos:start="1969:19" pos:end="1969:21"><literal type="char" pos:start="1969:19" pos:end="1969:21">'&gt;'</literal></expr>:</case> <expr_stmt pos:start="1969:24" pos:end="1969:69"><expr pos:start="1969:24" pos:end="1969:68"><call pos:start="1969:24" pos:end="1969:68"><name pos:start="1969:24" pos:end="1969:33">av_strlcat</name><argument_list pos:start="1969:34" pos:end="1969:68">(<argument pos:start="1969:35" pos:end="1969:41"><expr pos:start="1969:35" pos:end="1969:41"><name pos:start="1969:35" pos:end="1969:39">clean</name><operator pos:start="1969:40" pos:end="1969:40">+</operator><name pos:start="1969:41" pos:end="1969:41">o</name></expr></argument>, <argument pos:start="1969:44" pos:end="1969:49"><expr pos:start="1969:44" pos:end="1969:49"><literal type="string" pos:start="1969:44" pos:end="1969:49">"&amp;gt;"</literal></expr></argument>   , <argument pos:start="1969:55" pos:end="1969:67"><expr pos:start="1969:55" pos:end="1969:67"><name pos:start="1969:55" pos:end="1969:63">clean_len</name> <operator pos:start="1969:65" pos:end="1969:65">-</operator> <name pos:start="1969:67" pos:end="1969:67">o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="1969:71" pos:end="1969:76">break;</break>
            <case pos:start="1970:13" pos:end="1970:22">case <expr pos:start="1970:18" pos:end="1970:21"><literal type="char" pos:start="1970:18" pos:end="1970:21">'\''</literal></expr>:</case> <expr_stmt pos:start="1970:24" pos:end="1970:69"><expr pos:start="1970:24" pos:end="1970:68"><call pos:start="1970:24" pos:end="1970:68"><name pos:start="1970:24" pos:end="1970:33">av_strlcat</name><argument_list pos:start="1970:34" pos:end="1970:68">(<argument pos:start="1970:35" pos:end="1970:41"><expr pos:start="1970:35" pos:end="1970:41"><name pos:start="1970:35" pos:end="1970:39">clean</name><operator pos:start="1970:40" pos:end="1970:40">+</operator><name pos:start="1970:41" pos:end="1970:41">o</name></expr></argument>, <argument pos:start="1970:44" pos:end="1970:51"><expr pos:start="1970:44" pos:end="1970:51"><literal type="string" pos:start="1970:44" pos:end="1970:51">"&amp;apos;"</literal></expr></argument> , <argument pos:start="1970:55" pos:end="1970:67"><expr pos:start="1970:55" pos:end="1970:67"><name pos:start="1970:55" pos:end="1970:63">clean_len</name> <operator pos:start="1970:65" pos:end="1970:65">-</operator> <name pos:start="1970:67" pos:end="1970:67">o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="1970:71" pos:end="1970:76">break;</break>
            <case pos:start="1971:13" pos:end="1971:22">case <expr pos:start="1971:18" pos:end="1971:21"><literal type="char" pos:start="1971:18" pos:end="1971:21">'\"'</literal></expr>:</case> <expr_stmt pos:start="1971:24" pos:end="1971:69"><expr pos:start="1971:24" pos:end="1971:68"><call pos:start="1971:24" pos:end="1971:68"><name pos:start="1971:24" pos:end="1971:33">av_strlcat</name><argument_list pos:start="1971:34" pos:end="1971:68">(<argument pos:start="1971:35" pos:end="1971:41"><expr pos:start="1971:35" pos:end="1971:41"><name pos:start="1971:35" pos:end="1971:39">clean</name><operator pos:start="1971:40" pos:end="1971:40">+</operator><name pos:start="1971:41" pos:end="1971:41">o</name></expr></argument>, <argument pos:start="1971:44" pos:end="1971:51"><expr pos:start="1971:44" pos:end="1971:51"><literal type="string" pos:start="1971:44" pos:end="1971:51">"&amp;quot;"</literal></expr></argument> , <argument pos:start="1971:55" pos:end="1971:67"><expr pos:start="1971:55" pos:end="1971:67"><name pos:start="1971:55" pos:end="1971:63">clean_len</name> <operator pos:start="1971:65" pos:end="1971:65">-</operator> <name pos:start="1971:67" pos:end="1971:67">o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="1971:71" pos:end="1971:76">break;</break>
            <default pos:start="1972:13" pos:end="1972:20">default:</default>   <expr_stmt pos:start="1972:24" pos:end="1972:69"><expr pos:start="1972:24" pos:end="1972:68"><call pos:start="1972:24" pos:end="1972:68"><name pos:start="1972:24" pos:end="1972:33">av_strlcat</name><argument_list pos:start="1972:34" pos:end="1972:68">(<argument pos:start="1972:35" pos:end="1972:41"><expr pos:start="1972:35" pos:end="1972:41"><name pos:start="1972:35" pos:end="1972:39">clean</name><operator pos:start="1972:40" pos:end="1972:40">+</operator><name pos:start="1972:41" pos:end="1972:41">o</name></expr></argument>, <argument pos:start="1972:44" pos:end="1972:52"><expr pos:start="1972:44" pos:end="1972:52"><literal type="string" pos:start="1972:44" pos:end="1972:52">"&amp;#9785;"</literal></expr></argument>, <argument pos:start="1972:55" pos:end="1972:67"><expr pos:start="1972:55" pos:end="1972:67"><name pos:start="1972:55" pos:end="1972:63">clean_len</name> <operator pos:start="1972:65" pos:end="1972:65">-</operator> <name pos:start="1972:67" pos:end="1972:67">o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="1972:71" pos:end="1972:76">break;</break>
            </block_content>}</block></switch>
            <expr_stmt pos:start="1974:13" pos:end="1974:33"><expr pos:start="1974:13" pos:end="1974:32"><name pos:start="1974:13" pos:end="1974:13">o</name> <operator pos:start="1974:15" pos:end="1974:16">+=</operator> <call pos:start="1974:18" pos:end="1974:32"><name pos:start="1974:18" pos:end="1974:23">strlen</name><argument_list pos:start="1974:24" pos:end="1974:32">(<argument pos:start="1974:25" pos:end="1974:31"><expr pos:start="1974:25" pos:end="1974:31"><name pos:start="1974:25" pos:end="1974:29">clean</name><operator pos:start="1974:30" pos:end="1974:30">+</operator><name pos:start="1974:31" pos:end="1974:31">o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="1977:5" pos:end="1977:17"><expr pos:start="1977:5" pos:end="1977:16"><name pos:start="1977:5" pos:end="1977:12"><name pos:start="1977:5" pos:end="1977:9">clean</name><index pos:start="1977:10" pos:end="1977:12">[<expr pos:start="1977:11" pos:end="1977:11"><name pos:start="1977:11" pos:end="1977:11">o</name></expr>]</index></name> <operator pos:start="1977:14" pos:end="1977:14">=</operator> <literal type="number" pos:start="1977:16" pos:end="1977:16">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="1980:1" pos:end="2216:1"><type pos:start="1980:1" pos:end="1980:11"><specifier pos:start="1980:1" pos:end="1980:6">static</specifier> <name pos:start="1980:8" pos:end="1980:11">void</name></type> <name pos:start="1980:13" pos:end="1980:26">compute_status</name><parameter_list pos:start="1980:27" pos:end="1980:42">(<parameter pos:start="1980:28" pos:end="1980:41"><decl pos:start="1980:28" pos:end="1980:41"><type pos:start="1980:28" pos:end="1980:40"><name pos:start="1980:28" pos:end="1980:38">HTTPContext</name> <modifier pos:start="1980:40" pos:end="1980:40">*</modifier></type><name pos:start="1980:41" pos:end="1980:41">c</name></decl></parameter>)</parameter_list>
<block pos:start="1981:1" pos:end="2216:1">{<block_content pos:start="1982:5" pos:end="2215:39">
    <decl_stmt pos:start="1982:5" pos:end="1982:20"><decl pos:start="1982:5" pos:end="1982:19"><type pos:start="1982:5" pos:end="1982:17"><name pos:start="1982:5" pos:end="1982:15">HTTPContext</name> <modifier pos:start="1982:17" pos:end="1982:17">*</modifier></type><name pos:start="1982:18" pos:end="1982:19">c1</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1983:5" pos:end="1983:27"><decl pos:start="1983:5" pos:end="1983:26"><type pos:start="1983:5" pos:end="1983:20"><name pos:start="1983:5" pos:end="1983:18">FFServerStream</name> <modifier pos:start="1983:20" pos:end="1983:20">*</modifier></type><name pos:start="1983:21" pos:end="1983:26">stream</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1984:5" pos:end="1984:12"><decl pos:start="1984:5" pos:end="1984:11"><type pos:start="1984:5" pos:end="1984:10"><name pos:start="1984:5" pos:end="1984:8">char</name> <modifier pos:start="1984:10" pos:end="1984:10">*</modifier></type><name pos:start="1984:11" pos:end="1984:11">p</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1985:5" pos:end="1985:14"><decl pos:start="1985:5" pos:end="1985:13"><type pos:start="1985:5" pos:end="1985:10"><name pos:start="1985:5" pos:end="1985:10">time_t</name></type> <name pos:start="1985:12" pos:end="1985:13">ti</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1986:5" pos:end="1986:15"><decl pos:start="1986:5" pos:end="1986:9"><type pos:start="1986:5" pos:end="1986:7"><name pos:start="1986:5" pos:end="1986:7">int</name></type> <name pos:start="1986:9" pos:end="1986:9">i</name></decl>, <decl pos:start="1986:12" pos:end="1986:14"><type ref="prev" pos:start="1986:5" pos:end="1986:7"/><name pos:start="1986:12" pos:end="1986:14">len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1987:5" pos:end="1987:20"><decl pos:start="1987:5" pos:end="1987:19"><type pos:start="1987:5" pos:end="1987:17"><name pos:start="1987:5" pos:end="1987:15">AVIOContext</name> <modifier pos:start="1987:17" pos:end="1987:17">*</modifier></type><name pos:start="1987:18" pos:end="1987:19">pb</name></decl>;</decl_stmt>

    <if_stmt pos:start="1989:5" pos:end="1994:5"><if pos:start="1989:5" pos:end="1994:5">if <condition pos:start="1989:8" pos:end="1989:35">(<expr pos:start="1989:9" pos:end="1989:34"><call pos:start="1989:9" pos:end="1989:30"><name pos:start="1989:9" pos:end="1989:25">avio_open_dyn_buf</name><argument_list pos:start="1989:26" pos:end="1989:30">(<argument pos:start="1989:27" pos:end="1989:29"><expr pos:start="1989:27" pos:end="1989:29"><operator pos:start="1989:27" pos:end="1989:27">&amp;</operator><name pos:start="1989:28" pos:end="1989:29">pb</name></expr></argument>)</argument_list></call> <operator pos:start="1989:32" pos:end="1989:32">&lt;</operator> <literal type="number" pos:start="1989:34" pos:end="1989:34">0</literal></expr>)</condition> <block pos:start="1989:37" pos:end="1994:5">{<block_content pos:start="1991:9" pos:end="1993:15">
        <comment type="block" pos:start="1990:9" pos:end="1990:36">/* XXX: return an error ? */</comment>
        <expr_stmt pos:start="1991:9" pos:end="1991:34"><expr pos:start="1991:9" pos:end="1991:33"><name pos:start="1991:9" pos:end="1991:21"><name pos:start="1991:9" pos:end="1991:9">c</name><operator pos:start="1991:10" pos:end="1991:11">-&gt;</operator><name pos:start="1991:12" pos:end="1991:21">buffer_ptr</name></name> <operator pos:start="1991:23" pos:end="1991:23">=</operator> <name pos:start="1991:25" pos:end="1991:33"><name pos:start="1991:25" pos:end="1991:25">c</name><operator pos:start="1991:26" pos:end="1991:27">-&gt;</operator><name pos:start="1991:28" pos:end="1991:33">buffer</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="1992:9" pos:end="1992:34"><expr pos:start="1992:9" pos:end="1992:33"><name pos:start="1992:9" pos:end="1992:21"><name pos:start="1992:9" pos:end="1992:9">c</name><operator pos:start="1992:10" pos:end="1992:11">-&gt;</operator><name pos:start="1992:12" pos:end="1992:21">buffer_end</name></name> <operator pos:start="1992:23" pos:end="1992:23">=</operator> <name pos:start="1992:25" pos:end="1992:33"><name pos:start="1992:25" pos:end="1992:25">c</name><operator pos:start="1992:26" pos:end="1992:27">-&gt;</operator><name pos:start="1992:28" pos:end="1992:33">buffer</name></name></expr>;</expr_stmt>
        <return pos:start="1993:9" pos:end="1993:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1996:5" pos:end="1996:43"><expr pos:start="1996:5" pos:end="1996:42"><call pos:start="1996:5" pos:end="1996:42"><name pos:start="1996:5" pos:end="1996:15">avio_printf</name><argument_list pos:start="1996:16" pos:end="1996:42">(<argument pos:start="1996:17" pos:end="1996:18"><expr pos:start="1996:17" pos:end="1996:18"><name pos:start="1996:17" pos:end="1996:18">pb</name></expr></argument>, <argument pos:start="1996:21" pos:end="1996:41"><expr pos:start="1996:21" pos:end="1996:41"><literal type="string" pos:start="1996:21" pos:end="1996:41">"HTTP/1.0 200 OK\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1997:5" pos:end="1997:51"><expr pos:start="1997:5" pos:end="1997:50"><call pos:start="1997:5" pos:end="1997:50"><name pos:start="1997:5" pos:end="1997:15">avio_printf</name><argument_list pos:start="1997:16" pos:end="1997:50">(<argument pos:start="1997:17" pos:end="1997:18"><expr pos:start="1997:17" pos:end="1997:18"><name pos:start="1997:17" pos:end="1997:18">pb</name></expr></argument>, <argument pos:start="1997:21" pos:end="1997:49"><expr pos:start="1997:21" pos:end="1997:49"><literal type="string" pos:start="1997:21" pos:end="1997:49">"Content-type: text/html\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1998:5" pos:end="1998:44"><expr pos:start="1998:5" pos:end="1998:43"><call pos:start="1998:5" pos:end="1998:43"><name pos:start="1998:5" pos:end="1998:15">avio_printf</name><argument_list pos:start="1998:16" pos:end="1998:43">(<argument pos:start="1998:17" pos:end="1998:18"><expr pos:start="1998:17" pos:end="1998:18"><name pos:start="1998:17" pos:end="1998:18">pb</name></expr></argument>, <argument pos:start="1998:21" pos:end="1998:42"><expr pos:start="1998:21" pos:end="1998:42"><literal type="string" pos:start="1998:21" pos:end="1998:42">"Pragma: no-cache\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1999:5" pos:end="1999:28"><expr pos:start="1999:5" pos:end="1999:27"><call pos:start="1999:5" pos:end="1999:27"><name pos:start="1999:5" pos:end="1999:15">avio_printf</name><argument_list pos:start="1999:16" pos:end="1999:27">(<argument pos:start="1999:17" pos:end="1999:18"><expr pos:start="1999:17" pos:end="1999:18"><name pos:start="1999:17" pos:end="1999:18">pb</name></expr></argument>, <argument pos:start="1999:21" pos:end="1999:26"><expr pos:start="1999:21" pos:end="1999:26"><literal type="string" pos:start="1999:21" pos:end="1999:26">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="2001:5" pos:end="2001:41"><expr pos:start="2001:5" pos:end="2001:40"><call pos:start="2001:5" pos:end="2001:40"><name pos:start="2001:5" pos:end="2001:15">avio_printf</name><argument_list pos:start="2001:16" pos:end="2001:40">(<argument pos:start="2001:17" pos:end="2001:18"><expr pos:start="2001:17" pos:end="2001:18"><name pos:start="2001:17" pos:end="2001:18">pb</name></expr></argument>, <argument pos:start="2001:21" pos:end="2001:39"><expr pos:start="2001:21" pos:end="2001:39"><literal type="string" pos:start="2001:21" pos:end="2001:39">"&lt;!DOCTYPE html&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2002:5" pos:end="2002:76"><expr pos:start="2002:5" pos:end="2002:75"><call pos:start="2002:5" pos:end="2002:75"><name pos:start="2002:5" pos:end="2002:15">avio_printf</name><argument_list pos:start="2002:16" pos:end="2002:75">(<argument pos:start="2002:17" pos:end="2002:18"><expr pos:start="2002:17" pos:end="2002:18"><name pos:start="2002:17" pos:end="2002:18">pb</name></expr></argument>, <argument pos:start="2002:21" pos:end="2002:60"><expr pos:start="2002:21" pos:end="2002:60"><literal type="string" pos:start="2002:21" pos:end="2002:60">"&lt;html&gt;&lt;head&gt;&lt;title&gt;%s Status&lt;/title&gt;\n"</literal></expr></argument>, <argument pos:start="2002:63" pos:end="2002:74"><expr pos:start="2002:63" pos:end="2002:74"><name pos:start="2002:63" pos:end="2002:74">program_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="2003:5" pos:end="2005:46"><if pos:start="2003:5" pos:end="2005:46">if <condition pos:start="2003:8" pos:end="2003:36">(<expr pos:start="2003:9" pos:end="2003:35"><name pos:start="2003:9" pos:end="2003:35"><name pos:start="2003:9" pos:end="2003:9">c</name><operator pos:start="2003:10" pos:end="2003:11">-&gt;</operator><name pos:start="2003:12" pos:end="2003:17">stream</name><operator pos:start="2003:18" pos:end="2003:19">-&gt;</operator><name pos:start="2003:20" pos:end="2003:32">feed_filename</name><index pos:start="2003:33" pos:end="2003:35">[<expr pos:start="2003:34" pos:end="2003:34"><literal type="number" pos:start="2003:34" pos:end="2003:34">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="2004:9" pos:end="2005:46"><block_content pos:start="2004:9" pos:end="2005:46">
        <expr_stmt pos:start="2004:9" pos:end="2005:46"><expr pos:start="2004:9" pos:end="2005:45"><call pos:start="2004:9" pos:end="2005:45"><name pos:start="2004:9" pos:end="2004:19">avio_printf</name><argument_list pos:start="2004:20" pos:end="2005:45">(<argument pos:start="2004:21" pos:end="2004:22"><expr pos:start="2004:21" pos:end="2004:22"><name pos:start="2004:21" pos:end="2004:22">pb</name></expr></argument>, <argument pos:start="2004:25" pos:end="2004:68"><expr pos:start="2004:25" pos:end="2004:68"><literal type="string" pos:start="2004:25" pos:end="2004:68">"&lt;link rel=\"shortcut icon\" href=\"%s\"&gt;\n"</literal></expr></argument>,
                    <argument pos:start="2005:21" pos:end="2005:44"><expr pos:start="2005:21" pos:end="2005:44"><name pos:start="2005:21" pos:end="2005:44"><name pos:start="2005:21" pos:end="2005:21">c</name><operator pos:start="2005:22" pos:end="2005:23">-&gt;</operator><name pos:start="2005:24" pos:end="2005:29">stream</name><operator pos:start="2005:30" pos:end="2005:31">-&gt;</operator><name pos:start="2005:32" pos:end="2005:44">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="2006:5" pos:end="2006:39"><expr pos:start="2006:5" pos:end="2006:38"><call pos:start="2006:5" pos:end="2006:38"><name pos:start="2006:5" pos:end="2006:15">avio_printf</name><argument_list pos:start="2006:16" pos:end="2006:38">(<argument pos:start="2006:17" pos:end="2006:18"><expr pos:start="2006:17" pos:end="2006:18"><name pos:start="2006:17" pos:end="2006:18">pb</name></expr></argument>, <argument pos:start="2006:21" pos:end="2006:37"><expr pos:start="2006:21" pos:end="2006:37"><literal type="string" pos:start="2006:21" pos:end="2006:37">"&lt;/head&gt;\n&lt;body&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2007:5" pos:end="2007:58"><expr pos:start="2007:5" pos:end="2007:57"><call pos:start="2007:5" pos:end="2007:57"><name pos:start="2007:5" pos:end="2007:15">avio_printf</name><argument_list pos:start="2007:16" pos:end="2007:57">(<argument pos:start="2007:17" pos:end="2007:18"><expr pos:start="2007:17" pos:end="2007:18"><name pos:start="2007:17" pos:end="2007:18">pb</name></expr></argument>, <argument pos:start="2007:21" pos:end="2007:42"><expr pos:start="2007:21" pos:end="2007:42"><literal type="string" pos:start="2007:21" pos:end="2007:42">"&lt;h1&gt;%s Status&lt;/h1&gt;\n"</literal></expr></argument>, <argument pos:start="2007:45" pos:end="2007:56"><expr pos:start="2007:45" pos:end="2007:56"><name pos:start="2007:45" pos:end="2007:56">program_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="2008:5" pos:end="2008:23">/* format status */</comment>
    <expr_stmt pos:start="2009:5" pos:end="2009:52"><expr pos:start="2009:5" pos:end="2009:51"><call pos:start="2009:5" pos:end="2009:51"><name pos:start="2009:5" pos:end="2009:15">avio_printf</name><argument_list pos:start="2009:16" pos:end="2009:51">(<argument pos:start="2009:17" pos:end="2009:18"><expr pos:start="2009:17" pos:end="2009:18"><name pos:start="2009:17" pos:end="2009:18">pb</name></expr></argument>, <argument pos:start="2009:21" pos:end="2009:50"><expr pos:start="2009:21" pos:end="2009:50"><literal type="string" pos:start="2009:21" pos:end="2009:50">"&lt;h2&gt;Available Streams&lt;/h2&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2010:5" pos:end="2010:33"><expr pos:start="2010:5" pos:end="2010:32"><call pos:start="2010:5" pos:end="2010:32"><name pos:start="2010:5" pos:end="2010:15">avio_printf</name><argument_list pos:start="2010:16" pos:end="2010:32">(<argument pos:start="2010:17" pos:end="2010:18"><expr pos:start="2010:17" pos:end="2010:18"><name pos:start="2010:17" pos:end="2010:18">pb</name></expr></argument>, <argument pos:start="2010:21" pos:end="2010:31"><expr pos:start="2010:21" pos:end="2010:31"><literal type="string" pos:start="2010:21" pos:end="2010:31">"&lt;table&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2011:5" pos:end="2011:174"><expr pos:start="2011:5" pos:end="2011:173"><call pos:start="2011:5" pos:end="2011:173"><name pos:start="2011:5" pos:end="2011:15">avio_printf</name><argument_list pos:start="2011:16" pos:end="2011:173">(<argument pos:start="2011:17" pos:end="2011:18"><expr pos:start="2011:17" pos:end="2011:18"><name pos:start="2011:17" pos:end="2011:18">pb</name></expr></argument>, <argument pos:start="2011:21" pos:end="2011:172"><expr pos:start="2011:21" pos:end="2011:172"><literal type="string" pos:start="2011:21" pos:end="2011:172">"&lt;tr&gt;&lt;th&gt;Path&lt;th&gt;Served&lt;br&gt;Conns&lt;th&gt;&lt;br&gt;bytes&lt;th&gt;Format&lt;th&gt;Bit rate&lt;br&gt;kbit/s&lt;th&gt;Video&lt;br&gt;kbit/s&lt;th&gt;&lt;br&gt;Codec&lt;th&gt;Audio&lt;br&gt;kbit/s&lt;th&gt;&lt;br&gt;Codec&lt;th&gt;Feed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2012:5" pos:end="2012:33"><expr pos:start="2012:5" pos:end="2012:32"><name pos:start="2012:5" pos:end="2012:10">stream</name> <operator pos:start="2012:12" pos:end="2012:12">=</operator> <name pos:start="2012:14" pos:end="2012:32"><name pos:start="2012:14" pos:end="2012:19">config</name><operator pos:start="2012:20" pos:end="2012:20">.</operator><name pos:start="2012:21" pos:end="2012:32">first_stream</name></name></expr>;</expr_stmt>
    <while pos:start="2013:5" pos:end="2110:5">while <condition pos:start="2013:11" pos:end="2013:18">(<expr pos:start="2013:12" pos:end="2013:17"><name pos:start="2013:12" pos:end="2013:17">stream</name></expr>)</condition> <block pos:start="2013:20" pos:end="2110:5">{<block_content pos:start="2014:9" pos:end="2109:30">
        <decl_stmt pos:start="2014:9" pos:end="2014:29"><decl pos:start="2014:9" pos:end="2014:28"><type pos:start="2014:9" pos:end="2014:12"><name pos:start="2014:9" pos:end="2014:12">char</name></type> <name pos:start="2014:14" pos:end="2014:28"><name pos:start="2014:14" pos:end="2014:22">sfilename</name><index pos:start="2014:23" pos:end="2014:28">[<expr pos:start="2014:24" pos:end="2014:27"><literal type="number" pos:start="2014:24" pos:end="2014:27">1024</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="2015:9" pos:end="2015:19"><decl pos:start="2015:9" pos:end="2015:18"><type pos:start="2015:9" pos:end="2015:14"><name pos:start="2015:9" pos:end="2015:12">char</name> <modifier pos:start="2015:14" pos:end="2015:14">*</modifier></type><name pos:start="2015:15" pos:end="2015:18">eosf</name></decl>;</decl_stmt>

        <if_stmt pos:start="2017:9" pos:end="2020:9"><if pos:start="2017:9" pos:end="2020:9">if <condition pos:start="2017:12" pos:end="2017:35">(<expr pos:start="2017:13" pos:end="2017:34"><name pos:start="2017:13" pos:end="2017:24"><name pos:start="2017:13" pos:end="2017:18">stream</name><operator pos:start="2017:19" pos:end="2017:20">-&gt;</operator><name pos:start="2017:21" pos:end="2017:24">feed</name></name> <operator pos:start="2017:26" pos:end="2017:27">==</operator> <name pos:start="2017:29" pos:end="2017:34">stream</name></expr>)</condition> <block pos:start="2017:37" pos:end="2020:9">{<block_content pos:start="2018:13" pos:end="2019:21">
            <expr_stmt pos:start="2018:13" pos:end="2018:34"><expr pos:start="2018:13" pos:end="2018:33"><name pos:start="2018:13" pos:end="2018:18">stream</name> <operator pos:start="2018:20" pos:end="2018:20">=</operator> <name pos:start="2018:22" pos:end="2018:33"><name pos:start="2018:22" pos:end="2018:27">stream</name><operator pos:start="2018:28" pos:end="2018:29">-&gt;</operator><name pos:start="2018:30" pos:end="2018:33">next</name></name></expr>;</expr_stmt>
            <continue pos:start="2019:13" pos:end="2019:21">continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2022:9" pos:end="2022:72"><expr pos:start="2022:9" pos:end="2022:71"><call pos:start="2022:9" pos:end="2022:71"><name pos:start="2022:9" pos:end="2022:18">av_strlcpy</name><argument_list pos:start="2022:19" pos:end="2022:71">(<argument pos:start="2022:20" pos:end="2022:28"><expr pos:start="2022:20" pos:end="2022:28"><name pos:start="2022:20" pos:end="2022:28">sfilename</name></expr></argument>, <argument pos:start="2022:31" pos:end="2022:46"><expr pos:start="2022:31" pos:end="2022:46"><name pos:start="2022:31" pos:end="2022:46"><name pos:start="2022:31" pos:end="2022:36">stream</name><operator pos:start="2022:37" pos:end="2022:38">-&gt;</operator><name pos:start="2022:39" pos:end="2022:46">filename</name></name></expr></argument>, <argument pos:start="2022:49" pos:end="2022:70"><expr pos:start="2022:49" pos:end="2022:70"><sizeof pos:start="2022:49" pos:end="2022:65">sizeof<argument_list pos:start="2022:55" pos:end="2022:65">(<argument pos:start="2022:56" pos:end="2022:64"><expr pos:start="2022:56" pos:end="2022:64"><name pos:start="2022:56" pos:end="2022:64">sfilename</name></expr></argument>)</argument_list></sizeof> <operator pos:start="2022:67" pos:end="2022:67">-</operator> <literal type="number" pos:start="2022:69" pos:end="2022:70">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2023:9" pos:end="2023:45"><expr pos:start="2023:9" pos:end="2023:44"><name pos:start="2023:9" pos:end="2023:12">eosf</name> <operator pos:start="2023:14" pos:end="2023:14">=</operator> <name pos:start="2023:16" pos:end="2023:24">sfilename</name> <operator pos:start="2023:26" pos:end="2023:26">+</operator> <call pos:start="2023:28" pos:end="2023:44"><name pos:start="2023:28" pos:end="2023:33">strlen</name><argument_list pos:start="2023:34" pos:end="2023:44">(<argument pos:start="2023:35" pos:end="2023:43"><expr pos:start="2023:35" pos:end="2023:43"><name pos:start="2023:35" pos:end="2023:43">sfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2024:9" pos:end="2042:9"><if pos:start="2024:9" pos:end="2042:9">if <condition pos:start="2024:12" pos:end="2024:34">(<expr pos:start="2024:13" pos:end="2024:33"><name pos:start="2024:13" pos:end="2024:16">eosf</name> <operator pos:start="2024:18" pos:end="2024:18">-</operator> <name pos:start="2024:20" pos:end="2024:28">sfilename</name> <operator pos:start="2024:30" pos:end="2024:31">&gt;=</operator> <literal type="number" pos:start="2024:33" pos:end="2024:33">4</literal></expr>)</condition> <block pos:start="2024:36" pos:end="2042:9">{<block_content pos:start="2025:13" pos:end="2041:14">
            <if_stmt pos:start="2025:13" pos:end="2041:14"><if pos:start="2025:13" pos:end="2026:41">if <condition pos:start="2025:16" pos:end="2025:46">(<expr pos:start="2025:17" pos:end="2025:45"><call pos:start="2025:17" pos:end="2025:40"><name pos:start="2025:17" pos:end="2025:22">strcmp</name><argument_list pos:start="2025:23" pos:end="2025:40">(<argument pos:start="2025:24" pos:end="2025:31"><expr pos:start="2025:24" pos:end="2025:31"><name pos:start="2025:24" pos:end="2025:27">eosf</name> <operator pos:start="2025:29" pos:end="2025:29">-</operator> <literal type="number" pos:start="2025:31" pos:end="2025:31">4</literal></expr></argument>, <argument pos:start="2025:34" pos:end="2025:39"><expr pos:start="2025:34" pos:end="2025:39"><literal type="string" pos:start="2025:34" pos:end="2025:39">".asf"</literal></expr></argument>)</argument_list></call> <operator pos:start="2025:42" pos:end="2025:43">==</operator> <literal type="number" pos:start="2025:45" pos:end="2025:45">0</literal></expr>)</condition><block type="pseudo" pos:start="2026:17" pos:end="2026:41"><block_content pos:start="2026:17" pos:end="2026:41">
                <expr_stmt pos:start="2026:17" pos:end="2026:41"><expr pos:start="2026:17" pos:end="2026:40"><call pos:start="2026:17" pos:end="2026:40"><name pos:start="2026:17" pos:end="2026:22">strcpy</name><argument_list pos:start="2026:23" pos:end="2026:40">(<argument pos:start="2026:24" pos:end="2026:31"><expr pos:start="2026:24" pos:end="2026:31"><name pos:start="2026:24" pos:end="2026:27">eosf</name> <operator pos:start="2026:29" pos:end="2026:29">-</operator> <literal type="number" pos:start="2026:31" pos:end="2026:31">4</literal></expr></argument>, <argument pos:start="2026:34" pos:end="2026:39"><expr pos:start="2026:34" pos:end="2026:39"><literal type="string" pos:start="2026:34" pos:end="2026:39">".asx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif" pos:start="2027:13" pos:end="2028:41">else if <condition pos:start="2027:21" pos:end="2027:50">(<expr pos:start="2027:22" pos:end="2027:49"><call pos:start="2027:22" pos:end="2027:44"><name pos:start="2027:22" pos:end="2027:27">strcmp</name><argument_list pos:start="2027:28" pos:end="2027:44">(<argument pos:start="2027:29" pos:end="2027:36"><expr pos:start="2027:29" pos:end="2027:36"><name pos:start="2027:29" pos:end="2027:32">eosf</name> <operator pos:start="2027:34" pos:end="2027:34">-</operator> <literal type="number" pos:start="2027:36" pos:end="2027:36">3</literal></expr></argument>, <argument pos:start="2027:39" pos:end="2027:43"><expr pos:start="2027:39" pos:end="2027:43"><literal type="string" pos:start="2027:39" pos:end="2027:43">".rm"</literal></expr></argument>)</argument_list></call> <operator pos:start="2027:46" pos:end="2027:47">==</operator> <literal type="number" pos:start="2027:49" pos:end="2027:49">0</literal></expr>)</condition><block type="pseudo" pos:start="2028:17" pos:end="2028:41"><block_content pos:start="2028:17" pos:end="2028:41">
                <expr_stmt pos:start="2028:17" pos:end="2028:41"><expr pos:start="2028:17" pos:end="2028:40"><call pos:start="2028:17" pos:end="2028:40"><name pos:start="2028:17" pos:end="2028:22">strcpy</name><argument_list pos:start="2028:23" pos:end="2028:40">(<argument pos:start="2028:24" pos:end="2028:31"><expr pos:start="2028:24" pos:end="2028:31"><name pos:start="2028:24" pos:end="2028:27">eosf</name> <operator pos:start="2028:29" pos:end="2028:29">-</operator> <literal type="number" pos:start="2028:31" pos:end="2028:31">3</literal></expr></argument>, <argument pos:start="2028:34" pos:end="2028:39"><expr pos:start="2028:34" pos:end="2028:39"><literal type="string" pos:start="2028:34" pos:end="2028:39">".ram"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif" pos:start="2029:13" pos:end="2041:14">else if <condition pos:start="2029:21" pos:end="2029:34">(<expr pos:start="2029:22" pos:end="2029:32"><name pos:start="2029:22" pos:end="2029:32"><name pos:start="2029:22" pos:end="2029:27">stream</name><operator pos:start="2029:28" pos:end="2029:29">-&gt;</operator><name pos:start="2029:30" pos:end="2029:32">fmt</name></name></expr> )</condition><block pos:start="2029:35" pos:end="2041:14">{<block_content pos:start="2030:1" pos:end="2041:13">
<if_stmt pos:start="2030:1" pos:end="2041:13"><if pos:start="2030:1" pos:end="2041:13">if<condition pos:start="2030:3" pos:end="2030:38">( <expr pos:start="2030:5" pos:end="2030:37"><operator pos:start="2030:5" pos:end="2030:5">!</operator><call pos:start="2030:6" pos:end="2030:37"><name pos:start="2030:6" pos:end="2030:11">strcmp</name><argument_list pos:start="2030:12" pos:end="2030:37">(<argument pos:start="2030:13" pos:end="2030:29"><expr pos:start="2030:13" pos:end="2030:29"><name pos:start="2030:13" pos:end="2030:29"><name pos:start="2030:13" pos:end="2030:18">stream</name><operator pos:start="2030:19" pos:end="2030:20">-&gt;</operator><name pos:start="2030:21" pos:end="2030:23">fmt</name><operator pos:start="2030:24" pos:end="2030:25">-&gt;</operator><name pos:start="2030:26" pos:end="2030:29">name</name></name></expr></argument>, <argument pos:start="2030:32" pos:end="2030:36"><expr pos:start="2030:32" pos:end="2030:36"><literal type="string" pos:start="2030:32" pos:end="2030:36">"rtp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2030:40" pos:end="2041:13">{<block_content pos:start="2034:17" pos:end="2040:42">
                <comment type="block" pos:start="2031:17" pos:end="2033:31">/* generate a sample RTSP director if
                 * unicast. Generate an SDP redirector if
                 * multicast */</comment>
                <expr_stmt pos:start="2034:17" pos:end="2034:47"><expr pos:start="2034:17" pos:end="2034:46"><name pos:start="2034:17" pos:end="2034:20">eosf</name> <operator pos:start="2034:22" pos:end="2034:22">=</operator> <call pos:start="2034:24" pos:end="2034:46"><name pos:start="2034:24" pos:end="2034:30">strrchr</name><argument_list pos:start="2034:31" pos:end="2034:46">(<argument pos:start="2034:32" pos:end="2034:40"><expr pos:start="2034:32" pos:end="2034:40"><name pos:start="2034:32" pos:end="2034:40">sfilename</name></expr></argument>, <argument pos:start="2034:43" pos:end="2034:45"><expr pos:start="2034:43" pos:end="2034:45"><literal type="char" pos:start="2034:43" pos:end="2034:45">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="2035:17" pos:end="2036:57"><if pos:start="2035:17" pos:end="2036:57">if <condition pos:start="2035:20" pos:end="2035:26">(<expr pos:start="2035:21" pos:end="2035:25"><operator pos:start="2035:21" pos:end="2035:21">!</operator><name pos:start="2035:22" pos:end="2035:25">eosf</name></expr>)</condition><block type="pseudo" pos:start="2036:21" pos:end="2036:57"><block_content pos:start="2036:21" pos:end="2036:57">
                    <expr_stmt pos:start="2036:21" pos:end="2036:57"><expr pos:start="2036:21" pos:end="2036:56"><name pos:start="2036:21" pos:end="2036:24">eosf</name> <operator pos:start="2036:26" pos:end="2036:26">=</operator> <name pos:start="2036:28" pos:end="2036:36">sfilename</name> <operator pos:start="2036:38" pos:end="2036:38">+</operator> <call pos:start="2036:40" pos:end="2036:56"><name pos:start="2036:40" pos:end="2036:45">strlen</name><argument_list pos:start="2036:46" pos:end="2036:56">(<argument pos:start="2036:47" pos:end="2036:55"><expr pos:start="2036:47" pos:end="2036:55"><name pos:start="2036:47" pos:end="2036:55">sfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt pos:start="2037:17" pos:end="2040:42"><if pos:start="2037:17" pos:end="2038:41">if <condition pos:start="2037:20" pos:end="2037:41">(<expr pos:start="2037:21" pos:end="2037:40"><name pos:start="2037:21" pos:end="2037:40"><name pos:start="2037:21" pos:end="2037:26">stream</name><operator pos:start="2037:27" pos:end="2037:28">-&gt;</operator><name pos:start="2037:29" pos:end="2037:40">is_multicast</name></name></expr>)</condition><block type="pseudo" pos:start="2038:21" pos:end="2038:41"><block_content pos:start="2038:21" pos:end="2038:41">
                    <expr_stmt pos:start="2038:21" pos:end="2038:41"><expr pos:start="2038:21" pos:end="2038:40"><call pos:start="2038:21" pos:end="2038:40"><name pos:start="2038:21" pos:end="2038:26">strcpy</name><argument_list pos:start="2038:27" pos:end="2038:40">(<argument pos:start="2038:28" pos:end="2038:31"><expr pos:start="2038:28" pos:end="2038:31"><name pos:start="2038:28" pos:end="2038:31">eosf</name></expr></argument>, <argument pos:start="2038:34" pos:end="2038:39"><expr pos:start="2038:34" pos:end="2038:39"><literal type="string" pos:start="2038:34" pos:end="2038:39">".sdp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else pos:start="2039:17" pos:end="2040:42">else<block type="pseudo" pos:start="2040:21" pos:end="2040:42"><block_content pos:start="2040:21" pos:end="2040:42">
                    <expr_stmt pos:start="2040:21" pos:end="2040:42"><expr pos:start="2040:21" pos:end="2040:41"><call pos:start="2040:21" pos:end="2040:41"><name pos:start="2040:21" pos:end="2040:26">strcpy</name><argument_list pos:start="2040:27" pos:end="2040:41">(<argument pos:start="2040:28" pos:end="2040:31"><expr pos:start="2040:28" pos:end="2040:31"><name pos:start="2040:28" pos:end="2040:31">eosf</name></expr></argument>, <argument pos:start="2040:34" pos:end="2040:40"><expr pos:start="2040:34" pos:end="2040:40"><literal type="string" pos:start="2040:34" pos:end="2040:40">".rtsp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2044:9" pos:end="2045:49"><expr pos:start="2044:9" pos:end="2045:48"><call pos:start="2044:9" pos:end="2045:48"><name pos:start="2044:9" pos:end="2044:19">avio_printf</name><argument_list pos:start="2044:20" pos:end="2045:48">(<argument pos:start="2044:21" pos:end="2044:22"><expr pos:start="2044:21" pos:end="2044:22"><name pos:start="2044:21" pos:end="2044:22">pb</name></expr></argument>, <argument pos:start="2044:25" pos:end="2044:57"><expr pos:start="2044:25" pos:end="2044:57"><literal type="string" pos:start="2044:25" pos:end="2044:57">"&lt;tr&gt;&lt;td&gt;&lt;a href=\"/%s\"&gt;%s&lt;/a&gt; "</literal></expr></argument>,
                    <argument pos:start="2045:21" pos:end="2045:29"><expr pos:start="2045:21" pos:end="2045:29"><name pos:start="2045:21" pos:end="2045:29">sfilename</name></expr></argument>, <argument pos:start="2045:32" pos:end="2045:47"><expr pos:start="2045:32" pos:end="2045:47"><name pos:start="2045:32" pos:end="2045:47"><name pos:start="2045:32" pos:end="2045:37">stream</name><operator pos:start="2045:38" pos:end="2045:39">-&gt;</operator><name pos:start="2045:40" pos:end="2045:47">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2046:9" pos:end="2047:42"><expr pos:start="2046:9" pos:end="2047:41"><call pos:start="2046:9" pos:end="2047:41"><name pos:start="2046:9" pos:end="2046:19">avio_printf</name><argument_list pos:start="2046:20" pos:end="2047:41">(<argument pos:start="2046:21" pos:end="2046:22"><expr pos:start="2046:21" pos:end="2046:22"><name pos:start="2046:21" pos:end="2046:22">pb</name></expr></argument>, <argument pos:start="2046:25" pos:end="2046:39"><expr pos:start="2046:25" pos:end="2046:39"><literal type="string" pos:start="2046:25" pos:end="2046:39">"&lt;td&gt; %d &lt;td&gt; "</literal></expr></argument>,
                    <argument pos:start="2047:21" pos:end="2047:40"><expr pos:start="2047:21" pos:end="2047:40"><name pos:start="2047:21" pos:end="2047:40"><name pos:start="2047:21" pos:end="2047:26">stream</name><operator pos:start="2047:27" pos:end="2047:28">-&gt;</operator><name pos:start="2047:29" pos:end="2047:40">conns_served</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line" pos:start="2048:9" pos:end="2048:103">// TODO: Investigate if we can make http bitexact so it always produces the same count of bytes</comment>
        <if_stmt pos:start="2049:9" pos:end="2050:52"><if pos:start="2049:9" pos:end="2050:52">if <condition pos:start="2049:12" pos:end="2049:29">(<expr pos:start="2049:13" pos:end="2049:28"><operator pos:start="2049:13" pos:end="2049:13">!</operator><name pos:start="2049:14" pos:end="2049:28"><name pos:start="2049:14" pos:end="2049:19">config</name><operator pos:start="2049:20" pos:end="2049:20">.</operator><name pos:start="2049:21" pos:end="2049:28">bitexact</name></name></expr>)</condition><block type="pseudo" pos:start="2050:13" pos:end="2050:52"><block_content pos:start="2050:13" pos:end="2050:52">
            <expr_stmt pos:start="2050:13" pos:end="2050:52"><expr pos:start="2050:13" pos:end="2050:51"><call pos:start="2050:13" pos:end="2050:51"><name pos:start="2050:13" pos:end="2050:25">fmt_bytecount</name><argument_list pos:start="2050:26" pos:end="2050:51">(<argument pos:start="2050:27" pos:end="2050:28"><expr pos:start="2050:27" pos:end="2050:28"><name pos:start="2050:27" pos:end="2050:28">pb</name></expr></argument>, <argument pos:start="2050:31" pos:end="2050:50"><expr pos:start="2050:31" pos:end="2050:50"><name pos:start="2050:31" pos:end="2050:50"><name pos:start="2050:31" pos:end="2050:36">stream</name><operator pos:start="2050:37" pos:end="2050:38">-&gt;</operator><name pos:start="2050:39" pos:end="2050:50">bytes_served</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <switch pos:start="2052:9" pos:end="2108:9">switch<condition pos:start="2052:15" pos:end="2052:35">(<expr pos:start="2052:16" pos:end="2052:34"><name pos:start="2052:16" pos:end="2052:34"><name pos:start="2052:16" pos:end="2052:21">stream</name><operator pos:start="2052:22" pos:end="2052:23">-&gt;</operator><name pos:start="2052:24" pos:end="2052:34">stream_type</name></name></expr>)</condition> <block pos:start="2052:37" pos:end="2108:9">{<block_content pos:start="2053:9" pos:end="2107:18">
        <case pos:start="2053:9" pos:end="2053:30">case <expr pos:start="2053:14" pos:end="2053:29"><name pos:start="2053:14" pos:end="2053:29">STREAM_TYPE_LIVE</name></expr>:</case> <block pos:start="2053:32" pos:end="2102:9">{<block_content pos:start="2054:13" pos:end="2101:34">
            <decl_stmt pos:start="2054:13" pos:end="2054:35"><decl pos:start="2054:13" pos:end="2054:34"><type pos:start="2054:13" pos:end="2054:15"><name pos:start="2054:13" pos:end="2054:15">int</name></type> <name pos:start="2054:17" pos:end="2054:30">audio_bit_rate</name> <init pos:start="2054:32" pos:end="2054:34">= <expr pos:start="2054:34" pos:end="2054:34"><literal type="number" pos:start="2054:34" pos:end="2054:34">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="2055:13" pos:end="2055:35"><decl pos:start="2055:13" pos:end="2055:34"><type pos:start="2055:13" pos:end="2055:15"><name pos:start="2055:13" pos:end="2055:15">int</name></type> <name pos:start="2055:17" pos:end="2055:30">video_bit_rate</name> <init pos:start="2055:32" pos:end="2055:34">= <expr pos:start="2055:34" pos:end="2055:34"><literal type="number" pos:start="2055:34" pos:end="2055:34">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="2056:13" pos:end="2056:46"><decl pos:start="2056:13" pos:end="2056:45"><type pos:start="2056:13" pos:end="2056:24"><specifier pos:start="2056:13" pos:end="2056:17">const</specifier> <name pos:start="2056:19" pos:end="2056:22">char</name> <modifier pos:start="2056:24" pos:end="2056:24">*</modifier></type><name pos:start="2056:25" pos:end="2056:40">audio_codec_name</name> <init pos:start="2056:42" pos:end="2056:45">= <expr pos:start="2056:44" pos:end="2056:45"><literal type="string" pos:start="2056:44" pos:end="2056:45">""</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="2057:13" pos:end="2057:46"><decl pos:start="2057:13" pos:end="2057:45"><type pos:start="2057:13" pos:end="2057:24"><specifier pos:start="2057:13" pos:end="2057:17">const</specifier> <name pos:start="2057:19" pos:end="2057:22">char</name> <modifier pos:start="2057:24" pos:end="2057:24">*</modifier></type><name pos:start="2057:25" pos:end="2057:40">video_codec_name</name> <init pos:start="2057:42" pos:end="2057:45">= <expr pos:start="2057:44" pos:end="2057:45"><literal type="string" pos:start="2057:44" pos:end="2057:45">""</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="2058:13" pos:end="2058:52"><decl pos:start="2058:13" pos:end="2058:51"><type pos:start="2058:13" pos:end="2058:24"><specifier pos:start="2058:13" pos:end="2058:17">const</specifier> <name pos:start="2058:19" pos:end="2058:22">char</name> <modifier pos:start="2058:24" pos:end="2058:24">*</modifier></type><name pos:start="2058:25" pos:end="2058:46">audio_codec_name_extra</name> <init pos:start="2058:48" pos:end="2058:51">= <expr pos:start="2058:50" pos:end="2058:51"><literal type="string" pos:start="2058:50" pos:end="2058:51">""</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="2059:13" pos:end="2059:52"><decl pos:start="2059:13" pos:end="2059:51"><type pos:start="2059:13" pos:end="2059:24"><specifier pos:start="2059:13" pos:end="2059:17">const</specifier> <name pos:start="2059:19" pos:end="2059:22">char</name> <modifier pos:start="2059:24" pos:end="2059:24">*</modifier></type><name pos:start="2059:25" pos:end="2059:46">video_codec_name_extra</name> <init pos:start="2059:48" pos:end="2059:51">= <expr pos:start="2059:50" pos:end="2059:51"><literal type="string" pos:start="2059:50" pos:end="2059:51">""</literal></expr></init></decl>;</decl_stmt>

            <for pos:start="2061:13" pos:end="2088:13">for<control pos:start="2061:16" pos:end="2061:45">(<init pos:start="2061:17" pos:end="2061:20"><expr pos:start="2061:17" pos:end="2061:19"><name pos:start="2061:17" pos:end="2061:17">i</name><operator pos:start="2061:18" pos:end="2061:18">=</operator><literal type="number" pos:start="2061:19" pos:end="2061:19">0</literal></expr>;</init><condition pos:start="2061:21" pos:end="2061:41"><expr pos:start="2061:21" pos:end="2061:40"><name pos:start="2061:21" pos:end="2061:21">i</name><operator pos:start="2061:22" pos:end="2061:22">&lt;</operator><name pos:start="2061:23" pos:end="2061:40"><name pos:start="2061:23" pos:end="2061:28">stream</name><operator pos:start="2061:29" pos:end="2061:30">-&gt;</operator><name pos:start="2061:31" pos:end="2061:40">nb_streams</name></name></expr>;</condition><incr pos:start="2061:42" pos:end="2061:44"><expr pos:start="2061:42" pos:end="2061:44"><name pos:start="2061:42" pos:end="2061:42">i</name><operator pos:start="2061:43" pos:end="2061:44">++</operator></expr></incr>)</control> <block pos:start="2061:47" pos:end="2088:13">{<block_content pos:start="2062:17" pos:end="2087:17">
                <decl_stmt pos:start="2062:17" pos:end="2062:57"><decl pos:start="2062:17" pos:end="2062:56"><type pos:start="2062:17" pos:end="2062:33"><name pos:start="2062:17" pos:end="2062:31">LayeredAVStream</name> <modifier pos:start="2062:33" pos:end="2062:33">*</modifier></type><name pos:start="2062:34" pos:end="2062:35">st</name> <init pos:start="2062:37" pos:end="2062:56">= <expr pos:start="2062:39" pos:end="2062:56"><name pos:start="2062:39" pos:end="2062:56"><name pos:start="2062:39" pos:end="2062:44">stream</name><operator pos:start="2062:45" pos:end="2062:46">-&gt;</operator><name pos:start="2062:47" pos:end="2062:53">streams</name><index pos:start="2062:54" pos:end="2062:56">[<expr pos:start="2062:55" pos:end="2062:55"><name pos:start="2062:55" pos:end="2062:55">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt pos:start="2063:17" pos:end="2063:78"><decl pos:start="2063:17" pos:end="2063:77"><type pos:start="2063:17" pos:end="2063:25"><name pos:start="2063:17" pos:end="2063:23">AVCodec</name> <modifier pos:start="2063:25" pos:end="2063:25">*</modifier></type><name pos:start="2063:26" pos:end="2063:30">codec</name> <init pos:start="2063:32" pos:end="2063:77">= <expr pos:start="2063:34" pos:end="2063:77"><call pos:start="2063:34" pos:end="2063:77"><name pos:start="2063:34" pos:end="2063:53">avcodec_find_encoder</name><argument_list pos:start="2063:54" pos:end="2063:77">(<argument pos:start="2063:55" pos:end="2063:76"><expr pos:start="2063:55" pos:end="2063:76"><name pos:start="2063:55" pos:end="2063:76"><name pos:start="2063:55" pos:end="2063:56">st</name><operator pos:start="2063:57" pos:end="2063:58">-&gt;</operator><name pos:start="2063:59" pos:end="2063:66">codecpar</name><operator pos:start="2063:67" pos:end="2063:68">-&gt;</operator><name pos:start="2063:69" pos:end="2063:76">codec_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <switch pos:start="2065:17" pos:end="2087:17">switch<condition pos:start="2065:23" pos:end="2065:48">(<expr pos:start="2065:24" pos:end="2065:47"><name pos:start="2065:24" pos:end="2065:47"><name pos:start="2065:24" pos:end="2065:25">st</name><operator pos:start="2065:26" pos:end="2065:27">-&gt;</operator><name pos:start="2065:28" pos:end="2065:35">codecpar</name><operator pos:start="2065:36" pos:end="2065:37">-&gt;</operator><name pos:start="2065:38" pos:end="2065:47">codec_type</name></name></expr>)</condition> <block pos:start="2065:50" pos:end="2087:17">{<block_content pos:start="2066:17" pos:end="2086:28">
                <case pos:start="2066:17" pos:end="2066:40">case <expr pos:start="2066:22" pos:end="2066:39"><name pos:start="2066:22" pos:end="2066:39">AVMEDIA_TYPE_AUDIO</name></expr>:</case>
                    <expr_stmt pos:start="2067:21" pos:end="2067:61"><expr pos:start="2067:21" pos:end="2067:60"><name pos:start="2067:21" pos:end="2067:34">audio_bit_rate</name> <operator pos:start="2067:36" pos:end="2067:37">+=</operator> <name pos:start="2067:39" pos:end="2067:60"><name pos:start="2067:39" pos:end="2067:40">st</name><operator pos:start="2067:41" pos:end="2067:42">-&gt;</operator><name pos:start="2067:43" pos:end="2067:50">codecpar</name><operator pos:start="2067:51" pos:end="2067:52">-&gt;</operator><name pos:start="2067:53" pos:end="2067:60">bit_rate</name></name></expr>;</expr_stmt>
                    <if_stmt pos:start="2068:21" pos:end="2072:21"><if pos:start="2068:21" pos:end="2072:21">if <condition pos:start="2068:24" pos:end="2068:30">(<expr pos:start="2068:25" pos:end="2068:29"><name pos:start="2068:25" pos:end="2068:29">codec</name></expr>)</condition> <block pos:start="2068:32" pos:end="2072:21">{<block_content pos:start="2069:25" pos:end="2071:55">
                        <if_stmt pos:start="2069:25" pos:end="2070:59"><if pos:start="2069:25" pos:end="2070:59">if <condition pos:start="2069:28" pos:end="2069:46">(<expr pos:start="2069:29" pos:end="2069:45"><operator pos:start="2069:29" pos:end="2069:29">*</operator><name pos:start="2069:30" pos:end="2069:45">audio_codec_name</name></expr>)</condition><block type="pseudo" pos:start="2070:29" pos:end="2070:59"><block_content pos:start="2070:29" pos:end="2070:59">
                            <expr_stmt pos:start="2070:29" pos:end="2070:59"><expr pos:start="2070:29" pos:end="2070:58"><name pos:start="2070:29" pos:end="2070:50">audio_codec_name_extra</name> <operator pos:start="2070:52" pos:end="2070:52">=</operator> <literal type="string" pos:start="2070:54" pos:end="2070:58">"..."</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                        <expr_stmt pos:start="2071:25" pos:end="2071:55"><expr pos:start="2071:25" pos:end="2071:54"><name pos:start="2071:25" pos:end="2071:40">audio_codec_name</name> <operator pos:start="2071:42" pos:end="2071:42">=</operator> <name pos:start="2071:44" pos:end="2071:54"><name pos:start="2071:44" pos:end="2071:48">codec</name><operator pos:start="2071:49" pos:end="2071:50">-&gt;</operator><name pos:start="2071:51" pos:end="2071:54">name</name></name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <break pos:start="2073:21" pos:end="2073:26">break;</break>
                <case pos:start="2074:17" pos:end="2074:40">case <expr pos:start="2074:22" pos:end="2074:39"><name pos:start="2074:22" pos:end="2074:39">AVMEDIA_TYPE_VIDEO</name></expr>:</case>
                    <expr_stmt pos:start="2075:21" pos:end="2075:61"><expr pos:start="2075:21" pos:end="2075:60"><name pos:start="2075:21" pos:end="2075:34">video_bit_rate</name> <operator pos:start="2075:36" pos:end="2075:37">+=</operator> <name pos:start="2075:39" pos:end="2075:60"><name pos:start="2075:39" pos:end="2075:40">st</name><operator pos:start="2075:41" pos:end="2075:42">-&gt;</operator><name pos:start="2075:43" pos:end="2075:50">codecpar</name><operator pos:start="2075:51" pos:end="2075:52">-&gt;</operator><name pos:start="2075:53" pos:end="2075:60">bit_rate</name></name></expr>;</expr_stmt>
                    <if_stmt pos:start="2076:21" pos:end="2080:21"><if pos:start="2076:21" pos:end="2080:21">if <condition pos:start="2076:24" pos:end="2076:30">(<expr pos:start="2076:25" pos:end="2076:29"><name pos:start="2076:25" pos:end="2076:29">codec</name></expr>)</condition> <block pos:start="2076:32" pos:end="2080:21">{<block_content pos:start="2077:25" pos:end="2079:55">
                        <if_stmt pos:start="2077:25" pos:end="2078:59"><if pos:start="2077:25" pos:end="2078:59">if <condition pos:start="2077:28" pos:end="2077:46">(<expr pos:start="2077:29" pos:end="2077:45"><operator pos:start="2077:29" pos:end="2077:29">*</operator><name pos:start="2077:30" pos:end="2077:45">video_codec_name</name></expr>)</condition><block type="pseudo" pos:start="2078:29" pos:end="2078:59"><block_content pos:start="2078:29" pos:end="2078:59">
                            <expr_stmt pos:start="2078:29" pos:end="2078:59"><expr pos:start="2078:29" pos:end="2078:58"><name pos:start="2078:29" pos:end="2078:50">video_codec_name_extra</name> <operator pos:start="2078:52" pos:end="2078:52">=</operator> <literal type="string" pos:start="2078:54" pos:end="2078:58">"..."</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                        <expr_stmt pos:start="2079:25" pos:end="2079:55"><expr pos:start="2079:25" pos:end="2079:54"><name pos:start="2079:25" pos:end="2079:40">video_codec_name</name> <operator pos:start="2079:42" pos:end="2079:42">=</operator> <name pos:start="2079:44" pos:end="2079:54"><name pos:start="2079:44" pos:end="2079:48">codec</name><operator pos:start="2079:49" pos:end="2079:50">-&gt;</operator><name pos:start="2079:51" pos:end="2079:54">name</name></name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <break pos:start="2081:21" pos:end="2081:26">break;</break>
                <case pos:start="2082:17" pos:end="2082:39">case <expr pos:start="2082:22" pos:end="2082:38"><name pos:start="2082:22" pos:end="2082:38">AVMEDIA_TYPE_DATA</name></expr>:</case>
                    <expr_stmt pos:start="2083:21" pos:end="2083:61"><expr pos:start="2083:21" pos:end="2083:60"><name pos:start="2083:21" pos:end="2083:34">video_bit_rate</name> <operator pos:start="2083:36" pos:end="2083:37">+=</operator> <name pos:start="2083:39" pos:end="2083:60"><name pos:start="2083:39" pos:end="2083:40">st</name><operator pos:start="2083:41" pos:end="2083:42">-&gt;</operator><name pos:start="2083:43" pos:end="2083:50">codecpar</name><operator pos:start="2083:51" pos:end="2083:52">-&gt;</operator><name pos:start="2083:53" pos:end="2083:60">bit_rate</name></name></expr>;</expr_stmt>
                    <break pos:start="2084:21" pos:end="2084:26">break;</break>
                <default pos:start="2085:17" pos:end="2085:24">default:</default>
                    <expr_stmt pos:start="2086:21" pos:end="2086:28"><expr pos:start="2086:21" pos:end="2086:27"><call pos:start="2086:21" pos:end="2086:27"><name pos:start="2086:21" pos:end="2086:25">abort</name><argument_list pos:start="2086:26" pos:end="2086:27">()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></switch>
            </block_content>}</block></for>

            <expr_stmt pos:start="2090:13" pos:end="2095:66"><expr pos:start="2090:13" pos:end="2095:65"><call pos:start="2090:13" pos:end="2095:65"><name pos:start="2090:13" pos:end="2090:23">avio_printf</name><argument_list pos:start="2090:24" pos:end="2095:65">(<argument pos:start="2090:25" pos:end="2090:26"><expr pos:start="2090:25" pos:end="2090:26"><name pos:start="2090:25" pos:end="2090:26">pb</name></expr></argument>, <argument pos:start="2090:29" pos:end="2091:43"><expr pos:start="2090:29" pos:end="2091:43"><literal type="string" pos:start="2090:29" pos:end="2090:70">"&lt;td&gt; %s &lt;td&gt; %d &lt;td&gt; %d &lt;td&gt; %s %s &lt;td&gt; "</literal>
                            <literal type="string" pos:start="2091:29" pos:end="2091:43">"%d &lt;td&gt; %s %s"</literal></expr></argument>,
                        <argument pos:start="2092:25" pos:end="2092:41"><expr pos:start="2092:25" pos:end="2092:41"><name pos:start="2092:25" pos:end="2092:41"><name pos:start="2092:25" pos:end="2092:30">stream</name><operator pos:start="2092:31" pos:end="2092:32">-&gt;</operator><name pos:start="2092:33" pos:end="2092:35">fmt</name><operator pos:start="2092:36" pos:end="2092:37">-&gt;</operator><name pos:start="2092:38" pos:end="2092:41">name</name></name></expr></argument>, <argument pos:start="2092:44" pos:end="2092:60"><expr pos:start="2092:44" pos:end="2092:60"><name pos:start="2092:44" pos:end="2092:60"><name pos:start="2092:44" pos:end="2092:49">stream</name><operator pos:start="2092:50" pos:end="2092:51">-&gt;</operator><name pos:start="2092:52" pos:end="2092:60">bandwidth</name></name></expr></argument>,
                        <argument pos:start="2093:25" pos:end="2093:45"><expr pos:start="2093:25" pos:end="2093:45"><name pos:start="2093:25" pos:end="2093:38">video_bit_rate</name> <operator pos:start="2093:40" pos:end="2093:40">/</operator> <literal type="number" pos:start="2093:42" pos:end="2093:45">1000</literal></expr></argument>, <argument pos:start="2093:48" pos:end="2093:63"><expr pos:start="2093:48" pos:end="2093:63"><name pos:start="2093:48" pos:end="2093:63">video_codec_name</name></expr></argument>,
                        <argument pos:start="2094:25" pos:end="2094:46"><expr pos:start="2094:25" pos:end="2094:46"><name pos:start="2094:25" pos:end="2094:46">video_codec_name_extra</name></expr></argument>, <argument pos:start="2094:49" pos:end="2094:69"><expr pos:start="2094:49" pos:end="2094:69"><name pos:start="2094:49" pos:end="2094:62">audio_bit_rate</name> <operator pos:start="2094:64" pos:end="2094:64">/</operator> <literal type="number" pos:start="2094:66" pos:end="2094:69">1000</literal></expr></argument>,
                        <argument pos:start="2095:25" pos:end="2095:40"><expr pos:start="2095:25" pos:end="2095:40"><name pos:start="2095:25" pos:end="2095:40">audio_codec_name</name></expr></argument>, <argument pos:start="2095:43" pos:end="2095:64"><expr pos:start="2095:43" pos:end="2095:64"><name pos:start="2095:43" pos:end="2095:64">audio_codec_name_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2097:13" pos:end="2100:65"><if pos:start="2097:13" pos:end="2098:66">if <condition pos:start="2097:16" pos:end="2097:29">(<expr pos:start="2097:17" pos:end="2097:28"><name pos:start="2097:17" pos:end="2097:28"><name pos:start="2097:17" pos:end="2097:22">stream</name><operator pos:start="2097:23" pos:end="2097:24">-&gt;</operator><name pos:start="2097:25" pos:end="2097:28">feed</name></name></expr>)</condition><block type="pseudo" pos:start="2098:17" pos:end="2098:66"><block_content pos:start="2098:17" pos:end="2098:66">
                <expr_stmt pos:start="2098:17" pos:end="2098:66"><expr pos:start="2098:17" pos:end="2098:65"><call pos:start="2098:17" pos:end="2098:65"><name pos:start="2098:17" pos:end="2098:27">avio_printf</name><argument_list pos:start="2098:28" pos:end="2098:65">(<argument pos:start="2098:29" pos:end="2098:30"><expr pos:start="2098:29" pos:end="2098:30"><name pos:start="2098:29" pos:end="2098:30">pb</name></expr></argument>, <argument pos:start="2098:33" pos:end="2098:40"><expr pos:start="2098:33" pos:end="2098:40"><literal type="string" pos:start="2098:33" pos:end="2098:40">"&lt;td&gt;%s"</literal></expr></argument>, <argument pos:start="2098:43" pos:end="2098:64"><expr pos:start="2098:43" pos:end="2098:64"><name pos:start="2098:43" pos:end="2098:64"><name pos:start="2098:43" pos:end="2098:48">stream</name><operator pos:start="2098:49" pos:end="2098:50">-&gt;</operator><name pos:start="2098:51" pos:end="2098:54">feed</name><operator pos:start="2098:55" pos:end="2098:56">-&gt;</operator><name pos:start="2098:57" pos:end="2098:64">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="2099:13" pos:end="2100:65">else<block type="pseudo" pos:start="2100:17" pos:end="2100:65"><block_content pos:start="2100:17" pos:end="2100:65">
                <expr_stmt pos:start="2100:17" pos:end="2100:65"><expr pos:start="2100:17" pos:end="2100:64"><call pos:start="2100:17" pos:end="2100:64"><name pos:start="2100:17" pos:end="2100:27">avio_printf</name><argument_list pos:start="2100:28" pos:end="2100:64">(<argument pos:start="2100:29" pos:end="2100:30"><expr pos:start="2100:29" pos:end="2100:30"><name pos:start="2100:29" pos:end="2100:30">pb</name></expr></argument>, <argument pos:start="2100:33" pos:end="2100:40"><expr pos:start="2100:33" pos:end="2100:40"><literal type="string" pos:start="2100:33" pos:end="2100:40">"&lt;td&gt;%s"</literal></expr></argument>, <argument pos:start="2100:43" pos:end="2100:63"><expr pos:start="2100:43" pos:end="2100:63"><name pos:start="2100:43" pos:end="2100:63"><name pos:start="2100:43" pos:end="2100:48">stream</name><operator pos:start="2100:49" pos:end="2100:50">-&gt;</operator><name pos:start="2100:51" pos:end="2100:63">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt pos:start="2101:13" pos:end="2101:34"><expr pos:start="2101:13" pos:end="2101:33"><call pos:start="2101:13" pos:end="2101:33"><name pos:start="2101:13" pos:end="2101:23">avio_printf</name><argument_list pos:start="2101:24" pos:end="2101:33">(<argument pos:start="2101:25" pos:end="2101:26"><expr pos:start="2101:25" pos:end="2101:26"><name pos:start="2101:25" pos:end="2101:26">pb</name></expr></argument>, <argument pos:start="2101:29" pos:end="2101:32"><expr pos:start="2101:29" pos:end="2101:32"><literal type="string" pos:start="2101:29" pos:end="2101:32">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
            <break pos:start="2103:13" pos:end="2103:18">break;</break>
        <default pos:start="2104:9" pos:end="2104:16">default:</default>
            <expr_stmt pos:start="2105:13" pos:end="2106:56"><expr pos:start="2105:13" pos:end="2106:55"><call pos:start="2105:13" pos:end="2106:55"><name pos:start="2105:13" pos:end="2105:23">avio_printf</name><argument_list pos:start="2105:24" pos:end="2106:55">(<argument pos:start="2105:25" pos:end="2105:26"><expr pos:start="2105:25" pos:end="2105:26"><name pos:start="2105:25" pos:end="2105:26">pb</name></expr></argument>, <argument pos:start="2105:29" pos:end="2106:54"><expr pos:start="2105:29" pos:end="2106:54"><literal type="string" pos:start="2105:29" pos:end="2105:44">"&lt;td&gt; - &lt;td&gt; - "</literal>
                            <literal type="string" pos:start="2106:29" pos:end="2106:54">"&lt;td&gt; - &lt;td&gt;&lt;td&gt; - &lt;td&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="2107:13" pos:end="2107:18">break;</break>
        </block_content>}</block></switch>
        <expr_stmt pos:start="2109:9" pos:end="2109:30"><expr pos:start="2109:9" pos:end="2109:29"><name pos:start="2109:9" pos:end="2109:14">stream</name> <operator pos:start="2109:16" pos:end="2109:16">=</operator> <name pos:start="2109:18" pos:end="2109:29"><name pos:start="2109:18" pos:end="2109:23">stream</name><operator pos:start="2109:24" pos:end="2109:25">-&gt;</operator><name pos:start="2109:26" pos:end="2109:29">next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt pos:start="2111:5" pos:end="2111:34"><expr pos:start="2111:5" pos:end="2111:33"><call pos:start="2111:5" pos:end="2111:33"><name pos:start="2111:5" pos:end="2111:15">avio_printf</name><argument_list pos:start="2111:16" pos:end="2111:33">(<argument pos:start="2111:17" pos:end="2111:18"><expr pos:start="2111:17" pos:end="2111:18"><name pos:start="2111:17" pos:end="2111:18">pb</name></expr></argument>, <argument pos:start="2111:21" pos:end="2111:32"><expr pos:start="2111:21" pos:end="2111:32"><literal type="string" pos:start="2111:21" pos:end="2111:32">"&lt;/table&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="2113:5" pos:end="2113:33"><expr pos:start="2113:5" pos:end="2113:32"><name pos:start="2113:5" pos:end="2113:10">stream</name> <operator pos:start="2113:12" pos:end="2113:12">=</operator> <name pos:start="2113:14" pos:end="2113:32"><name pos:start="2113:14" pos:end="2113:19">config</name><operator pos:start="2113:20" pos:end="2113:20">.</operator><name pos:start="2113:21" pos:end="2113:32">first_stream</name></name></expr>;</expr_stmt>
    <while pos:start="2114:5" pos:end="2155:5">while <condition pos:start="2114:11" pos:end="2114:18">(<expr pos:start="2114:12" pos:end="2114:17"><name pos:start="2114:12" pos:end="2114:17">stream</name></expr>)</condition> <block pos:start="2114:20" pos:end="2155:5">{<block_content pos:start="2116:9" pos:end="2154:30">

        <if_stmt pos:start="2116:9" pos:end="2119:9"><if pos:start="2116:9" pos:end="2119:9">if <condition pos:start="2116:12" pos:end="2116:35">(<expr pos:start="2116:13" pos:end="2116:34"><name pos:start="2116:13" pos:end="2116:24"><name pos:start="2116:13" pos:end="2116:18">stream</name><operator pos:start="2116:19" pos:end="2116:20">-&gt;</operator><name pos:start="2116:21" pos:end="2116:24">feed</name></name> <operator pos:start="2116:26" pos:end="2116:27">!=</operator> <name pos:start="2116:29" pos:end="2116:34">stream</name></expr>)</condition> <block pos:start="2116:37" pos:end="2119:9">{<block_content pos:start="2117:13" pos:end="2118:21">
            <expr_stmt pos:start="2117:13" pos:end="2117:34"><expr pos:start="2117:13" pos:end="2117:33"><name pos:start="2117:13" pos:end="2117:18">stream</name> <operator pos:start="2117:20" pos:end="2117:20">=</operator> <name pos:start="2117:22" pos:end="2117:33"><name pos:start="2117:22" pos:end="2117:27">stream</name><operator pos:start="2117:28" pos:end="2117:29">-&gt;</operator><name pos:start="2117:30" pos:end="2117:33">next</name></name></expr>;</expr_stmt>
            <continue pos:start="2118:13" pos:end="2118:21">continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2121:9" pos:end="2121:62"><expr pos:start="2121:9" pos:end="2121:61"><call pos:start="2121:9" pos:end="2121:61"><name pos:start="2121:9" pos:end="2121:19">avio_printf</name><argument_list pos:start="2121:20" pos:end="2121:61">(<argument pos:start="2121:21" pos:end="2121:22"><expr pos:start="2121:21" pos:end="2121:22"><name pos:start="2121:21" pos:end="2121:22">pb</name></expr></argument>, <argument pos:start="2121:25" pos:end="2121:42"><expr pos:start="2121:25" pos:end="2121:42"><literal type="string" pos:start="2121:25" pos:end="2121:42">"&lt;h2&gt;Feed %s&lt;/h2&gt;"</literal></expr></argument>, <argument pos:start="2121:45" pos:end="2121:60"><expr pos:start="2121:45" pos:end="2121:60"><name pos:start="2121:45" pos:end="2121:60"><name pos:start="2121:45" pos:end="2121:50">stream</name><operator pos:start="2121:51" pos:end="2121:52">-&gt;</operator><name pos:start="2121:53" pos:end="2121:60">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2122:9" pos:end="2151:9"><if pos:start="2122:9" pos:end="2151:9">if <condition pos:start="2122:12" pos:end="2122:24">(<expr pos:start="2122:13" pos:end="2122:23"><name pos:start="2122:13" pos:end="2122:23"><name pos:start="2122:13" pos:end="2122:18">stream</name><operator pos:start="2122:19" pos:end="2122:20">-&gt;</operator><name pos:start="2122:21" pos:end="2122:23">pid</name></name></expr>)</condition> <block pos:start="2122:26" pos:end="2151:9">{<block_content pos:start="2123:13" pos:end="2150:35">
            <expr_stmt pos:start="2123:13" pos:end="2126:0"><expr pos:start="2123:13" pos:end="2123:81"><call pos:start="2123:13" pos:end="2123:81"><name pos:start="2123:13" pos:end="2123:23">avio_printf</name><argument_list pos:start="2123:24" pos:end="2123:81">(<argument pos:start="2123:25" pos:end="2123:26"><expr pos:start="2123:25" pos:end="2123:26"><name pos:start="2123:25" pos:end="2123:26">pb</name></expr></argument>, <argument pos:start="2123:29" pos:end="2123:57"><expr pos:start="2123:29" pos:end="2123:57"><literal type="string" pos:start="2123:29" pos:end="2123:46">"Running as pid %"</literal><name pos:start="2123:47" pos:end="2123:52">PRId64</name><literal type="string" pos:start="2123:53" pos:end="2123:57">".\n"</literal></expr></argument>, <argument pos:start="2123:60" pos:end="2123:80"><expr pos:start="2123:60" pos:end="2123:80"><operator pos:start="2123:60" pos:end="2123:60">(</operator><name pos:start="2123:61" pos:end="2123:67">int64_t</name><operator pos:start="2123:68" pos:end="2123:68">)</operator> <name pos:start="2123:70" pos:end="2123:80"><name pos:start="2123:70" pos:end="2123:75">stream</name><operator pos:start="2123:76" pos:end="2123:77">-&gt;</operator><name pos:start="2123:78" pos:end="2123:80">pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="2125:1" pos:end="2125:18">#<cpp:directive pos:start="2125:2" pos:end="2125:3">if</cpp:directive> <expr pos:start="2125:5" pos:end="2125:18"><call pos:start="2125:5" pos:end="2125:18"><name pos:start="2125:5" pos:end="2125:11">defined</name><argument_list pos:start="2125:12" pos:end="2125:18">(<argument pos:start="2125:13" pos:end="2125:17"><expr pos:start="2125:13" pos:end="2125:17"><name pos:start="2125:13" pos:end="2125:17">linux</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <block pos:start="2126:13" pos:end="2149:0">{<block_content pos:start="2127:17" pos:end="2146:18">
                <decl_stmt pos:start="2127:17" pos:end="2127:31"><decl pos:start="2127:17" pos:end="2127:30"><type pos:start="2127:17" pos:end="2127:22"><name pos:start="2127:17" pos:end="2127:20">FILE</name> <modifier pos:start="2127:22" pos:end="2127:22">*</modifier></type><name pos:start="2127:23" pos:end="2127:30">pid_stat</name></decl>;</decl_stmt>
                <decl_stmt pos:start="2128:17" pos:end="2128:32"><decl pos:start="2128:17" pos:end="2128:31"><type pos:start="2128:17" pos:end="2128:20"><name pos:start="2128:17" pos:end="2128:20">char</name></type> <name pos:start="2128:22" pos:end="2128:31"><name pos:start="2128:22" pos:end="2128:27">ps_cmd</name><index pos:start="2128:28" pos:end="2128:31">[<expr pos:start="2128:29" pos:end="2128:30"><literal type="number" pos:start="2128:29" pos:end="2128:30">64</literal></expr>]</index></name></decl>;</decl_stmt>

                <comment type="block" pos:start="2130:17" pos:end="2130:61">/* This is somewhat linux specific I guess */</comment>
                <expr_stmt pos:start="2131:17" pos:end="2133:48"><expr pos:start="2131:17" pos:end="2133:47"><call pos:start="2131:17" pos:end="2133:47"><name pos:start="2131:17" pos:end="2131:24">snprintf</name><argument_list pos:start="2131:25" pos:end="2133:47">(<argument pos:start="2131:26" pos:end="2131:31"><expr pos:start="2131:26" pos:end="2131:31"><name pos:start="2131:26" pos:end="2131:31">ps_cmd</name></expr></argument>, <argument pos:start="2131:34" pos:end="2131:47"><expr pos:start="2131:34" pos:end="2131:47"><sizeof pos:start="2131:34" pos:end="2131:47">sizeof<argument_list pos:start="2131:40" pos:end="2131:47">(<argument pos:start="2131:41" pos:end="2131:46"><expr pos:start="2131:41" pos:end="2131:46"><name pos:start="2131:41" pos:end="2131:46">ps_cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                         <argument pos:start="2132:26" pos:end="2132:73"><expr pos:start="2132:26" pos:end="2132:73"><literal type="string" pos:start="2132:26" pos:end="2132:65">"ps -o \"%%cpu,cputime\" --no-headers %"</literal><name pos:start="2132:66" pos:end="2132:71">PRId64</name><literal type="string" pos:start="2132:72" pos:end="2132:73">""</literal></expr></argument>,
                         <argument pos:start="2133:26" pos:end="2133:46"><expr pos:start="2133:26" pos:end="2133:46"><operator pos:start="2133:26" pos:end="2133:26">(</operator><name pos:start="2133:27" pos:end="2133:33">int64_t</name><operator pos:start="2133:34" pos:end="2133:34">)</operator> <name pos:start="2133:36" pos:end="2133:46"><name pos:start="2133:36" pos:end="2133:41">stream</name><operator pos:start="2133:42" pos:end="2133:43">-&gt;</operator><name pos:start="2133:44" pos:end="2133:46">pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                 <expr_stmt pos:start="2135:18" pos:end="2135:47"><expr pos:start="2135:18" pos:end="2135:46"><name pos:start="2135:18" pos:end="2135:25">pid_stat</name> <operator pos:start="2135:27" pos:end="2135:27">=</operator> <call pos:start="2135:29" pos:end="2135:46"><name pos:start="2135:29" pos:end="2135:33">popen</name><argument_list pos:start="2135:34" pos:end="2135:46">(<argument pos:start="2135:35" pos:end="2135:40"><expr pos:start="2135:35" pos:end="2135:40"><name pos:start="2135:35" pos:end="2135:40">ps_cmd</name></expr></argument>, <argument pos:start="2135:43" pos:end="2135:45"><expr pos:start="2135:43" pos:end="2135:45"><literal type="string" pos:start="2135:43" pos:end="2135:45">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <if_stmt pos:start="2136:18" pos:end="2146:18"><if pos:start="2136:18" pos:end="2146:18">if <condition pos:start="2136:21" pos:end="2136:30">(<expr pos:start="2136:22" pos:end="2136:29"><name pos:start="2136:22" pos:end="2136:29">pid_stat</name></expr>)</condition> <block pos:start="2136:32" pos:end="2146:18">{<block_content pos:start="2137:22" pos:end="2145:38">
                     <decl_stmt pos:start="2137:22" pos:end="2137:38"><decl pos:start="2137:22" pos:end="2137:37"><type pos:start="2137:22" pos:end="2137:25"><name pos:start="2137:22" pos:end="2137:25">char</name></type> <name pos:start="2137:27" pos:end="2137:37"><name pos:start="2137:27" pos:end="2137:33">cpuperc</name><index pos:start="2137:34" pos:end="2137:37">[<expr pos:start="2137:35" pos:end="2137:36"><literal type="number" pos:start="2137:35" pos:end="2137:36">10</literal></expr>]</index></name></decl>;</decl_stmt>
                     <decl_stmt pos:start="2138:22" pos:end="2138:38"><decl pos:start="2138:22" pos:end="2138:37"><type pos:start="2138:22" pos:end="2138:25"><name pos:start="2138:22" pos:end="2138:25">char</name></type> <name pos:start="2138:27" pos:end="2138:37"><name pos:start="2138:27" pos:end="2138:33">cpuused</name><index pos:start="2138:34" pos:end="2138:37">[<expr pos:start="2138:35" pos:end="2138:36"><literal type="number" pos:start="2138:35" pos:end="2138:36">64</literal></expr>]</index></name></decl>;</decl_stmt>

                     <if_stmt pos:start="2140:22" pos:end="2144:22"><if pos:start="2140:22" pos:end="2144:22">if <condition pos:start="2140:25" pos:end="2140:77">(<expr pos:start="2140:26" pos:end="2140:76"><call pos:start="2140:26" pos:end="2140:71"><name pos:start="2140:26" pos:end="2140:31">fscanf</name><argument_list pos:start="2140:32" pos:end="2140:71">(<argument pos:start="2140:33" pos:end="2140:40"><expr pos:start="2140:33" pos:end="2140:40"><name pos:start="2140:33" pos:end="2140:40">pid_stat</name></expr></argument>, <argument pos:start="2140:43" pos:end="2140:52"><expr pos:start="2140:43" pos:end="2140:52"><literal type="string" pos:start="2140:43" pos:end="2140:52">"%9s %63s"</literal></expr></argument>, <argument pos:start="2140:55" pos:end="2140:61"><expr pos:start="2140:55" pos:end="2140:61"><name pos:start="2140:55" pos:end="2140:61">cpuperc</name></expr></argument>, <argument pos:start="2140:64" pos:end="2140:70"><expr pos:start="2140:64" pos:end="2140:70"><name pos:start="2140:64" pos:end="2140:70">cpuused</name></expr></argument>)</argument_list></call> <operator pos:start="2140:73" pos:end="2140:74">==</operator> <literal type="number" pos:start="2140:76" pos:end="2140:76">2</literal></expr>)</condition> <block pos:start="2140:79" pos:end="2144:22">{<block_content pos:start="2141:26" pos:end="2143:55">
                         <expr_stmt pos:start="2141:26" pos:end="2143:55"><expr pos:start="2141:26" pos:end="2143:54"><call pos:start="2141:26" pos:end="2143:54"><name pos:start="2141:26" pos:end="2141:36">avio_printf</name><argument_list pos:start="2141:37" pos:end="2143:54">(<argument pos:start="2141:38" pos:end="2141:39"><expr pos:start="2141:38" pos:end="2141:39"><name pos:start="2141:38" pos:end="2141:39">pb</name></expr></argument>, <argument pos:start="2141:42" pos:end="2142:64"><expr pos:start="2141:42" pos:end="2142:64"><literal type="string" pos:start="2141:42" pos:end="2141:76">"Currently using %s%% of the cpu. "</literal>
                                         <literal type="string" pos:start="2142:42" pos:end="2142:64">"Total time used %s.\n"</literal></expr></argument>,
                                     <argument pos:start="2143:38" pos:end="2143:44"><expr pos:start="2143:38" pos:end="2143:44"><name pos:start="2143:38" pos:end="2143:44">cpuperc</name></expr></argument>, <argument pos:start="2143:47" pos:end="2143:53"><expr pos:start="2143:47" pos:end="2143:53"><name pos:start="2143:47" pos:end="2143:53">cpuused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     </block_content>}</block></if></if_stmt>
                     <expr_stmt pos:start="2145:22" pos:end="2145:38"><expr pos:start="2145:22" pos:end="2145:37"><call pos:start="2145:22" pos:end="2145:37"><name pos:start="2145:22" pos:end="2145:27">fclose</name><argument_list pos:start="2145:28" pos:end="2145:37">(<argument pos:start="2145:29" pos:end="2145:36"><expr pos:start="2145:29" pos:end="2145:36"><name pos:start="2145:29" pos:end="2145:36">pid_stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></if></if_stmt>
            </block_content>}</block>
<cpp:endif pos:start="2148:1" pos:end="2148:6">#<cpp:directive pos:start="2148:2" pos:end="2148:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="2150:13" pos:end="2150:35"><expr pos:start="2150:13" pos:end="2150:34"><call pos:start="2150:13" pos:end="2150:34"><name pos:start="2150:13" pos:end="2150:23">avio_printf</name><argument_list pos:start="2150:24" pos:end="2150:34">(<argument pos:start="2150:25" pos:end="2150:26"><expr pos:start="2150:25" pos:end="2150:26"><name pos:start="2150:25" pos:end="2150:26">pb</name></expr></argument>, <argument pos:start="2150:29" pos:end="2150:33"><expr pos:start="2150:29" pos:end="2150:33"><literal type="string" pos:start="2150:29" pos:end="2150:33">"&lt;p&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2153:9" pos:end="2153:40"><expr pos:start="2153:9" pos:end="2153:39"><call pos:start="2153:9" pos:end="2153:39"><name pos:start="2153:9" pos:end="2153:27">print_stream_params</name><argument_list pos:start="2153:28" pos:end="2153:39">(<argument pos:start="2153:29" pos:end="2153:30"><expr pos:start="2153:29" pos:end="2153:30"><name pos:start="2153:29" pos:end="2153:30">pb</name></expr></argument>, <argument pos:start="2153:33" pos:end="2153:38"><expr pos:start="2153:33" pos:end="2153:38"><name pos:start="2153:33" pos:end="2153:38">stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2154:9" pos:end="2154:30"><expr pos:start="2154:9" pos:end="2154:29"><name pos:start="2154:9" pos:end="2154:14">stream</name> <operator pos:start="2154:16" pos:end="2154:16">=</operator> <name pos:start="2154:18" pos:end="2154:29"><name pos:start="2154:18" pos:end="2154:23">stream</name><operator pos:start="2154:24" pos:end="2154:25">-&gt;</operator><name pos:start="2154:26" pos:end="2154:29">next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block" pos:start="2157:5" pos:end="2157:27">/* connection status */</comment>
    <expr_stmt pos:start="2158:5" pos:end="2158:52"><expr pos:start="2158:5" pos:end="2158:51"><call pos:start="2158:5" pos:end="2158:51"><name pos:start="2158:5" pos:end="2158:15">avio_printf</name><argument_list pos:start="2158:16" pos:end="2158:51">(<argument pos:start="2158:17" pos:end="2158:18"><expr pos:start="2158:17" pos:end="2158:18"><name pos:start="2158:17" pos:end="2158:18">pb</name></expr></argument>, <argument pos:start="2158:21" pos:end="2158:50"><expr pos:start="2158:21" pos:end="2158:50"><literal type="string" pos:start="2158:21" pos:end="2158:50">"&lt;h2&gt;Connection Status&lt;/h2&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="2160:5" pos:end="2161:59"><expr pos:start="2160:5" pos:end="2161:58"><call pos:start="2160:5" pos:end="2161:58"><name pos:start="2160:5" pos:end="2160:15">avio_printf</name><argument_list pos:start="2160:16" pos:end="2161:58">(<argument pos:start="2160:17" pos:end="2160:18"><expr pos:start="2160:17" pos:end="2160:18"><name pos:start="2160:17" pos:end="2160:18">pb</name></expr></argument>, <argument pos:start="2160:21" pos:end="2160:58"><expr pos:start="2160:21" pos:end="2160:58"><literal type="string" pos:start="2160:21" pos:end="2160:58">"Number of connections: %d / %d&lt;br&gt;\n"</literal></expr></argument>,
                <argument pos:start="2161:17" pos:end="2161:30"><expr pos:start="2161:17" pos:end="2161:30"><name pos:start="2161:17" pos:end="2161:30">nb_connections</name></expr></argument>, <argument pos:start="2161:33" pos:end="2161:57"><expr pos:start="2161:33" pos:end="2161:57"><name pos:start="2161:33" pos:end="2161:57"><name pos:start="2161:33" pos:end="2161:38">config</name><operator pos:start="2161:39" pos:end="2161:39">.</operator><name pos:start="2161:40" pos:end="2161:57">nb_max_connections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="2163:5" pos:end="2164:57"><expr pos:start="2163:5" pos:end="2164:56"><call pos:start="2163:5" pos:end="2164:56"><name pos:start="2163:5" pos:end="2163:15">avio_printf</name><argument_list pos:start="2163:16" pos:end="2164:56">(<argument pos:start="2163:17" pos:end="2163:18"><expr pos:start="2163:17" pos:end="2163:18"><name pos:start="2163:17" pos:end="2163:18">pb</name></expr></argument>, <argument pos:start="2163:21" pos:end="2163:69"><expr pos:start="2163:21" pos:end="2163:69"><literal type="string" pos:start="2163:21" pos:end="2163:41">"Bandwidth in use: %"</literal><name pos:start="2163:42" pos:end="2163:47">PRIu64</name><literal type="string" pos:start="2163:48" pos:end="2163:54">"k / %"</literal><name pos:start="2163:55" pos:end="2163:60">PRIu64</name><literal type="string" pos:start="2163:61" pos:end="2163:69">"k&lt;br&gt;\n"</literal></expr></argument>,
                <argument pos:start="2164:17" pos:end="2164:33"><expr pos:start="2164:17" pos:end="2164:33"><name pos:start="2164:17" pos:end="2164:33">current_bandwidth</name></expr></argument>, <argument pos:start="2164:36" pos:end="2164:55"><expr pos:start="2164:36" pos:end="2164:55"><name pos:start="2164:36" pos:end="2164:55"><name pos:start="2164:36" pos:end="2164:41">config</name><operator pos:start="2164:42" pos:end="2164:42">.</operator><name pos:start="2164:43" pos:end="2164:55">max_bandwidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="2166:5" pos:end="2166:33"><expr pos:start="2166:5" pos:end="2166:32"><call pos:start="2166:5" pos:end="2166:32"><name pos:start="2166:5" pos:end="2166:15">avio_printf</name><argument_list pos:start="2166:16" pos:end="2166:32">(<argument pos:start="2166:17" pos:end="2166:18"><expr pos:start="2166:17" pos:end="2166:18"><name pos:start="2166:17" pos:end="2166:18">pb</name></expr></argument>, <argument pos:start="2166:21" pos:end="2166:31"><expr pos:start="2166:21" pos:end="2166:31"><literal type="string" pos:start="2166:21" pos:end="2166:31">"&lt;table&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2167:5" pos:end="2168:68"><expr pos:start="2167:5" pos:end="2168:67"><call pos:start="2167:5" pos:end="2168:67"><name pos:start="2167:5" pos:end="2167:15">avio_printf</name><argument_list pos:start="2167:16" pos:end="2168:67">(<argument pos:start="2167:17" pos:end="2167:18"><expr pos:start="2167:17" pos:end="2167:18"><name pos:start="2167:17" pos:end="2167:18">pb</name></expr></argument>, <argument pos:start="2167:21" pos:end="2168:66"><expr pos:start="2167:21" pos:end="2168:66"><literal type="string" pos:start="2167:21" pos:end="2167:81">"&lt;tr&gt;&lt;th&gt;#&lt;th&gt;File&lt;th&gt;IP&lt;th&gt;URL&lt;th&gt;Proto&lt;th&gt;State&lt;th&gt;Target "</literal>
                    <literal type="string" pos:start="2168:21" pos:end="2168:66">"bit/s&lt;th&gt;Actual bit/s&lt;th&gt;Bytes transferred\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2169:5" pos:end="2169:24"><expr pos:start="2169:5" pos:end="2169:23"><name pos:start="2169:5" pos:end="2169:6">c1</name> <operator pos:start="2169:8" pos:end="2169:8">=</operator> <name pos:start="2169:10" pos:end="2169:23">first_http_ctx</name></expr>;</expr_stmt>
    <expr_stmt pos:start="2170:5" pos:end="2170:10"><expr pos:start="2170:5" pos:end="2170:9"><name pos:start="2170:5" pos:end="2170:5">i</name> <operator pos:start="2170:7" pos:end="2170:7">=</operator> <literal type="number" pos:start="2170:9" pos:end="2170:9">0</literal></expr>;</expr_stmt>
    <while pos:start="2171:5" pos:end="2202:5">while <condition pos:start="2171:11" pos:end="2171:14">(<expr pos:start="2171:12" pos:end="2171:13"><name pos:start="2171:12" pos:end="2171:13">c1</name></expr>)</condition> <block pos:start="2171:16" pos:end="2202:5">{<block_content pos:start="2172:9" pos:end="2201:22">
        <decl_stmt pos:start="2172:9" pos:end="2172:20"><decl pos:start="2172:9" pos:end="2172:19"><type pos:start="2172:9" pos:end="2172:11"><name pos:start="2172:9" pos:end="2172:11">int</name></type> <name pos:start="2172:13" pos:end="2172:19">bitrate</name></decl>;</decl_stmt>
        <decl_stmt pos:start="2173:9" pos:end="2173:14"><decl pos:start="2173:9" pos:end="2173:13"><type pos:start="2173:9" pos:end="2173:11"><name pos:start="2173:9" pos:end="2173:11">int</name></type> <name pos:start="2173:13" pos:end="2173:13">j</name></decl>;</decl_stmt>

        <expr_stmt pos:start="2175:9" pos:end="2175:20"><expr pos:start="2175:9" pos:end="2175:19"><name pos:start="2175:9" pos:end="2175:15">bitrate</name> <operator pos:start="2175:17" pos:end="2175:17">=</operator> <literal type="number" pos:start="2175:19" pos:end="2175:19">0</literal></expr>;</expr_stmt>
        <if_stmt pos:start="2176:9" pos:end="2183:9"><if pos:start="2176:9" pos:end="2183:9">if <condition pos:start="2176:12" pos:end="2176:23">(<expr pos:start="2176:13" pos:end="2176:22"><name pos:start="2176:13" pos:end="2176:22"><name pos:start="2176:13" pos:end="2176:14">c1</name><operator pos:start="2176:15" pos:end="2176:16">-&gt;</operator><name pos:start="2176:17" pos:end="2176:22">stream</name></name></expr>)</condition> <block pos:start="2176:25" pos:end="2183:9">{<block_content pos:start="2177:13" pos:end="2182:13">
            <for pos:start="2177:13" pos:end="2182:13">for <control pos:start="2177:17" pos:end="2177:56">(<init pos:start="2177:18" pos:end="2177:23"><expr pos:start="2177:18" pos:end="2177:22"><name pos:start="2177:18" pos:end="2177:18">j</name> <operator pos:start="2177:20" pos:end="2177:20">=</operator> <literal type="number" pos:start="2177:22" pos:end="2177:22">0</literal></expr>;</init> <condition pos:start="2177:25" pos:end="2177:51"><expr pos:start="2177:25" pos:end="2177:50"><name pos:start="2177:25" pos:end="2177:25">j</name> <operator pos:start="2177:27" pos:end="2177:27">&lt;</operator> <name pos:start="2177:29" pos:end="2177:50"><name pos:start="2177:29" pos:end="2177:30">c1</name><operator pos:start="2177:31" pos:end="2177:32">-&gt;</operator><name pos:start="2177:33" pos:end="2177:38">stream</name><operator pos:start="2177:39" pos:end="2177:40">-&gt;</operator><name pos:start="2177:41" pos:end="2177:50">nb_streams</name></name></expr>;</condition> <incr pos:start="2177:53" pos:end="2177:55"><expr pos:start="2177:53" pos:end="2177:55"><name pos:start="2177:53" pos:end="2177:53">j</name><operator pos:start="2177:54" pos:end="2177:55">++</operator></expr></incr>)</control> <block pos:start="2177:58" pos:end="2182:13">{<block_content pos:start="2178:17" pos:end="2181:98">
                <if_stmt pos:start="2178:17" pos:end="2181:98"><if pos:start="2178:17" pos:end="2179:74">if <condition pos:start="2178:20" pos:end="2178:38">(<expr pos:start="2178:21" pos:end="2178:37"><operator pos:start="2178:21" pos:end="2178:21">!</operator><name pos:start="2178:22" pos:end="2178:37"><name pos:start="2178:22" pos:end="2178:23">c1</name><operator pos:start="2178:24" pos:end="2178:25">-&gt;</operator><name pos:start="2178:26" pos:end="2178:31">stream</name><operator pos:start="2178:32" pos:end="2178:33">-&gt;</operator><name pos:start="2178:34" pos:end="2178:37">feed</name></name></expr>)</condition><block type="pseudo" pos:start="2179:21" pos:end="2179:74"><block_content pos:start="2179:21" pos:end="2179:74">
                    <expr_stmt pos:start="2179:21" pos:end="2179:74"><expr pos:start="2179:21" pos:end="2179:73"><name pos:start="2179:21" pos:end="2179:27">bitrate</name> <operator pos:start="2179:29" pos:end="2179:30">+=</operator> <name pos:start="2179:32" pos:end="2179:53"><name pos:start="2179:32" pos:end="2179:33">c1</name><operator pos:start="2179:34" pos:end="2179:35">-&gt;</operator><name pos:start="2179:36" pos:end="2179:41">stream</name><operator pos:start="2179:42" pos:end="2179:43">-&gt;</operator><name pos:start="2179:44" pos:end="2179:50">streams</name><index pos:start="2179:51" pos:end="2179:53">[<expr pos:start="2179:52" pos:end="2179:52"><name pos:start="2179:52" pos:end="2179:52">j</name></expr>]</index></name><operator pos:start="2179:54" pos:end="2179:55">-&gt;</operator><name pos:start="2179:56" pos:end="2179:73"><name pos:start="2179:56" pos:end="2179:63">codecpar</name><operator pos:start="2179:64" pos:end="2179:65">-&gt;</operator><name pos:start="2179:66" pos:end="2179:73">bit_rate</name></name></expr>;</expr_stmt></block_content></block></if>
                <if type="elseif" pos:start="2180:17" pos:end="2181:98">else if <condition pos:start="2180:25" pos:end="2180:50">(<expr pos:start="2180:26" pos:end="2180:49"><name pos:start="2180:26" pos:end="2180:44"><name pos:start="2180:26" pos:end="2180:27">c1</name><operator pos:start="2180:28" pos:end="2180:29">-&gt;</operator><name pos:start="2180:30" pos:end="2180:41">feed_streams</name><index pos:start="2180:42" pos:end="2180:44">[<expr pos:start="2180:43" pos:end="2180:43"><name pos:start="2180:43" pos:end="2180:43">j</name></expr>]</index></name> <operator pos:start="2180:46" pos:end="2180:47">&gt;=</operator> <literal type="number" pos:start="2180:49" pos:end="2180:49">0</literal></expr>)</condition><block type="pseudo" pos:start="2181:21" pos:end="2181:98"><block_content pos:start="2181:21" pos:end="2181:98">
                    <expr_stmt pos:start="2181:21" pos:end="2181:98"><expr pos:start="2181:21" pos:end="2181:97"><name pos:start="2181:21" pos:end="2181:27">bitrate</name> <operator pos:start="2181:29" pos:end="2181:30">+=</operator> <name pos:start="2181:32" pos:end="2181:77"><name pos:start="2181:32" pos:end="2181:33">c1</name><operator pos:start="2181:34" pos:end="2181:35">-&gt;</operator><name pos:start="2181:36" pos:end="2181:41">stream</name><operator pos:start="2181:42" pos:end="2181:43">-&gt;</operator><name pos:start="2181:44" pos:end="2181:47">feed</name><operator pos:start="2181:48" pos:end="2181:49">-&gt;</operator><name pos:start="2181:50" pos:end="2181:56">streams</name><index pos:start="2181:57" pos:end="2181:77">[<expr pos:start="2181:58" pos:end="2181:76"><name pos:start="2181:58" pos:end="2181:76"><name pos:start="2181:58" pos:end="2181:59">c1</name><operator pos:start="2181:60" pos:end="2181:61">-&gt;</operator><name pos:start="2181:62" pos:end="2181:73">feed_streams</name><index pos:start="2181:74" pos:end="2181:76">[<expr pos:start="2181:75" pos:end="2181:75"><name pos:start="2181:75" pos:end="2181:75">j</name></expr>]</index></name></expr>]</index></name><operator pos:start="2181:78" pos:end="2181:79">-&gt;</operator><name pos:start="2181:80" pos:end="2181:97"><name pos:start="2181:80" pos:end="2181:87">codecpar</name><operator pos:start="2181:88" pos:end="2181:89">-&gt;</operator><name pos:start="2181:90" pos:end="2181:97">bit_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2185:9" pos:end="2185:12"><expr pos:start="2185:9" pos:end="2185:11"><name pos:start="2185:9" pos:end="2185:9">i</name><operator pos:start="2185:10" pos:end="2185:11">++</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="2186:9" pos:end="2186:46"><expr pos:start="2186:9" pos:end="2186:45"><name pos:start="2186:9" pos:end="2186:9">p</name> <operator pos:start="2186:11" pos:end="2186:11">=</operator> <call pos:start="2186:13" pos:end="2186:45"><name pos:start="2186:13" pos:end="2186:21">inet_ntoa</name><argument_list pos:start="2186:22" pos:end="2186:45">(<argument pos:start="2186:23" pos:end="2186:44"><expr pos:start="2186:23" pos:end="2186:44"><name pos:start="2186:23" pos:end="2186:44"><name pos:start="2186:23" pos:end="2186:24">c1</name><operator pos:start="2186:25" pos:end="2186:26">-&gt;</operator><name pos:start="2186:27" pos:end="2186:35">from_addr</name><operator pos:start="2186:36" pos:end="2186:36">.</operator><name pos:start="2186:37" pos:end="2186:44">sin_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2187:9" pos:end="2187:66"><expr pos:start="2187:9" pos:end="2187:65"><call pos:start="2187:9" pos:end="2187:65"><name pos:start="2187:9" pos:end="2187:18">clean_html</name><argument_list pos:start="2187:19" pos:end="2187:65">(<argument pos:start="2187:20" pos:end="2187:32"><expr pos:start="2187:20" pos:end="2187:32"><name pos:start="2187:20" pos:end="2187:32"><name pos:start="2187:20" pos:end="2187:21">c1</name><operator pos:start="2187:22" pos:end="2187:23">-&gt;</operator><name pos:start="2187:24" pos:end="2187:32">clean_url</name></name></expr></argument>, <argument pos:start="2187:35" pos:end="2187:55"><expr pos:start="2187:35" pos:end="2187:55"><sizeof pos:start="2187:35" pos:end="2187:55">sizeof<argument_list pos:start="2187:41" pos:end="2187:55">(<argument pos:start="2187:42" pos:end="2187:54"><expr pos:start="2187:42" pos:end="2187:54"><name pos:start="2187:42" pos:end="2187:54"><name pos:start="2187:42" pos:end="2187:43">c1</name><operator pos:start="2187:44" pos:end="2187:45">-&gt;</operator><name pos:start="2187:46" pos:end="2187:54">clean_url</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="2187:58" pos:end="2187:64"><expr pos:start="2187:58" pos:end="2187:64"><name pos:start="2187:58" pos:end="2187:64"><name pos:start="2187:58" pos:end="2187:59">c1</name><operator pos:start="2187:60" pos:end="2187:61">-&gt;</operator><name pos:start="2187:62" pos:end="2187:64">url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2188:9" pos:end="2194:57"><expr pos:start="2188:9" pos:end="2194:56"><call pos:start="2188:9" pos:end="2194:56"><name pos:start="2188:9" pos:end="2188:19">avio_printf</name><argument_list pos:start="2188:20" pos:end="2194:56">(<argument pos:start="2188:21" pos:end="2188:22"><expr pos:start="2188:21" pos:end="2188:22"><name pos:start="2188:21" pos:end="2188:22">pb</name></expr></argument>, <argument pos:start="2188:25" pos:end="2189:30"><expr pos:start="2188:25" pos:end="2189:30"><literal type="string" pos:start="2188:25" pos:end="2188:75">"&lt;tr&gt;&lt;td&gt;&lt;b&gt;%d&lt;/b&gt;&lt;td&gt;%s%s&lt;td&gt;%s&lt;td&gt;%s&lt;td&gt;%s&lt;td&gt;%s"</literal>
                        <literal type="string" pos:start="2189:25" pos:end="2189:30">"&lt;td&gt;"</literal></expr></argument>,
                    <argument pos:start="2190:21" pos:end="2190:21"><expr pos:start="2190:21" pos:end="2190:21"><name pos:start="2190:21" pos:end="2190:21">i</name></expr></argument>, <argument pos:start="2190:24" pos:end="2190:61"><expr pos:start="2190:24" pos:end="2190:61"><ternary pos:start="2190:24" pos:end="2190:61"><condition pos:start="2190:24" pos:end="2190:35"><expr pos:start="2190:24" pos:end="2190:33"><name pos:start="2190:24" pos:end="2190:33"><name pos:start="2190:24" pos:end="2190:25">c1</name><operator pos:start="2190:26" pos:end="2190:27">-&gt;</operator><name pos:start="2190:28" pos:end="2190:33">stream</name></name></expr> ?</condition><then pos:start="2190:37" pos:end="2190:56"> <expr pos:start="2190:37" pos:end="2190:56"><name pos:start="2190:37" pos:end="2190:56"><name pos:start="2190:37" pos:end="2190:38">c1</name><operator pos:start="2190:39" pos:end="2190:40">-&gt;</operator><name pos:start="2190:41" pos:end="2190:46">stream</name><operator pos:start="2190:47" pos:end="2190:48">-&gt;</operator><name pos:start="2190:49" pos:end="2190:56">filename</name></name></expr> </then><else pos:start="2190:58" pos:end="2190:61">: <expr pos:start="2190:60" pos:end="2190:61"><literal type="string" pos:start="2190:60" pos:end="2190:61">""</literal></expr></else></ternary></expr></argument>,
                    <argument pos:start="2191:21" pos:end="2191:72"><expr pos:start="2191:21" pos:end="2191:72"><ternary pos:start="2191:21" pos:end="2191:72"><condition pos:start="2191:21" pos:end="2191:57"><expr pos:start="2191:21" pos:end="2191:55"><name pos:start="2191:21" pos:end="2191:29"><name pos:start="2191:21" pos:end="2191:22">c1</name><operator pos:start="2191:23" pos:end="2191:24">-&gt;</operator><name pos:start="2191:25" pos:end="2191:29">state</name></name> <operator pos:start="2191:31" pos:end="2191:32">==</operator> <name pos:start="2191:34" pos:end="2191:55">HTTPSTATE_RECEIVE_DATA</name></expr> ?</condition><then pos:start="2191:59" pos:end="2191:67"> <expr pos:start="2191:59" pos:end="2191:67"><literal type="string" pos:start="2191:59" pos:end="2191:67">"(input)"</literal></expr> </then><else pos:start="2191:69" pos:end="2191:72">: <expr pos:start="2191:71" pos:end="2191:72"><literal type="string" pos:start="2191:71" pos:end="2191:72">""</literal></expr></else></ternary></expr></argument>,
                    <argument pos:start="2192:21" pos:end="2192:21"><expr pos:start="2192:21" pos:end="2192:21"><name pos:start="2192:21" pos:end="2192:21">p</name></expr></argument>,
                    <argument pos:start="2193:21" pos:end="2193:33"><expr pos:start="2193:21" pos:end="2193:33"><name pos:start="2193:21" pos:end="2193:33"><name pos:start="2193:21" pos:end="2193:22">c1</name><operator pos:start="2193:23" pos:end="2193:24">-&gt;</operator><name pos:start="2193:25" pos:end="2193:33">clean_url</name></name></expr></argument>,
                    <argument pos:start="2194:21" pos:end="2194:32"><expr pos:start="2194:21" pos:end="2194:32"><name pos:start="2194:21" pos:end="2194:32"><name pos:start="2194:21" pos:end="2194:22">c1</name><operator pos:start="2194:23" pos:end="2194:24">-&gt;</operator><name pos:start="2194:25" pos:end="2194:32">protocol</name></name></expr></argument>, <argument pos:start="2194:35" pos:end="2194:55"><expr pos:start="2194:35" pos:end="2194:55"><name pos:start="2194:35" pos:end="2194:55"><name pos:start="2194:35" pos:end="2194:44">http_state</name><index pos:start="2194:45" pos:end="2194:55">[<expr pos:start="2194:46" pos:end="2194:54"><name pos:start="2194:46" pos:end="2194:54"><name pos:start="2194:46" pos:end="2194:47">c1</name><operator pos:start="2194:48" pos:end="2194:49">-&gt;</operator><name pos:start="2194:50" pos:end="2194:54">state</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2195:9" pos:end="2195:35"><expr pos:start="2195:9" pos:end="2195:34"><call pos:start="2195:9" pos:end="2195:34"><name pos:start="2195:9" pos:end="2195:21">fmt_bytecount</name><argument_list pos:start="2195:22" pos:end="2195:34">(<argument pos:start="2195:23" pos:end="2195:24"><expr pos:start="2195:23" pos:end="2195:24"><name pos:start="2195:23" pos:end="2195:24">pb</name></expr></argument>, <argument pos:start="2195:27" pos:end="2195:33"><expr pos:start="2195:27" pos:end="2195:33"><name pos:start="2195:27" pos:end="2195:33">bitrate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2196:9" pos:end="2196:32"><expr pos:start="2196:9" pos:end="2196:31"><call pos:start="2196:9" pos:end="2196:31"><name pos:start="2196:9" pos:end="2196:19">avio_printf</name><argument_list pos:start="2196:20" pos:end="2196:31">(<argument pos:start="2196:21" pos:end="2196:22"><expr pos:start="2196:21" pos:end="2196:22"><name pos:start="2196:21" pos:end="2196:22">pb</name></expr></argument>, <argument pos:start="2196:25" pos:end="2196:30"><expr pos:start="2196:25" pos:end="2196:30"><literal type="string" pos:start="2196:25" pos:end="2196:30">"&lt;td&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2197:9" pos:end="2197:79"><expr pos:start="2197:9" pos:end="2197:78"><call pos:start="2197:9" pos:end="2197:78"><name pos:start="2197:9" pos:end="2197:21">fmt_bytecount</name><argument_list pos:start="2197:22" pos:end="2197:78">(<argument pos:start="2197:23" pos:end="2197:24"><expr pos:start="2197:23" pos:end="2197:24"><name pos:start="2197:23" pos:end="2197:24">pb</name></expr></argument>, <argument pos:start="2197:27" pos:end="2197:77"><expr pos:start="2197:27" pos:end="2197:77"><call pos:start="2197:27" pos:end="2197:73"><name pos:start="2197:27" pos:end="2197:42">compute_datarate</name><argument_list pos:start="2197:43" pos:end="2197:73">(<argument pos:start="2197:44" pos:end="2197:56"><expr pos:start="2197:44" pos:end="2197:56"><operator pos:start="2197:44" pos:end="2197:44">&amp;</operator><name pos:start="2197:45" pos:end="2197:56"><name pos:start="2197:45" pos:end="2197:46">c1</name><operator pos:start="2197:47" pos:end="2197:48">-&gt;</operator><name pos:start="2197:49" pos:end="2197:56">datarate</name></name></expr></argument>, <argument pos:start="2197:59" pos:end="2197:72"><expr pos:start="2197:59" pos:end="2197:72"><name pos:start="2197:59" pos:end="2197:72"><name pos:start="2197:59" pos:end="2197:60">c1</name><operator pos:start="2197:61" pos:end="2197:62">-&gt;</operator><name pos:start="2197:63" pos:end="2197:72">data_count</name></name></expr></argument>)</argument_list></call> <operator pos:start="2197:75" pos:end="2197:75">*</operator> <literal type="number" pos:start="2197:77" pos:end="2197:77">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2198:9" pos:end="2198:32"><expr pos:start="2198:9" pos:end="2198:31"><call pos:start="2198:9" pos:end="2198:31"><name pos:start="2198:9" pos:end="2198:19">avio_printf</name><argument_list pos:start="2198:20" pos:end="2198:31">(<argument pos:start="2198:21" pos:end="2198:22"><expr pos:start="2198:21" pos:end="2198:22"><name pos:start="2198:21" pos:end="2198:22">pb</name></expr></argument>, <argument pos:start="2198:25" pos:end="2198:30"><expr pos:start="2198:25" pos:end="2198:30"><literal type="string" pos:start="2198:25" pos:end="2198:30">"&lt;td&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2199:9" pos:end="2199:42"><expr pos:start="2199:9" pos:end="2199:41"><call pos:start="2199:9" pos:end="2199:41"><name pos:start="2199:9" pos:end="2199:21">fmt_bytecount</name><argument_list pos:start="2199:22" pos:end="2199:41">(<argument pos:start="2199:23" pos:end="2199:24"><expr pos:start="2199:23" pos:end="2199:24"><name pos:start="2199:23" pos:end="2199:24">pb</name></expr></argument>, <argument pos:start="2199:27" pos:end="2199:40"><expr pos:start="2199:27" pos:end="2199:40"><name pos:start="2199:27" pos:end="2199:40"><name pos:start="2199:27" pos:end="2199:28">c1</name><operator pos:start="2199:29" pos:end="2199:30">-&gt;</operator><name pos:start="2199:31" pos:end="2199:40">data_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2200:9" pos:end="2200:30"><expr pos:start="2200:9" pos:end="2200:29"><call pos:start="2200:9" pos:end="2200:29"><name pos:start="2200:9" pos:end="2200:19">avio_printf</name><argument_list pos:start="2200:20" pos:end="2200:29">(<argument pos:start="2200:21" pos:end="2200:22"><expr pos:start="2200:21" pos:end="2200:22"><name pos:start="2200:21" pos:end="2200:22">pb</name></expr></argument>, <argument pos:start="2200:25" pos:end="2200:28"><expr pos:start="2200:25" pos:end="2200:28"><literal type="string" pos:start="2200:25" pos:end="2200:28">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2201:9" pos:end="2201:22"><expr pos:start="2201:9" pos:end="2201:21"><name pos:start="2201:9" pos:end="2201:10">c1</name> <operator pos:start="2201:12" pos:end="2201:12">=</operator> <name pos:start="2201:14" pos:end="2201:21"><name pos:start="2201:14" pos:end="2201:15">c1</name><operator pos:start="2201:16" pos:end="2201:17">-&gt;</operator><name pos:start="2201:18" pos:end="2201:21">next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt pos:start="2203:5" pos:end="2203:34"><expr pos:start="2203:5" pos:end="2203:33"><call pos:start="2203:5" pos:end="2203:33"><name pos:start="2203:5" pos:end="2203:15">avio_printf</name><argument_list pos:start="2203:16" pos:end="2203:33">(<argument pos:start="2203:17" pos:end="2203:18"><expr pos:start="2203:17" pos:end="2203:18"><name pos:start="2203:17" pos:end="2203:18">pb</name></expr></argument>, <argument pos:start="2203:21" pos:end="2203:32"><expr pos:start="2203:21" pos:end="2203:32"><literal type="string" pos:start="2203:21" pos:end="2203:32">"&lt;/table&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="2205:5" pos:end="2210:5"><if pos:start="2205:5" pos:end="2210:5">if <condition pos:start="2205:8" pos:end="2205:25">(<expr pos:start="2205:9" pos:end="2205:24"><operator pos:start="2205:9" pos:end="2205:9">!</operator><name pos:start="2205:10" pos:end="2205:24"><name pos:start="2205:10" pos:end="2205:15">config</name><operator pos:start="2205:16" pos:end="2205:16">.</operator><name pos:start="2205:17" pos:end="2205:24">bitexact</name></name></expr>)</condition> <block pos:start="2205:27" pos:end="2210:5">{<block_content pos:start="2207:9" pos:end="2209:50">
        <comment type="block" pos:start="2206:9" pos:end="2206:18">/* date */</comment>
        <expr_stmt pos:start="2207:9" pos:end="2207:24"><expr pos:start="2207:9" pos:end="2207:23"><name pos:start="2207:9" pos:end="2207:10">ti</name> <operator pos:start="2207:12" pos:end="2207:12">=</operator> <call pos:start="2207:14" pos:end="2207:23"><name pos:start="2207:14" pos:end="2207:17">time</name><argument_list pos:start="2207:18" pos:end="2207:23">(<argument pos:start="2207:19" pos:end="2207:22"><expr pos:start="2207:19" pos:end="2207:22"><name pos:start="2207:19" pos:end="2207:22">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2208:9" pos:end="2208:23"><expr pos:start="2208:9" pos:end="2208:22"><name pos:start="2208:9" pos:end="2208:9">p</name> <operator pos:start="2208:11" pos:end="2208:11">=</operator> <call pos:start="2208:13" pos:end="2208:22"><name pos:start="2208:13" pos:end="2208:17">ctime</name><argument_list pos:start="2208:18" pos:end="2208:22">(<argument pos:start="2208:19" pos:end="2208:21"><expr pos:start="2208:19" pos:end="2208:21"><operator pos:start="2208:19" pos:end="2208:19">&amp;</operator><name pos:start="2208:20" pos:end="2208:21">ti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2209:9" pos:end="2209:50"><expr pos:start="2209:9" pos:end="2209:49"><call pos:start="2209:9" pos:end="2209:49"><name pos:start="2209:9" pos:end="2209:19">avio_printf</name><argument_list pos:start="2209:20" pos:end="2209:49">(<argument pos:start="2209:21" pos:end="2209:22"><expr pos:start="2209:21" pos:end="2209:22"><name pos:start="2209:21" pos:end="2209:22">pb</name></expr></argument>, <argument pos:start="2209:25" pos:end="2209:45"><expr pos:start="2209:25" pos:end="2209:45"><literal type="string" pos:start="2209:25" pos:end="2209:45">"&lt;hr&gt;Generated at %s"</literal></expr></argument>, <argument pos:start="2209:48" pos:end="2209:48"><expr pos:start="2209:48" pos:end="2209:48"><name pos:start="2209:48" pos:end="2209:48">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="2211:5" pos:end="2211:42"><expr pos:start="2211:5" pos:end="2211:41"><call pos:start="2211:5" pos:end="2211:41"><name pos:start="2211:5" pos:end="2211:15">avio_printf</name><argument_list pos:start="2211:16" pos:end="2211:41">(<argument pos:start="2211:17" pos:end="2211:18"><expr pos:start="2211:17" pos:end="2211:18"><name pos:start="2211:17" pos:end="2211:18">pb</name></expr></argument>, <argument pos:start="2211:21" pos:end="2211:40"><expr pos:start="2211:21" pos:end="2211:40"><literal type="string" pos:start="2211:21" pos:end="2211:40">"&lt;/body&gt;\n&lt;/html&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="2213:5" pos:end="2213:48"><expr pos:start="2213:5" pos:end="2213:47"><name pos:start="2213:5" pos:end="2213:7">len</name> <operator pos:start="2213:9" pos:end="2213:9">=</operator> <call pos:start="2213:11" pos:end="2213:47"><name pos:start="2213:11" pos:end="2213:28">avio_close_dyn_buf</name><argument_list pos:start="2213:29" pos:end="2213:47">(<argument pos:start="2213:30" pos:end="2213:31"><expr pos:start="2213:30" pos:end="2213:31"><name pos:start="2213:30" pos:end="2213:31">pb</name></expr></argument>, <argument pos:start="2213:34" pos:end="2213:46"><expr pos:start="2213:34" pos:end="2213:46"><operator pos:start="2213:34" pos:end="2213:34">&amp;</operator><name pos:start="2213:35" pos:end="2213:46"><name pos:start="2213:35" pos:end="2213:35">c</name><operator pos:start="2213:36" pos:end="2213:37">-&gt;</operator><name pos:start="2213:38" pos:end="2213:46">pb_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2214:5" pos:end="2214:33"><expr pos:start="2214:5" pos:end="2214:32"><name pos:start="2214:5" pos:end="2214:17"><name pos:start="2214:5" pos:end="2214:5">c</name><operator pos:start="2214:6" pos:end="2214:7">-&gt;</operator><name pos:start="2214:8" pos:end="2214:17">buffer_ptr</name></name> <operator pos:start="2214:19" pos:end="2214:19">=</operator> <name pos:start="2214:21" pos:end="2214:32"><name pos:start="2214:21" pos:end="2214:21">c</name><operator pos:start="2214:22" pos:end="2214:23">-&gt;</operator><name pos:start="2214:24" pos:end="2214:32">pb_buffer</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="2215:5" pos:end="2215:39"><expr pos:start="2215:5" pos:end="2215:38"><name pos:start="2215:5" pos:end="2215:17"><name pos:start="2215:5" pos:end="2215:5">c</name><operator pos:start="2215:6" pos:end="2215:7">-&gt;</operator><name pos:start="2215:8" pos:end="2215:17">buffer_end</name></name> <operator pos:start="2215:19" pos:end="2215:19">=</operator> <name pos:start="2215:21" pos:end="2215:32"><name pos:start="2215:21" pos:end="2215:21">c</name><operator pos:start="2215:22" pos:end="2215:23">-&gt;</operator><name pos:start="2215:24" pos:end="2215:32">pb_buffer</name></name> <operator pos:start="2215:34" pos:end="2215:34">+</operator> <name pos:start="2215:36" pos:end="2215:38">len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="2218:1" pos:end="2303:1"><type pos:start="2218:1" pos:end="2218:10"><specifier pos:start="2218:1" pos:end="2218:6">static</specifier> <name pos:start="2218:8" pos:end="2218:10">int</name></type> <name pos:start="2218:12" pos:end="2218:28">open_input_stream</name><parameter_list pos:start="2218:29" pos:end="2218:62">(<parameter pos:start="2218:30" pos:end="2218:43"><decl pos:start="2218:30" pos:end="2218:43"><type pos:start="2218:30" pos:end="2218:43"><name pos:start="2218:30" pos:end="2218:40">HTTPContext</name> <modifier pos:start="2218:42" pos:end="2218:42">*</modifier></type><name pos:start="2218:43" pos:end="2218:43">c</name></decl></parameter>, <parameter pos:start="2218:46" pos:end="2218:61"><decl pos:start="2218:46" pos:end="2218:61"><type pos:start="2218:46" pos:end="2218:61"><specifier pos:start="2218:46" pos:end="2218:50">const</specifier> <name pos:start="2218:52" pos:end="2218:55">char</name> <modifier pos:start="2218:57" pos:end="2218:57">*</modifier></type><name pos:start="2218:58" pos:end="2218:61">info</name></decl></parameter>)</parameter_list>
<block pos:start="2219:1" pos:end="2303:1">{<block_content pos:start="2220:5" pos:end="2302:13">
    <decl_stmt pos:start="2220:5" pos:end="2220:18"><decl pos:start="2220:5" pos:end="2220:17"><type pos:start="2220:5" pos:end="2220:8"><name pos:start="2220:5" pos:end="2220:8">char</name></type> <name pos:start="2220:10" pos:end="2220:17"><name pos:start="2220:10" pos:end="2220:12">buf</name><index pos:start="2220:13" pos:end="2220:17">[<expr pos:start="2220:14" pos:end="2220:16"><literal type="number" pos:start="2220:14" pos:end="2220:16">128</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="2221:5" pos:end="2221:30"><decl pos:start="2221:5" pos:end="2221:29"><type pos:start="2221:5" pos:end="2221:8"><name pos:start="2221:5" pos:end="2221:8">char</name></type> <name pos:start="2221:10" pos:end="2221:29"><name pos:start="2221:10" pos:end="2221:23">input_filename</name><index pos:start="2221:24" pos:end="2221:29">[<expr pos:start="2221:25" pos:end="2221:28"><literal type="number" pos:start="2221:25" pos:end="2221:28">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="2222:5" pos:end="2222:30"><decl pos:start="2222:5" pos:end="2222:29"><type pos:start="2222:5" pos:end="2222:21"><name pos:start="2222:5" pos:end="2222:19">AVFormatContext</name> <modifier pos:start="2222:21" pos:end="2222:21">*</modifier></type><name pos:start="2222:22" pos:end="2222:22">s</name> <init pos:start="2222:24" pos:end="2222:29">= <expr pos:start="2222:26" pos:end="2222:29"><name pos:start="2222:26" pos:end="2222:29">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="2223:5" pos:end="2223:25"><decl pos:start="2223:5" pos:end="2223:16"><type pos:start="2223:5" pos:end="2223:7"><name pos:start="2223:5" pos:end="2223:7">int</name></type> <name pos:start="2223:9" pos:end="2223:16">buf_size</name></decl>, <decl pos:start="2223:19" pos:end="2223:19"><type ref="prev" pos:start="2223:5" pos:end="2223:7"/><name pos:start="2223:19" pos:end="2223:19">i</name></decl>, <decl pos:start="2223:22" pos:end="2223:24"><type ref="prev" pos:start="2223:5" pos:end="2223:7"/><name pos:start="2223:22" pos:end="2223:24">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2224:5" pos:end="2224:23"><decl pos:start="2224:5" pos:end="2224:22"><type pos:start="2224:5" pos:end="2224:11"><name pos:start="2224:5" pos:end="2224:11">int64_t</name></type> <name pos:start="2224:13" pos:end="2224:22">stream_pos</name></decl>;</decl_stmt>

    <comment type="block" pos:start="2226:5" pos:end="2226:24">/* find file name */</comment>
    <if_stmt pos:start="2227:5" pos:end="2252:5"><if pos:start="2227:5" pos:end="2241:5">if <condition pos:start="2227:8" pos:end="2227:24">(<expr pos:start="2227:9" pos:end="2227:23"><name pos:start="2227:9" pos:end="2227:23"><name pos:start="2227:9" pos:end="2227:9">c</name><operator pos:start="2227:10" pos:end="2227:11">-&gt;</operator><name pos:start="2227:12" pos:end="2227:17">stream</name><operator pos:start="2227:18" pos:end="2227:19">-&gt;</operator><name pos:start="2227:20" pos:end="2227:23">feed</name></name></expr>)</condition> <block pos:start="2227:26" pos:end="2241:5">{<block_content pos:start="2228:9" pos:end="2240:77">
        <expr_stmt pos:start="2228:9" pos:end="2228:63"><expr pos:start="2228:9" pos:end="2228:62"><call pos:start="2228:9" pos:end="2228:62"><name pos:start="2228:9" pos:end="2228:14">strcpy</name><argument_list pos:start="2228:15" pos:end="2228:62">(<argument pos:start="2228:16" pos:end="2228:29"><expr pos:start="2228:16" pos:end="2228:29"><name pos:start="2228:16" pos:end="2228:29">input_filename</name></expr></argument>, <argument pos:start="2228:32" pos:end="2228:61"><expr pos:start="2228:32" pos:end="2228:61"><name pos:start="2228:32" pos:end="2228:61"><name pos:start="2228:32" pos:end="2228:32">c</name><operator pos:start="2228:33" pos:end="2228:34">-&gt;</operator><name pos:start="2228:35" pos:end="2228:40">stream</name><operator pos:start="2228:41" pos:end="2228:42">-&gt;</operator><name pos:start="2228:43" pos:end="2228:46">feed</name><operator pos:start="2228:47" pos:end="2228:48">-&gt;</operator><name pos:start="2228:49" pos:end="2228:61">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2229:9" pos:end="2229:35"><expr pos:start="2229:9" pos:end="2229:34"><name pos:start="2229:9" pos:end="2229:16">buf_size</name> <operator pos:start="2229:18" pos:end="2229:18">=</operator> <name pos:start="2229:20" pos:end="2229:34">FFM_PACKET_SIZE</name></expr>;</expr_stmt>
        <comment type="block" pos:start="2230:9" pos:end="2230:46">/* compute position (absolute time) */</comment>
        <if_stmt pos:start="2231:9" pos:end="2240:77"><if pos:start="2231:9" pos:end="2236:9">if <condition pos:start="2231:12" pos:end="2231:61">(<expr pos:start="2231:13" pos:end="2231:60"><call pos:start="2231:13" pos:end="2231:60"><name pos:start="2231:13" pos:end="2231:28">av_find_info_tag</name><argument_list pos:start="2231:29" pos:end="2231:60">(<argument pos:start="2231:30" pos:end="2231:32"><expr pos:start="2231:30" pos:end="2231:32"><name pos:start="2231:30" pos:end="2231:32">buf</name></expr></argument>, <argument pos:start="2231:35" pos:end="2231:45"><expr pos:start="2231:35" pos:end="2231:45"><sizeof pos:start="2231:35" pos:end="2231:45">sizeof<argument_list pos:start="2231:41" pos:end="2231:45">(<argument pos:start="2231:42" pos:end="2231:44"><expr pos:start="2231:42" pos:end="2231:44"><name pos:start="2231:42" pos:end="2231:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="2231:48" pos:end="2231:53"><expr pos:start="2231:48" pos:end="2231:53"><literal type="string" pos:start="2231:48" pos:end="2231:53">"date"</literal></expr></argument>, <argument pos:start="2231:56" pos:end="2231:59"><expr pos:start="2231:56" pos:end="2231:59"><name pos:start="2231:56" pos:end="2231:59">info</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2231:63" pos:end="2236:9">{<block_content pos:start="2232:13" pos:end="2235:13">
            <if_stmt pos:start="2232:13" pos:end="2235:13"><if pos:start="2232:13" pos:end="2235:13">if <condition pos:start="2232:16" pos:end="2232:63">(<expr pos:start="2232:17" pos:end="2232:62"><operator pos:start="2232:17" pos:end="2232:17">(</operator><name pos:start="2232:18" pos:end="2232:20">ret</name> <operator pos:start="2232:22" pos:end="2232:22">=</operator> <call pos:start="2232:24" pos:end="2232:57"><name pos:start="2232:24" pos:end="2232:36">av_parse_time</name><argument_list pos:start="2232:37" pos:end="2232:57">(<argument pos:start="2232:38" pos:end="2232:48"><expr pos:start="2232:38" pos:end="2232:48"><operator pos:start="2232:38" pos:end="2232:38">&amp;</operator><name pos:start="2232:39" pos:end="2232:48">stream_pos</name></expr></argument>, <argument pos:start="2232:51" pos:end="2232:53"><expr pos:start="2232:51" pos:end="2232:53"><name pos:start="2232:51" pos:end="2232:53">buf</name></expr></argument>, <argument pos:start="2232:56" pos:end="2232:56"><expr pos:start="2232:56" pos:end="2232:56"><literal type="number" pos:start="2232:56" pos:end="2232:56">0</literal></expr></argument>)</argument_list></call><operator pos:start="2232:58" pos:end="2232:58">)</operator> <operator pos:start="2232:60" pos:end="2232:60">&lt;</operator> <literal type="number" pos:start="2232:62" pos:end="2232:62">0</literal></expr>)</condition> <block pos:start="2232:65" pos:end="2235:13">{<block_content pos:start="2233:17" pos:end="2234:27">
                <expr_stmt pos:start="2233:17" pos:end="2233:78"><expr pos:start="2233:17" pos:end="2233:77"><call pos:start="2233:17" pos:end="2233:77"><name pos:start="2233:17" pos:end="2233:24">http_log</name><argument_list pos:start="2233:25" pos:end="2233:77">(<argument pos:start="2233:26" pos:end="2233:71"><expr pos:start="2233:26" pos:end="2233:71"><literal type="string" pos:start="2233:26" pos:end="2233:71">"Invalid date specification '%s' for stream\n"</literal></expr></argument>, <argument pos:start="2233:74" pos:end="2233:76"><expr pos:start="2233:74" pos:end="2233:76"><name pos:start="2233:74" pos:end="2233:76">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="2234:17" pos:end="2234:27">return <expr pos:start="2234:24" pos:end="2234:26"><name pos:start="2234:24" pos:end="2234:26">ret</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="2236:11" pos:end="2239:9">else if <condition pos:start="2236:19" pos:end="2236:70">(<expr pos:start="2236:20" pos:end="2236:69"><call pos:start="2236:20" pos:end="2236:69"><name pos:start="2236:20" pos:end="2236:35">av_find_info_tag</name><argument_list pos:start="2236:36" pos:end="2236:69">(<argument pos:start="2236:37" pos:end="2236:39"><expr pos:start="2236:37" pos:end="2236:39"><name pos:start="2236:37" pos:end="2236:39">buf</name></expr></argument>, <argument pos:start="2236:42" pos:end="2236:52"><expr pos:start="2236:42" pos:end="2236:52"><sizeof pos:start="2236:42" pos:end="2236:52">sizeof<argument_list pos:start="2236:48" pos:end="2236:52">(<argument pos:start="2236:49" pos:end="2236:51"><expr pos:start="2236:49" pos:end="2236:51"><name pos:start="2236:49" pos:end="2236:51">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="2236:55" pos:end="2236:62"><expr pos:start="2236:55" pos:end="2236:62"><literal type="string" pos:start="2236:55" pos:end="2236:62">"buffer"</literal></expr></argument>, <argument pos:start="2236:65" pos:end="2236:68"><expr pos:start="2236:65" pos:end="2236:68"><name pos:start="2236:65" pos:end="2236:68">info</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2236:72" pos:end="2239:9">{<block_content pos:start="2237:13" pos:end="2238:69">
            <decl_stmt pos:start="2237:13" pos:end="2237:47"><decl pos:start="2237:13" pos:end="2237:46"><type pos:start="2237:13" pos:end="2237:15"><name pos:start="2237:13" pos:end="2237:15">int</name></type> <name pos:start="2237:17" pos:end="2237:25">prebuffer</name> <init pos:start="2237:27" pos:end="2237:46">= <expr pos:start="2237:29" pos:end="2237:46"><call pos:start="2237:29" pos:end="2237:46"><name pos:start="2237:29" pos:end="2237:34">strtol</name><argument_list pos:start="2237:35" pos:end="2237:46">(<argument pos:start="2237:36" pos:end="2237:38"><expr pos:start="2237:36" pos:end="2237:38"><name pos:start="2237:36" pos:end="2237:38">buf</name></expr></argument>, <argument pos:start="2237:41" pos:end="2237:41"><expr pos:start="2237:41" pos:end="2237:41"><literal type="number" pos:start="2237:41" pos:end="2237:41">0</literal></expr></argument>, <argument pos:start="2237:44" pos:end="2237:45"><expr pos:start="2237:44" pos:end="2237:45"><literal type="number" pos:start="2237:44" pos:end="2237:45">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="2238:13" pos:end="2238:69"><expr pos:start="2238:13" pos:end="2238:68"><name pos:start="2238:13" pos:end="2238:22">stream_pos</name> <operator pos:start="2238:24" pos:end="2238:24">=</operator> <call pos:start="2238:26" pos:end="2238:37"><name pos:start="2238:26" pos:end="2238:35">av_gettime</name><argument_list pos:start="2238:36" pos:end="2238:37">()</argument_list></call> <operator pos:start="2238:39" pos:end="2238:39">-</operator> <name pos:start="2238:41" pos:end="2238:49">prebuffer</name> <operator pos:start="2238:51" pos:end="2238:51">*</operator> <operator pos:start="2238:53" pos:end="2238:53">(</operator><name pos:start="2238:54" pos:end="2238:60">int64_t</name><operator pos:start="2238:61" pos:end="2238:61">)</operator><literal type="number" pos:start="2238:62" pos:end="2238:68">1000000</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="2239:11" pos:end="2240:77">else<block type="pseudo" pos:start="2240:13" pos:end="2240:77"><block_content pos:start="2240:13" pos:end="2240:77">
            <expr_stmt pos:start="2240:13" pos:end="2240:77"><expr pos:start="2240:13" pos:end="2240:76"><name pos:start="2240:13" pos:end="2240:22">stream_pos</name> <operator pos:start="2240:24" pos:end="2240:24">=</operator> <call pos:start="2240:26" pos:end="2240:37"><name pos:start="2240:26" pos:end="2240:35">av_gettime</name><argument_list pos:start="2240:36" pos:end="2240:37">()</argument_list></call> <operator pos:start="2240:39" pos:end="2240:39">-</operator> <name pos:start="2240:41" pos:end="2240:60"><name pos:start="2240:41" pos:end="2240:41">c</name><operator pos:start="2240:42" pos:end="2240:43">-&gt;</operator><name pos:start="2240:44" pos:end="2240:49">stream</name><operator pos:start="2240:50" pos:end="2240:51">-&gt;</operator><name pos:start="2240:52" pos:end="2240:60">prebuffer</name></name> <operator pos:start="2240:62" pos:end="2240:62">*</operator> <operator pos:start="2240:64" pos:end="2240:64">(</operator><name pos:start="2240:65" pos:end="2240:71">int64_t</name><operator pos:start="2240:72" pos:end="2240:72">)</operator><literal type="number" pos:start="2240:73" pos:end="2240:76">1000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if> <else pos:start="2241:7" pos:end="2252:5">else <block pos:start="2241:12" pos:end="2252:5">{<block_content pos:start="2242:9" pos:end="2251:27">
        <expr_stmt pos:start="2242:9" pos:end="2242:57"><expr pos:start="2242:9" pos:end="2242:56"><call pos:start="2242:9" pos:end="2242:56"><name pos:start="2242:9" pos:end="2242:14">strcpy</name><argument_list pos:start="2242:15" pos:end="2242:56">(<argument pos:start="2242:16" pos:end="2242:29"><expr pos:start="2242:16" pos:end="2242:29"><name pos:start="2242:16" pos:end="2242:29">input_filename</name></expr></argument>, <argument pos:start="2242:32" pos:end="2242:55"><expr pos:start="2242:32" pos:end="2242:55"><name pos:start="2242:32" pos:end="2242:55"><name pos:start="2242:32" pos:end="2242:32">c</name><operator pos:start="2242:33" pos:end="2242:34">-&gt;</operator><name pos:start="2242:35" pos:end="2242:40">stream</name><operator pos:start="2242:41" pos:end="2242:42">-&gt;</operator><name pos:start="2242:43" pos:end="2242:55">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2243:9" pos:end="2243:21"><expr pos:start="2243:9" pos:end="2243:20"><name pos:start="2243:9" pos:end="2243:16">buf_size</name> <operator pos:start="2243:18" pos:end="2243:18">=</operator> <literal type="number" pos:start="2243:20" pos:end="2243:20">0</literal></expr>;</expr_stmt>
        <comment type="block" pos:start="2244:9" pos:end="2244:46">/* compute position (relative time) */</comment>
        <if_stmt pos:start="2245:9" pos:end="2251:27"><if pos:start="2245:9" pos:end="2250:9">if <condition pos:start="2245:12" pos:end="2245:61">(<expr pos:start="2245:13" pos:end="2245:60"><call pos:start="2245:13" pos:end="2245:60"><name pos:start="2245:13" pos:end="2245:28">av_find_info_tag</name><argument_list pos:start="2245:29" pos:end="2245:60">(<argument pos:start="2245:30" pos:end="2245:32"><expr pos:start="2245:30" pos:end="2245:32"><name pos:start="2245:30" pos:end="2245:32">buf</name></expr></argument>, <argument pos:start="2245:35" pos:end="2245:45"><expr pos:start="2245:35" pos:end="2245:45"><sizeof pos:start="2245:35" pos:end="2245:45">sizeof<argument_list pos:start="2245:41" pos:end="2245:45">(<argument pos:start="2245:42" pos:end="2245:44"><expr pos:start="2245:42" pos:end="2245:44"><name pos:start="2245:42" pos:end="2245:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="2245:48" pos:end="2245:53"><expr pos:start="2245:48" pos:end="2245:53"><literal type="string" pos:start="2245:48" pos:end="2245:53">"date"</literal></expr></argument>, <argument pos:start="2245:56" pos:end="2245:59"><expr pos:start="2245:56" pos:end="2245:59"><name pos:start="2245:56" pos:end="2245:59">info</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2245:63" pos:end="2250:9">{<block_content pos:start="2246:13" pos:end="2249:13">
            <if_stmt pos:start="2246:13" pos:end="2249:13"><if pos:start="2246:13" pos:end="2249:13">if <condition pos:start="2246:16" pos:end="2246:63">(<expr pos:start="2246:17" pos:end="2246:62"><operator pos:start="2246:17" pos:end="2246:17">(</operator><name pos:start="2246:18" pos:end="2246:20">ret</name> <operator pos:start="2246:22" pos:end="2246:22">=</operator> <call pos:start="2246:24" pos:end="2246:57"><name pos:start="2246:24" pos:end="2246:36">av_parse_time</name><argument_list pos:start="2246:37" pos:end="2246:57">(<argument pos:start="2246:38" pos:end="2246:48"><expr pos:start="2246:38" pos:end="2246:48"><operator pos:start="2246:38" pos:end="2246:38">&amp;</operator><name pos:start="2246:39" pos:end="2246:48">stream_pos</name></expr></argument>, <argument pos:start="2246:51" pos:end="2246:53"><expr pos:start="2246:51" pos:end="2246:53"><name pos:start="2246:51" pos:end="2246:53">buf</name></expr></argument>, <argument pos:start="2246:56" pos:end="2246:56"><expr pos:start="2246:56" pos:end="2246:56"><literal type="number" pos:start="2246:56" pos:end="2246:56">1</literal></expr></argument>)</argument_list></call><operator pos:start="2246:58" pos:end="2246:58">)</operator> <operator pos:start="2246:60" pos:end="2246:60">&lt;</operator> <literal type="number" pos:start="2246:62" pos:end="2246:62">0</literal></expr>)</condition> <block pos:start="2246:65" pos:end="2249:13">{<block_content pos:start="2247:17" pos:end="2248:27">
                <expr_stmt pos:start="2247:17" pos:end="2247:78"><expr pos:start="2247:17" pos:end="2247:77"><call pos:start="2247:17" pos:end="2247:77"><name pos:start="2247:17" pos:end="2247:24">http_log</name><argument_list pos:start="2247:25" pos:end="2247:77">(<argument pos:start="2247:26" pos:end="2247:71"><expr pos:start="2247:26" pos:end="2247:71"><literal type="string" pos:start="2247:26" pos:end="2247:71">"Invalid date specification '%s' for stream\n"</literal></expr></argument>, <argument pos:start="2247:74" pos:end="2247:76"><expr pos:start="2247:74" pos:end="2247:76"><name pos:start="2247:74" pos:end="2247:76">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="2248:17" pos:end="2248:27">return <expr pos:start="2248:24" pos:end="2248:26"><name pos:start="2248:24" pos:end="2248:26">ret</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else pos:start="2250:11" pos:end="2251:27">else<block type="pseudo" pos:start="2251:13" pos:end="2251:27"><block_content pos:start="2251:13" pos:end="2251:27">
            <expr_stmt pos:start="2251:13" pos:end="2251:27"><expr pos:start="2251:13" pos:end="2251:26"><name pos:start="2251:13" pos:end="2251:22">stream_pos</name> <operator pos:start="2251:24" pos:end="2251:24">=</operator> <literal type="number" pos:start="2251:26" pos:end="2251:26">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt pos:start="2253:5" pos:end="2256:5"><if pos:start="2253:5" pos:end="2256:5">if <condition pos:start="2253:8" pos:end="2253:27">(<expr pos:start="2253:9" pos:end="2253:26"><operator pos:start="2253:9" pos:end="2253:9">!</operator><name pos:start="2253:10" pos:end="2253:26"><name pos:start="2253:10" pos:end="2253:23">input_filename</name><index pos:start="2253:24" pos:end="2253:26">[<expr pos:start="2253:25" pos:end="2253:25"><literal type="number" pos:start="2253:25" pos:end="2253:25">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="2253:29" pos:end="2256:5">{<block_content pos:start="2254:9" pos:end="2255:31">
        <expr_stmt pos:start="2254:9" pos:end="2254:59"><expr pos:start="2254:9" pos:end="2254:58"><call pos:start="2254:9" pos:end="2254:58"><name pos:start="2254:9" pos:end="2254:16">http_log</name><argument_list pos:start="2254:17" pos:end="2254:58">(<argument pos:start="2254:18" pos:end="2254:57"><expr pos:start="2254:18" pos:end="2254:57"><literal type="string" pos:start="2254:18" pos:end="2254:57">"No filename was specified for stream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2255:9" pos:end="2255:31">return <expr pos:start="2255:16" pos:end="2255:30"><call pos:start="2255:16" pos:end="2255:30"><name pos:start="2255:16" pos:end="2255:22">AVERROR</name><argument_list pos:start="2255:23" pos:end="2255:30">(<argument pos:start="2255:24" pos:end="2255:29"><expr pos:start="2255:24" pos:end="2255:29"><name pos:start="2255:24" pos:end="2255:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="2258:5" pos:end="2258:21">/* open stream */</comment>
    <expr_stmt pos:start="2259:5" pos:end="2260:51"><expr pos:start="2259:5" pos:end="2260:50"><name pos:start="2259:5" pos:end="2259:7">ret</name> <operator pos:start="2259:9" pos:end="2259:9">=</operator> <call pos:start="2259:11" pos:end="2260:50"><name pos:start="2259:11" pos:end="2259:29">avformat_open_input</name><argument_list pos:start="2259:30" pos:end="2260:50">(<argument pos:start="2259:31" pos:end="2259:32"><expr pos:start="2259:31" pos:end="2259:32"><operator pos:start="2259:31" pos:end="2259:31">&amp;</operator><name pos:start="2259:32" pos:end="2259:32">s</name></expr></argument>, <argument pos:start="2259:35" pos:end="2259:48"><expr pos:start="2259:35" pos:end="2259:48"><name pos:start="2259:35" pos:end="2259:48">input_filename</name></expr></argument>, <argument pos:start="2259:51" pos:end="2259:65"><expr pos:start="2259:51" pos:end="2259:65"><name pos:start="2259:51" pos:end="2259:65"><name pos:start="2259:51" pos:end="2259:51">c</name><operator pos:start="2259:52" pos:end="2259:53">-&gt;</operator><name pos:start="2259:54" pos:end="2259:59">stream</name><operator pos:start="2259:60" pos:end="2259:61">-&gt;</operator><name pos:start="2259:62" pos:end="2259:65">ifmt</name></name></expr></argument>,
                              <argument pos:start="2260:31" pos:end="2260:49"><expr pos:start="2260:31" pos:end="2260:49"><operator pos:start="2260:31" pos:end="2260:31">&amp;</operator><name pos:start="2260:32" pos:end="2260:49"><name pos:start="2260:32" pos:end="2260:32">c</name><operator pos:start="2260:33" pos:end="2260:34">-&gt;</operator><name pos:start="2260:35" pos:end="2260:40">stream</name><operator pos:start="2260:41" pos:end="2260:42">-&gt;</operator><name pos:start="2260:43" pos:end="2260:49">in_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="2261:5" pos:end="2265:5"><if pos:start="2261:5" pos:end="2265:5">if <condition pos:start="2261:8" pos:end="2261:16">(<expr pos:start="2261:9" pos:end="2261:15"><name pos:start="2261:9" pos:end="2261:11">ret</name> <operator pos:start="2261:13" pos:end="2261:13">&lt;</operator> <literal type="number" pos:start="2261:15" pos:end="2261:15">0</literal></expr>)</condition> <block pos:start="2261:18" pos:end="2265:5">{<block_content pos:start="2262:9" pos:end="2264:19">
        <expr_stmt pos:start="2262:9" pos:end="2263:50"><expr pos:start="2262:9" pos:end="2263:49"><call pos:start="2262:9" pos:end="2263:49"><name pos:start="2262:9" pos:end="2262:16">http_log</name><argument_list pos:start="2262:17" pos:end="2263:49">(<argument pos:start="2262:18" pos:end="2262:50"><expr pos:start="2262:18" pos:end="2262:50"><literal type="string" pos:start="2262:18" pos:end="2262:50">"Could not open input '%s': %s\n"</literal></expr></argument>,
                 <argument pos:start="2263:18" pos:end="2263:31"><expr pos:start="2263:18" pos:end="2263:31"><name pos:start="2263:18" pos:end="2263:31">input_filename</name></expr></argument>, <argument pos:start="2263:34" pos:end="2263:48"><expr pos:start="2263:34" pos:end="2263:48"><call pos:start="2263:34" pos:end="2263:48"><name pos:start="2263:34" pos:end="2263:43">av_err2str</name><argument_list pos:start="2263:44" pos:end="2263:48">(<argument pos:start="2263:45" pos:end="2263:47"><expr pos:start="2263:45" pos:end="2263:47"><name pos:start="2263:45" pos:end="2263:47">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2264:9" pos:end="2264:19">return <expr pos:start="2264:16" pos:end="2264:18"><name pos:start="2264:16" pos:end="2264:18">ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="2267:5" pos:end="2267:25">/* set buffer size */</comment>
    <if_stmt pos:start="2268:5" pos:end="2274:5"><if pos:start="2268:5" pos:end="2274:5">if <condition pos:start="2268:8" pos:end="2268:21">(<expr pos:start="2268:9" pos:end="2268:20"><name pos:start="2268:9" pos:end="2268:16">buf_size</name> <operator pos:start="2268:18" pos:end="2268:18">&gt;</operator> <literal type="number" pos:start="2268:20" pos:end="2268:20">0</literal></expr>)</condition> <block pos:start="2268:23" pos:end="2274:5">{<block_content pos:start="2269:9" pos:end="2273:9">
        <expr_stmt pos:start="2269:9" pos:end="2269:49"><expr pos:start="2269:9" pos:end="2269:48"><name pos:start="2269:9" pos:end="2269:11">ret</name> <operator pos:start="2269:13" pos:end="2269:13">=</operator> <call pos:start="2269:15" pos:end="2269:48"><name pos:start="2269:15" pos:end="2269:31">ffio_set_buf_size</name><argument_list pos:start="2269:32" pos:end="2269:48">(<argument pos:start="2269:33" pos:end="2269:37"><expr pos:start="2269:33" pos:end="2269:37"><name pos:start="2269:33" pos:end="2269:37"><name pos:start="2269:33" pos:end="2269:33">s</name><operator pos:start="2269:34" pos:end="2269:35">-&gt;</operator><name pos:start="2269:36" pos:end="2269:37">pb</name></name></expr></argument>, <argument pos:start="2269:40" pos:end="2269:47"><expr pos:start="2269:40" pos:end="2269:47"><name pos:start="2269:40" pos:end="2269:47">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2270:9" pos:end="2273:9"><if pos:start="2270:9" pos:end="2273:9">if <condition pos:start="2270:12" pos:end="2270:20">(<expr pos:start="2270:13" pos:end="2270:19"><name pos:start="2270:13" pos:end="2270:15">ret</name> <operator pos:start="2270:17" pos:end="2270:17">&lt;</operator> <literal type="number" pos:start="2270:19" pos:end="2270:19">0</literal></expr>)</condition> <block pos:start="2270:22" pos:end="2273:9">{<block_content pos:start="2271:13" pos:end="2272:23">
            <expr_stmt pos:start="2271:13" pos:end="2271:52"><expr pos:start="2271:13" pos:end="2271:51"><call pos:start="2271:13" pos:end="2271:51"><name pos:start="2271:13" pos:end="2271:20">http_log</name><argument_list pos:start="2271:21" pos:end="2271:51">(<argument pos:start="2271:22" pos:end="2271:50"><expr pos:start="2271:22" pos:end="2271:50"><literal type="string" pos:start="2271:22" pos:end="2271:50">"Failed to set buffer size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2272:13" pos:end="2272:23">return <expr pos:start="2272:20" pos:end="2272:22"><name pos:start="2272:20" pos:end="2272:22">ret</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="2276:5" pos:end="2276:34"><expr pos:start="2276:5" pos:end="2276:33"><name pos:start="2276:5" pos:end="2276:12"><name pos:start="2276:5" pos:end="2276:5">s</name><operator pos:start="2276:6" pos:end="2276:7">-&gt;</operator><name pos:start="2276:8" pos:end="2276:12">flags</name></name> <operator pos:start="2276:14" pos:end="2276:15">|=</operator> <name pos:start="2276:17" pos:end="2276:33">AVFMT_FLAG_GENPTS</name></expr>;</expr_stmt>
    <expr_stmt pos:start="2277:5" pos:end="2277:18"><expr pos:start="2277:5" pos:end="2277:17"><name pos:start="2277:5" pos:end="2277:13"><name pos:start="2277:5" pos:end="2277:5">c</name><operator pos:start="2277:6" pos:end="2277:7">-&gt;</operator><name pos:start="2277:8" pos:end="2277:13">fmt_in</name></name> <operator pos:start="2277:15" pos:end="2277:15">=</operator> <name pos:start="2277:17" pos:end="2277:17">s</name></expr>;</expr_stmt>
    <if_stmt pos:start="2278:5" pos:end="2284:6"><if pos:start="2278:5" pos:end="2284:6">if <condition pos:start="2278:8" pos:end="2278:41">(<expr pos:start="2278:9" pos:end="2278:39"><call pos:start="2278:9" pos:end="2278:39"><name pos:start="2278:9" pos:end="2278:14">strcmp</name><argument_list pos:start="2278:15" pos:end="2278:39">(<argument pos:start="2278:16" pos:end="2278:31"><expr pos:start="2278:16" pos:end="2278:31"><name pos:start="2278:16" pos:end="2278:31"><name pos:start="2278:16" pos:end="2278:16">s</name><operator pos:start="2278:17" pos:end="2278:18">-&gt;</operator><name pos:start="2278:19" pos:end="2278:25">iformat</name><operator pos:start="2278:26" pos:end="2278:27">-&gt;</operator><name pos:start="2278:28" pos:end="2278:31">name</name></name></expr></argument>, <argument pos:start="2278:34" pos:end="2278:38"><expr pos:start="2278:34" pos:end="2278:38"><literal type="string" pos:start="2278:34" pos:end="2278:38">"ffm"</literal></expr></argument>)</argument_list></call></expr> )</condition><block pos:start="2278:42" pos:end="2284:6">{<block_content pos:start="2279:1" pos:end="2284:5">
<if_stmt pos:start="2279:1" pos:end="2284:5"><if pos:start="2279:1" pos:end="2284:5">if<condition pos:start="2279:3" pos:end="2280:63">(
        <expr pos:start="2280:9" pos:end="2280:62"><operator pos:start="2280:9" pos:end="2280:9">(</operator><name pos:start="2280:10" pos:end="2280:12">ret</name> <operator pos:start="2280:14" pos:end="2280:14">=</operator> <call pos:start="2280:16" pos:end="2280:57"><name pos:start="2280:16" pos:end="2280:40">avformat_find_stream_info</name><argument_list pos:start="2280:41" pos:end="2280:57">(<argument pos:start="2280:42" pos:end="2280:50"><expr pos:start="2280:42" pos:end="2280:50"><name pos:start="2280:42" pos:end="2280:50"><name pos:start="2280:42" pos:end="2280:42">c</name><operator pos:start="2280:43" pos:end="2280:44">-&gt;</operator><name pos:start="2280:45" pos:end="2280:50">fmt_in</name></name></expr></argument>, <argument pos:start="2280:53" pos:end="2280:56"><expr pos:start="2280:53" pos:end="2280:56"><name pos:start="2280:53" pos:end="2280:56">NULL</name></expr></argument>)</argument_list></call><operator pos:start="2280:58" pos:end="2280:58">)</operator> <operator pos:start="2280:60" pos:end="2280:60">&lt;</operator> <literal type="number" pos:start="2280:62" pos:end="2280:62">0</literal></expr>)</condition> <block pos:start="2280:65" pos:end="2284:5">{<block_content pos:start="2281:9" pos:end="2283:19">
        <expr_stmt pos:start="2281:9" pos:end="2281:80"><expr pos:start="2281:9" pos:end="2281:79"><call pos:start="2281:9" pos:end="2281:79"><name pos:start="2281:9" pos:end="2281:16">http_log</name><argument_list pos:start="2281:17" pos:end="2281:79">(<argument pos:start="2281:18" pos:end="2281:62"><expr pos:start="2281:18" pos:end="2281:62"><literal type="string" pos:start="2281:18" pos:end="2281:62">"Could not find stream info for input '%s'\n"</literal></expr></argument>, <argument pos:start="2281:65" pos:end="2281:78"><expr pos:start="2281:65" pos:end="2281:78"><name pos:start="2281:65" pos:end="2281:78">input_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2282:9" pos:end="2282:33"><expr pos:start="2282:9" pos:end="2282:32"><call pos:start="2282:9" pos:end="2282:32"><name pos:start="2282:9" pos:end="2282:28">avformat_close_input</name><argument_list pos:start="2282:29" pos:end="2282:32">(<argument pos:start="2282:30" pos:end="2282:31"><expr pos:start="2282:30" pos:end="2282:31"><operator pos:start="2282:30" pos:end="2282:30">&amp;</operator><name pos:start="2282:31" pos:end="2282:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2283:9" pos:end="2283:19">return <expr pos:start="2283:16" pos:end="2283:18"><name pos:start="2283:16" pos:end="2283:18">ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="2286:5" pos:end="2287:37">/* choose stream as clock source (we favor the video stream if
     * present) for packet sending */</comment>
    <expr_stmt pos:start="2288:5" pos:end="2288:28"><expr pos:start="2288:5" pos:end="2288:27"><name pos:start="2288:5" pos:end="2288:23"><name pos:start="2288:5" pos:end="2288:5">c</name><operator pos:start="2288:6" pos:end="2288:7">-&gt;</operator><name pos:start="2288:8" pos:end="2288:23">pts_stream_index</name></name> <operator pos:start="2288:25" pos:end="2288:25">=</operator> <literal type="number" pos:start="2288:27" pos:end="2288:27">0</literal></expr>;</expr_stmt>
    <for pos:start="2289:5" pos:end="2295:5">for<control pos:start="2289:8" pos:end="2289:40">(<init pos:start="2289:9" pos:end="2289:12"><expr pos:start="2289:9" pos:end="2289:11"><name pos:start="2289:9" pos:end="2289:9">i</name><operator pos:start="2289:10" pos:end="2289:10">=</operator><literal type="number" pos:start="2289:11" pos:end="2289:11">0</literal></expr>;</init><condition pos:start="2289:13" pos:end="2289:36"><expr pos:start="2289:13" pos:end="2289:35"><name pos:start="2289:13" pos:end="2289:13">i</name><operator pos:start="2289:14" pos:end="2289:14">&lt;</operator><name pos:start="2289:15" pos:end="2289:35"><name pos:start="2289:15" pos:end="2289:15">c</name><operator pos:start="2289:16" pos:end="2289:17">-&gt;</operator><name pos:start="2289:18" pos:end="2289:23">stream</name><operator pos:start="2289:24" pos:end="2289:25">-&gt;</operator><name pos:start="2289:26" pos:end="2289:35">nb_streams</name></name></expr>;</condition><incr pos:start="2289:37" pos:end="2289:39"><expr pos:start="2289:37" pos:end="2289:39"><name pos:start="2289:37" pos:end="2289:37">i</name><operator pos:start="2289:38" pos:end="2289:39">++</operator></expr></incr>)</control> <block pos:start="2289:42" pos:end="2295:5">{<block_content pos:start="2290:9" pos:end="2294:10">
        <if_stmt pos:start="2290:9" pos:end="2294:10"><if pos:start="2290:9" pos:end="2294:10">if <condition pos:start="2290:12" pos:end="2290:38">(<expr pos:start="2290:13" pos:end="2290:36"><name pos:start="2290:13" pos:end="2290:31"><name pos:start="2290:13" pos:end="2290:13">c</name><operator pos:start="2290:14" pos:end="2290:15">-&gt;</operator><name pos:start="2290:16" pos:end="2290:31">pts_stream_index</name></name> <operator pos:start="2290:33" pos:end="2290:34">==</operator> <literal type="number" pos:start="2290:36" pos:end="2290:36">0</literal></expr> )</condition><block pos:start="2290:39" pos:end="2294:10">{<block_content pos:start="2291:1" pos:end="2294:9">
<if_stmt pos:start="2291:1" pos:end="2294:9"><if pos:start="2291:1" pos:end="2294:9">if<condition pos:start="2291:3" pos:end="2292:75">(
            <expr pos:start="2292:13" pos:end="2292:74"><name pos:start="2292:13" pos:end="2292:33"><name pos:start="2292:13" pos:end="2292:13">c</name><operator pos:start="2292:14" pos:end="2292:15">-&gt;</operator><name pos:start="2292:16" pos:end="2292:21">stream</name><operator pos:start="2292:22" pos:end="2292:23">-&gt;</operator><name pos:start="2292:24" pos:end="2292:30">streams</name><index pos:start="2292:31" pos:end="2292:33">[<expr pos:start="2292:32" pos:end="2292:32"><name pos:start="2292:32" pos:end="2292:32">i</name></expr>]</index></name><operator pos:start="2292:34" pos:end="2292:35">-&gt;</operator><name pos:start="2292:36" pos:end="2292:52"><name pos:start="2292:36" pos:end="2292:40">codec</name><operator pos:start="2292:41" pos:end="2292:42">-&gt;</operator><name pos:start="2292:43" pos:end="2292:52">codec_type</name></name> <operator pos:start="2292:54" pos:end="2292:55">==</operator> <name pos:start="2292:57" pos:end="2292:74">AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block pos:start="2292:77" pos:end="2294:9">{<block_content pos:start="2293:13" pos:end="2293:36">
            <expr_stmt pos:start="2293:13" pos:end="2293:36"><expr pos:start="2293:13" pos:end="2293:35"><name pos:start="2293:13" pos:end="2293:31"><name pos:start="2293:13" pos:end="2293:13">c</name><operator pos:start="2293:14" pos:end="2293:15">-&gt;</operator><name pos:start="2293:16" pos:end="2293:31">pts_stream_index</name></name> <operator pos:start="2293:33" pos:end="2293:33">=</operator> <name pos:start="2293:35" pos:end="2293:35">i</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt pos:start="2297:5" pos:end="2298:52"><if pos:start="2297:5" pos:end="2298:52">if <condition pos:start="2297:8" pos:end="2297:38">(<expr pos:start="2297:9" pos:end="2297:37"><name pos:start="2297:9" pos:end="2297:37"><name pos:start="2297:9" pos:end="2297:9">c</name><operator pos:start="2297:10" pos:end="2297:11">-&gt;</operator><name pos:start="2297:12" pos:end="2297:17">fmt_in</name><operator pos:start="2297:18" pos:end="2297:19">-&gt;</operator><name pos:start="2297:20" pos:end="2297:26">iformat</name><operator pos:start="2297:27" pos:end="2297:28">-&gt;</operator><name pos:start="2297:29" pos:end="2297:37">read_seek</name></name></expr>)</condition><block type="pseudo" pos:start="2298:9" pos:end="2298:52"><block_content pos:start="2298:9" pos:end="2298:52">
        <expr_stmt pos:start="2298:9" pos:end="2298:52"><expr pos:start="2298:9" pos:end="2298:51"><call pos:start="2298:9" pos:end="2298:51"><name pos:start="2298:9" pos:end="2298:21">av_seek_frame</name><argument_list pos:start="2298:22" pos:end="2298:51">(<argument pos:start="2298:23" pos:end="2298:31"><expr pos:start="2298:23" pos:end="2298:31"><name pos:start="2298:23" pos:end="2298:31"><name pos:start="2298:23" pos:end="2298:23">c</name><operator pos:start="2298:24" pos:end="2298:25">-&gt;</operator><name pos:start="2298:26" pos:end="2298:31">fmt_in</name></name></expr></argument>, <argument pos:start="2298:34" pos:end="2298:35"><expr pos:start="2298:34" pos:end="2298:35"><operator pos:start="2298:34" pos:end="2298:34">-</operator><literal type="number" pos:start="2298:35" pos:end="2298:35">1</literal></expr></argument>, <argument pos:start="2298:38" pos:end="2298:47"><expr pos:start="2298:38" pos:end="2298:47"><name pos:start="2298:38" pos:end="2298:47">stream_pos</name></expr></argument>, <argument pos:start="2298:50" pos:end="2298:50"><expr pos:start="2298:50" pos:end="2298:50"><literal type="number" pos:start="2298:50" pos:end="2298:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block" pos:start="2299:5" pos:end="2299:71">/* set the start time (needed for maxtime and RTP packet timing) */</comment>
    <expr_stmt pos:start="2300:5" pos:end="2300:29"><expr pos:start="2300:5" pos:end="2300:28"><name pos:start="2300:5" pos:end="2300:17"><name pos:start="2300:5" pos:end="2300:5">c</name><operator pos:start="2300:6" pos:end="2300:7">-&gt;</operator><name pos:start="2300:8" pos:end="2300:17">start_time</name></name> <operator pos:start="2300:19" pos:end="2300:19">=</operator> <name pos:start="2300:21" pos:end="2300:28">cur_time</name></expr>;</expr_stmt>
    <expr_stmt pos:start="2301:5" pos:end="2301:34"><expr pos:start="2301:5" pos:end="2301:33"><name pos:start="2301:5" pos:end="2301:16"><name pos:start="2301:5" pos:end="2301:5">c</name><operator pos:start="2301:6" pos:end="2301:7">-&gt;</operator><name pos:start="2301:8" pos:end="2301:16">first_pts</name></name> <operator pos:start="2301:18" pos:end="2301:18">=</operator> <name pos:start="2301:20" pos:end="2301:33">AV_NOPTS_VALUE</name></expr>;</expr_stmt>
    <return pos:start="2302:5" pos:end="2302:13">return <expr pos:start="2302:12" pos:end="2302:12"><literal type="number" pos:start="2302:12" pos:end="2302:12">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="2305:1" pos:end="2305:37">/* return the server clock (in us) */</comment>
<function pos:start="2306:1" pos:end="2310:1"><type pos:start="2306:1" pos:end="2306:14"><specifier pos:start="2306:1" pos:end="2306:6">static</specifier> <name pos:start="2306:8" pos:end="2306:14">int64_t</name></type> <name pos:start="2306:16" pos:end="2306:31">get_server_clock</name><parameter_list pos:start="2306:32" pos:end="2306:47">(<parameter pos:start="2306:33" pos:end="2306:46"><decl pos:start="2306:33" pos:end="2306:46"><type pos:start="2306:33" pos:end="2306:45"><name pos:start="2306:33" pos:end="2306:43">HTTPContext</name> <modifier pos:start="2306:45" pos:end="2306:45">*</modifier></type><name pos:start="2306:46" pos:end="2306:46">c</name></decl></parameter>)</parameter_list>
<block pos:start="2307:1" pos:end="2310:1">{<block_content pos:start="2309:5" pos:end="2309:45">
    <comment type="block" pos:start="2308:5" pos:end="2308:52">/* compute current pts value from system time */</comment>
    <return pos:start="2309:5" pos:end="2309:45">return <expr pos:start="2309:12" pos:end="2309:44"><operator pos:start="2309:12" pos:end="2309:12">(</operator><name pos:start="2309:13" pos:end="2309:20">cur_time</name> <operator pos:start="2309:22" pos:end="2309:22">-</operator> <name pos:start="2309:24" pos:end="2309:36"><name pos:start="2309:24" pos:end="2309:24">c</name><operator pos:start="2309:25" pos:end="2309:26">-&gt;</operator><name pos:start="2309:27" pos:end="2309:36">start_time</name></name><operator pos:start="2309:37" pos:end="2309:37">)</operator> <operator pos:start="2309:39" pos:end="2309:39">*</operator> <literal type="number" pos:start="2309:41" pos:end="2309:44">1000</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="2312:1" pos:end="2312:80">/* return the estimated time (in us) at which the current packet must be sent */</comment>
<function pos:start="2313:1" pos:end="2324:1"><type pos:start="2313:1" pos:end="2313:14"><specifier pos:start="2313:1" pos:end="2313:6">static</specifier> <name pos:start="2313:8" pos:end="2313:14">int64_t</name></type> <name pos:start="2313:16" pos:end="2313:36">get_packet_send_clock</name><parameter_list pos:start="2313:37" pos:end="2313:52">(<parameter pos:start="2313:38" pos:end="2313:51"><decl pos:start="2313:38" pos:end="2313:51"><type pos:start="2313:38" pos:end="2313:50"><name pos:start="2313:38" pos:end="2313:48">HTTPContext</name> <modifier pos:start="2313:50" pos:end="2313:50">*</modifier></type><name pos:start="2313:51" pos:end="2313:51">c</name></decl></parameter>)</parameter_list>
<block pos:start="2314:1" pos:end="2324:1">{<block_content pos:start="2315:5" pos:end="2323:75">
    <decl_stmt pos:start="2315:5" pos:end="2315:44"><decl pos:start="2315:5" pos:end="2315:18"><type pos:start="2315:5" pos:end="2315:7"><name pos:start="2315:5" pos:end="2315:7">int</name></type> <name pos:start="2315:9" pos:end="2315:18">bytes_left</name></decl>, <decl pos:start="2315:21" pos:end="2315:30"><type ref="prev" pos:start="2315:5" pos:end="2315:7"/><name pos:start="2315:21" pos:end="2315:30">bytes_sent</name></decl>, <decl pos:start="2315:33" pos:end="2315:43"><type ref="prev" pos:start="2315:5" pos:end="2315:7"/><name pos:start="2315:33" pos:end="2315:43">frame_bytes</name></decl>;</decl_stmt>

    <expr_stmt pos:start="2317:5" pos:end="2317:37"><expr pos:start="2317:5" pos:end="2317:36"><name pos:start="2317:5" pos:end="2317:15">frame_bytes</name> <operator pos:start="2317:17" pos:end="2317:17">=</operator> <name pos:start="2317:19" pos:end="2317:36"><name pos:start="2317:19" pos:end="2317:19">c</name><operator pos:start="2317:20" pos:end="2317:21">-&gt;</operator><name pos:start="2317:22" pos:end="2317:36">cur_frame_bytes</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="2318:5" pos:end="2319:26"><if pos:start="2318:5" pos:end="2319:26">if <condition pos:start="2318:8" pos:end="2318:25">(<expr pos:start="2318:9" pos:end="2318:24"><name pos:start="2318:9" pos:end="2318:19">frame_bytes</name> <operator pos:start="2318:21" pos:end="2318:22">&lt;=</operator> <literal type="number" pos:start="2318:24" pos:end="2318:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2319:9" pos:end="2319:26"><block_content pos:start="2319:9" pos:end="2319:26">
        <return pos:start="2319:9" pos:end="2319:26">return <expr pos:start="2319:16" pos:end="2319:25"><name pos:start="2319:16" pos:end="2319:25"><name pos:start="2319:16" pos:end="2319:16">c</name><operator pos:start="2319:17" pos:end="2319:18">-&gt;</operator><name pos:start="2319:19" pos:end="2319:25">cur_pts</name></name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="2321:5" pos:end="2321:47"><expr pos:start="2321:5" pos:end="2321:46"><name pos:start="2321:5" pos:end="2321:14">bytes_left</name> <operator pos:start="2321:16" pos:end="2321:16">=</operator> <name pos:start="2321:18" pos:end="2321:30"><name pos:start="2321:18" pos:end="2321:18">c</name><operator pos:start="2321:19" pos:end="2321:20">-&gt;</operator><name pos:start="2321:21" pos:end="2321:30">buffer_end</name></name> <operator pos:start="2321:32" pos:end="2321:32">-</operator> <name pos:start="2321:34" pos:end="2321:46"><name pos:start="2321:34" pos:end="2321:34">c</name><operator pos:start="2321:35" pos:end="2321:36">-&gt;</operator><name pos:start="2321:37" pos:end="2321:46">buffer_ptr</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="2322:5" pos:end="2322:42"><expr pos:start="2322:5" pos:end="2322:41"><name pos:start="2322:5" pos:end="2322:14">bytes_sent</name> <operator pos:start="2322:16" pos:end="2322:16">=</operator> <name pos:start="2322:18" pos:end="2322:28">frame_bytes</name> <operator pos:start="2322:30" pos:end="2322:30">-</operator> <name pos:start="2322:32" pos:end="2322:41">bytes_left</name></expr>;</expr_stmt>
    <return pos:start="2323:5" pos:end="2323:75">return <expr pos:start="2323:12" pos:end="2323:74"><name pos:start="2323:12" pos:end="2323:21"><name pos:start="2323:12" pos:end="2323:12">c</name><operator pos:start="2323:13" pos:end="2323:14">-&gt;</operator><name pos:start="2323:15" pos:end="2323:21">cur_pts</name></name> <operator pos:start="2323:23" pos:end="2323:23">+</operator> <operator pos:start="2323:25" pos:end="2323:25">(</operator><name pos:start="2323:26" pos:end="2323:46"><name pos:start="2323:26" pos:end="2323:26">c</name><operator pos:start="2323:27" pos:end="2323:28">-&gt;</operator><name pos:start="2323:29" pos:end="2323:46">cur_frame_duration</name></name> <operator pos:start="2323:48" pos:end="2323:48">*</operator> <name pos:start="2323:50" pos:end="2323:59">bytes_sent</name><operator pos:start="2323:60" pos:end="2323:60">)</operator> <operator pos:start="2323:62" pos:end="2323:62">/</operator> <name pos:start="2323:64" pos:end="2323:74">frame_bytes</name></expr>;</return>
</block_content>}</block></function>


<function pos:start="2327:1" pos:end="2563:1"><type pos:start="2327:1" pos:end="2327:10"><specifier pos:start="2327:1" pos:end="2327:6">static</specifier> <name pos:start="2327:8" pos:end="2327:10">int</name></type> <name pos:start="2327:12" pos:end="2327:28">http_prepare_data</name><parameter_list pos:start="2327:29" pos:end="2327:44">(<parameter pos:start="2327:30" pos:end="2327:43"><decl pos:start="2327:30" pos:end="2327:43"><type pos:start="2327:30" pos:end="2327:42"><name pos:start="2327:30" pos:end="2327:40">HTTPContext</name> <modifier pos:start="2327:42" pos:end="2327:42">*</modifier></type><name pos:start="2327:43" pos:end="2327:43">c</name></decl></parameter>)</parameter_list>
<block pos:start="2328:1" pos:end="2563:1">{<block_content pos:start="2329:5" pos:end="2562:13">
    <decl_stmt pos:start="2329:5" pos:end="2329:20"><decl pos:start="2329:5" pos:end="2329:9"><type pos:start="2329:5" pos:end="2329:7"><name pos:start="2329:5" pos:end="2329:7">int</name></type> <name pos:start="2329:9" pos:end="2329:9">i</name></decl>, <decl pos:start="2329:12" pos:end="2329:14"><type ref="prev" pos:start="2329:5" pos:end="2329:7"/><name pos:start="2329:12" pos:end="2329:14">len</name></decl>, <decl pos:start="2329:17" pos:end="2329:19"><type ref="prev" pos:start="2329:5" pos:end="2329:7"/><name pos:start="2329:17" pos:end="2329:19">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2330:5" pos:end="2330:25"><decl pos:start="2330:5" pos:end="2330:24"><type pos:start="2330:5" pos:end="2330:21"><name pos:start="2330:5" pos:end="2330:19">AVFormatContext</name> <modifier pos:start="2330:21" pos:end="2330:21">*</modifier></type><name pos:start="2330:22" pos:end="2330:24">ctx</name></decl>;</decl_stmt>

    <expr_stmt pos:start="2332:5" pos:end="2332:28"><expr pos:start="2332:5" pos:end="2332:27"><call pos:start="2332:5" pos:end="2332:27"><name pos:start="2332:5" pos:end="2332:12">av_freep</name><argument_list pos:start="2332:13" pos:end="2332:27">(<argument pos:start="2332:14" pos:end="2332:26"><expr pos:start="2332:14" pos:end="2332:26"><operator pos:start="2332:14" pos:end="2332:14">&amp;</operator><name pos:start="2332:15" pos:end="2332:26"><name pos:start="2332:15" pos:end="2332:15">c</name><operator pos:start="2332:16" pos:end="2332:17">-&gt;</operator><name pos:start="2332:18" pos:end="2332:26">pb_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch pos:start="2333:5" pos:end="2561:5">switch<condition pos:start="2333:11" pos:end="2333:20">(<expr pos:start="2333:12" pos:end="2333:19"><name pos:start="2333:12" pos:end="2333:19"><name pos:start="2333:12" pos:end="2333:12">c</name><operator pos:start="2333:13" pos:end="2333:14">-&gt;</operator><name pos:start="2333:15" pos:end="2333:19">state</name></name></expr>)</condition> <block pos:start="2333:22" pos:end="2561:5">{<block_content pos:start="2334:5" pos:end="2560:14">
    <case pos:start="2334:5" pos:end="2334:36">case <expr pos:start="2334:10" pos:end="2334:35"><name pos:start="2334:10" pos:end="2334:35">HTTPSTATE_SEND_DATA_HEADER</name></expr>:</case>
        <expr_stmt pos:start="2335:9" pos:end="2335:39"><expr pos:start="2335:9" pos:end="2335:38"><name pos:start="2335:9" pos:end="2335:11">ctx</name> <operator pos:start="2335:13" pos:end="2335:13">=</operator> <call pos:start="2335:15" pos:end="2335:38"><name pos:start="2335:15" pos:end="2335:36">avformat_alloc_context</name><argument_list pos:start="2335:37" pos:end="2335:38">()</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2336:9" pos:end="2337:35"><if pos:start="2336:9" pos:end="2337:35">if <condition pos:start="2336:12" pos:end="2336:17">(<expr pos:start="2336:13" pos:end="2336:16"><operator pos:start="2336:13" pos:end="2336:13">!</operator><name pos:start="2336:14" pos:end="2336:16">ctx</name></expr>)</condition><block type="pseudo" pos:start="2337:13" pos:end="2337:35"><block_content pos:start="2337:13" pos:end="2337:35">
            <return pos:start="2337:13" pos:end="2337:35">return <expr pos:start="2337:20" pos:end="2337:34"><call pos:start="2337:20" pos:end="2337:34"><name pos:start="2337:20" pos:end="2337:26">AVERROR</name><argument_list pos:start="2337:27" pos:end="2337:34">(<argument pos:start="2337:28" pos:end="2337:33"><expr pos:start="2337:28" pos:end="2337:33"><name pos:start="2337:28" pos:end="2337:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2338:9" pos:end="2338:26"><expr pos:start="2338:9" pos:end="2338:25"><name pos:start="2338:9" pos:end="2338:19"><name pos:start="2338:9" pos:end="2338:9">c</name><operator pos:start="2338:10" pos:end="2338:11">-&gt;</operator><name pos:start="2338:12" pos:end="2338:19">pfmt_ctx</name></name> <operator pos:start="2338:21" pos:end="2338:21">=</operator> <name pos:start="2338:23" pos:end="2338:25">ctx</name></expr>;</expr_stmt>
        <expr_stmt pos:start="2339:9" pos:end="2339:71"><expr pos:start="2339:9" pos:end="2339:70"><call pos:start="2339:9" pos:end="2339:70"><name pos:start="2339:9" pos:end="2339:20">av_dict_copy</name><argument_list pos:start="2339:21" pos:end="2339:70">(<argument pos:start="2339:22" pos:end="2339:45"><expr pos:start="2339:22" pos:end="2339:45"><operator pos:start="2339:22" pos:end="2339:22">&amp;</operator><operator pos:start="2339:23" pos:end="2339:23">(</operator><name pos:start="2339:24" pos:end="2339:44"><name pos:start="2339:24" pos:end="2339:24">c</name><operator pos:start="2339:25" pos:end="2339:26">-&gt;</operator><name pos:start="2339:27" pos:end="2339:34">pfmt_ctx</name><operator pos:start="2339:35" pos:end="2339:36">-&gt;</operator><name pos:start="2339:37" pos:end="2339:44">metadata</name></name><operator pos:start="2339:45" pos:end="2339:45">)</operator></expr></argument>, <argument pos:start="2339:48" pos:end="2339:66"><expr pos:start="2339:48" pos:end="2339:66"><name pos:start="2339:48" pos:end="2339:66"><name pos:start="2339:48" pos:end="2339:48">c</name><operator pos:start="2339:49" pos:end="2339:50">-&gt;</operator><name pos:start="2339:51" pos:end="2339:56">stream</name><operator pos:start="2339:57" pos:end="2339:58">-&gt;</operator><name pos:start="2339:59" pos:end="2339:66">metadata</name></name></expr></argument>, <argument pos:start="2339:69" pos:end="2339:69"><expr pos:start="2339:69" pos:end="2339:69"><literal type="number" pos:start="2339:69" pos:end="2339:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="2341:9" pos:end="2360:9">for<control pos:start="2341:12" pos:end="2341:44">(<init pos:start="2341:13" pos:end="2341:16"><expr pos:start="2341:13" pos:end="2341:15"><name pos:start="2341:13" pos:end="2341:13">i</name><operator pos:start="2341:14" pos:end="2341:14">=</operator><literal type="number" pos:start="2341:15" pos:end="2341:15">0</literal></expr>;</init><condition pos:start="2341:17" pos:end="2341:40"><expr pos:start="2341:17" pos:end="2341:39"><name pos:start="2341:17" pos:end="2341:17">i</name><operator pos:start="2341:18" pos:end="2341:18">&lt;</operator><name pos:start="2341:19" pos:end="2341:39"><name pos:start="2341:19" pos:end="2341:19">c</name><operator pos:start="2341:20" pos:end="2341:21">-&gt;</operator><name pos:start="2341:22" pos:end="2341:27">stream</name><operator pos:start="2341:28" pos:end="2341:29">-&gt;</operator><name pos:start="2341:30" pos:end="2341:39">nb_streams</name></name></expr>;</condition><incr pos:start="2341:41" pos:end="2341:43"><expr pos:start="2341:41" pos:end="2341:43"><name pos:start="2341:41" pos:end="2341:41">i</name><operator pos:start="2341:42" pos:end="2341:43">++</operator></expr></incr>)</control> <block pos:start="2341:46" pos:end="2360:9">{<block_content pos:start="2342:13" pos:end="2359:58">
            <decl_stmt pos:start="2342:13" pos:end="2342:33"><decl pos:start="2342:13" pos:end="2342:32"><type pos:start="2342:13" pos:end="2342:29"><name pos:start="2342:13" pos:end="2342:27">LayeredAVStream</name> <modifier pos:start="2342:29" pos:end="2342:29">*</modifier></type><name pos:start="2342:30" pos:end="2342:32">src</name></decl>;</decl_stmt>
            <decl_stmt pos:start="2343:13" pos:end="2343:66"><decl pos:start="2343:13" pos:end="2343:65"><type pos:start="2343:13" pos:end="2343:22"><name pos:start="2343:13" pos:end="2343:20">AVStream</name> <modifier pos:start="2343:22" pos:end="2343:22">*</modifier></type><name pos:start="2343:23" pos:end="2343:24">st</name> <init pos:start="2343:26" pos:end="2343:65">= <expr pos:start="2343:28" pos:end="2343:65"><call pos:start="2343:28" pos:end="2343:65"><name pos:start="2343:28" pos:end="2343:46">avformat_new_stream</name><argument_list pos:start="2343:47" pos:end="2343:65">(<argument pos:start="2343:48" pos:end="2343:58"><expr pos:start="2343:48" pos:end="2343:58"><name pos:start="2343:48" pos:end="2343:58"><name pos:start="2343:48" pos:end="2343:48">c</name><operator pos:start="2343:49" pos:end="2343:50">-&gt;</operator><name pos:start="2343:51" pos:end="2343:58">pfmt_ctx</name></name></expr></argument>, <argument pos:start="2343:61" pos:end="2343:64"><expr pos:start="2343:61" pos:end="2343:64"><name pos:start="2343:61" pos:end="2343:64">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="2344:13" pos:end="2345:39"><if pos:start="2344:13" pos:end="2345:39">if <condition pos:start="2344:16" pos:end="2344:20">(<expr pos:start="2344:17" pos:end="2344:19"><operator pos:start="2344:17" pos:end="2344:17">!</operator><name pos:start="2344:18" pos:end="2344:19">st</name></expr>)</condition><block type="pseudo" pos:start="2345:17" pos:end="2345:39"><block_content pos:start="2345:17" pos:end="2345:39">
                <return pos:start="2345:17" pos:end="2345:39">return <expr pos:start="2345:24" pos:end="2345:38"><call pos:start="2345:24" pos:end="2345:38"><name pos:start="2345:24" pos:end="2345:30">AVERROR</name><argument_list pos:start="2345:31" pos:end="2345:38">(<argument pos:start="2345:32" pos:end="2345:37"><expr pos:start="2345:32" pos:end="2345:37"><name pos:start="2345:32" pos:end="2345:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <comment type="block" pos:start="2347:13" pos:end="2348:24">/* if file or feed, then just take streams from FFServerStream
             * struct */</comment>
            <if_stmt pos:start="2349:13" pos:end="2353:75"><if pos:start="2349:13" pos:end="2351:44">if <condition pos:start="2349:16" pos:end="2350:45">(<expr pos:start="2349:17" pos:end="2350:44"><operator pos:start="2349:17" pos:end="2349:17">!</operator><name pos:start="2349:18" pos:end="2349:32"><name pos:start="2349:18" pos:end="2349:18">c</name><operator pos:start="2349:19" pos:end="2349:20">-&gt;</operator><name pos:start="2349:21" pos:end="2349:26">stream</name><operator pos:start="2349:27" pos:end="2349:28">-&gt;</operator><name pos:start="2349:29" pos:end="2349:32">feed</name></name> <operator pos:start="2349:34" pos:end="2349:35">||</operator>
                <name pos:start="2350:17" pos:end="2350:31"><name pos:start="2350:17" pos:end="2350:17">c</name><operator pos:start="2350:18" pos:end="2350:19">-&gt;</operator><name pos:start="2350:20" pos:end="2350:25">stream</name><operator pos:start="2350:26" pos:end="2350:27">-&gt;</operator><name pos:start="2350:28" pos:end="2350:31">feed</name></name> <operator pos:start="2350:33" pos:end="2350:34">==</operator> <name pos:start="2350:36" pos:end="2350:44"><name pos:start="2350:36" pos:end="2350:36">c</name><operator pos:start="2350:37" pos:end="2350:38">-&gt;</operator><name pos:start="2350:39" pos:end="2350:44">stream</name></name></expr>)</condition><block type="pseudo" pos:start="2351:17" pos:end="2351:44"><block_content pos:start="2351:17" pos:end="2351:44">
                <expr_stmt pos:start="2351:17" pos:end="2351:44"><expr pos:start="2351:17" pos:end="2351:43"><name pos:start="2351:17" pos:end="2351:19">src</name> <operator pos:start="2351:21" pos:end="2351:21">=</operator> <name pos:start="2351:23" pos:end="2351:43"><name pos:start="2351:23" pos:end="2351:23">c</name><operator pos:start="2351:24" pos:end="2351:25">-&gt;</operator><name pos:start="2351:26" pos:end="2351:31">stream</name><operator pos:start="2351:32" pos:end="2351:33">-&gt;</operator><name pos:start="2351:34" pos:end="2351:40">streams</name><index pos:start="2351:41" pos:end="2351:43">[<expr pos:start="2351:42" pos:end="2351:42"><name pos:start="2351:42" pos:end="2351:42">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="2352:13" pos:end="2353:75">else<block type="pseudo" pos:start="2353:17" pos:end="2353:75"><block_content pos:start="2353:17" pos:end="2353:75">
                <expr_stmt pos:start="2353:17" pos:end="2353:75"><expr pos:start="2353:17" pos:end="2353:74"><name pos:start="2353:17" pos:end="2353:19">src</name> <operator pos:start="2353:21" pos:end="2353:21">=</operator> <name pos:start="2353:23" pos:end="2353:74"><name pos:start="2353:23" pos:end="2353:23">c</name><operator pos:start="2353:24" pos:end="2353:25">-&gt;</operator><name pos:start="2353:26" pos:end="2353:31">stream</name><operator pos:start="2353:32" pos:end="2353:33">-&gt;</operator><name pos:start="2353:34" pos:end="2353:37">feed</name><operator pos:start="2353:38" pos:end="2353:39">-&gt;</operator><name pos:start="2353:40" pos:end="2353:46">streams</name><index pos:start="2353:47" pos:end="2353:74">[<expr pos:start="2353:48" pos:end="2353:73"><name pos:start="2353:48" pos:end="2353:73"><name pos:start="2353:48" pos:end="2353:48">c</name><operator pos:start="2353:49" pos:end="2353:50">-&gt;</operator><name pos:start="2353:51" pos:end="2353:56">stream</name><operator pos:start="2353:57" pos:end="2353:58">-&gt;</operator><name pos:start="2353:59" pos:end="2353:70">feed_streams</name><index pos:start="2353:71" pos:end="2353:73">[<expr pos:start="2353:72" pos:end="2353:72"><name pos:start="2353:72" pos:end="2353:72">i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="2355:13" pos:end="2355:57"><expr pos:start="2355:13" pos:end="2355:56"><call pos:start="2355:13" pos:end="2355:56"><name pos:start="2355:13" pos:end="2355:26">unlayer_stream</name><argument_list pos:start="2355:27" pos:end="2355:56">(<argument pos:start="2355:28" pos:end="2355:50"><expr pos:start="2355:28" pos:end="2355:50"><name pos:start="2355:28" pos:end="2355:50"><name pos:start="2355:28" pos:end="2355:28">c</name><operator pos:start="2355:29" pos:end="2355:30">-&gt;</operator><name pos:start="2355:31" pos:end="2355:38">pfmt_ctx</name><operator pos:start="2355:39" pos:end="2355:40">-&gt;</operator><name pos:start="2355:41" pos:end="2355:47">streams</name><index pos:start="2355:48" pos:end="2355:50">[<expr pos:start="2355:49" pos:end="2355:49"><name pos:start="2355:49" pos:end="2355:49">i</name></expr>]</index></name></expr></argument>, <argument pos:start="2355:53" pos:end="2355:55"><expr pos:start="2355:53" pos:end="2355:55"><name pos:start="2355:53" pos:end="2355:55">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="2355:59" pos:end="2355:114">//TODO we no longer copy st-&gt;internal, does this matter?</comment>
            <expr_stmt pos:start="2356:13" pos:end="2356:60"><expr pos:start="2356:13" pos:end="2356:59"><call pos:start="2356:13" pos:end="2356:59"><name pos:start="2356:13" pos:end="2356:22">av_assert0</name><argument_list pos:start="2356:23" pos:end="2356:59">(<argument pos:start="2356:24" pos:end="2356:58"><expr pos:start="2356:24" pos:end="2356:58"><operator pos:start="2356:24" pos:end="2356:24">!</operator><name pos:start="2356:25" pos:end="2356:47"><name pos:start="2356:25" pos:end="2356:25">c</name><operator pos:start="2356:26" pos:end="2356:27">-&gt;</operator><name pos:start="2356:28" pos:end="2356:35">pfmt_ctx</name><operator pos:start="2356:36" pos:end="2356:37">-&gt;</operator><name pos:start="2356:38" pos:end="2356:44">streams</name><index pos:start="2356:45" pos:end="2356:47">[<expr pos:start="2356:46" pos:end="2356:46"><name pos:start="2356:46" pos:end="2356:46">i</name></expr>]</index></name><operator pos:start="2356:48" pos:end="2356:49">-&gt;</operator><name pos:start="2356:50" pos:end="2356:58">priv_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2358:13" pos:end="2359:58"><if pos:start="2358:13" pos:end="2359:58">if <condition pos:start="2358:16" pos:end="2358:59">(<expr pos:start="2358:17" pos:end="2358:58"><name pos:start="2358:17" pos:end="2358:33"><name pos:start="2358:17" pos:end="2358:19">src</name><operator pos:start="2358:20" pos:end="2358:21">-&gt;</operator><name pos:start="2358:22" pos:end="2358:26">codec</name><operator pos:start="2358:27" pos:end="2358:28">-&gt;</operator><name pos:start="2358:29" pos:end="2358:33">flags</name></name> <operator pos:start="2358:35" pos:end="2358:35">&amp;</operator> <name pos:start="2358:37" pos:end="2358:58">AV_CODEC_FLAG_BITEXACT</name></expr>)</condition><block type="pseudo" pos:start="2359:17" pos:end="2359:58"><block_content pos:start="2359:17" pos:end="2359:58">
                <expr_stmt pos:start="2359:17" pos:end="2359:58"><expr pos:start="2359:17" pos:end="2359:57"><name pos:start="2359:17" pos:end="2359:34"><name pos:start="2359:17" pos:end="2359:17">c</name><operator pos:start="2359:18" pos:end="2359:19">-&gt;</operator><name pos:start="2359:20" pos:end="2359:27">pfmt_ctx</name><operator pos:start="2359:28" pos:end="2359:29">-&gt;</operator><name pos:start="2359:30" pos:end="2359:34">flags</name></name> <operator pos:start="2359:36" pos:end="2359:37">|=</operator> <name pos:start="2359:39" pos:end="2359:57">AVFMT_FLAG_BITEXACT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <comment type="block" pos:start="2361:9" pos:end="2361:42">/* set output format parameters */</comment>
        <expr_stmt pos:start="2362:9" pos:end="2362:46"><expr pos:start="2362:9" pos:end="2362:45"><name pos:start="2362:9" pos:end="2362:28"><name pos:start="2362:9" pos:end="2362:9">c</name><operator pos:start="2362:10" pos:end="2362:11">-&gt;</operator><name pos:start="2362:12" pos:end="2362:19">pfmt_ctx</name><operator pos:start="2362:20" pos:end="2362:21">-&gt;</operator><name pos:start="2362:22" pos:end="2362:28">oformat</name></name> <operator pos:start="2362:30" pos:end="2362:30">=</operator> <name pos:start="2362:32" pos:end="2362:45"><name pos:start="2362:32" pos:end="2362:32">c</name><operator pos:start="2362:33" pos:end="2362:34">-&gt;</operator><name pos:start="2362:35" pos:end="2362:40">stream</name><operator pos:start="2362:41" pos:end="2362:42">-&gt;</operator><name pos:start="2362:43" pos:end="2362:45">fmt</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="2363:9" pos:end="2363:69"><expr pos:start="2363:9" pos:end="2363:68"><call pos:start="2363:9" pos:end="2363:68"><name pos:start="2363:9" pos:end="2363:18">av_assert0</name><argument_list pos:start="2363:19" pos:end="2363:68">(<argument pos:start="2363:20" pos:end="2363:67"><expr pos:start="2363:20" pos:end="2363:67"><name pos:start="2363:20" pos:end="2363:42"><name pos:start="2363:20" pos:end="2363:20">c</name><operator pos:start="2363:21" pos:end="2363:22">-&gt;</operator><name pos:start="2363:23" pos:end="2363:30">pfmt_ctx</name><operator pos:start="2363:31" pos:end="2363:32">-&gt;</operator><name pos:start="2363:33" pos:end="2363:42">nb_streams</name></name> <operator pos:start="2363:44" pos:end="2363:45">==</operator> <name pos:start="2363:47" pos:end="2363:67"><name pos:start="2363:47" pos:end="2363:47">c</name><operator pos:start="2363:48" pos:end="2363:49">-&gt;</operator><name pos:start="2363:50" pos:end="2363:55">stream</name><operator pos:start="2363:56" pos:end="2363:57">-&gt;</operator><name pos:start="2363:58" pos:end="2363:67">nb_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2365:9" pos:end="2365:29"><expr pos:start="2365:9" pos:end="2365:28"><name pos:start="2365:9" pos:end="2365:24"><name pos:start="2365:9" pos:end="2365:9">c</name><operator pos:start="2365:10" pos:end="2365:11">-&gt;</operator><name pos:start="2365:12" pos:end="2365:24">got_key_frame</name></name> <operator pos:start="2365:26" pos:end="2365:26">=</operator> <literal type="number" pos:start="2365:28" pos:end="2365:28">0</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="2367:9" pos:end="2367:61">/* prepare header and save header data in a stream */</comment>
        <if_stmt pos:start="2368:9" pos:end="2371:9"><if pos:start="2368:9" pos:end="2371:9">if <condition pos:start="2368:12" pos:end="2368:52">(<expr pos:start="2368:13" pos:end="2368:51"><call pos:start="2368:13" pos:end="2368:47"><name pos:start="2368:13" pos:end="2368:29">avio_open_dyn_buf</name><argument_list pos:start="2368:30" pos:end="2368:47">(<argument pos:start="2368:31" pos:end="2368:46"><expr pos:start="2368:31" pos:end="2368:46"><operator pos:start="2368:31" pos:end="2368:31">&amp;</operator><name pos:start="2368:32" pos:end="2368:46"><name pos:start="2368:32" pos:end="2368:32">c</name><operator pos:start="2368:33" pos:end="2368:34">-&gt;</operator><name pos:start="2368:35" pos:end="2368:42">pfmt_ctx</name><operator pos:start="2368:43" pos:end="2368:44">-&gt;</operator><name pos:start="2368:45" pos:end="2368:46">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="2368:49" pos:end="2368:49">&lt;</operator> <literal type="number" pos:start="2368:51" pos:end="2368:51">0</literal></expr>)</condition> <block pos:start="2368:54" pos:end="2371:9">{<block_content pos:start="2370:13" pos:end="2370:22">
            <comment type="block" pos:start="2369:13" pos:end="2369:37">/* XXX: potential leak */</comment>
            <return pos:start="2370:13" pos:end="2370:22">return <expr pos:start="2370:20" pos:end="2370:21"><operator pos:start="2370:20" pos:end="2370:20">-</operator><literal type="number" pos:start="2370:21" pos:end="2370:21">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="2372:9" pos:end="2372:38"><expr pos:start="2372:9" pos:end="2372:37"><name pos:start="2372:9" pos:end="2372:33"><name pos:start="2372:9" pos:end="2372:9">c</name><operator pos:start="2372:10" pos:end="2372:11">-&gt;</operator><name pos:start="2372:12" pos:end="2372:19">pfmt_ctx</name><operator pos:start="2372:20" pos:end="2372:21">-&gt;</operator><name pos:start="2372:22" pos:end="2372:23">pb</name><operator pos:start="2372:24" pos:end="2372:25">-&gt;</operator><name pos:start="2372:26" pos:end="2372:33">seekable</name></name> <operator pos:start="2372:35" pos:end="2372:35">=</operator> <literal type="number" pos:start="2372:37" pos:end="2372:37">0</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="2374:9" pos:end="2378:11">/*
         * HACK to avoid MPEG-PS muxer to spit many underflow errors
         * Default value from FFmpeg
         * Try to set it using configuration option
         */</comment>
        <expr_stmt pos:start="2379:9" pos:end="2379:57"><expr pos:start="2379:9" pos:end="2379:56"><name pos:start="2379:9" pos:end="2379:30"><name pos:start="2379:9" pos:end="2379:9">c</name><operator pos:start="2379:10" pos:end="2379:11">-&gt;</operator><name pos:start="2379:12" pos:end="2379:19">pfmt_ctx</name><operator pos:start="2379:20" pos:end="2379:21">-&gt;</operator><name pos:start="2379:22" pos:end="2379:30">max_delay</name></name> <operator pos:start="2379:32" pos:end="2379:32">=</operator> <operator pos:start="2379:34" pos:end="2379:34">(</operator><name pos:start="2379:35" pos:end="2379:37">int</name><operator pos:start="2379:38" pos:end="2379:38">)</operator><operator pos:start="2379:39" pos:end="2379:39">(</operator><literal type="number" pos:start="2379:40" pos:end="2379:42">0.7</literal><operator pos:start="2379:43" pos:end="2379:43">*</operator><name pos:start="2379:44" pos:end="2379:55">AV_TIME_BASE</name><operator pos:start="2379:56" pos:end="2379:56">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="2381:9" pos:end="2385:9"><if pos:start="2381:9" pos:end="2385:9">if <condition pos:start="2381:12" pos:end="2381:65">(<expr pos:start="2381:13" pos:end="2381:64"><operator pos:start="2381:13" pos:end="2381:13">(</operator><name pos:start="2381:14" pos:end="2381:16">ret</name> <operator pos:start="2381:18" pos:end="2381:18">=</operator> <call pos:start="2381:20" pos:end="2381:59"><name pos:start="2381:20" pos:end="2381:40">avformat_write_header</name><argument_list pos:start="2381:41" pos:end="2381:59">(<argument pos:start="2381:42" pos:end="2381:52"><expr pos:start="2381:42" pos:end="2381:52"><name pos:start="2381:42" pos:end="2381:52"><name pos:start="2381:42" pos:end="2381:42">c</name><operator pos:start="2381:43" pos:end="2381:44">-&gt;</operator><name pos:start="2381:45" pos:end="2381:52">pfmt_ctx</name></name></expr></argument>, <argument pos:start="2381:55" pos:end="2381:58"><expr pos:start="2381:55" pos:end="2381:58"><name pos:start="2381:55" pos:end="2381:58">NULL</name></expr></argument>)</argument_list></call><operator pos:start="2381:60" pos:end="2381:60">)</operator> <operator pos:start="2381:62" pos:end="2381:62">&lt;</operator> <literal type="number" pos:start="2381:64" pos:end="2381:64">0</literal></expr>)</condition> <block pos:start="2381:67" pos:end="2385:9">{<block_content pos:start="2382:13" pos:end="2384:23">
            <expr_stmt pos:start="2382:13" pos:end="2383:59"><expr pos:start="2382:13" pos:end="2383:58"><call pos:start="2382:13" pos:end="2383:58"><name pos:start="2382:13" pos:end="2382:20">http_log</name><argument_list pos:start="2382:21" pos:end="2383:58">(<argument pos:start="2382:22" pos:end="2382:72"><expr pos:start="2382:22" pos:end="2382:72"><literal type="string" pos:start="2382:22" pos:end="2382:72">"Error writing output header for stream '%s': %s\n"</literal></expr></argument>,
                     <argument pos:start="2383:22" pos:end="2383:40"><expr pos:start="2383:22" pos:end="2383:40"><name pos:start="2383:22" pos:end="2383:40"><name pos:start="2383:22" pos:end="2383:22">c</name><operator pos:start="2383:23" pos:end="2383:24">-&gt;</operator><name pos:start="2383:25" pos:end="2383:30">stream</name><operator pos:start="2383:31" pos:end="2383:32">-&gt;</operator><name pos:start="2383:33" pos:end="2383:40">filename</name></name></expr></argument>, <argument pos:start="2383:43" pos:end="2383:57"><expr pos:start="2383:43" pos:end="2383:57"><call pos:start="2383:43" pos:end="2383:57"><name pos:start="2383:43" pos:end="2383:52">av_err2str</name><argument_list pos:start="2383:53" pos:end="2383:57">(<argument pos:start="2383:54" pos:end="2383:56"><expr pos:start="2383:54" pos:end="2383:56"><name pos:start="2383:54" pos:end="2383:56">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2384:13" pos:end="2384:23">return <expr pos:start="2384:20" pos:end="2384:22"><name pos:start="2384:20" pos:end="2384:22">ret</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="2386:9" pos:end="2386:45"><expr pos:start="2386:9" pos:end="2386:44"><call pos:start="2386:9" pos:end="2386:44"><name pos:start="2386:9" pos:end="2386:20">av_dict_free</name><argument_list pos:start="2386:21" pos:end="2386:44">(<argument pos:start="2386:22" pos:end="2386:43"><expr pos:start="2386:22" pos:end="2386:43"><operator pos:start="2386:22" pos:end="2386:22">&amp;</operator><name pos:start="2386:23" pos:end="2386:43"><name pos:start="2386:23" pos:end="2386:23">c</name><operator pos:start="2386:24" pos:end="2386:25">-&gt;</operator><name pos:start="2386:26" pos:end="2386:33">pfmt_ctx</name><operator pos:start="2386:34" pos:end="2386:35">-&gt;</operator><name pos:start="2386:36" pos:end="2386:43">metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2388:9" pos:end="2388:65"><expr pos:start="2388:9" pos:end="2388:64"><name pos:start="2388:9" pos:end="2388:11">len</name> <operator pos:start="2388:13" pos:end="2388:13">=</operator> <call pos:start="2388:15" pos:end="2388:64"><name pos:start="2388:15" pos:end="2388:32">avio_close_dyn_buf</name><argument_list pos:start="2388:33" pos:end="2388:64">(<argument pos:start="2388:34" pos:end="2388:48"><expr pos:start="2388:34" pos:end="2388:48"><name pos:start="2388:34" pos:end="2388:48"><name pos:start="2388:34" pos:end="2388:34">c</name><operator pos:start="2388:35" pos:end="2388:36">-&gt;</operator><name pos:start="2388:37" pos:end="2388:44">pfmt_ctx</name><operator pos:start="2388:45" pos:end="2388:46">-&gt;</operator><name pos:start="2388:47" pos:end="2388:48">pb</name></name></expr></argument>, <argument pos:start="2388:51" pos:end="2388:63"><expr pos:start="2388:51" pos:end="2388:63"><operator pos:start="2388:51" pos:end="2388:51">&amp;</operator><name pos:start="2388:52" pos:end="2388:63"><name pos:start="2388:52" pos:end="2388:52">c</name><operator pos:start="2388:53" pos:end="2388:54">-&gt;</operator><name pos:start="2388:55" pos:end="2388:63">pb_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2389:9" pos:end="2389:37"><expr pos:start="2389:9" pos:end="2389:36"><name pos:start="2389:9" pos:end="2389:21"><name pos:start="2389:9" pos:end="2389:9">c</name><operator pos:start="2389:10" pos:end="2389:11">-&gt;</operator><name pos:start="2389:12" pos:end="2389:21">buffer_ptr</name></name> <operator pos:start="2389:23" pos:end="2389:23">=</operator> <name pos:start="2389:25" pos:end="2389:36"><name pos:start="2389:25" pos:end="2389:25">c</name><operator pos:start="2389:26" pos:end="2389:27">-&gt;</operator><name pos:start="2389:28" pos:end="2389:36">pb_buffer</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="2390:9" pos:end="2390:43"><expr pos:start="2390:9" pos:end="2390:42"><name pos:start="2390:9" pos:end="2390:21"><name pos:start="2390:9" pos:end="2390:9">c</name><operator pos:start="2390:10" pos:end="2390:11">-&gt;</operator><name pos:start="2390:12" pos:end="2390:21">buffer_end</name></name> <operator pos:start="2390:23" pos:end="2390:23">=</operator> <name pos:start="2390:25" pos:end="2390:36"><name pos:start="2390:25" pos:end="2390:25">c</name><operator pos:start="2390:26" pos:end="2390:27">-&gt;</operator><name pos:start="2390:28" pos:end="2390:36">pb_buffer</name></name> <operator pos:start="2390:38" pos:end="2390:38">+</operator> <name pos:start="2390:40" pos:end="2390:42">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="2392:9" pos:end="2392:39"><expr pos:start="2392:9" pos:end="2392:38"><name pos:start="2392:9" pos:end="2392:16"><name pos:start="2392:9" pos:end="2392:9">c</name><operator pos:start="2392:10" pos:end="2392:11">-&gt;</operator><name pos:start="2392:12" pos:end="2392:16">state</name></name> <operator pos:start="2392:18" pos:end="2392:18">=</operator> <name pos:start="2392:20" pos:end="2392:38">HTTPSTATE_SEND_DATA</name></expr>;</expr_stmt>
        <expr_stmt pos:start="2393:9" pos:end="2393:32"><expr pos:start="2393:9" pos:end="2393:31"><name pos:start="2393:9" pos:end="2393:27"><name pos:start="2393:9" pos:end="2393:9">c</name><operator pos:start="2393:10" pos:end="2393:11">-&gt;</operator><name pos:start="2393:12" pos:end="2393:27">last_packet_sent</name></name> <operator pos:start="2393:29" pos:end="2393:29">=</operator> <literal type="number" pos:start="2393:31" pos:end="2393:31">0</literal></expr>;</expr_stmt>
        <break pos:start="2394:9" pos:end="2394:14">break;</break>
    <case pos:start="2395:5" pos:end="2395:29">case <expr pos:start="2395:10" pos:end="2395:28"><name pos:start="2395:10" pos:end="2395:28">HTTPSTATE_SEND_DATA</name></expr>:</case>
        <comment type="block" pos:start="2396:9" pos:end="2396:31">/* find a new packet */</comment>
        <comment type="block" pos:start="2397:9" pos:end="2397:49">/* read a packet from the input stream */</comment>
        <if_stmt pos:start="2398:9" pos:end="2401:60"><if pos:start="2398:9" pos:end="2401:60">if <condition pos:start="2398:12" pos:end="2398:28">(<expr pos:start="2398:13" pos:end="2398:27"><name pos:start="2398:13" pos:end="2398:27"><name pos:start="2398:13" pos:end="2398:13">c</name><operator pos:start="2398:14" pos:end="2398:15">-&gt;</operator><name pos:start="2398:16" pos:end="2398:21">stream</name><operator pos:start="2398:22" pos:end="2398:23">-&gt;</operator><name pos:start="2398:24" pos:end="2398:27">feed</name></name></expr>)</condition><block type="pseudo" pos:start="2399:13" pos:end="2401:60"><block_content pos:start="2399:13" pos:end="2401:60">
            <expr_stmt pos:start="2399:13" pos:end="2401:60"><expr pos:start="2399:13" pos:end="2401:59"><call pos:start="2399:13" pos:end="2401:59"><name pos:start="2399:13" pos:end="2399:31">ffm_set_write_index</name><argument_list pos:start="2399:32" pos:end="2401:59">(<argument pos:start="2399:33" pos:end="2399:41"><expr pos:start="2399:33" pos:end="2399:41"><name pos:start="2399:33" pos:end="2399:41"><name pos:start="2399:33" pos:end="2399:33">c</name><operator pos:start="2399:34" pos:end="2399:35">-&gt;</operator><name pos:start="2399:36" pos:end="2399:41">fmt_in</name></name></expr></argument>,
                                <argument pos:start="2400:33" pos:end="2400:65"><expr pos:start="2400:33" pos:end="2400:65"><name pos:start="2400:33" pos:end="2400:65"><name pos:start="2400:33" pos:end="2400:33">c</name><operator pos:start="2400:34" pos:end="2400:35">-&gt;</operator><name pos:start="2400:36" pos:end="2400:41">stream</name><operator pos:start="2400:42" pos:end="2400:43">-&gt;</operator><name pos:start="2400:44" pos:end="2400:47">feed</name><operator pos:start="2400:48" pos:end="2400:49">-&gt;</operator><name pos:start="2400:50" pos:end="2400:65">feed_write_index</name></name></expr></argument>,
                                <argument pos:start="2401:33" pos:end="2401:58"><expr pos:start="2401:33" pos:end="2401:58"><name pos:start="2401:33" pos:end="2401:58"><name pos:start="2401:33" pos:end="2401:33">c</name><operator pos:start="2401:34" pos:end="2401:35">-&gt;</operator><name pos:start="2401:36" pos:end="2401:41">stream</name><operator pos:start="2401:42" pos:end="2401:43">-&gt;</operator><name pos:start="2401:44" pos:end="2401:47">feed</name><operator pos:start="2401:48" pos:end="2401:49">-&gt;</operator><name pos:start="2401:50" pos:end="2401:58">feed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="2403:9" pos:end="2540:9"><if pos:start="2403:9" pos:end="2407:52">if <condition pos:start="2403:12" pos:end="2403:33">(<expr pos:start="2403:13" pos:end="2403:31"><name pos:start="2403:13" pos:end="2403:31"><name pos:start="2403:13" pos:end="2403:13">c</name><operator pos:start="2403:14" pos:end="2403:15">-&gt;</operator><name pos:start="2403:16" pos:end="2403:21">stream</name><operator pos:start="2403:22" pos:end="2403:23">-&gt;</operator><name pos:start="2403:24" pos:end="2403:31">max_time</name></name></expr> )</condition><block pos:start="2403:34" pos:end="2407:52">{<block_content pos:start="2404:1" pos:end="2407:51">
<if_stmt pos:start="2404:1" pos:end="2407:51"><if pos:start="2404:1" pos:end="2407:51">if<condition pos:start="2404:3" pos:end="2405:63">(
            <expr pos:start="2405:13" pos:end="2405:62"><name pos:start="2405:13" pos:end="2405:31"><name pos:start="2405:13" pos:end="2405:13">c</name><operator pos:start="2405:14" pos:end="2405:15">-&gt;</operator><name pos:start="2405:16" pos:end="2405:21">stream</name><operator pos:start="2405:22" pos:end="2405:23">-&gt;</operator><name pos:start="2405:24" pos:end="2405:31">max_time</name></name> <operator pos:start="2405:33" pos:end="2405:33">+</operator> <name pos:start="2405:35" pos:end="2405:47"><name pos:start="2405:35" pos:end="2405:35">c</name><operator pos:start="2405:36" pos:end="2405:37">-&gt;</operator><name pos:start="2405:38" pos:end="2405:47">start_time</name></name> <operator pos:start="2405:49" pos:end="2405:49">-</operator> <name pos:start="2405:51" pos:end="2405:58">cur_time</name> <operator pos:start="2405:60" pos:end="2405:60">&lt;</operator> <literal type="number" pos:start="2405:62" pos:end="2405:62">0</literal></expr>)</condition><block type="pseudo" pos:start="2407:13" pos:end="2407:51"><block_content pos:start="2407:13" pos:end="2407:51">
            <comment type="block" pos:start="2406:13" pos:end="2406:35">/* We have timed out */</comment>
            <expr_stmt pos:start="2407:13" pos:end="2407:51"><expr pos:start="2407:13" pos:end="2407:50"><name pos:start="2407:13" pos:end="2407:20"><name pos:start="2407:13" pos:end="2407:13">c</name><operator pos:start="2407:14" pos:end="2407:15">-&gt;</operator><name pos:start="2407:16" pos:end="2407:20">state</name></name> <operator pos:start="2407:22" pos:end="2407:22">=</operator> <name pos:start="2407:24" pos:end="2407:50">HTTPSTATE_SEND_DATA_TRAILER</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block></if><else pos:start="2407:53" pos:end="2540:9">else <block pos:start="2407:58" pos:end="2540:9">{<block_content pos:start="2408:13" pos:end="2539:13">
            <decl_stmt pos:start="2408:13" pos:end="2408:25"><decl pos:start="2408:13" pos:end="2408:24"><type pos:start="2408:13" pos:end="2408:20"><name pos:start="2408:13" pos:end="2408:20">AVPacket</name></type> <name pos:start="2408:22" pos:end="2408:24">pkt</name></decl>;</decl_stmt>
        <label pos:start="2409:9" pos:end="2409:13"><name pos:start="2409:9" pos:end="2409:12">redo</name>:</label>
            <expr_stmt pos:start="2410:13" pos:end="2410:49"><expr pos:start="2410:13" pos:end="2410:48"><name pos:start="2410:13" pos:end="2410:15">ret</name> <operator pos:start="2410:17" pos:end="2410:17">=</operator> <call pos:start="2410:19" pos:end="2410:48"><name pos:start="2410:19" pos:end="2410:31">av_read_frame</name><argument_list pos:start="2410:32" pos:end="2410:48">(<argument pos:start="2410:33" pos:end="2410:41"><expr pos:start="2410:33" pos:end="2410:41"><name pos:start="2410:33" pos:end="2410:41"><name pos:start="2410:33" pos:end="2410:33">c</name><operator pos:start="2410:34" pos:end="2410:35">-&gt;</operator><name pos:start="2410:36" pos:end="2410:41">fmt_in</name></name></expr></argument>, <argument pos:start="2410:44" pos:end="2410:47"><expr pos:start="2410:44" pos:end="2410:47"><operator pos:start="2410:44" pos:end="2410:44">&amp;</operator><name pos:start="2410:45" pos:end="2410:47">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2411:13" pos:end="2539:13"><if pos:start="2411:13" pos:end="2432:13">if <condition pos:start="2411:16" pos:end="2411:24">(<expr pos:start="2411:17" pos:end="2411:23"><name pos:start="2411:17" pos:end="2411:19">ret</name> <operator pos:start="2411:21" pos:end="2411:21">&lt;</operator> <literal type="number" pos:start="2411:23" pos:end="2411:23">0</literal></expr>)</condition> <block pos:start="2411:26" pos:end="2432:13">{<block_content pos:start="2412:17" pos:end="2431:17">
                <if_stmt pos:start="2412:17" pos:end="2417:17"><if pos:start="2412:17" pos:end="2417:17">if <condition pos:start="2412:20" pos:end="2412:36">(<expr pos:start="2412:21" pos:end="2412:35"><name pos:start="2412:21" pos:end="2412:35"><name pos:start="2412:21" pos:end="2412:21">c</name><operator pos:start="2412:22" pos:end="2412:23">-&gt;</operator><name pos:start="2412:24" pos:end="2412:29">stream</name><operator pos:start="2412:30" pos:end="2412:31">-&gt;</operator><name pos:start="2412:32" pos:end="2412:35">feed</name></name></expr>)</condition> <block pos:start="2412:38" pos:end="2417:17">{<block_content pos:start="2415:21" pos:end="2416:29">
                    <comment type="block" pos:start="2413:21" pos:end="2414:62">/* if coming from feed, it means we reached the end of the
                     * ffm file, so must wait for more data */</comment>
                    <expr_stmt pos:start="2415:21" pos:end="2415:51"><expr pos:start="2415:21" pos:end="2415:50"><name pos:start="2415:21" pos:end="2415:28"><name pos:start="2415:21" pos:end="2415:21">c</name><operator pos:start="2415:22" pos:end="2415:23">-&gt;</operator><name pos:start="2415:24" pos:end="2415:28">state</name></name> <operator pos:start="2415:30" pos:end="2415:30">=</operator> <name pos:start="2415:32" pos:end="2415:50">HTTPSTATE_WAIT_FEED</name></expr>;</expr_stmt>
                    <return pos:start="2416:21" pos:end="2416:29">return <expr pos:start="2416:28" pos:end="2416:28"><literal type="number" pos:start="2416:28" pos:end="2416:28">1</literal></expr>;</return> <comment type="block" pos:start="2416:31" pos:end="2416:49">/* state changed */</comment>
                </block_content>}</block></if></if_stmt>
                <if_stmt pos:start="2418:17" pos:end="2421:17"><if pos:start="2418:17" pos:end="2421:17">if <condition pos:start="2418:20" pos:end="2418:43">(<expr pos:start="2418:21" pos:end="2418:42"><name pos:start="2418:21" pos:end="2418:23">ret</name> <operator pos:start="2418:25" pos:end="2418:26">==</operator> <call pos:start="2418:28" pos:end="2418:42"><name pos:start="2418:28" pos:end="2418:34">AVERROR</name><argument_list pos:start="2418:35" pos:end="2418:42">(<argument pos:start="2418:36" pos:end="2418:41"><expr pos:start="2418:36" pos:end="2418:41"><name pos:start="2418:36" pos:end="2418:41">EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2418:45" pos:end="2421:17">{<block_content pos:start="2420:21" pos:end="2420:29">
                    <comment type="block" pos:start="2419:21" pos:end="2419:58">/* input not ready, come back later */</comment>
                    <return pos:start="2420:21" pos:end="2420:29">return <expr pos:start="2420:28" pos:end="2420:28"><literal type="number" pos:start="2420:28" pos:end="2420:28">0</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <if_stmt pos:start="2422:17" pos:end="2431:17"><if pos:start="2422:17" pos:end="2427:17">if <condition pos:start="2422:20" pos:end="2422:36">(<expr pos:start="2422:21" pos:end="2422:35"><name pos:start="2422:21" pos:end="2422:35"><name pos:start="2422:21" pos:end="2422:21">c</name><operator pos:start="2422:22" pos:end="2422:23">-&gt;</operator><name pos:start="2422:24" pos:end="2422:29">stream</name><operator pos:start="2422:30" pos:end="2422:31">-&gt;</operator><name pos:start="2422:32" pos:end="2422:35">loop</name></name></expr>)</condition> <block pos:start="2422:38" pos:end="2427:17">{<block_content pos:start="2423:21" pos:end="2426:30">
                    <expr_stmt pos:start="2423:21" pos:end="2423:53"><expr pos:start="2423:21" pos:end="2423:52"><call pos:start="2423:21" pos:end="2423:52"><name pos:start="2423:21" pos:end="2423:40">avformat_close_input</name><argument_list pos:start="2423:41" pos:end="2423:52">(<argument pos:start="2423:42" pos:end="2423:51"><expr pos:start="2423:42" pos:end="2423:51"><operator pos:start="2423:42" pos:end="2423:42">&amp;</operator><name pos:start="2423:43" pos:end="2423:51"><name pos:start="2423:43" pos:end="2423:43">c</name><operator pos:start="2423:44" pos:end="2423:45">-&gt;</operator><name pos:start="2423:46" pos:end="2423:51">fmt_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="2424:21" pos:end="2425:37"><if pos:start="2424:21" pos:end="2425:37">if <condition pos:start="2424:24" pos:end="2424:53">(<expr pos:start="2424:25" pos:end="2424:52"><call pos:start="2424:25" pos:end="2424:48"><name pos:start="2424:25" pos:end="2424:41">open_input_stream</name><argument_list pos:start="2424:42" pos:end="2424:48">(<argument pos:start="2424:43" pos:end="2424:43"><expr pos:start="2424:43" pos:end="2424:43"><name pos:start="2424:43" pos:end="2424:43">c</name></expr></argument>, <argument pos:start="2424:46" pos:end="2424:47"><expr pos:start="2424:46" pos:end="2424:47"><literal type="string" pos:start="2424:46" pos:end="2424:47">""</literal></expr></argument>)</argument_list></call> <operator pos:start="2424:50" pos:end="2424:50">&lt;</operator> <literal type="number" pos:start="2424:52" pos:end="2424:52">0</literal></expr>)</condition><block type="pseudo" pos:start="2425:25" pos:end="2425:37"><block_content pos:start="2425:25" pos:end="2425:37">
                        <goto pos:start="2425:25" pos:end="2425:37">goto <name pos:start="2425:30" pos:end="2425:36">no_loop</name>;</goto></block_content></block></if></if_stmt>
                    <goto pos:start="2426:21" pos:end="2426:30">goto <name pos:start="2426:26" pos:end="2426:29">redo</name>;</goto>
                </block_content>}</block></if> <else pos:start="2427:19" pos:end="2431:17">else <block pos:start="2427:24" pos:end="2431:17">{<block_content pos:start="2428:21" pos:end="2430:63">
                    <label pos:start="2428:21" pos:end="2428:28"><name pos:start="2428:21" pos:end="2428:27">no_loop</name>:</label>
                        <comment type="block" pos:start="2429:25" pos:end="2429:72">/* must send trailer now because EOF or error */</comment>
                        <expr_stmt pos:start="2430:25" pos:end="2430:63"><expr pos:start="2430:25" pos:end="2430:62"><name pos:start="2430:25" pos:end="2430:32"><name pos:start="2430:25" pos:end="2430:25">c</name><operator pos:start="2430:26" pos:end="2430:27">-&gt;</operator><name pos:start="2430:28" pos:end="2430:32">state</name></name> <operator pos:start="2430:34" pos:end="2430:34">=</operator> <name pos:start="2430:36" pos:end="2430:62">HTTPSTATE_SEND_DATA_TRAILER</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else pos:start="2432:15" pos:end="2539:13">else <block pos:start="2432:20" pos:end="2539:13">{<block_content pos:start="2433:17" pos:end="2538:38">
                <decl_stmt pos:start="2433:17" pos:end="2433:52"><decl pos:start="2433:17" pos:end="2433:51"><type pos:start="2433:17" pos:end="2433:19"><name pos:start="2433:17" pos:end="2433:19">int</name></type> <name pos:start="2433:21" pos:end="2433:32">source_index</name> <init pos:start="2433:34" pos:end="2433:51">= <expr pos:start="2433:36" pos:end="2433:51"><name pos:start="2433:36" pos:end="2433:51"><name pos:start="2433:36" pos:end="2433:38">pkt</name><operator pos:start="2433:39" pos:end="2433:39">.</operator><name pos:start="2433:40" pos:end="2433:51">stream_index</name></name></expr></init></decl>;</decl_stmt>
                <comment type="block" pos:start="2434:17" pos:end="2434:48">/* update first pts if needed */</comment>
                <if_stmt pos:start="2435:17" pos:end="2439:18"><if pos:start="2435:17" pos:end="2439:18">if <condition pos:start="2435:20" pos:end="2435:52">(<expr pos:start="2435:21" pos:end="2435:50"><name pos:start="2435:21" pos:end="2435:32"><name pos:start="2435:21" pos:end="2435:21">c</name><operator pos:start="2435:22" pos:end="2435:23">-&gt;</operator><name pos:start="2435:24" pos:end="2435:32">first_pts</name></name> <operator pos:start="2435:34" pos:end="2435:35">==</operator> <name pos:start="2435:37" pos:end="2435:50">AV_NOPTS_VALUE</name></expr> )</condition><block pos:start="2435:53" pos:end="2439:18">{<block_content pos:start="2436:1" pos:end="2439:17">
<if_stmt pos:start="2436:1" pos:end="2439:17"><if pos:start="2436:1" pos:end="2439:17">if<condition pos:start="2436:3" pos:end="2436:30">( <expr pos:start="2436:5" pos:end="2436:29"><name pos:start="2436:5" pos:end="2436:11"><name pos:start="2436:5" pos:end="2436:7">pkt</name><operator pos:start="2436:8" pos:end="2436:8">.</operator><name pos:start="2436:9" pos:end="2436:11">dts</name></name> <operator pos:start="2436:13" pos:end="2436:14">!=</operator> <name pos:start="2436:16" pos:end="2436:29">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="2436:32" pos:end="2439:17">{<block_content pos:start="2437:21" pos:end="2438:45">
                    <expr_stmt pos:start="2437:21" pos:end="2437:122"><expr pos:start="2437:21" pos:end="2437:121"><name pos:start="2437:21" pos:end="2437:32"><name pos:start="2437:21" pos:end="2437:21">c</name><operator pos:start="2437:22" pos:end="2437:23">-&gt;</operator><name pos:start="2437:24" pos:end="2437:32">first_pts</name></name> <operator pos:start="2437:34" pos:end="2437:34">=</operator> <call pos:start="2437:36" pos:end="2437:121"><name pos:start="2437:36" pos:end="2437:47">av_rescale_q</name><argument_list pos:start="2437:48" pos:end="2437:121">(<argument pos:start="2437:49" pos:end="2437:55"><expr pos:start="2437:49" pos:end="2437:55"><name pos:start="2437:49" pos:end="2437:55"><name pos:start="2437:49" pos:end="2437:51">pkt</name><operator pos:start="2437:52" pos:end="2437:52">.</operator><name pos:start="2437:53" pos:end="2437:55">dts</name></name></expr></argument>, <argument pos:start="2437:58" pos:end="2437:104"><expr pos:start="2437:58" pos:end="2437:104"><name pos:start="2437:58" pos:end="2437:93"><name pos:start="2437:58" pos:end="2437:58">c</name><operator pos:start="2437:59" pos:end="2437:60">-&gt;</operator><name pos:start="2437:61" pos:end="2437:66">fmt_in</name><operator pos:start="2437:67" pos:end="2437:68">-&gt;</operator><name pos:start="2437:69" pos:end="2437:75">streams</name><index pos:start="2437:76" pos:end="2437:93">[<expr pos:start="2437:77" pos:end="2437:92"><name pos:start="2437:77" pos:end="2437:92"><name pos:start="2437:77" pos:end="2437:79">pkt</name><operator pos:start="2437:80" pos:end="2437:80">.</operator><name pos:start="2437:81" pos:end="2437:92">stream_index</name></name></expr>]</index></name><operator pos:start="2437:94" pos:end="2437:95">-&gt;</operator><name pos:start="2437:96" pos:end="2437:104">time_base</name></expr></argument>, <argument pos:start="2437:107" pos:end="2437:120"><expr pos:start="2437:107" pos:end="2437:120"><name pos:start="2437:107" pos:end="2437:120">AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2438:21" pos:end="2438:45"><expr pos:start="2438:21" pos:end="2438:44"><name pos:start="2438:21" pos:end="2438:33"><name pos:start="2438:21" pos:end="2438:21">c</name><operator pos:start="2438:22" pos:end="2438:23">-&gt;</operator><name pos:start="2438:24" pos:end="2438:33">start_time</name></name> <operator pos:start="2438:35" pos:end="2438:35">=</operator> <name pos:start="2438:37" pos:end="2438:44">cur_time</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt>
                <comment type="block" pos:start="2440:17" pos:end="2440:55">/* send it to the appropriate stream */</comment>
                <if_stmt pos:start="2441:17" pos:end="2537:17"><if pos:start="2441:17" pos:end="2466:17">if <condition pos:start="2441:20" pos:end="2441:36">(<expr pos:start="2441:21" pos:end="2441:35"><name pos:start="2441:21" pos:end="2441:35"><name pos:start="2441:21" pos:end="2441:21">c</name><operator pos:start="2441:22" pos:end="2441:23">-&gt;</operator><name pos:start="2441:24" pos:end="2441:29">stream</name><operator pos:start="2441:30" pos:end="2441:31">-&gt;</operator><name pos:start="2441:32" pos:end="2441:35">feed</name></name></expr>)</condition> <block pos:start="2441:38" pos:end="2466:17">{<block_content pos:start="2443:21" pos:end="2465:21">
                    <comment type="block" pos:start="2442:21" pos:end="2442:72">/* if coming from a feed, select the right stream */</comment>
                    <if_stmt pos:start="2443:21" pos:end="2452:21"><if pos:start="2443:21" pos:end="2452:21">if <condition pos:start="2443:24" pos:end="2443:42">(<expr pos:start="2443:25" pos:end="2443:41"><name pos:start="2443:25" pos:end="2443:41"><name pos:start="2443:25" pos:end="2443:25">c</name><operator pos:start="2443:26" pos:end="2443:27">-&gt;</operator><name pos:start="2443:28" pos:end="2443:41">switch_pending</name></name></expr>)</condition> <block pos:start="2443:44" pos:end="2452:21">{<block_content pos:start="2444:25" pos:end="2451:25">
                        <expr_stmt pos:start="2444:25" pos:end="2444:46"><expr pos:start="2444:25" pos:end="2444:45"><name pos:start="2444:25" pos:end="2444:41"><name pos:start="2444:25" pos:end="2444:25">c</name><operator pos:start="2444:26" pos:end="2444:27">-&gt;</operator><name pos:start="2444:28" pos:end="2444:41">switch_pending</name></name> <operator pos:start="2444:43" pos:end="2444:43">=</operator> <literal type="number" pos:start="2444:45" pos:end="2444:45">0</literal></expr>;</expr_stmt>
                        <for pos:start="2445:25" pos:end="2451:25">for<control pos:start="2445:28" pos:end="2445:60">(<init pos:start="2445:29" pos:end="2445:32"><expr pos:start="2445:29" pos:end="2445:31"><name pos:start="2445:29" pos:end="2445:29">i</name><operator pos:start="2445:30" pos:end="2445:30">=</operator><literal type="number" pos:start="2445:31" pos:end="2445:31">0</literal></expr>;</init><condition pos:start="2445:33" pos:end="2445:56"><expr pos:start="2445:33" pos:end="2445:55"><name pos:start="2445:33" pos:end="2445:33">i</name><operator pos:start="2445:34" pos:end="2445:34">&lt;</operator><name pos:start="2445:35" pos:end="2445:55"><name pos:start="2445:35" pos:end="2445:35">c</name><operator pos:start="2445:36" pos:end="2445:37">-&gt;</operator><name pos:start="2445:38" pos:end="2445:43">stream</name><operator pos:start="2445:44" pos:end="2445:45">-&gt;</operator><name pos:start="2445:46" pos:end="2445:55">nb_streams</name></name></expr>;</condition><incr pos:start="2445:57" pos:end="2445:59"><expr pos:start="2445:57" pos:end="2445:59"><name pos:start="2445:57" pos:end="2445:57">i</name><operator pos:start="2445:58" pos:end="2445:59">++</operator></expr></incr>)</control> <block pos:start="2445:62" pos:end="2451:25">{<block_content pos:start="2446:29" pos:end="2450:54">
                            <if_stmt pos:start="2446:29" pos:end="2448:67"><if pos:start="2446:29" pos:end="2448:67">if <condition pos:start="2446:32" pos:end="2446:78">(<expr pos:start="2446:33" pos:end="2446:77"><name pos:start="2446:33" pos:end="2446:57"><name pos:start="2446:33" pos:end="2446:33">c</name><operator pos:start="2446:34" pos:end="2446:35">-&gt;</operator><name pos:start="2446:36" pos:end="2446:54">switch_feed_streams</name><index pos:start="2446:55" pos:end="2446:57">[<expr pos:start="2446:56" pos:end="2446:56"><name pos:start="2446:56" pos:end="2446:56">i</name></expr>]</index></name> <operator pos:start="2446:59" pos:end="2446:60">==</operator> <name pos:start="2446:62" pos:end="2446:77"><name pos:start="2446:62" pos:end="2446:64">pkt</name><operator pos:start="2446:65" pos:end="2446:65">.</operator><name pos:start="2446:66" pos:end="2446:77">stream_index</name></name></expr>)</condition><block type="pseudo" pos:start="2447:33" pos:end="2448:67"><block_content pos:start="2447:33" pos:end="2448:67">
                                <if_stmt pos:start="2447:33" pos:end="2448:67"><if pos:start="2447:33" pos:end="2448:67">if <condition pos:start="2447:36" pos:end="2447:64">(<expr pos:start="2447:37" pos:end="2447:63"><name pos:start="2447:37" pos:end="2447:45"><name pos:start="2447:37" pos:end="2447:39">pkt</name><operator pos:start="2447:40" pos:end="2447:40">.</operator><name pos:start="2447:41" pos:end="2447:45">flags</name></name> <operator pos:start="2447:47" pos:end="2447:47">&amp;</operator> <name pos:start="2447:49" pos:end="2447:63">AV_PKT_FLAG_KEY</name></expr>)</condition><block type="pseudo" pos:start="2448:37" pos:end="2448:67"><block_content pos:start="2448:37" pos:end="2448:67">
                                    <expr_stmt pos:start="2448:37" pos:end="2448:67"><expr pos:start="2448:37" pos:end="2448:66"><name pos:start="2448:37" pos:end="2448:61"><name pos:start="2448:37" pos:end="2448:37">c</name><operator pos:start="2448:38" pos:end="2448:39">-&gt;</operator><name pos:start="2448:40" pos:end="2448:58">switch_feed_streams</name><index pos:start="2448:59" pos:end="2448:61">[<expr pos:start="2448:60" pos:end="2448:60"><name pos:start="2448:60" pos:end="2448:60">i</name></expr>]</index></name> <operator pos:start="2448:63" pos:end="2448:63">=</operator> <operator pos:start="2448:65" pos:end="2448:65">-</operator><literal type="number" pos:start="2448:66" pos:end="2448:66">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
                            <if_stmt pos:start="2449:29" pos:end="2450:54"><if pos:start="2449:29" pos:end="2450:54">if <condition pos:start="2449:32" pos:end="2449:63">(<expr pos:start="2449:33" pos:end="2449:62"><name pos:start="2449:33" pos:end="2449:57"><name pos:start="2449:33" pos:end="2449:33">c</name><operator pos:start="2449:34" pos:end="2449:35">-&gt;</operator><name pos:start="2449:36" pos:end="2449:54">switch_feed_streams</name><index pos:start="2449:55" pos:end="2449:57">[<expr pos:start="2449:56" pos:end="2449:56"><name pos:start="2449:56" pos:end="2449:56">i</name></expr>]</index></name> <operator pos:start="2449:59" pos:end="2449:60">&gt;=</operator> <literal type="number" pos:start="2449:62" pos:end="2449:62">0</literal></expr>)</condition><block type="pseudo" pos:start="2450:33" pos:end="2450:54"><block_content pos:start="2450:33" pos:end="2450:54">
                                <expr_stmt pos:start="2450:33" pos:end="2450:54"><expr pos:start="2450:33" pos:end="2450:53"><name pos:start="2450:33" pos:end="2450:49"><name pos:start="2450:33" pos:end="2450:33">c</name><operator pos:start="2450:34" pos:end="2450:35">-&gt;</operator><name pos:start="2450:36" pos:end="2450:49">switch_pending</name></name> <operator pos:start="2450:51" pos:end="2450:51">=</operator> <literal type="number" pos:start="2450:53" pos:end="2450:53">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></if></if_stmt>
                    <for pos:start="2453:21" pos:end="2465:21">for<control pos:start="2453:24" pos:end="2453:56">(<init pos:start="2453:25" pos:end="2453:28"><expr pos:start="2453:25" pos:end="2453:27"><name pos:start="2453:25" pos:end="2453:25">i</name><operator pos:start="2453:26" pos:end="2453:26">=</operator><literal type="number" pos:start="2453:27" pos:end="2453:27">0</literal></expr>;</init><condition pos:start="2453:29" pos:end="2453:52"><expr pos:start="2453:29" pos:end="2453:51"><name pos:start="2453:29" pos:end="2453:29">i</name><operator pos:start="2453:30" pos:end="2453:30">&lt;</operator><name pos:start="2453:31" pos:end="2453:51"><name pos:start="2453:31" pos:end="2453:31">c</name><operator pos:start="2453:32" pos:end="2453:33">-&gt;</operator><name pos:start="2453:34" pos:end="2453:39">stream</name><operator pos:start="2453:40" pos:end="2453:41">-&gt;</operator><name pos:start="2453:42" pos:end="2453:51">nb_streams</name></name></expr>;</condition><incr pos:start="2453:53" pos:end="2453:55"><expr pos:start="2453:53" pos:end="2453:55"><name pos:start="2453:53" pos:end="2453:53">i</name><operator pos:start="2453:54" pos:end="2453:55">++</operator></expr></incr>)</control> <block pos:start="2453:58" pos:end="2465:21">{<block_content pos:start="2454:25" pos:end="2464:25">
                        <if_stmt pos:start="2454:25" pos:end="2464:25"><if pos:start="2454:25" pos:end="2464:25">if <condition pos:start="2454:28" pos:end="2454:75">(<expr pos:start="2454:29" pos:end="2454:74"><name pos:start="2454:29" pos:end="2454:54"><name pos:start="2454:29" pos:end="2454:29">c</name><operator pos:start="2454:30" pos:end="2454:31">-&gt;</operator><name pos:start="2454:32" pos:end="2454:37">stream</name><operator pos:start="2454:38" pos:end="2454:39">-&gt;</operator><name pos:start="2454:40" pos:end="2454:51">feed_streams</name><index pos:start="2454:52" pos:end="2454:54">[<expr pos:start="2454:53" pos:end="2454:53"><name pos:start="2454:53" pos:end="2454:53">i</name></expr>]</index></name> <operator pos:start="2454:56" pos:end="2454:57">==</operator> <name pos:start="2454:59" pos:end="2454:74"><name pos:start="2454:59" pos:end="2454:61">pkt</name><operator pos:start="2454:62" pos:end="2454:62">.</operator><name pos:start="2454:63" pos:end="2454:74">stream_index</name></name></expr>)</condition> <block pos:start="2454:77" pos:end="2464:25">{<block_content pos:start="2455:29" pos:end="2463:45">
                            <decl_stmt pos:start="2455:29" pos:end="2455:76"><decl pos:start="2455:29" pos:end="2455:75"><type pos:start="2455:29" pos:end="2455:38"><name pos:start="2455:29" pos:end="2455:36">AVStream</name> <modifier pos:start="2455:38" pos:end="2455:38">*</modifier></type><name pos:start="2455:39" pos:end="2455:40">st</name> <init pos:start="2455:42" pos:end="2455:75">= <expr pos:start="2455:44" pos:end="2455:75"><name pos:start="2455:44" pos:end="2455:75"><name pos:start="2455:44" pos:end="2455:44">c</name><operator pos:start="2455:45" pos:end="2455:46">-&gt;</operator><name pos:start="2455:47" pos:end="2455:52">fmt_in</name><operator pos:start="2455:53" pos:end="2455:54">-&gt;</operator><name pos:start="2455:55" pos:end="2455:61">streams</name><index pos:start="2455:62" pos:end="2455:75">[<expr pos:start="2455:63" pos:end="2455:74"><name pos:start="2455:63" pos:end="2455:74">source_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                            <expr_stmt pos:start="2456:29" pos:end="2456:49"><expr pos:start="2456:29" pos:end="2456:48"><name pos:start="2456:29" pos:end="2456:44"><name pos:start="2456:29" pos:end="2456:31">pkt</name><operator pos:start="2456:32" pos:end="2456:32">.</operator><name pos:start="2456:33" pos:end="2456:44">stream_index</name></name> <operator pos:start="2456:46" pos:end="2456:46">=</operator> <name pos:start="2456:48" pos:end="2456:48">i</name></expr>;</expr_stmt>
                            <if_stmt pos:start="2457:29" pos:end="2461:54"><if pos:start="2457:29" pos:end="2461:54">if <condition pos:start="2457:32" pos:end="2457:61">(<expr pos:start="2457:33" pos:end="2457:59"><name pos:start="2457:33" pos:end="2457:41"><name pos:start="2457:33" pos:end="2457:35">pkt</name><operator pos:start="2457:36" pos:end="2457:36">.</operator><name pos:start="2457:37" pos:end="2457:41">flags</name></name> <operator pos:start="2457:43" pos:end="2457:43">&amp;</operator> <name pos:start="2457:45" pos:end="2457:59">AV_PKT_FLAG_KEY</name></expr> )</condition><block pos:start="2457:62" pos:end="2461:54">{<block_content pos:start="2458:1" pos:end="2461:53">
<if_stmt pos:start="2458:1" pos:end="2461:53"><if pos:start="2458:1" pos:end="2461:53">if<condition pos:start="2458:3" pos:end="2460:61">(
                                <expr pos:start="2459:33" pos:end="2460:60"><operator pos:start="2459:33" pos:end="2459:33">(</operator><name pos:start="2459:34" pos:end="2459:57"><name pos:start="2459:34" pos:end="2459:35">st</name><operator pos:start="2459:36" pos:end="2459:37">-&gt;</operator><name pos:start="2459:38" pos:end="2459:45">codecpar</name><operator pos:start="2459:46" pos:end="2459:47">-&gt;</operator><name pos:start="2459:48" pos:end="2459:57">codec_type</name></name> <operator pos:start="2459:59" pos:end="2459:60">==</operator> <name pos:start="2459:62" pos:end="2459:79">AVMEDIA_TYPE_VIDEO</name> <operator pos:start="2459:81" pos:end="2459:82">||</operator>
                                 <name pos:start="2460:34" pos:end="2460:54"><name pos:start="2460:34" pos:end="2460:34">c</name><operator pos:start="2460:35" pos:end="2460:36">-&gt;</operator><name pos:start="2460:37" pos:end="2460:42">stream</name><operator pos:start="2460:43" pos:end="2460:44">-&gt;</operator><name pos:start="2460:45" pos:end="2460:54">nb_streams</name></name> <operator pos:start="2460:56" pos:end="2460:57">==</operator> <literal type="number" pos:start="2460:59" pos:end="2460:59">1</literal><operator pos:start="2460:60" pos:end="2460:60">)</operator></expr>)</condition><block type="pseudo" pos:start="2461:33" pos:end="2461:53"><block_content pos:start="2461:33" pos:end="2461:53">
                                <expr_stmt pos:start="2461:33" pos:end="2461:53"><expr pos:start="2461:33" pos:end="2461:52"><name pos:start="2461:33" pos:end="2461:48"><name pos:start="2461:33" pos:end="2461:33">c</name><operator pos:start="2461:34" pos:end="2461:35">-&gt;</operator><name pos:start="2461:36" pos:end="2461:48">got_key_frame</name></name> <operator pos:start="2461:50" pos:end="2461:50">=</operator> <literal type="number" pos:start="2461:52" pos:end="2461:52">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block></if></if_stmt>
                            <if_stmt pos:start="2462:29" pos:end="2463:45"><if pos:start="2462:29" pos:end="2463:45">if <condition pos:start="2462:32" pos:end="2462:76">(<expr pos:start="2462:33" pos:end="2462:75"><operator pos:start="2462:33" pos:end="2462:33">!</operator><name pos:start="2462:34" pos:end="2462:55"><name pos:start="2462:34" pos:end="2462:34">c</name><operator pos:start="2462:35" pos:end="2462:36">-&gt;</operator><name pos:start="2462:37" pos:end="2462:42">stream</name><operator pos:start="2462:43" pos:end="2462:44">-&gt;</operator><name pos:start="2462:45" pos:end="2462:55">send_on_key</name></name> <operator pos:start="2462:57" pos:end="2462:58">||</operator> <name pos:start="2462:60" pos:end="2462:75"><name pos:start="2462:60" pos:end="2462:60">c</name><operator pos:start="2462:61" pos:end="2462:62">-&gt;</operator><name pos:start="2462:63" pos:end="2462:75">got_key_frame</name></name></expr>)</condition><block type="pseudo" pos:start="2463:33" pos:end="2463:45"><block_content pos:start="2463:33" pos:end="2463:45">
                                <goto pos:start="2463:33" pos:end="2463:45">goto <name pos:start="2463:38" pos:end="2463:44">send_it</name>;</goto></block_content></block></if></if_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if> <else pos:start="2466:19" pos:end="2537:17">else <block pos:start="2466:24" pos:end="2537:17">{<block_content pos:start="2467:21" pos:end="2536:21">
                    <decl_stmt pos:start="2467:21" pos:end="2467:40"><decl pos:start="2467:21" pos:end="2467:33"><type pos:start="2467:21" pos:end="2467:30"><name pos:start="2467:21" pos:end="2467:28">AVStream</name> <modifier pos:start="2467:30" pos:end="2467:30">*</modifier></type><name pos:start="2467:31" pos:end="2467:33">ist</name></decl>, <decl pos:start="2467:36" pos:end="2467:39"><type ref="prev" pos:start="2467:21" pos:end="2467:30"><modifier pos:start="2467:36" pos:end="2467:36">*</modifier></type><name pos:start="2467:37" pos:end="2467:39">ost</name></decl>;</decl_stmt>
                <label pos:start="2468:17" pos:end="2468:24"><name pos:start="2468:17" pos:end="2468:23">send_it</name>:</label>
                    <expr_stmt pos:start="2469:21" pos:end="2469:59"><expr pos:start="2469:21" pos:end="2469:58"><name pos:start="2469:21" pos:end="2469:23">ist</name> <operator pos:start="2469:25" pos:end="2469:25">=</operator> <name pos:start="2469:27" pos:end="2469:58"><name pos:start="2469:27" pos:end="2469:27">c</name><operator pos:start="2469:28" pos:end="2469:29">-&gt;</operator><name pos:start="2469:30" pos:end="2469:35">fmt_in</name><operator pos:start="2469:36" pos:end="2469:37">-&gt;</operator><name pos:start="2469:38" pos:end="2469:44">streams</name><index pos:start="2469:45" pos:end="2469:58">[<expr pos:start="2469:46" pos:end="2469:57"><name pos:start="2469:46" pos:end="2469:57">source_index</name></expr>]</index></name></expr>;</expr_stmt>
                    <comment type="block" pos:start="2470:21" pos:end="2472:58">/* specific handling for RTP: we use several
                     * output streams (one for each RTP connection).
                     * XXX: need more abstract handling */</comment>
                    <if_stmt pos:start="2473:21" pos:end="2492:21"><if pos:start="2473:21" pos:end="2489:21">if <condition pos:start="2473:24" pos:end="2473:41">(<expr pos:start="2473:25" pos:end="2473:40"><name pos:start="2473:25" pos:end="2473:40"><name pos:start="2473:25" pos:end="2473:25">c</name><operator pos:start="2473:26" pos:end="2473:27">-&gt;</operator><name pos:start="2473:28" pos:end="2473:40">is_packetized</name></name></expr>)</condition> <block pos:start="2473:43" pos:end="2489:21">{<block_content pos:start="2475:25" pos:end="2488:45">
                        <comment type="block" pos:start="2474:25" pos:end="2474:60">/* compute send time and duration */</comment>
                        <if_stmt pos:start="2475:25" pos:end="2478:25"><if pos:start="2475:25" pos:end="2478:25">if <condition pos:start="2475:28" pos:end="2475:54">(<expr pos:start="2475:29" pos:end="2475:53"><name pos:start="2475:29" pos:end="2475:35"><name pos:start="2475:29" pos:end="2475:31">pkt</name><operator pos:start="2475:32" pos:end="2475:32">.</operator><name pos:start="2475:33" pos:end="2475:35">dts</name></name> <operator pos:start="2475:37" pos:end="2475:38">!=</operator> <name pos:start="2475:40" pos:end="2475:53">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="2475:56" pos:end="2478:25">{<block_content pos:start="2476:29" pos:end="2477:55">
                            <expr_stmt pos:start="2476:29" pos:end="2476:95"><expr pos:start="2476:29" pos:end="2476:94"><name pos:start="2476:29" pos:end="2476:38"><name pos:start="2476:29" pos:end="2476:29">c</name><operator pos:start="2476:30" pos:end="2476:31">-&gt;</operator><name pos:start="2476:32" pos:end="2476:38">cur_pts</name></name> <operator pos:start="2476:40" pos:end="2476:40">=</operator> <call pos:start="2476:42" pos:end="2476:94"><name pos:start="2476:42" pos:end="2476:53">av_rescale_q</name><argument_list pos:start="2476:54" pos:end="2476:94">(<argument pos:start="2476:55" pos:end="2476:61"><expr pos:start="2476:55" pos:end="2476:61"><name pos:start="2476:55" pos:end="2476:61"><name pos:start="2476:55" pos:end="2476:57">pkt</name><operator pos:start="2476:58" pos:end="2476:58">.</operator><name pos:start="2476:59" pos:end="2476:61">dts</name></name></expr></argument>, <argument pos:start="2476:64" pos:end="2476:77"><expr pos:start="2476:64" pos:end="2476:77"><name pos:start="2476:64" pos:end="2476:77"><name pos:start="2476:64" pos:end="2476:66">ist</name><operator pos:start="2476:67" pos:end="2476:68">-&gt;</operator><name pos:start="2476:69" pos:end="2476:77">time_base</name></name></expr></argument>, <argument pos:start="2476:80" pos:end="2476:93"><expr pos:start="2476:80" pos:end="2476:93"><name pos:start="2476:80" pos:end="2476:93">AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt pos:start="2477:29" pos:end="2477:55"><expr pos:start="2477:29" pos:end="2477:54"><name pos:start="2477:29" pos:end="2477:38"><name pos:start="2477:29" pos:end="2477:29">c</name><operator pos:start="2477:30" pos:end="2477:31">-&gt;</operator><name pos:start="2477:32" pos:end="2477:38">cur_pts</name></name> <operator pos:start="2477:40" pos:end="2477:41">-=</operator> <name pos:start="2477:43" pos:end="2477:54"><name pos:start="2477:43" pos:end="2477:43">c</name><operator pos:start="2477:44" pos:end="2477:45">-&gt;</operator><name pos:start="2477:46" pos:end="2477:54">first_pts</name></name></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt pos:start="2479:25" pos:end="2479:107"><expr pos:start="2479:25" pos:end="2479:106"><name pos:start="2479:25" pos:end="2479:45"><name pos:start="2479:25" pos:end="2479:25">c</name><operator pos:start="2479:26" pos:end="2479:27">-&gt;</operator><name pos:start="2479:28" pos:end="2479:45">cur_frame_duration</name></name> <operator pos:start="2479:47" pos:end="2479:47">=</operator> <call pos:start="2479:49" pos:end="2479:106"><name pos:start="2479:49" pos:end="2479:60">av_rescale_q</name><argument_list pos:start="2479:61" pos:end="2479:106">(<argument pos:start="2479:62" pos:end="2479:73"><expr pos:start="2479:62" pos:end="2479:73"><name pos:start="2479:62" pos:end="2479:73"><name pos:start="2479:62" pos:end="2479:64">pkt</name><operator pos:start="2479:65" pos:end="2479:65">.</operator><name pos:start="2479:66" pos:end="2479:73">duration</name></name></expr></argument>, <argument pos:start="2479:76" pos:end="2479:89"><expr pos:start="2479:76" pos:end="2479:89"><name pos:start="2479:76" pos:end="2479:89"><name pos:start="2479:76" pos:end="2479:78">ist</name><operator pos:start="2479:79" pos:end="2479:80">-&gt;</operator><name pos:start="2479:81" pos:end="2479:89">time_base</name></name></expr></argument>, <argument pos:start="2479:92" pos:end="2479:105"><expr pos:start="2479:92" pos:end="2479:105"><name pos:start="2479:92" pos:end="2479:105">AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="block" pos:start="2480:25" pos:end="2480:46">/* find RTP context */</comment>
                        <expr_stmt pos:start="2481:25" pos:end="2481:66"><expr pos:start="2481:25" pos:end="2481:65"><name pos:start="2481:25" pos:end="2481:46"><name pos:start="2481:25" pos:end="2481:25">c</name><operator pos:start="2481:26" pos:end="2481:27">-&gt;</operator><name pos:start="2481:28" pos:end="2481:46">packet_stream_index</name></name> <operator pos:start="2481:48" pos:end="2481:48">=</operator> <name pos:start="2481:50" pos:end="2481:65"><name pos:start="2481:50" pos:end="2481:52">pkt</name><operator pos:start="2481:53" pos:end="2481:53">.</operator><name pos:start="2481:54" pos:end="2481:65">stream_index</name></name></expr>;</expr_stmt>
                        <expr_stmt pos:start="2482:25" pos:end="2482:65"><expr pos:start="2482:25" pos:end="2482:64"><name pos:start="2482:25" pos:end="2482:27">ctx</name> <operator pos:start="2482:29" pos:end="2482:29">=</operator> <name pos:start="2482:31" pos:end="2482:64"><name pos:start="2482:31" pos:end="2482:31">c</name><operator pos:start="2482:32" pos:end="2482:33">-&gt;</operator><name pos:start="2482:34" pos:end="2482:40">rtp_ctx</name><index pos:start="2482:41" pos:end="2482:64">[<expr pos:start="2482:42" pos:end="2482:63"><name pos:start="2482:42" pos:end="2482:63"><name pos:start="2482:42" pos:end="2482:42">c</name><operator pos:start="2482:43" pos:end="2482:44">-&gt;</operator><name pos:start="2482:45" pos:end="2482:63">packet_stream_index</name></name></expr>]</index></name></expr>;</expr_stmt>
                        <if_stmt pos:start="2483:25" pos:end="2486:25"><if pos:start="2483:25" pos:end="2486:25">if<condition pos:start="2483:27" pos:end="2483:32">(<expr pos:start="2483:28" pos:end="2483:31"><operator pos:start="2483:28" pos:end="2483:28">!</operator><name pos:start="2483:29" pos:end="2483:31">ctx</name></expr>)</condition> <block pos:start="2483:34" pos:end="2486:25">{<block_content pos:start="2484:29" pos:end="2485:34">
                            <expr_stmt pos:start="2484:29" pos:end="2484:50"><expr pos:start="2484:29" pos:end="2484:49"><call pos:start="2484:29" pos:end="2484:49"><name pos:start="2484:29" pos:end="2484:43">av_packet_unref</name><argument_list pos:start="2484:44" pos:end="2484:49">(<argument pos:start="2484:45" pos:end="2484:48"><expr pos:start="2484:45" pos:end="2484:48"><operator pos:start="2484:45" pos:end="2484:45">&amp;</operator><name pos:start="2484:46" pos:end="2484:48">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break pos:start="2485:29" pos:end="2485:34">break;</break>
                        </block_content>}</block></if></if_stmt>
                        <comment type="block" pos:start="2487:25" pos:end="2487:64">/* only one stream per RTP connection */</comment>
                        <expr_stmt pos:start="2488:25" pos:end="2488:45"><expr pos:start="2488:25" pos:end="2488:44"><name pos:start="2488:25" pos:end="2488:40"><name pos:start="2488:25" pos:end="2488:27">pkt</name><operator pos:start="2488:28" pos:end="2488:28">.</operator><name pos:start="2488:29" pos:end="2488:40">stream_index</name></name> <operator pos:start="2488:42" pos:end="2488:42">=</operator> <literal type="number" pos:start="2488:44" pos:end="2488:44">0</literal></expr>;</expr_stmt>
                    </block_content>}</block></if> <else pos:start="2489:23" pos:end="2492:21">else <block pos:start="2489:28" pos:end="2492:21">{<block_content pos:start="2490:25" pos:end="2490:42">
                        <expr_stmt pos:start="2490:25" pos:end="2490:42"><expr pos:start="2490:25" pos:end="2490:41"><name pos:start="2490:25" pos:end="2490:27">ctx</name> <operator pos:start="2490:29" pos:end="2490:29">=</operator> <name pos:start="2490:31" pos:end="2490:41"><name pos:start="2490:31" pos:end="2490:31">c</name><operator pos:start="2490:32" pos:end="2490:33">-&gt;</operator><name pos:start="2490:34" pos:end="2490:41">pfmt_ctx</name></name></expr>;</expr_stmt>
                        <comment type="block" pos:start="2491:25" pos:end="2491:40">/* Fudge here */</comment>
                    </block_content>}</block></else></if_stmt>

                    <if_stmt pos:start="2494:21" pos:end="2503:58"><if pos:start="2494:21" pos:end="2502:21">if <condition pos:start="2494:24" pos:end="2494:41">(<expr pos:start="2494:25" pos:end="2494:40"><name pos:start="2494:25" pos:end="2494:40"><name pos:start="2494:25" pos:end="2494:25">c</name><operator pos:start="2494:26" pos:end="2494:27">-&gt;</operator><name pos:start="2494:28" pos:end="2494:40">is_packetized</name></name></expr>)</condition> <block pos:start="2494:43" pos:end="2502:21">{<block_content pos:start="2495:25" pos:end="2501:72">
                        <decl_stmt pos:start="2495:25" pos:end="2495:44"><decl pos:start="2495:25" pos:end="2495:43"><type pos:start="2495:25" pos:end="2495:27"><name pos:start="2495:25" pos:end="2495:27">int</name></type> <name pos:start="2495:29" pos:end="2495:43">max_packet_size</name></decl>;</decl_stmt>
                        <if_stmt pos:start="2496:25" pos:end="2499:102"><if pos:start="2496:25" pos:end="2497:71">if <condition pos:start="2496:28" pos:end="2496:72">(<expr pos:start="2496:29" pos:end="2496:71"><name pos:start="2496:29" pos:end="2496:43"><name pos:start="2496:29" pos:end="2496:29">c</name><operator pos:start="2496:30" pos:end="2496:31">-&gt;</operator><name pos:start="2496:32" pos:end="2496:43">rtp_protocol</name></name> <operator pos:start="2496:45" pos:end="2496:46">==</operator> <name pos:start="2496:48" pos:end="2496:71">RTSP_LOWER_TRANSPORT_TCP</name></expr>)</condition><block type="pseudo" pos:start="2497:29" pos:end="2497:71"><block_content pos:start="2497:29" pos:end="2497:71">
                            <expr_stmt pos:start="2497:29" pos:end="2497:71"><expr pos:start="2497:29" pos:end="2497:70"><name pos:start="2497:29" pos:end="2497:43">max_packet_size</name> <operator pos:start="2497:45" pos:end="2497:45">=</operator> <name pos:start="2497:47" pos:end="2497:70">RTSP_TCP_MAX_PACKET_SIZE</name></expr>;</expr_stmt></block_content></block></if>
                        <else pos:start="2498:25" pos:end="2499:102">else<block type="pseudo" pos:start="2499:29" pos:end="2499:102"><block_content pos:start="2499:29" pos:end="2499:102">
                            <expr_stmt pos:start="2499:29" pos:end="2499:102"><expr pos:start="2499:29" pos:end="2499:101"><name pos:start="2499:29" pos:end="2499:43">max_packet_size</name> <operator pos:start="2499:45" pos:end="2499:45">=</operator> <name pos:start="2499:47" pos:end="2499:84"><name pos:start="2499:47" pos:end="2499:47">c</name><operator pos:start="2499:48" pos:end="2499:49">-&gt;</operator><name pos:start="2499:50" pos:end="2499:60">rtp_handles</name><index pos:start="2499:61" pos:end="2499:84">[<expr pos:start="2499:62" pos:end="2499:83"><name pos:start="2499:62" pos:end="2499:83"><name pos:start="2499:62" pos:end="2499:62">c</name><operator pos:start="2499:63" pos:end="2499:64">-&gt;</operator><name pos:start="2499:65" pos:end="2499:83">packet_stream_index</name></name></expr>]</index></name><operator pos:start="2499:85" pos:end="2499:86">-&gt;</operator><name pos:start="2499:87" pos:end="2499:101">max_packet_size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
                        <expr_stmt pos:start="2500:25" pos:end="2501:72"><expr pos:start="2500:25" pos:end="2501:71"><name pos:start="2500:25" pos:end="2500:27">ret</name> <operator pos:start="2500:29" pos:end="2500:29">=</operator> <call pos:start="2500:31" pos:end="2501:71"><name pos:start="2500:31" pos:end="2500:54">ffio_open_dyn_packet_buf</name><argument_list pos:start="2500:55" pos:end="2501:71">(<argument pos:start="2500:56" pos:end="2500:63"><expr pos:start="2500:56" pos:end="2500:63"><operator pos:start="2500:56" pos:end="2500:56">&amp;</operator><name pos:start="2500:57" pos:end="2500:63"><name pos:start="2500:57" pos:end="2500:59">ctx</name><operator pos:start="2500:60" pos:end="2500:61">-&gt;</operator><name pos:start="2500:62" pos:end="2500:63">pb</name></name></expr></argument>,
                                                       <argument pos:start="2501:56" pos:end="2501:70"><expr pos:start="2501:56" pos:end="2501:70"><name pos:start="2501:56" pos:end="2501:70">max_packet_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else pos:start="2502:23" pos:end="2503:58">else<block type="pseudo" pos:start="2503:25" pos:end="2503:58"><block_content pos:start="2503:25" pos:end="2503:58">
                        <expr_stmt pos:start="2503:25" pos:end="2503:58"><expr pos:start="2503:25" pos:end="2503:57"><name pos:start="2503:25" pos:end="2503:27">ret</name> <operator pos:start="2503:29" pos:end="2503:29">=</operator> <call pos:start="2503:31" pos:end="2503:57"><name pos:start="2503:31" pos:end="2503:47">avio_open_dyn_buf</name><argument_list pos:start="2503:48" pos:end="2503:57">(<argument pos:start="2503:49" pos:end="2503:56"><expr pos:start="2503:49" pos:end="2503:56"><operator pos:start="2503:49" pos:end="2503:49">&amp;</operator><name pos:start="2503:50" pos:end="2503:56"><name pos:start="2503:50" pos:end="2503:52">ctx</name><operator pos:start="2503:53" pos:end="2503:54">-&gt;</operator><name pos:start="2503:55" pos:end="2503:56">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <if_stmt pos:start="2505:21" pos:end="2508:21"><if pos:start="2505:21" pos:end="2508:21">if <condition pos:start="2505:24" pos:end="2505:32">(<expr pos:start="2505:25" pos:end="2505:31"><name pos:start="2505:25" pos:end="2505:27">ret</name> <operator pos:start="2505:29" pos:end="2505:29">&lt;</operator> <literal type="number" pos:start="2505:31" pos:end="2505:31">0</literal></expr>)</condition> <block pos:start="2505:34" pos:end="2508:21">{<block_content pos:start="2507:25" pos:end="2507:34">
                        <comment type="block" pos:start="2506:25" pos:end="2506:49">/* XXX: potential leak */</comment>
                        <return pos:start="2507:25" pos:end="2507:34">return <expr pos:start="2507:32" pos:end="2507:33"><operator pos:start="2507:32" pos:end="2507:32">-</operator><literal type="number" pos:start="2507:33" pos:end="2507:33">1</literal></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt pos:start="2509:21" pos:end="2509:57"><expr pos:start="2509:21" pos:end="2509:56"><name pos:start="2509:21" pos:end="2509:23">ost</name> <operator pos:start="2509:25" pos:end="2509:25">=</operator> <name pos:start="2509:27" pos:end="2509:56"><name pos:start="2509:27" pos:end="2509:29">ctx</name><operator pos:start="2509:30" pos:end="2509:31">-&gt;</operator><name pos:start="2509:32" pos:end="2509:38">streams</name><index pos:start="2509:39" pos:end="2509:56">[<expr pos:start="2509:40" pos:end="2509:55"><name pos:start="2509:40" pos:end="2509:55"><name pos:start="2509:40" pos:end="2509:42">pkt</name><operator pos:start="2509:43" pos:end="2509:43">.</operator><name pos:start="2509:44" pos:end="2509:55">stream_index</name></name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="2511:21" pos:end="2511:42"><expr pos:start="2511:21" pos:end="2511:41"><name pos:start="2511:21" pos:end="2511:37"><name pos:start="2511:21" pos:end="2511:23">ctx</name><operator pos:start="2511:24" pos:end="2511:25">-&gt;</operator><name pos:start="2511:26" pos:end="2511:27">pb</name><operator pos:start="2511:28" pos:end="2511:29">-&gt;</operator><name pos:start="2511:30" pos:end="2511:37">seekable</name></name> <operator pos:start="2511:39" pos:end="2511:39">=</operator> <literal type="number" pos:start="2511:41" pos:end="2511:41">0</literal></expr>;</expr_stmt>
                    <if_stmt pos:start="2512:21" pos:end="2514:63"><if pos:start="2512:21" pos:end="2514:63">if <condition pos:start="2512:24" pos:end="2512:50">(<expr pos:start="2512:25" pos:end="2512:49"><name pos:start="2512:25" pos:end="2512:31"><name pos:start="2512:25" pos:end="2512:27">pkt</name><operator pos:start="2512:28" pos:end="2512:28">.</operator><name pos:start="2512:29" pos:end="2512:31">dts</name></name> <operator pos:start="2512:33" pos:end="2512:34">!=</operator> <name pos:start="2512:36" pos:end="2512:49">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="2513:25" pos:end="2514:63"><block_content pos:start="2513:25" pos:end="2514:63">
                        <expr_stmt pos:start="2513:25" pos:end="2514:63"><expr pos:start="2513:25" pos:end="2514:62"><name pos:start="2513:25" pos:end="2513:31"><name pos:start="2513:25" pos:end="2513:27">pkt</name><operator pos:start="2513:28" pos:end="2513:28">.</operator><name pos:start="2513:29" pos:end="2513:31">dts</name></name> <operator pos:start="2513:33" pos:end="2513:33">=</operator> <call pos:start="2513:35" pos:end="2514:62"><name pos:start="2513:35" pos:end="2513:46">av_rescale_q</name><argument_list pos:start="2513:47" pos:end="2514:62">(<argument pos:start="2513:48" pos:end="2513:54"><expr pos:start="2513:48" pos:end="2513:54"><name pos:start="2513:48" pos:end="2513:54"><name pos:start="2513:48" pos:end="2513:50">pkt</name><operator pos:start="2513:51" pos:end="2513:51">.</operator><name pos:start="2513:52" pos:end="2513:54">dts</name></name></expr></argument>, <argument pos:start="2513:57" pos:end="2513:70"><expr pos:start="2513:57" pos:end="2513:70"><name pos:start="2513:57" pos:end="2513:70"><name pos:start="2513:57" pos:end="2513:59">ist</name><operator pos:start="2513:60" pos:end="2513:61">-&gt;</operator><name pos:start="2513:62" pos:end="2513:70">time_base</name></name></expr></argument>,
                                               <argument pos:start="2514:48" pos:end="2514:61"><expr pos:start="2514:48" pos:end="2514:61"><name pos:start="2514:48" pos:end="2514:61"><name pos:start="2514:48" pos:end="2514:50">ost</name><operator pos:start="2514:51" pos:end="2514:52">-&gt;</operator><name pos:start="2514:53" pos:end="2514:61">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <if_stmt pos:start="2515:21" pos:end="2517:63"><if pos:start="2515:21" pos:end="2517:63">if <condition pos:start="2515:24" pos:end="2515:50">(<expr pos:start="2515:25" pos:end="2515:49"><name pos:start="2515:25" pos:end="2515:31"><name pos:start="2515:25" pos:end="2515:27">pkt</name><operator pos:start="2515:28" pos:end="2515:28">.</operator><name pos:start="2515:29" pos:end="2515:31">pts</name></name> <operator pos:start="2515:33" pos:end="2515:34">!=</operator> <name pos:start="2515:36" pos:end="2515:49">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="2516:25" pos:end="2517:63"><block_content pos:start="2516:25" pos:end="2517:63">
                        <expr_stmt pos:start="2516:25" pos:end="2517:63"><expr pos:start="2516:25" pos:end="2517:62"><name pos:start="2516:25" pos:end="2516:31"><name pos:start="2516:25" pos:end="2516:27">pkt</name><operator pos:start="2516:28" pos:end="2516:28">.</operator><name pos:start="2516:29" pos:end="2516:31">pts</name></name> <operator pos:start="2516:33" pos:end="2516:33">=</operator> <call pos:start="2516:35" pos:end="2517:62"><name pos:start="2516:35" pos:end="2516:46">av_rescale_q</name><argument_list pos:start="2516:47" pos:end="2517:62">(<argument pos:start="2516:48" pos:end="2516:54"><expr pos:start="2516:48" pos:end="2516:54"><name pos:start="2516:48" pos:end="2516:54"><name pos:start="2516:48" pos:end="2516:50">pkt</name><operator pos:start="2516:51" pos:end="2516:51">.</operator><name pos:start="2516:52" pos:end="2516:54">pts</name></name></expr></argument>, <argument pos:start="2516:57" pos:end="2516:70"><expr pos:start="2516:57" pos:end="2516:70"><name pos:start="2516:57" pos:end="2516:70"><name pos:start="2516:57" pos:end="2516:59">ist</name><operator pos:start="2516:60" pos:end="2516:61">-&gt;</operator><name pos:start="2516:62" pos:end="2516:70">time_base</name></name></expr></argument>,
                                               <argument pos:start="2517:48" pos:end="2517:61"><expr pos:start="2517:48" pos:end="2517:61"><name pos:start="2517:48" pos:end="2517:61"><name pos:start="2517:48" pos:end="2517:50">ost</name><operator pos:start="2517:51" pos:end="2517:52">-&gt;</operator><name pos:start="2517:53" pos:end="2517:61">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt pos:start="2518:21" pos:end="2519:64"><expr pos:start="2518:21" pos:end="2519:63"><name pos:start="2518:21" pos:end="2518:32"><name pos:start="2518:21" pos:end="2518:23">pkt</name><operator pos:start="2518:24" pos:end="2518:24">.</operator><name pos:start="2518:25" pos:end="2518:32">duration</name></name> <operator pos:start="2518:34" pos:end="2518:34">=</operator> <call pos:start="2518:36" pos:end="2519:63"><name pos:start="2518:36" pos:end="2518:47">av_rescale_q</name><argument_list pos:start="2518:48" pos:end="2519:63">(<argument pos:start="2518:49" pos:end="2518:60"><expr pos:start="2518:49" pos:end="2518:60"><name pos:start="2518:49" pos:end="2518:60"><name pos:start="2518:49" pos:end="2518:51">pkt</name><operator pos:start="2518:52" pos:end="2518:52">.</operator><name pos:start="2518:53" pos:end="2518:60">duration</name></name></expr></argument>, <argument pos:start="2518:63" pos:end="2518:76"><expr pos:start="2518:63" pos:end="2518:76"><name pos:start="2518:63" pos:end="2518:76"><name pos:start="2518:63" pos:end="2518:65">ist</name><operator pos:start="2518:66" pos:end="2518:67">-&gt;</operator><name pos:start="2518:68" pos:end="2518:76">time_base</name></name></expr></argument>,
                                                <argument pos:start="2519:49" pos:end="2519:62"><expr pos:start="2519:49" pos:end="2519:62"><name pos:start="2519:49" pos:end="2519:62"><name pos:start="2519:49" pos:end="2519:51">ost</name><operator pos:start="2519:52" pos:end="2519:53">-&gt;</operator><name pos:start="2519:54" pos:end="2519:62">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="2520:21" pos:end="2524:21"><if pos:start="2520:21" pos:end="2524:21">if <condition pos:start="2520:24" pos:end="2520:62">(<expr pos:start="2520:25" pos:end="2520:61"><operator pos:start="2520:25" pos:end="2520:25">(</operator><name pos:start="2520:26" pos:end="2520:28">ret</name> <operator pos:start="2520:30" pos:end="2520:30">=</operator> <call pos:start="2520:32" pos:end="2520:56"><name pos:start="2520:32" pos:end="2520:45">av_write_frame</name><argument_list pos:start="2520:46" pos:end="2520:56">(<argument pos:start="2520:47" pos:end="2520:49"><expr pos:start="2520:47" pos:end="2520:49"><name pos:start="2520:47" pos:end="2520:49">ctx</name></expr></argument>, <argument pos:start="2520:52" pos:end="2520:55"><expr pos:start="2520:52" pos:end="2520:55"><operator pos:start="2520:52" pos:end="2520:52">&amp;</operator><name pos:start="2520:53" pos:end="2520:55">pkt</name></expr></argument>)</argument_list></call><operator pos:start="2520:57" pos:end="2520:57">)</operator> <operator pos:start="2520:59" pos:end="2520:59">&lt;</operator> <literal type="number" pos:start="2520:61" pos:end="2520:61">0</literal></expr>)</condition> <block pos:start="2520:64" pos:end="2524:21">{<block_content pos:start="2521:25" pos:end="2523:63">
                        <expr_stmt pos:start="2521:25" pos:end="2522:71"><expr pos:start="2521:25" pos:end="2522:70"><call pos:start="2521:25" pos:end="2522:70"><name pos:start="2521:25" pos:end="2521:32">http_log</name><argument_list pos:start="2521:33" pos:end="2522:70">(<argument pos:start="2521:34" pos:end="2521:86"><expr pos:start="2521:34" pos:end="2521:86"><literal type="string" pos:start="2521:34" pos:end="2521:86">"Error writing frame to output for stream '%s': %s\n"</literal></expr></argument>,
                                 <argument pos:start="2522:34" pos:end="2522:52"><expr pos:start="2522:34" pos:end="2522:52"><name pos:start="2522:34" pos:end="2522:52"><name pos:start="2522:34" pos:end="2522:34">c</name><operator pos:start="2522:35" pos:end="2522:36">-&gt;</operator><name pos:start="2522:37" pos:end="2522:42">stream</name><operator pos:start="2522:43" pos:end="2522:44">-&gt;</operator><name pos:start="2522:45" pos:end="2522:52">filename</name></name></expr></argument>, <argument pos:start="2522:55" pos:end="2522:69"><expr pos:start="2522:55" pos:end="2522:69"><call pos:start="2522:55" pos:end="2522:69"><name pos:start="2522:55" pos:end="2522:64">av_err2str</name><argument_list pos:start="2522:65" pos:end="2522:69">(<argument pos:start="2522:66" pos:end="2522:68"><expr pos:start="2522:66" pos:end="2522:68"><name pos:start="2522:66" pos:end="2522:68">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="2523:25" pos:end="2523:63"><expr pos:start="2523:25" pos:end="2523:62"><name pos:start="2523:25" pos:end="2523:32"><name pos:start="2523:25" pos:end="2523:25">c</name><operator pos:start="2523:26" pos:end="2523:27">-&gt;</operator><name pos:start="2523:28" pos:end="2523:32">state</name></name> <operator pos:start="2523:34" pos:end="2523:34">=</operator> <name pos:start="2523:36" pos:end="2523:62">HTTPSTATE_SEND_DATA_TRAILER</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="2526:21" pos:end="2526:44"><expr pos:start="2526:21" pos:end="2526:43"><call pos:start="2526:21" pos:end="2526:43"><name pos:start="2526:21" pos:end="2526:28">av_freep</name><argument_list pos:start="2526:29" pos:end="2526:43">(<argument pos:start="2526:30" pos:end="2526:42"><expr pos:start="2526:30" pos:end="2526:42"><operator pos:start="2526:30" pos:end="2526:30">&amp;</operator><name pos:start="2526:31" pos:end="2526:42"><name pos:start="2526:31" pos:end="2526:31">c</name><operator pos:start="2526:32" pos:end="2526:33">-&gt;</operator><name pos:start="2526:34" pos:end="2526:42">pb_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2527:21" pos:end="2527:69"><expr pos:start="2527:21" pos:end="2527:68"><name pos:start="2527:21" pos:end="2527:23">len</name> <operator pos:start="2527:25" pos:end="2527:25">=</operator> <call pos:start="2527:27" pos:end="2527:68"><name pos:start="2527:27" pos:end="2527:44">avio_close_dyn_buf</name><argument_list pos:start="2527:45" pos:end="2527:68">(<argument pos:start="2527:46" pos:end="2527:52"><expr pos:start="2527:46" pos:end="2527:52"><name pos:start="2527:46" pos:end="2527:52"><name pos:start="2527:46" pos:end="2527:48">ctx</name><operator pos:start="2527:49" pos:end="2527:50">-&gt;</operator><name pos:start="2527:51" pos:end="2527:52">pb</name></name></expr></argument>, <argument pos:start="2527:55" pos:end="2527:67"><expr pos:start="2527:55" pos:end="2527:67"><operator pos:start="2527:55" pos:end="2527:55">&amp;</operator><name pos:start="2527:56" pos:end="2527:67"><name pos:start="2527:56" pos:end="2527:56">c</name><operator pos:start="2527:57" pos:end="2527:58">-&gt;</operator><name pos:start="2527:59" pos:end="2527:67">pb_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2528:21" pos:end="2528:35"><expr pos:start="2528:21" pos:end="2528:34"><name pos:start="2528:21" pos:end="2528:27"><name pos:start="2528:21" pos:end="2528:23">ctx</name><operator pos:start="2528:24" pos:end="2528:25">-&gt;</operator><name pos:start="2528:26" pos:end="2528:27">pb</name></name> <operator pos:start="2528:29" pos:end="2528:29">=</operator> <name pos:start="2528:31" pos:end="2528:34">NULL</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="2529:21" pos:end="2529:45"><expr pos:start="2529:21" pos:end="2529:44"><name pos:start="2529:21" pos:end="2529:38"><name pos:start="2529:21" pos:end="2529:21">c</name><operator pos:start="2529:22" pos:end="2529:23">-&gt;</operator><name pos:start="2529:24" pos:end="2529:38">cur_frame_bytes</name></name> <operator pos:start="2529:40" pos:end="2529:40">=</operator> <name pos:start="2529:42" pos:end="2529:44">len</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="2530:21" pos:end="2530:49"><expr pos:start="2530:21" pos:end="2530:48"><name pos:start="2530:21" pos:end="2530:33"><name pos:start="2530:21" pos:end="2530:21">c</name><operator pos:start="2530:22" pos:end="2530:23">-&gt;</operator><name pos:start="2530:24" pos:end="2530:33">buffer_ptr</name></name> <operator pos:start="2530:35" pos:end="2530:35">=</operator> <name pos:start="2530:37" pos:end="2530:48"><name pos:start="2530:37" pos:end="2530:37">c</name><operator pos:start="2530:38" pos:end="2530:39">-&gt;</operator><name pos:start="2530:40" pos:end="2530:48">pb_buffer</name></name></expr>;</expr_stmt>
                    <expr_stmt pos:start="2531:21" pos:end="2531:55"><expr pos:start="2531:21" pos:end="2531:54"><name pos:start="2531:21" pos:end="2531:33"><name pos:start="2531:21" pos:end="2531:21">c</name><operator pos:start="2531:22" pos:end="2531:23">-&gt;</operator><name pos:start="2531:24" pos:end="2531:33">buffer_end</name></name> <operator pos:start="2531:35" pos:end="2531:35">=</operator> <name pos:start="2531:37" pos:end="2531:48"><name pos:start="2531:37" pos:end="2531:37">c</name><operator pos:start="2531:38" pos:end="2531:39">-&gt;</operator><name pos:start="2531:40" pos:end="2531:48">pb_buffer</name></name> <operator pos:start="2531:50" pos:end="2531:50">+</operator> <name pos:start="2531:52" pos:end="2531:54">len</name></expr>;</expr_stmt>

                    <if_stmt pos:start="2533:21" pos:end="2536:21"><if pos:start="2533:21" pos:end="2536:21">if <condition pos:start="2533:24" pos:end="2533:33">(<expr pos:start="2533:25" pos:end="2533:32"><name pos:start="2533:25" pos:end="2533:27">len</name> <operator pos:start="2533:29" pos:end="2533:30">==</operator> <literal type="number" pos:start="2533:32" pos:end="2533:32">0</literal></expr>)</condition> <block pos:start="2533:35" pos:end="2536:21">{<block_content pos:start="2534:25" pos:end="2535:34">
                        <expr_stmt pos:start="2534:25" pos:end="2534:46"><expr pos:start="2534:25" pos:end="2534:45"><call pos:start="2534:25" pos:end="2534:45"><name pos:start="2534:25" pos:end="2534:39">av_packet_unref</name><argument_list pos:start="2534:40" pos:end="2534:45">(<argument pos:start="2534:41" pos:end="2534:44"><expr pos:start="2534:41" pos:end="2534:44"><operator pos:start="2534:41" pos:end="2534:41">&amp;</operator><name pos:start="2534:42" pos:end="2534:44">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <goto pos:start="2535:25" pos:end="2535:34">goto <name pos:start="2535:30" pos:end="2535:33">redo</name>;</goto>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt pos:start="2538:17" pos:end="2538:38"><expr pos:start="2538:17" pos:end="2538:37"><call pos:start="2538:17" pos:end="2538:37"><name pos:start="2538:17" pos:end="2538:31">av_packet_unref</name><argument_list pos:start="2538:32" pos:end="2538:37">(<argument pos:start="2538:33" pos:end="2538:36"><expr pos:start="2538:33" pos:end="2538:36"><operator pos:start="2538:33" pos:end="2538:33">&amp;</operator><name pos:start="2538:34" pos:end="2538:36">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <break pos:start="2541:9" pos:end="2541:14">break;</break>
    <default pos:start="2542:5" pos:end="2542:12">default:</default>
    <case pos:start="2543:5" pos:end="2543:37">case <expr pos:start="2543:10" pos:end="2543:36"><name pos:start="2543:10" pos:end="2543:36">HTTPSTATE_SEND_DATA_TRAILER</name></expr>:</case>
        <comment type="block" pos:start="2544:9" pos:end="2544:32">/* last packet test ? */</comment>
        <if_stmt pos:start="2545:9" pos:end="2546:22"><if pos:start="2545:9" pos:end="2546:22">if <condition pos:start="2545:12" pos:end="2545:52">(<expr pos:start="2545:13" pos:end="2545:51"><name pos:start="2545:13" pos:end="2545:31"><name pos:start="2545:13" pos:end="2545:13">c</name><operator pos:start="2545:14" pos:end="2545:15">-&gt;</operator><name pos:start="2545:16" pos:end="2545:31">last_packet_sent</name></name> <operator pos:start="2545:33" pos:end="2545:34">||</operator> <name pos:start="2545:36" pos:end="2545:51"><name pos:start="2545:36" pos:end="2545:36">c</name><operator pos:start="2545:37" pos:end="2545:38">-&gt;</operator><name pos:start="2545:39" pos:end="2545:51">is_packetized</name></name></expr>)</condition><block type="pseudo" pos:start="2546:13" pos:end="2546:22"><block_content pos:start="2546:13" pos:end="2546:22">
            <return pos:start="2546:13" pos:end="2546:22">return <expr pos:start="2546:20" pos:end="2546:21"><operator pos:start="2546:20" pos:end="2546:20">-</operator><literal type="number" pos:start="2546:21" pos:end="2546:21">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2547:9" pos:end="2547:26"><expr pos:start="2547:9" pos:end="2547:25"><name pos:start="2547:9" pos:end="2547:11">ctx</name> <operator pos:start="2547:13" pos:end="2547:13">=</operator> <name pos:start="2547:15" pos:end="2547:25"><name pos:start="2547:15" pos:end="2547:15">c</name><operator pos:start="2547:16" pos:end="2547:17">-&gt;</operator><name pos:start="2547:18" pos:end="2547:25">pfmt_ctx</name></name></expr>;</expr_stmt>
        <comment type="block" pos:start="2548:9" pos:end="2548:28">/* prepare header */</comment>
        <if_stmt pos:start="2549:9" pos:end="2552:9"><if pos:start="2549:9" pos:end="2552:9">if <condition pos:start="2549:12" pos:end="2549:44">(<expr pos:start="2549:13" pos:end="2549:43"><call pos:start="2549:13" pos:end="2549:39"><name pos:start="2549:13" pos:end="2549:29">avio_open_dyn_buf</name><argument_list pos:start="2549:30" pos:end="2549:39">(<argument pos:start="2549:31" pos:end="2549:38"><expr pos:start="2549:31" pos:end="2549:38"><operator pos:start="2549:31" pos:end="2549:31">&amp;</operator><name pos:start="2549:32" pos:end="2549:38"><name pos:start="2549:32" pos:end="2549:34">ctx</name><operator pos:start="2549:35" pos:end="2549:36">-&gt;</operator><name pos:start="2549:37" pos:end="2549:38">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="2549:41" pos:end="2549:41">&lt;</operator> <literal type="number" pos:start="2549:43" pos:end="2549:43">0</literal></expr>)</condition> <block pos:start="2549:46" pos:end="2552:9">{<block_content pos:start="2551:13" pos:end="2551:22">
            <comment type="block" pos:start="2550:13" pos:end="2550:37">/* XXX: potential leak */</comment>
            <return pos:start="2551:13" pos:end="2551:22">return <expr pos:start="2551:20" pos:end="2551:21"><operator pos:start="2551:20" pos:end="2551:20">-</operator><literal type="number" pos:start="2551:21" pos:end="2551:21">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="2553:9" pos:end="2553:38"><expr pos:start="2553:9" pos:end="2553:37"><name pos:start="2553:9" pos:end="2553:33"><name pos:start="2553:9" pos:end="2553:9">c</name><operator pos:start="2553:10" pos:end="2553:11">-&gt;</operator><name pos:start="2553:12" pos:end="2553:19">pfmt_ctx</name><operator pos:start="2553:20" pos:end="2553:21">-&gt;</operator><name pos:start="2553:22" pos:end="2553:23">pb</name><operator pos:start="2553:24" pos:end="2553:25">-&gt;</operator><name pos:start="2553:26" pos:end="2553:33">seekable</name></name> <operator pos:start="2553:35" pos:end="2553:35">=</operator> <literal type="number" pos:start="2553:37" pos:end="2553:37">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="2554:9" pos:end="2554:30"><expr pos:start="2554:9" pos:end="2554:29"><call pos:start="2554:9" pos:end="2554:29"><name pos:start="2554:9" pos:end="2554:24">av_write_trailer</name><argument_list pos:start="2554:25" pos:end="2554:29">(<argument pos:start="2554:26" pos:end="2554:28"><expr pos:start="2554:26" pos:end="2554:28"><name pos:start="2554:26" pos:end="2554:28">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2555:9" pos:end="2555:57"><expr pos:start="2555:9" pos:end="2555:56"><name pos:start="2555:9" pos:end="2555:11">len</name> <operator pos:start="2555:13" pos:end="2555:13">=</operator> <call pos:start="2555:15" pos:end="2555:56"><name pos:start="2555:15" pos:end="2555:32">avio_close_dyn_buf</name><argument_list pos:start="2555:33" pos:end="2555:56">(<argument pos:start="2555:34" pos:end="2555:40"><expr pos:start="2555:34" pos:end="2555:40"><name pos:start="2555:34" pos:end="2555:40"><name pos:start="2555:34" pos:end="2555:36">ctx</name><operator pos:start="2555:37" pos:end="2555:38">-&gt;</operator><name pos:start="2555:39" pos:end="2555:40">pb</name></name></expr></argument>, <argument pos:start="2555:43" pos:end="2555:55"><expr pos:start="2555:43" pos:end="2555:55"><operator pos:start="2555:43" pos:end="2555:43">&amp;</operator><name pos:start="2555:44" pos:end="2555:55"><name pos:start="2555:44" pos:end="2555:44">c</name><operator pos:start="2555:45" pos:end="2555:46">-&gt;</operator><name pos:start="2555:47" pos:end="2555:55">pb_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2556:9" pos:end="2556:37"><expr pos:start="2556:9" pos:end="2556:36"><name pos:start="2556:9" pos:end="2556:21"><name pos:start="2556:9" pos:end="2556:9">c</name><operator pos:start="2556:10" pos:end="2556:11">-&gt;</operator><name pos:start="2556:12" pos:end="2556:21">buffer_ptr</name></name> <operator pos:start="2556:23" pos:end="2556:23">=</operator> <name pos:start="2556:25" pos:end="2556:36"><name pos:start="2556:25" pos:end="2556:25">c</name><operator pos:start="2556:26" pos:end="2556:27">-&gt;</operator><name pos:start="2556:28" pos:end="2556:36">pb_buffer</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="2557:9" pos:end="2557:43"><expr pos:start="2557:9" pos:end="2557:42"><name pos:start="2557:9" pos:end="2557:21"><name pos:start="2557:9" pos:end="2557:9">c</name><operator pos:start="2557:10" pos:end="2557:11">-&gt;</operator><name pos:start="2557:12" pos:end="2557:21">buffer_end</name></name> <operator pos:start="2557:23" pos:end="2557:23">=</operator> <name pos:start="2557:25" pos:end="2557:36"><name pos:start="2557:25" pos:end="2557:25">c</name><operator pos:start="2557:26" pos:end="2557:27">-&gt;</operator><name pos:start="2557:28" pos:end="2557:36">pb_buffer</name></name> <operator pos:start="2557:38" pos:end="2557:38">+</operator> <name pos:start="2557:40" pos:end="2557:42">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="2559:9" pos:end="2559:32"><expr pos:start="2559:9" pos:end="2559:31"><name pos:start="2559:9" pos:end="2559:27"><name pos:start="2559:9" pos:end="2559:9">c</name><operator pos:start="2559:10" pos:end="2559:11">-&gt;</operator><name pos:start="2559:12" pos:end="2559:27">last_packet_sent</name></name> <operator pos:start="2559:29" pos:end="2559:29">=</operator> <literal type="number" pos:start="2559:31" pos:end="2559:31">1</literal></expr>;</expr_stmt>
        <break pos:start="2560:9" pos:end="2560:14">break;</break>
    </block_content>}</block></switch>
    <return pos:start="2562:5" pos:end="2562:13">return <expr pos:start="2562:12" pos:end="2562:12"><literal type="number" pos:start="2562:12" pos:end="2562:12">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="2565:1" pos:end="2565:48">/* should convert the format at the same time */</comment>
<comment type="block" pos:start="2566:1" pos:end="2568:3">/* send data starting at c-&gt;buffer_ptr to the output connection
 * (either UDP or TCP)
 */</comment>
<function pos:start="2569:1" pos:end="2688:1"><type pos:start="2569:1" pos:end="2569:10"><specifier pos:start="2569:1" pos:end="2569:6">static</specifier> <name pos:start="2569:8" pos:end="2569:10">int</name></type> <name pos:start="2569:12" pos:end="2569:25">http_send_data</name><parameter_list pos:start="2569:26" pos:end="2569:41">(<parameter pos:start="2569:27" pos:end="2569:40"><decl pos:start="2569:27" pos:end="2569:40"><type pos:start="2569:27" pos:end="2569:39"><name pos:start="2569:27" pos:end="2569:37">HTTPContext</name> <modifier pos:start="2569:39" pos:end="2569:39">*</modifier></type><name pos:start="2569:40" pos:end="2569:40">c</name></decl></parameter>)</parameter_list>
<block pos:start="2570:1" pos:end="2688:1">{<block_content pos:start="2571:5" pos:end="2687:13">
    <decl_stmt pos:start="2571:5" pos:end="2571:17"><decl pos:start="2571:5" pos:end="2571:11"><type pos:start="2571:5" pos:end="2571:7"><name pos:start="2571:5" pos:end="2571:7">int</name></type> <name pos:start="2571:9" pos:end="2571:11">len</name></decl>, <decl pos:start="2571:14" pos:end="2571:16"><type ref="prev" pos:start="2571:5" pos:end="2571:7"/><name pos:start="2571:14" pos:end="2571:16">ret</name></decl>;</decl_stmt>

    <for pos:start="2573:5" pos:end="2686:5">for<control pos:start="2573:8" pos:end="2573:11">(<init pos:start="2573:9" pos:end="2573:9">;</init><condition pos:start="2573:10" pos:end="2573:10">;</condition><incr/>)</control> <block pos:start="2573:13" pos:end="2686:5">{<block_content pos:start="2574:9" pos:end="2685:9">
        <if_stmt pos:start="2574:9" pos:end="2685:9"><if pos:start="2574:9" pos:end="2581:9">if <condition pos:start="2574:12" pos:end="2574:43">(<expr pos:start="2574:13" pos:end="2574:42"><name pos:start="2574:13" pos:end="2574:25"><name pos:start="2574:13" pos:end="2574:13">c</name><operator pos:start="2574:14" pos:end="2574:15">-&gt;</operator><name pos:start="2574:16" pos:end="2574:25">buffer_ptr</name></name> <operator pos:start="2574:27" pos:end="2574:28">&gt;=</operator> <name pos:start="2574:30" pos:end="2574:42"><name pos:start="2574:30" pos:end="2574:30">c</name><operator pos:start="2574:31" pos:end="2574:32">-&gt;</operator><name pos:start="2574:33" pos:end="2574:42">buffer_end</name></name></expr>)</condition> <block pos:start="2574:45" pos:end="2581:9">{<block_content pos:start="2575:13" pos:end="2580:22">
            <expr_stmt pos:start="2575:13" pos:end="2575:39"><expr pos:start="2575:13" pos:end="2575:38"><name pos:start="2575:13" pos:end="2575:15">ret</name> <operator pos:start="2575:17" pos:end="2575:17">=</operator> <call pos:start="2575:19" pos:end="2575:38"><name pos:start="2575:19" pos:end="2575:35">http_prepare_data</name><argument_list pos:start="2575:36" pos:end="2575:38">(<argument pos:start="2575:37" pos:end="2575:37"><expr pos:start="2575:37" pos:end="2575:37"><name pos:start="2575:37" pos:end="2575:37">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2576:13" pos:end="2580:22"><if pos:start="2576:13" pos:end="2577:26">if <condition pos:start="2576:16" pos:end="2576:24">(<expr pos:start="2576:17" pos:end="2576:23"><name pos:start="2576:17" pos:end="2576:19">ret</name> <operator pos:start="2576:21" pos:end="2576:21">&lt;</operator> <literal type="number" pos:start="2576:23" pos:end="2576:23">0</literal></expr>)</condition><block type="pseudo" pos:start="2577:17" pos:end="2577:26"><block_content pos:start="2577:17" pos:end="2577:26">
                <return pos:start="2577:17" pos:end="2577:26">return <expr pos:start="2577:24" pos:end="2577:25"><operator pos:start="2577:24" pos:end="2577:24">-</operator><literal type="number" pos:start="2577:25" pos:end="2577:25">1</literal></expr>;</return></block_content></block></if>
            <if type="elseif" pos:start="2578:13" pos:end="2580:22">else if <condition pos:start="2578:21" pos:end="2578:25">(<expr pos:start="2578:22" pos:end="2578:24"><name pos:start="2578:22" pos:end="2578:24">ret</name></expr>)</condition><block type="pseudo" pos:start="2580:17" pos:end="2580:22"><block_content pos:start="2580:17" pos:end="2580:22">
                <comment type="block" pos:start="2579:17" pos:end="2579:44">/* state change requested */</comment>
                <break pos:start="2580:17" pos:end="2580:22">break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></if> <else pos:start="2581:11" pos:end="2685:9">else <block pos:start="2581:16" pos:end="2685:9">{<block_content pos:start="2582:13" pos:end="2684:13">
            <if_stmt pos:start="2582:13" pos:end="2684:13"><if pos:start="2582:13" pos:end="2665:13">if <condition pos:start="2582:16" pos:end="2582:33">(<expr pos:start="2582:17" pos:end="2582:32"><name pos:start="2582:17" pos:end="2582:32"><name pos:start="2582:17" pos:end="2582:17">c</name><operator pos:start="2582:18" pos:end="2582:19">-&gt;</operator><name pos:start="2582:20" pos:end="2582:32">is_packetized</name></name></expr>)</condition> <block pos:start="2582:35" pos:end="2665:13">{<block_content pos:start="2584:17" pos:end="2664:17">
                <comment type="block" pos:start="2583:17" pos:end="2583:37">/* RTP data output */</comment>
                <expr_stmt pos:start="2584:17" pos:end="2584:52"><expr pos:start="2584:17" pos:end="2584:51"><name pos:start="2584:17" pos:end="2584:19">len</name> <operator pos:start="2584:21" pos:end="2584:21">=</operator> <name pos:start="2584:23" pos:end="2584:35"><name pos:start="2584:23" pos:end="2584:23">c</name><operator pos:start="2584:24" pos:end="2584:25">-&gt;</operator><name pos:start="2584:26" pos:end="2584:35">buffer_end</name></name> <operator pos:start="2584:37" pos:end="2584:37">-</operator> <name pos:start="2584:39" pos:end="2584:51"><name pos:start="2584:39" pos:end="2584:39">c</name><operator pos:start="2584:40" pos:end="2584:41">-&gt;</operator><name pos:start="2584:42" pos:end="2584:51">buffer_ptr</name></name></expr>;</expr_stmt>
                <if_stmt pos:start="2585:17" pos:end="2590:17"><if pos:start="2585:17" pos:end="2590:17">if <condition pos:start="2585:20" pos:end="2585:28">(<expr pos:start="2585:21" pos:end="2585:27"><name pos:start="2585:21" pos:end="2585:23">len</name> <operator pos:start="2585:25" pos:end="2585:25">&lt;</operator> <literal type="number" pos:start="2585:27" pos:end="2585:27">4</literal></expr>)</condition> <block pos:start="2585:30" pos:end="2590:17">{<block_content pos:start="2587:17" pos:end="2589:29">
                    <comment type="block" pos:start="2586:21" pos:end="2586:57">/* fail safe - should never happen */</comment>
                <label pos:start="2587:17" pos:end="2587:22"><name pos:start="2587:17" pos:end="2587:21">fail1</name>:</label>
                    <expr_stmt pos:start="2588:21" pos:end="2588:50"><expr pos:start="2588:21" pos:end="2588:49"><name pos:start="2588:21" pos:end="2588:33"><name pos:start="2588:21" pos:end="2588:21">c</name><operator pos:start="2588:22" pos:end="2588:23">-&gt;</operator><name pos:start="2588:24" pos:end="2588:33">buffer_ptr</name></name> <operator pos:start="2588:35" pos:end="2588:35">=</operator> <name pos:start="2588:37" pos:end="2588:49"><name pos:start="2588:37" pos:end="2588:37">c</name><operator pos:start="2588:38" pos:end="2588:39">-&gt;</operator><name pos:start="2588:40" pos:end="2588:49">buffer_end</name></name></expr>;</expr_stmt>
                    <return pos:start="2589:21" pos:end="2589:29">return <expr pos:start="2589:28" pos:end="2589:28"><literal type="number" pos:start="2589:28" pos:end="2589:28">0</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt pos:start="2591:17" pos:end="2594:39"><expr pos:start="2591:17" pos:end="2594:38"><name pos:start="2591:17" pos:end="2591:19">len</name> <operator pos:start="2591:21" pos:end="2591:21">=</operator> <operator pos:start="2591:23" pos:end="2591:23">(</operator><name pos:start="2591:24" pos:end="2591:39"><name pos:start="2591:24" pos:end="2591:24">c</name><operator pos:start="2591:25" pos:end="2591:26">-&gt;</operator><name pos:start="2591:27" pos:end="2591:36">buffer_ptr</name><index pos:start="2591:37" pos:end="2591:39">[<expr pos:start="2591:38" pos:end="2591:38"><literal type="number" pos:start="2591:38" pos:end="2591:38">0</literal></expr>]</index></name> <operator pos:start="2591:41" pos:end="2591:42">&lt;&lt;</operator> <literal type="number" pos:start="2591:44" pos:end="2591:45">24</literal><operator pos:start="2591:46" pos:end="2591:46">)</operator> <operator pos:start="2591:48" pos:end="2591:48">|</operator>
                    <operator pos:start="2592:21" pos:end="2592:21">(</operator><name pos:start="2592:22" pos:end="2592:37"><name pos:start="2592:22" pos:end="2592:22">c</name><operator pos:start="2592:23" pos:end="2592:24">-&gt;</operator><name pos:start="2592:25" pos:end="2592:34">buffer_ptr</name><index pos:start="2592:35" pos:end="2592:37">[<expr pos:start="2592:36" pos:end="2592:36"><literal type="number" pos:start="2592:36" pos:end="2592:36">1</literal></expr>]</index></name> <operator pos:start="2592:39" pos:end="2592:40">&lt;&lt;</operator> <literal type="number" pos:start="2592:42" pos:end="2592:43">16</literal><operator pos:start="2592:44" pos:end="2592:44">)</operator> <operator pos:start="2592:46" pos:end="2592:46">|</operator>
                    <operator pos:start="2593:21" pos:end="2593:21">(</operator><name pos:start="2593:22" pos:end="2593:37"><name pos:start="2593:22" pos:end="2593:22">c</name><operator pos:start="2593:23" pos:end="2593:24">-&gt;</operator><name pos:start="2593:25" pos:end="2593:34">buffer_ptr</name><index pos:start="2593:35" pos:end="2593:37">[<expr pos:start="2593:36" pos:end="2593:36"><literal type="number" pos:start="2593:36" pos:end="2593:36">2</literal></expr>]</index></name> <operator pos:start="2593:39" pos:end="2593:40">&lt;&lt;</operator> <literal type="number" pos:start="2593:42" pos:end="2593:42">8</literal><operator pos:start="2593:43" pos:end="2593:43">)</operator> <operator pos:start="2593:45" pos:end="2593:45">|</operator>
                    <operator pos:start="2594:21" pos:end="2594:21">(</operator><name pos:start="2594:22" pos:end="2594:37"><name pos:start="2594:22" pos:end="2594:22">c</name><operator pos:start="2594:23" pos:end="2594:24">-&gt;</operator><name pos:start="2594:25" pos:end="2594:34">buffer_ptr</name><index pos:start="2594:35" pos:end="2594:37">[<expr pos:start="2594:36" pos:end="2594:36"><literal type="number" pos:start="2594:36" pos:end="2594:36">3</literal></expr>]</index></name><operator pos:start="2594:38" pos:end="2594:38">)</operator></expr>;</expr_stmt>
                <if_stmt pos:start="2595:17" pos:end="2596:31"><if pos:start="2595:17" pos:end="2596:31">if <condition pos:start="2595:20" pos:end="2595:58">(<expr pos:start="2595:21" pos:end="2595:57"><name pos:start="2595:21" pos:end="2595:23">len</name> <operator pos:start="2595:25" pos:end="2595:25">&gt;</operator> <operator pos:start="2595:27" pos:end="2595:27">(</operator><name pos:start="2595:28" pos:end="2595:40"><name pos:start="2595:28" pos:end="2595:28">c</name><operator pos:start="2595:29" pos:end="2595:30">-&gt;</operator><name pos:start="2595:31" pos:end="2595:40">buffer_end</name></name> <operator pos:start="2595:42" pos:end="2595:42">-</operator> <name pos:start="2595:44" pos:end="2595:56"><name pos:start="2595:44" pos:end="2595:44">c</name><operator pos:start="2595:45" pos:end="2595:46">-&gt;</operator><name pos:start="2595:47" pos:end="2595:56">buffer_ptr</name></name><operator pos:start="2595:57" pos:end="2595:57">)</operator></expr>)</condition><block type="pseudo" pos:start="2596:21" pos:end="2596:31"><block_content pos:start="2596:21" pos:end="2596:31">
                    <goto pos:start="2596:21" pos:end="2596:31">goto <name pos:start="2596:26" pos:end="2596:30">fail1</name>;</goto></block_content></block></if></if_stmt>
                <if_stmt pos:start="2597:17" pos:end="2600:17"><if pos:start="2597:17" pos:end="2600:17">if <condition pos:start="2597:20" pos:end="2597:73">(<expr pos:start="2597:21" pos:end="2597:72"><operator pos:start="2597:21" pos:end="2597:21">(</operator><call pos:start="2597:22" pos:end="2597:45"><name pos:start="2597:22" pos:end="2597:42">get_packet_send_clock</name><argument_list pos:start="2597:43" pos:end="2597:45">(<argument pos:start="2597:44" pos:end="2597:44"><expr pos:start="2597:44" pos:end="2597:44"><name pos:start="2597:44" pos:end="2597:44">c</name></expr></argument>)</argument_list></call> <operator pos:start="2597:47" pos:end="2597:47">-</operator> <call pos:start="2597:49" pos:end="2597:67"><name pos:start="2597:49" pos:end="2597:64">get_server_clock</name><argument_list pos:start="2597:65" pos:end="2597:67">(<argument pos:start="2597:66" pos:end="2597:66"><expr pos:start="2597:66" pos:end="2597:66"><name pos:start="2597:66" pos:end="2597:66">c</name></expr></argument>)</argument_list></call><operator pos:start="2597:68" pos:end="2597:68">)</operator> <operator pos:start="2597:70" pos:end="2597:70">&gt;</operator> <literal type="number" pos:start="2597:72" pos:end="2597:72">0</literal></expr>)</condition> <block pos:start="2597:75" pos:end="2600:17">{<block_content pos:start="2599:21" pos:end="2599:29">
                    <comment type="block" pos:start="2598:21" pos:end="2598:58">/* nothing to send yet: we can wait */</comment>
                    <return pos:start="2599:21" pos:end="2599:29">return <expr pos:start="2599:28" pos:end="2599:28"><literal type="number" pos:start="2599:28" pos:end="2599:28">0</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="2602:17" pos:end="2602:37"><expr pos:start="2602:17" pos:end="2602:36"><name pos:start="2602:17" pos:end="2602:29"><name pos:start="2602:17" pos:end="2602:17">c</name><operator pos:start="2602:18" pos:end="2602:19">-&gt;</operator><name pos:start="2602:20" pos:end="2602:29">data_count</name></name> <operator pos:start="2602:31" pos:end="2602:32">+=</operator> <name pos:start="2602:34" pos:end="2602:36">len</name></expr>;</expr_stmt>
                <expr_stmt pos:start="2603:17" pos:end="2603:61"><expr pos:start="2603:17" pos:end="2603:60"><call pos:start="2603:17" pos:end="2603:60"><name pos:start="2603:17" pos:end="2603:31">update_datarate</name><argument_list pos:start="2603:32" pos:end="2603:60">(<argument pos:start="2603:33" pos:end="2603:44"><expr pos:start="2603:33" pos:end="2603:44"><operator pos:start="2603:33" pos:end="2603:33">&amp;</operator><name pos:start="2603:34" pos:end="2603:44"><name pos:start="2603:34" pos:end="2603:34">c</name><operator pos:start="2603:35" pos:end="2603:36">-&gt;</operator><name pos:start="2603:37" pos:end="2603:44">datarate</name></name></expr></argument>, <argument pos:start="2603:47" pos:end="2603:59"><expr pos:start="2603:47" pos:end="2603:59"><name pos:start="2603:47" pos:end="2603:59"><name pos:start="2603:47" pos:end="2603:47">c</name><operator pos:start="2603:48" pos:end="2603:49">-&gt;</operator><name pos:start="2603:50" pos:end="2603:59">data_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="2604:17" pos:end="2605:51"><if pos:start="2604:17" pos:end="2605:51">if <condition pos:start="2604:20" pos:end="2604:30">(<expr pos:start="2604:21" pos:end="2604:29"><name pos:start="2604:21" pos:end="2604:29"><name pos:start="2604:21" pos:end="2604:21">c</name><operator pos:start="2604:22" pos:end="2604:23">-&gt;</operator><name pos:start="2604:24" pos:end="2604:29">stream</name></name></expr>)</condition><block type="pseudo" pos:start="2605:21" pos:end="2605:51"><block_content pos:start="2605:21" pos:end="2605:51">
                    <expr_stmt pos:start="2605:21" pos:end="2605:51"><expr pos:start="2605:21" pos:end="2605:50"><name pos:start="2605:21" pos:end="2605:43"><name pos:start="2605:21" pos:end="2605:21">c</name><operator pos:start="2605:22" pos:end="2605:23">-&gt;</operator><name pos:start="2605:24" pos:end="2605:29">stream</name><operator pos:start="2605:30" pos:end="2605:31">-&gt;</operator><name pos:start="2605:32" pos:end="2605:43">bytes_served</name></name> <operator pos:start="2605:45" pos:end="2605:46">+=</operator> <name pos:start="2605:48" pos:end="2605:50">len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="2607:17" pos:end="2664:17"><if pos:start="2607:17" pos:end="2656:17">if <condition pos:start="2607:20" pos:end="2607:64">(<expr pos:start="2607:21" pos:end="2607:63"><name pos:start="2607:21" pos:end="2607:35"><name pos:start="2607:21" pos:end="2607:21">c</name><operator pos:start="2607:22" pos:end="2607:23">-&gt;</operator><name pos:start="2607:24" pos:end="2607:35">rtp_protocol</name></name> <operator pos:start="2607:37" pos:end="2607:38">==</operator> <name pos:start="2607:40" pos:end="2607:63">RTSP_LOWER_TRANSPORT_TCP</name></expr>)</condition> <block pos:start="2607:66" pos:end="2656:17">{<block_content pos:start="2609:21" pos:end="2655:52">
                    <comment type="block" pos:start="2608:21" pos:end="2608:77">/* RTP packets are sent inside the RTSP TCP connection */</comment>
                    <decl_stmt pos:start="2609:21" pos:end="2609:36"><decl pos:start="2609:21" pos:end="2609:35"><type pos:start="2609:21" pos:end="2609:33"><name pos:start="2609:21" pos:end="2609:31">AVIOContext</name> <modifier pos:start="2609:33" pos:end="2609:33">*</modifier></type><name pos:start="2609:34" pos:end="2609:35">pb</name></decl>;</decl_stmt>
                    <decl_stmt pos:start="2610:21" pos:end="2610:48"><decl pos:start="2610:21" pos:end="2610:41"><type pos:start="2610:21" pos:end="2610:23"><name pos:start="2610:21" pos:end="2610:23">int</name></type> <name pos:start="2610:25" pos:end="2610:41">interleaved_index</name></decl>, <decl pos:start="2610:44" pos:end="2610:47"><type ref="prev" pos:start="2610:21" pos:end="2610:23"/><name pos:start="2610:44" pos:end="2610:47">size</name></decl>;</decl_stmt>
                    <decl_stmt pos:start="2611:21" pos:end="2611:38"><decl pos:start="2611:21" pos:end="2611:37"><type pos:start="2611:21" pos:end="2611:27"><name pos:start="2611:21" pos:end="2611:27">uint8_t</name></type> <name pos:start="2611:29" pos:end="2611:37"><name pos:start="2611:29" pos:end="2611:34">header</name><index pos:start="2611:35" pos:end="2611:37">[<expr pos:start="2611:36" pos:end="2611:36"><literal type="number" pos:start="2611:36" pos:end="2611:36">4</literal></expr>]</index></name></decl>;</decl_stmt>
                    <decl_stmt pos:start="2612:21" pos:end="2612:40"><decl pos:start="2612:21" pos:end="2612:39"><type pos:start="2612:21" pos:end="2612:33"><name pos:start="2612:21" pos:end="2612:31">HTTPContext</name> <modifier pos:start="2612:33" pos:end="2612:33">*</modifier></type><name pos:start="2612:34" pos:end="2612:39">rtsp_c</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="2614:21" pos:end="2614:39"><expr pos:start="2614:21" pos:end="2614:38"><name pos:start="2614:21" pos:end="2614:26">rtsp_c</name> <operator pos:start="2614:28" pos:end="2614:28">=</operator> <name pos:start="2614:30" pos:end="2614:38"><name pos:start="2614:30" pos:end="2614:30">c</name><operator pos:start="2614:31" pos:end="2614:32">-&gt;</operator><name pos:start="2614:33" pos:end="2614:38">rtsp_c</name></name></expr>;</expr_stmt>
                    <comment type="block" pos:start="2615:21" pos:end="2615:59">/* if no RTSP connection left, error */</comment>
                    <if_stmt pos:start="2616:21" pos:end="2617:34"><if pos:start="2616:21" pos:end="2617:34">if <condition pos:start="2616:24" pos:end="2616:32">(<expr pos:start="2616:25" pos:end="2616:31"><operator pos:start="2616:25" pos:end="2616:25">!</operator><name pos:start="2616:26" pos:end="2616:31">rtsp_c</name></expr>)</condition><block type="pseudo" pos:start="2617:25" pos:end="2617:34"><block_content pos:start="2617:25" pos:end="2617:34">
                        <return pos:start="2617:25" pos:end="2617:34">return <expr pos:start="2617:32" pos:end="2617:33"><operator pos:start="2617:32" pos:end="2617:32">-</operator><literal type="number" pos:start="2617:33" pos:end="2617:33">1</literal></expr>;</return></block_content></block></if></if_stmt>
                    <comment type="block" pos:start="2618:21" pos:end="2618:66">/* if already sending something, then wait. */</comment>
                    <if_stmt pos:start="2619:21" pos:end="2620:30"><if pos:start="2619:21" pos:end="2620:30">if <condition pos:start="2619:24" pos:end="2619:64">(<expr pos:start="2619:25" pos:end="2619:63"><name pos:start="2619:25" pos:end="2619:37"><name pos:start="2619:25" pos:end="2619:30">rtsp_c</name><operator pos:start="2619:31" pos:end="2619:32">-&gt;</operator><name pos:start="2619:33" pos:end="2619:37">state</name></name> <operator pos:start="2619:39" pos:end="2619:40">!=</operator> <name pos:start="2619:42" pos:end="2619:63">RTSPSTATE_WAIT_REQUEST</name></expr>)</condition><block type="pseudo" pos:start="2620:25" pos:end="2620:30"><block_content pos:start="2620:25" pos:end="2620:30">
                        <break pos:start="2620:25" pos:end="2620:30">break;</break></block_content></block></if></if_stmt>
                    <if_stmt pos:start="2621:21" pos:end="2622:35"><if pos:start="2621:21" pos:end="2622:35">if <condition pos:start="2621:24" pos:end="2621:51">(<expr pos:start="2621:25" pos:end="2621:50"><call pos:start="2621:25" pos:end="2621:46"><name pos:start="2621:25" pos:end="2621:41">avio_open_dyn_buf</name><argument_list pos:start="2621:42" pos:end="2621:46">(<argument pos:start="2621:43" pos:end="2621:45"><expr pos:start="2621:43" pos:end="2621:45"><operator pos:start="2621:43" pos:end="2621:43">&amp;</operator><name pos:start="2621:44" pos:end="2621:45">pb</name></expr></argument>)</argument_list></call> <operator pos:start="2621:48" pos:end="2621:48">&lt;</operator> <literal type="number" pos:start="2621:50" pos:end="2621:50">0</literal></expr>)</condition><block type="pseudo" pos:start="2622:25" pos:end="2622:35"><block_content pos:start="2622:25" pos:end="2622:35">
                        <goto pos:start="2622:25" pos:end="2622:35">goto <name pos:start="2622:30" pos:end="2622:34">fail1</name>;</goto></block_content></block></if></if_stmt>
                    <expr_stmt pos:start="2623:21" pos:end="2623:67"><expr pos:start="2623:21" pos:end="2623:66"><name pos:start="2623:21" pos:end="2623:37">interleaved_index</name> <operator pos:start="2623:39" pos:end="2623:39">=</operator> <name pos:start="2623:41" pos:end="2623:62"><name pos:start="2623:41" pos:end="2623:41">c</name><operator pos:start="2623:42" pos:end="2623:43">-&gt;</operator><name pos:start="2623:44" pos:end="2623:62">packet_stream_index</name></name> <operator pos:start="2623:64" pos:end="2623:64">*</operator> <literal type="number" pos:start="2623:66" pos:end="2623:66">2</literal></expr>;</expr_stmt>
                    <comment type="block" pos:start="2624:21" pos:end="2624:62">/* RTCP packets are sent at odd indexes */</comment>
                    <if_stmt pos:start="2625:21" pos:end="2626:44"><if pos:start="2625:21" pos:end="2626:44">if <condition pos:start="2625:24" pos:end="2625:48">(<expr pos:start="2625:25" pos:end="2625:47"><name pos:start="2625:25" pos:end="2625:40"><name pos:start="2625:25" pos:end="2625:25">c</name><operator pos:start="2625:26" pos:end="2625:27">-&gt;</operator><name pos:start="2625:28" pos:end="2625:37">buffer_ptr</name><index pos:start="2625:38" pos:end="2625:40">[<expr pos:start="2625:39" pos:end="2625:39"><literal type="number" pos:start="2625:39" pos:end="2625:39">1</literal></expr>]</index></name> <operator pos:start="2625:42" pos:end="2625:43">==</operator> <literal type="number" pos:start="2625:45" pos:end="2625:47">200</literal></expr>)</condition><block type="pseudo" pos:start="2626:25" pos:end="2626:44"><block_content pos:start="2626:25" pos:end="2626:44">
                        <expr_stmt pos:start="2626:25" pos:end="2626:44"><expr pos:start="2626:25" pos:end="2626:43"><name pos:start="2626:25" pos:end="2626:41">interleaved_index</name><operator pos:start="2626:42" pos:end="2626:43">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <comment type="block" pos:start="2627:21" pos:end="2627:47">/* write RTSP TCP header */</comment>
                    <expr_stmt pos:start="2628:21" pos:end="2628:36"><expr pos:start="2628:21" pos:end="2628:35"><name pos:start="2628:21" pos:end="2628:29"><name pos:start="2628:21" pos:end="2628:26">header</name><index pos:start="2628:27" pos:end="2628:29">[<expr pos:start="2628:28" pos:end="2628:28"><literal type="number" pos:start="2628:28" pos:end="2628:28">0</literal></expr>]</index></name> <operator pos:start="2628:31" pos:end="2628:31">=</operator> <literal type="char" pos:start="2628:33" pos:end="2628:35">'$'</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="2629:21" pos:end="2629:50"><expr pos:start="2629:21" pos:end="2629:49"><name pos:start="2629:21" pos:end="2629:29"><name pos:start="2629:21" pos:end="2629:26">header</name><index pos:start="2629:27" pos:end="2629:29">[<expr pos:start="2629:28" pos:end="2629:28"><literal type="number" pos:start="2629:28" pos:end="2629:28">1</literal></expr>]</index></name> <operator pos:start="2629:31" pos:end="2629:31">=</operator> <name pos:start="2629:33" pos:end="2629:49">interleaved_index</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="2630:21" pos:end="2630:41"><expr pos:start="2630:21" pos:end="2630:40"><name pos:start="2630:21" pos:end="2630:29"><name pos:start="2630:21" pos:end="2630:26">header</name><index pos:start="2630:27" pos:end="2630:29">[<expr pos:start="2630:28" pos:end="2630:28"><literal type="number" pos:start="2630:28" pos:end="2630:28">2</literal></expr>]</index></name> <operator pos:start="2630:31" pos:end="2630:31">=</operator> <name pos:start="2630:33" pos:end="2630:35">len</name> <operator pos:start="2630:37" pos:end="2630:38">&gt;&gt;</operator> <literal type="number" pos:start="2630:40" pos:end="2630:40">8</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="2631:21" pos:end="2631:36"><expr pos:start="2631:21" pos:end="2631:35"><name pos:start="2631:21" pos:end="2631:29"><name pos:start="2631:21" pos:end="2631:26">header</name><index pos:start="2631:27" pos:end="2631:29">[<expr pos:start="2631:28" pos:end="2631:28"><literal type="number" pos:start="2631:28" pos:end="2631:28">3</literal></expr>]</index></name> <operator pos:start="2631:31" pos:end="2631:31">=</operator> <name pos:start="2631:33" pos:end="2631:35">len</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="2632:21" pos:end="2632:46"><expr pos:start="2632:21" pos:end="2632:45"><call pos:start="2632:21" pos:end="2632:45"><name pos:start="2632:21" pos:end="2632:30">avio_write</name><argument_list pos:start="2632:31" pos:end="2632:45">(<argument pos:start="2632:32" pos:end="2632:33"><expr pos:start="2632:32" pos:end="2632:33"><name pos:start="2632:32" pos:end="2632:33">pb</name></expr></argument>, <argument pos:start="2632:36" pos:end="2632:41"><expr pos:start="2632:36" pos:end="2632:41"><name pos:start="2632:36" pos:end="2632:41">header</name></expr></argument>, <argument pos:start="2632:44" pos:end="2632:44"><expr pos:start="2632:44" pos:end="2632:44"><literal type="number" pos:start="2632:44" pos:end="2632:44">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="block" pos:start="2633:21" pos:end="2633:47">/* write RTP packet data */</comment>
                    <expr_stmt pos:start="2634:21" pos:end="2634:39"><expr pos:start="2634:21" pos:end="2634:38"><name pos:start="2634:21" pos:end="2634:33"><name pos:start="2634:21" pos:end="2634:21">c</name><operator pos:start="2634:22" pos:end="2634:23">-&gt;</operator><name pos:start="2634:24" pos:end="2634:33">buffer_ptr</name></name> <operator pos:start="2634:35" pos:end="2634:36">+=</operator> <literal type="number" pos:start="2634:38" pos:end="2634:38">4</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="2635:21" pos:end="2635:55"><expr pos:start="2635:21" pos:end="2635:54"><call pos:start="2635:21" pos:end="2635:54"><name pos:start="2635:21" pos:end="2635:30">avio_write</name><argument_list pos:start="2635:31" pos:end="2635:54">(<argument pos:start="2635:32" pos:end="2635:33"><expr pos:start="2635:32" pos:end="2635:33"><name pos:start="2635:32" pos:end="2635:33">pb</name></expr></argument>, <argument pos:start="2635:36" pos:end="2635:48"><expr pos:start="2635:36" pos:end="2635:48"><name pos:start="2635:36" pos:end="2635:48"><name pos:start="2635:36" pos:end="2635:36">c</name><operator pos:start="2635:37" pos:end="2635:38">-&gt;</operator><name pos:start="2635:39" pos:end="2635:48">buffer_ptr</name></name></expr></argument>, <argument pos:start="2635:51" pos:end="2635:53"><expr pos:start="2635:51" pos:end="2635:53"><name pos:start="2635:51" pos:end="2635:53">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2636:21" pos:end="2636:69"><expr pos:start="2636:21" pos:end="2636:68"><name pos:start="2636:21" pos:end="2636:24">size</name> <operator pos:start="2636:26" pos:end="2636:26">=</operator> <call pos:start="2636:28" pos:end="2636:68"><name pos:start="2636:28" pos:end="2636:45">avio_close_dyn_buf</name><argument_list pos:start="2636:46" pos:end="2636:68">(<argument pos:start="2636:47" pos:end="2636:48"><expr pos:start="2636:47" pos:end="2636:48"><name pos:start="2636:47" pos:end="2636:48">pb</name></expr></argument>, <argument pos:start="2636:51" pos:end="2636:67"><expr pos:start="2636:51" pos:end="2636:67"><operator pos:start="2636:51" pos:end="2636:51">&amp;</operator><name pos:start="2636:52" pos:end="2636:67"><name pos:start="2636:52" pos:end="2636:52">c</name><operator pos:start="2636:53" pos:end="2636:54">-&gt;</operator><name pos:start="2636:55" pos:end="2636:67">packet_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="block" pos:start="2637:21" pos:end="2637:58">/* prepare asynchronous TCP sending */</comment>
                    <expr_stmt pos:start="2638:21" pos:end="2638:65"><expr pos:start="2638:21" pos:end="2638:64"><name pos:start="2638:21" pos:end="2638:45"><name pos:start="2638:21" pos:end="2638:26">rtsp_c</name><operator pos:start="2638:27" pos:end="2638:28">-&gt;</operator><name pos:start="2638:29" pos:end="2638:45">packet_buffer_ptr</name></name> <operator pos:start="2638:47" pos:end="2638:47">=</operator> <name pos:start="2638:49" pos:end="2638:64"><name pos:start="2638:49" pos:end="2638:49">c</name><operator pos:start="2638:50" pos:end="2638:51">-&gt;</operator><name pos:start="2638:52" pos:end="2638:64">packet_buffer</name></name></expr>;</expr_stmt>
                    <expr_stmt pos:start="2639:21" pos:end="2639:72"><expr pos:start="2639:21" pos:end="2639:71"><name pos:start="2639:21" pos:end="2639:45"><name pos:start="2639:21" pos:end="2639:26">rtsp_c</name><operator pos:start="2639:27" pos:end="2639:28">-&gt;</operator><name pos:start="2639:29" pos:end="2639:45">packet_buffer_end</name></name> <operator pos:start="2639:47" pos:end="2639:47">=</operator> <name pos:start="2639:49" pos:end="2639:64"><name pos:start="2639:49" pos:end="2639:49">c</name><operator pos:start="2639:50" pos:end="2639:51">-&gt;</operator><name pos:start="2639:52" pos:end="2639:64">packet_buffer</name></name> <operator pos:start="2639:66" pos:end="2639:66">+</operator> <name pos:start="2639:68" pos:end="2639:71">size</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="2640:21" pos:end="2640:41"><expr pos:start="2640:21" pos:end="2640:40"><name pos:start="2640:21" pos:end="2640:33"><name pos:start="2640:21" pos:end="2640:21">c</name><operator pos:start="2640:22" pos:end="2640:23">-&gt;</operator><name pos:start="2640:24" pos:end="2640:33">buffer_ptr</name></name> <operator pos:start="2640:35" pos:end="2640:36">+=</operator> <name pos:start="2640:38" pos:end="2640:40">len</name></expr>;</expr_stmt>

                    <comment type="block" pos:start="2642:21" pos:end="2642:52">/* send everything we can NOW */</comment>
                    <expr_stmt pos:start="2643:21" pos:end="2644:89"><expr pos:start="2643:21" pos:end="2644:88"><name pos:start="2643:21" pos:end="2643:23">len</name> <operator pos:start="2643:25" pos:end="2643:25">=</operator> <call pos:start="2643:27" pos:end="2644:88"><name pos:start="2643:27" pos:end="2643:30">send</name><argument_list pos:start="2643:31" pos:end="2644:88">(<argument pos:start="2643:32" pos:end="2643:41"><expr pos:start="2643:32" pos:end="2643:41"><name pos:start="2643:32" pos:end="2643:41"><name pos:start="2643:32" pos:end="2643:37">rtsp_c</name><operator pos:start="2643:38" pos:end="2643:39">-&gt;</operator><name pos:start="2643:40" pos:end="2643:41">fd</name></name></expr></argument>, <argument pos:start="2643:44" pos:end="2643:68"><expr pos:start="2643:44" pos:end="2643:68"><name pos:start="2643:44" pos:end="2643:68"><name pos:start="2643:44" pos:end="2643:49">rtsp_c</name><operator pos:start="2643:50" pos:end="2643:51">-&gt;</operator><name pos:start="2643:52" pos:end="2643:68">packet_buffer_ptr</name></name></expr></argument>,
                               <argument pos:start="2644:32" pos:end="2644:84"><expr pos:start="2644:32" pos:end="2644:84"><name pos:start="2644:32" pos:end="2644:56"><name pos:start="2644:32" pos:end="2644:37">rtsp_c</name><operator pos:start="2644:38" pos:end="2644:39">-&gt;</operator><name pos:start="2644:40" pos:end="2644:56">packet_buffer_end</name></name> <operator pos:start="2644:58" pos:end="2644:58">-</operator> <name pos:start="2644:60" pos:end="2644:84"><name pos:start="2644:60" pos:end="2644:65">rtsp_c</name><operator pos:start="2644:66" pos:end="2644:67">-&gt;</operator><name pos:start="2644:68" pos:end="2644:84">packet_buffer_ptr</name></name></expr></argument>, <argument pos:start="2644:87" pos:end="2644:87"><expr pos:start="2644:87" pos:end="2644:87"><literal type="number" pos:start="2644:87" pos:end="2644:87">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="2645:21" pos:end="2646:57"><if pos:start="2645:21" pos:end="2646:57">if <condition pos:start="2645:24" pos:end="2645:32">(<expr pos:start="2645:25" pos:end="2645:31"><name pos:start="2645:25" pos:end="2645:27">len</name> <operator pos:start="2645:29" pos:end="2645:29">&gt;</operator> <literal type="number" pos:start="2645:31" pos:end="2645:31">0</literal></expr>)</condition><block type="pseudo" pos:start="2646:25" pos:end="2646:57"><block_content pos:start="2646:25" pos:end="2646:57">
                        <expr_stmt pos:start="2646:25" pos:end="2646:57"><expr pos:start="2646:25" pos:end="2646:56"><name pos:start="2646:25" pos:end="2646:49"><name pos:start="2646:25" pos:end="2646:30">rtsp_c</name><operator pos:start="2646:31" pos:end="2646:32">-&gt;</operator><name pos:start="2646:33" pos:end="2646:49">packet_buffer_ptr</name></name> <operator pos:start="2646:51" pos:end="2646:52">+=</operator> <name pos:start="2646:54" pos:end="2646:56">len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <if_stmt pos:start="2647:21" pos:end="2655:52"><if pos:start="2647:21" pos:end="2653:21">if <condition pos:start="2647:24" pos:end="2647:78">(<expr pos:start="2647:25" pos:end="2647:77"><name pos:start="2647:25" pos:end="2647:49"><name pos:start="2647:25" pos:end="2647:30">rtsp_c</name><operator pos:start="2647:31" pos:end="2647:32">-&gt;</operator><name pos:start="2647:33" pos:end="2647:49">packet_buffer_ptr</name></name> <operator pos:start="2647:51" pos:end="2647:51">&lt;</operator> <name pos:start="2647:53" pos:end="2647:77"><name pos:start="2647:53" pos:end="2647:58">rtsp_c</name><operator pos:start="2647:59" pos:end="2647:60">-&gt;</operator><name pos:start="2647:61" pos:end="2647:77">packet_buffer_end</name></name></expr>)</condition> <block pos:start="2647:80" pos:end="2653:21">{<block_content pos:start="2651:25" pos:end="2652:30">
                        <comment type="block" pos:start="2648:25" pos:end="2650:60">/* if we could not send all the data, we will
                         * send it later, so a new state is needed to
                         * "lock" the RTSP TCP connection */</comment>
                        <expr_stmt pos:start="2651:25" pos:end="2651:62"><expr pos:start="2651:25" pos:end="2651:61"><name pos:start="2651:25" pos:end="2651:37"><name pos:start="2651:25" pos:end="2651:30">rtsp_c</name><operator pos:start="2651:31" pos:end="2651:32">-&gt;</operator><name pos:start="2651:33" pos:end="2651:37">state</name></name> <operator pos:start="2651:39" pos:end="2651:39">=</operator> <name pos:start="2651:41" pos:end="2651:61">RTSPSTATE_SEND_PACKET</name></expr>;</expr_stmt>
                        <break pos:start="2652:25" pos:end="2652:30">break;</break>
                    </block_content>}</block></if> <else pos:start="2653:23" pos:end="2655:52">else<block type="pseudo" pos:start="2655:25" pos:end="2655:52"><block_content pos:start="2655:25" pos:end="2655:52">
                        <comment type="block" pos:start="2654:25" pos:end="2654:52">/* all data has been sent */</comment>
                        <expr_stmt pos:start="2655:25" pos:end="2655:52"><expr pos:start="2655:25" pos:end="2655:51"><call pos:start="2655:25" pos:end="2655:51"><name pos:start="2655:25" pos:end="2655:32">av_freep</name><argument_list pos:start="2655:33" pos:end="2655:51">(<argument pos:start="2655:34" pos:end="2655:50"><expr pos:start="2655:34" pos:end="2655:50"><operator pos:start="2655:34" pos:end="2655:34">&amp;</operator><name pos:start="2655:35" pos:end="2655:50"><name pos:start="2655:35" pos:end="2655:35">c</name><operator pos:start="2655:36" pos:end="2655:37">-&gt;</operator><name pos:start="2655:38" pos:end="2655:50">packet_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
                </block_content>}</block></if> <else pos:start="2656:19" pos:end="2664:17">else <block pos:start="2656:24" pos:end="2664:17">{<block_content pos:start="2658:21" pos:end="2661:41">
                    <comment type="block" pos:start="2657:21" pos:end="2657:57">/* send RTP packet directly in UDP */</comment>
                    <expr_stmt pos:start="2658:21" pos:end="2658:39"><expr pos:start="2658:21" pos:end="2658:38"><name pos:start="2658:21" pos:end="2658:33"><name pos:start="2658:21" pos:end="2658:21">c</name><operator pos:start="2658:22" pos:end="2658:23">-&gt;</operator><name pos:start="2658:24" pos:end="2658:33">buffer_ptr</name></name> <operator pos:start="2658:35" pos:end="2658:36">+=</operator> <literal type="number" pos:start="2658:38" pos:end="2658:38">4</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="2659:21" pos:end="2660:52"><expr pos:start="2659:21" pos:end="2660:51"><call pos:start="2659:21" pos:end="2660:51"><name pos:start="2659:21" pos:end="2659:31">ffurl_write</name><argument_list pos:start="2659:32" pos:end="2660:51">(<argument pos:start="2659:33" pos:end="2659:70"><expr pos:start="2659:33" pos:end="2659:70"><name pos:start="2659:33" pos:end="2659:70"><name pos:start="2659:33" pos:end="2659:33">c</name><operator pos:start="2659:34" pos:end="2659:35">-&gt;</operator><name pos:start="2659:36" pos:end="2659:46">rtp_handles</name><index pos:start="2659:47" pos:end="2659:70">[<expr pos:start="2659:48" pos:end="2659:69"><name pos:start="2659:48" pos:end="2659:69"><name pos:start="2659:48" pos:end="2659:48">c</name><operator pos:start="2659:49" pos:end="2659:50">-&gt;</operator><name pos:start="2659:51" pos:end="2659:69">packet_stream_index</name></name></expr>]</index></name></expr></argument>,
                                <argument pos:start="2660:33" pos:end="2660:45"><expr pos:start="2660:33" pos:end="2660:45"><name pos:start="2660:33" pos:end="2660:45"><name pos:start="2660:33" pos:end="2660:33">c</name><operator pos:start="2660:34" pos:end="2660:35">-&gt;</operator><name pos:start="2660:36" pos:end="2660:45">buffer_ptr</name></name></expr></argument>, <argument pos:start="2660:48" pos:end="2660:50"><expr pos:start="2660:48" pos:end="2660:50"><name pos:start="2660:48" pos:end="2660:50">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="2661:21" pos:end="2661:41"><expr pos:start="2661:21" pos:end="2661:40"><name pos:start="2661:21" pos:end="2661:33"><name pos:start="2661:21" pos:end="2661:21">c</name><operator pos:start="2661:22" pos:end="2661:23">-&gt;</operator><name pos:start="2661:24" pos:end="2661:33">buffer_ptr</name></name> <operator pos:start="2661:35" pos:end="2661:36">+=</operator> <name pos:start="2661:38" pos:end="2661:40">len</name></expr>;</expr_stmt>
                    <comment type="block" pos:start="2662:21" pos:end="2663:40">/* here we continue as we can send several packets
                     * per 10 ms slot */</comment>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else pos:start="2665:15" pos:end="2684:13">else <block pos:start="2665:20" pos:end="2684:13">{<block_content pos:start="2667:17" pos:end="2683:22">
                <comment type="block" pos:start="2666:17" pos:end="2666:37">/* TCP data output */</comment>
                <expr_stmt pos:start="2667:17" pos:end="2668:61"><expr pos:start="2667:17" pos:end="2668:60"><name pos:start="2667:17" pos:end="2667:19">len</name> <operator pos:start="2667:21" pos:end="2667:21">=</operator> <call pos:start="2667:23" pos:end="2668:60"><name pos:start="2667:23" pos:end="2667:26">send</name><argument_list pos:start="2667:27" pos:end="2668:60">(<argument pos:start="2667:28" pos:end="2667:32"><expr pos:start="2667:28" pos:end="2667:32"><name pos:start="2667:28" pos:end="2667:32"><name pos:start="2667:28" pos:end="2667:28">c</name><operator pos:start="2667:29" pos:end="2667:30">-&gt;</operator><name pos:start="2667:31" pos:end="2667:32">fd</name></name></expr></argument>, <argument pos:start="2667:35" pos:end="2667:47"><expr pos:start="2667:35" pos:end="2667:47"><name pos:start="2667:35" pos:end="2667:47"><name pos:start="2667:35" pos:end="2667:35">c</name><operator pos:start="2667:36" pos:end="2667:37">-&gt;</operator><name pos:start="2667:38" pos:end="2667:47">buffer_ptr</name></name></expr></argument>,
                           <argument pos:start="2668:28" pos:end="2668:56"><expr pos:start="2668:28" pos:end="2668:56"><name pos:start="2668:28" pos:end="2668:40"><name pos:start="2668:28" pos:end="2668:28">c</name><operator pos:start="2668:29" pos:end="2668:30">-&gt;</operator><name pos:start="2668:31" pos:end="2668:40">buffer_end</name></name> <operator pos:start="2668:42" pos:end="2668:42">-</operator> <name pos:start="2668:44" pos:end="2668:56"><name pos:start="2668:44" pos:end="2668:44">c</name><operator pos:start="2668:45" pos:end="2668:46">-&gt;</operator><name pos:start="2668:47" pos:end="2668:56">buffer_ptr</name></name></expr></argument>, <argument pos:start="2668:59" pos:end="2668:59"><expr pos:start="2668:59" pos:end="2668:59"><literal type="number" pos:start="2668:59" pos:end="2668:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="2669:17" pos:end="2676:17"><if pos:start="2669:17" pos:end="2676:17">if <condition pos:start="2669:20" pos:end="2669:28">(<expr pos:start="2669:21" pos:end="2669:27"><name pos:start="2669:21" pos:end="2669:23">len</name> <operator pos:start="2669:25" pos:end="2669:25">&lt;</operator> <literal type="number" pos:start="2669:27" pos:end="2669:27">0</literal></expr>)</condition> <block pos:start="2669:30" pos:end="2676:17">{<block_content pos:start="2670:21" pos:end="2675:33">
                    <if_stmt pos:start="2670:21" pos:end="2675:33"><if pos:start="2670:21" pos:end="2674:35">if <condition pos:start="2670:24" pos:end="2670:58">(<expr pos:start="2670:25" pos:end="2670:56"><call pos:start="2670:25" pos:end="2670:37"><name pos:start="2670:25" pos:end="2670:35">ff_neterrno</name><argument_list pos:start="2670:36" pos:end="2670:37">()</argument_list></call> <operator pos:start="2670:39" pos:end="2670:40">!=</operator> <call pos:start="2670:42" pos:end="2670:56"><name pos:start="2670:42" pos:end="2670:48">AVERROR</name><argument_list pos:start="2670:49" pos:end="2670:56">(<argument pos:start="2670:50" pos:end="2670:55"><expr pos:start="2670:50" pos:end="2670:55"><name pos:start="2670:50" pos:end="2670:55">EAGAIN</name></expr></argument>)</argument_list></call></expr> )</condition><block pos:start="2670:59" pos:end="2674:35">{<block_content pos:start="2671:1" pos:end="2674:34">
<if_stmt pos:start="2671:1" pos:end="2674:34"><if pos:start="2671:1" pos:end="2674:34">if<condition pos:start="2671:3" pos:end="2672:56">(
                        <expr pos:start="2672:25" pos:end="2672:55"><call pos:start="2672:25" pos:end="2672:37"><name pos:start="2672:25" pos:end="2672:35">ff_neterrno</name><argument_list pos:start="2672:36" pos:end="2672:37">()</argument_list></call> <operator pos:start="2672:39" pos:end="2672:40">!=</operator> <call pos:start="2672:42" pos:end="2672:55"><name pos:start="2672:42" pos:end="2672:48">AVERROR</name><argument_list pos:start="2672:49" pos:end="2672:55">(<argument pos:start="2672:50" pos:end="2672:54"><expr pos:start="2672:50" pos:end="2672:54"><name pos:start="2672:50" pos:end="2672:54">EINTR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2674:25" pos:end="2674:34"><block_content pos:start="2674:25" pos:end="2674:34">
                        <comment type="block" pos:start="2673:25" pos:end="2673:54">/* error : close connection */</comment>
                        <return pos:start="2674:25" pos:end="2674:34">return <expr pos:start="2674:32" pos:end="2674:33"><operator pos:start="2674:32" pos:end="2674:32">-</operator><literal type="number" pos:start="2674:33" pos:end="2674:33">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content>}</block></if><else pos:start="2674:36" pos:end="2675:33">else<block type="pseudo" pos:start="2675:25" pos:end="2675:33"><block_content pos:start="2675:25" pos:end="2675:33">
                        <return pos:start="2675:25" pos:end="2675:33">return <expr pos:start="2675:32" pos:end="2675:32"><literal type="number" pos:start="2675:32" pos:end="2675:32">0</literal></expr>;</return></block_content></block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt pos:start="2677:17" pos:end="2677:37"><expr pos:start="2677:17" pos:end="2677:36"><name pos:start="2677:17" pos:end="2677:29"><name pos:start="2677:17" pos:end="2677:17">c</name><operator pos:start="2677:18" pos:end="2677:19">-&gt;</operator><name pos:start="2677:20" pos:end="2677:29">buffer_ptr</name></name> <operator pos:start="2677:31" pos:end="2677:32">+=</operator> <name pos:start="2677:34" pos:end="2677:36">len</name></expr>;</expr_stmt>

                <expr_stmt pos:start="2679:17" pos:end="2679:37"><expr pos:start="2679:17" pos:end="2679:36"><name pos:start="2679:17" pos:end="2679:29"><name pos:start="2679:17" pos:end="2679:17">c</name><operator pos:start="2679:18" pos:end="2679:19">-&gt;</operator><name pos:start="2679:20" pos:end="2679:29">data_count</name></name> <operator pos:start="2679:31" pos:end="2679:32">+=</operator> <name pos:start="2679:34" pos:end="2679:36">len</name></expr>;</expr_stmt>
                <expr_stmt pos:start="2680:17" pos:end="2680:61"><expr pos:start="2680:17" pos:end="2680:60"><call pos:start="2680:17" pos:end="2680:60"><name pos:start="2680:17" pos:end="2680:31">update_datarate</name><argument_list pos:start="2680:32" pos:end="2680:60">(<argument pos:start="2680:33" pos:end="2680:44"><expr pos:start="2680:33" pos:end="2680:44"><operator pos:start="2680:33" pos:end="2680:33">&amp;</operator><name pos:start="2680:34" pos:end="2680:44"><name pos:start="2680:34" pos:end="2680:34">c</name><operator pos:start="2680:35" pos:end="2680:36">-&gt;</operator><name pos:start="2680:37" pos:end="2680:44">datarate</name></name></expr></argument>, <argument pos:start="2680:47" pos:end="2680:59"><expr pos:start="2680:47" pos:end="2680:59"><name pos:start="2680:47" pos:end="2680:59"><name pos:start="2680:47" pos:end="2680:47">c</name><operator pos:start="2680:48" pos:end="2680:49">-&gt;</operator><name pos:start="2680:50" pos:end="2680:59">data_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="2681:17" pos:end="2682:51"><if pos:start="2681:17" pos:end="2682:51">if <condition pos:start="2681:20" pos:end="2681:30">(<expr pos:start="2681:21" pos:end="2681:29"><name pos:start="2681:21" pos:end="2681:29"><name pos:start="2681:21" pos:end="2681:21">c</name><operator pos:start="2681:22" pos:end="2681:23">-&gt;</operator><name pos:start="2681:24" pos:end="2681:29">stream</name></name></expr>)</condition><block type="pseudo" pos:start="2682:21" pos:end="2682:51"><block_content pos:start="2682:21" pos:end="2682:51">
                    <expr_stmt pos:start="2682:21" pos:end="2682:51"><expr pos:start="2682:21" pos:end="2682:50"><name pos:start="2682:21" pos:end="2682:43"><name pos:start="2682:21" pos:end="2682:21">c</name><operator pos:start="2682:22" pos:end="2682:23">-&gt;</operator><name pos:start="2682:24" pos:end="2682:29">stream</name><operator pos:start="2682:30" pos:end="2682:31">-&gt;</operator><name pos:start="2682:32" pos:end="2682:43">bytes_served</name></name> <operator pos:start="2682:45" pos:end="2682:46">+=</operator> <name pos:start="2682:48" pos:end="2682:50">len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <break pos:start="2683:17" pos:end="2683:22">break;</break>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for> <comment type="block" pos:start="2686:7" pos:end="2686:19">/* for(;;) */</comment>
    <return pos:start="2687:5" pos:end="2687:13">return <expr pos:start="2687:12" pos:end="2687:12"><literal type="number" pos:start="2687:12" pos:end="2687:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="2690:1" pos:end="2750:1"><type pos:start="2690:1" pos:end="2690:10"><specifier pos:start="2690:1" pos:end="2690:6">static</specifier> <name pos:start="2690:8" pos:end="2690:10">int</name></type> <name pos:start="2690:12" pos:end="2690:34">http_start_receive_data</name><parameter_list pos:start="2690:35" pos:end="2690:50">(<parameter pos:start="2690:36" pos:end="2690:49"><decl pos:start="2690:36" pos:end="2690:49"><type pos:start="2690:36" pos:end="2690:48"><name pos:start="2690:36" pos:end="2690:46">HTTPContext</name> <modifier pos:start="2690:48" pos:end="2690:48">*</modifier></type><name pos:start="2690:49" pos:end="2690:49">c</name></decl></parameter>)</parameter_list>
<block pos:start="2691:1" pos:end="2750:1">{<block_content pos:start="2692:5" pos:end="2749:13">
    <decl_stmt pos:start="2692:5" pos:end="2692:11"><decl pos:start="2692:5" pos:end="2692:10"><type pos:start="2692:5" pos:end="2692:7"><name pos:start="2692:5" pos:end="2692:7">int</name></type> <name pos:start="2692:9" pos:end="2692:10">fd</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2693:5" pos:end="2693:12"><decl pos:start="2693:5" pos:end="2693:11"><type pos:start="2693:5" pos:end="2693:7"><name pos:start="2693:5" pos:end="2693:7">int</name></type> <name pos:start="2693:9" pos:end="2693:11">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2694:5" pos:end="2694:18"><decl pos:start="2694:5" pos:end="2694:17"><type pos:start="2694:5" pos:end="2694:11"><name pos:start="2694:5" pos:end="2694:11">int64_t</name></type> <name pos:start="2694:13" pos:end="2694:17">ret64</name></decl>;</decl_stmt>

    <if_stmt pos:start="2696:5" pos:end="2700:5"><if pos:start="2696:5" pos:end="2700:5">if <condition pos:start="2696:8" pos:end="2696:31">(<expr pos:start="2696:9" pos:end="2696:30"><name pos:start="2696:9" pos:end="2696:30"><name pos:start="2696:9" pos:end="2696:9">c</name><operator pos:start="2696:10" pos:end="2696:11">-&gt;</operator><name pos:start="2696:12" pos:end="2696:17">stream</name><operator pos:start="2696:18" pos:end="2696:19">-&gt;</operator><name pos:start="2696:20" pos:end="2696:30">feed_opened</name></name></expr>)</condition> <block pos:start="2696:33" pos:end="2700:5">{<block_content pos:start="2697:9" pos:end="2699:31">
        <expr_stmt pos:start="2697:9" pos:end="2698:43"><expr pos:start="2697:9" pos:end="2698:42"><call pos:start="2697:9" pos:end="2698:42"><name pos:start="2697:9" pos:end="2697:16">http_log</name><argument_list pos:start="2697:17" pos:end="2698:42">(<argument pos:start="2697:18" pos:end="2697:52"><expr pos:start="2697:18" pos:end="2697:52"><literal type="string" pos:start="2697:18" pos:end="2697:52">"Stream feed '%s' was not opened\n"</literal></expr></argument>,
                 <argument pos:start="2698:18" pos:end="2698:41"><expr pos:start="2698:18" pos:end="2698:41"><name pos:start="2698:18" pos:end="2698:41"><name pos:start="2698:18" pos:end="2698:18">c</name><operator pos:start="2698:19" pos:end="2698:20">-&gt;</operator><name pos:start="2698:21" pos:end="2698:26">stream</name><operator pos:start="2698:27" pos:end="2698:28">-&gt;</operator><name pos:start="2698:29" pos:end="2698:41">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2699:9" pos:end="2699:31">return <expr pos:start="2699:16" pos:end="2699:30"><call pos:start="2699:16" pos:end="2699:30"><name pos:start="2699:16" pos:end="2699:22">AVERROR</name><argument_list pos:start="2699:23" pos:end="2699:30">(<argument pos:start="2699:24" pos:end="2699:29"><expr pos:start="2699:24" pos:end="2699:29"><name pos:start="2699:24" pos:end="2699:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="2702:5" pos:end="2702:42">/* Don't permit writing to this one */</comment>
    <if_stmt pos:start="2703:5" pos:end="2707:5"><if pos:start="2703:5" pos:end="2707:5">if <condition pos:start="2703:8" pos:end="2703:28">(<expr pos:start="2703:9" pos:end="2703:27"><name pos:start="2703:9" pos:end="2703:27"><name pos:start="2703:9" pos:end="2703:9">c</name><operator pos:start="2703:10" pos:end="2703:11">-&gt;</operator><name pos:start="2703:12" pos:end="2703:17">stream</name><operator pos:start="2703:18" pos:end="2703:19">-&gt;</operator><name pos:start="2703:20" pos:end="2703:27">readonly</name></name></expr>)</condition> <block pos:start="2703:30" pos:end="2707:5">{<block_content pos:start="2704:9" pos:end="2706:31">
        <expr_stmt pos:start="2704:9" pos:end="2705:43"><expr pos:start="2704:9" pos:end="2705:42"><call pos:start="2704:9" pos:end="2705:42"><name pos:start="2704:9" pos:end="2704:16">http_log</name><argument_list pos:start="2704:17" pos:end="2705:42">(<argument pos:start="2704:18" pos:end="2704:56"><expr pos:start="2704:18" pos:end="2704:56"><literal type="string" pos:start="2704:18" pos:end="2704:56">"Cannot write to read-only file '%s'\n"</literal></expr></argument>,
                 <argument pos:start="2705:18" pos:end="2705:41"><expr pos:start="2705:18" pos:end="2705:41"><name pos:start="2705:18" pos:end="2705:41"><name pos:start="2705:18" pos:end="2705:18">c</name><operator pos:start="2705:19" pos:end="2705:20">-&gt;</operator><name pos:start="2705:21" pos:end="2705:26">stream</name><operator pos:start="2705:27" pos:end="2705:28">-&gt;</operator><name pos:start="2705:29" pos:end="2705:41">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2706:9" pos:end="2706:31">return <expr pos:start="2706:16" pos:end="2706:30"><call pos:start="2706:16" pos:end="2706:30"><name pos:start="2706:16" pos:end="2706:22">AVERROR</name><argument_list pos:start="2706:23" pos:end="2706:30">(<argument pos:start="2706:24" pos:end="2706:29"><expr pos:start="2706:24" pos:end="2706:29"><name pos:start="2706:24" pos:end="2706:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="2709:5" pos:end="2709:19">/* open feed */</comment>
    <expr_stmt pos:start="2710:5" pos:end="2710:48"><expr pos:start="2710:5" pos:end="2710:47"><name pos:start="2710:5" pos:end="2710:6">fd</name> <operator pos:start="2710:8" pos:end="2710:8">=</operator> <call pos:start="2710:10" pos:end="2710:47"><name pos:start="2710:10" pos:end="2710:13">open</name><argument_list pos:start="2710:14" pos:end="2710:47">(<argument pos:start="2710:15" pos:end="2710:38"><expr pos:start="2710:15" pos:end="2710:38"><name pos:start="2710:15" pos:end="2710:38"><name pos:start="2710:15" pos:end="2710:15">c</name><operator pos:start="2710:16" pos:end="2710:17">-&gt;</operator><name pos:start="2710:18" pos:end="2710:23">stream</name><operator pos:start="2710:24" pos:end="2710:25">-&gt;</operator><name pos:start="2710:26" pos:end="2710:38">feed_filename</name></name></expr></argument>, <argument pos:start="2710:41" pos:end="2710:46"><expr pos:start="2710:41" pos:end="2710:46"><name pos:start="2710:41" pos:end="2710:46">O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="2711:5" pos:end="2716:5"><if pos:start="2711:5" pos:end="2716:5">if <condition pos:start="2711:8" pos:end="2711:15">(<expr pos:start="2711:9" pos:end="2711:14"><name pos:start="2711:9" pos:end="2711:10">fd</name> <operator pos:start="2711:12" pos:end="2711:12">&lt;</operator> <literal type="number" pos:start="2711:14" pos:end="2711:14">0</literal></expr>)</condition> <block pos:start="2711:17" pos:end="2716:5">{<block_content pos:start="2712:9" pos:end="2715:19">
        <expr_stmt pos:start="2712:9" pos:end="2712:29"><expr pos:start="2712:9" pos:end="2712:28"><name pos:start="2712:9" pos:end="2712:11">ret</name> <operator pos:start="2712:13" pos:end="2712:13">=</operator> <call pos:start="2712:15" pos:end="2712:28"><name pos:start="2712:15" pos:end="2712:21">AVERROR</name><argument_list pos:start="2712:22" pos:end="2712:28">(<argument pos:start="2712:23" pos:end="2712:27"><expr pos:start="2712:23" pos:end="2712:27"><name pos:start="2712:23" pos:end="2712:27">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2713:9" pos:end="2714:60"><expr pos:start="2713:9" pos:end="2714:59"><call pos:start="2713:9" pos:end="2714:59"><name pos:start="2713:9" pos:end="2713:16">http_log</name><argument_list pos:start="2713:17" pos:end="2714:59">(<argument pos:start="2713:18" pos:end="2713:54"><expr pos:start="2713:18" pos:end="2713:54"><literal type="string" pos:start="2713:18" pos:end="2713:54">"Could not open feed file '%s': %s\n"</literal></expr></argument>,
                 <argument pos:start="2714:18" pos:end="2714:41"><expr pos:start="2714:18" pos:end="2714:41"><name pos:start="2714:18" pos:end="2714:41"><name pos:start="2714:18" pos:end="2714:18">c</name><operator pos:start="2714:19" pos:end="2714:20">-&gt;</operator><name pos:start="2714:21" pos:end="2714:26">stream</name><operator pos:start="2714:27" pos:end="2714:28">-&gt;</operator><name pos:start="2714:29" pos:end="2714:41">feed_filename</name></name></expr></argument>, <argument pos:start="2714:44" pos:end="2714:58"><expr pos:start="2714:44" pos:end="2714:58"><call pos:start="2714:44" pos:end="2714:58"><name pos:start="2714:44" pos:end="2714:51">strerror</name><argument_list pos:start="2714:52" pos:end="2714:58">(<argument pos:start="2714:53" pos:end="2714:57"><expr pos:start="2714:53" pos:end="2714:57"><name pos:start="2714:53" pos:end="2714:57">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2715:9" pos:end="2715:19">return <expr pos:start="2715:16" pos:end="2715:18"><name pos:start="2715:16" pos:end="2715:18">ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="2717:5" pos:end="2717:20"><expr pos:start="2717:5" pos:end="2717:19"><name pos:start="2717:5" pos:end="2717:14"><name pos:start="2717:5" pos:end="2717:5">c</name><operator pos:start="2717:6" pos:end="2717:7">-&gt;</operator><name pos:start="2717:8" pos:end="2717:14">feed_fd</name></name> <operator pos:start="2717:16" pos:end="2717:16">=</operator> <name pos:start="2717:18" pos:end="2717:19">fd</name></expr>;</expr_stmt>

    <if_stmt pos:start="2719:5" pos:end="2737:5"><if pos:start="2719:5" pos:end="2729:5">if <condition pos:start="2719:8" pos:end="2719:28">(<expr pos:start="2719:9" pos:end="2719:27"><name pos:start="2719:9" pos:end="2719:27"><name pos:start="2719:9" pos:end="2719:9">c</name><operator pos:start="2719:10" pos:end="2719:11">-&gt;</operator><name pos:start="2719:12" pos:end="2719:17">stream</name><operator pos:start="2719:18" pos:end="2719:19">-&gt;</operator><name pos:start="2719:20" pos:end="2719:27">truncate</name></name></expr>)</condition> <block pos:start="2719:30" pos:end="2729:5">{<block_content pos:start="2721:9" pos:end="2728:9">
        <comment type="block" pos:start="2720:9" pos:end="2720:32">/* truncate feed file */</comment>
        <expr_stmt pos:start="2721:9" pos:end="2721:59"><expr pos:start="2721:9" pos:end="2721:58"><call pos:start="2721:9" pos:end="2721:58"><name pos:start="2721:9" pos:end="2721:29">ffm_write_write_index</name><argument_list pos:start="2721:30" pos:end="2721:58">(<argument pos:start="2721:31" pos:end="2721:40"><expr pos:start="2721:31" pos:end="2721:40"><name pos:start="2721:31" pos:end="2721:40"><name pos:start="2721:31" pos:end="2721:31">c</name><operator pos:start="2721:32" pos:end="2721:33">-&gt;</operator><name pos:start="2721:34" pos:end="2721:40">feed_fd</name></name></expr></argument>, <argument pos:start="2721:43" pos:end="2721:57"><expr pos:start="2721:43" pos:end="2721:57"><name pos:start="2721:43" pos:end="2721:57">FFM_PACKET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2722:9" pos:end="2722:74"><expr pos:start="2722:9" pos:end="2722:73"><call pos:start="2722:9" pos:end="2722:73"><name pos:start="2722:9" pos:end="2722:16">http_log</name><argument_list pos:start="2722:17" pos:end="2722:73">(<argument pos:start="2722:18" pos:end="2722:46"><expr pos:start="2722:18" pos:end="2722:46"><literal type="string" pos:start="2722:18" pos:end="2722:46">"Truncating feed file '%s'\n"</literal></expr></argument>, <argument pos:start="2722:49" pos:end="2722:72"><expr pos:start="2722:49" pos:end="2722:72"><name pos:start="2722:49" pos:end="2722:72"><name pos:start="2722:49" pos:end="2722:49">c</name><operator pos:start="2722:50" pos:end="2722:51">-&gt;</operator><name pos:start="2722:52" pos:end="2722:57">stream</name><operator pos:start="2722:58" pos:end="2722:59">-&gt;</operator><name pos:start="2722:60" pos:end="2722:72">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2723:9" pos:end="2728:9"><if pos:start="2723:9" pos:end="2728:9">if <condition pos:start="2723:12" pos:end="2723:55">(<expr pos:start="2723:13" pos:end="2723:54"><call pos:start="2723:13" pos:end="2723:50"><name pos:start="2723:13" pos:end="2723:21">ftruncate</name><argument_list pos:start="2723:22" pos:end="2723:50">(<argument pos:start="2723:23" pos:end="2723:32"><expr pos:start="2723:23" pos:end="2723:32"><name pos:start="2723:23" pos:end="2723:32"><name pos:start="2723:23" pos:end="2723:23">c</name><operator pos:start="2723:24" pos:end="2723:25">-&gt;</operator><name pos:start="2723:26" pos:end="2723:32">feed_fd</name></name></expr></argument>, <argument pos:start="2723:35" pos:end="2723:49"><expr pos:start="2723:35" pos:end="2723:49"><name pos:start="2723:35" pos:end="2723:49">FFM_PACKET_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="2723:52" pos:end="2723:52">&lt;</operator> <literal type="number" pos:start="2723:54" pos:end="2723:54">0</literal></expr>)</condition> <block pos:start="2723:57" pos:end="2728:9">{<block_content pos:start="2724:13" pos:end="2727:23">
            <expr_stmt pos:start="2724:13" pos:end="2724:33"><expr pos:start="2724:13" pos:end="2724:32"><name pos:start="2724:13" pos:end="2724:15">ret</name> <operator pos:start="2724:17" pos:end="2724:17">=</operator> <call pos:start="2724:19" pos:end="2724:32"><name pos:start="2724:19" pos:end="2724:25">AVERROR</name><argument_list pos:start="2724:26" pos:end="2724:32">(<argument pos:start="2724:27" pos:end="2724:31"><expr pos:start="2724:27" pos:end="2724:31"><name pos:start="2724:27" pos:end="2724:31">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2725:13" pos:end="2726:64"><expr pos:start="2725:13" pos:end="2726:63"><call pos:start="2725:13" pos:end="2726:63"><name pos:start="2725:13" pos:end="2725:20">http_log</name><argument_list pos:start="2725:21" pos:end="2726:63">(<argument pos:start="2725:22" pos:end="2725:60"><expr pos:start="2725:22" pos:end="2725:60"><literal type="string" pos:start="2725:22" pos:end="2725:60">"Error truncating feed file '%s': %s\n"</literal></expr></argument>,
                     <argument pos:start="2726:22" pos:end="2726:45"><expr pos:start="2726:22" pos:end="2726:45"><name pos:start="2726:22" pos:end="2726:45"><name pos:start="2726:22" pos:end="2726:22">c</name><operator pos:start="2726:23" pos:end="2726:24">-&gt;</operator><name pos:start="2726:25" pos:end="2726:30">stream</name><operator pos:start="2726:31" pos:end="2726:32">-&gt;</operator><name pos:start="2726:33" pos:end="2726:45">feed_filename</name></name></expr></argument>, <argument pos:start="2726:48" pos:end="2726:62"><expr pos:start="2726:48" pos:end="2726:62"><call pos:start="2726:48" pos:end="2726:62"><name pos:start="2726:48" pos:end="2726:55">strerror</name><argument_list pos:start="2726:56" pos:end="2726:62">(<argument pos:start="2726:57" pos:end="2726:61"><expr pos:start="2726:57" pos:end="2726:61"><name pos:start="2726:57" pos:end="2726:61">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2727:13" pos:end="2727:23">return <expr pos:start="2727:20" pos:end="2727:22"><name pos:start="2727:20" pos:end="2727:22">ret</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else pos:start="2729:7" pos:end="2737:5">else <block pos:start="2729:12" pos:end="2737:5">{<block_content pos:start="2730:9" pos:end="2736:44">
        <expr_stmt pos:start="2730:9" pos:end="2730:41"><expr pos:start="2730:9" pos:end="2730:40"><name pos:start="2730:9" pos:end="2730:13">ret64</name> <operator pos:start="2730:15" pos:end="2730:15">=</operator> <call pos:start="2730:17" pos:end="2730:40"><name pos:start="2730:17" pos:end="2730:36">ffm_read_write_index</name><argument_list pos:start="2730:37" pos:end="2730:40">(<argument pos:start="2730:38" pos:end="2730:39"><expr pos:start="2730:38" pos:end="2730:39"><name pos:start="2730:38" pos:end="2730:39">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2731:9" pos:end="2735:9"><if pos:start="2731:9" pos:end="2735:9">if <condition pos:start="2731:12" pos:end="2731:22">(<expr pos:start="2731:13" pos:end="2731:21"><name pos:start="2731:13" pos:end="2731:17">ret64</name> <operator pos:start="2731:19" pos:end="2731:19">&lt;</operator> <literal type="number" pos:start="2731:21" pos:end="2731:21">0</literal></expr>)</condition> <block pos:start="2731:24" pos:end="2735:9">{<block_content pos:start="2732:13" pos:end="2734:25">
            <expr_stmt pos:start="2732:13" pos:end="2733:64"><expr pos:start="2732:13" pos:end="2733:63"><call pos:start="2732:13" pos:end="2733:63"><name pos:start="2732:13" pos:end="2732:20">http_log</name><argument_list pos:start="2732:21" pos:end="2733:63">(<argument pos:start="2732:22" pos:end="2732:74"><expr pos:start="2732:22" pos:end="2732:74"><literal type="string" pos:start="2732:22" pos:end="2732:74">"Error reading write index from feed file '%s': %s\n"</literal></expr></argument>,
                     <argument pos:start="2733:22" pos:end="2733:45"><expr pos:start="2733:22" pos:end="2733:45"><name pos:start="2733:22" pos:end="2733:45"><name pos:start="2733:22" pos:end="2733:22">c</name><operator pos:start="2733:23" pos:end="2733:24">-&gt;</operator><name pos:start="2733:25" pos:end="2733:30">stream</name><operator pos:start="2733:31" pos:end="2733:32">-&gt;</operator><name pos:start="2733:33" pos:end="2733:45">feed_filename</name></name></expr></argument>, <argument pos:start="2733:48" pos:end="2733:62"><expr pos:start="2733:48" pos:end="2733:62"><call pos:start="2733:48" pos:end="2733:62"><name pos:start="2733:48" pos:end="2733:55">strerror</name><argument_list pos:start="2733:56" pos:end="2733:62">(<argument pos:start="2733:57" pos:end="2733:61"><expr pos:start="2733:57" pos:end="2733:61"><name pos:start="2733:57" pos:end="2733:61">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="2734:13" pos:end="2734:25">return <expr pos:start="2734:20" pos:end="2734:24"><name pos:start="2734:20" pos:end="2734:24">ret64</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="2736:9" pos:end="2736:44"><expr pos:start="2736:9" pos:end="2736:43"><name pos:start="2736:9" pos:end="2736:35"><name pos:start="2736:9" pos:end="2736:9">c</name><operator pos:start="2736:10" pos:end="2736:11">-&gt;</operator><name pos:start="2736:12" pos:end="2736:17">stream</name><operator pos:start="2736:18" pos:end="2736:19">-&gt;</operator><name pos:start="2736:20" pos:end="2736:35">feed_write_index</name></name> <operator pos:start="2736:37" pos:end="2736:37">=</operator> <name pos:start="2736:39" pos:end="2736:43">ret64</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="2739:5" pos:end="2740:57"><expr pos:start="2739:5" pos:end="2740:56"><name pos:start="2739:5" pos:end="2739:31"><name pos:start="2739:5" pos:end="2739:5">c</name><operator pos:start="2739:6" pos:end="2739:7">-&gt;</operator><name pos:start="2739:8" pos:end="2739:13">stream</name><operator pos:start="2739:14" pos:end="2739:15">-&gt;</operator><name pos:start="2739:16" pos:end="2739:31">feed_write_index</name></name> <operator pos:start="2739:33" pos:end="2739:33">=</operator> <call pos:start="2739:35" pos:end="2740:56"><name pos:start="2739:35" pos:end="2739:39">FFMAX</name><argument_list pos:start="2739:40" pos:end="2740:56">(<argument pos:start="2739:41" pos:end="2739:64"><expr pos:start="2739:41" pos:end="2739:64"><call pos:start="2739:41" pos:end="2739:64"><name pos:start="2739:41" pos:end="2739:60">ffm_read_write_index</name><argument_list pos:start="2739:61" pos:end="2739:64">(<argument pos:start="2739:62" pos:end="2739:63"><expr pos:start="2739:62" pos:end="2739:63"><name pos:start="2739:62" pos:end="2739:63">fd</name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument pos:start="2740:41" pos:end="2740:55"><expr pos:start="2740:41" pos:end="2740:55"><name pos:start="2740:41" pos:end="2740:55">FFM_PACKET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2741:5" pos:end="2741:50"><expr pos:start="2741:5" pos:end="2741:49"><name pos:start="2741:5" pos:end="2741:24"><name pos:start="2741:5" pos:end="2741:5">c</name><operator pos:start="2741:6" pos:end="2741:7">-&gt;</operator><name pos:start="2741:8" pos:end="2741:13">stream</name><operator pos:start="2741:14" pos:end="2741:15">-&gt;</operator><name pos:start="2741:16" pos:end="2741:24">feed_size</name></name> <operator pos:start="2741:26" pos:end="2741:26">=</operator> <call pos:start="2741:28" pos:end="2741:49"><name pos:start="2741:28" pos:end="2741:32">lseek</name><argument_list pos:start="2741:33" pos:end="2741:49">(<argument pos:start="2741:34" pos:end="2741:35"><expr pos:start="2741:34" pos:end="2741:35"><name pos:start="2741:34" pos:end="2741:35">fd</name></expr></argument>, <argument pos:start="2741:38" pos:end="2741:38"><expr pos:start="2741:38" pos:end="2741:38"><literal type="number" pos:start="2741:38" pos:end="2741:38">0</literal></expr></argument>, <argument pos:start="2741:41" pos:end="2741:48"><expr pos:start="2741:41" pos:end="2741:48"><name pos:start="2741:41" pos:end="2741:48">SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2742:5" pos:end="2742:27"><expr pos:start="2742:5" pos:end="2742:26"><call pos:start="2742:5" pos:end="2742:26"><name pos:start="2742:5" pos:end="2742:9">lseek</name><argument_list pos:start="2742:10" pos:end="2742:26">(<argument pos:start="2742:11" pos:end="2742:12"><expr pos:start="2742:11" pos:end="2742:12"><name pos:start="2742:11" pos:end="2742:12">fd</name></expr></argument>, <argument pos:start="2742:15" pos:end="2742:15"><expr pos:start="2742:15" pos:end="2742:15"><literal type="number" pos:start="2742:15" pos:end="2742:15">0</literal></expr></argument>, <argument pos:start="2742:18" pos:end="2742:25"><expr pos:start="2742:18" pos:end="2742:25"><name pos:start="2742:18" pos:end="2742:25">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="2744:5" pos:end="2744:27">/* init buffer input */</comment>
    <expr_stmt pos:start="2745:5" pos:end="2745:30"><expr pos:start="2745:5" pos:end="2745:29"><name pos:start="2745:5" pos:end="2745:17"><name pos:start="2745:5" pos:end="2745:5">c</name><operator pos:start="2745:6" pos:end="2745:7">-&gt;</operator><name pos:start="2745:8" pos:end="2745:17">buffer_ptr</name></name> <operator pos:start="2745:19" pos:end="2745:19">=</operator> <name pos:start="2745:21" pos:end="2745:29"><name pos:start="2745:21" pos:end="2745:21">c</name><operator pos:start="2745:22" pos:end="2745:23">-&gt;</operator><name pos:start="2745:24" pos:end="2745:29">buffer</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="2746:5" pos:end="2746:48"><expr pos:start="2746:5" pos:end="2746:47"><name pos:start="2746:5" pos:end="2746:17"><name pos:start="2746:5" pos:end="2746:5">c</name><operator pos:start="2746:6" pos:end="2746:7">-&gt;</operator><name pos:start="2746:8" pos:end="2746:17">buffer_end</name></name> <operator pos:start="2746:19" pos:end="2746:19">=</operator> <name pos:start="2746:21" pos:end="2746:29"><name pos:start="2746:21" pos:end="2746:21">c</name><operator pos:start="2746:22" pos:end="2746:23">-&gt;</operator><name pos:start="2746:24" pos:end="2746:29">buffer</name></name> <operator pos:start="2746:31" pos:end="2746:31">+</operator> <name pos:start="2746:33" pos:end="2746:47">FFM_PACKET_SIZE</name></expr>;</expr_stmt>
    <expr_stmt pos:start="2747:5" pos:end="2747:31"><expr pos:start="2747:5" pos:end="2747:30"><name pos:start="2747:5" pos:end="2747:26"><name pos:start="2747:5" pos:end="2747:5">c</name><operator pos:start="2747:6" pos:end="2747:7">-&gt;</operator><name pos:start="2747:8" pos:end="2747:13">stream</name><operator pos:start="2747:14" pos:end="2747:15">-&gt;</operator><name pos:start="2747:16" pos:end="2747:26">feed_opened</name></name> <operator pos:start="2747:28" pos:end="2747:28">=</operator> <literal type="number" pos:start="2747:30" pos:end="2747:30">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="2748:5" pos:end="2748:80"><expr pos:start="2748:5" pos:end="2748:79"><name pos:start="2748:5" pos:end="2748:23"><name pos:start="2748:5" pos:end="2748:5">c</name><operator pos:start="2748:6" pos:end="2748:7">-&gt;</operator><name pos:start="2748:8" pos:end="2748:23">chunked_encoding</name></name> <operator pos:start="2748:25" pos:end="2748:25">=</operator> <operator pos:start="2748:27" pos:end="2748:27">!</operator><operator pos:start="2748:28" pos:end="2748:28">!</operator><call pos:start="2748:29" pos:end="2748:79"><name pos:start="2748:29" pos:end="2748:38">av_stristr</name><argument_list pos:start="2748:39" pos:end="2748:79">(<argument pos:start="2748:40" pos:end="2748:48"><expr pos:start="2748:40" pos:end="2748:48"><name pos:start="2748:40" pos:end="2748:48"><name pos:start="2748:40" pos:end="2748:40">c</name><operator pos:start="2748:41" pos:end="2748:42">-&gt;</operator><name pos:start="2748:43" pos:end="2748:48">buffer</name></name></expr></argument>, <argument pos:start="2748:51" pos:end="2748:78"><expr pos:start="2748:51" pos:end="2748:78"><literal type="string" pos:start="2748:51" pos:end="2748:78">"Transfer-Encoding: chunked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="2749:5" pos:end="2749:13">return <expr pos:start="2749:12" pos:end="2749:12"><literal type="number" pos:start="2749:12" pos:end="2749:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="2752:1" pos:end="2921:1"><type pos:start="2752:1" pos:end="2752:10"><specifier pos:start="2752:1" pos:end="2752:6">static</specifier> <name pos:start="2752:8" pos:end="2752:10">int</name></type> <name pos:start="2752:12" pos:end="2752:28">http_receive_data</name><parameter_list pos:start="2752:29" pos:end="2752:44">(<parameter pos:start="2752:30" pos:end="2752:43"><decl pos:start="2752:30" pos:end="2752:43"><type pos:start="2752:30" pos:end="2752:42"><name pos:start="2752:30" pos:end="2752:40">HTTPContext</name> <modifier pos:start="2752:42" pos:end="2752:42">*</modifier></type><name pos:start="2752:43" pos:end="2752:43">c</name></decl></parameter>)</parameter_list>
<block pos:start="2753:1" pos:end="2921:1">{<block_content pos:start="2754:5" pos:end="2920:14">
    <decl_stmt pos:start="2754:5" pos:end="2754:20"><decl pos:start="2754:5" pos:end="2754:19"><type pos:start="2754:5" pos:end="2754:17"><name pos:start="2754:5" pos:end="2754:15">HTTPContext</name> <modifier pos:start="2754:17" pos:end="2754:17">*</modifier></type><name pos:start="2754:18" pos:end="2754:19">c1</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2755:5" pos:end="2755:26"><decl pos:start="2755:5" pos:end="2755:11"><type pos:start="2755:5" pos:end="2755:7"><name pos:start="2755:5" pos:end="2755:7">int</name></type> <name pos:start="2755:9" pos:end="2755:11">len</name></decl>, <decl pos:start="2755:14" pos:end="2755:25"><type ref="prev" pos:start="2755:5" pos:end="2755:7"/><name pos:start="2755:14" pos:end="2755:21">loop_run</name> <init pos:start="2755:23" pos:end="2755:25">= <expr pos:start="2755:25" pos:end="2755:25"><literal type="number" pos:start="2755:25" pos:end="2755:25">0</literal></expr></init></decl>;</decl_stmt>

    <while pos:start="2757:5" pos:end="2787:5">while <condition pos:start="2757:11" pos:end="2758:41">(<expr pos:start="2757:12" pos:end="2758:40"><name pos:start="2757:12" pos:end="2757:30"><name pos:start="2757:12" pos:end="2757:12">c</name><operator pos:start="2757:13" pos:end="2757:14">-&gt;</operator><name pos:start="2757:15" pos:end="2757:30">chunked_encoding</name></name> <operator pos:start="2757:32" pos:end="2757:33">&amp;&amp;</operator> <operator pos:start="2757:35" pos:end="2757:35">!</operator><name pos:start="2757:36" pos:end="2757:48"><name pos:start="2757:36" pos:end="2757:36">c</name><operator pos:start="2757:37" pos:end="2757:38">-&gt;</operator><name pos:start="2757:39" pos:end="2757:48">chunk_size</name></name> <operator pos:start="2757:50" pos:end="2757:51">&amp;&amp;</operator>
           <name pos:start="2758:12" pos:end="2758:24"><name pos:start="2758:12" pos:end="2758:12">c</name><operator pos:start="2758:13" pos:end="2758:14">-&gt;</operator><name pos:start="2758:15" pos:end="2758:24">buffer_end</name></name> <operator pos:start="2758:26" pos:end="2758:26">&gt;</operator> <name pos:start="2758:28" pos:end="2758:40"><name pos:start="2758:28" pos:end="2758:28">c</name><operator pos:start="2758:29" pos:end="2758:30">-&gt;</operator><name pos:start="2758:31" pos:end="2758:40">buffer_ptr</name></name></expr>)</condition> <block pos:start="2758:43" pos:end="2787:5">{<block_content pos:start="2760:9" pos:end="2786:28">
        <comment type="block" pos:start="2759:9" pos:end="2759:43">/* read chunk header, if present */</comment>
        <expr_stmt pos:start="2760:9" pos:end="2760:47"><expr pos:start="2760:9" pos:end="2760:46"><name pos:start="2760:9" pos:end="2760:11">len</name> <operator pos:start="2760:13" pos:end="2760:13">=</operator> <call pos:start="2760:15" pos:end="2760:46"><name pos:start="2760:15" pos:end="2760:18">recv</name><argument_list pos:start="2760:19" pos:end="2760:46">(<argument pos:start="2760:20" pos:end="2760:24"><expr pos:start="2760:20" pos:end="2760:24"><name pos:start="2760:20" pos:end="2760:24"><name pos:start="2760:20" pos:end="2760:20">c</name><operator pos:start="2760:21" pos:end="2760:22">-&gt;</operator><name pos:start="2760:23" pos:end="2760:24">fd</name></name></expr></argument>, <argument pos:start="2760:27" pos:end="2760:39"><expr pos:start="2760:27" pos:end="2760:39"><name pos:start="2760:27" pos:end="2760:39"><name pos:start="2760:27" pos:end="2760:27">c</name><operator pos:start="2760:28" pos:end="2760:29">-&gt;</operator><name pos:start="2760:30" pos:end="2760:39">buffer_ptr</name></name></expr></argument>, <argument pos:start="2760:42" pos:end="2760:42"><expr pos:start="2760:42" pos:end="2760:42"><literal type="number" pos:start="2760:42" pos:end="2760:42">1</literal></expr></argument>, <argument pos:start="2760:45" pos:end="2760:45"><expr pos:start="2760:45" pos:end="2760:45"><literal type="number" pos:start="2760:45" pos:end="2760:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2762:9" pos:end="2786:28"><if pos:start="2762:9" pos:end="2769:9">if <condition pos:start="2762:12" pos:end="2762:20">(<expr pos:start="2762:13" pos:end="2762:19"><name pos:start="2762:13" pos:end="2762:15">len</name> <operator pos:start="2762:17" pos:end="2762:17">&lt;</operator> <literal type="number" pos:start="2762:19" pos:end="2762:19">0</literal></expr>)</condition> <block pos:start="2762:22" pos:end="2769:9">{<block_content pos:start="2763:13" pos:end="2768:21">
            <if_stmt pos:start="2763:13" pos:end="2767:27"><if pos:start="2763:13" pos:end="2767:27">if <condition pos:start="2763:16" pos:end="2763:50">(<expr pos:start="2763:17" pos:end="2763:48"><call pos:start="2763:17" pos:end="2763:29"><name pos:start="2763:17" pos:end="2763:27">ff_neterrno</name><argument_list pos:start="2763:28" pos:end="2763:29">()</argument_list></call> <operator pos:start="2763:31" pos:end="2763:32">!=</operator> <call pos:start="2763:34" pos:end="2763:48"><name pos:start="2763:34" pos:end="2763:40">AVERROR</name><argument_list pos:start="2763:41" pos:end="2763:48">(<argument pos:start="2763:42" pos:end="2763:47"><expr pos:start="2763:42" pos:end="2763:47"><name pos:start="2763:42" pos:end="2763:47">EAGAIN</name></expr></argument>)</argument_list></call></expr> )</condition><block pos:start="2763:51" pos:end="2767:27">{<block_content pos:start="2764:1" pos:end="2767:26">
<if_stmt pos:start="2764:1" pos:end="2767:26"><if pos:start="2764:1" pos:end="2767:26">if<condition pos:start="2764:3" pos:end="2765:48">(
                <expr pos:start="2765:17" pos:end="2765:47"><call pos:start="2765:17" pos:end="2765:29"><name pos:start="2765:17" pos:end="2765:27">ff_neterrno</name><argument_list pos:start="2765:28" pos:end="2765:29">()</argument_list></call> <operator pos:start="2765:31" pos:end="2765:32">!=</operator> <call pos:start="2765:34" pos:end="2765:47"><name pos:start="2765:34" pos:end="2765:40">AVERROR</name><argument_list pos:start="2765:41" pos:end="2765:47">(<argument pos:start="2765:42" pos:end="2765:46"><expr pos:start="2765:42" pos:end="2765:46"><name pos:start="2765:42" pos:end="2765:46">EINTR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2767:17" pos:end="2767:26"><block_content pos:start="2767:17" pos:end="2767:26">
                <comment type="block" pos:start="2766:17" pos:end="2766:46">/* error : close connection */</comment>
                <goto pos:start="2767:17" pos:end="2767:26">goto <name pos:start="2767:22" pos:end="2767:25">fail</name>;</goto></block_content></block></if></if_stmt></block_content>}</block></if></if_stmt>
            <return pos:start="2768:13" pos:end="2768:21">return <expr pos:start="2768:20" pos:end="2768:20"><literal type="number" pos:start="2768:20" pos:end="2768:20">0</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif" pos:start="2769:11" pos:end="2772:9">else if <condition pos:start="2769:19" pos:end="2769:28">(<expr pos:start="2769:20" pos:end="2769:27"><name pos:start="2769:20" pos:end="2769:22">len</name> <operator pos:start="2769:24" pos:end="2769:25">==</operator> <literal type="number" pos:start="2769:27" pos:end="2769:27">0</literal></expr>)</condition> <block pos:start="2769:30" pos:end="2772:9">{<block_content pos:start="2771:13" pos:end="2771:22">
            <comment type="block" pos:start="2770:13" pos:end="2770:46">/* end of connection : close it */</comment>
            <goto pos:start="2771:13" pos:end="2771:22">goto <name pos:start="2771:18" pos:end="2771:21">fail</name>;</goto>
        </block_content>}</block></if> <if type="elseif" pos:start="2772:11" pos:end="2782:10">else if <condition pos:start="2772:19" pos:end="2772:51">(<expr pos:start="2772:20" pos:end="2772:49"><name pos:start="2772:20" pos:end="2772:32"><name pos:start="2772:20" pos:end="2772:20">c</name><operator pos:start="2772:21" pos:end="2772:22">-&gt;</operator><name pos:start="2772:23" pos:end="2772:32">buffer_ptr</name></name> <operator pos:start="2772:34" pos:end="2772:34">-</operator> <name pos:start="2772:36" pos:end="2772:44"><name pos:start="2772:36" pos:end="2772:36">c</name><operator pos:start="2772:37" pos:end="2772:38">-&gt;</operator><name pos:start="2772:39" pos:end="2772:44">buffer</name></name> <operator pos:start="2772:46" pos:end="2772:47">&gt;=</operator> <literal type="number" pos:start="2772:49" pos:end="2772:49">2</literal></expr> )</condition><block pos:start="2772:52" pos:end="2782:10">{<block_content pos:start="2773:1" pos:end="2782:9">
<if_stmt pos:start="2773:1" pos:end="2782:9"><if pos:start="2773:1" pos:end="2782:9">if<condition pos:start="2773:3" pos:end="2774:57">(
                   <expr pos:start="2774:20" pos:end="2774:56"><operator pos:start="2774:20" pos:end="2774:20">!</operator><call pos:start="2774:21" pos:end="2774:56"><name pos:start="2774:21" pos:end="2774:26">memcmp</name><argument_list pos:start="2774:27" pos:end="2774:56">(<argument pos:start="2774:28" pos:end="2774:44"><expr pos:start="2774:28" pos:end="2774:44"><name pos:start="2774:28" pos:end="2774:40"><name pos:start="2774:28" pos:end="2774:28">c</name><operator pos:start="2774:29" pos:end="2774:30">-&gt;</operator><name pos:start="2774:31" pos:end="2774:40">buffer_ptr</name></name> <operator pos:start="2774:42" pos:end="2774:42">-</operator> <literal type="number" pos:start="2774:44" pos:end="2774:44">1</literal></expr></argument>, <argument pos:start="2774:47" pos:end="2774:52"><expr pos:start="2774:47" pos:end="2774:52"><literal type="string" pos:start="2774:47" pos:end="2774:52">"\r\n"</literal></expr></argument>, <argument pos:start="2774:55" pos:end="2774:55"><expr pos:start="2774:55" pos:end="2774:55"><literal type="number" pos:start="2774:55" pos:end="2774:55">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2774:59" pos:end="2782:9">{<block_content pos:start="2775:13" pos:end="2781:18">
            <expr_stmt pos:start="2775:13" pos:end="2775:53"><expr pos:start="2775:13" pos:end="2775:52"><name pos:start="2775:13" pos:end="2775:25"><name pos:start="2775:13" pos:end="2775:13">c</name><operator pos:start="2775:14" pos:end="2775:15">-&gt;</operator><name pos:start="2775:16" pos:end="2775:25">chunk_size</name></name> <operator pos:start="2775:27" pos:end="2775:27">=</operator> <call pos:start="2775:29" pos:end="2775:52"><name pos:start="2775:29" pos:end="2775:34">strtol</name><argument_list pos:start="2775:35" pos:end="2775:52">(<argument pos:start="2775:36" pos:end="2775:44"><expr pos:start="2775:36" pos:end="2775:44"><name pos:start="2775:36" pos:end="2775:44"><name pos:start="2775:36" pos:end="2775:36">c</name><operator pos:start="2775:37" pos:end="2775:38">-&gt;</operator><name pos:start="2775:39" pos:end="2775:44">buffer</name></name></expr></argument>, <argument pos:start="2775:47" pos:end="2775:47"><expr pos:start="2775:47" pos:end="2775:47"><literal type="number" pos:start="2775:47" pos:end="2775:47">0</literal></expr></argument>, <argument pos:start="2775:50" pos:end="2775:51"><expr pos:start="2775:50" pos:end="2775:51"><literal type="number" pos:start="2775:50" pos:end="2775:51">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2776:13" pos:end="2779:13"><if pos:start="2776:13" pos:end="2779:13">if <condition pos:start="2776:16" pos:end="2776:35">(<expr pos:start="2776:17" pos:end="2776:34"><name pos:start="2776:17" pos:end="2776:29"><name pos:start="2776:17" pos:end="2776:17">c</name><operator pos:start="2776:18" pos:end="2776:19">-&gt;</operator><name pos:start="2776:20" pos:end="2776:29">chunk_size</name></name> <operator pos:start="2776:31" pos:end="2776:32">&lt;=</operator> <literal type="number" pos:start="2776:34" pos:end="2776:34">0</literal></expr>)</condition> <block pos:start="2776:37" pos:end="2779:13">{<block_content pos:start="2777:17" pos:end="2778:26"> <comment type="line" pos:start="2776:39" pos:end="2776:76">// end of stream or invalid chunk size</comment>
                <expr_stmt pos:start="2777:17" pos:end="2777:34"><expr pos:start="2777:17" pos:end="2777:33"><name pos:start="2777:17" pos:end="2777:29"><name pos:start="2777:17" pos:end="2777:17">c</name><operator pos:start="2777:18" pos:end="2777:19">-&gt;</operator><name pos:start="2777:20" pos:end="2777:29">chunk_size</name></name> <operator pos:start="2777:31" pos:end="2777:31">=</operator> <literal type="number" pos:start="2777:33" pos:end="2777:33">0</literal></expr>;</expr_stmt>
                <goto pos:start="2778:17" pos:end="2778:26">goto <name pos:start="2778:22" pos:end="2778:25">fail</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="2780:13" pos:end="2780:38"><expr pos:start="2780:13" pos:end="2780:37"><name pos:start="2780:13" pos:end="2780:25"><name pos:start="2780:13" pos:end="2780:13">c</name><operator pos:start="2780:14" pos:end="2780:15">-&gt;</operator><name pos:start="2780:16" pos:end="2780:25">buffer_ptr</name></name> <operator pos:start="2780:27" pos:end="2780:27">=</operator> <name pos:start="2780:29" pos:end="2780:37"><name pos:start="2780:29" pos:end="2780:29">c</name><operator pos:start="2780:30" pos:end="2780:31">-&gt;</operator><name pos:start="2780:32" pos:end="2780:37">buffer</name></name></expr>;</expr_stmt>
            <break pos:start="2781:13" pos:end="2781:18">break;</break>
        </block_content>}</block></if></if_stmt></block_content>}</block></if><if type="elseif" pos:start="2782:11" pos:end="2784:22">else if <condition pos:start="2782:19" pos:end="2782:35">(<expr pos:start="2782:20" pos:end="2782:34"><operator pos:start="2782:20" pos:end="2782:21">++</operator><name pos:start="2782:22" pos:end="2782:29">loop_run</name> <operator pos:start="2782:31" pos:end="2782:31">&gt;</operator> <literal type="number" pos:start="2782:33" pos:end="2782:34">10</literal></expr>)</condition><block type="pseudo" pos:start="2784:13" pos:end="2784:22"><block_content pos:start="2784:13" pos:end="2784:22">
            <comment type="block" pos:start="2783:13" pos:end="2783:40">/* no chunk header, abort */</comment>
            <goto pos:start="2784:13" pos:end="2784:22">goto <name pos:start="2784:18" pos:end="2784:21">fail</name>;</goto></block_content></block></if>
        <else pos:start="2785:9" pos:end="2786:28">else<block type="pseudo" pos:start="2786:13" pos:end="2786:28"><block_content pos:start="2786:13" pos:end="2786:28">
            <expr_stmt pos:start="2786:13" pos:end="2786:28"><expr pos:start="2786:13" pos:end="2786:27"><name pos:start="2786:13" pos:end="2786:25"><name pos:start="2786:13" pos:end="2786:13">c</name><operator pos:start="2786:14" pos:end="2786:15">-&gt;</operator><name pos:start="2786:16" pos:end="2786:25">buffer_ptr</name></name><operator pos:start="2786:26" pos:end="2786:27">++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></while>

    <if_stmt pos:start="2789:5" pos:end="2808:5"><if pos:start="2789:5" pos:end="2808:5">if <condition pos:start="2789:8" pos:end="2789:38">(<expr pos:start="2789:9" pos:end="2789:37"><name pos:start="2789:9" pos:end="2789:21"><name pos:start="2789:9" pos:end="2789:9">c</name><operator pos:start="2789:10" pos:end="2789:11">-&gt;</operator><name pos:start="2789:12" pos:end="2789:21">buffer_end</name></name> <operator pos:start="2789:23" pos:end="2789:23">&gt;</operator> <name pos:start="2789:25" pos:end="2789:37"><name pos:start="2789:25" pos:end="2789:25">c</name><operator pos:start="2789:26" pos:end="2789:27">-&gt;</operator><name pos:start="2789:28" pos:end="2789:37">buffer_ptr</name></name></expr>)</condition> <block pos:start="2789:40" pos:end="2808:5">{<block_content pos:start="2790:9" pos:end="2807:9">
        <expr_stmt pos:start="2790:9" pos:end="2791:75"><expr pos:start="2790:9" pos:end="2791:74"><name pos:start="2790:9" pos:end="2790:11">len</name> <operator pos:start="2790:13" pos:end="2790:13">=</operator> <call pos:start="2790:15" pos:end="2791:74"><name pos:start="2790:15" pos:end="2790:18">recv</name><argument_list pos:start="2790:19" pos:end="2791:74">(<argument pos:start="2790:20" pos:end="2790:24"><expr pos:start="2790:20" pos:end="2790:24"><name pos:start="2790:20" pos:end="2790:24"><name pos:start="2790:20" pos:end="2790:20">c</name><operator pos:start="2790:21" pos:end="2790:22">-&gt;</operator><name pos:start="2790:23" pos:end="2790:24">fd</name></name></expr></argument>, <argument pos:start="2790:27" pos:end="2790:39"><expr pos:start="2790:27" pos:end="2790:39"><name pos:start="2790:27" pos:end="2790:39"><name pos:start="2790:27" pos:end="2790:27">c</name><operator pos:start="2790:28" pos:end="2790:29">-&gt;</operator><name pos:start="2790:30" pos:end="2790:39">buffer_ptr</name></name></expr></argument>,
                   <argument pos:start="2791:20" pos:end="2791:70"><expr pos:start="2791:20" pos:end="2791:70"><call pos:start="2791:20" pos:end="2791:70"><name pos:start="2791:20" pos:end="2791:24">FFMIN</name><argument_list pos:start="2791:25" pos:end="2791:70">(<argument pos:start="2791:26" pos:end="2791:38"><expr pos:start="2791:26" pos:end="2791:38"><name pos:start="2791:26" pos:end="2791:38"><name pos:start="2791:26" pos:end="2791:26">c</name><operator pos:start="2791:27" pos:end="2791:28">-&gt;</operator><name pos:start="2791:29" pos:end="2791:38">chunk_size</name></name></expr></argument>, <argument pos:start="2791:41" pos:end="2791:69"><expr pos:start="2791:41" pos:end="2791:69"><name pos:start="2791:41" pos:end="2791:53"><name pos:start="2791:41" pos:end="2791:41">c</name><operator pos:start="2791:42" pos:end="2791:43">-&gt;</operator><name pos:start="2791:44" pos:end="2791:53">buffer_end</name></name> <operator pos:start="2791:55" pos:end="2791:55">-</operator> <name pos:start="2791:57" pos:end="2791:69"><name pos:start="2791:57" pos:end="2791:57">c</name><operator pos:start="2791:58" pos:end="2791:59">-&gt;</operator><name pos:start="2791:60" pos:end="2791:69">buffer_ptr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2791:73" pos:end="2791:73"><expr pos:start="2791:73" pos:end="2791:73"><literal type="number" pos:start="2791:73" pos:end="2791:73">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2792:9" pos:end="2807:9"><if pos:start="2792:9" pos:end="2798:9">if <condition pos:start="2792:12" pos:end="2792:20">(<expr pos:start="2792:13" pos:end="2792:19"><name pos:start="2792:13" pos:end="2792:15">len</name> <operator pos:start="2792:17" pos:end="2792:17">&lt;</operator> <literal type="number" pos:start="2792:19" pos:end="2792:19">0</literal></expr>)</condition> <block pos:start="2792:22" pos:end="2798:9">{<block_content pos:start="2793:13" pos:end="2797:27">
            <if_stmt pos:start="2793:13" pos:end="2797:27"><if pos:start="2793:13" pos:end="2797:27">if <condition pos:start="2793:16" pos:end="2793:50">(<expr pos:start="2793:17" pos:end="2793:48"><call pos:start="2793:17" pos:end="2793:29"><name pos:start="2793:17" pos:end="2793:27">ff_neterrno</name><argument_list pos:start="2793:28" pos:end="2793:29">()</argument_list></call> <operator pos:start="2793:31" pos:end="2793:32">!=</operator> <call pos:start="2793:34" pos:end="2793:48"><name pos:start="2793:34" pos:end="2793:40">AVERROR</name><argument_list pos:start="2793:41" pos:end="2793:48">(<argument pos:start="2793:42" pos:end="2793:47"><expr pos:start="2793:42" pos:end="2793:47"><name pos:start="2793:42" pos:end="2793:47">EAGAIN</name></expr></argument>)</argument_list></call></expr> )</condition><block pos:start="2793:51" pos:end="2797:27">{<block_content pos:start="2794:1" pos:end="2797:26">
<if_stmt pos:start="2794:1" pos:end="2797:26"><if pos:start="2794:1" pos:end="2797:26">if<condition pos:start="2794:3" pos:end="2795:48">(
                <expr pos:start="2795:17" pos:end="2795:47"><call pos:start="2795:17" pos:end="2795:29"><name pos:start="2795:17" pos:end="2795:27">ff_neterrno</name><argument_list pos:start="2795:28" pos:end="2795:29">()</argument_list></call> <operator pos:start="2795:31" pos:end="2795:32">!=</operator> <call pos:start="2795:34" pos:end="2795:47"><name pos:start="2795:34" pos:end="2795:40">AVERROR</name><argument_list pos:start="2795:41" pos:end="2795:47">(<argument pos:start="2795:42" pos:end="2795:46"><expr pos:start="2795:42" pos:end="2795:46"><name pos:start="2795:42" pos:end="2795:46">EINTR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2797:17" pos:end="2797:26"><block_content pos:start="2797:17" pos:end="2797:26">
                <comment type="block" pos:start="2796:17" pos:end="2796:46">/* error : close connection */</comment>
                <goto pos:start="2797:17" pos:end="2797:26">goto <name pos:start="2797:22" pos:end="2797:25">fail</name>;</goto></block_content></block></if></if_stmt></block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="2798:11" pos:end="2800:22">else if <condition pos:start="2798:19" pos:end="2798:28">(<expr pos:start="2798:20" pos:end="2798:27"><name pos:start="2798:20" pos:end="2798:22">len</name> <operator pos:start="2798:24" pos:end="2798:25">==</operator> <literal type="number" pos:start="2798:27" pos:end="2798:27">0</literal></expr>)</condition><block type="pseudo" pos:start="2800:13" pos:end="2800:22"><block_content pos:start="2800:13" pos:end="2800:22">
            <comment type="block" pos:start="2799:13" pos:end="2799:46">/* end of connection : close it */</comment>
            <goto pos:start="2800:13" pos:end="2800:22">goto <name pos:start="2800:18" pos:end="2800:21">fail</name>;</goto></block_content></block></if>
        <else pos:start="2801:9" pos:end="2807:9">else <block pos:start="2801:14" pos:end="2807:9">{<block_content pos:start="2802:13" pos:end="2806:57">
            <expr_stmt pos:start="2802:13" pos:end="2802:45"><expr pos:start="2802:13" pos:end="2802:44"><call pos:start="2802:13" pos:end="2802:44"><name pos:start="2802:13" pos:end="2802:22">av_assert0</name><argument_list pos:start="2802:23" pos:end="2802:44">(<argument pos:start="2802:24" pos:end="2802:43"><expr pos:start="2802:24" pos:end="2802:43"><name pos:start="2802:24" pos:end="2802:26">len</name> <operator pos:start="2802:28" pos:end="2802:29">&lt;=</operator> <name pos:start="2802:31" pos:end="2802:43"><name pos:start="2802:31" pos:end="2802:31">c</name><operator pos:start="2802:32" pos:end="2802:33">-&gt;</operator><name pos:start="2802:34" pos:end="2802:43">chunk_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2803:13" pos:end="2803:33"><expr pos:start="2803:13" pos:end="2803:32"><name pos:start="2803:13" pos:end="2803:25"><name pos:start="2803:13" pos:end="2803:13">c</name><operator pos:start="2803:14" pos:end="2803:15">-&gt;</operator><name pos:start="2803:16" pos:end="2803:25">chunk_size</name></name> <operator pos:start="2803:27" pos:end="2803:28">-=</operator> <name pos:start="2803:30" pos:end="2803:32">len</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2804:13" pos:end="2804:33"><expr pos:start="2804:13" pos:end="2804:32"><name pos:start="2804:13" pos:end="2804:25"><name pos:start="2804:13" pos:end="2804:13">c</name><operator pos:start="2804:14" pos:end="2804:15">-&gt;</operator><name pos:start="2804:16" pos:end="2804:25">buffer_ptr</name></name> <operator pos:start="2804:27" pos:end="2804:28">+=</operator> <name pos:start="2804:30" pos:end="2804:32">len</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2805:13" pos:end="2805:33"><expr pos:start="2805:13" pos:end="2805:32"><name pos:start="2805:13" pos:end="2805:25"><name pos:start="2805:13" pos:end="2805:13">c</name><operator pos:start="2805:14" pos:end="2805:15">-&gt;</operator><name pos:start="2805:16" pos:end="2805:25">data_count</name></name> <operator pos:start="2805:27" pos:end="2805:28">+=</operator> <name pos:start="2805:30" pos:end="2805:32">len</name></expr>;</expr_stmt>
            <expr_stmt pos:start="2806:13" pos:end="2806:57"><expr pos:start="2806:13" pos:end="2806:56"><call pos:start="2806:13" pos:end="2806:56"><name pos:start="2806:13" pos:end="2806:27">update_datarate</name><argument_list pos:start="2806:28" pos:end="2806:56">(<argument pos:start="2806:29" pos:end="2806:40"><expr pos:start="2806:29" pos:end="2806:40"><operator pos:start="2806:29" pos:end="2806:29">&amp;</operator><name pos:start="2806:30" pos:end="2806:40"><name pos:start="2806:30" pos:end="2806:30">c</name><operator pos:start="2806:31" pos:end="2806:32">-&gt;</operator><name pos:start="2806:33" pos:end="2806:40">datarate</name></name></expr></argument>, <argument pos:start="2806:43" pos:end="2806:55"><expr pos:start="2806:43" pos:end="2806:55"><name pos:start="2806:43" pos:end="2806:55"><name pos:start="2806:43" pos:end="2806:43">c</name><operator pos:start="2806:44" pos:end="2806:45">-&gt;</operator><name pos:start="2806:46" pos:end="2806:55">data_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="2810:5" pos:end="2817:6"><if pos:start="2810:5" pos:end="2817:6">if <condition pos:start="2810:8" pos:end="2810:40">(<expr pos:start="2810:9" pos:end="2810:38"><name pos:start="2810:9" pos:end="2810:21"><name pos:start="2810:9" pos:end="2810:9">c</name><operator pos:start="2810:10" pos:end="2810:11">-&gt;</operator><name pos:start="2810:12" pos:end="2810:21">buffer_ptr</name></name> <operator pos:start="2810:23" pos:end="2810:23">-</operator> <name pos:start="2810:25" pos:end="2810:33"><name pos:start="2810:25" pos:end="2810:25">c</name><operator pos:start="2810:26" pos:end="2810:27">-&gt;</operator><name pos:start="2810:28" pos:end="2810:33">buffer</name></name> <operator pos:start="2810:35" pos:end="2810:36">&gt;=</operator> <literal type="number" pos:start="2810:38" pos:end="2810:38">2</literal></expr> )</condition><block pos:start="2810:41" pos:end="2817:6">{<block_content pos:start="2811:1" pos:end="2817:5">
<if_stmt pos:start="2811:1" pos:end="2817:5"><if pos:start="2811:1" pos:end="2817:5">if<condition pos:start="2811:3" pos:end="2811:36">( <expr pos:start="2811:5" pos:end="2811:35"><name pos:start="2811:5" pos:end="2811:17"><name pos:start="2811:5" pos:end="2811:5">c</name><operator pos:start="2811:6" pos:end="2811:7">-&gt;</operator><name pos:start="2811:8" pos:end="2811:17">data_count</name></name> <operator pos:start="2811:19" pos:end="2811:19">&gt;</operator> <name pos:start="2811:21" pos:end="2811:35">FFM_PACKET_SIZE</name></expr>)</condition> <block pos:start="2811:38" pos:end="2817:5">{<block_content pos:start="2812:9" pos:end="2816:9">
        <if_stmt pos:start="2812:9" pos:end="2816:9"><if pos:start="2812:9" pos:end="2816:9">if <condition pos:start="2812:12" pos:end="2813:32">(<expr pos:start="2812:13" pos:end="2813:31"><name pos:start="2812:13" pos:end="2812:24"><name pos:start="2812:13" pos:end="2812:13">c</name><operator pos:start="2812:14" pos:end="2812:15">-&gt;</operator><name pos:start="2812:16" pos:end="2812:21">buffer</name><index pos:start="2812:22" pos:end="2812:24">[<expr pos:start="2812:23" pos:end="2812:23"><literal type="number" pos:start="2812:23" pos:end="2812:23">0</literal></expr>]</index></name> <operator pos:start="2812:26" pos:end="2812:27">!=</operator> <literal type="char" pos:start="2812:29" pos:end="2812:31">'f'</literal> <operator pos:start="2812:33" pos:end="2812:34">||</operator>
            <name pos:start="2813:13" pos:end="2813:24"><name pos:start="2813:13" pos:end="2813:13">c</name><operator pos:start="2813:14" pos:end="2813:15">-&gt;</operator><name pos:start="2813:16" pos:end="2813:21">buffer</name><index pos:start="2813:22" pos:end="2813:24">[<expr pos:start="2813:23" pos:end="2813:23"><literal type="number" pos:start="2813:23" pos:end="2813:23">1</literal></expr>]</index></name> <operator pos:start="2813:26" pos:end="2813:27">!=</operator> <literal type="char" pos:start="2813:29" pos:end="2813:31">'m'</literal></expr>)</condition> <block pos:start="2813:34" pos:end="2816:9">{<block_content pos:start="2814:13" pos:end="2815:22">
            <expr_stmt pos:start="2814:13" pos:end="2814:81"><expr pos:start="2814:13" pos:end="2814:80"><call pos:start="2814:13" pos:end="2814:80"><name pos:start="2814:13" pos:end="2814:20">http_log</name><argument_list pos:start="2814:21" pos:end="2814:80">(<argument pos:start="2814:22" pos:end="2814:79"><expr pos:start="2814:22" pos:end="2814:79"><literal type="string" pos:start="2814:22" pos:end="2814:79">"Feed stream has become desynchronized -- disconnecting\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto pos:start="2815:13" pos:end="2815:22">goto <name pos:start="2815:18" pos:end="2815:21">fail</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt>

    <if_stmt pos:start="2819:5" pos:end="2907:5"><if pos:start="2819:5" pos:end="2907:5">if <condition pos:start="2819:8" pos:end="2819:39">(<expr pos:start="2819:9" pos:end="2819:38"><name pos:start="2819:9" pos:end="2819:21"><name pos:start="2819:9" pos:end="2819:9">c</name><operator pos:start="2819:10" pos:end="2819:11">-&gt;</operator><name pos:start="2819:12" pos:end="2819:21">buffer_ptr</name></name> <operator pos:start="2819:23" pos:end="2819:24">&gt;=</operator> <name pos:start="2819:26" pos:end="2819:38"><name pos:start="2819:26" pos:end="2819:26">c</name><operator pos:start="2819:27" pos:end="2819:28">-&gt;</operator><name pos:start="2819:29" pos:end="2819:38">buffer_end</name></name></expr>)</condition> <block pos:start="2819:41" pos:end="2907:5">{<block_content pos:start="2820:9" pos:end="2906:34">
        <decl_stmt pos:start="2820:9" pos:end="2820:41"><decl pos:start="2820:9" pos:end="2820:40"><type pos:start="2820:9" pos:end="2820:24"><name pos:start="2820:9" pos:end="2820:22">FFServerStream</name> <modifier pos:start="2820:24" pos:end="2820:24">*</modifier></type><name pos:start="2820:25" pos:end="2820:28">feed</name> <init pos:start="2820:30" pos:end="2820:40">= <expr pos:start="2820:32" pos:end="2820:40"><name pos:start="2820:32" pos:end="2820:40"><name pos:start="2820:32" pos:end="2820:32">c</name><operator pos:start="2820:33" pos:end="2820:34">-&gt;</operator><name pos:start="2820:35" pos:end="2820:40">stream</name></name></expr></init></decl>;</decl_stmt>
        <comment type="block" pos:start="2821:9" pos:end="2822:23">/* a packet has been received : write it in the store, except
         * if header */</comment>
        <if_stmt pos:start="2823:9" pos:end="2905:9"><if pos:start="2823:9" pos:end="2859:9">if <condition pos:start="2823:12" pos:end="2823:44">(<expr pos:start="2823:13" pos:end="2823:43"><name pos:start="2823:13" pos:end="2823:25"><name pos:start="2823:13" pos:end="2823:13">c</name><operator pos:start="2823:14" pos:end="2823:15">-&gt;</operator><name pos:start="2823:16" pos:end="2823:25">data_count</name></name> <operator pos:start="2823:27" pos:end="2823:27">&gt;</operator> <name pos:start="2823:29" pos:end="2823:43">FFM_PACKET_SIZE</name></expr>)</condition> <block pos:start="2823:46" pos:end="2859:9">{<block_content pos:start="2826:13" pos:end="2858:13">
            <comment type="block" pos:start="2824:13" pos:end="2825:44">/* XXX: use llseek or url_seek
             * XXX: Should probably fail? */</comment>
            <if_stmt pos:start="2826:13" pos:end="2827:79"><if pos:start="2826:13" pos:end="2827:79">if <condition pos:start="2826:16" pos:end="2826:74">(<expr pos:start="2826:17" pos:end="2826:73"><call pos:start="2826:17" pos:end="2826:67"><name pos:start="2826:17" pos:end="2826:21">lseek</name><argument_list pos:start="2826:22" pos:end="2826:67">(<argument pos:start="2826:23" pos:end="2826:32"><expr pos:start="2826:23" pos:end="2826:32"><name pos:start="2826:23" pos:end="2826:32"><name pos:start="2826:23" pos:end="2826:23">c</name><operator pos:start="2826:24" pos:end="2826:25">-&gt;</operator><name pos:start="2826:26" pos:end="2826:32">feed_fd</name></name></expr></argument>, <argument pos:start="2826:35" pos:end="2826:56"><expr pos:start="2826:35" pos:end="2826:56"><name pos:start="2826:35" pos:end="2826:56"><name pos:start="2826:35" pos:end="2826:38">feed</name><operator pos:start="2826:39" pos:end="2826:40">-&gt;</operator><name pos:start="2826:41" pos:end="2826:56">feed_write_index</name></name></expr></argument>, <argument pos:start="2826:59" pos:end="2826:66"><expr pos:start="2826:59" pos:end="2826:66"><name pos:start="2826:59" pos:end="2826:66">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="2826:69" pos:end="2826:70">==</operator> <operator pos:start="2826:72" pos:end="2826:72">-</operator><literal type="number" pos:start="2826:73" pos:end="2826:73">1</literal></expr>)</condition><block type="pseudo" pos:start="2827:17" pos:end="2827:79"><block_content pos:start="2827:17" pos:end="2827:79">
                <expr_stmt pos:start="2827:17" pos:end="2827:79"><expr pos:start="2827:17" pos:end="2827:78"><call pos:start="2827:17" pos:end="2827:78"><name pos:start="2827:17" pos:end="2827:24">http_log</name><argument_list pos:start="2827:25" pos:end="2827:78">(<argument pos:start="2827:26" pos:end="2827:53"><expr pos:start="2827:26" pos:end="2827:53"><literal type="string" pos:start="2827:26" pos:end="2827:36">"Seek to %"</literal><name pos:start="2827:37" pos:end="2827:42">PRId64</name><literal type="string" pos:start="2827:43" pos:end="2827:53">" failed\n"</literal></expr></argument>, <argument pos:start="2827:56" pos:end="2827:77"><expr pos:start="2827:56" pos:end="2827:77"><name pos:start="2827:56" pos:end="2827:77"><name pos:start="2827:56" pos:end="2827:59">feed</name><operator pos:start="2827:60" pos:end="2827:61">-&gt;</operator><name pos:start="2827:62" pos:end="2827:77">feed_write_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="2829:13" pos:end="2832:13"><if pos:start="2829:13" pos:end="2832:13">if <condition pos:start="2829:16" pos:end="2829:66">(<expr pos:start="2829:17" pos:end="2829:65"><call pos:start="2829:17" pos:end="2829:61"><name pos:start="2829:17" pos:end="2829:21">write</name><argument_list pos:start="2829:22" pos:end="2829:61">(<argument pos:start="2829:23" pos:end="2829:32"><expr pos:start="2829:23" pos:end="2829:32"><name pos:start="2829:23" pos:end="2829:32"><name pos:start="2829:23" pos:end="2829:23">c</name><operator pos:start="2829:24" pos:end="2829:25">-&gt;</operator><name pos:start="2829:26" pos:end="2829:32">feed_fd</name></name></expr></argument>, <argument pos:start="2829:35" pos:end="2829:43"><expr pos:start="2829:35" pos:end="2829:43"><name pos:start="2829:35" pos:end="2829:43"><name pos:start="2829:35" pos:end="2829:35">c</name><operator pos:start="2829:36" pos:end="2829:37">-&gt;</operator><name pos:start="2829:38" pos:end="2829:43">buffer</name></name></expr></argument>, <argument pos:start="2829:46" pos:end="2829:60"><expr pos:start="2829:46" pos:end="2829:60"><name pos:start="2829:46" pos:end="2829:60">FFM_PACKET_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="2829:63" pos:end="2829:63">&lt;</operator> <literal type="number" pos:start="2829:65" pos:end="2829:65">0</literal></expr>)</condition> <block pos:start="2829:68" pos:end="2832:13">{<block_content pos:start="2830:17" pos:end="2831:26">
                <expr_stmt pos:start="2830:17" pos:end="2830:78"><expr pos:start="2830:17" pos:end="2830:77"><call pos:start="2830:17" pos:end="2830:77"><name pos:start="2830:17" pos:end="2830:24">http_log</name><argument_list pos:start="2830:25" pos:end="2830:77">(<argument pos:start="2830:26" pos:end="2830:59"><expr pos:start="2830:26" pos:end="2830:59"><literal type="string" pos:start="2830:26" pos:end="2830:59">"Error writing to feed file: %s\n"</literal></expr></argument>, <argument pos:start="2830:62" pos:end="2830:76"><expr pos:start="2830:62" pos:end="2830:76"><call pos:start="2830:62" pos:end="2830:76"><name pos:start="2830:62" pos:end="2830:69">strerror</name><argument_list pos:start="2830:70" pos:end="2830:76">(<argument pos:start="2830:71" pos:end="2830:75"><expr pos:start="2830:71" pos:end="2830:75"><name pos:start="2830:71" pos:end="2830:75">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="2831:17" pos:end="2831:26">goto <name pos:start="2831:22" pos:end="2831:25">fail</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="2834:13" pos:end="2834:54"><expr pos:start="2834:13" pos:end="2834:53"><name pos:start="2834:13" pos:end="2834:34"><name pos:start="2834:13" pos:end="2834:16">feed</name><operator pos:start="2834:17" pos:end="2834:18">-&gt;</operator><name pos:start="2834:19" pos:end="2834:34">feed_write_index</name></name> <operator pos:start="2834:36" pos:end="2834:37">+=</operator> <name pos:start="2834:39" pos:end="2834:53">FFM_PACKET_SIZE</name></expr>;</expr_stmt>
            <comment type="block" pos:start="2835:13" pos:end="2835:34">/* update file size */</comment>
            <if_stmt pos:start="2836:13" pos:end="2837:57"><if pos:start="2836:13" pos:end="2837:57">if <condition pos:start="2836:16" pos:end="2836:62">(<expr pos:start="2836:17" pos:end="2836:61"><name pos:start="2836:17" pos:end="2836:38"><name pos:start="2836:17" pos:end="2836:20">feed</name><operator pos:start="2836:21" pos:end="2836:22">-&gt;</operator><name pos:start="2836:23" pos:end="2836:38">feed_write_index</name></name> <operator pos:start="2836:40" pos:end="2836:40">&gt;</operator> <name pos:start="2836:42" pos:end="2836:61"><name pos:start="2836:42" pos:end="2836:42">c</name><operator pos:start="2836:43" pos:end="2836:44">-&gt;</operator><name pos:start="2836:45" pos:end="2836:50">stream</name><operator pos:start="2836:51" pos:end="2836:52">-&gt;</operator><name pos:start="2836:53" pos:end="2836:61">feed_size</name></name></expr>)</condition><block type="pseudo" pos:start="2837:17" pos:end="2837:57"><block_content pos:start="2837:17" pos:end="2837:57">
                <expr_stmt pos:start="2837:17" pos:end="2837:57"><expr pos:start="2837:17" pos:end="2837:56"><name pos:start="2837:17" pos:end="2837:31"><name pos:start="2837:17" pos:end="2837:20">feed</name><operator pos:start="2837:21" pos:end="2837:22">-&gt;</operator><name pos:start="2837:23" pos:end="2837:31">feed_size</name></name> <operator pos:start="2837:33" pos:end="2837:33">=</operator> <name pos:start="2837:35" pos:end="2837:56"><name pos:start="2837:35" pos:end="2837:38">feed</name><operator pos:start="2837:39" pos:end="2837:40">-&gt;</operator><name pos:start="2837:41" pos:end="2837:56">feed_write_index</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="block" pos:start="2839:13" pos:end="2839:61">/* handle wrap around if max file size reached */</comment>
            <if_stmt pos:start="2840:13" pos:end="2843:58"><if pos:start="2840:13" pos:end="2843:58">if <condition pos:start="2840:16" pos:end="2840:42">(<expr pos:start="2840:17" pos:end="2840:40"><name pos:start="2840:17" pos:end="2840:40"><name pos:start="2840:17" pos:end="2840:17">c</name><operator pos:start="2840:18" pos:end="2840:19">-&gt;</operator><name pos:start="2840:20" pos:end="2840:25">stream</name><operator pos:start="2840:26" pos:end="2840:27">-&gt;</operator><name pos:start="2840:28" pos:end="2840:40">feed_max_size</name></name></expr> )</condition><block pos:start="2840:43" pos:end="2843:58">{<block_content pos:start="2841:1" pos:end="2843:57">
<if_stmt pos:start="2841:1" pos:end="2843:57"><if pos:start="2841:1" pos:end="2843:57">if<condition pos:start="2841:3" pos:end="2842:67">(
                <expr pos:start="2842:17" pos:end="2842:66"><name pos:start="2842:17" pos:end="2842:38"><name pos:start="2842:17" pos:end="2842:20">feed</name><operator pos:start="2842:21" pos:end="2842:22">-&gt;</operator><name pos:start="2842:23" pos:end="2842:38">feed_write_index</name></name> <operator pos:start="2842:40" pos:end="2842:41">&gt;=</operator> <name pos:start="2842:43" pos:end="2842:66"><name pos:start="2842:43" pos:end="2842:43">c</name><operator pos:start="2842:44" pos:end="2842:45">-&gt;</operator><name pos:start="2842:46" pos:end="2842:51">stream</name><operator pos:start="2842:52" pos:end="2842:53">-&gt;</operator><name pos:start="2842:54" pos:end="2842:66">feed_max_size</name></name></expr>)</condition><block type="pseudo" pos:start="2843:17" pos:end="2843:57"><block_content pos:start="2843:17" pos:end="2843:57">
                <expr_stmt pos:start="2843:17" pos:end="2843:57"><expr pos:start="2843:17" pos:end="2843:56"><name pos:start="2843:17" pos:end="2843:38"><name pos:start="2843:17" pos:end="2843:20">feed</name><operator pos:start="2843:21" pos:end="2843:22">-&gt;</operator><name pos:start="2843:23" pos:end="2843:38">feed_write_index</name></name> <operator pos:start="2843:40" pos:end="2843:40">=</operator> <name pos:start="2843:42" pos:end="2843:56">FFM_PACKET_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="2845:13" pos:end="2845:29">/* write index */</comment>
            <if_stmt pos:start="2846:13" pos:end="2850:13"><if pos:start="2846:13" pos:end="2850:13">if <condition pos:start="2846:16" pos:end="2846:78">(<expr pos:start="2846:17" pos:end="2846:77"><call pos:start="2846:17" pos:end="2846:73"><name pos:start="2846:17" pos:end="2846:37">ffm_write_write_index</name><argument_list pos:start="2846:38" pos:end="2846:73">(<argument pos:start="2846:39" pos:end="2846:48"><expr pos:start="2846:39" pos:end="2846:48"><name pos:start="2846:39" pos:end="2846:48"><name pos:start="2846:39" pos:end="2846:39">c</name><operator pos:start="2846:40" pos:end="2846:41">-&gt;</operator><name pos:start="2846:42" pos:end="2846:48">feed_fd</name></name></expr></argument>, <argument pos:start="2846:51" pos:end="2846:72"><expr pos:start="2846:51" pos:end="2846:72"><name pos:start="2846:51" pos:end="2846:72"><name pos:start="2846:51" pos:end="2846:54">feed</name><operator pos:start="2846:55" pos:end="2846:56">-&gt;</operator><name pos:start="2846:57" pos:end="2846:72">feed_write_index</name></name></expr></argument>)</argument_list></call> <operator pos:start="2846:75" pos:end="2846:75">&lt;</operator> <literal type="number" pos:start="2846:77" pos:end="2846:77">0</literal></expr>)</condition> <block pos:start="2846:80" pos:end="2850:13">{<block_content pos:start="2847:17" pos:end="2849:26">
                <expr_stmt pos:start="2847:17" pos:end="2848:42"><expr pos:start="2847:17" pos:end="2848:41"><call pos:start="2847:17" pos:end="2848:41"><name pos:start="2847:17" pos:end="2847:24">http_log</name><argument_list pos:start="2847:25" pos:end="2848:41">(<argument pos:start="2847:26" pos:end="2847:65"><expr pos:start="2847:26" pos:end="2847:65"><literal type="string" pos:start="2847:26" pos:end="2847:65">"Error writing index to feed file: %s\n"</literal></expr></argument>,
                         <argument pos:start="2848:26" pos:end="2848:40"><expr pos:start="2848:26" pos:end="2848:40"><call pos:start="2848:26" pos:end="2848:40"><name pos:start="2848:26" pos:end="2848:33">strerror</name><argument_list pos:start="2848:34" pos:end="2848:40">(<argument pos:start="2848:35" pos:end="2848:39"><expr pos:start="2848:35" pos:end="2848:39"><name pos:start="2848:35" pos:end="2848:39">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="2849:17" pos:end="2849:26">goto <name pos:start="2849:22" pos:end="2849:25">fail</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="2852:13" pos:end="2852:49">/* wake up any waiting connections */</comment>
            <for pos:start="2853:13" pos:end="2858:13">for<control pos:start="2853:16" pos:end="2853:55">(<init pos:start="2853:17" pos:end="2853:36"><expr pos:start="2853:17" pos:end="2853:35"><name pos:start="2853:17" pos:end="2853:18">c1</name> <operator pos:start="2853:20" pos:end="2853:20">=</operator> <name pos:start="2853:22" pos:end="2853:35">first_http_ctx</name></expr>;</init> <condition pos:start="2853:38" pos:end="2853:40"><expr pos:start="2853:38" pos:end="2853:39"><name pos:start="2853:38" pos:end="2853:39">c1</name></expr>;</condition> <incr pos:start="2853:42" pos:end="2853:54"><expr pos:start="2853:42" pos:end="2853:54"><name pos:start="2853:42" pos:end="2853:43">c1</name> <operator pos:start="2853:45" pos:end="2853:45">=</operator> <name pos:start="2853:47" pos:end="2853:54"><name pos:start="2853:47" pos:end="2853:48">c1</name><operator pos:start="2853:49" pos:end="2853:50">-&gt;</operator><name pos:start="2853:51" pos:end="2853:54">next</name></name></expr></incr>)</control> <block pos:start="2853:57" pos:end="2858:13">{<block_content pos:start="2854:17" pos:end="2857:53">
                <if_stmt pos:start="2854:17" pos:end="2857:53"><if pos:start="2854:17" pos:end="2857:53">if <condition pos:start="2854:20" pos:end="2854:54">(<expr pos:start="2854:21" pos:end="2854:52"><name pos:start="2854:21" pos:end="2854:29"><name pos:start="2854:21" pos:end="2854:22">c1</name><operator pos:start="2854:23" pos:end="2854:24">-&gt;</operator><name pos:start="2854:25" pos:end="2854:29">state</name></name> <operator pos:start="2854:31" pos:end="2854:32">==</operator> <name pos:start="2854:34" pos:end="2854:52">HTTPSTATE_WAIT_FEED</name></expr> )</condition><block pos:start="2854:55" pos:end="2857:53">{<block_content pos:start="2855:1" pos:end="2857:52">
<if_stmt pos:start="2855:1" pos:end="2857:52"><if pos:start="2855:1" pos:end="2857:52">if<condition pos:start="2855:3" pos:end="2856:56">(
                    <expr pos:start="2856:21" pos:end="2856:55"><name pos:start="2856:21" pos:end="2856:36"><name pos:start="2856:21" pos:end="2856:22">c1</name><operator pos:start="2856:23" pos:end="2856:24">-&gt;</operator><name pos:start="2856:25" pos:end="2856:30">stream</name><operator pos:start="2856:31" pos:end="2856:32">-&gt;</operator><name pos:start="2856:33" pos:end="2856:36">feed</name></name> <operator pos:start="2856:38" pos:end="2856:39">==</operator> <name pos:start="2856:41" pos:end="2856:55"><name pos:start="2856:41" pos:end="2856:41">c</name><operator pos:start="2856:42" pos:end="2856:43">-&gt;</operator><name pos:start="2856:44" pos:end="2856:49">stream</name><operator pos:start="2856:50" pos:end="2856:51">-&gt;</operator><name pos:start="2856:52" pos:end="2856:55">feed</name></name></expr>)</condition><block type="pseudo" pos:start="2857:21" pos:end="2857:52"><block_content pos:start="2857:21" pos:end="2857:52">
                    <expr_stmt pos:start="2857:21" pos:end="2857:52"><expr pos:start="2857:21" pos:end="2857:51"><name pos:start="2857:21" pos:end="2857:29"><name pos:start="2857:21" pos:end="2857:22">c1</name><operator pos:start="2857:23" pos:end="2857:24">-&gt;</operator><name pos:start="2857:25" pos:end="2857:29">state</name></name> <operator pos:start="2857:31" pos:end="2857:31">=</operator> <name pos:start="2857:33" pos:end="2857:51">HTTPSTATE_SEND_DATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if> <else pos:start="2859:11" pos:end="2905:9">else <block pos:start="2859:16" pos:end="2905:9">{<block_content pos:start="2861:13" pos:end="2904:26">
            <comment type="block" pos:start="2860:13" pos:end="2860:73">/* We have a header in our hands that contains useful data */</comment>
            <decl_stmt pos:start="2861:13" pos:end="2861:58"><decl pos:start="2861:13" pos:end="2861:57"><type pos:start="2861:13" pos:end="2861:29"><name pos:start="2861:13" pos:end="2861:27">AVFormatContext</name> <modifier pos:start="2861:29" pos:end="2861:29">*</modifier></type><name pos:start="2861:30" pos:end="2861:30">s</name> <init pos:start="2861:32" pos:end="2861:57">= <expr pos:start="2861:34" pos:end="2861:57"><call pos:start="2861:34" pos:end="2861:57"><name pos:start="2861:34" pos:end="2861:55">avformat_alloc_context</name><argument_list pos:start="2861:56" pos:end="2861:57">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="2862:13" pos:end="2862:28"><decl pos:start="2862:13" pos:end="2862:27"><type pos:start="2862:13" pos:end="2862:25"><name pos:start="2862:13" pos:end="2862:23">AVIOContext</name> <modifier pos:start="2862:25" pos:end="2862:25">*</modifier></type><name pos:start="2862:26" pos:end="2862:27">pb</name></decl>;</decl_stmt>
            <decl_stmt pos:start="2863:13" pos:end="2863:34"><decl pos:start="2863:13" pos:end="2863:33"><type pos:start="2863:13" pos:end="2863:27"><name pos:start="2863:13" pos:end="2863:25">AVInputFormat</name> <modifier pos:start="2863:27" pos:end="2863:27">*</modifier></type><name pos:start="2863:28" pos:end="2863:33">fmt_in</name></decl>;</decl_stmt>
            <decl_stmt pos:start="2864:13" pos:end="2864:18"><decl pos:start="2864:13" pos:end="2864:17"><type pos:start="2864:13" pos:end="2864:15"><name pos:start="2864:13" pos:end="2864:15">int</name></type> <name pos:start="2864:17" pos:end="2864:17">i</name></decl>;</decl_stmt>

            <if_stmt pos:start="2866:13" pos:end="2867:26"><if pos:start="2866:13" pos:end="2867:26">if <condition pos:start="2866:16" pos:end="2866:19">(<expr pos:start="2866:17" pos:end="2866:18"><operator pos:start="2866:17" pos:end="2866:17">!</operator><name pos:start="2866:18" pos:end="2866:18">s</name></expr>)</condition><block type="pseudo" pos:start="2867:17" pos:end="2867:26"><block_content pos:start="2867:17" pos:end="2867:26">
                <goto pos:start="2867:17" pos:end="2867:26">goto <name pos:start="2867:22" pos:end="2867:25">fail</name>;</goto></block_content></block></if></if_stmt>

            <comment type="block" pos:start="2869:13" pos:end="2869:80">/* use feed output format name to find corresponding input format */</comment>
            <expr_stmt pos:start="2870:13" pos:end="2870:59"><expr pos:start="2870:13" pos:end="2870:58"><name pos:start="2870:13" pos:end="2870:18">fmt_in</name> <operator pos:start="2870:20" pos:end="2870:20">=</operator> <call pos:start="2870:22" pos:end="2870:58"><name pos:start="2870:22" pos:end="2870:41">av_find_input_format</name><argument_list pos:start="2870:42" pos:end="2870:58">(<argument pos:start="2870:43" pos:end="2870:57"><expr pos:start="2870:43" pos:end="2870:57"><name pos:start="2870:43" pos:end="2870:57"><name pos:start="2870:43" pos:end="2870:46">feed</name><operator pos:start="2870:47" pos:end="2870:48">-&gt;</operator><name pos:start="2870:49" pos:end="2870:51">fmt</name><operator pos:start="2870:52" pos:end="2870:53">-&gt;</operator><name pos:start="2870:54" pos:end="2870:57">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2871:13" pos:end="2872:26"><if pos:start="2871:13" pos:end="2872:26">if <condition pos:start="2871:16" pos:end="2871:24">(<expr pos:start="2871:17" pos:end="2871:23"><operator pos:start="2871:17" pos:end="2871:17">!</operator><name pos:start="2871:18" pos:end="2871:23">fmt_in</name></expr>)</condition><block type="pseudo" pos:start="2872:17" pos:end="2872:26"><block_content pos:start="2872:17" pos:end="2872:26">
                <goto pos:start="2872:17" pos:end="2872:26">goto <name pos:start="2872:22" pos:end="2872:25">fail</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2874:13" pos:end="2875:63"><expr pos:start="2874:13" pos:end="2875:62"><name pos:start="2874:13" pos:end="2874:14">pb</name> <operator pos:start="2874:16" pos:end="2874:16">=</operator> <call pos:start="2874:18" pos:end="2875:62"><name pos:start="2874:18" pos:end="2874:35">avio_alloc_context</name><argument_list pos:start="2874:36" pos:end="2875:62">(<argument pos:start="2874:37" pos:end="2874:45"><expr pos:start="2874:37" pos:end="2874:45"><name pos:start="2874:37" pos:end="2874:45"><name pos:start="2874:37" pos:end="2874:37">c</name><operator pos:start="2874:38" pos:end="2874:39">-&gt;</operator><name pos:start="2874:40" pos:end="2874:45">buffer</name></name></expr></argument>, <argument pos:start="2874:48" pos:end="2874:72"><expr pos:start="2874:48" pos:end="2874:72"><name pos:start="2874:48" pos:end="2874:60"><name pos:start="2874:48" pos:end="2874:48">c</name><operator pos:start="2874:49" pos:end="2874:50">-&gt;</operator><name pos:start="2874:51" pos:end="2874:60">buffer_end</name></name> <operator pos:start="2874:62" pos:end="2874:62">-</operator> <name pos:start="2874:64" pos:end="2874:72"><name pos:start="2874:64" pos:end="2874:64">c</name><operator pos:start="2874:65" pos:end="2874:66">-&gt;</operator><name pos:start="2874:67" pos:end="2874:72">buffer</name></name></expr></argument>,
                                    <argument pos:start="2875:37" pos:end="2875:37"><expr pos:start="2875:37" pos:end="2875:37"><literal type="number" pos:start="2875:37" pos:end="2875:37">0</literal></expr></argument>, <argument pos:start="2875:40" pos:end="2875:43"><expr pos:start="2875:40" pos:end="2875:43"><name pos:start="2875:40" pos:end="2875:43">NULL</name></expr></argument>, <argument pos:start="2875:46" pos:end="2875:49"><expr pos:start="2875:46" pos:end="2875:49"><name pos:start="2875:46" pos:end="2875:49">NULL</name></expr></argument>, <argument pos:start="2875:52" pos:end="2875:55"><expr pos:start="2875:52" pos:end="2875:55"><name pos:start="2875:52" pos:end="2875:55">NULL</name></expr></argument>, <argument pos:start="2875:58" pos:end="2875:61"><expr pos:start="2875:58" pos:end="2875:61"><name pos:start="2875:58" pos:end="2875:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="2876:13" pos:end="2877:26"><if pos:start="2876:13" pos:end="2877:26">if <condition pos:start="2876:16" pos:end="2876:20">(<expr pos:start="2876:17" pos:end="2876:19"><operator pos:start="2876:17" pos:end="2876:17">!</operator><name pos:start="2876:18" pos:end="2876:19">pb</name></expr>)</condition><block type="pseudo" pos:start="2877:17" pos:end="2877:26"><block_content pos:start="2877:17" pos:end="2877:26">
                <goto pos:start="2877:17" pos:end="2877:26">goto <name pos:start="2877:22" pos:end="2877:25">fail</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2879:13" pos:end="2879:29"><expr pos:start="2879:13" pos:end="2879:28"><name pos:start="2879:13" pos:end="2879:24"><name pos:start="2879:13" pos:end="2879:14">pb</name><operator pos:start="2879:15" pos:end="2879:16">-&gt;</operator><name pos:start="2879:17" pos:end="2879:24">seekable</name></name> <operator pos:start="2879:26" pos:end="2879:26">=</operator> <literal type="number" pos:start="2879:28" pos:end="2879:28">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="2881:13" pos:end="2881:23"><expr pos:start="2881:13" pos:end="2881:22"><name pos:start="2881:13" pos:end="2881:17"><name pos:start="2881:13" pos:end="2881:13">s</name><operator pos:start="2881:14" pos:end="2881:15">-&gt;</operator><name pos:start="2881:16" pos:end="2881:17">pb</name></name> <operator pos:start="2881:19" pos:end="2881:19">=</operator> <name pos:start="2881:21" pos:end="2881:22">pb</name></expr>;</expr_stmt>
            <if_stmt pos:start="2882:13" pos:end="2885:13"><if pos:start="2882:13" pos:end="2885:13">if <condition pos:start="2882:16" pos:end="2882:84">(<expr pos:start="2882:17" pos:end="2882:83"><call pos:start="2882:17" pos:end="2882:79"><name pos:start="2882:17" pos:end="2882:35">avformat_open_input</name><argument_list pos:start="2882:36" pos:end="2882:79">(<argument pos:start="2882:37" pos:end="2882:38"><expr pos:start="2882:37" pos:end="2882:38"><operator pos:start="2882:37" pos:end="2882:37">&amp;</operator><name pos:start="2882:38" pos:end="2882:38">s</name></expr></argument>, <argument pos:start="2882:41" pos:end="2882:64"><expr pos:start="2882:41" pos:end="2882:64"><name pos:start="2882:41" pos:end="2882:64"><name pos:start="2882:41" pos:end="2882:41">c</name><operator pos:start="2882:42" pos:end="2882:43">-&gt;</operator><name pos:start="2882:44" pos:end="2882:49">stream</name><operator pos:start="2882:50" pos:end="2882:51">-&gt;</operator><name pos:start="2882:52" pos:end="2882:64">feed_filename</name></name></expr></argument>, <argument pos:start="2882:67" pos:end="2882:72"><expr pos:start="2882:67" pos:end="2882:72"><name pos:start="2882:67" pos:end="2882:72">fmt_in</name></expr></argument>, <argument pos:start="2882:75" pos:end="2882:78"><expr pos:start="2882:75" pos:end="2882:78"><name pos:start="2882:75" pos:end="2882:78">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="2882:81" pos:end="2882:81">&lt;</operator> <literal type="number" pos:start="2882:83" pos:end="2882:83">0</literal></expr>)</condition> <block pos:start="2882:86" pos:end="2885:13">{<block_content pos:start="2883:17" pos:end="2884:26">
                <expr_stmt pos:start="2883:17" pos:end="2883:30"><expr pos:start="2883:17" pos:end="2883:29"><call pos:start="2883:17" pos:end="2883:29"><name pos:start="2883:17" pos:end="2883:24">av_freep</name><argument_list pos:start="2883:25" pos:end="2883:29">(<argument pos:start="2883:26" pos:end="2883:28"><expr pos:start="2883:26" pos:end="2883:28"><operator pos:start="2883:26" pos:end="2883:26">&amp;</operator><name pos:start="2883:27" pos:end="2883:28">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="2884:17" pos:end="2884:26">goto <name pos:start="2884:22" pos:end="2884:25">fail</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="2887:13" pos:end="2887:48">/* Now we have the actual streams */</comment>
            <if_stmt pos:start="2888:13" pos:end="2894:13"><if pos:start="2888:13" pos:end="2894:13">if <condition pos:start="2888:16" pos:end="2888:50">(<expr pos:start="2888:17" pos:end="2888:49"><name pos:start="2888:17" pos:end="2888:29"><name pos:start="2888:17" pos:end="2888:17">s</name><operator pos:start="2888:18" pos:end="2888:19">-&gt;</operator><name pos:start="2888:20" pos:end="2888:29">nb_streams</name></name> <operator pos:start="2888:31" pos:end="2888:32">!=</operator> <name pos:start="2888:34" pos:end="2888:49"><name pos:start="2888:34" pos:end="2888:37">feed</name><operator pos:start="2888:38" pos:end="2888:39">-&gt;</operator><name pos:start="2888:40" pos:end="2888:49">nb_streams</name></name></expr>)</condition> <block pos:start="2888:52" pos:end="2894:13">{<block_content pos:start="2889:17" pos:end="2893:26">
                <expr_stmt pos:start="2889:17" pos:end="2889:41"><expr pos:start="2889:17" pos:end="2889:40"><call pos:start="2889:17" pos:end="2889:40"><name pos:start="2889:17" pos:end="2889:36">avformat_close_input</name><argument_list pos:start="2889:37" pos:end="2889:40">(<argument pos:start="2889:38" pos:end="2889:39"><expr pos:start="2889:38" pos:end="2889:39"><operator pos:start="2889:38" pos:end="2889:38">&amp;</operator><name pos:start="2889:39" pos:end="2889:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2890:17" pos:end="2890:30"><expr pos:start="2890:17" pos:end="2890:29"><call pos:start="2890:17" pos:end="2890:29"><name pos:start="2890:17" pos:end="2890:24">av_freep</name><argument_list pos:start="2890:25" pos:end="2890:29">(<argument pos:start="2890:26" pos:end="2890:28"><expr pos:start="2890:26" pos:end="2890:28"><operator pos:start="2890:26" pos:end="2890:26">&amp;</operator><name pos:start="2890:27" pos:end="2890:28">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2891:17" pos:end="2892:51"><expr pos:start="2891:17" pos:end="2892:50"><call pos:start="2891:17" pos:end="2892:50"><name pos:start="2891:17" pos:end="2891:24">http_log</name><argument_list pos:start="2891:25" pos:end="2892:50">(<argument pos:start="2891:26" pos:end="2891:83"><expr pos:start="2891:26" pos:end="2891:83"><literal type="string" pos:start="2891:26" pos:end="2891:83">"Feed '%s' stream number does not match registered feed\n"</literal></expr></argument>,
                         <argument pos:start="2892:26" pos:end="2892:49"><expr pos:start="2892:26" pos:end="2892:49"><name pos:start="2892:26" pos:end="2892:49"><name pos:start="2892:26" pos:end="2892:26">c</name><operator pos:start="2892:27" pos:end="2892:28">-&gt;</operator><name pos:start="2892:29" pos:end="2892:34">stream</name><operator pos:start="2892:35" pos:end="2892:36">-&gt;</operator><name pos:start="2892:37" pos:end="2892:49">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="2893:17" pos:end="2893:26">goto <name pos:start="2893:22" pos:end="2893:25">fail</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <for pos:start="2896:13" pos:end="2901:13">for <control pos:start="2896:17" pos:end="2896:47">(<init pos:start="2896:18" pos:end="2896:23"><expr pos:start="2896:18" pos:end="2896:22"><name pos:start="2896:18" pos:end="2896:18">i</name> <operator pos:start="2896:20" pos:end="2896:20">=</operator> <literal type="number" pos:start="2896:22" pos:end="2896:22">0</literal></expr>;</init> <condition pos:start="2896:25" pos:end="2896:42"><expr pos:start="2896:25" pos:end="2896:41"><name pos:start="2896:25" pos:end="2896:25">i</name> <operator pos:start="2896:27" pos:end="2896:27">&lt;</operator> <name pos:start="2896:29" pos:end="2896:41"><name pos:start="2896:29" pos:end="2896:29">s</name><operator pos:start="2896:30" pos:end="2896:31">-&gt;</operator><name pos:start="2896:32" pos:end="2896:41">nb_streams</name></name></expr>;</condition> <incr pos:start="2896:44" pos:end="2896:46"><expr pos:start="2896:44" pos:end="2896:46"><name pos:start="2896:44" pos:end="2896:44">i</name><operator pos:start="2896:45" pos:end="2896:46">++</operator></expr></incr>)</control> <block pos:start="2896:49" pos:end="2901:13">{<block_content pos:start="2897:17" pos:end="2900:75">
                <decl_stmt pos:start="2897:17" pos:end="2897:56"><decl pos:start="2897:17" pos:end="2897:55"><type pos:start="2897:17" pos:end="2897:33"><name pos:start="2897:17" pos:end="2897:31">LayeredAVStream</name> <modifier pos:start="2897:33" pos:end="2897:33">*</modifier></type><name pos:start="2897:34" pos:end="2897:36">fst</name> <init pos:start="2897:38" pos:end="2897:55">= <expr pos:start="2897:40" pos:end="2897:55"><name pos:start="2897:40" pos:end="2897:55"><name pos:start="2897:40" pos:end="2897:43">feed</name><operator pos:start="2897:44" pos:end="2897:45">-&gt;</operator><name pos:start="2897:46" pos:end="2897:52">streams</name><index pos:start="2897:53" pos:end="2897:55">[<expr pos:start="2897:54" pos:end="2897:54"><name pos:start="2897:54" pos:end="2897:54">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt pos:start="2898:17" pos:end="2898:45"><decl pos:start="2898:17" pos:end="2898:44"><type pos:start="2898:17" pos:end="2898:26"><name pos:start="2898:17" pos:end="2898:24">AVStream</name> <modifier pos:start="2898:26" pos:end="2898:26">*</modifier></type><name pos:start="2898:27" pos:end="2898:28">st</name> <init pos:start="2898:30" pos:end="2898:44">= <expr pos:start="2898:32" pos:end="2898:44"><name pos:start="2898:32" pos:end="2898:44"><name pos:start="2898:32" pos:end="2898:32">s</name><operator pos:start="2898:33" pos:end="2898:34">-&gt;</operator><name pos:start="2898:35" pos:end="2898:41">streams</name><index pos:start="2898:42" pos:end="2898:44">[<expr pos:start="2898:43" pos:end="2898:43"><name pos:start="2898:43" pos:end="2898:43">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt pos:start="2899:17" pos:end="2899:72"><expr pos:start="2899:17" pos:end="2899:71"><call pos:start="2899:17" pos:end="2899:71"><name pos:start="2899:17" pos:end="2899:45">avcodec_parameters_to_context</name><argument_list pos:start="2899:46" pos:end="2899:71">(<argument pos:start="2899:47" pos:end="2899:56"><expr pos:start="2899:47" pos:end="2899:56"><name pos:start="2899:47" pos:end="2899:56"><name pos:start="2899:47" pos:end="2899:49">fst</name><operator pos:start="2899:50" pos:end="2899:51">-&gt;</operator><name pos:start="2899:52" pos:end="2899:56">codec</name></name></expr></argument>, <argument pos:start="2899:59" pos:end="2899:70"><expr pos:start="2899:59" pos:end="2899:70"><name pos:start="2899:59" pos:end="2899:70"><name pos:start="2899:59" pos:end="2899:60">st</name><operator pos:start="2899:61" pos:end="2899:62">-&gt;</operator><name pos:start="2899:63" pos:end="2899:70">codecpar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="2900:17" pos:end="2900:75"><expr pos:start="2900:17" pos:end="2900:74"><call pos:start="2900:17" pos:end="2900:74"><name pos:start="2900:17" pos:end="2900:47">avcodec_parameters_from_context</name><argument_list pos:start="2900:48" pos:end="2900:74">(<argument pos:start="2900:49" pos:end="2900:61"><expr pos:start="2900:49" pos:end="2900:61"><name pos:start="2900:49" pos:end="2900:61"><name pos:start="2900:49" pos:end="2900:51">fst</name><operator pos:start="2900:52" pos:end="2900:53">-&gt;</operator><name pos:start="2900:54" pos:end="2900:61">codecpar</name></name></expr></argument>, <argument pos:start="2900:64" pos:end="2900:73"><expr pos:start="2900:64" pos:end="2900:73"><name pos:start="2900:64" pos:end="2900:73"><name pos:start="2900:64" pos:end="2900:66">fst</name><operator pos:start="2900:67" pos:end="2900:68">-&gt;</operator><name pos:start="2900:69" pos:end="2900:73">codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <expr_stmt pos:start="2903:13" pos:end="2903:37"><expr pos:start="2903:13" pos:end="2903:36"><call pos:start="2903:13" pos:end="2903:36"><name pos:start="2903:13" pos:end="2903:32">avformat_close_input</name><argument_list pos:start="2903:33" pos:end="2903:36">(<argument pos:start="2903:34" pos:end="2903:35"><expr pos:start="2903:34" pos:end="2903:35"><operator pos:start="2903:34" pos:end="2903:34">&amp;</operator><name pos:start="2903:35" pos:end="2903:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="2904:13" pos:end="2904:26"><expr pos:start="2904:13" pos:end="2904:25"><call pos:start="2904:13" pos:end="2904:25"><name pos:start="2904:13" pos:end="2904:20">av_freep</name><argument_list pos:start="2904:21" pos:end="2904:25">(<argument pos:start="2904:22" pos:end="2904:24"><expr pos:start="2904:22" pos:end="2904:24"><operator pos:start="2904:22" pos:end="2904:22">&amp;</operator><name pos:start="2904:23" pos:end="2904:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt pos:start="2906:9" pos:end="2906:34"><expr pos:start="2906:9" pos:end="2906:33"><name pos:start="2906:9" pos:end="2906:21"><name pos:start="2906:9" pos:end="2906:9">c</name><operator pos:start="2906:10" pos:end="2906:11">-&gt;</operator><name pos:start="2906:12" pos:end="2906:21">buffer_ptr</name></name> <operator pos:start="2906:23" pos:end="2906:23">=</operator> <name pos:start="2906:25" pos:end="2906:33"><name pos:start="2906:25" pos:end="2906:25">c</name><operator pos:start="2906:26" pos:end="2906:27">-&gt;</operator><name pos:start="2906:28" pos:end="2906:33">buffer</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return pos:start="2909:5" pos:end="2909:13">return <expr pos:start="2909:12" pos:end="2909:12"><literal type="number" pos:start="2909:12" pos:end="2909:12">0</literal></expr>;</return>
 <label pos:start="2910:2" pos:end="2910:6"><name pos:start="2910:2" pos:end="2910:5">fail</name>:</label>
    <expr_stmt pos:start="2911:5" pos:end="2911:31"><expr pos:start="2911:5" pos:end="2911:30"><name pos:start="2911:5" pos:end="2911:26"><name pos:start="2911:5" pos:end="2911:5">c</name><operator pos:start="2911:6" pos:end="2911:7">-&gt;</operator><name pos:start="2911:8" pos:end="2911:13">stream</name><operator pos:start="2911:14" pos:end="2911:15">-&gt;</operator><name pos:start="2911:16" pos:end="2911:26">feed_opened</name></name> <operator pos:start="2911:28" pos:end="2911:28">=</operator> <literal type="number" pos:start="2911:30" pos:end="2911:30">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="2912:5" pos:end="2912:22"><expr pos:start="2912:5" pos:end="2912:21"><call pos:start="2912:5" pos:end="2912:21"><name pos:start="2912:5" pos:end="2912:9">close</name><argument_list pos:start="2912:10" pos:end="2912:21">(<argument pos:start="2912:11" pos:end="2912:20"><expr pos:start="2912:11" pos:end="2912:20"><name pos:start="2912:11" pos:end="2912:20"><name pos:start="2912:11" pos:end="2912:11">c</name><operator pos:start="2912:12" pos:end="2912:13">-&gt;</operator><name pos:start="2912:14" pos:end="2912:20">feed_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="2913:5" pos:end="2913:66">/* wake up any waiting connections to stop waiting for feed */</comment>
    <for pos:start="2914:5" pos:end="2919:5">for<control pos:start="2914:8" pos:end="2914:47">(<init pos:start="2914:9" pos:end="2914:28"><expr pos:start="2914:9" pos:end="2914:27"><name pos:start="2914:9" pos:end="2914:10">c1</name> <operator pos:start="2914:12" pos:end="2914:12">=</operator> <name pos:start="2914:14" pos:end="2914:27">first_http_ctx</name></expr>;</init> <condition pos:start="2914:30" pos:end="2914:32"><expr pos:start="2914:30" pos:end="2914:31"><name pos:start="2914:30" pos:end="2914:31">c1</name></expr>;</condition> <incr pos:start="2914:34" pos:end="2914:46"><expr pos:start="2914:34" pos:end="2914:46"><name pos:start="2914:34" pos:end="2914:35">c1</name> <operator pos:start="2914:37" pos:end="2914:37">=</operator> <name pos:start="2914:39" pos:end="2914:46"><name pos:start="2914:39" pos:end="2914:40">c1</name><operator pos:start="2914:41" pos:end="2914:42">-&gt;</operator><name pos:start="2914:43" pos:end="2914:46">next</name></name></expr></incr>)</control> <block pos:start="2914:49" pos:end="2919:5">{<block_content pos:start="2915:9" pos:end="2918:53">
        <if_stmt pos:start="2915:9" pos:end="2918:53"><if pos:start="2915:9" pos:end="2918:53">if <condition pos:start="2915:12" pos:end="2915:46">(<expr pos:start="2915:13" pos:end="2915:44"><name pos:start="2915:13" pos:end="2915:21"><name pos:start="2915:13" pos:end="2915:14">c1</name><operator pos:start="2915:15" pos:end="2915:16">-&gt;</operator><name pos:start="2915:17" pos:end="2915:21">state</name></name> <operator pos:start="2915:23" pos:end="2915:24">==</operator> <name pos:start="2915:26" pos:end="2915:44">HTTPSTATE_WAIT_FEED</name></expr> )</condition><block pos:start="2915:47" pos:end="2918:53">{<block_content pos:start="2916:1" pos:end="2918:52">
<if_stmt pos:start="2916:1" pos:end="2918:52"><if pos:start="2916:1" pos:end="2918:52">if<condition pos:start="2916:3" pos:end="2917:48">(
            <expr pos:start="2917:13" pos:end="2917:47"><name pos:start="2917:13" pos:end="2917:28"><name pos:start="2917:13" pos:end="2917:14">c1</name><operator pos:start="2917:15" pos:end="2917:16">-&gt;</operator><name pos:start="2917:17" pos:end="2917:22">stream</name><operator pos:start="2917:23" pos:end="2917:24">-&gt;</operator><name pos:start="2917:25" pos:end="2917:28">feed</name></name> <operator pos:start="2917:30" pos:end="2917:31">==</operator> <name pos:start="2917:33" pos:end="2917:47"><name pos:start="2917:33" pos:end="2917:33">c</name><operator pos:start="2917:34" pos:end="2917:35">-&gt;</operator><name pos:start="2917:36" pos:end="2917:41">stream</name><operator pos:start="2917:42" pos:end="2917:43">-&gt;</operator><name pos:start="2917:44" pos:end="2917:47">feed</name></name></expr>)</condition><block type="pseudo" pos:start="2918:13" pos:end="2918:52"><block_content pos:start="2918:13" pos:end="2918:52">
            <expr_stmt pos:start="2918:13" pos:end="2918:52"><expr pos:start="2918:13" pos:end="2918:51"><name pos:start="2918:13" pos:end="2918:21"><name pos:start="2918:13" pos:end="2918:14">c1</name><operator pos:start="2918:15" pos:end="2918:16">-&gt;</operator><name pos:start="2918:17" pos:end="2918:21">state</name></name> <operator pos:start="2918:23" pos:end="2918:23">=</operator> <name pos:start="2918:25" pos:end="2918:51">HTTPSTATE_SEND_DATA_TRAILER</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return pos:start="2920:5" pos:end="2920:14">return <expr pos:start="2920:12" pos:end="2920:13"><operator pos:start="2920:12" pos:end="2920:12">-</operator><literal type="number" pos:start="2920:13" pos:end="2920:13">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="2923:1" pos:end="2923:70">/********************************************************************/</comment>
<comment type="block" pos:start="2924:1" pos:end="2924:19">/* RTSP handling */</comment>

<function pos:start="2926:1" pos:end="2945:1"><type pos:start="2926:1" pos:end="2926:11"><specifier pos:start="2926:1" pos:end="2926:6">static</specifier> <name pos:start="2926:8" pos:end="2926:11">void</name></type> <name pos:start="2926:13" pos:end="2926:29">rtsp_reply_header</name><parameter_list pos:start="2926:30" pos:end="2926:79">(<parameter pos:start="2926:31" pos:end="2926:44"><decl pos:start="2926:31" pos:end="2926:44"><type pos:start="2926:31" pos:end="2926:44"><name pos:start="2926:31" pos:end="2926:41">HTTPContext</name> <modifier pos:start="2926:43" pos:end="2926:43">*</modifier></type><name pos:start="2926:44" pos:end="2926:44">c</name></decl></parameter>, <parameter pos:start="2926:47" pos:end="2926:78"><decl pos:start="2926:47" pos:end="2926:78"><type pos:start="2926:47" pos:end="2926:78"><name pos:start="2926:47" pos:end="2926:65"><name pos:start="2926:47" pos:end="2926:50">enum</name> <name pos:start="2926:52" pos:end="2926:65">RTSPStatusCode</name></name></type> <name pos:start="2926:67" pos:end="2926:78">error_number</name></decl></parameter>)</parameter_list>
<block pos:start="2927:1" pos:end="2945:1">{<block_content pos:start="2928:5" pos:end="2944:49">
    <decl_stmt pos:start="2928:5" pos:end="2928:20"><decl pos:start="2928:5" pos:end="2928:19"><type pos:start="2928:5" pos:end="2928:16"><specifier pos:start="2928:5" pos:end="2928:9">const</specifier> <name pos:start="2928:11" pos:end="2928:14">char</name> <modifier pos:start="2928:16" pos:end="2928:16">*</modifier></type><name pos:start="2928:17" pos:end="2928:19">str</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2929:5" pos:end="2929:14"><decl pos:start="2929:5" pos:end="2929:13"><type pos:start="2929:5" pos:end="2929:10"><name pos:start="2929:5" pos:end="2929:10">time_t</name></type> <name pos:start="2929:12" pos:end="2929:13">ti</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2930:5" pos:end="2930:18"><decl pos:start="2930:5" pos:end="2930:17"><type pos:start="2930:5" pos:end="2930:15"><name pos:start="2930:5" pos:end="2930:13"><name pos:start="2930:5" pos:end="2930:10">struct</name> <name pos:start="2930:12" pos:end="2930:13">tm</name></name> <modifier pos:start="2930:15" pos:end="2930:15">*</modifier></type><name pos:start="2930:16" pos:end="2930:17">tm</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2931:5" pos:end="2931:18"><decl pos:start="2931:5" pos:end="2931:17"><type pos:start="2931:5" pos:end="2931:8"><name pos:start="2931:5" pos:end="2931:8">char</name></type> <name pos:start="2931:10" pos:end="2931:17"><name pos:start="2931:10" pos:end="2931:13">buf2</name><index pos:start="2931:14" pos:end="2931:17">[<expr pos:start="2931:15" pos:end="2931:16"><literal type="number" pos:start="2931:15" pos:end="2931:16">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt pos:start="2933:5" pos:end="2933:48"><expr pos:start="2933:5" pos:end="2933:47"><name pos:start="2933:5" pos:end="2933:7">str</name> <operator pos:start="2933:9" pos:end="2933:9">=</operator> <call pos:start="2933:11" pos:end="2933:47"><name pos:start="2933:11" pos:end="2933:33">RTSP_STATUS_CODE2STRING</name><argument_list pos:start="2933:34" pos:end="2933:47">(<argument pos:start="2933:35" pos:end="2933:46"><expr pos:start="2933:35" pos:end="2933:46"><name pos:start="2933:35" pos:end="2933:46">error_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="2934:5" pos:end="2935:30"><if pos:start="2934:5" pos:end="2935:30">if <condition pos:start="2934:8" pos:end="2934:13">(<expr pos:start="2934:9" pos:end="2934:12"><operator pos:start="2934:9" pos:end="2934:9">!</operator><name pos:start="2934:10" pos:end="2934:12">str</name></expr>)</condition><block type="pseudo" pos:start="2935:9" pos:end="2935:30"><block_content pos:start="2935:9" pos:end="2935:30">
        <expr_stmt pos:start="2935:9" pos:end="2935:30"><expr pos:start="2935:9" pos:end="2935:29"><name pos:start="2935:9" pos:end="2935:11">str</name> <operator pos:start="2935:13" pos:end="2935:13">=</operator> <literal type="string" pos:start="2935:15" pos:end="2935:29">"Unknown Error"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="2937:5" pos:end="2937:64"><expr pos:start="2937:5" pos:end="2937:63"><call pos:start="2937:5" pos:end="2937:63"><name pos:start="2937:5" pos:end="2937:15">avio_printf</name><argument_list pos:start="2937:16" pos:end="2937:63">(<argument pos:start="2937:17" pos:end="2937:21"><expr pos:start="2937:17" pos:end="2937:21"><name pos:start="2937:17" pos:end="2937:21"><name pos:start="2937:17" pos:end="2937:17">c</name><operator pos:start="2937:18" pos:end="2937:19">-&gt;</operator><name pos:start="2937:20" pos:end="2937:21">pb</name></name></expr></argument>, <argument pos:start="2937:24" pos:end="2937:43"><expr pos:start="2937:24" pos:end="2937:43"><literal type="string" pos:start="2937:24" pos:end="2937:43">"RTSP/1.0 %d %s\r\n"</literal></expr></argument>, <argument pos:start="2937:46" pos:end="2937:57"><expr pos:start="2937:46" pos:end="2937:57"><name pos:start="2937:46" pos:end="2937:57">error_number</name></expr></argument>, <argument pos:start="2937:60" pos:end="2937:62"><expr pos:start="2937:60" pos:end="2937:62"><name pos:start="2937:60" pos:end="2937:62">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2938:5" pos:end="2938:47"><expr pos:start="2938:5" pos:end="2938:46"><call pos:start="2938:5" pos:end="2938:46"><name pos:start="2938:5" pos:end="2938:15">avio_printf</name><argument_list pos:start="2938:16" pos:end="2938:46">(<argument pos:start="2938:17" pos:end="2938:21"><expr pos:start="2938:17" pos:end="2938:21"><name pos:start="2938:17" pos:end="2938:21"><name pos:start="2938:17" pos:end="2938:17">c</name><operator pos:start="2938:18" pos:end="2938:19">-&gt;</operator><name pos:start="2938:20" pos:end="2938:21">pb</name></name></expr></argument>, <argument pos:start="2938:24" pos:end="2938:37"><expr pos:start="2938:24" pos:end="2938:37"><literal type="string" pos:start="2938:24" pos:end="2938:37">"CSeq: %d\r\n"</literal></expr></argument>, <argument pos:start="2938:40" pos:end="2938:45"><expr pos:start="2938:40" pos:end="2938:45"><name pos:start="2938:40" pos:end="2938:45"><name pos:start="2938:40" pos:end="2938:40">c</name><operator pos:start="2938:41" pos:end="2938:42">-&gt;</operator><name pos:start="2938:43" pos:end="2938:45">seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="2940:5" pos:end="2940:25">/* output GMT time */</comment>
    <expr_stmt pos:start="2941:5" pos:end="2941:20"><expr pos:start="2941:5" pos:end="2941:19"><name pos:start="2941:5" pos:end="2941:6">ti</name> <operator pos:start="2941:8" pos:end="2941:8">=</operator> <call pos:start="2941:10" pos:end="2941:19"><name pos:start="2941:10" pos:end="2941:13">time</name><argument_list pos:start="2941:14" pos:end="2941:19">(<argument pos:start="2941:15" pos:end="2941:18"><expr pos:start="2941:15" pos:end="2941:18"><name pos:start="2941:15" pos:end="2941:18">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2942:5" pos:end="2942:21"><expr pos:start="2942:5" pos:end="2942:20"><name pos:start="2942:5" pos:end="2942:6">tm</name> <operator pos:start="2942:8" pos:end="2942:8">=</operator> <call pos:start="2942:10" pos:end="2942:20"><name pos:start="2942:10" pos:end="2942:15">gmtime</name><argument_list pos:start="2942:16" pos:end="2942:20">(<argument pos:start="2942:17" pos:end="2942:19"><expr pos:start="2942:17" pos:end="2942:19"><operator pos:start="2942:17" pos:end="2942:17">&amp;</operator><name pos:start="2942:18" pos:end="2942:19">ti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2943:5" pos:end="2943:62"><expr pos:start="2943:5" pos:end="2943:61"><call pos:start="2943:5" pos:end="2943:61"><name pos:start="2943:5" pos:end="2943:12">strftime</name><argument_list pos:start="2943:13" pos:end="2943:61">(<argument pos:start="2943:14" pos:end="2943:17"><expr pos:start="2943:14" pos:end="2943:17"><name pos:start="2943:14" pos:end="2943:17">buf2</name></expr></argument>, <argument pos:start="2943:20" pos:end="2943:31"><expr pos:start="2943:20" pos:end="2943:31"><sizeof pos:start="2943:20" pos:end="2943:31">sizeof<argument_list pos:start="2943:26" pos:end="2943:31">(<argument pos:start="2943:27" pos:end="2943:30"><expr pos:start="2943:27" pos:end="2943:30"><name pos:start="2943:27" pos:end="2943:30">buf2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="2943:34" pos:end="2943:56"><expr pos:start="2943:34" pos:end="2943:56"><literal type="string" pos:start="2943:34" pos:end="2943:56">"%a, %d %b %Y %H:%M:%S"</literal></expr></argument>, <argument pos:start="2943:59" pos:end="2943:60"><expr pos:start="2943:59" pos:end="2943:60"><name pos:start="2943:59" pos:end="2943:60">tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2944:5" pos:end="2944:49"><expr pos:start="2944:5" pos:end="2944:48"><call pos:start="2944:5" pos:end="2944:48"><name pos:start="2944:5" pos:end="2944:15">avio_printf</name><argument_list pos:start="2944:16" pos:end="2944:48">(<argument pos:start="2944:17" pos:end="2944:21"><expr pos:start="2944:17" pos:end="2944:21"><name pos:start="2944:17" pos:end="2944:21"><name pos:start="2944:17" pos:end="2944:17">c</name><operator pos:start="2944:18" pos:end="2944:19">-&gt;</operator><name pos:start="2944:20" pos:end="2944:21">pb</name></name></expr></argument>, <argument pos:start="2944:24" pos:end="2944:41"><expr pos:start="2944:24" pos:end="2944:41"><literal type="string" pos:start="2944:24" pos:end="2944:41">"Date: %s GMT\r\n"</literal></expr></argument>, <argument pos:start="2944:44" pos:end="2944:47"><expr pos:start="2944:44" pos:end="2944:47"><name pos:start="2944:44" pos:end="2944:47">buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="2947:1" pos:end="2951:1"><type pos:start="2947:1" pos:end="2947:11"><specifier pos:start="2947:1" pos:end="2947:6">static</specifier> <name pos:start="2947:8" pos:end="2947:11">void</name></type> <name pos:start="2947:13" pos:end="2947:28">rtsp_reply_error</name><parameter_list pos:start="2947:29" pos:end="2947:78">(<parameter pos:start="2947:30" pos:end="2947:43"><decl pos:start="2947:30" pos:end="2947:43"><type pos:start="2947:30" pos:end="2947:43"><name pos:start="2947:30" pos:end="2947:40">HTTPContext</name> <modifier pos:start="2947:42" pos:end="2947:42">*</modifier></type><name pos:start="2947:43" pos:end="2947:43">c</name></decl></parameter>, <parameter pos:start="2947:46" pos:end="2947:77"><decl pos:start="2947:46" pos:end="2947:77"><type pos:start="2947:46" pos:end="2947:77"><name pos:start="2947:46" pos:end="2947:64"><name pos:start="2947:46" pos:end="2947:49">enum</name> <name pos:start="2947:51" pos:end="2947:64">RTSPStatusCode</name></name></type> <name pos:start="2947:66" pos:end="2947:77">error_number</name></decl></parameter>)</parameter_list>
<block pos:start="2948:1" pos:end="2951:1">{<block_content pos:start="2949:5" pos:end="2950:31">
    <expr_stmt pos:start="2949:5" pos:end="2949:39"><expr pos:start="2949:5" pos:end="2949:38"><call pos:start="2949:5" pos:end="2949:38"><name pos:start="2949:5" pos:end="2949:21">rtsp_reply_header</name><argument_list pos:start="2949:22" pos:end="2949:38">(<argument pos:start="2949:23" pos:end="2949:23"><expr pos:start="2949:23" pos:end="2949:23"><name pos:start="2949:23" pos:end="2949:23">c</name></expr></argument>, <argument pos:start="2949:26" pos:end="2949:37"><expr pos:start="2949:26" pos:end="2949:37"><name pos:start="2949:26" pos:end="2949:37">error_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2950:5" pos:end="2950:31"><expr pos:start="2950:5" pos:end="2950:30"><call pos:start="2950:5" pos:end="2950:30"><name pos:start="2950:5" pos:end="2950:15">avio_printf</name><argument_list pos:start="2950:16" pos:end="2950:30">(<argument pos:start="2950:17" pos:end="2950:21"><expr pos:start="2950:17" pos:end="2950:21"><name pos:start="2950:17" pos:end="2950:21"><name pos:start="2950:17" pos:end="2950:17">c</name><operator pos:start="2950:18" pos:end="2950:19">-&gt;</operator><name pos:start="2950:20" pos:end="2950:21">pb</name></name></expr></argument>, <argument pos:start="2950:24" pos:end="2950:29"><expr pos:start="2950:24" pos:end="2950:29"><literal type="string" pos:start="2950:24" pos:end="2950:29">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="2953:1" pos:end="3041:1"><type pos:start="2953:1" pos:end="2953:10"><specifier pos:start="2953:1" pos:end="2953:6">static</specifier> <name pos:start="2953:8" pos:end="2953:10">int</name></type> <name pos:start="2953:12" pos:end="2953:29">rtsp_parse_request</name><parameter_list pos:start="2953:30" pos:end="2953:45">(<parameter pos:start="2953:31" pos:end="2953:44"><decl pos:start="2953:31" pos:end="2953:44"><type pos:start="2953:31" pos:end="2953:43"><name pos:start="2953:31" pos:end="2953:41">HTTPContext</name> <modifier pos:start="2953:43" pos:end="2953:43">*</modifier></type><name pos:start="2953:44" pos:end="2953:44">c</name></decl></parameter>)</parameter_list>
<block pos:start="2954:1" pos:end="3041:1">{<block_content pos:start="2955:5" pos:end="3040:13">
    <decl_stmt pos:start="2955:5" pos:end="2955:28"><decl pos:start="2955:5" pos:end="2955:17"><type pos:start="2955:5" pos:end="2955:16"><specifier pos:start="2955:5" pos:end="2955:9">const</specifier> <name pos:start="2955:11" pos:end="2955:14">char</name> <modifier pos:start="2955:16" pos:end="2955:16">*</modifier></type><name pos:start="2955:17" pos:end="2955:17">p</name></decl>, <decl pos:start="2955:20" pos:end="2955:22"><type ref="prev" pos:start="2955:5" pos:end="2955:16"><modifier pos:start="2955:20" pos:end="2955:20">*</modifier></type><name pos:start="2955:21" pos:end="2955:22">p1</name></decl>, <decl pos:start="2955:25" pos:end="2955:27"><type ref="prev" pos:start="2955:5" pos:end="2955:16"><modifier pos:start="2955:25" pos:end="2955:25">*</modifier></type><name pos:start="2955:26" pos:end="2955:27">p2</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2956:5" pos:end="2956:17"><decl pos:start="2956:5" pos:end="2956:16"><type pos:start="2956:5" pos:end="2956:8"><name pos:start="2956:5" pos:end="2956:8">char</name></type> <name pos:start="2956:10" pos:end="2956:16"><name pos:start="2956:10" pos:end="2956:12">cmd</name><index pos:start="2956:13" pos:end="2956:16">[<expr pos:start="2956:14" pos:end="2956:15"><literal type="number" pos:start="2956:14" pos:end="2956:15">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="2957:5" pos:end="2957:19"><decl pos:start="2957:5" pos:end="2957:18"><type pos:start="2957:5" pos:end="2957:8"><name pos:start="2957:5" pos:end="2957:8">char</name></type> <name pos:start="2957:10" pos:end="2957:18"><name pos:start="2957:10" pos:end="2957:12">url</name><index pos:start="2957:13" pos:end="2957:18">[<expr pos:start="2957:14" pos:end="2957:17"><literal type="number" pos:start="2957:14" pos:end="2957:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="2958:5" pos:end="2958:22"><decl pos:start="2958:5" pos:end="2958:21"><type pos:start="2958:5" pos:end="2958:8"><name pos:start="2958:5" pos:end="2958:8">char</name></type> <name pos:start="2958:10" pos:end="2958:21"><name pos:start="2958:10" pos:end="2958:17">protocol</name><index pos:start="2958:18" pos:end="2958:21">[<expr pos:start="2958:19" pos:end="2958:20"><literal type="number" pos:start="2958:19" pos:end="2958:20">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="2959:5" pos:end="2959:20"><decl pos:start="2959:5" pos:end="2959:19"><type pos:start="2959:5" pos:end="2959:8"><name pos:start="2959:5" pos:end="2959:8">char</name></type> <name pos:start="2959:10" pos:end="2959:19"><name pos:start="2959:10" pos:end="2959:13">line</name><index pos:start="2959:14" pos:end="2959:19">[<expr pos:start="2959:15" pos:end="2959:18"><literal type="number" pos:start="2959:15" pos:end="2959:18">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="2960:5" pos:end="2960:12"><decl pos:start="2960:5" pos:end="2960:11"><type pos:start="2960:5" pos:end="2960:7"><name pos:start="2960:5" pos:end="2960:7">int</name></type> <name pos:start="2960:9" pos:end="2960:11">len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2961:5" pos:end="2961:58"><decl pos:start="2961:5" pos:end="2961:37"><type pos:start="2961:5" pos:end="2961:21"><name pos:start="2961:5" pos:end="2961:21">RTSPMessageHeader</name></type> <name pos:start="2961:23" pos:end="2961:29">header1</name> <init pos:start="2961:31" pos:end="2961:37">= <expr pos:start="2961:33" pos:end="2961:37"><block pos:start="2961:33" pos:end="2961:37">{ <expr pos:start="2961:35" pos:end="2961:35"><literal type="number" pos:start="2961:35" pos:end="2961:35">0</literal></expr> }</block></expr></init></decl>, <decl pos:start="2961:40" pos:end="2961:57"><type ref="prev" pos:start="2961:5" pos:end="2961:21"><modifier pos:start="2961:40" pos:end="2961:40">*</modifier></type><name pos:start="2961:41" pos:end="2961:46">header</name> <init pos:start="2961:48" pos:end="2961:57">= <expr pos:start="2961:50" pos:end="2961:57"><operator pos:start="2961:50" pos:end="2961:50">&amp;</operator><name pos:start="2961:51" pos:end="2961:57">header1</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="2963:5" pos:end="2963:28"><expr pos:start="2963:5" pos:end="2963:27"><name pos:start="2963:5" pos:end="2963:20"><name pos:start="2963:5" pos:end="2963:5">c</name><operator pos:start="2963:6" pos:end="2963:7">-&gt;</operator><name pos:start="2963:8" pos:end="2963:17">buffer_ptr</name><index pos:start="2963:18" pos:end="2963:20">[<expr pos:start="2963:19" pos:end="2963:19"><literal type="number" pos:start="2963:19" pos:end="2963:19">0</literal></expr>]</index></name> <operator pos:start="2963:22" pos:end="2963:22">=</operator> <literal type="char" pos:start="2963:24" pos:end="2963:27">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="2964:5" pos:end="2964:18"><expr pos:start="2964:5" pos:end="2964:17"><name pos:start="2964:5" pos:end="2964:5">p</name> <operator pos:start="2964:7" pos:end="2964:7">=</operator> <name pos:start="2964:9" pos:end="2964:17"><name pos:start="2964:9" pos:end="2964:9">c</name><operator pos:start="2964:10" pos:end="2964:11">-&gt;</operator><name pos:start="2964:12" pos:end="2964:17">buffer</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="2966:5" pos:end="2966:35"><expr pos:start="2966:5" pos:end="2966:34"><call pos:start="2966:5" pos:end="2966:34"><name pos:start="2966:5" pos:end="2966:12">get_word</name><argument_list pos:start="2966:13" pos:end="2966:34">(<argument pos:start="2966:14" pos:end="2966:16"><expr pos:start="2966:14" pos:end="2966:16"><name pos:start="2966:14" pos:end="2966:16">cmd</name></expr></argument>, <argument pos:start="2966:19" pos:end="2966:29"><expr pos:start="2966:19" pos:end="2966:29"><sizeof pos:start="2966:19" pos:end="2966:29">sizeof<argument_list pos:start="2966:25" pos:end="2966:29">(<argument pos:start="2966:26" pos:end="2966:28"><expr pos:start="2966:26" pos:end="2966:28"><name pos:start="2966:26" pos:end="2966:28">cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="2966:32" pos:end="2966:33"><expr pos:start="2966:32" pos:end="2966:33"><operator pos:start="2966:32" pos:end="2966:32">&amp;</operator><name pos:start="2966:33" pos:end="2966:33">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2967:5" pos:end="2967:35"><expr pos:start="2967:5" pos:end="2967:34"><call pos:start="2967:5" pos:end="2967:34"><name pos:start="2967:5" pos:end="2967:12">get_word</name><argument_list pos:start="2967:13" pos:end="2967:34">(<argument pos:start="2967:14" pos:end="2967:16"><expr pos:start="2967:14" pos:end="2967:16"><name pos:start="2967:14" pos:end="2967:16">url</name></expr></argument>, <argument pos:start="2967:19" pos:end="2967:29"><expr pos:start="2967:19" pos:end="2967:29"><sizeof pos:start="2967:19" pos:end="2967:29">sizeof<argument_list pos:start="2967:25" pos:end="2967:29">(<argument pos:start="2967:26" pos:end="2967:28"><expr pos:start="2967:26" pos:end="2967:28"><name pos:start="2967:26" pos:end="2967:28">url</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="2967:32" pos:end="2967:33"><expr pos:start="2967:32" pos:end="2967:33"><operator pos:start="2967:32" pos:end="2967:32">&amp;</operator><name pos:start="2967:33" pos:end="2967:33">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2968:5" pos:end="2968:45"><expr pos:start="2968:5" pos:end="2968:44"><call pos:start="2968:5" pos:end="2968:44"><name pos:start="2968:5" pos:end="2968:12">get_word</name><argument_list pos:start="2968:13" pos:end="2968:44">(<argument pos:start="2968:14" pos:end="2968:21"><expr pos:start="2968:14" pos:end="2968:21"><name pos:start="2968:14" pos:end="2968:21">protocol</name></expr></argument>, <argument pos:start="2968:24" pos:end="2968:39"><expr pos:start="2968:24" pos:end="2968:39"><sizeof pos:start="2968:24" pos:end="2968:39">sizeof<argument_list pos:start="2968:30" pos:end="2968:39">(<argument pos:start="2968:31" pos:end="2968:38"><expr pos:start="2968:31" pos:end="2968:38"><name pos:start="2968:31" pos:end="2968:38">protocol</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="2968:42" pos:end="2968:43"><expr pos:start="2968:42" pos:end="2968:43"><operator pos:start="2968:42" pos:end="2968:42">&amp;</operator><name pos:start="2968:43" pos:end="2968:43">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="2970:5" pos:end="2970:50"><expr pos:start="2970:5" pos:end="2970:49"><call pos:start="2970:5" pos:end="2970:49"><name pos:start="2970:5" pos:end="2970:14">av_strlcpy</name><argument_list pos:start="2970:15" pos:end="2970:49">(<argument pos:start="2970:16" pos:end="2970:24"><expr pos:start="2970:16" pos:end="2970:24"><name pos:start="2970:16" pos:end="2970:24"><name pos:start="2970:16" pos:end="2970:16">c</name><operator pos:start="2970:17" pos:end="2970:18">-&gt;</operator><name pos:start="2970:19" pos:end="2970:24">method</name></name></expr></argument>, <argument pos:start="2970:27" pos:end="2970:29"><expr pos:start="2970:27" pos:end="2970:29"><name pos:start="2970:27" pos:end="2970:29">cmd</name></expr></argument>, <argument pos:start="2970:32" pos:end="2970:48"><expr pos:start="2970:32" pos:end="2970:48"><sizeof pos:start="2970:32" pos:end="2970:48">sizeof<argument_list pos:start="2970:38" pos:end="2970:48">(<argument pos:start="2970:39" pos:end="2970:47"><expr pos:start="2970:39" pos:end="2970:47"><name pos:start="2970:39" pos:end="2970:47"><name pos:start="2970:39" pos:end="2970:39">c</name><operator pos:start="2970:40" pos:end="2970:41">-&gt;</operator><name pos:start="2970:42" pos:end="2970:47">method</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2971:5" pos:end="2971:44"><expr pos:start="2971:5" pos:end="2971:43"><call pos:start="2971:5" pos:end="2971:43"><name pos:start="2971:5" pos:end="2971:14">av_strlcpy</name><argument_list pos:start="2971:15" pos:end="2971:43">(<argument pos:start="2971:16" pos:end="2971:21"><expr pos:start="2971:16" pos:end="2971:21"><name pos:start="2971:16" pos:end="2971:21"><name pos:start="2971:16" pos:end="2971:16">c</name><operator pos:start="2971:17" pos:end="2971:18">-&gt;</operator><name pos:start="2971:19" pos:end="2971:21">url</name></name></expr></argument>, <argument pos:start="2971:24" pos:end="2971:26"><expr pos:start="2971:24" pos:end="2971:26"><name pos:start="2971:24" pos:end="2971:26">url</name></expr></argument>, <argument pos:start="2971:29" pos:end="2971:42"><expr pos:start="2971:29" pos:end="2971:42"><sizeof pos:start="2971:29" pos:end="2971:42">sizeof<argument_list pos:start="2971:35" pos:end="2971:42">(<argument pos:start="2971:36" pos:end="2971:41"><expr pos:start="2971:36" pos:end="2971:41"><name pos:start="2971:36" pos:end="2971:41"><name pos:start="2971:36" pos:end="2971:36">c</name><operator pos:start="2971:37" pos:end="2971:38">-&gt;</operator><name pos:start="2971:39" pos:end="2971:41">url</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2972:5" pos:end="2972:59"><expr pos:start="2972:5" pos:end="2972:58"><call pos:start="2972:5" pos:end="2972:58"><name pos:start="2972:5" pos:end="2972:14">av_strlcpy</name><argument_list pos:start="2972:15" pos:end="2972:58">(<argument pos:start="2972:16" pos:end="2972:26"><expr pos:start="2972:16" pos:end="2972:26"><name pos:start="2972:16" pos:end="2972:26"><name pos:start="2972:16" pos:end="2972:16">c</name><operator pos:start="2972:17" pos:end="2972:18">-&gt;</operator><name pos:start="2972:19" pos:end="2972:26">protocol</name></name></expr></argument>, <argument pos:start="2972:29" pos:end="2972:36"><expr pos:start="2972:29" pos:end="2972:36"><name pos:start="2972:29" pos:end="2972:36">protocol</name></expr></argument>, <argument pos:start="2972:39" pos:end="2972:57"><expr pos:start="2972:39" pos:end="2972:57"><sizeof pos:start="2972:39" pos:end="2972:57">sizeof<argument_list pos:start="2972:45" pos:end="2972:57">(<argument pos:start="2972:46" pos:end="2972:56"><expr pos:start="2972:46" pos:end="2972:56"><name pos:start="2972:46" pos:end="2972:56"><name pos:start="2972:46" pos:end="2972:46">c</name><operator pos:start="2972:47" pos:end="2972:48">-&gt;</operator><name pos:start="2972:49" pos:end="2972:56">protocol</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="2974:5" pos:end="2978:5"><if pos:start="2974:5" pos:end="2978:5">if <condition pos:start="2974:8" pos:end="2974:38">(<expr pos:start="2974:9" pos:end="2974:37"><call pos:start="2974:9" pos:end="2974:33"><name pos:start="2974:9" pos:end="2974:25">avio_open_dyn_buf</name><argument_list pos:start="2974:26" pos:end="2974:33">(<argument pos:start="2974:27" pos:end="2974:32"><expr pos:start="2974:27" pos:end="2974:32"><operator pos:start="2974:27" pos:end="2974:27">&amp;</operator><name pos:start="2974:28" pos:end="2974:32"><name pos:start="2974:28" pos:end="2974:28">c</name><operator pos:start="2974:29" pos:end="2974:30">-&gt;</operator><name pos:start="2974:31" pos:end="2974:32">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="2974:35" pos:end="2974:35">&lt;</operator> <literal type="number" pos:start="2974:37" pos:end="2974:37">0</literal></expr>)</condition> <block pos:start="2974:40" pos:end="2978:5">{<block_content pos:start="2976:9" pos:end="2977:18">
        <comment type="block" pos:start="2975:9" pos:end="2975:33">/* XXX: cannot do more */</comment>
        <expr_stmt pos:start="2976:9" pos:end="2976:21"><expr pos:start="2976:9" pos:end="2976:20"><name pos:start="2976:9" pos:end="2976:13"><name pos:start="2976:9" pos:end="2976:9">c</name><operator pos:start="2976:10" pos:end="2976:11">-&gt;</operator><name pos:start="2976:12" pos:end="2976:13">pb</name></name> <operator pos:start="2976:15" pos:end="2976:15">=</operator> <name pos:start="2976:17" pos:end="2976:20">NULL</name></expr>;</expr_stmt> <comment type="block" pos:start="2976:23" pos:end="2976:34">/* safety */</comment>
        <return pos:start="2977:9" pos:end="2977:18">return <expr pos:start="2977:16" pos:end="2977:17"><operator pos:start="2977:16" pos:end="2977:16">-</operator><literal type="number" pos:start="2977:17" pos:end="2977:17">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="2980:5" pos:end="2980:28">/* check version name */</comment>
    <if_stmt pos:start="2981:5" pos:end="2984:5"><if pos:start="2981:5" pos:end="2984:5">if <condition pos:start="2981:8" pos:end="2981:37">(<expr pos:start="2981:9" pos:end="2981:36"><call pos:start="2981:9" pos:end="2981:36"><name pos:start="2981:9" pos:end="2981:14">strcmp</name><argument_list pos:start="2981:15" pos:end="2981:36">(<argument pos:start="2981:16" pos:end="2981:23"><expr pos:start="2981:16" pos:end="2981:23"><name pos:start="2981:16" pos:end="2981:23">protocol</name></expr></argument>, <argument pos:start="2981:26" pos:end="2981:35"><expr pos:start="2981:26" pos:end="2981:35"><literal type="string" pos:start="2981:26" pos:end="2981:35">"RTSP/1.0"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2981:39" pos:end="2984:5">{<block_content pos:start="2982:9" pos:end="2983:21">
        <expr_stmt pos:start="2982:9" pos:end="2982:49"><expr pos:start="2982:9" pos:end="2982:48"><call pos:start="2982:9" pos:end="2982:48"><name pos:start="2982:9" pos:end="2982:24">rtsp_reply_error</name><argument_list pos:start="2982:25" pos:end="2982:48">(<argument pos:start="2982:26" pos:end="2982:26"><expr pos:start="2982:26" pos:end="2982:26"><name pos:start="2982:26" pos:end="2982:26">c</name></expr></argument>, <argument pos:start="2982:29" pos:end="2982:47"><expr pos:start="2982:29" pos:end="2982:47"><name pos:start="2982:29" pos:end="2982:47">RTSP_STATUS_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="2983:9" pos:end="2983:21">goto <name pos:start="2983:14" pos:end="2983:20">the_end</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="2986:5" pos:end="2986:32">/* parse each header line */</comment>
    <comment type="block" pos:start="2987:5" pos:end="2987:27">/* skip to next line */</comment>
    <while pos:start="2988:5" pos:end="2989:12">while <condition pos:start="2988:11" pos:end="2988:36">(<expr pos:start="2988:12" pos:end="2988:35"><operator pos:start="2988:12" pos:end="2988:12">*</operator><name pos:start="2988:13" pos:end="2988:13">p</name> <operator pos:start="2988:15" pos:end="2988:16">!=</operator> <literal type="char" pos:start="2988:18" pos:end="2988:21">'\n'</literal> <operator pos:start="2988:23" pos:end="2988:24">&amp;&amp;</operator> <operator pos:start="2988:26" pos:end="2988:26">*</operator><name pos:start="2988:27" pos:end="2988:27">p</name> <operator pos:start="2988:29" pos:end="2988:30">!=</operator> <literal type="char" pos:start="2988:32" pos:end="2988:35">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="2989:9" pos:end="2989:12"><block_content pos:start="2989:9" pos:end="2989:12">
        <expr_stmt pos:start="2989:9" pos:end="2989:12"><expr pos:start="2989:9" pos:end="2989:11"><name pos:start="2989:9" pos:end="2989:9">p</name><operator pos:start="2989:10" pos:end="2989:11">++</operator></expr>;</expr_stmt></block_content></block></while>
    <if_stmt pos:start="2990:5" pos:end="2991:12"><if pos:start="2990:5" pos:end="2991:12">if <condition pos:start="2990:8" pos:end="2990:19">(<expr pos:start="2990:9" pos:end="2990:18"><operator pos:start="2990:9" pos:end="2990:9">*</operator><name pos:start="2990:10" pos:end="2990:10">p</name> <operator pos:start="2990:12" pos:end="2990:13">==</operator> <literal type="char" pos:start="2990:15" pos:end="2990:18">'\n'</literal></expr>)</condition><block type="pseudo" pos:start="2991:9" pos:end="2991:12"><block_content pos:start="2991:9" pos:end="2991:12">
        <expr_stmt pos:start="2991:9" pos:end="2991:12"><expr pos:start="2991:9" pos:end="2991:11"><name pos:start="2991:9" pos:end="2991:9">p</name><operator pos:start="2991:10" pos:end="2991:11">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <while pos:start="2992:5" pos:end="3010:5">while <condition pos:start="2992:11" pos:end="2992:22">(<expr pos:start="2992:12" pos:end="2992:21"><operator pos:start="2992:12" pos:end="2992:12">*</operator><name pos:start="2992:13" pos:end="2992:13">p</name> <operator pos:start="2992:15" pos:end="2992:16">!=</operator> <literal type="char" pos:start="2992:18" pos:end="2992:21">'\0'</literal></expr>)</condition> <block pos:start="2992:24" pos:end="3010:5">{<block_content pos:start="2993:9" pos:end="3009:19">
        <expr_stmt pos:start="2993:9" pos:end="2993:56"><expr pos:start="2993:9" pos:end="2993:55"><name pos:start="2993:9" pos:end="2993:10">p1</name> <operator pos:start="2993:12" pos:end="2993:12">=</operator> <call pos:start="2993:14" pos:end="2993:55"><name pos:start="2993:14" pos:end="2993:19">memchr</name><argument_list pos:start="2993:20" pos:end="2993:55">(<argument pos:start="2993:21" pos:end="2993:21"><expr pos:start="2993:21" pos:end="2993:21"><name pos:start="2993:21" pos:end="2993:21">p</name></expr></argument>, <argument pos:start="2993:24" pos:end="2993:27"><expr pos:start="2993:24" pos:end="2993:27"><literal type="char" pos:start="2993:24" pos:end="2993:27">'\n'</literal></expr></argument>, <argument pos:start="2993:30" pos:end="2993:54"><expr pos:start="2993:30" pos:end="2993:54"><operator pos:start="2993:30" pos:end="2993:30">(</operator><name pos:start="2993:31" pos:end="2993:34">char</name> <operator pos:start="2993:36" pos:end="2993:36">*</operator><operator pos:start="2993:37" pos:end="2993:37">)</operator><name pos:start="2993:38" pos:end="2993:50"><name pos:start="2993:38" pos:end="2993:38">c</name><operator pos:start="2993:39" pos:end="2993:40">-&gt;</operator><name pos:start="2993:41" pos:end="2993:50">buffer_ptr</name></name> <operator pos:start="2993:52" pos:end="2993:52">-</operator> <name pos:start="2993:54" pos:end="2993:54">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="2994:9" pos:end="2995:18"><if pos:start="2994:9" pos:end="2995:18">if <condition pos:start="2994:12" pos:end="2994:16">(<expr pos:start="2994:13" pos:end="2994:15"><operator pos:start="2994:13" pos:end="2994:13">!</operator><name pos:start="2994:14" pos:end="2994:15">p1</name></expr>)</condition><block type="pseudo" pos:start="2995:13" pos:end="2995:18"><block_content pos:start="2995:13" pos:end="2995:18">
            <break pos:start="2995:13" pos:end="2995:18">break;</break></block_content></block></if></if_stmt>
        <expr_stmt pos:start="2996:9" pos:end="2996:16"><expr pos:start="2996:9" pos:end="2996:15"><name pos:start="2996:9" pos:end="2996:10">p2</name> <operator pos:start="2996:12" pos:end="2996:12">=</operator> <name pos:start="2996:14" pos:end="2996:15">p1</name></expr>;</expr_stmt>
        <if_stmt pos:start="2997:9" pos:end="2999:18"><if pos:start="2997:9" pos:end="2999:18">if <condition pos:start="2997:12" pos:end="2997:20">(<expr pos:start="2997:13" pos:end="2997:18"><name pos:start="2997:13" pos:end="2997:14">p2</name> <operator pos:start="2997:16" pos:end="2997:16">&gt;</operator> <name pos:start="2997:18" pos:end="2997:18">p</name></expr> )</condition><block pos:start="2997:21" pos:end="2999:18">{<block_content pos:start="2998:1" pos:end="2999:17">
<if_stmt pos:start="2998:1" pos:end="2999:17"><if pos:start="2998:1" pos:end="2999:17">if<condition pos:start="2998:3" pos:end="2998:19">( <expr pos:start="2998:5" pos:end="2998:18"><name pos:start="2998:5" pos:end="2998:10"><name pos:start="2998:5" pos:end="2998:6">p2</name><index pos:start="2998:7" pos:end="2998:10">[<expr pos:start="2998:8" pos:end="2998:9"><operator pos:start="2998:8" pos:end="2998:8">-</operator><literal type="number" pos:start="2998:9" pos:end="2998:9">1</literal></expr>]</index></name> <operator pos:start="2998:12" pos:end="2998:13">==</operator> <literal type="char" pos:start="2998:15" pos:end="2998:18">'\r'</literal></expr>)</condition><block type="pseudo" pos:start="2999:13" pos:end="2999:17"><block_content pos:start="2999:13" pos:end="2999:17">
            <expr_stmt pos:start="2999:13" pos:end="2999:17"><expr pos:start="2999:13" pos:end="2999:16"><name pos:start="2999:13" pos:end="2999:14">p2</name><operator pos:start="2999:15" pos:end="2999:16">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="3000:9" pos:end="3000:29">/* skip empty line */</comment>
        <if_stmt pos:start="3001:9" pos:end="3002:18"><if pos:start="3001:9" pos:end="3002:18">if <condition pos:start="3001:12" pos:end="3001:20">(<expr pos:start="3001:13" pos:end="3001:19"><name pos:start="3001:13" pos:end="3001:14">p2</name> <operator pos:start="3001:16" pos:end="3001:17">==</operator> <name pos:start="3001:19" pos:end="3001:19">p</name></expr>)</condition><block type="pseudo" pos:start="3002:13" pos:end="3002:18"><block_content pos:start="3002:13" pos:end="3002:18">
            <break pos:start="3002:13" pos:end="3002:18">break;</break></block_content></block></if></if_stmt>
        <expr_stmt pos:start="3003:9" pos:end="3003:21"><expr pos:start="3003:9" pos:end="3003:20"><name pos:start="3003:9" pos:end="3003:11">len</name> <operator pos:start="3003:13" pos:end="3003:13">=</operator> <name pos:start="3003:15" pos:end="3003:16">p2</name> <operator pos:start="3003:18" pos:end="3003:18">-</operator> <name pos:start="3003:20" pos:end="3003:20">p</name></expr>;</expr_stmt>
        <if_stmt pos:start="3004:9" pos:end="3005:35"><if pos:start="3004:9" pos:end="3005:35">if <condition pos:start="3004:12" pos:end="3004:35">(<expr pos:start="3004:13" pos:end="3004:34"><name pos:start="3004:13" pos:end="3004:15">len</name> <operator pos:start="3004:17" pos:end="3004:17">&gt;</operator> <sizeof pos:start="3004:19" pos:end="3004:30">sizeof<argument_list pos:start="3004:25" pos:end="3004:30">(<argument pos:start="3004:26" pos:end="3004:29"><expr pos:start="3004:26" pos:end="3004:29"><name pos:start="3004:26" pos:end="3004:29">line</name></expr></argument>)</argument_list></sizeof> <operator pos:start="3004:32" pos:end="3004:32">-</operator> <literal type="number" pos:start="3004:34" pos:end="3004:34">1</literal></expr>)</condition><block type="pseudo" pos:start="3005:13" pos:end="3005:35"><block_content pos:start="3005:13" pos:end="3005:35">
            <expr_stmt pos:start="3005:13" pos:end="3005:35"><expr pos:start="3005:13" pos:end="3005:34"><name pos:start="3005:13" pos:end="3005:15">len</name> <operator pos:start="3005:17" pos:end="3005:17">=</operator> <sizeof pos:start="3005:19" pos:end="3005:30">sizeof<argument_list pos:start="3005:25" pos:end="3005:30">(<argument pos:start="3005:26" pos:end="3005:29"><expr pos:start="3005:26" pos:end="3005:29"><name pos:start="3005:26" pos:end="3005:29">line</name></expr></argument>)</argument_list></sizeof> <operator pos:start="3005:32" pos:end="3005:32">-</operator> <literal type="number" pos:start="3005:34" pos:end="3005:34">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="3006:9" pos:end="3006:29"><expr pos:start="3006:9" pos:end="3006:28"><call pos:start="3006:9" pos:end="3006:28"><name pos:start="3006:9" pos:end="3006:14">memcpy</name><argument_list pos:start="3006:15" pos:end="3006:28">(<argument pos:start="3006:16" pos:end="3006:19"><expr pos:start="3006:16" pos:end="3006:19"><name pos:start="3006:16" pos:end="3006:19">line</name></expr></argument>, <argument pos:start="3006:22" pos:end="3006:22"><expr pos:start="3006:22" pos:end="3006:22"><name pos:start="3006:22" pos:end="3006:22">p</name></expr></argument>, <argument pos:start="3006:25" pos:end="3006:27"><expr pos:start="3006:25" pos:end="3006:27"><name pos:start="3006:25" pos:end="3006:27">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3007:9" pos:end="3007:25"><expr pos:start="3007:9" pos:end="3007:24"><name pos:start="3007:9" pos:end="3007:17"><name pos:start="3007:9" pos:end="3007:12">line</name><index pos:start="3007:13" pos:end="3007:17">[<expr pos:start="3007:14" pos:end="3007:16"><name pos:start="3007:14" pos:end="3007:16">len</name></expr>]</index></name> <operator pos:start="3007:19" pos:end="3007:19">=</operator> <literal type="char" pos:start="3007:21" pos:end="3007:24">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="3008:9" pos:end="3008:59"><expr pos:start="3008:9" pos:end="3008:58"><call pos:start="3008:9" pos:end="3008:58"><name pos:start="3008:9" pos:end="3008:26">ff_rtsp_parse_line</name><argument_list pos:start="3008:27" pos:end="3008:58">(<argument pos:start="3008:28" pos:end="3008:31"><expr pos:start="3008:28" pos:end="3008:31"><name pos:start="3008:28" pos:end="3008:31">NULL</name></expr></argument>, <argument pos:start="3008:34" pos:end="3008:39"><expr pos:start="3008:34" pos:end="3008:39"><name pos:start="3008:34" pos:end="3008:39">header</name></expr></argument>, <argument pos:start="3008:42" pos:end="3008:45"><expr pos:start="3008:42" pos:end="3008:45"><name pos:start="3008:42" pos:end="3008:45">line</name></expr></argument>, <argument pos:start="3008:48" pos:end="3008:51"><expr pos:start="3008:48" pos:end="3008:51"><name pos:start="3008:48" pos:end="3008:51">NULL</name></expr></argument>, <argument pos:start="3008:54" pos:end="3008:57"><expr pos:start="3008:54" pos:end="3008:57"><name pos:start="3008:54" pos:end="3008:57">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3009:9" pos:end="3009:19"><expr pos:start="3009:9" pos:end="3009:18"><name pos:start="3009:9" pos:end="3009:9">p</name> <operator pos:start="3009:11" pos:end="3009:11">=</operator> <name pos:start="3009:13" pos:end="3009:14">p1</name> <operator pos:start="3009:16" pos:end="3009:16">+</operator> <literal type="number" pos:start="3009:18" pos:end="3009:18">1</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block" pos:start="3012:5" pos:end="3012:32">/* handle sequence number */</comment>
    <expr_stmt pos:start="3013:5" pos:end="3013:25"><expr pos:start="3013:5" pos:end="3013:24"><name pos:start="3013:5" pos:end="3013:10"><name pos:start="3013:5" pos:end="3013:5">c</name><operator pos:start="3013:6" pos:end="3013:7">-&gt;</operator><name pos:start="3013:8" pos:end="3013:10">seq</name></name> <operator pos:start="3013:12" pos:end="3013:12">=</operator> <name pos:start="3013:14" pos:end="3013:24"><name pos:start="3013:14" pos:end="3013:19">header</name><operator pos:start="3013:20" pos:end="3013:21">-&gt;</operator><name pos:start="3013:22" pos:end="3013:24">seq</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="3015:5" pos:end="3028:48"><if pos:start="3015:5" pos:end="3016:34">if <condition pos:start="3015:8" pos:end="3015:33">(<expr pos:start="3015:9" pos:end="3015:32"><operator pos:start="3015:9" pos:end="3015:9">!</operator><call pos:start="3015:10" pos:end="3015:32"><name pos:start="3015:10" pos:end="3015:15">strcmp</name><argument_list pos:start="3015:16" pos:end="3015:32">(<argument pos:start="3015:17" pos:end="3015:19"><expr pos:start="3015:17" pos:end="3015:19"><name pos:start="3015:17" pos:end="3015:19">cmd</name></expr></argument>, <argument pos:start="3015:22" pos:end="3015:31"><expr pos:start="3015:22" pos:end="3015:31"><literal type="string" pos:start="3015:22" pos:end="3015:31">"DESCRIBE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3016:9" pos:end="3016:34"><block_content pos:start="3016:9" pos:end="3016:34">
        <expr_stmt pos:start="3016:9" pos:end="3016:34"><expr pos:start="3016:9" pos:end="3016:33"><call pos:start="3016:9" pos:end="3016:33"><name pos:start="3016:9" pos:end="3016:25">rtsp_cmd_describe</name><argument_list pos:start="3016:26" pos:end="3016:33">(<argument pos:start="3016:27" pos:end="3016:27"><expr pos:start="3016:27" pos:end="3016:27"><name pos:start="3016:27" pos:end="3016:27">c</name></expr></argument>, <argument pos:start="3016:30" pos:end="3016:32"><expr pos:start="3016:30" pos:end="3016:32"><name pos:start="3016:30" pos:end="3016:32">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif" pos:start="3017:5" pos:end="3018:33">else if <condition pos:start="3017:13" pos:end="3017:37">(<expr pos:start="3017:14" pos:end="3017:36"><operator pos:start="3017:14" pos:end="3017:14">!</operator><call pos:start="3017:15" pos:end="3017:36"><name pos:start="3017:15" pos:end="3017:20">strcmp</name><argument_list pos:start="3017:21" pos:end="3017:36">(<argument pos:start="3017:22" pos:end="3017:24"><expr pos:start="3017:22" pos:end="3017:24"><name pos:start="3017:22" pos:end="3017:24">cmd</name></expr></argument>, <argument pos:start="3017:27" pos:end="3017:35"><expr pos:start="3017:27" pos:end="3017:35"><literal type="string" pos:start="3017:27" pos:end="3017:35">"OPTIONS"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3018:9" pos:end="3018:33"><block_content pos:start="3018:9" pos:end="3018:33">
        <expr_stmt pos:start="3018:9" pos:end="3018:33"><expr pos:start="3018:9" pos:end="3018:32"><call pos:start="3018:9" pos:end="3018:32"><name pos:start="3018:9" pos:end="3018:24">rtsp_cmd_options</name><argument_list pos:start="3018:25" pos:end="3018:32">(<argument pos:start="3018:26" pos:end="3018:26"><expr pos:start="3018:26" pos:end="3018:26"><name pos:start="3018:26" pos:end="3018:26">c</name></expr></argument>, <argument pos:start="3018:29" pos:end="3018:31"><expr pos:start="3018:29" pos:end="3018:31"><name pos:start="3018:29" pos:end="3018:31">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif" pos:start="3019:5" pos:end="3020:39">else if <condition pos:start="3019:13" pos:end="3019:35">(<expr pos:start="3019:14" pos:end="3019:34"><operator pos:start="3019:14" pos:end="3019:14">!</operator><call pos:start="3019:15" pos:end="3019:34"><name pos:start="3019:15" pos:end="3019:20">strcmp</name><argument_list pos:start="3019:21" pos:end="3019:34">(<argument pos:start="3019:22" pos:end="3019:24"><expr pos:start="3019:22" pos:end="3019:24"><name pos:start="3019:22" pos:end="3019:24">cmd</name></expr></argument>, <argument pos:start="3019:27" pos:end="3019:33"><expr pos:start="3019:27" pos:end="3019:33"><literal type="string" pos:start="3019:27" pos:end="3019:33">"SETUP"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3020:9" pos:end="3020:39"><block_content pos:start="3020:9" pos:end="3020:39">
        <expr_stmt pos:start="3020:9" pos:end="3020:39"><expr pos:start="3020:9" pos:end="3020:38"><call pos:start="3020:9" pos:end="3020:38"><name pos:start="3020:9" pos:end="3020:22">rtsp_cmd_setup</name><argument_list pos:start="3020:23" pos:end="3020:38">(<argument pos:start="3020:24" pos:end="3020:24"><expr pos:start="3020:24" pos:end="3020:24"><name pos:start="3020:24" pos:end="3020:24">c</name></expr></argument>, <argument pos:start="3020:27" pos:end="3020:29"><expr pos:start="3020:27" pos:end="3020:29"><name pos:start="3020:27" pos:end="3020:29">url</name></expr></argument>, <argument pos:start="3020:32" pos:end="3020:37"><expr pos:start="3020:32" pos:end="3020:37"><name pos:start="3020:32" pos:end="3020:37">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif" pos:start="3021:5" pos:end="3022:38">else if <condition pos:start="3021:13" pos:end="3021:34">(<expr pos:start="3021:14" pos:end="3021:33"><operator pos:start="3021:14" pos:end="3021:14">!</operator><call pos:start="3021:15" pos:end="3021:33"><name pos:start="3021:15" pos:end="3021:20">strcmp</name><argument_list pos:start="3021:21" pos:end="3021:33">(<argument pos:start="3021:22" pos:end="3021:24"><expr pos:start="3021:22" pos:end="3021:24"><name pos:start="3021:22" pos:end="3021:24">cmd</name></expr></argument>, <argument pos:start="3021:27" pos:end="3021:32"><expr pos:start="3021:27" pos:end="3021:32"><literal type="string" pos:start="3021:27" pos:end="3021:32">"PLAY"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3022:9" pos:end="3022:38"><block_content pos:start="3022:9" pos:end="3022:38">
        <expr_stmt pos:start="3022:9" pos:end="3022:38"><expr pos:start="3022:9" pos:end="3022:37"><call pos:start="3022:9" pos:end="3022:37"><name pos:start="3022:9" pos:end="3022:21">rtsp_cmd_play</name><argument_list pos:start="3022:22" pos:end="3022:37">(<argument pos:start="3022:23" pos:end="3022:23"><expr pos:start="3022:23" pos:end="3022:23"><name pos:start="3022:23" pos:end="3022:23">c</name></expr></argument>, <argument pos:start="3022:26" pos:end="3022:28"><expr pos:start="3022:26" pos:end="3022:28"><name pos:start="3022:26" pos:end="3022:28">url</name></expr></argument>, <argument pos:start="3022:31" pos:end="3022:36"><expr pos:start="3022:31" pos:end="3022:36"><name pos:start="3022:31" pos:end="3022:36">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif" pos:start="3023:5" pos:end="3024:46">else if <condition pos:start="3023:13" pos:end="3023:35">(<expr pos:start="3023:14" pos:end="3023:34"><operator pos:start="3023:14" pos:end="3023:14">!</operator><call pos:start="3023:15" pos:end="3023:34"><name pos:start="3023:15" pos:end="3023:20">strcmp</name><argument_list pos:start="3023:21" pos:end="3023:34">(<argument pos:start="3023:22" pos:end="3023:24"><expr pos:start="3023:22" pos:end="3023:24"><name pos:start="3023:22" pos:end="3023:24">cmd</name></expr></argument>, <argument pos:start="3023:27" pos:end="3023:33"><expr pos:start="3023:27" pos:end="3023:33"><literal type="string" pos:start="3023:27" pos:end="3023:33">"PAUSE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3024:9" pos:end="3024:46"><block_content pos:start="3024:9" pos:end="3024:46">
        <expr_stmt pos:start="3024:9" pos:end="3024:46"><expr pos:start="3024:9" pos:end="3024:45"><call pos:start="3024:9" pos:end="3024:45"><name pos:start="3024:9" pos:end="3024:26">rtsp_cmd_interrupt</name><argument_list pos:start="3024:27" pos:end="3024:45">(<argument pos:start="3024:28" pos:end="3024:28"><expr pos:start="3024:28" pos:end="3024:28"><name pos:start="3024:28" pos:end="3024:28">c</name></expr></argument>, <argument pos:start="3024:31" pos:end="3024:33"><expr pos:start="3024:31" pos:end="3024:33"><name pos:start="3024:31" pos:end="3024:33">url</name></expr></argument>, <argument pos:start="3024:36" pos:end="3024:41"><expr pos:start="3024:36" pos:end="3024:41"><name pos:start="3024:36" pos:end="3024:41">header</name></expr></argument>, <argument pos:start="3024:44" pos:end="3024:44"><expr pos:start="3024:44" pos:end="3024:44"><literal type="number" pos:start="3024:44" pos:end="3024:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif" pos:start="3025:5" pos:end="3026:46">else if <condition pos:start="3025:13" pos:end="3025:38">(<expr pos:start="3025:14" pos:end="3025:37"><operator pos:start="3025:14" pos:end="3025:14">!</operator><call pos:start="3025:15" pos:end="3025:37"><name pos:start="3025:15" pos:end="3025:20">strcmp</name><argument_list pos:start="3025:21" pos:end="3025:37">(<argument pos:start="3025:22" pos:end="3025:24"><expr pos:start="3025:22" pos:end="3025:24"><name pos:start="3025:22" pos:end="3025:24">cmd</name></expr></argument>, <argument pos:start="3025:27" pos:end="3025:36"><expr pos:start="3025:27" pos:end="3025:36"><literal type="string" pos:start="3025:27" pos:end="3025:36">"TEARDOWN"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3026:9" pos:end="3026:46"><block_content pos:start="3026:9" pos:end="3026:46">
        <expr_stmt pos:start="3026:9" pos:end="3026:46"><expr pos:start="3026:9" pos:end="3026:45"><call pos:start="3026:9" pos:end="3026:45"><name pos:start="3026:9" pos:end="3026:26">rtsp_cmd_interrupt</name><argument_list pos:start="3026:27" pos:end="3026:45">(<argument pos:start="3026:28" pos:end="3026:28"><expr pos:start="3026:28" pos:end="3026:28"><name pos:start="3026:28" pos:end="3026:28">c</name></expr></argument>, <argument pos:start="3026:31" pos:end="3026:33"><expr pos:start="3026:31" pos:end="3026:33"><name pos:start="3026:31" pos:end="3026:33">url</name></expr></argument>, <argument pos:start="3026:36" pos:end="3026:41"><expr pos:start="3026:36" pos:end="3026:41"><name pos:start="3026:36" pos:end="3026:41">header</name></expr></argument>, <argument pos:start="3026:44" pos:end="3026:44"><expr pos:start="3026:44" pos:end="3026:44"><literal type="number" pos:start="3026:44" pos:end="3026:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else pos:start="3027:5" pos:end="3028:48">else<block type="pseudo" pos:start="3028:9" pos:end="3028:48"><block_content pos:start="3028:9" pos:end="3028:48">
        <expr_stmt pos:start="3028:9" pos:end="3028:48"><expr pos:start="3028:9" pos:end="3028:47"><call pos:start="3028:9" pos:end="3028:47"><name pos:start="3028:9" pos:end="3028:24">rtsp_reply_error</name><argument_list pos:start="3028:25" pos:end="3028:47">(<argument pos:start="3028:26" pos:end="3028:26"><expr pos:start="3028:26" pos:end="3028:26"><name pos:start="3028:26" pos:end="3028:26">c</name></expr></argument>, <argument pos:start="3028:29" pos:end="3028:46"><expr pos:start="3028:29" pos:end="3028:46"><name pos:start="3028:29" pos:end="3028:46">RTSP_STATUS_METHOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

 <label pos:start="3030:2" pos:end="3030:9"><name pos:start="3030:2" pos:end="3030:8">the_end</name>:</label>
    <expr_stmt pos:start="3031:5" pos:end="3031:51"><expr pos:start="3031:5" pos:end="3031:50"><name pos:start="3031:5" pos:end="3031:7">len</name> <operator pos:start="3031:9" pos:end="3031:9">=</operator> <call pos:start="3031:11" pos:end="3031:50"><name pos:start="3031:11" pos:end="3031:28">avio_close_dyn_buf</name><argument_list pos:start="3031:29" pos:end="3031:50">(<argument pos:start="3031:30" pos:end="3031:34"><expr pos:start="3031:30" pos:end="3031:34"><name pos:start="3031:30" pos:end="3031:34"><name pos:start="3031:30" pos:end="3031:30">c</name><operator pos:start="3031:31" pos:end="3031:32">-&gt;</operator><name pos:start="3031:33" pos:end="3031:34">pb</name></name></expr></argument>, <argument pos:start="3031:37" pos:end="3031:49"><expr pos:start="3031:37" pos:end="3031:49"><operator pos:start="3031:37" pos:end="3031:37">&amp;</operator><name pos:start="3031:38" pos:end="3031:49"><name pos:start="3031:38" pos:end="3031:38">c</name><operator pos:start="3031:39" pos:end="3031:40">-&gt;</operator><name pos:start="3031:41" pos:end="3031:49">pb_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3032:5" pos:end="3032:17"><expr pos:start="3032:5" pos:end="3032:16"><name pos:start="3032:5" pos:end="3032:9"><name pos:start="3032:5" pos:end="3032:5">c</name><operator pos:start="3032:6" pos:end="3032:7">-&gt;</operator><name pos:start="3032:8" pos:end="3032:9">pb</name></name> <operator pos:start="3032:11" pos:end="3032:11">=</operator> <name pos:start="3032:13" pos:end="3032:16">NULL</name></expr>;</expr_stmt> <comment type="block" pos:start="3032:19" pos:end="3032:30">/* safety */</comment>
    <if_stmt pos:start="3033:5" pos:end="3035:18"><if pos:start="3033:5" pos:end="3035:18">if <condition pos:start="3033:8" pos:end="3033:16">(<expr pos:start="3033:9" pos:end="3033:15"><name pos:start="3033:9" pos:end="3033:11">len</name> <operator pos:start="3033:13" pos:end="3033:13">&lt;</operator> <literal type="number" pos:start="3033:15" pos:end="3033:15">0</literal></expr>)</condition><block type="pseudo" pos:start="3035:9" pos:end="3035:18"><block_content pos:start="3035:9" pos:end="3035:18">
        <comment type="block" pos:start="3034:9" pos:end="3034:33">/* XXX: cannot do more */</comment>
        <return pos:start="3035:9" pos:end="3035:18">return <expr pos:start="3035:16" pos:end="3035:17"><operator pos:start="3035:16" pos:end="3035:16">-</operator><literal type="number" pos:start="3035:17" pos:end="3035:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="3037:5" pos:end="3037:33"><expr pos:start="3037:5" pos:end="3037:32"><name pos:start="3037:5" pos:end="3037:17"><name pos:start="3037:5" pos:end="3037:5">c</name><operator pos:start="3037:6" pos:end="3037:7">-&gt;</operator><name pos:start="3037:8" pos:end="3037:17">buffer_ptr</name></name> <operator pos:start="3037:19" pos:end="3037:19">=</operator> <name pos:start="3037:21" pos:end="3037:32"><name pos:start="3037:21" pos:end="3037:21">c</name><operator pos:start="3037:22" pos:end="3037:23">-&gt;</operator><name pos:start="3037:24" pos:end="3037:32">pb_buffer</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="3038:5" pos:end="3038:39"><expr pos:start="3038:5" pos:end="3038:38"><name pos:start="3038:5" pos:end="3038:17"><name pos:start="3038:5" pos:end="3038:5">c</name><operator pos:start="3038:6" pos:end="3038:7">-&gt;</operator><name pos:start="3038:8" pos:end="3038:17">buffer_end</name></name> <operator pos:start="3038:19" pos:end="3038:19">=</operator> <name pos:start="3038:21" pos:end="3038:32"><name pos:start="3038:21" pos:end="3038:21">c</name><operator pos:start="3038:22" pos:end="3038:23">-&gt;</operator><name pos:start="3038:24" pos:end="3038:32">pb_buffer</name></name> <operator pos:start="3038:34" pos:end="3038:34">+</operator> <name pos:start="3038:36" pos:end="3038:38">len</name></expr>;</expr_stmt>
    <expr_stmt pos:start="3039:5" pos:end="3039:36"><expr pos:start="3039:5" pos:end="3039:35"><name pos:start="3039:5" pos:end="3039:12"><name pos:start="3039:5" pos:end="3039:5">c</name><operator pos:start="3039:6" pos:end="3039:7">-&gt;</operator><name pos:start="3039:8" pos:end="3039:12">state</name></name> <operator pos:start="3039:14" pos:end="3039:14">=</operator> <name pos:start="3039:16" pos:end="3039:35">RTSPSTATE_SEND_REPLY</name></expr>;</expr_stmt>
    <return pos:start="3040:5" pos:end="3040:13">return <expr pos:start="3040:12" pos:end="3040:12"><literal type="number" pos:start="3040:12" pos:end="3040:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="3043:1" pos:end="3086:1"><type pos:start="3043:1" pos:end="3043:10"><specifier pos:start="3043:1" pos:end="3043:6">static</specifier> <name pos:start="3043:8" pos:end="3043:10">int</name></type> <name pos:start="3043:12" pos:end="3043:34">prepare_sdp_description</name><parameter_list pos:start="3043:35" pos:end="3044:56">(<parameter pos:start="3043:36" pos:end="3043:57"><decl pos:start="3043:36" pos:end="3043:57"><type pos:start="3043:36" pos:end="3043:57"><name pos:start="3043:36" pos:end="3043:49">FFServerStream</name> <modifier pos:start="3043:51" pos:end="3043:51">*</modifier></type><name pos:start="3043:52" pos:end="3043:57">stream</name></decl></parameter>, <parameter pos:start="3043:60" pos:end="3043:76"><decl pos:start="3043:60" pos:end="3043:76"><type pos:start="3043:60" pos:end="3043:76"><name pos:start="3043:60" pos:end="3043:66">uint8_t</name> <modifier pos:start="3043:68" pos:end="3043:68">*</modifier><modifier pos:start="3043:69" pos:end="3043:69">*</modifier></type><name pos:start="3043:70" pos:end="3043:76">pbuffer</name></decl></parameter>,
                                   <parameter pos:start="3044:36" pos:end="3044:55"><decl pos:start="3044:36" pos:end="3044:55"><type pos:start="3044:36" pos:end="3044:55"><name pos:start="3044:36" pos:end="3044:49"><name pos:start="3044:36" pos:end="3044:41">struct</name> <name pos:start="3044:43" pos:end="3044:49">in_addr</name></name></type> <name pos:start="3044:51" pos:end="3044:55">my_ip</name></decl></parameter>)</parameter_list>
<block pos:start="3045:1" pos:end="3086:1">{<block_content pos:start="3046:5" pos:end="3085:57">
    <decl_stmt pos:start="3046:5" pos:end="3046:25"><decl pos:start="3046:5" pos:end="3046:24"><type pos:start="3046:5" pos:end="3046:21"><name pos:start="3046:5" pos:end="3046:19">AVFormatContext</name> <modifier pos:start="3046:21" pos:end="3046:21">*</modifier></type><name pos:start="3046:22" pos:end="3046:24">avc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3047:5" pos:end="3047:68"><decl pos:start="3047:5" pos:end="3047:67"><type pos:start="3047:5" pos:end="3047:20"><name pos:start="3047:5" pos:end="3047:18">AVOutputFormat</name> <modifier pos:start="3047:20" pos:end="3047:20">*</modifier></type><name pos:start="3047:21" pos:end="3047:30">rtp_format</name> <init pos:start="3047:32" pos:end="3047:67">= <expr pos:start="3047:34" pos:end="3047:67"><call pos:start="3047:34" pos:end="3047:67"><name pos:start="3047:34" pos:end="3047:48">av_guess_format</name><argument_list pos:start="3047:49" pos:end="3047:67">(<argument pos:start="3047:50" pos:end="3047:54"><expr pos:start="3047:50" pos:end="3047:54"><literal type="string" pos:start="3047:50" pos:end="3047:54">"rtp"</literal></expr></argument>, <argument pos:start="3047:57" pos:end="3047:60"><expr pos:start="3047:57" pos:end="3047:60"><name pos:start="3047:57" pos:end="3047:60">NULL</name></expr></argument>, <argument pos:start="3047:63" pos:end="3047:66"><expr pos:start="3047:63" pos:end="3047:66"><name pos:start="3047:63" pos:end="3047:66">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="3048:5" pos:end="3048:79"><decl pos:start="3048:5" pos:end="3048:78"><type pos:start="3048:5" pos:end="3048:23"><name pos:start="3048:5" pos:end="3048:21">AVDictionaryEntry</name> <modifier pos:start="3048:23" pos:end="3048:23">*</modifier></type><name pos:start="3048:24" pos:end="3048:28">entry</name> <init pos:start="3048:30" pos:end="3048:78">= <expr pos:start="3048:32" pos:end="3048:78"><call pos:start="3048:32" pos:end="3048:78"><name pos:start="3048:32" pos:end="3048:42">av_dict_get</name><argument_list pos:start="3048:43" pos:end="3048:78">(<argument pos:start="3048:44" pos:end="3048:59"><expr pos:start="3048:44" pos:end="3048:59"><name pos:start="3048:44" pos:end="3048:59"><name pos:start="3048:44" pos:end="3048:49">stream</name><operator pos:start="3048:50" pos:end="3048:51">-&gt;</operator><name pos:start="3048:52" pos:end="3048:59">metadata</name></name></expr></argument>, <argument pos:start="3048:62" pos:end="3048:68"><expr pos:start="3048:62" pos:end="3048:68"><literal type="string" pos:start="3048:62" pos:end="3048:68">"title"</literal></expr></argument>, <argument pos:start="3048:71" pos:end="3048:74"><expr pos:start="3048:71" pos:end="3048:74"><name pos:start="3048:71" pos:end="3048:74">NULL</name></expr></argument>, <argument pos:start="3048:77" pos:end="3048:77"><expr pos:start="3048:77" pos:end="3048:77"><literal type="number" pos:start="3048:77" pos:end="3048:77">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="3049:5" pos:end="3049:10"><decl pos:start="3049:5" pos:end="3049:9"><type pos:start="3049:5" pos:end="3049:7"><name pos:start="3049:5" pos:end="3049:7">int</name></type> <name pos:start="3049:9" pos:end="3049:9">i</name></decl>;</decl_stmt>

    <expr_stmt pos:start="3051:5" pos:end="3051:20"><expr pos:start="3051:5" pos:end="3051:19"><operator pos:start="3051:5" pos:end="3051:5">*</operator><name pos:start="3051:6" pos:end="3051:12">pbuffer</name> <operator pos:start="3051:14" pos:end="3051:14">=</operator> <name pos:start="3051:16" pos:end="3051:19">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="3053:5" pos:end="3053:36"><expr pos:start="3053:5" pos:end="3053:35"><name pos:start="3053:5" pos:end="3053:7">avc</name> <operator pos:start="3053:9" pos:end="3053:9">=</operator>  <call pos:start="3053:12" pos:end="3053:35"><name pos:start="3053:12" pos:end="3053:33">avformat_alloc_context</name><argument_list pos:start="3053:34" pos:end="3053:35">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3054:5" pos:end="3055:18"><if pos:start="3054:5" pos:end="3055:18">if <condition pos:start="3054:8" pos:end="3054:28">(<expr pos:start="3054:9" pos:end="3054:27"><operator pos:start="3054:9" pos:end="3054:9">!</operator><name pos:start="3054:10" pos:end="3054:12">avc</name> <operator pos:start="3054:14" pos:end="3054:15">||</operator> <operator pos:start="3054:17" pos:end="3054:17">!</operator><name pos:start="3054:18" pos:end="3054:27">rtp_format</name></expr>)</condition><block type="pseudo" pos:start="3055:9" pos:end="3055:18"><block_content pos:start="3055:9" pos:end="3055:18">
        <return pos:start="3055:9" pos:end="3055:18">return <expr pos:start="3055:16" pos:end="3055:17"><operator pos:start="3055:16" pos:end="3055:16">-</operator><literal type="number" pos:start="3055:17" pos:end="3055:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="3057:5" pos:end="3057:30"><expr pos:start="3057:5" pos:end="3057:29"><name pos:start="3057:5" pos:end="3057:16"><name pos:start="3057:5" pos:end="3057:7">avc</name><operator pos:start="3057:8" pos:end="3057:9">-&gt;</operator><name pos:start="3057:10" pos:end="3057:16">oformat</name></name> <operator pos:start="3057:18" pos:end="3057:18">=</operator> <name pos:start="3057:20" pos:end="3057:29">rtp_format</name></expr>;</expr_stmt>
    <expr_stmt pos:start="3058:5" pos:end="3059:54"><expr pos:start="3058:5" pos:end="3059:53"><call pos:start="3058:5" pos:end="3059:53"><name pos:start="3058:5" pos:end="3058:15">av_dict_set</name><argument_list pos:start="3058:16" pos:end="3059:53">(<argument pos:start="3058:17" pos:end="3058:30"><expr pos:start="3058:17" pos:end="3058:30"><operator pos:start="3058:17" pos:end="3058:17">&amp;</operator><name pos:start="3058:18" pos:end="3058:30"><name pos:start="3058:18" pos:end="3058:20">avc</name><operator pos:start="3058:21" pos:end="3058:22">-&gt;</operator><name pos:start="3058:23" pos:end="3058:30">metadata</name></name></expr></argument>, <argument pos:start="3058:33" pos:end="3058:39"><expr pos:start="3058:33" pos:end="3058:39"><literal type="string" pos:start="3058:33" pos:end="3058:39">"title"</literal></expr></argument>,
                <argument pos:start="3059:17" pos:end="3059:49"><expr pos:start="3059:17" pos:end="3059:49"><ternary pos:start="3059:17" pos:end="3059:49"><condition pos:start="3059:17" pos:end="3059:23"><expr pos:start="3059:17" pos:end="3059:21"><name pos:start="3059:17" pos:end="3059:21">entry</name></expr> ?</condition><then pos:start="3059:25" pos:end="3059:36"> <expr pos:start="3059:25" pos:end="3059:36"><name pos:start="3059:25" pos:end="3059:36"><name pos:start="3059:25" pos:end="3059:29">entry</name><operator pos:start="3059:30" pos:end="3059:31">-&gt;</operator><name pos:start="3059:32" pos:end="3059:36">value</name></name></expr> </then><else pos:start="3059:38" pos:end="3059:49">: <expr pos:start="3059:40" pos:end="3059:49"><literal type="string" pos:start="3059:40" pos:end="3059:49">"No Title"</literal></expr></else></ternary></expr></argument>, <argument pos:start="3059:52" pos:end="3059:52"><expr pos:start="3059:52" pos:end="3059:52"><literal type="number" pos:start="3059:52" pos:end="3059:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3060:5" pos:end="3065:55"><if pos:start="3060:5" pos:end="3064:5">if <condition pos:start="3060:8" pos:end="3060:29">(<expr pos:start="3060:9" pos:end="3060:28"><name pos:start="3060:9" pos:end="3060:28"><name pos:start="3060:9" pos:end="3060:14">stream</name><operator pos:start="3060:15" pos:end="3060:16">-&gt;</operator><name pos:start="3060:17" pos:end="3060:28">is_multicast</name></name></expr>)</condition> <block pos:start="3060:31" pos:end="3064:5">{<block_content pos:start="3061:9" pos:end="3063:64">
        <expr_stmt pos:start="3061:9" pos:end="3063:64"><expr pos:start="3061:9" pos:end="3063:63"><call pos:start="3061:9" pos:end="3063:63"><name pos:start="3061:9" pos:end="3061:16">snprintf</name><argument_list pos:start="3061:17" pos:end="3063:63">(<argument pos:start="3061:18" pos:end="3061:30"><expr pos:start="3061:18" pos:end="3061:30"><name pos:start="3061:18" pos:end="3061:30"><name pos:start="3061:18" pos:end="3061:20">avc</name><operator pos:start="3061:21" pos:end="3061:22">-&gt;</operator><name pos:start="3061:23" pos:end="3061:30">filename</name></name></expr></argument>, <argument pos:start="3061:33" pos:end="3061:36"><expr pos:start="3061:33" pos:end="3061:36"><literal type="number" pos:start="3061:33" pos:end="3061:36">1024</literal></expr></argument>, <argument pos:start="3061:39" pos:end="3061:70"><expr pos:start="3061:39" pos:end="3061:70"><literal type="string" pos:start="3061:39" pos:end="3061:70">"rtp://%s:%d?multicast=1?ttl=%d"</literal></expr></argument>,
                 <argument pos:start="3062:18" pos:end="3062:48"><expr pos:start="3062:18" pos:end="3062:48"><call pos:start="3062:18" pos:end="3062:48"><name pos:start="3062:18" pos:end="3062:26">inet_ntoa</name><argument_list pos:start="3062:27" pos:end="3062:48">(<argument pos:start="3062:28" pos:end="3062:47"><expr pos:start="3062:28" pos:end="3062:47"><name pos:start="3062:28" pos:end="3062:47"><name pos:start="3062:28" pos:end="3062:33">stream</name><operator pos:start="3062:34" pos:end="3062:35">-&gt;</operator><name pos:start="3062:36" pos:end="3062:47">multicast_ip</name></name></expr></argument>)</argument_list></call></expr></argument>,
                 <argument pos:start="3063:18" pos:end="3063:39"><expr pos:start="3063:18" pos:end="3063:39"><name pos:start="3063:18" pos:end="3063:39"><name pos:start="3063:18" pos:end="3063:23">stream</name><operator pos:start="3063:24" pos:end="3063:25">-&gt;</operator><name pos:start="3063:26" pos:end="3063:39">multicast_port</name></name></expr></argument>, <argument pos:start="3063:42" pos:end="3063:62"><expr pos:start="3063:42" pos:end="3063:62"><name pos:start="3063:42" pos:end="3063:62"><name pos:start="3063:42" pos:end="3063:47">stream</name><operator pos:start="3063:48" pos:end="3063:49">-&gt;</operator><name pos:start="3063:50" pos:end="3063:62">multicast_ttl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="3064:7" pos:end="3065:55">else<block type="pseudo" pos:start="3065:9" pos:end="3065:55"><block_content pos:start="3065:9" pos:end="3065:55">
        <expr_stmt pos:start="3065:9" pos:end="3065:55"><expr pos:start="3065:9" pos:end="3065:54"><call pos:start="3065:9" pos:end="3065:54"><name pos:start="3065:9" pos:end="3065:16">snprintf</name><argument_list pos:start="3065:17" pos:end="3065:54">(<argument pos:start="3065:18" pos:end="3065:30"><expr pos:start="3065:18" pos:end="3065:30"><name pos:start="3065:18" pos:end="3065:30"><name pos:start="3065:18" pos:end="3065:20">avc</name><operator pos:start="3065:21" pos:end="3065:22">-&gt;</operator><name pos:start="3065:23" pos:end="3065:30">filename</name></name></expr></argument>, <argument pos:start="3065:33" pos:end="3065:36"><expr pos:start="3065:33" pos:end="3065:36"><literal type="number" pos:start="3065:33" pos:end="3065:36">1024</literal></expr></argument>, <argument pos:start="3065:39" pos:end="3065:53"><expr pos:start="3065:39" pos:end="3065:53"><literal type="string" pos:start="3065:39" pos:end="3065:53">"rtp://0.0.0.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <for pos:start="3067:5" pos:end="3075:0">for<control pos:start="3067:8" pos:end="3067:43">(<init pos:start="3067:9" pos:end="3067:14"><expr pos:start="3067:9" pos:end="3067:13"><name pos:start="3067:9" pos:end="3067:9">i</name> <operator pos:start="3067:11" pos:end="3067:11">=</operator> <literal type="number" pos:start="3067:13" pos:end="3067:13">0</literal></expr>;</init> <condition pos:start="3067:16" pos:end="3067:38"><expr pos:start="3067:16" pos:end="3067:37"><name pos:start="3067:16" pos:end="3067:16">i</name> <operator pos:start="3067:18" pos:end="3067:18">&lt;</operator> <name pos:start="3067:20" pos:end="3067:37"><name pos:start="3067:20" pos:end="3067:25">stream</name><operator pos:start="3067:26" pos:end="3067:27">-&gt;</operator><name pos:start="3067:28" pos:end="3067:37">nb_streams</name></name></expr>;</condition> <incr pos:start="3067:40" pos:end="3067:42"><expr pos:start="3067:40" pos:end="3067:42"><name pos:start="3067:40" pos:end="3067:40">i</name><operator pos:start="3067:41" pos:end="3067:42">++</operator></expr></incr>)</control> <block pos:start="3067:45" pos:end="3075:0">{<block_content pos:start="3068:9" pos:end="3072:47">
        <decl_stmt pos:start="3068:9" pos:end="3068:54"><decl pos:start="3068:9" pos:end="3068:53"><type pos:start="3068:9" pos:end="3068:18"><name pos:start="3068:9" pos:end="3068:16">AVStream</name> <modifier pos:start="3068:18" pos:end="3068:18">*</modifier></type><name pos:start="3068:19" pos:end="3068:20">st</name> <init pos:start="3068:22" pos:end="3068:53">= <expr pos:start="3068:24" pos:end="3068:53"><call pos:start="3068:24" pos:end="3068:53"><name pos:start="3068:24" pos:end="3068:42">avformat_new_stream</name><argument_list pos:start="3068:43" pos:end="3068:53">(<argument pos:start="3068:44" pos:end="3068:46"><expr pos:start="3068:44" pos:end="3068:46"><name pos:start="3068:44" pos:end="3068:46">avc</name></expr></argument>, <argument pos:start="3068:49" pos:end="3068:52"><expr pos:start="3068:49" pos:end="3068:52"><name pos:start="3068:49" pos:end="3068:52">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="3069:9" pos:end="3070:26"><if pos:start="3069:9" pos:end="3070:26">if <condition pos:start="3069:12" pos:end="3069:16">(<expr pos:start="3069:13" pos:end="3069:15"><operator pos:start="3069:13" pos:end="3069:13">!</operator><name pos:start="3069:14" pos:end="3069:15">st</name></expr>)</condition><block type="pseudo" pos:start="3070:13" pos:end="3070:26"><block_content pos:start="3070:13" pos:end="3070:26">
            <goto pos:start="3070:13" pos:end="3070:26">goto <name pos:start="3070:18" pos:end="3070:25">sdp_done</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="3071:9" pos:end="3071:97"><expr pos:start="3071:9" pos:end="3071:96"><call pos:start="3071:9" pos:end="3071:96"><name pos:start="3071:9" pos:end="3071:39">avcodec_parameters_from_context</name><argument_list pos:start="3071:40" pos:end="3071:96">(<argument pos:start="3071:41" pos:end="3071:68"><expr pos:start="3071:41" pos:end="3071:68"><name pos:start="3071:41" pos:end="3071:58"><name pos:start="3071:41" pos:end="3071:46">stream</name><operator pos:start="3071:47" pos:end="3071:48">-&gt;</operator><name pos:start="3071:49" pos:end="3071:55">streams</name><index pos:start="3071:56" pos:end="3071:58">[<expr pos:start="3071:57" pos:end="3071:57"><name pos:start="3071:57" pos:end="3071:57">i</name></expr>]</index></name><operator pos:start="3071:59" pos:end="3071:60">-&gt;</operator><name pos:start="3071:61" pos:end="3071:68">codecpar</name></expr></argument>, <argument pos:start="3071:71" pos:end="3071:95"><expr pos:start="3071:71" pos:end="3071:95"><name pos:start="3071:71" pos:end="3071:88"><name pos:start="3071:71" pos:end="3071:76">stream</name><operator pos:start="3071:77" pos:end="3071:78">-&gt;</operator><name pos:start="3071:79" pos:end="3071:85">streams</name><index pos:start="3071:86" pos:end="3071:88">[<expr pos:start="3071:87" pos:end="3071:87"><name pos:start="3071:87" pos:end="3071:87">i</name></expr>]</index></name><operator pos:start="3071:89" pos:end="3071:90">-&gt;</operator><name pos:start="3071:91" pos:end="3071:95">codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3072:9" pos:end="3072:47"><expr pos:start="3072:9" pos:end="3072:46"><call pos:start="3072:9" pos:end="3072:46"><name pos:start="3072:9" pos:end="3072:22">unlayer_stream</name><argument_list pos:start="3072:23" pos:end="3072:46">(<argument pos:start="3072:24" pos:end="3072:25"><expr pos:start="3072:24" pos:end="3072:25"><name pos:start="3072:24" pos:end="3072:25">st</name></expr></argument>, <argument pos:start="3072:28" pos:end="3072:45"><expr pos:start="3072:28" pos:end="3072:45"><name pos:start="3072:28" pos:end="3072:45"><name pos:start="3072:28" pos:end="3072:33">stream</name><operator pos:start="3072:34" pos:end="3072:35">-&gt;</operator><name pos:start="3072:36" pos:end="3072:42">streams</name><index pos:start="3072:43" pos:end="3072:45">[<expr pos:start="3072:44" pos:end="3072:44"><name pos:start="3072:44" pos:end="3072:44">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
<cpp:define pos:start="3074:1" pos:end="3074:25">#<cpp:directive pos:start="3074:2" pos:end="3074:7">define</cpp:directive> <cpp:macro pos:start="3074:9" pos:end="3074:20"><name pos:start="3074:9" pos:end="3074:20">PBUFFER_SIZE</name></cpp:macro> <cpp:value pos:start="3074:22" pos:end="3074:25">2048</cpp:value></cpp:define>
    <expr_stmt pos:start="3075:5" pos:end="3075:40"><expr pos:start="3075:5" pos:end="3075:39"><operator pos:start="3075:5" pos:end="3075:5">*</operator><name pos:start="3075:6" pos:end="3075:12">pbuffer</name> <operator pos:start="3075:14" pos:end="3075:14">=</operator> <call pos:start="3075:16" pos:end="3075:39"><name pos:start="3075:16" pos:end="3075:25">av_mallocz</name><argument_list pos:start="3075:26" pos:end="3075:39">(<argument pos:start="3075:27" pos:end="3075:38"><expr pos:start="3075:27" pos:end="3075:38"><name pos:start="3075:27" pos:end="3075:38">PBUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3076:5" pos:end="3077:22"><if pos:start="3076:5" pos:end="3077:22">if <condition pos:start="3076:8" pos:end="3076:18">(<expr pos:start="3076:9" pos:end="3076:17"><operator pos:start="3076:9" pos:end="3076:9">!</operator><operator pos:start="3076:10" pos:end="3076:10">*</operator><name pos:start="3076:11" pos:end="3076:17">pbuffer</name></expr>)</condition><block type="pseudo" pos:start="3077:9" pos:end="3077:22"><block_content pos:start="3077:9" pos:end="3077:22">
        <goto pos:start="3077:9" pos:end="3077:22">goto <name pos:start="3077:14" pos:end="3077:21">sdp_done</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt pos:start="3078:5" pos:end="3078:51"><expr pos:start="3078:5" pos:end="3078:50"><call pos:start="3078:5" pos:end="3078:50"><name pos:start="3078:5" pos:end="3078:17">av_sdp_create</name><argument_list pos:start="3078:18" pos:end="3078:50">(<argument pos:start="3078:19" pos:end="3078:22"><expr pos:start="3078:19" pos:end="3078:22"><operator pos:start="3078:19" pos:end="3078:19">&amp;</operator><name pos:start="3078:20" pos:end="3078:22">avc</name></expr></argument>, <argument pos:start="3078:25" pos:end="3078:25"><expr pos:start="3078:25" pos:end="3078:25"><literal type="number" pos:start="3078:25" pos:end="3078:25">1</literal></expr></argument>, <argument pos:start="3078:28" pos:end="3078:35"><expr pos:start="3078:28" pos:end="3078:35"><operator pos:start="3078:28" pos:end="3078:28">*</operator><name pos:start="3078:29" pos:end="3078:35">pbuffer</name></expr></argument>, <argument pos:start="3078:38" pos:end="3078:49"><expr pos:start="3078:38" pos:end="3078:49"><name pos:start="3078:38" pos:end="3078:49">PBUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

 <label pos:start="3080:2" pos:end="3080:10"><name pos:start="3080:2" pos:end="3080:9">sdp_done</name>:</label>
    <expr_stmt pos:start="3081:5" pos:end="3081:28"><expr pos:start="3081:5" pos:end="3081:27"><call pos:start="3081:5" pos:end="3081:27"><name pos:start="3081:5" pos:end="3081:12">av_freep</name><argument_list pos:start="3081:13" pos:end="3081:27">(<argument pos:start="3081:14" pos:end="3081:26"><expr pos:start="3081:14" pos:end="3081:26"><operator pos:start="3081:14" pos:end="3081:14">&amp;</operator><name pos:start="3081:15" pos:end="3081:26"><name pos:start="3081:15" pos:end="3081:17">avc</name><operator pos:start="3081:18" pos:end="3081:19">-&gt;</operator><name pos:start="3081:20" pos:end="3081:26">streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3082:5" pos:end="3082:33"><expr pos:start="3082:5" pos:end="3082:32"><call pos:start="3082:5" pos:end="3082:32"><name pos:start="3082:5" pos:end="3082:16">av_dict_free</name><argument_list pos:start="3082:17" pos:end="3082:32">(<argument pos:start="3082:18" pos:end="3082:31"><expr pos:start="3082:18" pos:end="3082:31"><operator pos:start="3082:18" pos:end="3082:18">&amp;</operator><name pos:start="3082:19" pos:end="3082:31"><name pos:start="3082:19" pos:end="3082:21">avc</name><operator pos:start="3082:22" pos:end="3082:23">-&gt;</operator><name pos:start="3082:24" pos:end="3082:31">metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3083:5" pos:end="3083:17"><expr pos:start="3083:5" pos:end="3083:16"><call pos:start="3083:5" pos:end="3083:16"><name pos:start="3083:5" pos:end="3083:11">av_free</name><argument_list pos:start="3083:12" pos:end="3083:16">(<argument pos:start="3083:13" pos:end="3083:15"><expr pos:start="3083:13" pos:end="3083:15"><name pos:start="3083:13" pos:end="3083:15">avc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="3085:5" pos:end="3085:57">return <expr pos:start="3085:12" pos:end="3085:56"><ternary pos:start="3085:12" pos:end="3085:56"><condition pos:start="3085:12" pos:end="3085:21"><expr pos:start="3085:12" pos:end="3085:19"><operator pos:start="3085:12" pos:end="3085:12">*</operator><name pos:start="3085:13" pos:end="3085:19">pbuffer</name></expr> ?</condition><then pos:start="3085:23" pos:end="3085:38"> <expr pos:start="3085:23" pos:end="3085:38"><call pos:start="3085:23" pos:end="3085:38"><name pos:start="3085:23" pos:end="3085:28">strlen</name><argument_list pos:start="3085:29" pos:end="3085:38">(<argument pos:start="3085:30" pos:end="3085:37"><expr pos:start="3085:30" pos:end="3085:37"><operator pos:start="3085:30" pos:end="3085:30">*</operator><name pos:start="3085:31" pos:end="3085:37">pbuffer</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="3085:40" pos:end="3085:56">: <expr pos:start="3085:42" pos:end="3085:56"><call pos:start="3085:42" pos:end="3085:56"><name pos:start="3085:42" pos:end="3085:48">AVERROR</name><argument_list pos:start="3085:49" pos:end="3085:56">(<argument pos:start="3085:50" pos:end="3085:55"><expr pos:start="3085:50" pos:end="3085:55"><name pos:start="3085:50" pos:end="3085:55">ENOMEM</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function pos:start="3088:1" pos:end="3096:1"><type pos:start="3088:1" pos:end="3088:11"><specifier pos:start="3088:1" pos:end="3088:6">static</specifier> <name pos:start="3088:8" pos:end="3088:11">void</name></type> <name pos:start="3088:13" pos:end="3088:28">rtsp_cmd_options</name><parameter_list pos:start="3088:29" pos:end="3088:61">(<parameter pos:start="3088:30" pos:end="3088:43"><decl pos:start="3088:30" pos:end="3088:43"><type pos:start="3088:30" pos:end="3088:43"><name pos:start="3088:30" pos:end="3088:40">HTTPContext</name> <modifier pos:start="3088:42" pos:end="3088:42">*</modifier></type><name pos:start="3088:43" pos:end="3088:43">c</name></decl></parameter>, <parameter pos:start="3088:46" pos:end="3088:60"><decl pos:start="3088:46" pos:end="3088:60"><type pos:start="3088:46" pos:end="3088:60"><specifier pos:start="3088:46" pos:end="3088:50">const</specifier> <name pos:start="3088:52" pos:end="3088:55">char</name> <modifier pos:start="3088:57" pos:end="3088:57">*</modifier></type><name pos:start="3088:58" pos:end="3088:60">url</name></decl></parameter>)</parameter_list>
<block pos:start="3089:1" pos:end="3096:1">{<block_content pos:start="3091:5" pos:end="3095:31">
    <comment type="block" pos:start="3090:5" pos:end="3090:47">/* rtsp_reply_header(c, RTSP_STATUS_OK); */</comment>
    <expr_stmt pos:start="3091:5" pos:end="3091:67"><expr pos:start="3091:5" pos:end="3091:66"><call pos:start="3091:5" pos:end="3091:66"><name pos:start="3091:5" pos:end="3091:15">avio_printf</name><argument_list pos:start="3091:16" pos:end="3091:66">(<argument pos:start="3091:17" pos:end="3091:21"><expr pos:start="3091:17" pos:end="3091:21"><name pos:start="3091:17" pos:end="3091:21"><name pos:start="3091:17" pos:end="3091:17">c</name><operator pos:start="3091:18" pos:end="3091:19">-&gt;</operator><name pos:start="3091:20" pos:end="3091:21">pb</name></name></expr></argument>, <argument pos:start="3091:24" pos:end="3091:43"><expr pos:start="3091:24" pos:end="3091:43"><literal type="string" pos:start="3091:24" pos:end="3091:43">"RTSP/1.0 %d %s\r\n"</literal></expr></argument>, <argument pos:start="3091:46" pos:end="3091:59"><expr pos:start="3091:46" pos:end="3091:59"><name pos:start="3091:46" pos:end="3091:59">RTSP_STATUS_OK</name></expr></argument>, <argument pos:start="3091:62" pos:end="3091:65"><expr pos:start="3091:62" pos:end="3091:65"><literal type="string" pos:start="3091:62" pos:end="3091:65">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3092:5" pos:end="3092:47"><expr pos:start="3092:5" pos:end="3092:46"><call pos:start="3092:5" pos:end="3092:46"><name pos:start="3092:5" pos:end="3092:15">avio_printf</name><argument_list pos:start="3092:16" pos:end="3092:46">(<argument pos:start="3092:17" pos:end="3092:21"><expr pos:start="3092:17" pos:end="3092:21"><name pos:start="3092:17" pos:end="3092:21"><name pos:start="3092:17" pos:end="3092:17">c</name><operator pos:start="3092:18" pos:end="3092:19">-&gt;</operator><name pos:start="3092:20" pos:end="3092:21">pb</name></name></expr></argument>, <argument pos:start="3092:24" pos:end="3092:37"><expr pos:start="3092:24" pos:end="3092:37"><literal type="string" pos:start="3092:24" pos:end="3092:37">"CSeq: %d\r\n"</literal></expr></argument>, <argument pos:start="3092:40" pos:end="3092:45"><expr pos:start="3092:40" pos:end="3092:45"><name pos:start="3092:40" pos:end="3092:45"><name pos:start="3092:40" pos:end="3092:40">c</name><operator pos:start="3092:41" pos:end="3092:42">-&gt;</operator><name pos:start="3092:43" pos:end="3092:45">seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3093:5" pos:end="3094:67"><expr pos:start="3093:5" pos:end="3094:66"><call pos:start="3093:5" pos:end="3094:66"><name pos:start="3093:5" pos:end="3093:15">avio_printf</name><argument_list pos:start="3093:16" pos:end="3094:66">(<argument pos:start="3093:17" pos:end="3093:21"><expr pos:start="3093:17" pos:end="3093:21"><name pos:start="3093:17" pos:end="3093:21"><name pos:start="3093:17" pos:end="3093:17">c</name><operator pos:start="3093:18" pos:end="3093:19">-&gt;</operator><name pos:start="3093:20" pos:end="3093:21">pb</name></name></expr></argument>, <argument pos:start="3093:24" pos:end="3093:39"><expr pos:start="3093:24" pos:end="3093:39"><literal type="string" pos:start="3093:24" pos:end="3093:39">"Public: %s\r\n"</literal></expr></argument>,
                <argument pos:start="3094:17" pos:end="3094:65"><expr pos:start="3094:17" pos:end="3094:65"><literal type="string" pos:start="3094:17" pos:end="3094:65">"OPTIONS, DESCRIBE, SETUP, TEARDOWN, PLAY, PAUSE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3095:5" pos:end="3095:31"><expr pos:start="3095:5" pos:end="3095:30"><call pos:start="3095:5" pos:end="3095:30"><name pos:start="3095:5" pos:end="3095:15">avio_printf</name><argument_list pos:start="3095:16" pos:end="3095:30">(<argument pos:start="3095:17" pos:end="3095:21"><expr pos:start="3095:17" pos:end="3095:21"><name pos:start="3095:17" pos:end="3095:21"><name pos:start="3095:17" pos:end="3095:17">c</name><operator pos:start="3095:18" pos:end="3095:19">-&gt;</operator><name pos:start="3095:20" pos:end="3095:21">pb</name></name></expr></argument>, <argument pos:start="3095:24" pos:end="3095:29"><expr pos:start="3095:24" pos:end="3095:29"><literal type="string" pos:start="3095:24" pos:end="3095:29">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="3098:1" pos:end="3147:1"><type pos:start="3098:1" pos:end="3098:11"><specifier pos:start="3098:1" pos:end="3098:6">static</specifier> <name pos:start="3098:8" pos:end="3098:11">void</name></type> <name pos:start="3098:13" pos:end="3098:29">rtsp_cmd_describe</name><parameter_list pos:start="3098:30" pos:end="3098:62">(<parameter pos:start="3098:31" pos:end="3098:44"><decl pos:start="3098:31" pos:end="3098:44"><type pos:start="3098:31" pos:end="3098:44"><name pos:start="3098:31" pos:end="3098:41">HTTPContext</name> <modifier pos:start="3098:43" pos:end="3098:43">*</modifier></type><name pos:start="3098:44" pos:end="3098:44">c</name></decl></parameter>, <parameter pos:start="3098:47" pos:end="3098:61"><decl pos:start="3098:47" pos:end="3098:61"><type pos:start="3098:47" pos:end="3098:61"><specifier pos:start="3098:47" pos:end="3098:51">const</specifier> <name pos:start="3098:53" pos:end="3098:56">char</name> <modifier pos:start="3098:58" pos:end="3098:58">*</modifier></type><name pos:start="3098:59" pos:end="3098:61">url</name></decl></parameter>)</parameter_list>
<block pos:start="3099:1" pos:end="3147:1">{<block_content pos:start="3100:5" pos:end="3146:21">
    <decl_stmt pos:start="3100:5" pos:end="3100:27"><decl pos:start="3100:5" pos:end="3100:26"><type pos:start="3100:5" pos:end="3100:20"><name pos:start="3100:5" pos:end="3100:18">FFServerStream</name> <modifier pos:start="3100:20" pos:end="3100:20">*</modifier></type><name pos:start="3100:21" pos:end="3100:26">stream</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3101:5" pos:end="3101:21"><decl pos:start="3101:5" pos:end="3101:20"><type pos:start="3101:5" pos:end="3101:8"><name pos:start="3101:5" pos:end="3101:8">char</name></type> <name pos:start="3101:10" pos:end="3101:20"><name pos:start="3101:10" pos:end="3101:14">path1</name><index pos:start="3101:15" pos:end="3101:20">[<expr pos:start="3101:16" pos:end="3101:19"><literal type="number" pos:start="3101:16" pos:end="3101:19">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="3102:5" pos:end="3102:21"><decl pos:start="3102:5" pos:end="3102:20"><type pos:start="3102:5" pos:end="3102:16"><specifier pos:start="3102:5" pos:end="3102:9">const</specifier> <name pos:start="3102:11" pos:end="3102:14">char</name> <modifier pos:start="3102:16" pos:end="3102:16">*</modifier></type><name pos:start="3102:17" pos:end="3102:20">path</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3103:5" pos:end="3103:21"><decl pos:start="3103:5" pos:end="3103:20"><type pos:start="3103:5" pos:end="3103:13"><name pos:start="3103:5" pos:end="3103:11">uint8_t</name> <modifier pos:start="3103:13" pos:end="3103:13">*</modifier></type><name pos:start="3103:14" pos:end="3103:20">content</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3104:5" pos:end="3104:23"><decl pos:start="3104:5" pos:end="3104:22"><type pos:start="3104:5" pos:end="3104:7"><name pos:start="3104:5" pos:end="3104:7">int</name></type> <name pos:start="3104:9" pos:end="3104:22">content_length</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3105:5" pos:end="3105:18"><decl pos:start="3105:5" pos:end="3105:17"><type pos:start="3105:5" pos:end="3105:13"><name pos:start="3105:5" pos:end="3105:13">socklen_t</name></type> <name pos:start="3105:15" pos:end="3105:17">len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3106:5" pos:end="3106:31"><decl pos:start="3106:5" pos:end="3106:30"><type pos:start="3106:5" pos:end="3106:22"><name pos:start="3106:5" pos:end="3106:22"><name pos:start="3106:5" pos:end="3106:10">struct</name> <name pos:start="3106:12" pos:end="3106:22">sockaddr_in</name></name></type> <name pos:start="3106:24" pos:end="3106:30">my_addr</name></decl>;</decl_stmt>

    <comment type="block" pos:start="3108:5" pos:end="3108:33">/* find which URL is asked */</comment>
    <expr_stmt pos:start="3109:5" pos:end="3109:77"><expr pos:start="3109:5" pos:end="3109:76"><call pos:start="3109:5" pos:end="3109:76"><name pos:start="3109:5" pos:end="3109:16">av_url_split</name><argument_list pos:start="3109:17" pos:end="3109:76">(<argument pos:start="3109:18" pos:end="3109:21"><expr pos:start="3109:18" pos:end="3109:21"><name pos:start="3109:18" pos:end="3109:21">NULL</name></expr></argument>, <argument pos:start="3109:24" pos:end="3109:24"><expr pos:start="3109:24" pos:end="3109:24"><literal type="number" pos:start="3109:24" pos:end="3109:24">0</literal></expr></argument>, <argument pos:start="3109:27" pos:end="3109:30"><expr pos:start="3109:27" pos:end="3109:30"><name pos:start="3109:27" pos:end="3109:30">NULL</name></expr></argument>, <argument pos:start="3109:33" pos:end="3109:33"><expr pos:start="3109:33" pos:end="3109:33"><literal type="number" pos:start="3109:33" pos:end="3109:33">0</literal></expr></argument>, <argument pos:start="3109:36" pos:end="3109:39"><expr pos:start="3109:36" pos:end="3109:39"><name pos:start="3109:36" pos:end="3109:39">NULL</name></expr></argument>, <argument pos:start="3109:42" pos:end="3109:42"><expr pos:start="3109:42" pos:end="3109:42"><literal type="number" pos:start="3109:42" pos:end="3109:42">0</literal></expr></argument>, <argument pos:start="3109:45" pos:end="3109:48"><expr pos:start="3109:45" pos:end="3109:48"><name pos:start="3109:45" pos:end="3109:48">NULL</name></expr></argument>, <argument pos:start="3109:51" pos:end="3109:55"><expr pos:start="3109:51" pos:end="3109:55"><name pos:start="3109:51" pos:end="3109:55">path1</name></expr></argument>, <argument pos:start="3109:58" pos:end="3109:70"><expr pos:start="3109:58" pos:end="3109:70"><sizeof pos:start="3109:58" pos:end="3109:70">sizeof<argument_list pos:start="3109:64" pos:end="3109:70">(<argument pos:start="3109:65" pos:end="3109:69"><expr pos:start="3109:65" pos:end="3109:69"><name pos:start="3109:65" pos:end="3109:69">path1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="3109:73" pos:end="3109:75"><expr pos:start="3109:73" pos:end="3109:75"><name pos:start="3109:73" pos:end="3109:75">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3110:5" pos:end="3110:17"><expr pos:start="3110:5" pos:end="3110:16"><name pos:start="3110:5" pos:end="3110:8">path</name> <operator pos:start="3110:10" pos:end="3110:10">=</operator> <name pos:start="3110:12" pos:end="3110:16">path1</name></expr>;</expr_stmt>
    <if_stmt pos:start="3111:5" pos:end="3112:15"><if pos:start="3111:5" pos:end="3112:15">if <condition pos:start="3111:8" pos:end="3111:21">(<expr pos:start="3111:9" pos:end="3111:20"><operator pos:start="3111:9" pos:end="3111:9">*</operator><name pos:start="3111:10" pos:end="3111:13">path</name> <operator pos:start="3111:15" pos:end="3111:16">==</operator> <literal type="char" pos:start="3111:18" pos:end="3111:20">'/'</literal></expr>)</condition><block type="pseudo" pos:start="3112:9" pos:end="3112:15"><block_content pos:start="3112:9" pos:end="3112:15">
        <expr_stmt pos:start="3112:9" pos:end="3112:15"><expr pos:start="3112:9" pos:end="3112:14"><name pos:start="3112:9" pos:end="3112:12">path</name><operator pos:start="3112:13" pos:end="3112:14">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="3114:5" pos:end="3123:5">for<control pos:start="3114:8" pos:end="3114:68">(<init pos:start="3114:9" pos:end="3114:37"><expr pos:start="3114:9" pos:end="3114:36"><name pos:start="3114:9" pos:end="3114:14">stream</name> <operator pos:start="3114:16" pos:end="3114:16">=</operator> <name pos:start="3114:18" pos:end="3114:36"><name pos:start="3114:18" pos:end="3114:23">config</name><operator pos:start="3114:24" pos:end="3114:24">.</operator><name pos:start="3114:25" pos:end="3114:36">first_stream</name></name></expr>;</init> <condition pos:start="3114:39" pos:end="3114:45"><expr pos:start="3114:39" pos:end="3114:44"><name pos:start="3114:39" pos:end="3114:44">stream</name></expr>;</condition> <incr pos:start="3114:47" pos:end="3114:67"><expr pos:start="3114:47" pos:end="3114:67"><name pos:start="3114:47" pos:end="3114:52">stream</name> <operator pos:start="3114:54" pos:end="3114:54">=</operator> <name pos:start="3114:56" pos:end="3114:67"><name pos:start="3114:56" pos:end="3114:61">stream</name><operator pos:start="3114:62" pos:end="3114:63">-&gt;</operator><name pos:start="3114:64" pos:end="3114:67">next</name></name></expr></incr>)</control> <block pos:start="3114:70" pos:end="3123:5">{<block_content pos:start="3115:9" pos:end="3122:12">
        <if_stmt pos:start="3115:9" pos:end="3122:12"><if pos:start="3115:9" pos:end="3122:12">if <condition pos:start="3115:12" pos:end="3115:30">(<expr pos:start="3115:13" pos:end="3115:28"><operator pos:start="3115:13" pos:end="3115:13">!</operator><name pos:start="3115:14" pos:end="3115:28"><name pos:start="3115:14" pos:end="3115:19">stream</name><operator pos:start="3115:20" pos:end="3115:21">-&gt;</operator><name pos:start="3115:22" pos:end="3115:28">is_feed</name></name></expr> )</condition><block pos:start="3115:31" pos:end="3122:12">{<block_content pos:start="3116:1" pos:end="3122:11">
<if_stmt pos:start="3116:1" pos:end="3122:11"><if pos:start="3116:1" pos:end="3122:11">if<condition pos:start="3116:3" pos:end="3117:25">(
            <expr pos:start="3117:13" pos:end="3117:23"><name pos:start="3117:13" pos:end="3117:23"><name pos:start="3117:13" pos:end="3117:18">stream</name><operator pos:start="3117:19" pos:end="3117:20">-&gt;</operator><name pos:start="3117:21" pos:end="3117:23">fmt</name></name></expr> )</condition><block pos:start="3117:26" pos:end="3122:11">{<block_content pos:start="3118:1" pos:end="3122:10">
<if_stmt pos:start="3118:1" pos:end="3122:10"><if pos:start="3118:1" pos:end="3122:10">if<condition pos:start="3118:3" pos:end="3118:39">( <expr pos:start="3118:5" pos:end="3118:37"><operator pos:start="3118:5" pos:end="3118:5">!</operator><call pos:start="3118:6" pos:end="3118:37"><name pos:start="3118:6" pos:end="3118:11">strcmp</name><argument_list pos:start="3118:12" pos:end="3118:37">(<argument pos:start="3118:13" pos:end="3118:29"><expr pos:start="3118:13" pos:end="3118:29"><name pos:start="3118:13" pos:end="3118:29"><name pos:start="3118:13" pos:end="3118:18">stream</name><operator pos:start="3118:19" pos:end="3118:20">-&gt;</operator><name pos:start="3118:21" pos:end="3118:23">fmt</name><operator pos:start="3118:24" pos:end="3118:25">-&gt;</operator><name pos:start="3118:26" pos:end="3118:29">name</name></name></expr></argument>, <argument pos:start="3118:32" pos:end="3118:36"><expr pos:start="3118:32" pos:end="3118:36"><literal type="string" pos:start="3118:32" pos:end="3118:36">"rtp"</literal></expr></argument>)</argument_list></call></expr> )</condition><block pos:start="3118:40" pos:end="3122:10">{<block_content pos:start="3119:1" pos:end="3122:9">
<if_stmt pos:start="3119:1" pos:end="3122:9"><if pos:start="3119:1" pos:end="3122:9">if<condition pos:start="3119:3" pos:end="3120:44">(
            <expr pos:start="3120:13" pos:end="3120:43"><operator pos:start="3120:13" pos:end="3120:13">!</operator><call pos:start="3120:14" pos:end="3120:43"><name pos:start="3120:14" pos:end="3120:19">strcmp</name><argument_list pos:start="3120:20" pos:end="3120:43">(<argument pos:start="3120:21" pos:end="3120:24"><expr pos:start="3120:21" pos:end="3120:24"><name pos:start="3120:21" pos:end="3120:24">path</name></expr></argument>, <argument pos:start="3120:27" pos:end="3120:42"><expr pos:start="3120:27" pos:end="3120:42"><name pos:start="3120:27" pos:end="3120:42"><name pos:start="3120:27" pos:end="3120:32">stream</name><operator pos:start="3120:33" pos:end="3120:34">-&gt;</operator><name pos:start="3120:35" pos:end="3120:42">filename</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3120:46" pos:end="3122:9">{<block_content pos:start="3121:13" pos:end="3121:23">
            <goto pos:start="3121:13" pos:end="3121:23">goto <name pos:start="3121:18" pos:end="3121:22">found</name>;</goto>
        </block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block" pos:start="3124:5" pos:end="3124:25">/* no stream found */</comment>
    <expr_stmt pos:start="3125:5" pos:end="3125:47"><expr pos:start="3125:5" pos:end="3125:46"><call pos:start="3125:5" pos:end="3125:46"><name pos:start="3125:5" pos:end="3125:20">rtsp_reply_error</name><argument_list pos:start="3125:21" pos:end="3125:46">(<argument pos:start="3125:22" pos:end="3125:22"><expr pos:start="3125:22" pos:end="3125:22"><name pos:start="3125:22" pos:end="3125:22">c</name></expr></argument>, <argument pos:start="3125:25" pos:end="3125:45"><expr pos:start="3125:25" pos:end="3125:45"><name pos:start="3125:25" pos:end="3125:45">RTSP_STATUS_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="3126:5" pos:end="3126:11">return;</return>

 <label pos:start="3128:2" pos:end="3128:7"><name pos:start="3128:2" pos:end="3128:6">found</name>:</label>
    <comment type="block" pos:start="3129:5" pos:end="3129:53">/* prepare the media description in SDP format */</comment>

    <comment type="block" pos:start="3131:5" pos:end="3131:25">/* get the host IP */</comment>
    <expr_stmt pos:start="3132:5" pos:end="3132:26"><expr pos:start="3132:5" pos:end="3132:25"><name pos:start="3132:5" pos:end="3132:7">len</name> <operator pos:start="3132:9" pos:end="3132:9">=</operator> <sizeof pos:start="3132:11" pos:end="3132:25">sizeof<argument_list pos:start="3132:17" pos:end="3132:25">(<argument pos:start="3132:18" pos:end="3132:24"><expr pos:start="3132:18" pos:end="3132:24"><name pos:start="3132:18" pos:end="3132:24">my_addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt pos:start="3133:5" pos:end="3133:58"><expr pos:start="3133:5" pos:end="3133:57"><call pos:start="3133:5" pos:end="3133:57"><name pos:start="3133:5" pos:end="3133:15">getsockname</name><argument_list pos:start="3133:16" pos:end="3133:57">(<argument pos:start="3133:17" pos:end="3133:21"><expr pos:start="3133:17" pos:end="3133:21"><name pos:start="3133:17" pos:end="3133:21"><name pos:start="3133:17" pos:end="3133:17">c</name><operator pos:start="3133:18" pos:end="3133:19">-&gt;</operator><name pos:start="3133:20" pos:end="3133:21">fd</name></name></expr></argument>, <argument pos:start="3133:24" pos:end="3133:50"><expr pos:start="3133:24" pos:end="3133:50"><operator pos:start="3133:24" pos:end="3133:24">(</operator>struct <name pos:start="3133:32" pos:end="3133:39">sockaddr</name> <operator pos:start="3133:41" pos:end="3133:41">*</operator><operator pos:start="3133:42" pos:end="3133:42">)</operator><operator pos:start="3133:43" pos:end="3133:43">&amp;</operator><name pos:start="3133:44" pos:end="3133:50">my_addr</name></expr></argument>, <argument pos:start="3133:53" pos:end="3133:56"><expr pos:start="3133:53" pos:end="3133:56"><operator pos:start="3133:53" pos:end="3133:53">&amp;</operator><name pos:start="3133:54" pos:end="3133:56">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3134:5" pos:end="3135:63"><expr pos:start="3134:5" pos:end="3135:62"><name pos:start="3134:5" pos:end="3134:18">content_length</name> <operator pos:start="3134:20" pos:end="3134:20">=</operator> <call pos:start="3134:22" pos:end="3135:62"><name pos:start="3134:22" pos:end="3134:44">prepare_sdp_description</name><argument_list pos:start="3134:45" pos:end="3135:62">(<argument pos:start="3134:46" pos:end="3134:51"><expr pos:start="3134:46" pos:end="3134:51"><name pos:start="3134:46" pos:end="3134:51">stream</name></expr></argument>, <argument pos:start="3134:54" pos:end="3134:61"><expr pos:start="3134:54" pos:end="3134:61"><operator pos:start="3134:54" pos:end="3134:54">&amp;</operator><name pos:start="3134:55" pos:end="3134:61">content</name></expr></argument>,
                                             <argument pos:start="3135:46" pos:end="3135:61"><expr pos:start="3135:46" pos:end="3135:61"><name pos:start="3135:46" pos:end="3135:61"><name pos:start="3135:46" pos:end="3135:52">my_addr</name><operator pos:start="3135:53" pos:end="3135:53">.</operator><name pos:start="3135:54" pos:end="3135:61">sin_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3136:5" pos:end="3139:5"><if pos:start="3136:5" pos:end="3139:5">if <condition pos:start="3136:8" pos:end="3136:27">(<expr pos:start="3136:9" pos:end="3136:26"><name pos:start="3136:9" pos:end="3136:22">content_length</name> <operator pos:start="3136:24" pos:end="3136:24">&lt;</operator> <literal type="number" pos:start="3136:26" pos:end="3136:26">0</literal></expr>)</condition> <block pos:start="3136:29" pos:end="3139:5">{<block_content pos:start="3137:9" pos:end="3138:15">
        <expr_stmt pos:start="3137:9" pos:end="3137:50"><expr pos:start="3137:9" pos:end="3137:49"><call pos:start="3137:9" pos:end="3137:49"><name pos:start="3137:9" pos:end="3137:24">rtsp_reply_error</name><argument_list pos:start="3137:25" pos:end="3137:49">(<argument pos:start="3137:26" pos:end="3137:26"><expr pos:start="3137:26" pos:end="3137:26"><name pos:start="3137:26" pos:end="3137:26">c</name></expr></argument>, <argument pos:start="3137:29" pos:end="3137:48"><expr pos:start="3137:29" pos:end="3137:48"><name pos:start="3137:29" pos:end="3137:48">RTSP_STATUS_INTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="3138:9" pos:end="3138:15">return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="3140:5" pos:end="3140:41"><expr pos:start="3140:5" pos:end="3140:40"><call pos:start="3140:5" pos:end="3140:40"><name pos:start="3140:5" pos:end="3140:21">rtsp_reply_header</name><argument_list pos:start="3140:22" pos:end="3140:40">(<argument pos:start="3140:23" pos:end="3140:23"><expr pos:start="3140:23" pos:end="3140:23"><name pos:start="3140:23" pos:end="3140:23">c</name></expr></argument>, <argument pos:start="3140:26" pos:end="3140:39"><expr pos:start="3140:26" pos:end="3140:39"><name pos:start="3140:26" pos:end="3140:39">RTSP_STATUS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3141:5" pos:end="3141:53"><expr pos:start="3141:5" pos:end="3141:52"><call pos:start="3141:5" pos:end="3141:52"><name pos:start="3141:5" pos:end="3141:15">avio_printf</name><argument_list pos:start="3141:16" pos:end="3141:52">(<argument pos:start="3141:17" pos:end="3141:21"><expr pos:start="3141:17" pos:end="3141:21"><name pos:start="3141:17" pos:end="3141:21"><name pos:start="3141:17" pos:end="3141:17">c</name><operator pos:start="3141:18" pos:end="3141:19">-&gt;</operator><name pos:start="3141:20" pos:end="3141:21">pb</name></name></expr></argument>, <argument pos:start="3141:24" pos:end="3141:46"><expr pos:start="3141:24" pos:end="3141:46"><literal type="string" pos:start="3141:24" pos:end="3141:46">"Content-Base: %s/\r\n"</literal></expr></argument>, <argument pos:start="3141:49" pos:end="3141:51"><expr pos:start="3141:49" pos:end="3141:51"><name pos:start="3141:49" pos:end="3141:51">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3142:5" pos:end="3142:60"><expr pos:start="3142:5" pos:end="3142:59"><call pos:start="3142:5" pos:end="3142:59"><name pos:start="3142:5" pos:end="3142:15">avio_printf</name><argument_list pos:start="3142:16" pos:end="3142:59">(<argument pos:start="3142:17" pos:end="3142:21"><expr pos:start="3142:17" pos:end="3142:21"><name pos:start="3142:17" pos:end="3142:21"><name pos:start="3142:17" pos:end="3142:17">c</name><operator pos:start="3142:18" pos:end="3142:19">-&gt;</operator><name pos:start="3142:20" pos:end="3142:21">pb</name></name></expr></argument>, <argument pos:start="3142:24" pos:end="3142:58"><expr pos:start="3142:24" pos:end="3142:58"><literal type="string" pos:start="3142:24" pos:end="3142:58">"Content-Type: application/sdp\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3143:5" pos:end="3143:65"><expr pos:start="3143:5" pos:end="3143:64"><call pos:start="3143:5" pos:end="3143:64"><name pos:start="3143:5" pos:end="3143:15">avio_printf</name><argument_list pos:start="3143:16" pos:end="3143:64">(<argument pos:start="3143:17" pos:end="3143:21"><expr pos:start="3143:17" pos:end="3143:21"><name pos:start="3143:17" pos:end="3143:21"><name pos:start="3143:17" pos:end="3143:17">c</name><operator pos:start="3143:18" pos:end="3143:19">-&gt;</operator><name pos:start="3143:20" pos:end="3143:21">pb</name></name></expr></argument>, <argument pos:start="3143:24" pos:end="3143:47"><expr pos:start="3143:24" pos:end="3143:47"><literal type="string" pos:start="3143:24" pos:end="3143:47">"Content-Length: %d\r\n"</literal></expr></argument>, <argument pos:start="3143:50" pos:end="3143:63"><expr pos:start="3143:50" pos:end="3143:63"><name pos:start="3143:50" pos:end="3143:63">content_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3144:5" pos:end="3144:31"><expr pos:start="3144:5" pos:end="3144:30"><call pos:start="3144:5" pos:end="3144:30"><name pos:start="3144:5" pos:end="3144:15">avio_printf</name><argument_list pos:start="3144:16" pos:end="3144:30">(<argument pos:start="3144:17" pos:end="3144:21"><expr pos:start="3144:17" pos:end="3144:21"><name pos:start="3144:17" pos:end="3144:21"><name pos:start="3144:17" pos:end="3144:17">c</name><operator pos:start="3144:18" pos:end="3144:19">-&gt;</operator><name pos:start="3144:20" pos:end="3144:21">pb</name></name></expr></argument>, <argument pos:start="3144:24" pos:end="3144:29"><expr pos:start="3144:24" pos:end="3144:29"><literal type="string" pos:start="3144:24" pos:end="3144:29">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3145:5" pos:end="3145:47"><expr pos:start="3145:5" pos:end="3145:46"><call pos:start="3145:5" pos:end="3145:46"><name pos:start="3145:5" pos:end="3145:14">avio_write</name><argument_list pos:start="3145:15" pos:end="3145:46">(<argument pos:start="3145:16" pos:end="3145:20"><expr pos:start="3145:16" pos:end="3145:20"><name pos:start="3145:16" pos:end="3145:20"><name pos:start="3145:16" pos:end="3145:16">c</name><operator pos:start="3145:17" pos:end="3145:18">-&gt;</operator><name pos:start="3145:19" pos:end="3145:20">pb</name></name></expr></argument>, <argument pos:start="3145:23" pos:end="3145:29"><expr pos:start="3145:23" pos:end="3145:29"><name pos:start="3145:23" pos:end="3145:29">content</name></expr></argument>, <argument pos:start="3145:32" pos:end="3145:45"><expr pos:start="3145:32" pos:end="3145:45"><name pos:start="3145:32" pos:end="3145:45">content_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3146:5" pos:end="3146:21"><expr pos:start="3146:5" pos:end="3146:20"><call pos:start="3146:5" pos:end="3146:20"><name pos:start="3146:5" pos:end="3146:11">av_free</name><argument_list pos:start="3146:12" pos:end="3146:20">(<argument pos:start="3146:13" pos:end="3146:19"><expr pos:start="3146:13" pos:end="3146:19"><name pos:start="3146:13" pos:end="3146:19">content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="3149:1" pos:end="3161:1"><type pos:start="3149:1" pos:end="3149:20"><specifier pos:start="3149:1" pos:end="3149:6">static</specifier> <name pos:start="3149:8" pos:end="3149:18">HTTPContext</name> <modifier pos:start="3149:20" pos:end="3149:20">*</modifier></type><name pos:start="3149:21" pos:end="3149:36">find_rtp_session</name><parameter_list pos:start="3149:37" pos:end="3149:60">(<parameter pos:start="3149:38" pos:end="3149:59"><decl pos:start="3149:38" pos:end="3149:59"><type pos:start="3149:38" pos:end="3149:49"><specifier pos:start="3149:38" pos:end="3149:42">const</specifier> <name pos:start="3149:44" pos:end="3149:47">char</name> <modifier pos:start="3149:49" pos:end="3149:49">*</modifier></type><name pos:start="3149:50" pos:end="3149:59">session_id</name></decl></parameter>)</parameter_list>
<block pos:start="3150:1" pos:end="3161:1">{<block_content pos:start="3151:5" pos:end="3160:16">
    <decl_stmt pos:start="3151:5" pos:end="3151:19"><decl pos:start="3151:5" pos:end="3151:18"><type pos:start="3151:5" pos:end="3151:17"><name pos:start="3151:5" pos:end="3151:15">HTTPContext</name> <modifier pos:start="3151:17" pos:end="3151:17">*</modifier></type><name pos:start="3151:18" pos:end="3151:18">c</name></decl>;</decl_stmt>

    <if_stmt pos:start="3153:5" pos:end="3154:20"><if pos:start="3153:5" pos:end="3154:20">if <condition pos:start="3153:8" pos:end="3153:30">(<expr pos:start="3153:9" pos:end="3153:29"><name pos:start="3153:9" pos:end="3153:21"><name pos:start="3153:9" pos:end="3153:18">session_id</name><index pos:start="3153:19" pos:end="3153:21">[<expr pos:start="3153:20" pos:end="3153:20"><literal type="number" pos:start="3153:20" pos:end="3153:20">0</literal></expr>]</index></name> <operator pos:start="3153:23" pos:end="3153:24">==</operator> <literal type="char" pos:start="3153:26" pos:end="3153:29">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="3154:9" pos:end="3154:20"><block_content pos:start="3154:9" pos:end="3154:20">
        <return pos:start="3154:9" pos:end="3154:20">return <expr pos:start="3154:16" pos:end="3154:19"><name pos:start="3154:16" pos:end="3154:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <for pos:start="3156:5" pos:end="3159:5">for<control pos:start="3156:8" pos:end="3156:43">(<init pos:start="3156:9" pos:end="3156:27"><expr pos:start="3156:9" pos:end="3156:26"><name pos:start="3156:9" pos:end="3156:9">c</name> <operator pos:start="3156:11" pos:end="3156:11">=</operator> <name pos:start="3156:13" pos:end="3156:26">first_http_ctx</name></expr>;</init> <condition pos:start="3156:29" pos:end="3156:30"><expr pos:start="3156:29" pos:end="3156:29"><name pos:start="3156:29" pos:end="3156:29">c</name></expr>;</condition> <incr pos:start="3156:32" pos:end="3156:42"><expr pos:start="3156:32" pos:end="3156:42"><name pos:start="3156:32" pos:end="3156:32">c</name> <operator pos:start="3156:34" pos:end="3156:34">=</operator> <name pos:start="3156:36" pos:end="3156:42"><name pos:start="3156:36" pos:end="3156:36">c</name><operator pos:start="3156:37" pos:end="3156:38">-&gt;</operator><name pos:start="3156:39" pos:end="3156:42">next</name></name></expr></incr>)</control> <block pos:start="3156:45" pos:end="3159:5">{<block_content pos:start="3157:9" pos:end="3158:21">
        <if_stmt pos:start="3157:9" pos:end="3158:21"><if pos:start="3157:9" pos:end="3158:21">if <condition pos:start="3157:12" pos:end="3157:47">(<expr pos:start="3157:13" pos:end="3157:46"><operator pos:start="3157:13" pos:end="3157:13">!</operator><call pos:start="3157:14" pos:end="3157:46"><name pos:start="3157:14" pos:end="3157:19">strcmp</name><argument_list pos:start="3157:20" pos:end="3157:46">(<argument pos:start="3157:21" pos:end="3157:33"><expr pos:start="3157:21" pos:end="3157:33"><name pos:start="3157:21" pos:end="3157:33"><name pos:start="3157:21" pos:end="3157:21">c</name><operator pos:start="3157:22" pos:end="3157:23">-&gt;</operator><name pos:start="3157:24" pos:end="3157:33">session_id</name></name></expr></argument>, <argument pos:start="3157:36" pos:end="3157:45"><expr pos:start="3157:36" pos:end="3157:45"><name pos:start="3157:36" pos:end="3157:45">session_id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3158:13" pos:end="3158:21"><block_content pos:start="3158:13" pos:end="3158:21">
            <return pos:start="3158:13" pos:end="3158:21">return <expr pos:start="3158:20" pos:end="3158:20"><name pos:start="3158:20" pos:end="3158:20">c</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return pos:start="3160:5" pos:end="3160:16">return <expr pos:start="3160:12" pos:end="3160:15"><name pos:start="3160:12" pos:end="3160:15">NULL</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="3163:1" pos:end="3174:1"><type pos:start="3163:1" pos:end="3163:27"><specifier pos:start="3163:1" pos:end="3163:6">static</specifier> <name pos:start="3163:8" pos:end="3163:25">RTSPTransportField</name> <modifier pos:start="3163:27" pos:end="3163:27">*</modifier></type><name pos:start="3163:28" pos:end="3163:41">find_transport</name><parameter_list pos:start="3163:42" pos:end="3163:104">(<parameter pos:start="3163:43" pos:end="3163:62"><decl pos:start="3163:43" pos:end="3163:62"><type pos:start="3163:43" pos:end="3163:62"><name pos:start="3163:43" pos:end="3163:59">RTSPMessageHeader</name> <modifier pos:start="3163:61" pos:end="3163:61">*</modifier></type><name pos:start="3163:62" pos:end="3163:62">h</name></decl></parameter>, <parameter pos:start="3163:65" pos:end="3163:103"><decl pos:start="3163:65" pos:end="3163:103"><type pos:start="3163:65" pos:end="3163:103"><name pos:start="3163:65" pos:end="3163:87"><name pos:start="3163:65" pos:end="3163:68">enum</name> <name pos:start="3163:70" pos:end="3163:87">RTSPLowerTransport</name></name></type> <name pos:start="3163:89" pos:end="3163:103">lower_transport</name></decl></parameter>)</parameter_list>
<block pos:start="3164:1" pos:end="3174:1">{<block_content pos:start="3165:5" pos:end="3173:16">
    <decl_stmt pos:start="3165:5" pos:end="3165:27"><decl pos:start="3165:5" pos:end="3165:26"><type pos:start="3165:5" pos:end="3165:24"><name pos:start="3165:5" pos:end="3165:22">RTSPTransportField</name> <modifier pos:start="3165:24" pos:end="3165:24">*</modifier></type><name pos:start="3165:25" pos:end="3165:26">th</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3166:5" pos:end="3166:10"><decl pos:start="3166:5" pos:end="3166:9"><type pos:start="3166:5" pos:end="3166:7"><name pos:start="3166:5" pos:end="3166:7">int</name></type> <name pos:start="3166:9" pos:end="3166:9">i</name></decl>;</decl_stmt>

    <for pos:start="3168:5" pos:end="3172:5">for<control pos:start="3168:8" pos:end="3168:35">(<init pos:start="3168:9" pos:end="3168:12"><expr pos:start="3168:9" pos:end="3168:11"><name pos:start="3168:9" pos:end="3168:9">i</name><operator pos:start="3168:10" pos:end="3168:10">=</operator><literal type="number" pos:start="3168:11" pos:end="3168:11">0</literal></expr>;</init><condition pos:start="3168:13" pos:end="3168:31"><expr pos:start="3168:13" pos:end="3168:30"><name pos:start="3168:13" pos:end="3168:13">i</name><operator pos:start="3168:14" pos:end="3168:14">&lt;</operator><name pos:start="3168:15" pos:end="3168:30"><name pos:start="3168:15" pos:end="3168:15">h</name><operator pos:start="3168:16" pos:end="3168:17">-&gt;</operator><name pos:start="3168:18" pos:end="3168:30">nb_transports</name></name></expr>;</condition><incr pos:start="3168:32" pos:end="3168:34"><expr pos:start="3168:32" pos:end="3168:34"><name pos:start="3168:32" pos:end="3168:32">i</name><operator pos:start="3168:33" pos:end="3168:34">++</operator></expr></incr>)</control> <block pos:start="3168:37" pos:end="3172:5">{<block_content pos:start="3169:9" pos:end="3171:22">
        <expr_stmt pos:start="3169:9" pos:end="3169:31"><expr pos:start="3169:9" pos:end="3169:30"><name pos:start="3169:9" pos:end="3169:10">th</name> <operator pos:start="3169:12" pos:end="3169:12">=</operator> <operator pos:start="3169:14" pos:end="3169:14">&amp;</operator><name pos:start="3169:15" pos:end="3169:30"><name pos:start="3169:15" pos:end="3169:15">h</name><operator pos:start="3169:16" pos:end="3169:17">-&gt;</operator><name pos:start="3169:18" pos:end="3169:27">transports</name><index pos:start="3169:28" pos:end="3169:30">[<expr pos:start="3169:29" pos:end="3169:29"><name pos:start="3169:29" pos:end="3169:29">i</name></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt pos:start="3170:9" pos:end="3171:22"><if pos:start="3170:9" pos:end="3171:22">if <condition pos:start="3170:12" pos:end="3170:51">(<expr pos:start="3170:13" pos:end="3170:50"><name pos:start="3170:13" pos:end="3170:31"><name pos:start="3170:13" pos:end="3170:14">th</name><operator pos:start="3170:15" pos:end="3170:16">-&gt;</operator><name pos:start="3170:17" pos:end="3170:31">lower_transport</name></name> <operator pos:start="3170:33" pos:end="3170:34">==</operator> <name pos:start="3170:36" pos:end="3170:50">lower_transport</name></expr>)</condition><block type="pseudo" pos:start="3171:13" pos:end="3171:22"><block_content pos:start="3171:13" pos:end="3171:22">
            <return pos:start="3171:13" pos:end="3171:22">return <expr pos:start="3171:20" pos:end="3171:21"><name pos:start="3171:20" pos:end="3171:21">th</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return pos:start="3173:5" pos:end="3173:16">return <expr pos:start="3173:12" pos:end="3173:15"><name pos:start="3173:12" pos:end="3173:15">NULL</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="3176:1" pos:end="3318:1"><type pos:start="3176:1" pos:end="3176:11"><specifier pos:start="3176:1" pos:end="3176:6">static</specifier> <name pos:start="3176:8" pos:end="3176:11">void</name></type> <name pos:start="3176:13" pos:end="3176:26">rtsp_cmd_setup</name><parameter_list pos:start="3176:27" pos:end="3177:48">(<parameter pos:start="3176:28" pos:end="3176:41"><decl pos:start="3176:28" pos:end="3176:41"><type pos:start="3176:28" pos:end="3176:41"><name pos:start="3176:28" pos:end="3176:38">HTTPContext</name> <modifier pos:start="3176:40" pos:end="3176:40">*</modifier></type><name pos:start="3176:41" pos:end="3176:41">c</name></decl></parameter>, <parameter pos:start="3176:44" pos:end="3176:58"><decl pos:start="3176:44" pos:end="3176:58"><type pos:start="3176:44" pos:end="3176:58"><specifier pos:start="3176:44" pos:end="3176:48">const</specifier> <name pos:start="3176:50" pos:end="3176:53">char</name> <modifier pos:start="3176:55" pos:end="3176:55">*</modifier></type><name pos:start="3176:56" pos:end="3176:58">url</name></decl></parameter>,
                           <parameter pos:start="3177:28" pos:end="3177:47"><decl pos:start="3177:28" pos:end="3177:47"><type pos:start="3177:28" pos:end="3177:47"><name pos:start="3177:28" pos:end="3177:44">RTSPMessageHeader</name> <modifier pos:start="3177:46" pos:end="3177:46">*</modifier></type><name pos:start="3177:47" pos:end="3177:47">h</name></decl></parameter>)</parameter_list>
<block pos:start="3178:1" pos:end="3318:1">{<block_content pos:start="3179:5" pos:end="3317:31">
    <decl_stmt pos:start="3179:5" pos:end="3179:27"><decl pos:start="3179:5" pos:end="3179:26"><type pos:start="3179:5" pos:end="3179:20"><name pos:start="3179:5" pos:end="3179:18">FFServerStream</name> <modifier pos:start="3179:20" pos:end="3179:20">*</modifier></type><name pos:start="3179:21" pos:end="3179:26">stream</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3180:5" pos:end="3180:42"><decl pos:start="3180:5" pos:end="3180:20"><type pos:start="3180:5" pos:end="3180:7"><name pos:start="3180:5" pos:end="3180:7">int</name></type> <name pos:start="3180:9" pos:end="3180:20">stream_index</name></decl>, <decl pos:start="3180:23" pos:end="3180:30"><type ref="prev" pos:start="3180:5" pos:end="3180:7"/><name pos:start="3180:23" pos:end="3180:30">rtp_port</name></decl>, <decl pos:start="3180:33" pos:end="3180:41"><type ref="prev" pos:start="3180:5" pos:end="3180:7"/><name pos:start="3180:33" pos:end="3180:41">rtcp_port</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3181:5" pos:end="3181:19"><decl pos:start="3181:5" pos:end="3181:18"><type pos:start="3181:5" pos:end="3181:8"><name pos:start="3181:5" pos:end="3181:8">char</name></type> <name pos:start="3181:10" pos:end="3181:18"><name pos:start="3181:10" pos:end="3181:12">buf</name><index pos:start="3181:13" pos:end="3181:18">[<expr pos:start="3181:14" pos:end="3181:17"><literal type="number" pos:start="3181:14" pos:end="3181:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="3182:5" pos:end="3182:21"><decl pos:start="3182:5" pos:end="3182:20"><type pos:start="3182:5" pos:end="3182:8"><name pos:start="3182:5" pos:end="3182:8">char</name></type> <name pos:start="3182:10" pos:end="3182:20"><name pos:start="3182:10" pos:end="3182:14">path1</name><index pos:start="3182:15" pos:end="3182:20">[<expr pos:start="3182:16" pos:end="3182:19"><literal type="number" pos:start="3182:16" pos:end="3182:19">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="3183:5" pos:end="3183:21"><decl pos:start="3183:5" pos:end="3183:20"><type pos:start="3183:5" pos:end="3183:16"><specifier pos:start="3183:5" pos:end="3183:9">const</specifier> <name pos:start="3183:11" pos:end="3183:14">char</name> <modifier pos:start="3183:16" pos:end="3183:16">*</modifier></type><name pos:start="3183:17" pos:end="3183:20">path</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3184:5" pos:end="3184:23"><decl pos:start="3184:5" pos:end="3184:22"><type pos:start="3184:5" pos:end="3184:17"><name pos:start="3184:5" pos:end="3184:15">HTTPContext</name> <modifier pos:start="3184:17" pos:end="3184:17">*</modifier></type><name pos:start="3184:18" pos:end="3184:22">rtp_c</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3185:5" pos:end="3185:27"><decl pos:start="3185:5" pos:end="3185:26"><type pos:start="3185:5" pos:end="3185:24"><name pos:start="3185:5" pos:end="3185:22">RTSPTransportField</name> <modifier pos:start="3185:24" pos:end="3185:24">*</modifier></type><name pos:start="3185:25" pos:end="3185:26">th</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3186:5" pos:end="3186:33"><decl pos:start="3186:5" pos:end="3186:32"><type pos:start="3186:5" pos:end="3186:22"><name pos:start="3186:5" pos:end="3186:22"><name pos:start="3186:5" pos:end="3186:10">struct</name> <name pos:start="3186:12" pos:end="3186:22">sockaddr_in</name></name></type> <name pos:start="3186:24" pos:end="3186:32">dest_addr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3187:5" pos:end="3187:32"><decl pos:start="3187:5" pos:end="3187:31"><type pos:start="3187:5" pos:end="3187:25"><name pos:start="3187:5" pos:end="3187:25">RTSPActionServerSetup</name></type> <name pos:start="3187:27" pos:end="3187:31">setup</name></decl>;</decl_stmt>

    <comment type="block" pos:start="3189:5" pos:end="3189:33">/* find which URL is asked */</comment>
    <expr_stmt pos:start="3190:5" pos:end="3190:77"><expr pos:start="3190:5" pos:end="3190:76"><call pos:start="3190:5" pos:end="3190:76"><name pos:start="3190:5" pos:end="3190:16">av_url_split</name><argument_list pos:start="3190:17" pos:end="3190:76">(<argument pos:start="3190:18" pos:end="3190:21"><expr pos:start="3190:18" pos:end="3190:21"><name pos:start="3190:18" pos:end="3190:21">NULL</name></expr></argument>, <argument pos:start="3190:24" pos:end="3190:24"><expr pos:start="3190:24" pos:end="3190:24"><literal type="number" pos:start="3190:24" pos:end="3190:24">0</literal></expr></argument>, <argument pos:start="3190:27" pos:end="3190:30"><expr pos:start="3190:27" pos:end="3190:30"><name pos:start="3190:27" pos:end="3190:30">NULL</name></expr></argument>, <argument pos:start="3190:33" pos:end="3190:33"><expr pos:start="3190:33" pos:end="3190:33"><literal type="number" pos:start="3190:33" pos:end="3190:33">0</literal></expr></argument>, <argument pos:start="3190:36" pos:end="3190:39"><expr pos:start="3190:36" pos:end="3190:39"><name pos:start="3190:36" pos:end="3190:39">NULL</name></expr></argument>, <argument pos:start="3190:42" pos:end="3190:42"><expr pos:start="3190:42" pos:end="3190:42"><literal type="number" pos:start="3190:42" pos:end="3190:42">0</literal></expr></argument>, <argument pos:start="3190:45" pos:end="3190:48"><expr pos:start="3190:45" pos:end="3190:48"><name pos:start="3190:45" pos:end="3190:48">NULL</name></expr></argument>, <argument pos:start="3190:51" pos:end="3190:55"><expr pos:start="3190:51" pos:end="3190:55"><name pos:start="3190:51" pos:end="3190:55">path1</name></expr></argument>, <argument pos:start="3190:58" pos:end="3190:70"><expr pos:start="3190:58" pos:end="3190:70"><sizeof pos:start="3190:58" pos:end="3190:70">sizeof<argument_list pos:start="3190:64" pos:end="3190:70">(<argument pos:start="3190:65" pos:end="3190:69"><expr pos:start="3190:65" pos:end="3190:69"><name pos:start="3190:65" pos:end="3190:69">path1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="3190:73" pos:end="3190:75"><expr pos:start="3190:73" pos:end="3190:75"><name pos:start="3190:73" pos:end="3190:75">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3191:5" pos:end="3191:17"><expr pos:start="3191:5" pos:end="3191:16"><name pos:start="3191:5" pos:end="3191:8">path</name> <operator pos:start="3191:10" pos:end="3191:10">=</operator> <name pos:start="3191:12" pos:end="3191:16">path1</name></expr>;</expr_stmt>
    <if_stmt pos:start="3192:5" pos:end="3193:15"><if pos:start="3192:5" pos:end="3193:15">if <condition pos:start="3192:8" pos:end="3192:21">(<expr pos:start="3192:9" pos:end="3192:20"><operator pos:start="3192:9" pos:end="3192:9">*</operator><name pos:start="3192:10" pos:end="3192:13">path</name> <operator pos:start="3192:15" pos:end="3192:16">==</operator> <literal type="char" pos:start="3192:18" pos:end="3192:20">'/'</literal></expr>)</condition><block type="pseudo" pos:start="3193:9" pos:end="3193:15"><block_content pos:start="3193:9" pos:end="3193:15">
        <expr_stmt pos:start="3193:9" pos:end="3193:15"><expr pos:start="3193:9" pos:end="3193:14"><name pos:start="3193:9" pos:end="3193:12">path</name><operator pos:start="3193:13" pos:end="3193:14">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="3195:5" pos:end="3195:31">/* now check each stream */</comment>
    <for pos:start="3196:5" pos:end="3218:5">for<control pos:start="3196:8" pos:end="3196:68">(<init pos:start="3196:9" pos:end="3196:37"><expr pos:start="3196:9" pos:end="3196:36"><name pos:start="3196:9" pos:end="3196:14">stream</name> <operator pos:start="3196:16" pos:end="3196:16">=</operator> <name pos:start="3196:18" pos:end="3196:36"><name pos:start="3196:18" pos:end="3196:23">config</name><operator pos:start="3196:24" pos:end="3196:24">.</operator><name pos:start="3196:25" pos:end="3196:36">first_stream</name></name></expr>;</init> <condition pos:start="3196:39" pos:end="3196:45"><expr pos:start="3196:39" pos:end="3196:44"><name pos:start="3196:39" pos:end="3196:44">stream</name></expr>;</condition> <incr pos:start="3196:47" pos:end="3196:67"><expr pos:start="3196:47" pos:end="3196:67"><name pos:start="3196:47" pos:end="3196:52">stream</name> <operator pos:start="3196:54" pos:end="3196:54">=</operator> <name pos:start="3196:56" pos:end="3196:67"><name pos:start="3196:56" pos:end="3196:61">stream</name><operator pos:start="3196:62" pos:end="3196:63">-&gt;</operator><name pos:start="3196:64" pos:end="3196:67">next</name></name></expr></incr>)</control> <block pos:start="3196:70" pos:end="3218:5">{<block_content pos:start="3197:9" pos:end="3217:9">
        <if_stmt pos:start="3197:9" pos:end="3200:9"><if pos:start="3197:9" pos:end="3200:9">if <condition pos:start="3197:12" pos:end="3198:45">(<expr pos:start="3197:13" pos:end="3198:44"><name pos:start="3197:13" pos:end="3197:27"><name pos:start="3197:13" pos:end="3197:18">stream</name><operator pos:start="3197:19" pos:end="3197:20">-&gt;</operator><name pos:start="3197:21" pos:end="3197:27">is_feed</name></name> <operator pos:start="3197:29" pos:end="3197:30">||</operator> <operator pos:start="3197:32" pos:end="3197:32">!</operator><name pos:start="3197:33" pos:end="3197:43"><name pos:start="3197:33" pos:end="3197:38">stream</name><operator pos:start="3197:39" pos:end="3197:40">-&gt;</operator><name pos:start="3197:41" pos:end="3197:43">fmt</name></name> <operator pos:start="3197:45" pos:end="3197:46">||</operator>
            <call pos:start="3198:13" pos:end="3198:44"><name pos:start="3198:13" pos:end="3198:18">strcmp</name><argument_list pos:start="3198:19" pos:end="3198:44">(<argument pos:start="3198:20" pos:end="3198:36"><expr pos:start="3198:20" pos:end="3198:36"><name pos:start="3198:20" pos:end="3198:36"><name pos:start="3198:20" pos:end="3198:25">stream</name><operator pos:start="3198:26" pos:end="3198:27">-&gt;</operator><name pos:start="3198:28" pos:end="3198:30">fmt</name><operator pos:start="3198:31" pos:end="3198:32">-&gt;</operator><name pos:start="3198:33" pos:end="3198:36">name</name></name></expr></argument>, <argument pos:start="3198:39" pos:end="3198:43"><expr pos:start="3198:39" pos:end="3198:43"><literal type="string" pos:start="3198:39" pos:end="3198:43">"rtp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3198:47" pos:end="3200:9">{<block_content pos:start="3199:13" pos:end="3199:21">
            <continue pos:start="3199:13" pos:end="3199:21">continue;</continue>
        </block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="3201:9" pos:end="3201:62">/* accept aggregate filenames only if single stream */</comment>
        <if_stmt pos:start="3202:9" pos:end="3209:9"><if pos:start="3202:9" pos:end="3209:9">if <condition pos:start="3202:12" pos:end="3202:44">(<expr pos:start="3202:13" pos:end="3202:43"><operator pos:start="3202:13" pos:end="3202:13">!</operator><call pos:start="3202:14" pos:end="3202:43"><name pos:start="3202:14" pos:end="3202:19">strcmp</name><argument_list pos:start="3202:20" pos:end="3202:43">(<argument pos:start="3202:21" pos:end="3202:24"><expr pos:start="3202:21" pos:end="3202:24"><name pos:start="3202:21" pos:end="3202:24">path</name></expr></argument>, <argument pos:start="3202:27" pos:end="3202:42"><expr pos:start="3202:27" pos:end="3202:42"><name pos:start="3202:27" pos:end="3202:42"><name pos:start="3202:27" pos:end="3202:32">stream</name><operator pos:start="3202:33" pos:end="3202:34">-&gt;</operator><name pos:start="3202:35" pos:end="3202:42">filename</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3202:46" pos:end="3209:9">{<block_content pos:start="3203:13" pos:end="3208:23">
            <if_stmt pos:start="3203:13" pos:end="3206:13"><if pos:start="3203:13" pos:end="3206:13">if <condition pos:start="3203:16" pos:end="3203:40">(<expr pos:start="3203:17" pos:end="3203:39"><name pos:start="3203:17" pos:end="3203:34"><name pos:start="3203:17" pos:end="3203:22">stream</name><operator pos:start="3203:23" pos:end="3203:24">-&gt;</operator><name pos:start="3203:25" pos:end="3203:34">nb_streams</name></name> <operator pos:start="3203:36" pos:end="3203:37">!=</operator> <literal type="number" pos:start="3203:39" pos:end="3203:39">1</literal></expr>)</condition> <block pos:start="3203:42" pos:end="3206:13">{<block_content pos:start="3204:17" pos:end="3205:23">
                <expr_stmt pos:start="3204:17" pos:end="3204:59"><expr pos:start="3204:17" pos:end="3204:58"><call pos:start="3204:17" pos:end="3204:58"><name pos:start="3204:17" pos:end="3204:32">rtsp_reply_error</name><argument_list pos:start="3204:33" pos:end="3204:58">(<argument pos:start="3204:34" pos:end="3204:34"><expr pos:start="3204:34" pos:end="3204:34"><name pos:start="3204:34" pos:end="3204:34">c</name></expr></argument>, <argument pos:start="3204:37" pos:end="3204:57"><expr pos:start="3204:37" pos:end="3204:57"><name pos:start="3204:37" pos:end="3204:57">RTSP_STATUS_AGGREGATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3205:17" pos:end="3205:23">return;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="3207:13" pos:end="3207:29"><expr pos:start="3207:13" pos:end="3207:28"><name pos:start="3207:13" pos:end="3207:24">stream_index</name> <operator pos:start="3207:26" pos:end="3207:26">=</operator> <literal type="number" pos:start="3207:28" pos:end="3207:28">0</literal></expr>;</expr_stmt>
            <goto pos:start="3208:13" pos:end="3208:23">goto <name pos:start="3208:18" pos:end="3208:22">found</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <for pos:start="3211:9" pos:end="3217:9">for<control pos:start="3211:12" pos:end="3212:27">(<init pos:start="3211:13" pos:end="3211:29"><expr pos:start="3211:13" pos:end="3211:28"><name pos:start="3211:13" pos:end="3211:24">stream_index</name> <operator pos:start="3211:26" pos:end="3211:26">=</operator> <literal type="number" pos:start="3211:28" pos:end="3211:28">0</literal></expr>;</init> <condition pos:start="3211:31" pos:end="3211:64"><expr pos:start="3211:31" pos:end="3211:63"><name pos:start="3211:31" pos:end="3211:42">stream_index</name> <operator pos:start="3211:44" pos:end="3211:44">&lt;</operator> <name pos:start="3211:46" pos:end="3211:63"><name pos:start="3211:46" pos:end="3211:51">stream</name><operator pos:start="3211:52" pos:end="3211:53">-&gt;</operator><name pos:start="3211:54" pos:end="3211:63">nb_streams</name></name></expr>;</condition>
            <incr pos:start="3212:13" pos:end="3212:26"><expr pos:start="3212:13" pos:end="3212:26"><name pos:start="3212:13" pos:end="3212:24">stream_index</name><operator pos:start="3212:25" pos:end="3212:26">++</operator></expr></incr>)</control> <block pos:start="3212:29" pos:end="3217:9">{<block_content pos:start="3213:13" pos:end="3216:27">
            <expr_stmt pos:start="3213:13" pos:end="3214:53"><expr pos:start="3213:13" pos:end="3214:52"><call pos:start="3213:13" pos:end="3214:52"><name pos:start="3213:13" pos:end="3213:20">snprintf</name><argument_list pos:start="3213:21" pos:end="3214:52">(<argument pos:start="3213:22" pos:end="3213:24"><expr pos:start="3213:22" pos:end="3213:24"><name pos:start="3213:22" pos:end="3213:24">buf</name></expr></argument>, <argument pos:start="3213:27" pos:end="3213:37"><expr pos:start="3213:27" pos:end="3213:37"><sizeof pos:start="3213:27" pos:end="3213:37">sizeof<argument_list pos:start="3213:33" pos:end="3213:37">(<argument pos:start="3213:34" pos:end="3213:36"><expr pos:start="3213:34" pos:end="3213:36"><name pos:start="3213:34" pos:end="3213:36">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="3213:40" pos:end="3213:55"><expr pos:start="3213:40" pos:end="3213:55"><literal type="string" pos:start="3213:40" pos:end="3213:55">"%s/streamid=%d"</literal></expr></argument>,
                     <argument pos:start="3214:22" pos:end="3214:37"><expr pos:start="3214:22" pos:end="3214:37"><name pos:start="3214:22" pos:end="3214:37"><name pos:start="3214:22" pos:end="3214:27">stream</name><operator pos:start="3214:28" pos:end="3214:29">-&gt;</operator><name pos:start="3214:30" pos:end="3214:37">filename</name></name></expr></argument>, <argument pos:start="3214:40" pos:end="3214:51"><expr pos:start="3214:40" pos:end="3214:51"><name pos:start="3214:40" pos:end="3214:51">stream_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3215:13" pos:end="3216:27"><if pos:start="3215:13" pos:end="3216:27">if <condition pos:start="3215:16" pos:end="3215:35">(<expr pos:start="3215:17" pos:end="3215:34"><operator pos:start="3215:17" pos:end="3215:17">!</operator><call pos:start="3215:18" pos:end="3215:34"><name pos:start="3215:18" pos:end="3215:23">strcmp</name><argument_list pos:start="3215:24" pos:end="3215:34">(<argument pos:start="3215:25" pos:end="3215:28"><expr pos:start="3215:25" pos:end="3215:28"><name pos:start="3215:25" pos:end="3215:28">path</name></expr></argument>, <argument pos:start="3215:31" pos:end="3215:33"><expr pos:start="3215:31" pos:end="3215:33"><name pos:start="3215:31" pos:end="3215:33">buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3216:17" pos:end="3216:27"><block_content pos:start="3216:17" pos:end="3216:27">
                <goto pos:start="3216:17" pos:end="3216:27">goto <name pos:start="3216:22" pos:end="3216:26">found</name>;</goto></block_content></block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
    <comment type="block" pos:start="3219:5" pos:end="3219:25">/* no stream found */</comment>
    <expr_stmt pos:start="3220:5" pos:end="3220:45"><expr pos:start="3220:5" pos:end="3220:44"><call pos:start="3220:5" pos:end="3220:44"><name pos:start="3220:5" pos:end="3220:20">rtsp_reply_error</name><argument_list pos:start="3220:21" pos:end="3220:44">(<argument pos:start="3220:22" pos:end="3220:22"><expr pos:start="3220:22" pos:end="3220:22"><name pos:start="3220:22" pos:end="3220:22">c</name></expr></argument>, <argument pos:start="3220:25" pos:end="3220:43"><expr pos:start="3220:25" pos:end="3220:43"><name pos:start="3220:25" pos:end="3220:43">RTSP_STATUS_SERVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="3220:47" pos:end="3220:70">/* XXX: right error ? */</comment>
    <return pos:start="3221:5" pos:end="3221:11">return;</return>
 <label pos:start="3222:2" pos:end="3222:7"><name pos:start="3222:2" pos:end="3222:6">found</name>:</label>

    <comment type="block" pos:start="3224:5" pos:end="3224:39">/* generate session id if needed */</comment>
    <if_stmt pos:start="3225:5" pos:end="3230:5"><if pos:start="3225:5" pos:end="3230:5">if <condition pos:start="3225:8" pos:end="3225:33">(<expr pos:start="3225:9" pos:end="3225:32"><name pos:start="3225:9" pos:end="3225:24"><name pos:start="3225:9" pos:end="3225:9">h</name><operator pos:start="3225:10" pos:end="3225:11">-&gt;</operator><name pos:start="3225:12" pos:end="3225:21">session_id</name><index pos:start="3225:22" pos:end="3225:24">[<expr pos:start="3225:23" pos:end="3225:23"><literal type="number" pos:start="3225:23" pos:end="3225:23">0</literal></expr>]</index></name> <operator pos:start="3225:26" pos:end="3225:27">==</operator> <literal type="char" pos:start="3225:29" pos:end="3225:32">'\0'</literal></expr>)</condition> <block pos:start="3225:35" pos:end="3230:5">{<block_content pos:start="3226:9" pos:end="3229:35">
        <decl_stmt pos:start="3226:9" pos:end="3226:53"><decl pos:start="3226:9" pos:end="3226:52"><type pos:start="3226:9" pos:end="3226:16"><name pos:start="3226:9" pos:end="3226:16">unsigned</name></type> <name pos:start="3226:18" pos:end="3226:24">random0</name> <init pos:start="3226:26" pos:end="3226:52">= <expr pos:start="3226:28" pos:end="3226:52"><call pos:start="3226:28" pos:end="3226:52"><name pos:start="3226:28" pos:end="3226:37">av_lfg_get</name><argument_list pos:start="3226:38" pos:end="3226:52">(<argument pos:start="3226:39" pos:end="3226:51"><expr pos:start="3226:39" pos:end="3226:51"><operator pos:start="3226:39" pos:end="3226:39">&amp;</operator><name pos:start="3226:40" pos:end="3226:51">random_state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="3227:9" pos:end="3227:53"><decl pos:start="3227:9" pos:end="3227:52"><type pos:start="3227:9" pos:end="3227:16"><name pos:start="3227:9" pos:end="3227:16">unsigned</name></type> <name pos:start="3227:18" pos:end="3227:24">random1</name> <init pos:start="3227:26" pos:end="3227:52">= <expr pos:start="3227:28" pos:end="3227:52"><call pos:start="3227:28" pos:end="3227:52"><name pos:start="3227:28" pos:end="3227:37">av_lfg_get</name><argument_list pos:start="3227:38" pos:end="3227:52">(<argument pos:start="3227:39" pos:end="3227:51"><expr pos:start="3227:39" pos:end="3227:51"><operator pos:start="3227:39" pos:end="3227:39">&amp;</operator><name pos:start="3227:40" pos:end="3227:51">random_state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="3228:9" pos:end="3229:35"><expr pos:start="3228:9" pos:end="3229:34"><call pos:start="3228:9" pos:end="3229:34"><name pos:start="3228:9" pos:end="3228:16">snprintf</name><argument_list pos:start="3228:17" pos:end="3229:34">(<argument pos:start="3228:18" pos:end="3228:30"><expr pos:start="3228:18" pos:end="3228:30"><name pos:start="3228:18" pos:end="3228:30"><name pos:start="3228:18" pos:end="3228:18">h</name><operator pos:start="3228:19" pos:end="3228:20">-&gt;</operator><name pos:start="3228:21" pos:end="3228:30">session_id</name></name></expr></argument>, <argument pos:start="3228:33" pos:end="3228:53"><expr pos:start="3228:33" pos:end="3228:53"><sizeof pos:start="3228:33" pos:end="3228:53">sizeof<argument_list pos:start="3228:39" pos:end="3228:53">(<argument pos:start="3228:40" pos:end="3228:52"><expr pos:start="3228:40" pos:end="3228:52"><name pos:start="3228:40" pos:end="3228:52"><name pos:start="3228:40" pos:end="3228:40">h</name><operator pos:start="3228:41" pos:end="3228:42">-&gt;</operator><name pos:start="3228:43" pos:end="3228:52">session_id</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="3228:56" pos:end="3228:65"><expr pos:start="3228:56" pos:end="3228:65"><literal type="string" pos:start="3228:56" pos:end="3228:65">"%08x%08x"</literal></expr></argument>,
                 <argument pos:start="3229:18" pos:end="3229:24"><expr pos:start="3229:18" pos:end="3229:24"><name pos:start="3229:18" pos:end="3229:24">random0</name></expr></argument>, <argument pos:start="3229:27" pos:end="3229:33"><expr pos:start="3229:27" pos:end="3229:33"><name pos:start="3229:27" pos:end="3229:33">random1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="3232:5" pos:end="3232:55">/* find RTP session, and create it if none found */</comment>
    <expr_stmt pos:start="3233:5" pos:end="3233:44"><expr pos:start="3233:5" pos:end="3233:43"><name pos:start="3233:5" pos:end="3233:9">rtp_c</name> <operator pos:start="3233:11" pos:end="3233:11">=</operator> <call pos:start="3233:13" pos:end="3233:43"><name pos:start="3233:13" pos:end="3233:28">find_rtp_session</name><argument_list pos:start="3233:29" pos:end="3233:43">(<argument pos:start="3233:30" pos:end="3233:42"><expr pos:start="3233:30" pos:end="3233:42"><name pos:start="3233:30" pos:end="3233:42"><name pos:start="3233:30" pos:end="3233:30">h</name><operator pos:start="3233:31" pos:end="3233:32">-&gt;</operator><name pos:start="3233:33" pos:end="3233:42">session_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3234:5" pos:end="3257:5"><if pos:start="3234:5" pos:end="3257:5">if <condition pos:start="3234:8" pos:end="3234:15">(<expr pos:start="3234:9" pos:end="3234:14"><operator pos:start="3234:9" pos:end="3234:9">!</operator><name pos:start="3234:10" pos:end="3234:14">rtp_c</name></expr>)</condition> <block pos:start="3234:17" pos:end="3257:5">{<block_content pos:start="3236:9" pos:end="3256:9">
        <comment type="block" pos:start="3235:9" pos:end="3235:31">/* always prefer UDP */</comment>
        <expr_stmt pos:start="3236:9" pos:end="3236:57"><expr pos:start="3236:9" pos:end="3236:56"><name pos:start="3236:9" pos:end="3236:10">th</name> <operator pos:start="3236:12" pos:end="3236:12">=</operator> <call pos:start="3236:14" pos:end="3236:56"><name pos:start="3236:14" pos:end="3236:27">find_transport</name><argument_list pos:start="3236:28" pos:end="3236:56">(<argument pos:start="3236:29" pos:end="3236:29"><expr pos:start="3236:29" pos:end="3236:29"><name pos:start="3236:29" pos:end="3236:29">h</name></expr></argument>, <argument pos:start="3236:32" pos:end="3236:55"><expr pos:start="3236:32" pos:end="3236:55"><name pos:start="3236:32" pos:end="3236:55">RTSP_LOWER_TRANSPORT_UDP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="3237:9" pos:end="3243:9"><if pos:start="3237:9" pos:end="3243:9">if <condition pos:start="3237:12" pos:end="3237:16">(<expr pos:start="3237:13" pos:end="3237:15"><operator pos:start="3237:13" pos:end="3237:13">!</operator><name pos:start="3237:14" pos:end="3237:15">th</name></expr>)</condition> <block pos:start="3237:18" pos:end="3243:9">{<block_content pos:start="3238:13" pos:end="3242:13">
            <expr_stmt pos:start="3238:13" pos:end="3238:61"><expr pos:start="3238:13" pos:end="3238:60"><name pos:start="3238:13" pos:end="3238:14">th</name> <operator pos:start="3238:16" pos:end="3238:16">=</operator> <call pos:start="3238:18" pos:end="3238:60"><name pos:start="3238:18" pos:end="3238:31">find_transport</name><argument_list pos:start="3238:32" pos:end="3238:60">(<argument pos:start="3238:33" pos:end="3238:33"><expr pos:start="3238:33" pos:end="3238:33"><name pos:start="3238:33" pos:end="3238:33">h</name></expr></argument>, <argument pos:start="3238:36" pos:end="3238:59"><expr pos:start="3238:36" pos:end="3238:59"><name pos:start="3238:36" pos:end="3238:59">RTSP_LOWER_TRANSPORT_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="3239:13" pos:end="3242:13"><if pos:start="3239:13" pos:end="3242:13">if <condition pos:start="3239:16" pos:end="3239:20">(<expr pos:start="3239:17" pos:end="3239:19"><operator pos:start="3239:17" pos:end="3239:17">!</operator><name pos:start="3239:18" pos:end="3239:19">th</name></expr>)</condition> <block pos:start="3239:22" pos:end="3242:13">{<block_content pos:start="3240:17" pos:end="3241:23">
                <expr_stmt pos:start="3240:17" pos:end="3240:59"><expr pos:start="3240:17" pos:end="3240:58"><call pos:start="3240:17" pos:end="3240:58"><name pos:start="3240:17" pos:end="3240:32">rtsp_reply_error</name><argument_list pos:start="3240:33" pos:end="3240:58">(<argument pos:start="3240:34" pos:end="3240:34"><expr pos:start="3240:34" pos:end="3240:34"><name pos:start="3240:34" pos:end="3240:34">c</name></expr></argument>, <argument pos:start="3240:37" pos:end="3240:57"><expr pos:start="3240:37" pos:end="3240:57"><name pos:start="3240:37" pos:end="3240:57">RTSP_STATUS_TRANSPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="3241:17" pos:end="3241:23">return;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="3245:9" pos:end="3246:56"><expr pos:start="3245:9" pos:end="3246:55"><name pos:start="3245:9" pos:end="3245:13">rtp_c</name> <operator pos:start="3245:15" pos:end="3245:15">=</operator> <call pos:start="3245:17" pos:end="3246:55"><name pos:start="3245:17" pos:end="3245:34">rtp_new_connection</name><argument_list pos:start="3245:35" pos:end="3246:55">(<argument pos:start="3245:36" pos:end="3245:48"><expr pos:start="3245:36" pos:end="3245:48"><operator pos:start="3245:36" pos:end="3245:36">&amp;</operator><name pos:start="3245:37" pos:end="3245:48"><name pos:start="3245:37" pos:end="3245:37">c</name><operator pos:start="3245:38" pos:end="3245:39">-&gt;</operator><name pos:start="3245:40" pos:end="3245:48">from_addr</name></name></expr></argument>, <argument pos:start="3245:51" pos:end="3245:56"><expr pos:start="3245:51" pos:end="3245:56"><name pos:start="3245:51" pos:end="3245:56">stream</name></expr></argument>, <argument pos:start="3245:59" pos:end="3245:71"><expr pos:start="3245:59" pos:end="3245:71"><name pos:start="3245:59" pos:end="3245:71"><name pos:start="3245:59" pos:end="3245:59">h</name><operator pos:start="3245:60" pos:end="3245:61">-&gt;</operator><name pos:start="3245:62" pos:end="3245:71">session_id</name></name></expr></argument>,
                                   <argument pos:start="3246:36" pos:end="3246:54"><expr pos:start="3246:36" pos:end="3246:54"><name pos:start="3246:36" pos:end="3246:54"><name pos:start="3246:36" pos:end="3246:37">th</name><operator pos:start="3246:38" pos:end="3246:39">-&gt;</operator><name pos:start="3246:40" pos:end="3246:54">lower_transport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="3247:9" pos:end="3250:9"><if pos:start="3247:9" pos:end="3250:9">if <condition pos:start="3247:12" pos:end="3247:19">(<expr pos:start="3247:13" pos:end="3247:18"><operator pos:start="3247:13" pos:end="3247:13">!</operator><name pos:start="3247:14" pos:end="3247:18">rtp_c</name></expr>)</condition> <block pos:start="3247:21" pos:end="3250:9">{<block_content pos:start="3248:13" pos:end="3249:19">
            <expr_stmt pos:start="3248:13" pos:end="3248:55"><expr pos:start="3248:13" pos:end="3248:54"><call pos:start="3248:13" pos:end="3248:54"><name pos:start="3248:13" pos:end="3248:28">rtsp_reply_error</name><argument_list pos:start="3248:29" pos:end="3248:54">(<argument pos:start="3248:30" pos:end="3248:30"><expr pos:start="3248:30" pos:end="3248:30"><name pos:start="3248:30" pos:end="3248:30">c</name></expr></argument>, <argument pos:start="3248:33" pos:end="3248:53"><expr pos:start="3248:33" pos:end="3248:53"><name pos:start="3248:33" pos:end="3248:53">RTSP_STATUS_BANDWIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="3249:13" pos:end="3249:19">return;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="3252:9" pos:end="3252:31">/* open input stream */</comment>
        <if_stmt pos:start="3253:9" pos:end="3256:9"><if pos:start="3253:9" pos:end="3256:9">if <condition pos:start="3253:12" pos:end="3253:45">(<expr pos:start="3253:13" pos:end="3253:44"><call pos:start="3253:13" pos:end="3253:40"><name pos:start="3253:13" pos:end="3253:29">open_input_stream</name><argument_list pos:start="3253:30" pos:end="3253:40">(<argument pos:start="3253:31" pos:end="3253:35"><expr pos:start="3253:31" pos:end="3253:35"><name pos:start="3253:31" pos:end="3253:35">rtp_c</name></expr></argument>, <argument pos:start="3253:38" pos:end="3253:39"><expr pos:start="3253:38" pos:end="3253:39"><literal type="string" pos:start="3253:38" pos:end="3253:39">""</literal></expr></argument>)</argument_list></call> <operator pos:start="3253:42" pos:end="3253:42">&lt;</operator> <literal type="number" pos:start="3253:44" pos:end="3253:44">0</literal></expr>)</condition> <block pos:start="3253:47" pos:end="3256:9">{<block_content pos:start="3254:13" pos:end="3255:19">
            <expr_stmt pos:start="3254:13" pos:end="3254:54"><expr pos:start="3254:13" pos:end="3254:53"><call pos:start="3254:13" pos:end="3254:53"><name pos:start="3254:13" pos:end="3254:28">rtsp_reply_error</name><argument_list pos:start="3254:29" pos:end="3254:53">(<argument pos:start="3254:30" pos:end="3254:30"><expr pos:start="3254:30" pos:end="3254:30"><name pos:start="3254:30" pos:end="3254:30">c</name></expr></argument>, <argument pos:start="3254:33" pos:end="3254:52"><expr pos:start="3254:33" pos:end="3254:52"><name pos:start="3254:33" pos:end="3254:52">RTSP_STATUS_INTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="3255:13" pos:end="3255:19">return;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="3259:5" pos:end="3260:38">/* test if stream is OK (test needed because several SETUP needs
     * to be done for a given file) */</comment>
    <if_stmt pos:start="3261:5" pos:end="3264:5"><if pos:start="3261:5" pos:end="3264:5">if <condition pos:start="3261:8" pos:end="3261:32">(<expr pos:start="3261:9" pos:end="3261:31"><name pos:start="3261:9" pos:end="3261:21"><name pos:start="3261:9" pos:end="3261:13">rtp_c</name><operator pos:start="3261:14" pos:end="3261:15">-&gt;</operator><name pos:start="3261:16" pos:end="3261:21">stream</name></name> <operator pos:start="3261:23" pos:end="3261:24">!=</operator> <name pos:start="3261:26" pos:end="3261:31">stream</name></expr>)</condition> <block pos:start="3261:34" pos:end="3264:5">{<block_content pos:start="3262:9" pos:end="3263:15">
        <expr_stmt pos:start="3262:9" pos:end="3262:49"><expr pos:start="3262:9" pos:end="3262:48"><call pos:start="3262:9" pos:end="3262:48"><name pos:start="3262:9" pos:end="3262:24">rtsp_reply_error</name><argument_list pos:start="3262:25" pos:end="3262:48">(<argument pos:start="3262:26" pos:end="3262:26"><expr pos:start="3262:26" pos:end="3262:26"><name pos:start="3262:26" pos:end="3262:26">c</name></expr></argument>, <argument pos:start="3262:29" pos:end="3262:47"><expr pos:start="3262:29" pos:end="3262:47"><name pos:start="3262:29" pos:end="3262:47">RTSP_STATUS_SERVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="3263:9" pos:end="3263:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="3266:5" pos:end="3266:42">/* test if stream is already set up */</comment>
    <if_stmt pos:start="3267:5" pos:end="3270:5"><if pos:start="3267:5" pos:end="3270:5">if <condition pos:start="3267:8" pos:end="3267:37">(<expr pos:start="3267:9" pos:end="3267:36"><name pos:start="3267:9" pos:end="3267:36"><name pos:start="3267:9" pos:end="3267:13">rtp_c</name><operator pos:start="3267:14" pos:end="3267:15">-&gt;</operator><name pos:start="3267:16" pos:end="3267:22">rtp_ctx</name><index pos:start="3267:23" pos:end="3267:36">[<expr pos:start="3267:24" pos:end="3267:35"><name pos:start="3267:24" pos:end="3267:35">stream_index</name></expr>]</index></name></expr>)</condition> <block pos:start="3267:39" pos:end="3270:5">{<block_content pos:start="3268:9" pos:end="3269:15">
        <expr_stmt pos:start="3268:9" pos:end="3268:47"><expr pos:start="3268:9" pos:end="3268:46"><call pos:start="3268:9" pos:end="3268:46"><name pos:start="3268:9" pos:end="3268:24">rtsp_reply_error</name><argument_list pos:start="3268:25" pos:end="3268:46">(<argument pos:start="3268:26" pos:end="3268:26"><expr pos:start="3268:26" pos:end="3268:26"><name pos:start="3268:26" pos:end="3268:26">c</name></expr></argument>, <argument pos:start="3268:29" pos:end="3268:45"><expr pos:start="3268:29" pos:end="3268:45"><name pos:start="3268:29" pos:end="3268:45">RTSP_STATUS_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="3269:9" pos:end="3269:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="3272:5" pos:end="3272:25">/* check transport */</comment>
    <expr_stmt pos:start="3273:5" pos:end="3273:48"><expr pos:start="3273:5" pos:end="3273:47"><name pos:start="3273:5" pos:end="3273:6">th</name> <operator pos:start="3273:8" pos:end="3273:8">=</operator> <call pos:start="3273:10" pos:end="3273:47"><name pos:start="3273:10" pos:end="3273:23">find_transport</name><argument_list pos:start="3273:24" pos:end="3273:47">(<argument pos:start="3273:25" pos:end="3273:25"><expr pos:start="3273:25" pos:end="3273:25"><name pos:start="3273:25" pos:end="3273:25">h</name></expr></argument>, <argument pos:start="3273:28" pos:end="3273:46"><expr pos:start="3273:28" pos:end="3273:46"><name pos:start="3273:28" pos:end="3273:46"><name pos:start="3273:28" pos:end="3273:32">rtp_c</name><operator pos:start="3273:33" pos:end="3273:34">-&gt;</operator><name pos:start="3273:35" pos:end="3273:46">rtp_protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3274:5" pos:end="3278:5"><if pos:start="3274:5" pos:end="3278:5">if <condition pos:start="3274:8" pos:end="3275:42">(!th || (th-&gt;lower_transport == RTSP_LOWER_TRANSPORT_UDP &amp;&amp;
                th-&gt;client_port_min &lt;= 0))</condition> <block pos:start="3275:44" pos:end="3278:5">{<block_content pos:start="3276:9" pos:end="3277:15">
        <expr_stmt pos:start="3276:9" pos:end="3276:51"><expr pos:start="3276:9" pos:end="3276:50"><call pos:start="3276:9" pos:end="3276:50"><name pos:start="3276:9" pos:end="3276:24">rtsp_reply_error</name><argument_list pos:start="3276:25" pos:end="3276:50">(<argument pos:start="3276:26" pos:end="3276:26"><expr pos:start="3276:26" pos:end="3276:26"><name pos:start="3276:26" pos:end="3276:26">c</name></expr></argument>, <argument pos:start="3276:29" pos:end="3276:49"><expr pos:start="3276:29" pos:end="3276:49"><name pos:start="3276:29" pos:end="3276:49">RTSP_STATUS_TRANSPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="3277:9" pos:end="3277:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="3280:5" pos:end="3280:31">/* setup default options */</comment>
    <expr_stmt pos:start="3281:5" pos:end="3281:37"><expr pos:start="3281:5" pos:end="3281:36"><name pos:start="3281:5" pos:end="3281:29"><name pos:start="3281:5" pos:end="3281:9">setup</name><operator pos:start="3281:10" pos:end="3281:10">.</operator><name pos:start="3281:11" pos:end="3281:26">transport_option</name><index pos:start="3281:27" pos:end="3281:29">[<expr pos:start="3281:28" pos:end="3281:28"><literal type="number" pos:start="3281:28" pos:end="3281:28">0</literal></expr>]</index></name> <operator pos:start="3281:31" pos:end="3281:31">=</operator> <literal type="char" pos:start="3281:33" pos:end="3281:36">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="3282:5" pos:end="3282:33"><expr pos:start="3282:5" pos:end="3282:32"><name pos:start="3282:5" pos:end="3282:13">dest_addr</name> <operator pos:start="3282:15" pos:end="3282:15">=</operator> <name pos:start="3282:17" pos:end="3282:32"><name pos:start="3282:17" pos:end="3282:21">rtp_c</name><operator pos:start="3282:22" pos:end="3282:23">-&gt;</operator><name pos:start="3282:24" pos:end="3282:32">from_addr</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="3283:5" pos:end="3283:52"><expr pos:start="3283:5" pos:end="3283:51"><name pos:start="3283:5" pos:end="3283:22"><name pos:start="3283:5" pos:end="3283:13">dest_addr</name><operator pos:start="3283:14" pos:end="3283:14">.</operator><name pos:start="3283:15" pos:end="3283:22">sin_port</name></name> <operator pos:start="3283:24" pos:end="3283:24">=</operator> <call pos:start="3283:26" pos:end="3283:51"><name pos:start="3283:26" pos:end="3283:30">htons</name><argument_list pos:start="3283:31" pos:end="3283:51">(<argument pos:start="3283:32" pos:end="3283:50"><expr pos:start="3283:32" pos:end="3283:50"><name pos:start="3283:32" pos:end="3283:50"><name pos:start="3283:32" pos:end="3283:33">th</name><operator pos:start="3283:34" pos:end="3283:35">-&gt;</operator><name pos:start="3283:36" pos:end="3283:50">client_port_min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="3285:5" pos:end="3285:22">/* setup stream */</comment>
    <if_stmt pos:start="3286:5" pos:end="3289:5"><if pos:start="3286:5" pos:end="3289:5">if <condition pos:start="3286:8" pos:end="3286:66">(<expr pos:start="3286:9" pos:end="3286:65"><call pos:start="3286:9" pos:end="3286:61"><name pos:start="3286:9" pos:end="3286:25">rtp_new_av_stream</name><argument_list pos:start="3286:26" pos:end="3286:61">(<argument pos:start="3286:27" pos:end="3286:31"><expr pos:start="3286:27" pos:end="3286:31"><name pos:start="3286:27" pos:end="3286:31">rtp_c</name></expr></argument>, <argument pos:start="3286:34" pos:end="3286:45"><expr pos:start="3286:34" pos:end="3286:45"><name pos:start="3286:34" pos:end="3286:45">stream_index</name></expr></argument>, <argument pos:start="3286:48" pos:end="3286:57"><expr pos:start="3286:48" pos:end="3286:57"><operator pos:start="3286:48" pos:end="3286:48">&amp;</operator><name pos:start="3286:49" pos:end="3286:57">dest_addr</name></expr></argument>, <argument pos:start="3286:60" pos:end="3286:60"><expr pos:start="3286:60" pos:end="3286:60"><name pos:start="3286:60" pos:end="3286:60">c</name></expr></argument>)</argument_list></call> <operator pos:start="3286:63" pos:end="3286:63">&lt;</operator> <literal type="number" pos:start="3286:65" pos:end="3286:65">0</literal></expr>)</condition> <block pos:start="3286:68" pos:end="3289:5">{<block_content pos:start="3287:9" pos:end="3288:15">
        <expr_stmt pos:start="3287:9" pos:end="3287:51"><expr pos:start="3287:9" pos:end="3287:50"><call pos:start="3287:9" pos:end="3287:50"><name pos:start="3287:9" pos:end="3287:24">rtsp_reply_error</name><argument_list pos:start="3287:25" pos:end="3287:50">(<argument pos:start="3287:26" pos:end="3287:26"><expr pos:start="3287:26" pos:end="3287:26"><name pos:start="3287:26" pos:end="3287:26">c</name></expr></argument>, <argument pos:start="3287:29" pos:end="3287:49"><expr pos:start="3287:29" pos:end="3287:49"><name pos:start="3287:29" pos:end="3287:49">RTSP_STATUS_TRANSPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="3288:9" pos:end="3288:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="3291:5" pos:end="3291:72">/* now everything is OK, so we can send the connection parameters */</comment>
    <expr_stmt pos:start="3292:5" pos:end="3292:41"><expr pos:start="3292:5" pos:end="3292:40"><call pos:start="3292:5" pos:end="3292:40"><name pos:start="3292:5" pos:end="3292:21">rtsp_reply_header</name><argument_list pos:start="3292:22" pos:end="3292:40">(<argument pos:start="3292:23" pos:end="3292:23"><expr pos:start="3292:23" pos:end="3292:23"><name pos:start="3292:23" pos:end="3292:23">c</name></expr></argument>, <argument pos:start="3292:26" pos:end="3292:39"><expr pos:start="3292:26" pos:end="3292:39"><name pos:start="3292:26" pos:end="3292:39">RTSP_STATUS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="3293:5" pos:end="3293:20">/* session ID */</comment>
    <expr_stmt pos:start="3294:5" pos:end="3294:61"><expr pos:start="3294:5" pos:end="3294:60"><call pos:start="3294:5" pos:end="3294:60"><name pos:start="3294:5" pos:end="3294:15">avio_printf</name><argument_list pos:start="3294:16" pos:end="3294:60">(<argument pos:start="3294:17" pos:end="3294:21"><expr pos:start="3294:17" pos:end="3294:21"><name pos:start="3294:17" pos:end="3294:21"><name pos:start="3294:17" pos:end="3294:17">c</name><operator pos:start="3294:18" pos:end="3294:19">-&gt;</operator><name pos:start="3294:20" pos:end="3294:21">pb</name></name></expr></argument>, <argument pos:start="3294:24" pos:end="3294:40"><expr pos:start="3294:24" pos:end="3294:40"><literal type="string" pos:start="3294:24" pos:end="3294:40">"Session: %s\r\n"</literal></expr></argument>, <argument pos:start="3294:43" pos:end="3294:59"><expr pos:start="3294:43" pos:end="3294:59"><name pos:start="3294:43" pos:end="3294:59"><name pos:start="3294:43" pos:end="3294:47">rtp_c</name><operator pos:start="3294:48" pos:end="3294:49">-&gt;</operator><name pos:start="3294:50" pos:end="3294:59">session_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="3296:5" pos:end="3311:5">switch<condition pos:start="3296:11" pos:end="3296:31">(<expr pos:start="3296:12" pos:end="3296:30"><name pos:start="3296:12" pos:end="3296:30"><name pos:start="3296:12" pos:end="3296:16">rtp_c</name><operator pos:start="3296:17" pos:end="3296:18">-&gt;</operator><name pos:start="3296:19" pos:end="3296:30">rtp_protocol</name></name></expr>)</condition> <block pos:start="3296:33" pos:end="3311:5">{<block_content pos:start="3297:5" pos:end="3310:14">
    <case pos:start="3297:5" pos:end="3297:34">case <expr pos:start="3297:10" pos:end="3297:33"><name pos:start="3297:10" pos:end="3297:33">RTSP_LOWER_TRANSPORT_UDP</name></expr>:</case>
        <expr_stmt pos:start="3298:9" pos:end="3298:79"><expr pos:start="3298:9" pos:end="3298:78"><name pos:start="3298:9" pos:end="3298:16">rtp_port</name> <operator pos:start="3298:18" pos:end="3298:18">=</operator> <call pos:start="3298:20" pos:end="3298:78"><name pos:start="3298:20" pos:end="3298:44">ff_rtp_get_local_rtp_port</name><argument_list pos:start="3298:45" pos:end="3298:78">(<argument pos:start="3298:46" pos:end="3298:77"><expr pos:start="3298:46" pos:end="3298:77"><name pos:start="3298:46" pos:end="3298:77"><name pos:start="3298:46" pos:end="3298:50">rtp_c</name><operator pos:start="3298:51" pos:end="3298:52">-&gt;</operator><name pos:start="3298:53" pos:end="3298:63">rtp_handles</name><index pos:start="3298:64" pos:end="3298:77">[<expr pos:start="3298:65" pos:end="3298:76"><name pos:start="3298:65" pos:end="3298:76">stream_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3299:9" pos:end="3299:81"><expr pos:start="3299:9" pos:end="3299:80"><name pos:start="3299:9" pos:end="3299:17">rtcp_port</name> <operator pos:start="3299:19" pos:end="3299:19">=</operator> <call pos:start="3299:21" pos:end="3299:80"><name pos:start="3299:21" pos:end="3299:46">ff_rtp_get_local_rtcp_port</name><argument_list pos:start="3299:47" pos:end="3299:80">(<argument pos:start="3299:48" pos:end="3299:79"><expr pos:start="3299:48" pos:end="3299:79"><name pos:start="3299:48" pos:end="3299:79"><name pos:start="3299:48" pos:end="3299:52">rtp_c</name><operator pos:start="3299:53" pos:end="3299:54">-&gt;</operator><name pos:start="3299:55" pos:end="3299:65">rtp_handles</name><index pos:start="3299:66" pos:end="3299:79">[<expr pos:start="3299:67" pos:end="3299:78"><name pos:start="3299:67" pos:end="3299:78">stream_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3300:9" pos:end="3303:41"><expr pos:start="3300:9" pos:end="3303:40"><call pos:start="3300:9" pos:end="3303:40"><name pos:start="3300:9" pos:end="3300:19">avio_printf</name><argument_list pos:start="3300:20" pos:end="3303:40">(<argument pos:start="3300:21" pos:end="3300:25"><expr pos:start="3300:21" pos:end="3300:25"><name pos:start="3300:21" pos:end="3300:25"><name pos:start="3300:21" pos:end="3300:21">c</name><operator pos:start="3300:22" pos:end="3300:23">-&gt;</operator><name pos:start="3300:24" pos:end="3300:25">pb</name></name></expr></argument>, <argument pos:start="3300:28" pos:end="3301:57"><expr pos:start="3300:28" pos:end="3301:57"><literal type="string" pos:start="3300:28" pos:end="3300:60">"Transport: RTP/AVP/UDP;unicast;"</literal>
                    <literal type="string" pos:start="3301:21" pos:end="3301:57">"client_port=%d-%d;server_port=%d-%d"</literal></expr></argument>,
                    <argument pos:start="3302:21" pos:end="3302:39"><expr pos:start="3302:21" pos:end="3302:39"><name pos:start="3302:21" pos:end="3302:39"><name pos:start="3302:21" pos:end="3302:22">th</name><operator pos:start="3302:23" pos:end="3302:24">-&gt;</operator><name pos:start="3302:25" pos:end="3302:39">client_port_min</name></name></expr></argument>, <argument pos:start="3302:42" pos:end="3302:60"><expr pos:start="3302:42" pos:end="3302:60"><name pos:start="3302:42" pos:end="3302:60"><name pos:start="3302:42" pos:end="3302:43">th</name><operator pos:start="3302:44" pos:end="3302:45">-&gt;</operator><name pos:start="3302:46" pos:end="3302:60">client_port_max</name></name></expr></argument>,
                    <argument pos:start="3303:21" pos:end="3303:28"><expr pos:start="3303:21" pos:end="3303:28"><name pos:start="3303:21" pos:end="3303:28">rtp_port</name></expr></argument>, <argument pos:start="3303:31" pos:end="3303:39"><expr pos:start="3303:31" pos:end="3303:39"><name pos:start="3303:31" pos:end="3303:39">rtcp_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="3304:9" pos:end="3304:14">break;</break>
    <case pos:start="3305:5" pos:end="3305:34">case <expr pos:start="3305:10" pos:end="3305:33"><name pos:start="3305:10" pos:end="3305:33">RTSP_LOWER_TRANSPORT_TCP</name></expr>:</case>
        <expr_stmt pos:start="3306:9" pos:end="3307:60"><expr pos:start="3306:9" pos:end="3307:59"><call pos:start="3306:9" pos:end="3307:59"><name pos:start="3306:9" pos:end="3306:19">avio_printf</name><argument_list pos:start="3306:20" pos:end="3307:59">(<argument pos:start="3306:21" pos:end="3306:25"><expr pos:start="3306:21" pos:end="3306:25"><name pos:start="3306:21" pos:end="3306:25"><name pos:start="3306:21" pos:end="3306:21">c</name><operator pos:start="3306:22" pos:end="3306:23">-&gt;</operator><name pos:start="3306:24" pos:end="3306:25">pb</name></name></expr></argument>, <argument pos:start="3306:28" pos:end="3306:69"><expr pos:start="3306:28" pos:end="3306:69"><literal type="string" pos:start="3306:28" pos:end="3306:69">"Transport: RTP/AVP/TCP;interleaved=%d-%d"</literal></expr></argument>,
                    <argument pos:start="3307:21" pos:end="3307:36"><expr pos:start="3307:21" pos:end="3307:36"><name pos:start="3307:21" pos:end="3307:32">stream_index</name> <operator pos:start="3307:34" pos:end="3307:34">*</operator> <literal type="number" pos:start="3307:36" pos:end="3307:36">2</literal></expr></argument>, <argument pos:start="3307:39" pos:end="3307:58"><expr pos:start="3307:39" pos:end="3307:58"><name pos:start="3307:39" pos:end="3307:50">stream_index</name> <operator pos:start="3307:52" pos:end="3307:52">*</operator> <literal type="number" pos:start="3307:54" pos:end="3307:56">2</literal> <operator pos:start="3307:56" pos:end="3307:56">+</operator> <literal type="number" pos:start="3307:58" pos:end="3307:58">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="3308:9" pos:end="3308:14">break;</break>
    <default pos:start="3309:5" pos:end="3309:12">default:</default>
        <break pos:start="3310:9" pos:end="3310:14">break;</break>
    </block_content>}</block></switch>
    <if_stmt pos:start="3312:5" pos:end="3313:58"><if pos:start="3312:5" pos:end="3313:58">if <condition pos:start="3312:8" pos:end="3312:42">(<expr pos:start="3312:9" pos:end="3312:41"><name pos:start="3312:9" pos:end="3312:33"><name pos:start="3312:9" pos:end="3312:13">setup</name><operator pos:start="3312:14" pos:end="3312:14">.</operator><name pos:start="3312:15" pos:end="3312:30">transport_option</name><index pos:start="3312:31" pos:end="3312:33">[<expr pos:start="3312:32" pos:end="3312:32"><literal type="number" pos:start="3312:32" pos:end="3312:32">0</literal></expr>]</index></name> <operator pos:start="3312:35" pos:end="3312:36">!=</operator> <literal type="char" pos:start="3312:38" pos:end="3312:41">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="3313:9" pos:end="3313:58"><block_content pos:start="3313:9" pos:end="3313:58">
        <expr_stmt pos:start="3313:9" pos:end="3313:58"><expr pos:start="3313:9" pos:end="3313:57"><call pos:start="3313:9" pos:end="3313:57"><name pos:start="3313:9" pos:end="3313:19">avio_printf</name><argument_list pos:start="3313:20" pos:end="3313:57">(<argument pos:start="3313:21" pos:end="3313:25"><expr pos:start="3313:21" pos:end="3313:25"><name pos:start="3313:21" pos:end="3313:25"><name pos:start="3313:21" pos:end="3313:21">c</name><operator pos:start="3313:22" pos:end="3313:23">-&gt;</operator><name pos:start="3313:24" pos:end="3313:25">pb</name></name></expr></argument>, <argument pos:start="3313:28" pos:end="3313:32"><expr pos:start="3313:28" pos:end="3313:32"><literal type="string" pos:start="3313:28" pos:end="3313:32">";%s"</literal></expr></argument>, <argument pos:start="3313:35" pos:end="3313:56"><expr pos:start="3313:35" pos:end="3313:56"><name pos:start="3313:35" pos:end="3313:56"><name pos:start="3313:35" pos:end="3313:39">setup</name><operator pos:start="3313:40" pos:end="3313:40">.</operator><name pos:start="3313:41" pos:end="3313:56">transport_option</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="3314:5" pos:end="3314:31"><expr pos:start="3314:5" pos:end="3314:30"><call pos:start="3314:5" pos:end="3314:30"><name pos:start="3314:5" pos:end="3314:15">avio_printf</name><argument_list pos:start="3314:16" pos:end="3314:30">(<argument pos:start="3314:17" pos:end="3314:21"><expr pos:start="3314:17" pos:end="3314:21"><name pos:start="3314:17" pos:end="3314:21"><name pos:start="3314:17" pos:end="3314:17">c</name><operator pos:start="3314:18" pos:end="3314:19">-&gt;</operator><name pos:start="3314:20" pos:end="3314:21">pb</name></name></expr></argument>, <argument pos:start="3314:24" pos:end="3314:29"><expr pos:start="3314:24" pos:end="3314:29"><literal type="string" pos:start="3314:24" pos:end="3314:29">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt pos:start="3317:5" pos:end="3317:31"><expr pos:start="3317:5" pos:end="3317:30"><call pos:start="3317:5" pos:end="3317:30"><name pos:start="3317:5" pos:end="3317:15">avio_printf</name><argument_list pos:start="3317:16" pos:end="3317:30">(<argument pos:start="3317:17" pos:end="3317:21"><expr pos:start="3317:17" pos:end="3317:21"><name pos:start="3317:17" pos:end="3317:21"><name pos:start="3317:17" pos:end="3317:17">c</name><operator pos:start="3317:18" pos:end="3317:19">-&gt;</operator><name pos:start="3317:20" pos:end="3317:21">pb</name></name></expr></argument>, <argument pos:start="3317:24" pos:end="3317:29"><expr pos:start="3317:24" pos:end="3317:29"><literal type="string" pos:start="3317:24" pos:end="3317:29">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen" pos:start="3321:1" pos:end="3324:3">/**
 * find an RTP connection by using the session ID. Check consistency
 * with filename
 */</comment>
<function pos:start="3325:1" pos:end="3359:1"><type pos:start="3325:1" pos:end="3325:20"><specifier pos:start="3325:1" pos:end="3325:6">static</specifier> <name pos:start="3325:8" pos:end="3325:18">HTTPContext</name> <modifier pos:start="3325:20" pos:end="3325:20">*</modifier></type><name pos:start="3325:21" pos:end="3325:45">find_rtp_session_with_url</name><parameter_list pos:start="3325:46" pos:end="3326:69">(<parameter pos:start="3325:47" pos:end="3325:61"><decl pos:start="3325:47" pos:end="3325:61"><type pos:start="3325:47" pos:end="3325:61"><specifier pos:start="3325:47" pos:end="3325:51">const</specifier> <name pos:start="3325:53" pos:end="3325:56">char</name> <modifier pos:start="3325:58" pos:end="3325:58">*</modifier></type><name pos:start="3325:59" pos:end="3325:61">url</name></decl></parameter>,
                                              <parameter pos:start="3326:47" pos:end="3326:68"><decl pos:start="3326:47" pos:end="3326:68"><type pos:start="3326:47" pos:end="3326:68"><specifier pos:start="3326:47" pos:end="3326:51">const</specifier> <name pos:start="3326:53" pos:end="3326:56">char</name> <modifier pos:start="3326:58" pos:end="3326:58">*</modifier></type><name pos:start="3326:59" pos:end="3326:68">session_id</name></decl></parameter>)</parameter_list>
<block pos:start="3327:1" pos:end="3359:1">{<block_content pos:start="3328:5" pos:end="3358:16">
    <decl_stmt pos:start="3328:5" pos:end="3328:23"><decl pos:start="3328:5" pos:end="3328:22"><type pos:start="3328:5" pos:end="3328:17"><name pos:start="3328:5" pos:end="3328:15">HTTPContext</name> <modifier pos:start="3328:17" pos:end="3328:17">*</modifier></type><name pos:start="3328:18" pos:end="3328:22">rtp_c</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3329:5" pos:end="3329:21"><decl pos:start="3329:5" pos:end="3329:20"><type pos:start="3329:5" pos:end="3329:8"><name pos:start="3329:5" pos:end="3329:8">char</name></type> <name pos:start="3329:10" pos:end="3329:20"><name pos:start="3329:10" pos:end="3329:14">path1</name><index pos:start="3329:15" pos:end="3329:20">[<expr pos:start="3329:16" pos:end="3329:19"><literal type="number" pos:start="3329:16" pos:end="3329:19">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="3330:5" pos:end="3330:21"><decl pos:start="3330:5" pos:end="3330:20"><type pos:start="3330:5" pos:end="3330:16"><specifier pos:start="3330:5" pos:end="3330:9">const</specifier> <name pos:start="3330:11" pos:end="3330:14">char</name> <modifier pos:start="3330:16" pos:end="3330:16">*</modifier></type><name pos:start="3330:17" pos:end="3330:20">path</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3331:5" pos:end="3331:19"><decl pos:start="3331:5" pos:end="3331:18"><type pos:start="3331:5" pos:end="3331:8"><name pos:start="3331:5" pos:end="3331:8">char</name></type> <name pos:start="3331:10" pos:end="3331:18"><name pos:start="3331:10" pos:end="3331:12">buf</name><index pos:start="3331:13" pos:end="3331:18">[<expr pos:start="3331:14" pos:end="3331:17"><literal type="number" pos:start="3331:14" pos:end="3331:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="3332:5" pos:end="3332:15"><decl pos:start="3332:5" pos:end="3332:9"><type pos:start="3332:5" pos:end="3332:7"><name pos:start="3332:5" pos:end="3332:7">int</name></type> <name pos:start="3332:9" pos:end="3332:9">s</name></decl>, <decl pos:start="3332:12" pos:end="3332:14"><type ref="prev" pos:start="3332:5" pos:end="3332:7"/><name pos:start="3332:12" pos:end="3332:14">len</name></decl>;</decl_stmt>

    <expr_stmt pos:start="3334:5" pos:end="3334:41"><expr pos:start="3334:5" pos:end="3334:40"><name pos:start="3334:5" pos:end="3334:9">rtp_c</name> <operator pos:start="3334:11" pos:end="3334:11">=</operator> <call pos:start="3334:13" pos:end="3334:40"><name pos:start="3334:13" pos:end="3334:28">find_rtp_session</name><argument_list pos:start="3334:29" pos:end="3334:40">(<argument pos:start="3334:30" pos:end="3334:39"><expr pos:start="3334:30" pos:end="3334:39"><name pos:start="3334:30" pos:end="3334:39">session_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3335:5" pos:end="3336:20"><if pos:start="3335:5" pos:end="3336:20">if <condition pos:start="3335:8" pos:end="3335:15">(<expr pos:start="3335:9" pos:end="3335:14"><operator pos:start="3335:9" pos:end="3335:9">!</operator><name pos:start="3335:10" pos:end="3335:14">rtp_c</name></expr>)</condition><block type="pseudo" pos:start="3336:9" pos:end="3336:20"><block_content pos:start="3336:9" pos:end="3336:20">
        <return pos:start="3336:9" pos:end="3336:20">return <expr pos:start="3336:16" pos:end="3336:19"><name pos:start="3336:16" pos:end="3336:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block" pos:start="3338:5" pos:end="3338:33">/* find which URL is asked */</comment>
    <expr_stmt pos:start="3339:5" pos:end="3339:77"><expr pos:start="3339:5" pos:end="3339:76"><call pos:start="3339:5" pos:end="3339:76"><name pos:start="3339:5" pos:end="3339:16">av_url_split</name><argument_list pos:start="3339:17" pos:end="3339:76">(<argument pos:start="3339:18" pos:end="3339:21"><expr pos:start="3339:18" pos:end="3339:21"><name pos:start="3339:18" pos:end="3339:21">NULL</name></expr></argument>, <argument pos:start="3339:24" pos:end="3339:24"><expr pos:start="3339:24" pos:end="3339:24"><literal type="number" pos:start="3339:24" pos:end="3339:24">0</literal></expr></argument>, <argument pos:start="3339:27" pos:end="3339:30"><expr pos:start="3339:27" pos:end="3339:30"><name pos:start="3339:27" pos:end="3339:30">NULL</name></expr></argument>, <argument pos:start="3339:33" pos:end="3339:33"><expr pos:start="3339:33" pos:end="3339:33"><literal type="number" pos:start="3339:33" pos:end="3339:33">0</literal></expr></argument>, <argument pos:start="3339:36" pos:end="3339:39"><expr pos:start="3339:36" pos:end="3339:39"><name pos:start="3339:36" pos:end="3339:39">NULL</name></expr></argument>, <argument pos:start="3339:42" pos:end="3339:42"><expr pos:start="3339:42" pos:end="3339:42"><literal type="number" pos:start="3339:42" pos:end="3339:42">0</literal></expr></argument>, <argument pos:start="3339:45" pos:end="3339:48"><expr pos:start="3339:45" pos:end="3339:48"><name pos:start="3339:45" pos:end="3339:48">NULL</name></expr></argument>, <argument pos:start="3339:51" pos:end="3339:55"><expr pos:start="3339:51" pos:end="3339:55"><name pos:start="3339:51" pos:end="3339:55">path1</name></expr></argument>, <argument pos:start="3339:58" pos:end="3339:70"><expr pos:start="3339:58" pos:end="3339:70"><sizeof pos:start="3339:58" pos:end="3339:70">sizeof<argument_list pos:start="3339:64" pos:end="3339:70">(<argument pos:start="3339:65" pos:end="3339:69"><expr pos:start="3339:65" pos:end="3339:69"><name pos:start="3339:65" pos:end="3339:69">path1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="3339:73" pos:end="3339:75"><expr pos:start="3339:73" pos:end="3339:75"><name pos:start="3339:73" pos:end="3339:75">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3340:5" pos:end="3340:17"><expr pos:start="3340:5" pos:end="3340:16"><name pos:start="3340:5" pos:end="3340:8">path</name> <operator pos:start="3340:10" pos:end="3340:10">=</operator> <name pos:start="3340:12" pos:end="3340:16">path1</name></expr>;</expr_stmt>
    <if_stmt pos:start="3341:5" pos:end="3342:15"><if pos:start="3341:5" pos:end="3342:15">if <condition pos:start="3341:8" pos:end="3341:21">(<expr pos:start="3341:9" pos:end="3341:20"><operator pos:start="3341:9" pos:end="3341:9">*</operator><name pos:start="3341:10" pos:end="3341:13">path</name> <operator pos:start="3341:15" pos:end="3341:16">==</operator> <literal type="char" pos:start="3341:18" pos:end="3341:20">'/'</literal></expr>)</condition><block type="pseudo" pos:start="3342:9" pos:end="3342:15"><block_content pos:start="3342:9" pos:end="3342:15">
        <expr_stmt pos:start="3342:9" pos:end="3342:15"><expr pos:start="3342:9" pos:end="3342:14"><name pos:start="3342:9" pos:end="3342:12">path</name><operator pos:start="3342:13" pos:end="3342:14">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="3343:5" pos:end="3343:60"><if pos:start="3343:5" pos:end="3343:60">if<condition pos:start="3343:7" pos:end="3343:46">(<expr pos:start="3343:8" pos:end="3343:45"><operator pos:start="3343:8" pos:end="3343:8">!</operator><call pos:start="3343:9" pos:end="3343:45"><name pos:start="3343:9" pos:end="3343:14">strcmp</name><argument_list pos:start="3343:15" pos:end="3343:45">(<argument pos:start="3343:16" pos:end="3343:19"><expr pos:start="3343:16" pos:end="3343:19"><name pos:start="3343:16" pos:end="3343:19">path</name></expr></argument>, <argument pos:start="3343:22" pos:end="3343:44"><expr pos:start="3343:22" pos:end="3343:44"><name pos:start="3343:22" pos:end="3343:44"><name pos:start="3343:22" pos:end="3343:26">rtp_c</name><operator pos:start="3343:27" pos:end="3343:28">-&gt;</operator><name pos:start="3343:29" pos:end="3343:34">stream</name><operator pos:start="3343:35" pos:end="3343:36">-&gt;</operator><name pos:start="3343:37" pos:end="3343:44">filename</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3343:48" pos:end="3343:60"><block_content pos:start="3343:48" pos:end="3343:60"> <return pos:start="3343:48" pos:end="3343:60">return <expr pos:start="3343:55" pos:end="3343:59"><name pos:start="3343:55" pos:end="3343:59">rtp_c</name></expr>;</return></block_content></block></if></if_stmt>
    <for pos:start="3344:5" pos:end="3351:5">for<control pos:start="3344:8" pos:end="3344:46">(<init pos:start="3344:9" pos:end="3344:12"><expr pos:start="3344:9" pos:end="3344:11"><name pos:start="3344:9" pos:end="3344:9">s</name><operator pos:start="3344:10" pos:end="3344:10">=</operator><literal type="number" pos:start="3344:11" pos:end="3344:11">0</literal></expr>;</init> <condition pos:start="3344:14" pos:end="3344:41"><expr pos:start="3344:14" pos:end="3344:40"><name pos:start="3344:14" pos:end="3344:14">s</name><operator pos:start="3344:15" pos:end="3344:15">&lt;</operator><name pos:start="3344:16" pos:end="3344:40"><name pos:start="3344:16" pos:end="3344:20">rtp_c</name><operator pos:start="3344:21" pos:end="3344:22">-&gt;</operator><name pos:start="3344:23" pos:end="3344:28">stream</name><operator pos:start="3344:29" pos:end="3344:30">-&gt;</operator><name pos:start="3344:31" pos:end="3344:40">nb_streams</name></name></expr>;</condition> <incr pos:start="3344:43" pos:end="3344:45"><expr pos:start="3344:43" pos:end="3344:45"><operator pos:start="3344:43" pos:end="3344:44">++</operator><name pos:start="3344:45" pos:end="3344:45">s</name></expr></incr>)</control> <block pos:start="3344:48" pos:end="3351:5">{<block_content pos:start="3345:7" pos:end="3350:21">
      <expr_stmt pos:start="3345:7" pos:end="3346:36"><expr pos:start="3345:7" pos:end="3346:35"><call pos:start="3345:7" pos:end="3346:35"><name pos:start="3345:7" pos:end="3345:14">snprintf</name><argument_list pos:start="3345:15" pos:end="3346:35">(<argument pos:start="3345:16" pos:end="3345:18"><expr pos:start="3345:16" pos:end="3345:18"><name pos:start="3345:16" pos:end="3345:18">buf</name></expr></argument>, <argument pos:start="3345:21" pos:end="3345:31"><expr pos:start="3345:21" pos:end="3345:31"><sizeof pos:start="3345:21" pos:end="3345:31">sizeof<argument_list pos:start="3345:27" pos:end="3345:31">(<argument pos:start="3345:28" pos:end="3345:30"><expr pos:start="3345:28" pos:end="3345:30"><name pos:start="3345:28" pos:end="3345:30">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="3345:34" pos:end="3345:49"><expr pos:start="3345:34" pos:end="3345:49"><literal type="string" pos:start="3345:34" pos:end="3345:49">"%s/streamid=%d"</literal></expr></argument>,
        <argument pos:start="3346:9" pos:end="3346:31"><expr pos:start="3346:9" pos:end="3346:31"><name pos:start="3346:9" pos:end="3346:31"><name pos:start="3346:9" pos:end="3346:13">rtp_c</name><operator pos:start="3346:14" pos:end="3346:15">-&gt;</operator><name pos:start="3346:16" pos:end="3346:21">stream</name><operator pos:start="3346:22" pos:end="3346:23">-&gt;</operator><name pos:start="3346:24" pos:end="3346:31">filename</name></name></expr></argument>, <argument pos:start="3346:34" pos:end="3346:34"><expr pos:start="3346:34" pos:end="3346:34"><name pos:start="3346:34" pos:end="3346:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt pos:start="3347:7" pos:end="3350:21"><if pos:start="3347:7" pos:end="3350:21">if<condition pos:start="3347:9" pos:end="3347:42">(<expr pos:start="3347:10" pos:end="3347:41"><operator pos:start="3347:10" pos:end="3347:10">!</operator><call pos:start="3347:11" pos:end="3347:41"><name pos:start="3347:11" pos:end="3347:17">strncmp</name><argument_list pos:start="3347:18" pos:end="3347:41">(<argument pos:start="3347:19" pos:end="3347:22"><expr pos:start="3347:19" pos:end="3347:22"><name pos:start="3347:19" pos:end="3347:22">path</name></expr></argument>, <argument pos:start="3347:25" pos:end="3347:27"><expr pos:start="3347:25" pos:end="3347:27"><name pos:start="3347:25" pos:end="3347:27">buf</name></expr></argument>, <argument pos:start="3347:30" pos:end="3347:40"><expr pos:start="3347:30" pos:end="3347:40"><sizeof pos:start="3347:30" pos:end="3347:40">sizeof<argument_list pos:start="3347:36" pos:end="3347:40">(<argument pos:start="3347:37" pos:end="3347:39"><expr pos:start="3347:37" pos:end="3347:39"><name pos:start="3347:37" pos:end="3347:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3350:9" pos:end="3350:21"><block_content pos:start="3350:9" pos:end="3350:21">
        <comment type="block" pos:start="3348:9" pos:end="3349:30">/* XXX: Should we reply with RTSP_STATUS_ONLY_AGGREGATE
         * if nb_streams&gt;1? */</comment>
        <return pos:start="3350:9" pos:end="3350:21">return <expr pos:start="3350:16" pos:end="3350:20"><name pos:start="3350:16" pos:end="3350:20">rtp_c</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="3352:5" pos:end="3352:23"><expr pos:start="3352:5" pos:end="3352:22"><name pos:start="3352:5" pos:end="3352:7">len</name> <operator pos:start="3352:9" pos:end="3352:9">=</operator> <call pos:start="3352:11" pos:end="3352:22"><name pos:start="3352:11" pos:end="3352:16">strlen</name><argument_list pos:start="3352:17" pos:end="3352:22">(<argument pos:start="3352:18" pos:end="3352:21"><expr pos:start="3352:18" pos:end="3352:21"><name pos:start="3352:18" pos:end="3352:21">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3353:5" pos:end="3357:23"><if pos:start="3353:5" pos:end="3357:23">if <condition pos:start="3353:8" pos:end="3353:17">(<expr pos:start="3353:9" pos:end="3353:15"><name pos:start="3353:9" pos:end="3353:11">len</name> <operator pos:start="3353:13" pos:end="3353:13">&gt;</operator> <literal type="number" pos:start="3353:15" pos:end="3353:15">0</literal></expr> )</condition><block pos:start="3353:18" pos:end="3357:23">{<block_content pos:start="3354:1" pos:end="3357:22">
<if_stmt pos:start="3354:1" pos:end="3357:22"><if pos:start="3354:1" pos:end="3357:22">if<condition pos:start="3354:3" pos:end="3354:26">( <expr pos:start="3354:5" pos:end="3354:24"><name pos:start="3354:5" pos:end="3354:17"><name pos:start="3354:5" pos:end="3354:8">path</name><index pos:start="3354:9" pos:end="3354:17">[<expr pos:start="3354:10" pos:end="3354:16"><name pos:start="3354:10" pos:end="3354:12">len</name> <operator pos:start="3354:14" pos:end="3354:14">-</operator> <literal type="number" pos:start="3354:16" pos:end="3354:16">1</literal></expr>]</index></name> <operator pos:start="3354:19" pos:end="3354:20">==</operator> <literal type="char" pos:start="3354:22" pos:end="3354:24">'/'</literal></expr> )</condition><block pos:start="3354:27" pos:end="3357:22">{<block_content pos:start="3355:1" pos:end="3357:21">
<if_stmt pos:start="3355:1" pos:end="3357:21"><if pos:start="3355:1" pos:end="3357:21">if<condition pos:start="3355:3" pos:end="3356:57">(
        <expr pos:start="3356:9" pos:end="3356:56"><operator pos:start="3356:9" pos:end="3356:9">!</operator><call pos:start="3356:10" pos:end="3356:56"><name pos:start="3356:10" pos:end="3356:16">strncmp</name><argument_list pos:start="3356:17" pos:end="3356:56">(<argument pos:start="3356:18" pos:end="3356:21"><expr pos:start="3356:18" pos:end="3356:21"><name pos:start="3356:18" pos:end="3356:21">path</name></expr></argument>, <argument pos:start="3356:24" pos:end="3356:46"><expr pos:start="3356:24" pos:end="3356:46"><name pos:start="3356:24" pos:end="3356:46"><name pos:start="3356:24" pos:end="3356:28">rtp_c</name><operator pos:start="3356:29" pos:end="3356:30">-&gt;</operator><name pos:start="3356:31" pos:end="3356:36">stream</name><operator pos:start="3356:37" pos:end="3356:38">-&gt;</operator><name pos:start="3356:39" pos:end="3356:46">filename</name></name></expr></argument>, <argument pos:start="3356:49" pos:end="3356:55"><expr pos:start="3356:49" pos:end="3356:55"><name pos:start="3356:49" pos:end="3356:51">len</name> <operator pos:start="3356:53" pos:end="3356:53">-</operator> <literal type="number" pos:start="3356:55" pos:end="3356:55">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3357:9" pos:end="3357:21"><block_content pos:start="3357:9" pos:end="3357:21">
        <return pos:start="3357:9" pos:end="3357:21">return <expr pos:start="3357:16" pos:end="3357:20"><name pos:start="3357:16" pos:end="3357:20">rtp_c</name></expr>;</return></block_content></block></if></if_stmt></block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt>
    <return pos:start="3358:5" pos:end="3358:16">return <expr pos:start="3358:12" pos:end="3358:15"><name pos:start="3358:12" pos:end="3358:15">NULL</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="3361:1" pos:end="3387:1"><type pos:start="3361:1" pos:end="3361:11"><specifier pos:start="3361:1" pos:end="3361:6">static</specifier> <name pos:start="3361:8" pos:end="3361:11">void</name></type> <name pos:start="3361:13" pos:end="3361:25">rtsp_cmd_play</name><parameter_list pos:start="3361:26" pos:end="3361:80">(<parameter pos:start="3361:27" pos:end="3361:40"><decl pos:start="3361:27" pos:end="3361:40"><type pos:start="3361:27" pos:end="3361:40"><name pos:start="3361:27" pos:end="3361:37">HTTPContext</name> <modifier pos:start="3361:39" pos:end="3361:39">*</modifier></type><name pos:start="3361:40" pos:end="3361:40">c</name></decl></parameter>, <parameter pos:start="3361:43" pos:end="3361:57"><decl pos:start="3361:43" pos:end="3361:57"><type pos:start="3361:43" pos:end="3361:57"><specifier pos:start="3361:43" pos:end="3361:47">const</specifier> <name pos:start="3361:49" pos:end="3361:52">char</name> <modifier pos:start="3361:54" pos:end="3361:54">*</modifier></type><name pos:start="3361:55" pos:end="3361:57">url</name></decl></parameter>, <parameter pos:start="3361:60" pos:end="3361:79"><decl pos:start="3361:60" pos:end="3361:79"><type pos:start="3361:60" pos:end="3361:79"><name pos:start="3361:60" pos:end="3361:76">RTSPMessageHeader</name> <modifier pos:start="3361:78" pos:end="3361:78">*</modifier></type><name pos:start="3361:79" pos:end="3361:79">h</name></decl></parameter>)</parameter_list>
<block pos:start="3362:1" pos:end="3387:1">{<block_content pos:start="3363:5" pos:end="3386:31">
    <decl_stmt pos:start="3363:5" pos:end="3363:23"><decl pos:start="3363:5" pos:end="3363:22"><type pos:start="3363:5" pos:end="3363:17"><name pos:start="3363:5" pos:end="3363:15">HTTPContext</name> <modifier pos:start="3363:17" pos:end="3363:17">*</modifier></type><name pos:start="3363:18" pos:end="3363:22">rtp_c</name></decl>;</decl_stmt>

    <expr_stmt pos:start="3365:5" pos:end="3365:58"><expr pos:start="3365:5" pos:end="3365:57"><name pos:start="3365:5" pos:end="3365:9">rtp_c</name> <operator pos:start="3365:11" pos:end="3365:11">=</operator> <call pos:start="3365:13" pos:end="3365:57"><name pos:start="3365:13" pos:end="3365:37">find_rtp_session_with_url</name><argument_list pos:start="3365:38" pos:end="3365:57">(<argument pos:start="3365:39" pos:end="3365:41"><expr pos:start="3365:39" pos:end="3365:41"><name pos:start="3365:39" pos:end="3365:41">url</name></expr></argument>, <argument pos:start="3365:44" pos:end="3365:56"><expr pos:start="3365:44" pos:end="3365:56"><name pos:start="3365:44" pos:end="3365:56"><name pos:start="3365:44" pos:end="3365:44">h</name><operator pos:start="3365:45" pos:end="3365:46">-&gt;</operator><name pos:start="3365:47" pos:end="3365:56">session_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3366:5" pos:end="3369:5"><if pos:start="3366:5" pos:end="3369:5">if <condition pos:start="3366:8" pos:end="3366:15">(<expr pos:start="3366:9" pos:end="3366:14"><operator pos:start="3366:9" pos:end="3366:9">!</operator><name pos:start="3366:10" pos:end="3366:14">rtp_c</name></expr>)</condition> <block pos:start="3366:17" pos:end="3369:5">{<block_content pos:start="3367:9" pos:end="3368:15">
        <expr_stmt pos:start="3367:9" pos:end="3367:49"><expr pos:start="3367:9" pos:end="3367:48"><call pos:start="3367:9" pos:end="3367:48"><name pos:start="3367:9" pos:end="3367:24">rtsp_reply_error</name><argument_list pos:start="3367:25" pos:end="3367:48">(<argument pos:start="3367:26" pos:end="3367:26"><expr pos:start="3367:26" pos:end="3367:26"><name pos:start="3367:26" pos:end="3367:26">c</name></expr></argument>, <argument pos:start="3367:29" pos:end="3367:47"><expr pos:start="3367:29" pos:end="3367:47"><name pos:start="3367:29" pos:end="3367:47">RTSP_STATUS_SESSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="3368:9" pos:end="3368:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="3371:5" pos:end="3378:7"><if pos:start="3371:5" pos:end="3378:7">if <condition pos:start="3371:8" pos:end="3371:45">(<expr pos:start="3371:9" pos:end="3371:43"><name pos:start="3371:9" pos:end="3371:20"><name pos:start="3371:9" pos:end="3371:13">rtp_c</name><operator pos:start="3371:14" pos:end="3371:15">-&gt;</operator><name pos:start="3371:16" pos:end="3371:20">state</name></name> <operator pos:start="3371:22" pos:end="3371:23">!=</operator> <name pos:start="3371:25" pos:end="3371:43">HTTPSTATE_SEND_DATA</name></expr> )</condition><block pos:start="3371:46" pos:end="3378:7">{<block_content pos:start="3372:1" pos:end="3378:6">
<if_stmt pos:start="3372:1" pos:end="3378:6"><if pos:start="3372:1" pos:end="3378:6">if<condition pos:start="3372:3" pos:end="3373:45">(
        <expr pos:start="3373:9" pos:end="3373:43"><name pos:start="3373:9" pos:end="3373:20"><name pos:start="3373:9" pos:end="3373:13">rtp_c</name><operator pos:start="3373:14" pos:end="3373:15">-&gt;</operator><name pos:start="3373:16" pos:end="3373:20">state</name></name> <operator pos:start="3373:22" pos:end="3373:23">!=</operator> <name pos:start="3373:25" pos:end="3373:43">HTTPSTATE_WAIT_FEED</name></expr> )</condition><block pos:start="3373:46" pos:end="3378:6">{<block_content pos:start="3374:1" pos:end="3378:5">
<if_stmt pos:start="3374:1" pos:end="3378:5"><if pos:start="3374:1" pos:end="3378:5">if<condition pos:start="3374:3" pos:end="3375:40">(
        <expr pos:start="3375:9" pos:end="3375:39"><name pos:start="3375:9" pos:end="3375:20"><name pos:start="3375:9" pos:end="3375:13">rtp_c</name><operator pos:start="3375:14" pos:end="3375:15">-&gt;</operator><name pos:start="3375:16" pos:end="3375:20">state</name></name> <operator pos:start="3375:22" pos:end="3375:23">!=</operator> <name pos:start="3375:25" pos:end="3375:39">HTTPSTATE_READY</name></expr>)</condition> <block pos:start="3375:42" pos:end="3378:5">{<block_content pos:start="3376:9" pos:end="3377:15">
        <expr_stmt pos:start="3376:9" pos:end="3376:47"><expr pos:start="3376:9" pos:end="3376:46"><call pos:start="3376:9" pos:end="3376:46"><name pos:start="3376:9" pos:end="3376:24">rtsp_reply_error</name><argument_list pos:start="3376:25" pos:end="3376:46">(<argument pos:start="3376:26" pos:end="3376:26"><expr pos:start="3376:26" pos:end="3376:26"><name pos:start="3376:26" pos:end="3376:26">c</name></expr></argument>, <argument pos:start="3376:29" pos:end="3376:45"><expr pos:start="3376:29" pos:end="3376:45"><name pos:start="3376:29" pos:end="3376:45">RTSP_STATUS_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="3377:9" pos:end="3377:15">return;</return>
    </block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="3380:5" pos:end="3380:39"><expr pos:start="3380:5" pos:end="3380:38"><name pos:start="3380:5" pos:end="3380:16"><name pos:start="3380:5" pos:end="3380:9">rtp_c</name><operator pos:start="3380:10" pos:end="3380:11">-&gt;</operator><name pos:start="3380:12" pos:end="3380:16">state</name></name> <operator pos:start="3380:18" pos:end="3380:18">=</operator> <name pos:start="3380:20" pos:end="3380:38">HTTPSTATE_SEND_DATA</name></expr>;</expr_stmt>

    <comment type="block" pos:start="3382:5" pos:end="3382:72">/* now everything is OK, so we can send the connection parameters */</comment>
    <expr_stmt pos:start="3383:5" pos:end="3383:41"><expr pos:start="3383:5" pos:end="3383:40"><call pos:start="3383:5" pos:end="3383:40"><name pos:start="3383:5" pos:end="3383:21">rtsp_reply_header</name><argument_list pos:start="3383:22" pos:end="3383:40">(<argument pos:start="3383:23" pos:end="3383:23"><expr pos:start="3383:23" pos:end="3383:23"><name pos:start="3383:23" pos:end="3383:23">c</name></expr></argument>, <argument pos:start="3383:26" pos:end="3383:39"><expr pos:start="3383:26" pos:end="3383:39"><name pos:start="3383:26" pos:end="3383:39">RTSP_STATUS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="3384:5" pos:end="3384:20">/* session ID */</comment>
    <expr_stmt pos:start="3385:5" pos:end="3385:61"><expr pos:start="3385:5" pos:end="3385:60"><call pos:start="3385:5" pos:end="3385:60"><name pos:start="3385:5" pos:end="3385:15">avio_printf</name><argument_list pos:start="3385:16" pos:end="3385:60">(<argument pos:start="3385:17" pos:end="3385:21"><expr pos:start="3385:17" pos:end="3385:21"><name pos:start="3385:17" pos:end="3385:21"><name pos:start="3385:17" pos:end="3385:17">c</name><operator pos:start="3385:18" pos:end="3385:19">-&gt;</operator><name pos:start="3385:20" pos:end="3385:21">pb</name></name></expr></argument>, <argument pos:start="3385:24" pos:end="3385:40"><expr pos:start="3385:24" pos:end="3385:40"><literal type="string" pos:start="3385:24" pos:end="3385:40">"Session: %s\r\n"</literal></expr></argument>, <argument pos:start="3385:43" pos:end="3385:59"><expr pos:start="3385:43" pos:end="3385:59"><name pos:start="3385:43" pos:end="3385:59"><name pos:start="3385:43" pos:end="3385:47">rtp_c</name><operator pos:start="3385:48" pos:end="3385:49">-&gt;</operator><name pos:start="3385:50" pos:end="3385:59">session_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3386:5" pos:end="3386:31"><expr pos:start="3386:5" pos:end="3386:30"><call pos:start="3386:5" pos:end="3386:30"><name pos:start="3386:5" pos:end="3386:15">avio_printf</name><argument_list pos:start="3386:16" pos:end="3386:30">(<argument pos:start="3386:17" pos:end="3386:21"><expr pos:start="3386:17" pos:end="3386:21"><name pos:start="3386:17" pos:end="3386:21"><name pos:start="3386:17" pos:end="3386:17">c</name><operator pos:start="3386:18" pos:end="3386:19">-&gt;</operator><name pos:start="3386:20" pos:end="3386:21">pb</name></name></expr></argument>, <argument pos:start="3386:24" pos:end="3386:29"><expr pos:start="3386:24" pos:end="3386:29"><literal type="string" pos:start="3386:24" pos:end="3386:29">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="3389:1" pos:end="3419:1"><type pos:start="3389:1" pos:end="3389:11"><specifier pos:start="3389:1" pos:end="3389:6">static</specifier> <name pos:start="3389:8" pos:end="3389:11">void</name></type> <name pos:start="3389:13" pos:end="3389:30">rtsp_cmd_interrupt</name><parameter_list pos:start="3389:31" pos:end="3390:68">(<parameter pos:start="3389:32" pos:end="3389:45"><decl pos:start="3389:32" pos:end="3389:45"><type pos:start="3389:32" pos:end="3389:45"><name pos:start="3389:32" pos:end="3389:42">HTTPContext</name> <modifier pos:start="3389:44" pos:end="3389:44">*</modifier></type><name pos:start="3389:45" pos:end="3389:45">c</name></decl></parameter>, <parameter pos:start="3389:48" pos:end="3389:62"><decl pos:start="3389:48" pos:end="3389:62"><type pos:start="3389:48" pos:end="3389:62"><specifier pos:start="3389:48" pos:end="3389:52">const</specifier> <name pos:start="3389:54" pos:end="3389:57">char</name> <modifier pos:start="3389:59" pos:end="3389:59">*</modifier></type><name pos:start="3389:60" pos:end="3389:62">url</name></decl></parameter>,
                               <parameter pos:start="3390:32" pos:end="3390:51"><decl pos:start="3390:32" pos:end="3390:51"><type pos:start="3390:32" pos:end="3390:51"><name pos:start="3390:32" pos:end="3390:48">RTSPMessageHeader</name> <modifier pos:start="3390:50" pos:end="3390:50">*</modifier></type><name pos:start="3390:51" pos:end="3390:51">h</name></decl></parameter>, <parameter pos:start="3390:54" pos:end="3390:67"><decl pos:start="3390:54" pos:end="3390:67"><type pos:start="3390:54" pos:end="3390:67"><name pos:start="3390:54" pos:end="3390:56">int</name></type> <name pos:start="3390:58" pos:end="3390:67">pause_only</name></decl></parameter>)</parameter_list>
<block pos:start="3391:1" pos:end="3419:1">{<block_content pos:start="3392:5" pos:end="3418:32">
    <decl_stmt pos:start="3392:5" pos:end="3392:23"><decl pos:start="3392:5" pos:end="3392:22"><type pos:start="3392:5" pos:end="3392:17"><name pos:start="3392:5" pos:end="3392:15">HTTPContext</name> <modifier pos:start="3392:17" pos:end="3392:17">*</modifier></type><name pos:start="3392:18" pos:end="3392:22">rtp_c</name></decl>;</decl_stmt>

    <expr_stmt pos:start="3394:5" pos:end="3394:58"><expr pos:start="3394:5" pos:end="3394:57"><name pos:start="3394:5" pos:end="3394:9">rtp_c</name> <operator pos:start="3394:11" pos:end="3394:11">=</operator> <call pos:start="3394:13" pos:end="3394:57"><name pos:start="3394:13" pos:end="3394:37">find_rtp_session_with_url</name><argument_list pos:start="3394:38" pos:end="3394:57">(<argument pos:start="3394:39" pos:end="3394:41"><expr pos:start="3394:39" pos:end="3394:41"><name pos:start="3394:39" pos:end="3394:41">url</name></expr></argument>, <argument pos:start="3394:44" pos:end="3394:56"><expr pos:start="3394:44" pos:end="3394:56"><name pos:start="3394:44" pos:end="3394:56"><name pos:start="3394:44" pos:end="3394:44">h</name><operator pos:start="3394:45" pos:end="3394:46">-&gt;</operator><name pos:start="3394:47" pos:end="3394:56">session_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3395:5" pos:end="3398:5"><if pos:start="3395:5" pos:end="3398:5">if <condition pos:start="3395:8" pos:end="3395:15">(<expr pos:start="3395:9" pos:end="3395:14"><operator pos:start="3395:9" pos:end="3395:9">!</operator><name pos:start="3395:10" pos:end="3395:14">rtp_c</name></expr>)</condition> <block pos:start="3395:17" pos:end="3398:5">{<block_content pos:start="3396:9" pos:end="3397:15">
        <expr_stmt pos:start="3396:9" pos:end="3396:49"><expr pos:start="3396:9" pos:end="3396:48"><call pos:start="3396:9" pos:end="3396:48"><name pos:start="3396:9" pos:end="3396:24">rtsp_reply_error</name><argument_list pos:start="3396:25" pos:end="3396:48">(<argument pos:start="3396:26" pos:end="3396:26"><expr pos:start="3396:26" pos:end="3396:26"><name pos:start="3396:26" pos:end="3396:26">c</name></expr></argument>, <argument pos:start="3396:29" pos:end="3396:47"><expr pos:start="3396:29" pos:end="3396:47"><name pos:start="3396:29" pos:end="3396:47">RTSP_STATUS_SESSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="3397:9" pos:end="3397:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="3400:5" pos:end="3409:5"><if pos:start="3400:5" pos:end="3409:5">if <condition pos:start="3400:8" pos:end="3400:19">(<expr pos:start="3400:9" pos:end="3400:18"><name pos:start="3400:9" pos:end="3400:18">pause_only</name></expr>)</condition> <block pos:start="3400:21" pos:end="3409:5">{<block_content pos:start="3401:9" pos:end="3408:42">
        <if_stmt pos:start="3401:9" pos:end="3406:10"><if pos:start="3401:9" pos:end="3406:10">if <condition pos:start="3401:12" pos:end="3401:49">(<expr pos:start="3401:13" pos:end="3401:47"><name pos:start="3401:13" pos:end="3401:24"><name pos:start="3401:13" pos:end="3401:17">rtp_c</name><operator pos:start="3401:18" pos:end="3401:19">-&gt;</operator><name pos:start="3401:20" pos:end="3401:24">state</name></name> <operator pos:start="3401:26" pos:end="3401:27">!=</operator> <name pos:start="3401:29" pos:end="3401:47">HTTPSTATE_SEND_DATA</name></expr> )</condition><block pos:start="3401:50" pos:end="3406:10">{<block_content pos:start="3402:1" pos:end="3406:9">
<if_stmt pos:start="3402:1" pos:end="3406:9"><if pos:start="3402:1" pos:end="3406:9">if<condition pos:start="3402:3" pos:end="3403:48">(
            <expr pos:start="3403:13" pos:end="3403:47"><name pos:start="3403:13" pos:end="3403:24"><name pos:start="3403:13" pos:end="3403:17">rtp_c</name><operator pos:start="3403:18" pos:end="3403:19">-&gt;</operator><name pos:start="3403:20" pos:end="3403:24">state</name></name> <operator pos:start="3403:26" pos:end="3403:27">!=</operator> <name pos:start="3403:29" pos:end="3403:47">HTTPSTATE_WAIT_FEED</name></expr>)</condition> <block pos:start="3403:50" pos:end="3406:9">{<block_content pos:start="3404:13" pos:end="3405:19">
            <expr_stmt pos:start="3404:13" pos:end="3404:51"><expr pos:start="3404:13" pos:end="3404:50"><call pos:start="3404:13" pos:end="3404:50"><name pos:start="3404:13" pos:end="3404:28">rtsp_reply_error</name><argument_list pos:start="3404:29" pos:end="3404:50">(<argument pos:start="3404:30" pos:end="3404:30"><expr pos:start="3404:30" pos:end="3404:30"><name pos:start="3404:30" pos:end="3404:30">c</name></expr></argument>, <argument pos:start="3404:33" pos:end="3404:49"><expr pos:start="3404:33" pos:end="3404:49"><name pos:start="3404:33" pos:end="3404:49">RTSP_STATUS_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="3405:13" pos:end="3405:19">return;</return>
        </block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="3407:9" pos:end="3407:39"><expr pos:start="3407:9" pos:end="3407:38"><name pos:start="3407:9" pos:end="3407:20"><name pos:start="3407:9" pos:end="3407:13">rtp_c</name><operator pos:start="3407:14" pos:end="3407:15">-&gt;</operator><name pos:start="3407:16" pos:end="3407:20">state</name></name> <operator pos:start="3407:22" pos:end="3407:22">=</operator> <name pos:start="3407:24" pos:end="3407:38">HTTPSTATE_READY</name></expr>;</expr_stmt>
        <expr_stmt pos:start="3408:9" pos:end="3408:42"><expr pos:start="3408:9" pos:end="3408:41"><name pos:start="3408:9" pos:end="3408:24"><name pos:start="3408:9" pos:end="3408:13">rtp_c</name><operator pos:start="3408:14" pos:end="3408:15">-&gt;</operator><name pos:start="3408:16" pos:end="3408:24">first_pts</name></name> <operator pos:start="3408:26" pos:end="3408:26">=</operator> <name pos:start="3408:28" pos:end="3408:41">AV_NOPTS_VALUE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="3411:5" pos:end="3411:72">/* now everything is OK, so we can send the connection parameters */</comment>
    <expr_stmt pos:start="3412:5" pos:end="3412:41"><expr pos:start="3412:5" pos:end="3412:40"><call pos:start="3412:5" pos:end="3412:40"><name pos:start="3412:5" pos:end="3412:21">rtsp_reply_header</name><argument_list pos:start="3412:22" pos:end="3412:40">(<argument pos:start="3412:23" pos:end="3412:23"><expr pos:start="3412:23" pos:end="3412:23"><name pos:start="3412:23" pos:end="3412:23">c</name></expr></argument>, <argument pos:start="3412:26" pos:end="3412:39"><expr pos:start="3412:26" pos:end="3412:39"><name pos:start="3412:26" pos:end="3412:39">RTSP_STATUS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="3413:5" pos:end="3413:20">/* session ID */</comment>
    <expr_stmt pos:start="3414:5" pos:end="3414:61"><expr pos:start="3414:5" pos:end="3414:60"><call pos:start="3414:5" pos:end="3414:60"><name pos:start="3414:5" pos:end="3414:15">avio_printf</name><argument_list pos:start="3414:16" pos:end="3414:60">(<argument pos:start="3414:17" pos:end="3414:21"><expr pos:start="3414:17" pos:end="3414:21"><name pos:start="3414:17" pos:end="3414:21"><name pos:start="3414:17" pos:end="3414:17">c</name><operator pos:start="3414:18" pos:end="3414:19">-&gt;</operator><name pos:start="3414:20" pos:end="3414:21">pb</name></name></expr></argument>, <argument pos:start="3414:24" pos:end="3414:40"><expr pos:start="3414:24" pos:end="3414:40"><literal type="string" pos:start="3414:24" pos:end="3414:40">"Session: %s\r\n"</literal></expr></argument>, <argument pos:start="3414:43" pos:end="3414:59"><expr pos:start="3414:43" pos:end="3414:59"><name pos:start="3414:43" pos:end="3414:59"><name pos:start="3414:43" pos:end="3414:47">rtp_c</name><operator pos:start="3414:48" pos:end="3414:49">-&gt;</operator><name pos:start="3414:50" pos:end="3414:59">session_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3415:5" pos:end="3415:31"><expr pos:start="3415:5" pos:end="3415:30"><call pos:start="3415:5" pos:end="3415:30"><name pos:start="3415:5" pos:end="3415:15">avio_printf</name><argument_list pos:start="3415:16" pos:end="3415:30">(<argument pos:start="3415:17" pos:end="3415:21"><expr pos:start="3415:17" pos:end="3415:21"><name pos:start="3415:17" pos:end="3415:21"><name pos:start="3415:17" pos:end="3415:17">c</name><operator pos:start="3415:18" pos:end="3415:19">-&gt;</operator><name pos:start="3415:20" pos:end="3415:21">pb</name></name></expr></argument>, <argument pos:start="3415:24" pos:end="3415:29"><expr pos:start="3415:24" pos:end="3415:29"><literal type="string" pos:start="3415:24" pos:end="3415:29">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="3417:5" pos:end="3418:32"><if pos:start="3417:5" pos:end="3418:32">if <condition pos:start="3417:8" pos:end="3417:20">(<expr pos:start="3417:9" pos:end="3417:19"><operator pos:start="3417:9" pos:end="3417:9">!</operator><name pos:start="3417:10" pos:end="3417:19">pause_only</name></expr>)</condition><block type="pseudo" pos:start="3418:9" pos:end="3418:32"><block_content pos:start="3418:9" pos:end="3418:32">
        <expr_stmt pos:start="3418:9" pos:end="3418:32"><expr pos:start="3418:9" pos:end="3418:31"><call pos:start="3418:9" pos:end="3418:31"><name pos:start="3418:9" pos:end="3418:24">close_connection</name><argument_list pos:start="3418:25" pos:end="3418:31">(<argument pos:start="3418:26" pos:end="3418:30"><expr pos:start="3418:26" pos:end="3418:30"><name pos:start="3418:26" pos:end="3418:30">rtp_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="3421:1" pos:end="3421:70">/********************************************************************/</comment>
<comment type="block" pos:start="3422:1" pos:end="3422:18">/* RTP handling */</comment>

<function pos:start="3424:1" pos:end="3486:1"><type pos:start="3424:1" pos:end="3424:20"><specifier pos:start="3424:1" pos:end="3424:6">static</specifier> <name pos:start="3424:8" pos:end="3424:18">HTTPContext</name> <modifier pos:start="3424:20" pos:end="3424:20">*</modifier></type><name pos:start="3424:21" pos:end="3424:38">rtp_new_connection</name><parameter_list pos:start="3424:39" pos:end="3427:76">(<parameter pos:start="3424:40" pos:end="3424:68"><decl pos:start="3424:40" pos:end="3424:68"><type pos:start="3424:40" pos:end="3424:68"><name pos:start="3424:40" pos:end="3424:57"><name pos:start="3424:40" pos:end="3424:45">struct</name> <name pos:start="3424:47" pos:end="3424:57">sockaddr_in</name></name> <modifier pos:start="3424:59" pos:end="3424:59">*</modifier></type><name pos:start="3424:60" pos:end="3424:68">from_addr</name></decl></parameter>,
                                       <parameter pos:start="3425:40" pos:end="3425:61"><decl pos:start="3425:40" pos:end="3425:61"><type pos:start="3425:40" pos:end="3425:61"><name pos:start="3425:40" pos:end="3425:53">FFServerStream</name> <modifier pos:start="3425:55" pos:end="3425:55">*</modifier></type><name pos:start="3425:56" pos:end="3425:61">stream</name></decl></parameter>,
                                       <parameter pos:start="3426:40" pos:end="3426:61"><decl pos:start="3426:40" pos:end="3426:61"><type pos:start="3426:40" pos:end="3426:61"><specifier pos:start="3426:40" pos:end="3426:44">const</specifier> <name pos:start="3426:46" pos:end="3426:49">char</name> <modifier pos:start="3426:51" pos:end="3426:51">*</modifier></type><name pos:start="3426:52" pos:end="3426:61">session_id</name></decl></parameter>,
                                       <parameter pos:start="3427:40" pos:end="3427:75"><decl pos:start="3427:40" pos:end="3427:75"><type pos:start="3427:40" pos:end="3427:75"><name pos:start="3427:40" pos:end="3427:62"><name pos:start="3427:40" pos:end="3427:43">enum</name> <name pos:start="3427:45" pos:end="3427:62">RTSPLowerTransport</name></name></type> <name pos:start="3427:64" pos:end="3427:75">rtp_protocol</name></decl></parameter>)</parameter_list>
<block pos:start="3428:1" pos:end="3486:1">{<block_content pos:start="3429:5" pos:end="3485:16">
    <decl_stmt pos:start="3429:5" pos:end="3429:26"><decl pos:start="3429:5" pos:end="3429:25"><type pos:start="3429:5" pos:end="3429:17"><name pos:start="3429:5" pos:end="3429:15">HTTPContext</name> <modifier pos:start="3429:17" pos:end="3429:17">*</modifier></type><name pos:start="3429:18" pos:end="3429:18">c</name> <init pos:start="3429:20" pos:end="3429:25">= <expr pos:start="3429:22" pos:end="3429:25"><name pos:start="3429:22" pos:end="3429:25">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="3430:5" pos:end="3430:26"><decl pos:start="3430:5" pos:end="3430:25"><type pos:start="3430:5" pos:end="3430:16"><specifier pos:start="3430:5" pos:end="3430:9">const</specifier> <name pos:start="3430:11" pos:end="3430:14">char</name> <modifier pos:start="3430:16" pos:end="3430:16">*</modifier></type><name pos:start="3430:17" pos:end="3430:25">proto_str</name></decl>;</decl_stmt>

    <comment type="block" pos:start="3432:5" pos:end="3433:39">/* XXX: should output a warning page when coming
     * close to the connection limit */</comment>
    <if_stmt pos:start="3434:5" pos:end="3435:18"><if pos:start="3434:5" pos:end="3435:18">if <condition pos:start="3434:8" pos:end="3434:52">(<expr pos:start="3434:9" pos:end="3434:51"><name pos:start="3434:9" pos:end="3434:22">nb_connections</name> <operator pos:start="3434:24" pos:end="3434:25">&gt;=</operator> <name pos:start="3434:27" pos:end="3434:51"><name pos:start="3434:27" pos:end="3434:32">config</name><operator pos:start="3434:33" pos:end="3434:33">.</operator><name pos:start="3434:34" pos:end="3434:51">nb_max_connections</name></name></expr>)</condition><block type="pseudo" pos:start="3435:9" pos:end="3435:18"><block_content pos:start="3435:9" pos:end="3435:18">
        <goto pos:start="3435:9" pos:end="3435:18">goto <name pos:start="3435:14" pos:end="3435:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block" pos:start="3437:5" pos:end="3437:30">/* add a new connection */</comment>
    <expr_stmt pos:start="3438:5" pos:end="3438:40"><expr pos:start="3438:5" pos:end="3438:39"><name pos:start="3438:5" pos:end="3438:5">c</name> <operator pos:start="3438:7" pos:end="3438:7">=</operator> <call pos:start="3438:9" pos:end="3438:39"><name pos:start="3438:9" pos:end="3438:18">av_mallocz</name><argument_list pos:start="3438:19" pos:end="3438:39">(<argument pos:start="3438:20" pos:end="3438:38"><expr pos:start="3438:20" pos:end="3438:38"><sizeof pos:start="3438:20" pos:end="3438:38">sizeof<argument_list pos:start="3438:26" pos:end="3438:38">(<argument pos:start="3438:27" pos:end="3438:37"><expr pos:start="3438:27" pos:end="3438:37"><name pos:start="3438:27" pos:end="3438:37">HTTPContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3439:5" pos:end="3440:18"><if pos:start="3439:5" pos:end="3440:18">if <condition pos:start="3439:8" pos:end="3439:11">(<expr pos:start="3439:9" pos:end="3439:10"><operator pos:start="3439:9" pos:end="3439:9">!</operator><name pos:start="3439:10" pos:end="3439:10">c</name></expr>)</condition><block type="pseudo" pos:start="3440:9" pos:end="3440:18"><block_content pos:start="3440:9" pos:end="3440:18">
        <goto pos:start="3440:9" pos:end="3440:18">goto <name pos:start="3440:14" pos:end="3440:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt pos:start="3442:5" pos:end="3442:15"><expr pos:start="3442:5" pos:end="3442:14"><name pos:start="3442:5" pos:end="3442:9"><name pos:start="3442:5" pos:end="3442:5">c</name><operator pos:start="3442:6" pos:end="3442:7">-&gt;</operator><name pos:start="3442:8" pos:end="3442:9">fd</name></name> <operator pos:start="3442:11" pos:end="3442:11">=</operator> <operator pos:start="3442:13" pos:end="3442:13">-</operator><literal type="number" pos:start="3442:14" pos:end="3442:14">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="3443:5" pos:end="3443:25"><expr pos:start="3443:5" pos:end="3443:24"><name pos:start="3443:5" pos:end="3443:17"><name pos:start="3443:5" pos:end="3443:5">c</name><operator pos:start="3443:6" pos:end="3443:7">-&gt;</operator><name pos:start="3443:8" pos:end="3443:17">poll_entry</name></name> <operator pos:start="3443:19" pos:end="3443:19">=</operator> <name pos:start="3443:21" pos:end="3443:24">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="3444:5" pos:end="3444:30"><expr pos:start="3444:5" pos:end="3444:29"><name pos:start="3444:5" pos:end="3444:16"><name pos:start="3444:5" pos:end="3444:5">c</name><operator pos:start="3444:6" pos:end="3444:7">-&gt;</operator><name pos:start="3444:8" pos:end="3444:16">from_addr</name></name> <operator pos:start="3444:18" pos:end="3444:18">=</operator> <operator pos:start="3444:20" pos:end="3444:20">*</operator><name pos:start="3444:21" pos:end="3444:29">from_addr</name></expr>;</expr_stmt>
    <expr_stmt pos:start="3445:5" pos:end="3445:40"><expr pos:start="3445:5" pos:end="3445:39"><name pos:start="3445:5" pos:end="3445:18"><name pos:start="3445:5" pos:end="3445:5">c</name><operator pos:start="3445:6" pos:end="3445:7">-&gt;</operator><name pos:start="3445:8" pos:end="3445:18">buffer_size</name></name> <operator pos:start="3445:20" pos:end="3445:20">=</operator> <name pos:start="3445:22" pos:end="3445:39">IOBUFFER_INIT_SIZE</name></expr>;</expr_stmt>
    <expr_stmt pos:start="3446:5" pos:end="3446:42"><expr pos:start="3446:5" pos:end="3446:41"><name pos:start="3446:5" pos:end="3446:13"><name pos:start="3446:5" pos:end="3446:5">c</name><operator pos:start="3446:6" pos:end="3446:7">-&gt;</operator><name pos:start="3446:8" pos:end="3446:13">buffer</name></name> <operator pos:start="3446:15" pos:end="3446:15">=</operator> <call pos:start="3446:17" pos:end="3446:41"><name pos:start="3446:17" pos:end="3446:25">av_malloc</name><argument_list pos:start="3446:26" pos:end="3446:41">(<argument pos:start="3446:27" pos:end="3446:40"><expr pos:start="3446:27" pos:end="3446:40"><name pos:start="3446:27" pos:end="3446:40"><name pos:start="3446:27" pos:end="3446:27">c</name><operator pos:start="3446:28" pos:end="3446:29">-&gt;</operator><name pos:start="3446:30" pos:end="3446:40">buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3447:5" pos:end="3448:18"><if pos:start="3447:5" pos:end="3448:18">if <condition pos:start="3447:8" pos:end="3447:19">(<expr pos:start="3447:9" pos:end="3447:18"><operator pos:start="3447:9" pos:end="3447:9">!</operator><name pos:start="3447:10" pos:end="3447:18"><name pos:start="3447:10" pos:end="3447:10">c</name><operator pos:start="3447:11" pos:end="3447:12">-&gt;</operator><name pos:start="3447:13" pos:end="3447:18">buffer</name></name></expr>)</condition><block type="pseudo" pos:start="3448:9" pos:end="3448:18"><block_content pos:start="3448:9" pos:end="3448:18">
        <goto pos:start="3448:9" pos:end="3448:18">goto <name pos:start="3448:14" pos:end="3448:17">fail</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt pos:start="3449:5" pos:end="3449:21"><expr pos:start="3449:5" pos:end="3449:20"><name pos:start="3449:5" pos:end="3449:18">nb_connections</name><operator pos:start="3449:19" pos:end="3449:20">++</operator></expr>;</expr_stmt>
    <expr_stmt pos:start="3450:5" pos:end="3450:23"><expr pos:start="3450:5" pos:end="3450:22"><name pos:start="3450:5" pos:end="3450:13"><name pos:start="3450:5" pos:end="3450:5">c</name><operator pos:start="3450:6" pos:end="3450:7">-&gt;</operator><name pos:start="3450:8" pos:end="3450:13">stream</name></name> <operator pos:start="3450:15" pos:end="3450:15">=</operator> <name pos:start="3450:17" pos:end="3450:22">stream</name></expr>;</expr_stmt>
    <expr_stmt pos:start="3451:5" pos:end="3451:65"><expr pos:start="3451:5" pos:end="3451:64"><call pos:start="3451:5" pos:end="3451:64"><name pos:start="3451:5" pos:end="3451:14">av_strlcpy</name><argument_list pos:start="3451:15" pos:end="3451:64">(<argument pos:start="3451:16" pos:end="3451:28"><expr pos:start="3451:16" pos:end="3451:28"><name pos:start="3451:16" pos:end="3451:28"><name pos:start="3451:16" pos:end="3451:16">c</name><operator pos:start="3451:17" pos:end="3451:18">-&gt;</operator><name pos:start="3451:19" pos:end="3451:28">session_id</name></name></expr></argument>, <argument pos:start="3451:31" pos:end="3451:40"><expr pos:start="3451:31" pos:end="3451:40"><name pos:start="3451:31" pos:end="3451:40">session_id</name></expr></argument>, <argument pos:start="3451:43" pos:end="3451:63"><expr pos:start="3451:43" pos:end="3451:63"><sizeof pos:start="3451:43" pos:end="3451:63">sizeof<argument_list pos:start="3451:49" pos:end="3451:63">(<argument pos:start="3451:50" pos:end="3451:62"><expr pos:start="3451:50" pos:end="3451:62"><name pos:start="3451:50" pos:end="3451:62"><name pos:start="3451:50" pos:end="3451:50">c</name><operator pos:start="3451:51" pos:end="3451:52">-&gt;</operator><name pos:start="3451:53" pos:end="3451:62">session_id</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3452:5" pos:end="3452:31"><expr pos:start="3452:5" pos:end="3452:30"><name pos:start="3452:5" pos:end="3452:12"><name pos:start="3452:5" pos:end="3452:5">c</name><operator pos:start="3452:6" pos:end="3452:7">-&gt;</operator><name pos:start="3452:8" pos:end="3452:12">state</name></name> <operator pos:start="3452:14" pos:end="3452:14">=</operator> <name pos:start="3452:16" pos:end="3452:30">HTTPSTATE_READY</name></expr>;</expr_stmt>
    <expr_stmt pos:start="3453:5" pos:end="3453:25"><expr pos:start="3453:5" pos:end="3453:24"><name pos:start="3453:5" pos:end="3453:20"><name pos:start="3453:5" pos:end="3453:5">c</name><operator pos:start="3453:6" pos:end="3453:7">-&gt;</operator><name pos:start="3453:8" pos:end="3453:20">is_packetized</name></name> <operator pos:start="3453:22" pos:end="3453:22">=</operator> <literal type="number" pos:start="3453:24" pos:end="3453:24">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="3454:5" pos:end="3454:35"><expr pos:start="3454:5" pos:end="3454:34"><name pos:start="3454:5" pos:end="3454:19"><name pos:start="3454:5" pos:end="3454:5">c</name><operator pos:start="3454:6" pos:end="3454:7">-&gt;</operator><name pos:start="3454:8" pos:end="3454:19">rtp_protocol</name></name> <operator pos:start="3454:21" pos:end="3454:21">=</operator> <name pos:start="3454:23" pos:end="3454:34">rtp_protocol</name></expr>;</expr_stmt>

    <comment type="block" pos:start="3456:5" pos:end="3456:41">/* protocol is shown in statistics */</comment>
    <switch pos:start="3457:5" pos:end="3470:5">switch<condition pos:start="3457:11" pos:end="3457:27">(<expr pos:start="3457:12" pos:end="3457:26"><name pos:start="3457:12" pos:end="3457:26"><name pos:start="3457:12" pos:end="3457:12">c</name><operator pos:start="3457:13" pos:end="3457:14">-&gt;</operator><name pos:start="3457:15" pos:end="3457:26">rtp_protocol</name></name></expr>)</condition> <block pos:start="3457:29" pos:end="3470:5">{<block_content pos:start="3458:5" pos:end="3469:14">
    <case pos:start="3458:5" pos:end="3458:44">case <expr pos:start="3458:10" pos:end="3458:43"><name pos:start="3458:10" pos:end="3458:43">RTSP_LOWER_TRANSPORT_UDP_MULTICAST</name></expr>:</case>
        <expr_stmt pos:start="3459:9" pos:end="3459:28"><expr pos:start="3459:9" pos:end="3459:27"><name pos:start="3459:9" pos:end="3459:17">proto_str</name> <operator pos:start="3459:19" pos:end="3459:19">=</operator> <literal type="string" pos:start="3459:21" pos:end="3459:27">"MCAST"</literal></expr>;</expr_stmt>
        <break pos:start="3460:9" pos:end="3460:14">break;</break>
    <case pos:start="3461:5" pos:end="3461:34">case <expr pos:start="3461:10" pos:end="3461:33"><name pos:start="3461:10" pos:end="3461:33">RTSP_LOWER_TRANSPORT_UDP</name></expr>:</case>
        <expr_stmt pos:start="3462:9" pos:end="3462:26"><expr pos:start="3462:9" pos:end="3462:25"><name pos:start="3462:9" pos:end="3462:17">proto_str</name> <operator pos:start="3462:19" pos:end="3462:19">=</operator> <literal type="string" pos:start="3462:21" pos:end="3462:25">"UDP"</literal></expr>;</expr_stmt>
        <break pos:start="3463:9" pos:end="3463:14">break;</break>
    <case pos:start="3464:5" pos:end="3464:34">case <expr pos:start="3464:10" pos:end="3464:33"><name pos:start="3464:10" pos:end="3464:33">RTSP_LOWER_TRANSPORT_TCP</name></expr>:</case>
        <expr_stmt pos:start="3465:9" pos:end="3465:26"><expr pos:start="3465:9" pos:end="3465:25"><name pos:start="3465:9" pos:end="3465:17">proto_str</name> <operator pos:start="3465:19" pos:end="3465:19">=</operator> <literal type="string" pos:start="3465:21" pos:end="3465:25">"TCP"</literal></expr>;</expr_stmt>
        <break pos:start="3466:9" pos:end="3466:14">break;</break>
    <default pos:start="3467:5" pos:end="3467:12">default:</default>
        <expr_stmt pos:start="3468:9" pos:end="3468:26"><expr pos:start="3468:9" pos:end="3468:25"><name pos:start="3468:9" pos:end="3468:17">proto_str</name> <operator pos:start="3468:19" pos:end="3468:19">=</operator> <literal type="string" pos:start="3468:21" pos:end="3468:25">"???"</literal></expr>;</expr_stmt>
        <break pos:start="3469:9" pos:end="3469:14">break;</break>
    </block_content>}</block></switch>
    <expr_stmt pos:start="3471:5" pos:end="3471:57"><expr pos:start="3471:5" pos:end="3471:56"><call pos:start="3471:5" pos:end="3471:56"><name pos:start="3471:5" pos:end="3471:14">av_strlcpy</name><argument_list pos:start="3471:15" pos:end="3471:56">(<argument pos:start="3471:16" pos:end="3471:26"><expr pos:start="3471:16" pos:end="3471:26"><name pos:start="3471:16" pos:end="3471:26"><name pos:start="3471:16" pos:end="3471:16">c</name><operator pos:start="3471:17" pos:end="3471:18">-&gt;</operator><name pos:start="3471:19" pos:end="3471:26">protocol</name></name></expr></argument>, <argument pos:start="3471:29" pos:end="3471:34"><expr pos:start="3471:29" pos:end="3471:34"><literal type="string" pos:start="3471:29" pos:end="3471:34">"RTP/"</literal></expr></argument>, <argument pos:start="3471:37" pos:end="3471:55"><expr pos:start="3471:37" pos:end="3471:55"><sizeof pos:start="3471:37" pos:end="3471:55">sizeof<argument_list pos:start="3471:43" pos:end="3471:55">(<argument pos:start="3471:44" pos:end="3471:54"><expr pos:start="3471:44" pos:end="3471:54"><name pos:start="3471:44" pos:end="3471:54"><name pos:start="3471:44" pos:end="3471:44">c</name><operator pos:start="3471:45" pos:end="3471:46">-&gt;</operator><name pos:start="3471:47" pos:end="3471:54">protocol</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3472:5" pos:end="3472:60"><expr pos:start="3472:5" pos:end="3472:59"><call pos:start="3472:5" pos:end="3472:59"><name pos:start="3472:5" pos:end="3472:14">av_strlcat</name><argument_list pos:start="3472:15" pos:end="3472:59">(<argument pos:start="3472:16" pos:end="3472:26"><expr pos:start="3472:16" pos:end="3472:26"><name pos:start="3472:16" pos:end="3472:26"><name pos:start="3472:16" pos:end="3472:16">c</name><operator pos:start="3472:17" pos:end="3472:18">-&gt;</operator><name pos:start="3472:19" pos:end="3472:26">protocol</name></name></expr></argument>, <argument pos:start="3472:29" pos:end="3472:37"><expr pos:start="3472:29" pos:end="3472:37"><name pos:start="3472:29" pos:end="3472:37">proto_str</name></expr></argument>, <argument pos:start="3472:40" pos:end="3472:58"><expr pos:start="3472:40" pos:end="3472:58"><sizeof pos:start="3472:40" pos:end="3472:58">sizeof<argument_list pos:start="3472:46" pos:end="3472:58">(<argument pos:start="3472:47" pos:end="3472:57"><expr pos:start="3472:47" pos:end="3472:57"><name pos:start="3472:47" pos:end="3472:57"><name pos:start="3472:47" pos:end="3472:47">c</name><operator pos:start="3472:48" pos:end="3472:49">-&gt;</operator><name pos:start="3472:50" pos:end="3472:57">protocol</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="3474:5" pos:end="3474:43"><expr pos:start="3474:5" pos:end="3474:42"><name pos:start="3474:5" pos:end="3474:21">current_bandwidth</name> <operator pos:start="3474:23" pos:end="3474:24">+=</operator> <name pos:start="3474:26" pos:end="3474:42"><name pos:start="3474:26" pos:end="3474:31">stream</name><operator pos:start="3474:32" pos:end="3474:33">-&gt;</operator><name pos:start="3474:34" pos:end="3474:42">bandwidth</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="3476:5" pos:end="3476:29"><expr pos:start="3476:5" pos:end="3476:28"><name pos:start="3476:5" pos:end="3476:11"><name pos:start="3476:5" pos:end="3476:5">c</name><operator pos:start="3476:6" pos:end="3476:7">-&gt;</operator><name pos:start="3476:8" pos:end="3476:11">next</name></name> <operator pos:start="3476:13" pos:end="3476:13">=</operator> <name pos:start="3476:15" pos:end="3476:28">first_http_ctx</name></expr>;</expr_stmt>
    <expr_stmt pos:start="3477:5" pos:end="3477:23"><expr pos:start="3477:5" pos:end="3477:22"><name pos:start="3477:5" pos:end="3477:18">first_http_ctx</name> <operator pos:start="3477:20" pos:end="3477:20">=</operator> <name pos:start="3477:22" pos:end="3477:22">c</name></expr>;</expr_stmt>
    <return pos:start="3478:5" pos:end="3478:13">return <expr pos:start="3478:12" pos:end="3478:12"><name pos:start="3478:12" pos:end="3478:12">c</name></expr>;</return>

 <label pos:start="3480:2" pos:end="3480:6"><name pos:start="3480:2" pos:end="3480:5">fail</name>:</label>
    <if_stmt pos:start="3481:5" pos:end="3484:5"><if pos:start="3481:5" pos:end="3484:5">if <condition pos:start="3481:8" pos:end="3481:10">(<expr pos:start="3481:9" pos:end="3481:9"><name pos:start="3481:9" pos:end="3481:9">c</name></expr>)</condition> <block pos:start="3481:12" pos:end="3484:5">{<block_content pos:start="3482:9" pos:end="3483:19">
        <expr_stmt pos:start="3482:9" pos:end="3482:29"><expr pos:start="3482:9" pos:end="3482:28"><call pos:start="3482:9" pos:end="3482:28"><name pos:start="3482:9" pos:end="3482:16">av_freep</name><argument_list pos:start="3482:17" pos:end="3482:28">(<argument pos:start="3482:18" pos:end="3482:27"><expr pos:start="3482:18" pos:end="3482:27"><operator pos:start="3482:18" pos:end="3482:18">&amp;</operator><name pos:start="3482:19" pos:end="3482:27"><name pos:start="3482:19" pos:end="3482:19">c</name><operator pos:start="3482:20" pos:end="3482:21">-&gt;</operator><name pos:start="3482:22" pos:end="3482:27">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3483:9" pos:end="3483:19"><expr pos:start="3483:9" pos:end="3483:18"><call pos:start="3483:9" pos:end="3483:18"><name pos:start="3483:9" pos:end="3483:15">av_free</name><argument_list pos:start="3483:16" pos:end="3483:18">(<argument pos:start="3483:17" pos:end="3483:17"><expr pos:start="3483:17" pos:end="3483:17"><name pos:start="3483:17" pos:end="3483:17">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return pos:start="3485:5" pos:end="3485:16">return <expr pos:start="3485:12" pos:end="3485:15"><name pos:start="3485:12" pos:end="3485:15">NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="3488:1" pos:end="3492:3">/**
 * add a new RTP stream in an RTP connection (used in RTSP SETUP
 * command). If RTP/TCP protocol is used, TCP connection 'rtsp_c' is
 * used.
 */</comment>
<function pos:start="3493:1" pos:end="3586:1"><type pos:start="3493:1" pos:end="3493:10"><specifier pos:start="3493:1" pos:end="3493:6">static</specifier> <name pos:start="3493:8" pos:end="3493:10">int</name></type> <name pos:start="3493:12" pos:end="3493:28">rtp_new_av_stream</name><parameter_list pos:start="3493:29" pos:end="3495:49">(<parameter pos:start="3493:30" pos:end="3493:43"><decl pos:start="3493:30" pos:end="3493:43"><type pos:start="3493:30" pos:end="3493:43"><name pos:start="3493:30" pos:end="3493:40">HTTPContext</name> <modifier pos:start="3493:42" pos:end="3493:42">*</modifier></type><name pos:start="3493:43" pos:end="3493:43">c</name></decl></parameter>,
                             <parameter pos:start="3494:30" pos:end="3494:45"><decl pos:start="3494:30" pos:end="3494:45"><type pos:start="3494:30" pos:end="3494:45"><name pos:start="3494:30" pos:end="3494:32">int</name></type> <name pos:start="3494:34" pos:end="3494:45">stream_index</name></decl></parameter>, <parameter pos:start="3494:48" pos:end="3494:76"><decl pos:start="3494:48" pos:end="3494:76"><type pos:start="3494:48" pos:end="3494:76"><name pos:start="3494:48" pos:end="3494:65"><name pos:start="3494:48" pos:end="3494:53">struct</name> <name pos:start="3494:55" pos:end="3494:65">sockaddr_in</name></name> <modifier pos:start="3494:67" pos:end="3494:67">*</modifier></type><name pos:start="3494:68" pos:end="3494:76">dest_addr</name></decl></parameter>,
                             <parameter pos:start="3495:30" pos:end="3495:48"><decl pos:start="3495:30" pos:end="3495:48"><type pos:start="3495:30" pos:end="3495:48"><name pos:start="3495:30" pos:end="3495:40">HTTPContext</name> <modifier pos:start="3495:42" pos:end="3495:42">*</modifier></type><name pos:start="3495:43" pos:end="3495:48">rtsp_c</name></decl></parameter>)</parameter_list>
<block pos:start="3496:1" pos:end="3586:1">{<block_content pos:start="3497:5" pos:end="3585:13">
    <decl_stmt pos:start="3497:5" pos:end="3497:25"><decl pos:start="3497:5" pos:end="3497:24"><type pos:start="3497:5" pos:end="3497:21"><name pos:start="3497:5" pos:end="3497:19">AVFormatContext</name> <modifier pos:start="3497:21" pos:end="3497:21">*</modifier></type><name pos:start="3497:22" pos:end="3497:24">ctx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3498:5" pos:end="3498:17"><decl pos:start="3498:5" pos:end="3498:16"><type pos:start="3498:5" pos:end="3498:14"><name pos:start="3498:5" pos:end="3498:12">AVStream</name> <modifier pos:start="3498:14" pos:end="3498:14">*</modifier></type><name pos:start="3498:15" pos:end="3498:16">st</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3499:5" pos:end="3499:17"><decl pos:start="3499:5" pos:end="3499:16"><type pos:start="3499:5" pos:end="3499:10"><name pos:start="3499:5" pos:end="3499:8">char</name> <modifier pos:start="3499:10" pos:end="3499:10">*</modifier></type><name pos:start="3499:11" pos:end="3499:16">ipaddr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3500:5" pos:end="3500:25"><decl pos:start="3500:5" pos:end="3500:24"><type pos:start="3500:5" pos:end="3500:16"><name pos:start="3500:5" pos:end="3500:14">URLContext</name> <modifier pos:start="3500:16" pos:end="3500:16">*</modifier></type><name pos:start="3500:17" pos:end="3500:17">h</name> <init pos:start="3500:19" pos:end="3500:24">= <expr pos:start="3500:21" pos:end="3500:24"><name pos:start="3500:21" pos:end="3500:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="3501:5" pos:end="3501:23"><decl pos:start="3501:5" pos:end="3501:22"><type pos:start="3501:5" pos:end="3501:13"><name pos:start="3501:5" pos:end="3501:11">uint8_t</name> <modifier pos:start="3501:13" pos:end="3501:13">*</modifier></type><name pos:start="3501:14" pos:end="3501:22">dummy_buf</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3502:5" pos:end="3502:24"><decl pos:start="3502:5" pos:end="3502:23"><type pos:start="3502:5" pos:end="3502:7"><name pos:start="3502:5" pos:end="3502:7">int</name></type> <name pos:start="3502:9" pos:end="3502:23">max_packet_size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3503:5" pos:end="3503:22"><decl pos:start="3503:5" pos:end="3503:21"><type pos:start="3503:5" pos:end="3503:10"><name pos:start="3503:5" pos:end="3503:8">void</name> <modifier pos:start="3503:10" pos:end="3503:10">*</modifier></type><name pos:start="3503:11" pos:end="3503:21">st_internal</name></decl>;</decl_stmt>

    <comment type="block" pos:start="3505:5" pos:end="3505:52">/* now we can open the relevant output stream */</comment>
    <expr_stmt pos:start="3506:5" pos:end="3506:35"><expr pos:start="3506:5" pos:end="3506:34"><name pos:start="3506:5" pos:end="3506:7">ctx</name> <operator pos:start="3506:9" pos:end="3506:9">=</operator> <call pos:start="3506:11" pos:end="3506:34"><name pos:start="3506:11" pos:end="3506:32">avformat_alloc_context</name><argument_list pos:start="3506:33" pos:end="3506:34">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3507:5" pos:end="3508:18"><if pos:start="3507:5" pos:end="3508:18">if <condition pos:start="3507:8" pos:end="3507:13">(<expr pos:start="3507:9" pos:end="3507:12"><operator pos:start="3507:9" pos:end="3507:9">!</operator><name pos:start="3507:10" pos:end="3507:12">ctx</name></expr>)</condition><block type="pseudo" pos:start="3508:9" pos:end="3508:18"><block_content pos:start="3508:9" pos:end="3508:18">
        <return pos:start="3508:9" pos:end="3508:18">return <expr pos:start="3508:16" pos:end="3508:17"><operator pos:start="3508:16" pos:end="3508:16">-</operator><literal type="number" pos:start="3508:17" pos:end="3508:17">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="3509:5" pos:end="3509:54"><expr pos:start="3509:5" pos:end="3509:53"><name pos:start="3509:5" pos:end="3509:16"><name pos:start="3509:5" pos:end="3509:7">ctx</name><operator pos:start="3509:8" pos:end="3509:9">-&gt;</operator><name pos:start="3509:10" pos:end="3509:16">oformat</name></name> <operator pos:start="3509:18" pos:end="3509:18">=</operator> <call pos:start="3509:20" pos:end="3509:53"><name pos:start="3509:20" pos:end="3509:34">av_guess_format</name><argument_list pos:start="3509:35" pos:end="3509:53">(<argument pos:start="3509:36" pos:end="3509:40"><expr pos:start="3509:36" pos:end="3509:40"><literal type="string" pos:start="3509:36" pos:end="3509:40">"rtp"</literal></expr></argument>, <argument pos:start="3509:43" pos:end="3509:46"><expr pos:start="3509:43" pos:end="3509:46"><name pos:start="3509:43" pos:end="3509:46">NULL</name></expr></argument>, <argument pos:start="3509:49" pos:end="3509:52"><expr pos:start="3509:49" pos:end="3509:52"><name pos:start="3509:49" pos:end="3509:52">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="3511:5" pos:end="3511:40"><expr pos:start="3511:5" pos:end="3511:39"><name pos:start="3511:5" pos:end="3511:6">st</name> <operator pos:start="3511:8" pos:end="3511:8">=</operator> <call pos:start="3511:10" pos:end="3511:39"><name pos:start="3511:10" pos:end="3511:28">avformat_new_stream</name><argument_list pos:start="3511:29" pos:end="3511:39">(<argument pos:start="3511:30" pos:end="3511:32"><expr pos:start="3511:30" pos:end="3511:32"><name pos:start="3511:30" pos:end="3511:32">ctx</name></expr></argument>, <argument pos:start="3511:35" pos:end="3511:38"><expr pos:start="3511:35" pos:end="3511:38"><name pos:start="3511:35" pos:end="3511:38">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3512:5" pos:end="3513:18"><if pos:start="3512:5" pos:end="3513:18">if <condition pos:start="3512:8" pos:end="3512:12">(<expr pos:start="3512:9" pos:end="3512:11"><operator pos:start="3512:9" pos:end="3512:9">!</operator><name pos:start="3512:10" pos:end="3512:11">st</name></expr>)</condition><block type="pseudo" pos:start="3513:9" pos:end="3513:18"><block_content pos:start="3513:9" pos:end="3513:18">
        <goto pos:start="3513:9" pos:end="3513:18">goto <name pos:start="3513:14" pos:end="3513:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt pos:start="3515:5" pos:end="3515:31"><expr pos:start="3515:5" pos:end="3515:30"><name pos:start="3515:5" pos:end="3515:15">st_internal</name> <operator pos:start="3515:17" pos:end="3515:17">=</operator> <name pos:start="3515:19" pos:end="3515:30"><name pos:start="3515:19" pos:end="3515:20">st</name><operator pos:start="3515:21" pos:end="3515:22">-&gt;</operator><name pos:start="3515:23" pos:end="3515:30">internal</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="3517:5" pos:end="3522:80"><if pos:start="3517:5" pos:end="3519:61">if <condition pos:start="3517:8" pos:end="3518:37">(<expr pos:start="3517:9" pos:end="3518:36"><operator pos:start="3517:9" pos:end="3517:9">!</operator><name pos:start="3517:10" pos:end="3517:24"><name pos:start="3517:10" pos:end="3517:10">c</name><operator pos:start="3517:11" pos:end="3517:12">-&gt;</operator><name pos:start="3517:13" pos:end="3517:18">stream</name><operator pos:start="3517:19" pos:end="3517:20">-&gt;</operator><name pos:start="3517:21" pos:end="3517:24">feed</name></name> <operator pos:start="3517:26" pos:end="3517:27">||</operator>
        <name pos:start="3518:9" pos:end="3518:23"><name pos:start="3518:9" pos:end="3518:9">c</name><operator pos:start="3518:10" pos:end="3518:11">-&gt;</operator><name pos:start="3518:12" pos:end="3518:17">stream</name><operator pos:start="3518:18" pos:end="3518:19">-&gt;</operator><name pos:start="3518:20" pos:end="3518:23">feed</name></name> <operator pos:start="3518:25" pos:end="3518:26">==</operator> <name pos:start="3518:28" pos:end="3518:36"><name pos:start="3518:28" pos:end="3518:28">c</name><operator pos:start="3518:29" pos:end="3518:30">-&gt;</operator><name pos:start="3518:31" pos:end="3518:36">stream</name></name></expr>)</condition><block type="pseudo" pos:start="3519:9" pos:end="3519:61"><block_content pos:start="3519:9" pos:end="3519:61">
        <expr_stmt pos:start="3519:9" pos:end="3519:61"><expr pos:start="3519:9" pos:end="3519:60"><call pos:start="3519:9" pos:end="3519:60"><name pos:start="3519:9" pos:end="3519:22">unlayer_stream</name><argument_list pos:start="3519:23" pos:end="3519:60">(<argument pos:start="3519:24" pos:end="3519:25"><expr pos:start="3519:24" pos:end="3519:25"><name pos:start="3519:24" pos:end="3519:25">st</name></expr></argument>, <argument pos:start="3519:28" pos:end="3519:59"><expr pos:start="3519:28" pos:end="3519:59"><name pos:start="3519:28" pos:end="3519:59"><name pos:start="3519:28" pos:end="3519:28">c</name><operator pos:start="3519:29" pos:end="3519:30">-&gt;</operator><name pos:start="3519:31" pos:end="3519:36">stream</name><operator pos:start="3519:37" pos:end="3519:38">-&gt;</operator><name pos:start="3519:39" pos:end="3519:45">streams</name><index pos:start="3519:46" pos:end="3519:59">[<expr pos:start="3519:47" pos:end="3519:58"><name pos:start="3519:47" pos:end="3519:58">stream_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else pos:start="3520:5" pos:end="3522:80">else<block type="pseudo" pos:start="3521:9" pos:end="3522:80"><block_content pos:start="3521:9" pos:end="3522:80">
        <expr_stmt pos:start="3521:9" pos:end="3522:80"><expr pos:start="3521:9" pos:end="3522:79"><call pos:start="3521:9" pos:end="3522:79"><name pos:start="3521:9" pos:end="3521:22">unlayer_stream</name><argument_list pos:start="3521:23" pos:end="3522:79">(<argument pos:start="3521:24" pos:end="3521:25"><expr pos:start="3521:24" pos:end="3521:25"><name pos:start="3521:24" pos:end="3521:25">st</name></expr></argument>,
               <argument pos:start="3522:16" pos:end="3522:78"><expr pos:start="3522:16" pos:end="3522:78"><name pos:start="3522:16" pos:end="3522:78"><name pos:start="3522:16" pos:end="3522:16">c</name><operator pos:start="3522:17" pos:end="3522:18">-&gt;</operator><name pos:start="3522:19" pos:end="3522:24">stream</name><operator pos:start="3522:25" pos:end="3522:26">-&gt;</operator><name pos:start="3522:27" pos:end="3522:30">feed</name><operator pos:start="3522:31" pos:end="3522:32">-&gt;</operator><name pos:start="3522:33" pos:end="3522:39">streams</name><index pos:start="3522:40" pos:end="3522:78">[<expr pos:start="3522:41" pos:end="3522:77"><name pos:start="3522:41" pos:end="3522:77"><name pos:start="3522:41" pos:end="3522:41">c</name><operator pos:start="3522:42" pos:end="3522:43">-&gt;</operator><name pos:start="3522:44" pos:end="3522:49">stream</name><operator pos:start="3522:50" pos:end="3522:51">-&gt;</operator><name pos:start="3522:52" pos:end="3522:63">feed_streams</name><index pos:start="3522:64" pos:end="3522:77">[<expr pos:start="3522:65" pos:end="3522:76"><name pos:start="3522:65" pos:end="3522:76">stream_index</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt pos:start="3523:5" pos:end="3523:38"><expr pos:start="3523:5" pos:end="3523:37"><call pos:start="3523:5" pos:end="3523:37"><name pos:start="3523:5" pos:end="3523:14">av_assert0</name><argument_list pos:start="3523:15" pos:end="3523:37">(<argument pos:start="3523:16" pos:end="3523:36"><expr pos:start="3523:16" pos:end="3523:36"><name pos:start="3523:16" pos:end="3523:28"><name pos:start="3523:16" pos:end="3523:17">st</name><operator pos:start="3523:18" pos:end="3523:19">-&gt;</operator><name pos:start="3523:20" pos:end="3523:28">priv_data</name></name> <operator pos:start="3523:30" pos:end="3523:31">==</operator> <name pos:start="3523:33" pos:end="3523:36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3524:5" pos:end="3524:44"><expr pos:start="3524:5" pos:end="3524:43"><call pos:start="3524:5" pos:end="3524:43"><name pos:start="3524:5" pos:end="3524:14">av_assert0</name><argument_list pos:start="3524:15" pos:end="3524:43">(<argument pos:start="3524:16" pos:end="3524:42"><expr pos:start="3524:16" pos:end="3524:42"><name pos:start="3524:16" pos:end="3524:27"><name pos:start="3524:16" pos:end="3524:17">st</name><operator pos:start="3524:18" pos:end="3524:19">-&gt;</operator><name pos:start="3524:20" pos:end="3524:27">internal</name></name> <operator pos:start="3524:29" pos:end="3524:30">==</operator> <name pos:start="3524:32" pos:end="3524:42">st_internal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="3526:5" pos:end="3526:39">/* build destination RTP address */</comment>
    <expr_stmt pos:start="3527:5" pos:end="3527:44"><expr pos:start="3527:5" pos:end="3527:43"><name pos:start="3527:5" pos:end="3527:10">ipaddr</name> <operator pos:start="3527:12" pos:end="3527:12">=</operator> <call pos:start="3527:14" pos:end="3527:43"><name pos:start="3527:14" pos:end="3527:22">inet_ntoa</name><argument_list pos:start="3527:23" pos:end="3527:43">(<argument pos:start="3527:24" pos:end="3527:42"><expr pos:start="3527:24" pos:end="3527:42"><name pos:start="3527:24" pos:end="3527:42"><name pos:start="3527:24" pos:end="3527:32">dest_addr</name><operator pos:start="3527:33" pos:end="3527:34">-&gt;</operator><name pos:start="3527:35" pos:end="3527:42">sin_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="3529:5" pos:end="3560:5">switch<condition pos:start="3529:11" pos:end="3529:27">(<expr pos:start="3529:12" pos:end="3529:26"><name pos:start="3529:12" pos:end="3529:26"><name pos:start="3529:12" pos:end="3529:12">c</name><operator pos:start="3529:13" pos:end="3529:14">-&gt;</operator><name pos:start="3529:15" pos:end="3529:26">rtp_protocol</name></name></expr>)</condition> <block pos:start="3529:29" pos:end="3560:5">{<block_content pos:start="3530:5" pos:end="3559:18">
    <case pos:start="3530:5" pos:end="3530:34">case <expr pos:start="3530:10" pos:end="3530:33"><name pos:start="3530:10" pos:end="3530:33">RTSP_LOWER_TRANSPORT_UDP</name></expr>:</case>
    <case pos:start="3531:5" pos:end="3531:44">case <expr pos:start="3531:10" pos:end="3531:43"><name pos:start="3531:10" pos:end="3531:43">RTSP_LOWER_TRANSPORT_UDP_MULTICAST</name></expr>:</case>
        <comment type="block" pos:start="3532:9" pos:end="3532:26">/* RTP/UDP case */</comment>

        <comment type="block" pos:start="3534:9" pos:end="3534:55">/* XXX: also pass as parameter to function ? */</comment>
        <if_stmt pos:start="3535:9" pos:end="3546:9"><if pos:start="3535:9" pos:end="3543:9">if <condition pos:start="3535:12" pos:end="3535:36">(<expr pos:start="3535:13" pos:end="3535:35"><name pos:start="3535:13" pos:end="3535:35"><name pos:start="3535:13" pos:end="3535:13">c</name><operator pos:start="3535:14" pos:end="3535:15">-&gt;</operator><name pos:start="3535:16" pos:end="3535:21">stream</name><operator pos:start="3535:22" pos:end="3535:23">-&gt;</operator><name pos:start="3535:24" pos:end="3535:35">is_multicast</name></name></expr>)</condition> <block pos:start="3535:38" pos:end="3543:9">{<block_content pos:start="3536:13" pos:end="3542:62">
            <decl_stmt pos:start="3536:13" pos:end="3536:20"><decl pos:start="3536:13" pos:end="3536:19"><type pos:start="3536:13" pos:end="3536:15"><name pos:start="3536:13" pos:end="3536:15">int</name></type> <name pos:start="3536:17" pos:end="3536:19">ttl</name></decl>;</decl_stmt>
            <expr_stmt pos:start="3537:13" pos:end="3537:43"><expr pos:start="3537:13" pos:end="3537:42"><name pos:start="3537:13" pos:end="3537:15">ttl</name> <operator pos:start="3537:17" pos:end="3537:17">=</operator> <name pos:start="3537:19" pos:end="3537:42"><name pos:start="3537:19" pos:end="3537:19">c</name><operator pos:start="3537:20" pos:end="3537:21">-&gt;</operator><name pos:start="3537:22" pos:end="3537:27">stream</name><operator pos:start="3537:28" pos:end="3537:29">-&gt;</operator><name pos:start="3537:30" pos:end="3537:42">multicast_ttl</name></name></expr>;</expr_stmt>
            <if_stmt pos:start="3538:13" pos:end="3539:25"><if pos:start="3538:13" pos:end="3539:25">if <condition pos:start="3538:16" pos:end="3538:21">(<expr pos:start="3538:17" pos:end="3538:20"><operator pos:start="3538:17" pos:end="3538:17">!</operator><name pos:start="3538:18" pos:end="3538:20">ttl</name></expr>)</condition><block type="pseudo" pos:start="3539:17" pos:end="3539:25"><block_content pos:start="3539:17" pos:end="3539:25">
                <expr_stmt pos:start="3539:17" pos:end="3539:25"><expr pos:start="3539:17" pos:end="3539:24"><name pos:start="3539:17" pos:end="3539:19">ttl</name> <operator pos:start="3539:21" pos:end="3539:21">=</operator> <literal type="number" pos:start="3539:23" pos:end="3539:24">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="3540:13" pos:end="3542:62"><expr pos:start="3540:13" pos:end="3542:61"><call pos:start="3540:13" pos:end="3542:61"><name pos:start="3540:13" pos:end="3540:20">snprintf</name><argument_list pos:start="3540:21" pos:end="3542:61">(<argument pos:start="3540:22" pos:end="3540:34"><expr pos:start="3540:22" pos:end="3540:34"><name pos:start="3540:22" pos:end="3540:34"><name pos:start="3540:22" pos:end="3540:24">ctx</name><operator pos:start="3540:25" pos:end="3540:26">-&gt;</operator><name pos:start="3540:27" pos:end="3540:34">filename</name></name></expr></argument>, <argument pos:start="3540:37" pos:end="3540:57"><expr pos:start="3540:37" pos:end="3540:57"><sizeof pos:start="3540:37" pos:end="3540:57">sizeof<argument_list pos:start="3540:43" pos:end="3540:57">(<argument pos:start="3540:44" pos:end="3540:56"><expr pos:start="3540:44" pos:end="3540:56"><name pos:start="3540:44" pos:end="3540:56"><name pos:start="3540:44" pos:end="3540:46">ctx</name><operator pos:start="3540:47" pos:end="3540:48">-&gt;</operator><name pos:start="3540:49" pos:end="3540:56">filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
                     <argument pos:start="3541:22" pos:end="3541:53"><expr pos:start="3541:22" pos:end="3541:53"><literal type="string" pos:start="3541:22" pos:end="3541:53">"rtp://%s:%d?multicast=1&amp;ttl=%d"</literal></expr></argument>,
                     <argument pos:start="3542:22" pos:end="3542:27"><expr pos:start="3542:22" pos:end="3542:27"><name pos:start="3542:22" pos:end="3542:27">ipaddr</name></expr></argument>, <argument pos:start="3542:30" pos:end="3542:55"><expr pos:start="3542:30" pos:end="3542:55"><call pos:start="3542:30" pos:end="3542:55"><name pos:start="3542:30" pos:end="3542:34">ntohs</name><argument_list pos:start="3542:35" pos:end="3542:55">(<argument pos:start="3542:36" pos:end="3542:54"><expr pos:start="3542:36" pos:end="3542:54"><name pos:start="3542:36" pos:end="3542:54"><name pos:start="3542:36" pos:end="3542:44">dest_addr</name><operator pos:start="3542:45" pos:end="3542:46">-&gt;</operator><name pos:start="3542:47" pos:end="3542:54">sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="3542:58" pos:end="3542:60"><expr pos:start="3542:58" pos:end="3542:60"><name pos:start="3542:58" pos:end="3542:60">ttl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="3543:11" pos:end="3546:9">else <block pos:start="3543:16" pos:end="3546:9">{<block_content pos:start="3544:13" pos:end="3545:72">
            <expr_stmt pos:start="3544:13" pos:end="3545:72"><expr pos:start="3544:13" pos:end="3545:71"><call pos:start="3544:13" pos:end="3545:71"><name pos:start="3544:13" pos:end="3544:20">snprintf</name><argument_list pos:start="3544:21" pos:end="3545:71">(<argument pos:start="3544:22" pos:end="3544:34"><expr pos:start="3544:22" pos:end="3544:34"><name pos:start="3544:22" pos:end="3544:34"><name pos:start="3544:22" pos:end="3544:24">ctx</name><operator pos:start="3544:25" pos:end="3544:26">-&gt;</operator><name pos:start="3544:27" pos:end="3544:34">filename</name></name></expr></argument>, <argument pos:start="3544:37" pos:end="3544:57"><expr pos:start="3544:37" pos:end="3544:57"><sizeof pos:start="3544:37" pos:end="3544:57">sizeof<argument_list pos:start="3544:43" pos:end="3544:57">(<argument pos:start="3544:44" pos:end="3544:56"><expr pos:start="3544:44" pos:end="3544:56"><name pos:start="3544:44" pos:end="3544:56"><name pos:start="3544:44" pos:end="3544:46">ctx</name><operator pos:start="3544:47" pos:end="3544:48">-&gt;</operator><name pos:start="3544:49" pos:end="3544:56">filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
                     <argument pos:start="3545:22" pos:end="3545:34"><expr pos:start="3545:22" pos:end="3545:34"><literal type="string" pos:start="3545:22" pos:end="3545:34">"rtp://%s:%d"</literal></expr></argument>, <argument pos:start="3545:37" pos:end="3545:42"><expr pos:start="3545:37" pos:end="3545:42"><name pos:start="3545:37" pos:end="3545:42">ipaddr</name></expr></argument>, <argument pos:start="3545:45" pos:end="3545:70"><expr pos:start="3545:45" pos:end="3545:70"><call pos:start="3545:45" pos:end="3545:70"><name pos:start="3545:45" pos:end="3545:49">ntohs</name><argument_list pos:start="3545:50" pos:end="3545:70">(<argument pos:start="3545:51" pos:end="3545:69"><expr pos:start="3545:51" pos:end="3545:69"><name pos:start="3545:51" pos:end="3545:69"><name pos:start="3545:51" pos:end="3545:59">dest_addr</name><operator pos:start="3545:60" pos:end="3545:61">-&gt;</operator><name pos:start="3545:62" pos:end="3545:69">sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="3548:9" pos:end="3549:22"><if pos:start="3548:9" pos:end="3549:22">if <condition pos:start="3548:12" pos:end="3548:75">(<expr pos:start="3548:13" pos:end="3548:74"><call pos:start="3548:13" pos:end="3548:70"><name pos:start="3548:13" pos:end="3548:22">ffurl_open</name><argument_list pos:start="3548:23" pos:end="3548:70">(<argument pos:start="3548:24" pos:end="3548:25"><expr pos:start="3548:24" pos:end="3548:25"><operator pos:start="3548:24" pos:end="3548:24">&amp;</operator><name pos:start="3548:25" pos:end="3548:25">h</name></expr></argument>, <argument pos:start="3548:28" pos:end="3548:40"><expr pos:start="3548:28" pos:end="3548:40"><name pos:start="3548:28" pos:end="3548:40"><name pos:start="3548:28" pos:end="3548:30">ctx</name><operator pos:start="3548:31" pos:end="3548:32">-&gt;</operator><name pos:start="3548:33" pos:end="3548:40">filename</name></name></expr></argument>, <argument pos:start="3548:43" pos:end="3548:57"><expr pos:start="3548:43" pos:end="3548:57"><name pos:start="3548:43" pos:end="3548:57">AVIO_FLAG_WRITE</name></expr></argument>, <argument pos:start="3548:60" pos:end="3548:63"><expr pos:start="3548:60" pos:end="3548:63"><name pos:start="3548:60" pos:end="3548:63">NULL</name></expr></argument>, <argument pos:start="3548:66" pos:end="3548:69"><expr pos:start="3548:66" pos:end="3548:69"><name pos:start="3548:66" pos:end="3548:69">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="3548:72" pos:end="3548:72">&lt;</operator> <literal type="number" pos:start="3548:74" pos:end="3548:74">0</literal></expr>)</condition><block type="pseudo" pos:start="3549:13" pos:end="3549:22"><block_content pos:start="3549:13" pos:end="3549:22">
            <goto pos:start="3549:13" pos:end="3549:22">goto <name pos:start="3549:18" pos:end="3549:21">fail</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="3550:9" pos:end="3550:41"><expr pos:start="3550:9" pos:end="3550:40"><name pos:start="3550:9" pos:end="3550:36"><name pos:start="3550:9" pos:end="3550:9">c</name><operator pos:start="3550:10" pos:end="3550:11">-&gt;</operator><name pos:start="3550:12" pos:end="3550:22">rtp_handles</name><index pos:start="3550:23" pos:end="3550:36">[<expr pos:start="3550:24" pos:end="3550:35"><name pos:start="3550:24" pos:end="3550:35">stream_index</name></expr>]</index></name> <operator pos:start="3550:38" pos:end="3550:38">=</operator> <name pos:start="3550:40" pos:end="3550:40">h</name></expr>;</expr_stmt>
        <expr_stmt pos:start="3551:9" pos:end="3551:45"><expr pos:start="3551:9" pos:end="3551:44"><name pos:start="3551:9" pos:end="3551:23">max_packet_size</name> <operator pos:start="3551:25" pos:end="3551:25">=</operator> <name pos:start="3551:27" pos:end="3551:44"><name pos:start="3551:27" pos:end="3551:27">h</name><operator pos:start="3551:28" pos:end="3551:29">-&gt;</operator><name pos:start="3551:30" pos:end="3551:44">max_packet_size</name></name></expr>;</expr_stmt>
        <break pos:start="3552:9" pos:end="3552:14">break;</break>
    <case pos:start="3553:5" pos:end="3553:34">case <expr pos:start="3553:10" pos:end="3553:33"><name pos:start="3553:10" pos:end="3553:33">RTSP_LOWER_TRANSPORT_TCP</name></expr>:</case>
        <comment type="block" pos:start="3554:9" pos:end="3554:26">/* RTP/TCP case */</comment>
        <expr_stmt pos:start="3555:9" pos:end="3555:27"><expr pos:start="3555:9" pos:end="3555:26"><name pos:start="3555:9" pos:end="3555:17"><name pos:start="3555:9" pos:end="3555:9">c</name><operator pos:start="3555:10" pos:end="3555:11">-&gt;</operator><name pos:start="3555:12" pos:end="3555:17">rtsp_c</name></name> <operator pos:start="3555:19" pos:end="3555:19">=</operator> <name pos:start="3555:21" pos:end="3555:26">rtsp_c</name></expr>;</expr_stmt>
        <expr_stmt pos:start="3556:9" pos:end="3556:51"><expr pos:start="3556:9" pos:end="3556:50"><name pos:start="3556:9" pos:end="3556:23">max_packet_size</name> <operator pos:start="3556:25" pos:end="3556:25">=</operator> <name pos:start="3556:27" pos:end="3556:50">RTSP_TCP_MAX_PACKET_SIZE</name></expr>;</expr_stmt>
        <break pos:start="3557:9" pos:end="3557:14">break;</break>
    <default pos:start="3558:5" pos:end="3558:12">default:</default>
        <goto pos:start="3559:9" pos:end="3559:18">goto <name pos:start="3559:14" pos:end="3559:17">fail</name>;</goto>
    </block_content>}</block></switch>

    <expr_stmt pos:start="3562:5" pos:end="3564:61"><expr pos:start="3562:5" pos:end="3564:60"><call pos:start="3562:5" pos:end="3564:60"><name pos:start="3562:5" pos:end="3562:12">http_log</name><argument_list pos:start="3562:13" pos:end="3564:60">(<argument pos:start="3562:14" pos:end="3562:53"><expr pos:start="3562:14" pos:end="3562:53"><literal type="string" pos:start="3562:14" pos:end="3562:53">"%s:%d - - \"PLAY %s/streamid=%d %s\"\n"</literal></expr></argument>,
             <argument pos:start="3563:14" pos:end="3563:19"><expr pos:start="3563:14" pos:end="3563:19"><name pos:start="3563:14" pos:end="3563:19">ipaddr</name></expr></argument>, <argument pos:start="3563:22" pos:end="3563:47"><expr pos:start="3563:22" pos:end="3563:47"><call pos:start="3563:22" pos:end="3563:47"><name pos:start="3563:22" pos:end="3563:26">ntohs</name><argument_list pos:start="3563:27" pos:end="3563:47">(<argument pos:start="3563:28" pos:end="3563:46"><expr pos:start="3563:28" pos:end="3563:46"><name pos:start="3563:28" pos:end="3563:46"><name pos:start="3563:28" pos:end="3563:36">dest_addr</name><operator pos:start="3563:37" pos:end="3563:38">-&gt;</operator><name pos:start="3563:39" pos:end="3563:46">sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>,
             <argument pos:start="3564:14" pos:end="3564:32"><expr pos:start="3564:14" pos:end="3564:32"><name pos:start="3564:14" pos:end="3564:32"><name pos:start="3564:14" pos:end="3564:14">c</name><operator pos:start="3564:15" pos:end="3564:16">-&gt;</operator><name pos:start="3564:17" pos:end="3564:22">stream</name><operator pos:start="3564:23" pos:end="3564:24">-&gt;</operator><name pos:start="3564:25" pos:end="3564:32">filename</name></name></expr></argument>, <argument pos:start="3564:35" pos:end="3564:46"><expr pos:start="3564:35" pos:end="3564:46"><name pos:start="3564:35" pos:end="3564:46">stream_index</name></expr></argument>, <argument pos:start="3564:49" pos:end="3564:59"><expr pos:start="3564:49" pos:end="3564:59"><name pos:start="3564:49" pos:end="3564:59"><name pos:start="3564:49" pos:end="3564:49">c</name><operator pos:start="3564:50" pos:end="3564:51">-&gt;</operator><name pos:start="3564:52" pos:end="3564:59">protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="3566:5" pos:end="3567:20">/* normally, no packets should be output here, but the packet size may
     * be checked */</comment>
    <if_stmt pos:start="3568:5" pos:end="3570:18"><if pos:start="3568:5" pos:end="3570:18">if <condition pos:start="3568:8" pos:end="3568:64">(<expr pos:start="3568:9" pos:end="3568:63"><call pos:start="3568:9" pos:end="3568:59"><name pos:start="3568:9" pos:end="3568:32">ffio_open_dyn_packet_buf</name><argument_list pos:start="3568:33" pos:end="3568:59">(<argument pos:start="3568:34" pos:end="3568:41"><expr pos:start="3568:34" pos:end="3568:41"><operator pos:start="3568:34" pos:end="3568:34">&amp;</operator><name pos:start="3568:35" pos:end="3568:41"><name pos:start="3568:35" pos:end="3568:37">ctx</name><operator pos:start="3568:38" pos:end="3568:39">-&gt;</operator><name pos:start="3568:40" pos:end="3568:41">pb</name></name></expr></argument>, <argument pos:start="3568:44" pos:end="3568:58"><expr pos:start="3568:44" pos:end="3568:58"><name pos:start="3568:44" pos:end="3568:58">max_packet_size</name></expr></argument>)</argument_list></call> <operator pos:start="3568:61" pos:end="3568:61">&lt;</operator> <literal type="number" pos:start="3568:63" pos:end="3568:63">0</literal></expr>)</condition><block type="pseudo" pos:start="3570:9" pos:end="3570:18"><block_content pos:start="3570:9" pos:end="3570:18">
        <comment type="block" pos:start="3569:9" pos:end="3569:31">/* XXX: close stream */</comment>
        <goto pos:start="3570:9" pos:end="3570:18">goto <name pos:start="3570:14" pos:end="3570:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt pos:start="3572:5" pos:end="3579:5"><if pos:start="3572:5" pos:end="3579:5">if <condition pos:start="3572:8" pos:end="3572:45">(<expr pos:start="3572:9" pos:end="3572:44"><call pos:start="3572:9" pos:end="3572:40"><name pos:start="3572:9" pos:end="3572:29">avformat_write_header</name><argument_list pos:start="3572:30" pos:end="3572:40">(<argument pos:start="3572:31" pos:end="3572:33"><expr pos:start="3572:31" pos:end="3572:33"><name pos:start="3572:31" pos:end="3572:33">ctx</name></expr></argument>, <argument pos:start="3572:36" pos:end="3572:39"><expr pos:start="3572:36" pos:end="3572:39"><name pos:start="3572:36" pos:end="3572:39">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="3572:42" pos:end="3572:42">&lt;</operator> <literal type="number" pos:start="3572:44" pos:end="3572:44">0</literal></expr>)</condition> <block pos:start="3572:47" pos:end="3579:5">{<block_content pos:start="3573:5" pos:end="3578:18">
    <label pos:start="3573:5" pos:end="3573:9"><name pos:start="3573:5" pos:end="3573:8">fail</name>:</label>
        <if_stmt pos:start="3574:9" pos:end="3575:27"><if pos:start="3574:9" pos:end="3575:27">if <condition pos:start="3574:12" pos:end="3574:14">(<expr pos:start="3574:13" pos:end="3574:13"><name pos:start="3574:13" pos:end="3574:13">h</name></expr>)</condition><block type="pseudo" pos:start="3575:13" pos:end="3575:27"><block_content pos:start="3575:13" pos:end="3575:27">
            <expr_stmt pos:start="3575:13" pos:end="3575:27"><expr pos:start="3575:13" pos:end="3575:26"><call pos:start="3575:13" pos:end="3575:26"><name pos:start="3575:13" pos:end="3575:23">ffurl_close</name><argument_list pos:start="3575:24" pos:end="3575:26">(<argument pos:start="3575:25" pos:end="3575:25"><expr pos:start="3575:25" pos:end="3575:25"><name pos:start="3575:25" pos:end="3575:25">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="3576:9" pos:end="3576:20"><expr pos:start="3576:9" pos:end="3576:19"><call pos:start="3576:9" pos:end="3576:19"><name pos:start="3576:9" pos:end="3576:15">av_free</name><argument_list pos:start="3576:16" pos:end="3576:19">(<argument pos:start="3576:17" pos:end="3576:18"><expr pos:start="3576:17" pos:end="3576:18"><name pos:start="3576:17" pos:end="3576:18">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3577:9" pos:end="3577:21"><expr pos:start="3577:9" pos:end="3577:20"><call pos:start="3577:9" pos:end="3577:20"><name pos:start="3577:9" pos:end="3577:15">av_free</name><argument_list pos:start="3577:16" pos:end="3577:20">(<argument pos:start="3577:17" pos:end="3577:19"><expr pos:start="3577:17" pos:end="3577:19"><name pos:start="3577:17" pos:end="3577:19">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="3578:9" pos:end="3578:18">return <expr pos:start="3578:16" pos:end="3578:17"><operator pos:start="3578:16" pos:end="3578:16">-</operator><literal type="number" pos:start="3578:17" pos:end="3578:17">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="3580:5" pos:end="3580:44"><expr pos:start="3580:5" pos:end="3580:43"><call pos:start="3580:5" pos:end="3580:43"><name pos:start="3580:5" pos:end="3580:22">avio_close_dyn_buf</name><argument_list pos:start="3580:23" pos:end="3580:43">(<argument pos:start="3580:24" pos:end="3580:30"><expr pos:start="3580:24" pos:end="3580:30"><name pos:start="3580:24" pos:end="3580:30"><name pos:start="3580:24" pos:end="3580:26">ctx</name><operator pos:start="3580:27" pos:end="3580:28">-&gt;</operator><name pos:start="3580:29" pos:end="3580:30">pb</name></name></expr></argument>, <argument pos:start="3580:33" pos:end="3580:42"><expr pos:start="3580:33" pos:end="3580:42"><operator pos:start="3580:33" pos:end="3580:33">&amp;</operator><name pos:start="3580:34" pos:end="3580:42">dummy_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3581:5" pos:end="3581:19"><expr pos:start="3581:5" pos:end="3581:18"><name pos:start="3581:5" pos:end="3581:11"><name pos:start="3581:5" pos:end="3581:7">ctx</name><operator pos:start="3581:8" pos:end="3581:9">-&gt;</operator><name pos:start="3581:10" pos:end="3581:11">pb</name></name> <operator pos:start="3581:13" pos:end="3581:13">=</operator> <name pos:start="3581:15" pos:end="3581:18">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="3582:5" pos:end="3582:23"><expr pos:start="3582:5" pos:end="3582:22"><call pos:start="3582:5" pos:end="3582:22"><name pos:start="3582:5" pos:end="3582:11">av_free</name><argument_list pos:start="3582:12" pos:end="3582:22">(<argument pos:start="3582:13" pos:end="3582:21"><expr pos:start="3582:13" pos:end="3582:21"><name pos:start="3582:13" pos:end="3582:21">dummy_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="3584:5" pos:end="3584:35"><expr pos:start="3584:5" pos:end="3584:34"><name pos:start="3584:5" pos:end="3584:28"><name pos:start="3584:5" pos:end="3584:5">c</name><operator pos:start="3584:6" pos:end="3584:7">-&gt;</operator><name pos:start="3584:8" pos:end="3584:14">rtp_ctx</name><index pos:start="3584:15" pos:end="3584:28">[<expr pos:start="3584:16" pos:end="3584:27"><name pos:start="3584:16" pos:end="3584:27">stream_index</name></expr>]</index></name> <operator pos:start="3584:30" pos:end="3584:30">=</operator> <name pos:start="3584:32" pos:end="3584:34">ctx</name></expr>;</expr_stmt>
    <return pos:start="3585:5" pos:end="3585:13">return <expr pos:start="3585:12" pos:end="3585:12"><literal type="number" pos:start="3585:12" pos:end="3585:12">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="3588:1" pos:end="3588:70">/********************************************************************/</comment>
<comment type="block" pos:start="3589:1" pos:end="3589:29">/* ffserver initialization */</comment>

<comment type="block" pos:start="3591:1" pos:end="3591:55">/* FIXME: This code should use avformat_new_stream() */</comment>
<function pos:start="3592:1" pos:end="3624:1"><type pos:start="3592:1" pos:end="3592:24"><specifier pos:start="3592:1" pos:end="3592:6">static</specifier> <name pos:start="3592:8" pos:end="3592:22">LayeredAVStream</name> <modifier pos:start="3592:24" pos:end="3592:24">*</modifier></type><name pos:start="3592:25" pos:end="3592:38">add_av_stream1</name><parameter_list pos:start="3592:39" pos:end="3593:64">(<parameter pos:start="3592:40" pos:end="3592:61"><decl pos:start="3592:40" pos:end="3592:61"><type pos:start="3592:40" pos:end="3592:61"><name pos:start="3592:40" pos:end="3592:53">FFServerStream</name> <modifier pos:start="3592:55" pos:end="3592:55">*</modifier></type><name pos:start="3592:56" pos:end="3592:61">stream</name></decl></parameter>,
                                <parameter pos:start="3593:33" pos:end="3593:53"><decl pos:start="3593:33" pos:end="3593:53"><type pos:start="3593:33" pos:end="3593:53"><name pos:start="3593:33" pos:end="3593:46">AVCodecContext</name> <modifier pos:start="3593:48" pos:end="3593:48">*</modifier></type><name pos:start="3593:49" pos:end="3593:53">codec</name></decl></parameter>, <parameter pos:start="3593:56" pos:end="3593:63"><decl pos:start="3593:56" pos:end="3593:63"><type pos:start="3593:56" pos:end="3593:63"><name pos:start="3593:56" pos:end="3593:58">int</name></type> <name pos:start="3593:60" pos:end="3593:63">copy</name></decl></parameter>)</parameter_list>
<block pos:start="3594:1" pos:end="3624:1">{<block_content pos:start="3595:5" pos:end="3623:15">
    <decl_stmt pos:start="3595:5" pos:end="3595:25"><decl pos:start="3595:5" pos:end="3595:24"><type pos:start="3595:5" pos:end="3595:21"><name pos:start="3595:5" pos:end="3595:19">LayeredAVStream</name> <modifier pos:start="3595:21" pos:end="3595:21">*</modifier></type><name pos:start="3595:22" pos:end="3595:24">fst</name></decl>;</decl_stmt>

    <if_stmt pos:start="3597:5" pos:end="3598:20"><if pos:start="3597:5" pos:end="3598:20">if<condition pos:start="3597:7" pos:end="3597:61">(<expr pos:start="3597:8" pos:end="3597:60"><name pos:start="3597:8" pos:end="3597:25"><name pos:start="3597:8" pos:end="3597:13">stream</name><operator pos:start="3597:14" pos:end="3597:15">-&gt;</operator><name pos:start="3597:16" pos:end="3597:25">nb_streams</name></name> <operator pos:start="3597:27" pos:end="3597:28">&gt;=</operator> <call pos:start="3597:30" pos:end="3597:60"><name pos:start="3597:30" pos:end="3597:43">FF_ARRAY_ELEMS</name><argument_list pos:start="3597:44" pos:end="3597:60">(<argument pos:start="3597:45" pos:end="3597:59"><expr pos:start="3597:45" pos:end="3597:59"><name pos:start="3597:45" pos:end="3597:59"><name pos:start="3597:45" pos:end="3597:50">stream</name><operator pos:start="3597:51" pos:end="3597:52">-&gt;</operator><name pos:start="3597:53" pos:end="3597:59">streams</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3598:9" pos:end="3598:20"><block_content pos:start="3598:9" pos:end="3598:20">
        <return pos:start="3598:9" pos:end="3598:20">return <expr pos:start="3598:16" pos:end="3598:19"><name pos:start="3598:16" pos:end="3598:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="3600:5" pos:end="3600:35"><expr pos:start="3600:5" pos:end="3600:34"><name pos:start="3600:5" pos:end="3600:7">fst</name> <operator pos:start="3600:9" pos:end="3600:9">=</operator> <call pos:start="3600:11" pos:end="3600:34"><name pos:start="3600:11" pos:end="3600:20">av_mallocz</name><argument_list pos:start="3600:21" pos:end="3600:34">(<argument pos:start="3600:22" pos:end="3600:33"><expr pos:start="3600:22" pos:end="3600:33"><sizeof pos:start="3600:22" pos:end="3600:33">sizeof<argument_list pos:start="3600:28" pos:end="3600:33">(<argument pos:start="3600:29" pos:end="3600:32"><expr pos:start="3600:29" pos:end="3600:32"><operator pos:start="3600:29" pos:end="3600:29">*</operator><name pos:start="3600:30" pos:end="3600:32">fst</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3601:5" pos:end="3602:20"><if pos:start="3601:5" pos:end="3602:20">if <condition pos:start="3601:8" pos:end="3601:13">(<expr pos:start="3601:9" pos:end="3601:12"><operator pos:start="3601:9" pos:end="3601:9">!</operator><name pos:start="3601:10" pos:end="3601:12">fst</name></expr>)</condition><block type="pseudo" pos:start="3602:9" pos:end="3602:20"><block_content pos:start="3602:9" pos:end="3602:20">
        <return pos:start="3602:9" pos:end="3602:20">return <expr pos:start="3602:16" pos:end="3602:19"><name pos:start="3602:16" pos:end="3602:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt pos:start="3603:5" pos:end="3614:27"><if pos:start="3603:5" pos:end="3610:5">if <condition pos:start="3603:8" pos:end="3603:13">(<expr pos:start="3603:9" pos:end="3603:12"><name pos:start="3603:9" pos:end="3603:12">copy</name></expr>)</condition> <block pos:start="3603:15" pos:end="3610:5">{<block_content pos:start="3604:9" pos:end="3609:48">
        <expr_stmt pos:start="3604:9" pos:end="3604:58"><expr pos:start="3604:9" pos:end="3604:57"><name pos:start="3604:9" pos:end="3604:18"><name pos:start="3604:9" pos:end="3604:11">fst</name><operator pos:start="3604:12" pos:end="3604:13">-&gt;</operator><name pos:start="3604:14" pos:end="3604:18">codec</name></name> <operator pos:start="3604:20" pos:end="3604:20">=</operator> <call pos:start="3604:22" pos:end="3604:57"><name pos:start="3604:22" pos:end="3604:43">avcodec_alloc_context3</name><argument_list pos:start="3604:44" pos:end="3604:57">(<argument pos:start="3604:45" pos:end="3604:56"><expr pos:start="3604:45" pos:end="3604:56"><name pos:start="3604:45" pos:end="3604:56"><name pos:start="3604:45" pos:end="3604:49">codec</name><operator pos:start="3604:50" pos:end="3604:51">-&gt;</operator><name pos:start="3604:52" pos:end="3604:56">codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="3605:9" pos:end="3608:9"><if pos:start="3605:9" pos:end="3608:9">if <condition pos:start="3605:12" pos:end="3605:24">(<expr pos:start="3605:13" pos:end="3605:23"><operator pos:start="3605:13" pos:end="3605:13">!</operator><name pos:start="3605:14" pos:end="3605:23"><name pos:start="3605:14" pos:end="3605:16">fst</name><operator pos:start="3605:17" pos:end="3605:18">-&gt;</operator><name pos:start="3605:19" pos:end="3605:23">codec</name></name></expr>)</condition> <block pos:start="3605:26" pos:end="3608:9">{<block_content pos:start="3606:13" pos:end="3607:24">
            <expr_stmt pos:start="3606:13" pos:end="3606:25"><expr pos:start="3606:13" pos:end="3606:24"><call pos:start="3606:13" pos:end="3606:24"><name pos:start="3606:13" pos:end="3606:19">av_free</name><argument_list pos:start="3606:20" pos:end="3606:24">(<argument pos:start="3606:21" pos:end="3606:23"><expr pos:start="3606:21" pos:end="3606:23"><name pos:start="3606:21" pos:end="3606:23">fst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="3607:13" pos:end="3607:24">return <expr pos:start="3607:20" pos:end="3607:23"><name pos:start="3607:20" pos:end="3607:23">NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="3609:9" pos:end="3609:48"><expr pos:start="3609:9" pos:end="3609:47"><call pos:start="3609:9" pos:end="3609:47"><name pos:start="3609:9" pos:end="3609:28">avcodec_copy_context</name><argument_list pos:start="3609:29" pos:end="3609:47">(<argument pos:start="3609:30" pos:end="3609:39"><expr pos:start="3609:30" pos:end="3609:39"><name pos:start="3609:30" pos:end="3609:39"><name pos:start="3609:30" pos:end="3609:32">fst</name><operator pos:start="3609:33" pos:end="3609:34">-&gt;</operator><name pos:start="3609:35" pos:end="3609:39">codec</name></name></expr></argument>, <argument pos:start="3609:42" pos:end="3609:46"><expr pos:start="3609:42" pos:end="3609:46"><name pos:start="3609:42" pos:end="3609:46">codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="3610:7" pos:end="3614:27">else<block type="pseudo" pos:start="3614:9" pos:end="3614:27"><block_content pos:start="3614:9" pos:end="3614:27">
        <comment type="block" pos:start="3611:9" pos:end="3613:11">/* live streams must use the actual feed's codec since it may be
         * updated later to carry extradata needed by them.
         */</comment>
        <expr_stmt pos:start="3614:9" pos:end="3614:27"><expr pos:start="3614:9" pos:end="3614:26"><name pos:start="3614:9" pos:end="3614:18"><name pos:start="3614:9" pos:end="3614:11">fst</name><operator pos:start="3614:12" pos:end="3614:13">-&gt;</operator><name pos:start="3614:14" pos:end="3614:18">codec</name></name> <operator pos:start="3614:20" pos:end="3614:20">=</operator> <name pos:start="3614:22" pos:end="3614:26">codec</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="line" pos:start="3616:5" pos:end="3616:90">//NOTE we previously allocated internal &amp; internal-&gt;avctx, these seemed uneeded though</comment>
    <expr_stmt pos:start="3617:5" pos:end="3617:47"><expr pos:start="3617:5" pos:end="3617:46"><name pos:start="3617:5" pos:end="3617:17"><name pos:start="3617:5" pos:end="3617:7">fst</name><operator pos:start="3617:8" pos:end="3617:9">-&gt;</operator><name pos:start="3617:10" pos:end="3617:17">codecpar</name></name> <operator pos:start="3617:19" pos:end="3617:19">=</operator> <call pos:start="3617:21" pos:end="3617:46"><name pos:start="3617:21" pos:end="3617:44">avcodec_parameters_alloc</name><argument_list pos:start="3617:45" pos:end="3617:46">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="3618:5" pos:end="3618:36"><expr pos:start="3618:5" pos:end="3618:35"><name pos:start="3618:5" pos:end="3618:14"><name pos:start="3618:5" pos:end="3618:7">fst</name><operator pos:start="3618:8" pos:end="3618:9">-&gt;</operator><name pos:start="3618:10" pos:end="3618:14">index</name></name> <operator pos:start="3618:16" pos:end="3618:16">=</operator> <name pos:start="3618:18" pos:end="3618:35"><name pos:start="3618:18" pos:end="3618:23">stream</name><operator pos:start="3618:24" pos:end="3618:25">-&gt;</operator><name pos:start="3618:26" pos:end="3618:35">nb_streams</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="3619:5" pos:end="3619:38"><expr pos:start="3619:5" pos:end="3619:37"><name pos:start="3619:5" pos:end="3619:18"><name pos:start="3619:5" pos:end="3619:7">fst</name><operator pos:start="3619:8" pos:end="3619:9">-&gt;</operator><name pos:start="3619:10" pos:end="3619:18">time_base</name></name> <operator pos:start="3619:20" pos:end="3619:20">=</operator> <name pos:start="3619:22" pos:end="3619:37"><name pos:start="3619:22" pos:end="3619:26">codec</name><operator pos:start="3619:27" pos:end="3619:28">-&gt;</operator><name pos:start="3619:29" pos:end="3619:37">time_base</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="3620:5" pos:end="3620:28"><expr pos:start="3620:5" pos:end="3620:27"><name pos:start="3620:5" pos:end="3620:22"><name pos:start="3620:5" pos:end="3620:7">fst</name><operator pos:start="3620:8" pos:end="3620:9">-&gt;</operator><name pos:start="3620:10" pos:end="3620:22">pts_wrap_bits</name></name> <operator pos:start="3620:24" pos:end="3620:24">=</operator> <literal type="number" pos:start="3620:26" pos:end="3620:27">33</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="3621:5" pos:end="3621:58"><expr pos:start="3621:5" pos:end="3621:57"><name pos:start="3621:5" pos:end="3621:28"><name pos:start="3621:5" pos:end="3621:7">fst</name><operator pos:start="3621:8" pos:end="3621:9">-&gt;</operator><name pos:start="3621:10" pos:end="3621:28">sample_aspect_ratio</name></name> <operator pos:start="3621:30" pos:end="3621:30">=</operator> <name pos:start="3621:32" pos:end="3621:57"><name pos:start="3621:32" pos:end="3621:36">codec</name><operator pos:start="3621:37" pos:end="3621:38">-&gt;</operator><name pos:start="3621:39" pos:end="3621:57">sample_aspect_ratio</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="3622:5" pos:end="3622:48"><expr pos:start="3622:5" pos:end="3622:47"><name pos:start="3622:5" pos:end="3622:41"><name pos:start="3622:5" pos:end="3622:10">stream</name><operator pos:start="3622:11" pos:end="3622:12">-&gt;</operator><name pos:start="3622:13" pos:end="3622:19">streams</name><index pos:start="3622:20" pos:end="3622:41">[<expr pos:start="3622:21" pos:end="3622:40"><name pos:start="3622:21" pos:end="3622:38"><name pos:start="3622:21" pos:end="3622:26">stream</name><operator pos:start="3622:27" pos:end="3622:28">-&gt;</operator><name pos:start="3622:29" pos:end="3622:38">nb_streams</name></name><operator pos:start="3622:39" pos:end="3622:40">++</operator></expr>]</index></name> <operator pos:start="3622:43" pos:end="3622:43">=</operator> <name pos:start="3622:45" pos:end="3622:47">fst</name></expr>;</expr_stmt>
    <return pos:start="3623:5" pos:end="3623:15">return <expr pos:start="3623:12" pos:end="3623:14"><name pos:start="3623:12" pos:end="3623:14">fst</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="3626:1" pos:end="3626:42">/* return the stream number in the feed */</comment>
<function pos:start="3627:1" pos:end="3674:1"><type pos:start="3627:1" pos:end="3627:10"><specifier pos:start="3627:1" pos:end="3627:6">static</specifier> <name pos:start="3627:8" pos:end="3627:10">int</name></type> <name pos:start="3627:12" pos:end="3627:24">add_av_stream</name><parameter_list pos:start="3627:25" pos:end="3627:67">(<parameter pos:start="3627:26" pos:end="3627:45"><decl pos:start="3627:26" pos:end="3627:45"><type pos:start="3627:26" pos:end="3627:45"><name pos:start="3627:26" pos:end="3627:39">FFServerStream</name> <modifier pos:start="3627:41" pos:end="3627:41">*</modifier></type><name pos:start="3627:42" pos:end="3627:45">feed</name></decl></parameter>, <parameter pos:start="3627:48" pos:end="3627:66"><decl pos:start="3627:48" pos:end="3627:66"><type pos:start="3627:48" pos:end="3627:66"><name pos:start="3627:48" pos:end="3627:62">LayeredAVStream</name> <modifier pos:start="3627:64" pos:end="3627:64">*</modifier></type><name pos:start="3627:65" pos:end="3627:66">st</name></decl></parameter>)</parameter_list>
<block pos:start="3628:1" pos:end="3674:1">{<block_content pos:start="3629:5" pos:end="3673:32">
    <decl_stmt pos:start="3629:5" pos:end="3629:25"><decl pos:start="3629:5" pos:end="3629:24"><type pos:start="3629:5" pos:end="3629:21"><name pos:start="3629:5" pos:end="3629:19">LayeredAVStream</name> <modifier pos:start="3629:21" pos:end="3629:21">*</modifier></type><name pos:start="3629:22" pos:end="3629:24">fst</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3630:5" pos:end="3630:29"><decl pos:start="3630:5" pos:end="3630:22"><type pos:start="3630:5" pos:end="3630:20"><name pos:start="3630:5" pos:end="3630:18">AVCodecContext</name> <modifier pos:start="3630:20" pos:end="3630:20">*</modifier></type><name pos:start="3630:21" pos:end="3630:22">av</name></decl>, <decl pos:start="3630:25" pos:end="3630:28"><type ref="prev" pos:start="3630:5" pos:end="3630:20"><modifier pos:start="3630:25" pos:end="3630:25">*</modifier></type><name pos:start="3630:26" pos:end="3630:28">av1</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3631:5" pos:end="3631:10"><decl pos:start="3631:5" pos:end="3631:9"><type pos:start="3631:5" pos:end="3631:7"><name pos:start="3631:5" pos:end="3631:7">int</name></type> <name pos:start="3631:9" pos:end="3631:9">i</name></decl>;</decl_stmt>

    <expr_stmt pos:start="3633:5" pos:end="3633:19"><expr pos:start="3633:5" pos:end="3633:18"><name pos:start="3633:5" pos:end="3633:6">av</name> <operator pos:start="3633:8" pos:end="3633:8">=</operator> <name pos:start="3633:10" pos:end="3633:18"><name pos:start="3633:10" pos:end="3633:11">st</name><operator pos:start="3633:12" pos:end="3633:13">-&gt;</operator><name pos:start="3633:14" pos:end="3633:18">codec</name></name></expr>;</expr_stmt>
    <for pos:start="3634:5" pos:end="3665:5">for<control pos:start="3634:8" pos:end="3634:35">(<init pos:start="3634:9" pos:end="3634:12"><expr pos:start="3634:9" pos:end="3634:11"><name pos:start="3634:9" pos:end="3634:9">i</name><operator pos:start="3634:10" pos:end="3634:10">=</operator><literal type="number" pos:start="3634:11" pos:end="3634:11">0</literal></expr>;</init><condition pos:start="3634:13" pos:end="3634:31"><expr pos:start="3634:13" pos:end="3634:30"><name pos:start="3634:13" pos:end="3634:13">i</name><operator pos:start="3634:14" pos:end="3634:14">&lt;</operator><name pos:start="3634:15" pos:end="3634:30"><name pos:start="3634:15" pos:end="3634:18">feed</name><operator pos:start="3634:19" pos:end="3634:20">-&gt;</operator><name pos:start="3634:21" pos:end="3634:30">nb_streams</name></name></expr>;</condition><incr pos:start="3634:32" pos:end="3634:34"><expr pos:start="3634:32" pos:end="3634:34"><name pos:start="3634:32" pos:end="3634:32">i</name><operator pos:start="3634:33" pos:end="3634:34">++</operator></expr></incr>)</control> <block pos:start="3634:37" pos:end="3665:5">{<block_content pos:start="3635:9" pos:end="3664:11">
        <expr_stmt pos:start="3635:9" pos:end="3635:38"><expr pos:start="3635:9" pos:end="3635:37"><name pos:start="3635:9" pos:end="3635:11">av1</name> <operator pos:start="3635:13" pos:end="3635:13">=</operator> <name pos:start="3635:15" pos:end="3635:30"><name pos:start="3635:15" pos:end="3635:18">feed</name><operator pos:start="3635:19" pos:end="3635:20">-&gt;</operator><name pos:start="3635:21" pos:end="3635:27">streams</name><index pos:start="3635:28" pos:end="3635:30">[<expr pos:start="3635:29" pos:end="3635:29"><name pos:start="3635:29" pos:end="3635:29">i</name></expr>]</index></name><operator pos:start="3635:31" pos:end="3635:32">-&gt;</operator><name pos:start="3635:33" pos:end="3635:37">codec</name></expr>;</expr_stmt>
        <if_stmt pos:start="3636:9" pos:end="3664:11"><if pos:start="3636:9" pos:end="3664:11">if <condition pos:start="3636:12" pos:end="3636:43">(<expr pos:start="3636:13" pos:end="3636:41"><name pos:start="3636:13" pos:end="3636:25"><name pos:start="3636:13" pos:end="3636:15">av1</name><operator pos:start="3636:16" pos:end="3636:17">-&gt;</operator><name pos:start="3636:18" pos:end="3636:25">codec_id</name></name> <operator pos:start="3636:27" pos:end="3636:28">==</operator> <name pos:start="3636:30" pos:end="3636:41"><name pos:start="3636:30" pos:end="3636:31">av</name><operator pos:start="3636:32" pos:end="3636:33">-&gt;</operator><name pos:start="3636:34" pos:end="3636:41">codec_id</name></name></expr> )</condition><block pos:start="3636:44" pos:end="3664:11">{<block_content pos:start="3637:1" pos:end="3664:10">
<if_stmt pos:start="3637:1" pos:end="3664:10"><if pos:start="3637:1" pos:end="3664:10">if<condition pos:start="3637:3" pos:end="3638:47">(
            <expr pos:start="3638:13" pos:end="3638:45"><name pos:start="3638:13" pos:end="3638:27"><name pos:start="3638:13" pos:end="3638:15">av1</name><operator pos:start="3638:16" pos:end="3638:17">-&gt;</operator><name pos:start="3638:18" pos:end="3638:27">codec_type</name></name> <operator pos:start="3638:29" pos:end="3638:30">==</operator> <name pos:start="3638:32" pos:end="3638:45"><name pos:start="3638:32" pos:end="3638:33">av</name><operator pos:start="3638:34" pos:end="3638:35">-&gt;</operator><name pos:start="3638:36" pos:end="3638:45">codec_type</name></name></expr> )</condition><block pos:start="3638:48" pos:end="3664:10">{<block_content pos:start="3639:1" pos:end="3664:9">
<if_stmt pos:start="3639:1" pos:end="3664:9"><if pos:start="3639:1" pos:end="3664:9">if<condition pos:start="3639:3" pos:end="3640:42">(
            <expr pos:start="3640:13" pos:end="3640:41"><name pos:start="3640:13" pos:end="3640:25"><name pos:start="3640:13" pos:end="3640:15">av1</name><operator pos:start="3640:16" pos:end="3640:17">-&gt;</operator><name pos:start="3640:18" pos:end="3640:25">bit_rate</name></name> <operator pos:start="3640:27" pos:end="3640:28">==</operator> <name pos:start="3640:30" pos:end="3640:41"><name pos:start="3640:30" pos:end="3640:31">av</name><operator pos:start="3640:32" pos:end="3640:33">-&gt;</operator><name pos:start="3640:34" pos:end="3640:41">bit_rate</name></name></expr>)</condition> <block pos:start="3640:44" pos:end="3664:9">{<block_content pos:start="3642:13" pos:end="3663:13">

            <switch pos:start="3642:13" pos:end="3663:13">switch<condition pos:start="3642:19" pos:end="3642:34">(<expr pos:start="3642:20" pos:end="3642:33"><name pos:start="3642:20" pos:end="3642:33"><name pos:start="3642:20" pos:end="3642:21">av</name><operator pos:start="3642:22" pos:end="3642:23">-&gt;</operator><name pos:start="3642:24" pos:end="3642:33">codec_type</name></name></expr>)</condition> <block pos:start="3642:36" pos:end="3663:13">{<block_content pos:start="3643:13" pos:end="3662:24">
            <case pos:start="3643:13" pos:end="3643:36">case <expr pos:start="3643:18" pos:end="3643:35"><name pos:start="3643:18" pos:end="3643:35">AVMEDIA_TYPE_AUDIO</name></expr>:</case>
                <if_stmt pos:start="3644:17" pos:end="3647:30"><if pos:start="3644:17" pos:end="3647:30">if <condition pos:start="3644:20" pos:end="3644:51">(<expr pos:start="3644:21" pos:end="3644:49"><name pos:start="3644:21" pos:end="3644:33"><name pos:start="3644:21" pos:end="3644:23">av1</name><operator pos:start="3644:24" pos:end="3644:25">-&gt;</operator><name pos:start="3644:26" pos:end="3644:33">channels</name></name> <operator pos:start="3644:35" pos:end="3644:36">==</operator> <name pos:start="3644:38" pos:end="3644:49"><name pos:start="3644:38" pos:end="3644:39">av</name><operator pos:start="3644:40" pos:end="3644:41">-&gt;</operator><name pos:start="3644:42" pos:end="3644:49">channels</name></name></expr> )</condition><block pos:start="3644:52" pos:end="3647:30">{<block_content pos:start="3645:1" pos:end="3647:29">
<if_stmt pos:start="3645:1" pos:end="3647:29"><if pos:start="3645:1" pos:end="3647:29">if<condition pos:start="3645:3" pos:end="3646:56">(
                    <expr pos:start="3646:21" pos:end="3646:55"><name pos:start="3646:21" pos:end="3646:36"><name pos:start="3646:21" pos:end="3646:23">av1</name><operator pos:start="3646:24" pos:end="3646:25">-&gt;</operator><name pos:start="3646:26" pos:end="3646:36">sample_rate</name></name> <operator pos:start="3646:38" pos:end="3646:39">==</operator> <name pos:start="3646:41" pos:end="3646:55"><name pos:start="3646:41" pos:end="3646:42">av</name><operator pos:start="3646:43" pos:end="3646:44">-&gt;</operator><name pos:start="3646:45" pos:end="3646:55">sample_rate</name></name></expr>)</condition><block type="pseudo" pos:start="3647:21" pos:end="3647:29"><block_content pos:start="3647:21" pos:end="3647:29">
                    <return pos:start="3647:21" pos:end="3647:29">return <expr pos:start="3647:28" pos:end="3647:28"><name pos:start="3647:28" pos:end="3647:28">i</name></expr>;</return></block_content></block></if></if_stmt></block_content>}</block></if></if_stmt>
                <break pos:start="3648:17" pos:end="3648:22">break;</break>
            <case pos:start="3649:13" pos:end="3649:36">case <expr pos:start="3649:18" pos:end="3649:35"><name pos:start="3649:18" pos:end="3649:35">AVMEDIA_TYPE_VIDEO</name></expr>:</case>
                <if_stmt pos:start="3650:17" pos:end="3659:33"><if pos:start="3650:17" pos:end="3659:33">if <condition pos:start="3650:20" pos:end="3650:45">(<expr pos:start="3650:21" pos:end="3650:43"><name pos:start="3650:21" pos:end="3650:30"><name pos:start="3650:21" pos:end="3650:23">av1</name><operator pos:start="3650:24" pos:end="3650:25">-&gt;</operator><name pos:start="3650:26" pos:end="3650:30">width</name></name> <operator pos:start="3650:32" pos:end="3650:33">==</operator> <name pos:start="3650:35" pos:end="3650:43"><name pos:start="3650:35" pos:end="3650:36">av</name><operator pos:start="3650:37" pos:end="3650:38">-&gt;</operator><name pos:start="3650:39" pos:end="3650:43">width</name></name></expr> )</condition><block pos:start="3650:46" pos:end="3659:33">{<block_content pos:start="3651:1" pos:end="3659:32">
<if_stmt pos:start="3651:1" pos:end="3659:32"><if pos:start="3651:1" pos:end="3659:32">if<condition pos:start="3651:3" pos:end="3652:47">(
                    <expr pos:start="3652:21" pos:end="3652:45"><name pos:start="3652:21" pos:end="3652:31"><name pos:start="3652:21" pos:end="3652:23">av1</name><operator pos:start="3652:24" pos:end="3652:25">-&gt;</operator><name pos:start="3652:26" pos:end="3652:31">height</name></name> <operator pos:start="3652:33" pos:end="3652:34">==</operator> <name pos:start="3652:36" pos:end="3652:45"><name pos:start="3652:36" pos:end="3652:37">av</name><operator pos:start="3652:38" pos:end="3652:39">-&gt;</operator><name pos:start="3652:40" pos:end="3652:45">height</name></name></expr> )</condition><block pos:start="3652:48" pos:end="3659:32">{<block_content pos:start="3653:1" pos:end="3659:31">
<if_stmt pos:start="3653:1" pos:end="3659:31"><if pos:start="3653:1" pos:end="3659:31">if<condition pos:start="3653:3" pos:end="3654:61">(
                    <expr pos:start="3654:21" pos:end="3654:59"><name pos:start="3654:21" pos:end="3654:38"><name pos:start="3654:21" pos:end="3654:23">av1</name><operator pos:start="3654:24" pos:end="3654:25">-&gt;</operator><name pos:start="3654:26" pos:end="3654:34">time_base</name><operator pos:start="3654:35" pos:end="3654:35">.</operator><name pos:start="3654:36" pos:end="3654:38">den</name></name> <operator pos:start="3654:40" pos:end="3654:41">==</operator> <name pos:start="3654:43" pos:end="3654:59"><name pos:start="3654:43" pos:end="3654:44">av</name><operator pos:start="3654:45" pos:end="3654:46">-&gt;</operator><name pos:start="3654:47" pos:end="3654:55">time_base</name><operator pos:start="3654:56" pos:end="3654:56">.</operator><name pos:start="3654:57" pos:end="3654:59">den</name></name></expr> )</condition><block pos:start="3654:62" pos:end="3659:31">{<block_content pos:start="3655:1" pos:end="3659:30">
<if_stmt pos:start="3655:1" pos:end="3659:30"><if pos:start="3655:1" pos:end="3659:30">if<condition pos:start="3655:3" pos:end="3656:61">(
                    <expr pos:start="3656:21" pos:end="3656:59"><name pos:start="3656:21" pos:end="3656:38"><name pos:start="3656:21" pos:end="3656:23">av1</name><operator pos:start="3656:24" pos:end="3656:25">-&gt;</operator><name pos:start="3656:26" pos:end="3656:34">time_base</name><operator pos:start="3656:35" pos:end="3656:35">.</operator><name pos:start="3656:36" pos:end="3656:38">num</name></name> <operator pos:start="3656:40" pos:end="3656:41">==</operator> <name pos:start="3656:43" pos:end="3656:59"><name pos:start="3656:43" pos:end="3656:44">av</name><operator pos:start="3656:45" pos:end="3656:46">-&gt;</operator><name pos:start="3656:47" pos:end="3656:55">time_base</name><operator pos:start="3656:56" pos:end="3656:56">.</operator><name pos:start="3656:57" pos:end="3656:59">num</name></name></expr> )</condition><block pos:start="3656:62" pos:end="3659:30">{<block_content pos:start="3657:1" pos:end="3659:29">
<if_stmt pos:start="3657:1" pos:end="3659:29"><if pos:start="3657:1" pos:end="3659:29">if<condition pos:start="3657:3" pos:end="3658:50">(
                    <expr pos:start="3658:21" pos:end="3658:49"><name pos:start="3658:21" pos:end="3658:33"><name pos:start="3658:21" pos:end="3658:23">av1</name><operator pos:start="3658:24" pos:end="3658:25">-&gt;</operator><name pos:start="3658:26" pos:end="3658:33">gop_size</name></name> <operator pos:start="3658:35" pos:end="3658:36">==</operator> <name pos:start="3658:38" pos:end="3658:49"><name pos:start="3658:38" pos:end="3658:39">av</name><operator pos:start="3658:40" pos:end="3658:41">-&gt;</operator><name pos:start="3658:42" pos:end="3658:49">gop_size</name></name></expr>)</condition><block type="pseudo" pos:start="3659:21" pos:end="3659:29"><block_content pos:start="3659:21" pos:end="3659:29">
                    <return pos:start="3659:21" pos:end="3659:29">return <expr pos:start="3659:28" pos:end="3659:28"><name pos:start="3659:28" pos:end="3659:28">i</name></expr>;</return></block_content></block></if></if_stmt></block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt>
                <break pos:start="3660:17" pos:end="3660:22">break;</break>
            <default pos:start="3661:13" pos:end="3661:20">default:</default>
                <expr_stmt pos:start="3662:17" pos:end="3662:24"><expr pos:start="3662:17" pos:end="3662:23"><call pos:start="3662:17" pos:end="3662:23"><name pos:start="3662:17" pos:end="3662:21">abort</name><argument_list pos:start="3662:22" pos:end="3662:23">()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></switch>
        </block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt pos:start="3667:5" pos:end="3667:38"><expr pos:start="3667:5" pos:end="3667:37"><name pos:start="3667:5" pos:end="3667:7">fst</name> <operator pos:start="3667:9" pos:end="3667:9">=</operator> <call pos:start="3667:11" pos:end="3667:37"><name pos:start="3667:11" pos:end="3667:24">add_av_stream1</name><argument_list pos:start="3667:25" pos:end="3667:37">(<argument pos:start="3667:26" pos:end="3667:29"><expr pos:start="3667:26" pos:end="3667:29"><name pos:start="3667:26" pos:end="3667:29">feed</name></expr></argument>, <argument pos:start="3667:32" pos:end="3667:33"><expr pos:start="3667:32" pos:end="3667:33"><name pos:start="3667:32" pos:end="3667:33">av</name></expr></argument>, <argument pos:start="3667:36" pos:end="3667:36"><expr pos:start="3667:36" pos:end="3667:36"><literal type="number" pos:start="3667:36" pos:end="3667:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="3668:5" pos:end="3669:18"><if pos:start="3668:5" pos:end="3669:18">if <condition pos:start="3668:8" pos:end="3668:13">(<expr pos:start="3668:9" pos:end="3668:12"><operator pos:start="3668:9" pos:end="3668:9">!</operator><name pos:start="3668:10" pos:end="3668:12">fst</name></expr>)</condition><block type="pseudo" pos:start="3669:9" pos:end="3669:18"><block_content pos:start="3669:9" pos:end="3669:18">
        <return pos:start="3669:9" pos:end="3669:18">return <expr pos:start="3669:16" pos:end="3669:17"><operator pos:start="3669:16" pos:end="3669:16">-</operator><literal type="number" pos:start="3669:17" pos:end="3669:17">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt pos:start="3670:5" pos:end="3672:61"><if pos:start="3670:5" pos:end="3672:61">if <condition pos:start="3670:8" pos:end="3670:46">(<expr pos:start="3670:9" pos:end="3670:45"><name pos:start="3670:9" pos:end="3670:45"><name pos:start="3670:9" pos:end="3670:10">st</name><operator pos:start="3670:11" pos:end="3670:12">-&gt;</operator><name pos:start="3670:13" pos:end="3670:45">recommended_encoder_configuration</name></name></expr>)</condition><block type="pseudo" pos:start="3671:9" pos:end="3672:61"><block_content pos:start="3671:9" pos:end="3672:61">
        <expr_stmt pos:start="3671:9" pos:end="3672:61"><expr pos:start="3671:9" pos:end="3672:60"><name pos:start="3671:9" pos:end="3671:46"><name pos:start="3671:9" pos:end="3671:11">fst</name><operator pos:start="3671:12" pos:end="3671:13">-&gt;</operator><name pos:start="3671:14" pos:end="3671:46">recommended_encoder_configuration</name></name> <operator pos:start="3671:48" pos:end="3671:48">=</operator>
            <call pos:start="3672:13" pos:end="3672:60"><name pos:start="3672:13" pos:end="3672:21">av_strdup</name><argument_list pos:start="3672:22" pos:end="3672:60">(<argument pos:start="3672:23" pos:end="3672:59"><expr pos:start="3672:23" pos:end="3672:59"><name pos:start="3672:23" pos:end="3672:59"><name pos:start="3672:23" pos:end="3672:24">st</name><operator pos:start="3672:25" pos:end="3672:26">-&gt;</operator><name pos:start="3672:27" pos:end="3672:59">recommended_encoder_configuration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return pos:start="3673:5" pos:end="3673:32">return <expr pos:start="3673:12" pos:end="3673:31"><name pos:start="3673:12" pos:end="3673:27"><name pos:start="3673:12" pos:end="3673:15">feed</name><operator pos:start="3673:16" pos:end="3673:17">-&gt;</operator><name pos:start="3673:18" pos:end="3673:27">nb_streams</name></name> <operator pos:start="3673:29" pos:end="3673:29">-</operator> <literal type="number" pos:start="3673:31" pos:end="3673:31">1</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="3676:1" pos:end="3686:1"><type pos:start="3676:1" pos:end="3676:11"><specifier pos:start="3676:1" pos:end="3676:6">static</specifier> <name pos:start="3676:8" pos:end="3676:11">void</name></type> <name pos:start="3676:13" pos:end="3676:25">remove_stream</name><parameter_list pos:start="3676:26" pos:end="3676:49">(<parameter pos:start="3676:27" pos:end="3676:48"><decl pos:start="3676:27" pos:end="3676:48"><type pos:start="3676:27" pos:end="3676:42"><name pos:start="3676:27" pos:end="3676:40">FFServerStream</name> <modifier pos:start="3676:42" pos:end="3676:42">*</modifier></type><name pos:start="3676:43" pos:end="3676:48">stream</name></decl></parameter>)</parameter_list>
<block pos:start="3677:1" pos:end="3686:1">{<block_content pos:start="3678:5" pos:end="3685:5">
    <decl_stmt pos:start="3678:5" pos:end="3678:24"><decl pos:start="3678:5" pos:end="3678:23"><type pos:start="3678:5" pos:end="3678:21"><name pos:start="3678:5" pos:end="3678:18">FFServerStream</name> <modifier pos:start="3678:20" pos:end="3678:20">*</modifier><modifier pos:start="3678:21" pos:end="3678:21">*</modifier></type><name pos:start="3678:22" pos:end="3678:23">ps</name></decl>;</decl_stmt>
    <expr_stmt pos:start="3679:5" pos:end="3679:30"><expr pos:start="3679:5" pos:end="3679:29"><name pos:start="3679:5" pos:end="3679:6">ps</name> <operator pos:start="3679:8" pos:end="3679:8">=</operator> <operator pos:start="3679:10" pos:end="3679:10">&amp;</operator><name pos:start="3679:11" pos:end="3679:29"><name pos:start="3679:11" pos:end="3679:16">config</name><operator pos:start="3679:17" pos:end="3679:17">.</operator><name pos:start="3679:18" pos:end="3679:29">first_stream</name></name></expr>;</expr_stmt>
    <while pos:start="3680:5" pos:end="3685:5">while <condition pos:start="3680:11" pos:end="3680:15">(<expr pos:start="3680:12" pos:end="3680:14"><operator pos:start="3680:12" pos:end="3680:12">*</operator><name pos:start="3680:13" pos:end="3680:14">ps</name></expr>)</condition> <block pos:start="3680:17" pos:end="3685:5">{<block_content pos:start="3681:9" pos:end="3684:30">
        <if_stmt pos:start="3681:9" pos:end="3684:30"><if pos:start="3681:9" pos:end="3682:30">if <condition pos:start="3681:12" pos:end="3681:26">(<expr pos:start="3681:13" pos:end="3681:25"><operator pos:start="3681:13" pos:end="3681:13">*</operator><name pos:start="3681:14" pos:end="3681:15">ps</name> <operator pos:start="3681:17" pos:end="3681:18">==</operator> <name pos:start="3681:20" pos:end="3681:25">stream</name></expr>)</condition><block type="pseudo" pos:start="3682:13" pos:end="3682:30"><block_content pos:start="3682:13" pos:end="3682:30">
            <expr_stmt pos:start="3682:13" pos:end="3682:30"><expr pos:start="3682:13" pos:end="3682:29"><operator pos:start="3682:13" pos:end="3682:13">*</operator><name pos:start="3682:14" pos:end="3682:15">ps</name> <operator pos:start="3682:17" pos:end="3682:17">=</operator> <name pos:start="3682:19" pos:end="3682:29"><operator pos:start="3682:19" pos:end="3682:19">(</operator><operator pos:start="3682:20" pos:end="3682:20">*</operator><name pos:start="3682:21" pos:end="3682:22">ps</name><operator pos:start="3682:23" pos:end="3682:23">)</operator><operator pos:start="3682:24" pos:end="3682:25">-&gt;</operator><name pos:start="3682:26" pos:end="3682:29">next</name></name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="3683:9" pos:end="3684:30">else<block type="pseudo" pos:start="3684:13" pos:end="3684:30"><block_content pos:start="3684:13" pos:end="3684:30">
            <expr_stmt pos:start="3684:13" pos:end="3684:30"><expr pos:start="3684:13" pos:end="3684:29"><name pos:start="3684:13" pos:end="3684:14">ps</name> <operator pos:start="3684:16" pos:end="3684:16">=</operator> <operator pos:start="3684:18" pos:end="3684:18">&amp;</operator><name pos:start="3684:19" pos:end="3684:29"><operator pos:start="3684:19" pos:end="3684:19">(</operator><operator pos:start="3684:20" pos:end="3684:20">*</operator><name pos:start="3684:21" pos:end="3684:22">ps</name><operator pos:start="3684:23" pos:end="3684:23">)</operator><operator pos:start="3684:24" pos:end="3684:25">-&gt;</operator><name pos:start="3684:26" pos:end="3684:29">next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block" pos:start="3688:1" pos:end="3688:47">/* compute the needed AVStream for each file */</comment>
<function pos:start="3689:1" pos:end="3746:1"><type pos:start="3689:1" pos:end="3689:11"><specifier pos:start="3689:1" pos:end="3689:6">static</specifier> <name pos:start="3689:8" pos:end="3689:11">void</name></type> <name pos:start="3689:13" pos:end="3689:30">build_file_streams</name><parameter_list pos:start="3689:31" pos:end="3689:36">(<parameter pos:start="3689:32" pos:end="3689:35"><decl pos:start="3689:32" pos:end="3689:35"><type pos:start="3689:32" pos:end="3689:35"><name pos:start="3689:32" pos:end="3689:35">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="3690:1" pos:end="3746:1">{<block_content pos:start="3691:5" pos:end="3745:5">
    <decl_stmt pos:start="3691:5" pos:end="3691:27"><decl pos:start="3691:5" pos:end="3691:26"><type pos:start="3691:5" pos:end="3691:20"><name pos:start="3691:5" pos:end="3691:18">FFServerStream</name> <modifier pos:start="3691:20" pos:end="3691:20">*</modifier></type><name pos:start="3691:21" pos:end="3691:26">stream</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3692:5" pos:end="3692:28"><decl pos:start="3692:5" pos:end="3692:27"><type pos:start="3692:5" pos:end="3692:21"><name pos:start="3692:5" pos:end="3692:19">AVFormatContext</name> <modifier pos:start="3692:21" pos:end="3692:21">*</modifier></type><name pos:start="3692:22" pos:end="3692:27">infile</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3693:5" pos:end="3693:15"><decl pos:start="3693:5" pos:end="3693:9"><type pos:start="3693:5" pos:end="3693:7"><name pos:start="3693:5" pos:end="3693:7">int</name></type> <name pos:start="3693:9" pos:end="3693:9">i</name></decl>, <decl pos:start="3693:12" pos:end="3693:14"><type ref="prev" pos:start="3693:5" pos:end="3693:7"/><name pos:start="3693:12" pos:end="3693:14">ret</name></decl>;</decl_stmt>

    <comment type="block" pos:start="3695:5" pos:end="3695:28">/* gather all streams */</comment>
    <for pos:start="3696:5" pos:end="3745:5">for<control pos:start="3696:8" pos:end="3696:68">(<init pos:start="3696:9" pos:end="3696:37"><expr pos:start="3696:9" pos:end="3696:36"><name pos:start="3696:9" pos:end="3696:14">stream</name> <operator pos:start="3696:16" pos:end="3696:16">=</operator> <name pos:start="3696:18" pos:end="3696:36"><name pos:start="3696:18" pos:end="3696:23">config</name><operator pos:start="3696:24" pos:end="3696:24">.</operator><name pos:start="3696:25" pos:end="3696:36">first_stream</name></name></expr>;</init> <condition pos:start="3696:39" pos:end="3696:45"><expr pos:start="3696:39" pos:end="3696:44"><name pos:start="3696:39" pos:end="3696:44">stream</name></expr>;</condition> <incr pos:start="3696:47" pos:end="3696:67"><expr pos:start="3696:47" pos:end="3696:67"><name pos:start="3696:47" pos:end="3696:52">stream</name> <operator pos:start="3696:54" pos:end="3696:54">=</operator> <name pos:start="3696:56" pos:end="3696:67"><name pos:start="3696:56" pos:end="3696:61">stream</name><operator pos:start="3696:62" pos:end="3696:63">-&gt;</operator><name pos:start="3696:64" pos:end="3696:67">next</name></name></expr></incr>)</control> <block pos:start="3696:70" pos:end="3745:5">{<block_content pos:start="3697:9" pos:end="3744:9">
        <expr_stmt pos:start="3697:9" pos:end="3697:22"><expr pos:start="3697:9" pos:end="3697:21"><name pos:start="3697:9" pos:end="3697:14">infile</name> <operator pos:start="3697:16" pos:end="3697:16">=</operator> <name pos:start="3697:18" pos:end="3697:21">NULL</name></expr>;</expr_stmt>

        <if_stmt pos:start="3699:9" pos:end="3700:21"><if pos:start="3699:9" pos:end="3700:21">if <condition pos:start="3699:12" pos:end="3699:68">(<expr pos:start="3699:13" pos:end="3699:67"><name pos:start="3699:13" pos:end="3699:31"><name pos:start="3699:13" pos:end="3699:18">stream</name><operator pos:start="3699:19" pos:end="3699:20">-&gt;</operator><name pos:start="3699:21" pos:end="3699:31">stream_type</name></name> <operator pos:start="3699:33" pos:end="3699:34">!=</operator> <name pos:start="3699:36" pos:end="3699:51">STREAM_TYPE_LIVE</name> <operator pos:start="3699:53" pos:end="3699:54">||</operator> <name pos:start="3699:56" pos:end="3699:67"><name pos:start="3699:56" pos:end="3699:61">stream</name><operator pos:start="3699:62" pos:end="3699:63">-&gt;</operator><name pos:start="3699:64" pos:end="3699:67">feed</name></name></expr>)</condition><block type="pseudo" pos:start="3700:13" pos:end="3700:21"><block_content pos:start="3700:13" pos:end="3700:21">
            <continue pos:start="3700:13" pos:end="3700:21">continue;</continue></block_content></block></if></if_stmt>

        <comment type="block" pos:start="3702:9" pos:end="3702:42">/* the stream comes from a file */</comment>
        <comment type="block" pos:start="3703:9" pos:end="3703:34">/* try to open the file */</comment>
        <comment type="block" pos:start="3704:9" pos:end="3704:25">/* open stream */</comment>


        <comment type="block" pos:start="3707:9" pos:end="3708:50">/* specific case: if transport stream output to RTP,
         * we use a raw transport stream reader */</comment>
        <if_stmt pos:start="3709:9" pos:end="3711:74"><if pos:start="3709:9" pos:end="3711:74">if <condition pos:start="3709:12" pos:end="3709:25">(<expr pos:start="3709:13" pos:end="3709:23"><name pos:start="3709:13" pos:end="3709:23"><name pos:start="3709:13" pos:end="3709:18">stream</name><operator pos:start="3709:19" pos:end="3709:20">-&gt;</operator><name pos:start="3709:21" pos:end="3709:23">fmt</name></name></expr> )</condition><block pos:start="3709:26" pos:end="3711:74">{<block_content pos:start="3710:1" pos:end="3711:73">
<if_stmt pos:start="3710:1" pos:end="3711:73"><if pos:start="3710:1" pos:end="3711:73">if<condition pos:start="3710:3" pos:end="3710:38">( <expr pos:start="3710:5" pos:end="3710:37"><operator pos:start="3710:5" pos:end="3710:5">!</operator><call pos:start="3710:6" pos:end="3710:37"><name pos:start="3710:6" pos:end="3710:11">strcmp</name><argument_list pos:start="3710:12" pos:end="3710:37">(<argument pos:start="3710:13" pos:end="3710:29"><expr pos:start="3710:13" pos:end="3710:29"><name pos:start="3710:13" pos:end="3710:29"><name pos:start="3710:13" pos:end="3710:18">stream</name><operator pos:start="3710:19" pos:end="3710:20">-&gt;</operator><name pos:start="3710:21" pos:end="3710:23">fmt</name><operator pos:start="3710:24" pos:end="3710:25">-&gt;</operator><name pos:start="3710:26" pos:end="3710:29">name</name></name></expr></argument>, <argument pos:start="3710:32" pos:end="3710:36"><expr pos:start="3710:32" pos:end="3710:36"><literal type="string" pos:start="3710:32" pos:end="3710:36">"rtp"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3711:13" pos:end="3711:73"><block_content pos:start="3711:13" pos:end="3711:73">
            <expr_stmt pos:start="3711:13" pos:end="3711:73"><expr pos:start="3711:13" pos:end="3711:72"><call pos:start="3711:13" pos:end="3711:72"><name pos:start="3711:13" pos:end="3711:23">av_dict_set</name><argument_list pos:start="3711:24" pos:end="3711:72">(<argument pos:start="3711:25" pos:end="3711:40"><expr pos:start="3711:25" pos:end="3711:40"><operator pos:start="3711:25" pos:end="3711:25">&amp;</operator><name pos:start="3711:26" pos:end="3711:40"><name pos:start="3711:26" pos:end="3711:31">stream</name><operator pos:start="3711:32" pos:end="3711:33">-&gt;</operator><name pos:start="3711:34" pos:end="3711:40">in_opts</name></name></expr></argument>, <argument pos:start="3711:43" pos:end="3711:63"><expr pos:start="3711:43" pos:end="3711:63"><literal type="string" pos:start="3711:43" pos:end="3711:63">"mpeg2ts_compute_pcr"</literal></expr></argument>, <argument pos:start="3711:66" pos:end="3711:68"><expr pos:start="3711:66" pos:end="3711:68"><literal type="string" pos:start="3711:66" pos:end="3711:68">"1"</literal></expr></argument>, <argument pos:start="3711:71" pos:end="3711:71"><expr pos:start="3711:71" pos:end="3711:71"><literal type="number" pos:start="3711:71" pos:end="3711:71">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block></if></if_stmt>

        <if_stmt pos:start="3713:9" pos:end="3717:9"><if pos:start="3713:9" pos:end="3717:9">if <condition pos:start="3713:12" pos:end="3713:38">(<expr pos:start="3713:13" pos:end="3713:37"><operator pos:start="3713:13" pos:end="3713:13">!</operator><name pos:start="3713:14" pos:end="3713:37"><name pos:start="3713:14" pos:end="3713:19">stream</name><operator pos:start="3713:20" pos:end="3713:21">-&gt;</operator><name pos:start="3713:22" pos:end="3713:34">feed_filename</name><index pos:start="3713:35" pos:end="3713:37">[<expr pos:start="3713:36" pos:end="3713:36"><literal type="number" pos:start="3713:36" pos:end="3713:36">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="3713:40" pos:end="3717:9">{<block_content pos:start="3714:13" pos:end="3716:22">
            <expr_stmt pos:start="3714:13" pos:end="3715:39"><expr pos:start="3714:13" pos:end="3715:38"><call pos:start="3714:13" pos:end="3715:38"><name pos:start="3714:13" pos:end="3714:20">http_log</name><argument_list pos:start="3714:21" pos:end="3715:38">(<argument pos:start="3714:22" pos:end="3714:62"><expr pos:start="3714:22" pos:end="3714:62"><literal type="string" pos:start="3714:22" pos:end="3714:62">"Unspecified feed file for stream '%s'\n"</literal></expr></argument>,
                     <argument pos:start="3715:22" pos:end="3715:37"><expr pos:start="3715:22" pos:end="3715:37"><name pos:start="3715:22" pos:end="3715:37"><name pos:start="3715:22" pos:end="3715:27">stream</name><operator pos:start="3715:28" pos:end="3715:29">-&gt;</operator><name pos:start="3715:30" pos:end="3715:37">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto pos:start="3716:13" pos:end="3716:22">goto <name pos:start="3716:18" pos:end="3716:21">fail</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="3719:9" pos:end="3720:58"><expr pos:start="3719:9" pos:end="3720:57"><call pos:start="3719:9" pos:end="3720:57"><name pos:start="3719:9" pos:end="3719:16">http_log</name><argument_list pos:start="3719:17" pos:end="3720:57">(<argument pos:start="3719:18" pos:end="3719:59"><expr pos:start="3719:18" pos:end="3719:59"><literal type="string" pos:start="3719:18" pos:end="3719:59">"Opening feed file '%s' for stream '%s'\n"</literal></expr></argument>,
                 <argument pos:start="3720:18" pos:end="3720:38"><expr pos:start="3720:18" pos:end="3720:38"><name pos:start="3720:18" pos:end="3720:38"><name pos:start="3720:18" pos:end="3720:23">stream</name><operator pos:start="3720:24" pos:end="3720:25">-&gt;</operator><name pos:start="3720:26" pos:end="3720:38">feed_filename</name></name></expr></argument>, <argument pos:start="3720:41" pos:end="3720:56"><expr pos:start="3720:41" pos:end="3720:56"><name pos:start="3720:41" pos:end="3720:56"><name pos:start="3720:41" pos:end="3720:46">stream</name><operator pos:start="3720:47" pos:end="3720:48">-&gt;</operator><name pos:start="3720:49" pos:end="3720:56">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3722:9" pos:end="3723:66"><expr pos:start="3722:9" pos:end="3723:65"><name pos:start="3722:9" pos:end="3722:11">ret</name> <operator pos:start="3722:13" pos:end="3722:13">=</operator> <call pos:start="3722:15" pos:end="3723:65"><name pos:start="3722:15" pos:end="3722:33">avformat_open_input</name><argument_list pos:start="3722:34" pos:end="3723:65">(<argument pos:start="3722:35" pos:end="3722:41"><expr pos:start="3722:35" pos:end="3722:41"><operator pos:start="3722:35" pos:end="3722:35">&amp;</operator><name pos:start="3722:36" pos:end="3722:41">infile</name></expr></argument>, <argument pos:start="3722:44" pos:end="3722:64"><expr pos:start="3722:44" pos:end="3722:64"><name pos:start="3722:44" pos:end="3722:64"><name pos:start="3722:44" pos:end="3722:49">stream</name><operator pos:start="3722:50" pos:end="3722:51">-&gt;</operator><name pos:start="3722:52" pos:end="3722:64">feed_filename</name></name></expr></argument>,
                                  <argument pos:start="3723:35" pos:end="3723:46"><expr pos:start="3723:35" pos:end="3723:46"><name pos:start="3723:35" pos:end="3723:46"><name pos:start="3723:35" pos:end="3723:40">stream</name><operator pos:start="3723:41" pos:end="3723:42">-&gt;</operator><name pos:start="3723:43" pos:end="3723:46">ifmt</name></name></expr></argument>, <argument pos:start="3723:49" pos:end="3723:64"><expr pos:start="3723:49" pos:end="3723:64"><operator pos:start="3723:49" pos:end="3723:49">&amp;</operator><name pos:start="3723:50" pos:end="3723:64"><name pos:start="3723:50" pos:end="3723:55">stream</name><operator pos:start="3723:56" pos:end="3723:57">-&gt;</operator><name pos:start="3723:58" pos:end="3723:64">in_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="3724:9" pos:end="3744:9"><if pos:start="3724:9" pos:end="3730:9">if <condition pos:start="3724:12" pos:end="3724:20">(<expr pos:start="3724:13" pos:end="3724:19"><name pos:start="3724:13" pos:end="3724:15">ret</name> <operator pos:start="3724:17" pos:end="3724:17">&lt;</operator> <literal type="number" pos:start="3724:19" pos:end="3724:19">0</literal></expr>)</condition> <block pos:start="3724:22" pos:end="3730:9">{<block_content pos:start="3725:13" pos:end="3729:34">
            <expr_stmt pos:start="3725:13" pos:end="3726:38"><expr pos:start="3725:13" pos:end="3726:37"><call pos:start="3725:13" pos:end="3726:37"><name pos:start="3725:13" pos:end="3725:20">http_log</name><argument_list pos:start="3725:21" pos:end="3726:37">(<argument pos:start="3725:22" pos:end="3725:48"><expr pos:start="3725:22" pos:end="3725:48"><literal type="string" pos:start="3725:22" pos:end="3725:48">"Could not open '%s': %s\n"</literal></expr></argument>, <argument pos:start="3725:51" pos:end="3725:71"><expr pos:start="3725:51" pos:end="3725:71"><name pos:start="3725:51" pos:end="3725:71"><name pos:start="3725:51" pos:end="3725:56">stream</name><operator pos:start="3725:57" pos:end="3725:58">-&gt;</operator><name pos:start="3725:59" pos:end="3725:71">feed_filename</name></name></expr></argument>,
                     <argument pos:start="3726:22" pos:end="3726:36"><expr pos:start="3726:22" pos:end="3726:36"><call pos:start="3726:22" pos:end="3726:36"><name pos:start="3726:22" pos:end="3726:31">av_err2str</name><argument_list pos:start="3726:32" pos:end="3726:36">(<argument pos:start="3726:33" pos:end="3726:35"><expr pos:start="3726:33" pos:end="3726:35"><name pos:start="3726:33" pos:end="3726:35">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="3727:13" pos:end="3727:66">/* remove stream (no need to spend more time on it) */</comment>
        <label pos:start="3728:9" pos:end="3728:13"><name pos:start="3728:9" pos:end="3728:12">fail</name>:</label>
            <expr_stmt pos:start="3729:13" pos:end="3729:34"><expr pos:start="3729:13" pos:end="3729:33"><call pos:start="3729:13" pos:end="3729:33"><name pos:start="3729:13" pos:end="3729:25">remove_stream</name><argument_list pos:start="3729:26" pos:end="3729:33">(<argument pos:start="3729:27" pos:end="3729:32"><expr pos:start="3729:27" pos:end="3729:32"><name pos:start="3729:27" pos:end="3729:32">stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="3730:11" pos:end="3744:9">else <block pos:start="3730:16" pos:end="3744:9">{<block_content pos:start="3733:13" pos:end="3743:42">
            <comment type="block" pos:start="3731:13" pos:end="3732:26">/* find all the AVStreams inside and reference them in
             * 'stream' */</comment>
            <if_stmt pos:start="3733:13" pos:end="3738:13"><if pos:start="3733:13" pos:end="3738:13">if <condition pos:start="3733:16" pos:end="3733:60">(<expr pos:start="3733:17" pos:end="3733:59"><call pos:start="3733:17" pos:end="3733:55"><name pos:start="3733:17" pos:end="3733:41">avformat_find_stream_info</name><argument_list pos:start="3733:42" pos:end="3733:55">(<argument pos:start="3733:43" pos:end="3733:48"><expr pos:start="3733:43" pos:end="3733:48"><name pos:start="3733:43" pos:end="3733:48">infile</name></expr></argument>, <argument pos:start="3733:51" pos:end="3733:54"><expr pos:start="3733:51" pos:end="3733:54"><name pos:start="3733:51" pos:end="3733:54">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="3733:57" pos:end="3733:57">&lt;</operator> <literal type="number" pos:start="3733:59" pos:end="3733:59">0</literal></expr>)</condition> <block pos:start="3733:62" pos:end="3738:13">{<block_content pos:start="3734:17" pos:end="3737:26">
                <expr_stmt pos:start="3734:17" pos:end="3735:48"><expr pos:start="3734:17" pos:end="3735:47"><call pos:start="3734:17" pos:end="3735:47"><name pos:start="3734:17" pos:end="3734:24">http_log</name><argument_list pos:start="3734:25" pos:end="3735:47">(<argument pos:start="3734:26" pos:end="3734:70"><expr pos:start="3734:26" pos:end="3734:70"><literal type="string" pos:start="3734:26" pos:end="3734:70">"Could not find codec parameters from '%s'\n"</literal></expr></argument>,
                         <argument pos:start="3735:26" pos:end="3735:46"><expr pos:start="3735:26" pos:end="3735:46"><name pos:start="3735:26" pos:end="3735:46"><name pos:start="3735:26" pos:end="3735:31">stream</name><operator pos:start="3735:32" pos:end="3735:33">-&gt;</operator><name pos:start="3735:34" pos:end="3735:46">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3736:17" pos:end="3736:46"><expr pos:start="3736:17" pos:end="3736:45"><call pos:start="3736:17" pos:end="3736:45"><name pos:start="3736:17" pos:end="3736:36">avformat_close_input</name><argument_list pos:start="3736:37" pos:end="3736:45">(<argument pos:start="3736:38" pos:end="3736:44"><expr pos:start="3736:38" pos:end="3736:44"><operator pos:start="3736:38" pos:end="3736:38">&amp;</operator><name pos:start="3736:39" pos:end="3736:44">infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="3737:17" pos:end="3737:26">goto <name pos:start="3737:22" pos:end="3737:25">fail</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <for pos:start="3740:13" pos:end="3741:69">for<control pos:start="3740:16" pos:end="3740:45">(<init pos:start="3740:17" pos:end="3740:20"><expr pos:start="3740:17" pos:end="3740:19"><name pos:start="3740:17" pos:end="3740:17">i</name><operator pos:start="3740:18" pos:end="3740:18">=</operator><literal type="number" pos:start="3740:19" pos:end="3740:19">0</literal></expr>;</init><condition pos:start="3740:21" pos:end="3740:41"><expr pos:start="3740:21" pos:end="3740:40"><name pos:start="3740:21" pos:end="3740:21">i</name><operator pos:start="3740:22" pos:end="3740:22">&lt;</operator><name pos:start="3740:23" pos:end="3740:40"><name pos:start="3740:23" pos:end="3740:28">infile</name><operator pos:start="3740:29" pos:end="3740:30">-&gt;</operator><name pos:start="3740:31" pos:end="3740:40">nb_streams</name></name></expr>;</condition><incr pos:start="3740:42" pos:end="3740:44"><expr pos:start="3740:42" pos:end="3740:44"><name pos:start="3740:42" pos:end="3740:42">i</name><operator pos:start="3740:43" pos:end="3740:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="3741:17" pos:end="3741:69"><block_content pos:start="3741:17" pos:end="3741:69">
                <expr_stmt pos:start="3741:17" pos:end="3741:69"><expr pos:start="3741:17" pos:end="3741:68"><call pos:start="3741:17" pos:end="3741:68"><name pos:start="3741:17" pos:end="3741:30">add_av_stream1</name><argument_list pos:start="3741:31" pos:end="3741:68">(<argument pos:start="3741:32" pos:end="3741:37"><expr pos:start="3741:32" pos:end="3741:37"><name pos:start="3741:32" pos:end="3741:37">stream</name></expr></argument>, <argument pos:start="3741:40" pos:end="3741:64"><expr pos:start="3741:40" pos:end="3741:64"><name pos:start="3741:40" pos:end="3741:57"><name pos:start="3741:40" pos:end="3741:45">infile</name><operator pos:start="3741:46" pos:end="3741:47">-&gt;</operator><name pos:start="3741:48" pos:end="3741:54">streams</name><index pos:start="3741:55" pos:end="3741:57">[<expr pos:start="3741:56" pos:end="3741:56"><name pos:start="3741:56" pos:end="3741:56">i</name></expr>]</index></name><operator pos:start="3741:58" pos:end="3741:59">-&gt;</operator><name pos:start="3741:60" pos:end="3741:64">codec</name></expr></argument>, <argument pos:start="3741:67" pos:end="3741:67"><expr pos:start="3741:67" pos:end="3741:67"><literal type="number" pos:start="3741:67" pos:end="3741:67">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="3743:13" pos:end="3743:42"><expr pos:start="3743:13" pos:end="3743:41"><call pos:start="3743:13" pos:end="3743:41"><name pos:start="3743:13" pos:end="3743:32">avformat_close_input</name><argument_list pos:start="3743:33" pos:end="3743:41">(<argument pos:start="3743:34" pos:end="3743:40"><expr pos:start="3743:34" pos:end="3743:40"><operator pos:start="3743:34" pos:end="3743:34">&amp;</operator><name pos:start="3743:35" pos:end="3743:40">infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function pos:start="3748:1" pos:end="3780:1"><type pos:start="3748:1" pos:end="3749:3"><specifier pos:start="3748:1" pos:end="3748:6">static</specifier> <specifier pos:start="3748:8" pos:end="3748:13">inline</specifier>
<name pos:start="3749:1" pos:end="3749:3">int</name></type> <name pos:start="3749:5" pos:end="3749:21">check_codec_match</name><parameter_list pos:start="3749:22" pos:end="3749:70">(<parameter pos:start="3749:23" pos:end="3749:42"><decl pos:start="3749:23" pos:end="3749:42"><type pos:start="3749:23" pos:end="3749:42"><name pos:start="3749:23" pos:end="3749:37">LayeredAVStream</name> <modifier pos:start="3749:39" pos:end="3749:39">*</modifier></type><name pos:start="3749:40" pos:end="3749:42">ccf</name></decl></parameter>, <parameter pos:start="3749:45" pos:end="3749:57"><decl pos:start="3749:45" pos:end="3749:57"><type pos:start="3749:45" pos:end="3749:57"><name pos:start="3749:45" pos:end="3749:52">AVStream</name> <modifier pos:start="3749:54" pos:end="3749:54">*</modifier></type><name pos:start="3749:55" pos:end="3749:57">ccs</name></decl></parameter>, <parameter pos:start="3749:60" pos:end="3749:69"><decl pos:start="3749:60" pos:end="3749:69"><type pos:start="3749:60" pos:end="3749:69"><name pos:start="3749:60" pos:end="3749:62">int</name></type> <name pos:start="3749:64" pos:end="3749:69">stream</name></decl></parameter>)</parameter_list>
<block pos:start="3750:1" pos:end="3780:1">{<block_content pos:start="3751:5" pos:end="3779:19">
    <decl_stmt pos:start="3751:5" pos:end="3755:0"><decl pos:start="3751:5" pos:end="3751:19"><type pos:start="3751:5" pos:end="3751:7"><name pos:start="3751:5" pos:end="3751:7">int</name></type> <name pos:start="3751:9" pos:end="3751:15">matches</name> <init pos:start="3751:17" pos:end="3751:19">= <expr pos:start="3751:19" pos:end="3751:19"><literal type="number" pos:start="3751:19" pos:end="3751:19">1</literal></expr></init></decl>;</decl_stmt>

<comment type="block" pos:start="3753:1" pos:end="3753:49">/* FIXME: Missed check on AVCodecContext.flags */</comment>
<cpp:define pos:start="3754:1" pos:end="3754:62">#<cpp:directive pos:start="3754:2" pos:end="3754:7">define</cpp:directive> <cpp:macro pos:start="3754:9" pos:end="3754:22"><name pos:start="3754:9" pos:end="3754:19">CHECK_CODEC</name><parameter_list pos:start="3754:20" pos:end="3754:22">(<parameter pos:start="3754:21" pos:end="3754:21"><type pos:start="3754:21" pos:end="3754:21"><name pos:start="3754:21" pos:end="3754:21">x</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value pos:start="3754:25" pos:end="3754:62">(ccf-&gt;codecpar-&gt;x != ccs-&gt;codecpar-&gt;x)</cpp:value></cpp:define>
    <if_stmt pos:start="3755:5" pos:end="3777:5"><if pos:start="3755:5" pos:end="3758:5">if <condition pos:start="3755:8" pos:end="3755:57">(<expr pos:start="3755:9" pos:end="3755:56"><call pos:start="3755:9" pos:end="3755:29"><name pos:start="3755:9" pos:end="3755:19">CHECK_CODEC</name><argument_list pos:start="3755:20" pos:end="3755:29">(<argument pos:start="3755:21" pos:end="3755:28"><expr pos:start="3755:21" pos:end="3755:28"><name pos:start="3755:21" pos:end="3755:28">codec_id</name></expr></argument>)</argument_list></call> <operator pos:start="3755:31" pos:end="3755:32">||</operator> <call pos:start="3755:34" pos:end="3755:56"><name pos:start="3755:34" pos:end="3755:44">CHECK_CODEC</name><argument_list pos:start="3755:45" pos:end="3755:56">(<argument pos:start="3755:46" pos:end="3755:55"><expr pos:start="3755:46" pos:end="3755:55"><name pos:start="3755:46" pos:end="3755:55">codec_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3755:59" pos:end="3758:5">{<block_content pos:start="3756:9" pos:end="3757:20">
        <expr_stmt pos:start="3756:9" pos:end="3756:64"><expr pos:start="3756:9" pos:end="3756:63"><call pos:start="3756:9" pos:end="3756:63"><name pos:start="3756:9" pos:end="3756:16">http_log</name><argument_list pos:start="3756:17" pos:end="3756:63">(<argument pos:start="3756:18" pos:end="3756:54"><expr pos:start="3756:18" pos:end="3756:54"><literal type="string" pos:start="3756:18" pos:end="3756:54">"Codecs do not match for stream %d\n"</literal></expr></argument>, <argument pos:start="3756:57" pos:end="3756:62"><expr pos:start="3756:57" pos:end="3756:62"><name pos:start="3756:57" pos:end="3756:62">stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3757:9" pos:end="3757:20"><expr pos:start="3757:9" pos:end="3757:19"><name pos:start="3757:9" pos:end="3757:15">matches</name> <operator pos:start="3757:17" pos:end="3757:17">=</operator> <literal type="number" pos:start="3757:19" pos:end="3757:19">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="3758:7" pos:end="3761:5">else if <condition pos:start="3758:15" pos:end="3758:37">(<expr pos:start="3758:16" pos:end="3758:36"><call pos:start="3758:16" pos:end="3758:36"><name pos:start="3758:16" pos:end="3758:26">CHECK_CODEC</name><argument_list pos:start="3758:27" pos:end="3758:36">(<argument pos:start="3758:28" pos:end="3758:35"><expr pos:start="3758:28" pos:end="3758:35"><name pos:start="3758:28" pos:end="3758:35">bit_rate</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3758:39" pos:end="3761:5">{<block_content pos:start="3759:9" pos:end="3760:20">
        <expr_stmt pos:start="3759:9" pos:end="3759:72"><expr pos:start="3759:9" pos:end="3759:71"><call pos:start="3759:9" pos:end="3759:71"><name pos:start="3759:9" pos:end="3759:16">http_log</name><argument_list pos:start="3759:17" pos:end="3759:71">(<argument pos:start="3759:18" pos:end="3759:62"><expr pos:start="3759:18" pos:end="3759:62"><literal type="string" pos:start="3759:18" pos:end="3759:62">"Codec bitrates do not match for stream %d\n"</literal></expr></argument>, <argument pos:start="3759:65" pos:end="3759:70"><expr pos:start="3759:65" pos:end="3759:70"><name pos:start="3759:65" pos:end="3759:70">stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3760:9" pos:end="3760:20"><expr pos:start="3760:9" pos:end="3760:19"><name pos:start="3760:9" pos:end="3760:15">matches</name> <operator pos:start="3760:17" pos:end="3760:17">=</operator> <literal type="number" pos:start="3760:19" pos:end="3760:19">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="3761:7" pos:end="3767:5">else if <condition pos:start="3761:15" pos:end="3761:63">(<expr pos:start="3761:16" pos:end="3761:62"><name pos:start="3761:16" pos:end="3761:40"><name pos:start="3761:16" pos:end="3761:18">ccf</name><operator pos:start="3761:19" pos:end="3761:20">-&gt;</operator><name pos:start="3761:21" pos:end="3761:28">codecpar</name><operator pos:start="3761:29" pos:end="3761:30">-&gt;</operator><name pos:start="3761:31" pos:end="3761:40">codec_type</name></name> <operator pos:start="3761:42" pos:end="3761:43">==</operator> <name pos:start="3761:45" pos:end="3761:62">AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block pos:start="3761:65" pos:end="3767:5">{<block_content pos:start="3762:9" pos:end="3766:9">
        <if_stmt pos:start="3762:9" pos:end="3766:9"><if pos:start="3762:9" pos:end="3766:9">if <condition pos:start="3762:12" pos:end="3763:54">(<expr pos:start="3762:13" pos:end="3763:53"><call pos:start="3762:13" pos:end="3762:52"><name pos:start="3762:13" pos:end="3762:20">av_cmp_q</name><argument_list pos:start="3762:21" pos:end="3762:52">(<argument pos:start="3762:22" pos:end="3762:35"><expr pos:start="3762:22" pos:end="3762:35"><name pos:start="3762:22" pos:end="3762:35"><name pos:start="3762:22" pos:end="3762:24">ccf</name><operator pos:start="3762:25" pos:end="3762:26">-&gt;</operator><name pos:start="3762:27" pos:end="3762:35">time_base</name></name></expr></argument>, <argument pos:start="3762:38" pos:end="3762:51"><expr pos:start="3762:38" pos:end="3762:51"><name pos:start="3762:38" pos:end="3762:51"><name pos:start="3762:38" pos:end="3762:40">ccs</name><operator pos:start="3762:41" pos:end="3762:42">-&gt;</operator><name pos:start="3762:43" pos:end="3762:51">time_base</name></name></expr></argument>)</argument_list></call> <operator pos:start="3762:54" pos:end="3762:55">||</operator>
            <call pos:start="3763:13" pos:end="3763:30"><name pos:start="3763:13" pos:end="3763:23">CHECK_CODEC</name><argument_list pos:start="3763:24" pos:end="3763:30">(<argument pos:start="3763:25" pos:end="3763:29"><expr pos:start="3763:25" pos:end="3763:29"><name pos:start="3763:25" pos:end="3763:29">width</name></expr></argument>)</argument_list></call> <operator pos:start="3763:32" pos:end="3763:33">||</operator> <call pos:start="3763:35" pos:end="3763:53"><name pos:start="3763:35" pos:end="3763:45">CHECK_CODEC</name><argument_list pos:start="3763:46" pos:end="3763:53">(<argument pos:start="3763:47" pos:end="3763:52"><expr pos:start="3763:47" pos:end="3763:52"><name pos:start="3763:47" pos:end="3763:52">height</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3763:56" pos:end="3766:9">{<block_content pos:start="3764:13" pos:end="3765:24">
            <expr_stmt pos:start="3764:13" pos:end="3764:94"><expr pos:start="3764:13" pos:end="3764:93"><call pos:start="3764:13" pos:end="3764:93"><name pos:start="3764:13" pos:end="3764:20">http_log</name><argument_list pos:start="3764:21" pos:end="3764:93">(<argument pos:start="3764:22" pos:end="3764:84"><expr pos:start="3764:22" pos:end="3764:84"><literal type="string" pos:start="3764:22" pos:end="3764:84">"Codec width, height or framerate do not match for stream %d\n"</literal></expr></argument>, <argument pos:start="3764:87" pos:end="3764:92"><expr pos:start="3764:87" pos:end="3764:92"><name pos:start="3764:87" pos:end="3764:92">stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3765:13" pos:end="3765:24"><expr pos:start="3765:13" pos:end="3765:23"><name pos:start="3765:13" pos:end="3765:19">matches</name> <operator pos:start="3765:21" pos:end="3765:21">=</operator> <literal type="number" pos:start="3765:23" pos:end="3765:23">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="3767:7" pos:end="3774:5">else if <condition pos:start="3767:15" pos:end="3767:63">(<expr pos:start="3767:16" pos:end="3767:62"><name pos:start="3767:16" pos:end="3767:40"><name pos:start="3767:16" pos:end="3767:18">ccf</name><operator pos:start="3767:19" pos:end="3767:20">-&gt;</operator><name pos:start="3767:21" pos:end="3767:28">codecpar</name><operator pos:start="3767:29" pos:end="3767:30">-&gt;</operator><name pos:start="3767:31" pos:end="3767:40">codec_type</name></name> <operator pos:start="3767:42" pos:end="3767:43">==</operator> <name pos:start="3767:45" pos:end="3767:62">AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block pos:start="3767:65" pos:end="3774:5">{<block_content pos:start="3768:9" pos:end="3773:9">
        <if_stmt pos:start="3768:9" pos:end="3773:9"><if pos:start="3768:9" pos:end="3773:9">if <condition pos:start="3768:12" pos:end="3770:36">(<expr pos:start="3768:13" pos:end="3770:35"><call pos:start="3768:13" pos:end="3768:36"><name pos:start="3768:13" pos:end="3768:23">CHECK_CODEC</name><argument_list pos:start="3768:24" pos:end="3768:36">(<argument pos:start="3768:25" pos:end="3768:35"><expr pos:start="3768:25" pos:end="3768:35"><name pos:start="3768:25" pos:end="3768:35">sample_rate</name></expr></argument>)</argument_list></call> <operator pos:start="3768:38" pos:end="3768:39">||</operator>
            <call pos:start="3769:13" pos:end="3769:33"><name pos:start="3769:13" pos:end="3769:23">CHECK_CODEC</name><argument_list pos:start="3769:24" pos:end="3769:33">(<argument pos:start="3769:25" pos:end="3769:32"><expr pos:start="3769:25" pos:end="3769:32"><name pos:start="3769:25" pos:end="3769:32">channels</name></expr></argument>)</argument_list></call> <operator pos:start="3769:35" pos:end="3769:36">||</operator>
            <call pos:start="3770:13" pos:end="3770:35"><name pos:start="3770:13" pos:end="3770:23">CHECK_CODEC</name><argument_list pos:start="3770:24" pos:end="3770:35">(<argument pos:start="3770:25" pos:end="3770:34"><expr pos:start="3770:25" pos:end="3770:34"><name pos:start="3770:25" pos:end="3770:34">frame_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3770:38" pos:end="3773:9">{<block_content pos:start="3771:13" pos:end="3772:24">
            <expr_stmt pos:start="3771:13" pos:end="3771:101"><expr pos:start="3771:13" pos:end="3771:100"><call pos:start="3771:13" pos:end="3771:100"><name pos:start="3771:13" pos:end="3771:20">http_log</name><argument_list pos:start="3771:21" pos:end="3771:100">(<argument pos:start="3771:22" pos:end="3771:91"><expr pos:start="3771:22" pos:end="3771:91"><literal type="string" pos:start="3771:22" pos:end="3771:91">"Codec sample_rate, channels, frame_size do not match for stream %d\n"</literal></expr></argument>, <argument pos:start="3771:94" pos:end="3771:99"><expr pos:start="3771:94" pos:end="3771:99"><name pos:start="3771:94" pos:end="3771:99">stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3772:13" pos:end="3772:24"><expr pos:start="3772:13" pos:end="3772:23"><name pos:start="3772:13" pos:end="3772:19">matches</name> <operator pos:start="3772:21" pos:end="3772:21">=</operator> <literal type="number" pos:start="3772:23" pos:end="3772:23">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else pos:start="3774:7" pos:end="3777:5">else <block pos:start="3774:12" pos:end="3777:5">{<block_content pos:start="3775:9" pos:end="3776:20">
        <expr_stmt pos:start="3775:9" pos:end="3775:63"><expr pos:start="3775:9" pos:end="3775:62"><call pos:start="3775:9" pos:end="3775:62"><name pos:start="3775:9" pos:end="3775:16">http_log</name><argument_list pos:start="3775:17" pos:end="3775:62">(<argument pos:start="3775:18" pos:end="3775:53"><expr pos:start="3775:18" pos:end="3775:53"><literal type="string" pos:start="3775:18" pos:end="3775:53">"Unknown codec type for stream %d\n"</literal></expr></argument>, <argument pos:start="3775:56" pos:end="3775:61"><expr pos:start="3775:56" pos:end="3775:61"><name pos:start="3775:56" pos:end="3775:61">stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3776:9" pos:end="3776:20"><expr pos:start="3776:9" pos:end="3776:19"><name pos:start="3776:9" pos:end="3776:15">matches</name> <operator pos:start="3776:17" pos:end="3776:17">=</operator> <literal type="number" pos:start="3776:19" pos:end="3776:19">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return pos:start="3779:5" pos:end="3779:19">return <expr pos:start="3779:12" pos:end="3779:18"><name pos:start="3779:12" pos:end="3779:18">matches</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="3782:1" pos:end="3782:47">/* compute the needed AVStream for each feed */</comment>
<function pos:start="3783:1" pos:end="3939:1"><type pos:start="3783:1" pos:end="3783:10"><specifier pos:start="3783:1" pos:end="3783:6">static</specifier> <name pos:start="3783:8" pos:end="3783:10">int</name></type> <name pos:start="3783:12" pos:end="3783:29">build_feed_streams</name><parameter_list pos:start="3783:30" pos:end="3783:35">(<parameter pos:start="3783:31" pos:end="3783:34"><decl pos:start="3783:31" pos:end="3783:34"><type pos:start="3783:31" pos:end="3783:34"><name pos:start="3783:31" pos:end="3783:34">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="3784:1" pos:end="3939:1">{<block_content pos:start="3785:5" pos:end="3938:14">
    <decl_stmt pos:start="3785:5" pos:end="3785:34"><decl pos:start="3785:5" pos:end="3785:26"><type pos:start="3785:5" pos:end="3785:20"><name pos:start="3785:5" pos:end="3785:18">FFServerStream</name> <modifier pos:start="3785:20" pos:end="3785:20">*</modifier></type><name pos:start="3785:21" pos:end="3785:26">stream</name></decl>, <decl pos:start="3785:29" pos:end="3785:33"><type ref="prev" pos:start="3785:5" pos:end="3785:20"><modifier pos:start="3785:29" pos:end="3785:29">*</modifier></type><name pos:start="3785:30" pos:end="3785:33">feed</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3786:5" pos:end="3786:14"><decl pos:start="3786:5" pos:end="3786:9"><type pos:start="3786:5" pos:end="3786:7"><name pos:start="3786:5" pos:end="3786:7">int</name></type> <name pos:start="3786:9" pos:end="3786:9">i</name></decl>, <decl pos:start="3786:12" pos:end="3786:13"><type ref="prev" pos:start="3786:5" pos:end="3786:7"/><name pos:start="3786:12" pos:end="3786:13">fd</name></decl>;</decl_stmt>

    <comment type="block" pos:start="3788:5" pos:end="3788:28">/* gather all streams */</comment>
    <for pos:start="3789:5" pos:end="3802:5">for<control pos:start="3789:8" pos:end="3789:68">(<init pos:start="3789:9" pos:end="3789:37"><expr pos:start="3789:9" pos:end="3789:36"><name pos:start="3789:9" pos:end="3789:14">stream</name> <operator pos:start="3789:16" pos:end="3789:16">=</operator> <name pos:start="3789:18" pos:end="3789:36"><name pos:start="3789:18" pos:end="3789:23">config</name><operator pos:start="3789:24" pos:end="3789:24">.</operator><name pos:start="3789:25" pos:end="3789:36">first_stream</name></name></expr>;</init> <condition pos:start="3789:39" pos:end="3789:45"><expr pos:start="3789:39" pos:end="3789:44"><name pos:start="3789:39" pos:end="3789:44">stream</name></expr>;</condition> <incr pos:start="3789:47" pos:end="3789:67"><expr pos:start="3789:47" pos:end="3789:67"><name pos:start="3789:47" pos:end="3789:52">stream</name> <operator pos:start="3789:54" pos:end="3789:54">=</operator> <name pos:start="3789:56" pos:end="3789:67"><name pos:start="3789:56" pos:end="3789:61">stream</name><operator pos:start="3789:62" pos:end="3789:63">-&gt;</operator><name pos:start="3789:64" pos:end="3789:67">next</name></name></expr></incr>)</control> <block pos:start="3789:70" pos:end="3802:5">{<block_content pos:start="3790:9" pos:end="3801:78">
        <expr_stmt pos:start="3790:9" pos:end="3790:28"><expr pos:start="3790:9" pos:end="3790:27"><name pos:start="3790:9" pos:end="3790:12">feed</name> <operator pos:start="3790:14" pos:end="3790:14">=</operator> <name pos:start="3790:16" pos:end="3790:27"><name pos:start="3790:16" pos:end="3790:21">stream</name><operator pos:start="3790:22" pos:end="3790:23">-&gt;</operator><name pos:start="3790:24" pos:end="3790:27">feed</name></name></expr>;</expr_stmt>
        <if_stmt pos:start="3791:9" pos:end="3792:21"><if pos:start="3791:9" pos:end="3792:21">if <condition pos:start="3791:12" pos:end="3791:18">(<expr pos:start="3791:13" pos:end="3791:17"><operator pos:start="3791:13" pos:end="3791:13">!</operator><name pos:start="3791:14" pos:end="3791:17">feed</name></expr>)</condition><block type="pseudo" pos:start="3792:13" pos:end="3792:21"><block_content pos:start="3792:13" pos:end="3792:21">
            <continue pos:start="3792:13" pos:end="3792:21">continue;</continue></block_content></block></if></if_stmt>

        <if_stmt pos:start="3794:9" pos:end="3798:9"><if pos:start="3794:9" pos:end="3798:9">if <condition pos:start="3794:12" pos:end="3794:28">(<expr pos:start="3794:13" pos:end="3794:27"><name pos:start="3794:13" pos:end="3794:27"><name pos:start="3794:13" pos:end="3794:18">stream</name><operator pos:start="3794:19" pos:end="3794:20">-&gt;</operator><name pos:start="3794:21" pos:end="3794:27">is_feed</name></name></expr>)</condition> <block pos:start="3794:30" pos:end="3798:9">{<block_content pos:start="3795:13" pos:end="3797:21">
            <for pos:start="3795:13" pos:end="3796:44">for<control pos:start="3795:16" pos:end="3795:45">(<init pos:start="3795:17" pos:end="3795:20"><expr pos:start="3795:17" pos:end="3795:19"><name pos:start="3795:17" pos:end="3795:17">i</name><operator pos:start="3795:18" pos:end="3795:18">=</operator><literal type="number" pos:start="3795:19" pos:end="3795:19">0</literal></expr>;</init><condition pos:start="3795:21" pos:end="3795:41"><expr pos:start="3795:21" pos:end="3795:40"><name pos:start="3795:21" pos:end="3795:21">i</name><operator pos:start="3795:22" pos:end="3795:22">&lt;</operator><name pos:start="3795:23" pos:end="3795:40"><name pos:start="3795:23" pos:end="3795:28">stream</name><operator pos:start="3795:29" pos:end="3795:30">-&gt;</operator><name pos:start="3795:31" pos:end="3795:40">nb_streams</name></name></expr>;</condition><incr pos:start="3795:42" pos:end="3795:44"><expr pos:start="3795:42" pos:end="3795:44"><name pos:start="3795:42" pos:end="3795:42">i</name><operator pos:start="3795:43" pos:end="3795:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="3796:17" pos:end="3796:44"><block_content pos:start="3796:17" pos:end="3796:44">
                <expr_stmt pos:start="3796:17" pos:end="3796:44"><expr pos:start="3796:17" pos:end="3796:43"><name pos:start="3796:17" pos:end="3796:39"><name pos:start="3796:17" pos:end="3796:22">stream</name><operator pos:start="3796:23" pos:end="3796:24">-&gt;</operator><name pos:start="3796:25" pos:end="3796:36">feed_streams</name><index pos:start="3796:37" pos:end="3796:39">[<expr pos:start="3796:38" pos:end="3796:38"><name pos:start="3796:38" pos:end="3796:38">i</name></expr>]</index></name> <operator pos:start="3796:41" pos:end="3796:41">=</operator> <name pos:start="3796:43" pos:end="3796:43">i</name></expr>;</expr_stmt></block_content></block></for>
            <continue pos:start="3797:13" pos:end="3797:21">continue;</continue>
        </block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="3799:9" pos:end="3799:51">/* we handle a stream coming from a feed */</comment>
        <for pos:start="3800:9" pos:end="3801:78">for<control pos:start="3800:12" pos:end="3800:41">(<init pos:start="3800:13" pos:end="3800:16"><expr pos:start="3800:13" pos:end="3800:15"><name pos:start="3800:13" pos:end="3800:13">i</name><operator pos:start="3800:14" pos:end="3800:14">=</operator><literal type="number" pos:start="3800:15" pos:end="3800:15">0</literal></expr>;</init><condition pos:start="3800:17" pos:end="3800:37"><expr pos:start="3800:17" pos:end="3800:36"><name pos:start="3800:17" pos:end="3800:17">i</name><operator pos:start="3800:18" pos:end="3800:18">&lt;</operator><name pos:start="3800:19" pos:end="3800:36"><name pos:start="3800:19" pos:end="3800:24">stream</name><operator pos:start="3800:25" pos:end="3800:26">-&gt;</operator><name pos:start="3800:27" pos:end="3800:36">nb_streams</name></name></expr>;</condition><incr pos:start="3800:38" pos:end="3800:40"><expr pos:start="3800:38" pos:end="3800:40"><name pos:start="3800:38" pos:end="3800:38">i</name><operator pos:start="3800:39" pos:end="3800:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="3801:13" pos:end="3801:78"><block_content pos:start="3801:13" pos:end="3801:78">
            <expr_stmt pos:start="3801:13" pos:end="3801:78"><expr pos:start="3801:13" pos:end="3801:77"><name pos:start="3801:13" pos:end="3801:35"><name pos:start="3801:13" pos:end="3801:18">stream</name><operator pos:start="3801:19" pos:end="3801:20">-&gt;</operator><name pos:start="3801:21" pos:end="3801:32">feed_streams</name><index pos:start="3801:33" pos:end="3801:35">[<expr pos:start="3801:34" pos:end="3801:34"><name pos:start="3801:34" pos:end="3801:34">i</name></expr>]</index></name> <operator pos:start="3801:37" pos:end="3801:37">=</operator> <call pos:start="3801:39" pos:end="3801:77"><name pos:start="3801:39" pos:end="3801:51">add_av_stream</name><argument_list pos:start="3801:52" pos:end="3801:77">(<argument pos:start="3801:53" pos:end="3801:56"><expr pos:start="3801:53" pos:end="3801:56"><name pos:start="3801:53" pos:end="3801:56">feed</name></expr></argument>, <argument pos:start="3801:59" pos:end="3801:76"><expr pos:start="3801:59" pos:end="3801:76"><name pos:start="3801:59" pos:end="3801:76"><name pos:start="3801:59" pos:end="3801:64">stream</name><operator pos:start="3801:65" pos:end="3801:66">-&gt;</operator><name pos:start="3801:67" pos:end="3801:73">streams</name><index pos:start="3801:74" pos:end="3801:76">[<expr pos:start="3801:75" pos:end="3801:75"><name pos:start="3801:75" pos:end="3801:75">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></for>

    <comment type="block" pos:start="3804:5" pos:end="3804:37">/* create feed files if needed */</comment>
    <for pos:start="3805:5" pos:end="3934:5">for<control pos:start="3805:8" pos:end="3805:63">(<init pos:start="3805:9" pos:end="3805:33"><expr pos:start="3805:9" pos:end="3805:32"><name pos:start="3805:9" pos:end="3805:12">feed</name> <operator pos:start="3805:14" pos:end="3805:14">=</operator> <name pos:start="3805:16" pos:end="3805:32"><name pos:start="3805:16" pos:end="3805:21">config</name><operator pos:start="3805:22" pos:end="3805:22">.</operator><name pos:start="3805:23" pos:end="3805:32">first_feed</name></name></expr>;</init> <condition pos:start="3805:35" pos:end="3805:39"><expr pos:start="3805:35" pos:end="3805:38"><name pos:start="3805:35" pos:end="3805:38">feed</name></expr>;</condition> <incr pos:start="3805:41" pos:end="3805:62"><expr pos:start="3805:41" pos:end="3805:62"><name pos:start="3805:41" pos:end="3805:44">feed</name> <operator pos:start="3805:46" pos:end="3805:46">=</operator> <name pos:start="3805:48" pos:end="3805:62"><name pos:start="3805:48" pos:end="3805:51">feed</name><operator pos:start="3805:52" pos:end="3805:53">-&gt;</operator><name pos:start="3805:54" pos:end="3805:62">next_feed</name></name></expr></incr>)</control> <block pos:start="3805:65" pos:end="3934:5">{<block_content pos:start="3807:9" pos:end="3933:18">

        <if_stmt pos:start="3807:9" pos:end="3867:9"><if pos:start="3807:9" pos:end="3867:9">if <condition pos:start="3807:12" pos:end="3807:64">(<expr pos:start="3807:13" pos:end="3807:63"><call pos:start="3807:13" pos:end="3807:59"><name pos:start="3807:13" pos:end="3807:22">avio_check</name><argument_list pos:start="3807:23" pos:end="3807:59">(<argument pos:start="3807:24" pos:end="3807:42"><expr pos:start="3807:24" pos:end="3807:42"><name pos:start="3807:24" pos:end="3807:42"><name pos:start="3807:24" pos:end="3807:27">feed</name><operator pos:start="3807:28" pos:end="3807:29">-&gt;</operator><name pos:start="3807:30" pos:end="3807:42">feed_filename</name></name></expr></argument>, <argument pos:start="3807:45" pos:end="3807:58"><expr pos:start="3807:45" pos:end="3807:58"><name pos:start="3807:45" pos:end="3807:58">AVIO_FLAG_READ</name></expr></argument>)</argument_list></call> <operator pos:start="3807:61" pos:end="3807:61">&gt;</operator> <literal type="number" pos:start="3807:63" pos:end="3807:63">0</literal></expr>)</condition> <block pos:start="3807:66" pos:end="3867:9">{<block_content pos:start="3808:13" pos:end="3866:13">
            <decl_stmt pos:start="3808:13" pos:end="3808:38"><decl pos:start="3808:13" pos:end="3808:37"><type pos:start="3808:13" pos:end="3808:29"><name pos:start="3808:13" pos:end="3808:27">AVFormatContext</name> <modifier pos:start="3808:29" pos:end="3808:29">*</modifier></type><name pos:start="3808:30" pos:end="3808:30">s</name> <init pos:start="3808:32" pos:end="3808:37">= <expr pos:start="3808:34" pos:end="3808:37"><name pos:start="3808:34" pos:end="3808:37">NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="3809:13" pos:end="3809:28"><decl pos:start="3809:13" pos:end="3809:27"><type pos:start="3809:13" pos:end="3809:15"><name pos:start="3809:13" pos:end="3809:15">int</name></type> <name pos:start="3809:17" pos:end="3809:23">matches</name> <init pos:start="3809:25" pos:end="3809:27">= <expr pos:start="3809:27" pos:end="3809:27"><literal type="number" pos:start="3809:27" pos:end="3809:27">0</literal></expr></init></decl>;</decl_stmt>

            <comment type="block" pos:start="3811:13" pos:end="3811:35">/* See if it matches */</comment>

            <if_stmt pos:start="3813:13" pos:end="3818:13"><if pos:start="3813:13" pos:end="3818:13">if <condition pos:start="3813:16" pos:end="3813:77">(<expr pos:start="3813:17" pos:end="3813:76"><call pos:start="3813:17" pos:end="3813:72"><name pos:start="3813:17" pos:end="3813:35">avformat_open_input</name><argument_list pos:start="3813:36" pos:end="3813:72">(<argument pos:start="3813:37" pos:end="3813:38"><expr pos:start="3813:37" pos:end="3813:38"><operator pos:start="3813:37" pos:end="3813:37">&amp;</operator><name pos:start="3813:38" pos:end="3813:38">s</name></expr></argument>, <argument pos:start="3813:41" pos:end="3813:59"><expr pos:start="3813:41" pos:end="3813:59"><name pos:start="3813:41" pos:end="3813:59"><name pos:start="3813:41" pos:end="3813:44">feed</name><operator pos:start="3813:45" pos:end="3813:46">-&gt;</operator><name pos:start="3813:47" pos:end="3813:59">feed_filename</name></name></expr></argument>, <argument pos:start="3813:62" pos:end="3813:65"><expr pos:start="3813:62" pos:end="3813:65"><name pos:start="3813:62" pos:end="3813:65">NULL</name></expr></argument>, <argument pos:start="3813:68" pos:end="3813:71"><expr pos:start="3813:68" pos:end="3813:71"><name pos:start="3813:68" pos:end="3813:71">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="3813:74" pos:end="3813:74">&lt;</operator> <literal type="number" pos:start="3813:76" pos:end="3813:76">0</literal></expr>)</condition> <block pos:start="3813:79" pos:end="3818:13">{<block_content pos:start="3814:17" pos:end="3817:26">
                <expr_stmt pos:start="3814:17" pos:end="3816:46"><expr pos:start="3814:17" pos:end="3816:45"><call pos:start="3814:17" pos:end="3816:45"><name pos:start="3814:17" pos:end="3814:24">http_log</name><argument_list pos:start="3814:25" pos:end="3816:45">(<argument pos:start="3814:26" pos:end="3815:45"><expr pos:start="3814:26" pos:end="3815:45"><literal type="string" pos:start="3814:26" pos:end="3814:65">"Deleting feed file '%s' as it appears "</literal>
                            <literal type="string" pos:start="3815:29" pos:end="3815:45">"to be corrupt\n"</literal></expr></argument>,
                         <argument pos:start="3816:26" pos:end="3816:44"><expr pos:start="3816:26" pos:end="3816:44"><name pos:start="3816:26" pos:end="3816:44"><name pos:start="3816:26" pos:end="3816:29">feed</name><operator pos:start="3816:30" pos:end="3816:31">-&gt;</operator><name pos:start="3816:32" pos:end="3816:44">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="3817:17" pos:end="3817:26">goto <name pos:start="3817:22" pos:end="3817:25">drop</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="3820:13" pos:end="3820:33">/* set buffer size */</comment>
            <if_stmt pos:start="3821:13" pos:end="3825:13"><if pos:start="3821:13" pos:end="3825:13">if <condition pos:start="3821:16" pos:end="3821:62">(<expr pos:start="3821:17" pos:end="3821:61"><call pos:start="3821:17" pos:end="3821:57"><name pos:start="3821:17" pos:end="3821:33">ffio_set_buf_size</name><argument_list pos:start="3821:34" pos:end="3821:57">(<argument pos:start="3821:35" pos:end="3821:39"><expr pos:start="3821:35" pos:end="3821:39"><name pos:start="3821:35" pos:end="3821:39"><name pos:start="3821:35" pos:end="3821:35">s</name><operator pos:start="3821:36" pos:end="3821:37">-&gt;</operator><name pos:start="3821:38" pos:end="3821:39">pb</name></name></expr></argument>, <argument pos:start="3821:42" pos:end="3821:56"><expr pos:start="3821:42" pos:end="3821:56"><name pos:start="3821:42" pos:end="3821:56">FFM_PACKET_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="3821:59" pos:end="3821:59">&lt;</operator> <literal type="number" pos:start="3821:61" pos:end="3821:61">0</literal></expr>)</condition> <block pos:start="3821:64" pos:end="3825:13">{<block_content pos:start="3822:17" pos:end="3824:26">
                <expr_stmt pos:start="3822:17" pos:end="3822:56"><expr pos:start="3822:17" pos:end="3822:55"><call pos:start="3822:17" pos:end="3822:55"><name pos:start="3822:17" pos:end="3822:24">http_log</name><argument_list pos:start="3822:25" pos:end="3822:55">(<argument pos:start="3822:26" pos:end="3822:54"><expr pos:start="3822:26" pos:end="3822:54"><literal type="string" pos:start="3822:26" pos:end="3822:54">"Failed to set buffer size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3823:17" pos:end="3823:41"><expr pos:start="3823:17" pos:end="3823:40"><call pos:start="3823:17" pos:end="3823:40"><name pos:start="3823:17" pos:end="3823:36">avformat_close_input</name><argument_list pos:start="3823:37" pos:end="3823:40">(<argument pos:start="3823:38" pos:end="3823:39"><expr pos:start="3823:38" pos:end="3823:39"><operator pos:start="3823:38" pos:end="3823:38">&amp;</operator><name pos:start="3823:39" pos:end="3823:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="3824:17" pos:end="3824:26">goto <name pos:start="3824:22" pos:end="3824:25">bail</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="3827:13" pos:end="3827:39">/* Now see if it matches */</comment>
            <if_stmt pos:start="3828:13" pos:end="3833:13"><if pos:start="3828:13" pos:end="3833:13">if <condition pos:start="3828:16" pos:end="3828:50">(<expr pos:start="3828:17" pos:end="3828:49"><name pos:start="3828:17" pos:end="3828:29"><name pos:start="3828:17" pos:end="3828:17">s</name><operator pos:start="3828:18" pos:end="3828:19">-&gt;</operator><name pos:start="3828:20" pos:end="3828:29">nb_streams</name></name> <operator pos:start="3828:31" pos:end="3828:32">!=</operator> <name pos:start="3828:34" pos:end="3828:49"><name pos:start="3828:34" pos:end="3828:37">feed</name><operator pos:start="3828:38" pos:end="3828:39">-&gt;</operator><name pos:start="3828:40" pos:end="3828:49">nb_streams</name></name></expr>)</condition> <block pos:start="3828:52" pos:end="3833:13">{<block_content pos:start="3829:17" pos:end="3832:26">
                <expr_stmt pos:start="3829:17" pos:end="3831:79"><expr pos:start="3829:17" pos:end="3831:78"><call pos:start="3829:17" pos:end="3831:78"><name pos:start="3829:17" pos:end="3829:24">http_log</name><argument_list pos:start="3829:25" pos:end="3831:78">(<argument pos:start="3829:26" pos:end="3830:49"><expr pos:start="3829:26" pos:end="3830:49"><literal type="string" pos:start="3829:26" pos:end="3829:68">"Deleting feed file '%s' as stream counts "</literal>
                            <literal type="string" pos:start="3830:29" pos:end="3830:49">"differ (%d != %d)\n"</literal></expr></argument>,
                         <argument pos:start="3831:26" pos:end="3831:44"><expr pos:start="3831:26" pos:end="3831:44"><name pos:start="3831:26" pos:end="3831:44"><name pos:start="3831:26" pos:end="3831:29">feed</name><operator pos:start="3831:30" pos:end="3831:31">-&gt;</operator><name pos:start="3831:32" pos:end="3831:44">feed_filename</name></name></expr></argument>, <argument pos:start="3831:47" pos:end="3831:59"><expr pos:start="3831:47" pos:end="3831:59"><name pos:start="3831:47" pos:end="3831:59"><name pos:start="3831:47" pos:end="3831:47">s</name><operator pos:start="3831:48" pos:end="3831:49">-&gt;</operator><name pos:start="3831:50" pos:end="3831:59">nb_streams</name></name></expr></argument>, <argument pos:start="3831:62" pos:end="3831:77"><expr pos:start="3831:62" pos:end="3831:77"><name pos:start="3831:62" pos:end="3831:77"><name pos:start="3831:62" pos:end="3831:65">feed</name><operator pos:start="3831:66" pos:end="3831:67">-&gt;</operator><name pos:start="3831:68" pos:end="3831:77">nb_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="3832:17" pos:end="3832:26">goto <name pos:start="3832:22" pos:end="3832:25">drop</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="3835:13" pos:end="3835:24"><expr pos:start="3835:13" pos:end="3835:23"><name pos:start="3835:13" pos:end="3835:19">matches</name> <operator pos:start="3835:21" pos:end="3835:21">=</operator> <literal type="number" pos:start="3835:23" pos:end="3835:23">1</literal></expr>;</expr_stmt>
            <for pos:start="3836:13" pos:end="3853:13">for<control pos:start="3836:16" pos:end="3836:40">(<init pos:start="3836:17" pos:end="3836:20"><expr pos:start="3836:17" pos:end="3836:19"><name pos:start="3836:17" pos:end="3836:17">i</name><operator pos:start="3836:18" pos:end="3836:18">=</operator><literal type="number" pos:start="3836:19" pos:end="3836:19">0</literal></expr>;</init><condition pos:start="3836:21" pos:end="3836:36"><expr pos:start="3836:21" pos:end="3836:35"><name pos:start="3836:21" pos:end="3836:21">i</name><operator pos:start="3836:22" pos:end="3836:22">&lt;</operator><name pos:start="3836:23" pos:end="3836:35"><name pos:start="3836:23" pos:end="3836:23">s</name><operator pos:start="3836:24" pos:end="3836:25">-&gt;</operator><name pos:start="3836:26" pos:end="3836:35">nb_streams</name></name></expr>;</condition><incr pos:start="3836:37" pos:end="3836:39"><expr pos:start="3836:37" pos:end="3836:39"><name pos:start="3836:37" pos:end="3836:37">i</name><operator pos:start="3836:38" pos:end="3836:39">++</operator></expr></incr>)</control> <block pos:start="3836:42" pos:end="3853:13">{<block_content pos:start="3837:17" pos:end="3852:26">
                <decl_stmt pos:start="3837:17" pos:end="3837:29"><decl pos:start="3837:17" pos:end="3837:28"><type pos:start="3837:17" pos:end="3837:26"><name pos:start="3837:17" pos:end="3837:24">AVStream</name> <modifier pos:start="3837:26" pos:end="3837:26">*</modifier></type><name pos:start="3837:27" pos:end="3837:28">ss</name></decl>;</decl_stmt>
                <decl_stmt pos:start="3838:17" pos:end="3838:36"><decl pos:start="3838:17" pos:end="3838:35"><type pos:start="3838:17" pos:end="3838:33"><name pos:start="3838:17" pos:end="3838:31">LayeredAVStream</name> <modifier pos:start="3838:33" pos:end="3838:33">*</modifier></type><name pos:start="3838:34" pos:end="3838:35">sf</name></decl>;</decl_stmt>

                <expr_stmt pos:start="3840:17" pos:end="3840:38"><expr pos:start="3840:17" pos:end="3840:37"><name pos:start="3840:17" pos:end="3840:18">sf</name> <operator pos:start="3840:20" pos:end="3840:20">=</operator> <name pos:start="3840:22" pos:end="3840:37"><name pos:start="3840:22" pos:end="3840:25">feed</name><operator pos:start="3840:26" pos:end="3840:27">-&gt;</operator><name pos:start="3840:28" pos:end="3840:34">streams</name><index pos:start="3840:35" pos:end="3840:37">[<expr pos:start="3840:36" pos:end="3840:36"><name pos:start="3840:36" pos:end="3840:36">i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt pos:start="3841:17" pos:end="3841:35"><expr pos:start="3841:17" pos:end="3841:34"><name pos:start="3841:17" pos:end="3841:18">ss</name> <operator pos:start="3841:20" pos:end="3841:20">=</operator> <name pos:start="3841:22" pos:end="3841:34"><name pos:start="3841:22" pos:end="3841:22">s</name><operator pos:start="3841:23" pos:end="3841:24">-&gt;</operator><name pos:start="3841:25" pos:end="3841:31">streams</name><index pos:start="3841:32" pos:end="3841:34">[<expr pos:start="3841:33" pos:end="3841:33"><name pos:start="3841:33" pos:end="3841:33">i</name></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt pos:start="3843:17" pos:end="3848:17"><if pos:start="3843:17" pos:end="3848:17">if <condition pos:start="3843:20" pos:end="3843:63">(<expr pos:start="3843:21" pos:end="3843:62"><name pos:start="3843:21" pos:end="3843:29"><name pos:start="3843:21" pos:end="3843:22">sf</name><operator pos:start="3843:23" pos:end="3843:24">-&gt;</operator><name pos:start="3843:25" pos:end="3843:29">index</name></name> <operator pos:start="3843:31" pos:end="3843:32">!=</operator> <name pos:start="3843:34" pos:end="3843:42"><name pos:start="3843:34" pos:end="3843:35">ss</name><operator pos:start="3843:36" pos:end="3843:37">-&gt;</operator><name pos:start="3843:38" pos:end="3843:42">index</name></name> <operator pos:start="3843:44" pos:end="3843:45">||</operator> <name pos:start="3843:47" pos:end="3843:52"><name pos:start="3843:47" pos:end="3843:48">sf</name><operator pos:start="3843:49" pos:end="3843:50">-&gt;</operator><name pos:start="3843:51" pos:end="3843:52">id</name></name> <operator pos:start="3843:54" pos:end="3843:55">!=</operator> <name pos:start="3843:57" pos:end="3843:62"><name pos:start="3843:57" pos:end="3843:58">ss</name><operator pos:start="3843:59" pos:end="3843:60">-&gt;</operator><name pos:start="3843:61" pos:end="3843:62">id</name></name></expr>)</condition> <block pos:start="3843:65" pos:end="3848:17">{<block_content pos:start="3844:21" pos:end="3847:26">
                    <expr_stmt pos:start="3844:21" pos:end="3845:53"><expr pos:start="3844:21" pos:end="3845:52"><call pos:start="3844:21" pos:end="3845:52"><name pos:start="3844:21" pos:end="3844:28">http_log</name><argument_list pos:start="3844:29" pos:end="3845:52">(<argument pos:start="3844:30" pos:end="3844:75"><expr pos:start="3844:30" pos:end="3844:75"><literal type="string" pos:start="3844:30" pos:end="3844:75">"Index &amp; Id do not match for stream %d (%s)\n"</literal></expr></argument>,
                             <argument pos:start="3845:30" pos:end="3845:30"><expr pos:start="3845:30" pos:end="3845:30"><name pos:start="3845:30" pos:end="3845:30">i</name></expr></argument>, <argument pos:start="3845:33" pos:end="3845:51"><expr pos:start="3845:33" pos:end="3845:51"><name pos:start="3845:33" pos:end="3845:51"><name pos:start="3845:33" pos:end="3845:36">feed</name><operator pos:start="3845:37" pos:end="3845:38">-&gt;</operator><name pos:start="3845:39" pos:end="3845:51">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="3846:21" pos:end="3846:32"><expr pos:start="3846:21" pos:end="3846:31"><name pos:start="3846:21" pos:end="3846:27">matches</name> <operator pos:start="3846:29" pos:end="3846:29">=</operator> <literal type="number" pos:start="3846:31" pos:end="3846:31">0</literal></expr>;</expr_stmt>
                    <break pos:start="3847:21" pos:end="3847:26">break;</break>
                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="3850:17" pos:end="3850:56"><expr pos:start="3850:17" pos:end="3850:55"><name pos:start="3850:17" pos:end="3850:23">matches</name> <operator pos:start="3850:25" pos:end="3850:25">=</operator> <call pos:start="3850:27" pos:end="3850:55"><name pos:start="3850:27" pos:end="3850:43">check_codec_match</name> <argument_list pos:start="3850:45" pos:end="3850:55">(<argument pos:start="3850:46" pos:end="3850:47"><expr pos:start="3850:46" pos:end="3850:47"><name pos:start="3850:46" pos:end="3850:47">sf</name></expr></argument>, <argument pos:start="3850:50" pos:end="3850:51"><expr pos:start="3850:50" pos:end="3850:51"><name pos:start="3850:50" pos:end="3850:51">ss</name></expr></argument>, <argument pos:start="3850:54" pos:end="3850:54"><expr pos:start="3850:54" pos:end="3850:54"><name pos:start="3850:54" pos:end="3850:54">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="3851:17" pos:end="3852:26"><if pos:start="3851:17" pos:end="3852:26">if <condition pos:start="3851:20" pos:end="3851:29">(<expr pos:start="3851:21" pos:end="3851:28"><operator pos:start="3851:21" pos:end="3851:21">!</operator><name pos:start="3851:22" pos:end="3851:28">matches</name></expr>)</condition><block type="pseudo" pos:start="3852:21" pos:end="3852:26"><block_content pos:start="3852:21" pos:end="3852:26">
                    <break pos:start="3852:21" pos:end="3852:26">break;</break></block_content></block></if></if_stmt>
            </block_content>}</block></for>

<label pos:start="3855:1" pos:end="3855:5"><name pos:start="3855:1" pos:end="3855:4">drop</name>:</label>
            <if_stmt pos:start="3856:13" pos:end="3857:41"><if pos:start="3856:13" pos:end="3857:41">if <condition pos:start="3856:16" pos:end="3856:18">(<expr pos:start="3856:17" pos:end="3856:17"><name pos:start="3856:17" pos:end="3856:17">s</name></expr>)</condition><block type="pseudo" pos:start="3857:17" pos:end="3857:41"><block_content pos:start="3857:17" pos:end="3857:41">
                <expr_stmt pos:start="3857:17" pos:end="3857:41"><expr pos:start="3857:17" pos:end="3857:40"><call pos:start="3857:17" pos:end="3857:40"><name pos:start="3857:17" pos:end="3857:36">avformat_close_input</name><argument_list pos:start="3857:37" pos:end="3857:40">(<argument pos:start="3857:38" pos:end="3857:39"><expr pos:start="3857:38" pos:end="3857:39"><operator pos:start="3857:38" pos:end="3857:38">&amp;</operator><name pos:start="3857:39" pos:end="3857:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="3859:13" pos:end="3866:13"><if pos:start="3859:13" pos:end="3866:13">if <condition pos:start="3859:16" pos:end="3859:25">(<expr pos:start="3859:17" pos:end="3859:24"><operator pos:start="3859:17" pos:end="3859:17">!</operator><name pos:start="3859:18" pos:end="3859:24">matches</name></expr>)</condition> <block pos:start="3859:27" pos:end="3866:13">{<block_content pos:start="3860:17" pos:end="3865:44">
                <if_stmt pos:start="3860:17" pos:end="3864:17"><if pos:start="3860:17" pos:end="3864:17">if <condition pos:start="3860:20" pos:end="3860:35">(<expr pos:start="3860:21" pos:end="3860:34"><name pos:start="3860:21" pos:end="3860:34"><name pos:start="3860:21" pos:end="3860:24">feed</name><operator pos:start="3860:25" pos:end="3860:26">-&gt;</operator><name pos:start="3860:27" pos:end="3860:34">readonly</name></name></expr>)</condition> <block pos:start="3860:37" pos:end="3864:17">{<block_content pos:start="3861:21" pos:end="3863:30">
                    <expr_stmt pos:start="3861:21" pos:end="3862:50"><expr pos:start="3861:21" pos:end="3862:49"><call pos:start="3861:21" pos:end="3862:49"><name pos:start="3861:21" pos:end="3861:28">http_log</name><argument_list pos:start="3861:29" pos:end="3862:49">(<argument pos:start="3861:30" pos:end="3861:74"><expr pos:start="3861:30" pos:end="3861:74"><literal type="string" pos:start="3861:30" pos:end="3861:74">"Unable to delete read-only feed file '%s'\n"</literal></expr></argument>,
                             <argument pos:start="3862:30" pos:end="3862:48"><expr pos:start="3862:30" pos:end="3862:48"><name pos:start="3862:30" pos:end="3862:48"><name pos:start="3862:30" pos:end="3862:33">feed</name><operator pos:start="3862:34" pos:end="3862:35">-&gt;</operator><name pos:start="3862:36" pos:end="3862:48">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <goto pos:start="3863:21" pos:end="3863:30">goto <name pos:start="3863:26" pos:end="3863:29">bail</name>;</goto>
                </block_content>}</block></if></if_stmt>
                <expr_stmt pos:start="3865:17" pos:end="3865:44"><expr pos:start="3865:17" pos:end="3865:43"><call pos:start="3865:17" pos:end="3865:43"><name pos:start="3865:17" pos:end="3865:22">unlink</name><argument_list pos:start="3865:23" pos:end="3865:43">(<argument pos:start="3865:24" pos:end="3865:42"><expr pos:start="3865:24" pos:end="3865:42"><name pos:start="3865:24" pos:end="3865:42"><name pos:start="3865:24" pos:end="3865:27">feed</name><operator pos:start="3865:28" pos:end="3865:29">-&gt;</operator><name pos:start="3865:30" pos:end="3865:42">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="3869:9" pos:end="3915:9"><if pos:start="3869:9" pos:end="3915:9">if <condition pos:start="3869:12" pos:end="3869:66">(<expr pos:start="3869:13" pos:end="3869:65"><call pos:start="3869:13" pos:end="3869:60"><name pos:start="3869:13" pos:end="3869:22">avio_check</name><argument_list pos:start="3869:23" pos:end="3869:60">(<argument pos:start="3869:24" pos:end="3869:42"><expr pos:start="3869:24" pos:end="3869:42"><name pos:start="3869:24" pos:end="3869:42"><name pos:start="3869:24" pos:end="3869:27">feed</name><operator pos:start="3869:28" pos:end="3869:29">-&gt;</operator><name pos:start="3869:30" pos:end="3869:42">feed_filename</name></name></expr></argument>, <argument pos:start="3869:45" pos:end="3869:59"><expr pos:start="3869:45" pos:end="3869:59"><name pos:start="3869:45" pos:end="3869:59">AVIO_FLAG_WRITE</name></expr></argument>)</argument_list></call> <operator pos:start="3869:62" pos:end="3869:63">&lt;=</operator> <literal type="number" pos:start="3869:65" pos:end="3869:65">0</literal></expr>)</condition> <block pos:start="3869:68" pos:end="3915:9">{<block_content pos:start="3870:13" pos:end="3914:37">
            <decl_stmt pos:start="3870:13" pos:end="3870:58"><decl pos:start="3870:13" pos:end="3870:57"><type pos:start="3870:13" pos:end="3870:29"><name pos:start="3870:13" pos:end="3870:27">AVFormatContext</name> <modifier pos:start="3870:29" pos:end="3870:29">*</modifier></type><name pos:start="3870:30" pos:end="3870:30">s</name> <init pos:start="3870:32" pos:end="3870:57">= <expr pos:start="3870:34" pos:end="3870:57"><call pos:start="3870:34" pos:end="3870:57"><name pos:start="3870:34" pos:end="3870:55">avformat_alloc_context</name><argument_list pos:start="3870:56" pos:end="3870:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="3872:13" pos:end="3875:13"><if pos:start="3872:13" pos:end="3875:13">if <condition pos:start="3872:16" pos:end="3872:19">(<expr pos:start="3872:17" pos:end="3872:18"><operator pos:start="3872:17" pos:end="3872:17">!</operator><name pos:start="3872:18" pos:end="3872:18">s</name></expr>)</condition> <block pos:start="3872:21" pos:end="3875:13">{<block_content pos:start="3873:17" pos:end="3874:26">
                <expr_stmt pos:start="3873:17" pos:end="3873:57"><expr pos:start="3873:17" pos:end="3873:56"><call pos:start="3873:17" pos:end="3873:56"><name pos:start="3873:17" pos:end="3873:24">http_log</name><argument_list pos:start="3873:25" pos:end="3873:56">(<argument pos:start="3873:26" pos:end="3873:55"><expr pos:start="3873:26" pos:end="3873:55"><literal type="string" pos:start="3873:26" pos:end="3873:55">"Failed to allocate context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="3874:17" pos:end="3874:26">goto <name pos:start="3874:22" pos:end="3874:25">bail</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="3877:13" pos:end="3883:13"><if pos:start="3877:13" pos:end="3883:13">if <condition pos:start="3877:16" pos:end="3877:31">(<expr pos:start="3877:17" pos:end="3877:30"><name pos:start="3877:17" pos:end="3877:30"><name pos:start="3877:17" pos:end="3877:20">feed</name><operator pos:start="3877:21" pos:end="3877:22">-&gt;</operator><name pos:start="3877:23" pos:end="3877:30">readonly</name></name></expr>)</condition> <block pos:start="3877:33" pos:end="3883:13">{<block_content pos:start="3878:17" pos:end="3882:26">
                <expr_stmt pos:start="3878:17" pos:end="3880:46"><expr pos:start="3878:17" pos:end="3880:45"><call pos:start="3878:17" pos:end="3880:45"><name pos:start="3878:17" pos:end="3878:24">http_log</name><argument_list pos:start="3878:25" pos:end="3880:45">(<argument pos:start="3878:26" pos:end="3879:47"><expr pos:start="3878:26" pos:end="3879:47"><literal type="string" pos:start="3878:26" pos:end="3878:68">"Unable to create feed file '%s' as it is "</literal>
                            <literal type="string" pos:start="3879:29" pos:end="3879:47">"marked readonly\n"</literal></expr></argument>,
                         <argument pos:start="3880:26" pos:end="3880:44"><expr pos:start="3880:26" pos:end="3880:44"><name pos:start="3880:26" pos:end="3880:44"><name pos:start="3880:26" pos:end="3880:29">feed</name><operator pos:start="3880:30" pos:end="3880:31">-&gt;</operator><name pos:start="3880:32" pos:end="3880:44">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3881:17" pos:end="3881:41"><expr pos:start="3881:17" pos:end="3881:40"><call pos:start="3881:17" pos:end="3881:40"><name pos:start="3881:17" pos:end="3881:37">avformat_free_context</name><argument_list pos:start="3881:38" pos:end="3881:40">(<argument pos:start="3881:39" pos:end="3881:39"><expr pos:start="3881:39" pos:end="3881:39"><name pos:start="3881:39" pos:end="3881:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="3882:17" pos:end="3882:26">goto <name pos:start="3882:22" pos:end="3882:25">bail</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="3885:13" pos:end="3885:55">/* only write the header of the ffm file */</comment>
            <if_stmt pos:start="3886:13" pos:end="3891:13"><if pos:start="3886:13" pos:end="3891:13">if <condition pos:start="3886:16" pos:end="3886:76">(<expr pos:start="3886:17" pos:end="3886:75"><call pos:start="3886:17" pos:end="3886:71"><name pos:start="3886:17" pos:end="3886:25">avio_open</name><argument_list pos:start="3886:26" pos:end="3886:71">(<argument pos:start="3886:27" pos:end="3886:32"><expr pos:start="3886:27" pos:end="3886:32"><operator pos:start="3886:27" pos:end="3886:27">&amp;</operator><name pos:start="3886:28" pos:end="3886:32"><name pos:start="3886:28" pos:end="3886:28">s</name><operator pos:start="3886:29" pos:end="3886:30">-&gt;</operator><name pos:start="3886:31" pos:end="3886:32">pb</name></name></expr></argument>, <argument pos:start="3886:35" pos:end="3886:53"><expr pos:start="3886:35" pos:end="3886:53"><name pos:start="3886:35" pos:end="3886:53"><name pos:start="3886:35" pos:end="3886:38">feed</name><operator pos:start="3886:39" pos:end="3886:40">-&gt;</operator><name pos:start="3886:41" pos:end="3886:53">feed_filename</name></name></expr></argument>, <argument pos:start="3886:56" pos:end="3886:70"><expr pos:start="3886:56" pos:end="3886:70"><name pos:start="3886:56" pos:end="3886:70">AVIO_FLAG_WRITE</name></expr></argument>)</argument_list></call> <operator pos:start="3886:73" pos:end="3886:73">&lt;</operator> <literal type="number" pos:start="3886:75" pos:end="3886:75">0</literal></expr>)</condition> <block pos:start="3886:78" pos:end="3891:13">{<block_content pos:start="3887:17" pos:end="3890:26">
                <expr_stmt pos:start="3887:17" pos:end="3888:46"><expr pos:start="3887:17" pos:end="3888:45"><call pos:start="3887:17" pos:end="3888:45"><name pos:start="3887:17" pos:end="3887:24">http_log</name><argument_list pos:start="3887:25" pos:end="3888:45">(<argument pos:start="3887:26" pos:end="3887:65"><expr pos:start="3887:26" pos:end="3887:65"><literal type="string" pos:start="3887:26" pos:end="3887:65">"Could not open output feed file '%s'\n"</literal></expr></argument>,
                         <argument pos:start="3888:26" pos:end="3888:44"><expr pos:start="3888:26" pos:end="3888:44"><name pos:start="3888:26" pos:end="3888:44"><name pos:start="3888:26" pos:end="3888:29">feed</name><operator pos:start="3888:30" pos:end="3888:31">-&gt;</operator><name pos:start="3888:32" pos:end="3888:44">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3889:17" pos:end="3889:41"><expr pos:start="3889:17" pos:end="3889:40"><call pos:start="3889:17" pos:end="3889:40"><name pos:start="3889:17" pos:end="3889:37">avformat_free_context</name><argument_list pos:start="3889:38" pos:end="3889:40">(<argument pos:start="3889:39" pos:end="3889:39"><expr pos:start="3889:39" pos:end="3889:39"><name pos:start="3889:39" pos:end="3889:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="3890:17" pos:end="3890:26">goto <name pos:start="3890:22" pos:end="3890:25">bail</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="3892:13" pos:end="3892:35"><expr pos:start="3892:13" pos:end="3892:34"><name pos:start="3892:13" pos:end="3892:22"><name pos:start="3892:13" pos:end="3892:13">s</name><operator pos:start="3892:14" pos:end="3892:15">-&gt;</operator><name pos:start="3892:16" pos:end="3892:22">oformat</name></name> <operator pos:start="3892:24" pos:end="3892:24">=</operator> <name pos:start="3892:26" pos:end="3892:34"><name pos:start="3892:26" pos:end="3892:29">feed</name><operator pos:start="3892:30" pos:end="3892:31">-&gt;</operator><name pos:start="3892:32" pos:end="3892:34">fmt</name></name></expr>;</expr_stmt>
            <for pos:start="3893:13" pos:end="3900:13">for <control pos:start="3893:17" pos:end="3893:48">(<init pos:start="3893:18" pos:end="3893:23"><expr pos:start="3893:18" pos:end="3893:22"><name pos:start="3893:18" pos:end="3893:18">i</name> <operator pos:start="3893:20" pos:end="3893:20">=</operator> <literal type="number" pos:start="3893:22" pos:end="3893:22">0</literal></expr>;</init> <condition pos:start="3893:25" pos:end="3893:43"><expr pos:start="3893:25" pos:end="3893:42"><name pos:start="3893:25" pos:end="3893:25">i</name><operator pos:start="3893:26" pos:end="3893:26">&lt;</operator><name pos:start="3893:27" pos:end="3893:42"><name pos:start="3893:27" pos:end="3893:30">feed</name><operator pos:start="3893:31" pos:end="3893:32">-&gt;</operator><name pos:start="3893:33" pos:end="3893:42">nb_streams</name></name></expr>;</condition> <incr pos:start="3893:45" pos:end="3893:47"><expr pos:start="3893:45" pos:end="3893:47"><name pos:start="3893:45" pos:end="3893:45">i</name><operator pos:start="3893:46" pos:end="3893:47">++</operator></expr></incr>)</control> <block pos:start="3893:50" pos:end="3900:13">{<block_content pos:start="3894:17" pos:end="3899:53">
                <decl_stmt pos:start="3894:17" pos:end="3894:60"><decl pos:start="3894:17" pos:end="3894:59"><type pos:start="3894:17" pos:end="3894:26"><name pos:start="3894:17" pos:end="3894:24">AVStream</name> <modifier pos:start="3894:26" pos:end="3894:26">*</modifier></type><name pos:start="3894:27" pos:end="3894:28">st</name> <init pos:start="3894:30" pos:end="3894:59">= <expr pos:start="3894:32" pos:end="3894:59"><call pos:start="3894:32" pos:end="3894:59"><name pos:start="3894:32" pos:end="3894:50">avformat_new_stream</name><argument_list pos:start="3894:51" pos:end="3894:59">(<argument pos:start="3894:52" pos:end="3894:52"><expr pos:start="3894:52" pos:end="3894:52"><name pos:start="3894:52" pos:end="3894:52">s</name></expr></argument>, <argument pos:start="3894:55" pos:end="3894:58"><expr pos:start="3894:55" pos:end="3894:58"><name pos:start="3894:55" pos:end="3894:58">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="3894:62" pos:end="3894:79">// FIXME free this</comment>
                <if_stmt pos:start="3895:17" pos:end="3898:17"><if pos:start="3895:17" pos:end="3898:17">if <condition pos:start="3895:20" pos:end="3895:24">(<expr pos:start="3895:21" pos:end="3895:23"><operator pos:start="3895:21" pos:end="3895:21">!</operator><name pos:start="3895:22" pos:end="3895:23">st</name></expr>)</condition> <block pos:start="3895:26" pos:end="3898:17">{<block_content pos:start="3896:21" pos:end="3897:30">
                    <expr_stmt pos:start="3896:21" pos:end="3896:60"><expr pos:start="3896:21" pos:end="3896:59"><call pos:start="3896:21" pos:end="3896:59"><name pos:start="3896:21" pos:end="3896:28">http_log</name><argument_list pos:start="3896:29" pos:end="3896:59">(<argument pos:start="3896:30" pos:end="3896:58"><expr pos:start="3896:30" pos:end="3896:58"><literal type="string" pos:start="3896:30" pos:end="3896:58">"Failed to allocate stream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <goto pos:start="3897:21" pos:end="3897:30">goto <name pos:start="3897:26" pos:end="3897:29">bail</name>;</goto>
                </block_content>}</block></if></if_stmt>
                <expr_stmt pos:start="3899:17" pos:end="3899:53"><expr pos:start="3899:17" pos:end="3899:52"><call pos:start="3899:17" pos:end="3899:52"><name pos:start="3899:17" pos:end="3899:30">unlayer_stream</name><argument_list pos:start="3899:31" pos:end="3899:52">(<argument pos:start="3899:32" pos:end="3899:33"><expr pos:start="3899:32" pos:end="3899:33"><name pos:start="3899:32" pos:end="3899:33">st</name></expr></argument>, <argument pos:start="3899:36" pos:end="3899:51"><expr pos:start="3899:36" pos:end="3899:51"><name pos:start="3899:36" pos:end="3899:51"><name pos:start="3899:36" pos:end="3899:39">feed</name><operator pos:start="3899:40" pos:end="3899:41">-&gt;</operator><name pos:start="3899:42" pos:end="3899:48">streams</name><index pos:start="3899:49" pos:end="3899:51">[<expr pos:start="3899:50" pos:end="3899:50"><name pos:start="3899:50" pos:end="3899:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <if_stmt pos:start="3901:13" pos:end="3908:13"><if pos:start="3901:13" pos:end="3908:13">if <condition pos:start="3901:16" pos:end="3901:51">(<expr pos:start="3901:17" pos:end="3901:50"><call pos:start="3901:17" pos:end="3901:46"><name pos:start="3901:17" pos:end="3901:37">avformat_write_header</name><argument_list pos:start="3901:38" pos:end="3901:46">(<argument pos:start="3901:39" pos:end="3901:39"><expr pos:start="3901:39" pos:end="3901:39"><name pos:start="3901:39" pos:end="3901:39">s</name></expr></argument>, <argument pos:start="3901:42" pos:end="3901:45"><expr pos:start="3901:42" pos:end="3901:45"><name pos:start="3901:42" pos:end="3901:45">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="3901:48" pos:end="3901:48">&lt;</operator> <literal type="number" pos:start="3901:50" pos:end="3901:50">0</literal></expr>)</condition> <block pos:start="3901:53" pos:end="3908:13">{<block_content pos:start="3902:17" pos:end="3907:26">
                <expr_stmt pos:start="3902:17" pos:end="3902:80"><expr pos:start="3902:17" pos:end="3902:79"><call pos:start="3902:17" pos:end="3902:79"><name pos:start="3902:17" pos:end="3902:24">http_log</name><argument_list pos:start="3902:25" pos:end="3902:79">(<argument pos:start="3902:26" pos:end="3902:78"><expr pos:start="3902:26" pos:end="3902:78"><literal type="string" pos:start="3902:26" pos:end="3902:78">"Container doesn't support the required parameters\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3903:17" pos:end="3903:36"><expr pos:start="3903:17" pos:end="3903:35"><call pos:start="3903:17" pos:end="3903:35"><name pos:start="3903:17" pos:end="3903:27">avio_closep</name><argument_list pos:start="3903:28" pos:end="3903:35">(<argument pos:start="3903:29" pos:end="3903:34"><expr pos:start="3903:29" pos:end="3903:34"><operator pos:start="3903:29" pos:end="3903:29">&amp;</operator><name pos:start="3903:30" pos:end="3903:34"><name pos:start="3903:30" pos:end="3903:30">s</name><operator pos:start="3903:31" pos:end="3903:32">-&gt;</operator><name pos:start="3903:33" pos:end="3903:34">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="3904:17" pos:end="3904:34"><expr pos:start="3904:17" pos:end="3904:33"><name pos:start="3904:17" pos:end="3904:26"><name pos:start="3904:17" pos:end="3904:17">s</name><operator pos:start="3904:18" pos:end="3904:19">-&gt;</operator><name pos:start="3904:20" pos:end="3904:26">streams</name></name> <operator pos:start="3904:28" pos:end="3904:28">=</operator> <name pos:start="3904:30" pos:end="3904:33">NULL</name></expr>;</expr_stmt>
                <expr_stmt pos:start="3905:17" pos:end="3905:34"><expr pos:start="3905:17" pos:end="3905:33"><name pos:start="3905:17" pos:end="3905:29"><name pos:start="3905:17" pos:end="3905:17">s</name><operator pos:start="3905:18" pos:end="3905:19">-&gt;</operator><name pos:start="3905:20" pos:end="3905:29">nb_streams</name></name> <operator pos:start="3905:31" pos:end="3905:31">=</operator> <literal type="number" pos:start="3905:33" pos:end="3905:33">0</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="3906:17" pos:end="3906:41"><expr pos:start="3906:17" pos:end="3906:40"><call pos:start="3906:17" pos:end="3906:40"><name pos:start="3906:17" pos:end="3906:37">avformat_free_context</name><argument_list pos:start="3906:38" pos:end="3906:40">(<argument pos:start="3906:39" pos:end="3906:39"><expr pos:start="3906:39" pos:end="3906:39"><name pos:start="3906:39" pos:end="3906:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="3907:17" pos:end="3907:26">goto <name pos:start="3907:22" pos:end="3907:25">bail</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <comment type="block" pos:start="3909:13" pos:end="3909:38">/* XXX: need better API */</comment>
            <expr_stmt pos:start="3910:13" pos:end="3910:36"><expr pos:start="3910:13" pos:end="3910:35"><call pos:start="3910:13" pos:end="3910:35"><name pos:start="3910:13" pos:end="3910:20">av_freep</name><argument_list pos:start="3910:21" pos:end="3910:35">(<argument pos:start="3910:22" pos:end="3910:34"><expr pos:start="3910:22" pos:end="3910:34"><operator pos:start="3910:22" pos:end="3910:22">&amp;</operator><name pos:start="3910:23" pos:end="3910:34"><name pos:start="3910:23" pos:end="3910:23">s</name><operator pos:start="3910:24" pos:end="3910:25">-&gt;</operator><name pos:start="3910:26" pos:end="3910:34">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3911:13" pos:end="3911:32"><expr pos:start="3911:13" pos:end="3911:31"><call pos:start="3911:13" pos:end="3911:31"><name pos:start="3911:13" pos:end="3911:23">avio_closep</name><argument_list pos:start="3911:24" pos:end="3911:31">(<argument pos:start="3911:25" pos:end="3911:30"><expr pos:start="3911:25" pos:end="3911:30"><operator pos:start="3911:25" pos:end="3911:25">&amp;</operator><name pos:start="3911:26" pos:end="3911:30"><name pos:start="3911:26" pos:end="3911:26">s</name><operator pos:start="3911:27" pos:end="3911:28">-&gt;</operator><name pos:start="3911:29" pos:end="3911:30">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="3912:13" pos:end="3912:30"><expr pos:start="3912:13" pos:end="3912:29"><name pos:start="3912:13" pos:end="3912:22"><name pos:start="3912:13" pos:end="3912:13">s</name><operator pos:start="3912:14" pos:end="3912:15">-&gt;</operator><name pos:start="3912:16" pos:end="3912:22">streams</name></name> <operator pos:start="3912:24" pos:end="3912:24">=</operator> <name pos:start="3912:26" pos:end="3912:29">NULL</name></expr>;</expr_stmt>
            <expr_stmt pos:start="3913:13" pos:end="3913:30"><expr pos:start="3913:13" pos:end="3913:29"><name pos:start="3913:13" pos:end="3913:25"><name pos:start="3913:13" pos:end="3913:13">s</name><operator pos:start="3913:14" pos:end="3913:15">-&gt;</operator><name pos:start="3913:16" pos:end="3913:25">nb_streams</name></name> <operator pos:start="3913:27" pos:end="3913:27">=</operator> <literal type="number" pos:start="3913:29" pos:end="3913:29">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="3914:13" pos:end="3914:37"><expr pos:start="3914:13" pos:end="3914:36"><call pos:start="3914:13" pos:end="3914:36"><name pos:start="3914:13" pos:end="3914:33">avformat_free_context</name><argument_list pos:start="3914:34" pos:end="3914:36">(<argument pos:start="3914:35" pos:end="3914:35"><expr pos:start="3914:35" pos:end="3914:35"><name pos:start="3914:35" pos:end="3914:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="3917:9" pos:end="3917:43">/* get feed size and write index */</comment>
        <expr_stmt pos:start="3918:9" pos:end="3918:49"><expr pos:start="3918:9" pos:end="3918:48"><name pos:start="3918:9" pos:end="3918:10">fd</name> <operator pos:start="3918:12" pos:end="3918:12">=</operator> <call pos:start="3918:14" pos:end="3918:48"><name pos:start="3918:14" pos:end="3918:17">open</name><argument_list pos:start="3918:18" pos:end="3918:48">(<argument pos:start="3918:19" pos:end="3918:37"><expr pos:start="3918:19" pos:end="3918:37"><name pos:start="3918:19" pos:end="3918:37"><name pos:start="3918:19" pos:end="3918:22">feed</name><operator pos:start="3918:23" pos:end="3918:24">-&gt;</operator><name pos:start="3918:25" pos:end="3918:37">feed_filename</name></name></expr></argument>, <argument pos:start="3918:40" pos:end="3918:47"><expr pos:start="3918:40" pos:end="3918:47"><name pos:start="3918:40" pos:end="3918:47">O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="3919:9" pos:end="3923:9"><if pos:start="3919:9" pos:end="3923:9">if <condition pos:start="3919:12" pos:end="3919:19">(<expr pos:start="3919:13" pos:end="3919:18"><name pos:start="3919:13" pos:end="3919:14">fd</name> <operator pos:start="3919:16" pos:end="3919:16">&lt;</operator> <literal type="number" pos:start="3919:18" pos:end="3919:18">0</literal></expr>)</condition> <block pos:start="3919:21" pos:end="3923:9">{<block_content pos:start="3920:13" pos:end="3922:22">
            <expr_stmt pos:start="3920:13" pos:end="3921:41"><expr pos:start="3920:13" pos:end="3921:40"><call pos:start="3920:13" pos:end="3921:40"><name pos:start="3920:13" pos:end="3920:20">http_log</name><argument_list pos:start="3920:21" pos:end="3921:40">(<argument pos:start="3920:22" pos:end="3920:61"><expr pos:start="3920:22" pos:end="3920:61"><literal type="string" pos:start="3920:22" pos:end="3920:61">"Could not open output feed file '%s'\n"</literal></expr></argument>,
                    <argument pos:start="3921:21" pos:end="3921:39"><expr pos:start="3921:21" pos:end="3921:39"><name pos:start="3921:21" pos:end="3921:39"><name pos:start="3921:21" pos:end="3921:24">feed</name><operator pos:start="3921:25" pos:end="3921:26">-&gt;</operator><name pos:start="3921:27" pos:end="3921:39">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto pos:start="3922:13" pos:end="3922:22">goto <name pos:start="3922:18" pos:end="3922:21">bail</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="3925:9" pos:end="3926:56"><expr pos:start="3925:9" pos:end="3926:55"><name pos:start="3925:9" pos:end="3925:30"><name pos:start="3925:9" pos:end="3925:12">feed</name><operator pos:start="3925:13" pos:end="3925:14">-&gt;</operator><name pos:start="3925:15" pos:end="3925:30">feed_write_index</name></name> <operator pos:start="3925:32" pos:end="3925:32">=</operator> <call pos:start="3925:34" pos:end="3926:55"><name pos:start="3925:34" pos:end="3925:38">FFMAX</name><argument_list pos:start="3925:39" pos:end="3926:55">(<argument pos:start="3925:40" pos:end="3925:63"><expr pos:start="3925:40" pos:end="3925:63"><call pos:start="3925:40" pos:end="3925:63"><name pos:start="3925:40" pos:end="3925:59">ffm_read_write_index</name><argument_list pos:start="3925:60" pos:end="3925:63">(<argument pos:start="3925:61" pos:end="3925:62"><expr pos:start="3925:61" pos:end="3925:62"><name pos:start="3925:61" pos:end="3925:62">fd</name></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument pos:start="3926:40" pos:end="3926:54"><expr pos:start="3926:40" pos:end="3926:54"><name pos:start="3926:40" pos:end="3926:54">FFM_PACKET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="3927:9" pos:end="3927:49"><expr pos:start="3927:9" pos:end="3927:48"><name pos:start="3927:9" pos:end="3927:23"><name pos:start="3927:9" pos:end="3927:12">feed</name><operator pos:start="3927:13" pos:end="3927:14">-&gt;</operator><name pos:start="3927:15" pos:end="3927:23">feed_size</name></name> <operator pos:start="3927:25" pos:end="3927:25">=</operator> <call pos:start="3927:27" pos:end="3927:48"><name pos:start="3927:27" pos:end="3927:31">lseek</name><argument_list pos:start="3927:32" pos:end="3927:48">(<argument pos:start="3927:33" pos:end="3927:34"><expr pos:start="3927:33" pos:end="3927:34"><name pos:start="3927:33" pos:end="3927:34">fd</name></expr></argument>, <argument pos:start="3927:37" pos:end="3927:37"><expr pos:start="3927:37" pos:end="3927:37"><literal type="number" pos:start="3927:37" pos:end="3927:37">0</literal></expr></argument>, <argument pos:start="3927:40" pos:end="3927:47"><expr pos:start="3927:40" pos:end="3927:47"><name pos:start="3927:40" pos:end="3927:47">SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="3928:9" pos:end="3928:63">/* ensure that we do not wrap before the end of file */</comment>
        <if_stmt pos:start="3929:9" pos:end="3931:51"><if pos:start="3929:9" pos:end="3931:51">if <condition pos:start="3929:12" pos:end="3929:33">(<expr pos:start="3929:13" pos:end="3929:31"><name pos:start="3929:13" pos:end="3929:31"><name pos:start="3929:13" pos:end="3929:16">feed</name><operator pos:start="3929:17" pos:end="3929:18">-&gt;</operator><name pos:start="3929:19" pos:end="3929:31">feed_max_size</name></name></expr> )</condition><block pos:start="3929:34" pos:end="3931:51">{<block_content pos:start="3930:1" pos:end="3931:50">
<if_stmt pos:start="3930:1" pos:end="3931:50"><if pos:start="3930:1" pos:end="3931:50">if<condition pos:start="3930:3" pos:end="3930:42">( <expr pos:start="3930:5" pos:end="3930:41"><name pos:start="3930:5" pos:end="3930:23"><name pos:start="3930:5" pos:end="3930:8">feed</name><operator pos:start="3930:9" pos:end="3930:10">-&gt;</operator><name pos:start="3930:11" pos:end="3930:23">feed_max_size</name></name> <operator pos:start="3930:25" pos:end="3930:25">&lt;</operator> <name pos:start="3930:27" pos:end="3930:41"><name pos:start="3930:27" pos:end="3930:30">feed</name><operator pos:start="3930:31" pos:end="3930:32">-&gt;</operator><name pos:start="3930:33" pos:end="3930:41">feed_size</name></name></expr>)</condition><block type="pseudo" pos:start="3931:13" pos:end="3931:50"><block_content pos:start="3931:13" pos:end="3931:50">
            <expr_stmt pos:start="3931:13" pos:end="3931:50"><expr pos:start="3931:13" pos:end="3931:49"><name pos:start="3931:13" pos:end="3931:31"><name pos:start="3931:13" pos:end="3931:16">feed</name><operator pos:start="3931:17" pos:end="3931:18">-&gt;</operator><name pos:start="3931:19" pos:end="3931:31">feed_max_size</name></name> <operator pos:start="3931:33" pos:end="3931:33">=</operator> <name pos:start="3931:35" pos:end="3931:49"><name pos:start="3931:35" pos:end="3931:38">feed</name><operator pos:start="3931:39" pos:end="3931:40">-&gt;</operator><name pos:start="3931:41" pos:end="3931:49">feed_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="3933:9" pos:end="3933:18"><expr pos:start="3933:9" pos:end="3933:17"><call pos:start="3933:9" pos:end="3933:17"><name pos:start="3933:9" pos:end="3933:13">close</name><argument_list pos:start="3933:14" pos:end="3933:17">(<argument pos:start="3933:15" pos:end="3933:16"><expr pos:start="3933:15" pos:end="3933:16"><name pos:start="3933:15" pos:end="3933:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return pos:start="3935:5" pos:end="3935:13">return <expr pos:start="3935:12" pos:end="3935:12"><literal type="number" pos:start="3935:12" pos:end="3935:12">0</literal></expr>;</return>

<label pos:start="3937:1" pos:end="3937:5"><name pos:start="3937:1" pos:end="3937:4">bail</name>:</label>
    <return pos:start="3938:5" pos:end="3938:14">return <expr pos:start="3938:12" pos:end="3938:13"><operator pos:start="3938:12" pos:end="3938:12">-</operator><literal type="number" pos:start="3938:13" pos:end="3938:13">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="3941:1" pos:end="3941:47">/* compute the bandwidth used by each stream */</comment>
<function pos:start="3942:1" pos:end="3963:1"><type pos:start="3942:1" pos:end="3942:11"><specifier pos:start="3942:1" pos:end="3942:6">static</specifier> <name pos:start="3942:8" pos:end="3942:11">void</name></type> <name pos:start="3942:13" pos:end="3942:29">compute_bandwidth</name><parameter_list pos:start="3942:30" pos:end="3942:35">(<parameter pos:start="3942:31" pos:end="3942:34"><decl pos:start="3942:31" pos:end="3942:34"><type pos:start="3942:31" pos:end="3942:34"><name pos:start="3942:31" pos:end="3942:34">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="3943:1" pos:end="3963:1">{<block_content pos:start="3944:5" pos:end="3962:5">
    <decl_stmt pos:start="3944:5" pos:end="3944:23"><decl pos:start="3944:5" pos:end="3944:22"><type pos:start="3944:5" pos:end="3944:12"><name pos:start="3944:5" pos:end="3944:12">unsigned</name></type> <name pos:start="3944:14" pos:end="3944:22">bandwidth</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3945:5" pos:end="3945:10"><decl pos:start="3945:5" pos:end="3945:9"><type pos:start="3945:5" pos:end="3945:7"><name pos:start="3945:5" pos:end="3945:7">int</name></type> <name pos:start="3945:9" pos:end="3945:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3946:5" pos:end="3946:27"><decl pos:start="3946:5" pos:end="3946:26"><type pos:start="3946:5" pos:end="3946:20"><name pos:start="3946:5" pos:end="3946:18">FFServerStream</name> <modifier pos:start="3946:20" pos:end="3946:20">*</modifier></type><name pos:start="3946:21" pos:end="3946:26">stream</name></decl>;</decl_stmt>

    <for pos:start="3948:5" pos:end="3962:5">for<control pos:start="3948:8" pos:end="3948:68">(<init pos:start="3948:9" pos:end="3948:37"><expr pos:start="3948:9" pos:end="3948:36"><name pos:start="3948:9" pos:end="3948:14">stream</name> <operator pos:start="3948:16" pos:end="3948:16">=</operator> <name pos:start="3948:18" pos:end="3948:36"><name pos:start="3948:18" pos:end="3948:23">config</name><operator pos:start="3948:24" pos:end="3948:24">.</operator><name pos:start="3948:25" pos:end="3948:36">first_stream</name></name></expr>;</init> <condition pos:start="3948:39" pos:end="3948:45"><expr pos:start="3948:39" pos:end="3948:44"><name pos:start="3948:39" pos:end="3948:44">stream</name></expr>;</condition> <incr pos:start="3948:47" pos:end="3948:67"><expr pos:start="3948:47" pos:end="3948:67"><name pos:start="3948:47" pos:end="3948:52">stream</name> <operator pos:start="3948:54" pos:end="3948:54">=</operator> <name pos:start="3948:56" pos:end="3948:67"><name pos:start="3948:56" pos:end="3948:61">stream</name><operator pos:start="3948:62" pos:end="3948:63">-&gt;</operator><name pos:start="3948:64" pos:end="3948:67">next</name></name></expr></incr>)</control> <block pos:start="3948:70" pos:end="3962:5">{<block_content pos:start="3949:9" pos:end="3961:53">
        <expr_stmt pos:start="3949:9" pos:end="3949:22"><expr pos:start="3949:9" pos:end="3949:21"><name pos:start="3949:9" pos:end="3949:17">bandwidth</name> <operator pos:start="3949:19" pos:end="3949:19">=</operator> <literal type="number" pos:start="3949:21" pos:end="3949:21">0</literal></expr>;</expr_stmt>
        <for pos:start="3950:9" pos:end="3960:9">for<control pos:start="3950:12" pos:end="3950:41">(<init pos:start="3950:13" pos:end="3950:16"><expr pos:start="3950:13" pos:end="3950:15"><name pos:start="3950:13" pos:end="3950:13">i</name><operator pos:start="3950:14" pos:end="3950:14">=</operator><literal type="number" pos:start="3950:15" pos:end="3950:15">0</literal></expr>;</init><condition pos:start="3950:17" pos:end="3950:37"><expr pos:start="3950:17" pos:end="3950:36"><name pos:start="3950:17" pos:end="3950:17">i</name><operator pos:start="3950:18" pos:end="3950:18">&lt;</operator><name pos:start="3950:19" pos:end="3950:36"><name pos:start="3950:19" pos:end="3950:24">stream</name><operator pos:start="3950:25" pos:end="3950:26">-&gt;</operator><name pos:start="3950:27" pos:end="3950:36">nb_streams</name></name></expr>;</condition><incr pos:start="3950:38" pos:end="3950:40"><expr pos:start="3950:38" pos:end="3950:40"><name pos:start="3950:38" pos:end="3950:38">i</name><operator pos:start="3950:39" pos:end="3950:40">++</operator></expr></incr>)</control> <block pos:start="3950:43" pos:end="3960:9">{<block_content pos:start="3951:13" pos:end="3959:13">
            <decl_stmt pos:start="3951:13" pos:end="3951:53"><decl pos:start="3951:13" pos:end="3951:52"><type pos:start="3951:13" pos:end="3951:29"><name pos:start="3951:13" pos:end="3951:27">LayeredAVStream</name> <modifier pos:start="3951:29" pos:end="3951:29">*</modifier></type><name pos:start="3951:30" pos:end="3951:31">st</name> <init pos:start="3951:33" pos:end="3951:52">= <expr pos:start="3951:35" pos:end="3951:52"><name pos:start="3951:35" pos:end="3951:52"><name pos:start="3951:35" pos:end="3951:40">stream</name><operator pos:start="3951:41" pos:end="3951:42">-&gt;</operator><name pos:start="3951:43" pos:end="3951:49">streams</name><index pos:start="3951:50" pos:end="3951:52">[<expr pos:start="3951:51" pos:end="3951:51"><name pos:start="3951:51" pos:end="3951:51">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <switch pos:start="3952:13" pos:end="3959:13">switch<condition pos:start="3952:19" pos:end="3952:41">(<expr pos:start="3952:20" pos:end="3952:40"><name pos:start="3952:20" pos:end="3952:40"><name pos:start="3952:20" pos:end="3952:21">st</name><operator pos:start="3952:22" pos:end="3952:23">-&gt;</operator><name pos:start="3952:24" pos:end="3952:28">codec</name><operator pos:start="3952:29" pos:end="3952:30">-&gt;</operator><name pos:start="3952:31" pos:end="3952:40">codec_type</name></name></expr>)</condition> <block pos:start="3952:43" pos:end="3959:13">{<block_content pos:start="3953:13" pos:end="3958:22">
            <case pos:start="3953:13" pos:end="3953:36">case <expr pos:start="3953:18" pos:end="3953:35"><name pos:start="3953:18" pos:end="3953:35">AVMEDIA_TYPE_AUDIO</name></expr>:</case>
            <case pos:start="3954:13" pos:end="3954:36">case <expr pos:start="3954:18" pos:end="3954:35"><name pos:start="3954:18" pos:end="3954:35">AVMEDIA_TYPE_VIDEO</name></expr>:</case>
                <expr_stmt pos:start="3955:17" pos:end="3955:49"><expr pos:start="3955:17" pos:end="3955:48"><name pos:start="3955:17" pos:end="3955:25">bandwidth</name> <operator pos:start="3955:27" pos:end="3955:28">+=</operator> <name pos:start="3955:30" pos:end="3955:48"><name pos:start="3955:30" pos:end="3955:31">st</name><operator pos:start="3955:32" pos:end="3955:33">-&gt;</operator><name pos:start="3955:34" pos:end="3955:38">codec</name><operator pos:start="3955:39" pos:end="3955:40">-&gt;</operator><name pos:start="3955:41" pos:end="3955:48">bit_rate</name></name></expr>;</expr_stmt>
                <break pos:start="3956:17" pos:end="3956:22">break;</break>
            <default pos:start="3957:13" pos:end="3957:20">default:</default>
                <break pos:start="3958:17" pos:end="3958:22">break;</break>
            </block_content>}</block></switch>
        </block_content>}</block></for>
        <expr_stmt pos:start="3961:9" pos:end="3961:53"><expr pos:start="3961:9" pos:end="3961:52"><name pos:start="3961:9" pos:end="3961:25"><name pos:start="3961:9" pos:end="3961:14">stream</name><operator pos:start="3961:15" pos:end="3961:16">-&gt;</operator><name pos:start="3961:17" pos:end="3961:25">bandwidth</name></name> <operator pos:start="3961:27" pos:end="3961:27">=</operator> <operator pos:start="3961:29" pos:end="3961:29">(</operator><name pos:start="3961:30" pos:end="3961:38">bandwidth</name> <operator pos:start="3961:40" pos:end="3961:40">+</operator> <literal type="number" pos:start="3961:42" pos:end="3961:44">999</literal><operator pos:start="3961:45" pos:end="3961:45">)</operator> <operator pos:start="3961:47" pos:end="3961:47">/</operator> <literal type="number" pos:start="3961:49" pos:end="3961:52">1000</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function pos:start="3965:1" pos:end="3992:1"><type pos:start="3965:1" pos:end="3965:11"><specifier pos:start="3965:1" pos:end="3965:6">static</specifier> <name pos:start="3965:8" pos:end="3965:11">void</name></type> <name pos:start="3965:13" pos:end="3965:29">handle_child_exit</name><parameter_list pos:start="3965:30" pos:end="3965:38">(<parameter pos:start="3965:31" pos:end="3965:37"><decl pos:start="3965:31" pos:end="3965:37"><type pos:start="3965:31" pos:end="3965:33"><name pos:start="3965:31" pos:end="3965:33">int</name></type> <name pos:start="3965:35" pos:end="3965:37">sig</name></decl></parameter>)</parameter_list>
<block pos:start="3966:1" pos:end="3992:1">{<block_content pos:start="3967:5" pos:end="3991:31">
    <decl_stmt pos:start="3967:5" pos:end="3967:14"><decl pos:start="3967:5" pos:end="3967:13"><type pos:start="3967:5" pos:end="3967:9"><name pos:start="3967:5" pos:end="3967:9">pid_t</name></type> <name pos:start="3967:11" pos:end="3967:13">pid</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3968:5" pos:end="3968:15"><decl pos:start="3968:5" pos:end="3968:14"><type pos:start="3968:5" pos:end="3968:7"><name pos:start="3968:5" pos:end="3968:7">int</name></type> <name pos:start="3968:9" pos:end="3968:14">status</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3969:5" pos:end="3969:18"><decl pos:start="3969:5" pos:end="3969:17"><type pos:start="3969:5" pos:end="3969:10"><name pos:start="3969:5" pos:end="3969:10">time_t</name></type> <name pos:start="3969:12" pos:end="3969:17">uptime</name></decl>;</decl_stmt>

    <while pos:start="3971:5" pos:end="3989:5">while <condition pos:start="3971:11" pos:end="3971:53">(<expr pos:start="3971:12" pos:end="3971:52"><operator pos:start="3971:12" pos:end="3971:12">(</operator><name pos:start="3971:13" pos:end="3971:15">pid</name> <operator pos:start="3971:17" pos:end="3971:17">=</operator> <call pos:start="3971:19" pos:end="3971:47"><name pos:start="3971:19" pos:end="3971:25">waitpid</name><argument_list pos:start="3971:26" pos:end="3971:47">(<argument pos:start="3971:27" pos:end="3971:28"><expr pos:start="3971:27" pos:end="3971:28"><operator pos:start="3971:27" pos:end="3971:27">-</operator><literal type="number" pos:start="3971:28" pos:end="3971:28">1</literal></expr></argument>, <argument pos:start="3971:31" pos:end="3971:37"><expr pos:start="3971:31" pos:end="3971:37"><operator pos:start="3971:31" pos:end="3971:31">&amp;</operator><name pos:start="3971:32" pos:end="3971:37">status</name></expr></argument>, <argument pos:start="3971:40" pos:end="3971:46"><expr pos:start="3971:40" pos:end="3971:46"><name pos:start="3971:40" pos:end="3971:46">WNOHANG</name></expr></argument>)</argument_list></call><operator pos:start="3971:48" pos:end="3971:48">)</operator> <operator pos:start="3971:50" pos:end="3971:50">&gt;</operator> <literal type="number" pos:start="3971:52" pos:end="3971:52">0</literal></expr>)</condition> <block pos:start="3971:55" pos:end="3989:5">{<block_content pos:start="3972:9" pos:end="3988:9">
        <decl_stmt pos:start="3972:9" pos:end="3972:29"><decl pos:start="3972:9" pos:end="3972:28"><type pos:start="3972:9" pos:end="3972:24"><name pos:start="3972:9" pos:end="3972:22">FFServerStream</name> <modifier pos:start="3972:24" pos:end="3972:24">*</modifier></type><name pos:start="3972:25" pos:end="3972:28">feed</name></decl>;</decl_stmt>

        <for pos:start="3974:9" pos:end="3988:9">for <control pos:start="3974:13" pos:end="3974:63">(<init pos:start="3974:14" pos:end="3974:38"><expr pos:start="3974:14" pos:end="3974:37"><name pos:start="3974:14" pos:end="3974:17">feed</name> <operator pos:start="3974:19" pos:end="3974:19">=</operator> <name pos:start="3974:21" pos:end="3974:37"><name pos:start="3974:21" pos:end="3974:26">config</name><operator pos:start="3974:27" pos:end="3974:27">.</operator><name pos:start="3974:28" pos:end="3974:37">first_feed</name></name></expr>;</init> <condition pos:start="3974:40" pos:end="3974:44"><expr pos:start="3974:40" pos:end="3974:43"><name pos:start="3974:40" pos:end="3974:43">feed</name></expr>;</condition> <incr pos:start="3974:46" pos:end="3974:62"><expr pos:start="3974:46" pos:end="3974:62"><name pos:start="3974:46" pos:end="3974:49">feed</name> <operator pos:start="3974:51" pos:end="3974:51">=</operator> <name pos:start="3974:53" pos:end="3974:62"><name pos:start="3974:53" pos:end="3974:56">feed</name><operator pos:start="3974:57" pos:end="3974:58">-&gt;</operator><name pos:start="3974:59" pos:end="3974:62">next</name></name></expr></incr>)</control> <block pos:start="3974:65" pos:end="3988:9">{<block_content pos:start="3975:13" pos:end="3987:60">
            <if_stmt pos:start="3975:13" pos:end="3976:25"><if pos:start="3975:13" pos:end="3976:25">if <condition pos:start="3975:16" pos:end="3975:33">(<expr pos:start="3975:17" pos:end="3975:32"><name pos:start="3975:17" pos:end="3975:25"><name pos:start="3975:17" pos:end="3975:20">feed</name><operator pos:start="3975:21" pos:end="3975:22">-&gt;</operator><name pos:start="3975:23" pos:end="3975:25">pid</name></name> <operator pos:start="3975:27" pos:end="3975:28">!=</operator> <name pos:start="3975:30" pos:end="3975:32">pid</name></expr>)</condition><block type="pseudo" pos:start="3976:17" pos:end="3976:25"><block_content pos:start="3976:17" pos:end="3976:25">
                <continue pos:start="3976:17" pos:end="3976:25">continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt pos:start="3978:13" pos:end="3978:47"><expr pos:start="3978:13" pos:end="3978:46"><name pos:start="3978:13" pos:end="3978:18">uptime</name> <operator pos:start="3978:20" pos:end="3978:20">=</operator> <call pos:start="3978:22" pos:end="3978:28"><name pos:start="3978:22" pos:end="3978:25">time</name><argument_list pos:start="3978:26" pos:end="3978:28">(<argument pos:start="3978:27" pos:end="3978:27"><expr pos:start="3978:27" pos:end="3978:27"><literal type="number" pos:start="3978:27" pos:end="3978:27">0</literal></expr></argument>)</argument_list></call> <operator pos:start="3978:30" pos:end="3978:30">-</operator> <name pos:start="3978:32" pos:end="3978:46"><name pos:start="3978:32" pos:end="3978:35">feed</name><operator pos:start="3978:36" pos:end="3978:37">-&gt;</operator><name pos:start="3978:38" pos:end="3978:46">pid_start</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="3979:13" pos:end="3979:26"><expr pos:start="3979:13" pos:end="3979:25"><name pos:start="3979:13" pos:end="3979:21"><name pos:start="3979:13" pos:end="3979:16">feed</name><operator pos:start="3979:17" pos:end="3979:18">-&gt;</operator><name pos:start="3979:19" pos:end="3979:21">pid</name></name> <operator pos:start="3979:23" pos:end="3979:23">=</operator> <literal type="number" pos:start="3979:25" pos:end="3979:25">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="3980:13" pos:end="3983:76"><expr pos:start="3980:13" pos:end="3983:75"><call pos:start="3980:13" pos:end="3983:75"><name pos:start="3980:13" pos:end="3980:19">fprintf</name><argument_list pos:start="3980:20" pos:end="3983:75">(<argument pos:start="3980:21" pos:end="3980:26"><expr pos:start="3980:21" pos:end="3980:26"><name pos:start="3980:21" pos:end="3980:26">stderr</name></expr></argument>,
                    <argument pos:start="3981:21" pos:end="3982:35"><expr pos:start="3981:21" pos:end="3982:35"><literal type="string" pos:start="3981:21" pos:end="3981:31">"%s: Pid %"</literal><name pos:start="3981:32" pos:end="3981:37">PRId64</name><literal type="string" pos:start="3981:38" pos:end="3981:69">" exited with status %d after %"</literal><name pos:start="3981:70" pos:end="3981:75">PRId64</name><literal type="string" pos:start="3981:76" pos:end="3981:78">" "</literal>
                        <literal type="string" pos:start="3982:25" pos:end="3982:35">"seconds\n"</literal></expr></argument>,
                    <argument pos:start="3983:21" pos:end="3983:34"><expr pos:start="3983:21" pos:end="3983:34"><name pos:start="3983:21" pos:end="3983:34"><name pos:start="3983:21" pos:end="3983:24">feed</name><operator pos:start="3983:25" pos:end="3983:26">-&gt;</operator><name pos:start="3983:27" pos:end="3983:34">filename</name></name></expr></argument>, <argument pos:start="3983:37" pos:end="3983:49"><expr pos:start="3983:37" pos:end="3983:49"><operator pos:start="3983:37" pos:end="3983:37">(</operator><name pos:start="3983:38" pos:end="3983:44">int64_t</name><operator pos:start="3983:45" pos:end="3983:45">)</operator> <name pos:start="3983:47" pos:end="3983:49">pid</name></expr></argument>, <argument pos:start="3983:52" pos:end="3983:57"><expr pos:start="3983:52" pos:end="3983:57"><name pos:start="3983:52" pos:end="3983:57">status</name></expr></argument>, <argument pos:start="3983:60" pos:end="3983:74"><expr pos:start="3983:60" pos:end="3983:74"><operator pos:start="3983:60" pos:end="3983:60">(</operator><name pos:start="3983:61" pos:end="3983:67">int64_t</name><operator pos:start="3983:68" pos:end="3983:68">)</operator><name pos:start="3983:69" pos:end="3983:74">uptime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="3985:13" pos:end="3987:60"><if pos:start="3985:13" pos:end="3987:60">if <condition pos:start="3985:16" pos:end="3985:28">(<expr pos:start="3985:17" pos:end="3985:27"><name pos:start="3985:17" pos:end="3985:22">uptime</name> <operator pos:start="3985:24" pos:end="3985:24">&lt;</operator> <literal type="number" pos:start="3985:26" pos:end="3985:27">30</literal></expr>)</condition><block type="pseudo" pos:start="3987:17" pos:end="3987:60"><block_content pos:start="3987:17" pos:end="3987:60">
                <comment type="block" pos:start="3986:17" pos:end="3986:48">/* Turn off any more restarts */</comment>
                <expr_stmt pos:start="3987:17" pos:end="3987:60"><expr pos:start="3987:17" pos:end="3987:59"><call pos:start="3987:17" pos:end="3987:59"><name pos:start="3987:17" pos:end="3987:40">ffserver_free_child_args</name><argument_list pos:start="3987:41" pos:end="3987:59">(<argument pos:start="3987:42" pos:end="3987:58"><expr pos:start="3987:42" pos:end="3987:58"><operator pos:start="3987:42" pos:end="3987:42">&amp;</operator><name pos:start="3987:43" pos:end="3987:58"><name pos:start="3987:43" pos:end="3987:46">feed</name><operator pos:start="3987:47" pos:end="3987:48">-&gt;</operator><name pos:start="3987:49" pos:end="3987:58">child_argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></while>

    <expr_stmt pos:start="3991:5" pos:end="3991:31"><expr pos:start="3991:5" pos:end="3991:30"><name pos:start="3991:5" pos:end="3991:26">need_to_start_children</name> <operator pos:start="3991:28" pos:end="3991:28">=</operator> <literal type="number" pos:start="3991:30" pos:end="3991:30">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="3994:1" pos:end="3998:1"><type pos:start="3994:1" pos:end="3994:11"><specifier pos:start="3994:1" pos:end="3994:6">static</specifier> <name pos:start="3994:8" pos:end="3994:11">void</name></type> <name pos:start="3994:13" pos:end="3994:21">opt_debug</name><parameter_list pos:start="3994:22" pos:end="3994:27">(<parameter pos:start="3994:23" pos:end="3994:26"><decl pos:start="3994:23" pos:end="3994:26"><type pos:start="3994:23" pos:end="3994:26"><name pos:start="3994:23" pos:end="3994:26">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="3995:1" pos:end="3998:1">{<block_content pos:start="3996:5" pos:end="3997:66">
    <expr_stmt pos:start="3996:5" pos:end="3996:21"><expr pos:start="3996:5" pos:end="3996:20"><name pos:start="3996:5" pos:end="3996:16"><name pos:start="3996:5" pos:end="3996:10">config</name><operator pos:start="3996:11" pos:end="3996:11">.</operator><name pos:start="3996:12" pos:end="3996:16">debug</name></name> <operator pos:start="3996:18" pos:end="3996:18">=</operator> <literal type="number" pos:start="3996:20" pos:end="3996:20">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="3997:5" pos:end="3997:66"><expr pos:start="3997:5" pos:end="3997:65"><call pos:start="3997:5" pos:end="3997:65"><name pos:start="3997:5" pos:end="3997:12">snprintf</name><argument_list pos:start="3997:13" pos:end="3997:65">(<argument pos:start="3997:14" pos:end="3997:31"><expr pos:start="3997:14" pos:end="3997:31"><name pos:start="3997:14" pos:end="3997:31"><name pos:start="3997:14" pos:end="3997:19">config</name><operator pos:start="3997:20" pos:end="3997:20">.</operator><name pos:start="3997:21" pos:end="3997:31">logfilename</name></name></expr></argument>, <argument pos:start="3997:34" pos:end="3997:59"><expr pos:start="3997:34" pos:end="3997:59"><sizeof pos:start="3997:34" pos:end="3997:59">sizeof<argument_list pos:start="3997:40" pos:end="3997:59">(<argument pos:start="3997:41" pos:end="3997:58"><expr pos:start="3997:41" pos:end="3997:58"><name pos:start="3997:41" pos:end="3997:58"><name pos:start="3997:41" pos:end="3997:46">config</name><operator pos:start="3997:47" pos:end="3997:47">.</operator><name pos:start="3997:48" pos:end="3997:58">logfilename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="3997:62" pos:end="3997:64"><expr pos:start="3997:62" pos:end="3997:64"><literal type="string" pos:start="3997:62" pos:end="3997:64">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="4000:1" pos:end="4006:1"><type pos:start="4000:1" pos:end="4000:4"><name pos:start="4000:1" pos:end="4000:4">void</name></type> <name pos:start="4000:6" pos:end="4000:22">show_help_default</name><parameter_list pos:start="4000:23" pos:end="4000:56">(<parameter pos:start="4000:24" pos:end="4000:38"><decl pos:start="4000:24" pos:end="4000:38"><type pos:start="4000:24" pos:end="4000:38"><specifier pos:start="4000:24" pos:end="4000:28">const</specifier> <name pos:start="4000:30" pos:end="4000:33">char</name> <modifier pos:start="4000:35" pos:end="4000:35">*</modifier></type><name pos:start="4000:36" pos:end="4000:38">opt</name></decl></parameter>, <parameter pos:start="4000:41" pos:end="4000:55"><decl pos:start="4000:41" pos:end="4000:55"><type pos:start="4000:41" pos:end="4000:55"><specifier pos:start="4000:41" pos:end="4000:45">const</specifier> <name pos:start="4000:47" pos:end="4000:50">char</name> <modifier pos:start="4000:52" pos:end="4000:52">*</modifier></type><name pos:start="4000:53" pos:end="4000:55">arg</name></decl></parameter>)</parameter_list>
<block pos:start="4001:1" pos:end="4006:1">{<block_content pos:start="4002:5" pos:end="4005:57">
    <expr_stmt pos:start="4002:5" pos:end="4003:69"><expr pos:start="4002:5" pos:end="4003:68"><call pos:start="4002:5" pos:end="4003:68"><name pos:start="4002:5" pos:end="4002:10">printf</name><argument_list pos:start="4002:11" pos:end="4003:68">(<argument pos:start="4002:12" pos:end="4003:67"><expr pos:start="4002:12" pos:end="4003:67"><literal type="string" pos:start="4002:12" pos:end="4002:40">"usage: ffserver [options]\n"</literal>
           <literal type="string" pos:start="4003:12" pos:end="4003:67">"Hyper fast multi format Audio/Video streaming server\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="4004:5" pos:end="4004:17"><expr pos:start="4004:5" pos:end="4004:16"><call pos:start="4004:5" pos:end="4004:16"><name pos:start="4004:5" pos:end="4004:10">printf</name><argument_list pos:start="4004:11" pos:end="4004:16">(<argument pos:start="4004:12" pos:end="4004:15"><expr pos:start="4004:12" pos:end="4004:15"><literal type="string" pos:start="4004:12" pos:end="4004:15">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="4005:5" pos:end="4005:57"><expr pos:start="4005:5" pos:end="4005:56"><call pos:start="4005:5" pos:end="4005:56"><name pos:start="4005:5" pos:end="4005:21">show_help_options</name><argument_list pos:start="4005:22" pos:end="4005:56">(<argument pos:start="4005:23" pos:end="4005:29"><expr pos:start="4005:23" pos:end="4005:29"><name pos:start="4005:23" pos:end="4005:29">options</name></expr></argument>, <argument pos:start="4005:32" pos:end="4005:46"><expr pos:start="4005:32" pos:end="4005:46"><literal type="string" pos:start="4005:32" pos:end="4005:46">"Main options:"</literal></expr></argument>, <argument pos:start="4005:49" pos:end="4005:49"><expr pos:start="4005:49" pos:end="4005:49"><literal type="number" pos:start="4005:49" pos:end="4005:49">0</literal></expr></argument>, <argument pos:start="4005:52" pos:end="4005:52"><expr pos:start="4005:52" pos:end="4005:52"><literal type="number" pos:start="4005:52" pos:end="4005:52">0</literal></expr></argument>, <argument pos:start="4005:55" pos:end="4005:55"><expr pos:start="4005:55" pos:end="4005:55"><literal type="number" pos:start="4005:55" pos:end="4005:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt pos:start="4008:1" pos:end="4014:2"><decl pos:start="4008:1" pos:end="4014:1"><type pos:start="4008:1" pos:end="4008:22"><specifier pos:start="4008:1" pos:end="4008:6">static</specifier> <specifier pos:start="4008:8" pos:end="4008:12">const</specifier> <name pos:start="4008:14" pos:end="4008:22">OptionDef</name></type> <name pos:start="4008:24" pos:end="4008:32"><name pos:start="4008:24" pos:end="4008:30">options</name><index pos:start="4008:31" pos:end="4008:32">[]</index></name> <init pos:start="4008:34" pos:end="4014:1">= <expr pos:start="4008:36" pos:end="4014:1"><block pos:start="4008:36" pos:end="4014:1">{
<cpp:include pos:start="4009:1" pos:end="4009:33">#<cpp:directive pos:start="4009:2" pos:end="4009:8">include</cpp:directive> <cpp:file pos:start="4009:10" pos:end="4009:33">"cmdutils_common_opts.h"</cpp:file></cpp:include>
    <expr pos:start="4010:5" pos:end="4010:69"><block pos:start="4010:5" pos:end="4010:69">{ <expr pos:start="4010:7" pos:end="4010:9"><literal type="string" pos:start="4010:7" pos:end="4010:9">"n"</literal></expr>, <expr pos:start="4010:12" pos:end="4010:19"><name pos:start="4010:12" pos:end="4010:19">OPT_BOOL</name></expr>, <expr pos:start="4010:22" pos:end="4010:42"><block pos:start="4010:22" pos:end="4010:42">{<expr pos:start="4010:23" pos:end="4010:40"><operator pos:start="4010:23" pos:end="4010:23">(</operator><name pos:start="4010:24" pos:end="4010:27">void</name> <operator pos:start="4010:29" pos:end="4010:29">*</operator><operator pos:start="4010:30" pos:end="4010:30">)</operator><operator pos:start="4010:31" pos:end="4010:31">&amp;</operator><name pos:start="4010:32" pos:end="4010:40">no_launch</name></expr> }</block></expr>, <expr pos:start="4010:45" pos:end="4010:67"><literal type="string" pos:start="4010:45" pos:end="4010:67">"enable no-launch mode"</literal></expr> }</block></expr>,
    <expr pos:start="4011:5" pos:end="4011:55"><block pos:start="4011:5" pos:end="4011:55">{ <expr pos:start="4011:7" pos:end="4011:9"><literal type="string" pos:start="4011:7" pos:end="4011:9">"d"</literal></expr>, <expr pos:start="4011:12" pos:end="4011:12"><literal type="number" pos:start="4011:12" pos:end="4011:12">0</literal></expr>, <expr pos:start="4011:15" pos:end="4011:32"><block pos:start="4011:15" pos:end="4011:32">{<expr pos:start="4011:16" pos:end="4011:31"><operator pos:start="4011:16" pos:end="4011:16">(</operator><name pos:start="4011:17" pos:end="4011:20">void</name><operator pos:start="4011:21" pos:end="4011:21">*</operator><operator pos:start="4011:22" pos:end="4011:22">)</operator><name pos:start="4011:23" pos:end="4011:31">opt_debug</name></expr>}</block></expr>, <expr pos:start="4011:35" pos:end="4011:53"><literal type="string" pos:start="4011:35" pos:end="4011:53">"enable debug mode"</literal></expr> }</block></expr>,
    <expr pos:start="4012:5" pos:end="4012:123"><block pos:start="4012:5" pos:end="4012:123">{ <expr pos:start="4012:7" pos:end="4012:9"><literal type="string" pos:start="4012:7" pos:end="4012:9">"f"</literal></expr>, <expr pos:start="4012:12" pos:end="4012:31"><name pos:start="4012:12" pos:end="4012:18">HAS_ARG</name> <operator pos:start="4012:20" pos:end="4012:20">|</operator> <name pos:start="4012:22" pos:end="4012:31">OPT_STRING</name></expr>, <expr pos:start="4012:34" pos:end="4012:59"><block pos:start="4012:34" pos:end="4012:59">{<expr pos:start="4012:35" pos:end="4012:57"><operator pos:start="4012:35" pos:end="4012:35">(</operator><name pos:start="4012:36" pos:end="4012:39">void</name><operator pos:start="4012:40" pos:end="4012:40">*</operator><operator pos:start="4012:41" pos:end="4012:41">)</operator><operator pos:start="4012:42" pos:end="4012:42">&amp;</operator><name pos:start="4012:43" pos:end="4012:57"><name pos:start="4012:43" pos:end="4012:48">config</name><operator pos:start="4012:49" pos:end="4012:49">.</operator><name pos:start="4012:50" pos:end="4012:57">filename</name></name></expr> }</block></expr>, <expr pos:start="4012:62" pos:end="4012:107"><literal type="string" pos:start="4012:62" pos:end="4012:107">"use configfile instead of /etc/ffserver.conf"</literal></expr>, <expr pos:start="4012:110" pos:end="4012:121"><literal type="string" pos:start="4012:110" pos:end="4012:121">"configfile"</literal></expr> }</block></expr>,
    <expr pos:start="4013:5" pos:end="4013:12"><block pos:start="4013:5" pos:end="4013:12">{ <expr pos:start="4013:7" pos:end="4013:10"><name pos:start="4013:7" pos:end="4013:10">NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function pos:start="4016:1" pos:end="4082:1"><type pos:start="4016:1" pos:end="4016:3"><name pos:start="4016:1" pos:end="4016:3">int</name></type> <name pos:start="4016:5" pos:end="4016:8">main</name><parameter_list pos:start="4016:9" pos:end="4016:31">(<parameter pos:start="4016:10" pos:end="4016:17"><decl pos:start="4016:10" pos:end="4016:17"><type pos:start="4016:10" pos:end="4016:17"><name pos:start="4016:10" pos:end="4016:12">int</name></type> <name pos:start="4016:14" pos:end="4016:17">argc</name></decl></parameter>, <parameter pos:start="4016:20" pos:end="4016:30"><decl pos:start="4016:20" pos:end="4016:30"><type pos:start="4016:20" pos:end="4016:30"><name pos:start="4016:20" pos:end="4016:23">char</name> <modifier pos:start="4016:25" pos:end="4016:25">*</modifier><modifier pos:start="4016:26" pos:end="4016:26">*</modifier></type><name pos:start="4016:27" pos:end="4016:30">argv</name></decl></parameter>)</parameter_list>
<block pos:start="4017:1" pos:end="4082:1">{<block_content pos:start="4018:5" pos:end="4081:15">
    <decl_stmt pos:start="4018:5" pos:end="4018:40"><decl pos:start="4018:5" pos:end="4018:39"><type pos:start="4018:5" pos:end="4018:20"><name pos:start="4018:5" pos:end="4018:20"><name pos:start="4018:5" pos:end="4018:10">struct</name> <name pos:start="4018:12" pos:end="4018:20">sigaction</name></name></type> <name pos:start="4018:22" pos:end="4018:27">sigact</name> <init pos:start="4018:29" pos:end="4018:39">= <expr pos:start="4018:31" pos:end="4018:39"><block pos:start="4018:31" pos:end="4018:39">{ <expr pos:start="4018:33" pos:end="4018:37"><block pos:start="4018:33" pos:end="4018:37">{ <expr pos:start="4018:35" pos:end="4018:35"><literal type="number" pos:start="4018:35" pos:end="4018:35">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4019:5" pos:end="4019:19"><decl pos:start="4019:5" pos:end="4019:18"><type pos:start="4019:5" pos:end="4019:7"><name pos:start="4019:5" pos:end="4019:7">int</name></type> <name pos:start="4019:9" pos:end="4019:18">cfg_parsed</name></decl>;</decl_stmt>
    <decl_stmt pos:start="4020:5" pos:end="4020:27"><decl pos:start="4020:5" pos:end="4020:26"><type pos:start="4020:5" pos:end="4020:7"><name pos:start="4020:5" pos:end="4020:7">int</name></type> <name pos:start="4020:9" pos:end="4020:11">ret</name> <init pos:start="4020:13" pos:end="4020:26">= <expr pos:start="4020:15" pos:end="4020:26"><name pos:start="4020:15" pos:end="4020:26">EXIT_FAILURE</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="4022:5" pos:end="4022:19"><expr pos:start="4022:5" pos:end="4022:18"><call pos:start="4022:5" pos:end="4022:18"><name pos:start="4022:5" pos:end="4022:16">init_dynload</name><argument_list pos:start="4022:17" pos:end="4022:18">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="4024:5" pos:end="4024:54"><expr pos:start="4024:5" pos:end="4024:53"><name pos:start="4024:5" pos:end="4024:19"><name pos:start="4024:5" pos:end="4024:10">config</name><operator pos:start="4024:11" pos:end="4024:11">.</operator><name pos:start="4024:12" pos:end="4024:19">filename</name></name> <operator pos:start="4024:21" pos:end="4024:21">=</operator> <call pos:start="4024:23" pos:end="4024:53"><name pos:start="4024:23" pos:end="4024:31">av_strdup</name><argument_list pos:start="4024:32" pos:end="4024:53">(<argument pos:start="4024:33" pos:end="4024:52"><expr pos:start="4024:33" pos:end="4024:52"><literal type="string" pos:start="4024:33" pos:end="4024:52">"/etc/ffserver.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="4026:5" pos:end="4026:40"><expr pos:start="4026:5" pos:end="4026:39"><call pos:start="4026:5" pos:end="4026:39"><name pos:start="4026:5" pos:end="4026:18">parse_loglevel</name><argument_list pos:start="4026:19" pos:end="4026:39">(<argument pos:start="4026:20" pos:end="4026:23"><expr pos:start="4026:20" pos:end="4026:23"><name pos:start="4026:20" pos:end="4026:23">argc</name></expr></argument>, <argument pos:start="4026:26" pos:end="4026:29"><expr pos:start="4026:26" pos:end="4026:29"><name pos:start="4026:26" pos:end="4026:29">argv</name></expr></argument>, <argument pos:start="4026:32" pos:end="4026:38"><expr pos:start="4026:32" pos:end="4026:38"><name pos:start="4026:32" pos:end="4026:38">options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="4027:5" pos:end="4027:22"><expr pos:start="4027:5" pos:end="4027:21"><call pos:start="4027:5" pos:end="4027:21"><name pos:start="4027:5" pos:end="4027:19">av_register_all</name><argument_list pos:start="4027:20" pos:end="4027:21">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="4028:5" pos:end="4028:28"><expr pos:start="4028:5" pos:end="4028:27"><call pos:start="4028:5" pos:end="4028:27"><name pos:start="4028:5" pos:end="4028:25">avformat_network_init</name><argument_list pos:start="4028:26" pos:end="4028:27">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="4030:5" pos:end="4030:37"><expr pos:start="4030:5" pos:end="4030:36"><call pos:start="4030:5" pos:end="4030:36"><name pos:start="4030:5" pos:end="4030:15">show_banner</name><argument_list pos:start="4030:16" pos:end="4030:36">(<argument pos:start="4030:17" pos:end="4030:20"><expr pos:start="4030:17" pos:end="4030:20"><name pos:start="4030:17" pos:end="4030:20">argc</name></expr></argument>, <argument pos:start="4030:23" pos:end="4030:26"><expr pos:start="4030:23" pos:end="4030:26"><name pos:start="4030:23" pos:end="4030:26">argv</name></expr></argument>, <argument pos:start="4030:29" pos:end="4030:35"><expr pos:start="4030:29" pos:end="4030:35"><name pos:start="4030:29" pos:end="4030:35">options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="4032:5" pos:end="4032:30"><expr pos:start="4032:5" pos:end="4032:29"><name pos:start="4032:5" pos:end="4032:19">my_program_name</name> <operator pos:start="4032:21" pos:end="4032:21">=</operator> <name pos:start="4032:23" pos:end="4032:29"><name pos:start="4032:23" pos:end="4032:26">argv</name><index pos:start="4032:27" pos:end="4032:29">[<expr pos:start="4032:28" pos:end="4032:28"><literal type="number" pos:start="4032:28" pos:end="4032:28">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="4034:5" pos:end="4034:51"><expr pos:start="4034:5" pos:end="4034:50"><call pos:start="4034:5" pos:end="4034:50"><name pos:start="4034:5" pos:end="4034:17">parse_options</name><argument_list pos:start="4034:18" pos:end="4034:50">(<argument pos:start="4034:19" pos:end="4034:22"><expr pos:start="4034:19" pos:end="4034:22"><name pos:start="4034:19" pos:end="4034:22">NULL</name></expr></argument>, <argument pos:start="4034:25" pos:end="4034:28"><expr pos:start="4034:25" pos:end="4034:28"><name pos:start="4034:25" pos:end="4034:28">argc</name></expr></argument>, <argument pos:start="4034:31" pos:end="4034:34"><expr pos:start="4034:31" pos:end="4034:34"><name pos:start="4034:31" pos:end="4034:34">argv</name></expr></argument>, <argument pos:start="4034:37" pos:end="4034:43"><expr pos:start="4034:37" pos:end="4034:43"><name pos:start="4034:37" pos:end="4034:43">options</name></expr></argument>, <argument pos:start="4034:46" pos:end="4034:49"><expr pos:start="4034:46" pos:end="4034:49"><name pos:start="4034:46" pos:end="4034:49">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="4036:5" pos:end="4036:27"><expr pos:start="4036:5" pos:end="4036:26"><call pos:start="4036:5" pos:end="4036:26"><name pos:start="4036:5" pos:end="4036:12">unsetenv</name><argument_list pos:start="4036:13" pos:end="4036:26">(<argument pos:start="4036:14" pos:end="4036:25"><expr pos:start="4036:14" pos:end="4036:25"><literal type="string" pos:start="4036:14" pos:end="4036:25">"http_proxy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="block" pos:start="4036:41" pos:end="4036:65">/* Kill the http_proxy */</comment>

    <expr_stmt pos:start="4038:5" pos:end="4038:53"><expr pos:start="4038:5" pos:end="4038:52"><call pos:start="4038:5" pos:end="4038:52"><name pos:start="4038:5" pos:end="4038:15">av_lfg_init</name><argument_list pos:start="4038:16" pos:end="4038:52">(<argument pos:start="4038:17" pos:end="4038:29"><expr pos:start="4038:17" pos:end="4038:29"><operator pos:start="4038:17" pos:end="4038:17">&amp;</operator><name pos:start="4038:18" pos:end="4038:29">random_state</name></expr></argument>, <argument pos:start="4038:32" pos:end="4038:51"><expr pos:start="4038:32" pos:end="4038:51"><call pos:start="4038:32" pos:end="4038:51"><name pos:start="4038:32" pos:end="4038:49">av_get_random_seed</name><argument_list pos:start="4038:50" pos:end="4038:51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="4040:5" pos:end="4040:42"><expr pos:start="4040:5" pos:end="4040:41"><name pos:start="4040:5" pos:end="4040:21"><name pos:start="4040:5" pos:end="4040:10">sigact</name><operator pos:start="4040:11" pos:end="4040:11">.</operator><name pos:start="4040:12" pos:end="4040:21">sa_handler</name></name> <operator pos:start="4040:23" pos:end="4040:23">=</operator> <name pos:start="4040:25" pos:end="4040:41">handle_child_exit</name></expr>;</expr_stmt>
    <expr_stmt pos:start="4041:5" pos:end="4041:48"><expr pos:start="4041:5" pos:end="4041:47"><name pos:start="4041:5" pos:end="4041:19"><name pos:start="4041:5" pos:end="4041:10">sigact</name><operator pos:start="4041:11" pos:end="4041:11">.</operator><name pos:start="4041:12" pos:end="4041:19">sa_flags</name></name> <operator pos:start="4041:21" pos:end="4041:21">=</operator> <name pos:start="4041:23" pos:end="4041:34">SA_NOCLDSTOP</name> <operator pos:start="4041:36" pos:end="4041:36">|</operator> <name pos:start="4041:38" pos:end="4041:47">SA_RESTART</name></expr>;</expr_stmt>
    <expr_stmt pos:start="4042:5" pos:end="4042:35"><expr pos:start="4042:5" pos:end="4042:34"><call pos:start="4042:5" pos:end="4042:34"><name pos:start="4042:5" pos:end="4042:13">sigaction</name><argument_list pos:start="4042:14" pos:end="4042:34">(<argument pos:start="4042:15" pos:end="4042:21"><expr pos:start="4042:15" pos:end="4042:21"><name pos:start="4042:15" pos:end="4042:21">SIGCHLD</name></expr></argument>, <argument pos:start="4042:24" pos:end="4042:30"><expr pos:start="4042:24" pos:end="4042:30"><operator pos:start="4042:24" pos:end="4042:24">&amp;</operator><name pos:start="4042:25" pos:end="4042:30">sigact</name></expr></argument>, <argument pos:start="4042:33" pos:end="4042:33"><expr pos:start="4042:33" pos:end="4042:33"><literal type="number" pos:start="4042:33" pos:end="4042:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="4044:5" pos:end="4048:5"><if pos:start="4044:5" pos:end="4048:5">if <condition pos:start="4044:8" pos:end="4044:77">(<expr pos:start="4044:9" pos:end="4044:76"><operator pos:start="4044:9" pos:end="4044:9">(</operator><name pos:start="4044:10" pos:end="4044:19">cfg_parsed</name> <operator pos:start="4044:21" pos:end="4044:21">=</operator> <call pos:start="4044:23" pos:end="4044:71"><name pos:start="4044:23" pos:end="4044:45">ffserver_parse_ffconfig</name><argument_list pos:start="4044:46" pos:end="4044:71">(<argument pos:start="4044:47" pos:end="4044:61"><expr pos:start="4044:47" pos:end="4044:61"><name pos:start="4044:47" pos:end="4044:61"><name pos:start="4044:47" pos:end="4044:52">config</name><operator pos:start="4044:53" pos:end="4044:53">.</operator><name pos:start="4044:54" pos:end="4044:61">filename</name></name></expr></argument>, <argument pos:start="4044:64" pos:end="4044:70"><expr pos:start="4044:64" pos:end="4044:70"><operator pos:start="4044:64" pos:end="4044:64">&amp;</operator><name pos:start="4044:65" pos:end="4044:70">config</name></expr></argument>)</argument_list></call><operator pos:start="4044:72" pos:end="4044:72">)</operator> <operator pos:start="4044:74" pos:end="4044:74">&lt;</operator> <literal type="number" pos:start="4044:76" pos:end="4044:76">0</literal></expr>)</condition> <block pos:start="4044:79" pos:end="4048:5">{<block_content pos:start="4045:9" pos:end="4047:18">
        <expr_stmt pos:start="4045:9" pos:end="4046:57"><expr pos:start="4045:9" pos:end="4046:56"><call pos:start="4045:9" pos:end="4046:56"><name pos:start="4045:9" pos:end="4045:15">fprintf</name><argument_list pos:start="4045:16" pos:end="4046:56">(<argument pos:start="4045:17" pos:end="4045:22"><expr pos:start="4045:17" pos:end="4045:22"><name pos:start="4045:17" pos:end="4045:22">stderr</name></expr></argument>, <argument pos:start="4045:25" pos:end="4045:69"><expr pos:start="4045:25" pos:end="4045:69"><literal type="string" pos:start="4045:25" pos:end="4045:69">"Error reading configuration file '%s': %s\n"</literal></expr></argument>,
                <argument pos:start="4046:17" pos:end="4046:31"><expr pos:start="4046:17" pos:end="4046:31"><name pos:start="4046:17" pos:end="4046:31"><name pos:start="4046:17" pos:end="4046:22">config</name><operator pos:start="4046:23" pos:end="4046:23">.</operator><name pos:start="4046:24" pos:end="4046:31">filename</name></name></expr></argument>, <argument pos:start="4046:34" pos:end="4046:55"><expr pos:start="4046:34" pos:end="4046:55"><call pos:start="4046:34" pos:end="4046:55"><name pos:start="4046:34" pos:end="4046:43">av_err2str</name><argument_list pos:start="4046:44" pos:end="4046:55">(<argument pos:start="4046:45" pos:end="4046:54"><expr pos:start="4046:45" pos:end="4046:54"><name pos:start="4046:45" pos:end="4046:54">cfg_parsed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="4047:9" pos:end="4047:18">goto <name pos:start="4047:14" pos:end="4047:17">bail</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="4050:5" pos:end="4050:33">/* open log file if needed */</comment>
    <if_stmt pos:start="4051:5" pos:end="4057:5"><if pos:start="4051:5" pos:end="4057:5">if <condition pos:start="4051:8" pos:end="4051:38">(<expr pos:start="4051:9" pos:end="4051:37"><name pos:start="4051:9" pos:end="4051:29"><name pos:start="4051:9" pos:end="4051:14">config</name><operator pos:start="4051:15" pos:end="4051:15">.</operator><name pos:start="4051:16" pos:end="4051:26">logfilename</name><index pos:start="4051:27" pos:end="4051:29">[<expr pos:start="4051:28" pos:end="4051:28"><literal type="number" pos:start="4051:28" pos:end="4051:28">0</literal></expr>]</index></name> <operator pos:start="4051:31" pos:end="4051:32">!=</operator> <literal type="char" pos:start="4051:34" pos:end="4051:37">'\0'</literal></expr>)</condition> <block pos:start="4051:40" pos:end="4057:5">{<block_content pos:start="4052:9" pos:end="4056:41">
        <if_stmt pos:start="4052:9" pos:end="4055:53"><if pos:start="4052:9" pos:end="4053:29">if <condition pos:start="4052:12" pos:end="4052:45">(<expr pos:start="4052:13" pos:end="4052:44"><operator pos:start="4052:13" pos:end="4052:13">!</operator><call pos:start="4052:14" pos:end="4052:44"><name pos:start="4052:14" pos:end="4052:19">strcmp</name><argument_list pos:start="4052:20" pos:end="4052:44">(<argument pos:start="4052:21" pos:end="4052:38"><expr pos:start="4052:21" pos:end="4052:38"><name pos:start="4052:21" pos:end="4052:38"><name pos:start="4052:21" pos:end="4052:26">config</name><operator pos:start="4052:27" pos:end="4052:27">.</operator><name pos:start="4052:28" pos:end="4052:38">logfilename</name></name></expr></argument>, <argument pos:start="4052:41" pos:end="4052:43"><expr pos:start="4052:41" pos:end="4052:43"><literal type="string" pos:start="4052:41" pos:end="4052:43">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4053:13" pos:end="4053:29"><block_content pos:start="4053:13" pos:end="4053:29">
            <expr_stmt pos:start="4053:13" pos:end="4053:29"><expr pos:start="4053:13" pos:end="4053:28"><name pos:start="4053:13" pos:end="4053:19">logfile</name> <operator pos:start="4053:21" pos:end="4053:21">=</operator> <name pos:start="4053:23" pos:end="4053:28">stdout</name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="4054:9" pos:end="4055:53">else<block type="pseudo" pos:start="4055:13" pos:end="4055:53"><block_content pos:start="4055:13" pos:end="4055:53">
            <expr_stmt pos:start="4055:13" pos:end="4055:53"><expr pos:start="4055:13" pos:end="4055:52"><name pos:start="4055:13" pos:end="4055:19">logfile</name> <operator pos:start="4055:21" pos:end="4055:21">=</operator> <call pos:start="4055:23" pos:end="4055:52"><name pos:start="4055:23" pos:end="4055:27">fopen</name><argument_list pos:start="4055:28" pos:end="4055:52">(<argument pos:start="4055:29" pos:end="4055:46"><expr pos:start="4055:29" pos:end="4055:46"><name pos:start="4055:29" pos:end="4055:46"><name pos:start="4055:29" pos:end="4055:34">config</name><operator pos:start="4055:35" pos:end="4055:35">.</operator><name pos:start="4055:36" pos:end="4055:46">logfilename</name></name></expr></argument>, <argument pos:start="4055:49" pos:end="4055:51"><expr pos:start="4055:49" pos:end="4055:51"><literal type="string" pos:start="4055:49" pos:end="4055:51">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt pos:start="4056:9" pos:end="4056:41"><expr pos:start="4056:9" pos:end="4056:40"><call pos:start="4056:9" pos:end="4056:40"><name pos:start="4056:9" pos:end="4056:27">av_log_set_callback</name><argument_list pos:start="4056:28" pos:end="4056:40">(<argument pos:start="4056:29" pos:end="4056:39"><expr pos:start="4056:29" pos:end="4056:39"><name pos:start="4056:29" pos:end="4056:39">http_av_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="4059:5" pos:end="4059:25"><expr pos:start="4059:5" pos:end="4059:24"><call pos:start="4059:5" pos:end="4059:24"><name pos:start="4059:5" pos:end="4059:22">build_file_streams</name><argument_list pos:start="4059:23" pos:end="4059:24">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="4061:5" pos:end="4064:5"><if pos:start="4061:5" pos:end="4064:5">if <condition pos:start="4061:8" pos:end="4061:33">(<expr pos:start="4061:9" pos:end="4061:32"><call pos:start="4061:9" pos:end="4061:28"><name pos:start="4061:9" pos:end="4061:26">build_feed_streams</name><argument_list pos:start="4061:27" pos:end="4061:28">()</argument_list></call> <operator pos:start="4061:30" pos:end="4061:30">&lt;</operator> <literal type="number" pos:start="4061:32" pos:end="4061:32">0</literal></expr>)</condition> <block pos:start="4061:35" pos:end="4064:5">{<block_content pos:start="4062:9" pos:end="4063:18">
        <expr_stmt pos:start="4062:9" pos:end="4062:51"><expr pos:start="4062:9" pos:end="4062:50"><call pos:start="4062:9" pos:end="4062:50"><name pos:start="4062:9" pos:end="4062:16">http_log</name><argument_list pos:start="4062:17" pos:end="4062:50">(<argument pos:start="4062:18" pos:end="4062:49"><expr pos:start="4062:18" pos:end="4062:49"><literal type="string" pos:start="4062:18" pos:end="4062:49">"Could not setup feed streams\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="4063:9" pos:end="4063:18">goto <name pos:start="4063:14" pos:end="4063:17">bail</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="4066:5" pos:end="4066:24"><expr pos:start="4066:5" pos:end="4066:23"><call pos:start="4066:5" pos:end="4066:23"><name pos:start="4066:5" pos:end="4066:21">compute_bandwidth</name><argument_list pos:start="4066:22" pos:end="4066:23">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="4068:5" pos:end="4068:21">/* signal init */</comment>
    <expr_stmt pos:start="4069:5" pos:end="4069:29"><expr pos:start="4069:5" pos:end="4069:28"><call pos:start="4069:5" pos:end="4069:28"><name pos:start="4069:5" pos:end="4069:10">signal</name><argument_list pos:start="4069:11" pos:end="4069:28">(<argument pos:start="4069:12" pos:end="4069:18"><expr pos:start="4069:12" pos:end="4069:18"><name pos:start="4069:12" pos:end="4069:18">SIGPIPE</name></expr></argument>, <argument pos:start="4069:21" pos:end="4069:27"><expr pos:start="4069:21" pos:end="4069:27"><name pos:start="4069:21" pos:end="4069:27">SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="4071:5" pos:end="4074:5"><if pos:start="4071:5" pos:end="4074:5">if <condition pos:start="4071:8" pos:end="4071:26">(<expr pos:start="4071:9" pos:end="4071:25"><call pos:start="4071:9" pos:end="4071:21"><name pos:start="4071:9" pos:end="4071:19">http_server</name><argument_list pos:start="4071:20" pos:end="4071:21">()</argument_list></call> <operator pos:start="4071:23" pos:end="4071:23">&lt;</operator> <literal type="number" pos:start="4071:25" pos:end="4071:25">0</literal></expr>)</condition> <block pos:start="4071:28" pos:end="4074:5">{<block_content pos:start="4072:9" pos:end="4073:18">
        <expr_stmt pos:start="4072:9" pos:end="4072:45"><expr pos:start="4072:9" pos:end="4072:44"><call pos:start="4072:9" pos:end="4072:44"><name pos:start="4072:9" pos:end="4072:16">http_log</name><argument_list pos:start="4072:17" pos:end="4072:44">(<argument pos:start="4072:18" pos:end="4072:43"><expr pos:start="4072:18" pos:end="4072:43"><literal type="string" pos:start="4072:18" pos:end="4072:43">"Could not start server\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="4073:9" pos:end="4073:18">goto <name pos:start="4073:14" pos:end="4073:17">bail</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="4076:5" pos:end="4076:21"><expr pos:start="4076:5" pos:end="4076:20"><name pos:start="4076:5" pos:end="4076:7">ret</name><operator pos:start="4076:8" pos:end="4076:8">=</operator><name pos:start="4076:9" pos:end="4076:20">EXIT_SUCCESS</name></expr>;</expr_stmt>

<label pos:start="4078:1" pos:end="4078:5"><name pos:start="4078:1" pos:end="4078:4">bail</name>:</label>
    <expr_stmt pos:start="4079:5" pos:end="4079:32"><expr pos:start="4079:5" pos:end="4079:31"><call pos:start="4079:5" pos:end="4079:31"><name pos:start="4079:5" pos:end="4079:12">av_freep</name> <argument_list pos:start="4079:14" pos:end="4079:31">(<argument pos:start="4079:15" pos:end="4079:30"><expr pos:start="4079:15" pos:end="4079:30"><operator pos:start="4079:15" pos:end="4079:15">&amp;</operator><name pos:start="4079:16" pos:end="4079:30"><name pos:start="4079:16" pos:end="4079:21">config</name><operator pos:start="4079:22" pos:end="4079:22">.</operator><name pos:start="4079:23" pos:end="4079:30">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="4080:5" pos:end="4080:30"><expr pos:start="4080:5" pos:end="4080:29"><call pos:start="4080:5" pos:end="4080:29"><name pos:start="4080:5" pos:end="4080:27">avformat_network_deinit</name><argument_list pos:start="4080:28" pos:end="4080:29">()</argument_list></call></expr>;</expr_stmt>
    <return pos:start="4081:5" pos:end="4081:15">return <expr pos:start="4081:12" pos:end="4081:14"><name pos:start="4081:12" pos:end="4081:14">ret</name></expr>;</return>
</block_content>}</block></function>
</unit>