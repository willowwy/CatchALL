1 @@ testCode/CVE-2017-3735_CWE-119_068b963bb7afc57f5bdd723de0dd15e7795d5822_v3_addr.c_OLD.c @@ length_from_afi @@ 879 @@ ['f->addressFamily->length', 'f->addressFamily->data', 'f', 'f->addressFamily'] @@ {addr}
int X509v3_addr_canonize(IPAddrBlocks *addr) location: 865 cross_layer: 1 file: v3_addr.c
int i ; location: 867 cross_layer: 1 file: v3_addr.c
for (i = 0; i < sk_IPAddressFamily_num(addr); i++) location: 868 cross_layer: 1 file: v3_addr.c
sk_IPAddressFamily_sort ( addr ); location: 877 cross_layer: 1 file: v3_addr.c    (key_var lines)
OPENSSL_assert ( X509v3_addr_is_canonical ( addr ) ); location: 878 cross_layer: 1 file: v3_addr.c
int X509v3_addr_is_canonical(IPAddrBlocks *addr) location: 681 cross_layer: 2 file: v3_addr.c
if ( addr == NULL )  location: 691 cross_layer: 2 file: v3_addr.c
for (i = 0; i < sk_IPAddressFamily_num(addr) - 1; i++) location: 697 cross_layer: 2 file: v3_addr.c
const IPAddressFamily * a = sk_IPAddressFamily_value ( addr , i ) ; location: 698 cross_layer: 2 file: v3_addr.c
const IPAddressFamily * b = sk_IPAddressFamily_value ( addr , i + 1 ) ; location: 699 cross_layer: 2 file: v3_addr.c
for (i = 0; i < sk_IPAddressFamily_num(addr); i++) location: 707 cross_layer: 2 file: v3_addr.c
IPAddressFamily * f = sk_IPAddressFamily_value ( addr , i ) ; location: 708 cross_layer: 2 file: v3_addr.c
int length = length_from_afi ( X509v3_addr_get_afi ( f ) ) ; location: 709 cross_layer: 2 file: v3_addr.c
unsigned int X509v3_addr_get_afi(const IPAddressFamily *f) location: 85 cross_layer: 3 file: v3_addr.c
return ( f -> addressFamily -> data [ 0 ] << 8 ) | f -> addressFamily -> data [ 1 ] ; location: 90 cross_layer: 3 file: v3_addr.c
if ( f == NULL || f -> ipAddressChoice == NULL )  location: 715 cross_layer: 2 file: v3_addr.c
switch ( f -> ipAddressChoice -> type )  location: 717 cross_layer: 2 file: v3_addr.c
aors = f -> ipAddressChoice -> u . addressesOrRanges; location: 729 cross_layer: 2 file: v3_addr.c
if ( sk_IPAddressOrRange_num ( aors ) == 0 )  location: 730 cross_layer: 2 file: v3_addr.c
for (j = 0; j < sk_IPAddressOrRange_num(aors) - 1; j++) location: 732 cross_layer: 2 file: v3_addr.c
IPAddressOrRange * a = sk_IPAddressOrRange_value ( aors , j ) ; location: 733 cross_layer: 2 file: v3_addr.c
IPAddressOrRange * b = sk_IPAddressOrRange_value ( aors , j + 1 ) ; location: 734 cross_layer: 2 file: v3_addr.c
if ( ! extract_min_max ( a , a_min , a_max , length ) || ! extract_min_max ( b , b_min , b_max , length ) )  location: 736 cross_layer: 2 file: v3_addr.c
static int extract_min_max(IPAddressOrRange *aor,
unsigned char *min, unsigned char *max, int length) location: 624 cross_layer: 3 file: v3_addr.c
if ( aor == NULL || min == NULL || max == NULL )  location: 626 cross_layer: 3 file: v3_addr.c
switch ( aor -> type )  location: 628 cross_layer: 3 file: v3_addr.c
return ( addr_expand ( min , aor -> u . addressPrefix , length , 0x00 ) && addr_expand ( max , aor -> u . addressPrefix , length , 0xFF ) ) ; location: 630 cross_layer: 3 file: v3_addr.c
return ( addr_expand ( min , aor -> u . addressRange -> min , length , 0x00 ) && addr_expand ( max , aor -> u . addressRange -> max , length , 0xFF ) ) ; location: 633 cross_layer: 3 file: v3_addr.c
static int extract_min_max(IPAddressOrRange *aor,
unsigned char *min, unsigned char *max, int length) location: 624 cross_layer: 3 file: v3_addr.c
if ( aor == NULL || min == NULL || max == NULL )  location: 626 cross_layer: 3 file: v3_addr.c
switch ( aor -> type )  location: 628 cross_layer: 3 file: v3_addr.c
return ( addr_expand ( min , aor -> u . addressPrefix , length , 0x00 ) && addr_expand ( max , aor -> u . addressPrefix , length , 0xFF ) ) ; location: 630 cross_layer: 3 file: v3_addr.c
return ( addr_expand ( min , aor -> u . addressRange -> min , length , 0x00 ) && addr_expand ( max , aor -> u . addressRange -> max , length , 0xFF ) ) ; location: 633 cross_layer: 3 file: v3_addr.c
if ( memcmp ( a_min , b_min , length ) >= 0 || memcmp ( a_min , a_max , length ) > 0 || memcmp ( b_min , b_max , length ) > 0 )  location: 743 cross_layer: 2 file: v3_addr.c
for (k = length - 1; k >= 0 && b_min[k]-- == 0x00; k--) ; location: 752 cross_layer: 2 file: v3_addr.c
if ( memcmp ( a_max , b_min , length ) >= 0 )  location: 753 cross_layer: 2 file: v3_addr.c
if ( a -> type == IPAddressOrRange_addressRange && range_should_be_prefix ( a_min , a_max , length ) >= 0 )  location: 759 cross_layer: 2 file: v3_addr.c
static int range_should_be_prefix(const unsigned char *min,
const unsigned char *max, const int length) location: 338 cross_layer: 3 file: v3_addr.c
OPENSSL_assert ( memcmp ( min , max , length ) <= 0 ); location: 343 cross_layer: 3 file: v3_addr.c
for (i = 0; i < length && min[i] == max[i]; i++) ; location: 344 cross_layer: 3 file: v3_addr.c
for (j = length - 1; j >= 0 && min[j] == 0x00 && max[j] == 0xFF; j--) ; location: 345 cross_layer: 3 file: v3_addr.c
if ( i < j )  location: 346 cross_layer: 3 file: v3_addr.c
if ( i > j )  location: 348 cross_layer: 3 file: v3_addr.c
mask = min [ i ] ^ max [ i ]; location: 350 cross_layer: 3 file: v3_addr.c
switch ( mask )  location: 351 cross_layer: 3 file: v3_addr.c
if ( ( min [ i ] & mask ) != 0 || ( max [ i ] & mask ) != mask )  location: 376 cross_layer: 3 file: v3_addr.c
return i * 8 + j ; location: 379 cross_layer: 3 file: v3_addr.c
j = sk_IPAddressOrRange_num ( aors ) - 1; location: 768 cross_layer: 2 file: v3_addr.c
IPAddressOrRange * a = sk_IPAddressOrRange_value ( aors , j ) ; location: 770 cross_layer: 2 file: v3_addr.c
if ( a != NULL && a -> type == IPAddressOrRange_addressRange )  location: 771 cross_layer: 2 file: v3_addr.c
if ( ! extract_min_max ( a , a_min , a_max , length ) )  location: 772 cross_layer: 2 file: v3_addr.c
static int extract_min_max(IPAddressOrRange *aor,
unsigned char *min, unsigned char *max, int length) location: 624 cross_layer: 3 file: v3_addr.c
if ( aor == NULL || min == NULL || max == NULL )  location: 626 cross_layer: 3 file: v3_addr.c
switch ( aor -> type )  location: 628 cross_layer: 3 file: v3_addr.c
return ( addr_expand ( min , aor -> u . addressPrefix , length , 0x00 ) && addr_expand ( max , aor -> u . addressPrefix , length , 0xFF ) ) ; location: 630 cross_layer: 3 file: v3_addr.c
return ( addr_expand ( min , aor -> u . addressRange -> min , length , 0x00 ) && addr_expand ( max , aor -> u . addressRange -> max , length , 0xFF ) ) ; location: 633 cross_layer: 3 file: v3_addr.c
if ( memcmp ( a_min , a_max , length ) > 0 || range_should_be_prefix ( a_min , a_max , length ) >= 0 )  location: 774 cross_layer: 2 file: v3_addr.c
static int range_should_be_prefix(const unsigned char *min,
const unsigned char *max, const int length) location: 338 cross_layer: 3 file: v3_addr.c
OPENSSL_assert ( memcmp ( min , max , length ) <= 0 ); location: 343 cross_layer: 3 file: v3_addr.c
if ( i < j )  location: 346 cross_layer: 3 file: v3_addr.c
if ( i > j )  location: 348 cross_layer: 3 file: v3_addr.c
mask = min [ i ] ^ max [ i ]; location: 350 cross_layer: 3 file: v3_addr.c
switch ( mask )  location: 351 cross_layer: 3 file: v3_addr.c
if ( ( min [ i ] & mask ) != 0 || ( max [ i ] & mask ) != mask )  location: 376 cross_layer: 3 file: v3_addr.c
return i * 8 + j ; location: 379 cross_layer: 3 file: v3_addr.c
------------------------------
