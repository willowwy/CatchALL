1 @@ testCode/CVE-2018-8740_CWE-476_1e9c47be1e81e94a67f788c98fd70e8bf70e3746_prepare.c_OLD.c @@ corruptSchema @@ 32 @@ ['zExtra[0]'] @@ {pData, zObj, zExtra, db, z}
static void corruptSchema(
InitData *pData,     /* Initialization context */
const char *zObj,    /* Object being parsed at the point of error */
const char *zExtra   /* Error information */
) location: 26 cross_layer: 1 file: prepare.c
sqlite3 * db = pData -> db ; location: 27 cross_layer: 1 file: prepare.c
if ( ! db -> mallocFailed && ( db -> flags & SQLITE_WriteSchema ) == 0 )  location: 28 cross_layer: 1 file: prepare.c
char * z ; location: 29 cross_layer: 1 file: prepare.c
if ( zObj == 0 )  location: 30 cross_layer: 1 file: prepare.c
zObj = "?"; location: 30 cross_layer: 1 file: prepare.c
z = sqlite3MPrintf ( db , "malformed database schema (%s)" , zObj ); location: 31 cross_layer: 1 file: prepare.c
if ( zExtra && zExtra [ 0 ] )  location: 32 cross_layer: 1 file: prepare.c    (key_var lines)
z = sqlite3MPrintf ( db , "%z - %s" , z , zExtra ); location: 32 cross_layer: 1 file: prepare.c
* pData -> pzErrMsg = z; location: 34 cross_layer: 1 file: prepare.c
pData -> rc = db -> mallocFailed ? SQLITE_NOMEM_BKPT : SQLITE_CORRUPT_BKPT; location: 36 cross_layer: 1 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , 0 ); location: 103 cross_layer: 2 file: prepare.c
pIndex = sqlite3FindIndex ( db , argv [ 0 ] , db -> aDb [ iDb ] . zDbSName ); location: 112 cross_layer: 2 file: prepare.c
if ( pIndex == 0 )  location: 113 cross_layer: 2 file: prepare.c
if ( sqlite3GetInt32 ( argv [ 1 ] , & pIndex -> tnum ) == 0 )  location: 120 cross_layer: 2 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , "invalid rootpage" ); location: 121 cross_layer: 2 file: prepare.c
sqlite3InitCallback ( & initData , 3 , ( char * * ) azArg , 0 ); location: 169 cross_layer: 3 file: prepare.c
if ( initData . rc )  location: 170 cross_layer: 3 file: prepare.c
rc = initData . rc; location: 171 cross_layer: 3 file: prepare.c
rc = sqlite3_exec ( db , zSql , sqlite3InitCallback , & initData , 0 ); location: 300 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK )  location: 305 cross_layer: 3 file: prepare.c
rc = initData . rc; location: 305 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK )  location: 308 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK || ( db -> flags & SQLITE_WriteSchema ) )  location: 317 cross_layer: 3 file: prepare.c
if ( rc )  location: 341 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_NOMEM || rc == SQLITE_IOERR_NOMEM )  location: 342 cross_layer: 3 file: prepare.c
return rc ; location: 348 cross_layer: 3 file: prepare.c
rc = sqlite3InitOne ( db , i , pzErrMsg ); location: 378 cross_layer: 4 file: prepare.c
if ( rc )  location: 379 cross_layer: 4 file: prepare.c
return rc ; location: 379 cross_layer: 4 file: prepare.c
------------------------------
2 @@ testCode/CVE-2018-8740_CWE-476_1e9c47be1e81e94a67f788c98fd70e8bf70e3746_prepare.c_OLD.c @@ corruptSchema @@ 32 @@ ['zExtra[0]'] @@ {pData, zObj, zExtra, db, z}
static void corruptSchema(
InitData *pData,     /* Initialization context */
const char *zObj,    /* Object being parsed at the point of error */
const char *zExtra   /* Error information */
) location: 26 cross_layer: 1 file: prepare.c
sqlite3 * db = pData -> db ; location: 27 cross_layer: 1 file: prepare.c
if ( ! db -> mallocFailed && ( db -> flags & SQLITE_WriteSchema ) == 0 )  location: 28 cross_layer: 1 file: prepare.c
char * z ; location: 29 cross_layer: 1 file: prepare.c
if ( zObj == 0 )  location: 30 cross_layer: 1 file: prepare.c
zObj = "?"; location: 30 cross_layer: 1 file: prepare.c
z = sqlite3MPrintf ( db , "malformed database schema (%s)" , zObj ); location: 31 cross_layer: 1 file: prepare.c
* pData -> pzErrMsg = z; location: 34 cross_layer: 1 file: prepare.c    (key_var lines)
pData -> rc = db -> mallocFailed ? SQLITE_NOMEM_BKPT : SQLITE_CORRUPT_BKPT; location: 36 cross_layer: 1 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , 0 ); location: 103 cross_layer: 2 file: prepare.c
pIndex = sqlite3FindIndex ( db , argv [ 0 ] , db -> aDb [ iDb ] . zDbSName ); location: 112 cross_layer: 2 file: prepare.c
if ( pIndex == 0 )  location: 113 cross_layer: 2 file: prepare.c
if ( sqlite3GetInt32 ( argv [ 1 ] , & pIndex -> tnum ) == 0 )  location: 120 cross_layer: 2 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , "invalid rootpage" ); location: 121 cross_layer: 2 file: prepare.c
sqlite3InitCallback ( & initData , 3 , ( char * * ) azArg , 0 ); location: 169 cross_layer: 3 file: prepare.c
if ( initData . rc )  location: 170 cross_layer: 3 file: prepare.c
rc = initData . rc; location: 171 cross_layer: 3 file: prepare.c
rc = sqlite3_exec ( db , zSql , sqlite3InitCallback , & initData , 0 ); location: 300 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK )  location: 305 cross_layer: 3 file: prepare.c
rc = initData . rc; location: 305 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK )  location: 308 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK || ( db -> flags & SQLITE_WriteSchema ) )  location: 317 cross_layer: 3 file: prepare.c
if ( rc )  location: 341 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_NOMEM || rc == SQLITE_IOERR_NOMEM )  location: 342 cross_layer: 3 file: prepare.c
return rc ; location: 348 cross_layer: 3 file: prepare.c
rc = sqlite3InitOne ( db , 0 , pzErrMsg ); location: 372 cross_layer: 4 file: prepare.c
if ( rc )  location: 373 cross_layer: 4 file: prepare.c
return rc ; location: 373 cross_layer: 4 file: prepare.c
------------------------------
3 @@ testCode/CVE-2018-8740_CWE-476_1e9c47be1e81e94a67f788c98fd70e8bf70e3746_prepare.c_OLD.c @@ corruptSchema @@ 32 @@ ['zExtra[0]'] @@ {pData, zObj, zExtra, db, z}
static void corruptSchema(
InitData *pData,     /* Initialization context */
const char *zObj,    /* Object being parsed at the point of error */
const char *zExtra   /* Error information */
) location: 26 cross_layer: 1 file: prepare.c
sqlite3 * db = pData -> db ; location: 27 cross_layer: 1 file: prepare.c
if ( ! db -> mallocFailed && ( db -> flags & SQLITE_WriteSchema ) == 0 )  location: 28 cross_layer: 1 file: prepare.c
char * z ; location: 29 cross_layer: 1 file: prepare.c
if ( zObj == 0 )  location: 30 cross_layer: 1 file: prepare.c
zObj = "?"; location: 30 cross_layer: 1 file: prepare.c
z = sqlite3MPrintf ( db , "malformed database schema (%s)" , zObj ); location: 31 cross_layer: 1 file: prepare.c
* pData -> pzErrMsg = z; location: 34 cross_layer: 1 file: prepare.c    (key_var lines)
pData -> rc = db -> mallocFailed ? SQLITE_NOMEM_BKPT : SQLITE_CORRUPT_BKPT; location: 36 cross_layer: 1 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , 0 ); location: 68 cross_layer: 2 file: prepare.c
u8 saved_iDb = db -> init . iDb ; location: 76 cross_layer: 2 file: prepare.c
assert ( db -> init . busy ); location: 80 cross_layer: 2 file: prepare.c
db -> init . iDb = iDb; location: 81 cross_layer: 2 file: prepare.c
db -> init . newTnum = sqlite3Atoi ( argv [ 1 ] ); location: 82 cross_layer: 2 file: prepare.c
db -> init . orphanTrigger = 0; location: 83 cross_layer: 2 file: prepare.c
TESTONLY ( rcp = ) sqlite3_prepare ( db , argv [ 2 ] , - 1 , & pStmt , 0 ) location: 84 cross_layer: 2 file: prepare.c
int sqlite3_prepare(
sqlite3 *db,              /* Database handle. */
const char *zSql,         /* UTF-8 encoded SQL statement. */
int nBytes,               /* Length of zSql in bytes. */
sqlite3_stmt **ppStmt,    /* OUT: A pointer to the prepared statement */
const char **pzTail       /* OUT: End of parsed string */
) location: 749 cross_layer: 3 file: prepare.c
rc = sqlite3LockAndPrepare ( db , zSql , nBytes , 0 , 0 , ppStmt , pzTail ); location: 751 cross_layer: 3 file: prepare.c
assert ( rc == SQLITE_OK || ppStmt == 0 || * ppStmt == 0 ); location: 752 cross_layer: 3 file: prepare.c
return rc ; location: 753 cross_layer: 3 file: prepare.c
rc = db -> errCode; location: 85 cross_layer: 2 file: prepare.c
assert ( ( rc & 0xFF ) == ( rcp & 0xFF ) ); location: 86 cross_layer: 2 file: prepare.c
db -> init . iDb = saved_iDb; location: 87 cross_layer: 2 file: prepare.c
assert ( saved_iDb == 0 || ( db -> mDbFlags & DBFLAG_Vacuum ) != 0 ); location: 88 cross_layer: 2 file: prepare.c
if ( SQLITE_OK != rc )  location: 89 cross_layer: 2 file: prepare.c
if ( db -> init . orphanTrigger )  location: 90 cross_layer: 2 file: prepare.c
assert ( iDb == 1 ); location: 91 cross_layer: 2 file: prepare.c
pData -> rc = rc; location: 93 cross_layer: 2 file: prepare.c
if ( rc == SQLITE_NOMEM )  location: 94 cross_layer: 2 file: prepare.c
sqlite3OomFault ( db ); location: 95 cross_layer: 2 file: prepare.c
if ( rc != SQLITE_INTERRUPT && ( rc & 0xFF ) != SQLITE_LOCKED )  location: 96 cross_layer: 2 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , sqlite3_errmsg ( db ) ); location: 97 cross_layer: 2 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , 0 ); location: 103 cross_layer: 2 file: prepare.c
pIndex = sqlite3FindIndex ( db , argv [ 0 ] , db -> aDb [ iDb ] . zDbSName ); location: 112 cross_layer: 2 file: prepare.c
if ( pIndex == 0 )  location: 113 cross_layer: 2 file: prepare.c
if ( sqlite3GetInt32 ( argv [ 1 ] , & pIndex -> tnum ) == 0 )  location: 120 cross_layer: 2 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , "invalid rootpage" ); location: 121 cross_layer: 2 file: prepare.c
sqlite3InitCallback ( & initData , 3 , ( char * * ) azArg , 0 ); location: 169 cross_layer: 3 file: prepare.c
if ( initData . rc )  location: 170 cross_layer: 3 file: prepare.c
rc = initData . rc; location: 171 cross_layer: 3 file: prepare.c
rc = sqlite3_exec ( db , zSql , sqlite3InitCallback , & initData , 0 ); location: 300 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK )  location: 305 cross_layer: 3 file: prepare.c
rc = initData . rc; location: 305 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK )  location: 308 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK || ( db -> flags & SQLITE_WriteSchema ) )  location: 317 cross_layer: 3 file: prepare.c
if ( rc )  location: 341 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_NOMEM || rc == SQLITE_IOERR_NOMEM )  location: 342 cross_layer: 3 file: prepare.c
return rc ; location: 348 cross_layer: 3 file: prepare.c
rc = sqlite3InitOne ( db , i , pzErrMsg ); location: 378 cross_layer: 4 file: prepare.c
if ( rc )  location: 379 cross_layer: 4 file: prepare.c
return rc ; location: 379 cross_layer: 4 file: prepare.c
------------------------------
4 @@ testCode/CVE-2018-8740_CWE-476_1e9c47be1e81e94a67f788c98fd70e8bf70e3746_prepare.c_OLD.c @@ corruptSchema @@ 32 @@ ['zExtra[0]'] @@ {pData, zObj, zExtra, db, z}
static void corruptSchema(
InitData *pData,     /* Initialization context */
const char *zObj,    /* Object being parsed at the point of error */
const char *zExtra   /* Error information */
) location: 26 cross_layer: 1 file: prepare.c
sqlite3 * db = pData -> db ; location: 27 cross_layer: 1 file: prepare.c
if ( ! db -> mallocFailed && ( db -> flags & SQLITE_WriteSchema ) == 0 )  location: 28 cross_layer: 1 file: prepare.c
char * z ; location: 29 cross_layer: 1 file: prepare.c
if ( zObj == 0 )  location: 30 cross_layer: 1 file: prepare.c
zObj = "?"; location: 30 cross_layer: 1 file: prepare.c
z = sqlite3MPrintf ( db , "malformed database schema (%s)" , zObj ); location: 31 cross_layer: 1 file: prepare.c
* pData -> pzErrMsg = z; location: 34 cross_layer: 1 file: prepare.c    (key_var lines)
pData -> rc = db -> mallocFailed ? SQLITE_NOMEM_BKPT : SQLITE_CORRUPT_BKPT; location: 36 cross_layer: 1 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , 0 ); location: 68 cross_layer: 2 file: prepare.c
u8 saved_iDb = db -> init . iDb ; location: 76 cross_layer: 2 file: prepare.c
assert ( db -> init . busy ); location: 80 cross_layer: 2 file: prepare.c
db -> init . iDb = iDb; location: 81 cross_layer: 2 file: prepare.c
db -> init . newTnum = sqlite3Atoi ( argv [ 1 ] ); location: 82 cross_layer: 2 file: prepare.c
db -> init . orphanTrigger = 0; location: 83 cross_layer: 2 file: prepare.c
TESTONLY ( rcp = ) sqlite3_prepare ( db , argv [ 2 ] , - 1 , & pStmt , 0 ) location: 84 cross_layer: 2 file: prepare.c
int sqlite3_prepare(
sqlite3 *db,              /* Database handle. */
const char *zSql,         /* UTF-8 encoded SQL statement. */
int nBytes,               /* Length of zSql in bytes. */
sqlite3_stmt **ppStmt,    /* OUT: A pointer to the prepared statement */
const char **pzTail       /* OUT: End of parsed string */
) location: 749 cross_layer: 3 file: prepare.c
rc = sqlite3LockAndPrepare ( db , zSql , nBytes , 0 , 0 , ppStmt , pzTail ); location: 751 cross_layer: 3 file: prepare.c
assert ( rc == SQLITE_OK || ppStmt == 0 || * ppStmt == 0 ); location: 752 cross_layer: 3 file: prepare.c
return rc ; location: 753 cross_layer: 3 file: prepare.c
rc = db -> errCode; location: 85 cross_layer: 2 file: prepare.c
assert ( ( rc & 0xFF ) == ( rcp & 0xFF ) ); location: 86 cross_layer: 2 file: prepare.c
db -> init . iDb = saved_iDb; location: 87 cross_layer: 2 file: prepare.c
assert ( saved_iDb == 0 || ( db -> mDbFlags & DBFLAG_Vacuum ) != 0 ); location: 88 cross_layer: 2 file: prepare.c
if ( SQLITE_OK != rc )  location: 89 cross_layer: 2 file: prepare.c
if ( db -> init . orphanTrigger )  location: 90 cross_layer: 2 file: prepare.c
assert ( iDb == 1 ); location: 91 cross_layer: 2 file: prepare.c
pData -> rc = rc; location: 93 cross_layer: 2 file: prepare.c
if ( rc == SQLITE_NOMEM )  location: 94 cross_layer: 2 file: prepare.c
sqlite3OomFault ( db ); location: 95 cross_layer: 2 file: prepare.c
if ( rc != SQLITE_INTERRUPT && ( rc & 0xFF ) != SQLITE_LOCKED )  location: 96 cross_layer: 2 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , sqlite3_errmsg ( db ) ); location: 97 cross_layer: 2 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , 0 ); location: 103 cross_layer: 2 file: prepare.c
pIndex = sqlite3FindIndex ( db , argv [ 0 ] , db -> aDb [ iDb ] . zDbSName ); location: 112 cross_layer: 2 file: prepare.c
if ( pIndex == 0 )  location: 113 cross_layer: 2 file: prepare.c
if ( sqlite3GetInt32 ( argv [ 1 ] , & pIndex -> tnum ) == 0 )  location: 120 cross_layer: 2 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , "invalid rootpage" ); location: 121 cross_layer: 2 file: prepare.c
sqlite3InitCallback ( & initData , 3 , ( char * * ) azArg , 0 ); location: 169 cross_layer: 3 file: prepare.c
if ( initData . rc )  location: 170 cross_layer: 3 file: prepare.c
rc = initData . rc; location: 171 cross_layer: 3 file: prepare.c
rc = sqlite3_exec ( db , zSql , sqlite3InitCallback , & initData , 0 ); location: 300 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK )  location: 305 cross_layer: 3 file: prepare.c
rc = initData . rc; location: 305 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK )  location: 308 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK || ( db -> flags & SQLITE_WriteSchema ) )  location: 317 cross_layer: 3 file: prepare.c
if ( rc )  location: 341 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_NOMEM || rc == SQLITE_IOERR_NOMEM )  location: 342 cross_layer: 3 file: prepare.c
return rc ; location: 348 cross_layer: 3 file: prepare.c
rc = sqlite3InitOne ( db , 0 , pzErrMsg ); location: 372 cross_layer: 4 file: prepare.c
if ( rc )  location: 373 cross_layer: 4 file: prepare.c
return rc ; location: 373 cross_layer: 4 file: prepare.c
------------------------------
5 @@ testCode/CVE-2018-8740_CWE-476_1e9c47be1e81e94a67f788c98fd70e8bf70e3746_prepare.c_OLD.c @@ corruptSchema @@ 32 @@ ['zExtra[0]'] @@ {pData, zObj, zExtra, db, z}
static void corruptSchema(
InitData *pData,     /* Initialization context */
const char *zObj,    /* Object being parsed at the point of error */
const char *zExtra   /* Error information */
) location: 26 cross_layer: 1 file: prepare.c
sqlite3 * db = pData -> db ; location: 27 cross_layer: 1 file: prepare.c
if ( ! db -> mallocFailed && ( db -> flags & SQLITE_WriteSchema ) == 0 )  location: 28 cross_layer: 1 file: prepare.c
char * z ; location: 29 cross_layer: 1 file: prepare.c
if ( zObj == 0 )  location: 30 cross_layer: 1 file: prepare.c
zObj = "?"; location: 30 cross_layer: 1 file: prepare.c
z = sqlite3MPrintf ( db , "malformed database schema (%s)" , zObj ); location: 31 cross_layer: 1 file: prepare.c
* pData -> pzErrMsg = z; location: 34 cross_layer: 1 file: prepare.c    (key_var lines)
pData -> rc = db -> mallocFailed ? SQLITE_NOMEM_BKPT : SQLITE_CORRUPT_BKPT; location: 36 cross_layer: 1 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , 0 ); location: 61 cross_layer: 2 file: prepare.c
assert ( iDb >= 0 && iDb < db -> nDb ); location: 65 cross_layer: 2 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , 0 ); location: 68 cross_layer: 2 file: prepare.c
u8 saved_iDb = db -> init . iDb ; location: 76 cross_layer: 2 file: prepare.c
assert ( db -> init . busy ); location: 80 cross_layer: 2 file: prepare.c
db -> init . iDb = iDb; location: 81 cross_layer: 2 file: prepare.c
db -> init . newTnum = sqlite3Atoi ( argv [ 1 ] ); location: 82 cross_layer: 2 file: prepare.c
db -> init . orphanTrigger = 0; location: 83 cross_layer: 2 file: prepare.c
TESTONLY ( rcp = ) sqlite3_prepare ( db , argv [ 2 ] , - 1 , & pStmt , 0 ) location: 84 cross_layer: 2 file: prepare.c
int sqlite3_prepare(
sqlite3 *db,              /* Database handle. */
const char *zSql,         /* UTF-8 encoded SQL statement. */
int nBytes,               /* Length of zSql in bytes. */
sqlite3_stmt **ppStmt,    /* OUT: A pointer to the prepared statement */
const char **pzTail       /* OUT: End of parsed string */
) location: 749 cross_layer: 3 file: prepare.c
rc = sqlite3LockAndPrepare ( db , zSql , nBytes , 0 , 0 , ppStmt , pzTail ); location: 751 cross_layer: 3 file: prepare.c
assert ( rc == SQLITE_OK || ppStmt == 0 || * ppStmt == 0 ); location: 752 cross_layer: 3 file: prepare.c
return rc ; location: 753 cross_layer: 3 file: prepare.c
rc = db -> errCode; location: 85 cross_layer: 2 file: prepare.c
assert ( ( rc & 0xFF ) == ( rcp & 0xFF ) ); location: 86 cross_layer: 2 file: prepare.c
db -> init . iDb = saved_iDb; location: 87 cross_layer: 2 file: prepare.c
assert ( saved_iDb == 0 || ( db -> mDbFlags & DBFLAG_Vacuum ) != 0 ); location: 88 cross_layer: 2 file: prepare.c
if ( SQLITE_OK != rc )  location: 89 cross_layer: 2 file: prepare.c
if ( db -> init . orphanTrigger )  location: 90 cross_layer: 2 file: prepare.c
assert ( iDb == 1 ); location: 91 cross_layer: 2 file: prepare.c
pData -> rc = rc; location: 93 cross_layer: 2 file: prepare.c
if ( rc == SQLITE_NOMEM )  location: 94 cross_layer: 2 file: prepare.c
sqlite3OomFault ( db ); location: 95 cross_layer: 2 file: prepare.c
if ( rc != SQLITE_INTERRUPT && ( rc & 0xFF ) != SQLITE_LOCKED )  location: 96 cross_layer: 2 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , sqlite3_errmsg ( db ) ); location: 97 cross_layer: 2 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , 0 ); location: 103 cross_layer: 2 file: prepare.c
pIndex = sqlite3FindIndex ( db , argv [ 0 ] , db -> aDb [ iDb ] . zDbSName ); location: 112 cross_layer: 2 file: prepare.c
if ( pIndex == 0 )  location: 113 cross_layer: 2 file: prepare.c
if ( sqlite3GetInt32 ( argv [ 1 ] , & pIndex -> tnum ) == 0 )  location: 120 cross_layer: 2 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , "invalid rootpage" ); location: 121 cross_layer: 2 file: prepare.c
sqlite3InitCallback ( & initData , 3 , ( char * * ) azArg , 0 ); location: 169 cross_layer: 3 file: prepare.c
if ( initData . rc )  location: 170 cross_layer: 3 file: prepare.c
rc = initData . rc; location: 171 cross_layer: 3 file: prepare.c
rc = sqlite3_exec ( db , zSql , sqlite3InitCallback , & initData , 0 ); location: 300 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK )  location: 305 cross_layer: 3 file: prepare.c
rc = initData . rc; location: 305 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK )  location: 308 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK || ( db -> flags & SQLITE_WriteSchema ) )  location: 317 cross_layer: 3 file: prepare.c
if ( rc )  location: 341 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_NOMEM || rc == SQLITE_IOERR_NOMEM )  location: 342 cross_layer: 3 file: prepare.c
return rc ; location: 348 cross_layer: 3 file: prepare.c
rc = sqlite3InitOne ( db , i , pzErrMsg ); location: 378 cross_layer: 4 file: prepare.c
if ( rc )  location: 379 cross_layer: 4 file: prepare.c
return rc ; location: 379 cross_layer: 4 file: prepare.c
------------------------------
6 @@ testCode/CVE-2018-8740_CWE-476_1e9c47be1e81e94a67f788c98fd70e8bf70e3746_prepare.c_OLD.c @@ corruptSchema @@ 32 @@ ['zExtra[0]'] @@ {pData, zObj, zExtra, db, z}
static void corruptSchema(
InitData *pData,     /* Initialization context */
const char *zObj,    /* Object being parsed at the point of error */
const char *zExtra   /* Error information */
) location: 26 cross_layer: 1 file: prepare.c
sqlite3 * db = pData -> db ; location: 27 cross_layer: 1 file: prepare.c
if ( ! db -> mallocFailed && ( db -> flags & SQLITE_WriteSchema ) == 0 )  location: 28 cross_layer: 1 file: prepare.c
char * z ; location: 29 cross_layer: 1 file: prepare.c
if ( zObj == 0 )  location: 30 cross_layer: 1 file: prepare.c
zObj = "?"; location: 30 cross_layer: 1 file: prepare.c
z = sqlite3MPrintf ( db , "malformed database schema (%s)" , zObj ); location: 31 cross_layer: 1 file: prepare.c
* pData -> pzErrMsg = z; location: 34 cross_layer: 1 file: prepare.c    (key_var lines)
pData -> rc = db -> mallocFailed ? SQLITE_NOMEM_BKPT : SQLITE_CORRUPT_BKPT; location: 36 cross_layer: 1 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , 0 ); location: 61 cross_layer: 2 file: prepare.c
assert ( iDb >= 0 && iDb < db -> nDb ); location: 65 cross_layer: 2 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , 0 ); location: 68 cross_layer: 2 file: prepare.c
u8 saved_iDb = db -> init . iDb ; location: 76 cross_layer: 2 file: prepare.c
assert ( db -> init . busy ); location: 80 cross_layer: 2 file: prepare.c
db -> init . iDb = iDb; location: 81 cross_layer: 2 file: prepare.c
db -> init . newTnum = sqlite3Atoi ( argv [ 1 ] ); location: 82 cross_layer: 2 file: prepare.c
db -> init . orphanTrigger = 0; location: 83 cross_layer: 2 file: prepare.c
TESTONLY ( rcp = ) sqlite3_prepare ( db , argv [ 2 ] , - 1 , & pStmt , 0 ) location: 84 cross_layer: 2 file: prepare.c
int sqlite3_prepare(
sqlite3 *db,              /* Database handle. */
const char *zSql,         /* UTF-8 encoded SQL statement. */
int nBytes,               /* Length of zSql in bytes. */
sqlite3_stmt **ppStmt,    /* OUT: A pointer to the prepared statement */
const char **pzTail       /* OUT: End of parsed string */
) location: 749 cross_layer: 3 file: prepare.c
rc = sqlite3LockAndPrepare ( db , zSql , nBytes , 0 , 0 , ppStmt , pzTail ); location: 751 cross_layer: 3 file: prepare.c
assert ( rc == SQLITE_OK || ppStmt == 0 || * ppStmt == 0 ); location: 752 cross_layer: 3 file: prepare.c
return rc ; location: 753 cross_layer: 3 file: prepare.c
rc = db -> errCode; location: 85 cross_layer: 2 file: prepare.c
assert ( ( rc & 0xFF ) == ( rcp & 0xFF ) ); location: 86 cross_layer: 2 file: prepare.c
db -> init . iDb = saved_iDb; location: 87 cross_layer: 2 file: prepare.c
assert ( saved_iDb == 0 || ( db -> mDbFlags & DBFLAG_Vacuum ) != 0 ); location: 88 cross_layer: 2 file: prepare.c
if ( SQLITE_OK != rc )  location: 89 cross_layer: 2 file: prepare.c
if ( db -> init . orphanTrigger )  location: 90 cross_layer: 2 file: prepare.c
assert ( iDb == 1 ); location: 91 cross_layer: 2 file: prepare.c
pData -> rc = rc; location: 93 cross_layer: 2 file: prepare.c
if ( rc == SQLITE_NOMEM )  location: 94 cross_layer: 2 file: prepare.c
sqlite3OomFault ( db ); location: 95 cross_layer: 2 file: prepare.c
if ( rc != SQLITE_INTERRUPT && ( rc & 0xFF ) != SQLITE_LOCKED )  location: 96 cross_layer: 2 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , sqlite3_errmsg ( db ) ); location: 97 cross_layer: 2 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , 0 ); location: 103 cross_layer: 2 file: prepare.c
pIndex = sqlite3FindIndex ( db , argv [ 0 ] , db -> aDb [ iDb ] . zDbSName ); location: 112 cross_layer: 2 file: prepare.c
if ( pIndex == 0 )  location: 113 cross_layer: 2 file: prepare.c
if ( sqlite3GetInt32 ( argv [ 1 ] , & pIndex -> tnum ) == 0 )  location: 120 cross_layer: 2 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , "invalid rootpage" ); location: 121 cross_layer: 2 file: prepare.c
sqlite3InitCallback ( & initData , 3 , ( char * * ) azArg , 0 ); location: 169 cross_layer: 3 file: prepare.c
if ( initData . rc )  location: 170 cross_layer: 3 file: prepare.c
rc = initData . rc; location: 171 cross_layer: 3 file: prepare.c
rc = sqlite3_exec ( db , zSql , sqlite3InitCallback , & initData , 0 ); location: 300 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK )  location: 305 cross_layer: 3 file: prepare.c
rc = initData . rc; location: 305 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK )  location: 308 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK || ( db -> flags & SQLITE_WriteSchema ) )  location: 317 cross_layer: 3 file: prepare.c
if ( rc )  location: 341 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_NOMEM || rc == SQLITE_IOERR_NOMEM )  location: 342 cross_layer: 3 file: prepare.c
return rc ; location: 348 cross_layer: 3 file: prepare.c
rc = sqlite3InitOne ( db , 0 , pzErrMsg ); location: 372 cross_layer: 4 file: prepare.c
if ( rc )  location: 373 cross_layer: 4 file: prepare.c
return rc ; location: 373 cross_layer: 4 file: prepare.c
------------------------------
7 @@ testCode/CVE-2018-8740_CWE-476_1e9c47be1e81e94a67f788c98fd70e8bf70e3746_prepare.c_OLD.c @@ corruptSchema @@ 32 @@ ['zExtra[0]'] @@ {pData, zObj, zExtra, db, z}
static void corruptSchema(
InitData *pData,     /* Initialization context */
const char *zObj,    /* Object being parsed at the point of error */
const char *zExtra   /* Error information */
) location: 26 cross_layer: 1 file: prepare.c
sqlite3 * db = pData -> db ; location: 27 cross_layer: 1 file: prepare.c
if ( ! db -> mallocFailed && ( db -> flags & SQLITE_WriteSchema ) == 0 )  location: 28 cross_layer: 1 file: prepare.c
char * z ; location: 29 cross_layer: 1 file: prepare.c
if ( zObj == 0 )  location: 30 cross_layer: 1 file: prepare.c
zObj = "?"; location: 30 cross_layer: 1 file: prepare.c
z = sqlite3MPrintf ( db , "malformed database schema (%s)" , zObj ); location: 31 cross_layer: 1 file: prepare.c
* pData -> pzErrMsg = z; location: 34 cross_layer: 1 file: prepare.c    (key_var lines)
pData -> rc = db -> mallocFailed ? SQLITE_NOMEM_BKPT : SQLITE_CORRUPT_BKPT; location: 36 cross_layer: 1 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , "invalid rootpage" ); location: 121 cross_layer: 2 file: prepare.c
sqlite3InitCallback ( & initData , 3 , ( char * * ) azArg , 0 ); location: 169 cross_layer: 3 file: prepare.c
if ( initData . rc )  location: 170 cross_layer: 3 file: prepare.c
rc = initData . rc; location: 171 cross_layer: 3 file: prepare.c
rc = sqlite3_exec ( db , zSql , sqlite3InitCallback , & initData , 0 ); location: 300 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK )  location: 305 cross_layer: 3 file: prepare.c
rc = initData . rc; location: 305 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK )  location: 308 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK || ( db -> flags & SQLITE_WriteSchema ) )  location: 317 cross_layer: 3 file: prepare.c
if ( rc )  location: 341 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_NOMEM || rc == SQLITE_IOERR_NOMEM )  location: 342 cross_layer: 3 file: prepare.c
return rc ; location: 348 cross_layer: 3 file: prepare.c
rc = sqlite3InitOne ( db , i , pzErrMsg ); location: 378 cross_layer: 4 file: prepare.c
if ( rc )  location: 379 cross_layer: 4 file: prepare.c
return rc ; location: 379 cross_layer: 4 file: prepare.c
------------------------------
8 @@ testCode/CVE-2018-8740_CWE-476_1e9c47be1e81e94a67f788c98fd70e8bf70e3746_prepare.c_OLD.c @@ corruptSchema @@ 32 @@ ['zExtra[0]'] @@ {pData, zObj, zExtra, db, z}
static void corruptSchema(
InitData *pData,     /* Initialization context */
const char *zObj,    /* Object being parsed at the point of error */
const char *zExtra   /* Error information */
) location: 26 cross_layer: 1 file: prepare.c
sqlite3 * db = pData -> db ; location: 27 cross_layer: 1 file: prepare.c
if ( ! db -> mallocFailed && ( db -> flags & SQLITE_WriteSchema ) == 0 )  location: 28 cross_layer: 1 file: prepare.c
char * z ; location: 29 cross_layer: 1 file: prepare.c
if ( zObj == 0 )  location: 30 cross_layer: 1 file: prepare.c
zObj = "?"; location: 30 cross_layer: 1 file: prepare.c
z = sqlite3MPrintf ( db , "malformed database schema (%s)" , zObj ); location: 31 cross_layer: 1 file: prepare.c
* pData -> pzErrMsg = z; location: 34 cross_layer: 1 file: prepare.c    (key_var lines)
pData -> rc = db -> mallocFailed ? SQLITE_NOMEM_BKPT : SQLITE_CORRUPT_BKPT; location: 36 cross_layer: 1 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , "invalid rootpage" ); location: 121 cross_layer: 2 file: prepare.c
sqlite3InitCallback ( & initData , 3 , ( char * * ) azArg , 0 ); location: 169 cross_layer: 3 file: prepare.c
if ( initData . rc )  location: 170 cross_layer: 3 file: prepare.c
rc = initData . rc; location: 171 cross_layer: 3 file: prepare.c
rc = sqlite3_exec ( db , zSql , sqlite3InitCallback , & initData , 0 ); location: 300 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK )  location: 305 cross_layer: 3 file: prepare.c
rc = initData . rc; location: 305 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK )  location: 308 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK || ( db -> flags & SQLITE_WriteSchema ) )  location: 317 cross_layer: 3 file: prepare.c
if ( rc )  location: 341 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_NOMEM || rc == SQLITE_IOERR_NOMEM )  location: 342 cross_layer: 3 file: prepare.c
return rc ; location: 348 cross_layer: 3 file: prepare.c
rc = sqlite3InitOne ( db , 0 , pzErrMsg ); location: 372 cross_layer: 4 file: prepare.c
if ( rc )  location: 373 cross_layer: 4 file: prepare.c
return rc ; location: 373 cross_layer: 4 file: prepare.c
------------------------------
9 @@ testCode/CVE-2018-8740_CWE-476_1e9c47be1e81e94a67f788c98fd70e8bf70e3746_prepare.c_OLD.c @@ corruptSchema @@ 32 @@ ['zExtra[0]'] @@ {pData, zObj, zExtra, db, z}
static void corruptSchema(
InitData *pData,     /* Initialization context */
const char *zObj,    /* Object being parsed at the point of error */
const char *zExtra   /* Error information */
) location: 26 cross_layer: 1 file: prepare.c
sqlite3 * db = pData -> db ; location: 27 cross_layer: 1 file: prepare.c
if ( ! db -> mallocFailed && ( db -> flags & SQLITE_WriteSchema ) == 0 )  location: 28 cross_layer: 1 file: prepare.c
char * z ; location: 29 cross_layer: 1 file: prepare.c
if ( zObj == 0 )  location: 30 cross_layer: 1 file: prepare.c
zObj = "?"; location: 30 cross_layer: 1 file: prepare.c
z = sqlite3MPrintf ( db , "malformed database schema (%s)" , zObj ); location: 31 cross_layer: 1 file: prepare.c
* pData -> pzErrMsg = z; location: 34 cross_layer: 1 file: prepare.c    (key_var lines)
pData -> rc = db -> mallocFailed ? SQLITE_NOMEM_BKPT : SQLITE_CORRUPT_BKPT; location: 36 cross_layer: 1 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , sqlite3_errmsg ( db ) ); location: 97 cross_layer: 2 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , 0 ); location: 103 cross_layer: 2 file: prepare.c
pIndex = sqlite3FindIndex ( db , argv [ 0 ] , db -> aDb [ iDb ] . zDbSName ); location: 112 cross_layer: 2 file: prepare.c
if ( pIndex == 0 )  location: 113 cross_layer: 2 file: prepare.c
if ( sqlite3GetInt32 ( argv [ 1 ] , & pIndex -> tnum ) == 0 )  location: 120 cross_layer: 2 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , "invalid rootpage" ); location: 121 cross_layer: 2 file: prepare.c
sqlite3InitCallback ( & initData , 3 , ( char * * ) azArg , 0 ); location: 169 cross_layer: 3 file: prepare.c
if ( initData . rc )  location: 170 cross_layer: 3 file: prepare.c
rc = initData . rc; location: 171 cross_layer: 3 file: prepare.c
rc = sqlite3_exec ( db , zSql , sqlite3InitCallback , & initData , 0 ); location: 300 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK )  location: 305 cross_layer: 3 file: prepare.c
rc = initData . rc; location: 305 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK )  location: 308 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK || ( db -> flags & SQLITE_WriteSchema ) )  location: 317 cross_layer: 3 file: prepare.c
if ( rc )  location: 341 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_NOMEM || rc == SQLITE_IOERR_NOMEM )  location: 342 cross_layer: 3 file: prepare.c
return rc ; location: 348 cross_layer: 3 file: prepare.c
rc = sqlite3InitOne ( db , i , pzErrMsg ); location: 378 cross_layer: 4 file: prepare.c
if ( rc )  location: 379 cross_layer: 4 file: prepare.c
return rc ; location: 379 cross_layer: 4 file: prepare.c
------------------------------
10 @@ testCode/CVE-2018-8740_CWE-476_1e9c47be1e81e94a67f788c98fd70e8bf70e3746_prepare.c_OLD.c @@ corruptSchema @@ 32 @@ ['zExtra[0]'] @@ {pData, zObj, zExtra, db, z}
static void corruptSchema(
InitData *pData,     /* Initialization context */
const char *zObj,    /* Object being parsed at the point of error */
const char *zExtra   /* Error information */
) location: 26 cross_layer: 1 file: prepare.c
sqlite3 * db = pData -> db ; location: 27 cross_layer: 1 file: prepare.c
if ( ! db -> mallocFailed && ( db -> flags & SQLITE_WriteSchema ) == 0 )  location: 28 cross_layer: 1 file: prepare.c
char * z ; location: 29 cross_layer: 1 file: prepare.c
if ( zObj == 0 )  location: 30 cross_layer: 1 file: prepare.c
zObj = "?"; location: 30 cross_layer: 1 file: prepare.c
z = sqlite3MPrintf ( db , "malformed database schema (%s)" , zObj ); location: 31 cross_layer: 1 file: prepare.c
* pData -> pzErrMsg = z; location: 34 cross_layer: 1 file: prepare.c    (key_var lines)
pData -> rc = db -> mallocFailed ? SQLITE_NOMEM_BKPT : SQLITE_CORRUPT_BKPT; location: 36 cross_layer: 1 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , sqlite3_errmsg ( db ) ); location: 97 cross_layer: 2 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , 0 ); location: 103 cross_layer: 2 file: prepare.c
pIndex = sqlite3FindIndex ( db , argv [ 0 ] , db -> aDb [ iDb ] . zDbSName ); location: 112 cross_layer: 2 file: prepare.c
if ( pIndex == 0 )  location: 113 cross_layer: 2 file: prepare.c
if ( sqlite3GetInt32 ( argv [ 1 ] , & pIndex -> tnum ) == 0 )  location: 120 cross_layer: 2 file: prepare.c
corruptSchema ( pData , argv [ 0 ] , "invalid rootpage" ); location: 121 cross_layer: 2 file: prepare.c
sqlite3InitCallback ( & initData , 3 , ( char * * ) azArg , 0 ); location: 169 cross_layer: 3 file: prepare.c
if ( initData . rc )  location: 170 cross_layer: 3 file: prepare.c
rc = initData . rc; location: 171 cross_layer: 3 file: prepare.c
rc = sqlite3_exec ( db , zSql , sqlite3InitCallback , & initData , 0 ); location: 300 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK )  location: 305 cross_layer: 3 file: prepare.c
rc = initData . rc; location: 305 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK )  location: 308 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_OK || ( db -> flags & SQLITE_WriteSchema ) )  location: 317 cross_layer: 3 file: prepare.c
if ( rc )  location: 341 cross_layer: 3 file: prepare.c
if ( rc == SQLITE_NOMEM || rc == SQLITE_IOERR_NOMEM )  location: 342 cross_layer: 3 file: prepare.c
return rc ; location: 348 cross_layer: 3 file: prepare.c
rc = sqlite3InitOne ( db , 0 , pzErrMsg ); location: 372 cross_layer: 4 file: prepare.c
if ( rc )  location: 373 cross_layer: 4 file: prepare.c
return rc ; location: 373 cross_layer: 4 file: prepare.c
------------------------------
